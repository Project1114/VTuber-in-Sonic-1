00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		org 0
00000000                            		include 	"macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E                            MainGameLoop:
0000034E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000352 0240 001C                  		andi.w	#$1C,d0
00000356 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000035A 60F2                       		bra.s	MainGameLoop
0000035C                            ; ===========================================================================
0000035C                            ; ---------------------------------------------------------------------------
0000035C                            ; Main game mode array
0000035C                            ; ---------------------------------------------------------------------------
0000035C                            
0000035C                            GameModeArray:
0000035C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000360                            ; ===========================================================================
00000360 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000364                            ; ===========================================================================
00000364 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000368                            ; ===========================================================================
00000368 6000 0000                  		bra.w	Level		; Normal Level ($0C)
0000036C                            ; ===========================================================================
0000036C 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000370                            ; ===========================================================================
00000370 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000374                            ; ===========================================================================
00000374 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000378                            ; ===========================================================================
00000378 6000 0000                  		bra.w	Credits		; Credits ($1C)
0000037C                            ; ===========================================================================
0000037C 4E75                       		rts	
0000037E                            ; ===========================================================================
0000037E                            
0000037E                            loc_43A:
0000037E 46FC 2700                  		move	#$2700,sr
00000382 544F                       		addq.w	#2,sp
00000384 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000388 544F                       		addq.w	#2,sp
0000038A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000390 6100 0000                  		bsr.w	ShowErrorMsg
00000394 202F 0002                  		move.l	2(sp),d0
00000398 6100 0000                  		bsr.w	sub_5BA
0000039C 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003A0 6100 0000                  		bsr.w	sub_5BA
000003A4 6000                       		bra.s	loc_478
000003A6                            ; ===========================================================================
000003A6                            
000003A6                            loc_462:
000003A6 46FC 2700                  		move	#$2700,sr
000003AA 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003B0 6100 0000                  		bsr.w	ShowErrorMsg
000003B4 202F 0002                  		move.l	2(sp),d0
000003B8 6100 0000                  		bsr.w	sub_5BA
000003BC                            
000003BC                            loc_478:
000003BC 6100 0000                  		bsr.w	ErrorWaitForC
000003C0 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003C6 46FC 2300                  		move	#$2300,sr
000003CA 4E73                       		rte	
000003CC                            
000003CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003CC                            
000003CC                            
000003CC                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003CC 4DF9 00C0 0000             		lea	($C00000).l,a6
000003D2 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003DC 41F9 0000 0000             		lea	(Art_Text).l,a0
000003E2 323C 027F                  		move.w	#$27F,d1
000003E6                            
000003E6                            Error_LoadGfx:
000003E6 3C98                       		move.w	(a0)+,(a6)
000003E8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000003EC 7000                       		moveq	#0,d0		; clear	d0
000003EE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000003F2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000003F6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000003FA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000404 7212                       		moveq	#$12,d1		; number of characters
00000406                            
00000406                            Error_LoopChars:
00000406 7000                       		moveq	#0,d0
00000408 1018                       		move.b	(a0)+,d0
0000040A 0640 0790                  		addi.w	#$790,d0
0000040E 3C80                       		move.w	d0,(a6)
00000410 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000414 4E75                       		rts	
00000416                            ; End of function ShowErrorMsg
00000416                            
00000416                            ; ===========================================================================
00000416 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
0000041A 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000041E 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
00000422 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000426 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
0000042A 0000                       		dc.w asc_5A6-ErrorText
0000042C 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000043F 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000452 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000465 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000478 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000048B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000049E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004B1 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004C4 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004D7 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000004EA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000004FE 00                         		even
000004FE                            
000004FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004FE                            
000004FE                            
000004FE                            sub_5BA:				; XREF: loc_43A; loc_462
000004FE 3CBC 07CA                  		move.w	#$7CA,(a6)
00000502 7407                       		moveq	#7,d2
00000504                            
00000504                            loc_5C0:
00000504 E998                       		rol.l	#4,d0
00000506 6100                       		bsr.s	sub_5CA
00000508 51CA FFFA                  		dbf	d2,loc_5C0
0000050C 4E75                       		rts	
0000050E                            ; End of function sub_5BA
0000050E                            
0000050E                            
0000050E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000050E                            
0000050E                            
0000050E                            sub_5CA:				; XREF: sub_5BA
0000050E 3200                       		move.w	d0,d1
00000510 0241 000F                  		andi.w	#$F,d1
00000514 0C41 000A                  		cmpi.w	#$A,d1
00000518 6500                       		bcs.s	loc_5D8
0000051A 5E41                       		addq.w	#7,d1
0000051C                            
0000051C                            loc_5D8:
0000051C 0641 07C0                  		addi.w	#$7C0,d1
00000520 3C81                       		move.w	d1,(a6)
00000522 4E75                       		rts	
00000524                            ; End of function sub_5CA
00000524                            
00000524                            
00000524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000524                            
00000524                            
00000524                            ErrorWaitForC:				; XREF: loc_478
00000524 6100 0000                  		bsr.w	ReadJoypads
00000528 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000052E 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000532 4E75                       		rts	
00000534                            ; End of function ErrorWaitForC
00000534                            
00000534                            ; ===========================================================================
00000534                            
00000534                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A54                            		even
00000A54                            
00000A54                            ; ===========================================================================
00000A54                            
00000A54                            loc_B10:				; XREF: Vectors
00000A54 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A58 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A5C 6700                       		beq.s	loc_B88
00000A5E 3039 00C0 0004             		move.w	($C00004).l,d0
00000A64 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A6E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A76 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A7C 6700                       		beq.s	loc_B42
00000A7E 303C 0700                  		move.w	#$700,d0
00000A82                            
00000A82                            loc_B3E:
00000A82 51C8 FFFE                  		dbf	d0,loc_B3E
00000A86                            
00000A86                            loc_B42:
00000A86 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000A8A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000A90 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000A96 0240 003E                  		andi.w	#$3E,d0
00000A9A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000A9E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AA2                            
00000AA2                            loc_B5E:				; XREF: loc_B88
00000AA2 4EB9 0000 0000             		jsr	sub_71B4C
00000AA8                            
00000AA8                            loc_B64:				; XREF: loc_D50
00000AA8 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AAC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000AB0 4E73                       		rte	
00000AB2                            ; ===========================================================================
00000AB2 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AB6 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000ABA 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ABE 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000AC2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AC6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000ACA 0000                       		dc.w loc_E72-off_B6E
00000ACC                            ; ===========================================================================
00000ACC                            
00000ACC                            loc_B88:				; XREF: loc_B10; off_B6E
00000ACC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AD2 6700                       		beq.s	loc_B9A
00000AD4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000ADA 6600 FFC6                  		bne.w	loc_B5E
00000ADE                            
00000ADE                            loc_B9A:
00000ADE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000AE4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000AE8 3039 00C0 0004             		move.w	($C00004).l,d0
00000AEE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AF4 6700                       		beq.s	loc_BBA
00000AF6 303C 0700                  		move.w	#$700,d0
00000AFA                            
00000AFA                            loc_BB6:
00000AFA 51C8 FFFE                  		dbf	d0,loc_BB6
00000AFE                            
00000AFE                            loc_BBA:
00000AFE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B04 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B0C                            
00000B0C                            loc_BC8:
00000B0C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000B14 66F6                       		bne.s	loc_BC8
00000B16 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B1A 6600                       		bne.s	loc_BFE
00000B1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B22 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B28 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B2E 3ABC 977F                  		move.w	#$977F,(a5)
00000B32 3ABC C000                  		move.w	#$C000,(a5)
00000B36 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B40 6000                       		bra.s	loc_C22
00000B42                            ; ===========================================================================
00000B42                            
00000B42                            loc_BFE:				; XREF: loc_BC8
00000B42 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B48 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B4E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000B54 3ABC 977F                  		move.w	#$977F,(a5)
00000B58 3ABC C000                  		move.w	#$C000,(a5)
00000B5C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B62 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B66                            
00000B66                            loc_C22:				; XREF: loc_BC8
00000B66 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B6A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000B72 6000 FF2E                  		bra.w	loc_B5E
00000B76                            ; ===========================================================================
00000B76                            
00000B76                            loc_C32:				; XREF: off_B6E
00000B76 6100 0000                  		bsr.w	sub_106E
00000B7A                            
00000B7A                            loc_C36:				; XREF: off_B6E
00000B7A 4A78 F614                  		tst.w	($FFFFF614).w
00000B7E 6700 0000                  		beq.w	locret_C42
00000B82 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B86                            
00000B86                            locret_C42:
00000B86 4E75                       		rts	
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_C44:				; XREF: off_B6E
00000B88 6100 0000                  		bsr.w	sub_106E
00000B8C 6100 0000                  		bsr.w	sub_6886
00000B90 6100 0000                  		bsr.w	sub_1642
00000B94 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000B9A 4A78 F614                  		tst.w	($FFFFF614).w
00000B9E 6700 0000                  		beq.w	locret_C5C
00000BA2 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BA6                            
00000BA6                            locret_C5C:
00000BA6 4E75                       		rts	
00000BA8                            ; ===========================================================================
00000BA8                            
00000BA8                            loc_C5E:				; XREF: off_B6E
00000BA8 6100 0000                  		bsr.w	sub_106E
00000BAC 4E75                       		rts	
00000BAE                            ; ===========================================================================
00000BAE                            
00000BAE                            loc_C64:				; XREF: off_B6E
00000BAE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BB4 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BB8                            
00000BB8                            loc_C6E:				; XREF: off_B6E
00000BB8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000BC0                            
00000BC0                            loc_C76:
00000BC0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000BC8 66F6                       		bne.s	loc_C76		; if not, branch
00000BCA 6100 0000                  		bsr.w	ReadJoypads
00000BCE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD2 6600                       		bne.s	loc_CB0
00000BD4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BE6 3ABC 977F                  		move.w	#$977F,(a5)
00000BEA 3ABC C000                  		move.w	#$C000,(a5)
00000BEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF8 6000                       		bra.s	loc_CD4
00000BFA                            ; ===========================================================================
00000BFA                            
00000BFA                            loc_CB0:				; XREF: loc_C76
00000BFA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E                            
00000C1E                            loc_CD4:				; XREF: loc_C76
00000C1E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C28 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C2E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C34 3ABC 977F                  		move.w	#$977F,(a5)
00000C38 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C4C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C52 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C58 3ABC 977F                  		move.w	#$977F,(a5)
00000C5C 3ABC 7800                  		move.w	#$7800,(a5)
00000C60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C6A 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000C70                            
00000C70                            loc_D50:
00000C70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C96 6400                       		bcc.s	Demo_Time
00000C98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C9E 588F                       		addq.l	#4,sp
00000CA0 6000 FE06                  		bra.w	loc_B64
00000CA4                            
00000CA4                            ; ---------------------------------------------------------------------------
00000CA4                            ; Subroutine to	run a demo for an amount of time
00000CA4                            ; ---------------------------------------------------------------------------
00000CA4                            
00000CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CA4                            
00000CA4                            
00000CA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000CA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CA8 4EB9 0000 0000             		jsr	AniArt_Load
00000CAE 4EB9 0000 0000             		jsr	HudUpdate
00000CB4 6100 0000                  		bsr.w	sub_165E
00000CB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CC4                            
00000CC4                            Demo_TimeEnd:
00000CC4 4E75                       		rts	
00000CC6                            ; End of function Demo_Time
00000CC6                            
00000CC6                            ; ===========================================================================
00000CC6                            
00000CC6                            loc_DA6:				; XREF: off_B6E
00000CC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000CCE                            
00000CCE                            loc_DAE:
00000CCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000CD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000CD8 6100 0000                  		bsr.w	ReadJoypads
00000CDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CEE 3ABC 977F                  		move.w	#$977F,(a5)
00000CF2 3ABC C000                  		move.w	#$C000,(a5)
00000CF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D12 3ABC 977F                  		move.w	#$977F,(a5)
00000D16 3ABC 7800                  		move.w	#$7800,(a5)
00000D1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D24 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D30 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D36 3ABC 977F                  		move.w	#$977F,(a5)
00000D3A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D3E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D44 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D48 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D50 6100 0000                  		bsr.w	PalCycle_SS
00000D54 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000D5A                            
00000D5A                            loc_E64:
00000D5A 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D60 6400                       		bcc.s	@update
00000D62 6000 0000                  		bra.w	@end
00000D66                            
00000D66                            	@update:
00000D66 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D6C 4A78 F614                  		tst.w	($FFFFF614).w
00000D70 6700 0000                  		beq.w	@end
00000D74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D78                            
00000D78                            	@end:
00000D78 4E75                       		rts	
00000D7A                            ; ===========================================================================
00000D7A                            
00000D7A                            loc_E72:				; XREF: off_B6E
00000D7A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D82                            
00000D82                            loc_E7A:
00000D82 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D8A 66F6                       		bne.s	loc_E7A		; if not, branch
00000D8C 6100 0000                  		bsr.w	ReadJoypads
00000D90 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D94 6600                       		bne.s	loc_EB4
00000D96 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D9C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DA2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA8 3ABC 977F                  		move.w	#$977F,(a5)
00000DAC 3ABC C000                  		move.w	#$C000,(a5)
00000DB0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DBA 6000                       		bra.s	loc_ED8
00000DBC                            ; ===========================================================================
00000DBC                            
00000DBC                            loc_EB4:				; XREF: loc_E7A
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0                            
00000DE0                            loc_ED8:				; XREF: loc_E7A
00000DE0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DE4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DEA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DF0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DF6                            
00000DF6                            loc_EEE:
00000DF6 3ABC 977F                  		move.w	#$977F,(a5)
00000DFA 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DFE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E04 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E14 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E1A 3ABC 977F                  		move.w	#$977F,(a5)
00000E1E 3ABC 7800                  		move.w	#$7800,(a5)
00000E22 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E28 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2C 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000E32                            
00000E32                            loc_F54:
00000E32 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E3A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E40 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E46 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E4C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E52 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E56 4EB9 0000 0000             		jsr	AniArt_Load
00000E5C 4EB9 0000 0000             		jsr	HudUpdate
00000E62 6100 0000                  		bsr.w	sub_1642
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_F8A:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E70 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E76 4E75                       		rts	
00000E78                            ; ===========================================================================
00000E78                            
00000E78                            loc_F9A:				; XREF: off_B6E
00000E78 6100 0000                  		bsr.w	sub_106E
00000E7C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E80 6000 0000                  		bra.w	sub_1642
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_FA6:				; XREF: off_B6E
00000E84 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E8C                            
00000E8C                            loc_FAE:
00000E8C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E94 66F6                       		bne.s	loc_FAE		; if not, branch
00000E96 6100 0000                  		bsr.w	ReadJoypads
00000E9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EA6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EAC 3ABC 977F                  		move.w	#$977F,(a5)
00000EB0 3ABC C000                  		move.w	#$C000,(a5)
00000EB4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000ECA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000ED0 3ABC 977F                  		move.w	#$977F,(a5)
00000ED4 3ABC 7800                  		move.w	#$7800,(a5)
00000ED8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F0E 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000F14                            
00000F14                            loc_1060:
00000F14 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000F1A 6400                       		bcc.s	@update
00000F1C 6000 0000                  		bra.w	@end
00000F20                            
00000F20                            	@update:
00000F20 4EB9 0000 0000             		jsr	SS_LoadWalls
00000F26 4A78 F614                  		tst.w	($FFFFF614).w
00000F2A 6700 0000                  		beq.w	@end
00000F2E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F32                            
00000F32                            	@end:
00000F32 4E75                       		rts	
00000F34                            
00000F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F34                            
00000F34                            
00000F34                            sub_106E:				; XREF: loc_C32; et al
00000F34 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F3C                            
00000F3C                            loc_1076:
00000F3C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F44 66F6                       		bne.s	loc_1076	; if not, branch
00000F46 6100 0000                  		bsr.w	ReadJoypads
00000F4A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F4E 6600                       		bne.s	loc_10B0
00000F50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F56 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F5C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F62 3ABC 977F                  		move.w	#$977F,(a5)
00000F66 3ABC C000                  		move.w	#$C000,(a5)
00000F6A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F70 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F74 6000                       		bra.s	loc_10D4
00000F76                            ; ===========================================================================
00000F76                            
00000F76                            loc_10B0:				; XREF: sub_106E
00000F76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F7C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F82 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000F88 3ABC 977F                  		move.w	#$977F,(a5)
00000F8C 3ABC C000                  		move.w	#$C000,(a5)
00000F90 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F9A                            
00000F9A                            loc_10D4:				; XREF: sub_106E
00000F9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FA0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FA6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FAC 3ABC 977F                  		move.w	#$977F,(a5)
00000FB0 3ABC 7800                  		move.w	#$7800,(a5)
00000FB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000FCA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000FD0 3ABC 977F                  		move.w	#$977F,(a5)
00000FD4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000FD8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FEA 4E75                       		rts	
00000FEC                            ; End of function sub_106E
00000FEC                            
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            ; Subroutine to	move pallets from the RAM to CRAM
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            
00000FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FEC                            
00000FEC                            
00000FEC                            PalToCRAM:
00000FEC 46FC 2700                  		move	#$2700,sr
00000FF0 4A78 F644                  		tst.w	($FFFFF644).w
00000FF4 6700                       		beq.s	locret_119C
00000FF6 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000FFC 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001000 43F9 00C0 0000             		lea	($C00000).l,a1
00001006 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000100A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001012 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 2298                       		move.l	(a0)+,(a1)
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 2298                       		move.l	(a0)+,(a1)
0000104E 2298                       		move.l	(a0)+,(a1)
00001050 2298                       		move.l	(a0)+,(a1)
00001052 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001058 4CDF 0300                  		movem.l	(sp)+,a0-a1
0000105C 4A38 F64F                  		tst.b	($FFFFF64F).w
00001060 6600                       		bne.s	loc_119E
00001062                            
00001062                            locret_119C:
00001062 4E73                       		rte	
00001064                            ; ===========================================================================
00001064                            
00001064                            loc_119E:				; XREF: PalToCRAM
00001064 4238 F64F                  		clr.b	($FFFFF64F).w
00001068 48E7 FFFE                  		movem.l	d0-a6,-(sp)
0000106C 6100 FC36                  		bsr.w	Demo_Time
00001070 4EB9 0000 0000             		jsr	sub_71B4C
00001076 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
0000107A 4E73                       		rte	
0000107C                            ; End of function PalToCRAM
0000107C                            
0000107C                            ; ---------------------------------------------------------------------------
0000107C                            ; Subroutine to	initialise joypads
0000107C                            ; ---------------------------------------------------------------------------
0000107C                            
0000107C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000107C                            
0000107C                            
0000107C                            JoypadInit:				; XREF: GameClrRAM
0000107C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001084                            
00001084                            Joypad_WaitZ80:
00001084 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
0000108C 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
0000108E 7040                       		moveq	#$40,d0
00001090 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001096 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000109C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000010A2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000010AA 4E75                       		rts	
000010AC                            ; End of function JoypadInit
000010AC                            
000010AC                            ; ---------------------------------------------------------------------------
000010AC                            ; Subroutine to	read joypad input, and send it to the RAM
000010AC                            ; ---------------------------------------------------------------------------
000010AC                            
000010AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010AC                            
000010AC                            
000010AC                            ReadJoypads:
000010AC 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000010B0 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010B6 6100                       		bsr.s	Joypad_Read	; do the first joypad
000010B8 5449                       		addq.w	#2,a1		; do the second	joypad
000010BA                            
000010BA                            Joypad_Read:
000010BA 12BC 0000                  		move.b	#0,(a1)
000010BE 4E71                       		nop	
000010C0 4E71                       		nop	
000010C2 1011                       		move.b	(a1),d0
000010C4 E508                       		lsl.b	#2,d0
000010C6 0200 00C0                  		andi.b	#$C0,d0
000010CA 12BC 0040                  		move.b	#$40,(a1)
000010CE 4E71                       		nop	
000010D0 4E71                       		nop	
000010D2 1211                       		move.b	(a1),d1
000010D4 0201 003F                  		andi.b	#$3F,d1
000010D8 8001                       		or.b	d1,d0
000010DA 4600                       		not.b	d0
000010DC 1210                       		move.b	(a0),d1
000010DE B101                       		eor.b	d0,d1
000010E0 10C0                       		move.b	d0,(a0)+
000010E2 C200                       		and.b	d0,d1
000010E4 10C1                       		move.b	d1,(a0)+
000010E6 4E75                       		rts	
000010E8                            ; End of function ReadJoypads
000010E8                            
000010E8                            
000010E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E8                            
000010E8                            
000010E8                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000010E8 41F9 00C0 0004             		lea	($C00004).l,a0
000010EE 43F9 00C0 0000             		lea	($C00000).l,a1
000010F4 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010FA 7E12                       		moveq	#$12,d7
000010FC                            
000010FC                            VDP_Loop:
000010FC 309A                       		move.w	(a2)+,(a0)
000010FE 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001102                            
00001102 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001108 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000110C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001112 7000                       		moveq	#0,d0
00001114 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000111E 3E3C 003F                  		move.w	#$3F,d7
00001122                            
00001122                            VDP_ClrCRAM:
00001122 3280                       		move.w	d0,(a1)
00001124 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001128                            
00001128 42B8 F616                  		clr.l	($FFFFF616).w
0000112C 42B8 F61A                  		clr.l	($FFFFF61A).w
00001130 2F01                       		move.l	d1,-(sp)
00001132 4BF9 00C0 0004             		lea	($C00004).l,a5
00001138 3ABC 8F01                  		move.w	#$8F01,(a5)
0000113C 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001142 3ABC 9780                  		move.w	#$9780,(a5)
00001146 2ABC 4000 0080             		move.l	#$40000080,(a5)
0000114C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001154                            
00001154                            loc_128E:
00001154 3215                       		move.w	(a5),d1
00001156 0801 0001                  		btst	#1,d1
0000115A 66F8                       		bne.s	loc_128E
0000115C                            
0000115C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001160 221F                       		move.l	(sp)+,d1
00001162 4E75                       		rts	
00001164                            ; End of function VDPSetupGame
00001164                            
00001164                            ; ===========================================================================
00001164 8004 8174 8230 8328        VDPSetupArray:	dc.w $8004, $8174, $8230, $8328	; XREF: VDPSetupGame
0000116C 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001174 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
0000117C 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001184 9001 9100 9200             		dc.w $9001, $9100, $9200
0000118A                            
0000118A                            ; ---------------------------------------------------------------------------
0000118A                            ; Subroutine to	clear the screen
0000118A                            ; ---------------------------------------------------------------------------
0000118A                            
0000118A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000118A                            
0000118A                            
0000118A                            ClearScreen:
0000118A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001190 3ABC 8F01                  		move.w	#$8F01,(a5)
00001194 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000119A 3ABC 9780                  		move.w	#$9780,(a5)
0000119E 2ABC 4000 0083             		move.l	#$40000083,(a5)
000011A4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011AC                            
000011AC                            loc_12E6:
000011AC 3215                       		move.w	(a5),d1
000011AE 0801 0001                  		btst	#1,d1
000011B2 66F8                       		bne.s	loc_12E6
000011B4                            
000011B4 3ABC 8F02                  		move.w	#$8F02,(a5)
000011B8 4BF9 00C0 0004             		lea	($C00004).l,a5
000011BE 3ABC 8F01                  		move.w	#$8F01,(a5)
000011C2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011C8 3ABC 9780                  		move.w	#$9780,(a5)
000011CC 2ABC 6000 0083             		move.l	#$60000083,(a5)
000011D2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011DA                            
000011DA                            loc_1314:
000011DA 3215                       		move.w	(a5),d1
000011DC 0801 0001                  		btst	#1,d1
000011E0 66F8                       		bne.s	loc_1314
000011E2                            
000011E2 3ABC 8F02                  		move.w	#$8F02,(a5)
000011E6 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000011EE 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000011F6 43F8 F838                  		lea	($FFFFF838).w,a1
000011FA 7000                       		moveq	#0,d0
000011FC 323C 0092                  		move.w	#$92,d1
00001200                            
00001200                            loc_133A:
00001200 22C0                       		move.l	d0,(a1)+
00001202 51C9 FFFC                  		dbf	d1,loc_133A
00001206                            
00001206 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000120A 7000                       		moveq	#0,d0
0000120C 323C 0100                  		move.w	#$100,d1
00001210                            
00001210                            loc_134A:
00001210 22C0                       		move.l	d0,(a1)+
00001212 51C9 FFFC                  		dbf	d1,loc_134A
00001216 4E75                       		rts	
00001218                            ; End of function ClearScreen
00001218                            
00001218                            ; ---------------------------------------------------------------------------
00001218                            ; Subroutine to	load the sound driver
00001218                            ; ---------------------------------------------------------------------------
00001218                            
00001218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001218                            
00001218                            
00001218                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001218 4E71                       		nop	
0000121A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001222 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000122A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001230 43F9 00A0 0000             		lea	($A00000).l,a1
00001236 6100 0000                  		bsr.w	KosDec		; decompress
0000123A 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001242 4E71                       		nop	
00001244 4E71                       		nop	
00001246 4E71                       		nop	
00001248 4E71                       		nop	
0000124A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001252 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000125A 4E75                       		rts	
0000125C                            ; End of function SoundDriverLoad
0000125C                            
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	play a sound or	music track
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PlaySound:
0000125C 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001260 4E75                       		rts	
00001262                            ; End of function PlaySound
00001262                            
00001262                            ; ---------------------------------------------------------------------------
00001262                            ; Subroutine to	play a special sound/music (E0-E4)
00001262                            ;
00001262                            ; E0 - Fade out
00001262                            ; E1 - Sega
00001262                            ; E2 - Speed up
00001262                            ; E3 - Normal speed
00001262                            ; E4 - Stop
00001262                            ; ---------------------------------------------------------------------------
00001262                            
00001262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001262                            
00001262                            
00001262                            PlaySound_Special:
00001262 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001266 4E75                       		rts	
00001268                            ; End of function PlaySound_Special
00001268                            
00001268                            ; ===========================================================================
00001268                            ; ---------------------------------------------------------------------------
00001268                            ; Unused sound/music subroutine
00001268                            ; ---------------------------------------------------------------------------
00001268                            
00001268                            PlaySound_Unk:
00001268 11C0 F00C                  		move.b	d0,($FFFFF00C).w
0000126C 4E75                       		rts	
0000126E                            
0000126E                            ; ---------------------------------------------------------------------------
0000126E                            ; Subroutine to	pause the game
0000126E                            ; ---------------------------------------------------------------------------
0000126E                            
0000126E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000126E                            
0000126E                            
0000126E                            PauseGame:				; XREF: Level_MainLoop; et al
0000126E 4E71                       		nop	
00001270 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001274 6700 0000                  		beq.w	Unpause		; if not, branch
00001278 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000127C 6600                       		bne.s	loc_13BE	; if yes, branch
0000127E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001284 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
00001288                            
00001288                            loc_13BE:
00001288 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000128E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001294                            
00001294                            loc_13CA:
00001294 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000129A 6100 0000                  		bsr.w	DelayProgram
0000129E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000012A2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012A4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000012AA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012AC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000012B2 4E71                       		nop	
000012B4 6000                       		bra.s	loc_1404
000012B6                            ; ===========================================================================
000012B6                            
000012B6                            Pause_ChkBC:				; XREF: PauseGame
000012B6 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000012BC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012BE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000012C4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012C6                            
000012C6                            Pause_ChkStart:				; XREF: PauseGame
000012C6 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
000012CA 6600                       		bne.s	@waitlonger
000012CC 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
000012D2 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
000012D8 6000                       		bra.s	@cont
000012DA                            
000012DA                            	@waitlonger:
000012DA 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
000012DE                            
000012DE                            	@cont:
000012DE 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
000012E2 7000                       		moveq	#0,d0
000012E4 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
000012E6 4EB9 0000 0000             		jsr		loc_D368
000012EC 4EB9 0000 0000             		jsr		BuildSprites
000012F2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000012F8 6600                       		bne.s	@notss
000012FA 4EB9 0000 0000             		jsr	SS_ShowLayout
00001300                            
00001300                            	@notss:
00001300 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001306 678C                       		beq.s	loc_13CA	; if not, branch
00001308 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
0000130E                            
0000130E                            loc_1404:				; XREF: PauseGame
0000130E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001314                            
00001314                            Unpause:				; XREF: PauseGame
00001314 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000131A                            
0000131A                            Pause_DoNothing:			; XREF: PauseGame
0000131A 4E75                       		rts	
0000131C                            ; ===========================================================================
0000131C                            
0000131C                            Pause_SlowMo:				; XREF: PauseGame
0000131C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001322 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001328 4E75                       		rts	
0000132A                            ; End of function PauseGame
0000132A                            
0000132A                            ; ---------------------------------------------------------------------------
0000132A                            ; Subroutine to	display	patterns via the VDP
0000132A                            ; ---------------------------------------------------------------------------
0000132A                            
0000132A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000132A                            
0000132A                            
0000132A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000132A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001330 283C 0080 0000             		move.l	#$800000,d4
00001336                            
00001336                            loc_142C:
00001336 2D40 0004                  		move.l	d0,4(a6)
0000133A 3601                       		move.w	d1,d3
0000133C                            
0000133C                            loc_1432:
0000133C 3C99                       		move.w	(a1)+,(a6)
0000133E 51CB FFFC                  		dbf	d3,loc_1432
00001342 D084                       		add.l	d4,d0
00001344 51CA FFF0                  		dbf	d2,loc_142C
00001348 4E75                       		rts	
0000134A                            ; End of function ShowVDPGraphics
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Nemesis decompression	algorithm
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            NemDec:
0000134A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000134E 47F9 0000 0000             		lea	(loc_1502).l,a3
00001354 49F9 00C0 0000             		lea	($C00000).l,a4
0000135A 6000                       		bra.s	loc_145C
0000135C                            ; ===========================================================================
0000135C 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001360 47F9 0000 0000             		lea	(loc_1518).l,a3
00001366                            
00001366                            loc_145C:				; XREF: NemDec
00001366 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000136A 3418                       		move.w	(a0)+,d2
0000136C E34A                       		lsl.w	#1,d2
0000136E 6400                       		bcc.s	loc_146A
00001370 D6FC 000A                  		adda.w	#$A,a3
00001374                            
00001374                            loc_146A:
00001374 E54A                       		lsl.w	#2,d2
00001376 3A42                       		movea.w	d2,a5
00001378 7608                       		moveq	#8,d3
0000137A 7400                       		moveq	#0,d2
0000137C 7800                       		moveq	#0,d4
0000137E 6100 0000                  		bsr.w	NemDec4
00001382 1A18                       		move.b	(a0)+,d5
00001384 E145                       		asl.w	#8,d5
00001386 1A18                       		move.b	(a0)+,d5
00001388 3C3C 0010                  		move.w	#$10,d6
0000138C 6100                       		bsr.s	NemDec2
0000138E 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001392 4E75                       		rts	
00001394                            ; End of function NemDec
00001394                            
00001394                            
00001394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001394                            
00001394                            
00001394                            NemDec2:				; XREF: NemDec
00001394 3E06                       		move.w	d6,d7
00001396 5147                       		subq.w	#8,d7
00001398 3205                       		move.w	d5,d1
0000139A EE69                       		lsr.w	d7,d1
0000139C 0C01 00FC                  		cmpi.b	#-4,d1
000013A0 6400                       		bcc.s	loc_14D6
000013A2 0241 00FF                  		andi.w	#$FF,d1
000013A6 D241                       		add.w	d1,d1
000013A8 1031 1000                  		move.b	(a1,d1.w),d0
000013AC 4880                       		ext.w	d0
000013AE 9C40                       		sub.w	d0,d6
000013B0 0C46 0009                  		cmpi.w	#9,d6
000013B4 6400                       		bcc.s	loc_14B2
000013B6 5046                       		addq.w	#8,d6
000013B8 E145                       		asl.w	#8,d5
000013BA 1A18                       		move.b	(a0)+,d5
000013BC                            
000013BC                            loc_14B2:
000013BC 1231 1001                  		move.b	1(a1,d1.w),d1
000013C0 3001                       		move.w	d1,d0
000013C2 0241 000F                  		andi.w	#$F,d1
000013C6 0240 00F0                  		andi.w	#$F0,d0
000013CA                            
000013CA                            loc_14C0:				; XREF: NemDec3
000013CA E848                       		lsr.w	#4,d0
000013CC                            
000013CC                            loc_14C2:				; XREF: NemDec3
000013CC E98C                       		lsl.l	#4,d4
000013CE 8801                       		or.b	d1,d4
000013D0 5343                       		subq.w	#1,d3
000013D2 6600                       		bne.s	loc_14D0
000013D4 4ED3                       		jmp	(a3)
000013D6                            ; End of function NemDec2
000013D6                            
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            NemDec3:				; XREF: loc_1502
000013D6 7800                       		moveq	#0,d4
000013D8 7608                       		moveq	#8,d3
000013DA                            
000013DA                            loc_14D0:				; XREF: NemDec2
000013DA 51C8 FFF0                  		dbf	d0,loc_14C2
000013DE 60B4                       		bra.s	NemDec2
000013E0                            ; ===========================================================================
000013E0                            
000013E0                            loc_14D6:				; XREF: NemDec2
000013E0 5D46                       		subq.w	#6,d6
000013E2 0C46 0009                  		cmpi.w	#9,d6
000013E6 6400                       		bcc.s	loc_14E4
000013E8 5046                       		addq.w	#8,d6
000013EA E145                       		asl.w	#8,d5
000013EC 1A18                       		move.b	(a0)+,d5
000013EE                            
000013EE                            loc_14E4:				; XREF: NemDec3
000013EE 5F46                       		subq.w	#7,d6
000013F0 3205                       		move.w	d5,d1
000013F2 EC69                       		lsr.w	d6,d1
000013F4 3001                       		move.w	d1,d0
000013F6 0241 000F                  		andi.w	#$F,d1
000013FA 0240 0070                  		andi.w	#$70,d0
000013FE 0C46 0009                  		cmpi.w	#9,d6
00001402 64C6                       		bcc.s	loc_14C0
00001404 5046                       		addq.w	#8,d6
00001406 E145                       		asl.w	#8,d5
00001408 1A18                       		move.b	(a0)+,d5
0000140A 60BE                       		bra.s	loc_14C0
0000140C                            ; End of function NemDec3
0000140C                            
0000140C                            ; ===========================================================================
0000140C                            
0000140C                            loc_1502:				; XREF: NemDec
0000140C 2884                       		move.l	d4,(a4)
0000140E 534D                       		subq.w	#1,a5
00001410 380D                       		move.w	a5,d4
00001412 66C2                       		bne.s	NemDec3
00001414 4E75                       		rts	
00001416                            ; ===========================================================================
00001416 B982                       		eor.l	d4,d2
00001418 2882                       		move.l	d2,(a4)
0000141A 534D                       		subq.w	#1,a5
0000141C 380D                       		move.w	a5,d4
0000141E 66B6                       		bne.s	NemDec3
00001420 4E75                       		rts	
00001422                            ; ===========================================================================
00001422                            
00001422                            loc_1518:				; XREF: NemDec
00001422 28C4                       		move.l	d4,(a4)+
00001424 534D                       		subq.w	#1,a5
00001426 380D                       		move.w	a5,d4
00001428 66AC                       		bne.s	NemDec3
0000142A 4E75                       		rts	
0000142C                            ; ===========================================================================
0000142C B982                       		eor.l	d4,d2
0000142E 28C2                       		move.l	d2,(a4)+
00001430 534D                       		subq.w	#1,a5
00001432 380D                       		move.w	a5,d4
00001434 66A0                       		bne.s	NemDec3
00001436 4E75                       		rts	
00001438                            
00001438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001438                            
00001438                            
00001438                            NemDec4:				; XREF: NemDec
00001438 1018                       		move.b	(a0)+,d0
0000143A                            
0000143A                            loc_1530:
0000143A 0C00 00FF                  		cmpi.b	#-1,d0
0000143E 6600                       		bne.s	loc_1538
00001440 4E75                       		rts	
00001442                            ; ===========================================================================
00001442                            
00001442                            loc_1538:				; XREF: NemDec4
00001442 3E00                       		move.w	d0,d7
00001444                            
00001444                            loc_153A:
00001444 1018                       		move.b	(a0)+,d0
00001446 0C00 0080                  		cmpi.b	#$80,d0
0000144A 64EE                       		bcc.s	loc_1530
0000144C 1200                       		move.b	d0,d1
0000144E 0247 000F                  		andi.w	#$F,d7
00001452 0241 0070                  		andi.w	#$70,d1
00001456 8E41                       		or.w	d1,d7
00001458 0240 000F                  		andi.w	#$F,d0
0000145C 1200                       		move.b	d0,d1
0000145E E149                       		lsl.w	#8,d1
00001460 8E41                       		or.w	d1,d7
00001462 7208                       		moveq	#8,d1
00001464 9240                       		sub.w	d0,d1
00001466 6600                       		bne.s	loc_1568
00001468 1018                       		move.b	(a0)+,d0
0000146A D040                       		add.w	d0,d0
0000146C 3387 0000                  		move.w	d7,(a1,d0.w)
00001470 60D2                       		bra.s	loc_153A
00001472                            ; ===========================================================================
00001472                            
00001472                            loc_1568:				; XREF: NemDec4
00001472 1018                       		move.b	(a0)+,d0
00001474 E368                       		lsl.w	d1,d0
00001476 D040                       		add.w	d0,d0
00001478 7A01                       		moveq	#1,d5
0000147A E36D                       		lsl.w	d1,d5
0000147C 5345                       		subq.w	#1,d5
0000147E                            
0000147E                            loc_1574:
0000147E 3387 0000                  		move.w	d7,(a1,d0.w)
00001482 5440                       		addq.w	#2,d0
00001484 51CD FFF8                  		dbf	d5,loc_1574
00001488 60BA                       		bra.s	loc_153A
0000148A                            ; End of function NemDec4
0000148A                            
0000148A                            ; ---------------------------------------------------------------------------
0000148A                            ; Subroutine to	load pattern load cues
0000148A                            ; ---------------------------------------------------------------------------
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            LoadPLC:
0000148A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000148E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001494 D040                       		add.w	d0,d0
00001496 3031 0000                  		move.w	(a1,d0.w),d0
0000149A 43F1 0000                  		lea	(a1,d0.w),a1
0000149E 45F8 F680                  		lea	($FFFFF680).w,a2
000014A2                            
000014A2                            loc_1598:
000014A2 4A92                       		tst.l	(a2)
000014A4 6700                       		beq.s	loc_15A0
000014A6 5C4A                       		addq.w	#6,a2
000014A8 60F8                       		bra.s	loc_1598
000014AA                            ; ===========================================================================
000014AA                            
000014AA                            loc_15A0:				; XREF: LoadPLC
000014AA 3019                       		move.w	(a1)+,d0
000014AC 6B00                       		bmi.s	loc_15AC
000014AE                            
000014AE                            loc_15A4:
000014AE 24D9                       		move.l	(a1)+,(a2)+
000014B0 34D9                       		move.w	(a1)+,(a2)+
000014B2 51C8 FFFA                  		dbf	d0,loc_15A4
000014B6                            
000014B6                            loc_15AC:
000014B6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014BA 4E75                       		rts	
000014BC                            ; End of function LoadPLC
000014BC                            
000014BC                            
000014BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014BC                            
000014BC                            
000014BC                            LoadPLC2:
000014BC 48E7 0060                  		movem.l	a1-a2,-(sp)
000014C0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000014C6 D040                       		add.w	d0,d0
000014C8 3031 0000                  		move.w	(a1,d0.w),d0
000014CC 43F1 0000                  		lea	(a1,d0.w),a1
000014D0 6100                       		bsr.s	ClearPLC
000014D2 45F8 F680                  		lea	($FFFFF680).w,a2
000014D6 3019                       		move.w	(a1)+,d0
000014D8 6B00                       		bmi.s	loc_15D8
000014DA                            
000014DA                            loc_15D0:
000014DA 24D9                       		move.l	(a1)+,(a2)+
000014DC 34D9                       		move.w	(a1)+,(a2)+
000014DE 51C8 FFFA                  		dbf	d0,loc_15D0
000014E2                            
000014E2                            loc_15D8:
000014E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014E6 4E75                       		rts	
000014E8                            ; End of function LoadPLC2
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the pattern load cues
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearPLC:				; XREF: LoadPLC2
000014E8 45F8 F680                  		lea	($FFFFF680).w,a2
000014EC 701F                       		moveq	#$1F,d0
000014EE                            
000014EE                            ClearPLC_Loop:
000014EE 429A                       		clr.l	(a2)+
000014F0 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000014F4 4E75                       		rts	
000014F6                            ; End of function ClearPLC
000014F6                            
000014F6                            ; ---------------------------------------------------------------------------
000014F6                            ; Subroutine to	use graphics listed in a pattern load cue
000014F6                            ; ---------------------------------------------------------------------------
000014F6                            
000014F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014F6                            
000014F6                            
000014F6                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014F6 4AB8 F680                  		tst.l	($FFFFF680).w
000014FA 6700                       		beq.s	locret_1640
000014FC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001500 6600                       		bne.s	locret_1640
00001502 2078 F680                  		movea.l	($FFFFF680).w,a0
00001506 47F9 0000 140C             		lea	(loc_1502).l,a3
0000150C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001510 3418                       		move.w	(a0)+,d2
00001512 6A00                       		bpl.s	loc_160E
00001514 D6FC 000A                  		adda.w	#$A,a3
00001518                            
00001518                            loc_160E:
00001518 0242 7FFF                  		andi.w	#$7FFF,d2
0000151C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001520 6100 FF16                  		bsr.w	NemDec4
00001524 1A18                       		move.b	(a0)+,d5
00001526 E145                       		asl.w	#8,d5
00001528 1A18                       		move.b	(a0)+,d5
0000152A 7C10                       		moveq	#$10,d6
0000152C 7000                       		moveq	#0,d0
0000152E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001532 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001536 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000153A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000153E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001542 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001546 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000154A                            
0000154A                            locret_1640:
0000154A 4E75                       		rts	
0000154C                            ; End of function RunPLC_RAM
0000154C                            
0000154C                            
0000154C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000154C                            
0000154C                            
0000154C                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
0000154C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001550 6700 0000                  		beq.w	locret_16DA
00001554 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000155A 7000                       		moveq	#0,d0
0000155C 3038 F684                  		move.w	($FFFFF684).w,d0
00001560 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001566 6000                       		bra.s	loc_1676
00001568                            ; End of function sub_1642
00001568                            
00001568                            
00001568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001568                            
00001568                            
00001568                            sub_165E:				; XREF: Demo_Time
00001568 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000156C 6700                       		beq.s	locret_16DA
0000156E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001574 7000                       		moveq	#0,d0
00001576 3038 F684                  		move.w	($FFFFF684).w,d0
0000157A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001580                            
00001580                            loc_1676:				; XREF: sub_1642
00001580 49F9 00C0 0004             		lea	($C00004).l,a4
00001586 E588                       		lsl.l	#2,d0
00001588 E448                       		lsr.w	#2,d0
0000158A 0040 4000                  		ori.w	#$4000,d0
0000158E 4840                       		swap	d0
00001590 2880                       		move.l	d0,(a4)
00001592 594C                       		subq.w	#4,a4
00001594 2078 F680                  		movea.l	($FFFFF680).w,a0
00001598 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
0000159C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000015A0 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000015A4 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000015A8 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000015AC 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000015B0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015B4                            
000015B4                            loc_16AA:				; XREF: sub_165E
000015B4 3A7C 0008                  		movea.w	#8,a5
000015B8 6100 FE1C                  		bsr.w	NemDec3
000015BC 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000015C0 6700                       		beq.s	loc_16DC
000015C2 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000015C6 66EC                       		bne.s	loc_16AA
000015C8 21C8 F680                  		move.l	a0,($FFFFF680).w
000015CC 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015D0 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015D4 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015D8 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015DC 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015E0 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015E4                            
000015E4                            locret_16DA:				; XREF: sub_1642
000015E4 4E75                       		rts	
000015E6                            ; ===========================================================================
000015E6                            
000015E6                            loc_16DC:				; XREF: sub_165E
000015E6 41F8 F680                  		lea	($FFFFF680).w,a0
000015EA 7015                       		moveq	#$15,d0
000015EC                            
000015EC                            loc_16E2:				; XREF: sub_165E
000015EC 20E8 0006                  		move.l	6(a0),(a0)+
000015F0 51C8 FFFA                  		dbf	d0,loc_16E2
000015F4 4E75                       		rts	
000015F6                            ; End of function sub_165E
000015F6                            
000015F6                            ; ---------------------------------------------------------------------------
000015F6                            ; Subroutine to	execute	the pattern load cue
000015F6                            ; ---------------------------------------------------------------------------
000015F6                            
000015F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F6                            
000015F6                            
000015F6                            RunPLC_ROM:
000015F6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015FC D040                       		add.w	d0,d0
000015FE 3031 0000                  		move.w	(a1,d0.w),d0
00001602 43F1 0000                  		lea	(a1,d0.w),a1
00001606 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001608                            
00001608                            RunPLC_Loop:
00001608 2059                       		movea.l	(a1)+,a0	; get art pointer
0000160A 7000                       		moveq	#0,d0
0000160C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000160E E588                       		lsl.l	#2,d0		; divide address by $20
00001610 E448                       		lsr.w	#2,d0
00001612 0040 4000                  		ori.w	#$4000,d0
00001616 4840                       		swap	d0
00001618 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000161E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001622 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001626 4E75                       		rts	
00001628                            ; End of function RunPLC_ROM
00001628                            
00001628                            ; ---------------------------------------------------------------------------
00001628                            ; Enigma decompression algorithm
00001628                            ; ---------------------------------------------------------------------------
00001628                            
00001628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001628                            
00001628                            
00001628                            EniDec:
00001628 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000162C 3640                       		movea.w	d0,a3
0000162E 1018                       		move.b	(a0)+,d0
00001630 4880                       		ext.w	d0
00001632 3A40                       		movea.w	d0,a5
00001634 1818                       		move.b	(a0)+,d4
00001636 E70C                       		lsl.b	#3,d4
00001638 3458                       		movea.w	(a0)+,a2
0000163A D4CB                       		adda.w	a3,a2
0000163C 3858                       		movea.w	(a0)+,a4
0000163E D8CB                       		adda.w	a3,a4
00001640 1A18                       		move.b	(a0)+,d5
00001642 E145                       		asl.w	#8,d5
00001644 1A18                       		move.b	(a0)+,d5
00001646 7C10                       		moveq	#$10,d6
00001648                            
00001648                            loc_173E:				; XREF: loc_1768
00001648 7007                       		moveq	#7,d0
0000164A 3E06                       		move.w	d6,d7
0000164C 9E40                       		sub.w	d0,d7
0000164E 3205                       		move.w	d5,d1
00001650 EE69                       		lsr.w	d7,d1
00001652 0241 007F                  		andi.w	#$7F,d1
00001656 3401                       		move.w	d1,d2
00001658 0C41 0040                  		cmpi.w	#$40,d1
0000165C 6400                       		bcc.s	loc_1758
0000165E 7006                       		moveq	#6,d0
00001660 E24A                       		lsr.w	#1,d2
00001662                            
00001662                            loc_1758:
00001662 6100 0000                  		bsr.w	sub_188C
00001666 0242 000F                  		andi.w	#$F,d2
0000166A E849                       		lsr.w	#4,d1
0000166C D241                       		add.w	d1,d1
0000166E 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001672                            ; End of function EniDec
00001672                            
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1768:				; XREF: loc_17B4
00001672 32CA                       		move.w	a2,(a1)+
00001674 524A                       		addq.w	#1,a2
00001676 51CA FFFA                  		dbf	d2,loc_1768
0000167A 60CC                       		bra.s	loc_173E
0000167C                            ; ===========================================================================
0000167C                            
0000167C                            loc_1772:				; XREF: loc_17B4
0000167C 32CC                       		move.w	a4,(a1)+
0000167E 51CA FFFC                  		dbf	d2,loc_1772
00001682 60C4                       		bra.s	loc_173E
00001684                            ; ===========================================================================
00001684                            
00001684                            loc_177A:				; XREF: loc_17B4
00001684 6100 0000                  		bsr.w	loc_17DC
00001688                            
00001688                            loc_177E:
00001688 32C1                       		move.w	d1,(a1)+
0000168A 51CA FFFC                  		dbf	d2,loc_177E
0000168E 60B8                       		bra.s	loc_173E
00001690                            ; ===========================================================================
00001690                            
00001690                            loc_1786:				; XREF: loc_17B4
00001690 6100 0000                  		bsr.w	loc_17DC
00001694                            
00001694                            loc_178A:
00001694 32C1                       		move.w	d1,(a1)+
00001696 5241                       		addq.w	#1,d1
00001698 51CA FFFA                  		dbf	d2,loc_178A
0000169C 60AA                       		bra.s	loc_173E
0000169E                            ; ===========================================================================
0000169E                            
0000169E                            loc_1794:				; XREF: loc_17B4
0000169E 6100 0000                  		bsr.w	loc_17DC
000016A2                            
000016A2                            loc_1798:
000016A2 32C1                       		move.w	d1,(a1)+
000016A4 5341                       		subq.w	#1,d1
000016A6 51CA FFFA                  		dbf	d2,loc_1798
000016AA 609C                       		bra.s	loc_173E
000016AC                            ; ===========================================================================
000016AC                            
000016AC                            loc_17A2:				; XREF: loc_17B4
000016AC 0C42 000F                  		cmpi.w	#$F,d2
000016B0 6700                       		beq.s	loc_17C4
000016B2                            
000016B2                            loc_17A8:
000016B2 6100 0000                  		bsr.w	loc_17DC
000016B6 32C1                       		move.w	d1,(a1)+
000016B8 51CA FFF8                  		dbf	d2,loc_17A8
000016BC 608A                       		bra.s	loc_173E
000016BE                            ; ===========================================================================
000016BE                            
000016BE                            loc_17B4:				; XREF: EniDec
000016BE 60B2                       		bra.s	loc_1768
000016C0                            ; ===========================================================================
000016C0 60B0                       		bra.s	loc_1768
000016C2                            ; ===========================================================================
000016C2 60B8                       		bra.s	loc_1772
000016C4                            ; ===========================================================================
000016C4 60B6                       		bra.s	loc_1772
000016C6                            ; ===========================================================================
000016C6 60BC                       		bra.s	loc_177A
000016C8                            ; ===========================================================================
000016C8 60C6                       		bra.s	loc_1786
000016CA                            ; ===========================================================================
000016CA 60D2                       		bra.s	loc_1794
000016CC                            ; ===========================================================================
000016CC 60DE                       		bra.s	loc_17A2
000016CE                            ; ===========================================================================
000016CE                            
000016CE                            loc_17C4:				; XREF: loc_17A2
000016CE 5348                       		subq.w	#1,a0
000016D0 0C46 0010                  		cmpi.w	#$10,d6
000016D4 6600                       		bne.s	loc_17CE
000016D6 5348                       		subq.w	#1,a0
000016D8                            
000016D8                            loc_17CE:
000016D8 3008                       		move.w	a0,d0
000016DA E248                       		lsr.w	#1,d0
000016DC 6400                       		bcc.s	loc_17D6
000016DE 5248                       		addq.w	#1,a0
000016E0                            
000016E0                            loc_17D6:
000016E0 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016E4 4E75                       		rts	
000016E6                            ; ===========================================================================
000016E6                            
000016E6                            loc_17DC:				; XREF: loc_17A2
000016E6 360B                       		move.w	a3,d3
000016E8 1204                       		move.b	d4,d1
000016EA D201                       		add.b	d1,d1
000016EC 6400                       		bcc.s	loc_17EE
000016EE 5346                       		subq.w	#1,d6
000016F0 0D05                       		btst	d6,d5
000016F2 6700                       		beq.s	loc_17EE
000016F4 0043 8000                  		ori.w	#-$8000,d3
000016F8                            
000016F8                            loc_17EE:
000016F8 D201                       		add.b	d1,d1
000016FA 6400                       		bcc.s	loc_17FC
000016FC 5346                       		subq.w	#1,d6
000016FE 0D05                       		btst	d6,d5
00001700 6700                       		beq.s	loc_17FC
00001702 0643 4000                  		addi.w	#$4000,d3
00001706                            
00001706                            loc_17FC:
00001706 D201                       		add.b	d1,d1
00001708 6400                       		bcc.s	loc_180A
0000170A 5346                       		subq.w	#1,d6
0000170C 0D05                       		btst	d6,d5
0000170E 6700                       		beq.s	loc_180A
00001710 0643 2000                  		addi.w	#$2000,d3
00001714                            
00001714                            loc_180A:
00001714 D201                       		add.b	d1,d1
00001716 6400                       		bcc.s	loc_1818
00001718 5346                       		subq.w	#1,d6
0000171A 0D05                       		btst	d6,d5
0000171C 6700                       		beq.s	loc_1818
0000171E 0043 1000                  		ori.w	#$1000,d3
00001722                            
00001722                            loc_1818:
00001722 D201                       		add.b	d1,d1
00001724 6400                       		bcc.s	loc_1826
00001726 5346                       		subq.w	#1,d6
00001728 0D05                       		btst	d6,d5
0000172A 6700                       		beq.s	loc_1826
0000172C 0043 0800                  		ori.w	#$800,d3
00001730                            
00001730                            loc_1826:
00001730 3205                       		move.w	d5,d1
00001732 3E06                       		move.w	d6,d7
00001734 9E4D                       		sub.w	a5,d7
00001736 6400                       		bcc.s	loc_1856
00001738 3C07                       		move.w	d7,d6
0000173A 0646 0010                  		addi.w	#$10,d6
0000173E 4447                       		neg.w	d7
00001740 EF69                       		lsl.w	d7,d1
00001742 1A10                       		move.b	(a0),d5
00001744 EF3D                       		rol.b	d7,d5
00001746 DE47                       		add.w	d7,d7
00001748 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
0000174C D245                       		add.w	d5,d1
0000174E                            
0000174E                            loc_1844:				; XREF: loc_1868
0000174E 300D                       		move.w	a5,d0
00001750 D040                       		add.w	d0,d0
00001752 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001756 D243                       		add.w	d3,d1
00001758 1A18                       		move.b	(a0)+,d5
0000175A E14D                       		lsl.w	#8,d5
0000175C 1A18                       		move.b	(a0)+,d5
0000175E 4E75                       		rts	
00001760                            ; ===========================================================================
00001760                            
00001760                            loc_1856:				; XREF: loc_1826
00001760 6700                       		beq.s	loc_1868
00001762 EE69                       		lsr.w	d7,d1
00001764 300D                       		move.w	a5,d0
00001766 D040                       		add.w	d0,d0
00001768 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000176C D243                       		add.w	d3,d1
0000176E 300D                       		move.w	a5,d0
00001770 6000                       		bra.s	sub_188C
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1868:				; XREF: loc_1856
00001772 7C10                       		moveq	#$10,d6
00001774                            
00001774                            loc_186A:
00001774 60D8                       		bra.s	loc_1844
00001776                            ; ===========================================================================
00001776 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
0000178C 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001796                            
00001796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001796                            
00001796                            
00001796                            sub_188C:				; XREF: EniDec
00001796 9C40                       		sub.w	d0,d6
00001798 0C46 0009                  		cmpi.w	#9,d6
0000179C 6400                       		bcc.s	locret_189A
0000179E 5046                       		addq.w	#8,d6
000017A0 E145                       		asl.w	#8,d5
000017A2 1A18                       		move.b	(a0)+,d5
000017A4                            
000017A4                            locret_189A:
000017A4 4E75                       		rts	
000017A6                            ; End of function sub_188C
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Kosinski decompression algorithm
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            KosDec:
000017A6                            
000017A6 =FFFFFFFE                  var_2		= -2
000017A6 =FFFFFFFF                  var_1		= -1
000017A6                            
000017A6 558F                       		subq.l	#2,sp
000017A8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017AC 1E98                       		move.b	(a0)+,(sp)
000017AE 3A17                       		move.w	(sp),d5
000017B0 780F                       		moveq	#$F,d4
000017B2                            
000017B2                            loc_18A8:
000017B2 E24D                       		lsr.w	#1,d5
000017B4 40C6                       		move	sr,d6
000017B6 51CC 0000                  		dbf	d4,loc_18BA
000017BA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017BE 1E98                       		move.b	(a0)+,(sp)
000017C0 3A17                       		move.w	(sp),d5
000017C2 780F                       		moveq	#$F,d4
000017C4                            
000017C4                            loc_18BA:
000017C4 44C6                       		move	d6,ccr
000017C6 6400                       		bcc.s	loc_18C2
000017C8 12D8                       		move.b	(a0)+,(a1)+
000017CA 60E6                       		bra.s	loc_18A8
000017CC                            ; ===========================================================================
000017CC                            
000017CC                            loc_18C2:				; XREF: KosDec
000017CC 7600                       		moveq	#0,d3
000017CE E24D                       		lsr.w	#1,d5
000017D0 40C6                       		move	sr,d6
000017D2 51CC 0000                  		dbf	d4,loc_18D6
000017D6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017DA 1E98                       		move.b	(a0)+,(sp)
000017DC 3A17                       		move.w	(sp),d5
000017DE 780F                       		moveq	#$F,d4
000017E0                            
000017E0                            loc_18D6:
000017E0 44C6                       		move	d6,ccr
000017E2 6500                       		bcs.s	loc_1906
000017E4 E24D                       		lsr.w	#1,d5
000017E6 51CC 0000                  		dbf	d4,loc_18EA
000017EA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017EE 1E98                       		move.b	(a0)+,(sp)
000017F0 3A17                       		move.w	(sp),d5
000017F2 780F                       		moveq	#$F,d4
000017F4                            
000017F4                            loc_18EA:
000017F4 E353                       		roxl.w	#1,d3
000017F6 E24D                       		lsr.w	#1,d5
000017F8 51CC 0000                  		dbf	d4,loc_18FC
000017FC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001800 1E98                       		move.b	(a0)+,(sp)
00001802 3A17                       		move.w	(sp),d5
00001804 780F                       		moveq	#$F,d4
00001806                            
00001806                            loc_18FC:
00001806 E353                       		roxl.w	#1,d3
00001808 5243                       		addq.w	#1,d3
0000180A 74FF                       		moveq	#-1,d2
0000180C 1418                       		move.b	(a0)+,d2
0000180E 6000                       		bra.s	loc_191C
00001810                            ; ===========================================================================
00001810                            
00001810                            loc_1906:				; XREF: loc_18C2
00001810 1018                       		move.b	(a0)+,d0
00001812 1218                       		move.b	(a0)+,d1
00001814 74FF                       		moveq	#-1,d2
00001816 1401                       		move.b	d1,d2
00001818 EB4A                       		lsl.w	#5,d2
0000181A 1400                       		move.b	d0,d2
0000181C 0241 0007                  		andi.w	#7,d1
00001820 6700                       		beq.s	loc_1928
00001822 1601                       		move.b	d1,d3
00001824 5243                       		addq.w	#1,d3
00001826                            
00001826                            loc_191C:
00001826 1031 2000                  		move.b	(a1,d2.w),d0
0000182A 12C0                       		move.b	d0,(a1)+
0000182C 51CB FFF8                  		dbf	d3,loc_191C
00001830 6080                       		bra.s	loc_18A8
00001832                            ; ===========================================================================
00001832                            
00001832                            loc_1928:				; XREF: loc_1906
00001832 1218                       		move.b	(a0)+,d1
00001834 6700                       		beq.s	loc_1938
00001836 0C01 0001                  		cmpi.b	#1,d1
0000183A 6700 FF76                  		beq.w	loc_18A8
0000183E 1601                       		move.b	d1,d3
00001840 60E4                       		bra.s	loc_191C
00001842                            ; ===========================================================================
00001842                            
00001842                            loc_1938:				; XREF: loc_1928
00001842 548F                       		addq.l	#2,sp
00001844 4E75                       		rts	
00001846                            ; End of function KosDec
00001846                            
00001846                            ; ---------------------------------------------------------------------------
00001846                            ; Pallet cycling routine loading subroutine
00001846                            ; ---------------------------------------------------------------------------
00001846                            
00001846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001846                            
00001846                            
00001846                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001846 7400                       		moveq	#0,d2
00001848 7000                       		moveq	#0,d0
0000184A 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
0000184E D040                       		add.w	d0,d0		; multiply by 2
00001850 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001854 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001858                            ; End of function PalCycle_Load
00001858                            
00001858                            ; ===========================================================================
00001858                            ; ---------------------------------------------------------------------------
00001858                            ; Pallet cycling routines
00001858                            ; ---------------------------------------------------------------------------
00001858 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000185A 0000                       		dc.w PalCycle_LZ-PalCycle
0000185C 0000                       		dc.w PalCycle_MZ-PalCycle
0000185E 0000                       		dc.w PalCycle_SLZ-PalCycle
00001860 0000                       		dc.w PalCycle_SYZ-PalCycle
00001862 0000                       		dc.w PalCycle_SBZ-PalCycle
00001864 0000                       		dc.w PalCycle_GHZ-PalCycle
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            PalCycle_Title:				; XREF: TitleScreen
00001866 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
0000186C 6000                       		bra.s	loc_196A
0000186E                            ; ===========================================================================
0000186E                            
0000186E                            PalCycle_GHZ:				; XREF: PalCycle
0000186E 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001874                            
00001874                            loc_196A:				; XREF: PalCycle_Title
00001874 5378 F634                  		subq.w	#1,($FFFFF634).w
00001878 6A00                       		bpl.s	locret_1990
0000187A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001880 3038 F632                  		move.w	($FFFFF632).w,d0
00001884 5278 F632                  		addq.w	#1,($FFFFF632).w
00001888 0240 0003                  		andi.w	#3,d0
0000188C E748                       		lsl.w	#3,d0
0000188E 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001892 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001896 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000189A                            
0000189A                            locret_1990:
0000189A 4E75                       		rts	
0000189C                            ; End of function PalCycle_Title
0000189C                            
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            PalCycle_LZ:				; XREF: PalCycle
0000189C 5378 F634                  		subq.w	#1,($FFFFF634).w
000018A0 6A00                       		bpl.s	loc_19D8
000018A2 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000018A8 3038 F632                  		move.w	($FFFFF632).w,d0
000018AC 5278 F632                  		addq.w	#1,($FFFFF632).w
000018B0 0240 0003                  		andi.w	#3,d0
000018B4 E748                       		lsl.w	#3,d0
000018B6 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000018BC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000018C2 6600                       		bne.s	loc_19C0
000018C4 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000018CA                            
000018CA                            loc_19C0:
000018CA 43F8 FB56                  		lea	($FFFFFB56).w,a1
000018CE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000018D2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000018D6 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000018DA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000018DE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000018E2                            
000018E2                            loc_19D8:
000018E2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000018E6 0240 0007                  		andi.w	#7,d0
000018EA 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000018EE 6700                       		beq.s	locret_1A3A
000018F0 7201                       		moveq	#1,d1
000018F2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000018F6 6700                       		beq.s	loc_19F0
000018F8 4441                       		neg.w	d1
000018FA                            
000018FA                            loc_19F0:
000018FA 3038 F650                  		move.w	($FFFFF650).w,d0
000018FE 0240 0003                  		andi.w	#3,d0
00001902 D041                       		add.w	d1,d0
00001904 0C40 0003                  		cmpi.w	#3,d0
00001908 6500                       		bcs.s	loc_1A0A
0000190A 3200                       		move.w	d0,d1
0000190C 7000                       		moveq	#0,d0
0000190E 4A41                       		tst.w	d1
00001910 6A00                       		bpl.s	loc_1A0A
00001912 7002                       		moveq	#2,d0
00001914                            
00001914                            loc_1A0A:
00001914 31C0 F650                  		move.w	d0,($FFFFF650).w
00001918 D040                       		add.w	d0,d0
0000191A 3200                       		move.w	d0,d1
0000191C D040                       		add.w	d0,d0
0000191E D041                       		add.w	d1,d0
00001920 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001926 43F8 FB76                  		lea	($FFFFFB76).w,a1
0000192A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000192E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001932 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001938 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
0000193C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001940 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001944                            
00001944                            locret_1A3A:
00001944 4E75                       		rts	
00001946                            ; End of function PalCycle_LZ
00001946                            
00001946                            ; ===========================================================================
00001946 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
0000194E                            ; ===========================================================================
0000194E                            
0000194E                            PalCycle_MZ:				; XREF: PalCycle
0000194E 4E75                       		rts	
00001950                            
00001950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001950                            
00001950                            
00001950                            PalCycle_SLZ:				; XREF: PalCycle
00001950 5378 F634                  		subq.w	#1,($FFFFF634).w
00001954 6A00                       		bpl.s	locret_1A80
00001956 31FC 0007 F634             		move.w	#7,($FFFFF634).w
0000195C 3038 F632                  		move.w	($FFFFF632).w,d0
00001960 5240                       		addq.w	#1,d0
00001962 0C40 0006                  		cmpi.w	#6,d0
00001966 6500                       		bcs.s	loc_1A60
00001968 7000                       		moveq	#0,d0
0000196A                            
0000196A                            loc_1A60:
0000196A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000196E 3200                       		move.w	d0,d1
00001970 D241                       		add.w	d1,d1
00001972 D041                       		add.w	d1,d0
00001974 D040                       		add.w	d0,d0
00001976 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
0000197C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001980 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001984 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
0000198A                            
0000198A                            locret_1A80:
0000198A 4E75                       		rts	
0000198C                            ; End of function PalCycle_SLZ
0000198C                            
0000198C                            
0000198C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000198C                            
0000198C                            
0000198C                            PalCycle_SYZ:				; XREF: PalCycle
0000198C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001990 6A00                       		bpl.s	locret_1AC6
00001992 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001998 3038 F632                  		move.w	($FFFFF632).w,d0
0000199C 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A0 0240 0003                  		andi.w	#3,d0
000019A4 E548                       		lsl.w	#2,d0
000019A6 3200                       		move.w	d0,d1
000019A8 D040                       		add.w	d0,d0
000019AA 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
000019B0 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
000019B4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019B8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019BC 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
000019C2 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019C6 32B0 1000                  		move.w	(a0,d1.w),(a1)
000019CA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
000019D0                            
000019D0                            locret_1AC6:
000019D0 4E75                       		rts	
000019D2                            ; End of function PalCycle_SYZ
000019D2                            
000019D2                            
000019D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019D2                            
000019D2                            
000019D2                            PalCycle_SBZ:				; XREF: PalCycle
000019D2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
000019D8 4A38 FE11                  		tst.b	($FFFFFE11).w
000019DC 6700                       		beq.s	loc_1ADA
000019DE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
000019E4                            
000019E4                            loc_1ADA:
000019E4 43F8 F650                  		lea	($FFFFF650).w,a1
000019E8 321A                       		move.w	(a2)+,d1
000019EA                            
000019EA                            loc_1AE0:
000019EA 5311                       		subq.b	#1,(a1)
000019EC 6B00                       		bmi.s	loc_1AEA
000019EE 5489                       		addq.l	#2,a1
000019F0 5C8A                       		addq.l	#6,a2
000019F2 6000                       		bra.s	loc_1B06
000019F4                            ; ===========================================================================
000019F4                            
000019F4                            loc_1AEA:				; XREF: PalCycle_SBZ
000019F4 12DA                       		move.b	(a2)+,(a1)+
000019F6 1011                       		move.b	(a1),d0
000019F8 5200                       		addq.b	#1,d0
000019FA B01A                       		cmp.b	(a2)+,d0
000019FC 6500                       		bcs.s	loc_1AF6
000019FE 7000                       		moveq	#0,d0
00001A00                            
00001A00                            loc_1AF6:
00001A00 12C0                       		move.b	d0,(a1)+
00001A02 0240 000F                  		andi.w	#$F,d0
00001A06 D040                       		add.w	d0,d0
00001A08 305A                       		movea.w	(a2)+,a0
00001A0A 365A                       		movea.w	(a2)+,a3
00001A0C 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001A10                            
00001A10                            loc_1B06:				; XREF: PalCycle_SBZ
00001A10 51C9 FFD8                  		dbf	d1,loc_1AE0
00001A14 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A18 6A00                       		bpl.s	locret_1B64
00001A1A 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001A20 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001A26 4A38 FE11                  		tst.b	($FFFFFE11).w
00001A2A 6700                       		beq.s	loc_1B2E
00001A2C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001A32 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001A38                            
00001A38                            loc_1B2E:
00001A38 72FF                       		moveq	#-1,d1
00001A3A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A3E 6700                       		beq.s	loc_1B38
00001A40 4441                       		neg.w	d1
00001A42                            
00001A42                            loc_1B38:
00001A42 3038 F632                  		move.w	($FFFFF632).w,d0
00001A46 0240 0003                  		andi.w	#3,d0
00001A4A D041                       		add.w	d1,d0
00001A4C 0C40 0003                  		cmpi.w	#3,d0
00001A50 6500                       		bcs.s	loc_1B52
00001A52 3200                       		move.w	d0,d1
00001A54 7000                       		moveq	#0,d0
00001A56 4A41                       		tst.w	d1
00001A58 6A00                       		bpl.s	loc_1B52
00001A5A 7002                       		moveq	#2,d0
00001A5C                            
00001A5C                            loc_1B52:
00001A5C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A60 D040                       		add.w	d0,d0
00001A62 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001A66 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A6A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A6E                            
00001A6E                            locret_1B64:
00001A6E 4E75                       		rts	
00001A70                            ; End of function PalCycle_SBZ
00001A70                            
00001A70                            ; ===========================================================================
00001A70                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001A90                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001AB0                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001AD0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001AE2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001AF4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001B5C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001B80                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001BA0                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001BB0                            
00001BB0                            Pal_SBZCycList:
00001BB0                            	include "_inc\SBZ pallet script 1.asm"
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0                            ; Scrap Brain Zone 1 pallet cycling script
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0 0008                       	dc.w 8			; number of entries - 1
00001BB2 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001BB4 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001BB6 FB50                       	dc.w $FB50		; RAM address
00001BB8 0D08                       	dc.b $D, 8
00001BBA 0000                       	dc.w Pal_SBZCyc2
00001BBC FB52                       	dc.w $FB52
00001BBE 0E08                       	dc.b $E, 8
00001BC0 0000                       	dc.w Pal_SBZCyc3
00001BC2 FB6E                       	dc.w $FB6E
00001BC4 0B08                       	dc.b $B, 8
00001BC6 0000                       	dc.w Pal_SBZCyc5
00001BC8 FB70                       	dc.w $FB70
00001BCA 0708                       	dc.b 7,	8
00001BCC 0000                       	dc.w Pal_SBZCyc6
00001BCE FB72                       	dc.w $FB72
00001BD0 1C10                       	dc.b $1C, $10
00001BD2 0000                       	dc.w Pal_SBZCyc7
00001BD4 FB7E                       	dc.w $FB7E
00001BD6 0303                       	dc.b 3,	3
00001BD8 0000                       	dc.w Pal_SBZCyc8
00001BDA FB78                       	dc.w $FB78
00001BDC 0303                       	dc.b 3,	3
00001BDE 0000                       	dc.w Pal_SBZCyc8+2
00001BE0 FB7A                       	dc.w $FB7A
00001BE2 0303                       	dc.b 3,	3
00001BE4 0000                       	dc.w Pal_SBZCyc8+4
00001BE6 FB7C                       	dc.w $FB7C
00001BE8                            	even
00001BE8                            	even
00001BE8                            
00001BE8                            Pal_SBZCycList2:
00001BE8                            	include "_inc\SBZ pallet script 2.asm"
00001BE8                            ; ---------------------------------------------------------------------------
00001BE8                            ; Scrap Brain Zone 2 pallet cycling script
00001BE8                            ; ---------------------------------------------------------------------------
00001BE8 0006                       	dc.w 6
00001BEA 0708                       	dc.b 7,	8
00001BEC 0000                       	dc.w Pal_SBZCyc1
00001BEE FB50                       	dc.w $FB50
00001BF0 0D08                       	dc.b $D, 8
00001BF2 0000                       	dc.w Pal_SBZCyc2
00001BF4 FB52                       	dc.w $FB52
00001BF6 0908                       	dc.b 9,	8
00001BF8 0000                       	dc.w Pal_SBZCyc9
00001BFA FB70                       	dc.w $FB70
00001BFC 0708                       	dc.b 7,	8
00001BFE 0000                       	dc.w Pal_SBZCyc6
00001C00 FB72                       	dc.w $FB72
00001C02 0303                       	dc.b 3,	3
00001C04 0000                       	dc.w Pal_SBZCyc8
00001C06 FB78                       	dc.w $FB78
00001C08 0303                       	dc.b 3,	3
00001C0A 0000                       	dc.w Pal_SBZCyc8+2
00001C0C FB7A                       	dc.w $FB7A
00001C0E 0303                       	dc.b 3,	3
00001C10 0000                       	dc.w Pal_SBZCyc8+4
00001C12 FB7C                       	dc.w $FB7C
00001C14                            	even
00001C14                            	even
00001C14                            
00001C14                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001C24                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001C34                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001C44                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001C50                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001C60                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001C70                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001C90                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001C9A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001CAA                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001CB6                            ; ---------------------------------------------------------------------------
00001CB6                            ; Subroutine to	fade out and fade in
00001CB6                            ; ---------------------------------------------------------------------------
00001CB6                            
00001CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB6                            
00001CB6                            
00001CB6                            Pal_FadeTo:
00001CB6 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001CBC                            
00001CBC                            Pal_FadeTo2:
00001CBC 7000                       		moveq	#0,d0
00001CBE 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001CC2 1038 F626                  		move.b	($FFFFF626).w,d0
00001CC6 D0C0                       		adda.w	d0,a0
00001CC8 7200                       		moveq	#0,d1
00001CCA 1038 F627                  		move.b	($FFFFF627).w,d0
00001CCE                            
00001CCE                            Pal_ToBlack:
00001CCE 30C1                       		move.w	d1,(a0)+
00001CD0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001CD4                            
00001CD4 383C 0015                  		move.w	#$15,d4
00001CD8                            
00001CD8                            loc_1DCE:
00001CD8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001CDE 6100 0000                  		bsr.w	DelayProgram
00001CE2 6100                       		bsr.s	Pal_FadeIn
00001CE4 6100 F810                  		bsr.w	RunPLC_RAM
00001CE8 51CC FFEE                  		dbf	d4,loc_1DCE
00001CEC 4E75                       		rts	
00001CEE                            ; End of function Pal_FadeTo
00001CEE                            
00001CEE                            ; ---------------------------------------------------------------------------
00001CEE                            ; Pallet fade-in subroutine
00001CEE                            ; ---------------------------------------------------------------------------
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001CEE 7000                       		moveq	#0,d0
00001CF0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001CF4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001CF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001CFC D0C0                       		adda.w	d0,a0
00001CFE D2C0                       		adda.w	d0,a1
00001D00 1038 F627                  		move.b	($FFFFF627).w,d0
00001D04                            
00001D04                            loc_1DFA:
00001D04 6100                       		bsr.s	Pal_AddColor
00001D06 51C8 FFFC                  		dbf	d0,loc_1DFA
00001D0A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001D10 6600                       		bne.s	locret_1E24
00001D12 7000                       		moveq	#0,d0
00001D14 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D18 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001D1C 1038 F626                  		move.b	($FFFFF626).w,d0
00001D20 D0C0                       		adda.w	d0,a0
00001D22 D2C0                       		adda.w	d0,a1
00001D24 1038 F627                  		move.b	($FFFFF627).w,d0
00001D28                            
00001D28                            loc_1E1E:
00001D28 6100                       		bsr.s	Pal_AddColor
00001D2A 51C8 FFFC                  		dbf	d0,loc_1E1E
00001D2E                            
00001D2E                            locret_1E24:
00001D2E 4E75                       		rts	
00001D30                            ; End of function Pal_FadeIn
00001D30                            
00001D30                            
00001D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D30                            
00001D30                            
00001D30                            Pal_AddColor:				; XREF: Pal_FadeIn
00001D30 3419                       		move.w	(a1)+,d2
00001D32 3610                       		move.w	(a0),d3
00001D34 B642                       		cmp.w	d2,d3
00001D36 6700                       		beq.s	loc_1E4E
00001D38 3203                       		move.w	d3,d1
00001D3A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001D3E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001D40 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001D42 30C1                       		move.w	d1,(a0)+	; update pallet
00001D44 4E75                       		rts	
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            Pal_AddGreen:				; XREF: Pal_AddColor
00001D46 3203                       		move.w	d3,d1
00001D48 0641 0020                  		addi.w	#$20,d1		; increase green value
00001D4C B242                       		cmp.w	d2,d1
00001D4E 6200                       		bhi.s	Pal_AddRed
00001D50 30C1                       		move.w	d1,(a0)+	; update pallet
00001D52 4E75                       		rts	
00001D54                            ; ===========================================================================
00001D54                            
00001D54                            Pal_AddRed:				; XREF: Pal_AddGreen
00001D54 5458                       		addq.w	#2,(a0)+	; increase red value
00001D56 4E75                       		rts	
00001D58                            ; ===========================================================================
00001D58                            
00001D58                            loc_1E4E:				; XREF: Pal_AddColor
00001D58 5448                       		addq.w	#2,a0
00001D5A 4E75                       		rts	
00001D5C                            ; End of function Pal_AddColor
00001D5C                            
00001D5C                            
00001D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D5C                            
00001D5C                            
00001D5C                            Pal_FadeFrom:
00001D5C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001D62                            
00001D62                            Pal_FadeFrom2:
00001D62 383C 0015                  		move.w	#$15,d4
00001D66                            
00001D66                            loc_1E5C:
00001D66 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D6C 6100 0000                  		bsr.w	DelayProgram
00001D70 6100                       		bsr.s	Pal_FadeOut
00001D72 6100 F782                  		bsr.w	RunPLC_RAM
00001D76 51CC FFEE                  		dbf	d4,loc_1E5C
00001D7A 4E75                       		rts	
00001D7C                            ; End of function Pal_FadeFrom
00001D7C                            
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            ; Pallet fade-out subroutine
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            
00001D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7C                            
00001D7C                            
00001D7C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001D7C 7000                       		moveq	#0,d0
00001D7E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D82 1038 F626                  		move.b	($FFFFF626).w,d0
00001D86 D0C0                       		adda.w	d0,a0
00001D88 1038 F627                  		move.b	($FFFFF627).w,d0
00001D8C                            
00001D8C                            loc_1E82:
00001D8C 6100                       		bsr.s	Pal_DecColor
00001D8E 51C8 FFFC                  		dbf	d0,loc_1E82
00001D92                            
00001D92 7000                       		moveq	#0,d0
00001D94 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D98 1038 F626                  		move.b	($FFFFF626).w,d0
00001D9C D0C0                       		adda.w	d0,a0
00001D9E 1038 F627                  		move.b	($FFFFF627).w,d0
00001DA2                            
00001DA2                            loc_1E98:
00001DA2 6100                       		bsr.s	Pal_DecColor
00001DA4 51C8 FFFC                  		dbf	d0,loc_1E98
00001DA8 4E75                       		rts	
00001DAA                            ; End of function Pal_FadeOut
00001DAA                            
00001DAA                            
00001DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAA                            
00001DAA                            
00001DAA                            Pal_DecColor:				; XREF: Pal_FadeOut
00001DAA 3410                       		move.w	(a0),d2
00001DAC 6700                       		beq.s	loc_1ECC
00001DAE 3202                       		move.w	d2,d1
00001DB0 0241 000E                  		andi.w	#$E,d1
00001DB4 6700                       		beq.s	Pal_DecGreen
00001DB6 5558                       		subq.w	#2,(a0)+	; decrease red value
00001DB8 4E75                       		rts	
00001DBA                            ; ===========================================================================
00001DBA                            
00001DBA                            Pal_DecGreen:				; XREF: Pal_DecColor
00001DBA 3202                       		move.w	d2,d1
00001DBC 0241 00E0                  		andi.w	#$E0,d1
00001DC0 6700                       		beq.s	Pal_DecBlue
00001DC2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001DC6 4E75                       		rts	
00001DC8                            ; ===========================================================================
00001DC8                            
00001DC8                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001DC8 3202                       		move.w	d2,d1
00001DCA 0241 0E00                  		andi.w	#$E00,d1
00001DCE 6700                       		beq.s	loc_1ECC
00001DD0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001DD4 4E75                       		rts	
00001DD6                            ; ===========================================================================
00001DD6                            
00001DD6                            loc_1ECC:				; XREF: Pal_DecColor
00001DD6 5448                       		addq.w	#2,a0
00001DD8 4E75                       		rts	
00001DDA                            ; End of function Pal_DecColor
00001DDA                            
00001DDA                            ; ---------------------------------------------------------------------------
00001DDA                            ; Subroutine to	fill the pallet	with white (special stage)
00001DDA                            ; ---------------------------------------------------------------------------
00001DDA                            
00001DDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DDA                            
00001DDA                            
00001DDA                            Pal_MakeWhite:				; XREF: SpecialStage
00001DDA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001DE0 7000                       		moveq	#0,d0
00001DE2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DE6 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEA D0C0                       		adda.w	d0,a0
00001DEC 323C 0EEE                  		move.w	#$EEE,d1
00001DF0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF4                            
00001DF4                            PalWhite_Loop:
00001DF4 30C1                       		move.w	d1,(a0)+
00001DF6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001DFA 383C 0015                  		move.w	#$15,d4
00001DFE                            
00001DFE                            loc_1EF4:
00001DFE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E04 6100 0000                  		bsr.w	DelayProgram
00001E08 6100                       		bsr.s	Pal_WhiteToBlack
00001E0A 6100 F6EA                  		bsr.w	RunPLC_RAM
00001E0E 51CC FFEE                  		dbf	d4,loc_1EF4
00001E12 4E75                       		rts	
00001E14                            ; End of function Pal_MakeWhite
00001E14                            
00001E14                            
00001E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E14                            
00001E14                            
00001E14                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001E14 7000                       		moveq	#0,d0
00001E16 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E1A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E1E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E22 D0C0                       		adda.w	d0,a0
00001E24 D2C0                       		adda.w	d0,a1
00001E26 1038 F627                  		move.b	($FFFFF627).w,d0
00001E2A                            
00001E2A                            loc_1F20:
00001E2A 6100                       		bsr.s	Pal_DecColor2
00001E2C 51C8 FFFC                  		dbf	d0,loc_1F20
00001E30                            
00001E30 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E36 6600                       		bne.s	locret_1F4A
00001E38 7000                       		moveq	#0,d0
00001E3A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E3E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E42 1038 F626                  		move.b	($FFFFF626).w,d0
00001E46 D0C0                       		adda.w	d0,a0
00001E48 D2C0                       		adda.w	d0,a1
00001E4A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E4E                            
00001E4E                            loc_1F44:
00001E4E 6100                       		bsr.s	Pal_DecColor2
00001E50 51C8 FFFC                  		dbf	d0,loc_1F44
00001E54                            
00001E54                            locret_1F4A:
00001E54 4E75                       		rts	
00001E56                            ; End of function Pal_WhiteToBlack
00001E56                            
00001E56                            
00001E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E56                            
00001E56                            
00001E56                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001E56 3419                       		move.w	(a1)+,d2
00001E58 3610                       		move.w	(a0),d3
00001E5A B642                       		cmp.w	d2,d3
00001E5C 6700                       		beq.s	loc_1F78
00001E5E 3203                       		move.w	d3,d1
00001E60 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001E64 6500                       		bcs.s	loc_1F64
00001E66 B242                       		cmp.w	d2,d1
00001E68 6500                       		bcs.s	loc_1F64
00001E6A 30C1                       		move.w	d1,(a0)+
00001E6C 4E75                       		rts	
00001E6E                            ; ===========================================================================
00001E6E                            
00001E6E                            loc_1F64:				; XREF: Pal_DecColor2
00001E6E 3203                       		move.w	d3,d1
00001E70 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001E74 6500                       		bcs.s	loc_1F74
00001E76 B242                       		cmp.w	d2,d1
00001E78 6500                       		bcs.s	loc_1F74
00001E7A 30C1                       		move.w	d1,(a0)+
00001E7C 4E75                       		rts	
00001E7E                            ; ===========================================================================
00001E7E                            
00001E7E                            loc_1F74:				; XREF: loc_1F64
00001E7E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E80 4E75                       		rts	
00001E82                            ; ===========================================================================
00001E82                            
00001E82                            loc_1F78:				; XREF: Pal_DecColor2
00001E82 5448                       		addq.w	#2,a0
00001E84 4E75                       		rts	
00001E86                            ; End of function Pal_DecColor2
00001E86                            
00001E86                            ; ---------------------------------------------------------------------------
00001E86                            ; Subroutine to	make a white flash when	you enter a special stage
00001E86                            ; ---------------------------------------------------------------------------
00001E86                            
00001E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E86                            
00001E86                            
00001E86                            Pal_MakeFlash:				; XREF: SpecialStage
00001E86 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E8C 383C 0015                  		move.w	#$15,d4
00001E90                            
00001E90                            loc_1F86:
00001E90 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E96 6100 0000                  		bsr.w	DelayProgram
00001E9A 6100                       		bsr.s	Pal_ToWhite
00001E9C 6100 F658                  		bsr.w	RunPLC_RAM
00001EA0 51CC FFEE                  		dbf	d4,loc_1F86
00001EA4 4E75                       		rts	
00001EA6                            ; End of function Pal_MakeFlash
00001EA6                            
00001EA6                            
00001EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA6                            
00001EA6                            
00001EA6                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001EA6 7000                       		moveq	#0,d0
00001EA8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EAC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EB0 D0C0                       		adda.w	d0,a0
00001EB2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EB6                            
00001EB6                            loc_1FAC:
00001EB6 6100                       		bsr.s	Pal_AddColor2
00001EB8 51C8 FFFC                  		dbf	d0,loc_1FAC
00001EBC 7000                       		moveq	#0,d0
00001EBE 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EC2 1038 F626                  		move.b	($FFFFF626).w,d0
00001EC6 D0C0                       		adda.w	d0,a0
00001EC8 1038 F627                  		move.b	($FFFFF627).w,d0
00001ECC                            
00001ECC                            loc_1FC2:
00001ECC 6100                       		bsr.s	Pal_AddColor2
00001ECE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001ED2 4E75                       		rts	
00001ED4                            ; End of function Pal_ToWhite
00001ED4                            
00001ED4                            
00001ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED4                            
00001ED4                            
00001ED4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001ED4 3410                       		move.w	(a0),d2
00001ED6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001EDA 6700                       		beq.s	loc_2006
00001EDC 3202                       		move.w	d2,d1
00001EDE 0241 000E                  		andi.w	#$E,d1
00001EE2 0C41 000E                  		cmpi.w	#$E,d1
00001EE6 6700                       		beq.s	loc_1FE2
00001EE8 5458                       		addq.w	#2,(a0)+	; increase red value
00001EEA 4E75                       		rts	
00001EEC                            ; ===========================================================================
00001EEC                            
00001EEC                            loc_1FE2:				; XREF: Pal_AddColor2
00001EEC 3202                       		move.w	d2,d1
00001EEE 0241 00E0                  		andi.w	#$E0,d1
00001EF2 0C41 00E0                  		cmpi.w	#$E0,d1
00001EF6 6700                       		beq.s	loc_1FF4
00001EF8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001EFC 4E75                       		rts	
00001EFE                            ; ===========================================================================
00001EFE                            
00001EFE                            loc_1FF4:				; XREF: loc_1FE2
00001EFE 3202                       		move.w	d2,d1
00001F00 0241 0E00                  		andi.w	#$E00,d1
00001F04 0C41 0E00                  		cmpi.w	#$E00,d1
00001F08 6700                       		beq.s	loc_2006
00001F0A 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001F0E 4E75                       		rts	
00001F10                            ; ===========================================================================
00001F10                            
00001F10                            loc_2006:				; XREF: Pal_AddColor2
00001F10 5448                       		addq.w	#2,a0
00001F12 4E75                       		rts	
00001F14                            ; End of function Pal_AddColor2
00001F14                            
00001F14                            ; ---------------------------------------------------------------------------
00001F14                            ; Pallet cycling routine - Sega	logo
00001F14                            ; ---------------------------------------------------------------------------
00001F14                            
00001F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F14                            
00001F14                            
00001F14                            PalCycle_Sega:				; XREF: SegaScreen
00001F14 4A38 F635                  		tst.b	($FFFFF635).w
00001F18 6600                       		bne.s	loc_206A
00001F1A 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001F1E 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001F24 7205                       		moveq	#5,d1
00001F26 3038 F632                  		move.w	($FFFFF632).w,d0
00001F2A                            
00001F2A                            loc_2020:
00001F2A 6A00                       		bpl.s	loc_202A
00001F2C 5448                       		addq.w	#2,a0
00001F2E 5341                       		subq.w	#1,d1
00001F30 5440                       		addq.w	#2,d0
00001F32 60F6                       		bra.s	loc_2020
00001F34                            ; ===========================================================================
00001F34                            
00001F34                            loc_202A:				; XREF: PalCycle_Sega
00001F34 3400                       		move.w	d0,d2
00001F36 0242 001E                  		andi.w	#$1E,d2
00001F3A 6600                       		bne.s	loc_2034
00001F3C 5440                       		addq.w	#2,d0
00001F3E                            
00001F3E                            loc_2034:
00001F3E 0C40 0060                  		cmpi.w	#$60,d0
00001F42 6400                       		bcc.s	loc_203E
00001F44 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001F48                            
00001F48                            loc_203E:
00001F48 5440                       		addq.w	#2,d0
00001F4A 51C9 FFE8                  		dbf	d1,loc_202A
00001F4E 3038 F632                  		move.w	($FFFFF632).w,d0
00001F52 5440                       		addq.w	#2,d0
00001F54 3400                       		move.w	d0,d2
00001F56 0242 001E                  		andi.w	#$1E,d2
00001F5A 6600                       		bne.s	loc_2054
00001F5C 5440                       		addq.w	#2,d0
00001F5E                            
00001F5E                            loc_2054:
00001F5E 0C40 0064                  		cmpi.w	#$64,d0
00001F62 6D00                       		blt.s	loc_2062
00001F64 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00001F6A 70F4                       		moveq	#-$C,d0
00001F6C                            
00001F6C                            loc_2062:
00001F6C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001F70 7001                       		moveq	#1,d0
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_206A:				; XREF: loc_202A
00001F74 5338 F634                  		subq.b	#1,($FFFFF634).w
00001F78 6A00                       		bpl.s	loc_20BC
00001F7A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00001F80 3038 F632                  		move.w	($FFFFF632).w,d0
00001F84 0640 000C                  		addi.w	#$C,d0
00001F88 0C40 0030                  		cmpi.w	#$30,d0
00001F8C 6500                       		bcs.s	loc_2088
00001F8E 7000                       		moveq	#0,d0
00001F90 4E75                       		rts	
00001F92                            ; ===========================================================================
00001F92                            
00001F92                            loc_2088:				; XREF: loc_206A
00001F92 31C0 F632                  		move.w	d0,($FFFFF632).w
00001F96 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00001F9C 41F0 0000                  		lea	(a0,d0.w),a0
00001FA0 43F8 FB04                  		lea	($FFFFFB04).w,a1
00001FA4 22D8                       		move.l	(a0)+,(a1)+
00001FA6 22D8                       		move.l	(a0)+,(a1)+
00001FA8 3298                       		move.w	(a0)+,(a1)
00001FAA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FAE 7000                       		moveq	#0,d0
00001FB0 722C                       		moveq	#$2C,d1
00001FB2                            
00001FB2                            loc_20A8:
00001FB2 3400                       		move.w	d0,d2
00001FB4 0242 001E                  		andi.w	#$1E,d2
00001FB8 6600                       		bne.s	loc_20B2
00001FBA 5440                       		addq.w	#2,d0
00001FBC                            
00001FBC                            loc_20B2:
00001FBC 3390 0000                  		move.w	(a0),(a1,d0.w)
00001FC0 5440                       		addq.w	#2,d0
00001FC2 51C9 FFEE                  		dbf	d1,loc_20A8
00001FC6                            
00001FC6                            loc_20BC:
00001FC6 7001                       		moveq	#1,d0
00001FC8 4E75                       		rts	
00001FCA                            ; End of function PalCycle_Sega
00001FCA                            
00001FCA                            ; ===========================================================================
00001FCA                            
00001FCA                            Pal_Sega1:	incbin	pallet\sega1.bin
00001FD6                            Pal_Sega2:	incbin	pallet\sega2.bin
00002006                            
00002006                            ; ---------------------------------------------------------------------------
00002006                            ; Subroutines to load pallets
00002006                            ; ---------------------------------------------------------------------------
00002006                            
00002006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002006                            
00002006                            
00002006                            PalLoad1:
00002006 43F9 0000 0000             		lea	(PalPointers).l,a1
0000200C E748                       		lsl.w	#3,d0
0000200E D2C0                       		adda.w	d0,a1
00002010 2459                       		movea.l	(a1)+,a2
00002012 3659                       		movea.w	(a1)+,a3
00002014 D6FC 0080                  		adda.w	#$80,a3
00002018 3E19                       		move.w	(a1)+,d7
0000201A                            
0000201A                            loc_2110:
0000201A 26DA                       		move.l	(a2)+,(a3)+
0000201C 51CF FFFC                  		dbf	d7,loc_2110
00002020 4E75                       		rts	
00002022                            ; End of function PalLoad1
00002022                            
00002022                            
00002022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002022                            
00002022                            
00002022                            PalLoad2:
00002022 43F9 0000 0000             		lea	(PalPointers).l,a1
00002028 E748                       		lsl.w	#3,d0
0000202A D2C0                       		adda.w	d0,a1
0000202C 2459                       		movea.l	(a1)+,a2
0000202E 3659                       		movea.w	(a1)+,a3
00002030 3E19                       		move.w	(a1)+,d7
00002032                            
00002032                            loc_2128:
00002032 26DA                       		move.l	(a2)+,(a3)+
00002034 51CF FFFC                  		dbf	d7,loc_2128
00002038 4E75                       		rts	
0000203A                            ; End of function PalLoad2
0000203A                            
0000203A                            ; ---------------------------------------------------------------------------
0000203A                            ; Underwater pallet loading subroutine
0000203A                            ; ---------------------------------------------------------------------------
0000203A                            
0000203A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203A                            
0000203A                            
0000203A                            PalLoad3_Water:
0000203A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002040 E748                       		lsl.w	#3,d0
00002042 D2C0                       		adda.w	d0,a1
00002044 2459                       		movea.l	(a1)+,a2
00002046 3659                       		movea.w	(a1)+,a3
00002048 96FC 0080                  		suba.w	#$80,a3
0000204C 3E19                       		move.w	(a1)+,d7
0000204E                            
0000204E                            loc_2144:
0000204E 26DA                       		move.l	(a2)+,(a3)+
00002050 51CF FFFC                  		dbf	d7,loc_2144
00002054 4E75                       		rts	
00002056                            ; End of function PalLoad3_Water
00002056                            
00002056                            
00002056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002056                            
00002056                            
00002056                            PalLoad4_Water:
00002056 43F9 0000 0000             		lea	(PalPointers).l,a1
0000205C E748                       		lsl.w	#3,d0
0000205E D2C0                       		adda.w	d0,a1
00002060 2459                       		movea.l	(a1)+,a2
00002062 3659                       		movea.w	(a1)+,a3
00002064 96FC 0100                  		suba.w	#$100,a3
00002068 3E19                       		move.w	(a1)+,d7
0000206A                            
0000206A                            loc_2160:
0000206A 26DA                       		move.l	(a2)+,(a3)+
0000206C 51CF FFFC                  		dbf	d7,loc_2160
00002070 4E75                       		rts	
00002072                            ; End of function PalLoad4_Water
00002072                            
00002072                            ; ===========================================================================
00002072                            ; ---------------------------------------------------------------------------
00002072                            ; Pallet pointers
00002072                            ; ---------------------------------------------------------------------------
00002072                            PalPointers:
00002072                            	include "_inc\Pallet pointers.asm"
00002072                            ; ---------------------------------------------------------------------------
00002072                            ; Pallet pointers
00002072                            ; ---------------------------------------------------------------------------
00002072 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002076 FB00                       	dc.w $FB00		; RAM address
00002078 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000207A 0000 0000                  	dc.l Pal_Title
0000207E FB00                       	dc.w $FB00
00002080 001F                       	dc.w $1F
00002082 0000 0000                  	dc.l Pal_LevelSel
00002086 FB00                       	dc.w $FB00
00002088 001F                       	dc.w $1F
0000208A 0000 0000                  	dc.l Pal_Sonic
0000208E FB00                       	dc.w $FB00
00002090 0007                       	dc.w 7
00002092 0000 0000                  	dc.l Pal_GHZ
00002096 FB20                       	dc.w $FB20
00002098 0017                       	dc.w $17
0000209A 0000 0000                  	dc.l Pal_LZ
0000209E FB20                       	dc.w $FB20
000020A0 0017                       	dc.w $17
000020A2 0000 0000                  	dc.l Pal_MZ
000020A6 FB20                       	dc.w $FB20
000020A8 0017                       	dc.w $17
000020AA 0000 0000                  	dc.l Pal_SLZ
000020AE FB20                       	dc.w $FB20
000020B0 0017                       	dc.w $17
000020B2 0000 0000                  	dc.l Pal_SYZ
000020B6 FB20                       	dc.w $FB20
000020B8 0017                       	dc.w $17
000020BA 0000 0000                  	dc.l Pal_SBZ1
000020BE FB20                       	dc.w $FB20
000020C0 0017                       	dc.w $17
000020C2 0000 0000                  	dc.l Pal_Special
000020C6 FB00                       	dc.w $FB00
000020C8 001F                       	dc.w $1F
000020CA 0000 0000                  	dc.l Pal_LZWater
000020CE FB00                       	dc.w $FB00
000020D0 001F                       	dc.w $1F
000020D2 0000 0000                  	dc.l Pal_SBZ3
000020D6 FB20                       	dc.w $FB20
000020D8 0017                       	dc.w $17
000020DA 0000 0000                  	dc.l Pal_SBZ3Water
000020DE FB00                       	dc.w $FB00
000020E0 001F                       	dc.w $1F
000020E2 0000 0000                  	dc.l Pal_SBZ2
000020E6 FB20                       	dc.w $FB20
000020E8 0017                       	dc.w $17
000020EA 0000 0000                  	dc.l Pal_LZSonWater
000020EE FB00                       	dc.w $FB00
000020F0 0007                       	dc.w 7
000020F2 0000 0000                  	dc.l Pal_SBZ3SonWat
000020F6 FB00                       	dc.w $FB00
000020F8 0007                       	dc.w 7
000020FA 0000 0000                  	dc.l Pal_SpeResult
000020FE FB00                       	dc.w $FB00
00002100 001F                       	dc.w $1F
00002102 0000 0000                  	dc.l Pal_SpeContinue
00002106 FB00                       	dc.w $FB00
00002108 000F                       	dc.w $F
0000210A 0000 0000                  	dc.l Pal_Ending
0000210E FB00                       	dc.w $FB00
00002110 001F                       	dc.w $1F
00002112 0000 0000                  	dc.l Pal_Sonic
00002116 FB20                       	dc.w $FB20
00002118 0007                       	dc.w 7
00002118 0007                       	dc.w 7
0000211A                            
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            ; Pallet data
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000219A                            Pal_Title:	incbin	pallet\title.bin
0000221A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000229A                            Pal_Sonic:	incbin	pallet\sonic.bin
000022BA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000231A                            Pal_LZ:		incbin	pallet\lz.bin
0000237A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000023FA                            Pal_MZ:		incbin	pallet\mz.bin
0000245A                            Pal_SLZ:	incbin	pallet\slz.bin
000024BA                            Pal_SYZ:	incbin	pallet\syz.bin
0000251A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000257A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000025DA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000265A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000026BA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000273A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000275A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000277A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000027FA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000283A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000028BA                            
000028BA                            ; ---------------------------------------------------------------------------
000028BA                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000028BA                            ; ---------------------------------------------------------------------------
000028BA                            
000028BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028BA                            
000028BA                            
000028BA                            DelayProgram:				; XREF: PauseGame
000028BA 46FC 2300                  		move	#$2300,sr
000028BE                            
000028BE                            loc_29AC:
000028BE 4A38 F62A                  		tst.b	($FFFFF62A).w
000028C2 66FA                       		bne.s	loc_29AC
000028C4 4E75                       		rts	
000028C6                            ; End of function DelayProgram
000028C6                            
000028C6                            ; ---------------------------------------------------------------------------
000028C6                            ; Subroutine to	generate a pseudo-random number	in d0
000028C6                            ; ---------------------------------------------------------------------------
000028C6                            
000028C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028C6                            
000028C6                            
000028C6                            RandomNumber:
000028C6 2238 F636                  		move.l	($FFFFF636).w,d1
000028CA 6600                       		bne.s	loc_29C0
000028CC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000028D2                            
000028D2                            loc_29C0:
000028D2 2001                       		move.l	d1,d0
000028D4 E581                       		asl.l	#2,d1
000028D6 D280                       		add.l	d0,d1
000028D8 E781                       		asl.l	#3,d1
000028DA D280                       		add.l	d0,d1
000028DC 3001                       		move.w	d1,d0
000028DE 4841                       		swap	d1
000028E0 D041                       		add.w	d1,d0
000028E2 3200                       		move.w	d0,d1
000028E4 4841                       		swap	d1
000028E6 21C1 F636                  		move.l	d1,($FFFFF636).w
000028EA 4E75                       		rts	
000028EC                            ; End of function RandomNumber
000028EC                            
000028EC                            
000028EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028EC                            
000028EC                            
000028EC                            CalcSine:				; XREF: SS_BGAnimate; et al
000028EC 0240 00FF                  		andi.w	#$FF,d0
000028F0 D040                       		add.w	d0,d0
000028F2 0640 0080                  		addi.w	#$80,d0
000028F6 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000028FA 0440 0080                  		subi.w	#$80,d0
000028FE 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002902 4E75                       		rts	
00002904                            ; End of function CalcSine
00002904                            
00002904                            ; ===========================================================================
00002904                            
00002904                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002B84                            
00002B84                            ; ===========================================================================
00002B84 48E7 6000                  		movem.l	d1-d2,-(sp)
00002B88 3200                       		move.w	d0,d1
00002B8A 4841                       		swap	d1
00002B8C 7000                       		moveq	#0,d0
00002B8E 3200                       		move.w	d0,d1
00002B90 7407                       		moveq	#7,d2
00002B92                            
00002B92                            loc_2C80:
00002B92 E599                       		rol.l	#2,d1
00002B94 D040                       		add.w	d0,d0
00002B96 5240                       		addq.w	#1,d0
00002B98 9240                       		sub.w	d0,d1
00002B9A 6400                       		bcc.s	loc_2C9A
00002B9C D240                       		add.w	d0,d1
00002B9E 5340                       		subq.w	#1,d0
00002BA0 51CA FFF0                  		dbf	d2,loc_2C80
00002BA4 E248                       		lsr.w	#1,d0
00002BA6 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002BAA 4E75                       		rts	
00002BAC                            ; ===========================================================================
00002BAC                            
00002BAC                            loc_2C9A:
00002BAC 5240                       		addq.w	#1,d0
00002BAE 51CA FFE2                  		dbf	d2,loc_2C80
00002BB2 E248                       		lsr.w	#1,d0
00002BB4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002BB8 4E75                       		rts	
00002BBA                            
00002BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BBA                            
00002BBA                            
00002BBA                            CalcAngle:
00002BBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00002BBE 7600                       		moveq	#0,d3
00002BC0 7800                       		moveq	#0,d4
00002BC2 3601                       		move.w	d1,d3
00002BC4 3802                       		move.w	d2,d4
00002BC6 8843                       		or.w	d3,d4
00002BC8 6700                       		beq.s	loc_2D04
00002BCA 3802                       		move.w	d2,d4
00002BCC 4A43                       		tst.w	d3
00002BCE 6A00 0000                  		bpl.w	loc_2CC2
00002BD2 4443                       		neg.w	d3
00002BD4                            
00002BD4                            loc_2CC2:
00002BD4 4A44                       		tst.w	d4
00002BD6 6A00 0000                  		bpl.w	loc_2CCA
00002BDA 4444                       		neg.w	d4
00002BDC                            
00002BDC                            loc_2CCA:
00002BDC B843                       		cmp.w	d3,d4
00002BDE 6400 0000                  		bcc.w	loc_2CDC
00002BE2 E18C                       		lsl.l	#8,d4
00002BE4 88C3                       		divu.w	d3,d4
00002BE6 7000                       		moveq	#0,d0
00002BE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002BEC 6000                       		bra.s	loc_2CE6
00002BEE                            ; ===========================================================================
00002BEE                            
00002BEE                            loc_2CDC:				; XREF: CalcAngle
00002BEE E18B                       		lsl.l	#8,d3
00002BF0 86C4                       		divu.w	d4,d3
00002BF2 7040                       		moveq	#$40,d0
00002BF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002BF8                            
00002BF8                            loc_2CE6:
00002BF8 4A41                       		tst.w	d1
00002BFA 6A00 0000                  		bpl.w	loc_2CF2
00002BFE 4440                       		neg.w	d0
00002C00 0640 0080                  		addi.w	#$80,d0
00002C04                            
00002C04                            loc_2CF2:
00002C04 4A42                       		tst.w	d2
00002C06 6A00 0000                  		bpl.w	loc_2CFE
00002C0A 4440                       		neg.w	d0
00002C0C 0640 0100                  		addi.w	#$100,d0
00002C10                            
00002C10                            loc_2CFE:
00002C10 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002C14 4E75                       		rts	
00002C16                            ; ===========================================================================
00002C16                            
00002C16                            loc_2D04:				; XREF: CalcAngle
00002C16 303C 0040                  		move.w	#$40,d0
00002C1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002C1E 4E75                       		rts	
00002C20                            ; End of function CalcAngle
00002C20                            
00002C20                            ; ===========================================================================
00002C20                            
00002C20                            Angle_Data:	incbin	misc\angles.bin
00002D22                            
00002D22                            ; ===========================================================================
00002D22                            
00002D22                            ; ---------------------------------------------------------------------------
00002D22                            ; Sega screen
00002D22                            ; ---------------------------------------------------------------------------
00002D22                            
00002D22                            SegaScreen:				; XREF: GameModeArray
00002D22 103C 00E4                  		move.b	#$E4,d0
00002D26 6100 E53A                  		bsr.w	PlaySound_Special ; stop music
00002D2A 6100 E7BC                  		bsr.w	ClearPLC
00002D2E 6100 F02C                  		bsr.w	Pal_FadeFrom
00002D32 4DF9 00C0 0004             		lea	($C00004).l,a6
00002D38 3CBC 8004                  		move.w	#$8004,(a6)
00002D3C 3CBC 8230                  		move.w	#$8230,(a6)
00002D40 3CBC 8407                  		move.w	#$8407,(a6)
00002D44 3CBC 8700                  		move.w	#$8700,(a6)
00002D48 3CBC 8B00                  		move.w	#$8B00,(a6)
00002D4C 4238 F64E                  		clr.b	($FFFFF64E).w
00002D50 46FC 2700                  		move	#$2700,sr
00002D54 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002D58 0200 00BF                  		andi.b	#$BF,d0
00002D5C 33C0 00C0 0004             		move.w	d0,($C00004).l
00002D62 6100 E426                  		bsr.w	ClearScreen
00002D66 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002D70 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002D76 6100 E5D2                  		bsr.w	NemDec
00002D7A 43F9 00FF 0000             		lea	($FF0000).l,a1
00002D80 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002D86 303C 0000                  		move.w	#0,d0
00002D8A 6100 E89C                  		bsr.w	EniDec
00002D8E 43F9 00FF 0000             		lea	($FF0000).l,a1
00002D94 203C 6510 0003             		move.l	#$65100003,d0
00002D9A 7217                       		moveq	#$17,d1
00002D9C 7407                       		moveq	#7,d2
00002D9E 6100 E58A                  		bsr.w	ShowVDPGraphics
00002DA2 43F9 00FF 0180             		lea	($FF0180).l,a1
00002DA8 203C 4000 0003             		move.l	#$40000003,d0
00002DAE 7227                       		moveq	#$27,d1
00002DB0 741B                       		moveq	#$1B,d2
00002DB2 6100 E576                  		bsr.w	ShowVDPGraphics
00002DB6 7000                       		moveq	#0,d0
00002DB8 6100 F268                  		bsr.w	PalLoad2	; load Sega logo pallet
00002DBC 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002DC2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002DC8 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002DCE 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002DD4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002DD8 0000 0040                  		ori.b	#$40,d0
00002DDC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002DE2                            
00002DE2                            Sega_WaitPallet:
00002DE2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002DE8 6100 FAD0                  		bsr.w	DelayProgram
00002DEC 6100 F126                  		bsr.w	PalCycle_Sega
00002DF0 66F0                       		bne.s	Sega_WaitPallet
00002DF2                            
00002DF2 103C 00E1                  		move.b	#$E1,d0
00002DF6 6100 E46A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002DFA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002E00 6100 FAB8                  		bsr.w	DelayProgram
00002E04 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002E0A                            
00002E0A                            Sega_WaitEnd:
00002E0A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002E10 6100 FAA8                  		bsr.w	DelayProgram
00002E14 4A78 F614                  		tst.w	($FFFFF614).w
00002E18 6700                       		beq.s	Sega_GotoTitle
00002E1A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002E20 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002E22                            
00002E22                            Sega_GotoTitle:
00002E22 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002E28 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002E2E 4E75                       		rts	
00002E30                            ; ===========================================================================
00002E30                            
00002E30                            ; ---------------------------------------------------------------------------
00002E30                            ; Title	screen
00002E30                            ; ---------------------------------------------------------------------------
00002E30                            
00002E30                            TitleScreen:				; XREF: GameModeArray
00002E30 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002E36 103C 00E4                  		move.b	#$E4,d0
00002E3A 6100 E426                  		bsr.w	PlaySound_Special ; stop music
00002E3E 6100 E6A8                  		bsr.w	ClearPLC
00002E42 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002E48 4A38 F601                  		tst.b	(FromSEGA).w
00002E4C 6700                       		beq.s	@notSEGA
00002E4E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002E54                            
00002E54                            	@notSEGA:
00002E54 6100 EF0C                  		bsr.w	Pal_FadeFrom2
00002E58 46FC 2700                  		move	#$2700,sr
00002E5C 6100 E3BA                  		bsr.w	SoundDriverLoad
00002E60 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E66 3CBC 8004                  		move.w	#$8004,(a6)
00002E6A 3CBC 8230                  		move.w	#$8230,(a6)
00002E6E 3CBC 8407                  		move.w	#$8407,(a6)
00002E72 3CBC 9001                  		move.w	#$9001,(a6)
00002E76 3CBC 9200                  		move.w	#$9200,(a6)
00002E7A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002E7E 3CBC 8720                  		move.w	#$8720,(a6)
00002E82 4238 F64E                  		clr.b	($FFFFF64E).w
00002E86 6100 E302                  		bsr.w	ClearScreen
00002E8A 4EB9 0000 0000             		jsr SHC2021
00002E90 43F8 D000                  		lea	($FFFFD000).w,a1
00002E94 7000                       		moveq	#0,d0
00002E96 323C 07FF                  		move.w	#$7FF,d1
00002E9A                            
00002E9A                            Title_ClrObjRam:
00002E9A 22C0                       		move.l	d0,(a1)+
00002E9C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002EA0                            
00002EA0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002EAA 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002EB0 6100 E498                  		bsr.w	NemDec
00002EB4 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002EBE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002EC4 6100 E484                  		bsr.w	NemDec
00002EC8 43F9 00FF 0000             		lea	($FF0000).l,a1
00002ECE 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002ED4 303C 0000                  		move.w	#0,d0
00002ED8 6100 E74E                  		bsr.w	EniDec
00002EDC 43F9 00FF 0000             		lea	($FF0000).l,a1
00002EE2 203C 4000 0003             		move.l	#$40000003,d0
00002EE8 7227                       		moveq	#$27,d1
00002EEA 741B                       		moveq	#$1B,d2
00002EEC 6100 E43C                  		bsr.w	ShowVDPGraphics
00002EF0                            
00002EF0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002EF4 7000                       		moveq	#0,d0
00002EF6 323C 001F                  		move.w	#$1F,d1
00002EFA                            
00002EFA                            Title_ClrPallet:
00002EFA 22C0                       		move.l	d0,(a1)+
00002EFC 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002F00                            
00002F00 7014                       		moveq	#$14,d0		; load Sonic's pallet
00002F02 6100 F102                  		bsr.w	PalLoad1
00002F06 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002F0C 4EB9 0000 0000             		jsr	ObjectsLoad
00002F12 4EB9 0000 0000             		jsr	BuildSprites
00002F18 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002F1E 4A38 F601                  		tst.b	(FromSEGA).w
00002F22 6700 0000                  		beq.w	@skip
00002F26 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F2C                            
00002F2C                            	@skip:
00002F2C 6100 ED8E                  		bsr.w	Pal_FadeTo2
00002F30 46FC 2700                  		move	#$2700,sr
00002F34 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002F3E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002F44 6100 E404                  		bsr.w	NemDec
00002F48 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00002F52 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00002F58 6100 E3F0                  		bsr.w	NemDec
00002F5C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00002F66 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00002F6C 6100 E3DC                  		bsr.w	NemDec
00002F70 4DF9 00C0 0000             		lea	($C00000).l,a6
00002F76 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00002F7E 4BF9 0000 0534             		lea	(Art_Text).l,a5
00002F84 323C 028F                  		move.w	#$28F,d1
00002F88                            
00002F88                            Title_LoadText:
00002F88 3C9D                       		move.w	(a5)+,(a6)
00002F8A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00002F8E                            
00002F8E 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00002F94 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00002F9A 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00002FA0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00002FA6 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00002FAC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00002FB2 6100 0000                  		bsr.w	LevelSizeLoad
00002FB6 6100 0000                  		bsr.w	DeformBgLayer
00002FBA 43F8 B000                  		lea	($FFFFB000).w,a1
00002FBE 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00002FC4 303C 0000                  		move.w	#0,d0
00002FC8 6100 E65E                  		bsr.w	EniDec
00002FCC 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00002FD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FD8 6100 E7CC                  		bsr.w	KosDec
00002FDC 6100 0000                  		bsr.w	LevelLayoutLoad
00002FE0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002FE6 4A38 F601                  		tst.b	(FromSEGA).w
00002FEA 6700                       		beq.s	@notSEGA
00002FEC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002FF2                            
00002FF2                            	@notSEGA:
00002FF2 6100 ED6E                  		bsr.w	Pal_FadeFrom2
00002FF6 46FC 2700                  		move	#$2700,sr
00002FFA 6100 E18E                  		bsr.w	ClearScreen
00002FFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00003004 4DF9 00C0 0000             		lea	($C00000).l,a6
0000300A 47F8 F708                  		lea	($FFFFF708).w,a3
0000300E 49F8 A440                  		lea	($FFFFA440).w,a4
00003012 343C 6000                  		move.w	#$6000,d2
00003016 6100 0000                  		bsr.w	LoadTilesFromStart2
0000301A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003020 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003026 303C 0000                  		move.w	#0,d0
0000302A 6100 E5FC                  		bsr.w	EniDec
0000302E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003034 203C 4206 0003             		move.l	#$42060003,d0
0000303A 7221                       		moveq	#$21,d1
0000303C 7415                       		moveq	#$15,d2
0000303E 6100 E2EA                  		bsr.w	ShowVDPGraphics
00003042 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000304C 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003052 6100 E2F6                  		bsr.w	NemDec
00003056 7001                       		moveq	#1,d0		; load title screen pallet
00003058 6100 EFAC                  		bsr.w	PalLoad1
0000305C 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003060 6100 E200                  		bsr.w	PlaySound_Special
00003064 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000306A                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
0000306A 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003070 43F8 D080                  		lea	($FFFFD080).w,a1
00003074 7000                       		moveq	#0,d0
00003076 323C 0007                  		move.w	#7,d1
0000307A                            
0000307A                            Title_ClrObjRam2:
0000307A 22C0                       		move.l	d0,(a1)+
0000307C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003080                            
00003080 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003086 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
0000308C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003092 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003098 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000309E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000030A4 4EB9 0000 0000             		jsr	ObjectsLoad
000030AA 6100 0000                  		bsr.w	DeformBgLayer
000030AE 4EB9 0000 0000             		jsr	BuildSprites
000030B4 7000                       		moveq	#0,d0
000030B6 6100 E404                  		bsr.w	LoadPLC2
000030BA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000030C0 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000030C6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030CA 0000 0040                  		ori.b	#$40,d0
000030CE 33C0 00C0 0004             		move.w	d0,($C00004).l
000030D4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000030DA 4A38 F601                  		tst.b	(FromSEGA).w
000030DE 6700                       		beq.s	@notSEGA
000030E0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000030E6 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
000030EC 11FC 0000 F601             		move.b	#0,(FromSEGA).w
000030F2                            
000030F2                            	@notSEGA:
000030F2 6100 EBC8                  		bsr.w	Pal_FadeTo2
000030F6                            
000030F6                            loc_317C:
000030F6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000030FC 6100 F7BC                  		bsr.w	DelayProgram
00003100 4EB9 0000 0000             		jsr	ObjectsLoad
00003106 6100 0000                  		bsr.w	DeformBgLayer
0000310A 4EB9 0000 0000             		jsr	BuildSprites
00003110 6100 E754                  		bsr.w	PalCycle_Title
00003114 6100 E3E0                  		bsr.w	RunPLC_RAM
00003118 3038 D008                  		move.w	($FFFFD008).w,d0
0000311C 5440                       		addq.w	#2,d0
0000311E 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003122 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003126 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003128 6000 FD06                  		bra.w	TitleScreen
0000312C                            ; ===========================================================================
0000312C                            
0000312C                            Title_ChkRegion:
0000312C 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003130 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003132 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003138 6000                       		bra.s	Title_EnterCheat
0000313A                            ; ===========================================================================
0000313A                            
0000313A                            Title_RegionJ:				; XREF: Title_ChkRegion
0000313A 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003140                            
00003140                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003140 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003144 D0C0                       		adda.w	d0,a0
00003146 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000314A 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000314E B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003150 6600                       		bne.s	loc_3210	; if not, branch
00003152 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003156 4A00                       		tst.b	d0
00003158 6600                       		bne.s	Title_CountC
0000315A 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
0000315E 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003162 E249                       		lsr.w	#1,d1
00003164 0241 0003                  		andi.w	#3,d1
00003168 6700                       		beq.s	Title_PlayRing
0000316A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000316E 6A00                       		bpl.s	Title_PlayRing
00003170 7201                       		moveq	#1,d1
00003172 1181 1001                  		move.b	d1,1(a0,d1.w)
00003176                            
00003176                            Title_PlayRing:
00003176 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000317C 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003180 6100 E0E0                  		bsr.w	PlaySound_Special
00003184 6000                       		bra.s	Title_CountC
00003186                            ; ===========================================================================
00003186                            
00003186                            loc_3210:				; XREF: Title_EnterCheat
00003186 4A00                       		tst.b	d0
00003188 6700                       		beq.s	Title_CountC
0000318A 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003190 6700                       		beq.s	Title_CountC
00003192 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003198                            
00003198                            Title_CountC:
00003198 1038 F605                  		move.b	($FFFFF605).w,d0
0000319C 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000031A0 6700                       		beq.s	loc_3230	; if not, branch
000031A2 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000031A6                            
000031A6                            loc_3230:
000031A6 4A78 F614                  		tst.w	($FFFFF614).w
000031AA 6700 0000                  		beq.w	Demo
000031AE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000031B4 6700 FF40                  		beq.w	loc_317C	; if not, branch
000031B8                            
000031B8                            Title_ChkLevSel:
000031B8 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000031BC 6700 0000                  		beq.w	PlayLevel	; if not, play level
000031C0 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000031C6 6700 0000                  		beq.w	PlayLevel	; if not, play level
000031CA 7002                       		moveq	#2,d0
000031CC 6100 EE54                  		bsr.w	PalLoad2	; load level select pallet
000031D0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000031D4 7000                       		moveq	#0,d0
000031D6 323C 00DF                  		move.w	#$DF,d1
000031DA                            
000031DA                            Title_ClrScroll:
000031DA 22C0                       		move.l	d0,(a1)+
000031DC 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000031E0                            
000031E0 21C0 F616                  		move.l	d0,($FFFFF616).w
000031E4 46FC 2700                  		move	#$2700,sr
000031E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000031EE 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000031F8 323C 03FF                  		move.w	#$3FF,d1
000031FC                            
000031FC                            Title_ClrVram:
000031FC 2C80                       		move.l	d0,(a6)
000031FE 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003202                            
00003202 6100 0000                  		bsr.w	LevSelTextLoad
00003206                            
00003206                            ; ---------------------------------------------------------------------------
00003206                            ; Level	Select
00003206                            ; ---------------------------------------------------------------------------
00003206                            
00003206                            LevelSelect:
00003206 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000320C 6100 F6AC                  		bsr.w	DelayProgram
00003210 4EB9 0000 0000             		jsr		BuildSprites
00003216 6100 0000                  		bsr.w	LevSelControls
0000321A 6100 E2DA                  		bsr.w	RunPLC_RAM
0000321E 4AB8 F680                  		tst.l	($FFFFF680).w
00003222 66E2                       		bne.s	LevelSelect
00003224 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000322A 67DA                       		beq.s	LevelSelect	; if not, branch
0000322C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003230 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003234 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003236 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000323A 0640 0080                  		addi.w	#$80,d0
0000323E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003242 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003244 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003248 6700                       		beq.s	LevSel_Ending	; if yes, branch
0000324A 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
0000324E 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003250                            
00003250                            LevSel_NoCheat:
00003250 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
00003254 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003256 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000325A 65AA                       		bcs.s	LevelSelect	; if yes, branch
0000325C                            
0000325C                            LevSel_PlaySnd:
0000325C 6100 E004                  		bsr.w	PlaySound_Special
00003260 60A4                       		bra.s	LevelSelect
00003262                            ; ===========================================================================
00003262                            
00003262                            LevSel_Ending:				; XREF: LevelSelect
00003262 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003268 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000326E                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
0000326E 4E75                       		rts	
00003270                            ; ===========================================================================
00003270                            
00003270                            LevSel_Credits:				; XREF: LevelSelect
00003270 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003276 103C 0091                  		move.b	#$91,d0
0000327A 6100 DFE6                  		bsr.w	PlaySound_Special ; play credits music
0000327E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003284 4E75                       		rts	
00003286                            ; ===========================================================================
00003286                            
00003286                            LevSel_Level_SS:			; XREF: LevelSelect
00003286 D040                       		add.w	d0,d0
00003288 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000328C 6B00 FF78                  		bmi.w	LevelSelect
00003290 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003294 6600                       		bne.s	LevSel_Level	; if not, branch
00003296 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000329C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000032A0 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000032A6 7000                       		moveq	#0,d0
000032A8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000032AC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000032B0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000032B4 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000032B8                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
000032B8                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
000032B8 4E75                       		rts	
000032BA                            ; ===========================================================================
000032BA                            ; ---------------------------------------------------------------------------
000032BA                            ; Level	select - level pointers
000032BA                            ; ---------------------------------------------------------------------------
000032BA                            LSelectPointers:
000032BA                            		incbin	misc\ls_point.bin
000032E4                            		even
000032E4                            
000032E4                            LevSel_Level:				; XREF: LevSel_Level_SS
000032E4 0240 3FFF                  		andi.w	#$3FFF,d0
000032E8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000032EC                            
000032EC                            PlayLevel:				; XREF: ROM:00003246j ...
000032EC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000032F2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000032F8 7000                       		moveq	#0,d0
000032FA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000032FE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003302 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003306 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000330A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000330E                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
0000330E                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
0000330E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003312 103C 00E0                  		move.b	#$E0,d0
00003316 6100 DF4A                  		bsr.w	PlaySound_Special ; fade out music
0000331A 4E75                       		rts	
0000331C                            ; ===========================================================================
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            ; Level	select codes
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            LevelSelectCode_J:
0000331C                            		incbin	misc\ls_jcode.bin
00003322                            		even
00003322                            
00003322                            LevelSelectCode_US:
00003322                            		incbin	misc\ls_ucode.bin
00003328                            		even
00003328                            ; ===========================================================================
00003328                            
00003328                            ; ---------------------------------------------------------------------------
00003328                            ; Demo mode
00003328                            ; ---------------------------------------------------------------------------
00003328                            
00003328                            Demo:					; XREF: TitleScreen
00003328 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000332E                            
0000332E                            loc_33B6:				; XREF: loc_33E4
0000332E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003334 6100 F584                  		bsr.w	DelayProgram
00003338 6100 0000                  		bsr.w	DeformBgLayer
0000333C 6100 E508                  		bsr.w	PalCycle_Load
00003340 6100 E1B4                  		bsr.w	RunPLC_RAM
00003344 3038 D008                  		move.w	($FFFFD008).w,d0
00003348 5440                       		addq.w	#2,d0
0000334A 31C0 D008                  		move.w	d0,($FFFFD008).w
0000334E 0C40 1C00                  		cmpi.w	#$1C00,d0
00003352 6500                       		bcs.s	loc_33E4
00003354 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
0000335A 4E75                       		rts	
0000335C                            ; ===========================================================================
0000335C                            
0000335C                            loc_33E4:				; XREF: Demo
0000335C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003362 6600 FE54                  		bne.w	Title_ChkLevSel	; if yes, branch
00003366 4A78 F614                  		tst.w	($FFFFF614).w
0000336A 6600 FFC2                  		bne.w	loc_33B6
0000336E 103C 00E0                  		move.b	#$E0,d0
00003372 6100 DEEE                  		bsr.w	PlaySound_Special ; fade out music
00003376 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000337A 0240 0007                  		andi.w	#7,d0
0000337E D040                       		add.w	d0,d0
00003380 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003384 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003388 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000338C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003392 6500                       		bcs.s	loc_3422	; if yes, branch
00003394 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000339A                            
0000339A                            loc_3422:
0000339A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000033A0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000033A6 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000033AA 6600                       		bne.s	Demo_Level	; if not, branch
000033AC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033B2 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000033B6 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000033BA                            
000033BA                            Demo_Level:
000033BA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033C0 7000                       		moveq	#0,d0
000033C2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033C6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000033CA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000033CE 4E75                       		rts	
000033D0                            ; ===========================================================================
000033D0                            ; ---------------------------------------------------------------------------
000033D0                            ; Levels used in demos
000033D0                            ; ---------------------------------------------------------------------------
000033D0                            Demo_Levels:	incbin	misc\dm_ord1.bin
000033D8                            		even
000033D8                            
000033D8                            ; ---------------------------------------------------------------------------
000033D8                            ; Subroutine to	change what you're selecting in the level select
000033D8                            ; ---------------------------------------------------------------------------
000033D8                            
000033D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033D8                            
000033D8                            
000033D8                            LevSelControls:				; XREF: LevelSelect
000033D8 1238 F605                  		move.b	($FFFFF605).w,d1
000033DC 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000033E0 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000033E2 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000033E6 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000033E8                            
000033E8                            LevSel_UpDown:
000033E8 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000033EE 1238 F604                  		move.b	($FFFFF604).w,d1
000033F2 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000033F6 6700                       		beq.s	LevSel_SndTest	; if not, branch
000033F8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000033FC 0801 0000                  		btst	#0,d1		; is up	pressed?
00003400 6700                       		beq.s	LevSel_Down	; if not, branch
00003402 5340                       		subq.w	#1,d0		; move up 1 selection
00003404 6400                       		bcc.s	LevSel_Down
00003406 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003408                            
00003408                            LevSel_Down:
00003408 0801 0001                  		btst	#1,d1		; is down pressed?
0000340C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000340E 5240                       		addq.w	#1,d0		; move down 1 selection
00003410 0C40 0015                  		cmpi.w	#$15,d0
00003414 6500                       		bcs.s	LevSel_Refresh
00003416 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003418                            
00003418                            LevSel_Refresh:
00003418 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
0000341C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003420 4E75                       		rts	
00003422                            ; ===========================================================================
00003422                            
00003422                            LevSel_SndTest:				; XREF: LevSelControls
00003422 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003428 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000342A 1238 F605                  		move.b	($FFFFF605).w,d1
0000342E 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003432 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003434 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003438 0801 0002                  		btst	#2,d1		; is left pressed?
0000343C 6700                       		beq.s	LevSel_Right	; if not, branch
0000343E 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003440 6400                       		bcc.s	LevSel_Right
00003442 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003444                            
00003444                            LevSel_Right:
00003444 0801 0003                  		btst	#3,d1		; is right pressed?
00003448 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000344A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000344C 0C40 0050                  		cmpi.w	#$50,d0
00003450 6500                       		bcs.s	LevSel_Refresh2
00003452 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003454                            
00003454                            LevSel_Refresh2:
00003454 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003458 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000345C                            
0000345C                            LevSel_NoMove:
0000345C 4E75                       		rts	
0000345E                            ; End of function LevSelControls
0000345E                            
0000345E                            ; ---------------------------------------------------------------------------
0000345E                            ; Subroutine to load level select text
0000345E                            ; ---------------------------------------------------------------------------
0000345E                            
0000345E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000345E                            
0000345E                            
0000345E                            LevSelTextLoad:				; XREF: TitleScreen
0000345E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003464 4DF9 00C0 0000             		lea	($C00000).l,a6
0000346A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003470 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003474 7214                       		moveq	#$14,d1		; number of lines of text
00003476                            
00003476                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003476 2D44 0004                  		move.l	d4,4(a6)
0000347A 6100 0000                  		bsr.w	LevSel_ChgLine
0000347E 0684 0080 0000             		addi.l	#$800000,d4
00003484 51C9 FFF0                  		dbf	d1,loc_34FE
00003488 7000                       		moveq	#0,d0
0000348A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000348E 3200                       		move.w	d0,d1
00003490 283C 6210 0003             		move.l	#$62100003,d4
00003496 EF48                       		lsl.w	#7,d0
00003498 4840                       		swap	d0
0000349A D880                       		add.l	d0,d4
0000349C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034A2 E749                       		lsl.w	#3,d1
000034A4 3001                       		move.w	d1,d0
000034A6 D241                       		add.w	d1,d1
000034A8 D240                       		add.w	d0,d1
000034AA D2C1                       		adda.w	d1,a1
000034AC 363C C680                  		move.w	#$C680,d3
000034B0 2D44 0004                  		move.l	d4,4(a6)
000034B4 6100 0000                  		bsr.w	LevSel_ChgLine
000034B8 363C E680                  		move.w	#$E680,d3
000034BC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000034C2 6600                       		bne.s	loc_3550
000034C4 363C C680                  		move.w	#$C680,d3
000034C8                            
000034C8                            loc_3550:
000034C8 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
000034D2 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034D6 0640 0080                  		addi.w	#$80,d0
000034DA 1400                       		move.b	d0,d2
000034DC E808                       		lsr.b	#4,d0
000034DE 6100 0000                  		bsr.w	LevSel_ChgSnd
000034E2 1002                       		move.b	d2,d0
000034E4 6100 0000                  		bsr.w	LevSel_ChgSnd
000034E8 4E75                       		rts	
000034EA                            ; End of function LevSelTextLoad
000034EA                            
000034EA                            
000034EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034EA                            
000034EA                            
000034EA                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000034EA 0240 000F                  		andi.w	#$F,d0
000034EE 0C00 000A                  		cmpi.b	#$A,d0
000034F2 6500                       		bcs.s	loc_3580
000034F4 5E00                       		addi.b	#7,d0
000034F6                            
000034F6                            loc_3580:
000034F6 D043                       		add.w	d3,d0
000034F8 3C80                       		move.w	d0,(a6)
000034FA 4E75                       		rts	
000034FC                            ; End of function LevSel_ChgSnd
000034FC                            
000034FC                            
000034FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034FC                            
000034FC                            
000034FC                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000034FC 7417                       		moveq	#$17,d2		; number of characters per line
000034FE                            
000034FE                            loc_3588:
000034FE 7000                       		moveq	#0,d0
00003500 1019                       		move.b	(a1)+,d0
00003502 6A00                       		bpl.s	loc_3598
00003504 3CBC 0000                  		move.w	#0,(a6)
00003508 51CA FFF4                  		dbf	d2,loc_3588
0000350C 4E75                       		rts	
0000350E                            ; ===========================================================================
0000350E                            
0000350E                            loc_3598:				; XREF: LevSel_ChgLine
0000350E D043                       		add.w	d3,d0
00003510 3C80                       		move.w	d0,(a6)
00003512 51CA FFEA                  		dbf	d2,loc_3588
00003516 4E75                       		rts	
00003518                            ; End of function LevSel_ChgLine
00003518                            
00003518                            ; ===========================================================================
00003518                            ; ---------------------------------------------------------------------------
00003518                            ; Level	select menu text
00003518                            ; ---------------------------------------------------------------------------
00003518                            LevelMenuText:	incbin	misc\menutext.bin
00003710                            		even
00003710                            ; ---------------------------------------------------------------------------
00003710                            ; Music	playlist
00003710                            ; ---------------------------------------------------------------------------
00003710                            MusicList:	incbin	misc\muslist1.bin
00003718                            		even
00003718                            ; ===========================================================================
00003718                            
00003718                            ; ---------------------------------------------------------------------------
00003718                            ; Level
00003718                            ; ---------------------------------------------------------------------------
00003718                            
00003718                            Level:					; XREF: GameModeArray
00003718 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000371E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003722 6B00                       		bmi.s	loc_37B6
00003724 103C 00E0                  		move.b	#$E0,d0
00003728 6100 DB38                  		bsr.w	PlaySound_Special ; fade out music
0000372C                            
0000372C                            loc_37B6:
0000372C 6100 DDBA                  		bsr.w	ClearPLC
00003730 6100 E62A                  		bsr.w	Pal_FadeFrom
00003734 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003738 6B00                       		bmi.s	Level_ClrRam
0000373A 46FC 2700                  		move	#$2700,sr
0000373E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003748 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000374E 6100 DBFA                  		bsr.w	NemDec
00003752 46FC 2300                  		move	#$2300,sr
00003756 7000                       		moveq	#0,d0
00003758 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000375C E948                       		lsl.w	#4,d0
0000375E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003764 45F2 0000                  		lea	(a2,d0.w),a2
00003768 7000                       		moveq	#0,d0
0000376A 1012                       		move.b	(a2),d0
0000376C 6700                       		beq.s	loc_37FC
0000376E 6100 DD1A                  		bsr.w	LoadPLC		; load level patterns
00003772                            
00003772                            loc_37FC:
00003772 7001                       		moveq	#1,d0
00003774 6100 DD14                  		bsr.w	LoadPLC		; load standard	patterns
00003778                            
00003778                            Level_ClrRam:
00003778 43F8 D000                  		lea	($FFFFD000).w,a1
0000377C 7000                       		moveq	#0,d0
0000377E 323C 07FF                  		move.w	#$7FF,d1
00003782                            
00003782                            Level_ClrObjRam:
00003782 22C0                       		move.l	d0,(a1)+
00003784 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003788                            
00003788 43F8 F628                  		lea	($FFFFF628).w,a1
0000378C 7000                       		moveq	#0,d0
0000378E 323C 0015                  		move.w	#$15,d1
00003792                            
00003792                            Level_ClrVars:
00003792 22C0                       		move.l	d0,(a1)+
00003794 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003798                            
00003798 43F8 F700                  		lea	($FFFFF700).w,a1
0000379C 7000                       		moveq	#0,d0
0000379E 323C 003F                  		move.w	#$3F,d1
000037A2                            
000037A2                            Level_ClrVars2:
000037A2 22C0                       		move.l	d0,(a1)+
000037A4 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000037A8                            
000037A8 43F8 FE60                  		lea	($FFFFFE60).w,a1
000037AC 7000                       		moveq	#0,d0
000037AE 323C 0047                  		move.w	#$47,d1
000037B2                            
000037B2                            Level_ClrVars3:
000037B2 22C0                       		move.l	d0,(a1)+
000037B4 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000037B8 46FC 2700                  		move	#$2700,sr
000037BC 6100 D9CC                  		bsr.w	ClearScreen
000037C0 4DF9 00C0 0004             		lea	($C00004).l,a6
000037C6 3CBC 8B03                  		move.w	#$8B03,(a6)
000037CA 3CBC 8230                  		move.w	#$8230,(a6)
000037CE 3CBC 8407                  		move.w	#$8407,(a6)
000037D2 3CBC 857C                  		move.w	#$857C,(a6)
000037D6 3CBC 9001                  		move.w	#$9001,(a6)
000037DA 3CBC 8004                  		move.w	#$8004,(a6)
000037DE 3CBC 8720                  		move.w	#$8720,(a6)
000037E2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000037E8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000037EC 4278 C800                  		clr.w ($FFFFC800).w
000037F0 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
000037F8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000037FE 6600                       		bne.s	Level_LoadPal	; if not, branch
00003800 3CBC 8014                  		move.w	#$8014,(a6)
00003804 7000                       		moveq	#0,d0
00003806 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000380A D040                       		add.w	d0,d0
0000380C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003812 3031 0000                  		move.w	(a1,d0.w),d0
00003816 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000381A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000381E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003822 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003826 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000382A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003830                            
00003830                            Level_LoadPal:
00003830 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003836 46FC 2300                  		move	#$2300,sr
0000383A 7003                       		moveq	#3,d0
0000383C 6100 E7E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003840 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003846 6600                       		bne.s	Level_GetBgm	; if not, branch
00003848 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000384A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003850 6600                       		bne.s	Level_WaterPal	; if not, branch
00003852 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003854                            
00003854                            Level_WaterPal:
00003854 6100 E7E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003858 4A38 FE30                  		tst.b	($FFFFFE30).w
0000385C 6700                       		beq.s	Level_GetBgm
0000385E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003864                            
00003864                            Level_GetBgm:
00003864 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003868 6B00                       		bmi.s	loc_3946
0000386A 7000                       		moveq	#0,d0
0000386C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003870 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
00003876 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00003878 7005                       		moveq	#5,d0		; move 5 to d0
0000387A                            
0000387A                            Level_BgmNotLZ4:
0000387A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00003880 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003882 7006                       		moveq	#6,d0		; move 6 to d0
00003884                            
00003884                            Level_PlayBgm:
00003884 43F9 0000 3710             		lea	(MusicList).l,a1 ; load	music playlist
0000388A 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000388E 6100 D9CC                  		bsr.w	PlaySound	; play music
00003892 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003898                            
00003898                            Level_TtlCard:
00003898 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000389E 6100 F01A                  		bsr.w	DelayProgram
000038A2 4EB9 0000 0000             		jsr	ObjectsLoad
000038A8 4EB9 0000 0000             		jsr	BuildSprites
000038AE 6100 DC46                  		bsr.w	RunPLC_RAM
000038B2 3038 D108                  		move.w	($FFFFD108).w,d0
000038B6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000038BA 66DC                       		bne.s	Level_TtlCard	; if not, branch
000038BC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000038C0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000038C2 4EB9 0000 0000             		jsr	Hud_Base
000038C8                            
000038C8                            loc_3946:
000038C8 7003                       		moveq	#3,d0
000038CA 6100 E73A                  		bsr.w	PalLoad1	; load Sonic's pallet line
000038CE 6100 0000                  		bsr.w	LevelSizeLoad
000038D2 6100 0000                  		bsr.w	DeformBgLayer
000038D6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000038DC 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000038E0 6100 0000                  		bsr.w	LoadTilesFromStart
000038E4 4EB9 0000 0000             		jsr	FloorLog_Unk
000038EA 6100 0000                  		bsr.w	ColIndexLoad
000038EE 6100 0000                  		bsr.w	LZWaterEffects
000038F2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000038F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038FC 6B00                       		bmi.s	Level_ChkDebug
000038FE 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003904                            
00003904                            Level_ChkDebug:
00003904 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003908 6700                       		beq.s	Level_ChkWater	; if not, branch
0000390A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003910 6700                       		beq.s	Level_ChkWater	; if not, branch
00003912 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003918                            
00003918                            Level_ChkWater:
00003918 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000391E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003924 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000392A 6600                       		bne.s	Level_LoadObj	; if not, branch
0000392C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003932 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003938 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000393E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003944                            
00003944                            Level_LoadObj:
00003944 4EB9 0000 0000             		jsr	ObjPosLoad
0000394A 4EB9 0000 0000             		jsr	ObjectsLoad
00003950 4EB9 0000 0000             		jsr	BuildSprites
00003956 7000                       		moveq	#0,d0
00003958 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000395C 6600                       		bne.s	loc_39E8	; if yes, branch
0000395E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003962 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003966 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000396A                            
0000396A                            loc_39E8:
0000396A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000396E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003972 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003976 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000397A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000397E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003982 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003986 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000398A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0000398E 6100 0000                  		bsr.w	OscillateNumInit
00003992 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003998 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000399E 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000039A4 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000039AA 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000039B0 7000                       		moveq	#0,d0
000039B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039B6 E548                       		lsl.w	#2,d0
000039B8 2271 0000                  		movea.l	(a1,d0.w),a1
000039BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000039C0 6A00                       		bpl.s	Level_Demo	; if yes, branch
000039C2 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000039C8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000039CC 5340                       		subq.w	#1,d0
000039CE E548                       		lsl.w	#2,d0
000039D0 2271 0000                  		movea.l	(a1,d0.w),a1
000039D4                            
000039D4                            Level_Demo:
000039D4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000039DA 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000039DE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000039E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039E8 6A00                       		bpl.s	Level_ChkWaterPal
000039EA 31FC 021C F614             		move.w	#540,($FFFFF614).w
000039F0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000039F6 6600                       		bne.s	Level_ChkWaterPal
000039F8 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000039FE                            
000039FE                            Level_ChkWaterPal:
000039FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A04 6600                       		bne.s	Level_Delay	; if not, branch
00003A06 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A08 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A0E 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A10 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A12                            
00003A12                            Level_WaterPal2:
00003A12 6100 E642                  		bsr.w	PalLoad4_Water
00003A16                            
00003A16                            Level_Delay:
00003A16 323C 0003                  		move.w	#3,d1
00003A1A                            
00003A1A                            Level_DelayLoop:
00003A1A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A20 6100 EE98                  		bsr.w	DelayProgram
00003A24 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003A28                            
00003A28 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003A2E 6100 E28C                  		bsr.w	Pal_FadeTo2
00003A32 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A36 6B00                       		bmi.s	Level_ClrCardArt
00003A38 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003A3C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003A40 5838 D124                  		addq.b	#4,($FFFFD124).w
00003A44 5838 D164                  		addq.b	#4,($FFFFD164).w
00003A48 6000                       		bra.s	Level_StartGame
00003A4A                            ; ===========================================================================
00003A4A                            
00003A4A                            Level_ClrCardArt:
00003A4A 7002                       		moveq	#2,d0
00003A4C 4EB9 0000 148A             		jsr	(LoadPLC).l	; load explosion patterns
00003A52 7000                       		moveq	#0,d0
00003A54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A58 0640 0015                  		addi.w	#$15,d0
00003A5C 4EB9 0000 148A             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003A62                            
00003A62                            Level_StartGame:
00003A62 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003A68                            
00003A68                            ; ---------------------------------------------------------------------------
00003A68                            ; Main level loop (when	all title card and loading sequences are finished)
00003A68                            ; ---------------------------------------------------------------------------
00003A68                            
00003A68                            Level_MainLoop:
00003A68 6100 D804                  		bsr.w	PauseGame
00003A6C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A72 6100 EE46                  		bsr.w	DelayProgram
00003A76 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003A7A 6100 0000                  		bsr.w	MoveSonicInDemo
00003A7E 6100 0000                  		bsr.w	LZWaterEffects
00003A82 4EB9 0000 0000             		jsr	ObjectsLoad
00003A88 4A78 FE08                  		tst.w	($FFFFFE08).w
00003A8C 6600                       		bne.s	loc_3B10
00003A8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003A94 6400                       		bcc.s	loc_3B14
00003A96                            
00003A96                            loc_3B10:
00003A96 6100 0000                  		bsr.w	DeformBgLayer
00003A9A                            
00003A9A                            loc_3B14:
00003A9A 4EB9 0000 0000             		jsr	BuildSprites
00003AA0 4EB9 0000 0000             		jsr	ObjPosLoad
00003AA6 6100 DD9E                  		bsr.w	PalCycle_Load
00003AAA 6100 DA4A                  		bsr.w	RunPLC_RAM
00003AAE 6100 0000                  		bsr.w	OscillateNumDo
00003AB2 6100 0000                  		bsr.w	ChangeRingFrame
00003AB6 6100 0000                  		bsr.w	SignpostArtLoad
00003ABA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003AC0 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003AC2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003AC6 6600 FC50                  		bne.w	Level		; if yes, branch
00003ACA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003AD0 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003AD4 4E75                       		rts	
00003AD6                            ; ===========================================================================
00003AD6                            
00003AD6                            Level_ChkDemo:				; XREF: Level_MainLoop
00003AD6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003ADA 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003ADC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003AE0 6700                       		beq.s	Level_EndDemo	; if not, branch
00003AE2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003AE8 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003AEC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003AF2 4E75                       		rts	
00003AF4                            ; ===========================================================================
00003AF4                            
00003AF4                            Level_EndDemo:				; XREF: Level_ChkDemo
00003AF4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003AFA 6600                       		bne.s	loc_3B88	; if not, branch
00003AFC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003B02 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B06 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B08 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B0E                            
00003B0E                            loc_3B88:
00003B0E 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B14 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003B1A 4278 F794                  		clr.w	($FFFFF794).w
00003B1E                            
00003B1E                            loc_3B98:
00003B1E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B24 6100 ED94                  		bsr.w	DelayProgram
00003B28 6100 0000                  		bsr.w	MoveSonicInDemo
00003B2C 4EB9 0000 0000             		jsr	ObjectsLoad
00003B32 4EB9 0000 0000             		jsr	BuildSprites
00003B38 4EB9 0000 0000             		jsr	ObjPosLoad
00003B3E 5378 F794                  		subq.w	#1,($FFFFF794).w
00003B42 6A00                       		bpl.s	loc_3BC8
00003B44 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003B4A 6100 E230                  		bsr.w	Pal_FadeOut
00003B4E                            
00003B4E                            loc_3BC8:
00003B4E 4A78 F614                  		tst.w	($FFFFF614).w
00003B52 66CA                       		bne.s	loc_3B98
00003B54 4E75                       		rts	
00003B56                            ; ===========================================================================
00003B56                            ; ---------------------------------------------------------------------------
00003B56                            ; Subroutine to	do special water effects in Labyrinth Zone
00003B56                            ; ---------------------------------------------------------------------------
00003B56                            
00003B56                            LZWaterEffects:				; XREF: Level
00003B56 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003B5C 6600                       		bne.s	locret_3C28	; if not, branch
00003B5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B64 6400                       		bcc.s	LZMoveWater
00003B66 6100 0000                  		bsr.w	LZWindTunnels
00003B6A 6100 0000                  		bsr.w	LZWaterSlides
00003B6E 6100 0000                  		bsr.w	LZDynamicWater
00003B72                            
00003B72                            LZMoveWater:
00003B72 4238 F64E                  		clr.b	($FFFFF64E).w
00003B76 7000                       		moveq	#0,d0
00003B78 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003B7C E248                       		lsr.w	#1,d0
00003B7E D078 F648                  		add.w	($FFFFF648).w,d0
00003B82 31C0 F646                  		move.w	d0,($FFFFF646).w
00003B86 3038 F646                  		move.w	($FFFFF646).w,d0
00003B8A 9078 F704                  		sub.w	($FFFFF704).w,d0
00003B8E 6400                       		bcc.s	loc_3C1A
00003B90 4A40                       		tst.w	d0
00003B92 6A00                       		bpl.s	loc_3C1A
00003B94 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003B9A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003BA0                            
00003BA0                            loc_3C1A:
00003BA0 0C40 00DF                  		cmpi.w	#$DF,d0
00003BA4 6500                       		bcs.s	loc_3C24
00003BA6 303C 00DF                  		move.w	#$DF,d0
00003BAA                            
00003BAA                            loc_3C24:
00003BAA 11C0 F625                  		move.b	d0,($FFFFF625).w
00003BAE                            
00003BAE                            locret_3C28:
00003BAE 4E75                       		rts	
00003BB0                            ; ===========================================================================
00003BB0                            ; ---------------------------------------------------------------------------
00003BB0                            ; Labyrinth default water heights
00003BB0                            ; ---------------------------------------------------------------------------
00003BB0                            WaterHeight:	incbin	misc\lz_heigh.bin
00003BB8                            		even
00003BB8                            ; ===========================================================================
00003BB8                            
00003BB8                            ; ---------------------------------------------------------------------------
00003BB8                            ; Labyrinth dynamic water routines
00003BB8                            ; ---------------------------------------------------------------------------
00003BB8                            
00003BB8                            LZDynamicWater:				; XREF: LZWaterEffects
00003BB8 7000                       		moveq	#0,d0
00003BBA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BBE D040                       		add.w	d0,d0
00003BC0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003BC4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003BC8 7200                       		moveq	#0,d1
00003BCA 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003BCE 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003BD2 9078 F648                  		sub.w	($FFFFF648).w,d0
00003BD6 6700                       		beq.s	locret_3C5A
00003BD8 6400                       		bcc.s	loc_3C56
00003BDA 4441                       		neg.w	d1
00003BDC                            
00003BDC                            loc_3C56:
00003BDC D378 F648                  		add.w	d1,($FFFFF648).w
00003BE0                            
00003BE0                            locret_3C5A:
00003BE0 4E75                       		rts	
00003BE2                            ; ===========================================================================
00003BE2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003BE4 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003BE6 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003BE8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003BEA                            ; ===========================================================================
00003BEA                            
00003BEA                            DynWater_LZ1:				; XREF: DynWater_Index
00003BEA 3038 F700                  		move.w	($FFFFF700).w,d0
00003BEE 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003BF2 6600                       		bne.s	loc_3CD0
00003BF4 323C 00B8                  		move.w	#$B8,d1
00003BF8 0C40 0600                  		cmpi.w	#$600,d0
00003BFC 6500                       		bcs.s	loc_3CB4
00003BFE 323C 0108                  		move.w	#$108,d1
00003C02 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C08 6500                       		bcs.s	loc_3CBA
00003C0A 0C40 0C00                  		cmpi.w	#$C00,d0
00003C0E 6500                       		bcs.s	loc_3CB4
00003C10 323C 0318                  		move.w	#$318,d1
00003C14 0C40 1080                  		cmpi.w	#$1080,d0
00003C18 6500                       		bcs.s	loc_3CB4
00003C1A 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C20 323C 05C8                  		move.w	#$5C8,d1
00003C24 0C40 1380                  		cmpi.w	#$1380,d0
00003C28 6500                       		bcs.s	loc_3CB4
00003C2A 323C 03A8                  		move.w	#$3A8,d1
00003C2E B278 F648                  		cmp.w	($FFFFF648).w,d1
00003C32 6600                       		bne.s	loc_3CB4
00003C34 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003C3A                            
00003C3A                            loc_3CB4:
00003C3A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C3E 4E75                       		rts	
00003C40                            ; ===========================================================================
00003C40                            
00003C40                            loc_3CBA:				; XREF: DynWater_LZ1
00003C40 0C40 0C80                  		cmpi.w	#$C80,d0
00003C44 65F4                       		bcs.s	loc_3CB4
00003C46 323C 00E8                  		move.w	#$E8,d1
00003C4A 0C40 1500                  		cmpi.w	#$1500,d0
00003C4E 65EA                       		bcs.s	loc_3CB4
00003C50 323C 0108                  		move.w	#$108,d1
00003C54 60E4                       		bra.s	loc_3CB4
00003C56                            ; ===========================================================================
00003C56                            
00003C56                            loc_3CD0:				; XREF: DynWater_LZ1
00003C56 5302                       		subq.b	#1,d2
00003C58 6600                       		bne.s	locret_3CF4
00003C5A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003C60 6400                       		bcc.s	locret_3CF4
00003C62 323C 03A8                  		move.w	#$3A8,d1
00003C66 0C40 1300                  		cmpi.w	#$1300,d0
00003C6A 6500                       		bcs.s	loc_3CF0
00003C6C 323C 0108                  		move.w	#$108,d1
00003C70 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003C76                            
00003C76                            loc_3CF0:
00003C76 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C7A                            
00003C7A                            locret_3CF4:
00003C7A 4E75                       		rts	
00003C7C                            ; ===========================================================================
00003C7C                            
00003C7C                            DynWater_LZ2:				; XREF: DynWater_Index
00003C7C 3038 F700                  		move.w	($FFFFF700).w,d0
00003C80 323C 0328                  		move.w	#$328,d1
00003C84 0C40 0500                  		cmpi.w	#$500,d0
00003C88 6500                       		bcs.s	loc_3D12
00003C8A 323C 03C8                  		move.w	#$3C8,d1
00003C8E 0C40 0B00                  		cmpi.w	#$B00,d0
00003C92 6500                       		bcs.s	loc_3D12
00003C94 323C 0428                  		move.w	#$428,d1
00003C98                            
00003C98                            loc_3D12:
00003C98 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C9C 4E75                       		rts	
00003C9E                            ; ===========================================================================
00003C9E                            
00003C9E                            DynWater_LZ3:				; XREF: DynWater_Index
00003C9E 3038 F700                  		move.w	($FFFFF700).w,d0
00003CA2 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003CA6 6600                       		bne.s	loc_3D5E
00003CA8 323C 0900                  		move.w	#$900,d1
00003CAC 0C40 0600                  		cmpi.w	#$600,d0
00003CB0 6500                       		bcs.s	loc_3D54
00003CB2 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003CB8 6500                       		bcs.s	loc_3D54
00003CBA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003CC0 6400                       		bcc.s	loc_3D54
00003CC2 323C 04C8                  		move.w	#$4C8,d1
00003CC6 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003CCC 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CD2 303C 00B7                  		move.w	#$B7,d0
00003CD6 6100 D58A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003CDA                            
00003CDA                            loc_3D54:
00003CDA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CDE 31C1 F648                  		move.w	d1,($FFFFF648).w
00003CE2 4E75                       		rts	
00003CE4                            ; ===========================================================================
00003CE4                            
00003CE4                            loc_3D5E:				; XREF: DynWater_LZ3
00003CE4 5302                       		subq.b	#1,d2
00003CE6 6600                       		bne.s	loc_3DA8
00003CE8 323C 04C8                  		move.w	#$4C8,d1
00003CEC 0C40 0770                  		cmpi.w	#$770,d0
00003CF0 6500                       		bcs.s	loc_3DA2
00003CF2 323C 0308                  		move.w	#$308,d1
00003CF6 0C40 1400                  		cmpi.w	#$1400,d0
00003CFA 6500                       		bcs.s	loc_3DA2
00003CFC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D02 6700                       		beq.s	loc_3D8E
00003D04 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D0A 6400                       		bcc.s	loc_3D8E
00003D0C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D12 6400                       		bcc.s	loc_3DA2
00003D14                            
00003D14                            loc_3D8E:
00003D14 323C 0508                  		move.w	#$508,d1
00003D18 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D1C 0C40 1770                  		cmpi.w	#$1770,d0
00003D20 6500                       		bcs.s	loc_3DA2
00003D22 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003D28                            
00003D28                            loc_3DA2:
00003D28 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D2C 4E75                       		rts	
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            loc_3DA8:
00003D2E 5302                       		subq.b	#1,d2
00003D30 6600                       		bne.s	loc_3DD2
00003D32 323C 0508                  		move.w	#$508,d1
00003D36 0C40 1860                  		cmpi.w	#$1860,d0
00003D3A 6500                       		bcs.s	loc_3DCC
00003D3C 323C 0188                  		move.w	#$188,d1
00003D40 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003D44 6400                       		bcc.s	loc_3DC6
00003D46 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003D4A 6600                       		bne.s	loc_3DCC
00003D4C                            
00003D4C                            loc_3DC6:
00003D4C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003D52                            
00003D52                            loc_3DCC:
00003D52 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D56 4E75                       		rts	
00003D58                            ; ===========================================================================
00003D58                            
00003D58                            loc_3DD2:
00003D58 5302                       		subq.b	#1,d2
00003D5A 6600                       		bne.s	loc_3E0E
00003D5C 323C 0188                  		move.w	#$188,d1
00003D60 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003D64 6500                       		bcs.s	loc_3E04
00003D66 323C 0900                  		move.w	#$900,d1
00003D6A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003D6E 6500                       		bcs.s	loc_3E04
00003D70 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003D76 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003D7C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003D82 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003D88 4E75                       		rts	
00003D8A                            ; ===========================================================================
00003D8A                            
00003D8A                            loc_3E04:
00003D8A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D8E 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D92 4E75                       		rts	
00003D94                            ; ===========================================================================
00003D94                            
00003D94                            loc_3E0E:
00003D94 0C40 1E00                  		cmpi.w	#$1E00,d0
00003D98 6500                       		bcs.s	locret_3E1A
00003D9A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003DA0                            
00003DA0                            locret_3E1A:
00003DA0 4E75                       		rts	
00003DA2                            ; ===========================================================================
00003DA2                            
00003DA2                            DynWater_SBZ3:				; XREF: DynWater_Index
00003DA2 323C 0228                  		move.w	#$228,d1
00003DA6 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003DAC 6500                       		bcs.s	loc_3E2C
00003DAE 323C 04C8                  		move.w	#$4C8,d1
00003DB2                            
00003DB2                            loc_3E2C:
00003DB2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DB6 4E75                       		rts
00003DB8                            
00003DB8                            ; ---------------------------------------------------------------------------
00003DB8                            ; Labyrinth Zone "wind tunnels"	subroutine
00003DB8                            ; ---------------------------------------------------------------------------
00003DB8                            
00003DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DB8                            
00003DB8                            
00003DB8                            LZWindTunnels:				; XREF: LZWaterEffects
00003DB8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003DBC 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003DC0 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003DC6 7000                       		moveq	#0,d0
00003DC8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003DCC E748                       		lsl.w	#3,d0
00003DCE D4C0                       		adda.w	d0,a2
00003DD0 7200                       		moveq	#0,d1
00003DD2 4A38 FE11                  		tst.b	($FFFFFE11).w
00003DD6 6600                       		bne.s	loc_3E56
00003DD8 7201                       		moveq	#1,d1
00003DDA 514A                       		subq.w	#8,a2
00003DDC                            
00003DDC                            loc_3E56:
00003DDC 43F8 D000                  		lea	($FFFFD000).w,a1
00003DE0                            
00003DE0                            LZWind_Loop:
00003DE0 3029 0008                  		move.w	8(a1),d0
00003DE4 B052                       		cmp.w	(a2),d0
00003DE6 6500 0000                  		bcs.w	loc_3EF4
00003DEA B06A 0004                  		cmp.w	4(a2),d0
00003DEE 6400 0000                  		bcc.w	loc_3EF4
00003DF2 3429 000C                  		move.w	$C(a1),d2
00003DF6 B46A 0002                  		cmp.w	2(a2),d2
00003DFA 6500                       		bcs.s	loc_3EF4
00003DFC B46A 0006                  		cmp.w	6(a2),d2
00003E00 6400                       		bcc.s	loc_3EF4
00003E02 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E06 0200 003F                  		andi.b	#$3F,d0
00003E0A 6600                       		bne.s	loc_3E90
00003E0C 303C 00D0                  		move.w	#$D0,d0
00003E10 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E16                            
00003E16                            loc_3E90:
00003E16 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E1A 6600 0000                  		bne.w	locret_3F0A
00003E1E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E24 6400                       		bcc.s	loc_3F06
00003E26 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003E2C 0440 0080                  		subi.w	#$80,d0
00003E30 B052                       		cmp.w	(a2),d0
00003E32 6400                       		bcc.s	LZWind_Move
00003E34 7002                       		moveq	#2,d0
00003E36 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003E3C 6600                       		bne.s	loc_3EBA
00003E3E 4440                       		neg.w	d0
00003E40                            
00003E40                            loc_3EBA:
00003E40 D169 000C                  		add.w	d0,$C(a1)
00003E44                            
00003E44                            LZWind_Move:
00003E44 5869 0008                  		addq.w	#4,8(a1)
00003E48 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003E4E 337C 0000 0012             		move.w	#0,$12(a1)
00003E54 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003E5A 08E9 0001 0022             		bset	#1,$22(a1)
00003E60 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003E66 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003E68 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003E6C                            
00003E6C                            LZWind_MoveDown:
00003E6C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003E72 6700                       		beq.s	locret_3EF2	; if not, branch
00003E74 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003E78                            
00003E78                            locret_3EF2:
00003E78 4E75                       		rts	
00003E7A                            ; ===========================================================================
00003E7A                            
00003E7A                            loc_3EF4:				; XREF: LZWindTunnels
00003E7A 504A                       		addq.w	#8,a2
00003E7C 51C9 FF62                  		dbf	d1,LZWind_Loop
00003E80 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003E84 6700                       		beq.s	locret_3F0A
00003E86 137C 0000 001C             		move.b	#0,$1C(a1)
00003E8C                            
00003E8C                            loc_3F06:
00003E8C 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003E90                            
00003E90                            locret_3F0A:
00003E90 4E75                       		rts	
00003E92                            ; End of function LZWindTunnels
00003E92                            
00003E92                            ; ===========================================================================
00003E92 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003E9A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003EAC 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003EBA                            					; XREF: LZWindTunnels
00003EBA                            		even
00003EBA                            
00003EBA                            ; ---------------------------------------------------------------------------
00003EBA                            ; Labyrinth Zone water slide subroutine
00003EBA                            ; ---------------------------------------------------------------------------
00003EBA                            
00003EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003EBA                            
00003EBA                            
00003EBA                            LZWaterSlides:				; XREF: LZWaterEffects
00003EBA 43F8 D000                  		lea	($FFFFD000).w,a1
00003EBE 0829 0001 0022             		btst	#1,$22(a1)
00003EC4 6600                       		bne.s	loc_3F6A
00003EC6 3029 000C                  		move.w	$C(a1),d0
00003ECA E248                       		lsr.w	#1,d0
00003ECC 0240 0380                  		andi.w	#$380,d0
00003ED0 1229 0008                  		move.b	8(a1),d1
00003ED4 0241 007F                  		andi.w	#$7F,d1
00003ED8 D041                       		add.w	d1,d0
00003EDA 45F8 A400                  		lea	($FFFFA400).w,a2
00003EDE 1032 0000                  		move.b	(a2,d0.w),d0
00003EE2 45FA 0000                  		lea	byte_3FCF(pc),a2
00003EE6 7206                       		moveq	#6,d1
00003EE8                            
00003EE8                            loc_3F62:
00003EE8 B022                       		cmp.b	-(a2),d0
00003EEA 57C9 FFFC                  		dbeq	d1,loc_3F62
00003EEE 6700                       		beq.s	LZSlide_Move
00003EF0                            
00003EF0                            loc_3F6A:
00003EF0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003EF4 6700                       		beq.s	locret_3F7A
00003EF6 337C 0005 003E             		move.w	#5,$3E(a1)
00003EFC 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F00                            
00003F00                            locret_3F7A:
00003F00 4E75                       		rts	
00003F02                            ; ===========================================================================
00003F02                            
00003F02                            LZSlide_Move:				; XREF: LZWaterSlides
00003F02 0C41 0003                  		cmpi.w	#3,d1
00003F06 6400                       		bcc.s	loc_3F84
00003F08 4E71                       		nop	
00003F0A                            
00003F0A                            loc_3F84:
00003F0A 08A9 0000 0022             		bclr	#0,$22(a1)
00003F10 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F14 1340 0014                  		move.b	d0,$14(a1)
00003F18 6A00                       		bpl.s	loc_3F9A
00003F1A 08E9 0000 0022             		bset	#0,$22(a1)
00003F20                            
00003F20                            loc_3F9A:
00003F20 4229 0015                  		clr.b	$15(a1)
00003F24 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003F2A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003F30 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F34 0200 001F                  		andi.b	#$1F,d0
00003F38 6600                       		bne.s	locret_3FBE
00003F3A 303C 00D0                  		move.w	#$D0,d0
00003F3E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play water sound
00003F44                            
00003F44                            locret_3FBE:
00003F44 4E75                       		rts	
00003F46                            ; End of function LZWaterSlides
00003F46                            
00003F46                            ; ===========================================================================
00003F46 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003F55 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003F56                            		even
00003F56                            
00003F56                            ; ---------------------------------------------------------------------------
00003F56                            ; Subroutine to	move Sonic in demo mode
00003F56                            ; ---------------------------------------------------------------------------
00003F56                            
00003F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F56                            
00003F56                            
00003F56                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003F56 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F5A 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003F5C 4E75                       		rts	
00003F5E                            ; ===========================================================================
00003F5E                            
00003F5E                            ; This is an unused subroutine for recording a demo
00003F5E                            
00003F5E                            MoveDemo_Record:
00003F5E 43F9 0008 0000             		lea	($80000).l,a1
00003F64 3038 F790                  		move.w	($FFFFF790).w,d0
00003F68 D2C0                       		adda.w	d0,a1
00003F6A 1038 F604                  		move.b	($FFFFF604).w,d0
00003F6E B011                       		cmp.b	(a1),d0
00003F70 6600                       		bne.s	loc_3FFA
00003F72 5229 0001                  		addq.b	#1,1(a1)
00003F76 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003F7C 6700                       		beq.s	loc_3FFA
00003F7E 4E75                       		rts	
00003F80                            ; ===========================================================================
00003F80                            
00003F80                            loc_3FFA:				; XREF: MoveDemo_Record
00003F80 1340 0002                  		move.b	d0,2(a1)
00003F84 137C 0000 0003             		move.b	#0,3(a1)
00003F8A 5478 F790                  		addq.w	#2,($FFFFF790).w
00003F8E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00003F94 4E75                       		rts	
00003F96                            ; ===========================================================================
00003F96                            
00003F96                            MoveDemo_On:				; XREF: MoveSonicInDemo
00003F96 4A38 F604                  		tst.b	($FFFFF604).w
00003F9A 6A00                       		bpl.s	loc_4022
00003F9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FA0 6B00                       		bmi.s	loc_4022
00003FA2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00003FA8                            
00003FA8                            loc_4022:
00003FA8 43F9 0000 0000             		lea	(Demo_Index).l,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003FB4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00003FBA 6600                       		bne.s	loc_4038
00003FBC 7006                       		moveq	#6,d0
00003FBE                            
00003FBE                            loc_4038:
00003FBE E548                       		lsl.w	#2,d0
00003FC0 2271 0000                  		movea.l	(a1,d0.w),a1
00003FC4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FC8 6A00                       		bpl.s	loc_4056
00003FCA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00003FD0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003FD4 5340                       		subq.w	#1,d0
00003FD6 E548                       		lsl.w	#2,d0
00003FD8 2271 0000                  		movea.l	(a1,d0.w),a1
00003FDC                            
00003FDC                            loc_4056:
00003FDC 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE0 D2C0                       		adda.w	d0,a1
00003FE2 1011                       		move.b	(a1),d0
00003FE4 41F8 F604                  		lea	($FFFFF604).w,a0
00003FE8 1200                       		move.b	d0,d1
00003FEA 1410                       		move.b	(a0),d2
00003FEC B500                       		eor.b	d2,d0
00003FEE 10C1                       		move.b	d1,(a0)+
00003FF0 C001                       		and.b	d1,d0
00003FF2 10C0                       		move.b	d0,(a0)+
00003FF4 5338 F792                  		subq.b	#1,($FFFFF792).w
00003FF8 6400                       		bcc.s	locret_407E
00003FFA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004000 5478 F790                  		addq.w	#2,($FFFFF790).w
00004004                            
00004004                            locret_407E:
00004004 4E75                       		rts	
00004006                            ; End of function MoveSonicInDemo
00004006                            
00004006                            ; ===========================================================================
00004006                            ; ---------------------------------------------------------------------------
00004006                            ; Demo sequence	pointers
00004006                            ; ---------------------------------------------------------------------------
00004006                            Demo_Index:
00004006                            	include "_inc\Demo pointers for intro.asm"
00004006                            ; ---------------------------------------------------------------------------
00004006                            ; Demo sequence	pointers
00004006                            ; ---------------------------------------------------------------------------
00004006 0000 0000                  	dc.l Demo_GHZ
0000400A 0000 0000                  	dc.l Demo_GHZ
0000400E 0000 0000                  	dc.l Demo_MZ
00004012 0000 0000                  	dc.l Demo_MZ
00004016 0000 0000                  	dc.l Demo_SYZ
0000401A 0000 0000                  	dc.l Demo_SYZ
0000401E 0000 0000                  	dc.l Demo_SS
00004022 0000 0000                  	dc.l Demo_SS
00004022 0000 0000                  	dc.l Demo_SS
00004026                            
00004026                            Demo_EndIndex:
00004026                            	include "_inc\Demo pointers for ending.asm"
00004026                            ; ---------------------------------------------------------------------------
00004026                            ; Demo (ending) sequence pointers
00004026                            ; ---------------------------------------------------------------------------
00004026 0000 0000                  	dc.l Demo_EndGHZ1
0000402A 0000 0000                  	dc.l Demo_EndMZ
0000402E 0000 0000                  	dc.l Demo_EndSYZ
00004032 0000 0000                  	dc.l Demo_EndLZ
00004036 0000 0000                  	dc.l Demo_EndSLZ
0000403A 0000 0000                  	dc.l Demo_EndSBZ1
0000403E 0000 0000                  	dc.l Demo_EndSBZ2
00004042 0000 0000                  	dc.l Demo_EndGHZ2
00004042 0000 0000                  	dc.l Demo_EndGHZ2
00004046                            
00004046 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004056 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004066 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004076                            		even
00004076                            
00004076                            ; ---------------------------------------------------------------------------
00004076                            ; Collision index loading subroutine
00004076                            ; ---------------------------------------------------------------------------
00004076                            
00004076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004076                            
00004076                            
00004076                            ColIndexLoad:				; XREF: Level
00004076 7000                       		moveq	#0,d0
00004078 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000407C E548                       		lsl.w	#2,d0
0000407E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004084 4E75                       		rts	
00004086                            ; End of function ColIndexLoad
00004086                            
00004086                            ; ===========================================================================
00004086                            ; ---------------------------------------------------------------------------
00004086                            ; Collision index pointers
00004086                            ; ---------------------------------------------------------------------------
00004086                            ColPointers:
00004086                            	include "_inc\Collision index pointers.asm"
00004086                            ; ---------------------------------------------------------------------------
00004086                            ; Collision index pointers
00004086                            ; ---------------------------------------------------------------------------
00004086 0000 0000                  	dc.l Col_GHZ
0000408A 0000 0000                  	dc.l Col_LZ
0000408E 0000 0000                  	dc.l Col_MZ
00004092 0000 0000                  	dc.l Col_SLZ
00004096 0000 0000                  	dc.l Col_SYZ
0000409A 0000 0000                  	dc.l Col_SBZ
0000409A 0000 0000                  	dc.l Col_SBZ
0000409E                            
0000409E                            ; ---------------------------------------------------------------------------
0000409E                            ; Oscillating number subroutine
0000409E                            ; ---------------------------------------------------------------------------
0000409E                            
0000409E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000409E                            
0000409E                            
0000409E                            OscillateNumInit:			; XREF: Level
0000409E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000040A2 45F9 0000 0000             		lea	(Osc_Data).l,a2
000040A8 7220                       		moveq	#$20,d1
000040AA                            
000040AA                            Osc_Loop:
000040AA 32DA                       		move.w	(a2)+,(a1)+
000040AC 51C9 FFFC                  		dbf	d1,Osc_Loop
000040B0 4E75                       		rts	
000040B2                            ; End of function OscillateNumInit
000040B2                            
000040B2                            ; ===========================================================================
000040B2 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000040B6 0000 0080                  		dc.w 0,	$80
000040BA 0000 0080                  		dc.w 0,	$80
000040BE 0000 0080                  		dc.w 0,	$80
000040C2 0000 0080                  		dc.w 0,	$80
000040C6 0000 0080                  		dc.w 0,	$80
000040CA 0000 0080                  		dc.w 0,	$80
000040CE 0000 0080                  		dc.w 0,	$80
000040D2 0000 0080                  		dc.w 0,	$80
000040D6 0000 50F0                  		dc.w 0,	$50F0
000040DA 011E 2080                  		dc.w $11E, $2080
000040DE 00B4 3080                  		dc.w $B4, $3080
000040E2 010E 5080                  		dc.w $10E, $5080
000040E6 01C2 7080                  		dc.w $1C2, $7080
000040EA 0276 0080                  		dc.w $276, $80
000040EE 0000 0080                  		dc.w 0,	$80
000040F2 0000                       		dc.w 0
000040F4                            		even
000040F4                            
000040F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040F4                            
000040F4                            
000040F4                            OscillateNumDo:				; XREF: Level
000040F4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000040FA 6400                       		bcc.s	locret_41C4
000040FC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004100 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004106 3619                       		move.w	(a1)+,d3
00004108 720F                       		moveq	#$F,d1
0000410A                            
0000410A                            loc_4184:
0000410A 341A                       		move.w	(a2)+,d2
0000410C 381A                       		move.w	(a2)+,d4
0000410E 0303                       		btst	d1,d3
00004110 6600                       		bne.s	loc_41A4
00004112 3029 0002                  		move.w	2(a1),d0
00004116 D042                       		add.w	d2,d0
00004118 3340 0002                  		move.w	d0,2(a1)
0000411C D151                       		add.w	d0,0(a1)
0000411E B811                       		cmp.b	0(a1),d4
00004120 6200                       		bhi.s	loc_41BA
00004122 03C3                       		bset	d1,d3
00004124 6000                       		bra.s	loc_41BA
00004126                            ; ===========================================================================
00004126                            
00004126                            loc_41A4:				; XREF: OscillateNumDo
00004126 3029 0002                  		move.w	2(a1),d0
0000412A 9042                       		sub.w	d2,d0
0000412C 3340 0002                  		move.w	d0,2(a1)
00004130 D151                       		add.w	d0,0(a1)
00004132 B811                       		cmp.b	0(a1),d4
00004134 6300                       		bls.s	loc_41BA
00004136 0383                       		bclr	d1,d3
00004138                            
00004138                            loc_41BA:
00004138 5849                       		addq.w	#4,a1
0000413A 51C9 FFCE                  		dbf	d1,loc_4184
0000413E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004142                            
00004142                            locret_41C4:
00004142 4E75                       		rts	
00004144                            ; End of function OscillateNumDo
00004144                            
00004144                            ; ===========================================================================
00004144 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004148 0002 0018                  		dc.w 2,	$18
0000414C 0002 0020                  		dc.w 2,	$20
00004150 0002 0030                  		dc.w 2,	$30
00004154 0004 0020                  		dc.w 4,	$20
00004158 0008 0008                  		dc.w 8,	8
0000415C 0008 0040                  		dc.w 8,	$40
00004160 0004 0040                  		dc.w 4,	$40
00004164 0002 0050                  		dc.w 2,	$50
00004168 0002 0050                  		dc.w 2,	$50
0000416C 0002 0020                  		dc.w 2,	$20
00004170 0003 0030                  		dc.w 3,	$30
00004174 0005 0050                  		dc.w 5,	$50
00004178 0007 0070                  		dc.w 7,	$70
0000417C 0002 0010                  		dc.w 2,	$10
00004180 0002 0010                  		dc.w 2,	$10
00004184                            		even
00004184                            
00004184                            ; ---------------------------------------------------------------------------
00004184                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004184                            ; ---------------------------------------------------------------------------
00004184                            
00004184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004184                            
00004184                            
00004184                            ChangeRingFrame:			; XREF: Level
00004184 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004188 6A00                       		bpl.s	loc_421C
0000418A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004190 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004194 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000419A                            
0000419A                            loc_421C:
0000419A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000419E 6A00                       		bpl.s	loc_4232
000041A0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000041A6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000041AA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000041B0                            
000041B0                            loc_4232:
000041B0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000041B4 6A00                       		bpl.s	loc_4250
000041B6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000041BC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000041C0 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000041C6 6500                       		bcs.s	loc_4250
000041C8 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000041CE                            
000041CE                            loc_4250:
000041CE 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000041D2 6700                       		beq.s	locret_4272
000041D4 7000                       		moveq	#0,d0
000041D6 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000041DA D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000041DE 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000041E2 EF58                       		rol.w	#7,d0
000041E4 0240 0003                  		andi.w	#3,d0
000041E8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000041EC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000041F0                            
000041F0                            locret_4272:
000041F0 4E75                       		rts	
000041F2                            ; End of function ChangeRingFrame
000041F2                            
000041F2                            ; ---------------------------------------------------------------------------
000041F2                            ; End-of-act signpost pattern loading subroutine
000041F2                            ; ---------------------------------------------------------------------------
000041F2                            
000041F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F2                            
000041F2                            
000041F2                            SignpostArtLoad:			; XREF: Level
000041F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000041F6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000041FA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004200 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004202 3038 F700                  		move.w	($FFFFF700).w,d0
00004206 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000420A 0441 0100                  		subi.w	#$100,d1
0000420E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004210 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004212 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004216 6700                       		beq.s	Signpost_Exit
00004218 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000421C 6700                       		beq.s	Signpost_Exit
0000421E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004222 7012                       		moveq	#$12,d0
00004224 6000 D296                  		bra.w	LoadPLC2	; load signpost	patterns
00004228                            ; ===========================================================================
00004228                            
00004228                            Signpost_Exit:
00004228 4E75                       		rts	
0000422A                            ; End of function SignpostArtLoad
0000422A                            
0000422A                            ; ===========================================================================
0000422A                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000042AA                            Demo_MZ:	incbin	demodata\i_mz.bin
000043DA                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000445A                            Demo_SS:	incbin	demodata\i_ss.bin
0000455A                            ; ===========================================================================
0000455A                            
0000455A                            ; ---------------------------------------------------------------------------
0000455A                            ; Special Stage
0000455A                            ; ---------------------------------------------------------------------------
0000455A                            
0000455A                            SpecialStage:				; XREF: GameModeArray
0000455A 303C 00CA                  		move.w	#$CA,d0
0000455E 6100 CD02                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004562 4EB9 0000 0000             		jsr	BuildSprites
00004568 6100 D91C                  		bsr.w	Pal_MakeFlash
0000456C 46FC 2700                  		move	#$2700,sr
00004570 4DF9 00C0 0004             		lea	($C00004).l,a6
00004576 3CBC 8B03                  		move.w	#$8B03,(a6)
0000457A 3CBC 8004                  		move.w	#$8004,(a6)
0000457E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004584 3CBC 9011                  		move.w	#$9011,(a6)
00004588 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000458C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004592 6100 CBF6                  		bsr.w	ClearScreen
00004596 46FC 2300                  		move	#$2300,sr
0000459A 4BF9 00C0 0004             		lea	($C00004).l,a5
000045A0 3ABC 8F01                  		move.w	#$8F01,(a5)
000045A4 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000045AA 3ABC 9780                  		move.w	#$9780,(a5)
000045AE 2ABC 5000 0081             		move.l	#$50000081,(a5)
000045B4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000045BC                            
000045BC                            loc_463C:
000045BC 3215                       		move.w	(a5),d1
000045BE 0801 0001                  		btst	#1,d1
000045C2 66F8                       		bne.s	loc_463C
000045C4 3ABC 8F02                  		move.w	#$8F02,(a5)
000045C8 6100 0000                  		bsr.w	SS_BGLoad
000045CC 7014                       		moveq	#$14,d0
000045CE 6100 D026                  		bsr.w	RunPLC_ROM	; load special stage patterns
000045D2                            
000045D2 43F8 D000                  		lea	($FFFFD000).w,a1
000045D6 7000                       		moveq	#0,d0
000045D8 323C 07FF                  		move.w	#$7FF,d1
000045DC                            
000045DC                            SS_ClrObjRam:
000045DC 22C0                       		move.l	d0,(a1)+
000045DE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000045E2                            
000045E2 43F8 F700                  		lea	($FFFFF700).w,a1
000045E6 7000                       		moveq	#0,d0
000045E8 323C 003F                  		move.w	#$3F,d1
000045EC                            
000045EC                            SS_ClrRam:
000045EC 22C0                       		move.l	d0,(a1)+
000045EE 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000045F2                            
000045F2 43F8 FE60                  		lea	($FFFFFE60).w,a1
000045F6 7000                       		moveq	#0,d0
000045F8 323C 0027                  		move.w	#$27,d1
000045FC                            
000045FC                            SS_ClrRam2:
000045FC 22C0                       		move.l	d0,(a1)+
000045FE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004602                            
00004602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004606 7000                       		moveq	#0,d0
00004608 323C 007F                  		move.w	#$7F,d1
0000460C                            
0000460C                            SS_ClrNemRam:
0000460C 22C0                       		move.l	d0,(a1)+
0000460E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004612 4238 F64E                  		clr.b	($FFFFF64E).w
00004616 4278 FE02                  		clr.w	($FFFFFE02).w
0000461A 700A                       		moveq	#$A,d0
0000461C 6100 D9E8                  		bsr.w	PalLoad1	; load special stage pallet
00004620 4EB9 0000 0000             		jsr	SS_Load
00004626 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000462E 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004636 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000463C 6100 0000                  		bsr.w	PalCycle_SS
00004640 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004644 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000464A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004650 303C 0089                  		move.w	#$89,d0
00004654 6100 CC06                  		bsr.w	PlaySound	; play special stage BG	music
00004658 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000465E 43F9 0000 4006             		lea	(Demo_Index).l,a1
00004664 7006                       		moveq	#6,d0
00004666 E548                       		lsl.w	#2,d0
00004668 2271 0000                  		movea.l	(a1,d0.w),a1
0000466C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004672 5338 F792                  		subq.b	#1,($FFFFF792).w
00004676 4278 FE20                  		clr.w	($FFFFFE20).w
0000467A 4238 FE1B                  		clr.b	($FFFFFE1B).w
0000467E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004684 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000468A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000468E 6700                       		beq.s	SS_NoDebug	; if not, branch
00004690 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004696 6700                       		beq.s	SS_NoDebug	; if not, branch
00004698 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000469E                            
0000469E                            SS_NoDebug:
0000469E 3038 F60C                  		move.w	($FFFFF60C).w,d0
000046A2 0000 0040                  		ori.b	#$40,d0
000046A6 33C0 00C0 0004             		move.w	d0,($C00004).l
000046AC 6100 D72C                  		bsr.w	Pal_MakeWhite
000046B0                            
000046B0                            ; ---------------------------------------------------------------------------
000046B0                            ; Main Special Stage loop
000046B0                            ; ---------------------------------------------------------------------------
000046B0                            
000046B0                            SS_MainLoop:
000046B0 6100 CBBC                  		bsr.w	PauseGame
000046B4 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000046BA 6100 E1FE                  		bsr.w	DelayProgram
000046BE 6100 F896                  		bsr.w	MoveSonicInDemo
000046C2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000046C8 4EB9 0000 0000             		jsr	ObjectsLoad
000046CE 4EB9 0000 0000             		jsr	BuildSprites
000046D4 4EB9 0000 0000             		jsr	SS_ShowLayout
000046DA 6100 0000                  		bsr.w	SS_BGAnimate
000046DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000046E2 6700                       		beq.s	SS_ChkEnd	; if not, branch
000046E4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000046E8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000046EC                            
000046EC                            SS_ChkEnd:
000046EC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000046F2 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000046F6                            
000046F6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000046FA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000046FE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004704 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000470A 6500                       		bcs.s	SS_End		; if not, branch
0000470C 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004710                            
00004710                            SS_End:
00004710 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004716 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000471C 4278 F794                  		clr.w	($FFFFF794).w
00004720                            
00004720                            SS_EndLoop:
00004720 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004726 6100 E192                  		bsr.w	DelayProgram
0000472A 6100 F82A                  		bsr.w	MoveSonicInDemo
0000472E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004734 4EB9 0000 0000             		jsr	ObjectsLoad
0000473A 4EB9 0000 0000             		jsr	BuildSprites
00004740 4EB9 0000 0000             		jsr	SS_ShowLayout
00004746 6100 0000                  		bsr.w	SS_BGAnimate
0000474A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000474E 6A00                       		bpl.s	loc_47D4
00004750 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004756 6100 D74E                  		bsr.w	Pal_ToWhite
0000475A                            
0000475A                            loc_47D4:
0000475A 4A78 F614                  		tst.w	($FFFFF614).w
0000475E 66C0                       		bne.s	SS_EndLoop
00004760                            
00004760 46FC 2700                  		move	#$2700,sr
00004764 4DF9 00C0 0004             		lea	($C00004).l,a6
0000476A 3CBC 8230                  		move.w	#$8230,(a6)
0000476E 3CBC 8407                  		move.w	#$8407,(a6)
00004772 3CBC 9001                  		move.w	#$9001,(a6)
00004776 6100 CA12                  		bsr.w	ClearScreen
0000477A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004784 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000478A 6100 CBBE                  		bsr.w	NemDec
0000478E 4EB9 0000 0000             		jsr	Hud_Base
00004794 4278 C800                  		clr.w ($FFFFC800).w
00004798 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
000047A0 46FC 2300                  		move	#$2300,sr
000047A4 7011                       		moveq	#$11,d0
000047A6 6100 D87A                  		bsr.w	PalLoad2	; load results screen pallet
000047AA 7000                       		moveq	#0,d0
000047AC 6100 CD0E                  		bsr.w	LoadPLC2
000047B0 701B                       		moveq	#$1B,d0
000047B2 6100 CCD6                  		bsr.w	LoadPLC		; load results screen patterns
000047B6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000047BC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
000047C2 3038 FE20                  		move.w	($FFFFFE20).w,d0
000047C6 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000047CA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
000047CE 303C 008E                  		move.w	#$8E,d0
000047D2 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play end-of-level music
000047D8 43F8 D000                  		lea	($FFFFD000).w,a1
000047DC 7000                       		moveq	#0,d0
000047DE 323C 07FF                  		move.w	#$7FF,d1
000047E2                            
000047E2                            SS_EndClrObjRam:
000047E2 22C0                       		move.l	d0,(a1)+
000047E4 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000047E8                            
000047E8 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000047EE                            
000047EE                            SS_NormalExit:
000047EE 6100 CA7E                  		bsr.w	PauseGame
000047F2 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000047F8 6100 E0C0                  		bsr.w	DelayProgram
000047FC 4EB9 0000 0000             		jsr	ObjectsLoad
00004802 4EB9 0000 0000             		jsr	BuildSprites
00004808 6100 CCEC                  		bsr.w	RunPLC_RAM
0000480C 4A78 FE02                  		tst.w	($FFFFFE02).w
00004810 67DC                       		beq.s	SS_NormalExit
00004812 4AB8 F680                  		tst.l	($FFFFF680).w
00004816 66D6                       		bne.s	SS_NormalExit
00004818 303C 00CA                  		move.w	#$CA,d0
0000481C 6100 CA44                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004820 6100 D664                  		bsr.w	Pal_MakeFlash
00004824 4E75                       		rts	
00004826                            ; ===========================================================================
00004826                            
00004826                            SS_ToSegaScreen:
00004826 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000482C 4E75                       		rts
0000482E                            
0000482E                            ; ---------------------------------------------------------------------------
0000482E                            ; Special stage	background loading subroutine
0000482E                            ; ---------------------------------------------------------------------------
0000482E                            
0000482E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000482E                            
0000482E                            
0000482E                            SS_BGLoad:				; XREF: SpecialStage
0000482E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004834 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000483A 303C 4051                  		move.w	#$4051,d0
0000483E 6100 CDE8                  		bsr.w	EniDec
00004842 263C 5000 0001             		move.l	#$50000001,d3
00004848 45F9 00FF 0080             		lea	($FF0080).l,a2
0000484E 7E06                       		moveq	#6,d7
00004850                            
00004850                            loc_48BE:
00004850 2003                       		move.l	d3,d0
00004852 7C03                       		moveq	#3,d6
00004854 7800                       		moveq	#0,d4
00004856 0C47 0003                  		cmpi.w	#3,d7
0000485A 6400                       		bcc.s	loc_48CC
0000485C 7801                       		moveq	#1,d4
0000485E                            
0000485E                            loc_48CC:
0000485E 7A07                       		moveq	#7,d5
00004860                            
00004860                            loc_48CE:
00004860 224A                       		movea.l	a2,a1
00004862 0A04 0001                  		eori.b	#1,d4
00004866 6600                       		bne.s	loc_48E2
00004868 0C47 0006                  		cmpi.w	#6,d7
0000486C 6600                       		bne.s	loc_48F2
0000486E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004874                            
00004874                            loc_48E2:
00004874 48E7 F800                  		movem.l	d0-d4,-(sp)
00004878 7207                       		moveq	#7,d1
0000487A 7407                       		moveq	#7,d2
0000487C 6100 CAAC                  		bsr.w	ShowVDPGraphics
00004880 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004884                            
00004884                            loc_48F2:
00004884 0680 0010 0000             		addi.l	#$100000,d0
0000488A 51CD FFD4                  		dbf	d5,loc_48CE
0000488E 0680 0380 0000             		addi.l	#$3800000,d0
00004894 0A04 0001                  		eori.b	#1,d4
00004898 51CE FFC4                  		dbf	d6,loc_48CC
0000489C 0683 1000 0000             		addi.l	#$10000000,d3
000048A2 6A00                       		bpl.s	loc_491C
000048A4 4843                       		swap	d3
000048A6 0683 0000 C000             		addi.l	#$C000,d3
000048AC 4843                       		swap	d3
000048AE                            
000048AE                            loc_491C:
000048AE D4FC 0080                  		adda.w	#$80,a2
000048B2 51CF FF9C                  		dbf	d7,loc_48BE
000048B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000048BC 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000048C2 303C 4000                  		move.w	#$4000,d0
000048C6 6100 CD60                  		bsr.w	EniDec
000048CA 43F9 00FF 0000             		lea	($FF0000).l,a1
000048D0 203C 4000 0003             		move.l	#$40000003,d0
000048D6 723F                       		moveq	#$3F,d1
000048D8 741F                       		moveq	#$1F,d2
000048DA 6100 CA4E                  		bsr.w	ShowVDPGraphics
000048DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000048E4 203C 5000 0003             		move.l	#$50000003,d0
000048EA 723F                       		moveq	#$3F,d1
000048EC 743F                       		moveq	#$3F,d2
000048EE 6100 CA3A                  		bsr.w	ShowVDPGraphics
000048F2 4E75                       		rts	
000048F4                            ; End of function SS_BGLoad
000048F4                            
000048F4                            ; ---------------------------------------------------------------------------
000048F4                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000048F4                            ; to be issued the next time ProcessDMAQueue is called.
000048F4                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000048F4                            ; by issuing the commands (this subroutine DOES check for overflow)
000048F4                            ; ---------------------------------------------------------------------------
000048F4                            ; In case you wish to use this queue system outside of the spin dash, this is the
000048F4                            ; registers in which it expects data in:
000048F4                            ; d1.l: Address to data (In 68k address space)
000048F4                            ; d2.w: Destination in VRAM
000048F4                            ; d3.w: Length of data
000048F4                            ; ---------------------------------------------------------------------------
000048F4                            
000048F4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000048F4                            
000048F4                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000048F4                            QueueDMATransfer:
000048F4 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
000048F8 B2FC C8FC                  		cmpa.w #$C8FC,a1
000048FC 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
000048FE                            
000048FE                            ; piece together some VDP commands and store them for later...
000048FE 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004902 1003                       		move.b d3,d0
00004904 32C0                       		move.w d0,(a1)+ ; store command
00004906                            
00004906 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
0000490A E04B                       		lsr.w #8,d3
0000490C 1003                       		move.b d3,d0
0000490E 32C0                       		move.w d0,(a1)+ ; store command
00004910                            
00004910 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004914 E289                       		lsr.l #1,d1
00004916 1001                       		move.b d1,d0
00004918 32C0                       		move.w d0,(a1)+ ; store command
0000491A                            
0000491A 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
0000491E E089                       		lsr.l #8,d1
00004920 1001                       		move.b d1,d0
00004922 32C0                       		move.w d0,(a1)+ ; store command
00004924                            
00004924 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004928 E089                       		lsr.l #8,d1
0000492A 1001                       		move.b d1,d0
0000492C 32C0                       		move.w d0,(a1)+ ; store command
0000492E                            
0000492E 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004934 E58A                       		lsl.l #2,d2
00004936 E44A                       		lsr.w #2,d2
00004938 4842                       		swap d2
0000493A 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004940 22C2                       		move.l d2,(a1)+ ; store command
00004942                            
00004942 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004946 B2FC C8FC                  		cmpa.w #$C8FC,a1
0000494A 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
0000494C 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004950                            ; return_14AA:
00004950                            QueueDMATransfer_Done:
00004950 4E75                       		rts
00004952                            ; End of function QueueDMATransfer
00004952                            
00004952                            ; ---------------------------------------------------------------------------
00004952                            ; Subroutine for issuing all VDP commands that were queued
00004952                            ; (by earlier calls to QueueDMATransfer)
00004952                            ; Resets the queue when it's done
00004952                            ; ---------------------------------------------------------------------------
00004952                            
00004952                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004952                            
00004952                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004952                            ProcessDMAQueue:
00004952 4BF9 00C0 0004             		lea ($C00004).l,a5
00004958 43F8 C800                  		lea ($FFFFC800).w,a1
0000495C                            ; loc_14B6:
0000495C                            ProcessDMAQueue_Loop:
0000495C 3019                       		move.w (a1)+,d0
0000495E 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004960                            		; issue a set of VDP commands...
00004960 3A80                       		move.w d0,(a5) ; transfer length
00004962 3A99                       		move.w (a1)+,(a5) ; transfer length
00004964 3A99                       		move.w (a1)+,(a5) ; source address
00004966 3A99                       		move.w (a1)+,(a5) ; source address
00004968 3A99                       		move.w (a1)+,(a5) ; source address
0000496A 3A99                       		move.w (a1)+,(a5) ; destination
0000496C 3A99                       		move.w (a1)+,(a5) ; destination
0000496E B2FC C8FC                  		cmpa.w #$C8FC,a1
00004972 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004974                            ; loc_14CE:
00004974                            ProcessDMAQueue_Done:
00004974 31FC 0000 C800             		move.w #0,($FFFFC800).w
0000497A 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004982 4E75                       		rts
00004984                            ; End of function ProcessDMAQueue
00004984                            
00004984                            ; ---------------------------------------------------------------------------
00004984                            ; Pallet cycling routine - special stage
00004984                            ; ---------------------------------------------------------------------------
00004984                            
00004984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004984                            
00004984                            
00004984                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004984 4A78 F63A                  		tst.w	($FFFFF63A).w
00004988 6600                       		bne.s	locret_49E6
0000498A 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000498E 6A00                       		bpl.s	locret_49E6
00004990 4DF9 00C0 0004             		lea	($C00004).l,a6
00004996 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000499A 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000499E 0240 001F                  		andi.w	#$1F,d0
000049A2 E548                       		lsl.w	#2,d0
000049A4 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000049AA D0C0                       		adda.w	d0,a0
000049AC 1018                       		move.b	(a0)+,d0
000049AE 6A00                       		bpl.s	loc_4992
000049B0 303C 01FF                  		move.w	#$1FF,d0
000049B4                            
000049B4                            loc_4992:
000049B4 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000049B8 7000                       		moveq	#0,d0
000049BA 1018                       		move.b	(a0)+,d0
000049BC 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000049C0 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000049C6 43F1 0000                  		lea	(a1,d0.w),a1
000049CA 303C 8200                  		move.w	#-$7E00,d0
000049CE 1019                       		move.b	(a1)+,d0
000049D0 3C80                       		move.w	d0,(a6)
000049D2 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049D6 303C 8400                  		move.w	#-$7C00,d0
000049DA 1018                       		move.b	(a0)+,d0
000049DC 3C80                       		move.w	d0,(a6)
000049DE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049E8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049F0 7000                       		moveq	#0,d0
000049F2 1018                       		move.b	(a0)+,d0
000049F4 6B00                       		bmi.s	loc_49E8
000049F6 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049FC D2C0                       		adda.w	d0,a1
000049FE 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004A02 24D9                       		move.l	(a1)+,(a2)+
00004A04 24D9                       		move.l	(a1)+,(a2)+
00004A06 24D9                       		move.l	(a1)+,(a2)+
00004A08                            
00004A08                            locret_49E6:
00004A08 4E75                       		rts	
00004A0A                            ; ===========================================================================
00004A0A                            
00004A0A                            loc_49E8:				; XREF: PalCycle_SS
00004A0A 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004A0E 0C40 008A                  		cmpi.w	#$8A,d0
00004A12 6500                       		bcs.s	loc_49F4
00004A14 5241                       		addq.w	#1,d1
00004A16                            
00004A16                            loc_49F4:
00004A16 C2FC 002A                  		mulu.w	#$2A,d1
00004A1A 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004A20 D2C1                       		adda.w	d1,a1
00004A22 0240 007F                  		andi.w	#$7F,d0
00004A26 0880 0000                  		bclr	#0,d0
00004A2A 6700                       		beq.s	loc_4A18
00004A2C 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A30 24D1                       		move.l	(a1),(a2)+
00004A32 24E9 0004                  		move.l	4(a1),(a2)+
00004A36 24E9 0008                  		move.l	8(a1),(a2)+
00004A3A                            
00004A3A                            loc_4A18:
00004A3A D2FC 000C                  		adda.w	#$C,a1
00004A3E 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A42 0C40 000A                  		cmpi.w	#$A,d0
00004A46 6500                       		bcs.s	loc_4A2E
00004A48 0440 000A                  		subi.w	#$A,d0
00004A4C 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A50                            
00004A50                            loc_4A2E:
00004A50 3200                       		move.w	d0,d1
00004A52 D040                       		add.w	d0,d0
00004A54 D041                       		add.w	d1,d0
00004A56 D2C0                       		adda.w	d0,a1
00004A58 24D9                       		move.l	(a1)+,(a2)+
00004A5A 34D9                       		move.w	(a1)+,(a2)+
00004A5C 4E75                       		rts	
00004A5E                            ; End of function PalCycle_SS
00004A5E                            
00004A5E                            ; ===========================================================================
00004A5E 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A6E                            					; XREF: PalCycle_SS
00004A6E 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A7E 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A8E FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A9E 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004AAE 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004ABE 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004ACE FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004ADE                            		even
00004ADE 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AEC                            					; XREF: PalCycle_SS
00004AEC                            		even
00004AEC                            
00004AEC                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B34                            		even
00004B34                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004C06                            		even
00004C06                            
00004C06                            ; ---------------------------------------------------------------------------
00004C06                            ; Subroutine to	make the special stage background animated
00004C06                            ; ---------------------------------------------------------------------------
00004C06                            
00004C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C06                            
00004C06                            
00004C06                            SS_BGAnimate:				; XREF: SpecialStage
00004C06 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004C0A 6600                       		bne.s	loc_4BF6
00004C0C 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004C12 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C18                            
00004C18                            loc_4BF6:
00004C18 0C40 0008                  		cmpi.w	#8,d0
00004C1C 6400                       		bcc.s	loc_4C4E
00004C1E 0C40 0006                  		cmpi.w	#6,d0
00004C22 6600                       		bne.s	loc_4C10
00004C24 5278 F718                  		addq.w	#1,($FFFFF718).w
00004C28 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C2C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C32                            
00004C32                            loc_4C10:
00004C32 7000                       		moveq	#0,d0
00004C34 3038 F708                  		move.w	($FFFFF708).w,d0
00004C38 4440                       		neg.w	d0
00004C3A 4840                       		swap	d0
00004C3C 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C42 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C46 7609                       		moveq	#9,d3
00004C48                            
00004C48                            loc_4C26:
00004C48 302B 0002                  		move.w	2(a3),d0
00004C4C 6100 DC9E                  		bsr.w	CalcSine
00004C50 7400                       		moveq	#0,d2
00004C52 1419                       		move.b	(a1)+,d2
00004C54 C1C2                       		muls.w	d2,d0
00004C56 E080                       		asr.l	#8,d0
00004C58 36C0                       		move.w	d0,(a3)+
00004C5A 1419                       		move.b	(a1)+,d2
00004C5C 4882                       		ext.w	d2
00004C5E D55B                       		add.w	d2,(a3)+
00004C60 51CB FFE6                  		dbf	d3,loc_4C26
00004C64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C68 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C6E 6000                       		bra.s	loc_4C7E
00004C70                            ; ===========================================================================
00004C70                            
00004C70                            loc_4C4E:				; XREF: SS_BGAnimate
00004C70 0C40 000C                  		cmpi.w	#$C,d0
00004C74 6600                       		bne.s	loc_4C74
00004C76 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C7A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C7E 243C 0001 8000             		move.l	#$18000,d2
00004C84 7206                       		moveq	#6,d1
00004C86                            
00004C86                            loc_4C64:
00004C86 2013                       		move.l	(a3),d0
00004C88 9082                       		sub.l	d2,d0
00004C8A 26C0                       		move.l	d0,(a3)+
00004C8C 0482 0000 2000             		subi.l	#$2000,d2
00004C92 51C9 FFF2                  		dbf	d1,loc_4C64
00004C96                            
00004C96                            loc_4C74:
00004C96 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C9A 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004CA0                            
00004CA0                            loc_4C7E:
00004CA0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004CA4 3038 F718                  		move.w	($FFFFF718).w,d0
00004CA8 4440                       		neg.w	d0
00004CAA 4840                       		swap	d0
00004CAC 7600                       		moveq	#0,d3
00004CAE 161A                       		move.b	(a2)+,d3
00004CB0 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004CB4 4442                       		neg.w	d2
00004CB6 0242 00FF                  		andi.w	#$FF,d2
00004CBA E54A                       		lsl.w	#2,d2
00004CBC                            
00004CBC                            loc_4C9A:
00004CBC 301B                       		move.w	(a3)+,d0
00004CBE 544B                       		addq.w	#2,a3
00004CC0 7200                       		moveq	#0,d1
00004CC2 121A                       		move.b	(a2)+,d1
00004CC4 5341                       		subq.w	#1,d1
00004CC6                            
00004CC6                            loc_4CA4:
00004CC6 2380 2000                  		move.l	d0,(a1,d2.w)
00004CCA 5842                       		addq.w	#4,d2
00004CCC 0242 03FC                  		andi.w	#$3FC,d2
00004CD0 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CD4 51CB FFE6                  		dbf	d3,loc_4C9A
00004CD8 4E75                       		rts	
00004CDA                            ; End of function SS_BGAnimate
00004CDA                            
00004CDA                            ; ===========================================================================
00004CDA 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CE6                            		even
00004CE6 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CEE                            		even
00004CEE 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004D02                            		even
00004D02                            					; XREF: SS_BGAnimate
00004D02                            ; ===========================================================================
00004D02                            
00004D02                            ; ---------------------------------------------------------------------------
00004D02                            ; Continue screen
00004D02                            ; ---------------------------------------------------------------------------
00004D02                            
00004D02                            ContinueScreen:				; XREF: GameModeArray
00004D02 6100 D058                  		bsr.w	Pal_FadeFrom
00004D06 46FC 2700                  		move	#$2700,sr
00004D0A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D0E 0200 00BF                  		andi.b	#$BF,d0
00004D12 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D18 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D1E 3CBC 8004                  		move.w	#$8004,(a6)
00004D22 3CBC 8700                  		move.w	#$8700,(a6)
00004D26 6100 C462                  		bsr.w	ClearScreen
00004D2A 43F8 D000                  		lea	($FFFFD000).w,a1
00004D2E 7000                       		moveq	#0,d0
00004D30 323C 07FF                  		move.w	#$7FF,d1
00004D34                            
00004D34                            Cont_ClrObjRam:
00004D34 22C0                       		move.l	d0,(a1)+
00004D36 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D3A                            
00004D3A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D4A 6100 C5FE                  		bsr.w	NemDec
00004D4E 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D58 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D5E 6100 C5EA                  		bsr.w	NemDec
00004D62 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D6C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D72 6100 C5D6                  		bsr.w	NemDec
00004D76 720A                       		moveq	#10,d1
00004D78 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D7E 7012                       		moveq	#$12,d0
00004D80 6100 D284                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D84 103C 0090                  		move.b	#$90,d0
00004D88 6100 C4D2                  		bsr.w	PlaySound	; play continue	music
00004D8C 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D92 42B8 F700                  		clr.l	($FFFFF700).w
00004D96 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D9E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004DA4 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004DAA 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004DB0 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004DB6 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004DBC 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004DC2 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004DC8 4EB9 0000 0000             		jsr	ObjectsLoad
00004DCE 4EB9 0000 0000             		jsr	BuildSprites
00004DD4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DD8 0000 0040                  		ori.b	#$40,d0
00004DDC 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DE2 6100 CED2                  		bsr.w	Pal_FadeTo
00004DE6                            
00004DE6                            ; ---------------------------------------------------------------------------
00004DE6                            ; Continue screen main loop
00004DE6                            ; ---------------------------------------------------------------------------
00004DE6                            
00004DE6                            Cont_MainLoop:
00004DE6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DEC 6100 DACC                  		bsr.w	DelayProgram
00004DF0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DF6 6400                       		bcc.s	loc_4DF2
00004DF8 46FC 2700                  		move	#$2700,sr
00004DFC 3238 F614                  		move.w	($FFFFF614).w,d1
00004E00 82FC 003C                  		divu.w	#$3C,d1
00004E04 0281 0000 000F             		andi.l	#$F,d1
00004E0A 4EB9 0000 0000             		jsr	ContScrCounter
00004E10 46FC 2300                  		move	#$2300,sr
00004E14                            
00004E14                            loc_4DF2:
00004E14 4EB9 0000 0000             		jsr	ObjectsLoad
00004E1A 4EB9 0000 0000             		jsr	BuildSprites
00004E20 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004E26 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004E28 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E2E 64B6                       		bcc.s	Cont_MainLoop
00004E30 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004E36 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004E3A 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004E40 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004E46 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004E4A 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00004E50 4A78 F614                  		tst.w	($FFFFF614).w
00004E54 6600 FF90                  		bne.w	Cont_MainLoop
00004E58 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00004E5E 4E75                       		rts	
00004E60                            ; ===========================================================================
00004E60                            
00004E60                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E60 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E66 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E6C 7000                       		moveq	#0,d0
00004E6E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E72 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E76 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E7A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E7E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E82 4E75                       		rts	
00004E84                            ; ===========================================================================
00004E84                            
00004E84                            ; ---------------------------------------------------------------------------
00004E84                            ; Object 80 - Continue screen elements
00004E84                            ; ---------------------------------------------------------------------------
00004E84                            
00004E84                            Obj80:					; XREF: Obj_Index
00004E84 7000                       		moveq	#0,d0
00004E86 1028 0024                  		move.b	$24(a0),d0
00004E8A 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E8E 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E92                            ; ===========================================================================
00004E92 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E94 0000                       		dc.w Obj80_Display-Obj80_Index
00004E96 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E98 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E9A                            ; ===========================================================================
00004E9A                            
00004E9A                            Obj80_Main:				; XREF: Obj80_Index
00004E9A 5428 0024                  		addq.b	#2,$24(a0)
00004E9E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004EA6 317C 8500 0002             		move.w	#$8500,2(a0)
00004EAC 117C 0000 0001             		move.b	#0,1(a0)
00004EB2 117C 003C 0019             		move.b	#$3C,$19(a0)
00004EB8 317C 0120 0008             		move.w	#$120,8(a0)
00004EBE 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004EC4 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004ECA                            
00004ECA                            Obj80_Display:				; XREF: Obj80_Index
00004ECA 4EF9 0000 0000             		jmp	DisplaySprite
00004ED0                            ; ===========================================================================
00004ED0                            Obj80_MiniSonicPos:
00004ED0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004EE2 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EEE                            ; ===========================================================================
00004EEE                            
00004EEE                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EEE 2248                       		movea.l	a0,a1
00004EF0 45F9 0000 4ED0             		lea	(Obj80_MiniSonicPos).l,a2
00004EF6 7200                       		moveq	#0,d1
00004EF8 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EFC 5501                       		subq.b	#2,d1
00004EFE 6400                       		bcc.s	loc_4EC4
00004F00 4EF9 0000 0000             		jmp	DeleteObject
00004F06                            ; ===========================================================================
00004F06                            
00004F06                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004F06 7601                       		moveq	#1,d3
00004F08 0C01 000E                  		cmpi.b	#$E,d1
00004F0C 6500                       		bcs.s	loc_4ED0
00004F0E 7600                       		moveq	#0,d3
00004F10 720E                       		moveq	#$E,d1
00004F12                            
00004F12                            loc_4ED0:
00004F12 1401                       		move.b	d1,d2
00004F14 0202 0001                  		andi.b	#1,d2
00004F18                            
00004F18                            Obj80_MiniSonLoop:
00004F18 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004F1C 335A 0008                  		move.w	(a2)+,8(a1)
00004F20 4A02                       		tst.b	d2
00004F22 6700                       		beq.s	loc_4EEA
00004F24 0469 000A 0008             		subi.w	#$A,8(a1)
00004F2A                            
00004F2A                            loc_4EEA:
00004F2A 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004F30 137C 0006 001A             		move.b	#6,$1A(a1)
00004F36 137C 0006 0024             		move.b	#6,$24(a1)
00004F3C 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004F44 337C 8551 0002             		move.w	#$8551,2(a1)
00004F4A 137C 0000 0001             		move.b	#0,1(a1)
00004F50 43E9 0040                  		lea	$40(a1),a1
00004F54 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F58 43E9 FFC0                  		lea	-$40(a1),a1
00004F5C 1343 0028                  		move.b	d3,$28(a1)
00004F60                            
00004F60                            Obj80_ChkType:				; XREF: Obj80_Index
00004F60 4A28 0028                  		tst.b	$28(a0)
00004F64 6700                       		beq.s	loc_4F40
00004F66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F6C 6500                       		bcs.s	loc_4F40
00004F6E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F72 0200 0001                  		andi.b	#1,d0
00004F76 6600                       		bne.s	loc_4F40
00004F78 4A78 D010                  		tst.w	($FFFFD010).w
00004F7C 6600                       		bne.s	Obj80_Delete
00004F7E 4E75                       		rts	
00004F80                            ; ===========================================================================
00004F80                            
00004F80                            loc_4F40:				; XREF: Obj80_ChkType
00004F80 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F84 0200 000F                  		andi.b	#$F,d0
00004F88 6600                       		bne.s	Obj80_Display2
00004F8A 0868 0000 001A             		bchg	#0,$1A(a0)
00004F90                            
00004F90                            Obj80_Display2:
00004F90 4EF9 0000 0000             		jmp	DisplaySprite
00004F96                            ; ===========================================================================
00004F96                            
00004F96                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F96 4EF9 0000 0000             		jmp	DeleteObject
00004F9C                            ; ===========================================================================
00004F9C                            
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            ; Object 81 - Sonic on the continue screen
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            
00004F9C                            Obj81:					; XREF: Obj_Index
00004F9C 7000                       		moveq	#0,d0
00004F9E 1028 0024                  		move.b	$24(a0),d0
00004FA2 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004FA6 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004FAA 4EF9 0000 0000             		jmp	DisplaySprite
00004FB0                            ; ===========================================================================
00004FB0 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004FB2 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004FB4 0000                       		dc.w Obj81_Animate-Obj81_Index
00004FB6 0000                       		dc.w Obj81_Run-Obj81_Index
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            Obj81_Main:				; XREF: Obj81_Index
00004FB8 5428 0024                  		addq.b	#2,$24(a0)
00004FBC 317C 00A0 0008             		move.w	#$A0,8(a0)
00004FC2 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004FC8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FD0 317C 0780 0002             		move.w	#$780,2(a0)
00004FD6 117C 0004 0001             		move.b	#4,1(a0)
00004FDC 117C 0002 0018             		move.b	#2,$18(a0)
00004FE2 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004FE8 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FEE                            
00004FEE                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FEE 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FF4 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FF6 5428 0024                  		addq.b	#2,$24(a0)
00004FFA 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FFE 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005006 317C 8500 0002             		move.w	#$8500,2(a0)
0000500C 117C 0000 001C             		move.b	#0,$1C(a0)
00005012 6000                       		bra.s	Obj81_Animate
00005014                            ; ===========================================================================
00005014                            
00005014                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005014 4EB9 0000 0000             		jsr	SpeedToPos
0000501A 4EB9 0000 0000             		jsr	Sonic_Animate
00005020 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005026                            ; ===========================================================================
00005026                            
00005026                            Obj81_Animate:				; XREF: Obj81_Index
00005026 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000502A 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000502C 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005032 4EF9 0000 0000             		jmp	AnimateSprite
00005038                            ; ===========================================================================
00005038                            
00005038                            Obj81_GetUp:				; XREF: Obj81_Animate
00005038 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000503E 5428 0024                  		addq.b	#2,$24(a0)
00005042 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000504A 317C 0780 0002             		move.w	#$780,2(a0)
00005050 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005056 4268 0014                  		clr.w	$14(a0)
0000505A 5168 000C                  		subq.w	#8,$C(a0)
0000505E 103C 00E0                  		move.b	#$E0,d0
00005062 6100 C1FE                  		bsr.w	PlaySound_Special ; fade out music
00005066                            
00005066                            Obj81_Run:				; XREF: Obj81_Index
00005066 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000506C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000506E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005074 6000                       		bra.s	Obj81_ShowRun
00005076                            ; ===========================================================================
00005076                            
00005076                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005076 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000507C                            
0000507C                            Obj81_ShowRun:				; XREF: Obj81_Run
0000507C 4EB9 0000 0000             		jsr	SpeedToPos
00005082 4EB9 0000 0000             		jsr	Sonic_Animate
00005088 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000508E                            ; ===========================================================================
0000508E                            Ani_obj81:
0000508E                            	include "_anim\obj81.asm"
0000508E                            ; ---------------------------------------------------------------------------
0000508E                            ; Animation script - Sonic on the continue screen
0000508E                            ; ---------------------------------------------------------------------------
0000508E 0000                       		dc.w byte_504A-Ani_obj81
00005090 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000509C 00                         		even
0000509C 00                         		even
0000509C                            
0000509C                            ; ---------------------------------------------------------------------------
0000509C                            ; Sprite mappings - Continue screen
0000509C                            ; ---------------------------------------------------------------------------
0000509C                            Map_obj80:
0000509C                            	include "_maps\obj80.asm"
0000509C                            ; ---------------------------------------------------------------------------
0000509C                            ; Sprite mappings - Continue screen
0000509C                            ; ---------------------------------------------------------------------------
0000509C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000050A0 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000050A4 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000050A8 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000050AC 0B                         byte_5066:	dc.b $B
000050AD F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000050B2 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000050B7 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000050BC F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000050C1 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000050C6 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000050CB F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000050D0 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000050D5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000050DA 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000050DF 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000050E4 03                         byte_509E:	dc.b 3
000050E5 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000050EA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050EF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050F4 03                         byte_50AE:	dc.b 3
000050F5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050FA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050FF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005104 03                         byte_50BE:	dc.b 3
00005105 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000510A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000510F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005114 02                         byte_50CE:	dc.b 2
00005115 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000511A 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000511F 01                         byte_50D9:	dc.b 1
00005120 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005125 01                         byte_50DF:	dc.b 1
00005126 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000512C 00                         		even
0000512C 00                         		even
0000512C                            
0000512C                            ; ===========================================================================
0000512C                            ; ---------------------------------------------------------------------------
0000512C                            ; Ending sequence in Green Hill	Zone
0000512C                            ; ---------------------------------------------------------------------------
0000512C                            
0000512C                            EndingSequence:				; XREF: GameModeArray
0000512C 103C 00E4                  		move.b	#$E4,d0
00005130 6100 C130                  		bsr.w	PlaySound_Special ; stop music
00005134 6100 CC26                  		bsr.w	Pal_FadeFrom
00005138 43F8 D000                  		lea	($FFFFD000).w,a1
0000513C 7000                       		moveq	#0,d0
0000513E 323C 07FF                  		move.w	#$7FF,d1
00005142                            
00005142                            End_ClrObjRam:
00005142 22C0                       		move.l	d0,(a1)+
00005144 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005148                            
00005148 43F8 F628                  		lea	($FFFFF628).w,a1
0000514C 7000                       		moveq	#0,d0
0000514E 323C 0015                  		move.w	#$15,d1
00005152                            
00005152                            End_ClrRam:
00005152 22C0                       		move.l	d0,(a1)+
00005154 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005158                            
00005158 43F8 F700                  		lea	($FFFFF700).w,a1
0000515C 7000                       		moveq	#0,d0
0000515E 323C 003F                  		move.w	#$3F,d1
00005162                            
00005162                            End_ClrRam2:
00005162 22C0                       		move.l	d0,(a1)+
00005164 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005168                            
00005168 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000516C 7000                       		moveq	#0,d0
0000516E 323C 0047                  		move.w	#$47,d1
00005172                            
00005172                            End_ClrRam3:
00005172 22C0                       		move.l	d0,(a1)+
00005174 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005178                            
00005178 46FC 2700                  		move	#$2700,sr
0000517C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005180 33C0 00C0 0004             		move.w	d0,($C00004).l
00005186 6100 C002                  		bsr.w	ClearScreen
0000518A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005190 3CBC 8B03                  		move.w	#$8B03,(a6)
00005194 3CBC 8230                  		move.w	#$8230,(a6)
00005198 3CBC 8407                  		move.w	#$8407,(a6)
0000519C 3CBC 857C                  		move.w	#$857C,(a6)
000051A0 3CBC 9001                  		move.w	#$9001,(a6)
000051A4 3CBC 8004                  		move.w	#$8004,(a6)
000051A8 3CBC 8720                  		move.w	#$8720,(a6)
000051AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000051B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000051BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000051C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000051C8 6700                       		beq.s	End_LoadData	; if yes, branch
000051CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000051D0                            
000051D0                            End_LoadData:
000051D0 701C                       		moveq	#$1C,d0
000051D2 6100 C422                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000051D6 4EB9 0000 0000             		jsr	Hud_Base
000051DC 6100 0000                  		bsr.w	LevelSizeLoad
000051E0 6100 0000                  		bsr.w	DeformBgLayer
000051E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000051EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000051EE 6100 0000                  		bsr.w	LoadTilesFromStart
000051F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051FA 46FC 2300                  		move	#$2300,sr
000051FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005204 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005208 6100 C59C                  		bsr.w	KosDec
0000520C 7003                       		moveq	#3,d0
0000520E 6100 CDF6                  		bsr.w	PalLoad1	; load Sonic's pallet
00005212 303C 008B                  		move.w	#$8B,d0
00005216 6100 C044                  		bsr.w	PlaySound	; play ending sequence music
0000521A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005220 6700                       		beq.s	End_LoadSonic	; if not, branch
00005222 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005228                            
00005228                            End_LoadSonic:
00005228 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000522E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005234 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000523A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005240 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005246 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000524C 4EB9 0000 0000             		jsr	ObjPosLoad
00005252 4EB9 0000 0000             		jsr	ObjectsLoad
00005258 4EB9 0000 0000             		jsr	BuildSprites
0000525E 7000                       		moveq	#0,d0
00005260 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005264 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005268 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000526C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005270 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005274 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005278 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000527C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005280 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005284 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005288 6100 EE14                  		bsr.w	OscillateNumInit
0000528C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005292 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005298 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000529E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000052A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052AA 6100 D60E                  		bsr.w	DelayProgram
000052AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052B2 0000 0040                  		ori.b	#$40,d0
000052B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000052BC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000052C2 6100 C9F2                  		bsr.w	Pal_FadeTo
000052C6                            
000052C6                            ; ---------------------------------------------------------------------------
000052C6                            ; Main ending sequence loop
000052C6                            ; ---------------------------------------------------------------------------
000052C6                            
000052C6                            End_MainLoop:
000052C6 6100 BFA6                  		bsr.w	PauseGame
000052CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052D0 6100 D5E8                  		bsr.w	DelayProgram
000052D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052D8 6100 0000                  		bsr.w	End_MoveSonic
000052DC 4EB9 0000 0000             		jsr	ObjectsLoad
000052E2 6100 0000                  		bsr.w	DeformBgLayer
000052E6 4EB9 0000 0000             		jsr	BuildSprites
000052EC 4EB9 0000 0000             		jsr	ObjPosLoad
000052F2 6100 C552                  		bsr.w	PalCycle_Load
000052F6 6100 EDFC                  		bsr.w	OscillateNumDo
000052FA 6100 EE88                  		bsr.w	ChangeRingFrame
000052FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005304 6700                       		beq.s	loc_52DA	; if yes, branch
00005306 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000530C 103C 0091                  		move.b	#$91,d0
00005310 6100 BF50                  		bsr.w	PlaySound_Special ; play credits music
00005314 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000531A 4E75                       		rts	
0000531C                            ; ===========================================================================
0000531C                            
0000531C                            loc_52DA:
0000531C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005320 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005324                            
00005324 4278 FE02                  		clr.w	($FFFFFE02).w
00005328 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000532E 4278 F794                  		clr.w	($FFFFF794).w
00005332                            
00005332                            End_AllEmlds:				; XREF: loc_5334
00005332 6100 BF3A                  		bsr.w	PauseGame
00005336 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000533C 6100 D57C                  		bsr.w	DelayProgram
00005340 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005344 6100 0000                  		bsr.w	End_MoveSonic
00005348 4EB9 0000 0000             		jsr	ObjectsLoad
0000534E 6100 0000                  		bsr.w	DeformBgLayer
00005352 4EB9 0000 0000             		jsr	BuildSprites
00005358 4EB9 0000 0000             		jsr	ObjPosLoad
0000535E 6100 ED94                  		bsr.w	OscillateNumDo
00005362 6100 EE20                  		bsr.w	ChangeRingFrame
00005366 5378 F794                  		subq.w	#1,($FFFFF794).w
0000536A 6A00                       		bpl.s	loc_5334
0000536C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005372 6100 CB32                  		bsr.w	Pal_ToWhite
00005376                            
00005376                            loc_5334:
00005376 4A78 FE02                  		tst.w	($FFFFFE02).w
0000537A 6700 FFB6                  		beq.w	End_AllEmlds
0000537E 4278 FE02                  		clr.w	($FFFFFE02).w
00005382 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005388 4BF9 00C0 0004             		lea	($C00004).l,a5
0000538E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005394 47F8 F700                  		lea	($FFFFF700).w,a3
00005398 49F8 A400                  		lea	($FFFFA400).w,a4
0000539C 343C 4000                  		move.w	#$4000,d2
000053A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000053A4 7013                       		moveq	#$13,d0
000053A6 6100 CC5E                  		bsr.w	PalLoad1	; load ending pallet
000053AA 6100 CA2E                  		bsr.w	Pal_MakeWhite
000053AE 6000 FF16                  		bra.w	End_MainLoop
000053B2                            
000053B2                            ; ---------------------------------------------------------------------------
000053B2                            ; Subroutine controlling Sonic on the ending sequence
000053B2                            ; ---------------------------------------------------------------------------
000053B2                            
000053B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053B2                            
000053B2                            
000053B2                            End_MoveSonic:				; XREF: End_MainLoop
000053B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000053B6 6600                       		bne.s	End_MoveSonic2
000053B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000053BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000053C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000053CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000053D0 4E75                       		rts	
000053D2                            ; ===========================================================================
000053D2                            
000053D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000053D2 5500                       		subq.b	#2,d0
000053D4 6600                       		bne.s	End_MoveSonic3
000053D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000053DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000053DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053E2 7000                       		moveq	#0,d0
000053E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000053E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000053F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005402 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005408 4E75                       		rts	
0000540A                            ; ===========================================================================
0000540A                            
0000540A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000540A 5500                       		subq.b	#2,d0
0000540C 6600                       		bne.s	End_MoveSonExit
0000540E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005412 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005418 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000541E 4278 D024                  		clr.w	($FFFFD024).w
00005422                            
00005422                            End_MoveSonExit:
00005422 4E75                       		rts	
00005424                            ; End of function End_MoveSonic
00005424                            
00005424                            ; ===========================================================================
00005424                            ; ---------------------------------------------------------------------------
00005424                            ; Object 87 - Sonic on ending sequence
00005424                            ; ---------------------------------------------------------------------------
00005424                            
00005424                            Obj87:					; XREF: Obj_Index
00005424 7000                       		moveq	#0,d0
00005426 1028 0025                  		move.b	$25(a0),d0
0000542A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000542E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005432 4EF9 0000 0000             		jmp	DisplaySprite
00005438                            ; ===========================================================================
00005438 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000543C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005440 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005444 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005448 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000544C                            ; ===========================================================================
0000544C                            
0000544C                            Obj87_Main:				; XREF: Obj87_Index
0000544C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005452 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005454 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000545A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005460 4E75                       		rts	
00005462                            ; ===========================================================================
00005462                            
00005462                            Obj87_Main2:				; XREF: Obj87_Main
00005462 5428 0025                  		addq.b	#2,$25(a0)
00005466 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000546E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005474 117C 0004 0001             		move.b	#4,1(a0)
0000547A 4228 0022                  		clr.b	$22(a0)
0000547E 117C 0002 0018             		move.b	#2,$18(a0)
00005484 117C 0000 001A             		move.b	#0,$1A(a0)
0000548A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005490                            
00005490                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005490 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005494 6600                       		bne.s	Obj87_Wait
00005496 5428 0025                  		addq.b	#2,$25(a0)
0000549A 317C 0001 001C             		move.w	#1,$1C(a0)
000054A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000054A6                            
000054A6                            Obj87_Wait:
000054A6 4E75                       		rts	
000054A8                            ; ===========================================================================
000054A8                            
000054A8                            Obj87_LookUp:				; XREF: Obj87_Index
000054A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000054B0 6600                       		bne.s	locret_5480
000054B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000054B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000054BE 5428 0025                  		addq.b	#2,$25(a0)
000054C2                            
000054C2                            locret_5480:
000054C2 4E75                       		rts	
000054C4                            ; ===========================================================================
000054C4                            
000054C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000054C4 5368 0030                  		subq.w	#1,$30(a0)
000054C8 6600                       		bne.s	Obj87_Wait2
000054CA 43F8 D400                  		lea	($FFFFD400).w,a1
000054CE 323C 00FF                  		move.w	#$FF,d1
000054D2                            
000054D2                            Obj87_ClrLoop:
000054D2 4299                       		clr.l	(a1)+
000054D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000054D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000054DE 5428 0025                  		addq.b	#2,$25(a0)
000054E2 117C 0001 001C             		move.b	#1,$1C(a0)
000054E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000054EE                            
000054EE                            Obj87_Wait2:
000054EE 4E75                       		rts	
000054F0                            ; ===========================================================================
000054F0                            
000054F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054F0 5368 0030                  		subq.w	#1,$30(a0)
000054F4 6600                       		bne.s	Obj87_Wait3
000054F6 5428 0025                  		addq.b	#2,$25(a0)
000054FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005500 117C 0002 001C             		move.b	#2,$1C(a0)
00005506 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000550C                            
0000550C                            Obj87_Wait3:
0000550C 4E75                       		rts	
0000550E                            ; ===========================================================================
0000550E                            
0000550E                            Obj87_Animate:				; XREF: Obj87_Index
0000550E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005514 4EF9 0000 0000             		jmp	AnimateSprite
0000551A                            ; ===========================================================================
0000551A                            
0000551A                            Obj87_Leap:				; XREF: Obj87_Index
0000551A 5368 0030                  		subq.w	#1,$30(a0)
0000551E 6600                       		bne.s	Obj87_Wait4
00005520 5428 0025                  		addq.b	#2,$25(a0)
00005524 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000552C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005532 117C 0004 0001             		move.b	#4,1(a0)
00005538 4228 0022                  		clr.b	$22(a0)
0000553C 117C 0002 0018             		move.b	#2,$18(a0)
00005542 117C 0005 001A             		move.b	#5,$1A(a0)
00005548 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000554E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005554 60B8                       		bra.s	Obj87_Animate
00005556                            ; ===========================================================================
00005556                            
00005556                            Obj87_Wait4:				; XREF: Obj87_Leap
00005556 4E75                       		rts	
00005558                            ; ===========================================================================
00005558                            Ani_obj87:
00005558                            	include "_anim\obj87.asm"
00005558                            ; ---------------------------------------------------------------------------
00005558                            ; Animation script - Sonic on the ending sequence
00005558                            ; ---------------------------------------------------------------------------
00005558 0000                       		dc.w byte_551C-Ani_obj87
0000555A 0000                       		dc.w byte_552A-Ani_obj87
0000555C 0000                       		dc.w byte_5534-Ani_obj87
0000555E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000556C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005576 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000557E                            		even
0000557E                            		even
0000557E                            
0000557E                            ; ===========================================================================
0000557E                            ; ---------------------------------------------------------------------------
0000557E                            ; Object 88 - chaos emeralds on	the ending sequence
0000557E                            ; ---------------------------------------------------------------------------
0000557E                            
0000557E                            Obj88:					; XREF: Obj_Index
0000557E 7000                       		moveq	#0,d0
00005580 1028 0024                  		move.b	$24(a0),d0
00005584 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005588 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000558C 4EF9 0000 0000             		jmp	DisplaySprite
00005592                            ; ===========================================================================
00005592 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005594 0000                       		dc.w Obj88_Move-Obj88_Index
00005596                            ; ===========================================================================
00005596                            
00005596                            Obj88_Main:				; XREF: Obj88_Index
00005596 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000559C 6700                       		beq.s	Obj88_Main2
0000559E 588F                       		addq.l	#4,sp
000055A0 4E75                       		rts	
000055A2                            ; ===========================================================================
000055A2                            
000055A2                            Obj88_Main2:				; XREF: Obj88_Main
000055A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000055A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000055AE 2248                       		movea.l	a0,a1
000055B0 7600                       		moveq	#0,d3
000055B2 7401                       		moveq	#1,d2
000055B4 7205                       		moveq	#5,d1
000055B6                            
000055B6                            Obj88_MainLoop:
000055B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000055BA 5429 0024                  		addq.b	#2,$24(a1)
000055BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000055C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000055CC 137C 0004 0001             		move.b	#4,1(a1)
000055D2 137C 0001 0018             		move.b	#1,$18(a1)
000055D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000055DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000055E4 1342 001C                  		move.b	d2,$1C(a1)
000055E8 1342 001A                  		move.b	d2,$1A(a1)
000055EC 5202                       		addq.b	#1,d2
000055EE 1343 0026                  		move.b	d3,$26(a1)
000055F2 0603 002A                  		addi.b	#$2A,d3
000055F6 43E9 0040                  		lea	$40(a1),a1
000055FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055FE                            
000055FE                            Obj88_Move:				; XREF: Obj88_Index
000055FE 3028 003E                  		move.w	$3E(a0),d0
00005602 D168 0026                  		add.w	d0,$26(a0)
00005606 1028 0026                  		move.b	$26(a0),d0
0000560A 4EB9 0000 28EC             		jsr	(CalcSine).l
00005610 7800                       		moveq	#0,d4
00005612 1828 003C                  		move.b	$3C(a0),d4
00005616 C3C4                       		muls.w	d4,d1
00005618 E081                       		asr.l	#8,d1
0000561A C1C4                       		muls.w	d4,d0
0000561C E080                       		asr.l	#8,d0
0000561E D268 0038                  		add.w	$38(a0),d1
00005622 D068 003A                  		add.w	$3A(a0),d0
00005626 3141 0008                  		move.w	d1,8(a0)
0000562A 3140 000C                  		move.w	d0,$C(a0)
0000562E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005634 6700                       		beq.s	loc_55FA
00005636 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000563C                            
0000563C                            loc_55FA:
0000563C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005642 6700                       		beq.s	loc_5608
00005644 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000564A                            
0000564A                            loc_5608:
0000564A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005650 6700                       		beq.s	locret_5614
00005652 5368 003A                  		subq.w	#1,$3A(a0)
00005656                            
00005656                            locret_5614:
00005656 4E75                       		rts	
00005658                            ; ===========================================================================
00005658                            ; ---------------------------------------------------------------------------
00005658                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005658                            ; ---------------------------------------------------------------------------
00005658                            
00005658                            Obj89:					; XREF: Obj_Index
00005658 7000                       		moveq	#0,d0
0000565A 1028 0024                  		move.b	$24(a0),d0
0000565E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005662 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005666                            ; ===========================================================================
00005666 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005668 0000                       		dc.w Obj89_Move-Obj89_Index
0000566A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000566C                            ; ===========================================================================
0000566C                            
0000566C                            Obj89_Main:				; XREF: Obj89_Index
0000566C 5428 0024                  		addq.b	#2,$24(a0)
00005670 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005676 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000567C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005684 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000568A 117C 0000 0001             		move.b	#0,1(a0)
00005690 117C 0000 0018             		move.b	#0,$18(a0)
00005696                            
00005696                            Obj89_Move:				; XREF: Obj89_Index
00005696 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000569C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000569E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000056A4 4EF9 0000 0000             		jmp	DisplaySprite
000056AA                            ; ===========================================================================
000056AA                            
000056AA                            Obj89_Delay:				; XREF: Obj89_Move
000056AA 5428 0024                  		addq.b	#2,$24(a0)
000056AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000056B4                            
000056B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000056B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000056B8 6A00                       		bpl.s	Obj89_Display
000056BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000056C0                            
000056C0                            Obj89_Display:
000056C0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000056C6                            ; ===========================================================================
000056C6                            ; ---------------------------------------------------------------------------
000056C6                            ; Sprite mappings - Sonic on the ending	sequence
000056C6                            ; ---------------------------------------------------------------------------
000056C6                            Map_obj87:
000056C6                            	include "_maps\obj87.asm"
000056C6                            ; ---------------------------------------------------------------------------
000056C6                            ; Sprite mappings - Sonic on the ending	sequence
000056C6                            ; ---------------------------------------------------------------------------
000056C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000056CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000056CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000056D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000056D6 02                         byte_5690:	dc.b 2
000056D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000056DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056E1 03                         byte_569B:	dc.b 3
000056E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000056E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056F1 02                         byte_56AB:	dc.b 2
000056F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056FC 02                         byte_56B6:	dc.b 2
000056FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005702 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005707 02                         byte_56C1:	dc.b 2
00005708 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000570D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005712 03                         byte_56CC:	dc.b 3
00005713 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005718 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000571D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005722 07                         byte_56DC:	dc.b 7
00005723 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005728 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000572D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005732 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005737 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000573C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005741 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005746 18                         byte_5700:	dc.b $18
00005747 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000574C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005751 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005756 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000575B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005760 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005765 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000576A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000576F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005774 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005779 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000577E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005783 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005788 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000578D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005792 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005797 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000579C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000057A1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000057A6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000057AB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000057B0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000057B5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000057BA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000057C0 00                         		even
000057C0 00                         		even
000057C0                            
000057C0                            ; ---------------------------------------------------------------------------
000057C0                            ; Sprite mappings - chaos emeralds on the ending sequence
000057C0                            ; ---------------------------------------------------------------------------
000057C0                            Map_obj88:
000057C0                            	include "_maps\obj88.asm"
000057C0                            ; ---------------------------------------------------------------------------
000057C0                            ; Sprite mappings - chaos emeralds on the ending sequence
000057C0                            ; ---------------------------------------------------------------------------
000057C0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000057C4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000057C8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000057CC 0000                       		dc.w byte_57AC-Map_obj88
000057CE 01                         byte_5788:	dc.b 1
000057CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000057D4 01                         byte_578E:	dc.b 1
000057D5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000057DA 01                         byte_5794:	dc.b 1
000057DB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000057E0 01                         byte_579A:	dc.b 1
000057E1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000057E6 01                         byte_57A0:	dc.b 1
000057E7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057EC 01                         byte_57A6:	dc.b 1
000057ED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057F2 01                         byte_57AC:	dc.b 1
000057F3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057F8                            		even
000057F8                            		even
000057F8                            
000057F8                            ; ---------------------------------------------------------------------------
000057F8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057F8                            ; ---------------------------------------------------------------------------
000057F8                            Map_obj89:
000057F8                            	include "_maps\obj89.asm"
000057F8                            ; ---------------------------------------------------------------------------
000057F8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057F8                            ; ---------------------------------------------------------------------------
000057F8 0000                       		dc.w byte_57B4-Map_obj89
000057FA 03                         byte_57B4:	dc.b 3
000057FB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005800 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005805 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000580A                            		even
0000580A                            		even
0000580A                            
0000580A                            ; ===========================================================================
0000580A                            ; ---------------------------------------------------------------------------
0000580A                            ; Credits ending sequence
0000580A                            ; ---------------------------------------------------------------------------
0000580A                            
0000580A                            Credits:				; XREF: GameModeArray
0000580A 6100 BCDC                  		bsr.w	ClearPLC
0000580E 6100 C54C                  		bsr.w	Pal_FadeFrom
00005812 4DF9 00C0 0004             		lea	($C00004).l,a6
00005818 3CBC 8004                  		move.w	#$8004,(a6)
0000581C 3CBC 8230                  		move.w	#$8230,(a6)
00005820 3CBC 8407                  		move.w	#$8407,(a6)
00005824 3CBC 9001                  		move.w	#$9001,(a6)
00005828 3CBC 9200                  		move.w	#$9200,(a6)
0000582C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005830 3CBC 8720                  		move.w	#$8720,(a6)
00005834 4238 F64E                  		clr.b	($FFFFF64E).w
00005838 6100 B950                  		bsr.w	ClearScreen
0000583C 43F8 D000                  		lea	($FFFFD000).w,a1
00005840 7000                       		moveq	#0,d0
00005842 323C 07FF                  		move.w	#$7FF,d1
00005846                            
00005846                            Cred_ClrObjRam:
00005846 22C0                       		move.l	d0,(a1)+
00005848 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000584C                            
0000584C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005856 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000585C 6100 BAEC                  		bsr.w	NemDec
00005860 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005864 7000                       		moveq	#0,d0
00005866 323C 001F                  		move.w	#$1F,d1
0000586A                            
0000586A                            Cred_ClrPallet:
0000586A 22C0                       		move.l	d0,(a1)+
0000586C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005870                            
00005870 7014                       		moveq	#$14,d0
00005872 6100 C792                  		bsr.w	PalLoad1	; load Sonic's pallet
00005876 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000587C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005882 4EB9 0000 0000             		jsr	ObjectsLoad
00005888 4EB9 0000 0000             		jsr	BuildSprites
0000588E 6100 0000                  		bsr.w	EndingDemoLoad
00005892 7000                       		moveq	#0,d0
00005894 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005898 E948                       		lsl.w	#4,d0
0000589A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000058A0 45F2 0000                  		lea	(a2,d0.w),a2
000058A4 7000                       		moveq	#0,d0
000058A6 1012                       		move.b	(a2),d0
000058A8 6700                       		beq.s	loc_5862
000058AA 6100 BBDE                  		bsr.w	LoadPLC		; load level patterns
000058AE                            
000058AE                            loc_5862:
000058AE 7001                       		moveq	#1,d0
000058B0 6100 BBD8                  		bsr.w	LoadPLC		; load standard	level patterns
000058B4 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000058BA 6100 C3FA                  		bsr.w	Pal_FadeTo
000058BE                            
000058BE                            Cred_WaitLoop:
000058BE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000058C4 6100 CFF4                  		bsr.w	DelayProgram
000058C8 6100 BC2C                  		bsr.w	RunPLC_RAM
000058CC 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000058D0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000058D2 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000058D6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000058D8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000058DE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000058E2 4E75                       		rts	
000058E4                            
000058E4                            ; ---------------------------------------------------------------------------
000058E4                            ; Ending sequence demo loading subroutine
000058E4                            ; ---------------------------------------------------------------------------
000058E4                            
000058E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058E4                            
000058E4                            
000058E4                            EndingDemoLoad:				; XREF: Credits
000058E4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000058E8 0240 000F                  		andi.w	#$F,d0
000058EC D040                       		add.w	d0,d0
000058EE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058F2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058F6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058FA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005900 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005902 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005908 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000590E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005914 7000                       		moveq	#0,d0
00005916 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000591A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000591E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005922 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005926 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000592C 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000592E 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005934 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005938 303C 0008                  		move.w	#8,d0
0000593C                            
0000593C                            EndDemo_LampLoad:
0000593C 24D9                       		move.l	(a1)+,(a2)+
0000593E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005942                            
00005942                            EndDemo_Exit:
00005942 4E75                       		rts	
00005944                            ; End of function EndingDemoLoad
00005944                            
00005944                            ; ===========================================================================
00005944                            ; ---------------------------------------------------------------------------
00005944                            ; Levels used in the end sequence demos
00005944                            ; ---------------------------------------------------------------------------
00005944                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005954                            
00005954                            ; ---------------------------------------------------------------------------
00005954                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005954                            ; ---------------------------------------------------------------------------
00005954                            EndDemo_LampVar:
00005954 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005956 0A00 062C 000D             		dc.w $A00, $62C, $D
0000595C 0000 0000                  		dc.l 0
00005960 0000                       		dc.b 0,	0
00005962 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005976 0101                       		dc.b 1,	1
00005978                            ; ===========================================================================
00005978                            ; ---------------------------------------------------------------------------
00005978                            ; "TRY AGAIN" and "END"	screens
00005978                            ; ---------------------------------------------------------------------------
00005978                            
00005978                            TryAgainEnd:				; XREF: Credits
00005978 6100 BB6E                  		bsr.w	ClearPLC
0000597C 6100 C3DE                  		bsr.w	Pal_FadeFrom
00005980 4DF9 00C0 0004             		lea	($C00004).l,a6
00005986 3CBC 8004                  		move.w	#$8004,(a6)
0000598A 3CBC 8230                  		move.w	#$8230,(a6)
0000598E 3CBC 8407                  		move.w	#$8407,(a6)
00005992 3CBC 9001                  		move.w	#$9001,(a6)
00005996 3CBC 9200                  		move.w	#$9200,(a6)
0000599A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000599E 3CBC 8720                  		move.w	#$8720,(a6)
000059A2 4238 F64E                  		clr.b	($FFFFF64E).w
000059A6 6100 B7E2                  		bsr.w	ClearScreen
000059AA 43F8 D000                  		lea	($FFFFD000).w,a1
000059AE 7000                       		moveq	#0,d0
000059B0 323C 07FF                  		move.w	#$7FF,d1
000059B4                            
000059B4                            TryAg_ClrObjRam:
000059B4 22C0                       		move.l	d0,(a1)+
000059B6 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000059BA                            
000059BA 701D                       		moveq	#$1D,d0
000059BC 6100 BC38                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000059C0 43F8 FB80                  		lea	($FFFFFB80).w,a1
000059C4 7000                       		moveq	#0,d0
000059C6 323C 001F                  		move.w	#$1F,d1
000059CA                            
000059CA                            TryAg_ClrPallet:
000059CA 22C0                       		move.l	d0,(a1)+
000059CC 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000059D0                            
000059D0 7013                       		moveq	#$13,d0
000059D2 6100 C632                  		bsr.w	PalLoad1	; load ending pallet
000059D6 4278 FBC0                  		clr.w	($FFFFFBC0).w
000059DA 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000059E0 4EB9 0000 0000             		jsr	ObjectsLoad
000059E6 4EB9 0000 0000             		jsr	BuildSprites
000059EC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059F2 6100 C2C2                  		bsr.w	Pal_FadeTo
000059F6                            
000059F6                            ; ---------------------------------------------------------------------------
000059F6                            ; "TRY AGAIN" and "END"	screen main loop
000059F6                            ; ---------------------------------------------------------------------------
000059F6                            TryAg_MainLoop:
000059F6 6100 B876                  		bsr.w	PauseGame
000059FA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A00 6100 CEB8                  		bsr.w	DelayProgram
00005A04 4EB9 0000 0000             		jsr	ObjectsLoad
00005A0A 4EB9 0000 0000             		jsr	BuildSprites
00005A10 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005A16 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005A18 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005A1C 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005A1E 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005A24 67D0                       		beq.s	TryAg_MainLoop
00005A26                            
00005A26                            TryAg_Exit:
00005A26 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005A2C 4E75                       		rts	
00005A2E                            
00005A2E                            ; ===========================================================================
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E                            
00005A2E                            Obj8B:					; XREF: Obj_Index
00005A2E 7000                       		moveq	#0,d0
00005A30 1028 0024                  		move.b	$24(a0),d0
00005A34 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005A38 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005A3C 4EF9 0000 0000             		jmp	DisplaySprite
00005A42                            ; ===========================================================================
00005A42 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005A44 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005A46 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005A48 0000                       		dc.w loc_5A8E-Obj8B_Index
00005A4A                            ; ===========================================================================
00005A4A                            
00005A4A                            Obj8B_Main:				; XREF: Obj8B_Index
00005A4A 5428 0024                  		addq.b	#2,$24(a0)
00005A4E 317C 0120 0008             		move.w	#$120,8(a0)
00005A54 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A5A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A62 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A68 117C 0000 0001             		move.b	#0,1(a0)
00005A6E 117C 0002 0018             		move.b	#2,$18(a0)
00005A74 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A7A 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005A80 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A86 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A88 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005A8E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A94 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A9A 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005AA0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005AA6                            
00005AA6                            Obj8B_Animate:				; XREF: Obj8B_Index
00005AA6 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005AAC 4EF9 0000 0000             		jmp	AnimateSprite
00005AB2                            ; ===========================================================================
00005AB2                            
00005AB2                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005AB2 5428 0024                  		addq.b	#2,$24(a0)
00005AB6 7002                       		moveq	#2,d0
00005AB8 0828 0000 001C             		btst	#0,$1C(a0)
00005ABE 6700                       		beq.s	loc_5A6A
00005AC0 4440                       		neg.w	d0
00005AC2                            
00005AC2                            loc_5A6A:
00005AC2 43F8 D800                  		lea	($FFFFD800).w,a1
00005AC6 7205                       		moveq	#5,d1
00005AC8                            
00005AC8                            loc_5A70:
00005AC8 1340 003E                  		move.b	d0,$3E(a1)
00005ACC 3400                       		move.w	d0,d2
00005ACE E742                       		asl.w	#3,d2
00005AD0 D529 0026                  		add.b	d2,$26(a1)
00005AD4 43E9 0040                  		lea	$40(a1),a1
00005AD8 51C9 FFEE                  		dbf	d1,loc_5A70
00005ADC 5228 001A                  		addq.b	#1,$1A(a0)
00005AE0 317C 0070 0030             		move.w	#112,$30(a0)
00005AE6                            
00005AE6                            loc_5A8E:				; XREF: Obj8B_Index
00005AE6 5368 0030                  		subq.w	#1,$30(a0)
00005AEA 6A00                       		bpl.s	locret_5AA0
00005AEC 0868 0000 001C             		bchg	#0,$1C(a0)
00005AF2 117C 0002 0024             		move.b	#2,$24(a0)
00005AF8                            
00005AF8                            locret_5AA0:
00005AF8 4E75                       		rts	
00005AFA                            ; ===========================================================================
00005AFA                            Ani_obj8B:
00005AFA                            	include "_anim\obj8B.asm"
00005AFA                            ; ---------------------------------------------------------------------------
00005AFA                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005AFA                            ; ---------------------------------------------------------------------------
00005AFA 0000                       		dc.w byte_5AA8-Ani_obj8B
00005AFC 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AFE 0000                       		dc.w byte_5AB0-Ani_obj8B
00005B00 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005B04 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005B08 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005B1A                            		even
00005B1A                            		even
00005B1A                            
00005B1A                            ; ===========================================================================
00005B1A                            ; ---------------------------------------------------------------------------
00005B1A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005B1A                            ; ---------------------------------------------------------------------------
00005B1A                            
00005B1A                            Obj8C:					; XREF: Obj_Index
00005B1A 7000                       		moveq	#0,d0
00005B1C 1028 0024                  		move.b	$24(a0),d0
00005B20 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005B24 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005B28 4EF9 0000 0000             		jmp	DisplaySprite
00005B2E                            ; ===========================================================================
00005B2E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005B30 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005B32                            ; ===========================================================================
00005B32                            
00005B32                            Obj8C_Main:				; XREF: Obj8C_Index
00005B32 2248                       		movea.l	a0,a1
00005B34 7400                       		moveq	#0,d2
00005B36 7600                       		moveq	#0,d3
00005B38 7205                       		moveq	#5,d1
00005B3A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005B3E                            
00005B3E                            Obj8C_MakeEms:				; XREF: loc_5B42
00005B3E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005B42 5429 0024                  		addq.b	#2,$24(a1)
00005B46 237C 0000 57C0 0004        		move.l	#Map_obj88,4(a1)
00005B4E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005B54 137C 0000 0001             		move.b	#0,1(a1)
00005B5A 137C 0001 0018             		move.b	#1,$18(a1)
00005B60 337C 0104 0008             		move.w	#$104,8(a1)
00005B66 337C 0120 0038             		move.w	#$120,$38(a1)
00005B6C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B72 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B78 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B7E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B82                            
00005B82                            Obj8C_ChkEms:
00005B82 7000                       		moveq	#0,d0
00005B84 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B88 5340                       		subq.w	#1,d0
00005B8A 6500                       		bcs.s	loc_5B42
00005B8C                            
00005B8C                            Obj8C_ChkEmLoop:
00005B8C B433 0000                  		cmp.b	(a3,d0.w),d2
00005B90 6600                       		bne.s	loc_5B3E
00005B92 5202                       		addq.b	#1,d2
00005B94 60EC                       		bra.s	Obj8C_ChkEms
00005B96                            ; ===========================================================================
00005B96                            
00005B96                            loc_5B3E:
00005B96 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B9A                            
00005B9A                            loc_5B42:
00005B9A 1342 001A                  		move.b	d2,$1A(a1)
00005B9E 5229 001A                  		addq.b	#1,$1A(a1)
00005BA2 5202                       		addq.b	#1,d2
00005BA4 137C 0080 0026             		move.b	#$80,$26(a1)
00005BAA 1343 001E                  		move.b	d3,$1E(a1)
00005BAE 1343 001F                  		move.b	d3,$1F(a1)
00005BB2 0643 000A                  		addi.w	#$A,d3
00005BB6 43E9 0040                  		lea	$40(a1),a1
00005BBA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005BBE                            
00005BBE                            Obj8C_Move:				; XREF: Obj8C_Index
00005BBE 4A68 003E                  		tst.w	$3E(a0)
00005BC2 6700                       		beq.s	locret_5BBA
00005BC4 4A28 001E                  		tst.b	$1E(a0)
00005BC8 6700                       		beq.s	loc_5B78
00005BCA 5328 001E                  		subq.b	#1,$1E(a0)
00005BCE 6600                       		bne.s	loc_5B80
00005BD0                            
00005BD0                            loc_5B78:
00005BD0 3028 003E                  		move.w	$3E(a0),d0
00005BD4 D168 0026                  		add.w	d0,$26(a0)
00005BD8                            
00005BD8                            loc_5B80:
00005BD8 1028 0026                  		move.b	$26(a0),d0
00005BDC 6700                       		beq.s	loc_5B8C
00005BDE 0C00 0080                  		cmpi.b	#$80,d0
00005BE2 6600                       		bne.s	loc_5B96
00005BE4                            
00005BE4                            loc_5B8C:
00005BE4 4268 003E                  		clr.w	$3E(a0)
00005BE8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005BEE                            
00005BEE                            loc_5B96:
00005BEE 4EB9 0000 28EC             		jsr	(CalcSine).l
00005BF4 7800                       		moveq	#0,d4
00005BF6 1828 003C                  		move.b	$3C(a0),d4
00005BFA C3C4                       		muls.w	d4,d1
00005BFC E081                       		asr.l	#8,d1
00005BFE C1C4                       		muls.w	d4,d0
00005C00 E080                       		asr.l	#8,d0
00005C02 D268 0038                  		add.w	$38(a0),d1
00005C06 D068 003A                  		add.w	$3A(a0),d0
00005C0A 3141 0008                  		move.w	d1,8(a0)
00005C0E 3140 000A                  		move.w	d0,$A(a0)
00005C12                            
00005C12                            locret_5BBA:
00005C12 4E75                       		rts	
00005C14                            ; ===========================================================================
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            Map_obj8B:
00005C14                            	include "_maps\obj8B.asm"
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005C14                            ; ---------------------------------------------------------------------------
00005C14 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005C18 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005C1C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005C20 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005C24 08                         byte_5BCC:	dc.b 8
00005C25 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005C2A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005C2F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005C34 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005C39 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C3E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C43 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C48 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C4D 08                         byte_5BF5:	dc.b 8
00005C4E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005C53 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005C58 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005C5D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C62 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C67 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C6C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C71 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C76 08                         byte_5C1E:	dc.b 8
00005C77 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C7C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C81 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C86 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C8B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C90 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C95 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C9A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C9F 08                         byte_5C47:	dc.b 8
00005CA0 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005CA5 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005CAA E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005CAF F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005CB4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005CB9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005CBE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005CC3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005CC8 0C                         byte_5C70:	dc.b $C
00005CC9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005CCE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005CD3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005CD8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005CDD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005CE2 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005CE7 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005CEC 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005CF1 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005CF6 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005CFB 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D00 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D05 0A                         byte_5CAD:	dc.b $A
00005D06 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005D0B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005D10 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005D15 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005D1A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005D1F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005D24 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D29 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D2E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005D33 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005D38 0A                         byte_5CE0:	dc.b $A
00005D39 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005D3E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005D43 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005D48 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005D4D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005D52 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005D57 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D5C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D61 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D66 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D6B 0C                         byte_5D13:	dc.b $C
00005D6C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D71 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D76 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D7B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D80 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D85 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D8A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D8F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D94 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D99 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D9E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005DA3 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005DA8                            		even
00005DA8                            		even
00005DA8                            
00005DA8                            ; ---------------------------------------------------------------------------
00005DA8                            ; Ending sequence demos
00005DA8                            ; ---------------------------------------------------------------------------
00005DA8                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005DD6                            		even
00005DD6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005E16                            		even
00005E16                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005E46                            		even
00005E46                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E76                            		even
00005E76                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E96                            		even
00005E96                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005EB6                            		even
00005EB6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005EE6                            		even
00005EE6                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005F16                            		even
00005F16                            
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            ; Subroutine to	load level boundaries and start	locations
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            
00005F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005F16                            
00005F16                            
00005F16                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005F16 7000                       		moveq	#0,d0
00005F18 11C0 F740                  		move.b	d0,($FFFFF740).w
00005F1C 11C0 F741                  		move.b	d0,($FFFFF741).w
00005F20 11C0 F746                  		move.b	d0,($FFFFF746).w
00005F24 11C0 F748                  		move.b	d0,($FFFFF748).w
00005F28 11C0 F742                  		move.b	d0,($FFFFF742).w
00005F2C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005F30 ED08                       		lsl.b	#6,d0
00005F32 E848                       		lsr.w	#4,d0
00005F34 3200                       		move.w	d0,d1
00005F36 D040                       		add.w	d0,d0
00005F38 D041                       		add.w	d1,d0
00005F3A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005F3E 3018                       		move.w	(a0)+,d0
00005F40 31C0 F730                  		move.w	d0,($FFFFF730).w
00005F44 2018                       		move.l	(a0)+,d0
00005F46 21C0 F728                  		move.l	d0,($FFFFF728).w
00005F4A 21C0 F720                  		move.l	d0,($FFFFF720).w
00005F4E 2018                       		move.l	(a0)+,d0
00005F50 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005F54 21C0 F724                  		move.l	d0,($FFFFF724).w
00005F58 3038 F728                  		move.w	($FFFFF728).w,d0
00005F5C 0640 0240                  		addi.w	#$240,d0
00005F60 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F64 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F6A 3018                       		move.w	(a0)+,d0
00005F6C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F70 6000 0000                  		bra.w	LevSz_ChkLamp
00005F74                            ; ===========================================================================
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            ; Level size array and ending start location array
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            LevelSizeArray:	incbin	misc\lvl_size.bin
000060C4                            		even
000060C4                            
000060C4                            EndingStLocArray:
000060C4                            		incbin	misc\sloc_end.bin
000060E4                            		even
000060E4                            
000060E4                            ; ===========================================================================
000060E4                            
000060E4                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000060E4 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000060E8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000060EA 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000060F0 3238 D008                  		move.w	($FFFFD008).w,d1
000060F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000060F8 6000                       		bra.s	loc_60D0
000060FA                            ; ===========================================================================
000060FA                            
000060FA                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000060FA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060FE ED08                       		lsl.b	#6,d0
00006100 E848                       		lsr.w	#4,d0
00006102 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006106 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000610A 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000610C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006110 5340                       		subq.w	#1,d0
00006112 E548                       		lsl.w	#2,d0
00006114 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006118                            
00006118                            LevSz_SonicPos:
00006118 7200                       		moveq	#0,d1
0000611A 3219                       		move.w	(a1)+,d1
0000611C 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006120 7000                       		moveq	#0,d0
00006122 3011                       		move.w	(a1),d0
00006124 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006128                            
00006128                            loc_60D0:				; XREF: LevSz_ChkLamp
00006128 0441 00A0                  		subi.w	#$A0,d1
0000612C 6400                       		bcc.s	loc_60D8
0000612E 7200                       		moveq	#0,d1
00006130                            
00006130                            loc_60D8:
00006130 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006134 B242                       		cmp.w	d2,d1
00006136 6500                       		bcs.s	loc_60E2
00006138 3202                       		move.w	d2,d1
0000613A                            
0000613A                            loc_60E2:
0000613A 31C1 F700                  		move.w	d1,($FFFFF700).w
0000613E 0440 0060                  		subi.w	#$60,d0
00006142 6400                       		bcc.s	loc_60EE
00006144 7000                       		moveq	#0,d0
00006146                            
00006146                            loc_60EE:
00006146 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000614A 6D00                       		blt.s	loc_60F8
0000614C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006150                            
00006150                            loc_60F8:
00006150 31C0 F704                  		move.w	d0,($FFFFF704).w
00006154 6100 0000                  		bsr.w	BgScrollSpeed
00006158 7000                       		moveq	#0,d0
0000615A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000615E E508                       		lsl.b	#2,d0
00006160 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006166 6000 0000                  		bra.w	LevSz_Unk
0000616A                            ; ===========================================================================
0000616A                            ; ---------------------------------------------------------------------------
0000616A                            ; Sonic	start location array
0000616A                            ; ---------------------------------------------------------------------------
0000616A                            StartLocArray:	incbin	misc\sloc_lev.bin
000061DA                            		even
000061DA                            
000061DA                            ; ---------------------------------------------------------------------------
000061DA                            ; Which	256x256	tiles contain loops or roll-tunnels
000061DA                            ; ---------------------------------------------------------------------------
000061DA                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000061DA                            ; loop,	loop, tunnel, tunnel
000061DA                            ; ---------------------------------------------------------------------------
000061DA                            LoopTileNums:	incbin	misc\loopnums.bin
000061F6                            		even
000061F6                            
000061F6                            ; ===========================================================================
000061F6                            
000061F6                            LevSz_Unk:				; XREF: LevelSizeLoad
000061F6 7000                       		moveq	#0,d0
000061F8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000061FC E748                       		lsl.w	#3,d0
000061FE 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006202 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006206 24D9                       		move.l	(a1)+,(a2)+
00006208 24D9                       		move.l	(a1)+,(a2)+
0000620A 4E75                       		rts	
0000620C                            ; End of function LevelSizeLoad
0000620C                            
0000620C                            ; ===========================================================================
0000620C 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006214 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000621C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006224 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000622C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006234 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000623C 0070 0100 0100 0100        		dc.l $700100, $1000100
00006244                            
00006244                            ; ---------------------------------------------------------------------------
00006244                            ; Subroutine to	set scroll speed of some backgrounds
00006244                            ; ---------------------------------------------------------------------------
00006244                            
00006244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006244                            
00006244                            
00006244                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006244 4A38 FE30                  		tst.b	($FFFFFE30).w
00006248 6600                       		bne.s	loc_6206
0000624A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000624E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006252 31C1 F708                  		move.w	d1,($FFFFF708).w
00006256 31C1 F710                  		move.w	d1,($FFFFF710).w
0000625A 31C1 F718                  		move.w	d1,($FFFFF718).w
0000625E                            
0000625E                            loc_6206:
0000625E 7400                       		moveq	#0,d2
00006260 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006264 D442                       		add.w	d2,d2
00006266 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000626A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000626E                            ; End of function BgScrollSpeed
0000626E                            
0000626E                            ; ===========================================================================
0000626E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006272 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006276 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000627A 0000                       		dc.w BgScroll_End-BgScroll_Index
0000627C                            ; ===========================================================================
0000627C                            
0000627C                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000627C 42B8 F708                  		clr.l	($FFFFF708).w
00006280 42B8 F70C                  		clr.l	($FFFFF70C).w
00006284 42B8 F714                  		clr.l	($FFFFF714).w
00006288 42B8 F71C                  		clr.l	($FFFFF71C).w
0000628C 45F8 A800                  		lea	($FFFFA800).w,a2
00006290 429A                       		clr.l	(a2)+
00006292 429A                       		clr.l	(a2)+
00006294 429A                       		clr.l	(a2)+
00006296 4E75                       		rts 
00006298                            ; ===========================================================================
00006298                            
00006298                            BgScroll_LZ:				; XREF: BgScroll_Index
00006298 E280                       		asr.l	#1,d0
0000629A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000629E 4E75                       		rts	
000062A0                            ; ===========================================================================
000062A0                            
000062A0                            BgScroll_MZ:				; XREF: BgScroll_Index
000062A0 4E75                       		rts	
000062A2                            ; ===========================================================================
000062A2                            
000062A2                            BgScroll_SLZ:				; XREF: BgScroll_Index
000062A2 E280                       		asr.l	#1,d0
000062A4 0640 00C0                  		addi.w	#$C0,d0
000062A8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000062AC 42B8 F708                  		clr.l	($FFFFF708).w
000062B0 4E75                       		rts	
000062B2                            ; ===========================================================================
000062B2                            
000062B2                            BgScroll_SYZ:				; XREF: BgScroll_Index
000062B2 E980                       		asl.l	#4,d0
000062B4 2400                       		move.l	d0,d2
000062B6 E380                       		asl.l	#1,d0
000062B8 D082                       		add.l	d2,d0
000062BA E080                       		asr.l	#8,d0
000062BC 5240                       		addq.w	#1,d0
000062BE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000062C2 42B8 F708                  		clr.l	($FFFFF708).w
000062C6 4E75                       		rts	
000062C8                            ; ===========================================================================
000062C8                            
000062C8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000062C8 0240 07F8                  		andi.w	#$7F8,d0
000062CC E640                       		asr.w	#3,d0
000062CE 5240                       		addq.w	#1,d0
000062D0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000062D4 4E75                       		rts	
000062D6                            ; ===========================================================================
000062D6                            
000062D6                            BgScroll_End:				; XREF: BgScroll_Index
000062D6 3038 F700                  		move.w	($FFFFF700).w,d0
000062DA E240                       		asr.w	#1,d0
000062DC 31C0 F708                  		move.w	d0,($FFFFF708).w
000062E0 31C0 F710                  		move.w	d0,($FFFFF710).w
000062E4 E440                       		asr.w	#2,d0
000062E6 3200                       		move.w	d0,d1
000062E8 D040                       		add.w	d0,d0
000062EA D041                       		add.w	d1,d0
000062EC 31C0 F718                  		move.w	d0,($FFFFF718).w
000062F0 42B8 F70C                  		clr.l	($FFFFF70C).w
000062F4 42B8 F714                  		clr.l	($FFFFF714).w
000062F8 42B8 F71C                  		clr.l	($FFFFF71C).w
000062FC 45F8 A800                  		lea	($FFFFA800).w,a2
00006300 429A                       		clr.l	(a2)+
00006302 429A                       		clr.l	(a2)+
00006304 429A                       		clr.l	(a2)+
00006306 4E75                       		rts
00006308                            
00006308                            ; ---------------------------------------------------------------------------
00006308                            ; Background layer deformation subroutines
00006308                            ; ---------------------------------------------------------------------------
00006308                            
00006308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006308                            
00006308                            
00006308                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006308 4A38 F744                  		tst.b	($FFFFF744).w
0000630C 6700                       		beq.s	loc_628E
0000630E 4E75                       		rts	
00006310                            ; ===========================================================================
00006310                            
00006310                            loc_628E:
00006310 4278 F754                  		clr.w	($FFFFF754).w
00006314 4278 F756                  		clr.w	($FFFFF756).w
00006318 4278 F758                  		clr.w	($FFFFF758).w
0000631C 4278 F75A                  		clr.w	($FFFFF75A).w
00006320 6100 0000                  		bsr.w	ScrollHoriz
00006324 6100 0000                  		bsr.w	ScrollVertical
00006328 6100 0000                  		bsr.w	DynScrResizeLoad
0000632C 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006332 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006338 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000633E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006344 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000634A 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006350 7000                       		moveq	#0,d0
00006352 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006356 D040                       		add.w	d0,d0
00006358 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000635C 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006360                            ; End of function DeformBgLayer
00006360                            
00006360                            ; ===========================================================================
00006360                            ; ---------------------------------------------------------------------------
00006360                            ; Offset index for background layer deformation	code
00006360                            ; ---------------------------------------------------------------------------
00006360 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006364 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006368 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000636C 0000                       		dc.w Deform_GHZ-Deform_Index
0000636E                            ; ---------------------------------------------------------------------------
0000636E                            ; Green	Hill Zone background layer deformation code
0000636E                            ; ---------------------------------------------------------------------------
0000636E                            
0000636E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000636E                            
0000636E                            
0000636E                            Deform_GHZ:
0000636E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006372 48C4                       		ext.l	d4
00006374 EB84                       		asl.l	#5,d4
00006376 2204                       		move.l	d4,d1
00006378 E384                       		asl.l	#1,d4
0000637A D881                       		add.l	d1,d4
0000637C 7C00                       		moveq	#0,d6
0000637E 6100 0000                  		bsr.w	ScrollBlock6
00006382 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006386 48C4                       		ext.l	d4
00006388 EF84                       		asl.l	#7,d4
0000638A 7C00                       		moveq	#0,d6
0000638C 6100 0000                  		bsr.w	ScrollBlock5
00006390 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006394 3038 F704                  		move.w	($FFFFF704).w,d0
00006398 0240 07FF                  		andi.w	#$7FF,d0
0000639C EA48                       		lsr.w	#5,d0
0000639E 4440                       		neg.w	d0
000063A0 0640 0020                  		addi.w	#$20,d0	; ' '
000063A4 6A00                       		bpl.s	Deform_GHZ_1
000063A6 7000                       		moveq	#0,d0
000063A8                            
000063A8                            Deform_GHZ_1:				; XREF: Deform_GHZ
000063A8 3800                       		move.w	d0,d4
000063AA 31C0 F618                  		move.w	d0,($FFFFF618).w
000063AE 3038 F700                  		move.w	($FFFFF700).w,d0
000063B2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000063B8 6600                       		bne.s	Deform_GHZ_2
000063BA 7000                       		moveq	#0,d0
000063BC                            
000063BC                            Deform_GHZ_2:				; XREF: Deform_GHZ
000063BC 4440                       		neg.w	d0
000063BE 4840                       		swap	d0
000063C0 45F8 A800                  		lea	($FFFFA800).w,a2
000063C4 069A 0001 0000             		addi.l	#$10000,(a2)+
000063CA 069A 0000 C000             		addi.l	#$C000,(a2)+
000063D0 069A 0000 8000             		addi.l	#$8000,(a2)+
000063D6 3038 A800                  		move.w	($FFFFA800).w,d0
000063DA D078 F718                  		add.w	($FFFFF718).w,d0
000063DE 4440                       		neg.w	d0
000063E0 323C 001F                  		move.w	#$1F,d1
000063E4 9244                       		sub.w	d4,d1
000063E6 6500                       		bcs.s	Deform_GHZ_4
000063E8                            
000063E8                            Deform_GHZ_3:				; XREF: Deform_GHZ
000063E8 22C0                       		move.l	d0,(a1)+
000063EA 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
000063EE                            
000063EE                            Deform_GHZ_4:				; XREF: Deform_GHZ
000063EE 3038 A804                  		move.w	($FFFFA804).w,d0
000063F2 D078 F718                  		add.w	($FFFFF718).w,d0
000063F6 4440                       		neg.w	d0
000063F8 323C 000F                  		move.w	#$F,d1
000063FC                            
000063FC                            Deform_GHZ_5:				; XREF: Deform_GHZ
000063FC 22C0                       		move.l	d0,(a1)+
000063FE 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
00006402 3038 A808                  		move.w	($FFFFA808).w,d0
00006406 D078 F718                  		add.w	($FFFFF718).w,d0
0000640A 4440                       		neg.w	d0
0000640C 323C 000F                  		move.w	#$F,d1
00006410                            
00006410                            Deform_GHZ_6:				; XREF: Deform_GHZ
00006410 22C0                       		move.l	d0,(a1)+
00006412 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
00006416 323C 002F                  		move.w	#$2F,d1	; '/'
0000641A 3038 F718                  		move.w	($FFFFF718).w,d0
0000641E 4440                       		neg.w	d0
00006420                            
00006420                            Deform_GHZ_7:				; XREF: Deform_GHZ
00006420 22C0                       		move.l	d0,(a1)+
00006422 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
00006426 323C 0027                  		move.w	#$27,d1	; '''
0000642A 3038 F710                  		move.w	($FFFFF710).w,d0
0000642E 4440                       		neg.w	d0
00006430                            
00006430                            Deform_GHZ_8:				; XREF: Deform_GHZ
00006430 22C0                       		move.l	d0,(a1)+
00006432 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
00006436 3038 F710                  		move.w	($FFFFF710).w,d0
0000643A 3438 F700                  		move.w	($FFFFF700).w,d2
0000643E 9440                       		sub.w	d0,d2
00006440 48C2                       		ext.l	d2
00006442 E182                       		asl.l	#8,d2
00006444 85FC 0068                  		divs.w	#$68,d2	; 'h'
00006448 48C2                       		ext.l	d2
0000644A E182                       		asl.l	#8,d2
0000644C 7600                       		moveq	#0,d3
0000644E 3600                       		move.w	d0,d3
00006450 323C 0047                  		move.w	#$47,d1	; 'G'
00006454 D244                       		add.w	d4,d1
00006456                            
00006456                            Deform_GHZ_9:				; XREF: Deform_GHZ
00006456 3003                       		move.w	d3,d0
00006458 4440                       		neg.w	d0
0000645A 22C0                       		move.l	d0,(a1)+
0000645C 4843                       		swap	d3
0000645E D682                       		add.l	d2,d3
00006460 4843                       		swap	d3
00006462 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
00006466 4E75                       		rts	
00006468                            ; End of function Deform_GHZ
00006468                            
00006468                            
00006468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006468                            
00006468                            
00006468                            Deform_LZ:
00006468 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000646C 48C4                       		ext.l	d4
0000646E EF84                       		asl.l	#7,d4
00006470 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006474 48C5                       		ext.l	d5
00006476 EF85                       		asl.l	#7,d5
00006478 6100 0000                  		bsr.w	ScrollBlock1
0000647C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006482 47F9 0000 0000             		lea	(LZ_Wave_Data).l,a3
00006488 45F9 0000 0000             		lea	(Obj0A_WobbleData).l,a2
0000648E 1438 F7D8                  		move.b	($FFFFF7D8).w,d2
00006492 1602                       		move.b	d2,d3
00006494 0678 0080 F7D8             		addi.w	#$80,($FFFFF7D8).w ; '€'
0000649A D478 F70C                  		add.w	($FFFFF70C).w,d2
0000649E 0242 00FF                  		andi.w	#$FF,d2
000064A2 D678 F704                  		add.w	($FFFFF704).w,d3
000064A6 0243 00FF                  		andi.w	#$FF,d3
000064AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000064AE 323C 00DF                  		move.w	#$DF,d1	; 'ß'
000064B2 3038 F700                  		move.w	($FFFFF700).w,d0
000064B6 4440                       		neg.w	d0
000064B8 3C00                       		move.w	d0,d6
000064BA 4840                       		swap	d0
000064BC 3038 F708                  		move.w	($FFFFF708).w,d0
000064C0 4440                       		neg.w	d0
000064C2 3838 F646                  		move.w	($FFFFF646).w,d4
000064C6 3A38 F704                  		move.w	($FFFFF704).w,d5
000064CA                            
000064CA                            Deform_LZ_1:				; XREF: Deform_LZ
000064CA BA44                       		cmp.w	d4,d5
000064CC 6C00                       		bge.s	Deform_LZ_2
000064CE 22C0                       		move.l	d0,(a1)+
000064D0 5245                       		addq.w	#1,d5
000064D2 5202                       		addq.b	#1,d2
000064D4 5203                       		addq.b	#1,d3
000064D6 51C9 FFF2                  		dbf	d1,Deform_LZ_1
000064DA 4E75                       		rts	
000064DC                            ; ===========================================================================
000064DC                            
000064DC                            Deform_LZ_2:				; XREF: Deform_LZ
000064DC 1833 3000                  		move.b	(a3,d3.w),d4
000064E0 4884                       		ext.w	d4
000064E2 D846                       		add.w	d6,d4
000064E4 32C4                       		move.w	d4,(a1)+
000064E6 1832 2000                  		move.b	(a2,d2.w),d4
000064EA 4884                       		ext.w	d4
000064EC D840                       		add.w	d0,d4
000064EE 32C4                       		move.w	d4,(a1)+
000064F0 5202                       		addq.b	#1,d2
000064F2 5203                       		addq.b	#1,d3
000064F4 51C9 FFE6                  		dbf	d1,Deform_LZ_2
000064F8 4E75                       		rts	
000064FA                            ; End of function Deform_LZ
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0101 0202 0303 0303 0202+  LZ_Wave_Data:	dc.b   1,  1,  2,  2,  3,  3,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0
0000650A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000651A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000652A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000653A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000654A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000655A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000656A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000657A FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,  0,  0,  0,  0
0000658A 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
0000659A 0101 0202 0303 0303 0202+  		dc.b   1,  1,  2,  2,  3,  3,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0
000065AA 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
000065BA 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
000065CA 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
000065DA 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
000065EA 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
000065FA                            
000065FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065FA                            
000065FA                            
000065FA                            Deform_MZ:
000065FA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000065FE 48C4                       		ext.l	d4
00006600 ED84                       		asl.l	#6,d4
00006602 2204                       		move.l	d4,d1
00006604 E384                       		asl.l	#1,d4
00006606 D881                       		add.l	d1,d4
00006608 7C02                       		moveq	#2,d6
0000660A 6100 0000                  		bsr.w	ScrollBlock4
0000660E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006612 48C4                       		ext.l	d4
00006614 ED84                       		asl.l	#6,d4
00006616 7C06                       		moveq	#6,d6
00006618 6100 0000                  		bsr.w	ScrollBlock6
0000661C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006620 48C4                       		ext.l	d4
00006622 EF84                       		asl.l	#7,d4
00006624 7C04                       		moveq	#4,d6
00006626 6100 0000                  		bsr.w	ScrollBlock5
0000662A 303C 0200                  		move.w	#$200,d0
0000662E 3238 F704                  		move.w	($FFFFF704).w,d1
00006632 0441 01C8                  		subi.w	#$1C8,d1
00006636 6500                       		bcs.s	Deform_MZ_1
00006638 3401                       		move.w	d1,d2
0000663A D241                       		add.w	d1,d1
0000663C D242                       		add.w	d2,d1
0000663E E441                       		asr.w	#2,d1
00006640 D041                       		add.w	d1,d0
00006642                            
00006642                            Deform_MZ_1:				; XREF: Deform_MZ
00006642 31C0 F714                  		move.w	d0,($FFFFF714).w
00006646 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000664A 6100 0000                  		bsr.w	ScrollBlock3
0000664E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006654 1038 F756                  		move.b	($FFFFF756).w,d0
00006658 8038 F758                  		or.b	($FFFFF758).w,d0
0000665C 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006660 4238 F756                  		clr.b	($FFFFF756).w
00006664 4238 F758                  		clr.b	($FFFFF758).w
00006668 43F8 A800                  		lea	($FFFFA800).w,a1
0000666C 3438 F700                  		move.w	($FFFFF700).w,d2
00006670 4442                       		neg.w	d2
00006672 3002                       		move.w	d2,d0
00006674 E440                       		asr.w	#2,d0
00006676 9042                       		sub.w	d2,d0
00006678 48C0                       		ext.l	d0
0000667A E780                       		asl.l	#3,d0
0000667C 81FC 0005                  		divs.w	#5,d0
00006680 48C0                       		ext.l	d0
00006682 E980                       		asl.l	#4,d0
00006684 E180                       		asl.l	#8,d0
00006686 7600                       		moveq	#0,d3
00006688 3602                       		move.w	d2,d3
0000668A E243                       		asr.w	#1,d3
0000668C 323C 0004                  		move.w	#4,d1
00006690                            
00006690                            Deform_MZ_2:				; XREF: Deform_MZ
00006690 32C3                       		move.w	d3,(a1)+
00006692 4843                       		swap	d3
00006694 D680                       		add.l	d0,d3
00006696 4843                       		swap	d3
00006698 51C9 FFF6                  		dbf	d1,Deform_MZ_2
0000669C 3038 F718                  		move.w	($FFFFF718).w,d0
000066A0 4440                       		neg.w	d0
000066A2 323C 0001                  		move.w	#1,d1
000066A6                            
000066A6                            Deform_MZ_3:				; XREF: Deform_MZ
000066A6 32C0                       		move.w	d0,(a1)+
000066A8 51C9 FFFC                  		dbf	d1,Deform_MZ_3
000066AC 3038 F710                  		move.w	($FFFFF710).w,d0
000066B0 4440                       		neg.w	d0
000066B2 323C 0008                  		move.w	#8,d1
000066B6                            
000066B6                            Deform_MZ_4:				; XREF: Deform_MZ
000066B6 32C0                       		move.w	d0,(a1)+
000066B8 51C9 FFFC                  		dbf	d1,Deform_MZ_4
000066BC 3038 F708                  		move.w	($FFFFF708).w,d0
000066C0 4440                       		neg.w	d0
000066C2 323C 000F                  		move.w	#$F,d1
000066C6                            
000066C6                            Deform_MZ_5:				; XREF: Deform_MZ
000066C6 32C0                       		move.w	d0,(a1)+
000066C8 51C9 FFFC                  		dbf	d1,Deform_MZ_5
000066CC 45F8 A800                  		lea	($FFFFA800).w,a2
000066D0 3038 F70C                  		move.w	($FFFFF70C).w,d0
000066D4 0440 0200                  		subi.w	#$200,d0
000066D8 3400                       		move.w	d0,d2
000066DA 0C40 0100                  		cmpi.w	#$100,d0
000066DE 6500                       		bcs.s	Deform_MZ_6
000066E0 303C 0100                  		move.w	#$100,d0
000066E4                            
000066E4                            Deform_MZ_6:				; XREF: Deform_MZ
000066E4 0240 01F0                  		andi.w	#$1F0,d0
000066E8 E648                       		lsr.w	#3,d0
000066EA 45F2 0000                  		lea	(a2,d0.w),a2
000066EE 6000 0000                  		bra.w	Deform_All
000066F2                            ; ===========================================================================
000066F2                            
000066F2                            Deform_SLZ:
000066F2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066F6 48C5                       		ext.l	d5
000066F8 EF85                       		asl.l	#7,d5
000066FA 6100 0000                  		bsr.w	ScrollBlock2
000066FE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006704 43F8 A800                  		lea	($FFFFA800).w,a1
00006708 3438 F700                  		move.w	($FFFFF700).w,d2
0000670C 4442                       		neg.w	d2
0000670E 3002                       		move.w	d2,d0
00006710 E640                       		asr.w	#3,d0
00006712 9042                       		sub.w	d2,d0
00006714 48C0                       		ext.l	d0
00006716 E980                       		asl.l	#4,d0
00006718 81FC 001C                  		divs.w	#$1C,d0
0000671C 48C0                       		ext.l	d0
0000671E E980                       		asl.l	#4,d0
00006720 E180                       		asl.l	#8,d0
00006722 7600                       		moveq	#0,d3
00006724 3602                       		move.w	d2,d3
00006726 323C 001B                  		move.w	#$1B,d1
0000672A                            
0000672A                            Deform_SLZ_1:				; XREF: Deform_MZ
0000672A 32C3                       		move.w	d3,(a1)+
0000672C 4843                       		swap	d3
0000672E D680                       		add.l	d0,d3
00006730 4843                       		swap	d3
00006732 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00006736 3002                       		move.w	d2,d0
00006738 E640                       		asr.w	#3,d0
0000673A 3200                       		move.w	d0,d1
0000673C E241                       		asr.w	#1,d1
0000673E D041                       		add.w	d1,d0
00006740 323C 0004                  		move.w	#4,d1
00006744                            
00006744                            Deform_SLZ_2:				; XREF: Deform_MZ
00006744 32C0                       		move.w	d0,(a1)+
00006746 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000674A 3002                       		move.w	d2,d0
0000674C E440                       		asr.w	#2,d0
0000674E 323C 0004                  		move.w	#4,d1
00006752                            
00006752                            Deform_SLZ_3:				; XREF: Deform_MZ
00006752 32C0                       		move.w	d0,(a1)+
00006754 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00006758 3002                       		move.w	d2,d0
0000675A E240                       		asr.w	#1,d0
0000675C 323C 001D                  		move.w	#$1D,d1
00006760                            
00006760                            Deform_SLZ_4:				; XREF: Deform_MZ
00006760 32C0                       		move.w	d0,(a1)+
00006762 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00006766 45F8 A800                  		lea	($FFFFA800).w,a2
0000676A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000676E 3400                       		move.w	d0,d2
00006770 0440 00C0                  		subi.w	#$C0,d0	; 'À'
00006774 0240 03F0                  		andi.w	#$3F0,d0
00006778 E648                       		lsr.w	#3,d0
0000677A 45F2 0000                  		lea	(a2,d0.w),a2
0000677E                            
0000677E                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
0000677E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006782 323C 000E                  		move.w	#$E,d1
00006786 3038 F700                  		move.w	($FFFFF700).w,d0
0000678A 4440                       		neg.w	d0
0000678C 4840                       		swap	d0
0000678E 0242 000F                  		andi.w	#$F,d2
00006792 D442                       		add.w	d2,d2
00006794 301A                       		move.w	(a2)+,d0
00006796 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000679A                            ; End of function Deform_MZ
0000679A                            
0000679A                            ; ===========================================================================
0000679A                            
0000679A                            Deform_All_1:				; XREF: Deform_All
0000679A 301A                       		move.w	(a2)+,d0
0000679C                            
0000679C                            Deform_All_2:
0000679C 22C0                       		move.l	d0,(a1)+
0000679E 22C0                       		move.l	d0,(a1)+
000067A0 22C0                       		move.l	d0,(a1)+
000067A2 22C0                       		move.l	d0,(a1)+
000067A4 22C0                       		move.l	d0,(a1)+
000067A6 22C0                       		move.l	d0,(a1)+
000067A8 22C0                       		move.l	d0,(a1)+
000067AA 22C0                       		move.l	d0,(a1)+
000067AC 22C0                       		move.l	d0,(a1)+
000067AE 22C0                       		move.l	d0,(a1)+
000067B0 22C0                       		move.l	d0,(a1)+
000067B2 22C0                       		move.l	d0,(a1)+
000067B4 22C0                       		move.l	d0,(a1)+
000067B6 22C0                       		move.l	d0,(a1)+
000067B8 22C0                       		move.l	d0,(a1)+
000067BA 22C0                       		move.l	d0,(a1)+
000067BC 51C9 FFDC                  		dbf	d1,Deform_All_1
000067C0 4E75                       		rts	
000067C2                            
000067C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067C2                            
000067C2                            
000067C2                            Deform_SYZ:
000067C2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000067C6 48C5                       		ext.l	d5
000067C8 E985                       		asl.l	#4,d5
000067CA 2205                       		move.l	d5,d1
000067CC E385                       		asl.l	#1,d5
000067CE DA81                       		add.l	d1,d5
000067D0 6100 0000                  		bsr.w	ScrollBlock2
000067D4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067DA 43F8 A800                  		lea	($FFFFA800).w,a1
000067DE 3438 F700                  		move.w	($FFFFF700).w,d2
000067E2 4442                       		neg.w	d2
000067E4 3002                       		move.w	d2,d0
000067E6 E640                       		asr.w	#3,d0
000067E8 9042                       		sub.w	d2,d0
000067EA 48C0                       		ext.l	d0
000067EC E780                       		asl.l	#3,d0
000067EE 81FC 0008                  		divs.w	#8,d0
000067F2 48C0                       		ext.l	d0
000067F4 E980                       		asl.l	#4,d0
000067F6 E180                       		asl.l	#8,d0
000067F8 7600                       		moveq	#0,d3
000067FA 3602                       		move.w	d2,d3
000067FC E243                       		asr.w	#1,d3
000067FE 323C 0007                  		move.w	#7,d1
00006802                            
00006802                            Deform_SYZ_1:				; XREF: Deform_SYZ
00006802 32C3                       		move.w	d3,(a1)+
00006804 4843                       		swap	d3
00006806 D680                       		add.l	d0,d3
00006808 4843                       		swap	d3
0000680A 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
0000680E 3002                       		move.w	d2,d0
00006810 E640                       		asr.w	#3,d0
00006812 323C 0004                  		move.w	#4,d1
00006816                            
00006816                            Deform_SYZ_2:				; XREF: Deform_SYZ
00006816 32C0                       		move.w	d0,(a1)+
00006818 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
0000681C 3002                       		move.w	d2,d0
0000681E E440                       		asr.w	#2,d0
00006820 323C 0005                  		move.w	#5,d1
00006824                            
00006824                            Deform_SYZ_3:				; XREF: Deform_SYZ
00006824 32C0                       		move.w	d0,(a1)+
00006826 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
0000682A 3002                       		move.w	d2,d0
0000682C 3202                       		move.w	d2,d1
0000682E E241                       		asr.w	#1,d1
00006830 9041                       		sub.w	d1,d0
00006832 48C0                       		ext.l	d0
00006834 E980                       		asl.l	#4,d0
00006836 81FC 000E                  		divs.w	#$E,d0
0000683A 48C0                       		ext.l	d0
0000683C E980                       		asl.l	#4,d0
0000683E E180                       		asl.l	#8,d0
00006840 7600                       		moveq	#0,d3
00006842 3602                       		move.w	d2,d3
00006844 E243                       		asr.w	#1,d3
00006846 323C 000D                  		move.w	#$D,d1
0000684A                            
0000684A                            Deform_SYZ_4:				; XREF: Deform_SYZ
0000684A 32C3                       		move.w	d3,(a1)+
0000684C 4843                       		swap	d3
0000684E D680                       		add.l	d0,d3
00006850 4843                       		swap	d3
00006852 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
00006856 45F8 A800                  		lea	($FFFFA800).w,a2
0000685A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000685E 3400                       		move.w	d0,d2
00006860 0240 01F0                  		andi.w	#$1F0,d0
00006864 E648                       		lsr.w	#3,d0
00006866 45F2 0000                  		lea	(a2,d0.w),a2
0000686A 6000 FF12                  		bra.w	Deform_All
0000686E                            ; End of function Deform_SYZ
0000686E                            
0000686E                            
0000686E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000686E                            
0000686E                            
0000686E                            Deform_SBZ:
0000686E 4A38 FE11                  		tst.b	($FFFFFE11).w
00006872 6600 0000                  		bne.w	Deform_SBZ_Act2
00006876 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000687A 48C4                       		ext.l	d4
0000687C EF84                       		asl.l	#7,d4
0000687E 7C02                       		moveq	#2,d6
00006880 6100 0000                  		bsr.w	ScrollBlock4
00006884 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006888 48C4                       		ext.l	d4
0000688A ED84                       		asl.l	#6,d4
0000688C 7C06                       		moveq	#6,d6
0000688E 6100 0000                  		bsr.w	ScrollBlock6
00006892 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006896 48C4                       		ext.l	d4
00006898 EB84                       		asl.l	#5,d4
0000689A 2204                       		move.l	d4,d1
0000689C E384                       		asl.l	#1,d4
0000689E D881                       		add.l	d1,d4
000068A0 7C04                       		moveq	#4,d6
000068A2 6100 0000                  		bsr.w	ScrollBlock5
000068A6 7800                       		moveq	#0,d4
000068A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068AC 48C5                       		ext.l	d5
000068AE EB85                       		asl.l	#5,d5
000068B0 6100 0000                  		bsr.w	ScrollBlock1_2
000068B4 3038 F70C                  		move.w	($FFFFF70C).w,d0
000068B8 31C0 F714                  		move.w	d0,($FFFFF714).w
000068BC 31C0 F71C                  		move.w	d0,($FFFFF71C).w
000068C0 31C0 F618                  		move.w	d0,($FFFFF618).w
000068C4 1038 F756                  		move.b	($FFFFF756).w,d0
000068C8 8038 F75A                  		or.b	($FFFFF75A).w,d0
000068CC 8138 F758                  		or.b	d0,($FFFFF758).w
000068D0 4238 F756                  		clr.b	($FFFFF756).w
000068D4 4238 F75A                  		clr.b	($FFFFF75A).w
000068D8 43F8 A800                  		lea	($FFFFA800).w,a1
000068DC 3438 F700                  		move.w	($FFFFF700).w,d2
000068E0 4442                       		neg.w	d2
000068E2 E442                       		asr.w	#2,d2
000068E4 3002                       		move.w	d2,d0
000068E6 E240                       		asr.w	#1,d0
000068E8 9042                       		sub.w	d2,d0
000068EA 48C0                       		ext.l	d0
000068EC E780                       		asl.l	#3,d0
000068EE 81FC 0004                  		divs.w	#4,d0
000068F2 48C0                       		ext.l	d0
000068F4 E980                       		asl.l	#4,d0
000068F6 E180                       		asl.l	#8,d0
000068F8 7600                       		moveq	#0,d3
000068FA 3602                       		move.w	d2,d3
000068FC 323C 0003                  		move.w	#3,d1
00006900                            
00006900                            Deform_SBZ_1:				; XREF: Deform_SBZ
00006900 32C3                       		move.w	d3,(a1)+
00006902 4843                       		swap	d3
00006904 D680                       		add.l	d0,d3
00006906 4843                       		swap	d3
00006908 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
0000690C 3038 F718                  		move.w	($FFFFF718).w,d0
00006910 4440                       		neg.w	d0
00006912 323C 0009                  		move.w	#9,d1
00006916                            
00006916                            Deform_SBZ_2:				; XREF: Deform_SBZ
00006916 32C0                       		move.w	d0,(a1)+
00006918 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
0000691C 3038 F710                  		move.w	($FFFFF710).w,d0
00006920 4440                       		neg.w	d0
00006922 323C 0006                  		move.w	#6,d1
00006926                            
00006926                            Deform_SBZ_3:				; XREF: Deform_SBZ
00006926 32C0                       		move.w	d0,(a1)+
00006928 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
0000692C 3038 F708                  		move.w	($FFFFF708).w,d0
00006930 4440                       		neg.w	d0
00006932 323C 000A                  		move.w	#$A,d1
00006936                            
00006936                            Deform_SBZ_4:				; XREF: Deform_SBZ
00006936 32C0                       		move.w	d0,(a1)+
00006938 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000693C 45F8 A800                  		lea	($FFFFA800).w,a2
00006940 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006944 3400                       		move.w	d0,d2
00006946 0240 01F0                  		andi.w	#$1F0,d0
0000694A E648                       		lsr.w	#3,d0
0000694C 45F2 0000                  		lea	(a2,d0.w),a2
00006950 6000 FE2C                  		bra.w	Deform_All
00006954                            ; ===========================================================================
00006954                            
00006954                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
00006954 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006958 48C4                       		ext.l	d4
0000695A ED84                       		asl.l	#6,d4
0000695C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006960 48C5                       		ext.l	d5
00006962 EB85                       		asl.l	#5,d5
00006964 6100 0000                  		bsr.w	ScrollBlock1
00006968 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000696E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006972 323C 00DF                  		move.w	#$DF,d1	; 'ß'
00006976 3038 F700                  		move.w	($FFFFF700).w,d0
0000697A 4440                       		neg.w	d0
0000697C 4840                       		swap	d0
0000697E 3038 F708                  		move.w	($FFFFF708).w,d0
00006982 4440                       		neg.w	d0
00006984                            
00006984                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
00006984 22C0                       		move.l	d0,(a1)+
00006986 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000698A 4E75                       		rts	
0000698C                            ; End of function Deform_SBZ
0000698C                            
0000698C                            ; ---------------------------------------------------------------------------
0000698C                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000698C                            ; ---------------------------------------------------------------------------
0000698C                            
0000698C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000698C                            
0000698C                            
0000698C                            ScrollHoriz:				; XREF: DeformBgLayer
0000698C 3838 F700                  		move.w	($FFFFF700).w,d4
00006990 6100                       		bsr.s	ScrollHoriz2
00006992 3038 F700                  		move.w	($FFFFF700).w,d0
00006996 0240 0010                  		andi.w	#$10,d0
0000699A 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000699E B300                       		eor.b	d1,d0
000069A0 6600                       		bne.s	locret_65B0
000069A2 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069A8 3038 F700                  		move.w	($FFFFF700).w,d0
000069AC 9044                       		sub.w	d4,d0
000069AE 6A00                       		bpl.s	loc_65AA
000069B0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000069B6 4E75                       		rts	
000069B8                            ; ===========================================================================
000069B8                            
000069B8                            loc_65AA:
000069B8 08F8 0003 F754             		bset	#3,($FFFFF754).w
000069BE                            
000069BE                            locret_65B0:
000069BE 4E75                       		rts	
000069C0                            ; End of function ScrollHoriz
000069C0                            
000069C0                            
000069C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C0                            
000069C0                            
000069C0                            ScrollHoriz2:				; XREF: ScrollHoriz
000069C0 3038 D008                  		move.w	($FFFFD008).w,d0
000069C4 9078 F700                  		sub.w	($FFFFF700).w,d0
000069C8 0440 0090                  		subi.w	#$90,d0
000069CC 6500                       		bcs.s	loc_65F6
000069CE 0440 0010                  		subi.w	#$10,d0
000069D2 6400                       		bcc.s	loc_65CC
000069D4 4278 F73A                  		clr.w	($FFFFF73A).w
000069D8 4E75                       		rts	
000069DA                            ; ===========================================================================
000069DA                            
000069DA                            loc_65CC:
000069DA 0C40 0010                  		cmpi.w	#$10,d0
000069DE 6500                       		bcs.s	loc_65D6
000069E0 303C 0010                  		move.w	#$10,d0
000069E4                            
000069E4                            loc_65D6:
000069E4 D078 F700                  		add.w	($FFFFF700).w,d0
000069E8 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000069EC 6D00                       		blt.s	loc_65E4
000069EE 3038 F72A                  		move.w	($FFFFF72A).w,d0
000069F2                            
000069F2                            loc_65E4:
000069F2 3200                       		move.w	d0,d1
000069F4 9278 F700                  		sub.w	($FFFFF700).w,d1
000069F8 E141                       		asl.w	#8,d1
000069FA 31C0 F700                  		move.w	d0,($FFFFF700).w
000069FE 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A02 4E75                       		rts	
00006A04                            ; ===========================================================================
00006A04                            
00006A04                            loc_65F6:				; XREF: ScrollHoriz2
00006A04 D078 F700                  		add.w	($FFFFF700).w,d0
00006A08 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A0C 6EE4                       		bgt.s	loc_65E4
00006A0E 3038 F728                  		move.w	($FFFFF728).w,d0
00006A12 60DE                       		bra.s	loc_65E4
00006A14                            ; End of function ScrollHoriz2
00006A14                            
00006A14                            ; ===========================================================================
00006A14 4A40                       		tst.w	d0
00006A16 6A00                       		bpl.s	loc_6610
00006A18 303C FFFE                  		move.w	#-2,d0
00006A1C 60E6                       		bra.s	loc_65F6
00006A1E                            ; ===========================================================================
00006A1E                            
00006A1E                            loc_6610:
00006A1E 303C 0002                  		move.w	#2,d0
00006A22 60B6                       		bra.s	loc_65CC
00006A24                            
00006A24                            ; ---------------------------------------------------------------------------
00006A24                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A24                            ; ---------------------------------------------------------------------------
00006A24                            
00006A24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A24                            
00006A24                            
00006A24                            ScrollVertical:				; XREF: DeformBgLayer
00006A24 7200                       		moveq	#0,d1
00006A26 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A2A 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A2E 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A34 6700                       		beq.s	loc_662A
00006A36 5B40                       		subq.w	#5,d0
00006A38                            
00006A38                            loc_662A:
00006A38 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A3E 6700                       		beq.s	loc_664A
00006A40 0640 0020                  		addi.w	#$20,d0
00006A44 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A48 6500                       		bcs.s	loc_6696
00006A4A 0440 0040                  		subi.w	#$40,d0
00006A4E 6400                       		bcc.s	loc_6696
00006A50 4A38 F75C                  		tst.b	($FFFFF75C).w
00006A54 6600                       		bne.s	loc_66A8
00006A56 6000                       		bra.s	loc_6656
00006A58                            ; ===========================================================================
00006A58                            
00006A58                            loc_664A:
00006A58 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A5C 6600                       		bne.s	loc_665C
00006A5E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006A62 6600                       		bne.s	loc_66A8
00006A64                            
00006A64                            loc_6656:
00006A64 4278 F73C                  		clr.w	($FFFFF73C).w
00006A68 4E75                       		rts	
00006A6A                            ; ===========================================================================
00006A6A                            
00006A6A                            loc_665C:
00006A6A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006A70 6600                       		bne.s	loc_6684
00006A72 3238 D014                  		move.w	($FFFFD014).w,d1
00006A76 6A00                       		bpl.s	loc_666C
00006A78 4441                       		neg.w	d1
00006A7A                            
00006A7A                            loc_666C:
00006A7A 0C41 0800                  		cmpi.w	#$800,d1
00006A7E 6400                       		bcc.s	loc_6696
00006A80 323C 0600                  		move.w	#$600,d1
00006A84 0C40 0006                  		cmpi.w	#6,d0
00006A88 6E00                       		bgt.s	loc_66F6
00006A8A 0C40 FFFA                  		cmpi.w	#-6,d0
00006A8E 6D00                       		blt.s	loc_66C0
00006A90 6000                       		bra.s	loc_66AE
00006A92                            ; ===========================================================================
00006A92                            
00006A92                            loc_6684:
00006A92 323C 0200                  		move.w	#$200,d1
00006A96 0C40 0002                  		cmpi.w	#2,d0
00006A9A 6E00                       		bgt.s	loc_66F6
00006A9C 0C40 FFFE                  		cmpi.w	#-2,d0
00006AA0 6D00                       		blt.s	loc_66C0
00006AA2 6000                       		bra.s	loc_66AE
00006AA4                            ; ===========================================================================
00006AA4                            
00006AA4                            loc_6696:
00006AA4 323C 1000                  		move.w	#$1000,d1
00006AA8 0C40 0010                  		cmpi.w	#$10,d0
00006AAC 6E00                       		bgt.s	loc_66F6
00006AAE 0C40 FFF0                  		cmpi.w	#-$10,d0
00006AB2 6D00                       		blt.s	loc_66C0
00006AB4 6000                       		bra.s	loc_66AE
00006AB6                            ; ===========================================================================
00006AB6                            
00006AB6                            loc_66A8:
00006AB6 7000                       		moveq	#0,d0
00006AB8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006ABC                            
00006ABC                            loc_66AE:
00006ABC 7200                       		moveq	#0,d1
00006ABE 3200                       		move.w	d0,d1
00006AC0 D278 F704                  		add.w	($FFFFF704).w,d1
00006AC4 4A40                       		tst.w	d0
00006AC6 6A00 0000                  		bpl.w	loc_6700
00006ACA 6000 0000                  		bra.w	loc_66CC
00006ACE                            ; ===========================================================================
00006ACE                            
00006ACE                            loc_66C0:
00006ACE 4441                       		neg.w	d1
00006AD0 48C1                       		ext.l	d1
00006AD2 E181                       		asl.l	#8,d1
00006AD4 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006AD8 4841                       		swap	d1
00006ADA                            
00006ADA                            loc_66CC:
00006ADA B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006ADE 6E00                       		bgt.s	loc_6724
00006AE0 0C41 FF00                  		cmpi.w	#-$100,d1
00006AE4 6E00                       		bgt.s	loc_66F0
00006AE6 0241 07FF                  		andi.w	#$7FF,d1
00006AEA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006AF0 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006AF6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006AFC 6000                       		bra.s	loc_6724
00006AFE                            ; ===========================================================================
00006AFE                            
00006AFE                            loc_66F0:
00006AFE 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B02 6000                       		bra.s	loc_6724
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66F6:
00006B04 48C1                       		ext.l	d1
00006B06 E181                       		asl.l	#8,d1
00006B08 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B0C 4841                       		swap	d1
00006B0E                            
00006B0E                            loc_6700:
00006B0E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B12 6D00                       		blt.s	loc_6724
00006B14 0441 0800                  		subi.w	#$800,d1
00006B18 6500                       		bcs.s	loc_6720
00006B1A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B20 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B26 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B2C 6000                       		bra.s	loc_6724
00006B2E                            ; ===========================================================================
00006B2E                            
00006B2E                            loc_6720:
00006B2E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B32                            
00006B32                            loc_6724:
00006B32 3838 F704                  		move.w	($FFFFF704).w,d4
00006B36 4841                       		swap	d1
00006B38 2601                       		move.l	d1,d3
00006B3A 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B3E E09B                       		ror.l	#8,d3
00006B40 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B44 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B48 3038 F704                  		move.w	($FFFFF704).w,d0
00006B4C 0240 0010                  		andi.w	#$10,d0
00006B50 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006B54 B300                       		eor.b	d1,d0
00006B56 6600                       		bne.s	locret_6766
00006B58 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006B5E 3038 F704                  		move.w	($FFFFF704).w,d0
00006B62 9044                       		sub.w	d4,d0
00006B64 6A00                       		bpl.s	loc_6760
00006B66 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006B6C 4E75                       		rts	
00006B6E                            ; ===========================================================================
00006B6E                            
00006B6E                            loc_6760:
00006B6E 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006B74                            
00006B74                            locret_6766:
00006B74 4E75                       		rts	
00006B76                            ; End of function ScrollVertical
00006B76                            
00006B76                            
00006B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B76                            
00006B76                            
00006B76                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
00006B76 2438 F708                  		move.l	($FFFFF708).w,d2
00006B7A 2002                       		move.l	d2,d0
00006B7C D084                       		add.l	d4,d0
00006B7E 21C0 F708                  		move.l	d0,($FFFFF708).w
00006B82 2200                       		move.l	d0,d1
00006B84 4841                       		swap	d1
00006B86 0241 0010                  		andi.w	#$10,d1
00006B8A 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006B8E B701                       		eor.b	d3,d1
00006B90 6600                       		bne.s	ScrollBlock1_2
00006B92 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006B98 9082                       		sub.l	d2,d0
00006B9A 6A00                       		bpl.s	ScrollBlock1_1
00006B9C 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BA2 6000                       		bra.s	ScrollBlock1_2
00006BA4                            ; ===========================================================================
00006BA4                            
00006BA4                            ScrollBlock1_1:				; XREF: ScrollBlock1
00006BA4 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BAA                            
00006BAA                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
00006BAA 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BAE 2003                       		move.l	d3,d0
00006BB0 D085                       		add.l	d5,d0
00006BB2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006BB6 2200                       		move.l	d0,d1
00006BB8 4841                       		swap	d1
00006BBA 0241 0010                  		andi.w	#$10,d1
00006BBE 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006BC2 B501                       		eor.b	d2,d1
00006BC4 6600                       		bne.s	ScrollBlock1_End
00006BC6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006BCC 9083                       		sub.l	d3,d0
00006BCE 6A00                       		bpl.s	ScrollBlock1_3
00006BD0 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006BD6 4E75                       		rts	
00006BD8                            ; ===========================================================================
00006BD8                            
00006BD8                            ScrollBlock1_3:				; XREF: ScrollBlock1
00006BD8 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006BDE                            
00006BDE                            ScrollBlock1_End:			; XREF: ScrollBlock1
00006BDE 4E75                       		rts	
00006BE0                            ; End of function ScrollBlock1
00006BE0                            
00006BE0                            
00006BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE0                            
00006BE0                            
00006BE0                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
00006BE0 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BE4 2003                       		move.l	d3,d0
00006BE6 D085                       		add.l	d5,d0
00006BE8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006BEC 2200                       		move.l	d0,d1
00006BEE 4841                       		swap	d1
00006BF0 0241 0010                  		andi.w	#$10,d1
00006BF4 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006BF8 B501                       		eor.b	d2,d1
00006BFA 6600                       		bne.s	ScrollBlock2_End
00006BFC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C02 9083                       		sub.l	d3,d0
00006C04 6A00                       		bpl.s	ScrollBlock2_1
00006C06 08F8 0004 F756             		bset	#4,($FFFFF756).w
00006C0C 4E75                       		rts	
00006C0E                            ; ===========================================================================
00006C0E                            
00006C0E                            ScrollBlock2_1:				; XREF: ScrollBlock2
00006C0E 08F8 0005 F756             		bset	#5,($FFFFF756).w
00006C14                            
00006C14                            ScrollBlock2_End:			; XREF: ScrollBlock2
00006C14 4E75                       		rts	
00006C16                            ; End of function ScrollBlock2
00006C16                            
00006C16                            
00006C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C16                            
00006C16                            
00006C16                            ScrollBlock3:				; XREF: Deform_MZ
00006C16 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C1A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C1E 3200                       		move.w	d0,d1
00006C20 0241 0010                  		andi.w	#$10,d1
00006C24 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C28 B501                       		eor.b	d2,d1
00006C2A 6600                       		bne.s	ScrollBlock3_End
00006C2C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C32 9043                       		sub.w	d3,d0
00006C34 6A00                       		bpl.s	ScrollBlock3_1
00006C36 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C3C 4E75                       		rts	
00006C3E                            ; ===========================================================================
00006C3E                            
00006C3E                            ScrollBlock3_1:				; XREF: ScrollBlock3
00006C3E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C44                            
00006C44                            ScrollBlock3_End:			; XREF: ScrollBlock3
00006C44 4E75                       		rts	
00006C46                            ; End of function ScrollBlock3
00006C46                            
00006C46                            
00006C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C46                            
00006C46                            
00006C46                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
00006C46 2438 F708                  		move.l	($FFFFF708).w,d2
00006C4A 2002                       		move.l	d2,d0
00006C4C D084                       		add.l	d4,d0
00006C4E 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C52 2200                       		move.l	d0,d1
00006C54 4841                       		swap	d1
00006C56 0241 0010                  		andi.w	#$10,d1
00006C5A 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006C5E B701                       		eor.b	d3,d1
00006C60 6600                       		bne.s	ScrollBlock4_End
00006C62 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006C68 9082                       		sub.l	d2,d0
00006C6A 6A00                       		bpl.s	ScrollBlock4_1
00006C6C 0DF8 F756                  		bset	d6,($FFFFF756).w
00006C70 6000                       		bra.s	ScrollBlock4_End
00006C72                            ; ===========================================================================
00006C72                            
00006C72                            ScrollBlock4_1:				; XREF: ScrollBlock4
00006C72 5206                       		addq.b	#1,d6
00006C74 0DF8 F756                  		bset	d6,($FFFFF756).w
00006C78                            
00006C78                            ScrollBlock4_End:			; XREF: ScrollBlock4
00006C78 4E75                       		rts	
00006C7A                            ; End of function ScrollBlock4
00006C7A                            
00006C7A                            
00006C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C7A                            
00006C7A                            
00006C7A                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
00006C7A 2438 F710                  		move.l	($FFFFF710).w,d2
00006C7E 2002                       		move.l	d2,d0
00006C80 D084                       		add.l	d4,d0
00006C82 21C0 F710                  		move.l	d0,($FFFFF710).w
00006C86 2200                       		move.l	d0,d1
00006C88 4841                       		swap	d1
00006C8A 0241 0010                  		andi.w	#$10,d1
00006C8E 1638 F74E                  		move.b	($FFFFF74E).w,d3
00006C92 B701                       		eor.b	d3,d1
00006C94 6600                       		bne.s	ScrollBlock5_End
00006C96 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006C9C 9082                       		sub.l	d2,d0
00006C9E 6A00                       		bpl.s	ScrollBlock5_1
00006CA0 0DF8 F758                  		bset	d6,($FFFFF758).w
00006CA4 6000                       		bra.s	ScrollBlock5_End
00006CA6                            ; ===========================================================================
00006CA6                            
00006CA6                            ScrollBlock5_1:				; XREF: ScrollBlock5
00006CA6 5206                       		addq.b	#1,d6
00006CA8 0DF8 F758                  		bset	d6,($FFFFF758).w
00006CAC                            
00006CAC                            ScrollBlock5_End:			; XREF: ScrollBlock5
00006CAC 4E75                       		rts	
00006CAE                            ; End of function ScrollBlock5
00006CAE                            
00006CAE                            
00006CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CAE                            
00006CAE                            
00006CAE                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00006CAE 2438 F718                  		move.l	($FFFFF718).w,d2
00006CB2 2002                       		move.l	d2,d0
00006CB4 D084                       		add.l	d4,d0
00006CB6 21C0 F718                  		move.l	d0,($FFFFF718).w
00006CBA 2200                       		move.l	d0,d1
00006CBC 4841                       		swap	d1
00006CBE 0241 0010                  		andi.w	#$10,d1
00006CC2 1638 F750                  		move.b	($FFFFF750).w,d3
00006CC6 B701                       		eor.b	d3,d1
00006CC8 6600                       		bne.s	ScrollBlock6_End
00006CCA 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
00006CD0 9082                       		sub.l	d2,d0
00006CD2 6A00                       		bpl.s	ScrollBlock6_1
00006CD4 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00006CD8 6000                       		bra.s	ScrollBlock6_End
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            ScrollBlock6_1:				; XREF: ScrollBlock6
00006CDA 5206                       		addq.b	#1,d6
00006CDC 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00006CE0                            
00006CE0                            ScrollBlock6_End:			; XREF: ScrollBlock6
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock6
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:		
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6D0A
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_6DA6
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6D0A
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_6DA6
00006D3A 45F8 FF36                  		lea	($FFFFFF36).w,a2
00006D3E 47F8 FF28                  		lea	($FFFFFF28).w,a3
00006D42 6100 0000                  		bsr.w	sub_6EA4
00006D46 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D4A 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D4E 49F8 A400                  		lea	($FFFFA400).w,a4
00006D52 343C 4000                  		move.w	#$4000,d2
00006D56 4A38 F745                  		tst.b	($FFFFF745).w
00006D5A 6700                       		beq.s	Draw_FG
00006D5C 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
00006D62 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
00006D64 7C0F                       		moveq	#$F,d6				;
00006D66                            
00006D66                            Draw_All:
00006D66 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
00006D6A 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
00006D6C 3204                       		move.w	d4,d1
00006D6E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006D72 3801                       		move.w	d1,d4
00006D74 7AF0                       		moveq	#-$10,d5
00006D76 6100 0000                  		bsr.w	DrawTiles_LR
00006D7A 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006D7E 0644 0010                  		addi.w	#$10,d4
00006D82 51CE FFE2                  		dbf	d6,Draw_All
00006D86 4E75                       		rts	
00006D88                            
00006D88                            Draw_FG:
00006D88 4A12                       		tst.b	(a2)
00006D8A 6700                       		beq.s	locret_6D08
00006D8C 0892 0000                  		bclr	#0,(a2)
00006D90 6700                       		beq.s	loc_6CBE
00006D92 78F0                       		moveq	#-$10,d4
00006D94 7AF0                       		moveq	#-$10,d5
00006D96 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 7AF0                       		moveq	#-$10,d5
00006D9E 6100 0000                  		bsr.w	DrawTiles_LR
00006DA2                            
00006DA2                            loc_6CBE:
00006DA2 0892 0001                  		bclr	#1,(a2)
00006DA6 6700                       		beq.s	loc_6CD8
00006DA8 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006DAC 7AF0                       		moveq	#-$10,d5
00006DAE 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006DB2 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006DB6 7AF0                       		moveq	#-$10,d5
00006DB8 6100 0000                  		bsr.w	DrawTiles_LR
00006DBC                            
00006DBC                            loc_6CD8:
00006DBC 0892 0002                  		bclr	#2,(a2)
00006DC0 6700                       		beq.s	loc_6CEE
00006DC2 78F0                       		moveq	#-$10,d4
00006DC4 7AF0                       		moveq	#-$10,d5
00006DC6 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006DCA 78F0                       		moveq	#-$10,d4
00006DCC 7AF0                       		moveq	#-$10,d5
00006DCE 6100 0000                  		bsr.w	DrawTiles_TB
00006DD2                            
00006DD2                            loc_6CEE:
00006DD2 0892 0003                  		bclr	#3,(a2)
00006DD6 6700                       		beq.s	locret_6D08
00006DD8 78F0                       		moveq	#-$10,d4
00006DDA 3A3C 0140                  		move.w	#$140,d5
00006DDE 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006DE2 78F0                       		moveq	#-$10,d4
00006DE4 3A3C 0140                  		move.w	#$140,d5
00006DE8 6100 0000                  		bsr.w	DrawTiles_TB
00006DEC                            
00006DEC                            locret_6D08:
00006DEC 4E75                       		rts	
00006DEE                            
00006DEE                            ; End of function LoadTilesAsYouMove
00006DEE                            
00006DEE                            
00006DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEE                            
00006DEE                            
00006DEE                            sub_6D0A:
00006DEE 4A12                       		tst.b	(a2)
00006DF0 6700 0000                  		beq.w	locret_6DA4
00006DF4 0892 0000                  		bclr	#0,(a2)
00006DF8 6700                       		beq.s	loc_6D26
00006DFA 78F0                       		moveq	#-$10,d4
00006DFC 7AF0                       		moveq	#-$10,d5
00006DFE 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006E02 78F0                       		moveq	#-$10,d4
00006E04 7AF0                       		moveq	#-$10,d5
00006E06 6100 0000                  		bsr.w	DrawTiles_LR
00006E0A                            
00006E0A                            loc_6D26:
00006E0A 0892 0001                  		bclr	#1,(a2)
00006E0E 6700                       		beq.s	loc_6D40
00006E10 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006E14 7AF0                       		moveq	#-$10,d5
00006E16 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006E1A 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006E1E 7AF0                       		moveq	#-$10,d5
00006E20 6100 0000                  		bsr.w	DrawTiles_LR
00006E24                            
00006E24                            loc_6D40:
00006E24 0892 0002                  		bclr	#2,(a2)
00006E28 6700                       		beq.s	loc_6D56
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 7AF0                       		moveq	#-$10,d5
00006E2E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006E32 78F0                       		moveq	#-$10,d4
00006E34 7AF0                       		moveq	#-$10,d5
00006E36 6100 0000                  		bsr.w	DrawTiles_TB
00006E3A                            
00006E3A                            loc_6D56:
00006E3A 0892 0003                  		bclr	#3,(a2)
00006E3E 6700                       		beq.s	loc_6D70
00006E40 78F0                       		moveq	#-$10,d4
00006E42 3A3C 0140                  		move.w	#$140,d5
00006E46 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006E4A 78F0                       		moveq	#-$10,d4
00006E4C 3A3C 0140                  		move.w	#$140,d5
00006E50 6100 0000                  		bsr.w	DrawTiles_TB
00006E54                            
00006E54                            loc_6D70:
00006E54 0892 0004                  		bclr	#4,(a2)
00006E58 6700                       		beq.s	loc_6D88
00006E5A 78F0                       		moveq	#-$10,d4
00006E5C 7A00                       		moveq	#0,d5
00006E5E 6100 0000                  		bsr.w	loc_7176
00006E62 78F0                       		moveq	#-$10,d4
00006E64 7A00                       		moveq	#0,d5
00006E66 7C1F                       		moveq	#$1F,d6
00006E68 6100 0000                  		bsr.w	DrawTiles_LR3
00006E6C                            
00006E6C                            loc_6D88:
00006E6C 0892 0005                  		bclr	#5,(a2)
00006E70 6700                       		beq.s	locret_6DA4
00006E72 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006E76 7A00                       		moveq	#0,d5
00006E78 6100 0000                  		bsr.w	loc_7176
00006E7C 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006E80 7A00                       		moveq	#0,d5
00006E82 7C1F                       		moveq	#$1F,d6
00006E84 6100 0000                  		bsr.w	DrawTiles_LR3
00006E88                            
00006E88                            locret_6DA4:
00006E88 4E75                       		rts	
00006E8A                            ; End of function sub_6D0A
00006E8A                            
00006E8A                            
00006E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E8A                            
00006E8A                            
00006E8A                            sub_6DA6:
00006E8A 4A12                       		tst.b	(a2)
00006E8C 6700 0000                  		beq.w	locret_6DF2
00006E90 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
00006E96 6700 0000                  		beq.w	loc_6E16
00006E9A 0892 0000                  		bclr	#0,(a2)
00006E9E 6700                       		beq.s	loc_6DD2
00006EA0 383C 0070                  		move.w	#$70,d4	; 'p'
00006EA4 7AF0                       		moveq	#-$10,d5
00006EA6 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006EAA 383C 0070                  		move.w	#$70,d4	; 'p'
00006EAE 7AF0                       		moveq	#-$10,d5
00006EB0 7C02                       		moveq	#2,d6
00006EB2 6100 0000                  		bsr.w	DrawTiles_TB2
00006EB6                            
00006EB6                            loc_6DD2:
00006EB6 0892 0001                  		bclr	#1,(a2)
00006EBA 6700                       		beq.s	locret_6DF2
00006EBC 383C 0070                  		move.w	#$70,d4	; 'p'
00006EC0 3A3C 0140                  		move.w	#$140,d5
00006EC4 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006EC8 383C 0070                  		move.w	#$70,d4	; 'p'
00006ECC 3A3C 0140                  		move.w	#$140,d5
00006ED0 7C02                       		moveq	#2,d6
00006ED2 6100 0000                  		bsr.w	DrawTiles_TB2
00006ED6                            
00006ED6                            locret_6DF2:
00006ED6 4E75                       		rts	
00006ED8                            ; ===========================================================================
00006ED8 00                         unk_6DF4:	dc.b   0 ;	 
00006ED9 00                         unk_6DF5:	dc.b   0 ;	 
00006EDA 00                         		dc.b   0 ;  
00006EDB 00                         		dc.b   0 ;  
00006EDC 00                         		dc.b   0 ;  
00006EDD 06                         		dc.b   6 ;  
00006EDE 06                         		dc.b   6 ;  
00006EDF 06                         		dc.b   6 ;  
00006EE0 06                         		dc.b   6 ;  
00006EE1 06                         		dc.b   6 ;  
00006EE2 06                         		dc.b   6 ;  
00006EE3 06                         		dc.b   6 ;  
00006EE4 06                         		dc.b   6 ;  
00006EE5 06                         		dc.b   6 ;  
00006EE6 06                         		dc.b   6 ;  
00006EE7 04                         		dc.b   4 ;  
00006EE8 04                         		dc.b   4 ;  
00006EE9 04                         		dc.b   4 ;  
00006EEA 04                         		dc.b   4 ;  
00006EEB 04                         		dc.b   4 ;  
00006EEC 04                         		dc.b   4 ;  
00006EED 04                         		dc.b   4 ;  
00006EEE 02                         		dc.b   2 ;  
00006EEF 02                         		dc.b   2 ;  
00006EF0 02                         		dc.b   2 ;  
00006EF1 02                         		dc.b   2 ;  
00006EF2 02                         		dc.b   2 ;  
00006EF3 02                         		dc.b   2 ;  
00006EF4 02                         		dc.b   2 ;  
00006EF5 02                         		dc.b   2 ;  
00006EF6 02                         		dc.b   2 ;  
00006EF7 02                         		dc.b   2 ;  
00006EF8 02                         		dc.b   2 ;  
00006EF9 00                         		dc.b   0 ;  
00006EFA                            ; ===========================================================================
00006EFA                            
00006EFA                            loc_6E16:
00006EFA 78F0                       		moveq	#-$10,d4
00006EFC 0892 0000                  		bclr	#0,(a2)
00006F00 6600                       		bne.s	loc_6E28
00006F02 0892 0001                  		bclr	#1,(a2)
00006F06 6700                       		beq.s	loc_6E72
00006F08 383C 00E0                  		move.w	#$E0,d4	; 'à'
00006F0C                            
00006F0C                            loc_6E28:
00006F0C 41F9 0000 6ED9             		lea	(unk_6DF5).l,a0
00006F12 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006F16 D044                       		add.w	d4,d0
00006F18 0240 01F0                  		andi.w	#$1F0,d0
00006F1C E848                       		lsr.w	#4,d0
00006F1E 1030 0000                  		move.b	(a0,d0.w),d0
00006F22 47F9 0000 0000             		lea	(unk_6FE4).l,a3
00006F28 3673 0000                  		movea.w	(a3,d0.w),a3
00006F2C 6700                       		beq.s	loc_6E5E
00006F2E 7AF0                       		moveq	#-$10,d5
00006F30 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F34 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006F38 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F3C 6100 0000                  		bsr.w	DrawTiles_LR
00006F40 6000                       		bra.s	loc_6E72
00006F42                            ; ===========================================================================
00006F42                            
00006F42                            loc_6E5E:
00006F42 7A00                       		moveq	#0,d5
00006F44 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F48 6100 0000                  		bsr.w	loc_7176
00006F4C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F50 7C1F                       		moveq	#$1F,d6
00006F52 6100 0000                  		bsr.w	DrawTiles_LR3
00006F56                            
00006F56                            loc_6E72:
00006F56 4A12                       		tst.b	(a2)
00006F58 6600                       		bne.s	loc_6E78
00006F5A 4E75                       		rts	
00006F5C                            ; ===========================================================================
00006F5C                            
00006F5C                            loc_6E78:
00006F5C 78F0                       		moveq	#-$10,d4
00006F5E 7AF0                       		moveq	#-$10,d5
00006F60 1012                       		move.b	(a2),d0
00006F62 0200 00A8                  		andi.b	#-$58,d0
00006F66 6700                       		beq.s	loc_6E8C
00006F68 E208                       		lsr.b	#1,d0
00006F6A 1480                       		move.b	d0,(a2)
00006F6C 3A3C 0140                  		move.w	#$140,d5
00006F70                            
00006F70                            loc_6E8C:
00006F70 41F9 0000 6ED8             		lea	(unk_6DF4).l,a0
00006F76 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006F7A 0240 01F0                  		andi.w	#$1F0,d0
00006F7E E848                       		lsr.w	#4,d0
00006F80 41F0 0000                  		lea	(a0,d0.w),a0
00006F84 6000 0000                  		bra.w	loc_6FEC
00006F88                            ; End of function sub_6DA6
00006F88                            
00006F88                            
00006F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F88                            
00006F88                            
00006F88                            sub_6EA4:
00006F88 4A12                       		tst.b	(a2)
00006F8A 6700 0000                  		beq.w	locret_6EF0
00006F8E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00006F94 6700 0000                  		beq.w	loc_6F54
00006F98 0892 0000                  		bclr	#0,(a2)
00006F9C 6700                       		beq.s	loc_6ED0_2
00006F9E 383C 0040                  		move.w	#$40,d4	; '@'
00006FA2 7AF0                       		moveq	#-$10,d5
00006FA4 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006FA8 383C 0040                  		move.w	#$40,d4	; '@'
00006FAC 7AF0                       		moveq	#-$10,d5
00006FAE 7C02                       		moveq	#2,d6
00006FB0 6100 0000                  		bsr.w	DrawTiles_TB2
00006FB4                            
00006FB4                            loc_6ED0_2:
00006FB4 0892 0001                  		bclr	#1,(a2)
00006FB8 6700                       		beq.s	locret_6EF0
00006FBA 383C 0040                  		move.w	#$40,d4	; '@'
00006FBE 3A3C 0140                  		move.w	#$140,d5
00006FC2 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006FC6 383C 0040                  		move.w	#$40,d4	; '@'
00006FCA 3A3C 0140                  		move.w	#$140,d5
00006FCE 7C02                       		moveq	#2,d6
00006FD0 6100 0000                  		bsr.w	DrawTiles_TB2
00006FD4                            
00006FD4                            locret_6EF0:
00006FD4 4E75                       		rts	
00006FD6                            ; ===========================================================================
00006FD6 00                         unk_6EF2:	dc.b   0 ;	 
00006FD7 00                         unk_6EF3:	dc.b   0 ;	 
00006FD8 00                         		dc.b   0 ;  
00006FD9 00                         		dc.b   0 ;  
00006FDA 00                         		dc.b   0 ;  
00006FDB 00                         		dc.b   0 ;  
00006FDC 06                         		dc.b   6 ;  
00006FDD 06                         		dc.b   6 ;  
00006FDE 04                         		dc.b   4 ;  
00006FDF 04                         		dc.b   4 ;  
00006FE0 04                         		dc.b   4 ;  
00006FE1 04                         		dc.b   4 ;  
00006FE2 04                         		dc.b   4 ;  
00006FE3 04                         		dc.b   4 ;  
00006FE4 04                         		dc.b   4 ;  
00006FE5 04                         		dc.b   4 ;  
00006FE6 04                         		dc.b   4 ;  
00006FE7 02                         		dc.b   2 ;  
00006FE8 02                         		dc.b   2 ;  
00006FE9 02                         		dc.b   2 ;  
00006FEA 02                         		dc.b   2 ;  
00006FEB 02                         		dc.b   2 ;  
00006FEC 02                         		dc.b   2 ;  
00006FED 02                         		dc.b   2 ;  
00006FEE 02                         		dc.b   2 ;  
00006FEF 02                         		dc.b   2 ;  
00006FF0 02                         		dc.b   2 ;  
00006FF1 02                         		dc.b   2 ;  
00006FF2 02                         		dc.b   2 ;  
00006FF3 02                         		dc.b   2 ;  
00006FF4 02                         		dc.b   2 ;  
00006FF5 02                         		dc.b   2 ;  
00006FF6 02                         		dc.b   2 ;  
00006FF7 02                         		dc.b   2 ;  
00006FF8 02                         		dc.b   2 ;  
00006FF9 02                         		dc.b   2 ;  
00006FFA 02                         		dc.b   2 ;  
00006FFB 02                         		dc.b   2 ;  
00006FFC 02                         		dc.b   2 ;  
00006FFD 02                         		dc.b   2 ;  
00006FFE 02                         		dc.b   2 ;  
00006FFF 02                         		dc.b   2 ;  
00007000 02                         		dc.b   2 ;  
00007001 02                         		dc.b   2 ;  
00007002 02                         		dc.b   2 ;  
00007003 02                         		dc.b   2 ;  
00007004 02                         		dc.b   2 ;  
00007005 02                         		dc.b   2 ;  
00007006 02                         		dc.b   2 ;  
00007007 02                         		dc.b   2 ;  
00007008 02                         		dc.b   2 ;  
00007009 02                         		dc.b   2 ;  
0000700A 02                         		dc.b   2 ;  
0000700B 02                         		dc.b   2 ;  
0000700C 02                         		dc.b   2 ;  
0000700D 02                         		dc.b   2 ;  
0000700E 02                         		dc.b   2 ;  
0000700F 02                         		dc.b   2 ;  
00007010 02                         		dc.b   2 ;  
00007011 02                         		dc.b   2 ;  
00007012 02                         		dc.b   2 ;  
00007013 02                         		dc.b   2 ;  
00007014 02                         		dc.b   2 ;  
00007015 02                         		dc.b   2 ;  
00007016 02                         		dc.b   2 ;  
00007017 02                         		dc.b   2 ;  
00007018 02                         		dc.b   2 ;  
00007019 02                         		dc.b   2 ;  
0000701A 02                         		dc.b   2 ;  
0000701B 02                         		dc.b   2 ;  
0000701C 02                         		dc.b   2 ;  
0000701D 02                         		dc.b   2 ;  
0000701E 02                         		dc.b   2 ;  
0000701F 02                         		dc.b   2 ;  
00007020 02                         		dc.b   2 ;  
00007021 02                         		dc.b   2 ;  
00007022 02                         		dc.b   2 ;  
00007023 02                         		dc.b   2 ;  
00007024 02                         		dc.b   2 ;  
00007025 02                         		dc.b   2 ;  
00007026 02                         		dc.b   2 ;  
00007027 02                         		dc.b   2 ;  
00007028 02                         		dc.b   2 ;  
00007029 02                         		dc.b   2 ;  
0000702A 02                         		dc.b   2 ;  
0000702B 02                         		dc.b   2 ;  
0000702C 02                         		dc.b   2 ;  
0000702D 02                         		dc.b   2 ;  
0000702E 02                         		dc.b   2 ;  
0000702F 02                         		dc.b   2 ;  
00007030 02                         		dc.b   2 ;  
00007031 02                         		dc.b   2 ;  
00007032 02                         		dc.b   2 ;  
00007033 02                         		dc.b   2 ;  
00007034 02                         		dc.b   2 ;  
00007035 02                         		dc.b   2 ;  
00007036 02                         		dc.b   2 ;  
00007037 00                         		dc.b   0 ;  
00007038                            ; ===========================================================================
00007038                            
00007038                            loc_6F54:
00007038 78F0                       		moveq	#-$10,d4
0000703A 0892 0000                  		bclr	#0,(a2)
0000703E 6600                       		bne.s	loc_6F66
00007040 0892 0001                  		bclr	#1,(a2)
00007044 6700                       		beq.s	loc_6FAE
00007046 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000704A                            
0000704A                            loc_6F66:
0000704A 41F9 0000 6FD7             		lea	(unk_6EF3).l,a0
00007050 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007054 0440 0200                  		subi.w	#$200,d0
00007058 D044                       		add.w	d4,d0
0000705A 0240 07F0                  		andi.w	#$7F0,d0
0000705E E848                       		lsr.w	#4,d0
00007060 1030 0000                  		move.b	(a0,d0.w),d0
00007064 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
00007068 6700                       		beq.s	loc_6F9A
0000706A 7AF0                       		moveq	#-$10,d5
0000706C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007070 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007074 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007078 6100 0000                  		bsr.w	DrawTiles_LR
0000707C 6000                       		bra.s	loc_6FAE
0000707E                            ; ===========================================================================
0000707E                            
0000707E                            loc_6F9A:
0000707E 7A00                       		moveq	#0,d5
00007080 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007084 6100 0000                  		bsr.w	loc_7176
00007088 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000708C 7C1F                       		moveq	#$1F,d6
0000708E 6100 0000                  		bsr.w	DrawTiles_LR3
00007092                            
00007092                            loc_6FAE:
00007092 4A12                       		tst.b	(a2)
00007094 6600                       		bne.s	loc_6FB4
00007096 4E75                       		rts	
00007098                            ; ===========================================================================
00007098                            
00007098                            loc_6FB4:
00007098 78F0                       		moveq	#-$10,d4
0000709A 7AF0                       		moveq	#-$10,d5
0000709C 1012                       		move.b	(a2),d0
0000709E 0200 00A8                  		andi.b	#-$58,d0
000070A2 6700                       		beq.s	loc_6FC8
000070A4 E208                       		lsr.b	#1,d0
000070A6 1480                       		move.b	d0,(a2)
000070A8 3A3C 0140                  		move.w	#$140,d5
000070AC                            
000070AC                            loc_6FC8:
000070AC 41F9 0000 6FD6             		lea	(unk_6EF2).l,a0
000070B2 3038 F70C                  		move.w	($FFFFF70C).w,d0
000070B6 0440 0200                  		subi.w	#$200,d0
000070BA 0240 07F0                  		andi.w	#$7F0,d0
000070BE E848                       		lsr.w	#4,d0
000070C0 41F0 0000                  		lea	(a0,d0.w),a0
000070C4 6000 0000                  		bra.w	loc_6FEC
000070C8                            ; ===========================================================================
000070C8 FF                         unk_6FE4:	dc.b $FF ;  
000070C9 18                         		dc.b $18 ;  
000070CA FF                         		dc.b $FF ;  
000070CB 18                         		dc.b $18 ;  
000070CC FF                         		dc.b $FF ;  
000070CD 20                         		dc.b $20 ;  
000070CE FF                         		dc.b $FF ;  
000070CF 28                         		dc.b $28 ; (
000070D0                            ; ===========================================================================
000070D0                            
000070D0                            loc_6FEC:
000070D0 7C0F                       		moveq	#$F,d6
000070D2 2E3C 0080 0000             		move.l	#$800000,d7
000070D8                            
000070D8                            loc_6FF4:
000070D8 7000                       		moveq	#0,d0
000070DA 1018                       		move.b	(a0)+,d0
000070DC 0112                       		btst	d0,(a2)
000070DE 6700                       		beq.s	loc_701C
000070E0 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
000070E4 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
000070E8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070EC 6100 0000                  		bsr.w	sub_712A
000070F0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070F4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000070F8 6100 0000                  		bsr.w	sub_70AC
000070FC 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
00007100                            
00007100                            loc_701C:
00007100 0644 0010                  		addi.w	#$10,d4
00007104 51CE FFD2                  		dbf	d6,loc_6FF4
00007108 4212                       		clr.b	(a2)
0000710A 4E75                       		rts	
0000710C                            ; End of function sub_6EA4
0000710C                            
0000710C                            
0000710C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710C                            
0000710C                            
0000710C                            DrawTiles_LR:
0000710C 7C15                       		moveq	#$15,d6
0000710E                            ; End of function DrawTiles_LR
0000710E                            
0000710E                            
0000710E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000710E                            
0000710E                            
0000710E                            DrawTiles_LR2:
0000710E 2E3C 0080 0000             		move.l	#$800000,d7
00007114 2200                       		move.l	d0,d1
00007116                            
00007116                            loc_7032:
00007116 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000711A 6100 0000                  		bsr.w	sub_712A
0000711E 2001                       		move.l	d1,d0
00007120 6100 0000                  		bsr.w	sub_70AC
00007124 5801                       		addq.b	#4,d1
00007126 0201 007F                  		andi.b	#$7F,d1	; '?'
0000712A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000712E 0645 0010                  		addi.w	#$10,d5
00007132 51CE FFE2                  		dbf	d6,loc_7032
00007136 4E75                       		rts	
00007138                            ; End of function DrawTiles_LR2
00007138                            
00007138                            
00007138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007138                            
00007138                            
00007138                            DrawTiles_LR3:
00007138 2E3C 0080 0000             		move.l	#$800000,d7
0000713E 2200                       		move.l	d0,d1
00007140                            
00007140                            loc_705C:
00007140 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007144 6100 0000                  		bsr.w	loc_712C
00007148 2001                       		move.l	d1,d0
0000714A 6100 0000                  		bsr.w	sub_70AC
0000714E 5801                       		addq.b	#4,d1
00007150 0201 007F                  		andi.b	#$7F,d1	; '?'
00007154 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007158 0645 0010                  		addi.w	#$10,d5
0000715C 51CE FFE2                  		dbf	d6,loc_705C
00007160 4E75                       		rts	
00007162                            ; End of function DrawTiles_LR3
00007162                            
00007162                            
00007162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007162                            
00007162                            
00007162                            DrawTiles_TB:
00007162 7C0F                       		moveq	#$F,d6
00007164                            ; End of function DrawTiles_TB
00007164                            
00007164                            
00007164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007164                            
00007164                            
00007164                            DrawTiles_TB2:
00007164 2E3C 0080 0000             		move.l	#$800000,d7
0000716A 2200                       		move.l	d0,d1
0000716C                            
0000716C                            loc_7088:
0000716C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007170 6100 0000                  		bsr.w	sub_712A
00007174 2001                       		move.l	d1,d0
00007176 6100 0000                  		bsr.w	sub_70AC
0000717A 0641 0100                  		addi.w	#$100,d1
0000717E 0241 0FFF                  		andi.w	#$FFF,d1
00007182 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007186 0644 0010                  		addi.w	#$10,d4
0000718A 51CE FFE0                  		dbf	d6,loc_7088
0000718E 4E75                       		rts	
00007190                            ; End of function DrawTiles_TB2
00007190                            
00007190                            
00007190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007190                            
00007190                            
00007190                            sub_70AC:
00007190 8042                       		or.w	d2,d0
00007192 4840                       		swap	d0
00007194 0810 0004                  		btst	#4,(a0)
00007198 6600                       		bne.s	loc_70E8
0000719A 0810 0003                  		btst	#3,(a0)
0000719E 6600                       		bne.s	loc_70C8
000071A0 2A80                       		move.l	d0,(a5)
000071A2 2C99                       		move.l	(a1)+,(a6)
000071A4 D087                       		add.l	d7,d0
000071A6 2A80                       		move.l	d0,(a5)
000071A8 2C99                       		move.l	(a1)+,(a6)
000071AA 4E75                       		rts	
000071AC                            ; ===========================================================================
000071AC                            
000071AC                            loc_70C8:
000071AC 2A80                       		move.l	d0,(a5)
000071AE 2819                       		move.l	(a1)+,d4
000071B0 0A84 0800 0800             		eori.l	#$8000800,d4
000071B6 4844                       		swap	d4
000071B8 2C84                       		move.l	d4,(a6)
000071BA D087                       		add.l	d7,d0
000071BC 2A80                       		move.l	d0,(a5)
000071BE 2819                       		move.l	(a1)+,d4
000071C0 0A84 0800 0800             		eori.l	#$8000800,d4
000071C6 4844                       		swap	d4
000071C8 2C84                       		move.l	d4,(a6)
000071CA 4E75                       		rts	
000071CC                            ; ===========================================================================
000071CC                            
000071CC                            loc_70E8:
000071CC 0810 0003                  		btst	#3,(a0)
000071D0 6600                       		bne.s	loc_710A
000071D2 2A80                       		move.l	d0,(a5)
000071D4 2A19                       		move.l	(a1)+,d5
000071D6 2819                       		move.l	(a1)+,d4
000071D8 0A84 1000 1000             		eori.l	#$10001000,d4
000071DE 2C84                       		move.l	d4,(a6)
000071E0 D087                       		add.l	d7,d0
000071E2 2A80                       		move.l	d0,(a5)
000071E4 0A85 1000 1000             		eori.l	#$10001000,d5
000071EA 2C85                       		move.l	d5,(a6)
000071EC 4E75                       		rts	
000071EE                            ; ===========================================================================
000071EE                            
000071EE                            loc_710A:
000071EE 2A80                       		move.l	d0,(a5)
000071F0 2A19                       		move.l	(a1)+,d5
000071F2 2819                       		move.l	(a1)+,d4
000071F4 0A84 1800 1800             		eori.l	#$18001800,d4
000071FA 4844                       		swap	d4
000071FC 2C84                       		move.l	d4,(a6)
000071FE D087                       		add.l	d7,d0
00007200 2A80                       		move.l	d0,(a5)
00007202 0A85 1800 1800             		eori.l	#$18001800,d5
00007208 4845                       		swap	d5
0000720A 2C85                       		move.l	d5,(a6)
0000720C 4E75                       		rts	
0000720E                            ; End of function sub_70AC
0000720E                            
0000720E                            
0000720E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000720E                            
0000720E                            
0000720E                            sub_712A:
0000720E DA53                       		add.w	(a3),d5
00007210                            
00007210                            loc_712C:
00007210 D86B 0004                  		add.w	4(a3),d4
00007214 43F8 B000                  		lea	($FFFFB000).w,a1
00007218 3604                       		move.w	d4,d3
0000721A E24B                       		lsr.w	#1,d3
0000721C 0243 0380                  		andi.w	#$380,d3
00007220 E64D                       		lsr.w	#3,d5
00007222 3005                       		move.w	d5,d0
00007224 EA48                       		lsr.w	#5,d0
00007226 0240 007F                  		andi.w	#$7F,d0	; '?'
0000722A D043                       		add.w	d3,d0
0000722C 76FF                       		moveq	#-1,d3
0000722E 1634 0000                  		move.b	(a4,d0.w),d3
00007232 6700                       		beq.s	locret_7172
00007234 5303                       		subq.b	#1,d3
00007236 0243 007F                  		andi.w	#$7F,d3	; '?'
0000723A EE5B                       		ror.w	#7,d3
0000723C D844                       		add.w	d4,d4
0000723E 0244 01E0                  		andi.w	#$1E0,d4
00007242 0245 001E                  		andi.w	#$1E,d5
00007246 D644                       		add.w	d4,d3
00007248 D645                       		add.w	d5,d3
0000724A 2043                       		movea.l	d3,a0
0000724C 3610                       		move.w	(a0),d3
0000724E 0243 03FF                  		andi.w	#$3FF,d3
00007252 E74B                       		lsl.w	#3,d3
00007254 D2C3                       		adda.w	d3,a1
00007256                            
00007256                            locret_7172:
00007256 4E75                       		rts	
00007258                            ; End of function sub_712A
00007258                            
00007258                            
00007258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007258                            
00007258                            
00007258                            Calc_VRAM_Pos:
00007258 DA53                       		add.w	(a3),d5
0000725A                            
0000725A                            loc_7176:
0000725A D86B 0004                  		add.w	4(a3),d4
0000725E 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007262 0245 01F0                  		andi.w	#$1F0,d5
00007266 E94C                       		lsl.w	#4,d4
00007268 E44D                       		lsr.w	#2,d5
0000726A D845                       		add.w	d5,d4
0000726C 7003                       		moveq	#3,d0
0000726E 4840                       		swap	d0
00007270 3004                       		move.w	d4,d0
00007272 4E75                       		rts	
00007274                            ; End of function Calc_VRAM_Pos
00007274                            
00007274                            ; ===========================================================================
00007274 D86B 0004                  		add.w	4(a3),d4
00007278 DA53                       		add.w	(a3),d5
0000727A 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000727E 0245 01F0                  		andi.w	#$1F0,d5
00007282 E94C                       		lsl.w	#4,d4
00007284 E44D                       		lsr.w	#2,d5
00007286 D845                       		add.w	d5,d4
00007288 7002                       		moveq	#2,d0
0000728A 4840                       		swap	d0
0000728C 3004                       		move.w	d4,d0
0000728E 4E75                       		rts	
00007290                            
00007290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007290                            
00007290                            
00007290                            LoadTilesFromStart:
00007290 4BF9 00C0 0004             		lea	($C00004).l,a5
00007296 4DF9 00C0 0000             		lea	($C00000).l,a6
0000729C 47F8 F700                  		lea	($FFFFF700).w,a3
000072A0 49F8 A400                  		lea	($FFFFA400).w,a4
000072A4 343C 4000                  		move.w	#$4000,d2
000072A8 6100                       		bsr.s	LoadTilesFromStart2
000072AA 47F8 F708                  		lea	($FFFFF708).w,a3
000072AE 49F8 A440                  		lea	($FFFFA440).w,a4
000072B2 343C 6000                  		move.w	#$6000,d2
000072B6 4A38 FE10                  		tst.b	($FFFFFE10).w
000072BA 6700 0000                  		beq.w	loc_7220
000072BE 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
000072C4 6700 0000                  		beq.w	loc_725A
000072C8 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
000072CE 6700 0000                  		beq.w	loc_7288
000072D2 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
000072D8 6700 0000                  		beq.w	loc_7220
000072DC                            ; End of function LoadTilesFromStart
000072DC                            
000072DC                            
000072DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072DC                            
000072DC                            
000072DC                            LoadTilesFromStart2:
000072DC 78F0                       		moveq	#-$10,d4
000072DE 7C0F                       		moveq	#$F,d6
000072E0                            
000072E0                            loc_71FC:
000072E0 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072E4 7A00                       		moveq	#0,d5
000072E6 3204                       		move.w	d4,d1
000072E8 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000072EC 3801                       		move.w	d1,d4
000072EE 7A00                       		moveq	#0,d5
000072F0 7C1F                       		moveq	#$1F,d6
000072F2 6100 FE1A                  		bsr.w	DrawTiles_LR2
000072F6 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072FA 0644 0010                  		addi.w	#$10,d4
000072FE 51CE FFE0                  		dbf	d6,loc_71FC
00007302 4E75                       		rts	
00007304                            ; End of function LoadTilesFromStart2
00007304                            
00007304                            ; ===========================================================================
00007304                            
00007304                            loc_7220:
00007304 7800                       		moveq	#0,d4
00007306 7C0F                       		moveq	#$F,d6
00007308                            
00007308                            loc_7224:
00007308 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000730C 41F9 0000 0000             		lea	(unk_724A).l,a0
00007312 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007316 D044                       		add.w	d4,d0
00007318 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
0000731C 6100 0000                  		bsr.w	sub_72BA
00007320 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007324 0644 0010                  		addi.w	#$10,d4
00007328 51CE FFDE                  		dbf	d6,loc_7224
0000732C 4E75                       		rts	
0000732E                            ; ===========================================================================
0000732E 00                         unk_724A:	dc.b   0 ;	 
0000732F 00                         		dc.b   0 ;  
00007330 00                         		dc.b   0 ;  
00007331 00                         		dc.b   0 ;  
00007332 06                         		dc.b   6 ;  
00007333 06                         		dc.b   6 ;  
00007334 06                         		dc.b   6 ;  
00007335 04                         		dc.b   4 ;  
00007336 04                         		dc.b   4 ;  
00007337 04                         		dc.b   4 ;  
00007338 00                         		dc.b   0 ;  
00007339 00                         		dc.b   0 ;  
0000733A 00                         		dc.b   0 ;  
0000733B 00                         		dc.b   0 ;  
0000733C 00                         		dc.b   0 ;  
0000733D 00                         		dc.b   0 ;  
0000733E                            ; ===========================================================================
0000733E                            
0000733E                            loc_725A:
0000733E 78F0                       		moveq	#-$10,d4
00007340 7C0F                       		moveq	#$F,d6
00007342                            
00007342                            loc_725E:
00007342 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007346 41F9 0000 6FD7             		lea	(unk_6EF3).l,a0
0000734C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007350 0440 0200                  		subi.w	#$200,d0
00007354 D044                       		add.w	d4,d0
00007356 0240 07F0                  		andi.w	#$7F0,d0
0000735A 6100 0000                  		bsr.w	sub_72BA
0000735E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007362 0644 0010                  		addi.w	#$10,d4
00007366 51CE FFDA                  		dbf	d6,loc_725E
0000736A 4E75                       		rts	
0000736C                            ; ===========================================================================
0000736C                            
0000736C                            loc_7288:
0000736C 78F0                       		moveq	#-$10,d4
0000736E 7C0F                       		moveq	#$F,d6
00007370                            
00007370                            loc_728C:
00007370 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007374 41F9 0000 6ED9             		lea	(unk_6DF5).l,a0
0000737A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000737E D044                       		add.w	d4,d0
00007380 0240 01F0                  		andi.w	#$1F0,d0
00007384 6100 0000                  		bsr.w	sub_72BA
00007388 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000738C 0644 0010                  		addi.w	#$10,d4
00007390 51CE FFDE                  		dbf	d6,loc_728C
00007394 4E75                       		rts	
00007396                            ; ===========================================================================
00007396 F7                         unk_72B2:	dc.b $F7 ; ÷
00007397 08                         		dc.b   8 ;  
00007398 F7                         		dc.b $F7 ; ÷
00007399 08                         		dc.b   8 ;  
0000739A F7                         		dc.b $F7 ; ÷
0000739B 10                         		dc.b $10 ;  
0000739C F7                         		dc.b $F7 ; ÷
0000739D 18                         		dc.b $18 ;  
0000739E                            
0000739E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000739E                            
0000739E                            
0000739E                            sub_72BA:
0000739E E848                       		lsr.w	#4,d0
000073A0 1030 0000                  		move.b	(a0,d0.w),d0
000073A4 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
000073A8 6700                       		beq.s	loc_72DA
000073AA 7AF0                       		moveq	#-$10,d5
000073AC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000073B0 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
000073B4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000073B8 6100 FD52                  		bsr.w	DrawTiles_LR
000073BC 6000                       		bra.s	locret_72EE
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            loc_72DA:
000073BE 7A00                       		moveq	#0,d5
000073C0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000073C4 6100 FE94                  		bsr.w	loc_7176
000073C8 4CDF 0030                  		movem.l	(sp)+,d4-d5
000073CC 7C1F                       		moveq	#$1F,d6
000073CE 6100 FD68                  		bsr.w	DrawTiles_LR3
000073D2                            
000073D2                            locret_72EE:
000073D2 4E75                       		rts	
000073D4                            ; End of function sub_72BA
000073D4                            
000073D4                            ; ---------------------------------------------------------------------------
000073D4                            ; Main Load Block loading subroutine
000073D4                            ; ---------------------------------------------------------------------------
000073D4                            
000073D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073D4                            
000073D4                            
000073D4                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000073D4 7000                       		moveq	#0,d0
000073D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000073DA E948                       		lsl.w	#4,d0
000073DC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000073E2 45F2 0000                  		lea	(a2,d0.w),a2
000073E6 2F0A                       		move.l	a2,-(sp)
000073E8 588A                       		addq.l	#4,a2
000073EA 205A                       		movea.l	(a2)+,a0
000073EC 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000073F0 303C 0000                  		move.w	#0,d0
000073F4 6100 A232                  		bsr.w	EniDec
000073F8 205A                       		movea.l	(a2)+,a0
000073FA 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007400 6100 A3A4                  		bsr.w	KosDec
00007404 6100 0000                  		bsr.w	LevelLayoutLoad
00007408 301A                       		move.w	(a2)+,d0
0000740A 3012                       		move.w	(a2),d0
0000740C 0240 00FF                  		andi.w	#$FF,d0
00007410 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007416 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007418 700C                       		moveq	#$C,d0		; use SB3 pallet
0000741A                            
0000741A                            MLB_ChkSBZPal:
0000741A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007420 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007422 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007428 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000742A                            
0000742A                            MLB_UsePal0E:
0000742A 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000742C                            
0000742C                            MLB_NormalPal:
0000742C 6100 ABD8                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007430 245F                       		movea.l	(sp)+,a2
00007432 584A                       		addq.w	#4,a2
00007434 7000                       		moveq	#0,d0
00007436 1012                       		move.b	(a2),d0
00007438 6700                       		beq.s	locret_6D10
0000743A 6100 A04E                  		bsr.w	LoadPLC		; load pattern load cues
0000743E                            
0000743E                            locret_6D10:
0000743E 4E75                       		rts	
00007440                            ; End of function MainLoadBlockLoad
00007440                            
00007440                            ; ---------------------------------------------------------------------------
00007440                            ; Level	layout loading subroutine
00007440                            ; ---------------------------------------------------------------------------
00007440                            
00007440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007440                            
00007440                            
00007440                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007440 47F8 A400                  		lea	($FFFFA400).w,a3
00007444 323C 01FF                  		move.w	#$1FF,d1
00007448 7000                       		moveq	#0,d0
0000744A                            
0000744A                            LevLoad_ClrRam:
0000744A 26C0                       		move.l	d0,(a3)+
0000744C 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007450                            
00007450 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007454 7200                       		moveq	#0,d1
00007456 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000745A 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000745E 7202                       		moveq	#2,d1
00007460                            ; End of function LevelLayoutLoad
00007460                            
00007460                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007460                            
00007460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007460                            
00007460                            
00007460                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007460 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007464 ED08                       		lsl.b	#6,d0
00007466 EA48                       		lsr.w	#5,d0
00007468 3400                       		move.w	d0,d2
0000746A D040                       		add.w	d0,d0
0000746C D042                       		add.w	d2,d0
0000746E D041                       		add.w	d1,d0
00007470 43F9 0000 0000             		lea	(Level_Index).l,a1
00007476 3031 0000                  		move.w	(a1,d0.w),d0
0000747A 43F1 0000                  		lea	(a1,d0.w),a1
0000747E 7200                       		moveq	#0,d1
00007480 3401                       		move.w	d1,d2
00007482 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007484 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007486                            
00007486                            LevLoad_NumRows:
00007486 3001                       		move.w	d1,d0
00007488 204B                       		movea.l	a3,a0
0000748A                            
0000748A                            LevLoad_Row:
0000748A 10D9                       		move.b	(a1)+,(a0)+
0000748C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007490 47EB 0080                  		lea	$80(a3),a3	; do next row
00007494 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007498 4E75                       		rts	
0000749A                            ; End of function LevelLayoutLoad2
0000749A                            
0000749A                            ; ---------------------------------------------------------------------------
0000749A                            ; Dynamic screen resize	loading	subroutine
0000749A                            ; ---------------------------------------------------------------------------
0000749A                            
0000749A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000749A                            
0000749A                            
0000749A                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000749A 7000                       		moveq	#0,d0
0000749C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000074A0 D040                       		add.w	d0,d0
000074A2 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000074A6 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000074AA 7202                       		moveq	#2,d1
000074AC 3038 F726                  		move.w	($FFFFF726).w,d0
000074B0 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000074B4 6700                       		beq.s	locret_6DAA
000074B6 6400                       		bcc.s	loc_6DAC
000074B8 4441                       		neg.w	d1
000074BA 3038 F704                  		move.w	($FFFFF704).w,d0
000074BE B078 F726                  		cmp.w	($FFFFF726).w,d0
000074C2 6300                       		bls.s	loc_6DA0
000074C4 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000074C8 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000074CE                            
000074CE                            loc_6DA0:
000074CE D378 F72E                  		add.w	d1,($FFFFF72E).w
000074D2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000074D8                            
000074D8                            locret_6DAA:
000074D8 4E75                       		rts	
000074DA                            ; ===========================================================================
000074DA                            
000074DA                            loc_6DAC:				; XREF: DynScrResizeLoad
000074DA 3038 F704                  		move.w	($FFFFF704).w,d0
000074DE 5040                       		addq.w	#8,d0
000074E0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000074E4 6500                       		bcs.s	loc_6DC4
000074E6 0838 0001 D022             		btst	#1,($FFFFD022).w
000074EC 6700                       		beq.s	loc_6DC4
000074EE D241                       		add.w	d1,d1
000074F0 D241                       		add.w	d1,d1
000074F2                            
000074F2                            loc_6DC4:
000074F2 D378 F72E                  		add.w	d1,($FFFFF72E).w
000074F6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000074FC 4E75                       		rts	
000074FE                            ; End of function DynScrResizeLoad
000074FE                            
000074FE                            ; ===========================================================================
000074FE                            ; ---------------------------------------------------------------------------
000074FE                            ; Offset index for dynamic screen resizing
000074FE                            ; ---------------------------------------------------------------------------
000074FE 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007502 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007506 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000750A 0000                       		dc.w Resize_Ending-Resize_Index
0000750C                            ; ===========================================================================
0000750C                            ; ---------------------------------------------------------------------------
0000750C                            ; Green	Hill Zone dynamic screen resizing
0000750C                            ; ---------------------------------------------------------------------------
0000750C                            
0000750C                            Resize_GHZ:				; XREF: Resize_Index
0000750C 7000                       		moveq	#0,d0
0000750E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007512 D040                       		add.w	d0,d0
00007514 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007518 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000751C                            ; ===========================================================================
0000751C 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000751E 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007520 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007522                            ; ===========================================================================
00007522                            
00007522                            Resize_GHZ1:
00007522 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007528 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000752E 6500                       		bcs.s	locret_6E08	; if not, branch
00007530 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007536                            
00007536                            locret_6E08:
00007536 4E75                       		rts	
00007538                            ; ===========================================================================
00007538                            
00007538                            Resize_GHZ2:
00007538 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000753E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007544 6500                       		bcs.s	locret_6E3A
00007546 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000754C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007552 6500                       		bcs.s	locret_6E3A
00007554 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000755A 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007560 6500                       		bcs.s	locret_6E3A
00007562 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007568                            
00007568                            locret_6E3A:
00007568 4E75                       		rts	
0000756A                            ; ===========================================================================
0000756A                            
0000756A                            Resize_GHZ3:
0000756A 7000                       		moveq	#0,d0
0000756C 1038 F742                  		move.b	($FFFFF742).w,d0
00007570 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007574 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007578                            ; ===========================================================================
00007578 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000757A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000757C 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000757E                            ; ===========================================================================
0000757E                            
0000757E                            Resize_GHZ3main:
0000757E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007584 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000758A 6500                       		bcs.s	locret_6E96
0000758C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007592 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007598 6500                       		bcs.s	locret_6E96
0000759A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000075A0 6500                       		bcs.s	loc_6E98
000075A2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000075A8 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000075AE 6400                       		bcc.s	loc_6E8E
000075B0 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000075B6 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000075BC                            
000075BC                            loc_6E8E:
000075BC 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000075C2 6400                       		bcc.s	loc_6E98
000075C4                            
000075C4                            locret_6E96:
000075C4 4E75                       		rts	
000075C6                            ; ===========================================================================
000075C6                            
000075C6                            loc_6E98:
000075C6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000075CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000075D0 4E75                       		rts	
000075D2                            ; ===========================================================================
000075D2                            
000075D2                            Resize_GHZ3boss:
000075D2 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000075D8 6400                       		bcc.s	loc_6EB0
000075DA 5538 F742                  		subq.b	#2,($FFFFF742).w
000075DE                            
000075DE                            loc_6EB0:
000075DE 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000075E4 6500                       		bcs.s	locret_6EE8
000075E6 6100 0000                  		bsr.w	SingleObjLoad
000075EA 6600                       		bne.s	loc_6ED0
000075EC 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000075F0 337C 2A60 0008             		move.w	#$2A60,8(a1)
000075F6 337C 0280 000C             		move.w	#$280,$C(a1)
000075FC                            
000075FC                            loc_6ED0:
000075FC 303C 008C                  		move.w	#$8C,d0
00007600 6100 9C5A                  		bsr.w	PlaySound	; play boss music
00007604 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000760A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000760E 7011                       		moveq	#$11,d0
00007610 6000 9E78                  		bra.w	LoadPLC		; load boss patterns
00007614                            ; ===========================================================================
00007614                            
00007614                            locret_6EE8:
00007614 4E75                       		rts	
00007616                            ; ===========================================================================
00007616                            
00007616                            Resize_GHZ3end:
00007616 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000761C 4E75                       		rts	
0000761E                            ; ===========================================================================
0000761E                            ; ---------------------------------------------------------------------------
0000761E                            ; Labyrinth Zone dynamic screen	resizing
0000761E                            ; ---------------------------------------------------------------------------
0000761E                            
0000761E                            Resize_LZ:				; XREF: Resize_Index
0000761E 7000                       		moveq	#0,d0
00007620 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007624 D040                       		add.w	d0,d0
00007626 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000762A 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000762E                            ; ===========================================================================
0000762E 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007630 0000                       		dc.w Resize_LZ12-Resize_LZx
00007632 0000                       		dc.w Resize_LZ3-Resize_LZx
00007634 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007636                            ; ===========================================================================
00007636                            
00007636                            Resize_LZ12:
00007636 4E75                       		rts	
00007638                            ; ===========================================================================
00007638                            
00007638                            Resize_LZ3:
00007638 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000763C 6700                       		beq.s	loc_6F28	; if not, branch
0000763E 43F8 A506                  		lea	($FFFFA506).w,a1
00007642 0C11 0007                  		cmpi.b	#7,(a1)
00007646 6700                       		beq.s	loc_6F28
00007648 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000764C 303C 00B7                  		move.w	#$B7,d0
00007650 6100 9C10                  		bsr.w	PlaySound_Special ; play rumbling sound
00007654                            
00007654                            loc_6F28:
00007654 4A38 F742                  		tst.b	($FFFFF742).w
00007658 6600                       		bne.s	locret_6F64
0000765A 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007660 6500                       		bcs.s	locret_6F62
00007662 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007668 6400                       		bcc.s	locret_6F62
0000766A 6100 0000                  		bsr.w	SingleObjLoad
0000766E 6600                       		bne.s	loc_6F4A
00007670 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007674                            
00007674                            loc_6F4A:
00007674 303C 008C                  		move.w	#$8C,d0
00007678 6100 9BE2                  		bsr.w	PlaySound	; play boss music
0000767C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007682 5438 F742                  		addq.b	#2,($FFFFF742).w
00007686 7011                       		moveq	#$11,d0
00007688 6000 9E00                  		bra.w	LoadPLC		; load boss patterns
0000768C                            ; ===========================================================================
0000768C                            
0000768C                            locret_6F62:
0000768C 4E75                       		rts	
0000768E                            ; ===========================================================================
0000768E                            
0000768E                            locret_6F64:
0000768E 4E75                       		rts	
00007690                            ; ===========================================================================
00007690                            
00007690                            Resize_SBZ3:
00007690 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007696 6500                       		bcs.s	locret_6F8C
00007698 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000769E 6400                       		bcc.s	locret_6F8C	; if not, branch
000076A0 4238 FE30                  		clr.b	($FFFFFE30).w
000076A4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000076AA 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000076B0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000076B6                            
000076B6                            locret_6F8C:
000076B6 4E75                       		rts	
000076B8                            ; ===========================================================================
000076B8                            ; ---------------------------------------------------------------------------
000076B8                            ; Marble Zone dynamic screen resizing
000076B8                            ; ---------------------------------------------------------------------------
000076B8                            
000076B8                            Resize_MZ:				; XREF: Resize_Index
000076B8 7000                       		moveq	#0,d0
000076BA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076BE D040                       		add.w	d0,d0
000076C0 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000076C4 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000076C8                            ; ===========================================================================
000076C8 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000076CA 0000                       		dc.w Resize_MZ2-Resize_MZx
000076CC 0000                       		dc.w Resize_MZ3-Resize_MZx
000076CE                            ; ===========================================================================
000076CE                            
000076CE                            Resize_MZ1:
000076CE 7000                       		moveq	#0,d0
000076D0 1038 F742                  		move.b	($FFFFF742).w,d0
000076D4 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000076D8 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000076DC                            ; ===========================================================================
000076DC 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000076DE 0000                       		dc.w loc_6FEA-off_6FB2
000076E0 0000                       		dc.w loc_702E-off_6FB2
000076E2 0000                       		dc.w loc_7050-off_6FB2
000076E4                            ; ===========================================================================
000076E4                            
000076E4                            loc_6FBA:
000076E4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000076EA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000076F0 6500                       		bcs.s	locret_6FE8
000076F2 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000076F8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000076FE 6500                       		bcs.s	locret_6FE8
00007700 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007706 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000770C 6500                       		bcs.s	locret_6FE8
0000770E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007712                            
00007712                            locret_6FE8:
00007712 4E75                       		rts	
00007714                            ; ===========================================================================
00007714                            
00007714                            loc_6FEA:
00007714 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000771A 6400                       		bcc.s	loc_6FF8
0000771C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007720 4E75                       		rts	
00007722                            ; ===========================================================================
00007722                            
00007722                            loc_6FF8:
00007722 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007728 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000772E 6400                       		bcc.s	locret_702C
00007730 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007736 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000773C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007742 6400                       		bcc.s	locret_702C
00007744 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000774A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007750 6500                       		bcs.s	locret_702C
00007752 5438 F742                  		addq.b	#2,($FFFFF742).w
00007756                            
00007756                            locret_702C:
00007756 4E75                       		rts	
00007758                            ; ===========================================================================
00007758                            
00007758                            loc_702E:
00007758 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000775E 6400                       		bcc.s	loc_703C
00007760 5538 F742                  		subq.b	#2,($FFFFF742).w
00007764 4E75                       		rts	
00007766                            ; ===========================================================================
00007766                            
00007766                            loc_703C:
00007766 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000776C 6500                       		bcs.s	locret_704E
0000776E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007774 5438 F742                  		addq.b	#2,($FFFFF742).w
00007778                            
00007778                            locret_704E:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            loc_7050:
0000777A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007780 6500                       		bcs.s	locret_7072
00007782 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007788 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000778E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007794 6500                       		bcs.s	locret_7072
00007796 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000779C                            
0000779C                            locret_7072:
0000779C 4E75                       		rts	
0000779E                            ; ===========================================================================
0000779E                            
0000779E                            Resize_MZ2:
0000779E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077A4 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000077AA 6500                       		bcs.s	locret_7088
000077AC 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000077B2                            
000077B2                            locret_7088:
000077B2 4E75                       		rts	
000077B4                            ; ===========================================================================
000077B4                            
000077B4                            Resize_MZ3:
000077B4 7000                       		moveq	#0,d0
000077B6 1038 F742                  		move.b	($FFFFF742).w,d0
000077BA 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000077BE 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000077C2                            ; ===========================================================================
000077C2 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000077C4 0000                       		dc.w Resize_MZ3end-off_7098
000077C6                            ; ===========================================================================
000077C6                            
000077C6                            Resize_MZ3boss:
000077C6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000077CC 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000077D2 6500                       		bcs.s	locret_70E8
000077D4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000077DA 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000077E0 6500                       		bcs.s	locret_70E8
000077E2 6100 0000                  		bsr.w	SingleObjLoad
000077E6 6600                       		bne.s	loc_70D0
000077E8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000077EC 337C 19F0 0008             		move.w	#$19F0,8(a1)
000077F2 337C 022C 000C             		move.w	#$22C,$C(a1)
000077F8                            
000077F8                            loc_70D0:
000077F8 303C 008C                  		move.w	#$8C,d0
000077FC 6100 9A5E                  		bsr.w	PlaySound	; play boss music
00007800 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007806 5438 F742                  		addq.b	#2,($FFFFF742).w
0000780A 7011                       		moveq	#$11,d0
0000780C 6000 9C7C                  		bra.w	LoadPLC		; load boss patterns
00007810                            ; ===========================================================================
00007810                            
00007810                            locret_70E8:
00007810 4E75                       		rts	
00007812                            ; ===========================================================================
00007812                            
00007812                            Resize_MZ3end:
00007812 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007818 4E75                       		rts	
0000781A                            ; ===========================================================================
0000781A                            ; ---------------------------------------------------------------------------
0000781A                            ; Star Light Zone dynamic screen resizing
0000781A                            ; ---------------------------------------------------------------------------
0000781A                            
0000781A                            Resize_SLZ:				; XREF: Resize_Index
0000781A 7000                       		moveq	#0,d0
0000781C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007820 D040                       		add.w	d0,d0
00007822 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007826 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000782A                            ; ===========================================================================
0000782A 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000782C 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000782E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007830                            ; ===========================================================================
00007830                            
00007830                            Resize_SLZ12:
00007830 4E75                       		rts	
00007832                            ; ===========================================================================
00007832                            
00007832                            Resize_SLZ3:
00007832 7000                       		moveq	#0,d0
00007834 1038 F742                  		move.b	($FFFFF742).w,d0
00007838 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000783C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007840                            ; ===========================================================================
00007840 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007842 0000                       		dc.w Resize_SLZ3boss-off_7118
00007844 0000                       		dc.w Resize_SLZ3end-off_7118
00007846                            ; ===========================================================================
00007846                            
00007846                            Resize_SLZ3main:
00007846 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000784C 6500                       		bcs.s	locret_7130
0000784E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007854 5438 F742                  		addq.b	#2,($FFFFF742).w
00007858                            
00007858                            locret_7130:
00007858 4E75                       		rts	
0000785A                            ; ===========================================================================
0000785A                            
0000785A                            Resize_SLZ3boss:
0000785A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007860 6500                       		bcs.s	locret_715C
00007862 6100 0000                  		bsr.w	SingleObjLoad
00007866 6600                       		bne.s	loc_7144
00007868 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000786C                            
0000786C                            loc_7144:
0000786C 303C 008C                  		move.w	#$8C,d0
00007870 6100 99EA                  		bsr.w	PlaySound	; play boss music
00007874 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000787A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000787E 7011                       		moveq	#$11,d0
00007880 6000 9C08                  		bra.w	LoadPLC		; load boss patterns
00007884                            ; ===========================================================================
00007884                            
00007884                            locret_715C:
00007884 4E75                       		rts	
00007886                            ; ===========================================================================
00007886                            
00007886                            Resize_SLZ3end:
00007886 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000788C 4E75                       		rts
0000788E 4E75                       		rts
00007890                            ; ===========================================================================
00007890                            ; ---------------------------------------------------------------------------
00007890                            ; Spring Yard Zone dynamic screen resizing
00007890                            ; ---------------------------------------------------------------------------
00007890                            
00007890                            Resize_SYZ:				; XREF: Resize_Index
00007890 7000                       		moveq	#0,d0
00007892 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007896 D040                       		add.w	d0,d0
00007898 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000789C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000078A0                            ; ===========================================================================
000078A0 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000078A2 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000078A4 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000078A6                            ; ===========================================================================
000078A6                            
000078A6                            Resize_SYZ1:
000078A6 4E75                       		rts	
000078A8                            ; ===========================================================================
000078A8                            
000078A8                            Resize_SYZ2:
000078A8 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000078AE 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000078B4 6500                       		bcs.s	locret_71A2
000078B6 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000078BC 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000078C2 6500                       		bcs.s	locret_71A2
000078C4 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000078CA                            
000078CA                            locret_71A2:
000078CA 4E75                       		rts	
000078CC                            ; ===========================================================================
000078CC                            
000078CC                            Resize_SYZ3:
000078CC 7000                       		moveq	#0,d0
000078CE 1038 F742                  		move.b	($FFFFF742).w,d0
000078D2 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000078D6 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000078DA                            ; ===========================================================================
000078DA 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000078DC 0000                       		dc.w Resize_SYZ3boss-off_71B2
000078DE 0000                       		dc.w Resize_SYZ3end-off_71B2
000078E0                            ; ===========================================================================
000078E0                            
000078E0                            Resize_SYZ3main:
000078E0 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000078E6 6500                       		bcs.s	locret_71CE
000078E8 6100 0000                  		bsr.w	SingleObjLoad
000078EC 6600                       		bne.s	locret_71CE
000078EE 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000078F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F6                            
000078F6                            locret_71CE:
000078F6 4E75                       		rts	
000078F8                            ; ===========================================================================
000078F8                            
000078F8                            Resize_SYZ3boss:
000078F8 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000078FE 6500                       		bcs.s	locret_7200
00007900 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007906 6100 0000                  		bsr.w	SingleObjLoad
0000790A 6600                       		bne.s	loc_71EC
0000790C 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007910 5438 F742                  		addq.b	#2,($FFFFF742).w
00007914                            
00007914                            loc_71EC:
00007914 303C 008C                  		move.w	#$8C,d0
00007918 6100 9942                  		bsr.w	PlaySound	; play boss music
0000791C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007922 7011                       		moveq	#$11,d0
00007924 6000 9B64                  		bra.w	LoadPLC		; load boss patterns
00007928                            ; ===========================================================================
00007928                            
00007928                            locret_7200:
00007928 4E75                       		rts	
0000792A                            ; ===========================================================================
0000792A                            
0000792A                            Resize_SYZ3end:
0000792A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007930 4E75                       		rts	
00007932                            ; ===========================================================================
00007932                            ; ---------------------------------------------------------------------------
00007932                            ; Scrap	Brain Zone dynamic screen resizing
00007932                            ; ---------------------------------------------------------------------------
00007932                            
00007932                            Resize_SBZ:				; XREF: Resize_Index
00007932 7000                       		moveq	#0,d0
00007934 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007938 D040                       		add.w	d0,d0
0000793A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000793E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007942                            ; ===========================================================================
00007942 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007944 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007946 0000                       		dc.w Resize_FZ-Resize_SBZx
00007948                            ; ===========================================================================
00007948                            
00007948                            Resize_SBZ1:
00007948 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000794E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007954 6500                       		bcs.s	locret_7242
00007956 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000795C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007962 6500                       		bcs.s	locret_7242
00007964 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000796A                            
0000796A                            locret_7242:
0000796A 4E75                       		rts	
0000796C                            ; ===========================================================================
0000796C                            
0000796C                            Resize_SBZ2:
0000796C 7000                       		moveq	#0,d0
0000796E 1038 F742                  		move.b	($FFFFF742).w,d0
00007972 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007976 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000797A                            ; ===========================================================================
0000797A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000797C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000797E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007980 0000                       		dc.w Resize_SBZ2end-off_7252
00007982                            ; ===========================================================================
00007982                            
00007982                            Resize_SBZ2main:
00007982 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007988 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000798E 6500                       		bcs.s	locret_727A
00007990 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007996 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000799C 6500                       		bcs.s	locret_727A
0000799E 5438 F742                  		addq.b	#2,($FFFFF742).w
000079A2                            
000079A2                            locret_727A:
000079A2 4E75                       		rts	
000079A4                            ; ===========================================================================
000079A4                            
000079A4                            Resize_SBZ2boss:
000079A4 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000079AA 6500                       		bcs.s	locret_7298
000079AC 6100 0000                  		bsr.w	SingleObjLoad
000079B0 6600                       		bne.s	locret_7298
000079B2 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000079B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000079BA 701E                       		moveq	#$1E,d0
000079BC 6000 9ACC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000079C0                            ; ===========================================================================
000079C0                            
000079C0                            locret_7298:
000079C0 4E75                       		rts	
000079C2                            ; ===========================================================================
000079C2                            
000079C2                            Resize_SBZ2boss2:
000079C2 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000079C8 6500                       		bcs.s	loc_72B6
000079CA 6100 0000                  		bsr.w	SingleObjLoad
000079CE 6600                       		bne.s	loc_72B0
000079D0 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000079D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000079D8                            
000079D8                            loc_72B0:
000079D8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079DE                            
000079DE                            loc_72B6:
000079DE 6000                       		bra.s	loc_72C2
000079E0                            ; ===========================================================================
000079E0                            
000079E0                            Resize_SBZ2end:
000079E0 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000079E6 6500                       		bcs.s	loc_72C2
000079E8 4E75                       		rts	
000079EA                            ; ===========================================================================
000079EA                            
000079EA                            loc_72C2:
000079EA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079F0 4E75                       		rts	
000079F2                            ; ===========================================================================
000079F2                            
000079F2                            Resize_FZ:
000079F2 7000                       		moveq	#0,d0
000079F4 1038 F742                  		move.b	($FFFFF742).w,d0
000079F8 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000079FC 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007A00                            ; ===========================================================================
00007A00 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007A04 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007A08 0000                       		dc.w Resize_FZend2-off_72D8
00007A0A                            ; ===========================================================================
00007A0A                            
00007A0A                            Resize_FZmain:
00007A0A 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007A10 6500                       		bcs.s	loc_72F4
00007A12 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A16 701F                       		moveq	#$1F,d0
00007A18 6100 9A70                  		bsr.w	LoadPLC		; load FZ boss patterns
00007A1C                            
00007A1C                            loc_72F4:
00007A1C 60CC                       		bra.s	loc_72C2
00007A1E                            ; ===========================================================================
00007A1E                            
00007A1E                            Resize_FZboss:
00007A1E 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007A24 6500                       		bcs.s	loc_7312
00007A26 6100 0000                  		bsr.w	SingleObjLoad
00007A2A 6600                       		bne.s	loc_7312
00007A2C 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007A30 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A34 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A3A                            
00007A3A                            loc_7312:
00007A3A 60AE                       		bra.s	loc_72C2
00007A3C                            ; ===========================================================================
00007A3C                            
00007A3C                            Resize_FZend:
00007A3C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007A42 6500                       		bcs.s	loc_7320
00007A44 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A48                            
00007A48                            loc_7320:
00007A48 60A0                       		bra.s	loc_72C2
00007A4A                            ; ===========================================================================
00007A4A                            
00007A4A                            locret_7322:
00007A4A 4E75                       		rts	
00007A4C                            ; ===========================================================================
00007A4C                            
00007A4C                            Resize_FZend2:
00007A4C 609C                       		bra.s	loc_72C2
00007A4E                            ; ===========================================================================
00007A4E                            ; ---------------------------------------------------------------------------
00007A4E                            ; Ending sequence dynamic screen resizing (empty)
00007A4E                            ; ---------------------------------------------------------------------------
00007A4E                            
00007A4E                            Resize_Ending:				; XREF: Resize_Index
00007A4E 4E75                       		rts	
00007A50                            ; ===========================================================================
00007A50                            ; ---------------------------------------------------------------------------
00007A50                            ; Object 11 - GHZ bridge
00007A50                            ; ---------------------------------------------------------------------------
00007A50                            
00007A50                            Obj11:					; XREF: Obj_Index
00007A50 7000                       		moveq	#0,d0
00007A52 1028 0024                  		move.b	$24(a0),d0
00007A56 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007A5A 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007A5E                            ; ===========================================================================
00007A5E 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007A62 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007A66 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007A6A                            ; ===========================================================================
00007A6A                            
00007A6A                            Obj11_Main:				; XREF: Obj11_Index
00007A6A 5428 0024                  		addq.b	#2,$24(a0)
00007A6E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007A76 317C 438E 0002             		move.w	#$438E,2(a0)
00007A7C 117C 0004 0001             		move.b	#4,1(a0)
00007A82 117C 0003 0018             		move.b	#3,$18(a0)
00007A88 117C 0080 0019             		move.b	#$80,$19(a0)
00007A8E 3428 000C                  		move.w	$C(a0),d2
00007A92 3628 0008                  		move.w	8(a0),d3
00007A96 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007A98 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007A9C 7200                       		moveq	#0,d1
00007A9E 1212                       		move.b	(a2),d1		; copy a2 to d1
00007AA0 14FC 0000                  		move.b	#0,(a2)+
00007AA4 3001                       		move.w	d1,d0
00007AA6 E248                       		lsr.w	#1,d0
00007AA8 E948                       		lsl.w	#4,d0
00007AAA 9640                       		sub.w	d0,d3
00007AAC 5501                       		subq.b	#2,d1
00007AAE 6500                       		bcs.s	Obj11_Action
00007AB0                            
00007AB0                            Obj11_MakeBdg:
00007AB0 6100 0000                  		bsr.w	SingleObjLoad
00007AB4 6600                       		bne.s	Obj11_Action
00007AB6 5228 0028                  		addq.b	#1,$28(a0)
00007ABA B668 0008                  		cmp.w	8(a0),d3
00007ABE 6600                       		bne.s	loc_73B8
00007AC0 0643 0010                  		addi.w	#$10,d3
00007AC4 3142 000C                  		move.w	d2,$C(a0)
00007AC8 3142 003C                  		move.w	d2,$3C(a0)
00007ACC 3A08                       		move.w	a0,d5
00007ACE 0445 D000                  		subi.w	#-$3000,d5
00007AD2 EC4D                       		lsr.w	#6,d5
00007AD4 0245 007F                  		andi.w	#$7F,d5
00007AD8 14C5                       		move.b	d5,(a2)+
00007ADA 5228 0028                  		addq.b	#1,$28(a0)
00007ADE                            
00007ADE                            loc_73B8:				; XREF: ROM:00007398j
00007ADE 3A09                       		move.w	a1,d5
00007AE0 0445 D000                  		subi.w	#-$3000,d5
00007AE4 EC4D                       		lsr.w	#6,d5
00007AE6 0245 007F                  		andi.w	#$7F,d5
00007AEA 14C5                       		move.b	d5,(a2)+
00007AEC 137C 000A 0024             		move.b	#$A,$24(a1)
00007AF2 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007AF4 3342 000C                  		move.w	d2,$C(a1)
00007AF8 3342 003C                  		move.w	d2,$3C(a1)
00007AFC 3343 0008                  		move.w	d3,8(a1)
00007B00 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007B08 337C 438E 0002             		move.w	#$438E,2(a1)
00007B0E 137C 0004 0001             		move.b	#4,1(a1)
00007B14 137C 0003 0018             		move.b	#3,$18(a1)
00007B1A 137C 0008 0019             		move.b	#8,$19(a1)
00007B20 0643 0010                  		addi.w	#$10,d3
00007B24 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007B28                            
00007B28                            Obj11_Action:				; XREF: Obj11_Index
00007B28 6100                       		bsr.s	Obj11_Solid
00007B2A 4A28 003E                  		tst.b	$3E(a0)
00007B2E 6700                       		beq.s	Obj11_Display
00007B30 5928 003E                  		subq.b	#4,$3E(a0)
00007B34 6100 0000                  		bsr.w	Obj11_Bend
00007B38                            
00007B38                            Obj11_Display:
00007B38 6100 0000                  		bsr.w	DisplaySprite
00007B3C 6000 0000                  		bra.w	Obj11_ChkDel
00007B40                            
00007B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B40                            
00007B40                            
00007B40                            Obj11_Solid:				; XREF: Obj11_Action
00007B40 7200                       		moveq	#0,d1
00007B42 1228 0028                  		move.b	$28(a0),d1
00007B46 E749                       		lsl.w	#3,d1
00007B48 3401                       		move.w	d1,d2
00007B4A 5041                       		addq.w	#8,d1
00007B4C D442                       		add.w	d2,d2
00007B4E 43F8 D000                  		lea	($FFFFD000).w,a1
00007B52 4A69 0012                  		tst.w	$12(a1)
00007B56 6B00 0000                  		bmi.w	locret_751E
00007B5A 3029 0008                  		move.w	8(a1),d0
00007B5E 9068 0008                  		sub.w	8(a0),d0
00007B62 D041                       		add.w	d1,d0
00007B64 6B00 0000                  		bmi.w	locret_751E
00007B68 B042                       		cmp.w	d2,d0
00007B6A 6400 0000                  		bcc.w	locret_751E
00007B6E 6000                       		bra.s	Platform2
00007B70                            ; End of function Obj11_Solid
00007B70                            
00007B70                            ; ---------------------------------------------------------------------------
00007B70                            ; Platform subroutine
00007B70                            ; ---------------------------------------------------------------------------
00007B70                            
00007B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B70                            
00007B70                            
00007B70                            PlatformObject:
00007B70 43F8 D000                  		lea	($FFFFD000).w,a1
00007B74 4A69 0012                  		tst.w	$12(a1)
00007B78 6B00 0000                  		bmi.w	locret_751E
00007B7C 3029 0008                  		move.w	8(a1),d0
00007B80 9068 0008                  		sub.w	8(a0),d0
00007B84 D041                       		add.w	d1,d0
00007B86 6B00 0000                  		bmi.w	locret_751E
00007B8A D241                       		add.w	d1,d1
00007B8C B041                       		cmp.w	d1,d0
00007B8E 6400 0000                  		bcc.w	locret_751E
00007B92                            
00007B92                            Platform2:
00007B92 3028 000C                  		move.w	$C(a0),d0
00007B96 5140                       		subq.w	#8,d0
00007B98                            
00007B98                            Platform3:
00007B98 3429 000C                  		move.w	$C(a1),d2
00007B9C 1229 0016                  		move.b	$16(a1),d1
00007BA0 4881                       		ext.w	d1
00007BA2 D242                       		add.w	d2,d1
00007BA4 5841                       		addq.w	#4,d1
00007BA6 9041                       		sub.w	d1,d0
00007BA8 6200 0000                  		bhi.w	locret_751E
00007BAC 0C40 FFF0                  		cmpi.w	#-$10,d0
00007BB0 6500 0000                  		bcs.w	locret_751E
00007BB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007BB8 6B00 0000                  		bmi.w	locret_751E
00007BBC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007BC2 6400 0000                  		bcc.w	locret_751E
00007BC6 D440                       		add.w	d0,d2
00007BC8 5642                       		addq.w	#3,d2
00007BCA 3342 000C                  		move.w	d2,$C(a1)
00007BCE 5428 0024                  		addq.b	#2,$24(a0)
00007BD2                            
00007BD2                            loc_74AE:
00007BD2 0829 0003 0022             		btst	#3,$22(a1)
00007BD8 6700                       		beq.s	loc_74DC
00007BDA 7000                       		moveq	#0,d0
00007BDC 1029 003D                  		move.b	$3D(a1),d0
00007BE0 ED48                       		lsl.w	#6,d0
00007BE2 0680 00FF D000             		addi.l	#$FFD000,d0
00007BE8 2440                       		movea.l	d0,a2
00007BEA 08AA 0003 0022             		bclr	#3,$22(a2)
00007BF0 422A 0025                  		clr.b	$25(a2)
00007BF4 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007BFA 6600                       		bne.s	loc_74DC
00007BFC 552A 0024                  		subq.b	#2,$24(a2)
00007C00                            
00007C00                            loc_74DC:
00007C00 3008                       		move.w	a0,d0
00007C02 0440 D000                  		subi.w	#-$3000,d0
00007C06 EC48                       		lsr.w	#6,d0
00007C08 0240 007F                  		andi.w	#$7F,d0
00007C0C 1340 003D                  		move.b	d0,$3D(a1)
00007C10 137C 0000 0026             		move.b	#0,$26(a1)
00007C16 337C 0000 0012             		move.w	#0,$12(a1)
00007C1C 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007C22 0829 0001 0022             		btst	#1,$22(a1)
00007C28 6700                       		beq.s	loc_7512
00007C2A 2F08                       		move.l	a0,-(sp)
00007C2C 2049                       		movea.l	a1,a0
00007C2E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007C34 205F                       		movea.l	(sp)+,a0
00007C36                            
00007C36                            loc_7512:
00007C36 08E9 0003 0022             		bset	#3,$22(a1)
00007C3C 08E8 0003 0022             		bset	#3,$22(a0)
00007C42                            
00007C42                            locret_751E:
00007C42 4E75                       		rts	
00007C44                            ; End of function PlatformObject
00007C44                            
00007C44                            ; ---------------------------------------------------------------------------
00007C44                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007C44                            ; ---------------------------------------------------------------------------
00007C44                            
00007C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C44                            
00007C44                            
00007C44                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007C44 43F8 D000                  		lea	($FFFFD000).w,a1
00007C48 4A69 0012                  		tst.w	$12(a1)
00007C4C 6B00 FFF4                  		bmi.w	locret_751E
00007C50 3029 0008                  		move.w	8(a1),d0
00007C54 9068 0008                  		sub.w	8(a0),d0
00007C58 D041                       		add.w	d1,d0
00007C5A 6BE6                       		bmi.s	locret_751E
00007C5C D241                       		add.w	d1,d1
00007C5E B041                       		cmp.w	d1,d0
00007C60 64E0                       		bcc.s	locret_751E
00007C62 0828 0000 0001             		btst	#0,1(a0)
00007C68 6700                       		beq.s	loc_754A
00007C6A 4640                       		not.w	d0
00007C6C D041                       		add.w	d1,d0
00007C6E                            
00007C6E                            loc_754A:
00007C6E E248                       		lsr.w	#1,d0
00007C70 7600                       		moveq	#0,d3
00007C72 1632 0000                  		move.b	(a2,d0.w),d3
00007C76 3028 000C                  		move.w	$C(a0),d0
00007C7A 9043                       		sub.w	d3,d0
00007C7C 6000 FF1A                  		bra.w	Platform3
00007C80                            ; End of function SlopeObject
00007C80                            
00007C80                            
00007C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C80                            
00007C80                            
00007C80                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007C80 43F8 D000                  		lea	($FFFFD000).w,a1
00007C84 4A69 0012                  		tst.w	$12(a1)
00007C88 6B00 FFB8                  		bmi.w	locret_751E
00007C8C 3029 0008                  		move.w	8(a1),d0
00007C90 9068 0008                  		sub.w	8(a0),d0
00007C94 D041                       		add.w	d1,d0
00007C96 6B00 FFAA                  		bmi.w	locret_751E
00007C9A D241                       		add.w	d1,d1
00007C9C B041                       		cmp.w	d1,d0
00007C9E 6400 FFA2                  		bcc.w	locret_751E
00007CA2 3028 000C                  		move.w	$C(a0),d0
00007CA6 9043                       		sub.w	d3,d0
00007CA8 6000 FEEE                  		bra.w	Platform3
00007CAC                            ; End of function Obj15_Solid
00007CAC                            
00007CAC                            ; ===========================================================================
00007CAC                            
00007CAC                            Obj11_Action2:				; XREF: Obj11_Index
00007CAC 6100                       		bsr.s	Obj11_WalkOff
00007CAE 6100 0000                  		bsr.w	DisplaySprite
00007CB2 6000 0000                  		bra.w	Obj11_ChkDel
00007CB6                            
00007CB6                            ; ---------------------------------------------------------------------------
00007CB6                            ; Subroutine allowing Sonic to walk off a bridge
00007CB6                            ; ---------------------------------------------------------------------------
00007CB6                            
00007CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CB6                            
00007CB6                            
00007CB6                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007CB6 7200                       		moveq	#0,d1
00007CB8 1228 0028                  		move.b	$28(a0),d1
00007CBC E749                       		lsl.w	#3,d1
00007CBE 3401                       		move.w	d1,d2
00007CC0 5041                       		addq.w	#8,d1
00007CC2 6100                       		bsr.s	ExitPlatform2
00007CC4 6400                       		bcc.s	locret_75BE
00007CC6 E848                       		lsr.w	#4,d0
00007CC8 1140 003F                  		move.b	d0,$3F(a0)
00007CCC 1028 003E                  		move.b	$3E(a0),d0
00007CD0 0C00 0040                  		cmpi.b	#$40,d0
00007CD4 6700                       		beq.s	loc_75B6
00007CD6 5828 003E                  		addq.b	#4,$3E(a0)
00007CDA                            
00007CDA                            loc_75B6:
00007CDA 6100 0000                  		bsr.w	Obj11_Bend
00007CDE 6100 0000                  		bsr.w	Obj11_MoveSonic
00007CE2                            
00007CE2                            locret_75BE:
00007CE2 4E75                       		rts	
00007CE4                            ; End of function Obj11_WalkOff
00007CE4                            
00007CE4                            ; ---------------------------------------------------------------------------
00007CE4                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007CE4                            ; ---------------------------------------------------------------------------
00007CE4                            
00007CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CE4                            
00007CE4                            
00007CE4                            ExitPlatform:
00007CE4 3401                       		move.w	d1,d2
00007CE6                            
00007CE6                            ExitPlatform2:
00007CE6 D442                       		add.w	d2,d2
00007CE8 43F8 D000                  		lea	($FFFFD000).w,a1
00007CEC 0829 0001 0022             		btst	#1,$22(a1)
00007CF2 6600                       		bne.s	loc_75E0
00007CF4 3029 0008                  		move.w	8(a1),d0
00007CF8 9068 0008                  		sub.w	8(a0),d0
00007CFC D041                       		add.w	d1,d0
00007CFE 6B00                       		bmi.s	loc_75E0
00007D00 B042                       		cmp.w	d2,d0
00007D02 6500                       		bcs.s	locret_75F2
00007D04                            
00007D04                            loc_75E0:
00007D04 08A9 0003 0022             		bclr	#3,$22(a1)
00007D0A 117C 0002 0024             		move.b	#2,$24(a0)
00007D10 08A8 0003 0022             		bclr	#3,$22(a0)
00007D16                            
00007D16                            locret_75F2:
00007D16 4E75                       		rts	
00007D18                            ; End of function ExitPlatform
00007D18                            
00007D18                            
00007D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D18                            
00007D18                            
00007D18                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007D18 7000                       		moveq	#0,d0
00007D1A 1028 003F                  		move.b	$3F(a0),d0
00007D1E 1030 0029                  		move.b	$29(a0,d0.w),d0
00007D22 ED48                       		lsl.w	#6,d0
00007D24 0680 00FF D000             		addi.l	#$FFD000,d0
00007D2A 2440                       		movea.l	d0,a2
00007D2C 43F8 D000                  		lea	($FFFFD000).w,a1
00007D30 302A 000C                  		move.w	$C(a2),d0
00007D34 5140                       		subq.w	#8,d0
00007D36 7200                       		moveq	#0,d1
00007D38 1229 0016                  		move.b	$16(a1),d1
00007D3C 9041                       		sub.w	d1,d0
00007D3E 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007D42 4E75                       		rts	
00007D44                            ; End of function Obj11_MoveSonic
00007D44                            
00007D44                            
00007D44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D44                            
00007D44                            
00007D44                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007D44 1028 003E                  		move.b	$3E(a0),d0
00007D48 6100 ABA2                  		bsr.w	CalcSine
00007D4C 3800                       		move.w	d0,d4
00007D4E 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007D54 7000                       		moveq	#0,d0
00007D56 1028 0028                  		move.b	$28(a0),d0
00007D5A E948                       		lsl.w	#4,d0
00007D5C 7600                       		moveq	#0,d3
00007D5E 1628 003F                  		move.b	$3F(a0),d3
00007D62 3403                       		move.w	d3,d2
00007D64 D640                       		add.w	d0,d3
00007D66 7A00                       		moveq	#0,d5
00007D68 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007D6E 1A35 3000                  		move.b	(a5,d3.w),d5
00007D72 0243 000F                  		andi.w	#$F,d3
00007D76 E94B                       		lsl.w	#4,d3
00007D78 47F4 3000                  		lea	(a4,d3.w),a3
00007D7C 45E8 0029                  		lea	$29(a0),a2
00007D80                            
00007D80                            loc_765C:
00007D80 7000                       		moveq	#0,d0
00007D82 101A                       		move.b	(a2)+,d0
00007D84 ED48                       		lsl.w	#6,d0
00007D86 0680 00FF D000             		addi.l	#$FFD000,d0
00007D8C 2240                       		movea.l	d0,a1
00007D8E 7000                       		moveq	#0,d0
00007D90 101B                       		move.b	(a3)+,d0
00007D92 5240                       		addq.w	#1,d0
00007D94 C0C5                       		mulu.w	d5,d0
00007D96 C0C4                       		mulu.w	d4,d0
00007D98 4840                       		swap	d0
00007D9A D069 003C                  		add.w	$3C(a1),d0
00007D9E 3340 000C                  		move.w	d0,$C(a1)
00007DA2 51CA FFDC                  		dbf	d2,loc_765C
00007DA6 7000                       		moveq	#0,d0
00007DA8 1028 0028                  		move.b	$28(a0),d0
00007DAC 7600                       		moveq	#0,d3
00007DAE 1628 003F                  		move.b	$3F(a0),d3
00007DB2 5203                       		addq.b	#1,d3
00007DB4 9600                       		sub.b	d0,d3
00007DB6 4403                       		neg.b	d3
00007DB8 6B00                       		bmi.s	locret_76CA
00007DBA 3403                       		move.w	d3,d2
00007DBC E94B                       		lsl.w	#4,d3
00007DBE 47F4 3000                  		lea	(a4,d3.w),a3
00007DC2 D6C2                       		adda.w	d2,a3
00007DC4 5342                       		subq.w	#1,d2
00007DC6 6500                       		bcs.s	locret_76CA
00007DC8                            
00007DC8                            loc_76A4:
00007DC8 7000                       		moveq	#0,d0
00007DCA 101A                       		move.b	(a2)+,d0
00007DCC ED48                       		lsl.w	#6,d0
00007DCE 0680 00FF D000             		addi.l	#$FFD000,d0
00007DD4 2240                       		movea.l	d0,a1
00007DD6 7000                       		moveq	#0,d0
00007DD8 1023                       		move.b	-(a3),d0
00007DDA 5240                       		addq.w	#1,d0
00007DDC C0C5                       		mulu.w	d5,d0
00007DDE C0C4                       		mulu.w	d4,d0
00007DE0 4840                       		swap	d0
00007DE2 D069 003C                  		add.w	$3C(a1),d0
00007DE6 3340 000C                  		move.w	d0,$C(a1)
00007DEA 51CA FFDC                  		dbf	d2,loc_76A4
00007DEE                            
00007DEE                            locret_76CA:
00007DEE 4E75                       		rts	
00007DF0                            ; End of function Obj11_Bend
00007DF0                            
00007DF0                            ; ===========================================================================
00007DF0                            ; ---------------------------------------------------------------------------
00007DF0                            ; GHZ bridge-bending data
00007DF0                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007DF0                            ; ---------------------------------------------------------------------------
00007DF0                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007F00                            		even
00007F00                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008000                            		even
00008000                            
00008000                            ; ===========================================================================
00008000                            
00008000                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008000 3028 0008                  		move.w	8(a0),d0
00008004 0240 FF80                  		andi.w	#$FF80,d0
00008008 3238 F700                  		move.w	($FFFFF700).w,d1
0000800C 0441 0080                  		subi.w	#$80,d1
00008010 0241 FF80                  		andi.w	#$FF80,d1
00008014 9041                       		sub.w	d1,d0
00008016 0C40 0280                  		cmpi.w	#$280,d0
0000801A 6200 0000                  		bhi.w	Obj11_DelAll
0000801E 4E75                       		rts	
00008020                            ; ===========================================================================
00008020                            
00008020                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008020 7400                       		moveq	#0,d2
00008022 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008026 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008028 5302                       		subq.b	#1,d2		; subtract 1
0000802A 6500                       		bcs.s	Obj11_Delete
0000802C                            
0000802C                            Obj11_DelLoop:
0000802C 7000                       		moveq	#0,d0
0000802E 101A                       		move.b	(a2)+,d0
00008030 ED48                       		lsl.w	#6,d0
00008032 0680 00FF D000             		addi.l	#$FFD000,d0
00008038 2240                       		movea.l	d0,a1
0000803A B048                       		cmp.w	a0,d0
0000803C 6700                       		beq.s	loc_791E
0000803E 6100 0000                  		bsr.w	DeleteObject2
00008042                            
00008042                            loc_791E:
00008042 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008046                            
00008046                            Obj11_Delete:
00008046 6100 0000                  		bsr.w	DeleteObject
0000804A 4E75                       		rts	
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj11_Delete2:				; XREF: Obj11_Index
0000804C 6100 0000                  		bsr.w	DeleteObject
00008050 4E75                       		rts	
00008052                            ; ===========================================================================
00008052                            
00008052                            Obj11_Display2:				; XREF: Obj11_Index
00008052 6100 0000                  		bsr.w	DisplaySprite
00008056 4E75                       		rts	
00008058                            ; ===========================================================================
00008058                            ; ---------------------------------------------------------------------------
00008058                            ; Sprite mappings - GHZ	bridge
00008058                            ; ---------------------------------------------------------------------------
00008058                            Map_obj11:
00008058                            	include "_maps\obj11.asm"
00008058                            ; ---------------------------------------------------------------------------
00008058                            ; Sprite mappings - GHZ	bridge
00008058                            ; ---------------------------------------------------------------------------
00008058 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000805C 0000                       		dc.w byte_794B-Map_obj11
0000805E 01                         byte_793A:	dc.b 1
0000805F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008064 02                         byte_7940:	dc.b 2
00008065 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000806A 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000806F 01                         byte_794B:	dc.b 1
00008070 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008076 00                         		even
00008076 00                         		even
00008076                            
00008076                            ; ===========================================================================
00008076                            ; ---------------------------------------------------------------------------
00008076                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008076                            ;	    - spiked ball on a chain (SBZ)
00008076                            ; ---------------------------------------------------------------------------
00008076                            
00008076                            Obj15:					; XREF: Obj_Index
00008076 7000                       		moveq	#0,d0
00008078 1028 0024                  		move.b	$24(a0),d0
0000807C 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008080 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008084                            ; ===========================================================================
00008084 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008088 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000808C 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008090 0000                       		dc.w Obj15_Action-Obj15_Index
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Main:				; XREF: Obj15_Index
00008092 5428 0024                  		addq.b	#2,$24(a0)
00008096 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000809E 317C 4380 0002             		move.w	#$4380,2(a0)
000080A4 117C 0004 0001             		move.b	#4,1(a0)
000080AA 117C 0003 0018             		move.b	#3,$18(a0)
000080B0 117C 0018 0019             		move.b	#$18,$19(a0)
000080B6 117C 0008 0016             		move.b	#8,$16(a0)
000080BC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000080C2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000080C8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000080CE 6600                       		bne.s	Obj15_NotSLZ
000080D0 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000080D8 317C 43DC 0002             		move.w	#$43DC,2(a0)
000080DE 117C 0020 0019             		move.b	#$20,$19(a0)
000080E4 117C 0010 0016             		move.b	#$10,$16(a0)
000080EA 117C 0099 0020             		move.b	#$99,$20(a0)
000080F0                            
000080F0                            Obj15_NotSLZ:
000080F0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000080F6 6600                       		bne.s	Obj15_SetLength
000080F8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008100 317C 0391 0002             		move.w	#$391,2(a0)
00008106 117C 0018 0019             		move.b	#$18,$19(a0)
0000810C 117C 0018 0016             		move.b	#$18,$16(a0)
00008112 117C 0086 0020             		move.b	#$86,$20(a0)
00008118 117C 000C 0024             		move.b	#$C,$24(a0)
0000811E                            
0000811E                            Obj15_SetLength:
0000811E 1810                       		move.b	0(a0),d4
00008120 7200                       		moveq	#0,d1
00008122 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008126 1212                       		move.b	(a2),d1		; move a2 to d1
00008128 3F01                       		move.w	d1,-(sp)
0000812A 0241 000F                  		andi.w	#$F,d1
0000812E 14FC 0000                  		move.b	#0,(a2)+
00008132 3601                       		move.w	d1,d3
00008134 E94B                       		lsl.w	#4,d3
00008136 5003                       		addq.b	#8,d3
00008138 1143 003C                  		move.b	d3,$3C(a0)
0000813C 5103                       		subq.b	#8,d3
0000813E 4A28 001A                  		tst.b	$1A(a0)
00008142 6700                       		beq.s	Obj15_MakeChain
00008144 5003                       		addq.b	#8,d3
00008146 5341                       		subq.w	#1,d1
00008148                            
00008148                            Obj15_MakeChain:
00008148 6100 0000                  		bsr.w	SingleObjLoad
0000814C 6600                       		bne.s	loc_7A92
0000814E 5228 0028                  		addq.b	#1,$28(a0)
00008152 3A09                       		move.w	a1,d5
00008154 0445 D000                  		subi.w	#-$3000,d5
00008158 EC4D                       		lsr.w	#6,d5
0000815A 0245 007F                  		andi.w	#$7F,d5
0000815E 14C5                       		move.b	d5,(a2)+
00008160 137C 000A 0024             		move.b	#$A,$24(a1)
00008166 1284                       		move.b	d4,0(a1)	; load swinging	object
00008168 2368 0004 0004             		move.l	4(a0),4(a1)
0000816E 3368 0002 0002             		move.w	2(a0),2(a1)
00008174 08A9 0006 0002             		bclr	#6,2(a1)
0000817A 137C 0004 0001             		move.b	#4,1(a1)
00008180 137C 0004 0018             		move.b	#4,$18(a1)
00008186 137C 0008 0019             		move.b	#8,$19(a1)
0000818C 137C 0001 001A             		move.b	#1,$1A(a1)
00008192 1343 003C                  		move.b	d3,$3C(a1)
00008196 0403 0010                  		subi.b	#$10,d3
0000819A 6400                       		bcc.s	loc_7A8E
0000819C 137C 0002 001A             		move.b	#2,$1A(a1)
000081A2 137C 0003 0018             		move.b	#3,$18(a1)
000081A8 08E9 0006 0002             		bset	#6,2(a1)
000081AE                            
000081AE                            loc_7A8E:
000081AE 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000081B2                            
000081B2                            loc_7A92:
000081B2 3A08                       		move.w	a0,d5
000081B4 0445 D000                  		subi.w	#-$3000,d5
000081B8 EC4D                       		lsr.w	#6,d5
000081BA 0245 007F                  		andi.w	#$7F,d5
000081BE 14C5                       		move.b	d5,(a2)+
000081C0 317C 4080 0026             		move.w	#$4080,$26(a0)
000081C6 317C FE00 003E             		move.w	#-$200,$3E(a0)
000081CC 321F                       		move.w	(sp)+,d1
000081CE 0801 0004                  		btst	#4,d1		; is object type $8X ?
000081D2 6700                       		beq.s	loc_7AD4	; if not, branch
000081D4 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000081DC 317C 43AA 0002             		move.w	#$43AA,2(a0)
000081E2 117C 0001 001A             		move.b	#1,$1A(a0)
000081E8 117C 0002 0018             		move.b	#2,$18(a0)
000081EE 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000081F4                            
000081F4                            loc_7AD4:
000081F4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000081FA 6700                       		beq.s	Obj15_Action	; if yes, branch
000081FC                            
000081FC                            Obj15_SetSolid:				; XREF: Obj15_Index
000081FC 7200                       		moveq	#0,d1
000081FE 1228 0019                  		move.b	$19(a0),d1
00008202 7600                       		moveq	#0,d3
00008204 1628 0016                  		move.b	$16(a0),d3
00008208 6100 FA76                  		bsr.w	Obj15_Solid
0000820C                            
0000820C                            Obj15_Action:				; XREF: Obj15_Index
0000820C 6100 0000                  		bsr.w	Obj15_Move
00008210 6100 0000                  		bsr.w	DisplaySprite
00008214 6000 0000                  		bra.w	Obj15_ChkDel
00008218                            ; ===========================================================================
00008218                            
00008218                            Obj15_Action2:				; XREF: Obj15_Index
00008218 7200                       		moveq	#0,d1
0000821A 1228 0019                  		move.b	$19(a0),d1
0000821E 6100 FAC4                  		bsr.w	ExitPlatform
00008222 3F28 0008                  		move.w	8(a0),-(sp)
00008226 6100 0000                  		bsr.w	Obj15_Move
0000822A 341F                       		move.w	(sp)+,d2
0000822C 7600                       		moveq	#0,d3
0000822E 1628 0016                  		move.b	$16(a0),d3
00008232 5203                       		addq.b	#1,d3
00008234 6100 0000                  		bsr.w	MvSonicOnPtfm
00008238 6100 0000                  		bsr.w	DisplaySprite
0000823C 6000 0000                  		bra.w	Obj15_ChkDel
00008240                            
00008240 4E75                       		rts
00008242                            
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Subroutine to	change Sonic's position with a platform
00008242                            ; ---------------------------------------------------------------------------
00008242                            
00008242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008242                            
00008242                            
00008242                            MvSonicOnPtfm:
00008242 43F8 D000                  		lea	($FFFFD000).w,a1
00008246 3028 000C                  		move.w	$C(a0),d0
0000824A 9043                       		sub.w	d3,d0
0000824C 6000                       		bra.s	MvSonic2
0000824E                            ; End of function MvSonicOnPtfm
0000824E                            
0000824E                            ; ---------------------------------------------------------------------------
0000824E                            ; Subroutine to	change Sonic's position with a platform
0000824E                            ; ---------------------------------------------------------------------------
0000824E                            
0000824E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824E                            
0000824E                            
0000824E                            MvSonicOnPtfm2:
0000824E 43F8 D000                  		lea	($FFFFD000).w,a1
00008252 3028 000C                  		move.w	$C(a0),d0
00008256 0440 0009                  		subi.w	#9,d0
0000825A                            
0000825A                            MvSonic2:
0000825A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000825E 6B00                       		bmi.s	locret_7B62
00008260 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008266 6400                       		bcc.s	locret_7B62
00008268 4A78 FE08                  		tst.w	($FFFFFE08).w
0000826C 6600                       		bne.s	locret_7B62
0000826E 9468 0008                  		sub.w	8(a0),d2
00008272 9569 0008                  		sub.w	d2,8(a1)
00008276 7200                       		moveq	#0,d1
00008278 1229 0016                  		move.b	$16(a1),d1
0000827C 9041                       		sub.w	d1,d0
0000827E B069 000C                  		cmp.w	$C(a1),d0
00008282 6600                       		bne.s	@frustrated
00008284 4A42                       		tst.w	d2
00008286 6600                       		bne.s	@frustrated
00008288 3340 000C                  		move.w	d0,$C(a1)	
0000828C 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008290 6700                       		beq.s	@resetwaittimer
00008292 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008296 6600                       		bne.s	locret_7B62
00008298 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
0000829C 6000                       		bra.s	@frustrated2
0000829E                            
0000829E                            	@frustrated:
0000829E 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
000082A4 3340 000C                  		move.w	d0,$C(a1)
000082A8 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
000082AC 6600                       		bne.s	@subtract
000082AE                            
000082AE                            	@frustrated2:
000082AE 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
000082B4 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
000082BA 4E75                       		rts
000082BC                            
000082BC                            	@subtract:
000082BC 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
000082C0 4E75                       		rts
000082C2                            
000082C2                            	@resetwaittimer:
000082C2 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
000082C8                            
000082C8                            locret_7B62:
000082C8 4E75                       		rts	
000082CA                            ; End of function MvSonicOnPtfm2
000082CA                            
000082CA                            
000082CA                            CheckIfMoving:
000082CA                            
000082CA                            
000082CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082CA                            
000082CA                            
000082CA                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000082CA 1038 FE78                  		move.b	($FFFFFE78).w,d0
000082CE 323C 0080                  		move.w	#$80,d1
000082D2 0828 0000 0022             		btst	#0,$22(a0)
000082D8 6700                       		beq.s	loc_7B78
000082DA 4440                       		neg.w	d0
000082DC D041                       		add.w	d1,d0
000082DE                            
000082DE                            loc_7B78:
000082DE 6000                       		bra.s	Obj15_Move2
000082E0                            ; End of function Obj15_Move
000082E0                            
000082E0                            
000082E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E0                            
000082E0                            
000082E0                            Obj48_Move:				; XREF: Obj48_Display2
000082E0 4A28 003D                  		tst.b	$3D(a0)
000082E4 6600                       		bne.s	loc_7B9C
000082E6 3028 003E                  		move.w	$3E(a0),d0
000082EA 5040                       		addq.w	#8,d0
000082EC 3140 003E                  		move.w	d0,$3E(a0)
000082F0 D168 0026                  		add.w	d0,$26(a0)
000082F4 0C40 0200                  		cmpi.w	#$200,d0
000082F8 6600                       		bne.s	loc_7BB6
000082FA 117C 0001 003D             		move.b	#1,$3D(a0)
00008300 6000                       		bra.s	loc_7BB6
00008302                            ; ===========================================================================
00008302                            
00008302                            loc_7B9C:
00008302 3028 003E                  		move.w	$3E(a0),d0
00008306 5140                       		subq.w	#8,d0
00008308 3140 003E                  		move.w	d0,$3E(a0)
0000830C D168 0026                  		add.w	d0,$26(a0)
00008310 0C40 FE00                  		cmpi.w	#-$200,d0
00008314 6600                       		bne.s	loc_7BB6
00008316 117C 0000 003D             		move.b	#0,$3D(a0)
0000831C                            
0000831C                            loc_7BB6:
0000831C 1028 0026                  		move.b	$26(a0),d0
00008320                            ; End of function Obj48_Move
00008320                            
00008320                            
00008320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008320                            
00008320                            
00008320                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008320 6100 A5CA                  		bsr.w	CalcSine
00008324 3428 0038                  		move.w	$38(a0),d2
00008328 3628 003A                  		move.w	$3A(a0),d3
0000832C 45E8 0028                  		lea	$28(a0),a2
00008330 7C00                       		moveq	#0,d6
00008332 1C1A                       		move.b	(a2)+,d6
00008334                            
00008334                            loc_7BCE:
00008334 7800                       		moveq	#0,d4
00008336 181A                       		move.b	(a2)+,d4
00008338 ED4C                       		lsl.w	#6,d4
0000833A 0684 00FF D000             		addi.l	#$FFD000,d4
00008340 2244                       		movea.l	d4,a1
00008342 7800                       		moveq	#0,d4
00008344 1829 003C                  		move.b	$3C(a1),d4
00008348 2A04                       		move.l	d4,d5
0000834A C9C0                       		muls.w	d0,d4
0000834C E084                       		asr.l	#8,d4
0000834E CBC1                       		muls.w	d1,d5
00008350 E085                       		asr.l	#8,d5
00008352 D842                       		add.w	d2,d4
00008354 DA43                       		add.w	d3,d5
00008356 3344 000C                  		move.w	d4,$C(a1)
0000835A 3345 0008                  		move.w	d5,8(a1)
0000835E 51CE FFD4                  		dbf	d6,loc_7BCE
00008362 4E75                       		rts	
00008364                            ; End of function Obj15_Move2
00008364                            
00008364                            ; ===========================================================================
00008364                            
00008364                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008364 3028 003A                  		move.w	$3A(a0),d0
00008368 0240 FF80                  		andi.w	#$FF80,d0
0000836C 3238 F700                  		move.w	($FFFFF700).w,d1
00008370 0441 0080                  		subi.w	#$80,d1
00008374 0241 FF80                  		andi.w	#$FF80,d1
00008378 9041                       		sub.w	d1,d0
0000837A 0C40 0280                  		cmpi.w	#$280,d0
0000837E 6200 0000                  		bhi.w	Obj15_DelAll
00008382 4E75                       		rts	
00008384                            ; ===========================================================================
00008384                            
00008384                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008384 7400                       		moveq	#0,d2
00008386 45E8 0028                  		lea	$28(a0),a2
0000838A 141A                       		move.b	(a2)+,d2
0000838C                            
0000838C                            Obj15_DelLoop:
0000838C 7000                       		moveq	#0,d0
0000838E 101A                       		move.b	(a2)+,d0
00008390 ED48                       		lsl.w	#6,d0
00008392 0680 00FF D000             		addi.l	#$FFD000,d0
00008398 2240                       		movea.l	d0,a1
0000839A 6100 0000                  		bsr.w	DeleteObject2
0000839E 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000083A2 4E75                       		rts	
000083A4                            ; ===========================================================================
000083A4                            
000083A4                            Obj15_Delete:				; XREF: Obj15_Index
000083A4 6100 0000                  		bsr.w	DeleteObject
000083A8 4E75                       		rts	
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Obj15_Display:				; XREF: Obj15_Index
000083AA 6000 0000                  		bra.w	DisplaySprite
000083AE                            ; ===========================================================================
000083AE                            ; ---------------------------------------------------------------------------
000083AE                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000083AE                            ; ---------------------------------------------------------------------------
000083AE                            Map_obj15:
000083AE                            	include "_maps\obj15ghz.asm"
000083AE                            ; ---------------------------------------------------------------------------
000083AE                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000083AE                            ; ---------------------------------------------------------------------------
000083AE 0000                       		dc.w byte_7C4E-Map_obj15
000083B0 0000                       		dc.w byte_7C59-Map_obj15
000083B2 0000                       		dc.w byte_7C5F-Map_obj15
000083B4 02                         byte_7C4E:	dc.b 2
000083B5 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000083BA F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000083BF 01                         byte_7C59:	dc.b 1
000083C0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083C5 01                         byte_7C5F:	dc.b 1
000083C6 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000083CC 00                         		even
000083CC 00                         		even
000083CC                            
000083CC                            ; ---------------------------------------------------------------------------
000083CC                            ; Sprite mappings - SLZ	swinging platforms
000083CC                            ; ---------------------------------------------------------------------------
000083CC                            Map_obj15a:
000083CC                            	include "_maps\obj15slz.asm"
000083CC                            ; ---------------------------------------------------------------------------
000083CC                            ; Sprite mappings - SLZ	swinging platforms
000083CC                            ; ---------------------------------------------------------------------------
000083CC 0000                       		dc.w byte_7C6C-Map_obj15a
000083CE 0000                       		dc.w byte_7C95-Map_obj15a
000083D0 0000                       		dc.w byte_7C9B-Map_obj15a
000083D2 08                         byte_7C6C:	dc.b 8
000083D3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000083D8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000083DD F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000083E2 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000083E7 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000083EC 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000083F1 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000083F6 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000083FB 01                         byte_7C95:	dc.b 1
000083FC F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008401 01                         byte_7C9B:	dc.b 1
00008402 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008408 00                         		even
00008408 00                         		even
00008408                            
00008408                            ; ===========================================================================
00008408                            ; ---------------------------------------------------------------------------
00008408                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008408                            ; ---------------------------------------------------------------------------
00008408                            
00008408                            Obj17:					; XREF: Obj_Index
00008408 7000                       		moveq	#0,d0
0000840A 1028 0024                  		move.b	$24(a0),d0
0000840E 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008412 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008416                            ; ===========================================================================
00008416 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008418 0000                       		dc.w Obj17_Action-Obj17_Index
0000841A 0000                       		dc.w Obj17_Action-Obj17_Index
0000841C 0000                       		dc.w Obj17_Delete-Obj17_Index
0000841E 0000                       		dc.w Obj17_Display-Obj17_Index
00008420                            ; ===========================================================================
00008420                            
00008420                            Obj17_Main:				; XREF: Obj17_Index
00008420 5428 0024                  		addq.b	#2,$24(a0)
00008424 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000842C 317C 4398 0002             		move.w	#$4398,2(a0)
00008432 117C 0007 0022             		move.b	#7,$22(a0)
00008438 117C 0004 0001             		move.b	#4,1(a0)
0000843E 117C 0003 0018             		move.b	#3,$18(a0)
00008444 117C 0008 0019             		move.b	#8,$19(a0)
0000844A 3428 000C                  		move.w	$C(a0),d2
0000844E 3628 0008                  		move.w	8(a0),d3
00008452 1810                       		move.b	0(a0),d4
00008454 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008458 7200                       		moveq	#0,d1
0000845A 1212                       		move.b	(a2),d1		; move a2 to d1
0000845C 14FC 0000                  		move.b	#0,(a2)+
00008460 3001                       		move.w	d1,d0
00008462 E248                       		lsr.w	#1,d0
00008464 E948                       		lsl.w	#4,d0
00008466 9640                       		sub.w	d0,d3
00008468 5501                       		subq.b	#2,d1
0000846A 6500                       		bcs.s	Obj17_Action
0000846C 7C00                       		moveq	#0,d6
0000846E                            
0000846E                            Obj17_MakeHelix:
0000846E 6100 0000                  		bsr.w	SingleObjLoad
00008472 6600                       		bne.s	Obj17_Action
00008474 5228 0028                  		addq.b	#1,$28(a0)
00008478 3A09                       		move.w	a1,d5
0000847A 0445 D000                  		subi.w	#$D000,d5
0000847E EC4D                       		lsr.w	#6,d5
00008480 0245 007F                  		andi.w	#$7F,d5
00008484 14C5                       		move.b	d5,(a2)+
00008486 137C 0008 0024             		move.b	#8,$24(a1)
0000848C 1284                       		move.b	d4,0(a1)
0000848E 3342 000C                  		move.w	d2,$C(a1)
00008492 3343 0008                  		move.w	d3,8(a1)
00008496 2368 0004 0004             		move.l	4(a0),4(a1)
0000849C 337C 4398 0002             		move.w	#$4398,2(a1)
000084A2 137C 0004 0001             		move.b	#4,1(a1)
000084A8 137C 0003 0018             		move.b	#3,$18(a1)
000084AE 137C 0008 0019             		move.b	#8,$19(a1)
000084B4 1346 003E                  		move.b	d6,$3E(a1)
000084B8 5206                       		addq.b	#1,d6
000084BA 0206 0007                  		andi.b	#7,d6
000084BE 0643 0010                  		addi.w	#$10,d3
000084C2 B668 0008                  		cmp.w	8(a0),d3
000084C6 6600                       		bne.s	loc_7D78
000084C8 1146 003E                  		move.b	d6,$3E(a0)
000084CC 5206                       		addq.b	#1,d6
000084CE 0206 0007                  		andi.b	#7,d6
000084D2 0643 0010                  		addi.w	#$10,d3
000084D6 5228 0028                  		addq.b	#1,$28(a0)
000084DA                            
000084DA                            loc_7D78:
000084DA 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000084DE                            
000084DE                            Obj17_Action:				; XREF: Obj17_Index
000084DE 6100 0000                  		bsr.w	Obj17_RotateSpikes
000084E2 6100 0000                  		bsr.w	DisplaySprite
000084E6 6000 0000                  		bra.w	Obj17_ChkDel
000084EA                            
000084EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084EA                            
000084EA                            
000084EA                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000084EA 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000084EE 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000084F4 D028 003E                  		add.b	$3E(a0),d0
000084F8 0200 0007                  		andi.b	#7,d0
000084FC 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008500 6600                       		bne.s	locret_7DA6
00008502 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008508                            
00008508                            locret_7DA6:
00008508 4E75                       		rts	
0000850A                            ; End of function Obj17_RotateSpikes
0000850A                            
0000850A                            ; ===========================================================================
0000850A                            
0000850A                            Obj17_ChkDel:				; XREF: Obj17_Action
0000850A 3028 0008                  		move.w	8(a0),d0
0000850E 0240 FF80                  		andi.w	#$FF80,d0
00008512 3238 F700                  		move.w	($FFFFF700).w,d1
00008516 0441 0080                  		subi.w	#$80,d1
0000851A 0241 FF80                  		andi.w	#$FF80,d1
0000851E 9041                       		sub.w	d1,d0
00008520 0C40 0280                  		cmpi.w	#$280,d0
00008524 6200 0000                  		bhi.w	Obj17_DelAll
00008528 4E75                       		rts	
0000852A                            ; ===========================================================================
0000852A                            
0000852A                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000852A 7400                       		moveq	#0,d2
0000852C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008530 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008532 5502                       		subq.b	#2,d2
00008534 6500                       		bcs.s	Obj17_Delete
00008536                            
00008536                            Obj17_DelLoop:
00008536 7000                       		moveq	#0,d0
00008538 101A                       		move.b	(a2)+,d0
0000853A ED48                       		lsl.w	#6,d0
0000853C 0680 00FF D000             		addi.l	#$FFD000,d0
00008542 2240                       		movea.l	d0,a1
00008544 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008548 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000854C                            
0000854C                            Obj17_Delete:				; XREF: Obj17_Index
0000854C 6100 0000                  		bsr.w	DeleteObject
00008550 4E75                       		rts	
00008552                            ; ===========================================================================
00008552                            
00008552                            Obj17_Display:				; XREF: Obj17_Index
00008552 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008556 6000 0000                  		bra.w	DisplaySprite
0000855A                            ; ===========================================================================
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            Map_obj17:
0000855A                            	include "_maps\obj17.asm"
0000855A                            ; ---------------------------------------------------------------------------
0000855A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000855A                            ; ---------------------------------------------------------------------------
0000855A 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000855E 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008562 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008566 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000856A 01                         byte_7E08:	dc.b 1
0000856B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008570 01                         byte_7E0E:	dc.b 1
00008571 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008576 01                         byte_7E14:	dc.b 1
00008577 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000857C 01                         byte_7E1A:	dc.b 1
0000857D FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008582 01                         byte_7E20:	dc.b 1
00008583 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008588 01                         byte_7E26:	dc.b 1
00008589 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000858E 01                         byte_7E2C:	dc.b 1
0000858F F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008594                            		even
00008594                            		even
00008594                            
00008594                            ; ===========================================================================
00008594                            ; ---------------------------------------------------------------------------
00008594                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008594                            ; ---------------------------------------------------------------------------
00008594                            
00008594                            Obj18:					; XREF: Obj_Index
00008594 7000                       		moveq	#0,d0
00008596 1028 0024                  		move.b	$24(a0),d0
0000859A 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000859E 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000085A2                            ; ===========================================================================
000085A2 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000085A4 0000                       		dc.w Obj18_Solid-Obj18_Index
000085A6 0000                       		dc.w Obj18_Action2-Obj18_Index
000085A8 0000                       		dc.w Obj18_Delete-Obj18_Index
000085AA 0000                       		dc.w Obj18_Action-Obj18_Index
000085AC                            ; ===========================================================================
000085AC                            
000085AC                            Obj18_Main:				; XREF: Obj18_Index
000085AC 5428 0024                  		addq.b	#2,$24(a0)
000085B0 317C 4000 0002             		move.w	#$4000,2(a0)
000085B6 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000085BE 117C 0020 0019             		move.b	#$20,$19(a0)
000085C4 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000085CA 6600                       		bne.s	Obj18_NotSYZ
000085CC 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000085D4 117C 0020 0019             		move.b	#$20,$19(a0)
000085DA                            
000085DA                            Obj18_NotSYZ:
000085DA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000085E0 6600                       		bne.s	Obj18_NotSLZ
000085E2 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000085EA 117C 0020 0019             		move.b	#$20,$19(a0)
000085F0 317C 4000 0002             		move.w	#$4000,2(a0)
000085F6 117C 0003 0028             		move.b	#3,$28(a0)
000085FC                            
000085FC                            Obj18_NotSLZ:
000085FC 117C 0004 0001             		move.b	#4,1(a0)
00008602 117C 0004 0018             		move.b	#4,$18(a0)
00008608 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000860E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008614 3168 0008 0032             		move.w	8(a0),$32(a0)
0000861A 317C 0080 0026             		move.w	#$80,$26(a0)
00008620 7200                       		moveq	#0,d1
00008622 1028 0028                  		move.b	$28(a0),d0
00008626 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000862A 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000862C 5201                       		addq.b	#1,d1		; use frame #1
0000862E 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008634                            
00008634                            Obj18_SetFrame:
00008634 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008638                            
00008638                            Obj18_Solid:				; XREF: Obj18_Index
00008638 4A28 0038                  		tst.b	$38(a0)
0000863C 6700                       		beq.s	loc_7EE0
0000863E 5928 0038                  		subq.b	#4,$38(a0)
00008642                            
00008642                            loc_7EE0:
00008642 7200                       		moveq	#0,d1
00008644 1228 0019                  		move.b	$19(a0),d1
00008648 6100 F526                  		bsr.w	PlatformObject
0000864C                            
0000864C                            Obj18_Action:				; XREF: Obj18_Index
0000864C 6100 0000                  		bsr.w	Obj18_Move
00008650 6100 0000                  		bsr.w	Obj18_Nudge
00008654 6100 0000                  		bsr.w	DisplaySprite
00008658 6000 0000                  		bra.w	Obj18_ChkDel
0000865C                            ; ===========================================================================
0000865C                            
0000865C                            Obj18_Action2:				; XREF: Obj18_Index
0000865C 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008662 6700                       		beq.s	loc_7F06
00008664 5828 0038                  		addq.b	#4,$38(a0)
00008668                            
00008668                            loc_7F06:
00008668 7200                       		moveq	#0,d1
0000866A 1228 0019                  		move.b	$19(a0),d1
0000866E 6100 F674                  		bsr.w	ExitPlatform
00008672 3F28 0008                  		move.w	8(a0),-(sp)
00008676 6100 0000                  		bsr.w	Obj18_Move
0000867A 6100 0000                  		bsr.w	Obj18_Nudge
0000867E 341F                       		move.w	(sp)+,d2
00008680 6100 FBCC                  		bsr.w	MvSonicOnPtfm2
00008684 6100 0000                  		bsr.w	DisplaySprite
00008688 6000 0000                  		bra.w	Obj18_ChkDel
0000868C                            
0000868C 4E75                       		rts
0000868E                            
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            ; Subroutine to	move platform slightly when you	stand on it
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            
0000868E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000868E                            
0000868E                            
0000868E                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000868E 1028 0038                  		move.b	$38(a0),d0
00008692 6100 A258                  		bsr.w	CalcSine
00008696 323C 0400                  		move.w	#$400,d1
0000869A C1C1                       		muls.w	d1,d0
0000869C 4840                       		swap	d0
0000869E D068 002C                  		add.w	$2C(a0),d0
000086A2 3140 000C                  		move.w	d0,$C(a0)
000086A6 4E75                       		rts	
000086A8                            ; End of function Obj18_Nudge
000086A8                            
000086A8                            ; ---------------------------------------------------------------------------
000086A8                            ; Subroutine to	move platforms
000086A8                            ; ---------------------------------------------------------------------------
000086A8                            
000086A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086A8                            
000086A8                            
000086A8                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000086A8 7000                       		moveq	#0,d0
000086AA 1028 0028                  		move.b	$28(a0),d0
000086AE 0240 000F                  		andi.w	#$F,d0
000086B2 D040                       		add.w	d0,d0
000086B4 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000086B8 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000086BC                            ; End of function Obj18_Move
000086BC                            
000086BC                            ; ===========================================================================
000086BC 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000086C0 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000086C4 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000086C8 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000086CC 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000086D0 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000086D4 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000086D6                            ; ===========================================================================
000086D6                            
000086D6                            Obj18_Type00:
000086D6 4E75                       		rts			; platform 00 doesn't move
000086D8                            ; ===========================================================================
000086D8                            
000086D8                            Obj18_Type05:
000086D8 3028 0032                  		move.w	$32(a0),d0
000086DC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086E0 4401                       		neg.b	d1		; reverse platform-motion
000086E2 0601 0040                  		addi.b	#$40,d1
000086E6 6000                       		bra.s	Obj18_01_Move
000086E8                            ; ===========================================================================
000086E8                            
000086E8                            Obj18_Type01:
000086E8 3028 0032                  		move.w	$32(a0),d0
000086EC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086F0 0401 0040                  		subi.b	#$40,d1
000086F4                            
000086F4                            Obj18_01_Move:
000086F4 4881                       		ext.w	d1
000086F6 D041                       		add.w	d1,d0
000086F8 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000086FC 6000 0000                  		bra.w	Obj18_ChgMotion
00008700                            ; ===========================================================================
00008700                            
00008700                            Obj18_Type0C:
00008700 3028 0034                  		move.w	$34(a0),d0
00008704 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008708 4401                       		neg.b	d1		; reverse platform-motion
0000870A 0601 0030                  		addi.b	#$30,d1
0000870E 6000                       		bra.s	Obj18_02_Move
00008710                            ; ===========================================================================
00008710                            
00008710                            Obj18_Type0B:
00008710 3028 0034                  		move.w	$34(a0),d0
00008714 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008718 0401 0030                  		subi.b	#$30,d1
0000871C 6000                       		bra.s	Obj18_02_Move
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            Obj18_Type06:
0000871E 3028 0034                  		move.w	$34(a0),d0
00008722 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008726 4401                       		neg.b	d1		; reverse platform-motion
00008728 0601 0040                  		addi.b	#$40,d1
0000872C 6000                       		bra.s	Obj18_02_Move
0000872E                            ; ===========================================================================
0000872E                            
0000872E                            Obj18_Type02:
0000872E 3028 0034                  		move.w	$34(a0),d0
00008732 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008736 0401 0040                  		subi.b	#$40,d1
0000873A                            
0000873A                            Obj18_02_Move:
0000873A 4881                       		ext.w	d1
0000873C D041                       		add.w	d1,d0
0000873E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008742 6000 0000                  		bra.w	Obj18_ChgMotion
00008746                            ; ===========================================================================
00008746                            
00008746                            Obj18_Type03:
00008746 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000874A 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000874C 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008752 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008754 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000875A                            
0000875A                            Obj18_03_NoMove:
0000875A 4E75                       		rts	
0000875C                            ; ===========================================================================
0000875C                            
0000875C                            Obj18_03_Wait:
0000875C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008760 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008762 317C 0020 003A             		move.w	#32,$3A(a0)
00008768 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000876C 4E75                       		rts	
0000876E                            ; ===========================================================================
0000876E                            
0000876E                            Obj18_Type04:
0000876E 4A68 003A                  		tst.w	$3A(a0)
00008772 6700                       		beq.s	loc_8048
00008774 5368 003A                  		subq.w	#1,$3A(a0)
00008778 6600                       		bne.s	loc_8048
0000877A 0828 0003 0022             		btst	#3,$22(a0)
00008780 6700                       		beq.s	loc_8042
00008782 08E9 0001 0022             		bset	#1,$22(a1)
00008788 08A9 0003 0022             		bclr	#3,$22(a1)
0000878E 137C 0002 0024             		move.b	#2,$24(a1)
00008794 08A8 0003 0022             		bclr	#3,$22(a0)
0000879A 4228 0025                  		clr.b	$25(a0)
0000879E 3368 0012 0012             		move.w	$12(a0),$12(a1)
000087A4                            
000087A4                            loc_8042:
000087A4 117C 0008 0024             		move.b	#8,$24(a0)
000087AA                            
000087AA                            loc_8048:
000087AA 2628 002C                  		move.l	$2C(a0),d3
000087AE 3028 0012                  		move.w	$12(a0),d0
000087B2 48C0                       		ext.l	d0
000087B4 E180                       		asl.l	#8,d0
000087B6 D680                       		add.l	d0,d3
000087B8 2143 002C                  		move.l	d3,$2C(a0)
000087BC 0668 0038 0012             		addi.w	#$38,$12(a0)
000087C2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000087C6 0640 00E0                  		addi.w	#$E0,d0
000087CA B068 002C                  		cmp.w	$2C(a0),d0
000087CE 6400                       		bcc.s	locret_8074
000087D0 117C 0006 0024             		move.b	#6,$24(a0)
000087D6                            
000087D6                            locret_8074:
000087D6 4E75                       		rts	
000087D8                            ; ===========================================================================
000087D8                            
000087D8                            Obj18_Type07:
000087D8 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087DC 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000087DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000087E2 7000                       		moveq	#0,d0
000087E4 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000087E8 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000087EA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000087EE 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000087F0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000087F6                            
000087F6                            Obj18_07_NoMove:
000087F6 4E75                       		rts	
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            Obj18_07_Wait:
000087F8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000087FC 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000087FE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008802 4E75                       		rts	
00008804                            ; ===========================================================================
00008804                            
00008804                            Obj18_Type08:
00008804 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008808 3028 0034                  		move.w	$34(a0),d0
0000880C 0440 0200                  		subi.w	#$200,d0
00008810 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008814 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008816 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000881A                            
0000881A                            Obj18_08_NoStop:
0000881A 4E75                       		rts	
0000881C                            ; ===========================================================================
0000881C                            
0000881C                            Obj18_Type0A:
0000881C 3028 0034                  		move.w	$34(a0),d0
00008820 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008824 0401 0040                  		subi.b	#$40,d1
00008828 4881                       		ext.w	d1
0000882A E241                       		asr.w	#1,d1
0000882C D041                       		add.w	d1,d0
0000882E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008832                            
00008832                            Obj18_ChgMotion:
00008832 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008838 4E75                       		rts	
0000883A                            ; ===========================================================================
0000883A                            
0000883A                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000883A 3028 0032                  		move.w	$32(a0),d0
0000883E 0240 FF80                  		andi.w	#$FF80,d0
00008842 3238 F700                  		move.w	($FFFFF700).w,d1
00008846 0441 0080                  		subi.w	#$80,d1
0000884A 0241 FF80                  		andi.w	#$FF80,d1
0000884E 9041                       		sub.w	d1,d0
00008850 0C40 0280                  		cmpi.w	#$280,d0
00008854 6200                       		bhi.s	Obj18_Delete
00008856 4E75                       		rts	
00008858                            ; ===========================================================================
00008858                            
00008858                            Obj18_Delete:				; XREF: Obj18_Index
00008858 6000 0000                  		bra.w	DeleteObject
0000885C                            ; ===========================================================================
0000885C                            ; ---------------------------------------------------------------------------
0000885C                            ; Sprite mappings - unused
0000885C                            ; ---------------------------------------------------------------------------
0000885C                            Map_obj18x:
0000885C                            	include "_maps\obj18x.asm"
0000885C                            ; ---------------------------------------------------------------------------
0000885C                            ; Sprite mappings - unused
0000885C                            ; ---------------------------------------------------------------------------
0000885C 0000                       		dc.w byte_80FE-Map_obj18x
0000885E 0000                       		dc.w byte_8109-Map_obj18x
00008860 02                         byte_80FE:	dc.b 2
00008861 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008866 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000886B 0A                         byte_8109:	dc.b $A
0000886C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008871 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008876 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000887B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008880 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008885 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000888A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000888F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008894 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008899 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000889E                            		even
0000889E                            		even
0000889E                            
0000889E                            ; ---------------------------------------------------------------------------
0000889E                            ; Sprite mappings - GHZ	platforms
0000889E                            ; ---------------------------------------------------------------------------
0000889E                            Map_obj18:
0000889E                            	include "_maps\obj18ghz.asm"
0000889E                            ; ---------------------------------------------------------------------------
0000889E                            ; Sprite mappings - GHZ	platforms
0000889E                            ; ---------------------------------------------------------------------------
0000889E 0000                       		dc.w byte_8140-Map_obj18
000088A0 0000                       		dc.w byte_8155-Map_obj18
000088A2 04                         byte_8140:	dc.b 4
000088A3 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000088A8 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000088AD F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000088B2 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000088B7 0A                         byte_8155:	dc.b $A
000088B8 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000088BD 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000088C2 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000088C7 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000088CC 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000088D1 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000088D6 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000088DB 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000088E0 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000088E5 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000088EA                            		even
000088EA                            		even
000088EA                            
000088EA                            ; ---------------------------------------------------------------------------
000088EA                            ; Sprite mappings - SYZ	platforms
000088EA                            ; ---------------------------------------------------------------------------
000088EA                            Map_obj18a:
000088EA                            	include "_maps\obj18syz.asm"
000088EA                            ; ---------------------------------------------------------------------------
000088EA                            ; Sprite mappings - SYZ	platforms
000088EA                            ; ---------------------------------------------------------------------------
000088EA 0000                       		dc.w byte_818A-Map_obj18a
000088EC 03                         byte_818A:	dc.b 3
000088ED F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000088F2 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000088F7 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000088FC                            		even
000088FC                            		even
000088FC                            
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - SLZ	platforms
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            Map_obj18b:
000088FC                            	include "_maps\obj18slz.asm"
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - SLZ	platforms
000088FC                            ; ---------------------------------------------------------------------------
000088FC 0000                       		dc.w byte_819C-Map_obj18b
000088FE 02                         byte_819C:	dc.b 2
000088FF F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008904 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000890A 00                         		even
0000890A 00                         		even
0000890A                            
0000890A                            ; ===========================================================================
0000890A                            ; ---------------------------------------------------------------------------
0000890A                            ; Object 19 - blank
0000890A                            ; ---------------------------------------------------------------------------
0000890A                            
0000890A                            Obj19:					; XREF: Obj_Index
0000890A 4E75                       		rts	
0000890C                            ; ===========================================================================
0000890C                            ; ---------------------------------------------------------------------------
0000890C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000890C                            ; ---------------------------------------------------------------------------
0000890C                            Map_obj48:
0000890C                            	include "_maps\obj48.asm"
0000890C                            ; ---------------------------------------------------------------------------
0000890C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000890C                            ; ---------------------------------------------------------------------------
0000890C 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008910 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008914 06                         byte_81B2:	dc.b 6
00008915 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000891A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000891F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008924 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008929 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000892E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008933 04                         byte_81D1:	dc.b 4
00008934 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008939 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000893E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008943 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008948 04                         byte_81E6:	dc.b 4
00008949 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000894E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008953 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008958 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000895D 04                         byte_81FB:	dc.b 4
0000895E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008963 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008968 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000896D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008972                            		even
00008972                            		even
00008972                            
00008972                            ; ===========================================================================
00008972                            ; ---------------------------------------------------------------------------
00008972                            ; Object 1A - GHZ collapsing ledge
00008972                            ; ---------------------------------------------------------------------------
00008972                            
00008972                            Obj1A:					; XREF: Obj_Index
00008972 7000                       		moveq	#0,d0
00008974 1028 0024                  		move.b	$24(a0),d0
00008978 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000897C 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008980                            ; ===========================================================================
00008980 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008984 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008988 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000898C                            ; ===========================================================================
0000898C                            
0000898C                            Obj1A_Main:				; XREF: Obj1A_Index
0000898C 5428 0024                  		addq.b	#2,$24(a0)
00008990 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008998 317C 4000 0002             		move.w	#$4000,2(a0)
0000899E 0028 0004 0001             		ori.b	#4,1(a0)
000089A4 117C 0004 0018             		move.b	#4,$18(a0)
000089AA 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000089B0 117C 0064 0019             		move.b	#$64,$19(a0)
000089B6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000089BC 117C 0038 0016             		move.b	#$38,$16(a0)
000089C2 08E8 0004 0001             		bset	#4,1(a0)
000089C8                            
000089C8                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000089C8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000089CC 6700                       		beq.s	Obj1A_Slope	; if not, branch
000089CE 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000089D2 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000089D6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089DA                            
000089DA                            Obj1A_Slope:
000089DA 323C 0030                  		move.w	#$30,d1
000089DE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000089E4 6100 F25E                  		bsr.w	SlopeObject
000089E8 6000 0000                  		bra.w	MarkObjGone
000089EC                            ; ===========================================================================
000089EC                            
000089EC                            Obj1A_Touch:				; XREF: Obj1A_Index
000089EC 4A28 0038                  		tst.b	$38(a0)
000089F0 6700 0000                  		beq.w	loc_847A
000089F4 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000089FA 5328 0038                  		subq.b	#1,$38(a0)
000089FE                            
000089FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089FE                            
000089FE                            
000089FE                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000089FE 323C 0030                  		move.w	#$30,d1
00008A02 6100 F2E0                  		bsr.w	ExitPlatform
00008A06 323C 0030                  		move.w	#$30,d1
00008A0A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008A10 3428 0008                  		move.w	8(a0),d2
00008A14 6100 0000                  		bsr.w	SlopeObject2
00008A18 6000 0000                  		bra.w	MarkObjGone
00008A1C                            ; End of function Obj1A_WalkOff
00008A1C                            
00008A1C                            ; ===========================================================================
00008A1C                            
00008A1C                            Obj1A_Display:				; XREF: Obj1A_Index
00008A1C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A20 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008A22 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A26 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008A2A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A2E 6000 0000                  		bra.w	DisplaySprite
00008A32                            ; ===========================================================================
00008A32                            
00008A32                            loc_82D0:				; XREF: Obj1A_Display
00008A32 5328 0038                  		subq.b	#1,$38(a0)
00008A36 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008A3A 43F8 D000                  		lea	($FFFFD000).w,a1
00008A3E 0829 0003 0022             		btst	#3,$22(a1)
00008A44 6700                       		beq.s	loc_82FC
00008A46 4A28 0038                  		tst.b	$38(a0)
00008A4A 6600                       		bne.s	locret_8308
00008A4C 08A9 0003 0022             		bclr	#3,$22(a1)
00008A52 08A9 0005 0022             		bclr	#5,$22(a1)
00008A58 137C 0001 001D             		move.b	#1,$1D(a1)
00008A5E                            
00008A5E                            loc_82FC:
00008A5E 117C 0000 003A             		move.b	#0,$3A(a0)
00008A64 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008A6A                            
00008A6A                            locret_8308:
00008A6A 4E75                       		rts	
00008A6C                            ; ===========================================================================
00008A6C                            
00008A6C                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008A6C 6100 0000                  		bsr.w	ObjectFall
00008A70 6100 0000                  		bsr.w	DisplaySprite
00008A74 4A28 0001                  		tst.b	1(a0)
00008A78 6A00                       		bpl.s	Obj1A_Delete
00008A7A 4E75                       		rts	
00008A7C                            ; ===========================================================================
00008A7C                            
00008A7C                            Obj1A_Delete:				; XREF: Obj1A_Index
00008A7C 6100 0000                  		bsr.w	DeleteObject
00008A80 4E75                       		rts	
00008A82                            ; ===========================================================================
00008A82                            ; ---------------------------------------------------------------------------
00008A82                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008A82                            ; ---------------------------------------------------------------------------
00008A82                            
00008A82                            Obj53:					; XREF: Obj_Index
00008A82 7000                       		moveq	#0,d0
00008A84 1028 0024                  		move.b	$24(a0),d0
00008A88 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008A8C 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008A90                            ; ===========================================================================
00008A90 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008A94 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008A98 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A9C                            ; ===========================================================================
00008A9C                            
00008A9C                            Obj53_Main:				; XREF: Obj53_Index
00008A9C 5428 0024                  		addq.b	#2,$24(a0)
00008AA0 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008AA8 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008AAE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008AB4 6600                       		bne.s	Obj53_NotSLZ
00008AB6 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008ABC 5428 001A                  		addq.b	#2,$1A(a0)
00008AC0                            
00008AC0                            Obj53_NotSLZ:
00008AC0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AC6 6600                       		bne.s	Obj53_NotSBZ
00008AC8 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008ACE                            
00008ACE                            Obj53_NotSBZ:
00008ACE 0028 0004 0001             		ori.b	#4,1(a0)
00008AD4 117C 0004 0018             		move.b	#4,$18(a0)
00008ADA 117C 0007 0038             		move.b	#7,$38(a0)
00008AE0 117C 0044 0019             		move.b	#$44,$19(a0)
00008AE6                            
00008AE6                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008AE6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008AEA 6700                       		beq.s	Obj53_Solid	; if not, branch
00008AEC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AF0 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008AF4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AF8                            
00008AF8                            Obj53_Solid:
00008AF8 323C 0020                  		move.w	#$20,d1
00008AFC 6100 F072                  		bsr.w	PlatformObject
00008B00 4A28 0028                  		tst.b	$28(a0)
00008B04 6A00                       		bpl.s	Obj53_MarkAsGone
00008B06 0829 0003 0022             		btst	#3,$22(a1)
00008B0C 6700                       		beq.s	Obj53_MarkAsGone
00008B0E 08A8 0000 0001             		bclr	#0,1(a0)
00008B14 3029 0008                  		move.w	8(a1),d0
00008B18 9068 0008                  		sub.w	8(a0),d0
00008B1C 6400                       		bcc.s	Obj53_MarkAsGone
00008B1E 08E8 0000 0001             		bset	#0,1(a0)
00008B24                            
00008B24                            Obj53_MarkAsGone:
00008B24 6000 0000                  		bra.w	MarkObjGone
00008B28                            ; ===========================================================================
00008B28                            
00008B28                            Obj53_Touch:				; XREF: Obj53_Index
00008B28 4A28 0038                  		tst.b	$38(a0)
00008B2C 6700 0000                  		beq.w	loc_8458
00008B30 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008B36 5328 0038                  		subq.b	#1,$38(a0)
00008B3A                            
00008B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B3A                            
00008B3A                            
00008B3A                            Obj53_WalkOff:				; XREF: Obj53_Index
00008B3A 323C 0020                  		move.w	#$20,d1
00008B3E 6100 F1A4                  		bsr.w	ExitPlatform
00008B42 3428 0008                  		move.w	8(a0),d2
00008B46 6100 F706                  		bsr.w	MvSonicOnPtfm2
00008B4A 6000 0000                  		bra.w	MarkObjGone
00008B4E                            ; End of function Obj53_WalkOff
00008B4E                            
00008B4E                            ; ===========================================================================
00008B4E                            
00008B4E                            Obj53_Display:				; XREF: Obj53_Index
00008B4E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B52 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008B54 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B58 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008B5C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B60 6000 0000                  		bra.w	DisplaySprite
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            loc_8402:
00008B64 5328 0038                  		subq.b	#1,$38(a0)
00008B68 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00008B70 0829 0003 0022             		btst	#3,$22(a1)
00008B76 6700                       		beq.s	loc_842E
00008B78 4A28 0038                  		tst.b	$38(a0)
00008B7C 6600                       		bne.s	locret_843A
00008B7E 08A9 0003 0022             		bclr	#3,$22(a1)
00008B84 08A9 0005 0022             		bclr	#5,$22(a1)
00008B8A 137C 0001 001D             		move.b	#1,$1D(a1)
00008B90                            
00008B90                            loc_842E:
00008B90 117C 0000 003A             		move.b	#0,$3A(a0)
00008B96 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B9C                            
00008B9C                            locret_843A:
00008B9C 4E75                       		rts	
00008B9E                            ; ===========================================================================
00008B9E                            
00008B9E                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B9E 6100 0000                  		bsr.w	ObjectFall
00008BA2 6100 0000                  		bsr.w	DisplaySprite
00008BA6 4A28 0001                  		tst.b	1(a0)
00008BAA 6A00                       		bpl.s	Obj53_Delete
00008BAC 4E75                       		rts	
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            Obj53_Delete:				; XREF: Obj53_Index
00008BAE 6100 0000                  		bsr.w	DeleteObject
00008BB2 4E75                       		rts	
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008BB4 117C 0000 003A             		move.b	#0,$3A(a0)
00008BBA                            
00008BBA                            loc_8458:				; XREF: Obj53_Touch
00008BBA 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008BC0 0828 0000 0028             		btst	#0,$28(a0)
00008BC6 6700                       		beq.s	loc_846C
00008BC8 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008BCE                            
00008BCE                            loc_846C:
00008BCE 7207                       		moveq	#7,d1
00008BD0 5228 001A                  		addq.b	#1,$1A(a0)
00008BD4 6000                       		bra.s	loc_8486
00008BD6                            ; ===========================================================================
00008BD6                            
00008BD6                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008BD6 117C 0000 003A             		move.b	#0,$3A(a0)
00008BDC                            
00008BDC                            loc_847A:				; XREF: Obj1A_Touch
00008BDC 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008BE2 7218                       		moveq	#$18,d1
00008BE4 5428 001A                  		addq.b	#2,$1A(a0)
00008BE8                            
00008BE8                            loc_8486:				; XREF: Obj53_Collapse
00008BE8 7000                       		moveq	#0,d0
00008BEA 1028 001A                  		move.b	$1A(a0),d0
00008BEE D040                       		add.w	d0,d0
00008BF0 2668 0004                  		movea.l	4(a0),a3
00008BF4 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008BF8 524B                       		addq.w	#1,a3
00008BFA 08E8 0005 0001             		bset	#5,1(a0)
00008C00 1810                       		move.b	0(a0),d4
00008C02 1A28 0001                  		move.b	1(a0),d5
00008C06 2248                       		movea.l	a0,a1
00008C08 6000                       		bra.s	loc_84B2
00008C0A                            ; ===========================================================================
00008C0A                            
00008C0A                            loc_84AA:
00008C0A 6100 0000                  		bsr.w	SingleObjLoad
00008C0E 6600                       		bne.s	loc_84F2
00008C10 5A4B                       		addq.w	#5,a3
00008C12                            
00008C12                            loc_84B2:
00008C12 137C 0006 0024             		move.b	#6,$24(a1)
00008C18 1284                       		move.b	d4,0(a1)
00008C1A 234B 0004                  		move.l	a3,4(a1)
00008C1E 1345 0001                  		move.b	d5,1(a1)
00008C22 3368 0008 0008             		move.w	8(a0),8(a1)
00008C28 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008C2E 3368 0002 0002             		move.w	2(a0),2(a1)
00008C34 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008C3A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008C40 135C 0038                  		move.b	(a4)+,$38(a1)
00008C44 B3C8                       		cmpa.l	a0,a1
00008C46 6400                       		bcc.s	loc_84EE
00008C48 6100 0000                  		bsr.w	DisplaySprite2
00008C4C                            
00008C4C                            loc_84EE:
00008C4C 51C9 FFBC                  		dbf	d1,loc_84AA
00008C50                            
00008C50                            loc_84F2:
00008C50 6100 0000                  		bsr.w	DisplaySprite
00008C54 303C 00B9                  		move.w	#$B9,d0
00008C58 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008C5E                            ; ===========================================================================
00008C5E                            ; ---------------------------------------------------------------------------
00008C5E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008C5E                            ; ---------------------------------------------------------------------------
00008C5E 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008C6E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008C78 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008C80 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008C88                            
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            
00008C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C88                            
00008C88                            
00008C88                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008C88 43F8 D000                  		lea	($FFFFD000).w,a1
00008C8C 0829 0003 0022             		btst	#3,$22(a1)
00008C92 6700                       		beq.s	locret_856E
00008C94 3029 0008                  		move.w	8(a1),d0
00008C98 9068 0008                  		sub.w	8(a0),d0
00008C9C D041                       		add.w	d1,d0
00008C9E E248                       		lsr.w	#1,d0
00008CA0 0828 0000 0001             		btst	#0,1(a0)
00008CA6 6700                       		beq.s	loc_854E
00008CA8 4640                       		not.w	d0
00008CAA D041                       		add.w	d1,d0
00008CAC                            
00008CAC                            loc_854E:
00008CAC 7200                       		moveq	#0,d1
00008CAE 1232 0000                  		move.b	(a2,d0.w),d1
00008CB2 3028 000C                  		move.w	$C(a0),d0
00008CB6 9041                       		sub.w	d1,d0
00008CB8 7200                       		moveq	#0,d1
00008CBA 1229 0016                  		move.b	$16(a1),d1
00008CBE 9041                       		sub.w	d1,d0
00008CC0 3340 000C                  		move.w	d0,$C(a1)
00008CC4 9468 0008                  		sub.w	8(a0),d2
00008CC8 9569 0008                  		sub.w	d2,8(a1)
00008CCC                            
00008CCC                            locret_856E:
00008CCC 4E75                       		rts	
00008CCE                            ; End of function SlopeObject2
00008CCE                            
00008CCE                            ; ===========================================================================
00008CCE                            ; ---------------------------------------------------------------------------
00008CCE                            ; Collision data for GHZ collapsing ledge
00008CCE                            ; ---------------------------------------------------------------------------
00008CCE                            Obj1A_SlopeData:
00008CCE                            		incbin	misc\ghzledge.bin
00008CFE                            		even
00008CFE                            
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE                            ; Sprite mappings - GHZ	collapsing ledge
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE                            Map_obj1A:
00008CFE                            	include "_maps\obj1A.asm"
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE                            ; Sprite mappings - GHZ	collapsing ledge
00008CFE                            ; ---------------------------------------------------------------------------
00008CFE 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008D02 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008D06 10                         byte_85A8:	dc.b $10
00008D07 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008D0C D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008D11 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008D16 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008D1B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D20 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D25 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008D2A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008D2F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D34 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D39 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008D3E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D43 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D48 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D4D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D52 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D57 10                         byte_85F9:	dc.b $10
00008D58 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008D5D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008D62 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008D67 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008D6C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D71 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D76 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008D7B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008D80 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D85 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D8A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008D8F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D94 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D99 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D9E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008DA3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DA8 19                         byte_864A:	dc.b $19
00008DA9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008DAE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008DB3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008DB8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008DBD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DC2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DC7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DCC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DD1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DD6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008DDB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DE0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DE5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DEA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DEF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DF4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008DF9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DFE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008E03 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E08 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008E0D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008E12 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E17 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008E1C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E21 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E26 19                         byte_86C8:	dc.b $19
00008E27 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008E2C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008E31 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008E36 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008E3B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008E40 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008E45 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008E4A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008E4F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E54 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E59 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008E5E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008E63 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008E68 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008E6D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E72 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E77 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008E7C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008E81 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E86 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008E8B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008E90 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E95 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008E9A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E9F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008EA4                            		even
00008EA4                            		even
00008EA4                            
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            Map_obj53:
00008EA4                            	include "_maps\obj53.asm"
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008EA4                            ; ---------------------------------------------------------------------------
00008EA4 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008EA8 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008EAC 04                         byte_874E:	dc.b 4
00008EAD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008EB2 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008EB7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008EBC 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008EC1 08                         byte_8763:	dc.b 8
00008EC2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008EC7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008ECC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008ED1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008ED6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008EDB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008EE0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008EE5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008EEA 04                         byte_878C:	dc.b 4
00008EEB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008EF0 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008EF5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008EFA 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008EFF 08                         byte_87A1:	dc.b 8
00008F00 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008F05 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008F0A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008F0F F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008F14 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008F19 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008F1E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008F23 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008F28                            		even
00008F28                            		even
00008F28                            
00008F28                            ; ===========================================================================
00008F28                            ; ---------------------------------------------------------------------------
00008F28                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008F28                            ; ---------------------------------------------------------------------------
00008F28                            
00008F28                            Obj1C:					; XREF: Obj_Index
00008F28 7000                       		moveq	#0,d0
00008F2A 1028 0024                  		move.b	$24(a0),d0
00008F2E 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008F32 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008F36                            ; ===========================================================================
00008F36 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008F38 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008F3A                            ; ===========================================================================
00008F3A                            
00008F3A                            Obj1C_Main:				; XREF: Obj1C_Index
00008F3A 5428 0024                  		addq.b	#2,$24(a0)
00008F3E 7000                       		moveq	#0,d0
00008F40 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008F44 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008F48 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008F4C 2159 0004                  		move.l	(a1)+,4(a0)
00008F50 3159 0002                  		move.w	(a1)+,2(a0)
00008F54 0028 0004 0001             		ori.b	#4,1(a0)
00008F5A 1159 001A                  		move.b	(a1)+,$1A(a0)
00008F5E 1159 0019                  		move.b	(a1)+,$19(a0)
00008F62 1159 0018                  		move.b	(a1)+,$18(a0)
00008F66 1159 0020                  		move.b	(a1)+,$20(a0)
00008F6A                            
00008F6A                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008F6A 3028 0008                  		move.w	8(a0),d0
00008F6E 0240 FF80                  		andi.w	#$FF80,d0
00008F72 3238 F700                  		move.w	($FFFFF700).w,d1
00008F76 0441 0080                  		subi.w	#$80,d1
00008F7A 0241 FF80                  		andi.w	#$FF80,d1
00008F7E 9041                       		sub.w	d1,d0
00008F80 0C40 0280                  		cmpi.w	#$280,d0
00008F84 6200 0000                  		bhi.w	DeleteObject
00008F88 6000 0000                  		bra.w	DisplaySprite
00008F8C                            ; ===========================================================================
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C                            ; Variables for	object $1C are stored in an array
00008F8C                            ; ---------------------------------------------------------------------------
00008F8C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008F90 44D8                       		dc.w $44D8		; VRAM setting
00008F92 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008F96 0000 0000                  		dc.l Map_obj1C
00008F9A 44D8                       		dc.w $44D8
00008F9C 0008 0200                  		dc.b 0,	8, 2, 0
00008FA0 0000 0000                  		dc.l Map_obj1C
00008FA4 44D8                       		dc.w $44D8
00008FA6 0008 0200                  		dc.b 0,	8, 2, 0
00008FAA 0000 8058                  		dc.l Map_obj11
00008FAE 438E                       		dc.w $438E
00008FB0 0110 0100                  		dc.b 1,	$10, 1,	0
00008FB4                            ; ---------------------------------------------------------------------------
00008FB4                            ; Sprite mappings - SLZ	lava thrower
00008FB4                            ; ---------------------------------------------------------------------------
00008FB4                            Map_obj1C:
00008FB4                            	include "_maps\obj1C.asm"
00008FB4                            ; ---------------------------------------------------------------------------
00008FB4                            ; Sprite mappings - SLZ	lava thrower
00008FB4                            ; ---------------------------------------------------------------------------
00008FB4 0000                       		dc.w byte_8858-Map_obj1C
00008FB6 01                         byte_8858:	dc.b 1
00008FB7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008FBC                            		even
00008FBC                            		even
00008FBC                            
00008FBC                            ; ===========================================================================
00008FBC                            ; ---------------------------------------------------------------------------
00008FBC                            ; Object 1D - switch that activates when Sonic touches it
00008FBC                            ; (this	is not used anywhere in	the game)
00008FBC                            ; ---------------------------------------------------------------------------
00008FBC                            
00008FBC                            Obj1D:					; XREF: Obj_Index
00008FBC 7000                       		moveq	#0,d0
00008FBE 1028 0024                  		move.b	$24(a0),d0
00008FC2 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008FC6 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008FCA                            ; ===========================================================================
00008FCA 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008FCC 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008FCE 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008FD0                            ; ===========================================================================
00008FD0                            
00008FD0                            Obj1D_Main:				; XREF: Obj1D_Index
00008FD0 5428 0024                  		addq.b	#2,$24(a0)
00008FD4 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008FDC 317C 4000 0002             		move.w	#$4000,2(a0)
00008FE2 117C 0004 0001             		move.b	#4,1(a0)
00008FE8 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008FEE 117C 0010 0019             		move.b	#$10,$19(a0)
00008FF4 117C 0005 0018             		move.b	#5,$18(a0)
00008FFA                            
00008FFA                            Obj1D_Action:				; XREF: Obj1D_Index
00008FFA 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009000 323C 0010                  		move.w	#$10,d1
00009004 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009008 6700                       		beq.s	Obj1D_ChkDel
0000900A 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000900E 7001                       		moveq	#1,d0
00009010 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009014                            
00009014                            Obj1D_ChkDel:
00009014 6100 0000                  		bsr.w	DisplaySprite
00009018 3028 0008                  		move.w	8(a0),d0
0000901C 0240 FF80                  		andi.w	#$FF80,d0
00009020 3238 F700                  		move.w	($FFFFF700).w,d1
00009024 0441 0080                  		subi.w	#$80,d1
00009028 0241 FF80                  		andi.w	#$FF80,d1
0000902C 9041                       		sub.w	d1,d0
0000902E 0C40 0280                  		cmpi.w	#$280,d0
00009032 6200 0000                  		bhi.w	Obj1D_Delete
00009036 4E75                       		rts	
00009038                            ; ===========================================================================
00009038                            
00009038                            Obj1D_Delete:				; XREF: Obj1D_Index
00009038 6100 0000                  		bsr.w	DeleteObject
0000903C 4E75                       		rts	
0000903E                            ; ---------------------------------------------------------------------------
0000903E                            ; Subroutine to	check if Sonic touches the object
0000903E                            ; ---------------------------------------------------------------------------
0000903E                            
0000903E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000903E                            
0000903E                            
0000903E                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000903E 43F8 D000                  		lea	($FFFFD000).w,a1
00009042 3029 0008                  		move.w	8(a1),d0
00009046 9068 0008                  		sub.w	8(a0),d0
0000904A D041                       		add.w	d1,d0
0000904C 6B00                       		bmi.s	loc_8918
0000904E D241                       		add.w	d1,d1
00009050 B041                       		cmp.w	d1,d0
00009052 6400                       		bcc.s	loc_8918
00009054 3429 000C                  		move.w	$C(a1),d2
00009058 1229 0016                  		move.b	$16(a1),d1
0000905C 4881                       		ext.w	d1
0000905E D242                       		add.w	d2,d1
00009060 3028 000C                  		move.w	$C(a0),d0
00009064 0440 0010                  		subi.w	#$10,d0
00009068 9041                       		sub.w	d1,d0
0000906A 6200                       		bhi.s	loc_8918
0000906C 0C40 FFF0                  		cmpi.w	#-$10,d0
00009070 6500                       		bcs.s	loc_8918
00009072 70FF                       		moveq	#-1,d0
00009074 4E75                       		rts	
00009076                            ; ===========================================================================
00009076                            
00009076                            loc_8918:
00009076 7000                       		moveq	#0,d0
00009078 4E75                       		rts	
0000907A                            ; End of function Obj1D_ChkTouch
0000907A                            
0000907A                            ; ===========================================================================
0000907A                            ; ---------------------------------------------------------------------------
0000907A                            ; Sprite mappings - object 1D
0000907A                            ; ---------------------------------------------------------------------------
0000907A                            Map_obj1D:
0000907A                            	include "_maps\obj1D.asm"
0000907A                            ; ---------------------------------------------------------------------------
0000907A                            ; Sprite mappings - object 1D
0000907A                            ; ---------------------------------------------------------------------------
0000907A 0000                       		dc.w byte_891E-Map_obj1D
0000907C 04                         byte_891E:	dc.b 4
0000907D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009082 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009087 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000908C 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009092 00                         		even
00009092 00                         		even
00009092                            
00009092                            ; ===========================================================================
00009092                            ; ---------------------------------------------------------------------------
00009092                            ; Object 2A - doors (SBZ)
00009092                            ; ---------------------------------------------------------------------------
00009092                            
00009092                            Obj2A:					; XREF: Obj_Index
00009092 7000                       		moveq	#0,d0
00009094 1028 0024                  		move.b	$24(a0),d0
00009098 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000909C 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000090A0                            ; ===========================================================================
000090A0 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000090A2 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000090A4                            ; ===========================================================================
000090A4                            
000090A4                            Obj2A_Main:				; XREF: Obj2A_Index
000090A4 5428 0024                  		addq.b	#2,$24(a0)
000090A8 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000090B0 317C 42E8 0002             		move.w	#$42E8,2(a0)
000090B6 0028 0004 0001             		ori.b	#4,1(a0)
000090BC 117C 0008 0019             		move.b	#8,$19(a0)
000090C2 117C 0004 0018             		move.b	#4,$18(a0)
000090C8                            
000090C8                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000090C8 323C 0040                  		move.w	#$40,d1
000090CC 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000090D0 3038 D008                  		move.w	($FFFFD008).w,d0
000090D4 D041                       		add.w	d1,d0
000090D6 B068 0008                  		cmp.w	8(a0),d0
000090DA 6500                       		bcs.s	Obj2A_Animate
000090DC 9041                       		sub.w	d1,d0
000090DE 9041                       		sub.w	d1,d0
000090E0 B068 0008                  		cmp.w	8(a0),d0
000090E4 6400                       		bcc.s	Obj2A_Animate
000090E6 D041                       		add.w	d1,d0
000090E8 B068 0008                  		cmp.w	8(a0),d0
000090EC 6400                       		bcc.s	loc_899A
000090EE 0828 0000 0022             		btst	#0,$22(a0)
000090F4 6600                       		bne.s	Obj2A_Animate
000090F6 6000                       		bra.s	Obj2A_Open
000090F8                            ; ===========================================================================
000090F8                            
000090F8                            loc_899A:				; XREF: Obj2A_OpenShut
000090F8 0828 0000 0022             		btst	#0,$22(a0)
000090FE 6700                       		beq.s	Obj2A_Animate
00009100                            
00009100                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009100 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009106                            
00009106                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009106 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000910C 6100 0000                  		bsr.w	AnimateSprite
00009110 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009114 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009116 323C 0011                  		move.w	#$11,d1
0000911A 343C 0020                  		move.w	#$20,d2
0000911E 3602                       		move.w	d2,d3
00009120 5243                       		addq.w	#1,d3
00009122 3828 0008                  		move.w	8(a0),d4
00009126 6100 0000                  		bsr.w	SolidObject
0000912A                            
0000912A                            Obj2A_MarkAsUsed:
0000912A 6000 0000                  		bra.w	MarkObjGone
0000912E                            ; ===========================================================================
0000912E                            Ani_obj2A:
0000912E                            	include "_anim\obj2A.asm"
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            ; Animation script - doors (SBZ)
0000912E                            ; ---------------------------------------------------------------------------
0000912E 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009130 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009132 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000913E 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000914A                            		even
0000914A                            		even
0000914A                            
0000914A                            ; ---------------------------------------------------------------------------
0000914A                            ; Sprite mappings - doors (SBZ)
0000914A                            ; ---------------------------------------------------------------------------
0000914A                            Map_obj2A:
0000914A                            	include "_maps\obj2A.asm"
0000914A                            ; ---------------------------------------------------------------------------
0000914A                            ; Sprite mappings - doors (SBZ)
0000914A                            ; ---------------------------------------------------------------------------
0000914A 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000914E 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009152 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009156 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000915A 0000                       		dc.w byte_8A56-Map_obj2A
0000915C 02                         byte_89FE:	dc.b 2
0000915D E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009162 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009167 02                         byte_8A09:	dc.b 2
00009168 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000916D 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009172 02                         byte_8A14:	dc.b 2
00009173 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009178 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000917D 02                         byte_8A1F:	dc.b 2
0000917E D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009183 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009188 02                         byte_8A2A:	dc.b 2
00009189 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000918E 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009193 02                         byte_8A35:	dc.b 2
00009194 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009199 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000919E 02                         byte_8A40:	dc.b 2
0000919F C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000091A4 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000091A9 02                         byte_8A4B:	dc.b 2
000091AA C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000091AF 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000091B4 02                         byte_8A56:	dc.b 2
000091B5 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000091BA 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000091C0 00                         		even
000091C0 00                         		even
000091C0                            
000091C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091C0                            
000091C0                            
000091C0                            Obj44_SolidWall:			; XREF: Obj44_Solid
000091C0 6100 0000                  		bsr.w	Obj44_SolidWall2
000091C4 6700                       		beq.s	loc_8AA8
000091C6 6B00 0000                  		bmi.w	loc_8AC4
000091CA 4A40                       		tst.w	d0
000091CC 6700 0000                  		beq.w	loc_8A92
000091D0 6B00                       		bmi.s	loc_8A7C
000091D2 4A69 0010                  		tst.w	$10(a1)
000091D6 6B00                       		bmi.s	loc_8A92
000091D8 6000                       		bra.s	loc_8A82
000091DA                            ; ===========================================================================
000091DA                            
000091DA                            loc_8A7C:
000091DA 4A69 0010                  		tst.w	$10(a1)
000091DE 6A00                       		bpl.s	loc_8A92
000091E0                            
000091E0                            loc_8A82:
000091E0 9169 0008                  		sub.w	d0,8(a1)
000091E4 337C 0000 0014             		move.w	#0,$14(a1)
000091EA 337C 0000 0010             		move.w	#0,$10(a1)
000091F0                            
000091F0                            loc_8A92:
000091F0 0829 0001 0022             		btst	#1,$22(a1)
000091F6 6600                       		bne.s	loc_8AB6
000091F8 08E9 0005 0022             		bset	#5,$22(a1)
000091FE 08E8 0005 0022             		bset	#5,$22(a0)
00009204 4E75                       		rts	
00009206                            ; ===========================================================================
00009206                            
00009206                            loc_8AA8:
00009206 0828 0005 0022             		btst	#5,$22(a0)
0000920C 6700                       		beq.s	locret_8AC2
0000920E 337C 0001 001C             		move.w	#1,$1C(a1)
00009214                            
00009214                            loc_8AB6:
00009214 08A8 0005 0022             		bclr	#5,$22(a0)
0000921A 08A9 0005 0022             		bclr	#5,$22(a1)
00009220                            
00009220                            locret_8AC2:
00009220 4E75                       		rts	
00009222                            ; ===========================================================================
00009222                            
00009222                            loc_8AC4:
00009222 4A69 0012                  		tst.w	$12(a1)
00009226 6A00                       		bpl.s	locret_8AD8
00009228 4A43                       		tst.w	d3
0000922A 6A00                       		bpl.s	locret_8AD8
0000922C 9769 000C                  		sub.w	d3,$C(a1)
00009230 337C 0000 0012             		move.w	#0,$12(a1)
00009236                            
00009236                            locret_8AD8:
00009236 4E75                       		rts	
00009238                            ; End of function Obj44_SolidWall
00009238                            
00009238                            
00009238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009238                            
00009238                            
00009238                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009238 43F8 D000                  		lea	($FFFFD000).w,a1
0000923C 3029 0008                  		move.w	8(a1),d0
00009240 9068 0008                  		sub.w	8(a0),d0
00009244 D041                       		add.w	d1,d0
00009246 6B00                       		bmi.s	loc_8B48
00009248 3601                       		move.w	d1,d3
0000924A D643                       		add.w	d3,d3
0000924C B043                       		cmp.w	d3,d0
0000924E 6200                       		bhi.s	loc_8B48
00009250 1629 0016                  		move.b	$16(a1),d3
00009254 4883                       		ext.w	d3
00009256 D443                       		add.w	d3,d2
00009258 3629 000C                  		move.w	$C(a1),d3
0000925C 9668 000C                  		sub.w	$C(a0),d3
00009260 D642                       		add.w	d2,d3
00009262 6B00                       		bmi.s	loc_8B48
00009264 3802                       		move.w	d2,d4
00009266 D844                       		add.w	d4,d4
00009268 B644                       		cmp.w	d4,d3
0000926A 6400                       		bcc.s	loc_8B48
0000926C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009270 6B00                       		bmi.s	loc_8B48
00009272 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009278 6400                       		bcc.s	loc_8B48
0000927A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000927E 6600                       		bne.s	loc_8B48
00009280 3A00                       		move.w	d0,d5
00009282 B240                       		cmp.w	d0,d1
00009284 6400                       		bcc.s	loc_8B30
00009286 D241                       		add.w	d1,d1
00009288 9041                       		sub.w	d1,d0
0000928A 3A00                       		move.w	d0,d5
0000928C 4445                       		neg.w	d5
0000928E                            
0000928E                            loc_8B30:
0000928E 3203                       		move.w	d3,d1
00009290 B443                       		cmp.w	d3,d2
00009292 6400                       		bcc.s	loc_8B3C
00009294 9644                       		sub.w	d4,d3
00009296 3203                       		move.w	d3,d1
00009298 4441                       		neg.w	d1
0000929A                            
0000929A                            loc_8B3C:
0000929A BA41                       		cmp.w	d1,d5
0000929C 6200                       		bhi.s	loc_8B44
0000929E 7801                       		moveq	#1,d4
000092A0 4E75                       		rts	
000092A2                            ; ===========================================================================
000092A2                            
000092A2                            loc_8B44:
000092A2 78FF                       		moveq	#-1,d4
000092A4 4E75                       		rts	
000092A6                            ; ===========================================================================
000092A6                            
000092A6                            loc_8B48:
000092A6 7800                       		moveq	#0,d4
000092A8 4E75                       		rts	
000092AA                            ; End of function Obj44_SolidWall2
000092AA                            
000092AA                            ; ===========================================================================
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            ; Object 1E - Ball Hog enemy (SBZ)
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            
000092AA                            Obj1E:					; XREF: Obj_Index
000092AA 7000                       		moveq	#0,d0
000092AC 1028 0024                  		move.b	$24(a0),d0
000092B0 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000092B4 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000092B8                            ; ===========================================================================
000092B8 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000092BA 0000                       		dc.w Obj1E_Action-Obj1E_Index
000092BC                            ; ===========================================================================
000092BC                            
000092BC                            Obj1E_Main:				; XREF: Obj1E_Index
000092BC 117C 0013 0016             		move.b	#$13,$16(a0)
000092C2 117C 0008 0017             		move.b	#8,$17(a0)
000092C8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000092D0 317C 2302 0002             		move.w	#$2302,2(a0)
000092D6 117C 0004 0001             		move.b	#4,1(a0)
000092DC 117C 0004 0018             		move.b	#4,$18(a0)
000092E2 117C 0005 0020             		move.b	#5,$20(a0)
000092E8 117C 000C 0019             		move.b	#$C,$19(a0)
000092EE 6100 0000                  		bsr.w	ObjectFall
000092F2 4EB9 0000 0000             		jsr	ObjHitFloor
000092F8 4A41                       		tst.w	d1
000092FA 6A00                       		bpl.s	locret_8BAC
000092FC D368 000C                  		add.w	d1,$C(a0)
00009300 317C 0000 0012             		move.w	#0,$12(a0)
00009306 5428 0024                  		addq.b	#2,$24(a0)
0000930A                            
0000930A                            locret_8BAC:
0000930A 4E75                       		rts	
0000930C                            ; ===========================================================================
0000930C                            
0000930C                            Obj1E_Action:				; XREF: Obj1E_Index
0000930C 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009312 6100 0000                  		bsr.w	AnimateSprite
00009316 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000931C 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000931E 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009322 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009324 6000                       		bra.s	Obj1E_MarkAsGone
00009326                            ; ===========================================================================
00009326                            
00009326                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009326 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000932A                            
0000932A                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000932A 6000 0000                  		bra.w	MarkObjGone
0000932E                            ; ===========================================================================
0000932E                            
0000932E                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000932E 117C 0001 0032             		move.b	#1,$32(a0)
00009334 6100 0000                  		bsr.w	SingleObjLoad
00009338 6600                       		bne.s	loc_8C1A
0000933A 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000933E 3368 0008 0008             		move.w	8(a0),8(a1)
00009344 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000934A 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009350 337C 0000 0012             		move.w	#0,$12(a1)
00009356 70FC                       		moveq	#-4,d0
00009358 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000935E 6700                       		beq.s	loc_8C0A	; if not, branch
00009360 4440                       		neg.w	d0
00009362 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009366                            
00009366                            loc_8C0A:
00009366 D169 0008                  		add.w	d0,8(a1)
0000936A 0669 000C 000C             		addi.w	#$C,$C(a1)
00009370 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009376                            
00009376                            loc_8C1A:
00009376 60B2                       		bra.s	Obj1E_MarkAsGone
00009378                            ; ===========================================================================
00009378                            ; ---------------------------------------------------------------------------
00009378                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009378                            ; ---------------------------------------------------------------------------
00009378                            
00009378                            Obj20:					; XREF: Obj_Index
00009378 7000                       		moveq	#0,d0
0000937A 1028 0024                  		move.b	$24(a0),d0
0000937E 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009382 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009386                            ; ===========================================================================
00009386 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009388 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000938A                            ; ===========================================================================
0000938A                            
0000938A                            Obj20_Main:				; XREF: Obj20_Index
0000938A 5428 0024                  		addq.b	#2,$24(a0)
0000938E 117C 0007 0016             		move.b	#7,$16(a0)
00009394 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000939C 317C 2302 0002             		move.w	#$2302,2(a0)
000093A2 117C 0004 0001             		move.b	#4,1(a0)
000093A8 117C 0003 0018             		move.b	#3,$18(a0)
000093AE 117C 0087 0020             		move.b	#$87,$20(a0)
000093B4 117C 0008 0019             		move.b	#8,$19(a0)
000093BA 7000                       		moveq	#0,d0
000093BC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000093C0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000093C4 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000093C8 117C 0004 001A             		move.b	#4,$1A(a0)
000093CE                            
000093CE                            Obj20_Bounce:				; XREF: Obj20_Index
000093CE 4EB9 0000 0000             		jsr	ObjectFall
000093D4 4A68 0012                  		tst.w	$12(a0)
000093D8 6B00                       		bmi.s	Obj20_ChkExplode
000093DA 4EB9 0000 0000             		jsr	ObjHitFloor
000093E0 4A41                       		tst.w	d1
000093E2 6A00                       		bpl.s	Obj20_ChkExplode
000093E4 D368 000C                  		add.w	d1,$C(a0)
000093E8 317C FD00 0012             		move.w	#-$300,$12(a0)
000093EE 4A03                       		tst.b	d3
000093F0 6700                       		beq.s	Obj20_ChkExplode
000093F2 6B00                       		bmi.s	loc_8CA4
000093F4 4A68 0010                  		tst.w	$10(a0)
000093F8 6A00                       		bpl.s	Obj20_ChkExplode
000093FA 4468 0010                  		neg.w	$10(a0)
000093FE 6000                       		bra.s	Obj20_ChkExplode
00009400                            ; ===========================================================================
00009400                            
00009400                            loc_8CA4:				; XREF: Obj20_Bounce
00009400 4A68 0010                  		tst.w	$10(a0)
00009404 6B00                       		bmi.s	Obj20_ChkExplode
00009406 4468 0010                  		neg.w	$10(a0)
0000940A                            
0000940A                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000940A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000940E 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009410 10BC 0024                  		move.b	#$24,0(a0)
00009414 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009418 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000941E 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009422                            ; ===========================================================================
00009422                            
00009422                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009422 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009426 6A00                       		bpl.s	Obj20_Display
00009428 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000942E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009434                            
00009434                            Obj20_Display:
00009434 6100 0000                  		bsr.w	DisplaySprite
00009438 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000943C 0640 00E0                  		addi.w	#$E0,d0
00009440 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009444 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009448 4E75                       		rts	
0000944A                            ; ===========================================================================
0000944A                            ; ---------------------------------------------------------------------------
0000944A                            ; Object 24 - explosion	from a destroyed monitor
0000944A                            ; ---------------------------------------------------------------------------
0000944A                            
0000944A                            Obj24:					; XREF: Obj_Index
0000944A 7000                       		moveq	#0,d0
0000944C 1028 0024                  		move.b	$24(a0),d0
00009450 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009454 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009458                            ; ===========================================================================
00009458 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000945A 0000                       		dc.w Obj24_Animate-Obj24_Index
0000945C                            ; ===========================================================================
0000945C                            
0000945C                            Obj24_Main:				; XREF: Obj24_Index
0000945C 5428 0024                  		addq.b	#2,$24(a0)
00009460 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009468 317C 041C 0002             		move.w	#$41C,2(a0)
0000946E 117C 0004 0001             		move.b	#4,1(a0)
00009474 117C 0001 0018             		move.b	#1,$18(a0)
0000947A 117C 0000 0020             		move.b	#0,$20(a0)
00009480 117C 000C 0019             		move.b	#$C,$19(a0)
00009486 117C 0009 001E             		move.b	#9,$1E(a0)
0000948C 117C 0000 001A             		move.b	#0,$1A(a0)
00009492 303C 00A5                  		move.w	#$A5,d0
00009496 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play explosion sound
0000949C                            
0000949C                            Obj24_Animate:				; XREF: Obj24_Index
0000949C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094A0 6A00                       		bpl.s	Obj24_Display
000094A2 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000094A8 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094AC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000094B2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094B6                            
000094B6                            Obj24_Display:
000094B6 6000 0000                  		bra.w	DisplaySprite
000094BA                            ; ===========================================================================
000094BA                            ; ---------------------------------------------------------------------------
000094BA                            ; Object 27 - explosion	from a destroyed enemy
000094BA                            ; ---------------------------------------------------------------------------
000094BA                            
000094BA                            Obj27:					; XREF: Obj_Index
000094BA 7000                       		moveq	#0,d0
000094BC 1028 0024                  		move.b	$24(a0),d0
000094C0 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000094C4 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000094C8                            ; ===========================================================================
000094C8 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000094CA 0000                       		dc.w Obj27_Main-Obj27_Index
000094CC 0000                       		dc.w Obj27_Animate-Obj27_Index
000094CE                            ; ===========================================================================
000094CE                            
000094CE                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000094CE 5428 0024                  		addq.b	#2,$24(a0)
000094D2 6100 0000                  		bsr.w	SingleObjLoad
000094D6 6600                       		bne.s	Obj27_Main
000094D8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000094DC 3368 0008 0008             		move.w	8(a0),8(a1)
000094E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000094E8 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000094EE                            
000094EE                            Obj27_Main:				; XREF: Obj27_Index
000094EE 5428 0024                  		addq.b	#2,$24(a0)
000094F2 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000094FA 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009500 117C 0004 0001             		move.b	#4,1(a0)
00009506 117C 0001 0018             		move.b	#1,$18(a0)
0000950C 117C 0000 0020             		move.b	#0,$20(a0)
00009512 117C 000C 0019             		move.b	#$C,$19(a0)
00009518 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000951E 117C 0000 001A             		move.b	#0,$1A(a0)
00009524 303C 00C1                  		move.w	#$C1,d0
00009528 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000952E                            
0000952E                            Obj27_Animate:				; XREF: Obj27_Index
0000952E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009532 6A00                       		bpl.s	Obj27_Display
00009534 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000953A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000953E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009544 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009548                            
00009548                            Obj27_Display:
00009548 6000 0000                  		bra.w	DisplaySprite
0000954C                            ; ===========================================================================
0000954C                            ; ---------------------------------------------------------------------------
0000954C                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000954C                            ; ---------------------------------------------------------------------------
0000954C                            
0000954C                            Obj3F:					; XREF: Obj_Index
0000954C 7000                       		moveq	#0,d0
0000954E 1028 0024                  		move.b	$24(a0),d0
00009552 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009556 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000955A                            ; ===========================================================================
0000955A 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000955C FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000955E                            ; ===========================================================================
0000955E                            
0000955E                            Obj3F_Main:				; XREF: Obj3F_Index
0000955E 5428 0024                  		addq.b	#2,$24(a0)
00009562 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000956A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009570 117C 0004 0001             		move.b	#4,1(a0)
00009576 117C 0001 0018             		move.b	#1,$18(a0)
0000957C 117C 0000 0020             		move.b	#0,$20(a0)
00009582 117C 000C 0019             		move.b	#$C,$19(a0)
00009588 117C 0007 001E             		move.b	#7,$1E(a0)
0000958E 117C 0000 001A             		move.b	#0,$1A(a0)
00009594 303C 00C4                  		move.w	#$C4,d0
00009598 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000959E                            ; ===========================================================================
0000959E                            Ani_obj1E:
0000959E                            	include "_anim\obj1E.asm"
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Animation script - doors (SBZ)
0000959E                            ; ---------------------------------------------------------------------------
0000959E 0000                       		dc.w byte_8E4A-Ani_obj1E
000095A0 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000095B8 00                         		even
000095B8 00                         		even
000095B8                            
000095B8                            ; ---------------------------------------------------------------------------
000095B8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000095B8                            ; ---------------------------------------------------------------------------
000095B8                            Map_obj1E:
000095B8                            	include "_maps\obj1E.asm"
000095B8                            ; ---------------------------------------------------------------------------
000095B8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000095B8                            ; ---------------------------------------------------------------------------
000095B8 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000095BC 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000095C0 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000095C4 02                         byte_8E6E:	dc.b 2
000095C5 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000095CA FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000095CF 02                         byte_8E79:	dc.b 2
000095D0 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000095D5 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000095DA 02                         byte_8E84:	dc.b 2
000095DB F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000095E0 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000095E5 02                         byte_8E8F:	dc.b 2
000095E6 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000095EB F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000095F0 01                         byte_8E9A:	dc.b 1
000095F1 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000095F6 01                         byte_8EA0:	dc.b 1
000095F7 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000095FC                            		even
000095FC                            		even
000095FC                            
000095FC                            ; ---------------------------------------------------------------------------
000095FC                            ; Sprite mappings - explosion
000095FC                            ; ---------------------------------------------------------------------------
000095FC                            Map_obj24:
000095FC                            	include "_maps\obj24.asm"
000095FC                            ; ---------------------------------------------------------------------------
000095FC                            ; Sprite mappings - explosion
000095FC                            ; ---------------------------------------------------------------------------
000095FC 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009600 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009604 01                         byte_8EAE:	dc.b 1
00009605 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000960A 01                         byte_8EB4:	dc.b 1
0000960B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009610 01                         byte_8EBA:	dc.b 1
00009611 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009616 01                         byte_8EC0:	dc.b 1
00009617 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000961C                            		even
0000961C                            		even
0000961C                            
0000961C                            ; ---------------------------------------------------------------------------
0000961C                            ; Sprite mappings - explosion
0000961C                            ; ---------------------------------------------------------------------------
0000961C 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009620 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009624 0000                       		dc.w byte_8EF7-Map_obj27
00009626 01                         byte_8ED0:	dc.b 1
00009627 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000962C 01                         byte_8ED6:	dc.b 1
0000962D F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009632 01                         byte_8EDC:	dc.b 1
00009633 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009638 04                         byte_8EE2:	dc.b 4
00009639 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000963E EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009643 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009648 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000964D 04                         byte_8EF7:	dc.b 4
0000964E EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009653 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009658 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000965D FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009662                            		even
00009662                            ; ---------------------------------------------------------------------------
00009662                            ; Sprite mappings - explosion from when	a boss is destroyed
00009662                            ; ---------------------------------------------------------------------------
00009662 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009664 0000                       		dc.w byte_8F16-Map_obj3F
00009666 0000                       		dc.w byte_8F1C-Map_obj3F
00009668 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000966A FFEB                       		dc.w byte_8EF7-Map_obj3F
0000966C 01                         byte_8F16:	dc.b 1
0000966D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009672 01                         byte_8F1C:	dc.b 1
00009673 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009678                            		even
00009678                            ; ===========================================================================
00009678                            ; ---------------------------------------------------------------------------
00009678                            ; Object 28 - animals
00009678                            ; ---------------------------------------------------------------------------
00009678                            
00009678                            Obj28:					; XREF: Obj_Index
00009678 7000                       		moveq	#0,d0
0000967A 1028 0024                  		move.b	$24(a0),d0
0000967E 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009682 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009686                            ; ===========================================================================
00009686 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000968A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000968E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009692 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009696 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000969A 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000969E 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000096A2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000096A6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000096AA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000096AE 0000                       		dc.w loc_92D6-Obj28_Index
000096B0                            
000096B0 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000096BC                            
000096BC FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000096C0 0000 0000                  		dc.l Map_obj28
000096C4 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000096C8 0000 0000                  		dc.l Map_obj28a		; mappings address
000096CC FE80 FD00                  		dc.w $FE80, $FD00
000096D0 0000 0000                  		dc.l Map_obj28
000096D4 FEC0 FE80                  		dc.w $FEC0, $FE80
000096D8 0000 0000                  		dc.l Map_obj28a
000096DC FE40 FD00                  		dc.w $FE40, $FD00
000096E0 0000 0000                  		dc.l Map_obj28b
000096E4 FD00 FC00                  		dc.w $FD00, $FC00
000096E8 0000 0000                  		dc.l Map_obj28a
000096EC FD80 FC80                  		dc.w $FD80, $FC80
000096F0 0000 0000                  		dc.l Map_obj28b
000096F4                            
000096F4 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009704 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009714 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009720                            
00009720 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009734 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009748 0000 0000                  		dc.l Map_obj28b
0000974C                            
0000974C 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000975E 0565 05B3                  		dc.w $565, $5B3
00009762                            ; ===========================================================================
00009762                            
00009762                            Obj28_Ending:				; XREF: Obj28_Index
00009762 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009766 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000976A 7000                       		moveq	#0,d0
0000976C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009770 D040                       		add.w	d0,d0		; multiply d0 by 2
00009772 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009776 0440 0014                  		subi.w	#$14,d0
0000977A 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009780 D040                       		add.w	d0,d0
00009782 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009788 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000978C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009792 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009798 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000979E 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000097A4 117C 000C 0016             		move.b	#$C,$16(a0)
000097AA 117C 0004 0001             		move.b	#4,1(a0)
000097B0 08E8 0000 0001             		bset	#0,1(a0)
000097B6 117C 0006 0018             		move.b	#6,$18(a0)
000097BC 117C 0008 0019             		move.b	#8,$19(a0)
000097C2 117C 0007 001E             		move.b	#7,$1E(a0)
000097C8 6000 0000                  		bra.w	DisplaySprite
000097CC                            ; ===========================================================================
000097CC                            
000097CC                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000097CC 5428 0024                  		addq.b	#2,$24(a0)
000097D0 6100 90F4                  		bsr.w	RandomNumber
000097D4 0240 0001                  		andi.w	#1,d0
000097D8 7200                       		moveq	#0,d1
000097DA 1238 FE10                  		move.b	($FFFFFE10).w,d1
000097DE D241                       		add.w	d1,d1
000097E0 D240                       		add.w	d0,d1
000097E2 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000097E6 1031 1000                  		move.b	(a1,d1.w),d0
000097EA 1140 0030                  		move.b	d0,$30(a0)
000097EE E748                       		lsl.w	#3,d0
000097F0 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097F4 D2C0                       		adda.w	d0,a1
000097F6 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097FA 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097FE 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009802 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009808 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000980E 6700                       		beq.s	loc_90C0	; if yes, branch
00009810 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009816                            
00009816                            loc_90C0:
00009816 117C 000C 0016             		move.b	#$C,$16(a0)
0000981C 117C 0004 0001             		move.b	#4,1(a0)
00009822 08E8 0000 0001             		bset	#0,1(a0)
00009828 117C 0006 0018             		move.b	#6,$18(a0)
0000982E 117C 0008 0019             		move.b	#8,$19(a0)
00009834 117C 0007 001E             		move.b	#7,$1E(a0)
0000983A 117C 0002 001A             		move.b	#2,$1A(a0)
00009840 317C FC00 0012             		move.w	#-$400,$12(a0)
00009846 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000984A 6600                       		bne.s	loc_911C
0000984C 6100 0000                  		bsr.w	SingleObjLoad
00009850 6600                       		bne.s	Obj28_Display
00009852 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009856 3368 0008 0008             		move.w	8(a0),8(a1)
0000985C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009862 3028 003E                  		move.w	$3E(a0),d0
00009866 E248                       		lsr.w	#1,d0
00009868 1340 001A                  		move.b	d0,$1A(a1)
0000986C                            
0000986C                            Obj28_Display:
0000986C 6000 0000                  		bra.w	DisplaySprite
00009870                            ; ===========================================================================
00009870                            
00009870                            loc_911C:
00009870 117C 0012 0024             		move.b	#$12,$24(a0)
00009876 4268 0010                  		clr.w	$10(a0)
0000987A 6000 0000                  		bra.w	DisplaySprite
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            loc_912A:				; XREF: Obj28_Index
0000987E 4A28 0001                  		tst.b	1(a0)
00009882 6A00 0000                  		bpl.w	DeleteObject
00009886 6100 0000                  		bsr.w	ObjectFall
0000988A 4A68 0012                  		tst.w	$12(a0)
0000988E 6B00                       		bmi.s	loc_9180
00009890 4EB9 0000 0000             		jsr	ObjHitFloor
00009896 4A41                       		tst.w	d1
00009898 6A00                       		bpl.s	loc_9180
0000989A D368 000C                  		add.w	d1,$C(a0)
0000989E 3168 0032 0010             		move.w	$32(a0),$10(a0)
000098A4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098AA 117C 0001 001A             		move.b	#1,$1A(a0)
000098B0 1028 0030                  		move.b	$30(a0),d0
000098B4 D000                       		add.b	d0,d0
000098B6 5800                       		addq.b	#4,d0
000098B8 1140 0024                  		move.b	d0,$24(a0)
000098BC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000098C0 6700                       		beq.s	loc_9180
000098C2 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000098C8 6700                       		beq.s	loc_9180
000098CA 4468 0010                  		neg.w	$10(a0)
000098CE 0868 0000 0001             		bchg	#0,1(a0)
000098D4                            
000098D4                            loc_9180:
000098D4 6000 0000                  		bra.w	DisplaySprite
000098D8                            ; ===========================================================================
000098D8                            
000098D8                            loc_9184:				; XREF: Obj28_Index
000098D8 6100 0000                  		bsr.w	ObjectFall
000098DC 117C 0001 001A             		move.b	#1,$1A(a0)
000098E2 4A68 0012                  		tst.w	$12(a0)
000098E6 6B00                       		bmi.s	loc_91AE
000098E8 117C 0000 001A             		move.b	#0,$1A(a0)
000098EE 4EB9 0000 0000             		jsr	ObjHitFloor
000098F4 4A41                       		tst.w	d1
000098F6 6A00                       		bpl.s	loc_91AE
000098F8 D368 000C                  		add.w	d1,$C(a0)
000098FC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009902                            
00009902                            loc_91AE:
00009902 4A28 0028                  		tst.b	$28(a0)
00009906 6600                       		bne.s	loc_9224
00009908 4A28 0001                  		tst.b	1(a0)
0000990C 6A00 0000                  		bpl.w	DeleteObject
00009910 6000 0000                  		bra.w	DisplaySprite
00009914                            ; ===========================================================================
00009914                            
00009914                            loc_91C0:				; XREF: Obj28_Index
00009914 6100 0000                  		bsr.w	SpeedToPos
00009918 0668 0018 0012             		addi.w	#$18,$12(a0)
0000991E 4A68 0012                  		tst.w	$12(a0)
00009922 6B00                       		bmi.s	loc_91FC
00009924 4EB9 0000 0000             		jsr	ObjHitFloor
0000992A 4A41                       		tst.w	d1
0000992C 6A00                       		bpl.s	loc_91FC
0000992E D368 000C                  		add.w	d1,$C(a0)
00009932 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009938 4A28 0028                  		tst.b	$28(a0)
0000993C 6700                       		beq.s	loc_91FC
0000993E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009944 6700                       		beq.s	loc_91FC
00009946 4468 0010                  		neg.w	$10(a0)
0000994A 0868 0000 0001             		bchg	#0,1(a0)
00009950                            
00009950                            loc_91FC:
00009950 5328 001E                  		subq.b	#1,$1E(a0)
00009954 6A00                       		bpl.s	loc_9212
00009956 117C 0001 001E             		move.b	#1,$1E(a0)
0000995C 5228 001A                  		addq.b	#1,$1A(a0)
00009960 0228 0001 001A             		andi.b	#1,$1A(a0)
00009966                            
00009966                            loc_9212:
00009966 4A28 0028                  		tst.b	$28(a0)
0000996A 6600                       		bne.s	loc_9224
0000996C 4A28 0001                  		tst.b	1(a0)
00009970 6A00 0000                  		bpl.w	DeleteObject
00009974 6000 0000                  		bra.w	DisplaySprite
00009978                            ; ===========================================================================
00009978                            
00009978                            loc_9224:				; XREF: Obj28_Index
00009978 3028 0008                  		move.w	8(a0),d0
0000997C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009980 6500                       		bcs.s	loc_923C
00009982 0440 0180                  		subi.w	#$180,d0
00009986 6A00                       		bpl.s	loc_923C
00009988 4A28 0001                  		tst.b	1(a0)
0000998C 6A00 0000                  		bpl.w	DeleteObject
00009990                            
00009990                            loc_923C:
00009990 6000 0000                  		bra.w	DisplaySprite
00009994                            ; ===========================================================================
00009994                            
00009994                            loc_9240:				; XREF: Obj28_Index
00009994 4A28 0001                  		tst.b	1(a0)
00009998 6A00 0000                  		bpl.w	DeleteObject
0000999C 5368 0036                  		subq.w	#1,$36(a0)
000099A0 6600 0000                  		bne.w	loc_925C
000099A4 117C 0002 0024             		move.b	#2,$24(a0)
000099AA 117C 0003 0018             		move.b	#3,$18(a0)
000099B0                            
000099B0                            loc_925C:
000099B0 6000 0000                  		bra.w	DisplaySprite
000099B4                            ; ===========================================================================
000099B4                            
000099B4                            loc_9260:				; XREF: Obj28_Index
000099B4 6100 0000                  		bsr.w	sub_9404
000099B8 6400                       		bcc.s	loc_927C
000099BA 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099C0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099C6 117C 000E 0024             		move.b	#$E,$24(a0)
000099CC 6000 FF46                  		bra.w	loc_91C0
000099D0                            ; ===========================================================================
000099D0                            
000099D0                            loc_927C:
000099D0 6000 FFA6                  		bra.w	loc_9224
000099D4                            ; ===========================================================================
000099D4                            
000099D4                            loc_9280:				; XREF: Obj28_Index
000099D4 6100 0000                  		bsr.w	sub_9404
000099D8 6A00                       		bpl.s	loc_92B6
000099DA 4268 0010                  		clr.w	$10(a0)
000099DE 4268 0032                  		clr.w	$32(a0)
000099E2 6100 0000                  		bsr.w	SpeedToPos
000099E6 0668 0018 0012             		addi.w	#$18,$12(a0)
000099EC 6100 0000                  		bsr.w	loc_93C4
000099F0 6100 0000                  		bsr.w	loc_93EC
000099F4 5328 001E                  		subq.b	#1,$1E(a0)
000099F8 6A00                       		bpl.s	loc_92B6
000099FA 117C 0001 001E             		move.b	#1,$1E(a0)
00009A00 5228 001A                  		addq.b	#1,$1A(a0)
00009A04 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A0A                            
00009A0A                            loc_92B6:
00009A0A 6000 FF6C                  		bra.w	loc_9224
00009A0E                            ; ===========================================================================
00009A0E                            
00009A0E                            loc_92BA:				; XREF: Obj28_Index
00009A0E 6100 0000                  		bsr.w	sub_9404
00009A12 6A00                       		bpl.s	loc_9310
00009A14 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A1A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A20 117C 0004 0024             		move.b	#4,$24(a0)
00009A26 6000 FEB0                  		bra.w	loc_9184
00009A2A                            ; ===========================================================================
00009A2A                            
00009A2A                            loc_92D6:				; XREF: Obj28_Index
00009A2A 6100 0000                  		bsr.w	ObjectFall
00009A2E 117C 0001 001A             		move.b	#1,$1A(a0)
00009A34 4A68 0012                  		tst.w	$12(a0)
00009A38 6B00                       		bmi.s	loc_9310
00009A3A 117C 0000 001A             		move.b	#0,$1A(a0)
00009A40 4EB9 0000 0000             		jsr	ObjHitFloor
00009A46 4A41                       		tst.w	d1
00009A48 6A00                       		bpl.s	loc_9310
00009A4A 4628 0029                  		not.b	$29(a0)
00009A4E 6600                       		bne.s	loc_9306
00009A50 4468 0010                  		neg.w	$10(a0)
00009A54 0868 0000 0001             		bchg	#0,1(a0)
00009A5A                            
00009A5A                            loc_9306:
00009A5A D368 000C                  		add.w	d1,$C(a0)
00009A5E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A64                            
00009A64                            loc_9310:
00009A64 6000 FF12                  		bra.w	loc_9224
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            loc_9314:				; XREF: Obj28_Index
00009A68 6100 0000                  		bsr.w	sub_9404
00009A6C 6A00                       		bpl.s	loc_932E
00009A6E 4268 0010                  		clr.w	$10(a0)
00009A72 4268 0032                  		clr.w	$32(a0)
00009A76 6100 0000                  		bsr.w	ObjectFall
00009A7A 6100 0000                  		bsr.w	loc_93C4
00009A7E 6100 0000                  		bsr.w	loc_93EC
00009A82                            
00009A82                            loc_932E:
00009A82 6000 FEF4                  		bra.w	loc_9224
00009A86                            ; ===========================================================================
00009A86                            
00009A86                            loc_9332:				; XREF: Obj28_Index
00009A86 6100 0000                  		bsr.w	sub_9404
00009A8A 6A00                       		bpl.s	loc_936C
00009A8C 6100 0000                  		bsr.w	ObjectFall
00009A90 117C 0001 001A             		move.b	#1,$1A(a0)
00009A96 4A68 0012                  		tst.w	$12(a0)
00009A9A 6B00                       		bmi.s	loc_936C
00009A9C 117C 0000 001A             		move.b	#0,$1A(a0)
00009AA2 4EB9 0000 0000             		jsr	ObjHitFloor
00009AA8 4A41                       		tst.w	d1
00009AAA 6A00                       		bpl.s	loc_936C
00009AAC 4468 0010                  		neg.w	$10(a0)
00009AB0 0868 0000 0001             		bchg	#0,1(a0)
00009AB6 D368 000C                  		add.w	d1,$C(a0)
00009ABA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AC0                            
00009AC0                            loc_936C:
00009AC0 6000 FEB6                  		bra.w	loc_9224
00009AC4                            ; ===========================================================================
00009AC4                            
00009AC4                            loc_9370:				; XREF: Obj28_Index
00009AC4 6100 0000                  		bsr.w	sub_9404
00009AC8 6A00                       		bpl.s	loc_93C0
00009ACA 6100 0000                  		bsr.w	SpeedToPos
00009ACE 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AD4 4A68 0012                  		tst.w	$12(a0)
00009AD8 6B00                       		bmi.s	loc_93AA
00009ADA 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE0 4A41                       		tst.w	d1
00009AE2 6A00                       		bpl.s	loc_93AA
00009AE4 4628 0029                  		not.b	$29(a0)
00009AE8 6600                       		bne.s	loc_93A0
00009AEA 4468 0010                  		neg.w	$10(a0)
00009AEE 0868 0000 0001             		bchg	#0,1(a0)
00009AF4                            
00009AF4                            loc_93A0:
00009AF4 D368 000C                  		add.w	d1,$C(a0)
00009AF8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AFE                            
00009AFE                            loc_93AA:
00009AFE 5328 001E                  		subq.b	#1,$1E(a0)
00009B02 6A00                       		bpl.s	loc_93C0
00009B04 117C 0001 001E             		move.b	#1,$1E(a0)
00009B0A 5228 001A                  		addq.b	#1,$1A(a0)
00009B0E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B14                            
00009B14                            loc_93C0:
00009B14 6000 FE62                  		bra.w	loc_9224
00009B18                            ; ===========================================================================
00009B18                            
00009B18                            loc_93C4:
00009B18 117C 0001 001A             		move.b	#1,$1A(a0)
00009B1E 4A68 0012                  		tst.w	$12(a0)
00009B22 6B00                       		bmi.s	locret_93EA
00009B24 117C 0000 001A             		move.b	#0,$1A(a0)
00009B2A 4EB9 0000 0000             		jsr	ObjHitFloor
00009B30 4A41                       		tst.w	d1
00009B32 6A00                       		bpl.s	locret_93EA
00009B34 D368 000C                  		add.w	d1,$C(a0)
00009B38 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B3E                            
00009B3E                            locret_93EA:
00009B3E 4E75                       		rts	
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            loc_93EC:
00009B40 08E8 0000 0001             		bset	#0,1(a0)
00009B46 3028 0008                  		move.w	8(a0),d0
00009B4A 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B4E 6400                       		bcc.s	locret_9402
00009B50 08A8 0000 0001             		bclr	#0,1(a0)
00009B56                            
00009B56                            locret_9402:
00009B56 4E75                       		rts	
00009B58                            
00009B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B58                            
00009B58                            
00009B58                            sub_9404:
00009B58 3038 D008                  		move.w	($FFFFD008).w,d0
00009B5C 9068 0008                  		sub.w	8(a0),d0
00009B60 0440 00B8                  		subi.w	#$B8,d0
00009B64 4E75                       		rts	
00009B66                            ; End of function sub_9404
00009B66                            
00009B66                            ; ===========================================================================
00009B66                            ; ---------------------------------------------------------------------------
00009B66                            ; Object 29 - points that appear when you destroy something
00009B66                            ; ---------------------------------------------------------------------------
00009B66                            
00009B66                            Obj29:					; XREF: Obj_Index
00009B66 7000                       		moveq	#0,d0
00009B68 1028 0024                  		move.b	$24(a0),d0
00009B6C 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B70 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B74 6000 0000                  		bra.w	DisplaySprite
00009B78                            ; ===========================================================================
00009B78 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B7A 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B7C                            ; ===========================================================================
00009B7C                            
00009B7C                            Obj29_Main:				; XREF: Obj29_Index
00009B7C 5428 0024                  		addq.b	#2,$24(a0)
00009B80 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B88 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
00009B8E 117C 0004 0001             		move.b	#4,1(a0)
00009B94 117C 0001 0018             		move.b	#1,$18(a0)
00009B9A 117C 0008 0019             		move.b	#8,$19(a0)
00009BA0 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009BA6                            
00009BA6                            Obj29_Slower:				; XREF: Obj29_Index
00009BA6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009BAA 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009BAE 6100 0000                  		bsr.w	SpeedToPos
00009BB2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009BB8 4E75                       		rts	
00009BBA                            ; ===========================================================================
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - animals
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            Map_obj28:
00009BBA                            	include "_maps\obj28.asm"
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - animals
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA 0000                       		dc.w byte_9472-Map_obj28
00009BBC 0000                       		dc.w byte_9478-Map_obj28
00009BBE 0000                       		dc.w byte_946C-Map_obj28
00009BC0 01                         byte_946C:	dc.b 1
00009BC1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BC6 01                         byte_9472:	dc.b 1
00009BC7 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009BCC 01                         byte_9478:	dc.b 1
00009BCD F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009BD2                            		even
00009BD2                            		even
00009BD2                            
00009BD2                            Map_obj28a:
00009BD2                            	include "_maps\obj28a.asm"
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            ; Sprite mappings - animals
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2 0000                       		dc.w byte_948A-Map_obj28a
00009BD4 0000                       		dc.w byte_9490-Map_obj28a
00009BD6 0000                       		dc.w byte_9484-Map_obj28a
00009BD8 01                         byte_9484:	dc.b 1
00009BD9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BDE 01                         byte_948A:	dc.b 1
00009BDF FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009BE4 01                         byte_9490:	dc.b 1
00009BE5 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009BEA                            		even
00009BEA                            		even
00009BEA                            
00009BEA                            Map_obj28b:
00009BEA                            	include "_maps\obj28b.asm"
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA                            ; Sprite mappings - animals
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA 0000                       		dc.w byte_94A2-Map_obj28b
00009BEC 0000                       		dc.w byte_94A8-Map_obj28b
00009BEE 0000                       		dc.w byte_949C-Map_obj28b
00009BF0 01                         byte_949C:	dc.b 1
00009BF1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BF6 01                         byte_94A2:	dc.b 1
00009BF7 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BFC 01                         byte_94A8:	dc.b 1
00009BFD FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009C02                            		even
00009C02                            		even
00009C02                            
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Sprite mappings - points that	appear when you	destroy	something
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            Map_obj29:
00009C02                            	include "_maps\obj29.asm"
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Sprite mappings - points that	appear when you	destroy	something
00009C02                            ; ---------------------------------------------------------------------------
00009C02 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009C06 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009C0A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009C0E 0000                       		dc.w byte_94E5-Map_obj29
00009C10 01                         byte_94BC:	dc.b 1
00009C11 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009C16 01                         byte_94C2:	dc.b 1
00009C17 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009C1C 01                         byte_94C8:	dc.b 1
00009C1D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009C22 01                         byte_94CE:	dc.b 1
00009C23 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009C28 01                         byte_94D4:	dc.b 1
00009C29 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009C2E 02                         byte_94DA:	dc.b 2
00009C2F FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009C34 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009C39 02                         byte_94E5:	dc.b 2
00009C3A FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009C3F FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009C44                            		even
00009C44                            		even
00009C44                            
00009C44                            ; ===========================================================================
00009C44                            ; ---------------------------------------------------------------------------
00009C44                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009C44                            ; ---------------------------------------------------------------------------
00009C44                            
00009C44                            Obj1F:					; XREF: Obj_Index
00009C44 7000                       		moveq	#0,d0
00009C46 1028 0024                  		move.b	$24(a0),d0
00009C4A 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C4E 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C52                            ; ===========================================================================
00009C52 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C54 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C56 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C58 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C5A 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C5C                            ; ===========================================================================
00009C5C                            
00009C5C                            Obj1F_Main:				; XREF: Obj1F_Index
00009C5C 117C 0010 0016             		move.b	#$10,$16(a0)
00009C62 117C 0008 0017             		move.b	#8,$17(a0)
00009C68 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C70 317C 0400 0002             		move.w	#$400,2(a0)
00009C76 117C 0004 0001             		move.b	#4,1(a0)
00009C7C 117C 0003 0018             		move.b	#3,$18(a0)
00009C82 117C 0006 0020             		move.b	#6,$20(a0)
00009C88 117C 0015 0019             		move.b	#$15,$19(a0)
00009C8E 6100 0000                  		bsr.w	ObjectFall
00009C92 4EB9 0000 0000             		jsr	ObjHitFloor
00009C98 4A41                       		tst.w	d1
00009C9A 6A00                       		bpl.s	locret_955A
00009C9C D368 000C                  		add.w	d1,$C(a0)
00009CA0 1143 0026                  		move.b	d3,$26(a0)
00009CA4 317C 0000 0012             		move.w	#0,$12(a0)
00009CAA 5428 0024                  		addq.b	#2,$24(a0)
00009CAE                            
00009CAE                            locret_955A:
00009CAE 4E75                       		rts	
00009CB0                            ; ===========================================================================
00009CB0                            
00009CB0                            Obj1F_Action:				; XREF: Obj1F_Index
00009CB0 7000                       		moveq	#0,d0
00009CB2 1028 0025                  		move.b	$25(a0),d0
00009CB6 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009CBA 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009CBE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009CC4 6100 0000                  		bsr.w	AnimateSprite
00009CC8 6000 0000                  		bra.w	MarkObjGone
00009CCC                            ; ===========================================================================
00009CCC 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009CCE 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009CD0                            ; ===========================================================================
00009CD0                            
00009CD0                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009CD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009CD4 6A00                       		bpl.s	locret_95B6
00009CD6 4A28 0001                  		tst.b	1(a0)
00009CDA 6A00                       		bpl.s	Obj1F_Move
00009CDC 0868 0001 0032             		bchg	#1,$32(a0)
00009CE2 6600                       		bne.s	Obj1F_MakeFire
00009CE4                            
00009CE4                            Obj1F_Move:
00009CE4 5428 0025                  		addq.b	#2,$25(a0)
00009CE8 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CEE 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CF4 6100 0000                  		bsr.w	Obj1F_SetAni
00009CF8 5600                       		addq.b	#3,d0
00009CFA 1140 001C                  		move.b	d0,$1C(a0)
00009CFE 0868 0000 0022             		bchg	#0,$22(a0)
00009D04 6600                       		bne.s	locret_95B6
00009D06 4468 0010                  		neg.w	$10(a0)		; change direction
00009D0A                            
00009D0A                            locret_95B6:
00009D0A 4E75                       		rts	
00009D0C                            ; ===========================================================================
00009D0C                            
00009D0C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009D0C 317C 003B 0030             		move.w	#$3B,$30(a0)
00009D12 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009D18 6100 0000                  		bsr.w	SingleObjLoad
00009D1C 6600                       		bne.s	Obj1F_MakeFire2
00009D1E 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009D22 137C 0006 0024             		move.b	#6,$24(a1)
00009D28 3368 0008 0008             		move.w	8(a0),8(a1)
00009D2E 0469 0010 0008             		subi.w	#$10,8(a1)
00009D34 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D3A 337C FF00 0010             		move.w	#-$100,$10(a1)
00009D40                            
00009D40                            Obj1F_MakeFire2:
00009D40 6100 0000                  		bsr.w	SingleObjLoad
00009D44 6600                       		bne.s	locret_9618
00009D46 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D4A 137C 0006 0024             		move.b	#6,$24(a1)
00009D50 3368 0008 0008             		move.w	8(a0),8(a1)
00009D56 0669 0010 0008             		addi.w	#$10,8(a1)
00009D5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D62 337C 0100 0010             		move.w	#$100,$10(a1)
00009D68                            
00009D68                            locret_9618:
00009D68 4E75                       		rts	
00009D6A                            ; ===========================================================================
00009D6A                            
00009D6A                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D6A 5368 0030                  		subq.w	#1,$30(a0)
00009D6E 6B00                       		bmi.s	loc_966E
00009D70 6100 0000                  		bsr.w	SpeedToPos
00009D74 0868 0000 0032             		bchg	#0,$32(a0)
00009D7A 6600                       		bne.s	loc_9654
00009D7C 3628 0008                  		move.w	8(a0),d3
00009D80 0643 0010                  		addi.w	#$10,d3
00009D84 0828 0000 0022             		btst	#0,$22(a0)
00009D8A 6700                       		beq.s	loc_9640
00009D8C 0443 0020                  		subi.w	#$20,d3
00009D90                            
00009D90                            loc_9640:
00009D90 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D96 0C41 FFF8                  		cmpi.w	#-8,d1
00009D9A 6D00                       		blt.s	loc_966E
00009D9C 0C41 000C                  		cmpi.w	#$C,d1
00009DA0 6C00                       		bge.s	loc_966E
00009DA2 4E75                       		rts	
00009DA4                            ; ===========================================================================
00009DA4                            
00009DA4                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009DA4 4EB9 0000 0000             		jsr	ObjHitFloor
00009DAA D368 000C                  		add.w	d1,$C(a0)
00009DAE 1143 0026                  		move.b	d3,$26(a0)
00009DB2 6100 0000                  		bsr.w	Obj1F_SetAni
00009DB6 5600                       		addq.b	#3,d0
00009DB8 1140 001C                  		move.b	d0,$1C(a0)
00009DBC 4E75                       		rts	
00009DBE                            ; ===========================================================================
00009DBE                            
00009DBE                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009DBE 5528 0025                  		subq.b	#2,$25(a0)
00009DC2 317C 003B 0030             		move.w	#59,$30(a0)
00009DC8 317C 0000 0010             		move.w	#0,$10(a0)
00009DCE 6100 0000                  		bsr.w	Obj1F_SetAni
00009DD2 1140 001C                  		move.b	d0,$1C(a0)
00009DD6 4E75                       		rts	
00009DD8                            ; ---------------------------------------------------------------------------
00009DD8                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009DD8                            ; ---------------------------------------------------------------------------
00009DD8                            
00009DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DD8                            
00009DD8                            
00009DD8                            Obj1F_SetAni:				; XREF: loc_966E
00009DD8 7000                       		moveq	#0,d0
00009DDA 1628 0026                  		move.b	$26(a0),d3
00009DDE 6B00                       		bmi.s	loc_96A4
00009DE0 0C03 0006                  		cmpi.b	#6,d3
00009DE4 6500                       		bcs.s	locret_96A2
00009DE6 7001                       		moveq	#1,d0
00009DE8 0828 0000 0022             		btst	#0,$22(a0)
00009DEE 6600                       		bne.s	locret_96A2
00009DF0 7002                       		moveq	#2,d0
00009DF2                            
00009DF2                            locret_96A2:
00009DF2 4E75                       		rts	
00009DF4                            ; ===========================================================================
00009DF4                            
00009DF4                            loc_96A4:				; XREF: Obj1F_SetAni
00009DF4 0C03 00FA                  		cmpi.b	#-6,d3
00009DF8 6200                       		bhi.s	locret_96B6
00009DFA 7002                       		moveq	#2,d0
00009DFC 0828 0000 0022             		btst	#0,$22(a0)
00009E02 6600                       		bne.s	locret_96B6
00009E04 7001                       		moveq	#1,d0
00009E06                            
00009E06                            locret_96B6:
00009E06 4E75                       		rts	
00009E08                            ; End of function Obj1F_SetAni
00009E08                            
00009E08                            ; ===========================================================================
00009E08                            
00009E08                            Obj1F_Delete:				; XREF: Obj1F_Index
00009E08 6100 0000                  		bsr.w	DeleteObject
00009E0C 4E75                       		rts	
00009E0E                            ; ===========================================================================
00009E0E                            ; ---------------------------------------------------------------------------
00009E0E                            ; Sub-object - missile that the	Crabmeat throws
00009E0E                            ; ---------------------------------------------------------------------------
00009E0E                            
00009E0E                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009E0E 5428 0024                  		addq.b	#2,$24(a0)
00009E12 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009E1A 317C 0400 0002             		move.w	#$400,2(a0)
00009E20 117C 0004 0001             		move.b	#4,1(a0)
00009E26 117C 0003 0018             		move.b	#3,$18(a0)
00009E2C 117C 0087 0020             		move.b	#$87,$20(a0)
00009E32 117C 0008 0019             		move.b	#8,$19(a0)
00009E38 317C FC00 0012             		move.w	#-$400,$12(a0)
00009E3E 117C 0007 001C             		move.b	#7,$1C(a0)
00009E44                            
00009E44                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009E44 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E4A 6100 0000                  		bsr.w	AnimateSprite
00009E4E 6100 0000                  		bsr.w	ObjectFall
00009E52 6100 0000                  		bsr.w	DisplaySprite
00009E56 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E5A 0640 00E0                  		addi.w	#$E0,d0
00009E5E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E62 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E64 4E75                       		rts	
00009E66                            ; ===========================================================================
00009E66                            
00009E66                            Obj1F_Delete2:
00009E66 6000 0000                  		bra.w	DeleteObject
00009E6A                            ; ===========================================================================
00009E6A                            Ani_obj1F:
00009E6A                            	include "_anim\obj1F.asm"
00009E6A                            ; ---------------------------------------------------------------------------
00009E6A                            ; Animation script - Crabmeat enemy
00009E6A                            ; ---------------------------------------------------------------------------
00009E6A 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E70 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E76 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E7A 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E7E 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E82 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E86 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E8C 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E92 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E98 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E9C 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009EA0                            		even
00009EA0                            		even
00009EA0                            
00009EA0                            ; ---------------------------------------------------------------------------
00009EA0                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009EA0                            ; ---------------------------------------------------------------------------
00009EA0                            Map_obj1F:
00009EA0                            	include "_maps\obj1F.asm"
00009EA0                            ; ---------------------------------------------------------------------------
00009EA0                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009EA0                            ; ---------------------------------------------------------------------------
00009EA0 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009EA4 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009EA8 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009EAC 0000                       		dc.w byte_97D7-Map_obj1F
00009EAE 04                         byte_975E:	dc.b 4
00009EAF F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009EB4 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009EB9 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009EBE 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009EC3 04                         byte_9773:	dc.b 4
00009EC4 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009EC9 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009ECE 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009ED3 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009ED8 04                         byte_9788:	dc.b 4
00009ED9 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009EDE EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009EE3 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009EE8 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009EED 04                         byte_979D:	dc.b 4
00009EEE EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009EF3 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009EF8 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009EFD FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009F02 06                         byte_97B2:	dc.b 6
00009F03 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009F08 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009F0D F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009F12 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009F17 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009F1C 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009F21 01                         byte_97D1:	dc.b 1
00009F22 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009F27 01                         byte_97D7:	dc.b 1
00009F28 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009F2E 00                         		even
00009F2E 00                         		even
00009F2E                            
00009F2E                            ; ===========================================================================
00009F2E                            ; ---------------------------------------------------------------------------
00009F2E                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009F2E                            ; ---------------------------------------------------------------------------
00009F2E                            
00009F2E                            Obj22:					; XREF: Obj_Index
00009F2E 7000                       		moveq	#0,d0
00009F30 1028 0024                  		move.b	$24(a0),d0
00009F34 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009F38 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009F3C                            ; ===========================================================================
00009F3C 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009F3E 0000                       		dc.w Obj22_Action-Obj22_Index
00009F40 0000                       		dc.w Obj22_Delete-Obj22_Index
00009F42                            ; ===========================================================================
00009F42                            
00009F42                            Obj22_Main:				; XREF: Obj22_Index
00009F42 5428 0024                  		addq.b	#2,$24(a0)
00009F46 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009F4E 317C 0444 0002             		move.w	#$444,2(a0)
00009F54 117C 0004 0001             		move.b	#4,1(a0)
00009F5A 117C 0003 0018             		move.b	#3,$18(a0)
00009F60 117C 0008 0020             		move.b	#8,$20(a0)
00009F66 117C 0018 0019             		move.b	#$18,$19(a0)
00009F6C                            
00009F6C                            Obj22_Action:				; XREF: Obj22_Index
00009F6C 7000                       		moveq	#0,d0
00009F6E 1028 0025                  		move.b	$25(a0),d0
00009F72 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F76 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F7A 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F80 6100 0000                  		bsr.w	AnimateSprite
00009F84 6000 0000                  		bra.w	MarkObjGone
00009F88                            ; ===========================================================================
00009F88 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F8A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F8C                            ; ===========================================================================
00009F8C                            
00009F8C                            Obj22_Move:				; XREF: Obj22_Index2
00009F8C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F90 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F92 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F98 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F9A 5428 0025                  		addq.b	#2,$25(a0)
00009F9E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009FA4 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009FAA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009FB0 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009FB6 6600                       		bne.s	locret_986C	; if not, branch
00009FB8 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009FBC                            
00009FBC                            locret_986C:
00009FBC 4E75                       		rts	
00009FBE                            ; ===========================================================================
00009FBE                            
00009FBE                            Obj22_Fire:				; XREF: Obj22_Move
00009FBE 6100 0000                  		bsr.w	SingleObjLoad
00009FC2 6600                       		bne.s	locret_98D0
00009FC4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009FC8 3368 0008 0008             		move.w	8(a0),8(a1)
00009FCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009FD4 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009FDA 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009FE0 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009FE6 303C 0018                  		move.w	#$18,d0
00009FEA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009FF0 6600                       		bne.s	loc_98AA	; if not, branch
00009FF2 4440                       		neg.w	d0
00009FF4 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009FF8                            
00009FF8                            loc_98AA:
00009FF8 D169 0008                  		add.w	d0,8(a1)
00009FFC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A002 337C 000E 0032             		move.w	#$E,$32(a1)
0000A008 2348 003C                  		move.l	a0,$3C(a1)
0000A00C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A012 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A018 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A01E                            
0000A01E                            locret_98D0:
0000A01E 4E75                       		rts	
0000A020                            ; ===========================================================================
0000A020                            
0000A020                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A020 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A024 6B00                       		bmi.s	Obj22_ChgDir
0000A026 6100 0000                  		bsr.w	SpeedToPos
0000A02A 4A28 0034                  		tst.b	$34(a0)
0000A02E 6600                       		bne.s	locret_992A
0000A030 3038 D008                  		move.w	($FFFFD008).w,d0
0000A034 9068 0008                  		sub.w	8(a0),d0
0000A038 6A00                       		bpl.s	Obj22_SetNrSonic
0000A03A 4440                       		neg.w	d0
0000A03C                            
0000A03C                            Obj22_SetNrSonic:
0000A03C 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A040 6400                       		bcc.s	locret_992A	; if not, branch
0000A042 4A28 0001                  		tst.b	1(a0)
0000A046 6A00                       		bpl.s	locret_992A
0000A048 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A04E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A054 6000                       		bra.s	Obj22_Stop
0000A056                            ; ===========================================================================
0000A056                            
0000A056                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A056 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A05C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A062 317C 003B 0032             		move.w	#59,$32(a0)
0000A068                            
0000A068                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A068 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A06C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A072 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A078                            
0000A078                            locret_992A:
0000A078 4E75                       		rts	
0000A07A                            ; ===========================================================================
0000A07A                            
0000A07A                            Obj22_Delete:				; XREF: Obj22_Index
0000A07A 6100 0000                  		bsr.w	DeleteObject
0000A07E 4E75                       		rts	
0000A080                            ; ===========================================================================
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            ; Object 23 - missile that Buzz	Bomber throws
0000A080                            ; ---------------------------------------------------------------------------
0000A080                            
0000A080                            Obj23:					; XREF: Obj_Index
0000A080 7000                       		moveq	#0,d0
0000A082 1028 0024                  		move.b	$24(a0),d0
0000A086 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A08A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A08E                            ; ===========================================================================
0000A08E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A090 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A092 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A094 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A096 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A098                            ; ===========================================================================
0000A098                            
0000A098                            Obj23_Main:				; XREF: Obj23_Index
0000A098 5368 0032                  		subq.w	#1,$32(a0)
0000A09C 6A00                       		bpl.s	Obj23_ChkCancel
0000A09E 5428 0024                  		addq.b	#2,$24(a0)
0000A0A2 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A0AA 317C 2444 0002             		move.w	#$2444,2(a0)
0000A0B0 117C 0004 0001             		move.b	#4,1(a0)
0000A0B6 117C 0003 0018             		move.b	#3,$18(a0)
0000A0BC 117C 0008 0019             		move.b	#8,$19(a0)
0000A0C2 0228 0003 0022             		andi.b	#3,$22(a0)
0000A0C8 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A0CC 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A0CE 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A0D4 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0DA 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0E0 6000                       		bra.s	Obj23_Animate2
0000A0E2                            ; ===========================================================================
0000A0E2                            
0000A0E2                            Obj23_Animate:				; XREF: Obj23_Index
0000A0E2 6100                       		bsr.s	Obj23_ChkCancel
0000A0E4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0EA 6100 0000                  		bsr.w	AnimateSprite
0000A0EE 6000 0000                  		bra.w	DisplaySprite
0000A0F2                            ; ---------------------------------------------------------------------------
0000A0F2                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A0F2                            ; destroyed, and if it has, then cancel	the missile
0000A0F2                            ; ---------------------------------------------------------------------------
0000A0F2                            
0000A0F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0F2                            
0000A0F2                            
0000A0F2                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A0F2 2268 003C                  		movea.l	$3C(a0),a1
0000A0F6 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A0FA 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A0FC 4E75                       		rts	
0000A0FE                            ; End of function Obj23_ChkCancel
0000A0FE                            
0000A0FE                            ; ===========================================================================
0000A0FE                            
0000A0FE                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A0FE 0828 0007 0022             		btst	#7,$22(a0)
0000A104 6600                       		bne.s	Obj23_Explode
0000A106 117C 0087 0020             		move.b	#$87,$20(a0)
0000A10C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A112 6100 0000                  		bsr.w	SpeedToPos
0000A116 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A11C 6100 0000                  		bsr.w	AnimateSprite
0000A120 6100 0000                  		bsr.w	DisplaySprite
0000A124 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A128 0640 00E0                  		addi.w	#$E0,d0
0000A12C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A130 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A132 4E75                       		rts	
0000A134                            ; ===========================================================================
0000A134                            
0000A134                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A134 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A138 117C 0000 0024             		move.b	#0,$24(a0)
0000A13E 6000 F30A                  		bra.w	Obj24
0000A142                            ; ===========================================================================
0000A142                            
0000A142                            Obj23_Delete:				; XREF: Obj23_Index
0000A142 6100 0000                  		bsr.w	DeleteObject
0000A146 4E75                       		rts	
0000A148                            ; ===========================================================================
0000A148                            
0000A148                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A148 4A28 0001                  		tst.b	1(a0)
0000A14C 6AF4                       		bpl.s	Obj23_Delete
0000A14E 6100 0000                  		bsr.w	SpeedToPos
0000A152                            
0000A152                            Obj23_Animate2:				; XREF: Obj23_Main
0000A152 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A158 6100 0000                  		bsr.w	AnimateSprite
0000A15C 6100 0000                  		bsr.w	DisplaySprite
0000A160 4E75                       		rts	
0000A162                            ; ===========================================================================
0000A162                            Ani_obj22:
0000A162                            	include "_anim\obj22.asm"
0000A162                            ; ---------------------------------------------------------------------------
0000A162                            ; Animation script - Buzz Bomber enemy
0000A162                            ; ---------------------------------------------------------------------------
0000A162 0000                       		dc.w byte_9A1E-Ani_obj22
0000A164 0000                       		dc.w byte_9A22-Ani_obj22
0000A166 0000                       		dc.w byte_9A26-Ani_obj22
0000A168 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A16C 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A170 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A174                            		even
0000A174                            		even
0000A174                            
0000A174                            Ani_obj23:
0000A174                            	include "_anim\obj23.asm"
0000A174                            ; ---------------------------------------------------------------------------
0000A174                            ; Animation script - missile that Buzz Bomber throws
0000A174                            ; ---------------------------------------------------------------------------
0000A174 0000                       		dc.w byte_9A2E-Ani_obj23
0000A176 0000                       		dc.w byte_9A32-Ani_obj23
0000A178 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A17C 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A180                            		even
0000A180                            		even
0000A180                            
0000A180                            ; ---------------------------------------------------------------------------
0000A180                            ; Sprite mappings - Buzz Bomber	enemy
0000A180                            ; ---------------------------------------------------------------------------
0000A180                            Map_obj22:
0000A180                            	include "_maps\obj22.asm"
0000A180                            ; ---------------------------------------------------------------------------
0000A180                            ; Sprite mappings - Buzz Bomber	enemy
0000A180                            ; ---------------------------------------------------------------------------
0000A180 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A184 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A188 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A18C 06                         byte_9A42:	dc.b 6
0000A18D F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A192 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A197 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A19C 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A1A1 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A1A6 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A1AB 06                         byte_9A61:	dc.b 6
0000A1AC F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A1B1 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A1B6 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A1BB 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A1C0 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A1C5 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A1CA 07                         byte_9A80:	dc.b 7
0000A1CB 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A1D0 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A1D5 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A1DA 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A1DF 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A1E4 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A1E9 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A1EE 07                         byte_9AA4:	dc.b 7
0000A1EF 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A1F4 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A1F9 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A1FE 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A203 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A208 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A20D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A212 06                         byte_9AC8:	dc.b 6
0000A213 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A218 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A21D 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A222 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A227 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A22C F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A231 04                         byte_9AE7:	dc.b 4
0000A232 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A237 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A23C 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A241 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A246 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A24B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A250                            		even
0000A250                            		even
0000A250                            
0000A250                            ; ---------------------------------------------------------------------------
0000A250                            ; Sprite mappings - missile that Buzz Bomber throws
0000A250                            ; ---------------------------------------------------------------------------
0000A250                            Map_obj23:
0000A250                            	include "_maps\obj23.asm"
0000A250                            ; ---------------------------------------------------------------------------
0000A250                            ; Sprite mappings - missile that Buzz Bomber throws
0000A250                            ; ---------------------------------------------------------------------------
0000A250 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A254 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A258 01                         byte_9B0E:	dc.b 1
0000A259 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A25E 01                         byte_9B14:	dc.b 1
0000A25F F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A264 01                         byte_9B1A:	dc.b 1
0000A265 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A26A 01                         byte_9B20:	dc.b 1
0000A26B F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A270                            		even
0000A270                            		even
0000A270                            
0000A270                            ; ===========================================================================
0000A270                            ; ---------------------------------------------------------------------------
0000A270                            ; Object 25 - rings
0000A270                            ; ---------------------------------------------------------------------------
0000A270                            
0000A270                            Obj25:					; XREF: Obj_Index
0000A270 7000                       		moveq	#0,d0
0000A272 1028 0024                  		move.b	$24(a0),d0
0000A276 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A27A 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A27E                            ; ===========================================================================
0000A27E 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A280 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A282 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A284 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A286 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A288                            ; ---------------------------------------------------------------------------
0000A288                            ; Distances between rings (format: horizontal, vertical)
0000A288                            ; ---------------------------------------------------------------------------
0000A288 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A28A 1800                       		dc.b $18, 0		; horizontal normal
0000A28C 2000                       		dc.b $20, 0		; horizontal wide
0000A28E 0010                       		dc.b 0,	$10		; vertical tight
0000A290 0018                       		dc.b 0,	$18		; vertical normal
0000A292 0020                       		dc.b 0,	$20		; vertical wide
0000A294 1010                       		dc.b $10, $10		; diagonal
0000A296 1818                       		dc.b $18, $18
0000A298 2020                       		dc.b $20, $20
0000A29A F010                       		dc.b $F0, $10
0000A29C E818                       		dc.b $E8, $18
0000A29E E020                       		dc.b $E0, $20
0000A2A0 1008                       		dc.b $10, 8
0000A2A2 1810                       		dc.b $18, $10
0000A2A4 F008                       		dc.b $F0, 8
0000A2A6 E810                       		dc.b $E8, $10
0000A2A8                            ; ===========================================================================
0000A2A8                            
0000A2A8                            Obj25_Main:				; XREF: Obj25_Index
0000A2A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A2AC 7000                       		moveq	#0,d0
0000A2AE 1028 0023                  		move.b	$23(a0),d0
0000A2B2 45F2 0002                  		lea	2(a2,d0.w),a2
0000A2B6 1812                       		move.b	(a2),d4
0000A2B8 1228 0028                  		move.b	$28(a0),d1
0000A2BC 1001                       		move.b	d1,d0
0000A2BE 0241 0007                  		andi.w	#7,d1
0000A2C2 0C41 0007                  		cmpi.w	#7,d1
0000A2C6 6600                       		bne.s	loc_9B80
0000A2C8 7206                       		moveq	#6,d1
0000A2CA                            
0000A2CA                            loc_9B80:
0000A2CA 4841                       		swap	d1
0000A2CC 323C 0000                  		move.w	#0,d1
0000A2D0 E808                       		lsr.b	#4,d0
0000A2D2 D040                       		add.w	d0,d0
0000A2D4 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A2D8 4885                       		ext.w	d5
0000A2DA 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A2DE 4886                       		ext.w	d6
0000A2E0 2248                       		movea.l	a0,a1
0000A2E2 3428 0008                  		move.w	8(a0),d2
0000A2E6 3628 000C                  		move.w	$C(a0),d3
0000A2EA E20C                       		lsr.b	#1,d4
0000A2EC 6500                       		bcs.s	loc_9C02
0000A2EE 0892 0007                  		bclr	#7,(a2)
0000A2F2 6000                       		bra.s	loc_9BBA
0000A2F4                            ; ===========================================================================
0000A2F4                            
0000A2F4                            Obj25_MakeRings:
0000A2F4 4841                       		swap	d1
0000A2F6 E20C                       		lsr.b	#1,d4
0000A2F8 6500                       		bcs.s	loc_9C02
0000A2FA 0892 0007                  		bclr	#7,(a2)
0000A2FE 6100 0000                  		bsr.w	SingleObjLoad
0000A302 6600                       		bne.s	loc_9C0E
0000A304                            
0000A304                            loc_9BBA:				; XREF: Obj25_Main
0000A304 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A308 5429 0024                  		addq.b	#2,$24(a1)
0000A30C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A310 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A316 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A31A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A322 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000A328 137C 0004 0001             		move.b	#4,1(a1)
0000A32E 137C 0002 0018             		move.b	#2,$18(a1)
0000A334 137C 0047 0020             		move.b	#$47,$20(a1)
0000A33A 137C 0008 0019             		move.b	#8,$19(a1)
0000A340 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A346 1341 0034                  		move.b	d1,$34(a1)
0000A34A                            
0000A34A                            loc_9C02:
0000A34A 5241                       		addq.w	#1,d1
0000A34C D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A34E D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A350 4841                       		swap	d1
0000A352 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A356                            
0000A356                            loc_9C0E:
0000A356 0812 0000                  		btst	#0,(a2)
0000A35A 6600 0000                  		bne.w	DeleteObject
0000A35E                            
0000A35E                            Obj25_Animate:				; XREF: Obj25_Index
0000A35E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A364 6100 0000                  		bsr.w	DisplaySprite
0000A368 3028 0032                  		move.w	$32(a0),d0
0000A36C 0240 FF80                  		andi.w	#$FF80,d0
0000A370 3238 F700                  		move.w	($FFFFF700).w,d1
0000A374 0441 0080                  		subi.w	#$80,d1
0000A378 0241 FF80                  		andi.w	#$FF80,d1
0000A37C 9041                       		sub.w	d1,d0
0000A37E 0C40 0280                  		cmpi.w	#$280,d0
0000A382 6200                       		bhi.s	Obj25_Delete
0000A384 4E75                       		rts	
0000A386                            ; ===========================================================================
0000A386                            
0000A386                            Obj25_Collect:				; XREF: Obj25_Index
0000A386 5428 0024                  		addq.b	#2,$24(a0)
0000A38A 117C 0000 0020             		move.b	#0,$20(a0)
0000A390 117C 0001 0018             		move.b	#1,$18(a0)
0000A396 6100 0000                  		bsr.w	CollectRing
0000A39A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A39E 7000                       		moveq	#0,d0
0000A3A0 1028 0023                  		move.b	$23(a0),d0
0000A3A4 1228 0034                  		move.b	$34(a0),d1
0000A3A8 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A3AC                            
0000A3AC                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A3AC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A3B2 6100 0000                  		bsr.w	AnimateSprite
0000A3B6 6000 0000                  		bra.w	DisplaySprite
0000A3BA                            ; ===========================================================================
0000A3BA                            
0000A3BA                            Obj25_Delete:				; XREF: Obj25_Index
0000A3BA 6000 0000                  		bra.w	DeleteObject
0000A3BE                            
0000A3BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3BE                            
0000A3BE                            
0000A3BE                            CollectRing:				; XREF: Obj25_Collect
0000A3BE 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A3C2 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A3C8 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A3CC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A3D2 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A3D4 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A3DA 6700                       		beq.s	loc_9CA4
0000A3DC 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A3E2 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A3E4 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A3EA 6600                       		bne.s	Obj25_PlaySnd
0000A3EC                            
0000A3EC                            loc_9CA4:
0000A3EC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A3F0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A3F4 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A3F8                            
0000A3F8                            Obj25_PlaySnd:
0000A3F8 4EF9 0000 1262             		jmp	(PlaySound_Special).l
0000A3FE                            ; End of function CollectRing
0000A3FE                            
0000A3FE                            ; ===========================================================================
0000A3FE                            ; ---------------------------------------------------------------------------
0000A3FE                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A3FE                            ; ---------------------------------------------------------------------------
0000A3FE                            
0000A3FE                            Obj37:					; XREF: Obj_Index
0000A3FE 7000                       		moveq	#0,d0
0000A400 1028 0024                  		move.b	$24(a0),d0
0000A404 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A408 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A40C                            ; ===========================================================================
0000A40C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A40E 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A410 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A412 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A414 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A416                            ; ===========================================================================
0000A416                            
0000A416                            Obj37_CountRings:			; XREF: Obj37_Index
0000A416 2248                       		movea.l	a0,a1
0000A418 7A00                       		moveq	#0,d5
0000A41A 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A41E 7020                       		moveq	#32,d0
0000A420 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A422 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A424 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A426                            
0000A426                            loc_9CDE:
0000A426 5345                       		subq.w	#1,d5
0000A428 383C 0288                  		move.w	#$288,d4
0000A42C 6000                       		bra.s	Obj37_MakeRings
0000A42E                            ; ===========================================================================
0000A42E                            
0000A42E                            Obj37_Loop:
0000A42E 6100 0000                  		bsr.w	SingleObjLoad
0000A432 6600 0000                  		bne.w	Obj37_ResetCounter
0000A436                            
0000A436                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A436 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A43A 5429 0024                  		addq.b	#2,$24(a1)
0000A43E 137C 0008 0016             		move.b	#8,$16(a1)
0000A444 137C 0008 0017             		move.b	#8,$17(a1)
0000A44A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A450 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A456 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A45E 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000A464 137C 0004 0001             		move.b	#4,1(a1)
0000A46A 137C 0003 0018             		move.b	#3,$18(a1)
0000A470 137C 0047 0020             		move.b	#$47,$20(a1)
0000A476 137C 0008 0019             		move.b	#8,$19(a1)
0000A47C 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A482 4A44                       		tst.w	d4
0000A484 6B00                       		bmi.s	loc_9D62
0000A486 3004                       		move.w	d4,d0
0000A488 6100 8462                  		bsr.w	CalcSine
0000A48C 3404                       		move.w	d4,d2
0000A48E E04A                       		lsr.w	#8,d2
0000A490 E560                       		asl.w	d2,d0
0000A492 E561                       		asl.w	d2,d1
0000A494 3400                       		move.w	d0,d2
0000A496 3601                       		move.w	d1,d3
0000A498 0604 0010                  		addi.b	#$10,d4
0000A49C 6400                       		bcc.s	loc_9D62
0000A49E 0444 0080                  		subi.w	#$80,d4
0000A4A2 6400                       		bcc.s	loc_9D62
0000A4A4 383C 0288                  		move.w	#$288,d4
0000A4A8                            
0000A4A8                            loc_9D62:
0000A4A8 3342 0010                  		move.w	d2,$10(a1)
0000A4AC 3343 0012                  		move.w	d3,$12(a1)
0000A4B0 4442                       		neg.w	d2
0000A4B2 4444                       		neg.w	d4
0000A4B4 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A4B8                            
0000A4B8                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A4B8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A4BE 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A4C4 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A4CA 303C 00C6                  		move.w	#$C6,d0
0000A4CE 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A4D4                            
0000A4D4                            Obj37_Bounce:				; XREF: Obj37_Index
0000A4D4 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A4DA 6100 0000                  		bsr.w	SpeedToPos
0000A4DE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A4E4 6B00                       		bmi.s	Obj37_ChkDel
0000A4E6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A4EA D007                       		add.b	d7,d0
0000A4EC 0200 0003                  		andi.b	#3,d0
0000A4F0 6600                       		bne.s	Obj37_ChkDel
0000A4F2 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4F8 4A41                       		tst.w	d1
0000A4FA 6A00                       		bpl.s	Obj37_ChkDel
0000A4FC D368 000C                  		add.w	d1,$C(a0)
0000A500 3028 0012                  		move.w	$12(a0),d0
0000A504 E440                       		asr.w	#2,d0
0000A506 9168 0012                  		sub.w	d0,$12(a0)
0000A50A 4468 0012                  		neg.w	$12(a0)
0000A50E                            
0000A50E                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A50E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A512 6700                       		beq.s	Obj37_Delete
0000A514 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A518 0640 00E0                  		addi.w	#$E0,d0
0000A51C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A520 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A522 6000 0000                  		bra.w	DisplaySprite
0000A526                            ; ===========================================================================
0000A526                            
0000A526                            Obj37_Collect:				; XREF: Obj37_Index
0000A526 5428 0024                  		addq.b	#2,$24(a0)
0000A52A 117C 0000 0020             		move.b	#0,$20(a0)
0000A530 117C 0001 0018             		move.b	#1,$18(a0)
0000A536 6100 FE86                  		bsr.w	CollectRing
0000A53A                            
0000A53A                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A53A 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A540 6100 0000                  		bsr.w	AnimateSprite
0000A544 6000 0000                  		bra.w	DisplaySprite
0000A548                            ; ===========================================================================
0000A548                            
0000A548                            Obj37_Delete:				; XREF: Obj37_Index
0000A548 6000 0000                  		bra.w	DeleteObject
0000A54C                            ; ===========================================================================
0000A54C                            ; ---------------------------------------------------------------------------
0000A54C                            ; Object 4B - giant ring for entry to special stage
0000A54C                            ; ---------------------------------------------------------------------------
0000A54C                            
0000A54C                            Obj4B:					; XREF: Obj_Index
0000A54C 7000                       		moveq	#0,d0
0000A54E 1028 0024                  		move.b	$24(a0),d0
0000A552 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A556 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A55A                            ; ===========================================================================
0000A55A 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A55C 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A55E 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A560 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A562                            ; ===========================================================================
0000A562                            
0000A562                            Obj4B_Main:				; XREF: Obj4B_Index
0000A562 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A56A 317C 2400 0002             		move.w	#$2400,2(a0)
0000A570 0028 0004 0001             		ori.b	#4,1(a0)
0000A576 117C 0040 0019             		move.b	#$40,$19(a0)
0000A57C 4A28 0001                  		tst.b	1(a0)
0000A580 6A00                       		bpl.s	Obj4B_Animate
0000A582 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A588 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A58C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A592 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A594 4E75                       		rts	
0000A596                            ; ===========================================================================
0000A596                            
0000A596                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A596 5428 0024                  		addq.b	#2,$24(a0)
0000A59A 117C 0002 0018             		move.b	#2,$18(a0)
0000A5A0 117C 0052 0020             		move.b	#$52,$20(a0)
0000A5A6 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A5AC                            
0000A5AC                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A5AC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A5B2 3028 0008                  		move.w	8(a0),d0
0000A5B6 0240 FF80                  		andi.w	#$FF80,d0
0000A5BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5BE 0441 0080                  		subi.w	#$80,d1
0000A5C2 0241 FF80                  		andi.w	#$FF80,d1
0000A5C6 9041                       		sub.w	d1,d0
0000A5C8 0C40 0280                  		cmpi.w	#$280,d0
0000A5CC 6200 0000                  		bhi.w	DeleteObject
0000A5D0 6000 0000                  		bra.w	DisplaySprite
0000A5D4                            ; ===========================================================================
0000A5D4                            
0000A5D4                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A5D4 5528 0024                  		subq.b	#2,$24(a0)
0000A5D8 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000A5DE 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000A5E4 117C 0000 0020             		move.b	#0,$20(a0)
0000A5EA 6100 0000                  		bsr.w	SingleObjLoad
0000A5EE 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A5F2 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A5F6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A602 2348 003C                  		move.l	a0,$3C(a1)
0000A606 3038 D008                  		move.w	($FFFFD008).w,d0
0000A60A B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A60E 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A610 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A616                            
0000A616                            Obj4B_PlaySnd:
0000A616 303C 00C3                  		move.w	#$C3,d0
0000A61A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A620 608A                       		bra.s	Obj4B_Animate
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A622 6000 0000                  		bra.w	DeleteObject
0000A626                            ; ===========================================================================
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            ; Object 7C - flash effect when	you collect the	giant ring
0000A626                            ; ---------------------------------------------------------------------------
0000A626                            
0000A626                            Obj7C:					; XREF: Obj_Index
0000A626 7000                       		moveq	#0,d0
0000A628 1028 0024                  		move.b	$24(a0),d0
0000A62C 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A630 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A634                            ; ===========================================================================
0000A634 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A636 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A638 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            Obj7C_Main:				; XREF: Obj7C_Index
0000A63A 5428 0024                  		addq.b	#2,$24(a0)
0000A63E 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A646 317C 2462 0002             		move.w	#$2462,2(a0)
0000A64C 0028 0004 0001             		ori.b	#4,1(a0)
0000A652 117C 0000 0018             		move.b	#0,$18(a0)
0000A658 117C 0020 0019             		move.b	#$20,$19(a0)
0000A65E 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A664                            
0000A664                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A664 6100                       		bsr.s	Obj7C_Collect
0000A666 3028 0008                  		move.w	8(a0),d0
0000A66A 0240 FF80                  		andi.w	#$FF80,d0
0000A66E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A672 0441 0080                  		subi.w	#$80,d1
0000A676 0241 FF80                  		andi.w	#$FF80,d1
0000A67A 9041                       		sub.w	d1,d0
0000A67C 0C40 0280                  		cmpi.w	#$280,d0
0000A680 6200 0000                  		bhi.w	DeleteObject
0000A684 6000 0000                  		bra.w	DisplaySprite
0000A688                            
0000A688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A688                            
0000A688                            
0000A688                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A688 5328 001E                  		subq.b	#1,$1E(a0)
0000A68C 6A00                       		bpl.s	locret_9F76
0000A68E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A694 5228 001A                  		addq.b	#1,$1A(a0)
0000A698 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A69E 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A6A0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A6A6 6600                       		bne.s	locret_9F76	; if not, branch
0000A6A8 2268 003C                  		movea.l	$3C(a0),a1
0000A6AC 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A6B2 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A6B8 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A6BE 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A6C2 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A6C6                            
0000A6C6                            locret_9F76:
0000A6C6 4E75                       		rts	
0000A6C8                            ; ===========================================================================
0000A6C8                            
0000A6C8                            Obj7C_End:				; XREF: Obj7C_Collect
0000A6C8 5428 0024                  		addq.b	#2,$24(a0)
0000A6CC 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A6D2 588F                       		addq.l	#4,sp
0000A6D4 4E75                       		rts	
0000A6D6                            ; End of function Obj7C_Collect
0000A6D6                            
0000A6D6                            ; ===========================================================================
0000A6D6                            
0000A6D6                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A6D6 6000 0000                  		bra.w	DeleteObject
0000A6DA                            ; ===========================================================================
0000A6DA                            Ani_obj25:
0000A6DA                            	include "_anim\obj25.asm"
0000A6DA                            ; ---------------------------------------------------------------------------
0000A6DA                            ; Animation script - ring
0000A6DA                            ; ---------------------------------------------------------------------------
0000A6DA 0000                       		dc.w byte_9F8C-Ani_obj25
0000A6DC 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A6E2                            		even
0000A6E2                            		even
0000A6E2                            
0000A6E2                            ; ---------------------------------------------------------------------------
0000A6E2                            ; Sprite mappings - rings
0000A6E2                            ; ---------------------------------------------------------------------------
0000A6E2                            Map_obj25:
0000A6E2                            	include "_maps\obj25.asm"
0000A6E2                            ; ---------------------------------------------------------------------------
0000A6E2                            ; Sprite mappings - rings
0000A6E2                            ; ---------------------------------------------------------------------------
0000A6E2 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A6E6 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A6EA 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A6EE 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A6F2 01                         byte_9FA2:	dc.b 1
0000A6F3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A6F8 01                         byte_9FA8:	dc.b 1
0000A6F9 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A6FE 01                         byte_9FAE:	dc.b 1
0000A6FF F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A704 01                         byte_9FB4:	dc.b 1
0000A705 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A70A 01                         byte_9FBA:	dc.b 1
0000A70B F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A710 01                         byte_9FC0:	dc.b 1
0000A711 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A716 01                         byte_9FC6:	dc.b 1
0000A717 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A71C 01                         byte_9FCC:	dc.b 1
0000A71D F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A722                            		even
0000A722                            		even
0000A722                            
0000A722                            ; ---------------------------------------------------------------------------
0000A722                            ; Sprite mappings - giant ring
0000A722                            ; ---------------------------------------------------------------------------
0000A722                            Map_obj4B:
0000A722                            	include "_maps\obj4B.asm"
0000A722                            ; ---------------------------------------------------------------------------
0000A722                            ; Sprite mappings - giant ring
0000A722                            ; ---------------------------------------------------------------------------
0000A722 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A726 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A72A 0A                         byte_9FDA:	dc.b $A
0000A72B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A730 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A735 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A73A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A73F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A744 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A749 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A74E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A753 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A758 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A75D 08                         byte_A00D:	dc.b 8
0000A75E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A763 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A768 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A76D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A772 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A777 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A77C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A781 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A786 04                         byte_A036:	dc.b 4
0000A787 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A78C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A791 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A796 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A79B 08                         byte_A04B:	dc.b 8
0000A79C E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A7A1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A7A6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A7AB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A7B0 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A7B5 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A7BA 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A7BF 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A7C4                            		even
0000A7C4                            		even
0000A7C4                            
0000A7C4                            ; ---------------------------------------------------------------------------
0000A7C4                            ; Sprite mappings - flash effect when you collect the giant ring
0000A7C4                            ; ---------------------------------------------------------------------------
0000A7C4                            Map_obj7C:
0000A7C4                            	include "_maps\obj7C.asm"
0000A7C4                            ; ---------------------------------------------------------------------------
0000A7C4                            ; Sprite mappings - flash effect when you collect the giant ring
0000A7C4                            ; ---------------------------------------------------------------------------
0000A7C4 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A7C8 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A7CC 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A7D0 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A7D4 02                         byte_A084:	dc.b 2
0000A7D5 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A7DA 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A7DF 04                         byte_A08F:	dc.b 4
0000A7E0 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A7E5 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A7EA 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A7EF 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A7F4 04                         byte_A0A4:	dc.b 4
0000A7F5 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A7FA E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A7FF 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A804 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A809 04                         byte_A0B9:	dc.b 4
0000A80A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A80F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A814 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A819 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A81E 04                         byte_A0CE:	dc.b 4
0000A81F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A824 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A829 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A82E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A833 04                         byte_A0E3:	dc.b 4
0000A834 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A839 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A83E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A843 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A848 02                         byte_A0F8:	dc.b 2
0000A849 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A84E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A853 04                         byte_A103:	dc.b 4
0000A854 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A859 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A85E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A863 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A868                            		even
0000A868                            		even
0000A868                            
0000A868                            ; ===========================================================================
0000A868                            ; ---------------------------------------------------------------------------
0000A868                            ; Object 26 - monitors
0000A868                            ; ---------------------------------------------------------------------------
0000A868                            
0000A868                            Obj26:					; XREF: Obj_Index
0000A868 7000                       		moveq	#0,d0
0000A86A 1028 0024                  		move.b	$24(a0),d0
0000A86E 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A872 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A876                            ; ===========================================================================
0000A876 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A878 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A87A 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A87C 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A87E 0000                       		dc.w Obj26_Display-Obj26_Index
0000A880                            ; ===========================================================================
0000A880                            
0000A880                            Obj26_Main:				; XREF: Obj26_Index
0000A880 5428 0024                  		addq.b	#2,$24(a0)
0000A884 117C 000E 0016             		move.b	#$E,$16(a0)
0000A88A 117C 000E 0017             		move.b	#$E,$17(a0)
0000A890 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A898 317C 0680 0002             		move.w	#$680,2(a0)
0000A89E 117C 0004 0001             		move.b	#4,1(a0)
0000A8A4 117C 0003 0018             		move.b	#3,$18(a0)
0000A8AA 117C 000F 0019             		move.b	#$F,$19(a0)
0000A8B0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A8B4 7000                       		moveq	#0,d0
0000A8B6 1028 0023                  		move.b	$23(a0),d0
0000A8BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A8C0 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A8C6 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A8C8 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A8CE 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A8D4 4E75                       		rts	
0000A8D6                            ; ===========================================================================
0000A8D6                            
0000A8D6                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A8D6 117C 0046 0020             		move.b	#$46,$20(a0)
0000A8DC 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A8E2                            
0000A8E2                            Obj26_Solid:				; XREF: Obj26_Index
0000A8E2 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A8E6 6700                       		beq.s	loc_A1EC	; if not, branch
0000A8E8 5500                       		subq.b	#2,d0
0000A8EA 6600                       		bne.s	Obj26_Fall
0000A8EC 7200                       		moveq	#0,d1
0000A8EE 1228 0019                  		move.b	$19(a0),d1
0000A8F2 0641 000B                  		addi.w	#$B,d1
0000A8F6 6100 D3EC                  		bsr.w	ExitPlatform
0000A8FA 0829 0003 0022             		btst	#3,$22(a1)
0000A900 6600 0000                  		bne.w	loc_A1BC
0000A904 4228 0025                  		clr.b	$25(a0)
0000A908 6000 0000                  		bra.w	Obj26_Animate
0000A90C                            ; ===========================================================================
0000A90C                            
0000A90C                            loc_A1BC:				; XREF: Obj26_Solid
0000A90C 363C 0010                  		move.w	#$10,d3
0000A910 3428 0008                  		move.w	8(a0),d2
0000A914 6100 D92C                  		bsr.w	MvSonicOnPtfm
0000A918 6000 0000                  		bra.w	Obj26_Animate
0000A91C                            ; ===========================================================================
0000A91C                            
0000A91C                            Obj26_Fall:				; XREF: Obj26_Solid
0000A91C 6100 0000                  		bsr.w	ObjectFall
0000A920 4EB9 0000 0000             		jsr	ObjHitFloor
0000A926 4A41                       		tst.w	d1
0000A928 6A00 0000                  		bpl.w	Obj26_Animate
0000A92C D368 000C                  		add.w	d1,$C(a0)
0000A930 4268 0012                  		clr.w	$12(a0)
0000A934 4228 0025                  		clr.b	$25(a0)
0000A938 6000 0000                  		bra.w	Obj26_Animate
0000A93C                            ; ===========================================================================
0000A93C                            
0000A93C                            loc_A1EC:				; XREF: Obj26_Solid
0000A93C 323C 001A                  		move.w	#$1A,d1
0000A940 343C 000F                  		move.w	#$F,d2
0000A944 6100 0000                  		bsr.w	Obj26_SolidSides
0000A948 6700 0000                  		beq.w	loc_A25C
0000A94C 4A69 0012                  		tst.w	$12(a1)
0000A950 6B00                       		bmi.s	loc_A20A
0000A952 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A958 6700                       		beq.s	loc_A25C	; if yes, branch
0000A95A                            
0000A95A                            loc_A20A:
0000A95A 4A41                       		tst.w	d1
0000A95C 6A00                       		bpl.s	loc_A220
0000A95E 9769 000C                  		sub.w	d3,$C(a1)
0000A962 6100 D26E                  		bsr.w	loc_74AE
0000A966 117C 0002 0025             		move.b	#2,$25(a0)
0000A96C 6000 0000                  		bra.w	Obj26_Animate
0000A970                            ; ===========================================================================
0000A970                            
0000A970                            loc_A220:
0000A970 4A40                       		tst.w	d0
0000A972 6700 0000                  		beq.w	loc_A246
0000A976 6B00                       		bmi.s	loc_A230
0000A978 4A69 0010                  		tst.w	$10(a1)
0000A97C 6B00                       		bmi.s	loc_A246
0000A97E 6000                       		bra.s	loc_A236
0000A980                            ; ===========================================================================
0000A980                            
0000A980                            loc_A230:
0000A980 4A69 0010                  		tst.w	$10(a1)
0000A984 6A00                       		bpl.s	loc_A246
0000A986                            
0000A986                            loc_A236:
0000A986 9169 0008                  		sub.w	d0,8(a1)
0000A98A 337C 0000 0014             		move.w	#0,$14(a1)
0000A990 337C 0000 0010             		move.w	#0,$10(a1)
0000A996                            
0000A996                            loc_A246:
0000A996 0829 0001 0022             		btst	#1,$22(a1)
0000A99C 6600                       		bne.s	loc_A26A
0000A99E 08E9 0005 0022             		bset	#5,$22(a1)
0000A9A4 08E8 0005 0022             		bset	#5,$22(a0)
0000A9AA 6000                       		bra.s	Obj26_Animate
0000A9AC                            ; ===========================================================================
0000A9AC                            
0000A9AC                            loc_A25C:
0000A9AC 0828 0005 0022             		btst	#5,$22(a0)
0000A9B2 6700                       		beq.s	Obj26_Animate
0000A9B4 337C 0001 001C             		move.w	#1,$1C(a1)
0000A9BA                            
0000A9BA                            loc_A26A:
0000A9BA 08A8 0005 0022             		bclr	#5,$22(a0)
0000A9C0 08A9 0005 0022             		bclr	#5,$22(a1)
0000A9C6                            
0000A9C6                            Obj26_Animate:				; XREF: Obj26_Index
0000A9C6 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A9CC 6100 0000                  		bsr.w	AnimateSprite
0000A9D0                            
0000A9D0                            Obj26_Display:				; XREF: Obj26_Index
0000A9D0 6100 0000                  		bsr.w	DisplaySprite
0000A9D4 3028 0008                  		move.w	8(a0),d0
0000A9D8 0240 FF80                  		andi.w	#$FF80,d0
0000A9DC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9E0 0441 0080                  		subi.w	#$80,d1
0000A9E4 0241 FF80                  		andi.w	#$FF80,d1
0000A9E8 9041                       		sub.w	d1,d0
0000A9EA 0C40 0280                  		cmpi.w	#$280,d0
0000A9EE 6200 0000                  		bhi.w	DeleteObject
0000A9F2 4E75                       		rts	
0000A9F4                            ; ===========================================================================
0000A9F4                            
0000A9F4                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A9F4 5428 0024                  		addq.b	#2,$24(a0)
0000A9F8 117C 0000 0020             		move.b	#0,$20(a0)
0000A9FE 6100 0000                  		bsr.w	SingleObjLoad
0000AA02 6600                       		bne.s	Obj26_Explode
0000AA04 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AA08 3368 0008 0008             		move.w	8(a0),8(a1)
0000AA0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AA14 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AA1A                            
0000AA1A                            Obj26_Explode:
0000AA1A 6100 0000                  		bsr.w	SingleObjLoad
0000AA1E 6600                       		bne.s	Obj26_SetBroken
0000AA20 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000AA24 5429 0024                  		addq.b	#2,$24(a1)
0000AA28 3368 0008 0008             		move.w	8(a0),8(a1)
0000AA2E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AA34                            
0000AA34                            Obj26_SetBroken:
0000AA34 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AA38 7000                       		moveq	#0,d0
0000AA3A 1028 0023                  		move.b	$23(a0),d0
0000AA3E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AA44 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AA4A 6000 0000                  		bra.w	DisplaySprite
0000AA4E                            ; ===========================================================================
0000AA4E                            ; ---------------------------------------------------------------------------
0000AA4E                            ; Object 2E - contents of monitors
0000AA4E                            ; ---------------------------------------------------------------------------
0000AA4E                            
0000AA4E                            Obj2E:					; XREF: Obj_Index
0000AA4E 7000                       		moveq	#0,d0
0000AA50 1028 0024                  		move.b	$24(a0),d0
0000AA54 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AA58 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AA5C 6000 0000                  		bra.w	DisplaySprite
0000AA60                            ; ===========================================================================
0000AA60 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AA62 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AA64 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AA66                            ; ===========================================================================
0000AA66                            
0000AA66                            Obj2E_Main:				; XREF: Obj2E_Index
0000AA66 5428 0024                  		addq.b	#2,$24(a0)
0000AA6A 317C 0680 0002             		move.w	#$680,2(a0)
0000AA70 117C 0024 0001             		move.b	#$24,1(a0)
0000AA76 117C 0003 0018             		move.b	#3,$18(a0)
0000AA7C 117C 0008 0019             		move.b	#8,$19(a0)
0000AA82 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA88 7000                       		moveq	#0,d0
0000AA8A 1028 001C                  		move.b	$1C(a0),d0
0000AA8E 5400                       		addq.b	#2,d0
0000AA90 1140 001A                  		move.b	d0,$1A(a0)
0000AA94 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA9A D000                       		add.b	d0,d0
0000AA9C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AAA0 5249                       		addq.w	#1,a1
0000AAA2 2149 0004                  		move.l	a1,4(a0)
0000AAA6                            
0000AAA6                            Obj2E_Move:				; XREF: Obj2E_Index
0000AAA6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AAAA 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AAAE 6100 0000                  		bsr.w	SpeedToPos
0000AAB2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AAB8 4E75                       		rts	
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AABA 5428 0024                  		addq.b	#2,$24(a0)
0000AABE 317C 001D 001E             		move.w	#29,$1E(a0)
0000AAC4 1028 001C                  		move.b	$1C(a0),d0
0000AAC8 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AACC 6600                       		bne.s	Obj2E_ChkSonic
0000AACE 4E75                       		rts			; Eggman monitor does nothing
0000AAD0                            ; ===========================================================================
0000AAD0                            
0000AAD0                            Obj2E_ChkSonic:
0000AAD0 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AAD4 6600                       		bne.s	Obj2E_ChkShoes
0000AAD6                            
0000AAD6                            ExtraLife:
0000AAD6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000AADC 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000AAE2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AAE6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AAEA 303C 0088                  		move.w	#$88,d0
0000AAEE 4EF9 0000 125C             		jmp	(PlaySound).l	; play extra life music
0000AAF4                            ; ===========================================================================
0000AAF4                            
0000AAF4                            Obj2E_ChkShoes:
0000AAF4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AAF8 6600                       		bne.s	Obj2E_ChkShield
0000AAFA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AB00 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AB06 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AB0C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AB12 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AB18 303C 00E2                  		move.w	#$E2,d0
0000AB1C 4EF9 0000 125C             		jmp	(PlaySound).l	; Speed	up the music
0000AB22                            ; ===========================================================================
0000AB22                            
0000AB22                            Obj2E_ChkShield:
0000AB22 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AB26 6600                       		bne.s	Obj2E_ChkInvinc
0000AB28 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000AB2C 6600                       		bne.s	@alreadyshield
0000AB2E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000AB34 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000AB3A 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AB40 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AB46                            
0000AB46                            	@alreadyshield:
0000AB46 303C 00AF                  		move.w	#$AF,d0
0000AB4A 4EF9 0000 125C             		jmp	(PlaySound).l	; play shield sound
0000AB50                            ; ===========================================================================
0000AB50                            
0000AB50                            Obj2E_ChkInvinc:
0000AB50 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000AB54 6600                       		bne.s Obj2E_ChkRings
0000AB56 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000AB5C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000AB62 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000AB68 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000AB6E 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000AB74 11FC 0001 D21C             		move.b #1,($FFFFD21C).w
0000AB7A 11FC 004A D240             		move.b #$4A,($FFFFD240).w ; load stars object ($3802)
0000AB80 11FC 0002 D25C             		move.b #2,($FFFFD25C).w
0000AB86 11FC 004A D280             		move.b #$4A,($FFFFD280).w ; load stars object ($3803)
0000AB8C 11FC 0003 D29C             		move.b #3,($FFFFD29C).w
0000AB92 11FC 004A D2C0             		move.b #$4A,($FFFFD2C0).w ; load stars object ($3804)
0000AB98 11FC 0004 D2DC             		move.b #4,($FFFFD2DC).w
0000AB9E 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000ABA2 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000ABA4 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000ABAA 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000ABAC 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000ABB0 4EF9 0000 125C             		jmp (PlaySound).l
0000ABB6                            
0000ABB6                            DontPlayMusic:
0000ABB6 4E75                       		rts
0000ABB8                            ; ===========================================================================
0000ABB8                            
0000ABB8                            Obj2E_NoMusic:
0000ABB8 4E75                       		rts	
0000ABBA                            ; ===========================================================================
0000ABBA                            
0000ABBA                            Obj2E_ChkRings:
0000ABBA 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ABBE 6600                       		bne.s	Obj2E_ChkS
0000ABC0 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ABC6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ABCC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000ABD2 6500                       		bcs.s	Obj2E_RingSound
0000ABD4 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000ABDA 6700 FEFA                  		beq.w	ExtraLife
0000ABDE 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000ABE4 6500                       		bcs.s	Obj2E_RingSound
0000ABE6 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ABEC 6700 FEE8                  		beq.w	ExtraLife
0000ABF0                            
0000ABF0                            Obj2E_RingSound:
0000ABF0 303C 00B5                  		move.w	#$B5,d0
0000ABF4 4EF9 0000 125C             		jmp	(PlaySound).l	; play ring sound
0000ABFA                            ; ===========================================================================
0000ABFA                            
0000ABFA                            Obj2E_ChkS:
0000ABFA 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000ABFE 6600                       		bne.s	Obj2E_ChkEnd
0000AC00 4E71                       		nop	
0000AC02                            
0000AC02                            Obj2E_ChkEnd:
0000AC02 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AC04                            ; ===========================================================================
0000AC04                            
0000AC04                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AC04 5368 001E                  		subq.w	#1,$1E(a0)
0000AC08 6B00 0000                  		bmi.w	DeleteObject
0000AC0C 4E75                       		rts	
0000AC0E                            ; ---------------------------------------------------------------------------
0000AC0E                            ; Subroutine to	make the sides of a monitor solid
0000AC0E                            ; ---------------------------------------------------------------------------
0000AC0E                            
0000AC0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC0E                            
0000AC0E                            
0000AC0E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AC0E 43F8 D000                  		lea	($FFFFD000).w,a1
0000AC12 3029 0008                  		move.w	8(a1),d0
0000AC16 9068 0008                  		sub.w	8(a0),d0
0000AC1A D041                       		add.w	d1,d0
0000AC1C 6B00                       		bmi.s	loc_A4E6
0000AC1E 3601                       		move.w	d1,d3
0000AC20 D643                       		add.w	d3,d3
0000AC22 B043                       		cmp.w	d3,d0
0000AC24 6200                       		bhi.s	loc_A4E6
0000AC26 1629 0016                  		move.b	$16(a1),d3
0000AC2A 4883                       		ext.w	d3
0000AC2C D443                       		add.w	d3,d2
0000AC2E 3629 000C                  		move.w	$C(a1),d3
0000AC32 9668 000C                  		sub.w	$C(a0),d3
0000AC36 D642                       		add.w	d2,d3
0000AC38 6B00                       		bmi.s	loc_A4E6
0000AC3A D442                       		add.w	d2,d2
0000AC3C B642                       		cmp.w	d2,d3
0000AC3E 6400                       		bcc.s	loc_A4E6
0000AC40 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AC44 6B00                       		bmi.s	loc_A4E6
0000AC46 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AC4C 6400                       		bcc.s	loc_A4E6
0000AC4E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AC52 6600                       		bne.s	loc_A4E6
0000AC54 B240                       		cmp.w	d0,d1
0000AC56 6400                       		bcc.s	loc_A4DC
0000AC58 D241                       		add.w	d1,d1
0000AC5A 9041                       		sub.w	d1,d0
0000AC5C                            
0000AC5C                            loc_A4DC:
0000AC5C 0C43 0010                  		cmpi.w	#$10,d3
0000AC60 6500                       		bcs.s	loc_A4EA
0000AC62                            
0000AC62                            loc_A4E2:
0000AC62 7201                       		moveq	#1,d1
0000AC64 4E75                       		rts	
0000AC66                            ; ===========================================================================
0000AC66                            
0000AC66                            loc_A4E6:
0000AC66 7200                       		moveq	#0,d1
0000AC68 4E75                       		rts	
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            loc_A4EA:
0000AC6A 7200                       		moveq	#0,d1
0000AC6C 1228 0019                  		move.b	$19(a0),d1
0000AC70 5841                       		addq.w	#4,d1
0000AC72 3401                       		move.w	d1,d2
0000AC74 D442                       		add.w	d2,d2
0000AC76 D269 0008                  		add.w	8(a1),d1
0000AC7A 9268 0008                  		sub.w	8(a0),d1
0000AC7E 6BE2                       		bmi.s	loc_A4E2
0000AC80 B242                       		cmp.w	d2,d1
0000AC82 64DE                       		bcc.s	loc_A4E2
0000AC84 72FF                       		moveq	#-1,d1
0000AC86 4E75                       		rts	
0000AC88                            ; End of function Obj26_SolidSides
0000AC88                            
0000AC88                            ; ===========================================================================
0000AC88                            Ani_obj26:
0000AC88                            	include "_anim\obj26.asm"
0000AC88                            ; ---------------------------------------------------------------------------
0000AC88                            ; Animation script - monitors
0000AC88                            ; ---------------------------------------------------------------------------
0000AC88 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AC8E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AC94 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AC9A 0000                       		dc.w byte_A582-Ani_obj26
0000AC9C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ACA2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ACAE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ACBA 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ACC6 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ACD2 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ACDE 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ACEA 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ACF6 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AD02 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AD0A                            		even
0000AD0A                            		even
0000AD0A                            
0000AD0A                            ; ---------------------------------------------------------------------------
0000AD0A                            ; Sprite mappings - monitors
0000AD0A                            ; ---------------------------------------------------------------------------
0000AD0A                            Map_obj26:
0000AD0A                            	include "_maps\obj26.asm"
0000AD0A                            ; --------------------------------------------------------------------------------
0000AD0A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AD0A                            ; --------------------------------------------------------------------------------
0000AD0A                            
0000AD0A                            SME_XK1AB:	
0000AD0A 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000AD0E 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000AD12 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000AD16 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000AD1A 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000AD1E 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000AD22 01                         SME_XK1AB_18:	dc.b 1	
0000AD23 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD28 02                         SME_XK1AB_1E:	dc.b 2	
0000AD29 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000AD2E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD33 02                         SME_XK1AB_29:	dc.b 2	
0000AD34 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000AD39 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD3E 00                         SME_XK1AB_34:	dc.b 0	
0000AD3F 02                         SME_XK1AB_35:	dc.b 2	
0000AD40 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000AD45 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD4A 02                         SME_XK1AB_40:	dc.b 2	
0000AD4B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000AD50 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD55 02                         SME_XK1AB_4B:	dc.b 2	
0000AD56 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000AD5B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD60 02                         SME_XK1AB_56:	dc.b 2	
0000AD61 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000AD66 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD6B 02                         SME_XK1AB_61:	dc.b 2	
0000AD6C F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000AD71 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000AD76 00                         SME_XK1AB_6C:	dc.b 0	
0000AD77 00                         SME_XK1AB_6D:	dc.b 0	
0000AD78 01                         SME_XK1AB_6E:	dc.b 1	
0000AD79 FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000AD7E                            		even
0000AD7E                            		even
0000AD7E                            
0000AD7E                            ; ===========================================================================
0000AD7E                            ; ---------------------------------------------------------------------------
0000AD7E                            ; Object 0E - Sonic on the title screen
0000AD7E                            ; ---------------------------------------------------------------------------
0000AD7E                            
0000AD7E                            Obj0E:					; XREF: Obj_Index
0000AD7E 7000                       		moveq	#0,d0
0000AD80 1028 0024                  		move.b	$24(a0),d0
0000AD84 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AD88 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AD8C                            ; ===========================================================================
0000AD8C 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AD8E 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AD90 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AD92 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AD94                            ; ===========================================================================
0000AD94                            
0000AD94                            Obj0E_Main:				; XREF: Obj0E_Index
0000AD94 5428 0024                  		addq.b	#2,$24(a0)
0000AD98 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AD9E 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADA4 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADAC 317C 0300 0002             		move.w	#$300,2(a0)
0000ADB2 117C 0001 0018             		move.b	#1,$18(a0)
0000ADB8 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ADBE 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ADC4 6100 0000                  		bsr.w	AnimateSprite
0000ADC8                            
0000ADC8                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ADC8 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ADCC 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ADCE 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ADD2 6000 0000                  		bra.w	DisplaySprite
0000ADD6                            ; ===========================================================================
0000ADD6                            
0000ADD6                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ADD6 4E75                       		rts	
0000ADD8                            ; ===========================================================================
0000ADD8                            
0000ADD8                            Obj0E_Move:				; XREF: Obj0E_Index
0000ADD8 5168 000A                  		subq.w	#8,$A(a0)
0000ADDC 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ADE2 6600                       		bne.s	Obj0E_Display
0000ADE4 5428 0024                  		addq.b	#2,$24(a0)
0000ADE8                            
0000ADE8                            Obj0E_Display:
0000ADE8 6000 0000                  		bra.w	DisplaySprite
0000ADEC                            ; ===========================================================================
0000ADEC 4E75                       		rts	
0000ADEE                            ; ===========================================================================
0000ADEE                            
0000ADEE                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ADEE 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ADF4 6100 0000                  		bsr.w	AnimateSprite
0000ADF8 6000 0000                  		bra.w	DisplaySprite
0000ADFC                            ; ===========================================================================
0000ADFC 4E75                       		rts	
0000ADFE                            ; ===========================================================================
0000ADFE                            ; ---------------------------------------------------------------------------
0000ADFE                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ADFE                            ; ---------------------------------------------------------------------------
0000ADFE                            
0000ADFE                            Obj0F:					; XREF: Obj_Index
0000ADFE 7000                       		moveq	#0,d0
0000AE00 1028 0024                  		move.b	$24(a0),d0
0000AE04 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE08 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE0C 6000 0000                  		bra.w	DisplaySprite
0000AE10                            ; ===========================================================================
0000AE10 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE12 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE14 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE16                            ; ===========================================================================
0000AE16                            
0000AE16                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE16 5428 0024                  		addq.b	#2,$24(a0)
0000AE1A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE20 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE26 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE2E 317C 2200 0002             		move.w	#$2200,2(a0)
0000AE34 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE3A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE3C 5428 0024                  		addq.b	#2,$24(a0)
0000AE40 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE46 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE48 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE4E 317C 0170 0008             		move.w	#$170,8(a0)
0000AE54 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE5A                            
0000AE5A                            locret_A6F8:				; XREF: Obj0F_Index
0000AE5A 4E75                       		rts	
0000AE5C                            ; ===========================================================================
0000AE5C                            
0000AE5C                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE5C 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE62 6000 0000                  		bra.w	AnimateSprite
0000AE66                            ; ===========================================================================
0000AE66                            Ani_obj0E:
0000AE66                            	include "_anim\obj0E.asm"
0000AE66                            ; ---------------------------------------------------------------------------
0000AE66                            ; Animation script - Sonic on the title screen
0000AE66                            ; ---------------------------------------------------------------------------
0000AE66 0000                       		dc.w byte_A706-Ani_obj0E
0000AE68 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AE74                            		even
0000AE74                            		even
0000AE74                            
0000AE74                            Ani_obj0F:
0000AE74                            	include "_anim\obj0F.asm"
0000AE74                            ; ---------------------------------------------------------------------------
0000AE74                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AE74                            ; ---------------------------------------------------------------------------
0000AE74 0000                       		dc.w byte_A714-Ani_obj0F
0000AE76 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AE7A                            		even
0000AE7A                            		even
0000AE7A                            
0000AE7A                            ; ---------------------------------------------------------------------------
0000AE7A                            ; Subroutine to	animate	a sprite using an animation script
0000AE7A                            ; ---------------------------------------------------------------------------
0000AE7A                            
0000AE7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE7A                            
0000AE7A                            
0000AE7A                            AnimateSprite:
0000AE7A 7000                       		moveq	#0,d0
0000AE7C 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AE80 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AE84 6700                       		beq.s	Anim_Run	; if not, branch
0000AE86 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AE8A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE90 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AE96                            
0000AE96                            Anim_Run:
0000AE96 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AE9A 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AE9C D040                       		add.w	d0,d0
0000AE9E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEA2 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEA6 7200                       		moveq	#0,d1
0000AEA8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEAC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEB0 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AEB2                            
0000AEB2                            Anim_Next:
0000AEB2 1200                       		move.b	d0,d1
0000AEB4 0200 001F                  		andi.b	#$1F,d0
0000AEB8 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AEBC 1028 0022                  		move.b	$22(a0),d0
0000AEC0 E719                       		rol.b	#3,d1
0000AEC2 B101                       		eor.b	d0,d1
0000AEC4 0201 0003                  		andi.b	#3,d1
0000AEC8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AECE 8328 0001                  		or.b	d1,1(a0)
0000AED2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AED6                            
0000AED6                            Anim_Wait:
0000AED6 4E75                       		rts	
0000AED8                            ; ===========================================================================
0000AED8                            
0000AED8                            Anim_End_FF:
0000AED8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AEDA 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AEDC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AEE2 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AEE6 60CA                       		bra.s	Anim_Next
0000AEE8                            ; ===========================================================================
0000AEE8                            
0000AEE8                            Anim_End_FE:
0000AEE8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AEEA 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AEEC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AEF0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AEF4 9200                       		sub.b	d0,d1
0000AEF6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AEFA 60B6                       		bra.s	Anim_Next
0000AEFC                            ; ===========================================================================
0000AEFC                            
0000AEFC                            Anim_End_FD:
0000AEFC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AEFE 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF00 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF06                            
0000AF06                            Anim_End_FC:
0000AF06 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF08 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF0A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF0E                            
0000AF0E                            Anim_End_FB:
0000AF0E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF10 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF12 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF18 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF1C                            
0000AF1C                            Anim_End_FA:
0000AF1C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF1E 6600                       		bne.s	Anim_End	; if not, branch
0000AF20 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF24                            
0000AF24                            Anim_End:
0000AF24 4E75                       		rts	
0000AF26                            ; End of function AnimateSprite
0000AF26                            
0000AF26                            ; ===========================================================================
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            Map_obj0F:
0000AF26                            	include "_maps\obj0F.asm"
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF28 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF2A 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF2C 0000                       		dc.w byte_A882-Map_obj0F
0000AF2E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF2F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF34 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF39 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF3E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF43 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF48 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF4D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF4E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF53 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF58 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF5D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF62 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF67 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF6C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF71 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF76 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF7B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF80 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF85 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF8A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF8F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF94 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF99 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF9E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFA3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFA8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFAD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFB2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFB7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFBC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFC1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFC6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFCB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFD0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFD5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFDA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFDF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFE4 01                         byte_A882:	dc.b 1			; "TM"
0000AFE5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AFEA                            		even
0000AFEA                            		even
0000AFEA                            
0000AFEA                            ; ---------------------------------------------------------------------------
0000AFEA                            ; Sprite mappings - Sonic on the title screen
0000AFEA                            ; ---------------------------------------------------------------------------
0000AFEA                            Map_obj0E:
0000AFEA                            	include "_maps\obj0E.asm"
0000AFEA                            ; ---------------------------------------------------------------------------
0000AFEA                            ; Sprite mappings - Sonic on the title screen
0000AFEA                            ; ---------------------------------------------------------------------------
0000AFEA 0000                       		dc.w byte_A898-Map_obj0E
0000AFEC 0000                       		dc.w byte_A8CB-Map_obj0E
0000AFEE 0000                       		dc.w byte_A917-Map_obj0E
0000AFF0 0000                       		dc.w byte_A96D-Map_obj0E
0000AFF2 0000                       		dc.w byte_A9AF-Map_obj0E
0000AFF4 0000                       		dc.w byte_A9E7-Map_obj0E
0000AFF6 0000                       		dc.w byte_AA47-Map_obj0E
0000AFF8 0000                       		dc.w byte_AAB1-Map_obj0E
0000AFFA 0A                         byte_A898:	dc.b $A
0000AFFB 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B000 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B005 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B00A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B00F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B014 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B019 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B01E 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B023 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B028 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B02D 0F                         byte_A8CB:	dc.b $F
0000B02E 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B033 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B038 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B03D 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B042 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B047 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B04C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B051 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B056 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B05B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B060 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B065 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B06A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B06F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B074 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B079 11                         byte_A917:	dc.b $11
0000B07A 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B07F 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B084 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B089 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B08E 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B093 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B098 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B09D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B0A2 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B0A7 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B0AC 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B0B1 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B0B6 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B0BB 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B0C0 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B0C5 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B0CA 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B0CF 0D                         byte_A96D:	dc.b $D
0000B0D0 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B0D5 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B0DA 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B0DF 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B0E4 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B0E9 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B0EE 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B0F3 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B0F8 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B0FD 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B102 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B107 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B10C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B111 0B                         byte_A9AF:	dc.b $B
0000B112 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B117 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B11C 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B121 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B126 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B12B 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B130 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B135 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B13A 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B13F 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B144 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B149 13                         byte_A9E7:	dc.b $13
0000B14A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B14F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B154 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B159 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B15E 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B163 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B168 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B16D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B172 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B177 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B17C 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B181 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B186 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B18B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B190 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B195 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B19A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B19F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B1A4 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B1A9 15                         byte_AA47:	dc.b $15
0000B1AA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B1AF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B1B4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B1B9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B1BE 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B1C3 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B1C8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B1CD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B1D2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B1D7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B1DC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B1E1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B1E6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B1EB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B1F0 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B1F5 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B1FA 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B1FF 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B204 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B209 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B20E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B213 16                         byte_AAB1:	dc.b $16
0000B214 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B219 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B21E 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B223 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B228 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B22D 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B232 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B237 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B23C 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B241 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B246 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B24B 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B250 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B255 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B25A 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B25F 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B264 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B269 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B26E 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B273 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B278 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B27D 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B282                            		even
0000B282                            		even
0000B282                            
0000B282                            ; ===========================================================================
0000B282                            ; ---------------------------------------------------------------------------
0000B282                            ; Object 2B - Chopper enemy (GHZ)
0000B282                            ; ---------------------------------------------------------------------------
0000B282                            
0000B282                            Obj2B:					; XREF: Obj_Index
0000B282 7000                       		moveq	#0,d0
0000B284 1028 0024                  		move.b	$24(a0),d0
0000B288 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B28C 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B290 6000 0000                  		bra.w	MarkObjGone
0000B294                            ; ===========================================================================
0000B294 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B296 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B298                            ; ===========================================================================
0000B298                            
0000B298                            Obj2B_Main:				; XREF: Obj2B_Index
0000B298 5428 0024                  		addq.b	#2,$24(a0)
0000B29C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B2A4 317C 047B 0002             		move.w	#$47B,2(a0)
0000B2AA 117C 0004 0001             		move.b	#4,1(a0)
0000B2B0 117C 0004 0018             		move.b	#4,$18(a0)
0000B2B6 117C 0009 0020             		move.b	#9,$20(a0)
0000B2BC 117C 0010 0019             		move.b	#$10,$19(a0)
0000B2C2 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B2CE                            
0000B2CE                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B2CE 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B2D4 6100 FBA4                  		bsr.w	AnimateSprite
0000B2D8 6100 0000                  		bsr.w	SpeedToPos
0000B2DC 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B2E2 3028 0030                  		move.w	$30(a0),d0
0000B2E6 B068 000C                  		cmp.w	$C(a0),d0
0000B2EA 6400                       		bcc.s	Obj2B_ChgAni
0000B2EC 3140 000C                  		move.w	d0,$C(a0)
0000B2F0 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2F6                            
0000B2F6                            Obj2B_ChgAni:
0000B2F6 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2FC 0440 00C0                  		subi.w	#$C0,d0
0000B300 B068 000C                  		cmp.w	$C(a0),d0
0000B304 6400                       		bcc.s	locret_ABB6
0000B306 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B30C 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B310 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B312 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B318                            
0000B318                            locret_ABB6:
0000B318 4E75                       		rts	
0000B31A                            ; ===========================================================================
0000B31A                            Ani_obj2B:
0000B31A                            	include "_anim\obj2B.asm"
0000B31A                            ; ---------------------------------------------------------------------------
0000B31A                            ; Animation script - Chopper enemy
0000B31A                            ; ---------------------------------------------------------------------------
0000B31A 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B31C 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B31E 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B320 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B324 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B328 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B32C 00                         		even
0000B32C 00                         		even
0000B32C                            
0000B32C                            ; ---------------------------------------------------------------------------
0000B32C                            ; Sprite mappings - Chopper enemy (GHZ)
0000B32C                            ; ---------------------------------------------------------------------------
0000B32C                            Map_obj2B:
0000B32C                            	include "_maps\obj2B.asm"
0000B32C                            ; ---------------------------------------------------------------------------
0000B32C                            ; Sprite mappings - Chopper enemy (GHZ)
0000B32C                            ; ---------------------------------------------------------------------------
0000B32C 0000                       		dc.w byte_ABCE-Map_obj2B
0000B32E 0000                       		dc.w byte_ABD4-Map_obj2B
0000B330 01                         byte_ABCE:	dc.b 1
0000B331 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B336 01                         byte_ABD4:	dc.b 1
0000B337 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B33C                            		even
0000B33C                            		even
0000B33C                            
0000B33C                            ; ===========================================================================
0000B33C                            ; ---------------------------------------------------------------------------
0000B33C                            ; Object 2C - Jaws enemy (LZ)
0000B33C                            ; ---------------------------------------------------------------------------
0000B33C                            
0000B33C                            Obj2C:					; XREF: Obj_Index
0000B33C 7000                       		moveq	#0,d0
0000B33E 1028 0024                  		move.b	$24(a0),d0
0000B342 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B346 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B34A                            ; ===========================================================================
0000B34A 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B34C 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B34E                            ; ===========================================================================
0000B34E                            
0000B34E                            Obj2C_Main:				; XREF: Obj2C_Index
0000B34E 5428 0024                  		addq.b	#2,$24(a0)
0000B352 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B35A 317C 2486 0002             		move.w	#$2486,2(a0)
0000B360 0028 0004 0001             		ori.b	#4,1(a0)
0000B366 117C 000A 0020             		move.b	#$A,$20(a0)
0000B36C 117C 0004 0018             		move.b	#4,$18(a0)
0000B372 117C 0010 0019             		move.b	#$10,$19(a0)
0000B378 7000                       		moveq	#0,d0
0000B37A 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B37E ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B380 5340                       		subq.w	#1,d0
0000B382 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B386 3140 0032                  		move.w	d0,$32(a0)
0000B38A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B390 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B396 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B398 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B39C                            
0000B39C                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B39C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B3A0 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B3A2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B3A8 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B3AC 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B3B2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B3B8                            
0000B3B8                            Obj2C_Animate:
0000B3B8 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B3BE 6100 FABA                  		bsr.w	AnimateSprite
0000B3C2 6100 0000                  		bsr.w	SpeedToPos
0000B3C6 6000 0000                  		bra.w	MarkObjGone
0000B3CA                            ; ===========================================================================
0000B3CA                            Ani_obj2C:
0000B3CA                            	include "_anim\obj2C.asm"
0000B3CA                            ; ---------------------------------------------------------------------------
0000B3CA                            ; Animation script - Jaws enemy
0000B3CA                            ; ---------------------------------------------------------------------------
0000B3CA 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B3CC 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B3D2                            		even
0000B3D2                            		even
0000B3D2                            
0000B3D2                            ; ---------------------------------------------------------------------------
0000B3D2                            ; Sprite mappings - Jaws enemy (LZ)
0000B3D2                            ; ---------------------------------------------------------------------------
0000B3D2                            Map_obj2C:
0000B3D2                            	include "_maps\obj2C.asm"
0000B3D2                            ; ---------------------------------------------------------------------------
0000B3D2                            ; Sprite mappings - Jaws enemy (LZ)
0000B3D2                            ; ---------------------------------------------------------------------------
0000B3D2 0000                       		dc.w byte_AC78-Map_obj2C
0000B3D4 0000                       		dc.w byte_AC83-Map_obj2C
0000B3D6 0000                       		dc.w byte_AC8E-Map_obj2C
0000B3D8 0000                       		dc.w byte_AC99-Map_obj2C
0000B3DA 02                         byte_AC78:	dc.b 2
0000B3DB F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3E0 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B3E5 02                         byte_AC83:	dc.b 2
0000B3E6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3EB F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3F0 02                         byte_AC8E:	dc.b 2
0000B3F1 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3F6 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3FB 02                         byte_AC99:	dc.b 2
0000B3FC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B401 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B406                            		even
0000B406                            		even
0000B406                            
0000B406                            ; ===========================================================================
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            ; Object 2D - Burrobot enemy (LZ)
0000B406                            ; ---------------------------------------------------------------------------
0000B406                            
0000B406                            Obj2D:					; XREF: Obj_Index
0000B406 7000                       		moveq	#0,d0
0000B408 1028 0024                  		move.b	$24(a0),d0
0000B40C 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B410 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B414                            ; ===========================================================================
0000B414 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B416 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B418                            ; ===========================================================================
0000B418                            
0000B418                            Obj2D_Main:				; XREF: Obj2D_Index
0000B418 5428 0024                  		addq.b	#2,$24(a0)
0000B41C 117C 0013 0016             		move.b	#$13,$16(a0)
0000B422 117C 0008 0017             		move.b	#8,$17(a0)
0000B428 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B430 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B436 0028 0004 0001             		ori.b	#4,1(a0)
0000B43C 117C 0004 0018             		move.b	#4,$18(a0)
0000B442 117C 0005 0020             		move.b	#5,$20(a0)
0000B448 117C 000C 0019             		move.b	#$C,$19(a0)
0000B44E 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B452 117C 0002 001C             		move.b	#2,$1C(a0)
0000B458                            
0000B458                            Obj2D_Action:				; XREF: Obj2D_Index
0000B458 7000                       		moveq	#0,d0
0000B45A 1028 0025                  		move.b	$25(a0),d0
0000B45E 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B462 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B466 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B46C 6100 FA0C                  		bsr.w	AnimateSprite
0000B470 6000 0000                  		bra.w	MarkObjGone
0000B474                            ; ===========================================================================
0000B474 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B476 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B478 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B47A 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B47C                            ; ===========================================================================
0000B47C                            
0000B47C                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B47C 5368 0030                  		subq.w	#1,$30(a0)
0000B480 6A00                       		bpl.s	locret_AD42
0000B482 5428 0025                  		addq.b	#2,$25(a0)
0000B486 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B48C 317C 0080 0010             		move.w	#$80,$10(a0)
0000B492 117C 0001 001C             		move.b	#1,$1C(a0)
0000B498 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B49E 6700                       		beq.s	locret_AD42
0000B4A0 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B4A4                            
0000B4A4                            locret_AD42:
0000B4A4 4E75                       		rts	
0000B4A6                            ; ===========================================================================
0000B4A6                            
0000B4A6                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B4A6 5368 0030                  		subq.w	#1,$30(a0)
0000B4AA 6B00                       		bmi.s	loc_AD84
0000B4AC 6100 0000                  		bsr.w	SpeedToPos
0000B4B0 0868 0000 0032             		bchg	#0,$32(a0)
0000B4B6 6600                       		bne.s	loc_AD78
0000B4B8 3628 0008                  		move.w	8(a0),d3
0000B4BC 0643 000C                  		addi.w	#$C,d3
0000B4C0 0828 0000 0022             		btst	#0,$22(a0)
0000B4C6 6600                       		bne.s	loc_AD6A
0000B4C8 0443 0018                  		subi.w	#$18,d3
0000B4CC                            
0000B4CC                            loc_AD6A:
0000B4CC 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B4D2 0C41 000C                  		cmpi.w	#$C,d1
0000B4D6 6C00                       		bge.s	loc_AD84
0000B4D8 4E75                       		rts	
0000B4DA                            ; ===========================================================================
0000B4DA                            
0000B4DA                            loc_AD78:				; XREF: Obj2D_Move
0000B4DA 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4E0 D368 000C                  		add.w	d1,$C(a0)
0000B4E4 4E75                       		rts	
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            loc_AD84:				; XREF: Obj2D_Move
0000B4E6 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4EC 6700                       		beq.s	loc_ADA4
0000B4EE 5528 0025                  		subq.b	#2,$25(a0)
0000B4F2 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4F8 317C 0000 0010             		move.w	#0,$10(a0)
0000B4FE 117C 0000 001C             		move.b	#0,$1C(a0)
0000B504 4E75                       		rts	
0000B506                            ; ===========================================================================
0000B506                            
0000B506                            loc_ADA4:
0000B506 5428 0025                  		addq.b	#2,$25(a0)
0000B50A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B510 117C 0002 001C             		move.b	#2,$1C(a0)
0000B516 4E75                       		rts	
0000B518                            ; ===========================================================================
0000B518                            
0000B518                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B518 6100 0000                  		bsr.w	SpeedToPos
0000B51C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B522 6B00                       		bmi.s	locret_ADF0
0000B524 117C 0003 001C             		move.b	#3,$1C(a0)
0000B52A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B530 4A41                       		tst.w	d1
0000B532 6A00                       		bpl.s	locret_ADF0
0000B534 D368 000C                  		add.w	d1,$C(a0)
0000B538 317C 0000 0012             		move.w	#0,$12(a0)
0000B53E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B544 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B54A 5528 0025                  		subq.b	#2,$25(a0)
0000B54E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B552                            
0000B552                            locret_ADF0:
0000B552 4E75                       		rts	
0000B554                            ; ===========================================================================
0000B554                            
0000B554                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B554 343C 0060                  		move.w	#$60,d2
0000B558 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B55C 6400                       		bcc.s	locret_AE20
0000B55E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B562 9068 000C                  		sub.w	$C(a0),d0
0000B566 6400                       		bcc.s	locret_AE20
0000B568 0C40 FF80                  		cmpi.w	#-$80,d0
0000B56C 6500                       		bcs.s	locret_AE20
0000B56E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B572 6600                       		bne.s	locret_AE20
0000B574 5528 0025                  		subq.b	#2,$25(a0)
0000B578 3141 0010                  		move.w	d1,$10(a0)
0000B57C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B582                            
0000B582                            locret_AE20:
0000B582 4E75                       		rts	
0000B584                            
0000B584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B584                            
0000B584                            
0000B584                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B584 323C 0080                  		move.w	#$80,d1
0000B588 08E8 0000 0022             		bset	#0,$22(a0)
0000B58E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B592 9068 0008                  		sub.w	8(a0),d0
0000B596 6400                       		bcc.s	loc_AE40
0000B598 4440                       		neg.w	d0
0000B59A 4441                       		neg.w	d1
0000B59C 08A8 0000 0022             		bclr	#0,$22(a0)
0000B5A2                            
0000B5A2                            loc_AE40:
0000B5A2 B042                       		cmp.w	d2,d0
0000B5A4 4E75                       		rts	
0000B5A6                            ; End of function Obj2D_ChkSonic2
0000B5A6                            
0000B5A6                            ; ===========================================================================
0000B5A6                            Ani_obj2D:
0000B5A6                            	include "_anim\obj2D.asm"
0000B5A6                            ; ---------------------------------------------------------------------------
0000B5A6                            ; Animation script - Burrobot enemy
0000B5A6                            ; ---------------------------------------------------------------------------
0000B5A6 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B5A8 0000                       		dc.w byte_AE50-Ani_obj2D
0000B5AA 0000                       		dc.w byte_AE54-Ani_obj2D
0000B5AC 0000                       		dc.w byte_AE58-Ani_obj2D
0000B5AE 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B5B2 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B5B6 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B5BA 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B5BE 00                         		even
0000B5BE 00                         		even
0000B5BE                            
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            ; Sprite mappings - Burrobot enemy (LZ)
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            Map_obj2D:
0000B5BE                            	include "_maps\obj2D.asm"
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE                            ; Sprite mappings - Burrobot enemy (LZ)
0000B5BE                            ; ---------------------------------------------------------------------------
0000B5BE 0000                       		dc.w byte_AE6A-Map_obj2D
0000B5C0 0000                       		dc.w byte_AE75-Map_obj2D
0000B5C2 0000                       		dc.w byte_AE80-Map_obj2D
0000B5C4 0000                       		dc.w byte_AE8B-Map_obj2D
0000B5C6 0000                       		dc.w byte_AE96-Map_obj2D
0000B5C8 0000                       		dc.w byte_AEA1-Map_obj2D
0000B5CA 0000                       		dc.w byte_AEAC-Map_obj2D
0000B5CC 02                         byte_AE6A:	dc.b 2
0000B5CD EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B5D2 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B5D7 02                         byte_AE75:	dc.b 2
0000B5D8 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B5DD 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B5E2 02                         byte_AE80:	dc.b 2
0000B5E3 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B5E8 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B5ED 02                         byte_AE8B:	dc.b 2
0000B5EE E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B5F3 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B5F8 02                         byte_AE96:	dc.b 2
0000B5F9 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B5FE 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B603 02                         byte_AEA1:	dc.b 2
0000B604 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B609 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B60E 02                         byte_AEAC:	dc.b 2
0000B60F EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B614 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B61A 00                         		even
0000B61A 00                         		even
0000B61A                            
0000B61A                            ; ===========================================================================
0000B61A                            ; ---------------------------------------------------------------------------
0000B61A                            ; Object 2F - large moving platforms (MZ)
0000B61A                            ; ---------------------------------------------------------------------------
0000B61A                            
0000B61A                            Obj2F:					; XREF: Obj_Index
0000B61A 7000                       		moveq	#0,d0
0000B61C 1028 0024                  		move.b	$24(a0),d0
0000B620 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B624 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B628                            ; ===========================================================================
0000B628 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B62A 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B62C                            
0000B62C 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B62E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B630 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B632 0140                       		dc.b 1,	$40
0000B634 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B636 0220                       		dc.b 2,	$20
0000B638                            ; ===========================================================================
0000B638                            
0000B638                            Obj2F_Main:				; XREF: Obj2F_Index
0000B638 5428 0024                  		addq.b	#2,$24(a0)
0000B63C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B644 317C C000 0002             		move.w	#$C000,2(a0)
0000B64A 117C 0004 0001             		move.b	#4,1(a0)
0000B650 117C 0005 0018             		move.b	#5,$18(a0)
0000B656 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B65C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B662 7000                       		moveq	#0,d0
0000B664 1028 0028                  		move.b	$28(a0),d0
0000B668 E448                       		lsr.w	#2,d0
0000B66A 0240 001C                  		andi.w	#$1C,d0
0000B66E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B672 3019                       		move.w	(a1)+,d0
0000B674 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B678 214A 0030                  		move.l	a2,$30(a0)
0000B67C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B680 1151 0019                  		move.b	(a1),$19(a0)
0000B684 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B68A 117C 0040 0016             		move.b	#$40,$16(a0)
0000B690 08E8 0004 0001             		bset	#4,1(a0)
0000B696                            
0000B696                            Obj2F_Action:				; XREF: Obj2F_Index
0000B696 6100 0000                  		bsr.w	Obj2F_Types
0000B69A 4A28 0025                  		tst.b	$25(a0)
0000B69E 6700                       		beq.s	Obj2F_Solid
0000B6A0 7200                       		moveq	#0,d1
0000B6A2 1228 0019                  		move.b	$19(a0),d1
0000B6A6 0641 000B                  		addi.w	#$B,d1
0000B6AA 6100 C638                  		bsr.w	ExitPlatform
0000B6AE 0829 0003 0022             		btst	#3,$22(a1)
0000B6B4 6600 0000                  		bne.w	Obj2F_Slope
0000B6B8 4228 0025                  		clr.b	$25(a0)
0000B6BC 6000                       		bra.s	Obj2F_Display
0000B6BE                            ; ===========================================================================
0000B6BE                            
0000B6BE                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6BE 7200                       		moveq	#0,d1
0000B6C0 1228 0019                  		move.b	$19(a0),d1
0000B6C4 0641 000B                  		addi.w	#$B,d1
0000B6C8 2468 0030                  		movea.l	$30(a0),a2
0000B6CC 3428 0008                  		move.w	8(a0),d2
0000B6D0 6100 D5B6                  		bsr.w	SlopeObject2
0000B6D4 6000                       		bra.s	Obj2F_Display
0000B6D6                            ; ===========================================================================
0000B6D6                            
0000B6D6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6D6 7200                       		moveq	#0,d1
0000B6D8 1228 0019                  		move.b	$19(a0),d1
0000B6DC 0641 000B                  		addi.w	#$B,d1
0000B6E0 343C 0020                  		move.w	#$20,d2
0000B6E4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6EA 6600                       		bne.s	loc_AF8E
0000B6EC 343C 0030                  		move.w	#$30,d2
0000B6F0                            
0000B6F0                            loc_AF8E:
0000B6F0 2468 0030                  		movea.l	$30(a0),a2
0000B6F4 6100 0000                  		bsr.w	SolidObject2F
0000B6F8                            
0000B6F8                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6F8 6100 0000                  		bsr.w	DisplaySprite
0000B6FC 6000 0000                  		bra.w	Obj2F_ChkDel
0000B700                            
0000B700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B700                            
0000B700                            
0000B700                            Obj2F_Types:				; XREF: Obj2F_Action
0000B700 7000                       		moveq	#0,d0
0000B702 1028 0028                  		move.b	$28(a0),d0
0000B706 0240 0007                  		andi.w	#7,d0
0000B70A D040                       		add.w	d0,d0
0000B70C 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B710 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B714                            ; End of function Obj2F_Types
0000B714                            
0000B714                            ; ===========================================================================
0000B714 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B716 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B718 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B71A 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B71C 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B71E 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B720                            ; ===========================================================================
0000B720                            
0000B720                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B720 4E75                       		rts			; type 00 platform doesn't move
0000B722                            ; ===========================================================================
0000B722                            
0000B722                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B722 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B726 323C 0020                  		move.w	#$20,d1
0000B72A 6000                       		bra.s	Obj2F_Move
0000B72C                            ; ===========================================================================
0000B72C                            
0000B72C                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B72C 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B730 323C 0030                  		move.w	#$30,d1
0000B734 6000                       		bra.s	Obj2F_Move
0000B736                            ; ===========================================================================
0000B736                            
0000B736                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B736 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B73A 323C 0040                  		move.w	#$40,d1
0000B73E 6000                       		bra.s	Obj2F_Move
0000B740                            ; ===========================================================================
0000B740                            
0000B740                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B740 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B744 323C 0060                  		move.w	#$60,d1
0000B748                            
0000B748                            Obj2F_Move:
0000B748 0828 0003 0028             		btst	#3,$28(a0)
0000B74E 6700                       		beq.s	loc_AFF2
0000B750 4440                       		neg.w	d0
0000B752 D041                       		add.w	d1,d0
0000B754                            
0000B754                            loc_AFF2:
0000B754 3228 002C                  		move.w	$2C(a0),d1
0000B758 9240                       		sub.w	d0,d1
0000B75A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B75E 4E75                       		rts	
0000B760                            ; ===========================================================================
0000B760                            
0000B760                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B760 1028 0034                  		move.b	$34(a0),d0
0000B764 4A28 0025                  		tst.b	$25(a0)
0000B768 6600                       		bne.s	loc_B010
0000B76A 5500                       		subq.b	#2,d0
0000B76C 6400                       		bcc.s	loc_B01C
0000B76E 7000                       		moveq	#0,d0
0000B770 6000                       		bra.s	loc_B01C
0000B772                            ; ===========================================================================
0000B772                            
0000B772                            loc_B010:
0000B772 5800                       		addq.b	#4,d0
0000B774 0C00 0040                  		cmpi.b	#$40,d0
0000B778 6500                       		bcs.s	loc_B01C
0000B77A 103C 0040                  		move.b	#$40,d0
0000B77E                            
0000B77E                            loc_B01C:
0000B77E 1140 0034                  		move.b	d0,$34(a0)
0000B782 4EB9 0000 28EC             		jsr	(CalcSine).l
0000B788 E848                       		lsr.w	#4,d0
0000B78A 3200                       		move.w	d0,d1
0000B78C D068 002C                  		add.w	$2C(a0),d0
0000B790 3140 000C                  		move.w	d0,$C(a0)
0000B794 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B79A 6600                       		bne.s	loc_B07A
0000B79C 4A28 0035                  		tst.b	$35(a0)
0000B7A0 6600                       		bne.s	loc_B07A
0000B7A2 117C 0001 0035             		move.b	#1,$35(a0)
0000B7A8 6100 0000                  		bsr.w	SingleObjLoad2
0000B7AC 6600                       		bne.s	loc_B07A
0000B7AE 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7B8 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7BE 5069 002C                  		addq.w	#8,$2C(a1)
0000B7C2 5769 002C                  		subq.w	#3,$2C(a1)
0000B7C6 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7CC 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7D2 2348 0038                  		move.l	a0,$38(a1)
0000B7D6 2448                       		movea.l	a0,a2
0000B7D8 6100                       		bsr.s	sub_B09C
0000B7DA                            
0000B7DA                            loc_B07A:
0000B7DA 7400                       		moveq	#0,d2
0000B7DC 45E8 0036                  		lea	$36(a0),a2
0000B7E0 141A                       		move.b	(a2)+,d2
0000B7E2 5302                       		subq.b	#1,d2
0000B7E4 6500                       		bcs.s	locret_B09A
0000B7E6                            
0000B7E6                            loc_B086:
0000B7E6 7000                       		moveq	#0,d0
0000B7E8 101A                       		move.b	(a2)+,d0
0000B7EA ED48                       		lsl.w	#6,d0
0000B7EC 0640 D000                  		addi.w	#-$3000,d0
0000B7F0 3240                       		movea.w	d0,a1
0000B7F2 3341 003C                  		move.w	d1,$3C(a1)
0000B7F6 51CA FFEE                  		dbf	d2,loc_B086
0000B7FA                            
0000B7FA                            locret_B09A:
0000B7FA 4E75                       		rts	
0000B7FC                            
0000B7FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7FC                            
0000B7FC                            
0000B7FC                            sub_B09C:
0000B7FC 45EA 0036                  		lea	$36(a2),a2
0000B800 7000                       		moveq	#0,d0
0000B802 1012                       		move.b	(a2),d0
0000B804 5212                       		addq.b	#1,(a2)
0000B806 45F2 0001                  		lea	1(a2,d0.w),a2
0000B80A 3009                       		move.w	a1,d0
0000B80C 0440 D000                  		subi.w	#-$3000,d0
0000B810 EC48                       		lsr.w	#6,d0
0000B812 0240 007F                  		andi.w	#$7F,d0
0000B816 1480                       		move.b	d0,(a2)
0000B818 4E75                       		rts	
0000B81A                            ; End of function sub_B09C
0000B81A                            
0000B81A                            ; ===========================================================================
0000B81A                            
0000B81A                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B81A 4A28 0035                  		tst.b	$35(a0)
0000B81E 6700                       		beq.s	loc_B0C6
0000B820 4A28 0001                  		tst.b	1(a0)
0000B824 6A00                       		bpl.s	Obj2F_DelFlames
0000B826                            
0000B826                            loc_B0C6:
0000B826 3028 002A                  		move.w	$2A(a0),d0
0000B82A 0240 FF80                  		andi.w	#$FF80,d0
0000B82E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B832 0441 0080                  		subi.w	#$80,d1
0000B836 0241 FF80                  		andi.w	#$FF80,d1
0000B83A 9041                       		sub.w	d1,d0
0000B83C 0C40 0280                  		cmpi.w	#$280,d0
0000B840 6200 0000                  		bhi.w	DeleteObject
0000B844 4E75                       		rts	
0000B846                            ; ===========================================================================
0000B846                            
0000B846                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B846 7400                       		moveq	#0,d2
0000B848                            
0000B848                            loc_B0E8:
0000B848 45E8 0036                  		lea	$36(a0),a2
0000B84C 1412                       		move.b	(a2),d2
0000B84E 421A                       		clr.b	(a2)+
0000B850 5302                       		subq.b	#1,d2
0000B852 6500                       		bcs.s	locret_B116
0000B854                            
0000B854                            loc_B0F4:
0000B854 7000                       		moveq	#0,d0
0000B856 1012                       		move.b	(a2),d0
0000B858 421A                       		clr.b	(a2)+
0000B85A ED48                       		lsl.w	#6,d0
0000B85C 0640 D000                  		addi.w	#-$3000,d0
0000B860 3240                       		movea.w	d0,a1
0000B862 6100 0000                  		bsr.w	DeleteObject2
0000B866 51CA FFEC                  		dbf	d2,loc_B0F4
0000B86A 117C 0000 0035             		move.b	#0,$35(a0)
0000B870 117C 0000 0034             		move.b	#0,$34(a0)
0000B876                            
0000B876                            locret_B116:
0000B876 4E75                       		rts	
0000B878                            ; ===========================================================================
0000B878                            ; ---------------------------------------------------------------------------
0000B878                            ; Collision data for large moving platforms (MZ)
0000B878                            ; ---------------------------------------------------------------------------
0000B878                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8C4                            		even
0000B8C4                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8F0                            		even
0000B8F0                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B93C                            		even
0000B93C                            ; ===========================================================================
0000B93C                            ; ---------------------------------------------------------------------------
0000B93C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B93C                            ; (appears when	you walk on sinking platforms)
0000B93C                            ; ---------------------------------------------------------------------------
0000B93C                            
0000B93C                            Obj35:					; XREF: Obj_Index
0000B93C 7000                       		moveq	#0,d0
0000B93E 1028 0024                  		move.b	$24(a0),d0
0000B942 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B946 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B94A                            ; ===========================================================================
0000B94A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B94C 0000                       		dc.w loc_B238-Obj35_Index
0000B94E 0000                       		dc.w Obj35_Move-Obj35_Index
0000B950                            ; ===========================================================================
0000B950                            
0000B950                            Obj35_Main:				; XREF: Obj35_Index
0000B950 5428 0024                  		addq.b	#2,$24(a0)
0000B954 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B95C 317C 0345 0002             		move.w	#$345,2(a0)
0000B962 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B968 117C 0004 0001             		move.b	#4,1(a0)
0000B96E 117C 0001 0018             		move.b	#1,$18(a0)
0000B974 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B97A 117C 0008 0019             		move.b	#8,$19(a0)
0000B980 303C 00C8                  		move.w	#$C8,d0
0000B984 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flame sound
0000B98A 4A28 0028                  		tst.b	$28(a0)
0000B98E 6700                       		beq.s	loc_B238
0000B990 5428 0024                  		addq.b	#2,$24(a0)
0000B994 6000 0000                  		bra.w	Obj35_Move
0000B998                            ; ===========================================================================
0000B998                            
0000B998                            loc_B238:				; XREF: Obj35_Index
0000B998 2268 0030                  		movea.l	$30(a0),a1
0000B99C 3228 0008                  		move.w	8(a0),d1
0000B9A0 9268 002A                  		sub.w	$2A(a0),d1
0000B9A4 0641 000C                  		addi.w	#$C,d1
0000B9A8 3001                       		move.w	d1,d0
0000B9AA E248                       		lsr.w	#1,d0
0000B9AC 1031 0000                  		move.b	(a1,d0.w),d0
0000B9B0 4440                       		neg.w	d0
0000B9B2 D068 002C                  		add.w	$2C(a0),d0
0000B9B6 3400                       		move.w	d0,d2
0000B9B8 D068 003C                  		add.w	$3C(a0),d0
0000B9BC 3140 000C                  		move.w	d0,$C(a0)
0000B9C0 0C41 0084                  		cmpi.w	#$84,d1
0000B9C4 6400                       		bcc.s	loc_B2B0
0000B9C6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9CE 0C41 0080                  		cmpi.w	#$80,d1
0000B9D2 6400                       		bcc.s	loc_B2B0
0000B9D4 2028 0008                  		move.l	8(a0),d0
0000B9D8 0680 0008 0000             		addi.l	#$80000,d0
0000B9DE 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9E4 6600                       		bne.s	loc_B2B0
0000B9E6 6100 0000                  		bsr.w	SingleObjLoad2
0000B9EA 6600                       		bne.s	loc_B2B0
0000B9EC 12BC 0035                  		move.b	#$35,0(a1)
0000B9F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9F6 3342 002C                  		move.w	d2,$2C(a1)
0000B9FA 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BA00 137C 0001 0028             		move.b	#1,$28(a1)
0000BA06 2468 0038                  		movea.l	$38(a0),a2
0000BA0A 6100 FDF0                  		bsr.w	sub_B09C
0000BA0E                            
0000BA0E                            loc_B2B0:
0000BA0E 6000                       		bra.s	Obj35_Animate
0000BA10                            ; ===========================================================================
0000BA10                            
0000BA10                            Obj35_Move:				; XREF: Obj35_Index
0000BA10 3028 002C                  		move.w	$2C(a0),d0
0000BA14 D068 003C                  		add.w	$3C(a0),d0
0000BA18 3140 000C                  		move.w	d0,$C(a0)
0000BA1C                            
0000BA1C                            Obj35_Animate:				; XREF: loc_B238
0000BA1C 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA22 6100 F456                  		bsr.w	AnimateSprite
0000BA26 6000 0000                  		bra.w	DisplaySprite
0000BA2A                            ; ===========================================================================
0000BA2A                            Ani_obj35:
0000BA2A                            	include "_anim\obj35.asm"
0000BA2A                            ; ---------------------------------------------------------------------------
0000BA2A                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA2A                            ; ---------------------------------------------------------------------------
0000BA2A 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA2C 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA32                            		even
0000BA32                            		even
0000BA32                            
0000BA32                            ; ---------------------------------------------------------------------------
0000BA32                            ; Sprite mappings - large moving platforms (MZ)
0000BA32                            ; ---------------------------------------------------------------------------
0000BA32                            Map_obj2F:
0000BA32                            	include "_maps\obj2F.asm"
0000BA32                            ; ---------------------------------------------------------------------------
0000BA32                            ; Sprite mappings - large moving platforms (MZ)
0000BA32                            ; ---------------------------------------------------------------------------
0000BA32 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA34 0000                       		dc.w byte_B31C-Map_obj2F
0000BA36 0000                       		dc.w byte_B34F-Map_obj2F
0000BA38 0D                         byte_B2DA:	dc.b $D
0000BA39 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA3E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA43 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA48 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA4D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA52 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA57 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA5C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA61 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA66 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA6B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA70 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA75 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA7A 0A                         byte_B31C:	dc.b $A
0000BA7B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA80 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA85 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA8A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA8F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA94 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA99 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA9E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BAA3 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BAA8 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BAAD 06                         byte_B34F:	dc.b 6
0000BAAE D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BAB3 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAB8 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BABD D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BAC2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BAC7 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BACC                            		even
0000BACC                            		even
0000BACC                            
0000BACC                            ; ---------------------------------------------------------------------------
0000BACC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BACC                            ; ---------------------------------------------------------------------------
0000BACC                            Map_obj14:
0000BACC                            	include "_maps\obj14.asm"
0000BACC                            ; ---------------------------------------------------------------------------
0000BACC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BACC                            ; ---------------------------------------------------------------------------
0000BACC 0000                       		dc.w byte_B37A-Map_obj14
0000BACE 0000                       		dc.w byte_B380-Map_obj14
0000BAD0 0000                       		dc.w byte_B386-Map_obj14
0000BAD2 0000                       		dc.w byte_B38C-Map_obj14
0000BAD4 0000                       		dc.w byte_B392-Map_obj14
0000BAD6 0000                       		dc.w byte_B398-Map_obj14
0000BAD8 01                         byte_B37A:	dc.b 1
0000BAD9 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BADE 01                         byte_B380:	dc.b 1
0000BADF E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BAE4 01                         byte_B386:	dc.b 1
0000BAE5 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BAEA 01                         byte_B38C:	dc.b 1
0000BAEB F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BAF0 01                         byte_B392:	dc.b 1
0000BAF1 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BAF6 01                         byte_B398:	dc.b 1
0000BAF7 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BAFC                            		even
0000BAFC                            		even
0000BAFC                            
0000BAFC                            ; ===========================================================================
0000BAFC                            ; ---------------------------------------------------------------------------
0000BAFC                            ; Object 30 - large green glassy blocks	(MZ)
0000BAFC                            ; ---------------------------------------------------------------------------
0000BAFC                            
0000BAFC                            Obj30:					; XREF: Obj_Index
0000BAFC 7000                       		moveq	#0,d0
0000BAFE 1028 0024                  		move.b	$24(a0),d0
0000BB02 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB06 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB0A 3028 0008                  		move.w	8(a0),d0
0000BB0E 0240 FF80                  		andi.w	#$FF80,d0
0000BB12 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB16 0441 0080                  		subi.w	#$80,d1
0000BB1A 0241 FF80                  		andi.w	#$FF80,d1
0000BB1E 9041                       		sub.w	d1,d0
0000BB20 0C40 0280                  		cmpi.w	#$280,d0
0000BB24 6200 0000                  		bhi.w	Obj30_Delete
0000BB28 6000 0000                  		bra.w	DisplaySprite
0000BB2C                            ; ===========================================================================
0000BB2C                            
0000BB2C                            Obj30_Delete:
0000BB2C 6000 0000                  		bra.w	DeleteObject
0000BB30                            ; ===========================================================================
0000BB30 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB32 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB34 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB36 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB38 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB3A                            
0000BB3A 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB3D 0400 01                    		dc.b 4,	0, 1
0000BB40 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB43 0800 01                    		dc.b 8,	0, 1
0000BB46                            ; ===========================================================================
0000BB46                            
0000BB46                            Obj30_Main:				; XREF: Obj30_Index
0000BB46 45F9 0000 BB3A             		lea	(Obj30_Vars1).l,a2
0000BB4C 7201                       		moveq	#1,d1
0000BB4E 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB54 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB5A 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB5C 45F9 0000 BB40             		lea	(Obj30_Vars2).l,a2
0000BB62 7201                       		moveq	#1,d1
0000BB64 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB6A                            
0000BB6A                            loc_B40C:
0000BB6A 2248                       		movea.l	a0,a1
0000BB6C 6000                       		bra.s	Obj30_Load	; load main object
0000BB6E                            ; ===========================================================================
0000BB6E                            
0000BB6E                            Obj30_Loop:
0000BB6E 6100 0000                  		bsr.w	SingleObjLoad2
0000BB72 6600                       		bne.s	loc_B480
0000BB74                            
0000BB74                            Obj30_Load:				; XREF: Obj30_Main
0000BB74 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB78 12BC 0030                  		move.b	#$30,0(a1)
0000BB7C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB82 101A                       		move.b	(a2)+,d0
0000BB84 4880                       		ext.w	d0
0000BB86 D068 000C                  		add.w	$C(a0),d0
0000BB8A 3340 000C                  		move.w	d0,$C(a1)
0000BB8E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB96 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB9C 137C 0004 0001             		move.b	#4,1(a1)
0000BBA2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBA8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBAE 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBB4 137C 0004 0018             		move.b	#4,$18(a1)
0000BBBA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBBE 2348 003C                  		move.l	a0,$3C(a1)
0000BBC2 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBC6                            
0000BBC6 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBCC 137C 0003 0018             		move.b	#3,$18(a1)
0000BBD2 5029 0028                  		addq.b	#8,$28(a1)
0000BBD6 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBDC                            
0000BBDC                            loc_B480:
0000BBDC 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBE2 08E8 0004 0001             		bset	#4,1(a0)
0000BBE8                            
0000BBE8                            Obj30_Block012:				; XREF: Obj30_Index
0000BBE8 6100 0000                  		bsr.w	Obj30_Types
0000BBEC 323C 002B                  		move.w	#$2B,d1
0000BBF0 343C 0048                  		move.w	#$48,d2
0000BBF4 363C 0049                  		move.w	#$49,d3
0000BBF8 3828 0008                  		move.w	8(a0),d4
0000BBFC 6000 0000                  		bra.w	SolidObject
0000BC00                            ; ===========================================================================
0000BC00                            
0000BC00                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BC00 2268 003C                  		movea.l	$3C(a0),a1
0000BC04 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC0A 6000 0000                  		bra.w	Obj30_Types
0000BC0E                            ; ===========================================================================
0000BC0E                            
0000BC0E                            Obj30_Block34:				; XREF: Obj30_Index
0000BC0E 6100 0000                  		bsr.w	Obj30_Types
0000BC12 323C 002B                  		move.w	#$2B,d1
0000BC16 343C 0038                  		move.w	#$38,d2
0000BC1A 363C 0039                  		move.w	#$39,d3
0000BC1E 3828 0008                  		move.w	8(a0),d4
0000BC22 6000 0000                  		bra.w	SolidObject
0000BC26                            ; ===========================================================================
0000BC26                            
0000BC26                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC26 2268 003C                  		movea.l	$3C(a0),a1
0000BC2A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC30 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC36 6000 0002                  		bra.w	*+4
0000BC3A                            
0000BC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC3A                            
0000BC3A                            
0000BC3A                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC3A 7000                       		moveq	#0,d0
0000BC3C 1028 0028                  		move.b	$28(a0),d0
0000BC40 0240 0007                  		andi.w	#7,d0
0000BC44 D040                       		add.w	d0,d0
0000BC46 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC4A 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC4E                            ; End of function Obj30_Types
0000BC4E                            
0000BC4E                            ; ===========================================================================
0000BC4E 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC50 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC52 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC54 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC56 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC58                            ; ===========================================================================
0000BC58                            
0000BC58                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC58 4E75                       		rts	
0000BC5A                            ; ===========================================================================
0000BC5A                            
0000BC5A                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC5A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC5E 323C 0040                  		move.w	#$40,d1
0000BC62 6000                       		bra.s	loc_B514
0000BC64                            ; ===========================================================================
0000BC64                            
0000BC64                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC64 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC68 323C 0040                  		move.w	#$40,d1
0000BC6C 4440                       		neg.w	d0
0000BC6E D041                       		add.w	d1,d0
0000BC70                            
0000BC70                            loc_B514:				; XREF: Obj30_Type01
0000BC70 0828 0003 0028             		btst	#3,$28(a0)
0000BC76 6700                       		beq.s	loc_B526
0000BC78 4440                       		neg.w	d0
0000BC7A D041                       		add.w	d1,d0
0000BC7C E208                       		lsr.b	#1,d0
0000BC7E 0640 0020                  		addi.w	#$20,d0
0000BC82                            
0000BC82                            loc_B526:
0000BC82 6000 0000                  		bra.w	loc_B5EE
0000BC86                            ; ===========================================================================
0000BC86                            
0000BC86                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC86 0828 0003 0028             		btst	#3,$28(a0)
0000BC8C 6700                       		beq.s	loc_B53E
0000BC8E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC92 0440 0010                  		subi.w	#$10,d0
0000BC96 6000 0000                  		bra.w	loc_B5EE
0000BC9A                            ; ===========================================================================
0000BC9A                            
0000BC9A                            loc_B53E:
0000BC9A 0828 0003 0022             		btst	#3,$22(a0)
0000BCA0 6600                       		bne.s	loc_B54E
0000BCA2 08A8 0000 0034             		bclr	#0,$34(a0)
0000BCA8 6000                       		bra.s	loc_B582
0000BCAA                            ; ===========================================================================
0000BCAA                            
0000BCAA                            loc_B54E:
0000BCAA 4A28 0034                  		tst.b	$34(a0)
0000BCAE 6600                       		bne.s	loc_B582
0000BCB0 117C 0001 0034             		move.b	#1,$34(a0)
0000BCB6 08E8 0000 0035             		bset	#0,$35(a0)
0000BCBC 6700                       		beq.s	loc_B582
0000BCBE 08E8 0007 0034             		bset	#7,$34(a0)
0000BCC4 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCCA 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCD0 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCD6 6600                       		bne.s	loc_B582
0000BCD8 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCDE                            
0000BCDE                            loc_B582:
0000BCDE 4A28 0034                  		tst.b	$34(a0)
0000BCE2 6A00                       		bpl.s	loc_B5AA
0000BCE4 4A28 0038                  		tst.b	$38(a0)
0000BCE8 6700                       		beq.s	loc_B594
0000BCEA 5328 0038                  		subq.b	#1,$38(a0)
0000BCEE 6600                       		bne.s	loc_B5AA
0000BCF0                            
0000BCF0                            loc_B594:
0000BCF0 4A68 0032                  		tst.w	$32(a0)
0000BCF4 6700                       		beq.s	loc_B5A4
0000BCF6 5368 0032                  		subq.w	#1,$32(a0)
0000BCFA 5368 0036                  		subq.w	#1,$36(a0)
0000BCFE 6600                       		bne.s	loc_B5AA
0000BD00                            
0000BD00                            loc_B5A4:
0000BD00 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD06                            
0000BD06                            loc_B5AA:
0000BD06 3028 0032                  		move.w	$32(a0),d0
0000BD0A 6000                       		bra.s	loc_B5EE
0000BD0C                            ; ===========================================================================
0000BD0C                            
0000BD0C                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD0C 0828 0003 0028             		btst	#3,$28(a0)
0000BD12 6700                       		beq.s	Obj30_ChkSwitch
0000BD14 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD18 0440 0010                  		subi.w	#$10,d0
0000BD1C 6000                       		bra.s	loc_B5EE
0000BD1E                            ; ===========================================================================
0000BD1E                            
0000BD1E                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD1E 4A28 0034                  		tst.b	$34(a0)
0000BD22 6600                       		bne.s	loc_B5E0
0000BD24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD28 7000                       		moveq	#0,d0
0000BD2A 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD2E E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD30 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD34 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD36 117C 0001 0034             		move.b	#1,$34(a0)
0000BD3C                            
0000BD3C                            loc_B5E0:
0000BD3C 4A68 0032                  		tst.w	$32(a0)
0000BD40 6700                       		beq.s	loc_B5EA
0000BD42 5568 0032                  		subq.w	#2,$32(a0)
0000BD46                            
0000BD46                            loc_B5EA:
0000BD46 3028 0032                  		move.w	$32(a0),d0
0000BD4A                            
0000BD4A                            loc_B5EE:
0000BD4A 3228 0030                  		move.w	$30(a0),d1
0000BD4E 9240                       		sub.w	d0,d1
0000BD50 3141 000C                  		move.w	d1,$C(a0)
0000BD54 4E75                       		rts	
0000BD56                            ; ===========================================================================
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56                            Map_obj30:
0000BD56                            	include "_maps\obj30.asm"
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD56                            ; ---------------------------------------------------------------------------
0000BD56 0000                       		dc.w byte_B600-Map_obj30
0000BD58 0000                       		dc.w byte_B63D-Map_obj30
0000BD5A 0000                       		dc.w byte_B648-Map_obj30
0000BD5C 0C                         byte_B600:	dc.b $C
0000BD5D B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD62 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD67 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD6C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD71 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD76 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD7B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD80 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD85 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD8A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD8F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD94 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD99 02                         byte_B63D:	dc.b 2
0000BD9A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD9F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BDA4 0A                         byte_B648:	dc.b $A
0000BDA5 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDAA C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDAF D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDB4 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDB9 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDBE F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDC3 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDC8 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDCD 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDD2 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDD8 00                         		even
0000BDD8 00                         		even
0000BDD8                            
0000BDD8                            ; ===========================================================================
0000BDD8                            ; ---------------------------------------------------------------------------
0000BDD8                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDD8                            ; ---------------------------------------------------------------------------
0000BDD8                            
0000BDD8                            Obj31:					; XREF: Obj_Index
0000BDD8 7000                       		moveq	#0,d0
0000BDDA 1028 0024                  		move.b	$24(a0),d0
0000BDDE 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDE2 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDE6                            ; ===========================================================================
0000BDE6 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDE8 0000                       		dc.w loc_B798-Obj31_Index
0000BDEA 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDEC 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDEE 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDF0                            
0000BDF0 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDF2 0100                       		dc.b 1,	0
0000BDF4                            
0000BDF4 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDF7 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDFA 08CC 03                    		dc.b 8,	$CC, 3
0000BDFD 06F0 02                    		dc.b 6,	$F0, 2
0000BE00                            
0000BE00 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BE04 5000 7800                  		dc.w $5000, $7800
0000BE08 3800 5800                  		dc.w $3800, $5800
0000BE0C B800                       		dc.w $B800
0000BE0E                            ; ===========================================================================
0000BE0E                            
0000BE0E                            Obj31_Main:				; XREF: Obj31_Index
0000BE0E 7000                       		moveq	#0,d0
0000BE10 1028 0028                  		move.b	$28(a0),d0
0000BE14 6A00                       		bpl.s	loc_B6CE
0000BE16 0240 007F                  		andi.w	#$7F,d0
0000BE1A D040                       		add.w	d0,d0
0000BE1C 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE20 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE24 101A                       		move.b	(a2)+,d0
0000BE26 1140 0028                  		move.b	d0,$28(a0)
0000BE2A                            
0000BE2A                            loc_B6CE:
0000BE2A 0200 000F                  		andi.b	#$F,d0
0000BE2E D040                       		add.w	d0,d0
0000BE30 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE34 4A40                       		tst.w	d0
0000BE36 6600                       		bne.s	loc_B6E0
0000BE38 3142 0032                  		move.w	d2,$32(a0)
0000BE3C                            
0000BE3C                            loc_B6E0:
0000BE3C 45F9 0000 BDF4             		lea	(Obj31_Var).l,a2
0000BE42 2248                       		movea.l	a0,a1
0000BE44 7203                       		moveq	#3,d1
0000BE46 6000                       		bra.s	Obj31_MakeStomper
0000BE48                            ; ===========================================================================
0000BE48                            
0000BE48                            Obj31_Loop:
0000BE48 6100 0000                  		bsr.w	SingleObjLoad2
0000BE4C 6600 0000                  		bne.w	Obj31_SetSize
0000BE50                            
0000BE50                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE50 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE54 12BC 0031                  		move.b	#$31,0(a1)
0000BE58 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE5E 101A                       		move.b	(a2)+,d0
0000BE60 4880                       		ext.w	d0
0000BE62 D068 000C                  		add.w	$C(a0),d0
0000BE66 3340 000C                  		move.w	d0,$C(a1)
0000BE6A 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE72 337C 0300 0002             		move.w	#$300,2(a1)
0000BE78 137C 0004 0001             		move.b	#4,1(a1)
0000BE7E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE84 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE8A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE90 3342 0034                  		move.w	d2,$34(a1)
0000BE94 137C 0004 0018             		move.b	#4,$18(a1)
0000BE9A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE9E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BEA4 6600                       		bne.s	loc_B76A
0000BEA6 5341                       		subq.w	#1,d1
0000BEA8 1028 0028                  		move.b	$28(a0),d0
0000BEAC 0240 00F0                  		andi.w	#$F0,d0
0000BEB0 0C40 0020                  		cmpi.w	#$20,d0
0000BEB4 679A                       		beq.s	Obj31_MakeStomper
0000BEB6 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEBC 137C 0090 0020             		move.b	#$90,$20(a1)
0000BEC2 5241                       		addq.w	#1,d1
0000BEC4                            
0000BEC4                            loc_B76A:
0000BEC4 2348 003C                  		move.l	a0,$3C(a1)
0000BEC8 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BECC                            
0000BECC 137C 0003 0018             		move.b	#3,$18(a1)
0000BED2                            
0000BED2                            Obj31_SetSize:
0000BED2 7000                       		moveq	#0,d0
0000BED4 1028 0028                  		move.b	$28(a0),d0
0000BED8 E648                       		lsr.w	#3,d0
0000BEDA 0200 000E                  		andi.b	#$E,d0
0000BEDE 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BEE2 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEE6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEEA 6000                       		bra.s	loc_B798
0000BEEC                            ; ===========================================================================
0000BEEC 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEEE 3009                       		dc.b $30, 9
0000BEF0 100A                       		dc.b $10, $A
0000BEF2                            ; ===========================================================================
0000BEF2                            
0000BEF2                            loc_B798:				; XREF: Obj31_Index
0000BEF2 6100 0000                  		bsr.w	Obj31_Types
0000BEF6 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEFC 7200                       		moveq	#0,d1
0000BEFE 1228 0019                  		move.b	$19(a0),d1
0000BF02 0641 000B                  		addi.w	#$B,d1
0000BF06 343C 000C                  		move.w	#$C,d2
0000BF0A 363C 000D                  		move.w	#$D,d3
0000BF0E 3828 0008                  		move.w	8(a0),d4
0000BF12 6100 0000                  		bsr.w	SolidObject
0000BF16 0828 0003 0022             		btst	#3,$22(a0)
0000BF1C 6700                       		beq.s	Obj31_Display
0000BF1E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF24 6400                       		bcc.s	Obj31_Display
0000BF26 2448                       		movea.l	a0,a2
0000BF28 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF2C 4EB9 0000 0000             		jsr	KillSonic
0000BF32 204A                       		movea.l	a2,a0
0000BF34 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000BF3A 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000BF40                            
0000BF40                            Obj31_Display:
0000BF40 6100 0000                  		bsr.w	DisplaySprite
0000BF44 6000 0000                  		bra.w	Obj31_ChkDel
0000BF48                            ; ===========================================================================
0000BF48                            
0000BF48                            loc_B7E2:				; XREF: Obj31_Index
0000BF48 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF4E 08E8 0004 0001             		bset	#4,1(a0)
0000BF54 2268 003C                  		movea.l	$3C(a0),a1
0000BF58 1029 0032                  		move.b	$32(a1),d0
0000BF5C EA08                       		lsr.b	#5,d0
0000BF5E 5600                       		addq.b	#3,d0
0000BF60 1140 001A                  		move.b	d0,$1A(a0)
0000BF64                            
0000BF64                            loc_B7FE:				; XREF: Obj31_Index
0000BF64 2268 003C                  		movea.l	$3C(a0),a1
0000BF68 7000                       		moveq	#0,d0
0000BF6A 1029 0032                  		move.b	$32(a1),d0
0000BF6E D068 0030                  		add.w	$30(a0),d0
0000BF72 3140 000C                  		move.w	d0,$C(a0)
0000BF76                            
0000BF76                            Obj31_Display2:				; XREF: Obj31_Index
0000BF76 6100 0000                  		bsr.w	DisplaySprite
0000BF7A                            
0000BF7A                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF7A 3028 0008                  		move.w	8(a0),d0
0000BF7E 0240 FF80                  		andi.w	#$FF80,d0
0000BF82 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF86 0441 0080                  		subi.w	#$80,d1
0000BF8A 0241 FF80                  		andi.w	#$FF80,d1
0000BF8E 9041                       		sub.w	d1,d0
0000BF90 0C40 0280                  		cmpi.w	#$280,d0
0000BF94 6200 0000                  		bhi.w	DeleteObject
0000BF98 4E75                       		rts	
0000BF9A                            ; ===========================================================================
0000BF9A                            
0000BF9A                            Obj31_Types:				; XREF: loc_B798
0000BF9A 1028 0028                  		move.b	$28(a0),d0
0000BF9E 0240 000F                  		andi.w	#$F,d0
0000BFA2 D040                       		add.w	d0,d0
0000BFA4 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BFA8 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BFAC                            ; ===========================================================================
0000BFAC 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BFAE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFB4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB6 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFB8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFBA                            ; ===========================================================================
0000BFBA                            
0000BFBA                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFBA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFBE 7000                       		moveq	#0,d0
0000BFC0 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFC4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFC8 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFCA 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFCE 6A00                       		bpl.s	loc_B872
0000BFD0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFD6 6700                       		beq.s	loc_B8A0
0000BFD8                            
0000BFD8                            loc_B872:
0000BFD8 4A68 0032                  		tst.w	$32(a0)
0000BFDC 6700                       		beq.s	loc_B8A0
0000BFDE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFE2 0200 000F                  		andi.b	#$F,d0
0000BFE6 6600                       		bne.s	loc_B892
0000BFE8 4A28 0001                  		tst.b	1(a0)
0000BFEC 6A00                       		bpl.s	loc_B892
0000BFEE 303C 00C7                  		move.w	#$C7,d0
0000BFF2 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFF8                            
0000BFF8                            loc_B892:
0000BFF8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFFE 6400                       		bcc.s	Obj31_Restart
0000C000 317C 0000 0032             		move.w	#0,$32(a0)
0000C006                            
0000C006                            loc_B8A0:
0000C006 317C 0000 0012             		move.w	#0,$12(a0)
0000C00C 6000                       		bra.s	Obj31_Restart
0000C00E                            ; ===========================================================================
0000C00E                            
0000C00E                            loc_B8A8:				; XREF: Obj31_Type00
0000C00E 3228 0034                  		move.w	$34(a0),d1
0000C012 B268 0032                  		cmp.w	$32(a0),d1
0000C016 6700                       		beq.s	Obj31_Restart
0000C018 3028 0012                  		move.w	$12(a0),d0
0000C01C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C022 D168 0032                  		add.w	d0,$32(a0)
0000C026 B268 0032                  		cmp.w	$32(a0),d1
0000C02A 6200                       		bhi.s	Obj31_Restart
0000C02C 3141 0032                  		move.w	d1,$32(a0)
0000C030 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C036 4A28 0001                  		tst.b	1(a0)
0000C03A 6A00                       		bpl.s	Obj31_Restart
0000C03C 303C 00BD                  		move.w	#$BD,d0
0000C040 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C046                            
0000C046                            Obj31_Restart:
0000C046 7000                       		moveq	#0,d0
0000C048 1028 0032                  		move.b	$32(a0),d0
0000C04C D068 0030                  		add.w	$30(a0),d0
0000C050 3140 000C                  		move.w	d0,$C(a0)
0000C054 4E75                       		rts	
0000C056                            ; ===========================================================================
0000C056                            
0000C056                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C056 4A68 0036                  		tst.w	$36(a0)
0000C05A 6700                       		beq.s	loc_B938
0000C05C 4A68 0038                  		tst.w	$38(a0)
0000C060 6700                       		beq.s	loc_B902
0000C062 5368 0038                  		subq.w	#1,$38(a0)
0000C066 6000                       		bra.s	loc_B97C
0000C068                            ; ===========================================================================
0000C068                            
0000C068                            loc_B902:
0000C068 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C06C 0200 000F                  		andi.b	#$F,d0
0000C070 6600                       		bne.s	loc_B91C
0000C072 4A28 0001                  		tst.b	1(a0)
0000C076 6A00                       		bpl.s	loc_B91C
0000C078 303C 00C7                  		move.w	#$C7,d0
0000C07C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C082                            
0000C082                            loc_B91C:
0000C082 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C088 6400                       		bcc.s	loc_B97C
0000C08A 317C 0000 0032             		move.w	#0,$32(a0)
0000C090 317C 0000 0012             		move.w	#0,$12(a0)
0000C096 317C 0000 0036             		move.w	#0,$36(a0)
0000C09C 6000                       		bra.s	loc_B97C
0000C09E                            ; ===========================================================================
0000C09E                            
0000C09E                            loc_B938:				; XREF: Obj31_Type01
0000C09E 3228 0034                  		move.w	$34(a0),d1
0000C0A2 B268 0032                  		cmp.w	$32(a0),d1
0000C0A6 6700                       		beq.s	loc_B97C
0000C0A8 3028 0012                  		move.w	$12(a0),d0
0000C0AC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C0B2 D168 0032                  		add.w	d0,$32(a0)
0000C0B6 B268 0032                  		cmp.w	$32(a0),d1
0000C0BA 6200                       		bhi.s	loc_B97C
0000C0BC 3141 0032                  		move.w	d1,$32(a0)
0000C0C0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0C6 317C 0001 0036             		move.w	#1,$36(a0)
0000C0CC 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0D2 4A28 0001                  		tst.b	1(a0)
0000C0D6 6A00                       		bpl.s	loc_B97C
0000C0D8 303C 00BD                  		move.w	#$BD,d0
0000C0DC 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0E2                            
0000C0E2                            loc_B97C:
0000C0E2 6000 FF62                  		bra.w	Obj31_Restart
0000C0E6                            ; ===========================================================================
0000C0E6                            
0000C0E6                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0E6 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0EA 9068 0008                  		sub.w	8(a0),d0
0000C0EE 6400                       		bcc.s	loc_B98C
0000C0F0 4440                       		neg.w	d0
0000C0F2                            
0000C0F2                            loc_B98C:
0000C0F2 0C40 0090                  		cmpi.w	#$90,d0
0000C0F6 6400                       		bcc.s	loc_B996
0000C0F8 5228 0028                  		addq.b	#1,$28(a0)
0000C0FC                            
0000C0FC                            loc_B996:
0000C0FC 6000 FF48                  		bra.w	Obj31_Restart
0000C100                            ; ===========================================================================
0000C100                            ; ---------------------------------------------------------------------------
0000C100                            ; Object 45 - spiked metal block from beta version (MZ)
0000C100                            ; ---------------------------------------------------------------------------
0000C100                            
0000C100                            Obj45:					; XREF: Obj_Index
0000C100 7000                       		moveq	#0,d0
0000C102 1028 0024                  		move.b	$24(a0),d0
0000C106 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C10A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C10E                            ; ===========================================================================
0000C10E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C110 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C112 0000                       		dc.w loc_BA8E-Obj45_Index
0000C114 0000                       		dc.w Obj45_Display-Obj45_Index
0000C116 0000                       		dc.w loc_BA7A-Obj45_Index
0000C118                            
0000C118 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C11B 04E4 01                    		dc.b	4, $E4,	  1
0000C11E 0834 03                    		dc.b	8, $34,	  3
0000C121 0628 02                    		dc.b	6, $28,	  2
0000C124                            
0000C124 3800                       word_B9BE:	dc.w $3800
0000C126 A000                       		dc.w -$6000
0000C128 5000                       		dc.w $5000
0000C12A                            ; ===========================================================================
0000C12A                            
0000C12A                            Obj45_Main:				; XREF: Obj45_Index
0000C12A 7000                       		moveq	#0,d0
0000C12C 1028 0028                  		move.b	$28(a0),d0
0000C130 D040                       		add.w	d0,d0
0000C132 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C136 45F9 0000 C118             		lea	(Obj45_Var).l,a2
0000C13C 2248                       		movea.l	a0,a1
0000C13E 7203                       		moveq	#3,d1
0000C140 6000                       		bra.s	Obj45_Load
0000C142                            ; ===========================================================================
0000C142                            
0000C142                            Obj45_Loop:
0000C142 6100 0000                  		bsr.w	SingleObjLoad2
0000C146 6600                       		bne.s	loc_BA52
0000C148                            
0000C148                            Obj45_Load:				; XREF: Obj45_Main
0000C148 135A 0024                  		move.b	(a2)+,$24(a1)
0000C14C 12BC 0045                  		move.b	#$45,0(a1)
0000C150 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C156 101A                       		move.b	(a2)+,d0
0000C158 4880                       		ext.w	d0
0000C15A D068 0008                  		add.w	8(a0),d0
0000C15E 3340 0008                  		move.w	d0,8(a1)
0000C162 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C16A 337C 0300 0002             		move.w	#$300,2(a1)
0000C170 137C 0004 0001             		move.b	#4,1(a1)
0000C176 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C17C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C182 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C188 137C 0020 0019             		move.b	#$20,$19(a1)
0000C18E 3342 0034                  		move.w	d2,$34(a1)
0000C192 137C 0004 0018             		move.b	#4,$18(a1)
0000C198 0C12 0001                  		cmpi.b	#1,(a2)
0000C19C 6600                       		bne.s	loc_BA40
0000C19E 137C 0091 0020             		move.b	#$91,$20(a1)
0000C1A4                            
0000C1A4                            loc_BA40:
0000C1A4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C1A8 2348 003C                  		move.l	a0,$3C(a1)
0000C1AC 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C1B0                            
0000C1B0 137C 0003 0018             		move.b	#3,$18(a1)
0000C1B6                            
0000C1B6                            loc_BA52:
0000C1B6 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1BC                            
0000C1BC                            Obj45_Solid:				; XREF: Obj45_Index
0000C1BC 3F28 0008                  		move.w	8(a0),-(sp)
0000C1C0 6100 0000                  		bsr.w	Obj45_Move
0000C1C4 323C 0017                  		move.w	#$17,d1
0000C1C8 343C 0020                  		move.w	#$20,d2
0000C1CC 363C 0020                  		move.w	#$20,d3
0000C1D0 381F                       		move.w	(sp)+,d4
0000C1D2 6100 0000                  		bsr.w	SolidObject
0000C1D6 6100 0000                  		bsr.w	DisplaySprite
0000C1DA 6000 0000                  		bra.w	Obj45_ChkDel
0000C1DE                            ; ===========================================================================
0000C1DE                            
0000C1DE                            loc_BA7A:				; XREF: Obj45_Index
0000C1DE 2268 003C                  		movea.l	$3C(a0),a1
0000C1E2 1029 0032                  		move.b	$32(a1),d0
0000C1E6 0600 0010                  		addi.b	#$10,d0
0000C1EA EA08                       		lsr.b	#5,d0
0000C1EC 5600                       		addq.b	#3,d0
0000C1EE 1140 001A                  		move.b	d0,$1A(a0)
0000C1F2                            
0000C1F2                            loc_BA8E:				; XREF: Obj45_Index
0000C1F2 2268 003C                  		movea.l	$3C(a0),a1
0000C1F6 7000                       		moveq	#0,d0
0000C1F8 1029 0032                  		move.b	$32(a1),d0
0000C1FC 4440                       		neg.w	d0
0000C1FE D068 0030                  		add.w	$30(a0),d0
0000C202 3140 0008                  		move.w	d0,8(a0)
0000C206                            
0000C206                            Obj45_Display:				; XREF: Obj45_Index
0000C206 6100 0000                  		bsr.w	DisplaySprite
0000C20A                            
0000C20A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C20A 3028 003A                  		move.w	$3A(a0),d0
0000C20E 0240 FF80                  		andi.w	#$FF80,d0
0000C212 3238 F700                  		move.w	($FFFFF700).w,d1
0000C216 0441 0080                  		subi.w	#$80,d1
0000C21A 0241 FF80                  		andi.w	#$FF80,d1
0000C21E 9041                       		sub.w	d1,d0
0000C220 0C40 0280                  		cmpi.w	#$280,d0
0000C224 6200 0000                  		bhi.w	DeleteObject
0000C228 4E75                       		rts	
0000C22A                            
0000C22A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C22A                            
0000C22A                            
0000C22A                            Obj45_Move:				; XREF: Obj45_Solid
0000C22A 7000                       		moveq	#0,d0
0000C22C 1028 0028                  		move.b	$28(a0),d0
0000C230 D040                       		add.w	d0,d0
0000C232 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C236 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C23A                            ; End of function Obj45_Move
0000C23A                            
0000C23A                            ; ===========================================================================
0000C23A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C23C 0000                       		dc.w loc_BADA-off_BAD6
0000C23E                            ; ===========================================================================
0000C23E                            
0000C23E                            loc_BADA:				; XREF: off_BAD6
0000C23E 4A68 0036                  		tst.w	$36(a0)
0000C242 6700                       		beq.s	loc_BB08
0000C244 4A68 0038                  		tst.w	$38(a0)
0000C248 6700                       		beq.s	loc_BAEC
0000C24A 5368 0038                  		subq.w	#1,$38(a0)
0000C24E 6000                       		bra.s	loc_BB3C
0000C250                            ; ===========================================================================
0000C250                            
0000C250                            loc_BAEC:
0000C250 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C256 6400                       		bcc.s	loc_BB3C
0000C258 317C 0000 0032             		move.w	#0,$32(a0)
0000C25E 317C 0000 0010             		move.w	#0,$10(a0)
0000C264 317C 0000 0036             		move.w	#0,$36(a0)
0000C26A 6000                       		bra.s	loc_BB3C
0000C26C                            ; ===========================================================================
0000C26C                            
0000C26C                            loc_BB08:				; XREF: loc_BADA
0000C26C 3228 0034                  		move.w	$34(a0),d1
0000C270 B268 0032                  		cmp.w	$32(a0),d1
0000C274 6700                       		beq.s	loc_BB3C
0000C276 3028 0010                  		move.w	$10(a0),d0
0000C27A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C280 D168 0032                  		add.w	d0,$32(a0)
0000C284 B268 0032                  		cmp.w	$32(a0),d1
0000C288 6200                       		bhi.s	loc_BB3C
0000C28A 3141 0032                  		move.w	d1,$32(a0)
0000C28E 317C 0000 0010             		move.w	#0,$10(a0)
0000C294 317C 0001 0036             		move.w	#1,$36(a0)
0000C29A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C2A0                            
0000C2A0                            loc_BB3C:
0000C2A0 7000                       		moveq	#0,d0
0000C2A2 1028 0032                  		move.b	$32(a0),d0
0000C2A6 4440                       		neg.w	d0
0000C2A8 D068 0030                  		add.w	$30(a0),d0
0000C2AC 3140 0008                  		move.w	d0,8(a0)
0000C2B0 4E75                       		rts	
0000C2B2                            ; ===========================================================================
0000C2B2                            ; ---------------------------------------------------------------------------
0000C2B2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2B2                            ; ---------------------------------------------------------------------------
0000C2B2                            Map_obj31:
0000C2B2                            	include "_maps\obj31.asm"
0000C2B2                            ; ---------------------------------------------------------------------------
0000C2B2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2B2                            ; ---------------------------------------------------------------------------
0000C2B2 0000                       		dc.w byte_BB64-Map_obj31
0000C2B4 0000                       		dc.w byte_BB7E-Map_obj31
0000C2B6 0000                       		dc.w byte_BB98-Map_obj31
0000C2B8 0000                       		dc.w byte_BB9E-Map_obj31
0000C2BA 0000                       		dc.w byte_BBA9-Map_obj31
0000C2BC 0000                       		dc.w byte_BBBE-Map_obj31
0000C2BE 0000                       		dc.w byte_BBDD-Map_obj31
0000C2C0 0000                       		dc.w byte_BC06-Map_obj31
0000C2C2 0000                       		dc.w byte_BC06-Map_obj31
0000C2C4 0000                       		dc.w byte_BC39-Map_obj31
0000C2C6 0000                       		dc.w byte_BC53-Map_obj31
0000C2C8 05                         byte_BB64:	dc.b 5
0000C2C9 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2CE F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2D3 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2D8 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2DD F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2E2 05                         byte_BB7E:	dc.b 5
0000C2E3 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2E8 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2ED F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2F2 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2F7 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2FC 01                         byte_BB98:	dc.b 1
0000C2FD DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C302 02                         byte_BB9E:	dc.b 2
0000C303 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C308 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C30D 04                         byte_BBA9:	dc.b 4
0000C30E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C313 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C318 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C31D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C322 06                         byte_BBBE:	dc.b 6
0000C323 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C328 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C32D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C332 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C337 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C33C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C341 08                         byte_BBDD:	dc.b 8
0000C342 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C347 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C34C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C351 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C356 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C35B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C360 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C365 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C36A 0A                         byte_BC06:	dc.b $A
0000C36B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C370 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C375 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C37A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C37F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C384 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C389 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C38E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C393 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C398 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C39D 05                         byte_BC39:	dc.b 5
0000C39E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C3A3 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C3A8 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C3AD F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C3B2 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3B7 01                         byte_BC53:	dc.b 1
0000C3B8 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3BE 00                         		even
0000C3BE 00                         		even
0000C3BE                            
0000C3BE                            ; ---------------------------------------------------------------------------
0000C3BE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3BE                            ; ---------------------------------------------------------------------------
0000C3BE                            Map_obj45:
0000C3BE                            	include "_maps\obj45.asm"
0000C3BE                            ; ---------------------------------------------------------------------------
0000C3BE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3BE                            ; ---------------------------------------------------------------------------
0000C3BE 0000                       		dc.w byte_BC6C-Map_obj45
0000C3C0 0000                       		dc.w byte_BC7C-Map_obj45
0000C3C2 0000                       		dc.w byte_BC8C-Map_obj45
0000C3C4 0000                       		dc.w byte_BC92-Map_obj45
0000C3C6 0000                       		dc.w byte_BC9D-Map_obj45
0000C3C8 0000                       		dc.w byte_BCB2-Map_obj45
0000C3CA 0000                       		dc.w byte_BCD1-Map_obj45
0000C3CC 0000                       		dc.w byte_BCFA-Map_obj45
0000C3CE 0000                       		dc.w byte_BCFA-Map_obj45
0000C3D0 03                         byte_BC6C:	dc.b 3
0000C3D1 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3D6 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3DB F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3E0 03                         byte_BC7C:	dc.b 3
0000C3E1 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3E6 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3EB 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3F0 01                         byte_BC8C:	dc.b 1
0000C3F1 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3F6 02                         byte_BC92:	dc.b 2
0000C3F7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3FC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C401 04                         byte_BC9D:	dc.b 4
0000C402 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C407 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C40C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C411 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C416 06                         byte_BCB2:	dc.b 6
0000C417 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C41C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C421 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C426 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C42B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C430 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C435 08                         byte_BCD1:	dc.b 8
0000C436 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C43B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C440 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C445 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C44A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C44F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C454 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C459 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C45E 08                         byte_BCFA:	dc.b 8
0000C45F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C464 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C469 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C46E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C473 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C478 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C47D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C482 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C487 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C48C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C492 00                         		even
0000C492 00                         		even
0000C492                            
0000C492                            ; ===========================================================================
0000C492                            ; ---------------------------------------------------------------------------
0000C492                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C492                            ; ---------------------------------------------------------------------------
0000C492                            
0000C492                            Obj32:					; XREF: Obj_Index
0000C492 7000                       		moveq	#0,d0
0000C494 1028 0024                  		move.b	$24(a0),d0
0000C498 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C49C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C4A0                            ; ===========================================================================
0000C4A0 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C4A2 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            Obj32_Main:				; XREF: Obj32_Index
0000C4A4 5428 0024                  		addq.b	#2,$24(a0)
0000C4A8 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C4B0 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4B6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4BC 6700                       		beq.s	loc_BD60
0000C4BE 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4C4                            
0000C4C4                            loc_BD60:
0000C4C4 117C 0004 0001             		move.b	#4,1(a0)
0000C4CA 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4D0 117C 0004 0018             		move.b	#4,$18(a0)
0000C4D6 5668 000C                  		addq.w	#3,$C(a0)
0000C4DA                            
0000C4DA                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4DA 4A28 0001                  		tst.b	1(a0)
0000C4DE 6A00                       		bpl.s	Obj32_Display
0000C4E0 323C 001B                  		move.w	#$1B,d1
0000C4E4 343C 0005                  		move.w	#5,d2
0000C4E8 363C 0005                  		move.w	#5,d3
0000C4EC 3828 0008                  		move.w	8(a0),d4
0000C4F0 6100 0000                  		bsr.w	SolidObject
0000C4F4 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4FA 1028 0028                  		move.b	$28(a0),d0
0000C4FE 0240 000F                  		andi.w	#$F,d0
0000C502 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C506 47F3 0000                  		lea	(a3,d0.w),a3
0000C50A 7600                       		moveq	#0,d3
0000C50C 0828 0006 0028             		btst	#6,$28(a0)
0000C512 6700                       		beq.s	loc_BDB2
0000C514 7607                       		moveq	#7,d3
0000C516                            
0000C516                            loc_BDB2:
0000C516 4A28 0028                  		tst.b	$28(a0)
0000C51A 6A00                       		bpl.s	loc_BDBE
0000C51C 6100 0000                  		bsr.w	Obj32_MZBlock
0000C520 6600                       		bne.s	loc_BDC8
0000C522                            
0000C522                            loc_BDBE:
0000C522 4A28 0025                  		tst.b	$25(a0)
0000C526 6600                       		bne.s	loc_BDC8
0000C528 0793                       		bclr	d3,(a3)
0000C52A 6000                       		bra.s	loc_BDDE
0000C52C                            ; ===========================================================================
0000C52C                            
0000C52C                            loc_BDC8:
0000C52C 4A13                       		tst.b	(a3)
0000C52E 6600                       		bne.s	loc_BDD6
0000C530 303C 00CD                  		move.w	#$CD,d0
0000C534 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play switch sound
0000C53A                            
0000C53A                            loc_BDD6:
0000C53A 07D3                       		bset	d3,(a3)
0000C53C 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C542                            
0000C542                            loc_BDDE:
0000C542 0828 0005 0028             		btst	#5,$28(a0)
0000C548 6700                       		beq.s	Obj32_Display
0000C54A 5328 001E                  		subq.b	#1,$1E(a0)
0000C54E 6A00                       		bpl.s	Obj32_Display
0000C550 117C 0007 001E             		move.b	#7,$1E(a0)
0000C556 0868 0001 001A             		bchg	#1,$1A(a0)
0000C55C                            
0000C55C                            Obj32_Display:
0000C55C 6100 0000                  		bsr.w	DisplaySprite
0000C560 3028 0008                  		move.w	8(a0),d0
0000C564 0240 FF80                  		andi.w	#$FF80,d0
0000C568 3238 F700                  		move.w	($FFFFF700).w,d1
0000C56C 0441 0080                  		subi.w	#$80,d1
0000C570 0241 FF80                  		andi.w	#$FF80,d1
0000C574 9041                       		sub.w	d1,d0
0000C576 0C40 0280                  		cmpi.w	#$280,d0
0000C57A 6200 0000                  		bhi.w	Obj32_Delete
0000C57E 4E75                       		rts	
0000C580                            ; ===========================================================================
0000C580                            
0000C580                            Obj32_Delete:
0000C580 6100 0000                  		bsr.w	DeleteObject
0000C584 4E75                       		rts	
0000C586                            
0000C586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C586                            
0000C586                            
0000C586                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C586 3F03                       		move.w	d3,-(sp)
0000C588 3428 0008                  		move.w	8(a0),d2
0000C58C 3628 000C                  		move.w	$C(a0),d3
0000C590 0442 0010                  		subi.w	#$10,d2
0000C594 5143                       		subq.w	#8,d3
0000C596 383C 0020                  		move.w	#$20,d4
0000C59A 3A3C 0010                  		move.w	#$10,d5
0000C59E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C5A2 3C3C 005F                  		move.w	#$5F,d6
0000C5A6                            
0000C5A6                            Obj32_MZLoop:
0000C5A6 4A29 0001                  		tst.b	1(a1)
0000C5AA 6A00                       		bpl.s	loc_BE4E
0000C5AC 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C5B0 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C5B2                            
0000C5B2                            loc_BE4E:
0000C5B2 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5B6 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5BA                            
0000C5BA 361F                       		move.w	(sp)+,d3
0000C5BC 7000                       		moveq	#0,d0
0000C5BE                            
0000C5BE                            locret_BE5A:
0000C5BE 4E75                       		rts	
0000C5C0                            ; ===========================================================================
0000C5C0 1010                       Obj32_MZData:	dc.b $10, $10
0000C5C2                            ; ===========================================================================
0000C5C2                            
0000C5C2                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5C2 7001                       		moveq	#1,d0
0000C5C4 0240 003F                  		andi.w	#$3F,d0
0000C5C8 D040                       		add.w	d0,d0
0000C5CA 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5CE 121A                       		move.b	(a2)+,d1
0000C5D0 4881                       		ext.w	d1
0000C5D2 3029 0008                  		move.w	8(a1),d0
0000C5D6 9041                       		sub.w	d1,d0
0000C5D8 9042                       		sub.w	d2,d0
0000C5DA 6400                       		bcc.s	loc_BE80
0000C5DC D241                       		add.w	d1,d1
0000C5DE D041                       		add.w	d1,d0
0000C5E0 6500                       		bcs.s	loc_BE84
0000C5E2 60CE                       		bra.s	loc_BE4E
0000C5E4                            ; ===========================================================================
0000C5E4                            
0000C5E4                            loc_BE80:
0000C5E4 B044                       		cmp.w	d4,d0
0000C5E6 62CA                       		bhi.s	loc_BE4E
0000C5E8                            
0000C5E8                            loc_BE84:
0000C5E8 121A                       		move.b	(a2)+,d1
0000C5EA 4881                       		ext.w	d1
0000C5EC 3029 000C                  		move.w	$C(a1),d0
0000C5F0 9041                       		sub.w	d1,d0
0000C5F2 9043                       		sub.w	d3,d0
0000C5F4 6400                       		bcc.s	loc_BE9A
0000C5F6 D241                       		add.w	d1,d1
0000C5F8 D041                       		add.w	d1,d0
0000C5FA 6500                       		bcs.s	loc_BE9E
0000C5FC 60B4                       		bra.s	loc_BE4E
0000C5FE                            ; ===========================================================================
0000C5FE                            
0000C5FE                            loc_BE9A:
0000C5FE B045                       		cmp.w	d5,d0
0000C600 62B0                       		bhi.s	loc_BE4E
0000C602                            
0000C602                            loc_BE9E:
0000C602 361F                       		move.w	(sp)+,d3
0000C604 7001                       		moveq	#1,d0
0000C606 4E75                       		rts	
0000C608                            ; End of function Obj32_MZBlock
0000C608                            
0000C608                            ; ===========================================================================
0000C608                            ; ---------------------------------------------------------------------------
0000C608                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C608                            ; ---------------------------------------------------------------------------
0000C608                            Map_obj32:
0000C608                            	include "_maps\obj32.asm"
0000C608                            ; ---------------------------------------------------------------------------
0000C608                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C608                            ; ---------------------------------------------------------------------------
0000C608 0000                       		dc.w byte_BEAC-Map_obj32
0000C60A 0000                       		dc.w byte_BEB7-Map_obj32
0000C60C 0000                       		dc.w byte_BEC2-Map_obj32
0000C60E 0000                       		dc.w byte_BEB7-Map_obj32
0000C610 02                         byte_BEAC:	dc.b 2
0000C611 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C616 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C61B 02                         byte_BEB7:	dc.b 2
0000C61C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C621 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C626 02                         byte_BEC2:	dc.b 2
0000C627 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C62C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C631 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C636                            		even
0000C636                            		even
0000C636                            
0000C636                            ; ===========================================================================
0000C636                            ; ---------------------------------------------------------------------------
0000C636                            ; Object 33 - pushable blocks (MZ, LZ)
0000C636                            ; ---------------------------------------------------------------------------
0000C636                            
0000C636                            Obj33:					; XREF: Obj_Index
0000C636 7000                       		moveq	#0,d0
0000C638 1028 0024                  		move.b	$24(a0),d0
0000C63C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C640 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C644                            ; ===========================================================================
0000C644 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C646 0000                       		dc.w loc_BF6E-Obj33_Index
0000C648 0000                       		dc.w loc_C02C-Obj33_Index
0000C64A                            
0000C64A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C64C 4001                       		dc.b $40, 1
0000C64E                            ; ===========================================================================
0000C64E                            
0000C64E                            Obj33_Main:				; XREF: Obj33_Index
0000C64E 5428 0024                  		addq.b	#2,$24(a0)
0000C652 117C 000F 0016             		move.b	#$F,$16(a0)
0000C658 117C 000F 0017             		move.b	#$F,$17(a0)
0000C65E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C666 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C66C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C672 6600                       		bne.s	loc_BF16
0000C674 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C67A                            
0000C67A                            loc_BF16:
0000C67A 117C 0004 0001             		move.b	#4,1(a0)
0000C680 117C 0003 0018             		move.b	#3,$18(a0)
0000C686 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C68C 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C692 7000                       		moveq	#0,d0
0000C694 1028 0028                  		move.b	$28(a0),d0
0000C698 D040                       		add.w	d0,d0
0000C69A 0240 000E                  		andi.w	#$E,d0
0000C69E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C6A2 115A 0019                  		move.b	(a2)+,$19(a0)
0000C6A6 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C6AA 4A28 0028                  		tst.b	$28(a0)
0000C6AE 6700                       		beq.s	Obj33_ChkGone
0000C6B0 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6B6                            
0000C6B6                            Obj33_ChkGone:
0000C6B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6BA 7000                       		moveq	#0,d0
0000C6BC 1028 0023                  		move.b	$23(a0),d0
0000C6C0 6700                       		beq.s	loc_BF6E
0000C6C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6C8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6CE 6600 0000                  		bne.w	DeleteObject
0000C6D2                            
0000C6D2                            loc_BF6E:				; XREF: Obj33_Index
0000C6D2 4A28 0032                  		tst.b	$32(a0)
0000C6D6 6600 0000                  		bne.w	loc_C046
0000C6DA 7200                       		moveq	#0,d1
0000C6DC 1228 0019                  		move.b	$19(a0),d1
0000C6E0 0641 000B                  		addi.w	#$B,d1
0000C6E4 343C 0010                  		move.w	#$10,d2
0000C6E8 363C 0011                  		move.w	#$11,d3
0000C6EC 3828 0008                  		move.w	8(a0),d4
0000C6F0 6100 0000                  		bsr.w	loc_C186
0000C6F4 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6FA 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6FC 08A8 0007 0028             		bclr	#7,$28(a0)
0000C702 3028 0008                  		move.w	8(a0),d0
0000C706 0C40 0A20                  		cmpi.w	#$A20,d0
0000C70A 6500                       		bcs.s	loc_BFC6
0000C70C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C710 6400                       		bcc.s	loc_BFC6
0000C712 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C716 0440 001C                  		subi.w	#$1C,d0
0000C71A 3140 000C                  		move.w	d0,$C(a0)
0000C71E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C724 08E8 0007 0028             		bset	#7,$28(a0)
0000C72A                            
0000C72A                            loc_BFC6:
0000C72A 3028 0008                  		move.w	8(a0),d0
0000C72E 0240 FF80                  		andi.w	#$FF80,d0
0000C732 3238 F700                  		move.w	($FFFFF700).w,d1
0000C736 0441 0080                  		subi.w	#$80,d1
0000C73A 0241 FF80                  		andi.w	#$FF80,d1
0000C73E 9041                       		sub.w	d1,d0
0000C740 0C40 0280                  		cmpi.w	#$280,d0
0000C744 6200                       		bhi.s	loc_BFE6
0000C746 6000 0000                  		bra.w	DisplaySprite
0000C74A                            ; ===========================================================================
0000C74A                            
0000C74A                            loc_BFE6:
0000C74A 3028 0034                  		move.w	$34(a0),d0
0000C74E 0240 FF80                  		andi.w	#$FF80,d0
0000C752 3238 F700                  		move.w	($FFFFF700).w,d1
0000C756 0441 0080                  		subi.w	#$80,d1
0000C75A 0241 FF80                  		andi.w	#$FF80,d1
0000C75E 9041                       		sub.w	d1,d0
0000C760 0C40 0280                  		cmpi.w	#$280,d0
0000C764 6200                       		bhi.s	loc_C016
0000C766 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C76C 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C772 117C 0004 0024             		move.b	#4,$24(a0)
0000C778 6000                       		bra.s	loc_C02C
0000C77A                            ; ===========================================================================
0000C77A                            
0000C77A                            loc_C016:
0000C77A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C77E 7000                       		moveq	#0,d0
0000C780 1028 0023                  		move.b	$23(a0),d0
0000C784 6700                       		beq.s	loc_C028
0000C786 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C78C                            
0000C78C                            loc_C028:
0000C78C 6000 0000                  		bra.w	DeleteObject
0000C790                            ; ===========================================================================
0000C790                            
0000C790                            loc_C02C:				; XREF: Obj33_Index
0000C790 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C794 6700                       		beq.s	locret_C044
0000C796 117C 0002 0024             		move.b	#2,$24(a0)
0000C79C 4228 0032                  		clr.b	$32(a0)
0000C7A0 4268 0010                  		clr.w	$10(a0)
0000C7A4 4268 0012                  		clr.w	$12(a0)
0000C7A8                            
0000C7A8                            locret_C044:
0000C7A8 4E75                       		rts	
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            loc_C046:				; XREF: loc_BF6E
0000C7AA 3F28 0008                  		move.w	8(a0),-(sp)
0000C7AE 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C7B4 6400                       		bcc.s	loc_C056
0000C7B6 6100 0000                  		bsr.w	SpeedToPos
0000C7BA                            
0000C7BA                            loc_C056:
0000C7BA 0828 0001 0022             		btst	#1,$22(a0)
0000C7C0 6700                       		beq.s	loc_C0A0
0000C7C2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7CE 4A41                       		tst.w	d1
0000C7D0 6A00 0000                  		bpl.w	loc_C09E
0000C7D4 D368 000C                  		add.w	d1,$C(a0)
0000C7D8 4268 0012                  		clr.w	$12(a0)
0000C7DC 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7E2 3011                       		move.w	(a1),d0
0000C7E4 0240 03FF                  		andi.w	#$3FF,d0
0000C7E8 0C40 016A                  		cmpi.w	#$16A,d0
0000C7EC 6500                       		bcs.s	loc_C09E
0000C7EE 3028 0030                  		move.w	$30(a0),d0
0000C7F2 E640                       		asr.w	#3,d0
0000C7F4 3140 0010                  		move.w	d0,$10(a0)
0000C7F8 117C 0001 0032             		move.b	#1,$32(a0)
0000C7FE 4268 000E                  		clr.w	$E(a0)
0000C802                            
0000C802                            loc_C09E:
0000C802 6000                       		bra.s	loc_C0E6
0000C804                            ; ===========================================================================
0000C804                            
0000C804                            loc_C0A0:
0000C804 4A68 0010                  		tst.w	$10(a0)
0000C808 6700 0000                  		beq.w	loc_C0D6
0000C80C 6B00                       		bmi.s	loc_C0BC
0000C80E 7600                       		moveq	#0,d3
0000C810 1628 0019                  		move.b	$19(a0),d3
0000C814 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C81A 4A41                       		tst.w	d1		; has block touched a wall?
0000C81C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C81E 6000                       		bra.s	loc_C0E6
0000C820                            ; ===========================================================================
0000C820                            
0000C820                            loc_C0BC:
0000C820 7600                       		moveq	#0,d3
0000C822 1628 0019                  		move.b	$19(a0),d3
0000C826 4643                       		not.w	d3
0000C828 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C82E 4A41                       		tst.w	d1		; has block touched a wall?
0000C830 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C832 6000                       		bra.s	loc_C0E6
0000C834                            ; ===========================================================================
0000C834                            
0000C834                            Obj33_StopPush:
0000C834 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C838 6000                       		bra.s	loc_C0E6
0000C83A                            ; ===========================================================================
0000C83A                            
0000C83A                            loc_C0D6:
0000C83A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C842 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C848 6400                       		bcc.s	loc_C104
0000C84A                            
0000C84A                            loc_C0E6:
0000C84A 7200                       		moveq	#0,d1
0000C84C 1228 0019                  		move.b	$19(a0),d1
0000C850 0641 000B                  		addi.w	#$B,d1
0000C854 343C 0010                  		move.w	#$10,d2
0000C858 363C 0011                  		move.w	#$11,d3
0000C85C 381F                       		move.w	(sp)+,d4
0000C85E 6100 0000                  		bsr.w	loc_C186
0000C862 6100                       		bsr.s	Obj33_ChkLava
0000C864 6000 FEC4                  		bra.w	loc_BFC6
0000C868                            ; ===========================================================================
0000C868                            
0000C868                            loc_C104:
0000C868 381F                       		move.w	(sp)+,d4
0000C86A 43F8 D000                  		lea	($FFFFD000).w,a1
0000C86E 08A9 0003 0022             		bclr	#3,$22(a1)
0000C874 08A8 0003 0022             		bclr	#3,$22(a0)
0000C87A 6000 FECE                  		bra.w	loc_BFE6
0000C87E                            ; ===========================================================================
0000C87E                            
0000C87E                            Obj33_ChkLava:
0000C87E 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C884 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C886 343C FFE0                  		move.w	#-$20,d2
0000C88A 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C890 6700                       		beq.s	Obj33_LoadLava
0000C892 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C898 6700                       		beq.s	Obj33_LoadLava
0000C89A 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C8A0 6700                       		beq.s	Obj33_LoadLava
0000C8A2 4E75                       		rts	
0000C8A4                            ; ===========================================================================
0000C8A4                            
0000C8A4                            Obj33_ChkLava2:
0000C8A4 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C8AA 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C8AC 343C 0020                  		move.w	#$20,d2
0000C8B0 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8B6 6700                       		beq.s	Obj33_LoadLava
0000C8B8 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8BE 6700                       		beq.s	Obj33_LoadLava
0000C8C0                            
0000C8C0                            Obj33_NoLava:
0000C8C0 4E75                       		rts	
0000C8C2                            ; ===========================================================================
0000C8C2                            
0000C8C2                            Obj33_LoadLava:
0000C8C2 6100 0000                  		bsr.w	SingleObjLoad
0000C8C6 6600                       		bne.s	locret_C184
0000C8C8 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8D2 D569 0008                  		add.w	d2,8(a1)
0000C8D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8DC 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8E2 2348 003C                  		move.l	a0,$3C(a1)
0000C8E6                            
0000C8E6                            locret_C184:
0000C8E6 4E75                       		rts	
0000C8E8                            ; ===========================================================================
0000C8E8                            
0000C8E8                            loc_C186:				; XREF: loc_BF6E
0000C8E8 1028 0025                  		move.b	$25(a0),d0
0000C8EC 6700 0000                  		beq.w	loc_C218
0000C8F0 5500                       		subq.b	#2,d0
0000C8F2 6600                       		bne.s	loc_C1AA
0000C8F4 6100 B3EE                  		bsr.w	ExitPlatform
0000C8F8 0829 0003 0022             		btst	#3,$22(a1)
0000C8FE 6600                       		bne.s	loc_C1A4
0000C900 4228 0025                  		clr.b	$25(a0)
0000C904 4E75                       		rts	
0000C906                            ; ===========================================================================
0000C906                            
0000C906                            loc_C1A4:
0000C906 3404                       		move.w	d4,d2
0000C908 6000 B938                  		bra.w	MvSonicOnPtfm
0000C90C                            ; ===========================================================================
0000C90C                            
0000C90C                            loc_C1AA:
0000C90C 5500                       		subq.b	#2,d0
0000C90E 6600                       		bne.s	loc_C1F2
0000C910 6100 0000                  		bsr.w	SpeedToPos
0000C914 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C91A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C920 4A41                       		tst.w	d1
0000C922 6A00 0000                  		bpl.w	locret_C1F0
0000C926 D368 000C                  		add.w	d1,$C(a0)
0000C92A 4268 0012                  		clr.w	$12(a0)
0000C92E 4228 0025                  		clr.b	$25(a0)
0000C932 3011                       		move.w	(a1),d0
0000C934 0240 03FF                  		andi.w	#$3FF,d0
0000C938 0C40 016A                  		cmpi.w	#$16A,d0
0000C93C 6500                       		bcs.s	locret_C1F0
0000C93E 3028 0030                  		move.w	$30(a0),d0
0000C942 E640                       		asr.w	#3,d0
0000C944 3140 0010                  		move.w	d0,$10(a0)
0000C948 117C 0001 0032             		move.b	#1,$32(a0)
0000C94E 4268 000E                  		clr.w	$E(a0)
0000C952                            
0000C952                            locret_C1F0:
0000C952 4E75                       		rts	
0000C954                            ; ===========================================================================
0000C954                            
0000C954                            loc_C1F2:
0000C954 6100 0000                  		bsr.w	SpeedToPos
0000C958 3028 0008                  		move.w	8(a0),d0
0000C95C 0240 000C                  		andi.w	#$C,d0
0000C960 6600 0000                  		bne.w	locret_C2E4
0000C964 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C96A 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C970 4268 0010                  		clr.w	$10(a0)
0000C974 5528 0025                  		subq.b	#2,$25(a0)
0000C978 4E75                       		rts	
0000C97A                            ; ===========================================================================
0000C97A                            
0000C97A                            loc_C218:
0000C97A 6100 0000                  		bsr.w	loc_FAC8
0000C97E 4A44                       		tst.w	d4
0000C980 6700 0000                  		beq.w	locret_C2E4
0000C984 6B00 0000                  		bmi.w	locret_C2E4
0000C988 4A28 0032                  		tst.b	$32(a0)
0000C98C 6700                       		beq.s	loc_C230
0000C98E 6000 0000                  		bra.w	locret_C2E4
0000C992                            ; ===========================================================================
0000C992                            
0000C992                            loc_C230:
0000C992 4A40                       		tst.w	d0
0000C994 6700 0000                  		beq.w	locret_C2E4
0000C998 6B00                       		bmi.s	loc_C268
0000C99A 0829 0000 0022             		btst	#0,$22(a1)
0000C9A0 6600 0000                  		bne.w	locret_C2E4
0000C9A4 3F00                       		move.w	d0,-(sp)
0000C9A6 7600                       		moveq	#0,d3
0000C9A8 1628 0019                  		move.b	$19(a0),d3
0000C9AC 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9B2 301F                       		move.w	(sp)+,d0
0000C9B4 4A41                       		tst.w	d1
0000C9B6 6B00 0000                  		bmi.w	locret_C2E4
0000C9BA 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9C2 7001                       		moveq	#1,d0
0000C9C4 323C 0040                  		move.w	#$40,d1
0000C9C8 6000                       		bra.s	loc_C294
0000C9CA                            ; ===========================================================================
0000C9CA                            
0000C9CA                            loc_C268:
0000C9CA 0829 0000 0022             		btst	#0,$22(a1)
0000C9D0 6700                       		beq.s	locret_C2E4
0000C9D2 3F00                       		move.w	d0,-(sp)
0000C9D4 7600                       		moveq	#0,d3
0000C9D6 1628 0019                  		move.b	$19(a0),d3
0000C9DA 4643                       		not.w	d3
0000C9DC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9E2 301F                       		move.w	(sp)+,d0
0000C9E4 4A41                       		tst.w	d1
0000C9E6 6B00                       		bmi.s	locret_C2E4
0000C9E8 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9F0 70FF                       		moveq	#-1,d0
0000C9F2 323C FFC0                  		move.w	#-$40,d1
0000C9F6                            
0000C9F6                            loc_C294:
0000C9F6 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9FA D169 0008                  		add.w	d0,8(a1)
0000C9FE 3341 0014                  		move.w	d1,$14(a1)
0000CA02 337C 0000 0010             		move.w	#0,$10(a1)
0000CA08 3F00                       		move.w	d0,-(sp)
0000CA0A 303C 00A7                  		move.w	#$A7,d0
0000CA0E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA14 301F                       		move.w	(sp)+,d0
0000CA16 4A28 0028                  		tst.b	$28(a0)
0000CA1A 6B00                       		bmi.s	locret_C2E4
0000CA1C 3F00                       		move.w	d0,-(sp)
0000CA1E 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA24 301F                       		move.w	(sp)+,d0
0000CA26 0C41 0004                  		cmpi.w	#4,d1
0000CA2A 6F00                       		ble.s	loc_C2E0
0000CA2C 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA32 4A40                       		tst.w	d0
0000CA34 6A00                       		bpl.s	loc_C2D8
0000CA36 4468 0010                  		neg.w	$10(a0)
0000CA3A                            
0000CA3A                            loc_C2D8:
0000CA3A 117C 0006 0025             		move.b	#6,$25(a0)
0000CA40 6000                       		bra.s	locret_C2E4
0000CA42                            ; ===========================================================================
0000CA42                            
0000CA42                            loc_C2E0:
0000CA42 D368 000C                  		add.w	d1,$C(a0)
0000CA46                            
0000CA46                            locret_C2E4:
0000CA46 4E75                       		rts	
0000CA48                            ; ===========================================================================
0000CA48                            ; ---------------------------------------------------------------------------
0000CA48                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA48                            ; ---------------------------------------------------------------------------
0000CA48                            Map_obj33:
0000CA48                            	include "_maps\obj33.asm"
0000CA48                            ; ---------------------------------------------------------------------------
0000CA48                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA48                            ; ---------------------------------------------------------------------------
0000CA48 0000                       		dc.w byte_C2EA-Map_obj33
0000CA4A 0000                       		dc.w byte_C2F0-Map_obj33
0000CA4C 01                         byte_C2EA:	dc.b 1
0000CA4D F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA52 04                         byte_C2F0:	dc.b 4
0000CA53 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA58 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA5D F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA62 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA68 00                         		even
0000CA68 00                         		even
0000CA68                            
0000CA68                            ; ===========================================================================
0000CA68                            ; ---------------------------------------------------------------------------
0000CA68                            ; Object 34 - zone title cards
0000CA68                            ; ---------------------------------------------------------------------------
0000CA68                            
0000CA68                            Obj34:					; XREF: Obj_Index
0000CA68 7000                       		moveq	#0,d0
0000CA6A 1028 0024                  		move.b	$24(a0),d0
0000CA6E 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA72 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA76                            ; ===========================================================================
0000CA76 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA78 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA7A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA7C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA7E                            ; ===========================================================================
0000CA7E                            
0000CA7E                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA7E 2248                       		movea.l	a0,a1
0000CA80 7000                       		moveq	#0,d0
0000CA82 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA86 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA8C 6600                       		bne.s	Obj34_CheckFZ
0000CA8E 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA90                            
0000CA90                            Obj34_CheckFZ:
0000CA90 3400                       		move.w	d0,d2
0000CA92 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA98 6600                       		bne.s	Obj34_LoadConfig
0000CA9A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA9C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA9E                            
0000CA9E                            Obj34_LoadConfig:
0000CA9E 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CAA4 E948                       		lsl.w	#4,d0
0000CAA6 D6C0                       		adda.w	d0,a3
0000CAA8 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CAAE 7203                       		moveq	#3,d1
0000CAB0                            
0000CAB0                            Obj34_Loop:
0000CAB0 12BC 0034                  		move.b	#$34,0(a1)
0000CAB4 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CAB8 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CABC 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CAC0 335A 000A                  		move.w	(a2)+,$A(a1)
0000CAC4 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAC8 101A                       		move.b	(a2)+,d0
0000CACA 6600                       		bne.s	Obj34_ActNumber
0000CACC 1002                       		move.b	d2,d0
0000CACE                            
0000CACE                            Obj34_ActNumber:
0000CACE 0C00 0007                  		cmpi.b	#7,d0
0000CAD2 6600                       		bne.s	Obj34_MakeSprite
0000CAD4 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CAD8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CADE 6600                       		bne.s	Obj34_MakeSprite
0000CAE0 5300                       		subq.b	#1,d0
0000CAE2                            
0000CAE2                            Obj34_MakeSprite:
0000CAE2 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CAE6 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAEE 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAF4 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAFA 137C 0000 0001             		move.b	#0,1(a1)
0000CB00 137C 0000 0018             		move.b	#0,$18(a1)
0000CB06 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CB0C 43E9 0040                  		lea	$40(a1),a1	; next object
0000CB10 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB14                            
0000CB14                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB14 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB16 3028 0030                  		move.w	$30(a0),d0
0000CB1A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB1E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB20 6C00                       		bge.s	Obj34_Move
0000CB22 4441                       		neg.w	d1
0000CB24                            
0000CB24                            Obj34_Move:
0000CB24 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB28                            
0000CB28                            loc_C3C8:
0000CB28 3028 0008                  		move.w	8(a0),d0
0000CB2C 6B00                       		bmi.s	locret_C3D8
0000CB2E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB32 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB34 6000 0000                  		bra.w	DisplaySprite
0000CB38                            ; ===========================================================================
0000CB38                            
0000CB38                            locret_C3D8:
0000CB38 4E75                       		rts	
0000CB3A                            ; ===========================================================================
0000CB3A                            
0000CB3A                            Obj34_Wait:				; XREF: Obj34_Index
0000CB3A 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB3E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB40 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB44 6000 0000                  		bra.w	DisplaySprite
0000CB48                            ; ===========================================================================
0000CB48                            
0000CB48                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB48 4A28 0001                  		tst.b	1(a0)
0000CB4C 6A00                       		bpl.s	Obj34_ChangeArt
0000CB4E 7220                       		moveq	#$20,d1
0000CB50 3028 0032                  		move.w	$32(a0),d0
0000CB54 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB58 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB5A 6C00                       		bge.s	Obj34_Move2
0000CB5C 4441                       		neg.w	d1
0000CB5E                            
0000CB5E                            Obj34_Move2:
0000CB5E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB62 3028 0008                  		move.w	8(a0),d0
0000CB66 6B00                       		bmi.s	locret_C412
0000CB68 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB6C 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB6E 6000 0000                  		bra.w	DisplaySprite
0000CB72                            ; ===========================================================================
0000CB72                            
0000CB72                            locret_C412:
0000CB72 4E75                       		rts	
0000CB74                            ; ===========================================================================
0000CB74                            
0000CB74                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB74 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB7A 6600                       		bne.s	Obj34_Delete
0000CB7C 7002                       		moveq	#2,d0
0000CB7E 4EB9 0000 148A             		jsr	(LoadPLC).l	; load explosion patterns
0000CB84 7000                       		moveq	#0,d0
0000CB86 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB8A 0640 0015                  		addi.w	#$15,d0
0000CB8E 4EB9 0000 148A             		jsr	(LoadPLC).l	; load animal patterns
0000CB94                            
0000CB94                            Obj34_Delete:
0000CB94 6000 0000                  		bra.w	DeleteObject
0000CB98                            ; ===========================================================================
0000CB98 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB9A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB9C 00E4                       		dc.w $E4
0000CB9E 0206                       		dc.b 2,	6
0000CBA0 00EA                       		dc.w $EA
0000CBA2 0207                       		dc.b 2,	7
0000CBA4 00E0                       		dc.w $E0
0000CBA6 020A                       		dc.b 2,	$A
0000CBA8                            ; ---------------------------------------------------------------------------
0000CBA8                            ; Title	card configuration data
0000CBA8                            ; Format:
0000CBA8                            ; 4 bytes per item (YYYY XXXX)
0000CBA8                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CBA8                            ; ---------------------------------------------------------------------------
0000CBA8 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBB8 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBC8 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBD8 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBE8 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBF8 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CC08 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC18                            ; ===========================================================================
0000CC18                            ; ---------------------------------------------------------------------------
0000CC18                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC18                            ; ---------------------------------------------------------------------------
0000CC18                            
0000CC18                            Obj39:					; XREF: Obj_Index
0000CC18 7000                       		moveq	#0,d0
0000CC1A 1028 0024                  		move.b	$24(a0),d0
0000CC1E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC22 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC26                            ; ===========================================================================
0000CC26 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC28 0000                       		dc.w loc_C50C-Obj39_Index
0000CC2A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC2C                            ; ===========================================================================
0000CC2C                            
0000CC2C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC2C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC30 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC32 4E75                       		rts	
0000CC34                            ; ===========================================================================
0000CC34                            
0000CC34                            Obj39_Main:
0000CC34 5428 0024                  		addq.b	#2,$24(a0)
0000CC38 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC3E 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC44 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC46 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC4C                            
0000CC4C                            loc_C4EC:
0000CC4C 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC52 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC5A 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC60 117C 0000 0001             		move.b	#0,1(a0)
0000CC66 117C 0000 0018             		move.b	#0,$18(a0)
0000CC6C                            
0000CC6C                            loc_C50C:				; XREF: Obj39_Index
0000CC6C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC6E 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC74 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC76 6500                       		bcs.s	Obj39_Move
0000CC78 4441                       		neg.w	d1
0000CC7A                            
0000CC7A                            Obj39_Move:
0000CC7A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC7E 6000 0000                  		bra.w	DisplaySprite
0000CC82                            ; ===========================================================================
0000CC82                            
0000CC82                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC82 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC88 5428 0024                  		addq.b	#2,$24(a0)
0000CC8C 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CC92 4A38 FE18                  		tst.b	($FFFFFE18).w
0000CC96 6600                       		bne.s	@nocontinues
0000CC98 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000CC9E                            
0000CC9E                            	@nocontinues:
0000CC9E 4E75                       		rts	
0000CCA0                            ; ===========================================================================
0000CCA0                            
0000CCA0                            Obj39_Wait:				; XREF: Obj39_Index
0000CCA0 1038 F605                  		move.b	($FFFFF605).w,d0
0000CCA4 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CCA8 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CCAA 0828 0000 001A             		btst	#0,$1A(a0)
0000CCB0 6600                       		bne.s	Obj39_Display
0000CCB2 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CCB6 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CCB8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCBC 6000 0000                  		bra.w	DisplaySprite
0000CCC0                            ; ===========================================================================
0000CCC0                            
0000CCC0                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCC0 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCC4 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCC6 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCCC 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCD0 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCD2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCD8 6000                       		bra.s	Obj39_Display
0000CCDA                            ; ===========================================================================
0000CCDA                            
0000CCDA                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCDA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCE0                            
0000CCE0                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCE0 6000 0000                  		bra.w	DisplaySprite
0000CCE4                            ; ===========================================================================
0000CCE4                            ; ---------------------------------------------------------------------------
0000CCE4                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCE4                            ; ---------------------------------------------------------------------------
0000CCE4                            
0000CCE4                            Obj3A:					; XREF: Obj_Index
0000CCE4 7000                       		moveq	#0,d0
0000CCE6 1028 0024                  		move.b	$24(a0),d0
0000CCEA 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCEE 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCF2                            ; ===========================================================================
0000CCF2 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCF4 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCF6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCF8 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CCFA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCFC 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCFE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD00 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CD02 0000                       		dc.w loc_C766-Obj3A_Index
0000CD04                            ; ===========================================================================
0000CD04                            
0000CD04                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CD04 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD08 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CD0A 4E75                       		rts	
0000CD0C                            ; ===========================================================================
0000CD0C                            
0000CD0C                            Obj3A_Main:
0000CD0C 2248                       		movea.l	a0,a1
0000CD0E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CD14 7206                       		moveq	#6,d1
0000CD16                            
0000CD16                            Obj3A_Loop:
0000CD16 12BC 003A                  		move.b	#$3A,0(a1)
0000CD1A 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD1E 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD22 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD26 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD2A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD2E 101A                       		move.b	(a2)+,d0
0000CD30 0C00 0006                  		cmpi.b	#6,d0
0000CD34 6600                       		bne.s	loc_C5CA
0000CD36 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD3A                            
0000CD3A                            loc_C5CA:
0000CD3A 1340 001A                  		move.b	d0,$1A(a1)
0000CD3E 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD46 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD4C 137C 0000 0001             		move.b	#0,1(a1)
0000CD52 43E9 0040                  		lea	$40(a1),a1
0000CD56 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD5A                            
0000CD5A                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD5A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD5C 3028 0030                  		move.w	$30(a0),d0
0000CD60 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD64 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD66 6C00                       		bge.s	Obj3A_Move
0000CD68 4441                       		neg.w	d1
0000CD6A                            
0000CD6A                            Obj3A_Move:
0000CD6A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD6E                            
0000CD6E                            loc_C5FE:				; XREF: loc_C61A
0000CD6E 3028 0008                  		move.w	8(a0),d0
0000CD72 6B00                       		bmi.s	locret_C60E
0000CD74 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD78 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD7A 6000 0000                  		bra.w	DisplaySprite
0000CD7E                            ; ===========================================================================
0000CD7E                            
0000CD7E                            locret_C60E:
0000CD7E 4E75                       		rts	
0000CD80                            ; ===========================================================================
0000CD80                            
0000CD80                            loc_C610:				; XREF: loc_C61A
0000CD80 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD86 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD8A                            ; ===========================================================================
0000CD8A                            
0000CD8A                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD8A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD90 67EE                       		beq.s	loc_C610
0000CD92 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD98 66D4                       		bne.s	loc_C5FE
0000CD9A 5428 0024                  		addq.b	#2,$24(a0)
0000CD9E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDA4                            
0000CDA4                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CDA4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDA8 6600                       		bne.s	Obj3A_Display
0000CDAA 5428 0024                  		addq.b	#2,$24(a0)
0000CDAE                            
0000CDAE                            Obj3A_Display:
0000CDAE 6000 0000                  		bra.w	DisplaySprite
0000CDB2                            ; ===========================================================================
0000CDB2                            
0000CDB2                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CDB2 6100 0000                  		bsr.w	DisplaySprite
0000CDB6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CDBC 7000                       		moveq	#0,d0
0000CDBE 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDC2 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDC4 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDC8 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDCE                            
0000CDCE                            Obj3A_RingBonus:
0000CDCE 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDD2 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDD4 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDD8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDDE                            
0000CDDE                            Obj3A_ChkBonus:
0000CDDE 4A40                       		tst.w	d0		; is there any bonus?
0000CDE0 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDE2 303C 00C5                  		move.w	#$C5,d0
0000CDE6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDEC 5428 0024                  		addq.b	#2,$24(a0)
0000CDF0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDF6 6600                       		bne.s	Obj3A_SetDelay
0000CDF8 5828 0024                  		addq.b	#4,$24(a0)
0000CDFC                            
0000CDFC                            Obj3A_SetDelay:
0000CDFC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE02                            
0000CE02                            locret_C692:
0000CE02 4E75                       		rts	
0000CE04                            ; ===========================================================================
0000CE04                            
0000CE04                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CE04 4EB9 0000 0000             		jsr	AddPoints
0000CE0A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE0E 0200 0003                  		andi.b	#3,d0
0000CE12 66EE                       		bne.s	locret_C692
0000CE14 303C 00CD                  		move.w	#$CD,d0
0000CE18 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE1E                            ; ===========================================================================
0000CE1E                            
0000CE1E                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE1E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE22 0240 0007                  		andi.w	#7,d0
0000CE26 E748                       		lsl.w	#3,d0
0000CE28 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE2C 0241 0003                  		andi.w	#3,d1
0000CE30 D241                       		add.w	d1,d1
0000CE32 D041                       		add.w	d1,d0
0000CE34 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE38 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE3C 4A40                       		tst.w	d0
0000CE3E 6600                       		bne.s	Obj3A_ChkSS
0000CE40 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000CE46 6000                       		bra.s	Obj3A_Display2
0000CE48                            ; ===========================================================================
0000CE48                            
0000CE48                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE48 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE4C 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE50 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE52 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE58 6000                       		bra.s	Obj3A_Display2
0000CE5A                            ; ===========================================================================
0000CE5A                            
0000CE5A                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE5A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE60                            
0000CE60                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE60 6000 0000                  		bra.w	DisplaySprite
0000CE64                            ; ===========================================================================
0000CE64                            ; ---------------------------------------------------------------------------
0000CE64                            ; Level	order array
0000CE64                            ; ---------------------------------------------------------------------------
0000CE64                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE94                            		even
0000CE94                            ; ===========================================================================
0000CE94                            
0000CE94                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE94 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE96 3028 0032                  		move.w	$32(a0),d0
0000CE9A B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE9E 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CEA0 6C00                       		bge.s	Obj3A_Move2
0000CEA2 4441                       		neg.w	d1
0000CEA4                            
0000CEA4                            Obj3A_Move2:
0000CEA4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEA8 3028 0008                  		move.w	8(a0),d0
0000CEAC 6B00                       		bmi.s	locret_C748
0000CEAE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEB2 6400                       		bcc.s	locret_C748	; if yes, branch
0000CEB4 6000 0000                  		bra.w	DisplaySprite
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            locret_C748:
0000CEB8 4E75                       		rts	
0000CEBA                            ; ===========================================================================
0000CEBA                            
0000CEBA                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CEBA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEC0 6600 0000                  		bne.w	DeleteObject
0000CEC4 5428 0024                  		addq.b	#2,$24(a0)
0000CEC8 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CECC 303C 008D                  		move.w	#$8D,d0
0000CED0 4EF9 0000 125C             		jmp	(PlaySound).l	; play FZ music
0000CED6                            ; ===========================================================================
0000CED6                            
0000CED6                            loc_C766:				; XREF: Obj3A_Index
0000CED6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEDA 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CEE0 6700 0000                  		beq.w	DeleteObject
0000CEE4 4E75                       		rts	
0000CEE6                            ; ===========================================================================
0000CEE6 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CEEC 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CEEE FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CEF4 0201                       		dc.b 2,	1
0000CEF6 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CEFC 0206                       		dc.b 2,	6
0000CEFE 0520 0120 00EC             		dc.w $520, $120, $EC
0000CF04 0202                       		dc.b 2,	2
0000CF06 0540 0120 00FC             		dc.w $540, $120, $FC
0000CF0C 0203                       		dc.b 2,	3
0000CF0E 0560 0120 010C             		dc.w $560, $120, $10C
0000CF14 0204                       		dc.b 2,	4
0000CF16 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CF1C 0205                       		dc.b 2,	5
0000CF1E                            ; ===========================================================================
0000CF1E                            ; ---------------------------------------------------------------------------
0000CF1E                            ; Object 7E - special stage results screen
0000CF1E                            ; ---------------------------------------------------------------------------
0000CF1E                            
0000CF1E                            Obj7E:					; XREF: Obj_Index
0000CF1E 7000                       		moveq	#0,d0
0000CF20 1028 0024                  		move.b	$24(a0),d0
0000CF24 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF28 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF2C                            ; ===========================================================================
0000CF2C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF2E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF30 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF32 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF34 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF36 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF38 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF3A 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF3C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF3E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF40 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF42                            ; ===========================================================================
0000CF42                            
0000CF42                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF42 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF46 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF48 4E75                       		rts	
0000CF4A                            ; ===========================================================================
0000CF4A                            
0000CF4A                            Obj7E_Main:
0000CF4A 2248                       		movea.l	a0,a1
0000CF4C 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF52 7203                       		moveq	#3,d1
0000CF54 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF5A 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF5C 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF5E                            
0000CF5E                            Obj7E_Loop:
0000CF5E 12BC 007E                  		move.b	#$7E,0(a1)
0000CF62 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF66 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF6A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF6E 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF72 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF76 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF7E 337C A580 0002             		move.w	#$A580,2(a1)
0000CF84 137C 0000 0001             		move.b	#0,1(a1)
0000CF8A 43E9 0040                  		lea	$40(a1),a1
0000CF8E 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF92                            
0000CF92 7007                       		moveq	#7,d0
0000CF94 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF98 6700                       		beq.s	loc_C842
0000CF9A 7000                       		moveq	#0,d0
0000CF9C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CFA0 6600                       		bne.s	loc_C842	; if not, branch
0000CFA2 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CFA4 317C 0018 0008             		move.w	#$18,8(a0)
0000CFAA 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CFB0                            
0000CFB0                            loc_C842:
0000CFB0 1140 001A                  		move.b	d0,$1A(a0)
0000CFB4                            
0000CFB4                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CFB4 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFB6 3028 0030                  		move.w	$30(a0),d0
0000CFBA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFBE 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFC0 6C00                       		bge.s	Obj7E_Move
0000CFC2 4441                       		neg.w	d1
0000CFC4                            
0000CFC4                            Obj7E_Move:
0000CFC4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFC8                            
0000CFC8                            loc_C85A:				; XREF: loc_C86C
0000CFC8 3028 0008                  		move.w	8(a0),d0
0000CFCC 6B00                       		bmi.s	locret_C86A
0000CFCE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFD2 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFD4 6000 0000                  		bra.w	DisplaySprite
0000CFD8                            ; ===========================================================================
0000CFD8                            
0000CFD8                            locret_C86A:
0000CFD8 4E75                       		rts	
0000CFDA                            ; ===========================================================================
0000CFDA                            
0000CFDA                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFDA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFE0 66E6                       		bne.s	loc_C85A
0000CFE2 5428 0024                  		addq.b	#2,$24(a0)
0000CFE6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFEC 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFF2                            
0000CFF2                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFF2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFF6 6600                       		bne.s	Obj7E_Display
0000CFF8 5428 0024                  		addq.b	#2,$24(a0)
0000CFFC                            
0000CFFC                            Obj7E_Display:
0000CFFC 6000 0000                  		bra.w	DisplaySprite
0000D000                            ; ===========================================================================
0000D000                            
0000D000                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D000 6100 0000                  		bsr.w	DisplaySprite
0000D004 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D00A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D00E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D010 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D016 700A                       		moveq	#10,d0		; add 10 to score
0000D018 4EB9 0000 0000             		jsr	AddPoints
0000D01E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D022 0200 0003                  		andi.b	#3,d0
0000D026 6600                       		bne.s	locret_C8EA
0000D028 303C 00CD                  		move.w	#$CD,d0
0000D02C 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D032                            ; ===========================================================================
0000D032                            
0000D032                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D032 303C 00C5                  		move.w	#$C5,d0
0000D036 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D03C 5428 0024                  		addq.b	#2,$24(a0)
0000D040 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D046 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D04C 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D04E 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D054 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D058                            
0000D058                            locret_C8EA:
0000D058 4E75                       		rts	
0000D05A                            ; ===========================================================================
0000D05A                            
0000D05A                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D05A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D060 6000 0000                  		bra.w	DisplaySprite
0000D064                            ; ===========================================================================
0000D064                            
0000D064                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D064 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D06A 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D070 303C 00BF                  		move.w	#$BF,d0
0000D074 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play continues music
0000D07A 5428 0024                  		addq.b	#2,$24(a0)
0000D07E 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D084 6000 0000                  		bra.w	DisplaySprite
0000D088                            ; ===========================================================================
0000D088                            
0000D088                            loc_C91A:				; XREF: Obj7E_Index
0000D088 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D08C 0200 000F                  		andi.b	#$F,d0
0000D090 6600                       		bne.s	Obj7E_Display2
0000D092 0868 0000 001A             		bchg	#0,$1A(a0)
0000D098                            
0000D098                            Obj7E_Display2:
0000D098 6000 0000                  		bra.w	DisplaySprite
0000D09C                            ; ===========================================================================
0000D09C 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D0A2 0200                       		dc.b 2,	0		; rountine number, frame number
0000D0A4 0320 0120 0118             		dc.w $320, $120, $118
0000D0AA 0201                       		dc.b 2,	1
0000D0AC 0360 0120 0128             		dc.w $360, $120, $128
0000D0B2 0202                       		dc.b 2,	2
0000D0B4 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D0BA 0203                       		dc.b 2,	3
0000D0BC 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0C2 0206                       		dc.b 2,	6
0000D0C4                            ; ===========================================================================
0000D0C4                            ; ---------------------------------------------------------------------------
0000D0C4                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0C4                            ; ---------------------------------------------------------------------------
0000D0C4                            
0000D0C4                            Obj7F:					; XREF: Obj_Index
0000D0C4 7000                       		moveq	#0,d0
0000D0C6 1028 0024                  		move.b	$24(a0),d0
0000D0CA 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0CE 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0D2                            ; ===========================================================================
0000D0D2 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0D4 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0D6                            
0000D0D6                            ; ---------------------------------------------------------------------------
0000D0D6                            ; X-axis positions for chaos emeralds
0000D0D6                            ; ---------------------------------------------------------------------------
0000D0D6 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0E2                            ; ===========================================================================
0000D0E2                            
0000D0E2                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0E2 2248                       		movea.l	a0,a1
0000D0E4 45F9 0000 D0D6             		lea	(Obj7F_PosData).l,a2
0000D0EA 7400                       		moveq	#0,d2
0000D0EC 7200                       		moveq	#0,d1
0000D0EE 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0F2 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0F4 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D0F8                            
0000D0F8                            Obj7F_Loop:
0000D0F8 12BC 007F                  		move.b	#$7F,0(a1)
0000D0FC 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D100 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D106 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D10A 1633 2000                  		move.b	(a3,d2.w),d3
0000D10E 1343 001A                  		move.b	d3,$1A(a1)
0000D112 1343 001C                  		move.b	d3,$1C(a1)
0000D116 5202                       		addq.b	#1,d2
0000D118 5429 0024                  		addq.b	#2,$24(a1)
0000D11C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D124 337C 8541 0002             		move.w	#$8541,2(a1)
0000D12A 137C 0000 0001             		move.b	#0,1(a1)
0000D130 43E9 0040                  		lea	$40(a1),a1	; next object
0000D134 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D138                            
0000D138                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D138 1028 001A                  		move.b	$1A(a0),d0
0000D13C 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D142 0C00 0006                  		cmpi.b	#6,d0
0000D146 6600                       		bne.s	Obj7F_Display
0000D148 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D14E                            
0000D14E                            Obj7F_Display:
0000D14E 6000 0000                  		bra.w	DisplaySprite
0000D152                            ; ===========================================================================
0000D152                            ; ---------------------------------------------------------------------------
0000D152                            ; Sprite mappings - zone title cards
0000D152                            ; ---------------------------------------------------------------------------
0000D152 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D154 0000                       		dc.w byte_CA2C-Map_obj34
0000D156 0000                       		dc.w byte_CA5A-Map_obj34
0000D158 0000                       		dc.w byte_CA7A-Map_obj34
0000D15A 0000                       		dc.w byte_CAA8-Map_obj34
0000D15C 0000                       		dc.w byte_CADC-Map_obj34
0000D15E 0000                       		dc.w byte_CB10-Map_obj34
0000D160 0000                       		dc.w byte_CB26-Map_obj34
0000D162 0000                       		dc.w byte_CB31-Map_obj34
0000D164 0000                       		dc.w byte_CB3C-Map_obj34
0000D166 0000                       		dc.w byte_CB47-Map_obj34
0000D168 0000                       		dc.w byte_CB8A-Map_obj34
0000D16A 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D16B F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D170 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D175 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D17A F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D17F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D184 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D189 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D18E F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D193 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D198 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D199 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D19E F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D1A3 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D1A8 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D1AD F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D1B2 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D1B7 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D1BC F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D1C1 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D1C6 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D1C7 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D1CC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D1D1 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D1D6 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D1DB F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D1E0 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D1E5 00                         		dc.b 0
0000D1E6 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D1E7 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D1EC F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D1F1 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D1F6 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D1FB F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D200 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D205 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D20A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D20F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D214 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D215 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D21A F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D21F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D224 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D229 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D22E F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D233 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D238 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D23D F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D242 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D247 00                         		dc.b 0
0000D248 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D249 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D24E F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D253 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D258 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D25D F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D262 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D267 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D26C F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D271 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D276 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D27B 00                         		dc.b 0
0000D27C 04                         byte_CB10:	dc.b 4			; ZONE
0000D27D F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D282 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D287 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D28C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D291 00                         		dc.b 0
0000D292 02                         byte_CB26:	dc.b 2			; ACT 1
0000D293 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D298 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D29D 02                         byte_CB31:	dc.b 2			; ACT 2
0000D29E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2A3 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D2A8 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D2A9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2AE F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D2B3 0D                         byte_CB47:	dc.b $D			; Oval
0000D2B4 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D2B9 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D2BE EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D2C3 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D2C8 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D2CD 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D2D2 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D2D7 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D2DC EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D2E1 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D2E6 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D2EB 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D2F0 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D2F5 00                         		dc.b 0
0000D2F6 05                         byte_CB8A:	dc.b 5			; FINAL
0000D2F7 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D2FC F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D301 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D306 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D30B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D310                            		even
0000D310                            ; ---------------------------------------------------------------------------
0000D310                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D310                            ; ---------------------------------------------------------------------------
0000D310                            Map_obj39:
0000D310                            	include "_maps\obj39.asm"
0000D310                            ; ---------------------------------------------------------------------------
0000D310                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D310                            ; ---------------------------------------------------------------------------
0000D310 0000                       		dc.w byte_CBAC-Map_obj39
0000D312 0000                       		dc.w byte_CBB7-Map_obj39
0000D314 0000                       		dc.w byte_CBC2-Map_obj39
0000D316 0000                       		dc.w byte_CBCD-Map_obj39
0000D318 02                         byte_CBAC:	dc.b 2
0000D319 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D31E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D323 02                         byte_CBB7:	dc.b 2
0000D324 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D329 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D32E 02                         byte_CBC2:	dc.b 2
0000D32F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D334 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D339 02                         byte_CBCD:	dc.b 2
0000D33A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D33F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D344                            		even
0000D344                            		even
0000D344                            
0000D344                            ; ---------------------------------------------------------------------------
0000D344                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D344                            ; ---------------------------------------------------------------------------
0000D344 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D346 0000                       		dc.w byte_CC13-Map_obj3A
0000D348 0000                       		dc.w byte_CC32-Map_obj3A
0000D34A 0000                       		dc.w byte_CC51-Map_obj3A
0000D34C 0000                       		dc.w byte_CC75-Map_obj3A
0000D34E FF6F                       		dc.w byte_CB47-Map_obj3A
0000D350 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D352 FF59                       		dc.w byte_CB31-Map_obj3A
0000D354 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D356 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D357 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D35C F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D361 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D366 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D36B F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D370 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D375 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D37A F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D37F 06                         byte_CC13:	dc.b 6			; PASSED
0000D380 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D385 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D38A F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D38F F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D394 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D399 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D39E 06                         byte_CC32:	dc.b 6			; SCORE
0000D39F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D3A4 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D3A9 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D3AE F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D3B3 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3B8 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3BD 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D3BE F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D3C3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3C8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3CD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3D2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3D7 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D3DC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3E1 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D3E2 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3E7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3EC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3F1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3F6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3FB F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D400 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D406 00                         		even
0000D406                            ; ---------------------------------------------------------------------------
0000D406                            ; Sprite mappings - special stage results screen
0000D406                            ; ---------------------------------------------------------------------------
0000D406 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D408 0000                       		dc.w byte_CCEE-Map_obj7E
0000D40A 0000                       		dc.w byte_CD0D-Map_obj7E
0000D40C FEAD                       		dc.w byte_CB47-Map_obj7E
0000D40E 0000                       		dc.w byte_CD31-Map_obj7E
0000D410 0000                       		dc.w byte_CD46-Map_obj7E
0000D412 0000                       		dc.w byte_CD5B-Map_obj7E
0000D414 0000                       		dc.w byte_CD6B-Map_obj7E
0000D416 0000                       		dc.w byte_CDA8-Map_obj7E
0000D418 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D419 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D41E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D423 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D428 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D42D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D432 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D437 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D43C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D441 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D446 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D44B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D450 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D455 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D45A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D45B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D460 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D465 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D46A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D46F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D474 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D479 07                         byte_CD0D:	dc.b 7
0000D47A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D47F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D484 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D489 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D48E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D493 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D498 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D49D 04                         byte_CD31:	dc.b 4
0000D49E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4A3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4A8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4AD F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D4B2 04                         byte_CD46:	dc.b 4
0000D4B3 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4B8 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4BD F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4C2 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D4C7 03                         byte_CD5B:	dc.b 3
0000D4C8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4CD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4D2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D4D7 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D4D8 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D4DD F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D4E2 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D4E7 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D4EC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D4F1 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D4F6 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D4FB F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D500 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D505 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D50A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D50F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D514 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D515 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D51A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D51F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D524 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D529 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D52E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D533 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D538 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D53D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D542 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D547 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D54C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D551 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D556 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D55B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D560                            		even
0000D560                            ; ---------------------------------------------------------------------------
0000D560                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D560                            ; ---------------------------------------------------------------------------
0000D560                            Map_obj7F:
0000D560                            	include "_maps\obj7F.asm"
0000D560                            ; ---------------------------------------------------------------------------
0000D560                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D560                            ; ---------------------------------------------------------------------------
0000D560 0000                       		dc.w byte_CE02-Map_obj7F
0000D562 0000                       		dc.w byte_CE08-Map_obj7F
0000D564 0000                       		dc.w byte_CE0E-Map_obj7F
0000D566 0000                       		dc.w byte_CE14-Map_obj7F
0000D568 0000                       		dc.w byte_CE1A-Map_obj7F
0000D56A 0000                       		dc.w byte_CE20-Map_obj7F
0000D56C 0000                       		dc.w byte_CE26-Map_obj7F
0000D56E 01                         byte_CE02:	dc.b 1
0000D56F F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000D574 01                         byte_CE08:	dc.b 1
0000D575 F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000D57A 01                         byte_CE0E:	dc.b 1
0000D57B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D580 01                         byte_CE14:	dc.b 1
0000D581 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D586 01                         byte_CE1A:	dc.b 1
0000D587 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000D58C 01                         byte_CE20:	dc.b 1
0000D58D F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000D592 00                         byte_CE26:	dc.b 0			; Blank frame
0000D594 00                         		even
0000D594 00                         		even
0000D594                            
0000D594                            ; ===========================================================================
0000D594                            ; ---------------------------------------------------------------------------
0000D594                            ; Object 36 - spikes
0000D594                            ; ---------------------------------------------------------------------------
0000D594                            
0000D594                            Obj36:					; XREF: Obj_Index
0000D594 7000                       		moveq	#0,d0
0000D596 1028 0024                  		move.b	$24(a0),d0
0000D59A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D59E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D5A2                            ; ===========================================================================
0000D5A2 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D5A4 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D5A6                            
0000D5A6 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D5A8 0110                       		dc.b 1,	$10
0000D5AA 0204                       		dc.b 2,	4
0000D5AC 031C                       		dc.b 3,	$1C
0000D5AE 0440                       		dc.b 4,	$40
0000D5B0 0510                       		dc.b 5,	$10
0000D5B2                            ; ===========================================================================
0000D5B2                            
0000D5B2                            Obj36_Main:				; XREF: Obj36_Index
0000D5B2 5428 0024                  		addq.b	#2,$24(a0)
0000D5B6 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D5BE 317C 051B 0002             		move.w	#$51B,2(a0)
0000D5C4 0028 0004 0001             		ori.b	#4,1(a0)
0000D5CA 117C 0004 0018             		move.b	#4,$18(a0)
0000D5D0 1028 0028                  		move.b	$28(a0),d0
0000D5D4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D5DA 0240 00F0                  		andi.w	#$F0,d0
0000D5DE 43F9 0000 D5A6             		lea	(Obj36_Var).l,a1
0000D5E4 E648                       		lsr.w	#3,d0
0000D5E6 D2C0                       		adda.w	d0,a1
0000D5E8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D5EC 1159 0019                  		move.b	(a1)+,$19(a0)
0000D5F0 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D5F6 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D5FC                            
0000D5FC                            Obj36_Solid:				; XREF: Obj36_Index
0000D5FC 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D600 343C 0004                  		move.w	#4,d2
0000D604 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D60A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D60C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D612 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D614 343C 0014                  		move.w	#$14,d2
0000D618                            
0000D618                            ; Spikes types $1x and $5x face	sideways
0000D618                            
0000D618                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D618 323C 001B                  		move.w	#$1B,d1
0000D61C 3602                       		move.w	d2,d3
0000D61E 5243                       		addq.w	#1,d3
0000D620 3828 0008                  		move.w	8(a0),d4
0000D624 6100 0000                  		bsr.w	SolidObject
0000D628 0828 0003 0022             		btst	#3,$22(a0)
0000D62E 6600                       		bne.s	Obj36_Display
0000D630 0C44 0001                  		cmpi.w	#1,d4
0000D634 6700                       		beq.s	Obj36_Hurt
0000D636 6000                       		bra.s	Obj36_Display
0000D638                            ; ===========================================================================
0000D638                            
0000D638                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D638                            
0000D638                            Obj36_Upright:				; XREF: Obj36_Solid
0000D638 7200                       		moveq	#0,d1
0000D63A 1228 0019                  		move.b	$19(a0),d1
0000D63E 0641 000B                  		addi.w	#$B,d1
0000D642 343C 0010                  		move.w	#$10,d2
0000D646 363C 0011                  		move.w	#$11,d3
0000D64A 3828 0008                  		move.w	8(a0),d4
0000D64E 6100 0000                  		bsr.w	SolidObject
0000D652 0828 0003 0022             		btst	#3,$22(a0)
0000D658 6600                       		bne.s	Obj36_Hurt
0000D65A 4A44                       		tst.w	d4
0000D65C 6A00                       		bpl.s	Obj36_Display
0000D65E                            
0000D65E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D65E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D662 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000D664 2F08                       		move.l	a0,-(sp)
0000D666 2448                       		movea.l	a0,a2
0000D668 41F8 D000                  		lea	($FFFFD000).w,a0
0000D66C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D672 6400                       		bcc.s	loc_CF20
0000D674 2628 000C                  		move.l	$C(a0),d3
0000D678 3028 0012                  		move.w	$12(a0),d0
0000D67C 48C0                       		ext.l	d0
0000D67E E180                       		asl.l	#8,d0
0000D680 9680                       		sub.l	d0,d3
0000D682 2143 000C                  		move.l	d3,$C(a0)
0000D686 4EB9 0000 0000             		jsr	HurtSonic
0000D68C                            
0000D68C                            loc_CF20:
0000D68C 205F                       		movea.l	(sp)+,a0
0000D68E 6000                       		bra.s	Obj36_Display
0000D690                            
0000D690                            Obj36_PreDisplay:
0000D690 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000D696 6E00                       		bgt.s	Obj36_Display
0000D698 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000D69E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000D6A4                            
0000D6A4                            Obj36_Display:
0000D6A4 6100 0000                  		bsr.w	DisplaySprite
0000D6A8 3028 0030                  		move.w	$30(a0),d0
0000D6AC 0240 FF80                  		andi.w	#$FF80,d0
0000D6B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6B4 0441 0080                  		subi.w	#$80,d1
0000D6B8 0241 FF80                  		andi.w	#$FF80,d1
0000D6BC 9041                       		sub.w	d1,d0
0000D6BE 0C40 0280                  		cmpi.w	#$280,d0
0000D6C2 6200 0000                  		bhi.w	DeleteObject
0000D6C6 4E75                       		rts	
0000D6C8                            ; ===========================================================================
0000D6C8                            
0000D6C8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D6C8 7000                       		moveq	#0,d0
0000D6CA 1028 0028                  		move.b	$28(a0),d0
0000D6CE D040                       		add.w	d0,d0
0000D6D0 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D6D4 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D6D8                            ; ===========================================================================
0000D6D8 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D6DA 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D6DC 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D6DE                            ; ===========================================================================
0000D6DE                            
0000D6DE                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D6DE 4E75                       		rts			; don't move the object
0000D6E0                            ; ===========================================================================
0000D6E0                            
0000D6E0                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D6E0 6100 0000                  		bsr.w	Obj36_Wait
0000D6E4 7000                       		moveq	#0,d0
0000D6E6 1028 0034                  		move.b	$34(a0),d0
0000D6EA D068 0032                  		add.w	$32(a0),d0
0000D6EE 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D6F2 4E75                       		rts	
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D6F4 6100 0000                  		bsr.w	Obj36_Wait
0000D6F8 7000                       		moveq	#0,d0
0000D6FA 1028 0034                  		move.b	$34(a0),d0
0000D6FE D068 0030                  		add.w	$30(a0),d0
0000D702 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D706 4E75                       		rts	
0000D708                            ; ===========================================================================
0000D708                            
0000D708                            Obj36_Wait:
0000D708 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D70C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D70E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D712 6600                       		bne.s	locret_CFE6
0000D714 4A28 0001                  		tst.b	1(a0)
0000D718 6A00                       		bpl.s	locret_CFE6
0000D71A 303C 00B6                  		move.w	#$B6,d0
0000D71E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D724 6000                       		bra.s	locret_CFE6
0000D726                            ; ===========================================================================
0000D726                            
0000D726                            loc_CFA4:
0000D726 4A68 0036                  		tst.w	$36(a0)
0000D72A 6700                       		beq.s	loc_CFC6
0000D72C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D732 6400                       		bcc.s	locret_CFE6
0000D734 317C 0000 0034             		move.w	#0,$34(a0)
0000D73A 317C 0000 0036             		move.w	#0,$36(a0)
0000D740 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D746 6000                       		bra.s	locret_CFE6
0000D748                            ; ===========================================================================
0000D748                            
0000D748                            loc_CFC6:
0000D748 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D74E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D754 6500                       		bcs.s	locret_CFE6
0000D756 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D75C 317C 0001 0036             		move.w	#1,$36(a0)
0000D762 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D768                            
0000D768                            locret_CFE6:
0000D768 4E75                       		rts	
0000D76A                            ; ===========================================================================
0000D76A                            ; ---------------------------------------------------------------------------
0000D76A                            ; Sprite mappings - spikes
0000D76A                            ; ---------------------------------------------------------------------------
0000D76A                            Map_obj36:
0000D76A                            	include "_maps\obj36.asm"
0000D76A                            ; ---------------------------------------------------------------------------
0000D76A                            ; Sprite mappings - spikes
0000D76A                            ; ---------------------------------------------------------------------------
0000D76A 0000                       		dc.w byte_CFF4-Map_obj36
0000D76C 0000                       		dc.w byte_D004-Map_obj36
0000D76E 0000                       		dc.w byte_D014-Map_obj36
0000D770 0000                       		dc.w byte_D01A-Map_obj36
0000D772 0000                       		dc.w byte_D02A-Map_obj36
0000D774 0000                       		dc.w byte_D049-Map_obj36
0000D776 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D777 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D77C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D781 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D786 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D787 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D78C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D791 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D796 01                         byte_D014:	dc.b 1			; 1 spike
0000D797 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D79C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D79D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D7A2 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D7A7 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D7AC 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D7AD F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D7B2 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D7B7 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D7BC F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D7C1 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D7C6 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D7CB 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D7CC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D7D2 00                         		even
0000D7D2 00                         		even
0000D7D2                            
0000D7D2                            ; ===========================================================================
0000D7D2                            ; ---------------------------------------------------------------------------
0000D7D2                            ; Object 3B - purple rock (GHZ)
0000D7D2                            ; ---------------------------------------------------------------------------
0000D7D2                            
0000D7D2                            Obj3B:					; XREF: Obj_Index
0000D7D2 7000                       		moveq	#0,d0
0000D7D4 1028 0024                  		move.b	$24(a0),d0
0000D7D8 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D7DC 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D7E0                            ; ===========================================================================
0000D7E0 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D7E2 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D7E4                            ; ===========================================================================
0000D7E4                            
0000D7E4                            Obj3B_Main:				; XREF: Obj3B_Index
0000D7E4 5428 0024                  		addq.b	#2,$24(a0)
0000D7E8 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D7F0 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D7F6 117C 0004 0001             		move.b	#4,1(a0)
0000D7FC 117C 0013 0019             		move.b	#$13,$19(a0)
0000D802 117C 0004 0018             		move.b	#4,$18(a0)
0000D808                            
0000D808                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D808 323C 001B                  		move.w	#$1B,d1
0000D80C 343C 0010                  		move.w	#$10,d2
0000D810 363C 0010                  		move.w	#$10,d3
0000D814 3828 0008                  		move.w	8(a0),d4
0000D818 6100 0000                  		bsr.w	SolidObject
0000D81C 6100 0000                  		bsr.w	DisplaySprite
0000D820 3028 0008                  		move.w	8(a0),d0
0000D824 0240 FF80                  		andi.w	#$FF80,d0
0000D828 3238 F700                  		move.w	($FFFFF700).w,d1
0000D82C 0441 0080                  		subi.w	#$80,d1
0000D830 0241 FF80                  		andi.w	#$FF80,d1
0000D834 9041                       		sub.w	d1,d0
0000D836 0C40 0280                  		cmpi.w	#$280,d0
0000D83A 6200 0000                  		bhi.w	DeleteObject
0000D83E 4E75                       		rts	
0000D840                            ; ===========================================================================
0000D840                            ; ---------------------------------------------------------------------------
0000D840                            ; Object 49 - waterfall	sound effect (GHZ)
0000D840                            ; ---------------------------------------------------------------------------
0000D840                            
0000D840                            Obj49:					; XREF: Obj_Index
0000D840 7000                       		moveq	#0,d0
0000D842 1028 0024                  		move.b	$24(a0),d0
0000D846 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D84A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D84E                            ; ===========================================================================
0000D84E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D850 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D852                            ; ===========================================================================
0000D852                            
0000D852                            Obj49_Main:				; XREF: Obj49_Index
0000D852 5428 0024                  		addq.b	#2,$24(a0)
0000D856 117C 0004 0001             		move.b	#4,1(a0)
0000D85C                            
0000D85C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D85C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D860 0200 003F                  		andi.b	#$3F,d0
0000D864 6600                       		bne.s	Obj49_ChkDel
0000D866 303C 00D0                  		move.w	#$D0,d0
0000D86A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D870                            
0000D870                            Obj49_ChkDel:
0000D870 3028 0008                  		move.w	8(a0),d0
0000D874 0240 FF80                  		andi.w	#$FF80,d0
0000D878 3238 F700                  		move.w	($FFFFF700).w,d1
0000D87C 0441 0080                  		subi.w	#$80,d1
0000D880 0241 FF80                  		andi.w	#$FF80,d1
0000D884 9041                       		sub.w	d1,d0
0000D886 0C40 0280                  		cmpi.w	#$280,d0
0000D88A 6200 0000                  		bhi.w	DeleteObject
0000D88E 4E75                       		rts	
0000D890                            ; ===========================================================================
0000D890                            ; ---------------------------------------------------------------------------
0000D890                            ; Sprite mappings - purple rock	(GHZ)
0000D890                            ; ---------------------------------------------------------------------------
0000D890                            Map_obj3B:
0000D890                            	include "_maps\obj3B.asm"
0000D890                            ; ---------------------------------------------------------------------------
0000D890                            ; Sprite mappings - purple rock	(GHZ)
0000D890                            ; ---------------------------------------------------------------------------
0000D890 0000                       		dc.w byte_D110-Map_obj3B
0000D892 02                         byte_D110:	dc.b 2
0000D893 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D898 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D89E 00                         		even
0000D89E 00                         		even
0000D89E                            
0000D89E                            ; ===========================================================================
0000D89E                            ; ---------------------------------------------------------------------------
0000D89E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D89E                            ; ---------------------------------------------------------------------------
0000D89E                            
0000D89E                            Obj3C:					; XREF: Obj_Index
0000D89E 7000                       		moveq	#0,d0
0000D8A0 1028 0024                  		move.b	$24(a0),d0
0000D8A4 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D8A8 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D8AC 6000 0000                  		bra.w	MarkObjGone
0000D8B0                            ; ===========================================================================
0000D8B0 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D8B2 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D8B4 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D8B6                            ; ===========================================================================
0000D8B6                            
0000D8B6                            Obj3C_Main:				; XREF: Obj3C_Index
0000D8B6 5428 0024                  		addq.b	#2,$24(a0)
0000D8BA 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D8C2 317C 450F 0002             		move.w	#$450F,2(a0)
0000D8C8 117C 0004 0001             		move.b	#4,1(a0)
0000D8CE 117C 0010 0019             		move.b	#$10,$19(a0)
0000D8D4 117C 0004 0018             		move.b	#4,$18(a0)
0000D8DA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D8E0                            
0000D8E0                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D8E0 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D8E6 323C 001B                  		move.w	#$1B,d1
0000D8EA 343C 0020                  		move.w	#$20,d2
0000D8EE 363C 0020                  		move.w	#$20,d3
0000D8F2 3828 0008                  		move.w	8(a0),d4
0000D8F6 6100 0000                  		bsr.w	SolidObject
0000D8FA 0828 0005 0022             		btst	#5,$22(a0)
0000D900 6600                       		bne.s	Obj3C_ChkRoll
0000D902                            
0000D902                            locret_D180:
0000D902 4E75                       		rts	
0000D904                            ; ===========================================================================
0000D904                            
0000D904                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D904 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D90A 66F6                       		bne.s	locret_D180	; if not, branch
0000D90C 3028 0030                  		move.w	$30(a0),d0
0000D910 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D912 4440                       		neg.w	d0
0000D914                            
0000D914                            Obj3C_ChkSpeed:
0000D914 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D918 65E8                       		bcs.s	locret_D180	; if not, branch
0000D91A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D920 5869 0008                  		addq.w	#4,8(a1)
0000D924 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D92A 3028 0008                  		move.w	8(a0),d0
0000D92E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D932 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D934 5169 0008                  		subq.w	#8,8(a1)
0000D938 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D93E                            
0000D93E                            Obj3C_Smash:
0000D93E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D944 08A8 0005 0022             		bclr	#5,$22(a0)
0000D94A 08A9 0005 0022             		bclr	#5,$22(a1)
0000D950 7207                       		moveq	#7,d1		; load 8 fragments
0000D952 343C 0070                  		move.w	#$70,d2
0000D956 6100                       		bsr.s	SmashObject
0000D958                            
0000D958                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D958 6100 0000                  		bsr.w	SpeedToPos
0000D95C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D962 6100 0000                  		bsr.w	DisplaySprite
0000D966 4A28 0001                  		tst.b	1(a0)
0000D96A 6A00 0000                  		bpl.w	DeleteObject
0000D96E 4E75                       		rts	
0000D970                            
0000D970                            ; ---------------------------------------------------------------------------
0000D970                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D970                            ; ---------------------------------------------------------------------------
0000D970                            
0000D970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D970                            
0000D970                            
0000D970                            SmashObject:				; XREF: Obj3C_Smash
0000D970 7000                       		moveq	#0,d0
0000D972 1028 001A                  		move.b	$1A(a0),d0
0000D976 D040                       		add.w	d0,d0
0000D978 2668 0004                  		movea.l	4(a0),a3
0000D97C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D980 524B                       		addq.w	#1,a3
0000D982 08E8 0005 0001             		bset	#5,1(a0)
0000D988 1810                       		move.b	0(a0),d4
0000D98A 1A28 0001                  		move.b	1(a0),d5
0000D98E 2248                       		movea.l	a0,a1
0000D990 6000                       		bra.s	Smash_LoadFrag
0000D992                            ; ===========================================================================
0000D992                            
0000D992                            Smash_Loop:
0000D992 6100 0000                  		bsr.w	SingleObjLoad
0000D996 6600                       		bne.s	Smash_PlaySnd
0000D998 5A4B                       		addq.w	#5,a3
0000D99A                            
0000D99A                            Smash_LoadFrag:				; XREF: SmashObject
0000D99A 137C 0004 0024             		move.b	#4,$24(a1)
0000D9A0 1284                       		move.b	d4,0(a1)
0000D9A2 234B 0004                  		move.l	a3,4(a1)
0000D9A6 1345 0001                  		move.b	d5,1(a1)
0000D9AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000D9B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D9B6 3368 0002 0002             		move.w	2(a0),2(a1)
0000D9BC 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D9C2 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D9C8 335C 0010                  		move.w	(a4)+,$10(a1)
0000D9CC 335C 0012                  		move.w	(a4)+,$12(a1)
0000D9D0 B3C8                       		cmpa.l	a0,a1
0000D9D2 6400                       		bcc.s	loc_D268
0000D9D4 2F08                       		move.l	a0,-(sp)
0000D9D6 2049                       		movea.l	a1,a0
0000D9D8 6100 0000                  		bsr.w	SpeedToPos
0000D9DC D568 0012                  		add.w	d2,$12(a0)
0000D9E0 205F                       		movea.l	(sp)+,a0
0000D9E2 6100 0000                  		bsr.w	DisplaySprite2
0000D9E6                            
0000D9E6                            loc_D268:
0000D9E6 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D9EA                            
0000D9EA                            Smash_PlaySnd:
0000D9EA 303C 00CB                  		move.w	#$CB,d0
0000D9EE 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D9F4                            ; End of function SmashObject
0000D9F4                            
0000D9F4                            ; ===========================================================================
0000D9F4                            ; Smashed block	fragment speeds
0000D9F4                            ;
0000D9F4 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D9F8 0600 FF00                  		dc.w $600, $FF00
0000D9FC 0600 0100                  		dc.w $600, $100
0000DA00 0400 0500                  		dc.w $400, $500
0000DA04 0600 FA00                  		dc.w $600, $FA00
0000DA08 0800 FE00                  		dc.w $800, $FE00
0000DA0C 0800 0200                  		dc.w $800, $200
0000DA10 0600 0600                  		dc.w $600, $600
0000DA14                            
0000DA14 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA18 F800 FE00                  		dc.w $F800, $FE00
0000DA1C F800 0200                  		dc.w $F800, $200
0000DA20 FA00 0600                  		dc.w $FA00, $600
0000DA24 FC00 FB00                  		dc.w $FC00, $FB00
0000DA28 FA00 FF00                  		dc.w $FA00, $FF00
0000DA2C FA00 0100                  		dc.w $FA00, $100
0000DA30 FC00 0500                  		dc.w $FC00, $500
0000DA34                            ; ---------------------------------------------------------------------------
0000DA34                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA34                            ; ---------------------------------------------------------------------------
0000DA34                            Map_obj3C:
0000DA34                            	include "_maps\obj3C.asm"
0000DA34                            ; ---------------------------------------------------------------------------
0000DA34                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA34                            ; ---------------------------------------------------------------------------
0000DA34 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA36 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA38 0000                       		dc.w byte_D30E-Map_obj3C
0000DA3A 08                         byte_D2BC:	dc.b 8
0000DA3B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA40 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA45 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA4A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA4F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA54 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA59 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA5E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA63 08                         byte_D2E5:	dc.b 8
0000DA64 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA69 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA6E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA73 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DA78 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA7D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA82 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA87 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DA8C 08                         byte_D30E:	dc.b 8
0000DA8D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DA92 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DA97 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DA9C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAA1 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DAA6 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DAAB 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DAB0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DAB6 00                         		even
0000DAB6 00                         		even
0000DAB6                            
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            ; Object code loading subroutine
0000DAB6                            ; ---------------------------------------------------------------------------
0000DAB6                            
0000DAB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DAB6                            
0000DAB6                            
0000DAB6                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DAB6 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DABA 7E7F                       		moveq	#$7F,d7
0000DABC 7000                       		moveq	#0,d0
0000DABE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DAC4 6400                       		bcc.s	loc_D362
0000DAC6                            
0000DAC6                            loc_D348:
0000DAC6 1010                       		move.b	(a0),d0		; load object number from RAM
0000DAC8 6700                       		beq.s	loc_D358
0000DACA D040                       		add.w	d0,d0
0000DACC D040                       		add.w	d0,d0
0000DACE 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DAD2 4E91                       		jsr	(a1)		; run the object's code
0000DAD4 7000                       		moveq	#0,d0
0000DAD6                            
0000DAD6                            loc_D358:
0000DAD6 41E8 0040                  		lea	$40(a0),a0	; next object
0000DADA 51CF FFEA                  		dbf	d7,loc_D348
0000DADE 4E75                       		rts
0000DAE0                            ; ===========================================================================
0000DAE0                            
0000DAE0                            loc_D362:
0000DAE0 7E1F                       		moveq	#$1F,d7
0000DAE2 61E2                       		bsr.s	loc_D348
0000DAE4 7E5F                       		moveq	#$5F,d7
0000DAE6                            
0000DAE6                            loc_D368:
0000DAE6 7000                       		moveq	#0,d0
0000DAE8 1010                       		move.b	(a0),d0
0000DAEA 6700                       		beq.s	loc_D378
0000DAEC 4A28 0001                  		tst.b	1(a0)
0000DAF0 6A00                       		bpl.s	loc_D378
0000DAF2 6100 0000                  		bsr.w	DisplaySprite
0000DAF6                            
0000DAF6                            loc_D378:
0000DAF6 41E8 0040                  		lea	$40(a0),a0
0000DAFA                            
0000DAFA                            loc_D37C:
0000DAFA 51CF FFEA                  		dbf	d7,loc_D368
0000DAFE 4E75                       		rts
0000DB00                            ; End of function ObjectsLoad
0000DB00                            
0000DB00                            ; ===========================================================================
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            ; Object pointers
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            Obj_Index:
0000DB00                            	include "_inc\Object pointers.asm"
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            ; Object pointers
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	ObjectFall, ObjectFall
0000DB10 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DB20 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB30 0000 0000 0000 AD7E 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB40 0000 7A50 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB50 0000 8076 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DB60 0000 890A 0000 8972 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DB70 0000 8FBC 0000 92AA 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DB80 0000 0000 0000 9F2E 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DB90 0000 A270 0000 A868 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DBA0 0000 9B66 0000 9092 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DBB0 0000 B406 0000 AA4E 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DBC0 0000 BDD8 0000 C492 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DBD0 0000 B93C 0000 D594 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DBE0 0000 CC18 0000 CCE4 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DBF0 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC00 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC10 0000 C100 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DC20 0000 D840 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC30 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC40 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC50 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DC60 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DC70 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DC80 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DC90 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DCA0 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DCB0 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DCC0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DCE0 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DCF0 0000 0000 0000 CF1E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD00 0000 4F9C 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD10 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DD20 0000 5658 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD20 0000 5658 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD30                            
0000DD30                            ; ---------------------------------------------------------------------------
0000DD30                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD30                            ; ---------------------------------------------------------------------------
0000DD30                            
0000DD30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD30                            
0000DD30                            
0000DD30                            ObjectFall:
0000DD30 2428 0008                  		move.l	8(a0),d2
0000DD34 2628 000C                  		move.l	$C(a0),d3
0000DD38 3028 0010                  		move.w	$10(a0),d0
0000DD3C 48C0                       		ext.l	d0
0000DD3E E180                       		asl.l	#8,d0
0000DD40 D480                       		add.l	d0,d2
0000DD42 3028 0012                  		move.w	$12(a0),d0
0000DD46 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD4C 48C0                       		ext.l	d0
0000DD4E E180                       		asl.l	#8,d0
0000DD50 D680                       		add.l	d0,d3
0000DD52 2142 0008                  		move.l	d2,8(a0)
0000DD56 2143 000C                  		move.l	d3,$C(a0)
0000DD5A 4E75                       		rts	
0000DD5C                            ; End of function ObjectFall
0000DD5C                            
0000DD5C                            ; ---------------------------------------------------------------------------
0000DD5C                            ; Subroutine translating object	speed to update	object position
0000DD5C                            ; ---------------------------------------------------------------------------
0000DD5C                            
0000DD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD5C                            
0000DD5C                            
0000DD5C                            SpeedToPos:
0000DD5C 2428 0008                  		move.l	8(a0),d2
0000DD60 2628 000C                  		move.l	$C(a0),d3
0000DD64 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DD68 48C0                       		ext.l	d0
0000DD6A E180                       		asl.l	#8,d0		; multiply speed by $100
0000DD6C D480                       		add.l	d0,d2		; add to x-axis	position
0000DD6E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DD72 48C0                       		ext.l	d0
0000DD74 E180                       		asl.l	#8,d0		; multiply by $100
0000DD76 D680                       		add.l	d0,d3		; add to y-axis	position
0000DD78 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DD7C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DD80 4E75                       		rts	
0000DD82                            ; End of function SpeedToPos
0000DD82                            
0000DD82                            ; ---------------------------------------------------------------------------
0000DD82                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DD82                            ; ---------------------------------------------------------------------------
0000DD82                            
0000DD82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD82                            
0000DD82                            
0000DD82                            DisplaySprite:
0000DD82 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DD86 3028 0018                  		move.w	$18(a0),d0
0000DD8A E248                       		lsr.w	#1,d0
0000DD8C 0240 0380                  		andi.w	#$380,d0
0000DD90 D2C0                       		adda.w	d0,a1
0000DD92 0C51 0072                  		cmpi.w	#$72,(a1)
0000DD96 6400                       		bcc.s	locret_D620
0000DD98 5451                       		addq.w	#2,(a1)
0000DD9A D2D1                       		adda.w	(a1),a1
0000DD9C 3288                       		move.w	a0,(a1)
0000DD9E                            
0000DD9E                            locret_D620:
0000DD9E 4E75                       		rts	
0000DDA0                            ; End of function DisplaySprite
0000DDA0                            
0000DDA0                            ; ---------------------------------------------------------------------------
0000DDA0                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DDA0                            ; ---------------------------------------------------------------------------
0000DDA0                            
0000DDA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDA0                            
0000DDA0                            
0000DDA0                            DisplaySprite2:
0000DDA0 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DDA4 3029 0018                  		move.w	$18(a1),d0
0000DDA8 E248                       		lsr.w	#1,d0
0000DDAA 0240 0380                  		andi.w	#$380,d0
0000DDAE D4C0                       		adda.w	d0,a2
0000DDB0 0C52 0072                  		cmpi.w	#$72,(a2)
0000DDB4 6400                       		bcc.s	locret_D63E
0000DDB6 5452                       		addq.w	#2,(a2)
0000DDB8 D4D2                       		adda.w	(a2),a2
0000DDBA 3489                       		move.w	a1,(a2)
0000DDBC                            
0000DDBC                            locret_D63E:
0000DDBC 4E75                       		rts	
0000DDBE                            ; End of function DisplaySprite2
0000DDBE                            
0000DDBE                            ; ---------------------------------------------------------------------------
0000DDBE                            ; Subroutine to	delete an object
0000DDBE                            ; ---------------------------------------------------------------------------
0000DDBE                            
0000DDBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDBE                            
0000DDBE                            
0000DDBE                            DeleteObject:
0000DDBE 2248                       		movea.l	a0,a1
0000DDC0                            
0000DDC0                            DeleteObject2:
0000DDC0 7200                       		moveq	#0,d1
0000DDC2 700F                       		moveq	#$F,d0
0000DDC4                            
0000DDC4                            loc_D646:
0000DDC4 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DDC6 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DDCA 4E75                       		rts	
0000DDCC                            ; End of function DeleteObject
0000DDCC                            
0000DDCC                            ; ===========================================================================
0000DDCC 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DDD0 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DDD4 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DDD8 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DDDC                            ; ---------------------------------------------------------------------------
0000DDDC                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DDDC                            ; ---------------------------------------------------------------------------
0000DDDC                            
0000DDDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDDC                            
0000DDDC                            
0000DDDC                            BuildSprites:				; XREF: TitleScreen; et al
0000DDDC 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DDE0 7A00                       		moveq	#0,d5
0000DDE2 7800                       		moveq	#0,d4
0000DDE4 6100 0000                  		bsr.w	Obj02
0000DDE8 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DDEC 7E07                       		moveq	#7,d7
0000DDEE                            
0000DDEE                            loc_D66A:
0000DDEE 4A54                       		tst.w	(a4)
0000DDF0 6700 0000                  		beq.w	loc_D72E
0000DDF4 7C02                       		moveq	#2,d6
0000DDF6                            
0000DDF6                            loc_D672:
0000DDF6 3074 6000                  		movea.w	(a4,d6.w),a0
0000DDFA 4A10                       		tst.b	(a0)
0000DDFC 6700 0000                  		beq.w	loc_D726
0000DE00 08A8 0007 0001             		bclr	#7,1(a0)
0000DE06 1028 0001                  		move.b	1(a0),d0
0000DE0A 1800                       		move.b	d0,d4
0000DE0C 0240 000C                  		andi.w	#$C,d0
0000DE10 6700                       		beq.s	loc_D6DE
0000DE12 227B 00B8                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE16 7000                       		moveq	#0,d0
0000DE18 1028 0019                  		move.b	$19(a0),d0
0000DE1C 3628 0008                  		move.w	8(a0),d3
0000DE20 9651                       		sub.w	(a1),d3
0000DE22 3203                       		move.w	d3,d1
0000DE24 D240                       		add.w	d0,d1
0000DE26 6B00 0000                  		bmi.w	loc_D726
0000DE2A 3203                       		move.w	d3,d1
0000DE2C 9240                       		sub.w	d0,d1
0000DE2E 0C41 0140                  		cmpi.w	#$140,d1
0000DE32 6C00                       		bge.s	loc_D726
0000DE34 0643 0080                  		addi.w	#$80,d3
0000DE38 0804 0004                  		btst	#4,d4
0000DE3C 6700                       		beq.s	loc_D6E8
0000DE3E 7000                       		moveq	#0,d0
0000DE40 1028 0016                  		move.b	$16(a0),d0
0000DE44 3428 000C                  		move.w	$C(a0),d2
0000DE48 9469 0004                  		sub.w	4(a1),d2
0000DE4C 3202                       		move.w	d2,d1
0000DE4E D240                       		add.w	d0,d1
0000DE50 6B00                       		bmi.s	loc_D726
0000DE52 3202                       		move.w	d2,d1
0000DE54 9240                       		sub.w	d0,d1
0000DE56 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE5A 6C00                       		bge.s	loc_D726
0000DE5C 0642 0080                  		addi.w	#$80,d2
0000DE60 6000                       		bra.s	loc_D700
0000DE62                            ; ===========================================================================
0000DE62                            
0000DE62                            loc_D6DE:
0000DE62 3428 000A                  		move.w	$A(a0),d2
0000DE66 3628 0008                  		move.w	8(a0),d3
0000DE6A 6000                       		bra.s	loc_D700
0000DE6C                            ; ===========================================================================
0000DE6C                            
0000DE6C                            loc_D6E8:
0000DE6C 3428 000C                  		move.w	$C(a0),d2
0000DE70 9469 0004                  		sub.w	4(a1),d2
0000DE74 0642 0080                  		addi.w	#$80,d2
0000DE78 0C42 0060                  		cmpi.w	#$60,d2
0000DE7C 6500                       		bcs.s	loc_D726
0000DE7E 0C42 0180                  		cmpi.w	#$180,d2
0000DE82 6400                       		bcc.s	loc_D726
0000DE84                            
0000DE84                            loc_D700:
0000DE84 2268 0004                  		movea.l	4(a0),a1
0000DE88 7200                       		moveq	#0,d1
0000DE8A 0804 0005                  		btst	#5,d4
0000DE8E 6600                       		bne.s	loc_D71C
0000DE90 1228 001A                  		move.b	$1A(a0),d1
0000DE94 D201                       		add.b	d1,d1
0000DE96 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DE9A 1219                       		move.b	(a1)+,d1
0000DE9C 5301                       		subq.b	#1,d1
0000DE9E 6B00                       		bmi.s	loc_D720
0000DEA0                            
0000DEA0                            loc_D71C:
0000DEA0 6100 0000                  		bsr.w	sub_D750
0000DEA4                            
0000DEA4                            loc_D720:
0000DEA4 08E8 0007 0001             		bset	#7,1(a0)
0000DEAA                            
0000DEAA                            loc_D726:
0000DEAA 5446                       		addq.w	#2,d6
0000DEAC 5554                       		subq.w	#2,(a4)
0000DEAE 6600 FF46                  		bne.w	loc_D672
0000DEB2                            
0000DEB2                            loc_D72E:
0000DEB2 49EC 0080                  		lea	$80(a4),a4
0000DEB6 51CF FF36                  		dbf	d7,loc_D66A
0000DEBA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DEBE 0C05 0050                  		cmpi.b	#$50,d5
0000DEC2 6700                       		beq.s	loc_D748
0000DEC4 24BC 0000 0000             		move.l	#0,(a2)
0000DECA 4E75                       		rts	
0000DECC                            ; ===========================================================================
0000DECC                            
0000DECC                            loc_D748:
0000DECC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DED2 4E75                       		rts	
0000DED4                            ; End of function BuildSprites
0000DED4                            
0000DED4                            
0000DED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DED4                            
0000DED4                            
0000DED4                            sub_D750:				; XREF: BuildSprites
0000DED4 3668 0002                  		movea.w	2(a0),a3
0000DED8 0804 0000                  		btst	#0,d4
0000DEDC 6600                       		bne.s	loc_D796
0000DEDE 0804 0001                  		btst	#1,d4
0000DEE2 6600 0000                  		bne.w	loc_D7E4
0000DEE6                            ; End of function sub_D750
0000DEE6                            
0000DEE6                            
0000DEE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEE6                            
0000DEE6                            
0000DEE6                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DEE6 0C05 0050                  		cmpi.b	#$50,d5
0000DEEA 6700                       		beq.s	locret_D794
0000DEEC                            
0000DEEC                            DrawSprite_Loop:
0000DEEC 1019                       		move.b	(a1)+,d0
0000DEEE 4880                       		ext.w	d0
0000DEF0 D042                       		add.w	d2,d0
0000DEF2 34C0                       		move.w	d0,(a2)+
0000DEF4 14D9                       		move.b	(a1)+,(a2)+
0000DEF6 5205                       		addq.b	#1,d5
0000DEF8 14C5                       		move.b	d5,(a2)+
0000DEFA 1019                       		move.b	(a1)+,d0
0000DEFC E148                       		lsl.w	#8,d0
0000DEFE 1019                       		move.b	(a1)+,d0
0000DF00 D04B                       		add.w	a3,d0
0000DF02 34C0                       		move.w	d0,(a2)+
0000DF04 1019                       		move.b	(a1)+,d0
0000DF06 4880                       		ext.w	d0
0000DF08 D043                       		add.w	d3,d0
0000DF0A 0240 01FF                  		andi.w	#$1FF,d0
0000DF0E 6600                       		bne.s	loc_D78E
0000DF10 5240                       		addq.w	#1,d0
0000DF12                            
0000DF12                            loc_D78E:
0000DF12 34C0                       		move.w	d0,(a2)+
0000DF14 51C9 FFD0                  		dbf	d1,sub_D762
0000DF18                            
0000DF18                            locret_D794:
0000DF18 4E75                       		rts	
0000DF1A                            ; End of function sub_D762
0000DF1A                            
0000DF1A                            ; ===========================================================================
0000DF1A                            
0000DF1A                            loc_D796:
0000DF1A 0804 0001                  		btst	#1,d4
0000DF1E 6600 0000                  		bne.w	loc_D82A
0000DF22                            
0000DF22                            loc_D79E:
0000DF22 0C05 0050                  		cmpi.b	#$50,d5
0000DF26 6700                       		beq.s	locret_D7E2
0000DF28 1019                       		move.b	(a1)+,d0
0000DF2A 4880                       		ext.w	d0
0000DF2C D042                       		add.w	d2,d0
0000DF2E 34C0                       		move.w	d0,(a2)+
0000DF30 1819                       		move.b	(a1)+,d4
0000DF32 14C4                       		move.b	d4,(a2)+
0000DF34 5205                       		addq.b	#1,d5
0000DF36 14C5                       		move.b	d5,(a2)+
0000DF38 1019                       		move.b	(a1)+,d0
0000DF3A E148                       		lsl.w	#8,d0
0000DF3C 1019                       		move.b	(a1)+,d0
0000DF3E D04B                       		add.w	a3,d0
0000DF40 0A40 0800                  		eori.w	#$800,d0
0000DF44 34C0                       		move.w	d0,(a2)+
0000DF46 1019                       		move.b	(a1)+,d0
0000DF48 4880                       		ext.w	d0
0000DF4A 4440                       		neg.w	d0
0000DF4C D804                       		add.b	d4,d4
0000DF4E 0244 0018                  		andi.w	#$18,d4
0000DF52 5044                       		addq.w	#8,d4
0000DF54 9044                       		sub.w	d4,d0
0000DF56 D043                       		add.w	d3,d0
0000DF58 0240 01FF                  		andi.w	#$1FF,d0
0000DF5C 6600                       		bne.s	loc_D7DC
0000DF5E 5240                       		addq.w	#1,d0
0000DF60                            
0000DF60                            loc_D7DC:
0000DF60 34C0                       		move.w	d0,(a2)+
0000DF62 51C9 FFBE                  		dbf	d1,loc_D79E
0000DF66                            
0000DF66                            locret_D7E2:
0000DF66 4E75                       		rts	
0000DF68                            ; ===========================================================================
0000DF68                            
0000DF68                            loc_D7E4:				; XREF: sub_D750
0000DF68 0C05 0050                  		cmpi.b	#$50,d5
0000DF6C 6700                       		beq.s	locret_D828
0000DF6E 1019                       		move.b	(a1)+,d0
0000DF70 1811                       		move.b	(a1),d4
0000DF72 4880                       		ext.w	d0
0000DF74 4440                       		neg.w	d0
0000DF76 E70C                       		lsl.b	#3,d4
0000DF78 0244 0018                  		andi.w	#$18,d4
0000DF7C 5044                       		addq.w	#8,d4
0000DF7E 9044                       		sub.w	d4,d0
0000DF80 D042                       		add.w	d2,d0
0000DF82 34C0                       		move.w	d0,(a2)+
0000DF84 14D9                       		move.b	(a1)+,(a2)+
0000DF86 5205                       		addq.b	#1,d5
0000DF88 14C5                       		move.b	d5,(a2)+
0000DF8A 1019                       		move.b	(a1)+,d0
0000DF8C E148                       		lsl.w	#8,d0
0000DF8E 1019                       		move.b	(a1)+,d0
0000DF90 D04B                       		add.w	a3,d0
0000DF92 0A40 1000                  		eori.w	#$1000,d0
0000DF96 34C0                       		move.w	d0,(a2)+
0000DF98 1019                       		move.b	(a1)+,d0
0000DF9A 4880                       		ext.w	d0
0000DF9C D043                       		add.w	d3,d0
0000DF9E 0240 01FF                  		andi.w	#$1FF,d0
0000DFA2 6600                       		bne.s	loc_D822
0000DFA4 5240                       		addq.w	#1,d0
0000DFA6                            
0000DFA6                            loc_D822:
0000DFA6 34C0                       		move.w	d0,(a2)+
0000DFA8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DFAC                            
0000DFAC                            locret_D828:
0000DFAC 4E75                       		rts	
0000DFAE                            ; ===========================================================================
0000DFAE                            
0000DFAE                            loc_D82A:
0000DFAE 0C05 0050                  		cmpi.b	#$50,d5
0000DFB2 6700                       		beq.s	locret_D87C
0000DFB4 1019                       		move.b	(a1)+,d0
0000DFB6 1811                       		move.b	(a1),d4
0000DFB8 4880                       		ext.w	d0
0000DFBA 4440                       		neg.w	d0
0000DFBC E70C                       		lsl.b	#3,d4
0000DFBE 0244 0018                  		andi.w	#$18,d4
0000DFC2 5044                       		addq.w	#8,d4
0000DFC4 9044                       		sub.w	d4,d0
0000DFC6 D042                       		add.w	d2,d0
0000DFC8 34C0                       		move.w	d0,(a2)+
0000DFCA 1819                       		move.b	(a1)+,d4
0000DFCC 14C4                       		move.b	d4,(a2)+
0000DFCE 5205                       		addq.b	#1,d5
0000DFD0 14C5                       		move.b	d5,(a2)+
0000DFD2 1019                       		move.b	(a1)+,d0
0000DFD4 E148                       		lsl.w	#8,d0
0000DFD6 1019                       		move.b	(a1)+,d0
0000DFD8 D04B                       		add.w	a3,d0
0000DFDA 0A40 1800                  		eori.w	#$1800,d0
0000DFDE 34C0                       		move.w	d0,(a2)+
0000DFE0 1019                       		move.b	(a1)+,d0
0000DFE2 4880                       		ext.w	d0
0000DFE4 4440                       		neg.w	d0
0000DFE6 D804                       		add.b	d4,d4
0000DFE8 0244 0018                  		andi.w	#$18,d4
0000DFEC 5044                       		addq.w	#8,d4
0000DFEE 9044                       		sub.w	d4,d0
0000DFF0 D043                       		add.w	d3,d0
0000DFF2 0240 01FF                  		andi.w	#$1FF,d0
0000DFF6 6600                       		bne.s	loc_D876
0000DFF8 5240                       		addq.w	#1,d0
0000DFFA                            
0000DFFA                            loc_D876:
0000DFFA 34C0                       		move.w	d0,(a2)+
0000DFFC 51C9 FFB0                  		dbf	d1,loc_D82A
0000E000                            
0000E000                            locret_D87C:
0000E000 4E75                       		rts	
0000E002                            ; ---------------------------------------------------------------------------
0000E002                            ; Subroutine to	check if an object is on the screen
0000E002                            ; ---------------------------------------------------------------------------
0000E002                            
0000E002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E002                            
0000E002                            
0000E002                            ChkObjOnScreen:
0000E002 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E006 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E00A 6B00                       		bmi.s	NotOnScreen
0000E00C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E010 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E012                            
0000E012 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E016 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E01A 6B00                       		bmi.s	NotOnScreen
0000E01C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E020 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E022                            
0000E022 7000                       		moveq	#0,d0		; set flag to 0
0000E024 4E75                       		rts	
0000E026                            ; ===========================================================================
0000E026                            
0000E026                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E026 7001                       		moveq	#1,d0		; set flag to 1
0000E028 4E75                       		rts	
0000E02A                            ; End of function ChkObjOnScreen
0000E02A                            
0000E02A                            
0000E02A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E02A                            
0000E02A                            
0000E02A                            ChkObjOnScreen2:
0000E02A 7200                       		moveq	#0,d1
0000E02C 1228 0019                  		move.b	$19(a0),d1
0000E030 3028 0008                  		move.w	8(a0),d0
0000E034 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E038 D041                       		add.w	d1,d0
0000E03A 6B00                       		bmi.s	NotOnScreen2
0000E03C D241                       		add.w	d1,d1
0000E03E 9041                       		sub.w	d1,d0
0000E040 0C40 0140                  		cmpi.w	#320,d0
0000E044 6C00                       		bge.s	NotOnScreen2
0000E046                            
0000E046 3228 000C                  		move.w	$C(a0),d1
0000E04A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E04E 6B00                       		bmi.s	NotOnScreen2
0000E050 0C41 00E0                  		cmpi.w	#224,d1
0000E054 6C00                       		bge.s	NotOnScreen2
0000E056                            
0000E056 7000                       		moveq	#0,d0
0000E058 4E75                       		rts	
0000E05A                            ; ===========================================================================
0000E05A                            
0000E05A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E05A 7001                       		moveq	#1,d0
0000E05C 4E75                       		rts	
0000E05E                            ; End of function ChkObjOnScreen2
0000E05E                            
0000E05E                            ; ---------------------------------------------------------------------------
0000E05E                            ; Subroutine to	load a level's objects
0000E05E                            ; ---------------------------------------------------------------------------
0000E05E                            
0000E05E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E05E                            
0000E05E                            
0000E05E                            ObjPosLoad:				; XREF: Level; et al
0000E05E 7000                       		moveq	#0,d0
0000E060 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E064 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E068 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E06C                            ; End of function ObjPosLoad
0000E06C                            
0000E06C                            ; ===========================================================================
0000E06C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E06E 0000                       		dc.w OPL_Next-OPL_Index
0000E070                            ; ===========================================================================
0000E070                            
0000E070                            OPL_Main:				; XREF: OPL_Index
0000E070 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E074 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E078 ED08                       		lsl.b	#6,d0
0000E07A E848                       		lsr.w	#4,d0
0000E07C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E082 2248                       		movea.l	a0,a1
0000E084 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E088 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E08C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E090 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E094 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E098 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E09C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0A0 34FC 0101                  		move.w	#$101,(a2)+
0000E0A4 303C 005E                  		move.w	#$5E,d0
0000E0A8                            
0000E0A8                            OPL_ClrList:
0000E0A8 429A                       		clr.l	(a2)+
0000E0AA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E0AE                            
0000E0AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0B2 7400                       		moveq	#0,d2
0000E0B4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0B8 0446 0080                  		subi.w	#$80,d6
0000E0BC 6400                       		bcc.s	loc_D93C
0000E0BE 7C00                       		moveq	#0,d6
0000E0C0                            
0000E0C0                            loc_D93C:
0000E0C0 0246 FF80                  		andi.w	#$FF80,d6
0000E0C4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E0C8                            
0000E0C8                            loc_D944:
0000E0C8 BC50                       		cmp.w	(a0),d6
0000E0CA 6300                       		bls.s	loc_D956
0000E0CC 4A28 0004                  		tst.b	4(a0)
0000E0D0 6A00                       		bpl.s	loc_D952
0000E0D2 1412                       		move.b	(a2),d2
0000E0D4 5212                       		addq.b	#1,(a2)
0000E0D6                            
0000E0D6                            loc_D952:
0000E0D6 5C48                       		addq.w	#6,a0
0000E0D8 60EE                       		bra.s	loc_D944
0000E0DA                            ; ===========================================================================
0000E0DA                            
0000E0DA                            loc_D956:
0000E0DA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0DE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0E2 0446 0080                  		subi.w	#$80,d6
0000E0E6 6500                       		bcs.s	loc_D976
0000E0E8                            
0000E0E8                            loc_D964:
0000E0E8 BC50                       		cmp.w	(a0),d6
0000E0EA 6300                       		bls.s	loc_D976
0000E0EC 4A28 0004                  		tst.b	4(a0)
0000E0F0 6A00                       		bpl.s	loc_D972
0000E0F2 522A 0001                  		addq.b	#1,1(a2)
0000E0F6                            
0000E0F6                            loc_D972:
0000E0F6 5C48                       		addq.w	#6,a0
0000E0F8 60EE                       		bra.s	loc_D964
0000E0FA                            ; ===========================================================================
0000E0FA                            
0000E0FA                            loc_D976:
0000E0FA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0FE 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E104                            
0000E104                            OPL_Next:				; XREF: OPL_Index
0000E104 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E108 7400                       		moveq	#0,d2
0000E10A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E10E 0246 FF80                  		andi.w	#$FF80,d6
0000E112 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E116 6700 0000                  		beq.w	locret_DA3A
0000E11A 6C00                       		bge.s	loc_D9F6
0000E11C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E120 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E124 0446 0080                  		subi.w	#$80,d6
0000E128 6500                       		bcs.s	loc_D9D2
0000E12A                            
0000E12A                            loc_D9A6:
0000E12A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E12E 6C00                       		bge.s	loc_D9D2
0000E130 5D48                       		subq.w	#6,a0
0000E132 4A28 0004                  		tst.b	4(a0)
0000E136 6A00                       		bpl.s	loc_D9BC
0000E138 532A 0001                  		subq.b	#1,1(a2)
0000E13C 142A 0001                  		move.b	1(a2),d2
0000E140                            
0000E140                            loc_D9BC:
0000E140 6100 0000                  		bsr.w	loc_DA3C
0000E144 6600                       		bne.s	loc_D9C6
0000E146 5D48                       		subq.w	#6,a0
0000E148 60E0                       		bra.s	loc_D9A6
0000E14A                            ; ===========================================================================
0000E14A                            
0000E14A                            loc_D9C6:
0000E14A 4A28 0004                  		tst.b	4(a0)
0000E14E 6A00                       		bpl.s	loc_D9D0
0000E150 522A 0001                  		addq.b	#1,1(a2)
0000E154                            
0000E154                            loc_D9D0:
0000E154 5C48                       		addq.w	#6,a0
0000E156                            
0000E156                            loc_D9D2:
0000E156 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E15A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E15E 0646 0300                  		addi.w	#$300,d6
0000E162                            
0000E162                            loc_D9DE:
0000E162 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E166 6E00                       		bgt.s	loc_D9F0
0000E168 4A28 FFFE                  		tst.b	-2(a0)
0000E16C 6A00                       		bpl.s	loc_D9EC
0000E16E 5312                       		subq.b	#1,(a2)
0000E170                            
0000E170                            loc_D9EC:
0000E170 5D48                       		subq.w	#6,a0
0000E172 60EE                       		bra.s	loc_D9DE
0000E174                            ; ===========================================================================
0000E174                            
0000E174                            loc_D9F0:
0000E174 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E178 4E75                       		rts	
0000E17A                            ; ===========================================================================
0000E17A                            
0000E17A                            loc_D9F6:
0000E17A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E17E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E182 0646 0280                  		addi.w	#$280,d6
0000E186                            
0000E186                            loc_DA02:
0000E186 BC50                       		cmp.w	(a0),d6
0000E188 6300                       		bls.s	loc_DA16
0000E18A 4A28 0004                  		tst.b	4(a0)
0000E18E 6A00                       		bpl.s	loc_DA10
0000E190 1412                       		move.b	(a2),d2
0000E192 5212                       		addq.b	#1,(a2)
0000E194                            
0000E194                            loc_DA10:
0000E194 6100 0000                  		bsr.w	loc_DA3C
0000E198 67EC                       		beq.s	loc_DA02
0000E19A                            
0000E19A                            loc_DA16:
0000E19A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E19E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1A2 0446 0300                  		subi.w	#$300,d6
0000E1A6 6500                       		bcs.s	loc_DA36
0000E1A8                            
0000E1A8                            loc_DA24:
0000E1A8 BC50                       		cmp.w	(a0),d6
0000E1AA 6300                       		bls.s	loc_DA36
0000E1AC 4A28 0004                  		tst.b	4(a0)
0000E1B0 6A00                       		bpl.s	loc_DA32
0000E1B2 522A 0001                  		addq.b	#1,1(a2)
0000E1B6                            
0000E1B6                            loc_DA32:
0000E1B6 5C48                       		addq.w	#6,a0
0000E1B8 60EE                       		bra.s	loc_DA24
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            loc_DA36:
0000E1BA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1BE                            
0000E1BE                            locret_DA3A:
0000E1BE 4E75                       		rts	
0000E1C0                            ; ===========================================================================
0000E1C0                            
0000E1C0                            loc_DA3C:
0000E1C0 4A28 0004                  		tst.b	4(a0)
0000E1C4 6A00                       		bpl.s	OPL_MakeItem
0000E1C6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E1CC 6700                       		beq.s	OPL_MakeItem
0000E1CE 5C48                       		addq.w	#6,a0
0000E1D0 7000                       		moveq	#0,d0
0000E1D2 4E75                       		rts	
0000E1D4                            ; ===========================================================================
0000E1D4                            
0000E1D4                            OPL_MakeItem:
0000E1D4 6100 0000                  		bsr.w	SingleObjLoad
0000E1D8 6600                       		bne.s	locret_DA8A
0000E1DA 3358 0008                  		move.w	(a0)+,8(a1)
0000E1DE 3018                       		move.w	(a0)+,d0
0000E1E0 3200                       		move.w	d0,d1
0000E1E2 0240 0FFF                  		andi.w	#$FFF,d0
0000E1E6 3340 000C                  		move.w	d0,$C(a1)
0000E1EA E559                       		rol.w	#2,d1
0000E1EC 0201 0003                  		andi.b	#3,d1
0000E1F0 1341 0001                  		move.b	d1,1(a1)
0000E1F4 1341 0022                  		move.b	d1,$22(a1)
0000E1F8 1018                       		move.b	(a0)+,d0
0000E1FA 6A00                       		bpl.s	loc_DA80
0000E1FC 0200 007F                  		andi.b	#$7F,d0
0000E200 1342 0023                  		move.b	d2,$23(a1)
0000E204                            
0000E204                            loc_DA80:
0000E204 1280                       		move.b	d0,0(a1)
0000E206 1358 0028                  		move.b	(a0)+,$28(a1)
0000E20A 7000                       		moveq	#0,d0
0000E20C                            
0000E20C                            locret_DA8A:
0000E20C 4E75                       		rts	
0000E20E                            ; ---------------------------------------------------------------------------
0000E20E                            ; Single object	loading	subroutine
0000E20E                            ; ---------------------------------------------------------------------------
0000E20E                            
0000E20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E20E                            
0000E20E                            
0000E20E                            SingleObjLoad:
0000E20E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E212 303C 005F                  		move.w	#$5F,d0
0000E216                            
0000E216                            loc_DA94:
0000E216 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E218 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E21A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E21E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E222                            
0000E222                            locret_DAA0:
0000E222 4E75                       		rts	
0000E224                            ; End of function SingleObjLoad
0000E224                            
0000E224                            
0000E224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E224                            
0000E224                            
0000E224                            SingleObjLoad2:
0000E224 2248                       		movea.l	a0,a1
0000E226 303C F000                  		move.w	#-$1000,d0
0000E22A 9048                       		sub.w	a0,d0
0000E22C EC48                       		lsr.w	#6,d0
0000E22E 5340                       		subq.w	#1,d0
0000E230 6500                       		bcs.s	locret_DABC
0000E232                            
0000E232                            loc_DAB0:
0000E232 4A11                       		tst.b	(a1)
0000E234 6700                       		beq.s	locret_DABC
0000E236 43E9 0040                  		lea	$40(a1),a1
0000E23A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E23E                            
0000E23E                            locret_DABC:
0000E23E 4E75                       		rts	
0000E240                            ; End of function SingleObjLoad2
0000E240                            
0000E240                            ; ===========================================================================
0000E240                            ; ---------------------------------------------------------------------------
0000E240                            ; Object 41 - springs
0000E240                            ; ---------------------------------------------------------------------------
0000E240                            
0000E240                            Obj41:					; XREF: Obj_Index
0000E240 7000                       		moveq	#0,d0
0000E242 1028 0024                  		move.b	$24(a0),d0
0000E246 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E24A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E24E 6100 FB32                  		bsr.w	DisplaySprite
0000E252 3028 0008                  		move.w	8(a0),d0
0000E256 0240 FF80                  		andi.w	#$FF80,d0
0000E25A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E25E 0441 0080                  		subi.w	#$80,d1
0000E262 0241 FF80                  		andi.w	#$FF80,d1
0000E266 9041                       		sub.w	d1,d0
0000E268 0C40 0280                  		cmpi.w	#$280,d0
0000E26C 6200 FB50                  		bhi.w	DeleteObject
0000E270 4E75                       		rts	
0000E272                            ; ===========================================================================
0000E272 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E274 0000                       		dc.w Obj41_Up-Obj41_Index
0000E276 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E278 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E27A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E27C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E27E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E280 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E282 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E284 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E286                            
0000E286 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E288 F600                       		dc.w -$A00		; power	of yellow spring
0000E28A                            ; ===========================================================================
0000E28A                            
0000E28A                            Obj41_Main:				; XREF: Obj41_Index
0000E28A 5428 0024                  		addq.b	#2,$24(a0)
0000E28E 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E296 317C 0523 0002             		move.w	#$523,2(a0)
0000E29C 0028 0004 0001             		ori.b	#4,1(a0)
0000E2A2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E2A8 117C 0004 0018             		move.b	#4,$18(a0)
0000E2AE 1028 0028                  		move.b	$28(a0),d0
0000E2B2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E2B6 6700                       		beq.s	loc_DB54	; if not, branch
0000E2B8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E2BE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E2C4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E2CA 317C 0533 0002             		move.w	#$533,2(a0)
0000E2D0 117C 0008 0019             		move.b	#8,$19(a0)
0000E2D6                            
0000E2D6                            loc_DB54:
0000E2D6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E2DA 6700                       		beq.s	loc_DB66	; if not, branch
0000E2DC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E2E2 08E8 0001 0022             		bset	#1,$22(a0)
0000E2E8                            
0000E2E8                            loc_DB66:
0000E2E8 0800 0001                  		btst	#1,d0
0000E2EC 6700                       		beq.s	loc_DB72
0000E2EE 08E8 0005 0002             		bset	#5,2(a0)
0000E2F4                            
0000E2F4                            loc_DB72:
0000E2F4 0240 000F                  		andi.w	#$F,d0
0000E2F8 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E2FE 4E75                       		rts	
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            Obj41_Up:				; XREF: Obj41_Index
0000E300 323C 001B                  		move.w	#$1B,d1
0000E304 343C 0008                  		move.w	#8,d2
0000E308 363C 0010                  		move.w	#$10,d3
0000E30C 3828 0008                  		move.w	8(a0),d4
0000E310 6100 0000                  		bsr.w	SolidObject
0000E314 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E318 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E31A 4E75                       		rts	
0000E31C                            ; ===========================================================================
0000E31C                            
0000E31C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E31C 5428 0024                  		addq.b	#2,$24(a0)
0000E320 5069 000C                  		addq.w	#8,$C(a1)
0000E324 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E32A 08E9 0001 0022             		bset	#1,$22(a1)
0000E330 08A9 0003 0022             		bclr	#3,$22(a1)
0000E336 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E33C 137C 0002 0024             		move.b	#2,$24(a1)
0000E342 08A8 0003 0022             		bclr	#3,$22(a0)
0000E348 4228 0025                  		clr.b	$25(a0)
0000E34C 303C 00CC                  		move.w	#$CC,d0
0000E350 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
0000E356                            
0000E356                            Obj41_AniUp:				; XREF: Obj41_Index
0000E356 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E35C 6000 CB1C                  		bra.w	AnimateSprite
0000E360                            ; ===========================================================================
0000E360                            
0000E360                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E360 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E366 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E36A 4E75                       		rts	
0000E36C                            ; ===========================================================================
0000E36C                            
0000E36C                            Obj41_LR:				; XREF: Obj41_Index
0000E36C 323C 0013                  		move.w	#$13,d1
0000E370 343C 000E                  		move.w	#$E,d2
0000E374 363C 000F                  		move.w	#$F,d3
0000E378 3828 0008                  		move.w	8(a0),d4
0000E37C 6100 0000                  		bsr.w	SolidObject
0000E380 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E386 6600                       		bne.s	loc_DC0C
0000E388 117C 0008 0024             		move.b	#8,$24(a0)
0000E38E                            
0000E38E                            loc_DC0C:
0000E38E 0828 0005 0022             		btst	#5,$22(a0)
0000E394 6600                       		bne.s	Obj41_BounceLR
0000E396 4E75                       		rts	
0000E398                            ; ===========================================================================
0000E398                            
0000E398                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E398 5428 0024                  		addq.b	#2,$24(a0)
0000E39C 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E3A2 5069 0008                  		addq.w	#8,8(a1)
0000E3A6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E3AC 6600                       		bne.s	loc_DC36	; if yes, branch
0000E3AE 0469 0010 0008             		subi.w	#$10,8(a1)
0000E3B4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E3B8                            
0000E3B8                            loc_DC36:
0000E3B8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E3BE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E3C4 0869 0000 0022             		bchg	#0,$22(a1)
0000E3CA 0829 0002 0022             		btst	#2,$22(a1)
0000E3D0 6600                       		bne.s	loc_DC56
0000E3D2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E3D8                            
0000E3D8                            loc_DC56:
0000E3D8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E3DE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E3E4 303C 00CC                  		move.w	#$CC,d0
0000E3E8 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3EE                            
0000E3EE                            Obj41_AniLR:				; XREF: Obj41_Index
0000E3EE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3F4 6000 CA84                  		bra.w	AnimateSprite
0000E3F8                            ; ===========================================================================
0000E3F8                            
0000E3F8                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E3F8 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E3FE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E402 4E75                       		rts	
0000E404                            ; ===========================================================================
0000E404                            
0000E404                            Obj41_Dwn:				; XREF: Obj41_Index
0000E404 323C 001B                  		move.w	#$1B,d1
0000E408 343C 0008                  		move.w	#8,d2
0000E40C 363C 0010                  		move.w	#$10,d3
0000E410 3828 0008                  		move.w	8(a0),d4
0000E414 6100 0000                  		bsr.w	SolidObject
0000E418 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E41E 6600                       		bne.s	loc_DCA4
0000E420 117C 000E 0024             		move.b	#$E,$24(a0)
0000E426                            
0000E426                            loc_DCA4:
0000E426 4A28 0025                  		tst.b	$25(a0)
0000E42A 6600                       		bne.s	locret_DCAE
0000E42C 4A44                       		tst.w	d4
0000E42E 6B00                       		bmi.s	Obj41_BounceDwn
0000E430                            
0000E430                            locret_DCAE:
0000E430 4E75                       		rts	
0000E432                            ; ===========================================================================
0000E432                            
0000E432                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E432 5428 0024                  		addq.b	#2,$24(a0)
0000E436 5169 000C                  		subq.w	#8,$C(a1)
0000E43A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E440 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E444 08E9 0001 0022             		bset	#1,$22(a1)
0000E44A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E450 137C 0002 0024             		move.b	#2,$24(a1)
0000E456 08A8 0003 0022             		bclr	#3,$22(a0)
0000E45C 4228 0025                  		clr.b	$25(a0)
0000E460 303C 00CC                  		move.w	#$CC,d0
0000E464 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
0000E46A                            
0000E46A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E46A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E470 6000 CA08                  		bra.w	AnimateSprite
0000E474                            ; ===========================================================================
0000E474                            
0000E474                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E474 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E47A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E47E 4E75                       		rts	
0000E480                            ; ===========================================================================
0000E480                            Ani_obj41:
0000E480                            	include "_anim\obj41.asm"
0000E480                            ; ---------------------------------------------------------------------------
0000E480                            ; Animation script - springs
0000E480                            ; ---------------------------------------------------------------------------
0000E480 0000                       		dc.w byte_DD02-Ani_obj41
0000E482 0000                       		dc.w byte_DD0E-Ani_obj41
0000E484 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E490 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E49C                            		even
0000E49C                            		even
0000E49C                            
0000E49C                            ; ---------------------------------------------------------------------------
0000E49C                            ; Sprite mappings - springs
0000E49C                            ; ---------------------------------------------------------------------------
0000E49C                            Map_obj41:
0000E49C                            	include "_maps\obj41.asm"
0000E49C                            ; ---------------------------------------------------------------------------
0000E49C                            ; Sprite mappings - springs
0000E49C                            ; ---------------------------------------------------------------------------
0000E49C 0000                       		dc.w byte_DD26-Map_obj41
0000E49E 0000                       		dc.w byte_DD31-Map_obj41
0000E4A0 0000                       		dc.w byte_DD37-Map_obj41
0000E4A2 0000                       		dc.w byte_DD47-Map_obj41
0000E4A4 0000                       		dc.w byte_DD4D-Map_obj41
0000E4A6 0000                       		dc.w byte_DD53-Map_obj41
0000E4A8 02                         byte_DD26:	dc.b 2
0000E4A9 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E4AE 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E4B3 01                         byte_DD31:	dc.b 1
0000E4B4 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E4B9 03                         byte_DD37:	dc.b 3
0000E4BA E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E4BF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E4C4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E4C9 01                         byte_DD47:	dc.b 1
0000E4CA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E4CF 01                         byte_DD4D:	dc.b 1
0000E4D0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E4D5 04                         byte_DD53:	dc.b 4
0000E4D6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E4DB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E4E0 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E4E5 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E4EA                            		even
0000E4EA                            		even
0000E4EA                            
0000E4EA                            ; ===========================================================================
0000E4EA                            ; ---------------------------------------------------------------------------
0000E4EA                            ; Object 42 - Newtron enemy (GHZ)
0000E4EA                            ; ---------------------------------------------------------------------------
0000E4EA                            
0000E4EA                            Obj42:					; XREF: Obj_Index
0000E4EA 7000                       		moveq	#0,d0
0000E4EC 1028 0024                  		move.b	$24(a0),d0
0000E4F0 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E4F4 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E4F8                            ; ===========================================================================
0000E4F8 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E4FA 0000                       		dc.w Obj42_Action-Obj42_Index
0000E4FC 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E4FE                            ; ===========================================================================
0000E4FE                            
0000E4FE                            Obj42_Main:				; XREF: Obj42_Index
0000E4FE 5428 0024                  		addq.b	#2,$24(a0)
0000E502 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E50A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E510 117C 0004 0001             		move.b	#4,1(a0)
0000E516 117C 0004 0018             		move.b	#4,$18(a0)
0000E51C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E522 117C 0010 0016             		move.b	#$10,$16(a0)
0000E528 117C 0008 0017             		move.b	#8,$17(a0)
0000E52E                            
0000E52E                            Obj42_Action:				; XREF: Obj42_Index
0000E52E 7000                       		moveq	#0,d0
0000E530 1028 0025                  		move.b	$25(a0),d0
0000E534 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E538 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E53C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E542 6100 C936                  		bsr.w	AnimateSprite
0000E546 6000 0000                  		bra.w	MarkObjGone
0000E54A                            ; ===========================================================================
0000E54A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E54C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E54E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E550 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E552 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E554                            ; ===========================================================================
0000E554                            
0000E554                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E554 08E8 0000 0022             		bset	#0,$22(a0)
0000E55A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E55E 9068 0008                  		sub.w	8(a0),d0
0000E562 6400                       		bcc.s	loc_DDEA
0000E564 4440                       		neg.w	d0
0000E566 08A8 0000 0022             		bclr	#0,$22(a0)
0000E56C                            
0000E56C                            loc_DDEA:
0000E56C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E570 6400                       		bcc.s	locret_DE12	; if not, branch
0000E572 5428 0025                  		addq.b	#2,$25(a0)
0000E576 117C 0001 001C             		move.b	#1,$1C(a0)
0000E57C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E580 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E582 317C 249B 0002             		move.w	#$249B,2(a0)
0000E588 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E58E 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E594                            
0000E594                            locret_DE12:
0000E594 4E75                       		rts	
0000E596                            ; ===========================================================================
0000E596                            
0000E596                            Obj42_Type00:				; XREF: Obj42_Index2
0000E596 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E59C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E59E 08E8 0000 0022             		bset	#0,$22(a0)
0000E5A4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5A8 9068 0008                  		sub.w	8(a0),d0
0000E5AC 6400                       		bcc.s	locret_DE32
0000E5AE 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5B4                            
0000E5B4                            locret_DE32:
0000E5B4 4E75                       		rts	
0000E5B6                            ; ===========================================================================
0000E5B6                            
0000E5B6                            Obj42_Fall:				; XREF: Obj42_Type00
0000E5B6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E5BC 6600                       		bne.s	loc_DE42
0000E5BE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E5C4                            
0000E5C4                            loc_DE42:
0000E5C4 6100 F76A                  		bsr.w	ObjectFall
0000E5C8 6100 0000                  		bsr.w	ObjHitFloor
0000E5CC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E5CE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E5D0 D368 000C                  		add.w	d1,$C(a0)
0000E5D4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E5DA 5428 0025                  		addq.b	#2,$25(a0)
0000E5DE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5E4 0828 0005 0002             		btst	#5,2(a0)
0000E5EA 6700                       		beq.s	Obj42_Move
0000E5EC 5228 001C                  		addq.b	#1,$1C(a0)
0000E5F0                            
0000E5F0                            Obj42_Move:
0000E5F0 117C 000D 0020             		move.b	#$D,$20(a0)
0000E5F6 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E5FC 0828 0000 0022             		btst	#0,$22(a0)
0000E602 6600                       		bne.s	locret_DE86
0000E604 4468 0010                  		neg.w	$10(a0)
0000E608                            
0000E608                            locret_DE86:
0000E608 4E75                       		rts	
0000E60A                            ; ===========================================================================
0000E60A                            
0000E60A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E60A 6100 F750                  		bsr.w	SpeedToPos
0000E60E 6100 0000                  		bsr.w	ObjHitFloor
0000E612 0C41 FFF8                  		cmpi.w	#-8,d1
0000E616 6D00                       		blt.s	loc_DEA2
0000E618 0C41 000C                  		cmpi.w	#$C,d1
0000E61C 6C00                       		bge.s	loc_DEA2
0000E61E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E622 4E75                       		rts	
0000E624                            ; ===========================================================================
0000E624                            
0000E624                            loc_DEA2:
0000E624 5428 0025                  		addq.b	#2,$25(a0)
0000E628 4E75                       		rts	
0000E62A                            ; ===========================================================================
0000E62A                            
0000E62A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E62A 6100 F730                  		bsr.w	SpeedToPos
0000E62E 4E75                       		rts	
0000E630                            ; ===========================================================================
0000E630                            
0000E630                            Obj42_Type01:				; XREF: Obj42_Index2
0000E630 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E636 6600                       		bne.s	Obj42_FireMissile
0000E638 117C 000C 0020             		move.b	#$C,$20(a0)
0000E63E                            
0000E63E                            Obj42_FireMissile:
0000E63E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E644 6600                       		bne.s	locret_DF14
0000E646 4A28 0032                  		tst.b	$32(a0)
0000E64A 6600                       		bne.s	locret_DF14
0000E64C 117C 0001 0032             		move.b	#1,$32(a0)
0000E652 6100 FBBA                  		bsr.w	SingleObjLoad
0000E656 6600                       		bne.s	locret_DF14
0000E658 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E65C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E662 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E668 5169 000C                  		subq.w	#8,$C(a1)
0000E66C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E672 303C 0014                  		move.w	#$14,d0
0000E676 0828 0000 0022             		btst	#0,$22(a0)
0000E67C 6600                       		bne.s	loc_DF04
0000E67E 4440                       		neg.w	d0
0000E680 4469 0010                  		neg.w	$10(a1)
0000E684                            
0000E684                            loc_DF04:
0000E684 D169 0008                  		add.w	d0,8(a1)
0000E688 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E68E 137C 0001 0028             		move.b	#1,$28(a1)
0000E694                            
0000E694                            locret_DF14:
0000E694 4E75                       		rts	
0000E696                            ; ===========================================================================
0000E696                            
0000E696                            Obj42_Delete:				; XREF: Obj42_Index
0000E696 6000 F726                  		bra.w	DeleteObject
0000E69A                            ; ===========================================================================
0000E69A                            Ani_obj42:
0000E69A                            	include "_anim\obj42.asm"
0000E69A                            ; ---------------------------------------------------------------------------
0000E69A                            ; Animation script - Newtron enemy
0000E69A                            ; ---------------------------------------------------------------------------
0000E69A 0000                       		dc.w byte_DF24-Ani_obj42
0000E69C 0000                       		dc.w byte_DF28-Ani_obj42
0000E69E 0000                       		dc.w byte_DF30-Ani_obj42
0000E6A0 0000                       		dc.w byte_DF34-Ani_obj42
0000E6A2 0000                       		dc.w byte_DF38-Ani_obj42
0000E6A4 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E6A8 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E6B0 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E6B4 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E6B8 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E6C2                            		even
0000E6C2                            		even
0000E6C2                            
0000E6C2                            ; ---------------------------------------------------------------------------
0000E6C2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6C2                            ; ---------------------------------------------------------------------------
0000E6C2                            Map_obj42:
0000E6C2                            	include "_maps\obj42.asm"
0000E6C2                            ; ---------------------------------------------------------------------------
0000E6C2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6C2                            ; ---------------------------------------------------------------------------
0000E6C2 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E6C6 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E6CA 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E6CE 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E6D2 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E6D6 0000                       		dc.w byte_DFF8-Map_obj42
0000E6D8 03                         byte_DF58:	dc.b 3
0000E6D9 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E6DE F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E6E3 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E6E8 03                         byte_DF68:	dc.b 3
0000E6E9 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E6EE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E6F3 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E6F8 03                         byte_DF78:	dc.b 3
0000E6F9 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E6FE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E703 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E708 04                         byte_DF88:	dc.b 4
0000E709 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E70E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E713 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E718 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E71D 03                         byte_DF9D:	dc.b 3
0000E71E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E723 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E728 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E72D 02                         byte_DFAD:	dc.b 2
0000E72E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E733 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E738 03                         byte_DFB8:	dc.b 3
0000E739 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E73E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E743 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E748 03                         byte_DFC8:	dc.b 3
0000E749 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E74E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E753 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E758 03                         byte_DFD8:	dc.b 3
0000E759 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E75E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E763 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E768 03                         byte_DFE8:	dc.b 3
0000E769 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E76E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E773 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E778 00                         byte_DFF8:	dc.b 0
0000E77A 00                         		even
0000E77A 00                         		even
0000E77A                            
0000E77A                            ; ===========================================================================
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A                            ; Object 43 - Roller enemy (SYZ)
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A                            
0000E77A                            Obj43:					; XREF: Obj_Index
0000E77A 7000                       		moveq	#0,d0
0000E77C 1028 0024                  		move.b	$24(a0),d0
0000E780 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E784 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E788                            ; ===========================================================================
0000E788 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E78A 0000                       		dc.w Obj43_Action-Obj43_Index
0000E78C                            ; ===========================================================================
0000E78C                            
0000E78C                            Obj43_Main:				; XREF: Obj43_Index
0000E78C 117C 000E 0016             		move.b	#$E,$16(a0)
0000E792 117C 0008 0017             		move.b	#8,$17(a0)
0000E798 6100 F596                  		bsr.w	ObjectFall
0000E79C 6100 0000                  		bsr.w	ObjHitFloor
0000E7A0 4A41                       		tst.w	d1
0000E7A2 6A00                       		bpl.s	locret_E052
0000E7A4 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E7A8 317C 0000 0012             		move.w	#0,$12(a0)
0000E7AE 5428 0024                  		addq.b	#2,$24(a0)
0000E7B2 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E7BA 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E7C0 117C 0004 0001             		move.b	#4,1(a0)
0000E7C6 117C 0004 0018             		move.b	#4,$18(a0)
0000E7CC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7D2                            
0000E7D2                            locret_E052:
0000E7D2 4E75                       		rts	
0000E7D4                            ; ===========================================================================
0000E7D4                            
0000E7D4                            Obj43_Action:				; XREF: Obj43_Index
0000E7D4 7000                       		moveq	#0,d0
0000E7D6 1028 0025                  		move.b	$25(a0),d0
0000E7DA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E7DE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E7E2 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E7E8 6100 C690                  		bsr.w	AnimateSprite
0000E7EC 3028 0008                  		move.w	8(a0),d0
0000E7F0 0240 FF80                  		andi.w	#$FF80,d0
0000E7F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7F8 0441 0080                  		subi.w	#$80,d1
0000E7FC 0241 FF80                  		andi.w	#$FF80,d1
0000E800 9041                       		sub.w	d1,d0
0000E802 0C40 0280                  		cmpi.w	#$280,d0
0000E806 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E80A 6000 F576                  		bra.w	DisplaySprite
0000E80E                            ; ===========================================================================
0000E80E                            
0000E80E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E80E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E812 7000                       		moveq	#0,d0
0000E814 1028 0023                  		move.b	$23(a0),d0
0000E818 6700                       		beq.s	Obj43_Delete
0000E81A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E820                            
0000E820                            Obj43_Delete:
0000E820 6000 F59C                  		bra.w	DeleteObject
0000E824                            ; ===========================================================================
0000E824 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E826 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E828 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E82A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E82C                            ; ===========================================================================
0000E82C                            
0000E82C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E82C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E830 0440 0100                  		subi.w	#$100,d0
0000E834 6500                       		bcs.s	loc_E0D2
0000E836 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E83A 6500                       		bcs.s	loc_E0D2
0000E83C 5828 0025                  		addq.b	#4,$25(a0)
0000E840 117C 0002 001C             		move.b	#2,$1C(a0)
0000E846 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E84C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E852                            
0000E852                            loc_E0D2:
0000E852 588F                       		addq.l	#4,sp
0000E854 4E75                       		rts	
0000E856                            ; ===========================================================================
0000E856                            
0000E856                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E856 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E85C 6700                       		beq.s	loc_E0F8
0000E85E 5368 0030                  		subq.w	#1,$30(a0)
0000E862 6A00                       		bpl.s	locret_E0F6
0000E864 117C 0001 001C             		move.b	#1,$1C(a0)
0000E86A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E870 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E876                            
0000E876                            locret_E0F6:
0000E876 4E75                       		rts	
0000E878                            ; ===========================================================================
0000E878                            
0000E878                            loc_E0F8:
0000E878 5428 0025                  		addq.b	#2,$25(a0)
0000E87C 4E75                       		rts	
0000E87E                            ; ===========================================================================
0000E87E                            
0000E87E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E87E 6100 0000                  		bsr.w	Obj43_Stop
0000E882 6100 F4D8                  		bsr.w	SpeedToPos
0000E886 6100 0000                  		bsr.w	ObjHitFloor
0000E88A 0C41 FFF8                  		cmpi.w	#-8,d1
0000E88E 6D00                       		blt.s	Obj43_Jump
0000E890 0C41 000C                  		cmpi.w	#$C,d1
0000E894 6C00                       		bge.s	Obj43_Jump
0000E896 D368 000C                  		add.w	d1,$C(a0)
0000E89A 4E75                       		rts	
0000E89C                            ; ===========================================================================
0000E89C                            
0000E89C                            Obj43_Jump:
0000E89C 5428 0025                  		addq.b	#2,$25(a0)
0000E8A0 08E8 0000 0032             		bset	#0,$32(a0)
0000E8A6 6700                       		beq.s	locret_E12E
0000E8A8 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E8AE                            
0000E8AE                            locret_E12E:
0000E8AE 4E75                       		rts	
0000E8B0                            ; ===========================================================================
0000E8B0                            
0000E8B0                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E8B0 6100 F47E                  		bsr.w	ObjectFall
0000E8B4 4A68 0012                  		tst.w	$12(a0)
0000E8B8 6B00                       		bmi.s	locret_E150
0000E8BA 6100 0000                  		bsr.w	ObjHitFloor
0000E8BE 4A41                       		tst.w	d1
0000E8C0 6A00                       		bpl.s	locret_E150
0000E8C2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E8C6 5528 0025                  		subq.b	#2,$25(a0)
0000E8CA 317C 0000 0012             		move.w	#0,$12(a0)
0000E8D0                            
0000E8D0                            locret_E150:
0000E8D0 4E75                       		rts	
0000E8D2                            
0000E8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8D2                            
0000E8D2                            
0000E8D2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E8D2 4A28 0032                  		tst.b	$32(a0)
0000E8D6 6B00                       		bmi.s	locret_E188
0000E8D8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8DC 0440 0030                  		subi.w	#$30,d0
0000E8E0 9068 0008                  		sub.w	8(a0),d0
0000E8E4 6400                       		bcc.s	locret_E188
0000E8E6 117C 0000 001C             		move.b	#0,$1C(a0)
0000E8EC 117C 000E 0020             		move.b	#$E,$20(a0)
0000E8F2 4268 0010                  		clr.w	$10(a0)
0000E8F6 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E8FC 117C 0002 0025             		move.b	#2,$25(a0)
0000E902 08E8 0007 0032             		bset	#7,$32(a0)
0000E908                            
0000E908                            locret_E188:
0000E908 4E75                       		rts	
0000E90A                            ; End of function Obj43_Stop
0000E90A                            
0000E90A                            ; ===========================================================================
0000E90A                            Ani_obj43:
0000E90A                            	include "_anim\obj43.asm"
0000E90A                            ; ---------------------------------------------------------------------------
0000E90A                            ; Animation script - Roller enemy
0000E90A                            ; ---------------------------------------------------------------------------
0000E90A 0000                       		dc.w byte_E190-Ani_obj43
0000E90C 0000                       		dc.w byte_E196-Ani_obj43
0000E90E 0000                       		dc.w byte_E19C-Ani_obj43
0000E910 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E916 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E91C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E922 00                         		even
0000E922 00                         		even
0000E922                            
0000E922                            ; ---------------------------------------------------------------------------
0000E922                            ; Sprite mappings - Roller enemy (SYZ)
0000E922                            ; ---------------------------------------------------------------------------
0000E922                            Map_obj43:
0000E922                            	include "_maps\obj43.asm"
0000E922                            ; ---------------------------------------------------------------------------
0000E922                            ; Sprite mappings - Roller enemy (SYZ)
0000E922                            ; ---------------------------------------------------------------------------
0000E922 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E926 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E92A 0000                       		dc.w byte_E1CE-Map_obj43
0000E92C 02                         byte_E1AC:	dc.b 2
0000E92D DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E932 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E937 02                         byte_E1B7:	dc.b 2
0000E938 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E93D FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E942 01                         byte_E1C2:	dc.b 1
0000E943 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E948 01                         byte_E1C8:	dc.b 1
0000E949 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E94E 01                         byte_E1CE:	dc.b 1
0000E94F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E954                            		even
0000E954                            		even
0000E954                            
0000E954                            ; ===========================================================================
0000E954                            ; ---------------------------------------------------------------------------
0000E954                            ; Object 44 - walls (GHZ)
0000E954                            ; ---------------------------------------------------------------------------
0000E954                            
0000E954                            Obj44:					; XREF: Obj_Index
0000E954 7000                       		moveq	#0,d0
0000E956 1028 0024                  		move.b	$24(a0),d0
0000E95A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E95E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E962                            ; ===========================================================================
0000E962 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E964 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E966 0000                       		dc.w Obj44_Display-Obj44_Index
0000E968                            ; ===========================================================================
0000E968                            
0000E968                            Obj44_Main:				; XREF: Obj44_Index
0000E968 5428 0024                  		addq.b	#2,$24(a0)
0000E96C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E974 317C 434C 0002             		move.w	#$434C,2(a0)
0000E97A 0028 0004 0001             		ori.b	#4,1(a0)
0000E980 117C 0008 0019             		move.b	#8,$19(a0)
0000E986 117C 0006 0018             		move.b	#6,$18(a0)
0000E98C 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E992 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E998 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E99A 5428 0024                  		addq.b	#2,$24(a0)
0000E99E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E9A0                            ; ===========================================================================
0000E9A0                            
0000E9A0                            Obj44_Solid:				; XREF: Obj44_Index
0000E9A0 323C 0013                  		move.w	#$13,d1
0000E9A4 343C 0028                  		move.w	#$28,d2
0000E9A8 6100 A816                  		bsr.w	Obj44_SolidWall
0000E9AC                            
0000E9AC                            Obj44_Display:				; XREF: Obj44_Index
0000E9AC 6100 F3D4                  		bsr.w	DisplaySprite
0000E9B0 3028 0008                  		move.w	8(a0),d0
0000E9B4 0240 FF80                  		andi.w	#$FF80,d0
0000E9B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9BC 0441 0080                  		subi.w	#$80,d1
0000E9C0 0241 FF80                  		andi.w	#$FF80,d1
0000E9C4 9041                       		sub.w	d1,d0
0000E9C6 0C40 0280                  		cmpi.w	#$280,d0
0000E9CA 6200 F3F2                  		bhi.w	DeleteObject
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            ; ---------------------------------------------------------------------------
0000E9D0                            ; Sprite mappings - walls (GHZ)
0000E9D0                            ; ---------------------------------------------------------------------------
0000E9D0                            Map_obj44:
0000E9D0                            	include "_maps\obj44.asm"
0000E9D0                            ; ---------------------------------------------------------------------------
0000E9D0                            ; Sprite mappings - walls (GHZ)
0000E9D0                            ; ---------------------------------------------------------------------------
0000E9D0 0000                       		dc.w byte_E256-Map_obj44
0000E9D2 0000                       		dc.w byte_E26B-Map_obj44
0000E9D4 0000                       		dc.w byte_E280-Map_obj44
0000E9D6 04                         byte_E256:	dc.b 4
0000E9D7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E9DC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9E1 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9E6 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E9EB 04                         byte_E26B:	dc.b 4
0000E9EC E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E9F1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E9F6 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E9FB 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA00 04                         byte_E280:	dc.b 4
0000EA01 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EA06 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EA0B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EA10 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA16 00                         		even
0000EA16 00                         		even
0000EA16                            
0000EA16                            ; ===========================================================================
0000EA16                            ; ---------------------------------------------------------------------------
0000EA16                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA16                            ; ---------------------------------------------------------------------------
0000EA16                            
0000EA16                            Obj13:					; XREF: Obj_Index
0000EA16 7000                       		moveq	#0,d0
0000EA18 1028 0024                  		move.b	$24(a0),d0
0000EA1C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA20 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA24 6000 0000                  		bra.w	Obj14_ChkDel
0000EA28                            ; ===========================================================================
0000EA28 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA2A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ;
0000EA2C                            ; Lava ball production rates
0000EA2C                            ;
0000EA2C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA32                            ; ===========================================================================
0000EA32                            
0000EA32                            Obj13_Main:				; XREF: Obj13_Index
0000EA32 5428 0024                  		addq.b	#2,$24(a0)
0000EA36 1028 0028                  		move.b	$28(a0),d0
0000EA3A E848                       		lsr.w	#4,d0
0000EA3C 0240 000F                  		andi.w	#$F,d0
0000EA40 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA46 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA4C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA52                            
0000EA52                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA52 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA56 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA58 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA5E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EA62 6600                       		bne.s	locret_E302
0000EA64 6100 F7A8                  		bsr.w	SingleObjLoad
0000EA68 6600                       		bne.s	locret_E302
0000EA6A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EA6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA7A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EA80                            
0000EA80                            locret_E302:
0000EA80 4E75                       		rts	
0000EA82                            ; ===========================================================================
0000EA82                            ; ---------------------------------------------------------------------------
0000EA82                            ; Object 14 - lava balls (MZ, SLZ)
0000EA82                            ; ---------------------------------------------------------------------------
0000EA82                            
0000EA82                            Obj14:					; XREF: Obj_Index
0000EA82 7000                       		moveq	#0,d0
0000EA84 1028 0024                  		move.b	$24(a0),d0
0000EA88 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EA8C 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EA90 6000 F2F0                  		bra.w	DisplaySprite
0000EA94                            ; ===========================================================================
0000EA94 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EA96 0000                       		dc.w Obj14_Action-Obj14_Index
0000EA98 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EA9A                            
0000EA9A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EAA4 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EAAC                            ; ===========================================================================
0000EAAC                            
0000EAAC                            Obj14_Main:				; XREF: Obj14_Index
0000EAAC 5428 0024                  		addq.b	#2,$24(a0)
0000EAB0 117C 0008 0016             		move.b	#8,$16(a0)
0000EAB6 117C 0008 0017             		move.b	#8,$17(a0)
0000EABC 217C 0000 BACC 0004        		move.l	#Map_obj14,4(a0)
0000EAC4 317C 0345 0002             		move.w	#$345,2(a0)
0000EACA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EAD0 6600                       		bne.s	loc_E35A
0000EAD2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EAD8                            
0000EAD8                            loc_E35A:
0000EAD8 117C 0004 0001             		move.b	#4,1(a0)
0000EADE 117C 0003 0018             		move.b	#3,$18(a0)
0000EAE4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EAEA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAF0 4A28 0029                  		tst.b	$29(a0)
0000EAF4 6700                       		beq.s	Obj14_SetSpeed
0000EAF6 5428 0018                  		addq.b	#2,$18(a0)
0000EAFA                            
0000EAFA                            Obj14_SetSpeed:
0000EAFA 7000                       		moveq	#0,d0
0000EAFC 1028 0028                  		move.b	$28(a0),d0
0000EB00 D040                       		add.w	d0,d0
0000EB02 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EB08 117C 0008 0019             		move.b	#8,$19(a0)
0000EB0E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EB14 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB16 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB1C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB22 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB28 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB2E                            
0000EB2E                            Obj14_PlaySnd:
0000EB2E 303C 00AE                  		move.w	#$AE,d0
0000EB32 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB38                            
0000EB38                            Obj14_Action:				; XREF: Obj14_Index
0000EB38 7000                       		moveq	#0,d0
0000EB3A 1028 0028                  		move.b	$28(a0),d0
0000EB3E D040                       		add.w	d0,d0
0000EB40 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB44 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB48 6100 F212                  		bsr.w	SpeedToPos
0000EB4C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB52 6100 C326                  		bsr.w	AnimateSprite
0000EB56                            
0000EB56                            Obj14_ChkDel:				; XREF: Obj13
0000EB56 3028 0008                  		move.w	8(a0),d0
0000EB5A 0240 FF80                  		andi.w	#$FF80,d0
0000EB5E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB62 0441 0080                  		subi.w	#$80,d1
0000EB66 0241 FF80                  		andi.w	#$FF80,d1
0000EB6A 9041                       		sub.w	d1,d0
0000EB6C 0C40 0280                  		cmpi.w	#$280,d0
0000EB70 6200 F24C                  		bhi.w	DeleteObject
0000EB74 4E75                       		rts	
0000EB76                            ; ===========================================================================
0000EB76 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB7A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EB7E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EB82 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EB86 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EB88                            ; ===========================================================================
0000EB88                            ; lavaball types 00-03 fly up and fall back down
0000EB88                            
0000EB88                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EB88 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EB8E 3028 0030                  		move.w	$30(a0),d0
0000EB92 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EB96 6400                       		bcc.s	loc_E41E	; if not, branch
0000EB98 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EB9C                            
0000EB9C                            loc_E41E:
0000EB9C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBA2 4A68 0012                  		tst.w	$12(a0)
0000EBA6 6A00                       		bpl.s	locret_E430
0000EBA8 08E8 0001 0022             		bset	#1,$22(a0)
0000EBAE                            
0000EBAE                            locret_E430:
0000EBAE 4E75                       		rts	
0000EBB0                            ; ===========================================================================
0000EBB0                            ; lavaball type	04 flies up until it hits the ceiling
0000EBB0                            
0000EBB0                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EBB0 08E8 0001 0022             		bset	#1,$22(a0)
0000EBB6 6100 0000                  		bsr.w	ObjHitCeiling
0000EBBA 4A41                       		tst.w	d1
0000EBBC 6A00                       		bpl.s	locret_E452
0000EBBE 117C 0008 0028             		move.b	#8,$28(a0)
0000EBC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBCA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EBD0                            
0000EBD0                            locret_E452:
0000EBD0 4E75                       		rts	
0000EBD2                            ; ===========================================================================
0000EBD2                            ; lavaball type	05 falls down until it hits the	floor
0000EBD2                            
0000EBD2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EBD2 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBD8 6100 0000                  		bsr.w	ObjHitFloor
0000EBDC 4A41                       		tst.w	d1
0000EBDE 6A00                       		bpl.s	locret_E474
0000EBE0 117C 0008 0028             		move.b	#8,$28(a0)
0000EBE6 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBEC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EBF2                            
0000EBF2                            locret_E474:
0000EBF2 4E75                       		rts	
0000EBF4                            ; ===========================================================================
0000EBF4                            ; lavaball types 06-07 move sideways
0000EBF4                            
0000EBF4                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EBF4 08E8 0000 0022             		bset	#0,$22(a0)
0000EBFA 76F8                       		moveq	#-8,d3
0000EBFC 6100 0000                  		bsr.w	ObjHitWallLeft
0000EC00 4A41                       		tst.w	d1
0000EC02 6A00                       		bpl.s	locret_E498
0000EC04 117C 0008 0028             		move.b	#8,$28(a0)
0000EC0A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC10 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC16                            
0000EC16                            locret_E498:
0000EC16 4E75                       		rts	
0000EC18                            ; ===========================================================================
0000EC18                            
0000EC18                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC18 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC1E 7608                       		moveq	#8,d3
0000EC20 6100 0000                  		bsr.w	ObjHitWallRight
0000EC24 4A41                       		tst.w	d1
0000EC26 6A00                       		bpl.s	locret_E4BC
0000EC28 117C 0008 0028             		move.b	#8,$28(a0)
0000EC2E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC34 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC3A                            
0000EC3A                            locret_E4BC:
0000EC3A 4E75                       		rts	
0000EC3C                            ; ===========================================================================
0000EC3C                            
0000EC3C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC3C 4E75                       		rts	
0000EC3E                            ; ===========================================================================
0000EC3E                            
0000EC3E                            Obj14_Delete:				; XREF: Obj14_Index
0000EC3E 6000 F17E                  		bra.w	DeleteObject
0000EC42                            ; ===========================================================================
0000EC42                            Ani_obj14:
0000EC42                            	include "_anim\obj14.asm"
0000EC42                            ; ---------------------------------------------------------------------------
0000EC42                            ; Animation script - lava balls
0000EC42                            ; ---------------------------------------------------------------------------
0000EC42 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC44 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC46 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC48 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC4A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC50 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC54 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC5A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC5E                            		even
0000EC5E                            		even
0000EC5E                            
0000EC5E                            ; ===========================================================================
0000EC5E                            ; ---------------------------------------------------------------------------
0000EC5E                            ; Object 6D - flame thrower (SBZ)
0000EC5E                            ; ---------------------------------------------------------------------------
0000EC5E                            
0000EC5E                            Obj6D:					; XREF: Obj_Index
0000EC5E 7000                       		moveq	#0,d0
0000EC60 1028 0024                  		move.b	$24(a0),d0
0000EC64 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EC68 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EC6C                            ; ===========================================================================
0000EC6C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EC6E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EC70                            ; ===========================================================================
0000EC70                            
0000EC70                            Obj6D_Main:				; XREF: Obj6D_Index
0000EC70 5428 0024                  		addq.b	#2,$24(a0)
0000EC74 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EC7C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EC82 0028 0004 0001             		ori.b	#4,1(a0)
0000EC88 117C 0001 0018             		move.b	#1,$18(a0)
0000EC8E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC94 117C 000C 0019             		move.b	#$C,$19(a0)
0000EC9A 1028 0028                  		move.b	$28(a0),d0
0000EC9E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ECA2 D040                       		add.w	d0,d0		; multiply by 2
0000ECA4 3140 0030                  		move.w	d0,$30(a0)
0000ECA8 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ECAC 1028 0028                  		move.b	$28(a0),d0
0000ECB0 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ECB4 EB48                       		lsl.w	#5,d0		; multiply by $20
0000ECB6 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ECBA 117C 000A 0036             		move.b	#$A,$36(a0)
0000ECC0 0828 0001 0022             		btst	#1,$22(a0)
0000ECC6 6700                       		beq.s	Obj6D_Action
0000ECC8 117C 0002 001C             		move.b	#2,$1C(a0)
0000ECCE 117C 0015 0036             		move.b	#$15,$36(a0)
0000ECD4                            
0000ECD4                            Obj6D_Action:				; XREF: Obj6D_Index
0000ECD4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ECD8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ECDA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ECE0 0868 0000 001C             		bchg	#0,$1C(a0)
0000ECE6 6700                       		beq.s	loc_E57A
0000ECE8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ECEE 303C 00B3                  		move.w	#$B3,d0
0000ECF2 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flame sound
0000ECF8                            
0000ECF8                            loc_E57A:
0000ECF8 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ECFE 6100 C17A                  		bsr.w	AnimateSprite
0000ED02 117C 0000 0020             		move.b	#0,$20(a0)
0000ED08 1028 0036                  		move.b	$36(a0),d0
0000ED0C B028 001A                  		cmp.b	$1A(a0),d0
0000ED10 6600                       		bne.s	Obj6D_ChkDel
0000ED12 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED18                            
0000ED18                            Obj6D_ChkDel:
0000ED18 3028 0008                  		move.w	8(a0),d0
0000ED1C 0240 FF80                  		andi.w	#$FF80,d0
0000ED20 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED24 0441 0080                  		subi.w	#$80,d1
0000ED28 0241 FF80                  		andi.w	#$FF80,d1
0000ED2C 9041                       		sub.w	d1,d0
0000ED2E 0C40 0280                  		cmpi.w	#$280,d0
0000ED32 6200 F08A                  		bhi.w	DeleteObject
0000ED36 6000 F04A                  		bra.w	DisplaySprite
0000ED3A                            ; ===========================================================================
0000ED3A                            Ani_obj6D:
0000ED3A                            	include "_anim\obj6D.asm"
0000ED3A                            ; ---------------------------------------------------------------------------
0000ED3A                            ; Animation script - flamethrower (SBZ)
0000ED3A                            ; ---------------------------------------------------------------------------
0000ED3A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED3C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED3E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED40 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED42 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED50 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED5A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000ED68 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000ED72                            		even
0000ED72                            		even
0000ED72                            
0000ED72                            ; ---------------------------------------------------------------------------
0000ED72                            ; Sprite mappings - flame thrower (SBZ)
0000ED72                            ; ---------------------------------------------------------------------------
0000ED72                            Map_obj6D:
0000ED72                            	include "_maps\obj6D.asm"
0000ED72                            ; ---------------------------------------------------------------------------
0000ED72                            ; Sprite mappings - flame thrower (SBZ)
0000ED72                            ; ---------------------------------------------------------------------------
0000ED72 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000ED76 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000ED7A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000ED7E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000ED82 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000ED86 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000ED8A 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000ED8E 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000ED92 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000ED96 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000ED9A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000ED9E 01                         byte_E620:	dc.b 1
0000ED9F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDA4 02                         byte_E626:	dc.b 2
0000EDA5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDAA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDAF 02                         byte_E631:	dc.b 2
0000EDB0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDB5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDBA 03                         byte_E63C:	dc.b 3
0000EDBB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDC0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDC5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDCA 03                         byte_E64C:	dc.b 3
0000EDCB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDD0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDD5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDDA 04                         byte_E65C:	dc.b 4
0000EDDB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDE0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDE5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDEA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDEF 04                         byte_E671:	dc.b 4
0000EDF0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDF5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDFA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDFF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE04 05                         byte_E686:	dc.b 5
0000EE05 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE0A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE0F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE14 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE19 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE1E 05                         byte_E6A0:	dc.b 5
0000EE1F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE24 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE29 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE2E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE33 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE38 06                         byte_E6BA:	dc.b 6
0000EE39 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE3E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE43 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE48 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE4D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE52 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE57 06                         byte_E6D9:	dc.b 6
0000EE58 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE5D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE62 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE67 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE6C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE71 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE76 01                         byte_E6F8:	dc.b 1
0000EE77 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE7C 02                         byte_E6FE:	dc.b 2
0000EE7D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE82 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE87 02                         byte_E709:	dc.b 2
0000EE88 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE8D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE92 03                         byte_E714:	dc.b 3
0000EE93 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE98 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE9D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEA2 03                         byte_E724:	dc.b 3
0000EEA3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEA8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEAD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB2 04                         byte_E734:	dc.b 4
0000EEB3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEB8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEBD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEC2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEC7 04                         byte_E749:	dc.b 4
0000EEC8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EECD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EED2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EED7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEDC 05                         byte_E75E:	dc.b 5
0000EEDD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEE2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEE7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEEC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEF1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEF6 05                         byte_E778:	dc.b 5
0000EEF7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEFC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF01 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF06 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF0B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF10 06                         byte_E792:	dc.b 6
0000EF11 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF16 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF1B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF20 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF25 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF2A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF2F 06                         byte_E7B1:	dc.b 6
0000EF30 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF35 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF3A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF3F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF44 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF49 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF4E                            		even
0000EF4E                            		even
0000EF4E                            
0000EF4E                            ; ===========================================================================
0000EF4E                            ; ---------------------------------------------------------------------------
0000EF4E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF4E                            ; ---------------------------------------------------------------------------
0000EF4E                            
0000EF4E                            Obj46:					; XREF: Obj_Index
0000EF4E 7000                       		moveq	#0,d0
0000EF50 1028 0024                  		move.b	$24(a0),d0
0000EF54 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF58 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF5C                            ; ===========================================================================
0000EF5C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF5E 0000                       		dc.w Obj46_Action-Obj46_Index
0000EF60                            ; ===========================================================================
0000EF60                            
0000EF60                            Obj46_Main:				; XREF: Obj46_Index
0000EF60 5428 0024                  		addq.b	#2,$24(a0)
0000EF64 117C 000F 0016             		move.b	#$F,$16(a0)
0000EF6A 117C 000F 0017             		move.b	#$F,$17(a0)
0000EF70 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EF78 317C 4000 0002             		move.w	#$4000,2(a0)
0000EF7E 117C 0004 0001             		move.b	#4,1(a0)
0000EF84 117C 0003 0018             		move.b	#3,$18(a0)
0000EF8A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF90 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF96 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EF9C                            
0000EF9C                            Obj46_Action:				; XREF: Obj46_Index
0000EF9C 4A28 0001                  		tst.b	1(a0)
0000EFA0 6A00                       		bpl.s	Obj46_ChkDel
0000EFA2 7000                       		moveq	#0,d0
0000EFA4 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EFA8 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EFAC D040                       		add.w	d0,d0
0000EFAE 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EFB2 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EFB6 323C 001B                  		move.w	#$1B,d1
0000EFBA 343C 0010                  		move.w	#$10,d2
0000EFBE 363C 0011                  		move.w	#$11,d3
0000EFC2 3828 0008                  		move.w	8(a0),d4
0000EFC6 6100 0000                  		bsr.w	SolidObject
0000EFCA                            
0000EFCA                            Obj46_ChkDel:
0000EFCA 6100 EDB6                  		bsr.w	DisplaySprite
0000EFCE 3028 0008                  		move.w	8(a0),d0
0000EFD2 0240 FF80                  		andi.w	#$FF80,d0
0000EFD6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFDA 0441 0080                  		subi.w	#$80,d1
0000EFDE 0241 FF80                  		andi.w	#$FF80,d1
0000EFE2 9041                       		sub.w	d1,d0
0000EFE4 0C40 0280                  		cmpi.w	#$280,d0
0000EFE8 6200 EDD4                  		bhi.w	DeleteObject
0000EFEC 4E75                       		rts	
0000EFEE                            ; ===========================================================================
0000EFEE 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EFF0 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EFF2 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EFF4 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EFF6 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EFF8                            ; ===========================================================================
0000EFF8                            
0000EFF8                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EFF8 4E75                       		rts	
0000EFFA                            ; ===========================================================================
0000EFFA                            
0000EFFA                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EFFA 3038 D008                  		move.w	($FFFFD008).w,d0
0000EFFE 9068 0008                  		sub.w	8(a0),d0
0000F002 6400                       		bcc.s	loc_E888
0000F004 4440                       		neg.w	d0
0000F006                            
0000F006                            loc_E888:
0000F006 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F00A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F00C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F012                            
0000F012                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F012 7000                       		moveq	#0,d0
0000F014 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F018 0828 0003 0028             		btst	#3,$28(a0)
0000F01E 6700                       		beq.s	loc_E8A8
0000F020 4440                       		neg.w	d0
0000F022 0640 0010                  		addi.w	#$10,d0
0000F026                            
0000F026                            loc_E8A8:
0000F026 3228 0030                  		move.w	$30(a0),d1
0000F02A 9240                       		sub.w	d0,d1
0000F02C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F030 4E75                       		rts	
0000F032                            ; ===========================================================================
0000F032                            
0000F032                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F032 6100 ED28                  		bsr.w	SpeedToPos
0000F036 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F03C 6100 0000                  		bsr.w	ObjHitFloor
0000F040 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F042 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F046 D368 000C                  		add.w	d1,$C(a0)
0000F04A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F04E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F054 117C 0004 0028             		move.b	#4,$28(a0)
0000F05A 3011                       		move.w	(a1),d0
0000F05C 0240 03FF                  		andi.w	#$3FF,d0
0000F060 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F064 6400                       		bcc.s	locret_E8EE
0000F066 117C 0000 0028             		move.b	#0,$28(a0)
0000F06C                            
0000F06C                            locret_E8EE:
0000F06C 4E75                       		rts	
0000F06E                            ; ===========================================================================
0000F06E                            
0000F06E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F06E 7000                       		moveq	#0,d0
0000F070 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F074 E648                       		lsr.w	#3,d0
0000F076 3228 0030                  		move.w	$30(a0),d1
0000F07A 9240                       		sub.w	d0,d1
0000F07C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F080 4E75                       		rts	
0000F082                            ; ===========================================================================
0000F082                            ; ---------------------------------------------------------------------------
0000F082                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F082                            ; ---------------------------------------------------------------------------
0000F082                            Map_obj46:
0000F082                            	include "_maps\obj46.asm"
0000F082                            ; ---------------------------------------------------------------------------
0000F082                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F082                            ; ---------------------------------------------------------------------------
0000F082 0000                       		dc.w byte_E906-Map_obj46
0000F084 01                         byte_E906:	dc.b 1
0000F085 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F08A                            		even
0000F08A                            		even
0000F08A                            
0000F08A                            ; ===========================================================================
0000F08A                            ; ---------------------------------------------------------------------------
0000F08A                            ; Object 12 - lamp (SYZ)
0000F08A                            ; ---------------------------------------------------------------------------
0000F08A                            
0000F08A                            Obj12:					; XREF: Obj_Index
0000F08A 7000                       		moveq	#0,d0
0000F08C 1028 0024                  		move.b	$24(a0),d0
0000F090 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F094 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F098                            ; ===========================================================================
0000F098 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F09A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F09C                            ; ===========================================================================
0000F09C                            
0000F09C                            Obj12_Main:				; XREF: Obj12_Index
0000F09C 5428 0024                  		addq.b	#2,$24(a0)
0000F0A0 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F0A8 317C 0000 0002             		move.w	#0,2(a0)
0000F0AE 117C 0004 0001             		move.b	#4,1(a0)
0000F0B4 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0BA 117C 0006 0018             		move.b	#6,$18(a0)
0000F0C0                            
0000F0C0                            Obj12_Animate:				; XREF: Obj12_Index
0000F0C0 5328 001E                  		subq.b	#1,$1E(a0)
0000F0C4 6A00                       		bpl.s	Obj12_ChkDel
0000F0C6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0CC 5228 001A                  		addq.b	#1,$1A(a0)
0000F0D0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F0D6 6500                       		bcs.s	Obj12_ChkDel
0000F0D8 117C 0000 001A             		move.b	#0,$1A(a0)
0000F0DE                            
0000F0DE                            Obj12_ChkDel:
0000F0DE 3028 0008                  		move.w	8(a0),d0
0000F0E2 0240 FF80                  		andi.w	#$FF80,d0
0000F0E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0EA 0441 0080                  		subi.w	#$80,d1
0000F0EE 0241 FF80                  		andi.w	#$FF80,d1
0000F0F2 9041                       		sub.w	d1,d0
0000F0F4 0C40 0280                  		cmpi.w	#$280,d0
0000F0F8 6200 ECC4                  		bhi.w	DeleteObject
0000F0FC 6000 EC84                  		bra.w	DisplaySprite
0000F100                            ; ===========================================================================
0000F100                            ; ---------------------------------------------------------------------------
0000F100                            ; Sprite mappings - lamp (SYZ)
0000F100                            ; ---------------------------------------------------------------------------
0000F100                            Map_obj12:
0000F100                            	include "_maps\obj12.asm"
0000F100                            ; ---------------------------------------------------------------------------
0000F100                            ; Sprite mappings - lamp (SYZ)
0000F100                            ; ---------------------------------------------------------------------------
0000F100 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F104 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F108 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F10C 02                         byte_E98E:	dc.b 2
0000F10D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F112 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F117 02                         byte_E999:	dc.b 2
0000F118 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F11D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F122 02                         byte_E9A4:	dc.b 2
0000F123 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F128 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F12D 02                         byte_E9AF:	dc.b 2
0000F12E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F133 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F138 02                         byte_E9BA:	dc.b 2
0000F139 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F13E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F143 02                         byte_E9C5:	dc.b 2
0000F144 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F149 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F14E                            		even
0000F14E                            		even
0000F14E                            
0000F14E                            ; ===========================================================================
0000F14E                            ; ---------------------------------------------------------------------------
0000F14E                            ; Object 47 - pinball bumper (SYZ)
0000F14E                            ; ---------------------------------------------------------------------------
0000F14E                            
0000F14E                            Obj47:					; XREF: Obj_Index
0000F14E 7000                       		moveq	#0,d0
0000F150 1028 0024                  		move.b	$24(a0),d0
0000F154 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F158 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F15C                            ; ===========================================================================
0000F15C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F15E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F160                            ; ===========================================================================
0000F160                            
0000F160                            Obj47_Main:				; XREF: Obj47_Index
0000F160 5428 0024                  		addq.b	#2,$24(a0)
0000F164 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F16C 317C 0380 0002             		move.w	#$380,2(a0)
0000F172 117C 0004 0001             		move.b	#4,1(a0)
0000F178 117C 0010 0019             		move.b	#$10,$19(a0)
0000F17E 117C 0001 0018             		move.b	#1,$18(a0)
0000F184 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F18A                            
0000F18A                            Obj47_Hit:				; XREF: Obj47_Index
0000F18A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F18E 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F192 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0000F198 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0000F19E 4228 0021                  		clr.b	$21(a0)
0000F1A2 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1A6 3228 0008                  		move.w	8(a0),d1
0000F1AA 3428 000C                  		move.w	$C(a0),d2
0000F1AE 9269 0008                  		sub.w	8(a1),d1
0000F1B2 9469 000C                  		sub.w	$C(a1),d2
0000F1B6 4EB9 0000 2BBA             		jsr	(CalcAngle).l
0000F1BC 4EB9 0000 28EC             		jsr	(CalcSine).l
0000F1C2 C3FC F900                  		muls.w	#-$700,d1
0000F1C6 E081                       		asr.l	#8,d1
0000F1C8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F1CC C1FC F900                  		muls.w	#-$700,d0
0000F1D0 E080                       		asr.l	#8,d0
0000F1D2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F1D6 08E9 0001 0022             		bset	#1,$22(a1)
0000F1DC 08A9 0004 0022             		bclr	#4,$22(a1)
0000F1E2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F1E8 4229 003C                  		clr.b	$3C(a1)
0000F1EC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F1F2 303C 00B4                  		move.w	#$B4,d0
0000F1F6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F1FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F200 7000                       		moveq	#0,d0
0000F202 1028 0023                  		move.b	$23(a0),d0
0000F206 6700                       		beq.s	Obj47_Score
0000F208 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F20E 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F210 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F214                            
0000F214                            Obj47_Score:
0000F214 7001                       		moveq	#1,d0
0000F216 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F21C 6100 EFF0                  		bsr.w	SingleObjLoad
0000F220 6600                       		bne.s	Obj47_Display
0000F222 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F226 3368 0008 0008             		move.w	8(a0),8(a1)
0000F22C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F232 137C 0004 001A             		move.b	#4,$1A(a1)
0000F238                            
0000F238                            Obj47_Display:
0000F238 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F23E 6100 BC3A                  		bsr.w	AnimateSprite
0000F242 3028 0008                  		move.w	8(a0),d0
0000F246 0240 FF80                  		andi.w	#$FF80,d0
0000F24A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F24E 0441 0080                  		subi.w	#$80,d1
0000F252 0241 FF80                  		andi.w	#$FF80,d1
0000F256 9041                       		sub.w	d1,d0
0000F258 0C40 0280                  		cmpi.w	#$280,d0
0000F25C 6200                       		bhi.s	Obj47_ChkHit
0000F25E 6000 EB22                  		bra.w	DisplaySprite
0000F262                            ; ===========================================================================
0000F262                            
0000F262                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F262 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F266 7000                       		moveq	#0,d0
0000F268 1028 0023                  		move.b	$23(a0),d0
0000F26C 6700                       		beq.s	Obj47_Delete
0000F26E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F274                            
0000F274                            Obj47_Delete:
0000F274 6000 EB48                  		bra.w	DeleteObject
0000F278                            ; ===========================================================================
0000F278                            Ani_obj47:
0000F278                            	include "_anim\obj47.asm"
0000F278                            ; ---------------------------------------------------------------------------
0000F278                            ; Animation script - flamethrower (SBZ)
0000F278                            ; ---------------------------------------------------------------------------
0000F278 0000                       		dc.w byte_EAF4-Ani_obj47
0000F27A 0000                       		dc.w byte_EAF8-Ani_obj47
0000F27C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F280 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F288                            		even
0000F288                            		even
0000F288                            
0000F288                            ; ---------------------------------------------------------------------------
0000F288                            ; Sprite mappings - pinball bumper (SYZ)
0000F288                            ; ---------------------------------------------------------------------------
0000F288                            Map_obj47:
0000F288                            	include "_maps\obj47.asm"
0000F288                            ; ---------------------------------------------------------------------------
0000F288                            ; Sprite mappings - pinball bumper (SYZ)
0000F288                            ; ---------------------------------------------------------------------------
0000F288 0000                       		dc.w byte_EB06-Map_obj47
0000F28A 0000                       		dc.w byte_EB11-Map_obj47
0000F28C 0000                       		dc.w byte_EB1C-Map_obj47
0000F28E 02                         byte_EB06:	dc.b 2
0000F28F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F294 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F299 02                         byte_EB11:	dc.b 2
0000F29A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F29F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F2A4 02                         byte_EB1C:	dc.b 2
0000F2A5 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F2AA F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F2B0 00                         		even
0000F2B0 00                         		even
0000F2B0                            
0000F2B0                            ; ===========================================================================
0000F2B0                            ; ---------------------------------------------------------------------------
0000F2B0                            ; Object 0D - signpost at the end of a level
0000F2B0                            ; ---------------------------------------------------------------------------
0000F2B0                            
0000F2B0                            Obj0D:					; XREF: Obj_Index
0000F2B0 7000                       		moveq	#0,d0
0000F2B2 1028 0024                  		move.b	$24(a0),d0
0000F2B6 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F2BA 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F2BE 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F2C4 6100 BBB4                  		bsr.w	AnimateSprite
0000F2C8 6100 EAB8                  		bsr.w	DisplaySprite
0000F2CC 3028 0008                  		move.w	8(a0),d0
0000F2D0 0240 FF80                  		andi.w	#$FF80,d0
0000F2D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2D8 0441 0080                  		subi.w	#$80,d1
0000F2DC 0241 FF80                  		andi.w	#$FF80,d1
0000F2E0 9041                       		sub.w	d1,d0
0000F2E2 0C40 0280                  		cmpi.w	#$280,d0
0000F2E6 6200 EAD6                  		bhi.w	DeleteObject
0000F2EA 4E75                       		rts	
0000F2EC                            ; ===========================================================================
0000F2EC 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F2EE 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F2F0 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F2F2 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F2F4 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F2F6                            ; ===========================================================================
0000F2F6                            
0000F2F6                            Obj0D_Main:				; XREF: Obj0D_Index
0000F2F6 5428 0024                  		addq.b	#2,$24(a0)
0000F2FA 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F302 317C 0680 0002             		move.w	#$680,2(a0)
0000F308 117C 0004 0001             		move.b	#4,1(a0)
0000F30E 117C 0018 0019             		move.b	#$18,$19(a0)
0000F314 117C 0004 0018             		move.b	#4,$18(a0)
0000F31A                            
0000F31A                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F31A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F31E 9068 0008                  		sub.w	8(a0),d0
0000F322 6500                       		bcs.s	locret_EBBA
0000F324 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F328 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F32A 303C 00CF                  		move.w	#$CF,d0
0000F32E 4EB9 0000 125C             		jsr	(PlaySound).l	; play signpost	sound
0000F334 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F338 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F33E 5428 0024                  		addq.b	#2,$24(a0)
0000F342                            
0000F342                            locret_EBBA:
0000F342 4E75                       		rts	
0000F344                            ; ===========================================================================
0000F344                            
0000F344                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F344 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F348 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F34A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F350 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F354 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F35A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F35C 5428 0024                  		addq.b	#2,$24(a0)
0000F360                            
0000F360                            Obj0D_Sparkle:
0000F360 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F364 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F366 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F36C 7000                       		moveq	#0,d0
0000F36E 1028 0034                  		move.b	$34(a0),d0
0000F372 5428 0034                  		addq.b	#2,$34(a0)
0000F376 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F37C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F380 6100 EE8C                  		bsr.w	SingleObjLoad
0000F384 6600                       		bne.s	locret_EC42
0000F386 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F38A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F390 101A                       		move.b	(a2)+,d0
0000F392 4880                       		ext.w	d0
0000F394 D068 0008                  		add.w	8(a0),d0
0000F398 3340 0008                  		move.w	d0,8(a1)
0000F39C 101A                       		move.b	(a2)+,d0
0000F39E 4880                       		ext.w	d0
0000F3A0 D068 000C                  		add.w	$C(a0),d0
0000F3A4 3340 000C                  		move.w	d0,$C(a1)
0000F3A8 237C 0000 A6E2 0004        		move.l	#Map_obj25,4(a1)
0000F3B0 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000F3B6 137C 0004 0001             		move.b	#4,1(a1)
0000F3BC 137C 0002 0018             		move.b	#2,$18(a1)
0000F3C2 137C 0008 0019             		move.b	#8,$19(a1)
0000F3C8                            
0000F3C8                            locret_EC42:
0000F3C8 4E75                       		rts	
0000F3CA                            ; ===========================================================================
0000F3CA E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F3CC 0808                       		dc.b	8,   8
0000F3CE F000                       		dc.b -$10,   0
0000F3D0 18F8                       		dc.b  $18,  -8
0000F3D2 00F8                       		dc.b	0,  -8
0000F3D4 1000                       		dc.b  $10,   0
0000F3D6 E808                       		dc.b -$18,   8
0000F3D8 1810                       		dc.b  $18, $10
0000F3DA                            ; ===========================================================================
0000F3DA                            
0000F3DA                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F3DA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F3DE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F3E2 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F3E8 6600                       		bne.s	loc_EC70
0000F3EA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F3F0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F3F6                            
0000F3F6                            loc_EC70:
0000F3F6 4A38 D000                  		tst.b	($FFFFD000).w
0000F3FA 6700                       		beq.s	loc_EC86
0000F3FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F400 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F404 0641 0128                  		addi.w	#$128,d1
0000F408 B041                       		cmp.w	d1,d0
0000F40A 6500                       		bcs.s	locret_ECEE
0000F40C                            
0000F40C                            loc_EC86:
0000F40C 5428 0024                  		addq.b	#2,$24(a0)
0000F410                            
0000F410                            ; ---------------------------------------------------------------------------
0000F410                            ; Subroutine to	set up bonuses at the end of an	act
0000F410                            ; ---------------------------------------------------------------------------
0000F410                            
0000F410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F410                            
0000F410                            
0000F410                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F410 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F414 6600                       		bne.s	locret_ECEE
0000F416 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F41C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F420 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F424 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F42A 7010                       		moveq	#$10,d0
0000F42C 4EB9 0000 14BC             		jsr	(LoadPLC2).l	; load title card patterns
0000F432 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F438 7000                       		moveq	#0,d0
0000F43A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F43E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F442 7200                       		moveq	#0,d1
0000F444 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F448 D041                       		add.w	d1,d0		; add up your time
0000F44A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F44E 7214                       		moveq	#$14,d1
0000F450 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F452 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F454 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F456                            
0000F456                            loc_ECD0:
0000F456 D040                       		add.w	d0,d0
0000F458 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F45E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F462 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F466 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F46A 303C 008E                  		move.w	#$8E,d0
0000F46E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F474                            
0000F474                            locret_ECEE:
0000F474 4E75                       		rts	
0000F476                            ; End of function GotThroughAct
0000F476                            
0000F476                            ; ===========================================================================
0000F476 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F48A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F4A0                            ; ===========================================================================
0000F4A0                            
0000F4A0                            locret_ED1A:				; XREF: Obj0D_Index
0000F4A0 4E75                       		rts	
0000F4A2                            ; ===========================================================================
0000F4A2                            Ani_obj0D:
0000F4A2                            	include "_anim\obj0D.asm"
0000F4A2                            ; ---------------------------------------------------------------------------
0000F4A2                            ; Animation script - signpost
0000F4A2                            ; ---------------------------------------------------------------------------
0000F4A2 0000                       		dc.w byte_ED24-Ani_obj0D
0000F4A4 0000                       		dc.w byte_ED28-Ani_obj0D
0000F4A6 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F4A8 0000                       		dc.w byte_ED34-Ani_obj0D
0000F4AA 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F4AE 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F4B4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F4BA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F4BE 00                         		even
0000F4BE 00                         		even
0000F4BE                            
0000F4BE                            ; ---------------------------------------------------------------------------
0000F4BE                            ; Sprite mappings - signpost
0000F4BE                            ; ---------------------------------------------------------------------------
0000F4BE                            Map_obj0D:
0000F4BE                            	include "_maps\obj0D.asm"
0000F4BE                            ; ---------------------------------------------------------------------------
0000F4BE                            ; Sprite mappings - signpost
0000F4BE                            ; ---------------------------------------------------------------------------
0000F4BE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F4C2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F4C6 0000                       		dc.w byte_ED73-Map_obj0D
0000F4C8 03                         byte_ED42:	dc.b 3
0000F4C9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F4CE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F4D3 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4D8 02                         byte_ED52:	dc.b 2
0000F4D9 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F4DE 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F4E3 02                         byte_ED5D:	dc.b 2
0000F4E4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F4E9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4EE 02                         byte_ED68:	dc.b 2
0000F4EF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F4F4 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F4F9 03                         byte_ED73:	dc.b 3
0000F4FA F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F4FF F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F504 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F50A 00                         		even
0000F50A 00                         		even
0000F50A                            
0000F50A                            ; ===========================================================================
0000F50A                            ; ---------------------------------------------------------------------------
0000F50A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F50A                            ; ---------------------------------------------------------------------------
0000F50A                            
0000F50A                            Obj4C:					; XREF: Obj_Index
0000F50A 7000                       		moveq	#0,d0
0000F50C 1028 0024                  		move.b	$24(a0),d0
0000F510 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F514 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F518 6000 0000                  		bra.w	Obj4D_ChkDel
0000F51C                            ; ===========================================================================
0000F51C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F51E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F520 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F522 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F524 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F526 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F528                            ; ===========================================================================
0000F528                            
0000F528                            Obj4C_Main:				; XREF: Obj4C_Index
0000F528 5428 0024                  		addq.b	#2,$24(a0)
0000F52C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F534 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F53A 117C 0004 0001             		move.b	#4,1(a0)
0000F540 117C 0001 0018             		move.b	#1,$18(a0)
0000F546 117C 0038 0019             		move.b	#$38,$19(a0)
0000F54C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F552                            
0000F552                            loc_EDCC:				; XREF: Obj4C_Index
0000F552 5368 0032                  		subq.w	#1,$32(a0)
0000F556 6A00                       		bpl.s	locret_EDF0
0000F558 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F55E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F562 3228 000C                  		move.w	$C(a0),d1
0000F566 B041                       		cmp.w	d1,d0
0000F568 6400                       		bcc.s	locret_EDF0
0000F56A 0441 0170                  		subi.w	#$170,d1
0000F56E B041                       		cmp.w	d1,d0
0000F570 6500                       		bcs.s	locret_EDF0
0000F572 5428 0024                  		addq.b	#2,$24(a0)
0000F576                            
0000F576                            locret_EDF0:
0000F576 4E75                       		rts	
0000F578                            ; ===========================================================================
0000F578                            
0000F578                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F578 5428 0024                  		addq.b	#2,$24(a0)
0000F57C 6100 ECA6                  		bsr.w	SingleObjLoad2
0000F580 6600                       		bne.s	loc_EE18
0000F582 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F586 3368 0008 0008             		move.w	8(a0),8(a1)
0000F58C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F592 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F598 2348 003C                  		move.l	a0,$3C(a1)
0000F59C                            
0000F59C                            loc_EE18:
0000F59C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5A2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5A6 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F5A8 117C 0004 001C             		move.b	#4,$1C(a0)
0000F5AE 6000                       		bra.s	Obj4C_Display
0000F5B0                            ; ===========================================================================
0000F5B0                            
0000F5B0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F5B0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F5B4 08E9 0001 0022             		bset	#1,$22(a1)
0000F5BA 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F5C0 6000                       		bra.s	Obj4C_Display
0000F5C2                            ; ===========================================================================
0000F5C2                            
0000F5C2                            loc_EE3E:				; XREF: Obj4C_Index
0000F5C2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5C6 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F5C8 5428 0024                  		addq.b	#2,$24(a0)
0000F5CC 4E75                       		rts	
0000F5CE                            ; ===========================================================================
0000F5CE                            
0000F5CE                            Obj4C_Display:				; XREF: Obj4C_Index
0000F5CE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F5D4 6100 B8A4                  		bsr.w	AnimateSprite
0000F5D8 6100 E7A8                  		bsr.w	DisplaySprite
0000F5DC 4E75                       		rts	
0000F5DE                            ; ===========================================================================
0000F5DE                            
0000F5DE                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F5DE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F5E4 117C 0002 0024             		move.b	#2,$24(a0)
0000F5EA 4A28 0028                  		tst.b	$28(a0)
0000F5EE 6700 E7CE                  		beq.w	DeleteObject
0000F5F2 4E75                       		rts	
0000F5F4                            ; ===========================================================================
0000F5F4                            ; ---------------------------------------------------------------------------
0000F5F4                            ; Object 4D - lava geyser / lavafall (MZ)
0000F5F4                            ; ---------------------------------------------------------------------------
0000F5F4                            
0000F5F4                            Obj4D:					; XREF: Obj_Index
0000F5F4 7000                       		moveq	#0,d0
0000F5F6 1028 0024                  		move.b	$24(a0),d0
0000F5FA 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F5FE 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F602 6000 E77E                  		bra.w	DisplaySprite
0000F606                            ; ===========================================================================
0000F606 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F608 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F60A 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F60C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F60E                            
0000F60E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F612                            ; ===========================================================================
0000F612                            
0000F612                            Obj4D_Main:				; XREF: Obj4D_Index
0000F612 5428 0024                  		addq.b	#2,$24(a0)
0000F616 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F61C 4A28 0028                  		tst.b	$28(a0)
0000F620 6700                       		beq.s	loc_EEA4
0000F622 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F628                            
0000F628                            loc_EEA4:
0000F628 7000                       		moveq	#0,d0
0000F62A 1028 0028                  		move.b	$28(a0),d0
0000F62E D040                       		add.w	d0,d0
0000F630 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F636 2248                       		movea.l	a0,a1
0000F638 7201                       		moveq	#1,d1
0000F63A 6100                       		bsr.s	Obj4D_MakeLava
0000F63C 6000                       		bra.s	loc_EF10
0000F63E                            ; ===========================================================================
0000F63E                            
0000F63E                            Obj4D_Loop:
0000F63E 6100 EBE4                  		bsr.w	SingleObjLoad2
0000F642 6600                       		bne.s	loc_EF0A
0000F644                            
0000F644                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F644 12BC 004D                  		move.b	#$4D,0(a1)
0000F648 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F650 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F656 137C 0004 0001             		move.b	#4,1(a1)
0000F65C 137C 0020 0019             		move.b	#$20,$19(a1)
0000F662 3368 0008 0008             		move.w	8(a0),8(a1)
0000F668 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F66E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F674 137C 0001 0018             		move.b	#1,$18(a1)
0000F67A 137C 0005 001C             		move.b	#5,$1C(a1)
0000F680 4A28 0028                  		tst.b	$28(a0)
0000F684 6700                       		beq.s	loc_EF0A
0000F686 137C 0002 001C             		move.b	#2,$1C(a1)
0000F68C                            
0000F68C                            loc_EF0A:
0000F68C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F690 4E75                       		rts	
0000F692                            ; ===========================================================================
0000F692                            
0000F692                            loc_EF10:				; XREF: Obj4D_Main
0000F692 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F698 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F69E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F6A4 137C 0093 0020             		move.b	#$93,$20(a1)
0000F6AA 137C 0080 0016             		move.b	#$80,$16(a1)
0000F6B0 08E9 0004 0001             		bset	#4,1(a1)
0000F6B6 5829 0024                  		addq.b	#4,$24(a1)
0000F6BA 2348 003C                  		move.l	a0,$3C(a1)
0000F6BE 4A28 0028                  		tst.b	$28(a0)
0000F6C2 6700                       		beq.s	Obj4D_PlaySnd
0000F6C4 7200                       		moveq	#0,d1
0000F6C6 6100 FF76                  		bsr.w	Obj4D_Loop
0000F6CA 5429 0024                  		addq.b	#2,$24(a1)
0000F6CE 08E9 0004 0002             		bset	#4,2(a1)
0000F6D4 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F6DA 137C 0000 0018             		move.b	#0,$18(a1)
0000F6E0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6E6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F6EC 117C 0000 0028             		move.b	#0,$28(a0)
0000F6F2                            
0000F6F2                            Obj4D_PlaySnd:
0000F6F2 303C 00C8                  		move.w	#$C8,d0
0000F6F6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6FC                            
0000F6FC                            Obj4D_Action:				; XREF: Obj4D_Index
0000F6FC 7000                       		moveq	#0,d0
0000F6FE 1028 0028                  		move.b	$28(a0),d0
0000F702 D040                       		add.w	d0,d0
0000F704 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F708 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F70C 6100 E64E                  		bsr.w	SpeedToPos
0000F710 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F716 6100 B762                  		bsr.w	AnimateSprite
0000F71A                            
0000F71A                            Obj4D_ChkDel:				; XREF: Obj4C
0000F71A 3028 0008                  		move.w	8(a0),d0
0000F71E 0240 FF80                  		andi.w	#$FF80,d0
0000F722 3238 F700                  		move.w	($FFFFF700).w,d1
0000F726 0441 0080                  		subi.w	#$80,d1
0000F72A 0241 FF80                  		andi.w	#$FF80,d1
0000F72E 9041                       		sub.w	d1,d0
0000F730 0C40 0280                  		cmpi.w	#$280,d0
0000F734 6200 E688                  		bhi.w	DeleteObject
0000F738 4E75                       		rts	
0000F73A                            ; ===========================================================================
0000F73A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F73C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F73E                            ; ===========================================================================
0000F73E                            
0000F73E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F73E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F744 3028 0030                  		move.w	$30(a0),d0
0000F748 B068 000C                  		cmp.w	$C(a0),d0
0000F74C 6400                       		bcc.s	locret_EFDA
0000F74E 5828 0024                  		addq.b	#4,$24(a0)
0000F752 2268 003C                  		movea.l	$3C(a0),a1
0000F756 137C 0003 001C             		move.b	#3,$1C(a1)
0000F75C                            
0000F75C                            locret_EFDA:
0000F75C 4E75                       		rts	
0000F75E                            ; ===========================================================================
0000F75E                            
0000F75E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F75E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F764 3028 0030                  		move.w	$30(a0),d0
0000F768 B068 000C                  		cmp.w	$C(a0),d0
0000F76C 6400                       		bcc.s	locret_EFFA
0000F76E 5828 0024                  		addq.b	#4,$24(a0)
0000F772 2268 003C                  		movea.l	$3C(a0),a1
0000F776 137C 0001 001C             		move.b	#1,$1C(a1)
0000F77C                            
0000F77C                            locret_EFFA:
0000F77C 4E75                       		rts	
0000F77E                            ; ===========================================================================
0000F77E                            
0000F77E                            loc_EFFC:				; XREF: Obj4D_Index
0000F77E 2268 003C                  		movea.l	$3C(a0),a1
0000F782 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F788 6700 0000                  		beq.w	Obj4D_Delete
0000F78C 3029 000C                  		move.w	$C(a1),d0
0000F790 0640 0060                  		addi.w	#$60,d0
0000F794 3140 000C                  		move.w	d0,$C(a0)
0000F798 9068 0030                  		sub.w	$30(a0),d0
0000F79C 4440                       		neg.w	d0
0000F79E 7208                       		moveq	#8,d1
0000F7A0 0C40 0040                  		cmpi.w	#$40,d0
0000F7A4 6C00                       		bge.s	loc_F026
0000F7A6 720B                       		moveq	#$B,d1
0000F7A8                            
0000F7A8                            loc_F026:
0000F7A8 0C40 0080                  		cmpi.w	#$80,d0
0000F7AC 6F00                       		ble.s	loc_F02E
0000F7AE 720E                       		moveq	#$E,d1
0000F7B0                            
0000F7B0                            loc_F02E:
0000F7B0 5328 001E                  		subq.b	#1,$1E(a0)
0000F7B4 6A00                       		bpl.s	loc_F04C
0000F7B6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F7BC 5228 001B                  		addq.b	#1,$1B(a0)
0000F7C0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F7C6 6500                       		bcs.s	loc_F04C
0000F7C8 117C 0000 001B             		move.b	#0,$1B(a0)
0000F7CE                            
0000F7CE                            loc_F04C:
0000F7CE 1028 001B                  		move.b	$1B(a0),d0
0000F7D2 D001                       		add.b	d1,d0
0000F7D4 1140 001A                  		move.b	d0,$1A(a0)
0000F7D8 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F7DC                            ; ===========================================================================
0000F7DC                            
0000F7DC                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F7DC 6000 E5E0                  		bra.w	DeleteObject
0000F7E0                            ; ===========================================================================
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            ; Object 4E - advancing	wall of	lava (MZ)
0000F7E0                            ; ---------------------------------------------------------------------------
0000F7E0                            
0000F7E0                            Obj4E:					; XREF: Obj_Index
0000F7E0 7000                       		moveq	#0,d0
0000F7E2 1028 0024                  		move.b	$24(a0),d0
0000F7E6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F7EA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F7EE                            ; ===========================================================================
0000F7EE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F7F0 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F7F2 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F7F4 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F7F6 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F7F8                            ; ===========================================================================
0000F7F8                            
0000F7F8                            Obj4E_Main:				; XREF: Obj4E_Index
0000F7F8 5828 0024                  		addq.b	#4,$24(a0)
0000F7FC 2248                       		movea.l	a0,a1
0000F7FE 7201                       		moveq	#1,d1
0000F800 6000                       		bra.s	Obj4E_Main2
0000F802                            ; ===========================================================================
0000F802                            
0000F802                            Obj4E_Loop:
0000F802 6100 EA20                  		bsr.w	SingleObjLoad2
0000F806 6600                       		bne.s	loc_F0C8
0000F808                            
0000F808                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F808 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F80C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F814 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F81A 137C 0004 0001             		move.b	#4,1(a1)
0000F820 137C 0050 0019             		move.b	#$50,$19(a1)
0000F826 3368 0008 0008             		move.w	8(a0),8(a1)
0000F82C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F832 137C 0001 0018             		move.b	#1,$18(a1)
0000F838 137C 0000 001C             		move.b	#0,$1C(a1)
0000F83E 137C 0094 0020             		move.b	#$94,$20(a1)
0000F844 2348 003C                  		move.l	a0,$3C(a1)
0000F848                            
0000F848                            loc_F0C8:
0000F848 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F84C                            
0000F84C 5C29 0024                  		addq.b	#6,$24(a1)
0000F850 137C 0004 001A             		move.b	#4,$1A(a1)
0000F856                            
0000F856                            Obj4E_Action:				; XREF: Obj4E_Index
0000F856 3038 D008                  		move.w	($FFFFD008).w,d0
0000F85A 9068 0008                  		sub.w	8(a0),d0
0000F85E 6400                       		bcc.s	Obj4E_ChkSonic
0000F860 4440                       		neg.w	d0
0000F862                            
0000F862                            Obj4E_ChkSonic:
0000F862 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F866 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F868 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F86C 9068 000C                  		sub.w	$C(a0),d0
0000F870 6400                       		bcc.s	loc_F0F4
0000F872 4440                       		neg.w	d0
0000F874                            
0000F874                            loc_F0F4:
0000F874 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F878 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F87A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F880 6000                       		bra.s	Obj4E_Solid
0000F882                            ; ===========================================================================
0000F882                            
0000F882                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F882 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F886 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F888 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F88E 5528 0024                  		subq.b	#2,$24(a0)
0000F892                            
0000F892                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F892 323C 002B                  		move.w	#$2B,d1
0000F896 343C 0018                  		move.w	#$18,d2
0000F89A 3602                       		move.w	d2,d3
0000F89C 5243                       		addq.w	#1,d3
0000F89E 3828 0008                  		move.w	8(a0),d4
0000F8A2 1028 0024                  		move.b	$24(a0),d0
0000F8A6 3F00                       		move.w	d0,-(sp)
0000F8A8 6100 0000                  		bsr.w	SolidObject
0000F8AC 301F                       		move.w	(sp)+,d0
0000F8AE 1140 0024                  		move.b	d0,$24(a0)
0000F8B2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F8B8 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F8BA 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F8BE 4228 0036                  		clr.b	$36(a0)
0000F8C2                            
0000F8C2                            Obj4E_Animate:
0000F8C2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F8C8 6100 B5B0                  		bsr.w	AnimateSprite
0000F8CC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F8D2 6400                       		bcc.s	Obj4E_ChkDel
0000F8D4 6100 E486                  		bsr.w	SpeedToPos
0000F8D8                            
0000F8D8                            Obj4E_ChkDel:
0000F8D8 6100 E4A8                  		bsr.w	DisplaySprite
0000F8DC 4A28 0036                  		tst.b	$36(a0)
0000F8E0 6600                       		bne.s	locret_F17E
0000F8E2 3028 0008                  		move.w	8(a0),d0
0000F8E6 0240 FF80                  		andi.w	#$FF80,d0
0000F8EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8EE 0441 0080                  		subi.w	#$80,d1
0000F8F2 0241 FF80                  		andi.w	#$FF80,d1
0000F8F6 9041                       		sub.w	d1,d0
0000F8F8 0C40 0280                  		cmpi.w	#$280,d0
0000F8FC 6200                       		bhi.s	Obj4E_ChkGone
0000F8FE                            
0000F8FE                            locret_F17E:
0000F8FE 4E75                       		rts	
0000F900                            ; ===========================================================================
0000F900                            
0000F900                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F900 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F904 7000                       		moveq	#0,d0
0000F906 1028 0023                  		move.b	$23(a0),d0
0000F90A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F910 117C 0008 0024             		move.b	#8,$24(a0)
0000F916 4E75                       		rts	
0000F918                            ; ===========================================================================
0000F918                            
0000F918                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F918 2268 003C                  		movea.l	$3C(a0),a1
0000F91C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F922 6700                       		beq.s	Obj4E_Delete
0000F924 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F92A 0468 0080 0008             		subi.w	#$80,8(a0)
0000F930 6000 E450                  		bra.w	DisplaySprite
0000F934                            ; ===========================================================================
0000F934                            
0000F934                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F934 6000 E488                  		bra.w	DeleteObject
0000F938                            ; ===========================================================================
0000F938                            ; ---------------------------------------------------------------------------
0000F938                            ; Object 54 - invisible	lava tag (MZ)
0000F938                            ; ---------------------------------------------------------------------------
0000F938                            
0000F938                            Obj54:					; XREF: Obj_Index
0000F938 7000                       		moveq	#0,d0
0000F93A 1028 0024                  		move.b	$24(a0),d0
0000F93E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F942 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F946                            ; ===========================================================================
0000F946 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F948 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F94A                            
0000F94A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F94E                            ; ===========================================================================
0000F94E                            
0000F94E                            Obj54_Main:				; XREF: Obj54_Index
0000F94E 5428 0024                  		addq.b	#2,$24(a0)
0000F952 7000                       		moveq	#0,d0
0000F954 1028 0028                  		move.b	$28(a0),d0
0000F958 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F95E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F966 117C 0084 0001             		move.b	#$84,1(a0)
0000F96C                            
0000F96C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F96C 3028 0008                  		move.w	8(a0),d0
0000F970 0240 FF80                  		andi.w	#$FF80,d0
0000F974 3238 F700                  		move.w	($FFFFF700).w,d1
0000F978 0441 0080                  		subi.w	#$80,d1
0000F97C 0241 FF80                  		andi.w	#$FF80,d1
0000F980 9041                       		sub.w	d1,d0
0000F982 6B00 E43A                  		bmi.w	DeleteObject
0000F986 0C40 0280                  		cmpi.w	#$280,d0
0000F98A 6200 E432                  		bhi.w	DeleteObject
0000F98E 4E75                       		rts	
0000F990                            ; ===========================================================================
0000F990                            ; ---------------------------------------------------------------------------
0000F990                            ; Sprite mappings - invisible lava tag (MZ)
0000F990                            ; ---------------------------------------------------------------------------
0000F990                            Map_obj54:
0000F990                            	include "_maps\obj54.asm"
0000F990                            ; ---------------------------------------------------------------------------
0000F990                            ; Sprite mappings - invisible lava tag (MZ)
0000F990                            ; ---------------------------------------------------------------------------
0000F990 0000                       		dc.w byte_F212-Map_obj54
0000F992 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F994 00                         		even
0000F994 00                         		even
0000F994                            
0000F994                            Ani_obj4C:
0000F994                            	include "_anim\obj4C.asm"
0000F994                            ; ---------------------------------------------------------------------------
0000F994                            ; Animation script - geyser of lava (MZ)
0000F994                            ; ---------------------------------------------------------------------------
0000F994 0000                       		dc.w byte_F220-Ani_obj4C
0000F996 0000                       		dc.w byte_F22A-Ani_obj4C
0000F998 0000                       		dc.w byte_F22E-Ani_obj4C
0000F99A 0000                       		dc.w byte_F232-Ani_obj4C
0000F99C 0000                       		dc.w byte_F23A-Ani_obj4C
0000F99E 0000                       		dc.w byte_F23E-Ani_obj4C
0000F9A0 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F9AA 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F9AE 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F9B2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F9BA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F9BE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F9C2                            		even
0000F9C2                            		even
0000F9C2                            
0000F9C2                            Ani_obj4E:
0000F9C2                            	include "_anim\obj4E.asm"
0000F9C2                            ; ---------------------------------------------------------------------------
0000F9C2                            ; Animation script - advancing wall of lava (MZ)
0000F9C2                            ; ---------------------------------------------------------------------------
0000F9C2 0000                       		dc.w byte_F244-Ani_obj4E
0000F9C4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F9CA                            		even
0000F9CA                            		even
0000F9CA                            
0000F9CA                            ; ---------------------------------------------------------------------------
0000F9CA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9CA                            ; ---------------------------------------------------------------------------
0000F9CA                            Map_obj4C:
0000F9CA                            	include "_maps\obj4C.asm"
0000F9CA                            ; ---------------------------------------------------------------------------
0000F9CA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F9CA                            ; ---------------------------------------------------------------------------
0000F9CA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F9CE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F9D2 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F9D6 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F9DA 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F9DE 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F9E2 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F9E6 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F9EA 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F9EE 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F9F2 02                         byte_F272:	dc.b 2
0000F9F3 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F9F8 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F9FD 02                         byte_F27D:	dc.b 2
0000F9FE EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FA03 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FA08 04                         byte_F288:	dc.b 4
0000FA09 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA0E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA13 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA18 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA1D 04                         byte_F29D:	dc.b 4
0000FA1E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA23 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA28 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA2D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA32 06                         byte_F2B2:	dc.b 6
0000FA33 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA38 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA3D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA42 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA47 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA4C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA51 06                         byte_F2D1:	dc.b 6
0000FA52 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA57 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA5C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA61 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA66 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FA6B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FA70 02                         byte_F2F0:	dc.b 2
0000FA71 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FA76 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FA7B 02                         byte_F2FB:	dc.b 2
0000FA7C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FA81 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FA86 0A                         byte_F306:	dc.b $A
0000FA87 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA8C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA91 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA96 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA9B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FAA0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FAA5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FAAA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FAAF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FAB4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAB9 0A                         byte_F339:	dc.b $A
0000FABA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FABF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAC4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAC9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FACE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FAD3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAD8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FADD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FAE2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FAE7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FAEC 0A                         byte_F36C:	dc.b $A
0000FAED 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FAF2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAF7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAFC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB01 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB06 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB0B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB10 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB15 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB1A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB1F 06                         byte_F39F:	dc.b 6
0000FB20 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB25 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB2A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB2F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB34 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB39 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB3E 06                         byte_F3BE:	dc.b 6
0000FB3F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB44 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB49 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB4E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB53 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB58 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB5D 06                         byte_F3DD:	dc.b 6
0000FB5E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB63 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB68 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB6D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB72 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB77 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB7C 10                         byte_F3FC:	dc.b $10
0000FB7D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB82 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB87 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB8C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB91 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB96 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB9B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FBA0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FBA5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FBAA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FBAF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FBB4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FBB9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FBBE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FBC3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FBC8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FBCD 10                         byte_F44D:	dc.b $10
0000FBCE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBD3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBD8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBDD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBE2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBE7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBEC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBF1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBF6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBFB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC00 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FC05 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FC0A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FC0F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC14 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC19 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC1E 10                         byte_F49E:	dc.b $10
0000FC1F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC24 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC29 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC2E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC33 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC38 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC3D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC42 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC47 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC4C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC51 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC56 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC5B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FC60 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FC65 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FC6A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FC6F 06                         byte_F4EF:	dc.b 6
0000FC70 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FC75 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FC7A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FC7F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FC84 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FC89 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FC8E 06                         byte_F50E:	dc.b 6
0000FC8F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FC94 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FC99 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FC9E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FCA3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FCA8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FCAD 00                         byte_F52D:	dc.b 0
0000FCAE                            		even
0000FCAE                            		even
0000FCAE                            
0000FCAE                            ; ---------------------------------------------------------------------------
0000FCAE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FCAE                            ; ---------------------------------------------------------------------------
0000FCAE                            Map_obj4E:
0000FCAE                            	include "_maps\obj4E.asm"
0000FCAE                            ; ---------------------------------------------------------------------------
0000FCAE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FCAE                            ; ---------------------------------------------------------------------------
0000FCAE 0000                       		dc.w byte_F538-Map_obj4E
0000FCB0 0000                       		dc.w byte_F566-Map_obj4E
0000FCB2 0000                       		dc.w byte_F594-Map_obj4E
0000FCB4 0000                       		dc.w byte_F5C2-Map_obj4E
0000FCB6 0000                       		dc.w byte_F5F0-Map_obj4E
0000FCB8 09                         byte_F538:	dc.b 9
0000FCB9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FCBE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FCC3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCC8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCCD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCD2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCD7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCDC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCE1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCE6 09                         byte_F566:	dc.b 9
0000FCE7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FCEC 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FCF1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCF6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCFB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD00 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD05 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD0A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD0F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD14 09                         byte_F594:	dc.b 9
0000FD15 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD1A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD1F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD24 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD29 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD2E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD33 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD38 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD3D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD42 09                         byte_F5C2:	dc.b 9
0000FD43 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD48 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD4D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD52 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD57 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD5C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD61 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD66 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD6B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD70 08                         byte_F5F0:	dc.b 8
0000FD71 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FD76 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD7B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD80 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD85 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD8A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD8F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD94 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD9A 00                         		even
0000FD9A 00                         		even
0000FD9A                            
0000FD9A                            ; ===========================================================================
0000FD9A                            ; ---------------------------------------------------------------------------
0000FD9A                            ; Object 40 - Moto Bug enemy (GHZ)
0000FD9A                            ; ---------------------------------------------------------------------------
0000FD9A                            
0000FD9A                            Obj40:					; XREF: Obj_Index
0000FD9A 7000                       		moveq	#0,d0
0000FD9C 1028 0024                  		move.b	$24(a0),d0
0000FDA0 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FDA4 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FDA8                            ; ===========================================================================
0000FDA8 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FDAA 0000                       		dc.w Obj40_Action-Obj40_Index
0000FDAC 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FDAE 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FDB0                            ; ===========================================================================
0000FDB0                            
0000FDB0                            Obj40_Main:				; XREF: Obj40_Index
0000FDB0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FDB8 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FDBE 117C 0004 0001             		move.b	#4,1(a0)
0000FDC4 117C 0004 0018             		move.b	#4,$18(a0)
0000FDCA 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDD0 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FDD4 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FDD6 117C 000E 0016             		move.b	#$E,$16(a0)
0000FDDC 117C 0008 0017             		move.b	#8,$17(a0)
0000FDE2 117C 000C 0020             		move.b	#$C,$20(a0)
0000FDE8 6100 DF46                  		bsr.w	ObjectFall
0000FDEC 4EB9 0000 0000             		jsr	ObjHitFloor
0000FDF2 4A41                       		tst.w	d1
0000FDF4 6A00                       		bpl.s	locret_F68A
0000FDF6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDFA 317C 0000 0012             		move.w	#0,$12(a0)
0000FE00 5428 0024                  		addq.b	#2,$24(a0)
0000FE04 0868 0000 0022             		bchg	#0,$22(a0)
0000FE0A                            
0000FE0A                            locret_F68A:
0000FE0A 4E75                       		rts	
0000FE0C                            ; ===========================================================================
0000FE0C                            
0000FE0C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FE0C 5828 0024                  		addq.b	#4,$24(a0)
0000FE10 6000 0000                  		bra.w	Obj40_Animate
0000FE14                            ; ===========================================================================
0000FE14                            
0000FE14                            Obj40_Action:				; XREF: Obj40_Index
0000FE14 7000                       		moveq	#0,d0
0000FE16 1028 0025                  		move.b	$25(a0),d0
0000FE1A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE1E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE22 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE28 6100 B050                  		bsr.w	AnimateSprite
0000FE2C                            
0000FE2C                            ; ---------------------------------------------------------------------------
0000FE2C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE2C                            ; ---------------------------------------------------------------------------
0000FE2C                            
0000FE2C                            MarkObjGone:
0000FE2C 3028 0008                  		move.w	8(a0),d0
0000FE30 0240 FF80                  		andi.w	#$FF80,d0
0000FE34 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE38 0441 0080                  		subi.w	#$80,d1
0000FE3C 0241 FF80                  		andi.w	#$FF80,d1
0000FE40 9041                       		sub.w	d1,d0
0000FE42 0C40 0280                  		cmpi.w	#$280,d0
0000FE46 6200 0000                  		bhi.w	Mark_ChkGone
0000FE4A 6000 DF36                  		bra.w	DisplaySprite
0000FE4E                            ; ===========================================================================
0000FE4E                            
0000FE4E                            Mark_ChkGone:
0000FE4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE52 7000                       		moveq	#0,d0
0000FE54 1028 0023                  		move.b	$23(a0),d0
0000FE58 6700                       		beq.s	Mark_Delete
0000FE5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE60                            
0000FE60                            Mark_Delete:
0000FE60 6000 DF5C                  		bra.w	DeleteObject
0000FE64                            
0000FE64                            ; ===========================================================================
0000FE64 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FE66 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FE68                            ; ===========================================================================
0000FE68                            
0000FE68                            Obj40_Move:				; XREF: Obj40_Index2
0000FE68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE6C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FE6E 5428 0025                  		addq.b	#2,$25(a0)
0000FE72 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FE78 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE7E 0868 0000 0022             		bchg	#0,$22(a0)
0000FE84 6600                       		bne.s	locret_F70A
0000FE86 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE8A                            
0000FE8A                            locret_F70A:
0000FE8A 4E75                       		rts	
0000FE8C                            ; ===========================================================================
0000FE8C                            
0000FE8C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FE8C 6100 DECE                  		bsr.w	SpeedToPos
0000FE90 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE96 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE9A 6D00                       		blt.s	Obj40_Pause
0000FE9C 0C41 000C                  		cmpi.w	#$C,d1
0000FEA0 6C00                       		bge.s	Obj40_Pause
0000FEA2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FEA6 5328 0033                  		subq.b	#1,$33(a0)
0000FEAA 6A00                       		bpl.s	locret_F756
0000FEAC 117C 000F 0033             		move.b	#$F,$33(a0)
0000FEB2 6100 E35A                  		bsr.w	SingleObjLoad
0000FEB6 6600                       		bne.s	locret_F756
0000FEB8 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FEBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEC8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FECE 137C 0002 001C             		move.b	#2,$1C(a1)
0000FED4                            
0000FED4                            locret_F756:
0000FED4 4E75                       		rts	
0000FED6                            ; ===========================================================================
0000FED6                            
0000FED6                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FED6 5528 0025                  		subq.b	#2,$25(a0)
0000FEDA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FEE0 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FEE6 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEEC 4E75                       		rts	
0000FEEE                            ; ===========================================================================
0000FEEE                            
0000FEEE                            Obj40_Animate:				; XREF: Obj40_Index
0000FEEE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FEF4 6100 AF84                  		bsr.w	AnimateSprite
0000FEF8 6000 DE88                  		bra.w	DisplaySprite
0000FEFC                            ; ===========================================================================
0000FEFC                            
0000FEFC                            Obj40_Delete:				; XREF: Obj40_Index
0000FEFC 6000 DEC0                  		bra.w	DeleteObject
0000FF00                            ; ===========================================================================
0000FF00                            Ani_obj40:
0000FF00                            	include "_anim\obj40.asm"
0000FF00                            ; ---------------------------------------------------------------------------
0000FF00                            ; Animation script - Motobug enemy
0000FF00                            ; ---------------------------------------------------------------------------
0000FF00 0000                       		dc.w byte_F788-Ani_obj40
0000FF02 0000                       		dc.w byte_F78C-Ani_obj40
0000FF04 0000                       		dc.w byte_F792-Ani_obj40
0000FF06 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FF0A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FF10 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF1E                            		even
0000FF1E                            		even
0000FF1E                            
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            Map_obj40:
0000FF1E                            	include "_maps\obj40.asm"
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF1E                            ; ---------------------------------------------------------------------------
0000FF1E 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000FF22 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000FF26 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000FF2A 0000                       		dc.w byte_F804-Map_obj40
0000FF2C 04                         byte_F7AE:	dc.b 4
0000FF2D F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000FF32 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000FF37 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000FF3C 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000FF41 04                         byte_F7C3:	dc.b 4
0000FF42 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000FF47 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000FF4C F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000FF51 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000FF56 05                         byte_F7D8:	dc.b 5
0000FF57 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000FF5C 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000FF61 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000FF66 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000FF6B 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000FF70 01                         byte_F7F2:	dc.b 1
0000FF71 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000FF76 01                         byte_F7F8:	dc.b 1
0000FF77 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000FF7C 01                         byte_F7FE:	dc.b 1
0000FF7D FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000FF82 00                         byte_F804:	dc.b 0
0000FF84 00                         		even
0000FF84 00                         		even
0000FF84                            
0000FF84                            ; ===========================================================================
0000FF84                            ; ---------------------------------------------------------------------------
0000FF84                            ; Object 4F - blank
0000FF84                            ; ---------------------------------------------------------------------------
0000FF84                            
0000FF84                            Obj4F:					; XREF: Obj_Index
0000FF84 4E75                       		rts	
0000FF86                            
0000FF86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF86                            
0000FF86                            
0000FF86                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FF86 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FF8A D047                       		add.w	d7,d0
0000FF8C 0240 0003                  		andi.w	#3,d0
0000FF90 6600                       		bne.s	loc_F836
0000FF92 7600                       		moveq	#0,d3
0000FF94 1628 0019                  		move.b	$19(a0),d3
0000FF98 4A68 0010                  		tst.w	$10(a0)
0000FF9C 6B00                       		bmi.s	loc_F82C
0000FF9E 6100 0000                  		bsr.w	ObjHitWallRight
0000FFA2 4A41                       		tst.w	d1
0000FFA4 6A00                       		bpl.s	loc_F836
0000FFA6                            
0000FFA6                            loc_F828:
0000FFA6 7001                       		moveq	#1,d0
0000FFA8 4E75                       		rts	
0000FFAA                            ; ===========================================================================
0000FFAA                            
0000FFAA                            loc_F82C:
0000FFAA 4643                       		not.w	d3
0000FFAC 6100 0000                  		bsr.w	ObjHitWallLeft
0000FFB0 4A41                       		tst.w	d1
0000FFB2 6BF2                       		bmi.s	loc_F828
0000FFB4                            
0000FFB4                            loc_F836:
0000FFB4 7000                       		moveq	#0,d0
0000FFB6 4E75                       		rts	
0000FFB8                            ; End of function Obj50_ChkWall
0000FFB8                            
0000FFB8                            ; ===========================================================================
0000FFB8                            ; ---------------------------------------------------------------------------
0000FFB8                            ; Object 50 - Yadrin enemy (SYZ)
0000FFB8                            ; ---------------------------------------------------------------------------
0000FFB8                            
0000FFB8                            Obj50:					; XREF: Obj_Index
0000FFB8 7000                       		moveq	#0,d0
0000FFBA 1028 0024                  		move.b	$24(a0),d0
0000FFBE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FFC2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FFC6                            ; ===========================================================================
0000FFC6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FFC8 0000                       		dc.w Obj50_Action-Obj50_Index
0000FFCA                            ; ===========================================================================
0000FFCA                            
0000FFCA                            Obj50_Main:				; XREF: Obj50_Index
0000FFCA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FFD2 317C 247B 0002             		move.w	#$247B,2(a0)
0000FFD8 117C 0004 0001             		move.b	#4,1(a0)
0000FFDE 117C 0004 0018             		move.b	#4,$18(a0)
0000FFE4 117C 0014 0019             		move.b	#$14,$19(a0)
0000FFEA 117C 0011 0016             		move.b	#$11,$16(a0)
0000FFF0 117C 0008 0017             		move.b	#8,$17(a0)
0000FFF6 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FFFC 6100 DD32                  		bsr.w	ObjectFall
00010000 6100 0000                  		bsr.w	ObjHitFloor
00010004 4A41                       		tst.w	d1
00010006 6A00                       		bpl.s	locret_F89E
00010008 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001000C 317C 0000 0012             		move.w	#0,$12(a0)
00010012 5428 0024                  		addq.b	#2,$24(a0)
00010016 0868 0000 0022             		bchg	#0,$22(a0)
0001001C                            
0001001C                            locret_F89E:
0001001C 4E75                       		rts	
0001001E                            ; ===========================================================================
0001001E                            
0001001E                            Obj50_Action:				; XREF: Obj50_Index
0001001E 7000                       		moveq	#0,d0
00010020 1028 0025                  		move.b	$25(a0),d0
00010024 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010028 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001002C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010032 6100 AE46                  		bsr.w	AnimateSprite
00010036 6000 FDF4                  		bra.w	MarkObjGone
0001003A                            ; ===========================================================================
0001003A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001003C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001003E                            ; ===========================================================================
0001003E                            
0001003E                            Obj50_Move:				; XREF: Obj50_Index2
0001003E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010042 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010044 5428 0025                  		addq.b	#2,$25(a0)
00010048 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001004E 117C 0001 001C             		move.b	#1,$1C(a0)
00010054 0868 0000 0022             		bchg	#0,$22(a0)
0001005A 6600                       		bne.s	locret_F8E2
0001005C 4468 0010                  		neg.w	$10(a0)		; change direction
00010060                            
00010060                            locret_F8E2:
00010060 4E75                       		rts	
00010062                            ; ===========================================================================
00010062                            
00010062                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010062 6100 DCF8                  		bsr.w	SpeedToPos
00010066 6100 0000                  		bsr.w	ObjHitFloor
0001006A 0C41 FFF8                  		cmpi.w	#-8,d1
0001006E 6D00                       		blt.s	Obj50_Pause
00010070 0C41 000C                  		cmpi.w	#$C,d1
00010074 6C00                       		bge.s	Obj50_Pause
00010076 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001007A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001007E 6600                       		bne.s	Obj50_Pause
00010080 4E75                       		rts	
00010082                            ; ===========================================================================
00010082                            
00010082                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010082 5528 0025                  		subq.b	#2,$25(a0)
00010086 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001008C 317C 0000 0010             		move.w	#0,$10(a0)
00010092 117C 0000 001C             		move.b	#0,$1C(a0)
00010098 4E75                       		rts	
0001009A                            ; ===========================================================================
0001009A                            Ani_obj50:
0001009A                            	include "_anim\obj50.asm"
0001009A                            ; ---------------------------------------------------------------------------
0001009A                            ; Animation script - Yadrin enemy
0001009A                            ; ---------------------------------------------------------------------------
0001009A 0000                       		dc.w byte_F920-Ani_obj50
0001009C 0000                       		dc.w byte_F924-Ani_obj50
0001009E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000100A2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000100AC                            		even
000100AC                            		even
000100AC                            
000100AC                            ; ---------------------------------------------------------------------------
000100AC                            ; Sprite mappings - Yadrin enemy (SYZ)
000100AC                            ; ---------------------------------------------------------------------------
000100AC                            Map_obj50:
000100AC                            	include "_maps\obj50.asm"
000100AC                            ; ---------------------------------------------------------------------------
000100AC                            ; Sprite mappings - Yadrin enemy (SYZ)
000100AC                            ; ---------------------------------------------------------------------------
000100AC 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000100B0 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000100B4 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
000100B8 05                         byte_F93A:	dc.b 5
000100B9 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000100BE FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000100C3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000100C8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000100CD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000100D2 05                         byte_F954:	dc.b 5
000100D3 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000100D8 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000100DD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000100E2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000100E7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000100EC 05                         byte_F96E:	dc.b 5
000100ED F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000100F2 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000100F7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000100FC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010101 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010106 05                         byte_F988:	dc.b 5
00010107 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001010C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010111 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010116 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001011B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010120 05                         byte_F9A2:	dc.b 5
00010121 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010126 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001012B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010130 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010135 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001013A 05                         byte_F9BC:	dc.b 5
0001013B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00010140 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010145 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001014A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001014F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010154                            		even
00010154                            		even
00010154                            
00010154                            ; ---------------------------------------------------------------------------
00010154                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010154                            ;
00010154                            ; variables:
00010154                            ; d1 = width
00010154                            ; d2 = height /	2 (when	jumping)
00010154                            ; d3 = height /	2 (when	walking)
00010154                            ; d4 = x-axis position
00010154                            ; ---------------------------------------------------------------------------
00010154                            
00010154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010154                            
00010154                            
00010154                            SolidObject:
00010154 4A28 0025                  		tst.b	$25(a0)
00010158 6700 0000                  		beq.w	loc_FAC8
0001015C 3401                       		move.w	d1,d2
0001015E D442                       		add.w	d2,d2
00010160 43F8 D000                  		lea	($FFFFD000).w,a1
00010164 0829 0001 0022             		btst	#1,$22(a1)
0001016A 6600                       		bne.s	loc_F9FE
0001016C 3029 0008                  		move.w	8(a1),d0
00010170 9068 0008                  		sub.w	8(a0),d0
00010174 D041                       		add.w	d1,d0
00010176 6B00                       		bmi.s	loc_F9FE
00010178 B042                       		cmp.w	d2,d0
0001017A 6500                       		bcs.s	loc_FA12
0001017C                            
0001017C                            loc_F9FE:
0001017C 08A9 0003 0022             		bclr	#3,$22(a1)
00010182 08A8 0003 0022             		bclr	#3,$22(a0)
00010188 4228 0025                  		clr.b	$25(a0)
0001018C 7800                       		moveq	#0,d4
0001018E 4E75                       		rts	
00010190                            ; ===========================================================================
00010190                            
00010190                            loc_FA12:
00010190 3404                       		move.w	d4,d2
00010192 6100 80AE                  		bsr.w	MvSonicOnPtfm
00010196 7800                       		moveq	#0,d4
00010198 4E75                       		rts	
0001019A                            ; ===========================================================================
0001019A                            
0001019A                            SolidObject71:				; XREF: Obj71_Solid
0001019A 4A28 0025                  		tst.b	$25(a0)
0001019E 6700 0000                  		beq.w	loc_FAD0
000101A2 3401                       		move.w	d1,d2
000101A4 D442                       		add.w	d2,d2
000101A6 43F8 D000                  		lea	($FFFFD000).w,a1
000101AA 0829 0001 0022             		btst	#1,$22(a1)
000101B0 6600                       		bne.s	loc_FA44
000101B2 3029 0008                  		move.w	8(a1),d0
000101B6 9068 0008                  		sub.w	8(a0),d0
000101BA D041                       		add.w	d1,d0
000101BC 6B00                       		bmi.s	loc_FA44
000101BE B042                       		cmp.w	d2,d0
000101C0 6500                       		bcs.s	loc_FA58
000101C2                            
000101C2                            loc_FA44:
000101C2 08A9 0003 0022             		bclr	#3,$22(a1)
000101C8 08A8 0003 0022             		bclr	#3,$22(a0)
000101CE 4228 0025                  		clr.b	$25(a0)
000101D2 7800                       		moveq	#0,d4
000101D4 4E75                       		rts	
000101D6                            ; ===========================================================================
000101D6                            
000101D6                            loc_FA58:
000101D6 3404                       		move.w	d4,d2
000101D8 6100 8068                  		bsr.w	MvSonicOnPtfm
000101DC 7800                       		moveq	#0,d4
000101DE 4E75                       		rts	
000101E0                            ; ===========================================================================
000101E0                            
000101E0                            SolidObject2F:				; XREF: Obj2F_Solid
000101E0 43F8 D000                  		lea	($FFFFD000).w,a1
000101E4 4A28 0001                  		tst.b	1(a0)
000101E8 6A00 0000                  		bpl.w	loc_FB92
000101EC 3029 0008                  		move.w	8(a1),d0
000101F0 9068 0008                  		sub.w	8(a0),d0
000101F4 D041                       		add.w	d1,d0
000101F6 6B00 0000                  		bmi.w	loc_FB92
000101FA 3601                       		move.w	d1,d3
000101FC D643                       		add.w	d3,d3
000101FE B043                       		cmp.w	d3,d0
00010200 6200 0000                  		bhi.w	loc_FB92
00010204 3A00                       		move.w	d0,d5
00010206 0828 0000 0001             		btst	#0,1(a0)
0001020C 6700                       		beq.s	loc_FA94
0001020E 4645                       		not.w	d5
00010210 DA43                       		add.w	d3,d5
00010212                            
00010212                            loc_FA94:
00010212 E24D                       		lsr.w	#1,d5
00010214 7600                       		moveq	#0,d3
00010216 1632 5000                  		move.b	(a2,d5.w),d3
0001021A 9612                       		sub.b	(a2),d3
0001021C 3A28 000C                  		move.w	$C(a0),d5
00010220 9A43                       		sub.w	d3,d5
00010222 1629 0016                  		move.b	$16(a1),d3
00010226 4883                       		ext.w	d3
00010228 D443                       		add.w	d3,d2
0001022A 3629 000C                  		move.w	$C(a1),d3
0001022E 9645                       		sub.w	d5,d3
00010230 5843                       		addq.w	#4,d3
00010232 D642                       		add.w	d2,d3
00010234 6B00 0000                  		bmi.w	loc_FB92
00010238 3802                       		move.w	d2,d4
0001023A D844                       		add.w	d4,d4
0001023C B644                       		cmp.w	d4,d3
0001023E 6400 0000                  		bcc.w	loc_FB92
00010242 6000 0000                  		bra.w	loc_FB0E
00010246                            ; ===========================================================================
00010246                            
00010246                            loc_FAC8:
00010246 4A28 0001                  		tst.b	1(a0)
0001024A 6A00 0000                  		bpl.w	loc_FB92
0001024E                            
0001024E                            loc_FAD0:
0001024E 43F8 D000                  		lea	($FFFFD000).w,a1
00010252 3029 0008                  		move.w	8(a1),d0
00010256 9068 0008                  		sub.w	8(a0),d0
0001025A D041                       		add.w	d1,d0
0001025C 6B00 0000                  		bmi.w	loc_FB92
00010260 3601                       		move.w	d1,d3
00010262 D643                       		add.w	d3,d3
00010264 B043                       		cmp.w	d3,d0
00010266 6200 0000                  		bhi.w	loc_FB92
0001026A 1629 0016                  		move.b	$16(a1),d3
0001026E 4883                       		ext.w	d3
00010270 D443                       		add.w	d3,d2
00010272 3629 000C                  		move.w	$C(a1),d3
00010276 9668 000C                  		sub.w	$C(a0),d3
0001027A 5843                       		addq.w	#4,d3
0001027C D642                       		add.w	d2,d3
0001027E 6B00 0000                  		bmi.w	loc_FB92
00010282 3802                       		move.w	d2,d4
00010284 D844                       		add.w	d4,d4
00010286 B644                       		cmp.w	d4,d3
00010288 6400 0000                  		bcc.w	loc_FB92
0001028C                            
0001028C                            loc_FB0E:
0001028C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010290 6B00 0000                  		bmi.w	loc_FB92
00010294 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001029A 6400 0000                  		bcc.w	loc_FB92
0001029E 4A78 FE08                  		tst.w	($FFFFFE08).w
000102A2 6600 0000                  		bne.w	loc_FBAC
000102A6 3A00                       		move.w	d0,d5
000102A8 B240                       		cmp.w	d0,d1
000102AA 6400                       		bcc.s	loc_FB36
000102AC D241                       		add.w	d1,d1
000102AE 9041                       		sub.w	d1,d0
000102B0 3A00                       		move.w	d0,d5
000102B2 4445                       		neg.w	d5
000102B4                            
000102B4                            loc_FB36:
000102B4 3203                       		move.w	d3,d1
000102B6 B443                       		cmp.w	d3,d2
000102B8 6400                       		bcc.s	loc_FB44
000102BA 5943                       		subq.w	#4,d3
000102BC 9644                       		sub.w	d4,d3
000102BE 3203                       		move.w	d3,d1
000102C0 4441                       		neg.w	d1
000102C2                            
000102C2                            loc_FB44:
000102C2 BA41                       		cmp.w	d1,d5
000102C4 6200 0000                  		bhi.w	loc_FBB0
000102C8 0C41 0004                  		cmpi.w	#4,d1
000102CC 6300                       		bls.s	loc_FB8C
000102CE 4A40                       		tst.w	d0
000102D0 6700                       		beq.s	loc_FB70
000102D2 6B00                       		bmi.s	loc_FB5E
000102D4 4A69 0010                  		tst.w	$10(a1)
000102D8 6B00                       		bmi.s	loc_FB70
000102DA 6000                       		bra.s	loc_FB64
000102DC                            ; ===========================================================================
000102DC                            
000102DC                            loc_FB5E:
000102DC 4A69 0010                  		tst.w	$10(a1)
000102E0 6A00                       		bpl.s	loc_FB70
000102E2                            
000102E2                            loc_FB64:
000102E2 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000102E8 337C 0000 0010             		move.w	#0,$10(a1)
000102EE                            
000102EE                            loc_FB70:
000102EE 9169 0008                  		sub.w	d0,8(a1)
000102F2 0829 0001 0022             		btst	#1,$22(a1)
000102F8 6600                       		bne.s	loc_FB8C
000102FA 08E9 0005 0022             		bset	#5,$22(a1)
00010300 08E8 0005 0022             		bset	#5,$22(a0)
00010306 7801                       		moveq	#1,d4
00010308 4E75                       		rts	
0001030A                            ; ===========================================================================
0001030A                            
0001030A                            loc_FB8C:
0001030A 6100                       		bsr.s	loc_FBA0
0001030C 7801                       		moveq	#1,d4
0001030E 4E75                       		rts	
00010310                            ; ===========================================================================
00010310                            
00010310                            loc_FB92:
00010310 0828 0005 0022             		btst	#5,$22(a0)
00010316 6700                       		beq.s	loc_FBAC
00010318 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001031E                            
0001031E                            loc_FBA0:
0001031E 08A8 0005 0022             		bclr	#5,$22(a0)
00010324 08A9 0005 0022             		bclr	#5,$22(a1)
0001032A                            
0001032A                            loc_FBAC:
0001032A 7800                       		moveq	#0,d4
0001032C 4E75                       		rts	
0001032E                            ; ===========================================================================
0001032E                            
0001032E                            loc_FBB0:
0001032E 4A43                       		tst.w	d3
00010330 6B00                       		bmi.s	loc_FBBC
00010332 0C43 0010                  		cmpi.w	#$10,d3
00010336 6500                       		bcs.s	loc_FBEE
00010338 60D6                       		bra.s	loc_FB92
0001033A                            ; ===========================================================================
0001033A                            
0001033A                            loc_FBBC:
0001033A 4A69 0012                  		tst.w	$12(a1)
0001033E 6700                       		beq.s	loc_FBD6
00010340 6A00                       		bpl.s	loc_FBD2
00010342 4A43                       		tst.w	d3
00010344 6A00                       		bpl.s	loc_FBD2
00010346 9769 000C                  		sub.w	d3,$C(a1)
0001034A 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010350                            
00010350                            loc_FBD2:
00010350 78FF                       		moveq	#-1,d4
00010352 4E75                       		rts	
00010354                            ; ===========================================================================
00010354                            
00010354                            loc_FBD6:
00010354 0829 0001 0022             		btst	#1,$22(a1)
0001035A 66F4                       		bne.s	loc_FBD2
0001035C 2F08                       		move.l	a0,-(sp)
0001035E 2049                       		movea.l	a1,a0
00010360 4EB9 0000 0000             		jsr	KillSonic
00010366 205F                       		movea.l	(sp)+,a0
00010368 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001036E 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00010374 78FF                       		moveq	#-1,d4
00010376 4E75                       		rts	
00010378                            ; ===========================================================================
00010378                            
00010378                            loc_FBEE:
00010378 5943                       		subq.w	#4,d3
0001037A 7200                       		moveq	#0,d1
0001037C 1228 0019                  		move.b	$19(a0),d1
00010380 3401                       		move.w	d1,d2
00010382 D442                       		add.w	d2,d2
00010384 D269 0008                  		add.w	8(a1),d1
00010388 9268 0008                  		sub.w	8(a0),d1
0001038C 6B00                       		bmi.s	loc_FC28
0001038E B242                       		cmp.w	d2,d1
00010390 6400                       		bcc.s	loc_FC28
00010392 4A69 0012                  		tst.w	$12(a1)
00010396 6B00                       		bmi.s	loc_FC28
00010398 9769 000C                  		sub.w	d3,$C(a1)
0001039C 5369 000C                  		subq.w	#1,$C(a1)
000103A0 6100                       		bsr.s	sub_FC2C
000103A2 117C 0002 0025             		move.b	#2,$25(a0)
000103A8 08E8 0003 0022             		bset	#3,$22(a0)
000103AE 78FF                       		moveq	#-1,d4
000103B0 4E75                       		rts	
000103B2                            ; ===========================================================================
000103B2                            
000103B2                            loc_FC28:
000103B2 7800                       		moveq	#0,d4
000103B4 4E75                       		rts	
000103B6                            ; End of function SolidObject
000103B6                            
000103B6                            
000103B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103B6                            
000103B6                            
000103B6                            sub_FC2C:				; XREF: SolidObject
000103B6 0829 0003 0022             		btst	#3,$22(a1)
000103BC 6700                       		beq.s	loc_FC4E
000103BE 7000                       		moveq	#0,d0
000103C0 1029 003D                  		move.b	$3D(a1),d0
000103C4 ED48                       		lsl.w	#6,d0
000103C6 0680 00FF D000             		addi.l	#$FFD000,d0
000103CC 2440                       		movea.l	d0,a2
000103CE 08AA 0003 0022             		bclr	#3,$22(a2)
000103D4 422A 0025                  		clr.b	$25(a2)
000103D8                            
000103D8                            loc_FC4E:
000103D8 3008                       		move.w	a0,d0
000103DA 0440 D000                  		subi.w	#-$3000,d0
000103DE EC48                       		lsr.w	#6,d0
000103E0 0240 007F                  		andi.w	#$7F,d0
000103E4 1340 003D                  		move.b	d0,$3D(a1)
000103E8 137C 0000 0026             		move.b	#0,$26(a1)
000103EE 337C 0000 0012             		move.w	#0,$12(a1)
000103F4 3369 0010 0014             		move.w	$10(a1),$14(a1)
000103FA 0829 0001 0022             		btst	#1,$22(a1)
00010400 6700                       		beq.s	loc_FC84
00010402 2F08                       		move.l	a0,-(sp)
00010404 2049                       		movea.l	a1,a0
00010406 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001040C 205F                       		movea.l	(sp)+,a0
0001040E                            
0001040E                            loc_FC84:
0001040E 08E9 0003 0022             		bset	#3,$22(a1)
00010414 08E8 0003 0022             		bset	#3,$22(a0)
0001041A 4E75                       		rts	
0001041C                            ; End of function sub_FC2C
0001041C                            
0001041C                            ; ===========================================================================
0001041C                            ; ---------------------------------------------------------------------------
0001041C                            ; Object 51 - smashable	green block (MZ)
0001041C                            ; ---------------------------------------------------------------------------
0001041C                            
0001041C                            Obj51:					; XREF: Obj_Index
0001041C 7000                       		moveq	#0,d0
0001041E 1028 0024                  		move.b	$24(a0),d0
00010422 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010426 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001042A 6000 FA00                  		bra.w	MarkObjGone
0001042E                            ; ===========================================================================
0001042E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010430 0000                       		dc.w Obj51_Solid-Obj51_Index
00010432 0000                       		dc.w Obj51_Display-Obj51_Index
00010434                            ; ===========================================================================
00010434                            
00010434                            Obj51_Main:				; XREF: Obj51_Index
00010434 5428 0024                  		addq.b	#2,$24(a0)
00010438 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010440 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010446 117C 0004 0001             		move.b	#4,1(a0)
0001044C 117C 0010 0019             		move.b	#$10,$19(a0)
00010452 117C 0004 0018             		move.b	#4,$18(a0)
00010458 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001045E                            
0001045E                            Obj51_Solid:				; XREF: Obj51_Index
0001045E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010464 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001046A 323C 001B                  		move.w	#$1B,d1
0001046E 343C 0010                  		move.w	#$10,d2
00010472 363C 0011                  		move.w	#$11,d3
00010476 3828 0008                  		move.w	8(a0),d4
0001047A 6100 FCD8                  		bsr.w	SolidObject
0001047E 0828 0003 0022             		btst	#3,$22(a0)
00010484 6600                       		bne.s	Obj51_Smash
00010486                            
00010486                            locret_FCFC:
00010486 4E75                       		rts	
00010488                            ; ===========================================================================
00010488                            
00010488                            Obj51_Smash:				; XREF: Obj51_Solid
00010488 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001048E 66F6                       		bne.s	locret_FCFC	; if not, branch
00010490 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010496 08E9 0002 0022             		bset	#2,$22(a1)
0001049C 137C 000E 0016             		move.b	#$E,$16(a1)
000104A2 137C 0007 0017             		move.b	#7,$17(a1)
000104A8 137C 0002 001C             		move.b	#2,$1C(a1)
000104AE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000104B4 08E9 0001 0022             		bset	#1,$22(a1)
000104BA 08A9 0003 0022             		bclr	#3,$22(a1)
000104C0 137C 0002 0024             		move.b	#2,$24(a1)
000104C6 08A8 0003 0022             		bclr	#3,$22(a0)
000104CC 4228 0025                  		clr.b	$25(a0)
000104D0 117C 0001 001A             		move.b	#1,$1A(a0)
000104D6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000104DC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000104DE 343C 0038                  		move.w	#$38,d2
000104E2 6100 D48C                  		bsr.w	SmashObject
000104E6 6100 DD26                  		bsr.w	SingleObjLoad
000104EA 6600                       		bne.s	Obj51_Display
000104EC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000104F0 3368 0008 0008             		move.w	8(a0),8(a1)
000104F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000104FC 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010500 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010504 0C42 0006                  		cmpi.w	#6,d2
00010508 6500                       		bcs.s	Obj51_Bonus
0001050A 7406                       		moveq	#6,d2
0001050C                            
0001050C                            Obj51_Bonus:
0001050C 7000                       		moveq	#0,d0
0001050E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010512 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010518 6500                       		bcs.s	loc_FD98	; if not, branch
0001051A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001051E 740A                       		moveq	#10,d2
00010520                            
00010520                            loc_FD98:
00010520 4EB9 0000 0000             		jsr	AddPoints
00010526 E24A                       		lsr.w	#1,d2
00010528 1342 001A                  		move.b	d2,$1A(a1)
0001052C                            
0001052C                            Obj51_Display:				; XREF: Obj51_Index
0001052C 6100 D82E                  		bsr.w	SpeedToPos
00010530 0668 0038 0012             		addi.w	#$38,$12(a0)
00010536 6100 D84A                  		bsr.w	DisplaySprite
0001053A 4A28 0001                  		tst.b	1(a0)
0001053E 6A00 D87E                  		bpl.w	DeleteObject
00010542 4E75                       		rts	
00010544                            ; ===========================================================================
00010544 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010548 FF00 FF00                  		dc.w $FF00, $FF00
0001054C 0200 FE00                  		dc.w $200, $FE00
00010550 0100 FF00                  		dc.w $100, $FF00
00010554                            
00010554 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            ; Sprite mappings - smashable green block (MZ)
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            Map_obj51:
0001055C                            	include "_maps\obj51.asm"
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            ; Sprite mappings - smashable green block (MZ)
0001055C                            ; ---------------------------------------------------------------------------
0001055C 0000                       		dc.w byte_FDD8-Map_obj51
0001055E 0000                       		dc.w byte_FDE3-Map_obj51
00010560 02                         byte_FDD8:	dc.b 2
00010561 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010566 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001056B 04                         byte_FDE3:	dc.b 4
0001056C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010571 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010576 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001057B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010580                            		even
00010580                            		even
00010580                            
00010580                            ; ===========================================================================
00010580                            ; ---------------------------------------------------------------------------
00010580                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010580                            ; ---------------------------------------------------------------------------
00010580                            
00010580                            Obj52:					; XREF: Obj_Index
00010580 7000                       		moveq	#0,d0
00010582 1028 0024                  		move.b	$24(a0),d0
00010586 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001058A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001058E                            ; ===========================================================================
0001058E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010590 0000                       		dc.w Obj52_Platform-Obj52_Index
00010592 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010594                            
00010594 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010596 2001                       		dc.b $20, 1
00010598 2002                       		dc.b $20, 2
0001059A 4003                       		dc.b $40, 3
0001059C 3004                       		dc.b $30, 4
0001059E                            ; ===========================================================================
0001059E                            
0001059E                            Obj52_Main:				; XREF: Obj52_Index
0001059E 5428 0024                  		addq.b	#2,$24(a0)
000105A2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000105AA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000105B0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000105B6 6600                       		bne.s	loc_FE44
000105B8 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000105C0 317C 43BC 0002             		move.w	#$43BC,2(a0)
000105C6 117C 0007 0016             		move.b	#7,$16(a0)
000105CC                            
000105CC                            loc_FE44:
000105CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000105D2 6600                       		bne.s	loc_FE60
000105D4 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000105DA 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000105E0 6700                       		beq.s	loc_FE60	; if yes, branch
000105E2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000105E8                            
000105E8                            loc_FE60:
000105E8 117C 0004 0001             		move.b	#4,1(a0)
000105EE 7000                       		moveq	#0,d0
000105F0 1028 0028                  		move.b	$28(a0),d0
000105F4 E648                       		lsr.w	#3,d0
000105F6 0240 001E                  		andi.w	#$1E,d0
000105FA 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000105FE 115A 0019                  		move.b	(a2)+,$19(a0)
00010602 115A 001A                  		move.b	(a2)+,$1A(a0)
00010606 117C 0004 0018             		move.b	#4,$18(a0)
0001060C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010612 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010618 0228 000F 0028             		andi.b	#$F,$28(a0)
0001061E                            
0001061E                            Obj52_Platform:				; XREF: Obj52_Index
0001061E 6100 0000                  		bsr.w	Obj52_Move
00010622 7200                       		moveq	#0,d1
00010624 1228 0019                  		move.b	$19(a0),d1
00010628 4EB9 0000 7B70             		jsr	(PlatformObject).l
0001062E 6000                       		bra.s	Obj52_ChkDel
00010630                            ; ===========================================================================
00010630                            
00010630                            Obj52_StandOn:				; XREF: Obj52_Index
00010630 7200                       		moveq	#0,d1
00010632 1228 0019                  		move.b	$19(a0),d1
00010636 4EB9 0000 7CE4             		jsr	(ExitPlatform).l
0001063C 3F28 0008                  		move.w	8(a0),-(sp)
00010640 6100 0000                  		bsr.w	Obj52_Move
00010644 341F                       		move.w	(sp)+,d2
00010646 4EB9 0000 824E             		jsr	(MvSonicOnPtfm2).l
0001064C                            
0001064C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001064C 3028 0030                  		move.w	$30(a0),d0
00010650 0240 FF80                  		andi.w	#$FF80,d0
00010654 3238 F700                  		move.w	($FFFFF700).w,d1
00010658 0441 0080                  		subi.w	#$80,d1
0001065C 0241 FF80                  		andi.w	#$FF80,d1
00010660 9041                       		sub.w	d1,d0
00010662 0C40 0280                  		cmpi.w	#$280,d0
00010666 6200 D756                  		bhi.w	DeleteObject
0001066A 6000 D716                  		bra.w	DisplaySprite
0001066E                            ; ===========================================================================
0001066E                            
0001066E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001066E 7000                       		moveq	#0,d0
00010670 1028 0028                  		move.b	$28(a0),d0
00010674 0240 000F                  		andi.w	#$F,d0
00010678 D040                       		add.w	d0,d0
0001067A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001067E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010682                            ; ===========================================================================
00010682 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010686 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001068A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001068E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010692 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010696 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010698                            ; ===========================================================================
00010698                            
00010698                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010698 4E75                       		rts	
0001069A                            ; ===========================================================================
0001069A                            
0001069A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001069A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001069E 323C 0060                  		move.w	#$60,d1
000106A2 0828 0000 0022             		btst	#0,$22(a0)
000106A8 6700                       		beq.s	loc_FF26
000106AA 4440                       		neg.w	d0
000106AC D041                       		add.w	d1,d0
000106AE                            
000106AE                            loc_FF26:
000106AE 3228 0030                  		move.w	$30(a0),d1
000106B2 9240                       		sub.w	d0,d1
000106B4 3141 0008                  		move.w	d1,8(a0)
000106B8 4E75                       		rts	
000106BA                            ; ===========================================================================
000106BA                            
000106BA                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000106BA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000106C0 6600                       		bne.s	Obj52_02_Wait
000106C2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000106C6                            
000106C6                            Obj52_02_Wait:
000106C6 4E75                       		rts	
000106C8                            ; ===========================================================================
000106C8                            
000106C8                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000106C8 7600                       		moveq	#0,d3
000106CA 1628 0019                  		move.b	$19(a0),d3
000106CE 6100 0000                  		bsr.w	ObjHitWallRight
000106D2 4A41                       		tst.w	d1		; has the platform hit a wall?
000106D4 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000106D6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            Obj52_03_End:
000106E2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000106E6 4E75                       		rts	
000106E8                            ; ===========================================================================
000106E8                            
000106E8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000106E8 7600                       		moveq	#0,d3
000106EA 1628 0019                  		move.b	$19(a0),d3
000106EE 6100 0000                  		bsr.w	ObjHitWallRight
000106F2 4A41                       		tst.w	d1		; has the platform hit a wall?
000106F4 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000106F6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000106FA 3168 0008 0030             		move.w	8(a0),$30(a0)
00010700 4E75                       		rts	
00010702                            ; ===========================================================================
00010702                            
00010702                            Obj52_05_End:
00010702 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010706 4E75                       		rts	
00010708                            ; ===========================================================================
00010708                            
00010708                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010708 6100 D652                  		bsr.w	SpeedToPos
0001070C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010712 6100 0000                  		bsr.w	ObjHitFloor
00010716 4A41                       		tst.w	d1		; has platform hit the floor?
00010718 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001071C D368 000C                  		add.w	d1,$C(a0)
00010720 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010724 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010728                            
00010728                            locret_FFA0:
00010728 4E75                       		rts	
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001072A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001072E 6700                       		beq.s	Obj52_07_ChkDel
00010730 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010734                            
00010734                            Obj52_07_ChkDel:
00010734 588F                       		addq.l	#4,sp
00010736 3028 0030                  		move.w	$30(a0),d0
0001073A 0240 FF80                  		andi.w	#$FF80,d0
0001073E 3238 F700                  		move.w	($FFFFF700).w,d1
00010742 0441 0080                  		subi.w	#$80,d1
00010746 0241 FF80                  		andi.w	#$FF80,d1
0001074A 9041                       		sub.w	d1,d0
0001074C 0C40 0280                  		cmpi.w	#$280,d0
00010750 6200 D66C                  		bhi.w	DeleteObject
00010754 4E75                       		rts	
00010756                            ; ===========================================================================
00010756                            
00010756                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010756 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001075A 323C 0080                  		move.w	#$80,d1
0001075E 0828 0000 0022             		btst	#0,$22(a0)
00010764 6700                       		beq.s	loc_FFE2
00010766 4440                       		neg.w	d0
00010768 D041                       		add.w	d1,d0
0001076A                            
0001076A                            loc_FFE2:
0001076A 3228 0032                  		move.w	$32(a0),d1
0001076E 9240                       		sub.w	d0,d1
00010770 3141 000C                  		move.w	d1,$C(a0)
00010774 4E75                       		rts	
00010776                            ; ===========================================================================
00010776                            
00010776                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010776 7600                       		moveq	#0,d3
00010778 1628 0019                  		move.b	$19(a0),d3
0001077C D643                       		add.w	d3,d3
0001077E 7208                       		moveq	#8,d1
00010780 0828 0000 0022             		btst	#0,$22(a0)
00010786 6700                       		beq.s	loc_10004
00010788 4441                       		neg.w	d1
0001078A 4443                       		neg.w	d3
0001078C                            
0001078C                            loc_10004:
0001078C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010790 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010792 3028 0008                  		move.w	8(a0),d0
00010796 9068 0030                  		sub.w	$30(a0),d0
0001079A B043                       		cmp.w	d3,d0
0001079C 6700                       		beq.s	Obj52_0A_Wait
0001079E D368 0008                  		add.w	d1,8(a0)	; move platform
000107A2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000107A8 4E75                       		rts	
000107AA                            ; ===========================================================================
000107AA                            
000107AA                            Obj52_0A_Wait:
000107AA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000107AE 6600                       		bne.s	locret_1002E	; if time remains, branch
000107B0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000107B6                            
000107B6                            locret_1002E:
000107B6 4E75                       		rts	
000107B8                            ; ===========================================================================
000107B8                            
000107B8                            Obj52_0A_Back:
000107B8 3028 0008                  		move.w	8(a0),d0
000107BC 9068 0030                  		sub.w	$30(a0),d0
000107C0 6700                       		beq.s	Obj52_0A_Reset
000107C2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000107C6 4E75                       		rts	
000107C8                            ; ===========================================================================
000107C8                            
000107C8                            Obj52_0A_Reset:
000107C8 4268 0036                  		clr.w	$36(a0)
000107CC 5328 0028                  		subq.b	#1,$28(a0)
000107D0 4E75                       		rts	
000107D2                            ; ===========================================================================
000107D2                            ; ---------------------------------------------------------------------------
000107D2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000107D2                            ; ---------------------------------------------------------------------------
000107D2                            Map_obj52:
000107D2                            	include "_maps\obj52mz.asm"
000107D2                            ; ---------------------------------------------------------------------------
000107D2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000107D2                            ; ---------------------------------------------------------------------------
000107D2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000107D6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000107DA 0000                       		dc.w byte_1008F-Map_obj52
000107DC 01                         byte_10054:	dc.b 1
000107DD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000107E2 02                         byte_1005A:	dc.b 2
000107E3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000107E8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000107ED 04                         byte_10065:	dc.b 4
000107EE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000107F3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000107F8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000107FD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010802 04                         byte_1007A:	dc.b 4
00010803 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010808 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001080D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010812 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010817 03                         byte_1008F:	dc.b 3
00010818 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001081D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010822 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010828 00                         		even
00010828 00                         		even
00010828                            
00010828                            ; ---------------------------------------------------------------------------
00010828                            ; Sprite mappings - moving block (LZ)
00010828                            ; ---------------------------------------------------------------------------
00010828                            Map_obj52a:
00010828                            	include "_maps\obj52lz.asm"
00010828                            ; ---------------------------------------------------------------------------
00010828                            ; Sprite mappings - moving block (LZ)
00010828                            ; ---------------------------------------------------------------------------
00010828 0000                       		dc.w byte_100A2-Map_obj52a
0001082A 01                         byte_100A2:	dc.b 1
0001082B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010830                            		even
00010830                            		even
00010830                            
00010830                            ; ===========================================================================
00010830                            ; ---------------------------------------------------------------------------
00010830                            ; Object 55 - Basaran enemy (MZ)
00010830                            ; ---------------------------------------------------------------------------
00010830                            
00010830                            Obj55:					; XREF: Obj_Index
00010830 7000                       		moveq	#0,d0
00010832 1028 0024                  		move.b	$24(a0),d0
00010836 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001083A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001083E                            ; ===========================================================================
0001083E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010840 0000                       		dc.w Obj55_Action-Obj55_Index
00010842                            ; ===========================================================================
00010842                            
00010842                            Obj55_Main:				; XREF: Obj55_Index
00010842 5428 0024                  		addq.b	#2,$24(a0)
00010846 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001084E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010854 117C 0004 0001             		move.b	#4,1(a0)
0001085A 117C 000C 0016             		move.b	#$C,$16(a0)
00010860 117C 0002 0018             		move.b	#2,$18(a0)
00010866 117C 000B 0020             		move.b	#$B,$20(a0)
0001086C 117C 0010 0019             		move.b	#$10,$19(a0)
00010872                            
00010872                            Obj55_Action:				; XREF: Obj55_Index
00010872 7000                       		moveq	#0,d0
00010874 1028 0025                  		move.b	$25(a0),d0
00010878 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001087C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010880 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010886 6100 A5F2                  		bsr.w	AnimateSprite
0001088A 6000 F5A0                  		bra.w	MarkObjGone
0001088E                            ; ===========================================================================
0001088E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010890 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010892 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010894 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010896                            ; ===========================================================================
00010896                            
00010896                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010896 343C 0080                  		move.w	#$80,d2
0001089A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001089E 6400                       		bcc.s	Obj55_NoDrop
000108A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000108A4 3140 0036                  		move.w	d0,$36(a0)
000108A8 9068 000C                  		sub.w	$C(a0),d0
000108AC 6500                       		bcs.s	Obj55_NoDrop
000108AE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000108B2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000108B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000108B8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000108BA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000108BE D007                       		add.b	d7,d0
000108C0 0200 0007                  		andi.b	#7,d0
000108C4 6600                       		bne.s	Obj55_NoDrop
000108C6 117C 0001 001C             		move.b	#1,$1C(a0)
000108CC 5428 0025                  		addq.b	#2,$25(a0)
000108D0                            
000108D0                            Obj55_NoDrop:
000108D0 4E75                       		rts	
000108D2                            ; ===========================================================================
000108D2                            
000108D2                            Obj55_DropFly:				; XREF: Obj55_Index2
000108D2 6100 D488                  		bsr.w	SpeedToPos
000108D6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000108DC 343C 0080                  		move.w	#$80,d2
000108E0 6100 0000                  		bsr.w	Obj55_ChkSonic
000108E4 3028 0036                  		move.w	$36(a0),d0
000108E8 9068 000C                  		sub.w	$C(a0),d0
000108EC 6500                       		bcs.s	Obj55_ChkDel
000108EE 0C40 0010                  		cmpi.w	#$10,d0
000108F2 6400                       		bcc.s	locret_10180
000108F4 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000108F8 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000108FE 117C 0002 001C             		move.b	#2,$1C(a0)
00010904 5428 0025                  		addq.b	#2,$25(a0)
00010908                            
00010908                            locret_10180:
00010908 4E75                       		rts	
0001090A                            ; ===========================================================================
0001090A                            
0001090A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001090A 4A28 0001                  		tst.b	1(a0)
0001090E 6A00 D4AE                  		bpl.w	DeleteObject
00010912 4E75                       		rts	
00010914                            ; ===========================================================================
00010914                            
00010914                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010914 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010918 0200 000F                  		andi.b	#$F,d0
0001091C 6600                       		bne.s	loc_101A0
0001091E 303C 00C0                  		move.w	#$C0,d0
00010922 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flapping sound
00010928                            
00010928                            loc_101A0:
00010928 6100 D432                  		bsr.w	SpeedToPos
0001092C 3038 D008                  		move.w	($FFFFD008).w,d0
00010930 9068 0008                  		sub.w	8(a0),d0
00010934 6400                       		bcc.s	loc_101B0
00010936 4440                       		neg.w	d0
00010938                            
00010938                            loc_101B0:
00010938 0C40 0080                  		cmpi.w	#$80,d0
0001093C 6500                       		bcs.s	locret_101C6
0001093E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010942 D007                       		add.b	d7,d0
00010944 0200 0007                  		andi.b	#7,d0
00010948 6600                       		bne.s	locret_101C6
0001094A 5428 0025                  		addq.b	#2,$25(a0)
0001094E                            
0001094E                            locret_101C6:
0001094E 4E75                       		rts	
00010950                            ; ===========================================================================
00010950                            
00010950                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010950 6100 D40A                  		bsr.w	SpeedToPos
00010954 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001095A 6100 0000                  		bsr.w	ObjHitCeiling
0001095E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010960 6A00                       		bpl.s	locret_101F4	; if not, branch
00010962 9368 000C                  		sub.w	d1,$C(a0)
00010966 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001096C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010970 4268 0012                  		clr.w	$12(a0)
00010974 4228 001C                  		clr.b	$1C(a0)
00010978 4228 0025                  		clr.b	$25(a0)
0001097C                            
0001097C                            locret_101F4:
0001097C 4E75                       		rts	
0001097E                            ; ===========================================================================
0001097E                            
0001097E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001097E 323C 0100                  		move.w	#$100,d1
00010982 08E8 0000 0022             		bset	#0,$22(a0)
00010988 3038 D008                  		move.w	($FFFFD008).w,d0
0001098C 9068 0008                  		sub.w	8(a0),d0
00010990 6400                       		bcc.s	loc_10214
00010992 4440                       		neg.w	d0
00010994 4441                       		neg.w	d1
00010996 08A8 0000 0022             		bclr	#0,$22(a0)
0001099C                            
0001099C                            loc_10214:
0001099C B042                       		cmp.w	d2,d0
0001099E 4E75                       		rts	
000109A0                            ; ===========================================================================
000109A0 6100 D3BA                  		bsr.w	SpeedToPos
000109A4 6100 D3DC                  		bsr.w	DisplaySprite
000109A8 4A28 0001                  		tst.b	1(a0)
000109AC 6A00 D410                  		bpl.w	DeleteObject
000109B0 4E75                       		rts	
000109B2                            ; ===========================================================================
000109B2                            Ani_obj55:
000109B2                            	include "_anim\obj55.asm"
000109B2                            ; ---------------------------------------------------------------------------
000109B2                            ; Animation script - Basaran enemy
000109B2                            ; ---------------------------------------------------------------------------
000109B2 0000                       		dc.w byte_10230-Ani_obj55
000109B4 0000                       		dc.w byte_10234-Ani_obj55
000109B6 0000                       		dc.w byte_10238-Ani_obj55
000109B8 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000109BC 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000109C0 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000109C6                            		even
000109C6                            		even
000109C6                            
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            ; Sprite mappings - Basaran enemy (MZ)
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            Map_obj55:
000109C6                            	include "_maps\obj55.asm"
000109C6                            ; ---------------------------------------------------------------------------
000109C6                            ; Sprite mappings - Basaran enemy (MZ)
000109C6                            ; ---------------------------------------------------------------------------
000109C6 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000109CA 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000109CE 01                         byte_10246:	dc.b 1
000109CF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000109D4 03                         byte_1024C:	dc.b 3
000109D5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000109DA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000109DF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000109E4 04                         byte_1025C:	dc.b 4
000109E5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000109EA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000109EF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000109F4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000109F9 04                         byte_10271:	dc.b 4
000109FA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000109FF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010A04 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010A09 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010A0E                            		even
00010A0E                            		even
00010A0E                            
00010A0E                            ; ===========================================================================
00010A0E                            ; ---------------------------------------------------------------------------
00010A0E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010A0E                            ; ---------------------------------------------------------------------------
00010A0E                            
00010A0E                            Obj56:					; XREF: Obj_Index
00010A0E 7000                       		moveq	#0,d0
00010A10 1028 0024                  		move.b	$24(a0),d0
00010A14 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010A18 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010A1C                            ; ===========================================================================
00010A1C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010A1E 0000                       		dc.w Obj56_Action-Obj56_Index
00010A20                            
00010A20 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010A22 2020                       		dc.b  $20, $20
00010A24 1020                       		dc.b  $10, $20
00010A26 201A                       		dc.b  $20, $1A
00010A28 1027                       		dc.b  $10, $27
00010A2A 1010                       		dc.b  $10, $10
00010A2C 0820                       		dc.b	8, $20
00010A2E 4010                       		dc.b  $40, $10
00010A30                            ; ===========================================================================
00010A30                            
00010A30                            Obj56_Main:				; XREF: Obj56_Index
00010A30 5428 0024                  		addq.b	#2,$24(a0)
00010A34 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010A3C 317C 4000 0002             		move.w	#$4000,2(a0)
00010A42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A48 6600                       		bne.s	loc_102C8
00010A4A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010A50                            
00010A50                            loc_102C8:
00010A50 117C 0004 0001             		move.b	#4,1(a0)
00010A56 117C 0003 0018             		move.b	#3,$18(a0)
00010A5C 7000                       		moveq	#0,d0
00010A5E 1028 0028                  		move.b	$28(a0),d0
00010A62 E648                       		lsr.w	#3,d0
00010A64 0240 000E                  		andi.w	#$E,d0
00010A68 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010A6C 115A 0019                  		move.b	(a2)+,$19(a0)
00010A70 1152 0016                  		move.b	(a2),$16(a0)
00010A74 E248                       		lsr.w	#1,d0
00010A76 1140 001A                  		move.b	d0,$1A(a0)
00010A7A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010A80 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010A86 7000                       		moveq	#0,d0
00010A88 1012                       		move.b	(a2),d0
00010A8A D040                       		add.w	d0,d0
00010A8C 3140 003A                  		move.w	d0,$3A(a0)
00010A90 7000                       		moveq	#0,d0
00010A92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A98 6700                       		beq.s	loc_10332
00010A9A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010A9E 0240 000F                  		andi.w	#$F,d0
00010AA2 5140                       		subq.w	#8,d0
00010AA4 6500                       		bcs.s	loc_10332
00010AA6 E548                       		lsl.w	#2,d0
00010AA8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010AAC 45F2 0000                  		lea	(a2,d0.w),a2
00010AB0 4A52                       		tst.w	(a2)
00010AB2 6A00                       		bpl.s	loc_10332
00010AB4 0868 0000 0022             		bchg	#0,$22(a0)
00010ABA                            
00010ABA                            loc_10332:
00010ABA 1028 0028                  		move.b	$28(a0),d0
00010ABE 6A00                       		bpl.s	Obj56_Action
00010AC0 0200 000F                  		andi.b	#$F,d0
00010AC4 1140 003C                  		move.b	d0,$3C(a0)
00010AC8 117C 0005 0028             		move.b	#5,$28(a0)
00010ACE 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010AD4 6600                       		bne.s	Obj56_ChkGone
00010AD6 117C 000C 0028             		move.b	#$C,$28(a0)
00010ADC 317C 0080 003A             		move.w	#$80,$3A(a0)
00010AE2                            
00010AE2                            Obj56_ChkGone:
00010AE2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AE6 7000                       		moveq	#0,d0
00010AE8 1028 0023                  		move.b	$23(a0),d0
00010AEC 6700                       		beq.s	Obj56_Action
00010AEE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010AF4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010AFA 6700                       		beq.s	Obj56_Action
00010AFC 5228 0028                  		addq.b	#1,$28(a0)
00010B00 4268 003A                  		clr.w	$3A(a0)
00010B04                            
00010B04                            Obj56_Action:				; XREF: Obj56_Index
00010B04 3F28 0008                  		move.w	8(a0),-(sp)
00010B08 7000                       		moveq	#0,d0
00010B0A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B0E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010B12 D040                       		add.w	d0,d0
00010B14 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010B18 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010B1C 381F                       		move.w	(sp)+,d4
00010B1E 4A28 0001                  		tst.b	1(a0)
00010B22 6A00                       		bpl.s	Obj56_ChkDel
00010B24 7200                       		moveq	#0,d1
00010B26 1228 0019                  		move.b	$19(a0),d1
00010B2A 0641 000B                  		addi.w	#$B,d1
00010B2E 7400                       		moveq	#0,d2
00010B30 1428 0016                  		move.b	$16(a0),d2
00010B34 3602                       		move.w	d2,d3
00010B36 5243                       		addq.w	#1,d3
00010B38 6100 F61A                  		bsr.w	SolidObject
00010B3C                            
00010B3C                            Obj56_ChkDel:
00010B3C 3028 0034                  		move.w	$34(a0),d0
00010B40 0240 FF80                  		andi.w	#$FF80,d0
00010B44 3238 F700                  		move.w	($FFFFF700).w,d1
00010B48 0441 0080                  		subi.w	#$80,d1
00010B4C 0241 FF80                  		andi.w	#$FF80,d1
00010B50 9041                       		sub.w	d1,d0
00010B52 0C40 0280                  		cmpi.w	#$280,d0
00010B56 6200 D266                  		bhi.w	DeleteObject
00010B5A 6000 D226                  		bra.w	DisplaySprite
00010B5E                            ; ===========================================================================
00010B5E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010B62 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010B66 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010B6A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010B6E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010B72 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010B76 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010B7A                            ; ===========================================================================
00010B7A                            
00010B7A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010B7A 4E75                       		rts	
00010B7C                            ; ===========================================================================
00010B7C                            
00010B7C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010B7C 323C 0040                  		move.w	#$40,d1
00010B80 7000                       		moveq	#0,d0
00010B82 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010B86 6000                       		bra.s	Obj56_Move_LR
00010B88                            ; ===========================================================================
00010B88                            
00010B88                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010B88 323C 0080                  		move.w	#$80,d1
00010B8C 7000                       		moveq	#0,d0
00010B8E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B92                            
00010B92                            Obj56_Move_LR:
00010B92 0828 0000 0022             		btst	#0,$22(a0)
00010B98 6700                       		beq.s	loc_10416
00010B9A 4440                       		neg.w	d0
00010B9C D041                       		add.w	d1,d0
00010B9E                            
00010B9E                            loc_10416:
00010B9E 3228 0034                  		move.w	$34(a0),d1
00010BA2 9240                       		sub.w	d0,d1
00010BA4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010BA8 4E75                       		rts	
00010BAA                            ; ===========================================================================
00010BAA                            
00010BAA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010BAA 323C 0040                  		move.w	#$40,d1
00010BAE 7000                       		moveq	#0,d0
00010BB0 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BB4 6000                       		bra.s	Obj56_Move_UD
00010BB6                            ; ===========================================================================
00010BB6                            
00010BB6                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010BB6 323C 0080                  		move.w	#$80,d1
00010BBA 7000                       		moveq	#0,d0
00010BBC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BC0                            
00010BC0                            Obj56_Move_UD:
00010BC0 0828 0000 0022             		btst	#0,$22(a0)
00010BC6 6700                       		beq.s	loc_10444
00010BC8 4440                       		neg.w	d0
00010BCA D041                       		add.w	d1,d0
00010BCC                            
00010BCC                            loc_10444:
00010BCC 3228 0030                  		move.w	$30(a0),d1
00010BD0 9240                       		sub.w	d0,d1
00010BD2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010BD6 4E75                       		rts	
00010BD8                            ; ===========================================================================
00010BD8                            
00010BD8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010BD8 4A28 0038                  		tst.b	$38(a0)
00010BDC 6600                       		bne.s	loc_104A4
00010BDE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010BE4 6600                       		bne.s	loc_1047A	; if not, branch
00010BE6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010BEC 6600                       		bne.s	loc_1047A
00010BEE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010BF2 3038 D008                  		move.w	($FFFFD008).w,d0
00010BF6 B068 0008                  		cmp.w	8(a0),d0
00010BFA 6400                       		bcc.s	loc_1047A
00010BFC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010C02                            
00010C02                            loc_1047A:
00010C02 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C06 7000                       		moveq	#0,d0
00010C08 1028 003C                  		move.b	$3C(a0),d0
00010C0C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C12 6700                       		beq.s	loc_104AE
00010C14 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C1A 6600                       		bne.s	loc_1049E	; if not, branch
00010C1C 0C00 0003                  		cmpi.b	#3,d0
00010C20 6600                       		bne.s	loc_1049E
00010C22 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C26                            
00010C26                            loc_1049E:
00010C26 117C 0001 0038             		move.b	#1,$38(a0)
00010C2C                            
00010C2C                            loc_104A4:
00010C2C 4A68 003A                  		tst.w	$3A(a0)
00010C30 6700                       		beq.s	loc_104C8
00010C32 5568 003A                  		subq.w	#2,$3A(a0)
00010C36                            
00010C36                            loc_104AE:
00010C36 3028 003A                  		move.w	$3A(a0),d0
00010C3A 0828 0000 0022             		btst	#0,$22(a0)
00010C40 6700                       		beq.s	loc_104BC
00010C42 4440                       		neg.w	d0
00010C44                            
00010C44                            loc_104BC:
00010C44 3228 0030                  		move.w	$30(a0),d1
00010C48 D240                       		add.w	d0,d1
00010C4A 3141 000C                  		move.w	d1,$C(a0)
00010C4E 4E75                       		rts	
00010C50                            ; ===========================================================================
00010C50                            
00010C50                            loc_104C8:
00010C50 5228 0028                  		addq.b	#1,$28(a0)
00010C54 4228 0038                  		clr.b	$38(a0)
00010C58 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C5C 7000                       		moveq	#0,d0
00010C5E 1028 0023                  		move.b	$23(a0),d0
00010C62 67D2                       		beq.s	loc_104AE
00010C64 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C6A 60CA                       		bra.s	loc_104AE
00010C6C                            ; ===========================================================================
00010C6C                            
00010C6C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010C6C 4A28 0038                  		tst.b	$38(a0)
00010C70 6600                       		bne.s	loc_10500
00010C72 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C76 7000                       		moveq	#0,d0
00010C78 1028 003C                  		move.b	$3C(a0),d0
00010C7C 4A32 0000                  		tst.b	(a2,d0.w)
00010C80 6A00                       		bpl.s	loc_10512
00010C82 117C 0001 0038             		move.b	#1,$38(a0)
00010C88                            
00010C88                            loc_10500:
00010C88 7000                       		moveq	#0,d0
00010C8A 1028 0016                  		move.b	$16(a0),d0
00010C8E D040                       		add.w	d0,d0
00010C90 B068 003A                  		cmp.w	$3A(a0),d0
00010C94 6700                       		beq.s	loc_1052C
00010C96 5468 003A                  		addq.w	#2,$3A(a0)
00010C9A                            
00010C9A                            loc_10512:
00010C9A 3028 003A                  		move.w	$3A(a0),d0
00010C9E 0828 0000 0022             		btst	#0,$22(a0)
00010CA4 6700                       		beq.s	loc_10520
00010CA6 4440                       		neg.w	d0
00010CA8                            
00010CA8                            loc_10520:
00010CA8 3228 0030                  		move.w	$30(a0),d1
00010CAC D240                       		add.w	d0,d1
00010CAE 3141 000C                  		move.w	d1,$C(a0)
00010CB2 4E75                       		rts	
00010CB4                            ; ===========================================================================
00010CB4                            
00010CB4                            loc_1052C:
00010CB4 5328 0028                  		subq.b	#1,$28(a0)
00010CB8 4228 0038                  		clr.b	$38(a0)
00010CBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CC0 7000                       		moveq	#0,d0
00010CC2 1028 0023                  		move.b	$23(a0),d0
00010CC6 67D2                       		beq.s	loc_10512
00010CC8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010CCE 60CA                       		bra.s	loc_10512
00010CD0                            ; ===========================================================================
00010CD0                            
00010CD0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010CD0 4A28 0038                  		tst.b	$38(a0)
00010CD4 6600                       		bne.s	loc_1055E
00010CD6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010CDA 6700                       		beq.s	locret_10578
00010CDC 117C 0001 0038             		move.b	#1,$38(a0)
00010CE2 4268 003A                  		clr.w	$3A(a0)
00010CE6                            
00010CE6                            loc_1055E:
00010CE6 5268 0008                  		addq.w	#1,8(a0)
00010CEA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CF0 5268 003A                  		addq.w	#1,$3A(a0)
00010CF4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010CFA 6600                       		bne.s	locret_10578
00010CFC 4228 0028                  		clr.b	$28(a0)
00010D00                            
00010D00                            locret_10578:
00010D00 4E75                       		rts	
00010D02                            ; ===========================================================================
00010D02                            
00010D02                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010D02 4A28 0038                  		tst.b	$38(a0)
00010D06 6600                       		bne.s	loc_10598
00010D08 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D0C 7000                       		moveq	#0,d0
00010D0E 1028 003C                  		move.b	$3C(a0),d0
00010D12 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D18 6700                       		beq.s	loc_105A2
00010D1A 117C 0001 0038             		move.b	#1,$38(a0)
00010D20                            
00010D20                            loc_10598:
00010D20 4A68 003A                  		tst.w	$3A(a0)
00010D24 6700                       		beq.s	loc_105C0
00010D26 5568 003A                  		subq.w	#2,$3A(a0)
00010D2A                            
00010D2A                            loc_105A2:
00010D2A 3028 003A                  		move.w	$3A(a0),d0
00010D2E 0828 0000 0022             		btst	#0,$22(a0)
00010D34 6700                       		beq.s	loc_105B4
00010D36 4440                       		neg.w	d0
00010D38 0640 0080                  		addi.w	#$80,d0
00010D3C                            
00010D3C                            loc_105B4:
00010D3C 3228 0034                  		move.w	$34(a0),d1
00010D40 D240                       		add.w	d0,d1
00010D42 3141 0008                  		move.w	d1,8(a0)
00010D46 4E75                       		rts	
00010D48                            ; ===========================================================================
00010D48                            
00010D48                            loc_105C0:
00010D48 5228 0028                  		addq.b	#1,$28(a0)
00010D4C 4228 0038                  		clr.b	$38(a0)
00010D50 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D54 7000                       		moveq	#0,d0
00010D56 1028 0023                  		move.b	$23(a0),d0
00010D5A 67CE                       		beq.s	loc_105A2
00010D5C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D62 60C6                       		bra.s	loc_105A2
00010D64                            ; ===========================================================================
00010D64                            
00010D64                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010D64 4A28 0038                  		tst.b	$38(a0)
00010D68 6600                       		bne.s	loc_105F8
00010D6A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D6E 7000                       		moveq	#0,d0
00010D70 1028 003C                  		move.b	$3C(a0),d0
00010D74 4A32 0000                  		tst.b	(a2,d0.w)
00010D78 6A00                       		bpl.s	loc_10606
00010D7A 117C 0001 0038             		move.b	#1,$38(a0)
00010D80                            
00010D80                            loc_105F8:
00010D80 303C 0080                  		move.w	#$80,d0
00010D84 B068 003A                  		cmp.w	$3A(a0),d0
00010D88 6700                       		beq.s	loc_10624
00010D8A 5468 003A                  		addq.w	#2,$3A(a0)
00010D8E                            
00010D8E                            loc_10606:
00010D8E 3028 003A                  		move.w	$3A(a0),d0
00010D92 0828 0000 0022             		btst	#0,$22(a0)
00010D98 6700                       		beq.s	loc_10618
00010D9A 4440                       		neg.w	d0
00010D9C 0640 0080                  		addi.w	#$80,d0
00010DA0                            
00010DA0                            loc_10618:
00010DA0 3228 0034                  		move.w	$34(a0),d1
00010DA4 D240                       		add.w	d0,d1
00010DA6 3141 0008                  		move.w	d1,8(a0)
00010DAA 4E75                       		rts	
00010DAC                            ; ===========================================================================
00010DAC                            
00010DAC                            loc_10624:
00010DAC 5328 0028                  		subq.b	#1,$28(a0)
00010DB0 4228 0038                  		clr.b	$38(a0)
00010DB4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DB8 7000                       		moveq	#0,d0
00010DBA 1028 0023                  		move.b	$23(a0),d0
00010DBE 67CE                       		beq.s	loc_10606
00010DC0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DC6 60C6                       		bra.s	loc_10606
00010DC8                            ; ===========================================================================
00010DC8                            
00010DC8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010DC8 323C 0010                  		move.w	#$10,d1
00010DCC 7000                       		moveq	#0,d0
00010DCE 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010DD2 E248                       		lsr.w	#1,d0
00010DD4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010DD8 6000                       		bra.s	Obj56_Move_Sqr
00010DDA                            ; ===========================================================================
00010DDA                            
00010DDA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010DDA 323C 0030                  		move.w	#$30,d1
00010DDE 7000                       		moveq	#0,d0
00010DE0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010DE4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010DE8 6000                       		bra.s	Obj56_Move_Sqr
00010DEA                            ; ===========================================================================
00010DEA                            
00010DEA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010DEA 323C 0050                  		move.w	#$50,d1
00010DEE 7000                       		moveq	#0,d0
00010DF0 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010DF4 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010DF8 6000                       		bra.s	Obj56_Move_Sqr
00010DFA                            ; ===========================================================================
00010DFA                            
00010DFA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010DFA 323C 0070                  		move.w	#$70,d1
00010DFE 7000                       		moveq	#0,d0
00010E00 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010E04 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010E08                            
00010E08                            Obj56_Move_Sqr:
00010E08 4A43                       		tst.w	d3
00010E0A 6600                       		bne.s	loc_1068E
00010E0C 5228 0022                  		addq.b	#1,$22(a0)
00010E10 0228 0003 0022             		andi.b	#3,$22(a0)
00010E16                            
00010E16                            loc_1068E:
00010E16 1428 0022                  		move.b	$22(a0),d2
00010E1A 0202 0003                  		andi.b	#3,d2
00010E1E 6600                       		bne.s	loc_106AE
00010E20 9041                       		sub.w	d1,d0
00010E22 D068 0034                  		add.w	$34(a0),d0
00010E26 3140 0008                  		move.w	d0,8(a0)
00010E2A 4441                       		neg.w	d1
00010E2C D268 0030                  		add.w	$30(a0),d1
00010E30 3141 000C                  		move.w	d1,$C(a0)
00010E34 4E75                       		rts	
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            loc_106AE:
00010E36 5302                       		subq.b	#1,d2
00010E38 6600                       		bne.s	loc_106CC
00010E3A 5341                       		subq.w	#1,d1
00010E3C 9041                       		sub.w	d1,d0
00010E3E 4440                       		neg.w	d0
00010E40 D068 0030                  		add.w	$30(a0),d0
00010E44 3140 000C                  		move.w	d0,$C(a0)
00010E48 5241                       		addq.w	#1,d1
00010E4A D268 0034                  		add.w	$34(a0),d1
00010E4E 3141 0008                  		move.w	d1,8(a0)
00010E52 4E75                       		rts	
00010E54                            ; ===========================================================================
00010E54                            
00010E54                            loc_106CC:
00010E54 5302                       		subq.b	#1,d2
00010E56 6600                       		bne.s	loc_106EA
00010E58 5341                       		subq.w	#1,d1
00010E5A 9041                       		sub.w	d1,d0
00010E5C 4440                       		neg.w	d0
00010E5E D068 0034                  		add.w	$34(a0),d0
00010E62 3140 0008                  		move.w	d0,8(a0)
00010E66 5241                       		addq.w	#1,d1
00010E68 D268 0030                  		add.w	$30(a0),d1
00010E6C 3141 000C                  		move.w	d1,$C(a0)
00010E70 4E75                       		rts	
00010E72                            ; ===========================================================================
00010E72                            
00010E72                            loc_106EA:
00010E72 9041                       		sub.w	d1,d0
00010E74 D068 0030                  		add.w	$30(a0),d0
00010E78 3140 000C                  		move.w	d0,$C(a0)
00010E7C 4441                       		neg.w	d1
00010E7E D268 0034                  		add.w	$34(a0),d1
00010E82 3141 0008                  		move.w	d1,8(a0)
00010E86 4E75                       		rts	
00010E88                            ; ===========================================================================
00010E88                            ; ---------------------------------------------------------------------------
00010E88                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E88                            ; ---------------------------------------------------------------------------
00010E88                            Map_obj56:
00010E88                            	include "_maps\obj56.asm"
00010E88                            ; ---------------------------------------------------------------------------
00010E88                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010E88                            ; ---------------------------------------------------------------------------
00010E88 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010E8C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010E90 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010E94 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010E98 01                         byte_10710:	dc.b 1
00010E99 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010E9E 04                         byte_10716:	dc.b 4
00010E9F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010EA4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010EA9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010EAE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010EB3 02                         byte_1072B:	dc.b 2
00010EB4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010EB9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010EBE 04                         byte_10736:	dc.b 4
00010EBF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010EC4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010EC9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010ECE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010ED3 03                         byte_1074B:	dc.b 3
00010ED4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010ED9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010EDE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010EE3 01                         byte_1075B:	dc.b 1
00010EE4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010EE9 02                         byte_10761:	dc.b 2
00010EEA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010EEF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010EF4 04                         byte_1076C:	dc.b 4
00010EF5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010EFA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010EFF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010F04 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010F0A 00                         		even
00010F0A 00                         		even
00010F0A                            
00010F0A                            ; ===========================================================================
00010F0A                            ; ---------------------------------------------------------------------------
00010F0A                            ; Object 57 - spiked balls (SYZ, LZ)
00010F0A                            ; ---------------------------------------------------------------------------
00010F0A                            
00010F0A                            Obj57:					; XREF: Obj_Index
00010F0A 7000                       		moveq	#0,d0
00010F0C 1028 0024                  		move.b	$24(a0),d0
00010F10 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010F14 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010F18                            ; ===========================================================================
00010F18 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010F1A 0000                       		dc.w Obj57_Move-Obj57_Index
00010F1C 0000                       		dc.w Obj57_Display-Obj57_Index
00010F1E                            ; ===========================================================================
00010F1E                            
00010F1E                            Obj57_Main:				; XREF: Obj57_Index
00010F1E 5428 0024                  		addq.b	#2,$24(a0)
00010F22 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F2A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010F30 117C 0004 0001             		move.b	#4,1(a0)
00010F36 117C 0004 0018             		move.b	#4,$18(a0)
00010F3C 117C 0008 0019             		move.b	#8,$19(a0)
00010F42 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F48 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F4E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010F54 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F5A 6600                       		bne.s	loc_107E8
00010F5C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010F62 317C 0310 0002             		move.w	#$310,2(a0)
00010F68 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010F70                            
00010F70                            loc_107E8:
00010F70 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F74 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F78 4881                       		ext.w	d1
00010F7A E741                       		asl.w	#3,d1		; multiply by 8
00010F7C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010F80 1028 0022                  		move.b	$22(a0),d0
00010F84 E418                       		ror.b	#2,d0
00010F86 0200 00C0                  		andi.b	#-$40,d0
00010F8A 1140 0026                  		move.b	d0,$26(a0)
00010F8E 45E8 0029                  		lea	$29(a0),a2
00010F92 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F96 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010F9A 14FC 0000                  		move.b	#0,(a2)+
00010F9E 3601                       		move.w	d1,d3
00010FA0 E94B                       		lsl.w	#4,d3
00010FA2 1143 003C                  		move.b	d3,$3C(a0)
00010FA6 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010FA8 6500                       		bcs.s	loc_10894
00010FAA 0828 0003 0028             		btst	#3,$28(a0)
00010FB0 6700                       		beq.s	Obj57_MakeChain
00010FB2 5341                       		subq.w	#1,d1
00010FB4 6500                       		bcs.s	loc_10894
00010FB6                            
00010FB6                            Obj57_MakeChain:
00010FB6 6100 D256                  		bsr.w	SingleObjLoad
00010FBA 6600                       		bne.s	loc_10894
00010FBC 5228 0029                  		addq.b	#1,$29(a0)
00010FC0 3A09                       		move.w	a1,d5
00010FC2 0445 D000                  		subi.w	#-$3000,d5
00010FC6 EC4D                       		lsr.w	#6,d5
00010FC8 0245 007F                  		andi.w	#$7F,d5
00010FCC 14C5                       		move.b	d5,(a2)+
00010FCE 137C 0004 0024             		move.b	#4,$24(a1)
00010FD4 1290                       		move.b	0(a0),0(a1)
00010FD6 2368 0004 0004             		move.l	4(a0),4(a1)
00010FDC 3368 0002 0002             		move.w	2(a0),2(a1)
00010FE2 1368 0001 0001             		move.b	1(a0),1(a1)
00010FE8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010FEE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010FF4 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010FFA 0403 0010                  		subi.b	#$10,d3
00010FFE 1343 003C                  		move.b	d3,$3C(a1)
00011002 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011008 6600                       		bne.s	loc_10890
0001100A 4A03                       		tst.b	d3
0001100C 6600                       		bne.s	loc_10890
0001100E 137C 0002 001A             		move.b	#2,$1A(a1)
00011014                            
00011014                            loc_10890:
00011014 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011018                            
00011018                            loc_10894:
00011018 3A08                       		move.w	a0,d5
0001101A 0445 D000                  		subi.w	#-$3000,d5
0001101E EC4D                       		lsr.w	#6,d5
00011020 0245 007F                  		andi.w	#$7F,d5
00011024 14C5                       		move.b	d5,(a2)+
00011026 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001102C 6600                       		bne.s	Obj57_Move
0001102E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011034 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001103A                            
0001103A                            Obj57_Move:				; XREF: Obj57_Index
0001103A 6100 0000                  		bsr.w	Obj57_MoveSub
0001103E 6000 0000                  		bra.w	Obj57_ChkDel
00011042                            ; ===========================================================================
00011042                            
00011042                            Obj57_MoveSub:				; XREF: Obj57_Move
00011042 3028 003E                  		move.w	$3E(a0),d0
00011046 D168 0026                  		add.w	d0,$26(a0)
0001104A 1028 0026                  		move.b	$26(a0),d0
0001104E 4EB9 0000 28EC             		jsr	(CalcSine).l
00011054 3428 0038                  		move.w	$38(a0),d2
00011058 3628 003A                  		move.w	$3A(a0),d3
0001105C 45E8 0029                  		lea	$29(a0),a2
00011060 7C00                       		moveq	#0,d6
00011062 1C1A                       		move.b	(a2)+,d6
00011064                            
00011064                            Obj57_MoveLoop:
00011064 7800                       		moveq	#0,d4
00011066 181A                       		move.b	(a2)+,d4
00011068 ED4C                       		lsl.w	#6,d4
0001106A 0684 00FF D000             		addi.l	#$FFD000,d4
00011070 2244                       		movea.l	d4,a1
00011072 7800                       		moveq	#0,d4
00011074 1829 003C                  		move.b	$3C(a1),d4
00011078 2A04                       		move.l	d4,d5
0001107A C9C0                       		muls.w	d0,d4
0001107C E084                       		asr.l	#8,d4
0001107E CBC1                       		muls.w	d1,d5
00011080 E085                       		asr.l	#8,d5
00011082 D842                       		add.w	d2,d4
00011084 DA43                       		add.w	d3,d5
00011086 3344 000C                  		move.w	d4,$C(a1)
0001108A 3345 0008                  		move.w	d5,8(a1)
0001108E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011092 4E75                       		rts	
00011094                            ; ===========================================================================
00011094                            
00011094                            Obj57_ChkDel:				; XREF: Obj57_Move
00011094 3028 003A                  		move.w	$3A(a0),d0
00011098 0240 FF80                  		andi.w	#$FF80,d0
0001109C 3238 F700                  		move.w	($FFFFF700).w,d1
000110A0 0441 0080                  		subi.w	#$80,d1
000110A4 0241 FF80                  		andi.w	#$FF80,d1
000110A8 9041                       		sub.w	d1,d0
000110AA 0C40 0280                  		cmpi.w	#$280,d0
000110AE 6200 0000                  		bhi.w	Obj57_Delete
000110B2 6000 CCCE                  		bra.w	DisplaySprite
000110B6                            ; ===========================================================================
000110B6                            
000110B6                            Obj57_Delete:				; XREF: Obj57_ChkDel
000110B6 7400                       		moveq	#0,d2
000110B8 45E8 0029                  		lea	$29(a0),a2
000110BC 141A                       		move.b	(a2)+,d2
000110BE                            
000110BE                            Obj57_DelLoop:
000110BE 7000                       		moveq	#0,d0
000110C0 101A                       		move.b	(a2)+,d0
000110C2 ED48                       		lsl.w	#6,d0
000110C4 0680 00FF D000             		addi.l	#$FFD000,d0
000110CA 2240                       		movea.l	d0,a1
000110CC 6100 CCF2                  		bsr.w	DeleteObject2
000110D0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000110D4                            
000110D4 4E75                       		rts	
000110D6                            ; ===========================================================================
000110D6                            
000110D6                            Obj57_Display:				; XREF: Obj57_Index
000110D6 6000 CCAA                  		bra.w	DisplaySprite
000110DA                            ; ===========================================================================
000110DA                            ; ---------------------------------------------------------------------------
000110DA                            ; Sprite mappings - chain of spiked balls (SYZ)
000110DA                            ; ---------------------------------------------------------------------------
000110DA                            Map_obj57:
000110DA                            	include "_maps\obj57syz.asm"
000110DA                            ; ---------------------------------------------------------------------------
000110DA                            ; Sprite mappings - chain of spiked balls (SYZ)
000110DA                            ; ---------------------------------------------------------------------------
000110DA 0000                       		dc.w byte_10958-Map_obj57
000110DC 01                         byte_10958:	dc.b 1
000110DD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110E2                            		even
000110E2                            		even
000110E2                            
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            Map_obj57a:
000110E2                            	include "_maps\obj57lz.asm"
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000110E2                            ; ---------------------------------------------------------------------------
000110E2 0000                       		dc.w byte_10964-Map_obj57a
000110E4 0000                       		dc.w byte_1096A-Map_obj57a
000110E6 0000                       		dc.w byte_10970-Map_obj57a
000110E8 01                         byte_10964:	dc.b 1
000110E9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000110EE 01                         byte_1096A:	dc.b 1
000110EF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000110F4 01                         byte_10970:	dc.b 1
000110F5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000110FA                            		even
000110FA                            		even
000110FA                            
000110FA                            ; ===========================================================================
000110FA                            ; ---------------------------------------------------------------------------
000110FA                            ; Object 58 - giant spiked balls (SYZ)
000110FA                            ; ---------------------------------------------------------------------------
000110FA                            
000110FA                            Obj58:					; XREF: Obj_Index
000110FA 7000                       		moveq	#0,d0
000110FC 1028 0024                  		move.b	$24(a0),d0
00011100 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011104 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011108                            ; ===========================================================================
00011108 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001110A 0000                       		dc.w Obj58_Move-Obj58_Index
0001110C                            ; ===========================================================================
0001110C                            
0001110C                            Obj58_Main:				; XREF: Obj58_Index
0001110C 5428 0024                  		addq.b	#2,$24(a0)
00011110 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011118 317C 0396 0002             		move.w	#$396,2(a0)
0001111E 117C 0004 0001             		move.b	#4,1(a0)
00011124 117C 0004 0018             		move.b	#4,$18(a0)
0001112A 117C 0018 0019             		move.b	#$18,$19(a0)
00011130 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011136 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001113C 117C 0086 0020             		move.b	#$86,$20(a0)
00011142 1228 0028                  		move.b	$28(a0),d1	; get object type
00011146 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001114A 4881                       		ext.w	d1
0001114C E741                       		asl.w	#3,d1		; multiply by 8
0001114E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011152 1028 0022                  		move.b	$22(a0),d0
00011156 E418                       		ror.b	#2,d0
00011158 0200 00C0                  		andi.b	#$C0,d0
0001115C 1140 0026                  		move.b	d0,$26(a0)
00011160 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011166                            
00011166                            Obj58_Move:				; XREF: Obj58_Index
00011166 7000                       		moveq	#0,d0
00011168 1028 0028                  		move.b	$28(a0),d0	; get object type
0001116C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011170 D040                       		add.w	d0,d0
00011172 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011176 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001117A 3028 003A                  		move.w	$3A(a0),d0
0001117E 0240 FF80                  		andi.w	#$FF80,d0
00011182 3238 F700                  		move.w	($FFFFF700).w,d1
00011186 0441 0080                  		subi.w	#$80,d1
0001118A 0241 FF80                  		andi.w	#$FF80,d1
0001118E 9041                       		sub.w	d1,d0
00011190 0C40 0280                  		cmpi.w	#$280,d0
00011194 6200 CC28                  		bhi.w	DeleteObject
00011198 6000 CBE8                  		bra.w	DisplaySprite
0001119C                            ; ===========================================================================
0001119C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001119E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000111A0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000111A2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000111A4                            ; ===========================================================================
000111A4                            
000111A4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000111A4 4E75                       		rts	
000111A6                            ; ===========================================================================
000111A6                            
000111A6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000111A6 323C 0060                  		move.w	#$60,d1
000111AA 7000                       		moveq	#0,d0
000111AC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000111B0 0828 0000 0022             		btst	#0,$22(a0)
000111B6 6700                       		beq.s	loc_10A38
000111B8 4440                       		neg.w	d0
000111BA D041                       		add.w	d1,d0
000111BC                            
000111BC                            loc_10A38:
000111BC 3228 003A                  		move.w	$3A(a0),d1
000111C0 9240                       		sub.w	d0,d1
000111C2 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000111C6 4E75                       		rts	
000111C8                            ; ===========================================================================
000111C8                            
000111C8                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000111C8 323C 0060                  		move.w	#$60,d1
000111CC 7000                       		moveq	#0,d0
000111CE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000111D2 0828 0000 0022             		btst	#0,$22(a0)
000111D8 6700                       		beq.s	loc_10A5C
000111DA 4440                       		neg.w	d0
000111DC 0640 0080                  		addi.w	#$80,d0
000111E0                            
000111E0                            loc_10A5C:
000111E0 3228 0038                  		move.w	$38(a0),d1
000111E4 9240                       		sub.w	d0,d1
000111E6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000111EA 4E75                       		rts	
000111EC                            ; ===========================================================================
000111EC                            
000111EC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000111EC 3028 003E                  		move.w	$3E(a0),d0
000111F0 D168 0026                  		add.w	d0,$26(a0)
000111F4 1028 0026                  		move.b	$26(a0),d0
000111F8 4EB9 0000 28EC             		jsr	(CalcSine).l
000111FE 3428 0038                  		move.w	$38(a0),d2
00011202 3628 003A                  		move.w	$3A(a0),d3
00011206 7800                       		moveq	#0,d4
00011208 1828 003C                  		move.b	$3C(a0),d4
0001120C 2A04                       		move.l	d4,d5
0001120E C9C0                       		muls.w	d0,d4
00011210 E084                       		asr.l	#8,d4
00011212 CBC1                       		muls.w	d1,d5
00011214 E085                       		asr.l	#8,d5
00011216 D842                       		add.w	d2,d4
00011218 DA43                       		add.w	d3,d5
0001121A 3144 000C                  		move.w	d4,$C(a0)
0001121E 3145 0008                  		move.w	d5,8(a0)
00011222 4E75                       		rts	
00011224                            ; ===========================================================================
00011224                            ; ---------------------------------------------------------------------------
00011224                            ; Sprite mappings - SBZ	spiked ball on a chain
00011224                            ; ---------------------------------------------------------------------------
00011224                            Map_obj15b:
00011224                            	include "_maps\obj15sbz.asm"
00011224                            ; ---------------------------------------------------------------------------
00011224                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011224                            ; ---------------------------------------------------------------------------
00011224 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011228 0000                       		dc.w byte_10AC6-Map_obj15b
0001122A 05                         byte_10AA6:	dc.b 5
0001122B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011230 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011235 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001123A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001123F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011244 01                         byte_10AC0:	dc.b 1
00011245 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001124A 02                         byte_10AC6:	dc.b 2
0001124B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011250 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011256 00                         		even
00011256 00                         		even
00011256                            
00011256                            ; ===========================================================================
00011256                            ; ---------------------------------------------------------------------------
00011256                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011256                            ; ---------------------------------------------------------------------------
00011256                            
00011256                            Obj59:					; XREF: Obj_Index
00011256 7000                       		moveq	#0,d0
00011258 1028 0024                  		move.b	$24(a0),d0
0001125C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011260 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011264 3028 0032                  		move.w	$32(a0),d0
00011268 0240 FF80                  		andi.w	#$FF80,d0
0001126C 3238 F700                  		move.w	($FFFFF700).w,d1
00011270 0441 0080                  		subi.w	#$80,d1
00011274 0241 FF80                  		andi.w	#$FF80,d1
00011278 9041                       		sub.w	d1,d0
0001127A 0C40 0280                  		cmpi.w	#$280,d0
0001127E 6200 CB3E                  		bhi.w	DeleteObject
00011282 6000 CAFE                  		bra.w	DisplaySprite
00011286                            ; ===========================================================================
00011286 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011288 0000                       		dc.w Obj59_Platform-Obj59_Index
0001128A 0000                       		dc.w Obj59_Action-Obj59_Index
0001128C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001128E                            
0001128E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011290                            
00011290 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011292 2001                       		dc.b $20, 1
00011294 3401                       		dc.b $34, 1
00011296 1003                       		dc.b $10, 3
00011298 2003                       		dc.b $20, 3
0001129A 3403                       		dc.b $34, 3
0001129C 1401                       		dc.b $14, 1
0001129E 2401                       		dc.b $24, 1
000112A0 2C01                       		dc.b $2C, 1
000112A2 1403                       		dc.b $14, 3
000112A4 2403                       		dc.b $24, 3
000112A6 2C03                       		dc.b $2C, 3
000112A8 2005                       		dc.b $20, 5
000112AA 2007                       		dc.b $20, 7
000112AC 3009                       		dc.b $30, 9
000112AE                            ; ===========================================================================
000112AE                            
000112AE                            Obj59_Main:				; XREF: Obj59_Index
000112AE 5428 0024                  		addq.b	#2,$24(a0)
000112B2 7000                       		moveq	#0,d0
000112B4 1028 0028                  		move.b	$28(a0),d0
000112B8 6A00                       		bpl.s	Obj59_Main2
000112BA 5828 0024                  		addq.b	#4,$24(a0)
000112BE 0240 007F                  		andi.w	#$7F,d0
000112C2 C0FC 0006                  		mulu.w	#6,d0
000112C6 3140 003C                  		move.w	d0,$3C(a0)
000112CA 3140 003E                  		move.w	d0,$3E(a0)
000112CE 588F                       		addq.l	#4,sp
000112D0 4E75                       		rts	
000112D2                            ; ===========================================================================
000112D2                            
000112D2                            Obj59_Main2:
000112D2 E648                       		lsr.w	#3,d0
000112D4 0240 001E                  		andi.w	#$1E,d0
000112D8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000112DC 115A 0019                  		move.b	(a2)+,$19(a0)
000112E0 115A 001A                  		move.b	(a2)+,$1A(a0)
000112E4 7000                       		moveq	#0,d0
000112E6 1028 0028                  		move.b	$28(a0),d0
000112EA D040                       		add.w	d0,d0
000112EC 0240 001E                  		andi.w	#$1E,d0
000112F0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000112F4 101A                       		move.b	(a2)+,d0
000112F6 E548                       		lsl.w	#2,d0
000112F8 3140 003C                  		move.w	d0,$3C(a0)
000112FC 115A 0028                  		move.b	(a2)+,$28(a0)
00011300 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011308 317C 4000 0002             		move.w	#$4000,2(a0)
0001130E 117C 0004 0001             		move.b	#4,1(a0)
00011314 117C 0004 0018             		move.b	#4,$18(a0)
0001131A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011320 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011326                            
00011326                            Obj59_Platform:				; XREF: Obj59_Index
00011326 7200                       		moveq	#0,d1
00011328 1228 0019                  		move.b	$19(a0),d1
0001132C 4EB9 0000 7B70             		jsr	(PlatformObject).l
00011332 6000 0000                  		bra.w	Obj59_Types
00011336                            ; ===========================================================================
00011336                            
00011336                            Obj59_Action:				; XREF: Obj59_Index
00011336 7200                       		moveq	#0,d1
00011338 1228 0019                  		move.b	$19(a0),d1
0001133C 4EB9 0000 7CE4             		jsr	(ExitPlatform).l
00011342 3F28 0008                  		move.w	8(a0),-(sp)
00011346 6100 0000                  		bsr.w	Obj59_Types
0001134A 341F                       		move.w	(sp)+,d2
0001134C 4A10                       		tst.b	0(a0)
0001134E 6700                       		beq.s	locret_10BD4
00011350 4EF9 0000 824E             		jmp	(MvSonicOnPtfm2).l
00011356                            ; ===========================================================================
00011356                            
00011356                            locret_10BD4:
00011356 4E75                       		rts	
00011358                            ; ===========================================================================
00011358                            
00011358                            Obj59_Types:
00011358 7000                       		moveq	#0,d0
0001135A 1028 0028                  		move.b	$28(a0),d0
0001135E 0240 000F                  		andi.w	#$F,d0
00011362 D040                       		add.w	d0,d0
00011364 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011368 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001136C                            ; ===========================================================================
0001136C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011370 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011374 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011378 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001137C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011380                            ; ===========================================================================
00011380                            
00011380                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011380 4E75                       		rts	
00011382                            ; ===========================================================================
00011382                            
00011382                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011382 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011388 6600                       		bne.s	locret_10C0C
0001138A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001138E                            
0001138E                            locret_10C0C:
0001138E 4E75                       		rts	
00011390                            ; ===========================================================================
00011390                            
00011390                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011390 6100 0000                  		bsr.w	Obj59_Move
00011394 3028 0034                  		move.w	$34(a0),d0
00011398 4440                       		neg.w	d0
0001139A D068 0030                  		add.w	$30(a0),d0
0001139E 3140 000C                  		move.w	d0,$C(a0)
000113A2 4E75                       		rts	
000113A4                            ; ===========================================================================
000113A4                            
000113A4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000113A4 6100 0000                  		bsr.w	Obj59_Move
000113A8 3028 0034                  		move.w	$34(a0),d0
000113AC D068 0030                  		add.w	$30(a0),d0
000113B0 3140 000C                  		move.w	d0,$C(a0)
000113B4 4E75                       		rts	
000113B6                            ; ===========================================================================
000113B6                            
000113B6                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000113B6 6100 0000                  		bsr.w	Obj59_Move
000113BA 3028 0034                  		move.w	$34(a0),d0
000113BE E240                       		asr.w	#1,d0
000113C0 4440                       		neg.w	d0
000113C2 D068 0030                  		add.w	$30(a0),d0
000113C6 3140 000C                  		move.w	d0,$C(a0)
000113CA 3028 0034                  		move.w	$34(a0),d0
000113CE D068 0032                  		add.w	$32(a0),d0
000113D2 3140 0008                  		move.w	d0,8(a0)
000113D6 4E75                       		rts	
000113D8                            ; ===========================================================================
000113D8                            
000113D8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000113D8 6100 0000                  		bsr.w	Obj59_Move
000113DC 3028 0034                  		move.w	$34(a0),d0
000113E0 E240                       		asr.w	#1,d0
000113E2 D068 0030                  		add.w	$30(a0),d0
000113E6 3140 000C                  		move.w	d0,$C(a0)
000113EA 3028 0034                  		move.w	$34(a0),d0
000113EE 4440                       		neg.w	d0
000113F0 D068 0032                  		add.w	$32(a0),d0
000113F4 3140 0008                  		move.w	d0,8(a0)
000113F8 4E75                       		rts	
000113FA                            ; ===========================================================================
000113FA                            
000113FA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000113FA 6100 0000                  		bsr.w	Obj59_Move
000113FE 3028 0034                  		move.w	$34(a0),d0
00011402 4440                       		neg.w	d0
00011404 D068 0030                  		add.w	$30(a0),d0
00011408 3140 000C                  		move.w	d0,$C(a0)
0001140C 4A28 0028                  		tst.b	$28(a0)
00011410 6700 0000                  		beq.w	loc_10C94
00011414 4E75                       		rts	
00011416                            ; ===========================================================================
00011416                            
00011416                            loc_10C94:
00011416 0828 0003 0022             		btst	#3,$22(a0)
0001141C 6700                       		beq.s	Obj59_Delete
0001141E 08E9 0001 0022             		bset	#1,$22(a1)
00011424 08A9 0003 0022             		bclr	#3,$22(a1)
0001142A 137C 0002 0024             		move.b	#2,$24(a1)
00011430                            
00011430                            Obj59_Delete:
00011430 6000 C98C                  		bra.w	DeleteObject
00011434                            
00011434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011434                            
00011434                            
00011434                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011434 3028 0038                  		move.w	$38(a0),d0
00011438 4A28 003A                  		tst.b	$3A(a0)
0001143C 6600                       		bne.s	loc_10CC8
0001143E 0C40 0800                  		cmpi.w	#$800,d0
00011442 6400                       		bcc.s	loc_10CD0
00011444 0640 0010                  		addi.w	#$10,d0
00011448 6000                       		bra.s	loc_10CD0
0001144A                            ; ===========================================================================
0001144A                            
0001144A                            loc_10CC8:
0001144A 4A40                       		tst.w	d0
0001144C 6700                       		beq.s	loc_10CD0
0001144E 0440 0010                  		subi.w	#$10,d0
00011452                            
00011452                            loc_10CD0:
00011452 3140 0038                  		move.w	d0,$38(a0)
00011456 48C0                       		ext.l	d0
00011458 E180                       		asl.l	#8,d0
0001145A D0A8 0034                  		add.l	$34(a0),d0
0001145E 2140 0034                  		move.l	d0,$34(a0)
00011462 4840                       		swap	d0
00011464 3428 003C                  		move.w	$3C(a0),d2
00011468 B042                       		cmp.w	d2,d0
0001146A 6300                       		bls.s	loc_10CF0
0001146C 117C 0001 003A             		move.b	#1,$3A(a0)
00011472                            
00011472                            loc_10CF0:
00011472 D442                       		add.w	d2,d2
00011474 B042                       		cmp.w	d2,d0
00011476 6600                       		bne.s	locret_10CFA
00011478 4228 0028                  		clr.b	$28(a0)
0001147C                            
0001147C                            locret_10CFA:
0001147C 4E75                       		rts	
0001147E                            ; End of function Obj59_Move
0001147E                            
0001147E                            ; ===========================================================================
0001147E                            
0001147E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001147E 5368 003C                  		subq.w	#1,$3C(a0)
00011482 6600                       		bne.s	Obj59_ChkDel
00011484 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001148A 6100 CD82                  		bsr.w	SingleObjLoad
0001148E 6600                       		bne.s	Obj59_ChkDel
00011490 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011494 3368 0008 0008             		move.w	8(a0),8(a1)
0001149A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114A0 137C 000E 0028             		move.b	#$E,$28(a1)
000114A6                            
000114A6                            Obj59_ChkDel:
000114A6 588F                       		addq.l	#4,sp
000114A8 3028 0008                  		move.w	8(a0),d0
000114AC 0240 FF80                  		andi.w	#$FF80,d0
000114B0 3238 F700                  		move.w	($FFFFF700).w,d1
000114B4 0441 0080                  		subi.w	#$80,d1
000114B8 0241 FF80                  		andi.w	#$FF80,d1
000114BC 9041                       		sub.w	d1,d0
000114BE 0C40 0280                  		cmpi.w	#$280,d0
000114C2 6200 C8FA                  		bhi.w	DeleteObject
000114C6 4E75                       		rts	
000114C8                            ; ===========================================================================
000114C8                            ; ---------------------------------------------------------------------------
000114C8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114C8                            ; ---------------------------------------------------------------------------
000114C8                            Map_obj59:
000114C8                            	include "_maps\obj59.asm"
000114C8                            ; ---------------------------------------------------------------------------
000114C8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114C8                            ; ---------------------------------------------------------------------------
000114C8 0000                       		dc.w byte_10D4A-Map_obj59
000114CA 03                         byte_10D4A:	dc.b 3
000114CB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000114D0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000114D5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000114DA                            		even
000114DA                            		even
000114DA                            
000114DA                            ; ===========================================================================
000114DA                            ; ---------------------------------------------------------------------------
000114DA                            ; Object 5A - platforms	moving in circles (SLZ)
000114DA                            ; ---------------------------------------------------------------------------
000114DA                            
000114DA                            Obj5A:					; XREF: Obj_Index
000114DA 7000                       		moveq	#0,d0
000114DC 1028 0024                  		move.b	$24(a0),d0
000114E0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000114E4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000114E8 3028 0032                  		move.w	$32(a0),d0
000114EC 0240 FF80                  		andi.w	#$FF80,d0
000114F0 3238 F700                  		move.w	($FFFFF700).w,d1
000114F4 0441 0080                  		subi.w	#$80,d1
000114F8 0241 FF80                  		andi.w	#$FF80,d1
000114FC 9041                       		sub.w	d1,d0
000114FE 0C40 0280                  		cmpi.w	#$280,d0
00011502 6200 C8BA                  		bhi.w	DeleteObject
00011506 6000 C87A                  		bra.w	DisplaySprite
0001150A                            ; ===========================================================================
0001150A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001150C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001150E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011510                            ; ===========================================================================
00011510                            
00011510                            Obj5A_Main:				; XREF: Obj5A_Index
00011510 5428 0024                  		addq.b	#2,$24(a0)
00011514 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001151C 317C 4000 0002             		move.w	#$4000,2(a0)
00011522 117C 0004 0001             		move.b	#4,1(a0)
00011528 117C 0004 0018             		move.b	#4,$18(a0)
0001152E 117C 0018 0019             		move.b	#$18,$19(a0)
00011534 3168 0008 0032             		move.w	8(a0),$32(a0)
0001153A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011540                            
00011540                            Obj5A_Platform:				; XREF: Obj5A_Index
00011540 7200                       		moveq	#0,d1
00011542 1228 0019                  		move.b	$19(a0),d1
00011546 4EB9 0000 7B70             		jsr	(PlatformObject).l
0001154C 6000 0000                  		bra.w	Obj5A_Types
00011550                            ; ===========================================================================
00011550                            
00011550                            Obj5A_Action:				; XREF: Obj5A_Index
00011550 7200                       		moveq	#0,d1
00011552 1228 0019                  		move.b	$19(a0),d1
00011556 4EB9 0000 7CE4             		jsr	(ExitPlatform).l
0001155C 3F28 0008                  		move.w	8(a0),-(sp)
00011560 6100 0000                  		bsr.w	Obj5A_Types
00011564 341F                       		move.w	(sp)+,d2
00011566 4EF9 0000 824E             		jmp	(MvSonicOnPtfm2).l
0001156C                            ; ===========================================================================
0001156C                            
0001156C                            Obj5A_Types:
0001156C 7000                       		moveq	#0,d0
0001156E 1028 0028                  		move.b	$28(a0),d0
00011572 0240 000C                  		andi.w	#$C,d0
00011576 E248                       		lsr.w	#1,d0
00011578 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001157C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011580                            ; ===========================================================================
00011580 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011582 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011584                            ; ===========================================================================
00011584                            
00011584                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011584 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011588 0401 0050                  		subi.b	#$50,d1
0001158C 4881                       		ext.w	d1
0001158E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011592 0402 0050                  		subi.b	#$50,d2
00011596 4882                       		ext.w	d2
00011598 0828 0000 0028             		btst	#0,$28(a0)
0001159E 6700                       		beq.s	loc_10E24
000115A0 4441                       		neg.w	d1
000115A2 4442                       		neg.w	d2
000115A4                            
000115A4                            loc_10E24:
000115A4 0828 0001 0028             		btst	#1,$28(a0)
000115AA 6700                       		beq.s	loc_10E30
000115AC 4441                       		neg.w	d1
000115AE C342                       		exg	d1,d2
000115B0                            
000115B0                            loc_10E30:
000115B0 D268 0032                  		add.w	$32(a0),d1
000115B4 3141 0008                  		move.w	d1,8(a0)
000115B8 D468 0030                  		add.w	$30(a0),d2
000115BC 3142 000C                  		move.w	d2,$C(a0)
000115C0 4E75                       		rts	
000115C2                            ; ===========================================================================
000115C2                            
000115C2                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000115C2 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115C6 0401 0050                  		subi.b	#$50,d1
000115CA 4881                       		ext.w	d1
000115CC 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115D0 0402 0050                  		subi.b	#$50,d2
000115D4 4882                       		ext.w	d2
000115D6 0828 0000 0028             		btst	#0,$28(a0)
000115DC 6700                       		beq.s	loc_10E62
000115DE 4441                       		neg.w	d1
000115E0 4442                       		neg.w	d2
000115E2                            
000115E2                            loc_10E62:
000115E2 0828 0001 0028             		btst	#1,$28(a0)
000115E8 6700                       		beq.s	loc_10E6E
000115EA 4441                       		neg.w	d1
000115EC C342                       		exg	d1,d2
000115EE                            
000115EE                            loc_10E6E:
000115EE 4441                       		neg.w	d1
000115F0 D268 0032                  		add.w	$32(a0),d1
000115F4 3141 0008                  		move.w	d1,8(a0)
000115F8 D468 0030                  		add.w	$30(a0),d2
000115FC 3142 000C                  		move.w	d2,$C(a0)
00011600 4E75                       		rts	
00011602                            ; ===========================================================================
00011602                            ; ---------------------------------------------------------------------------
00011602                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011602                            ; ---------------------------------------------------------------------------
00011602                            Map_obj5A:
00011602                            	include "_maps\obj5A.asm"
00011602                            ; ---------------------------------------------------------------------------
00011602                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011602                            ; ---------------------------------------------------------------------------
00011602 0000                       		dc.w byte_10E84-Map_obj5A
00011604 02                         byte_10E84:	dc.b 2
00011605 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001160A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011610 00                         		even
00011610 00                         		even
00011610                            
00011610                            ; ===========================================================================
00011610                            ; ---------------------------------------------------------------------------
00011610                            ; Object 5B - blocks that form a staircase (SLZ)
00011610                            ; ---------------------------------------------------------------------------
00011610                            
00011610                            Obj5B:					; XREF: Obj_Index
00011610 7000                       		moveq	#0,d0
00011612 1028 0024                  		move.b	$24(a0),d0
00011616 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001161A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001161E 3028 0030                  		move.w	$30(a0),d0
00011622 0240 FF80                  		andi.w	#$FF80,d0
00011626 3238 F700                  		move.w	($FFFFF700).w,d1
0001162A 0441 0080                  		subi.w	#$80,d1
0001162E 0241 FF80                  		andi.w	#$FF80,d1
00011632 9041                       		sub.w	d1,d0
00011634 0C40 0280                  		cmpi.w	#$280,d0
00011638 6200 C784                  		bhi.w	DeleteObject
0001163C 6000 C744                  		bra.w	DisplaySprite
00011640                            ; ===========================================================================
00011640 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011642 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011644 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011646                            ; ===========================================================================
00011646                            
00011646                            Obj5B_Main:				; XREF: Obj5B_Index
00011646 5428 0024                  		addq.b	#2,$24(a0)
0001164A 7638                       		moveq	#$38,d3
0001164C 7801                       		moveq	#1,d4
0001164E 0828 0000 0022             		btst	#0,$22(a0)
00011654 6700                       		beq.s	loc_10EDA
00011656 763B                       		moveq	#$3B,d3
00011658 78FF                       		moveq	#-1,d4
0001165A                            
0001165A                            loc_10EDA:
0001165A 3428 0008                  		move.w	8(a0),d2
0001165E 2248                       		movea.l	a0,a1
00011660 7203                       		moveq	#3,d1
00011662 6000                       		bra.s	Obj5B_MakeBlocks
00011664                            ; ===========================================================================
00011664                            
00011664                            Obj5B_Loop:
00011664 6100 CBBE                  		bsr.w	SingleObjLoad2
00011668 6600 0000                  		bne.w	Obj5B_Move
0001166C 137C 0004 0024             		move.b	#4,$24(a1)
00011672                            
00011672                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011672 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011676 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001167E 337C 4000 0002             		move.w	#$4000,2(a1)
00011684 137C 0004 0001             		move.b	#4,1(a1)
0001168A 137C 0003 0018             		move.b	#3,$18(a1)
00011690 137C 0010 0019             		move.b	#$10,$19(a1)
00011696 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001169C 3342 0008                  		move.w	d2,8(a1)
000116A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000116A6 3368 0008 0030             		move.w	8(a0),$30(a1)
000116AC 3369 000C 0032             		move.w	$C(a1),$32(a1)
000116B2 0642 0020                  		addi.w	#$20,d2
000116B6 1343 0037                  		move.b	d3,$37(a1)
000116BA 2348 003C                  		move.l	a0,$3C(a1)
000116BE D604                       		add.b	d4,d3
000116C0 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000116C4                            
000116C4                            Obj5B_Move:				; XREF: Obj5B_Index
000116C4 7000                       		moveq	#0,d0
000116C6 1028 0028                  		move.b	$28(a0),d0
000116CA 0240 0007                  		andi.w	#7,d0
000116CE D040                       		add.w	d0,d0
000116D0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000116D4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000116D8                            
000116D8                            Obj5B_Solid:				; XREF: Obj5B_Index
000116D8 2468 003C                  		movea.l	$3C(a0),a2
000116DC 7000                       		moveq	#0,d0
000116DE 1028 0037                  		move.b	$37(a0),d0
000116E2 1032 0000                  		move.b	(a2,d0.w),d0
000116E6 D068 0032                  		add.w	$32(a0),d0
000116EA 3140 000C                  		move.w	d0,$C(a0)
000116EE 7200                       		moveq	#0,d1
000116F0 1228 0019                  		move.b	$19(a0),d1
000116F4 0641 000B                  		addi.w	#$B,d1
000116F8 343C 0010                  		move.w	#$10,d2
000116FC 363C 0011                  		move.w	#$11,d3
00011700 3828 0008                  		move.w	8(a0),d4
00011704 6100 EA4E                  		bsr.w	SolidObject
00011708 4A04                       		tst.b	d4
0001170A 6A00                       		bpl.s	loc_10F92
0001170C 1544 0036                  		move.b	d4,$36(a2)
00011710                            
00011710                            loc_10F92:
00011710 0828 0003 0022             		btst	#3,$22(a0)
00011716 6700                       		beq.s	locret_10FA0
00011718 157C 0001 0036             		move.b	#1,$36(a2)
0001171E                            
0001171E                            locret_10FA0:
0001171E 4E75                       		rts	
00011720                            ; ===========================================================================
00011720 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011722 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011724 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011726 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011728                            ; ===========================================================================
00011728                            
00011728                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011728 4A68 0034                  		tst.w	$34(a0)
0001172C 6600                       		bne.s	loc_10FC0
0001172E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011734 6600                       		bne.s	locret_10FBE
00011736 317C 001E 0034             		move.w	#$1E,$34(a0)
0001173C                            
0001173C                            locret_10FBE:
0001173C 4E75                       		rts	
0001173E                            ; ===========================================================================
0001173E                            
0001173E                            loc_10FC0:
0001173E 5368 0034                  		subq.w	#1,$34(a0)
00011742 66F8                       		bne.s	locret_10FBE
00011744 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011748 4E75                       		rts	
0001174A                            ; ===========================================================================
0001174A                            
0001174A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001174A 4A68 0034                  		tst.w	$34(a0)
0001174E 6600                       		bne.s	loc_10FE0
00011750 4A28 0036                  		tst.b	$36(a0)
00011754 6A00                       		bpl.s	locret_10FDE
00011756 317C 003C 0034             		move.w	#$3C,$34(a0)
0001175C                            
0001175C                            locret_10FDE:
0001175C 4E75                       		rts	
0001175E                            ; ===========================================================================
0001175E                            
0001175E                            loc_10FE0:
0001175E 5368 0034                  		subq.w	#1,$34(a0)
00011762 6600                       		bne.s	loc_10FEC
00011764 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011768 4E75                       		rts	
0001176A                            ; ===========================================================================
0001176A                            
0001176A                            loc_10FEC:
0001176A 43E8 0038                  		lea	$38(a0),a1
0001176E 3028 0034                  		move.w	$34(a0),d0
00011772 E408                       		lsr.b	#2,d0
00011774 0200 0001                  		andi.b	#1,d0
00011778 12C0                       		move.b	d0,(a1)+
0001177A 0A00 0001                  		eori.b	#1,d0
0001177E 12C0                       		move.b	d0,(a1)+
00011780 0A00 0001                  		eori.b	#1,d0
00011784 12C0                       		move.b	d0,(a1)+
00011786 0A00 0001                  		eori.b	#1,d0
0001178A 12C0                       		move.b	d0,(a1)+
0001178C 4E75                       		rts	
0001178E                            ; ===========================================================================
0001178E                            
0001178E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001178E 43E8 0038                  		lea	$38(a0),a1
00011792 0C11 0080                  		cmpi.b	#$80,(a1)
00011796 6700                       		beq.s	locret_11038
00011798 5211                       		addq.b	#1,(a1)
0001179A 7200                       		moveq	#0,d1
0001179C 1219                       		move.b	(a1)+,d1
0001179E 4841                       		swap	d1
000117A0 E289                       		lsr.l	#1,d1
000117A2 2401                       		move.l	d1,d2
000117A4 E289                       		lsr.l	#1,d1
000117A6 2601                       		move.l	d1,d3
000117A8 D682                       		add.l	d2,d3
000117AA 4841                       		swap	d1
000117AC 4842                       		swap	d2
000117AE 4843                       		swap	d3
000117B0 12C3                       		move.b	d3,(a1)+
000117B2 12C2                       		move.b	d2,(a1)+
000117B4 12C1                       		move.b	d1,(a1)+
000117B6                            
000117B6                            locret_11038:
000117B6 4E75                       		rts	
000117B8 4E75                       		rts	
000117BA                            ; ===========================================================================
000117BA                            ; ---------------------------------------------------------------------------
000117BA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000117BA                            ; ---------------------------------------------------------------------------
000117BA                            Map_obj5B:
000117BA                            	include "_maps\obj5B.asm"
000117BA                            ; ---------------------------------------------------------------------------
000117BA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000117BA                            ; ---------------------------------------------------------------------------
000117BA 0000                       		dc.w byte_1103E-Map_obj5B
000117BC 01                         byte_1103E:	dc.b 1
000117BD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000117C2                            		even
000117C2                            		even
000117C2                            
000117C2                            ; ===========================================================================
000117C2                            ; ---------------------------------------------------------------------------
000117C2                            ; Object 5C - metal girders in foreground (SLZ)
000117C2                            ; ---------------------------------------------------------------------------
000117C2                            
000117C2                            Obj5C:					; XREF: Obj_Index
000117C2 7000                       		moveq	#0,d0
000117C4 1028 0024                  		move.b	$24(a0),d0
000117C8 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000117CC 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000117D0                            ; ===========================================================================
000117D0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000117D2 0000                       		dc.w Obj5C_Display-Obj5C_Index
000117D4                            ; ===========================================================================
000117D4                            
000117D4                            Obj5C_Main:				; XREF: Obj5C_Index
000117D4 5428 0024                  		addq.b	#2,$24(a0)
000117D8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000117E0 317C 83CC 0002             		move.w	#$83CC,2(a0)
000117E6 117C 0010 0019             		move.b	#$10,$19(a0)
000117EC                            
000117EC                            Obj5C_Display:				; XREF: Obj5C_Index
000117EC 2238 F700                  		move.l	($FFFFF700).w,d1
000117F0 D281                       		add.l	d1,d1
000117F2 4841                       		swap	d1
000117F4 4441                       		neg.w	d1
000117F6 3141 0008                  		move.w	d1,8(a0)
000117FA 2238 F704                  		move.l	($FFFFF704).w,d1
000117FE D281                       		add.l	d1,d1
00011800 4841                       		swap	d1
00011802 0241 003F                  		andi.w	#$3F,d1
00011806 4441                       		neg.w	d1
00011808 0641 0100                  		addi.w	#$100,d1
0001180C 3141 000A                  		move.w	d1,$A(a0)
00011810 6000 C570                  		bra.w	DisplaySprite
00011814                            ; ===========================================================================
00011814                            ; ---------------------------------------------------------------------------
00011814                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011814                            ; ---------------------------------------------------------------------------
00011814                            Map_obj5C:
00011814                            	include "_maps\obj5C.asm"
00011814                            ; ---------------------------------------------------------------------------
00011814                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011814                            ; ---------------------------------------------------------------------------
00011814 0000                       		dc.w byte_11098-Map_obj5C
00011816 09                         byte_11098:	dc.b 9
00011817 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001181C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011821 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011826 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001182B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011830 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011835 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001183A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001183F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011844                            		even
00011844                            		even
00011844                            
00011844                            ; ===========================================================================
00011844                            ; ---------------------------------------------------------------------------
00011844                            ; Object 1B - water surface (LZ)
00011844                            ; ---------------------------------------------------------------------------
00011844                            
00011844                            Obj1B:					; XREF: Obj_Index
00011844 7000                       		moveq	#0,d0
00011846 1028 0024                  		move.b	$24(a0),d0
0001184A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001184E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011852                            ; ===========================================================================
00011852 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011854 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj1B_Main:				; XREF: Obj1B_Index
00011856 5428 0024                  		addq.b	#2,$24(a0)
0001185A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011862 317C C300 0002             		move.w	#$C300,2(a0)
00011868 117C 0004 0001             		move.b	#4,1(a0)
0001186E 117C 0080 0019             		move.b	#$80,$19(a0)
00011874 3168 0008 0030             		move.w	8(a0),$30(a0)
0001187A                            
0001187A                            Obj1B_Action:				; XREF: Obj1B_Index
0001187A 3238 F700                  		move.w	($FFFFF700).w,d1
0001187E 0241 FFE0                  		andi.w	#$FFE0,d1
00011882 D268 0030                  		add.w	$30(a0),d1
00011886 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001188C 6700                       		beq.s	loc_11114
0001188E 0641 0020                  		addi.w	#$20,d1
00011892                            
00011892                            loc_11114:
00011892 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011896 3238 F646                  		move.w	($FFFFF646).w,d1
0001189A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001189E 4A28 0032                  		tst.b	$32(a0)
000118A2 6600                       		bne.s	Obj1B_Animate
000118A4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000118AA 6700                       		beq.s	loc_1114A	; if not, branch
000118AC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000118B0 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000118B6 6000                       		bra.s	Obj1B_Display
000118B8                            ; ===========================================================================
000118B8                            
000118B8                            Obj1B_Animate:				; XREF: loc_11114
000118B8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000118BC 6600                       		bne.s	Obj1B_Display	; if yes, branch
000118BE 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000118C4 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000118C8                            
000118C8                            loc_1114A:				; XREF: loc_11114
000118C8 5328 001E                  		subq.b	#1,$1E(a0)
000118CC 6A00                       		bpl.s	Obj1B_Display
000118CE 117C 0007 001E             		move.b	#7,$1E(a0)
000118D4 5228 001A                  		addq.b	#1,$1A(a0)
000118D8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000118DE 6500                       		bcs.s	Obj1B_Display
000118E0 117C 0000 001A             		move.b	#0,$1A(a0)
000118E6                            
000118E6                            Obj1B_Display:
000118E6 6000 C49A                  		bra.w	DisplaySprite
000118EA                            ; ===========================================================================
000118EA                            ; ---------------------------------------------------------------------------
000118EA                            ; Sprite mappings - water surface (LZ)
000118EA                            ; ---------------------------------------------------------------------------
000118EA                            Map_obj1B:
000118EA                            	include "_maps\obj1B.asm"
000118EA                            ; ---------------------------------------------------------------------------
000118EA                            ; Sprite mappings - water surface (LZ)
000118EA                            ; ---------------------------------------------------------------------------
000118EA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000118EE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000118F2 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000118F6 03                         byte_11178:	dc.b 3
000118F7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000118FC FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011901 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011906 03                         byte_11188:	dc.b 3
00011907 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001190C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011911 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011916 03                         byte_11198:	dc.b 3
00011917 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001191C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011921 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011926 06                         byte_111A8:	dc.b 6
00011927 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001192C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011931 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011936 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001193B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011940 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011945 06                         byte_111C7:	dc.b 6
00011946 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001194B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011950 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011955 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001195A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001195F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011964 06                         byte_111E6:	dc.b 6
00011965 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001196A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001196F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011974 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011979 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001197E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011984 00                         		even
00011984 00                         		even
00011984                            
00011984                            ; ===========================================================================
00011984                            ; ---------------------------------------------------------------------------
00011984                            ; Object 0B - pole that	breaks (LZ)
00011984                            ; ---------------------------------------------------------------------------
00011984                            
00011984                            Obj0B:					; XREF: Obj_Index
00011984 7000                       		moveq	#0,d0
00011986 1028 0024                  		move.b	$24(a0),d0
0001198A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001198E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011992                            ; ===========================================================================
00011992 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011994 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011996 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011998                            ; ===========================================================================
00011998                            
00011998                            Obj0B_Main:				; XREF: Obj0B_Index
00011998 5428 0024                  		addq.b	#2,$24(a0)
0001199C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000119A4 317C 43DE 0002             		move.w	#$43DE,2(a0)
000119AA 117C 0004 0001             		move.b	#4,1(a0)
000119B0 117C 0008 0019             		move.b	#8,$19(a0)
000119B6 117C 0004 0018             		move.b	#4,$18(a0)
000119BC 117C 00E1 0020             		move.b	#$E1,$20(a0)
000119C2 7000                       		moveq	#0,d0
000119C4 1028 0028                  		move.b	$28(a0),d0	; get object type
000119C8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000119CC 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000119D0                            
000119D0                            Obj0B_Action:				; XREF: Obj0B_Index
000119D0 4A28 0032                  		tst.b	$32(a0)
000119D4 6700                       		beq.s	Obj0B_Grab
000119D6 4A68 0030                  		tst.w	$30(a0)
000119DA 6700                       		beq.s	Obj0B_MoveUp
000119DC 5368 0030                  		subq.w	#1,$30(a0)
000119E0 6600                       		bne.s	Obj0B_MoveUp
000119E2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000119E8 6000                       		bra.s	Obj0B_Release
000119EA                            ; ===========================================================================
000119EA                            
000119EA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000119EA 43F8 D000                  		lea	($FFFFD000).w,a1
000119EE 3028 000C                  		move.w	$C(a0),d0
000119F2 0440 0018                  		subi.w	#$18,d0
000119F6 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000119FC 6700                       		beq.s	Obj0B_MoveDown
000119FE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011A02 B069 000C                  		cmp.w	$C(a1),d0
00011A06 6500                       		bcs.s	Obj0B_MoveDown
00011A08 3340 000C                  		move.w	d0,$C(a1)
00011A0C                            
00011A0C                            Obj0B_MoveDown:
00011A0C 0640 0024                  		addi.w	#$24,d0
00011A10 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011A16 6700                       		beq.s	Obj0B_LetGo
00011A18 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011A1C B069 000C                  		cmp.w	$C(a1),d0
00011A20 6400                       		bcc.s	Obj0B_LetGo
00011A22 3340 000C                  		move.w	d0,$C(a1)
00011A26                            
00011A26                            Obj0B_LetGo:
00011A26 1038 F603                  		move.b	($FFFFF603).w,d0
00011A2A 0240 0070                  		andi.w	#$70,d0
00011A2E 6700                       		beq.s	Obj0B_Display
00011A30                            
00011A30                            Obj0B_Release:				; XREF: Obj0B_Action
00011A30 4228 0020                  		clr.b	$20(a0)
00011A34 5428 0024                  		addq.b	#2,$24(a0)
00011A38 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011A3C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011A40 4228 0032                  		clr.b	$32(a0)
00011A44 6000                       		bra.s	Obj0B_Display
00011A46                            ; ===========================================================================
00011A46                            
00011A46                            Obj0B_Grab:				; XREF: Obj0B_Action
00011A46 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011A4A 6700                       		beq.s	Obj0B_Display	; if not, branch
00011A4C 43F8 D000                  		lea	($FFFFD000).w,a1
00011A50 3028 0008                  		move.w	8(a0),d0
00011A54 0640 0014                  		addi.w	#$14,d0
00011A58 B069 0008                  		cmp.w	8(a1),d0
00011A5C 6400                       		bcc.s	Obj0B_Display
00011A5E 4228 0021                  		clr.b	$21(a0)
00011A62 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011A68 6400                       		bcc.s	Obj0B_Display
00011A6A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011A6E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011A72 3028 0008                  		move.w	8(a0),d0
00011A76 0640 0014                  		addi.w	#$14,d0
00011A7A 3340 0008                  		move.w	d0,8(a1)
00011A7E 08A9 0000 0022             		bclr	#0,$22(a1)
00011A84 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011A8A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011A90 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011A96 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011A9C                            
00011A9C                            Obj0B_Display:				; XREF: Obj0B_Index
00011A9C 6000 E38E                  		bra.w	MarkObjGone
00011AA0                            ; ===========================================================================
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            ; Sprite mappings - pole that breaks (LZ)
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            Map_obj0B:
00011AA0                            	include "_maps\obj0B.asm"
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0                            ; Sprite mappings - pole that breaks (LZ)
00011AA0                            ; ---------------------------------------------------------------------------
00011AA0 0000                       		dc.w byte_11326-Map_obj0B
00011AA2 0000                       		dc.w byte_11331-Map_obj0B
00011AA4 02                         byte_11326:	dc.b 2			; normal pole
00011AA5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011AAA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011AAF 04                         byte_11331:	dc.b 4			; broken pole
00011AB0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011AB5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011ABA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011ABF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011AC4                            		even
00011AC4                            		even
00011AC4                            
00011AC4                            ; ===========================================================================
00011AC4                            ; ---------------------------------------------------------------------------
00011AC4                            ; Object 0C - flapping door (LZ)
00011AC4                            ; ---------------------------------------------------------------------------
00011AC4                            
00011AC4                            Obj0C:					; XREF: Obj_Index
00011AC4 7000                       		moveq	#0,d0
00011AC6 1028 0024                  		move.b	$24(a0),d0
00011ACA 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011ACE 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011AD2                            ; ===========================================================================
00011AD2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011AD4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011AD6                            ; ===========================================================================
00011AD6                            
00011AD6                            Obj0C_Main:				; XREF: Obj0C_Index
00011AD6 5428 0024                  		addq.b	#2,$24(a0)
00011ADA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011AE2 317C 4328 0002             		move.w	#$4328,2(a0)
00011AE8 0028 0004 0001             		ori.b	#4,1(a0)
00011AEE 117C 0028 0019             		move.b	#$28,$19(a0)
00011AF4 7000                       		moveq	#0,d0
00011AF6 1028 0028                  		move.b	$28(a0),d0	; get object type
00011AFA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011AFE 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011B02                            
00011B02                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011B02 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B06 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011B08 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011B0E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011B14 4A28 0001                  		tst.b	1(a0)
00011B18 6A00                       		bpl.s	Obj0C_Solid
00011B1A 303C 00BB                  		move.w	#$BB,d0
00011B1E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play door sound
00011B24                            
00011B24                            Obj0C_Solid:
00011B24 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B2A 6100 934E                  		bsr.w	AnimateSprite
00011B2E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011B32 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011B36 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011B38 3038 D008                  		move.w	($FFFFD008).w,d0
00011B3C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011B40 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011B42 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B48 323C 0013                  		move.w	#$13,d1
00011B4C 343C 0020                  		move.w	#$20,d2
00011B50 3602                       		move.w	d2,d3
00011B52 5243                       		addq.w	#1,d3
00011B54 3828 0008                  		move.w	8(a0),d4
00011B58 6100 E5FA                  		bsr.w	SolidObject	; make the door	solid
00011B5C                            
00011B5C                            Obj0C_Display:
00011B5C 6000 E2CE                  		bra.w	MarkObjGone
00011B60                            ; ===========================================================================
00011B60                            Ani_obj0C:
00011B60                            	include "_anim\obj0C.asm"
00011B60                            ; ---------------------------------------------------------------------------
00011B60                            ; Animation script - flapping door (LZ)
00011B60                            ; ---------------------------------------------------------------------------
00011B60 0000                       		dc.w byte_113E6-Ani_obj0C
00011B62 0000                       		dc.w byte_113EC-Ani_obj0C
00011B64 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011B6A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011B70                            		even
00011B70                            		even
00011B70                            
00011B70                            ; ---------------------------------------------------------------------------
00011B70                            ; Sprite mappings - flapping door (LZ)
00011B70                            ; ---------------------------------------------------------------------------
00011B70                            Map_obj0C:
00011B70                            	include "_maps\obj0C.asm"
00011B70                            ; ---------------------------------------------------------------------------
00011B70                            ; Sprite mappings - flapping door (LZ)
00011B70                            ; ---------------------------------------------------------------------------
00011B70 0000                       		dc.w byte_113F8-Map_obj0C
00011B72 0000                       		dc.w byte_11403-Map_obj0C
00011B74 0000                       		dc.w byte_1140E-Map_obj0C
00011B76 02                         byte_113F8:	dc.b 2
00011B77 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011B7C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011B81 02                         byte_11403:	dc.b 2
00011B82 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011B87 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011B8C 02                         byte_1140E:	dc.b 2
00011B8D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011B92 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011B98 00                         		even
00011B98 00                         		even
00011B98                            
00011B98                            ; ===========================================================================
00011B98                            ; ---------------------------------------------------------------------------
00011B98                            ; Object 71 - invisible	solid blocks
00011B98                            ; ---------------------------------------------------------------------------
00011B98                            
00011B98                            Obj71:					; XREF: Obj_Index
00011B98 7000                       		moveq	#0,d0
00011B9A 1028 0024                  		move.b	$24(a0),d0
00011B9E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011BA2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011BA6                            ; ===========================================================================
00011BA6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011BA8 0000                       		dc.w Obj71_Solid-Obj71_Index
00011BAA                            ; ===========================================================================
00011BAA                            
00011BAA                            Obj71_Main:				; XREF: Obj71_Index
00011BAA 5428 0024                  		addq.b	#2,$24(a0)
00011BAE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011BB6 317C 8680 0002             		move.w	#$8680,2(a0)
00011BBC 0028 0004 0001             		ori.b	#4,1(a0)
00011BC2 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BC6 1200                       		move.b	d0,d1
00011BC8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011BCC 0640 0010                  		addi.w	#$10,d0
00011BD0 E248                       		lsr.w	#1,d0
00011BD2 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011BD6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011BDA 5241                       		addq.w	#1,d1
00011BDC E749                       		lsl.w	#3,d1
00011BDE 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011BE2                            
00011BE2                            Obj71_Solid:				; XREF: Obj71_Index
00011BE2 6100 C41E                  		bsr.w	ChkObjOnScreen
00011BE6 6600                       		bne.s	Obj71_ChkDel
00011BE8 7200                       		moveq	#0,d1
00011BEA 1228 0019                  		move.b	$19(a0),d1
00011BEE 0641 000B                  		addi.w	#$B,d1
00011BF2 7400                       		moveq	#0,d2
00011BF4 1428 0016                  		move.b	$16(a0),d2
00011BF8 3602                       		move.w	d2,d3
00011BFA 5243                       		addq.w	#1,d3
00011BFC 3828 0008                  		move.w	8(a0),d4
00011C00 6100 E598                  		bsr.w	SolidObject71
00011C04                            
00011C04                            Obj71_ChkDel:
00011C04 3028 0008                  		move.w	8(a0),d0
00011C08 0240 FF80                  		andi.w	#$FF80,d0
00011C0C 3238 F700                  		move.w	($FFFFF700).w,d1
00011C10 0441 0080                  		subi.w	#$80,d1
00011C14 0241 FF80                  		andi.w	#$FF80,d1
00011C18 9041                       		sub.w	d1,d0
00011C1A 0C40 0280                  		cmpi.w	#$280,d0
00011C1E 6200                       		bhi.s	Obj71_Delete
00011C20 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011C24 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C26 4EFA C15A                  		jmp	DisplaySprite	; if yes, display the object
00011C2A                            ; ===========================================================================
00011C2A                            
00011C2A                            Obj71_NoDisplay:
00011C2A 4E75                       		rts	
00011C2C                            ; ===========================================================================
00011C2C                            
00011C2C                            Obj71_Delete:
00011C2C 4EFA C190                  		jmp	DeleteObject
00011C30                            ; ===========================================================================
00011C30                            ; ---------------------------------------------------------------------------
00011C30                            ; Sprite mappings - invisible solid blocks
00011C30                            ; ---------------------------------------------------------------------------
00011C30                            Map_obj71:
00011C30                            	include "_maps\obj71.asm"
00011C30                            ; ---------------------------------------------------------------------------
00011C30                            ; Sprite mappings - invisible solid blocks
00011C30                            ; ---------------------------------------------------------------------------
00011C30 0000                       		dc.w byte_114BC-Map_obj71
00011C32 0000                       		dc.w byte_114D1-Map_obj71
00011C34 0000                       		dc.w byte_114E6-Map_obj71
00011C36 04                         byte_114BC:	dc.b 4
00011C37 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011C3C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011C41 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011C46 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011C4B 04                         byte_114D1:	dc.b 4
00011C4C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011C51 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011C56 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011C5B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011C60 04                         byte_114E6:	dc.b 4
00011C61 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011C66 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011C6B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011C70 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011C76 00                         		even
00011C76 00                         		even
00011C76                            
00011C76                            ; ===========================================================================
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            ; Object 5D - fans (SLZ)
00011C76                            ; ---------------------------------------------------------------------------
00011C76                            
00011C76                            Obj5D:					; XREF: Obj_Index
00011C76 7000                       		moveq	#0,d0
00011C78 1028 0024                  		move.b	$24(a0),d0
00011C7C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011C80 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011C84                            ; ===========================================================================
00011C84 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011C86 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011C88                            ; ===========================================================================
00011C88                            
00011C88                            Obj5D_Main:				; XREF: Obj5D_Index
00011C88 5428 0024                  		addq.b	#2,$24(a0)
00011C8C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011C94 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011C9A 0028 0004 0001             		ori.b	#4,1(a0)
00011CA0 117C 0010 0019             		move.b	#$10,$19(a0)
00011CA6 117C 0004 0018             		move.b	#4,$18(a0)
00011CAC                            
00011CAC                            Obj5D_Delay:				; XREF: Obj5D_Index
00011CAC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011CB2 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011CB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011CB8 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011CBA 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011CC0 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011CC6 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011CC8 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011CCE                            
00011CCE                            Obj5D_Blow:
00011CCE 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011CD2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011CD6 43F8 D000                  		lea	($FFFFD000).w,a1
00011CDA 3029 0008                  		move.w	8(a1),d0
00011CDE 9068 0008                  		sub.w	8(a0),d0
00011CE2 0828 0000 0022             		btst	#0,$22(a0)
00011CE8 6600                       		bne.s	Obj5D_ChkSonic
00011CEA 4440                       		neg.w	d0
00011CEC                            
00011CEC                            Obj5D_ChkSonic:
00011CEC 0640 0050                  		addi.w	#$50,d0
00011CF0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011CF4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011CF6 3229 000C                  		move.w	$C(a1),d1
00011CFA 0641 0060                  		addi.w	#$60,d1
00011CFE 9268 000C                  		sub.w	$C(a0),d1
00011D02 6500                       		bcs.s	Obj5D_Animate
00011D04 0C41 0070                  		cmpi.w	#$70,d1
00011D08 6400                       		bcc.s	Obj5D_Animate
00011D0A 0440 0050                  		subi.w	#$50,d0
00011D0E 6400                       		bcc.s	loc_1159A
00011D10 4640                       		not.w	d0
00011D12 D040                       		add.w	d0,d0
00011D14                            
00011D14                            loc_1159A:
00011D14 0640 0060                  		addi.w	#$60,d0
00011D18 0828 0000 0022             		btst	#0,$22(a0)
00011D1E 6600                       		bne.s	loc_115A8
00011D20 4440                       		neg.w	d0
00011D22                            
00011D22                            loc_115A8:
00011D22 4400                       		neg.b	d0
00011D24 E840                       		asr.w	#4,d0
00011D26 0828 0000 0028             		btst	#0,$28(a0)
00011D2C 6700                       		beq.s	Obj5D_MoveSonic
00011D2E 4440                       		neg.w	d0
00011D30                            
00011D30                            Obj5D_MoveSonic:
00011D30 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011D34                            
00011D34                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011D34 5328 001E                  		subq.b	#1,$1E(a0)
00011D38 6A00                       		bpl.s	Obj5D_ChkDel
00011D3A 117C 0000 001E             		move.b	#0,$1E(a0)
00011D40 5228 001B                  		addq.b	#1,$1B(a0)
00011D44 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011D4A 6500                       		bcs.s	loc_115D8
00011D4C 117C 0000 001B             		move.b	#0,$1B(a0)
00011D52                            
00011D52                            loc_115D8:
00011D52 7000                       		moveq	#0,d0
00011D54 0828 0000 0028             		btst	#0,$28(a0)
00011D5A 6700                       		beq.s	loc_115E4
00011D5C 7002                       		moveq	#2,d0
00011D5E                            
00011D5E                            loc_115E4:
00011D5E D028 001B                  		add.b	$1B(a0),d0
00011D62 1140 001A                  		move.b	d0,$1A(a0)
00011D66                            
00011D66                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011D66 6100 C01A                  		bsr.w	DisplaySprite
00011D6A 3028 0008                  		move.w	8(a0),d0
00011D6E 0240 FF80                  		andi.w	#$FF80,d0
00011D72 3238 F700                  		move.w	($FFFFF700).w,d1
00011D76 0441 0080                  		subi.w	#$80,d1
00011D7A 0241 FF80                  		andi.w	#$FF80,d1
00011D7E 9041                       		sub.w	d1,d0
00011D80 0C40 0280                  		cmpi.w	#$280,d0
00011D84 6200 C038                  		bhi.w	DeleteObject
00011D88 4E75                       		rts	
00011D8A                            ; ===========================================================================
00011D8A                            ; ---------------------------------------------------------------------------
00011D8A                            ; Sprite mappings - fans (SLZ)
00011D8A                            ; ---------------------------------------------------------------------------
00011D8A                            Map_obj5D:
00011D8A                            	include "_maps\obj5D.asm"
00011D8A                            ; ---------------------------------------------------------------------------
00011D8A                            ; Sprite mappings - fans (SLZ)
00011D8A                            ; ---------------------------------------------------------------------------
00011D8A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011D8E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011D92 0000                       		dc.w byte_1161A-Map_obj5D
00011D94 02                         byte_1161A:	dc.b 2
00011D95 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011D9A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011D9F 02                         byte_11625:	dc.b 2
00011DA0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011DA5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011DAA 02                         byte_11630:	dc.b 2
00011DAB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011DB0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011DB6 00                         		even
00011DB6 00                         		even
00011DB6                            
00011DB6                            ; ===========================================================================
00011DB6                            ; ---------------------------------------------------------------------------
00011DB6                            ; Object 5E - seesaws (SLZ)
00011DB6                            ; ---------------------------------------------------------------------------
00011DB6                            
00011DB6                            Obj5E:					; XREF: Obj_Index
00011DB6 7000                       		moveq	#0,d0
00011DB8 1028 0024                  		move.b	$24(a0),d0
00011DBC 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011DC0 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011DC4 3028 0030                  		move.w	$30(a0),d0
00011DC8 0240 FF80                  		andi.w	#$FF80,d0
00011DCC 3238 F700                  		move.w	($FFFFF700).w,d1
00011DD0 0441 0080                  		subi.w	#$80,d1
00011DD4 0241 FF80                  		andi.w	#$FF80,d1
00011DD8 9041                       		sub.w	d1,d0
00011DDA 6B00 BFE2                  		bmi.w	DeleteObject
00011DDE 0C40 0280                  		cmpi.w	#$280,d0
00011DE2 6200 BFDA                  		bhi.w	DeleteObject
00011DE6 6000 BF9A                  		bra.w	DisplaySprite
00011DEA                            ; ===========================================================================
00011DEA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011DEC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011DEE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011DF0 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011DF2 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011DF4 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011DF6                            ; ===========================================================================
00011DF6                            
00011DF6                            Obj5E_Main:				; XREF: Obj5E_Index
00011DF6 5428 0024                  		addq.b	#2,$24(a0)
00011DFA 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011E02 317C 0374 0002             		move.w	#$374,2(a0)
00011E08 0028 0004 0001             		ori.b	#4,1(a0)
00011E0E 117C 0004 0018             		move.b	#4,$18(a0)
00011E14 117C 0030 0019             		move.b	#$30,$19(a0)
00011E1A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E20 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011E24 6600                       		bne.s	loc_116D2	; if not, branch
00011E26 6100 C3FC                  		bsr.w	SingleObjLoad2
00011E2A 6600                       		bne.s	loc_116D2
00011E2C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011E30 5C29 0024                  		addq.b	#6,$24(a1)
00011E34 3368 0008 0008             		move.w	8(a0),8(a1)
00011E3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E40 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E46 2348 003C                  		move.l	a0,$3C(a1)
00011E4A                            
00011E4A                            loc_116D2:
00011E4A 0828 0000 0022             		btst	#0,$22(a0)
00011E50 6700                       		beq.s	loc_116E0
00011E52 117C 0002 001A             		move.b	#2,$1A(a0)
00011E58                            
00011E58                            loc_116E0:
00011E58 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011E5E                            
00011E5E                            Obj5E_Slope:				; XREF: Obj5E_Index
00011E5E 1228 003A                  		move.b	$3A(a0),d1
00011E62 6100 0000                  		bsr.w	loc_11766
00011E66 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E6C 0828 0000 001A             		btst	#0,$1A(a0)
00011E72 6700                       		beq.s	loc_11702
00011E74 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011E7A                            
00011E7A                            loc_11702:
00011E7A 43F8 D000                  		lea	($FFFFD000).w,a1
00011E7E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011E84 323C 0030                  		move.w	#$30,d1
00011E88 4EB9 0000 7C44             		jsr	(SlopeObject).l
00011E8E 4E75                       		rts	
00011E90                            ; ===========================================================================
00011E90                            
00011E90                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011E90 6100 0000                  		bsr.w	loc_1174A
00011E94 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E9A 0828 0000 001A             		btst	#0,$1A(a0)
00011EA0 6700                       		beq.s	loc_11730
00011EA2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011EA8                            
00011EA8                            loc_11730:
00011EA8 323C 0030                  		move.w	#$30,d1
00011EAC 4EB9 0000 7CE4             		jsr	(ExitPlatform).l
00011EB2 323C 0030                  		move.w	#$30,d1
00011EB6 3428 0008                  		move.w	8(a0),d2
00011EBA 4EB9 0000 8C88             		jsr	SlopeObject2
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2                            
00011EC2                            loc_1174A:				; XREF: Obj5E_Slope2
00011EC2 7202                       		moveq	#2,d1
00011EC4 43F8 D000                  		lea	($FFFFD000).w,a1
00011EC8 3028 0008                  		move.w	8(a0),d0
00011ECC 9069 0008                  		sub.w	8(a1),d0
00011ED0 6400                       		bcc.s	loc_1175E
00011ED2 4440                       		neg.w	d0
00011ED4 7200                       		moveq	#0,d1
00011ED6                            
00011ED6                            loc_1175E:
00011ED6 0C40 0008                  		cmpi.w	#8,d0
00011EDA 6400                       		bcc.s	loc_11766
00011EDC 7201                       		moveq	#1,d1
00011EDE                            
00011EDE                            loc_11766:
00011EDE 1028 001A                  		move.b	$1A(a0),d0
00011EE2 B001                       		cmp.b	d1,d0
00011EE4 6700                       		beq.s	locret_11790
00011EE6 6400                       		bcc.s	loc_11772
00011EE8 5400                       		addq.b	#2,d0
00011EEA                            
00011EEA                            loc_11772:
00011EEA 5300                       		subq.b	#1,d0
00011EEC 1140 001A                  		move.b	d0,$1A(a0)
00011EF0 1141 003A                  		move.b	d1,$3A(a0)
00011EF4 08A8 0000 0001             		bclr	#0,1(a0)
00011EFA 0828 0001 001A             		btst	#1,$1A(a0)
00011F00 6700                       		beq.s	locret_11790
00011F02 08E8 0000 0001             		bset	#0,1(a0)
00011F08                            
00011F08                            locret_11790:
00011F08 4E75                       		rts	
00011F0A                            ; ===========================================================================
00011F0A                            
00011F0A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011F0A 5428 0024                  		addq.b	#2,$24(a0)
00011F0E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011F16 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011F1C 0028 0004 0001             		ori.b	#4,1(a0)
00011F22 117C 0004 0018             		move.b	#4,$18(a0)
00011F28 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F2E 117C 000C 0019             		move.b	#$C,$19(a0)
00011F34 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F3A 0668 0028 0008             		addi.w	#$28,8(a0)
00011F40 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011F46 117C 0001 001A             		move.b	#1,$1A(a0)
00011F4C 0828 0000 0022             		btst	#0,$22(a0)
00011F52 6700                       		beq.s	Obj5E_MoveSpike
00011F54 0468 0050 0008             		subi.w	#$50,8(a0)
00011F5A 117C 0002 003A             		move.b	#2,$3A(a0)
00011F60                            
00011F60                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011F60 2268 003C                  		movea.l	$3C(a0),a1
00011F64 7000                       		moveq	#0,d0
00011F66 1028 003A                  		move.b	$3A(a0),d0
00011F6A 9029 003A                  		sub.b	$3A(a1),d0
00011F6E 6700                       		beq.s	loc_1183E
00011F70 6400                       		bcc.s	loc_117FC
00011F72 4400                       		neg.b	d0
00011F74                            
00011F74                            loc_117FC:
00011F74 323C F7E8                  		move.w	#-$818,d1
00011F78 343C FEEC                  		move.w	#-$114,d2
00011F7C 0C00 0001                  		cmpi.b	#1,d0
00011F80 6700                       		beq.s	loc_11822
00011F82 323C F510                  		move.w	#-$AF0,d1
00011F86 343C FF34                  		move.w	#-$CC,d2
00011F8A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011F90 6D00                       		blt.s	loc_11822
00011F92 323C F200                  		move.w	#-$E00,d1
00011F96 343C FF60                  		move.w	#-$A0,d2
00011F9A                            
00011F9A                            loc_11822:
00011F9A 3141 0012                  		move.w	d1,$12(a0)
00011F9E 3142 0010                  		move.w	d2,$10(a0)
00011FA2 3028 0008                  		move.w	8(a0),d0
00011FA6 9068 0030                  		sub.w	$30(a0),d0
00011FAA 6400                       		bcc.s	loc_11838
00011FAC 4468 0010                  		neg.w	$10(a0)
00011FB0                            
00011FB0                            loc_11838:
00011FB0 5428 0024                  		addq.b	#2,$24(a0)
00011FB4 6000                       		bra.s	Obj5E_SpikeFall
00011FB6                            ; ===========================================================================
00011FB6                            
00011FB6                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011FB6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011FBC 7000                       		moveq	#0,d0
00011FBE 1029 001A                  		move.b	$1A(a1),d0
00011FC2 343C 0028                  		move.w	#$28,d2
00011FC6 3228 0008                  		move.w	8(a0),d1
00011FCA 9268 0030                  		sub.w	$30(a0),d1
00011FCE 6400                       		bcc.s	loc_1185C
00011FD0 4442                       		neg.w	d2
00011FD2 5440                       		addq.w	#2,d0
00011FD4                            
00011FD4                            loc_1185C:
00011FD4 D040                       		add.w	d0,d0
00011FD6 3228 0034                  		move.w	$34(a0),d1
00011FDA D272 0000                  		add.w	(a2,d0.w),d1
00011FDE 3141 000C                  		move.w	d1,$C(a0)
00011FE2 D468 0030                  		add.w	$30(a0),d2
00011FE6 3142 0008                  		move.w	d2,8(a0)
00011FEA 4268 000E                  		clr.w	$E(a0)
00011FEE 4268 000A                  		clr.w	$A(a0)
00011FF2 4E75                       		rts	
00011FF4                            ; ===========================================================================
00011FF4                            
00011FF4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011FF4 4A68 0012                  		tst.w	$12(a0)
00011FF8 6A00                       		bpl.s	loc_1189A
00011FFA 6100 BD34                  		bsr.w	ObjectFall
00011FFE 3028 0034                  		move.w	$34(a0),d0
00012002 0440 002F                  		subi.w	#$2F,d0
00012006 B068 000C                  		cmp.w	$C(a0),d0
0001200A 6E00                       		bgt.s	locret_11898
0001200C 6100 BD22                  		bsr.w	ObjectFall
00012010                            
00012010                            locret_11898:
00012010 4E75                       		rts	
00012012                            ; ===========================================================================
00012012                            
00012012                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012012 6100 BD1C                  		bsr.w	ObjectFall
00012016 2268 003C                  		movea.l	$3C(a0),a1
0001201A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012020 7000                       		moveq	#0,d0
00012022 1029 001A                  		move.b	$1A(a1),d0
00012026 3228 0008                  		move.w	8(a0),d1
0001202A 9268 0030                  		sub.w	$30(a0),d1
0001202E 6400                       		bcc.s	loc_118BA
00012030 5440                       		addq.w	#2,d0
00012032                            
00012032                            loc_118BA:
00012032 D040                       		add.w	d0,d0
00012034 3228 0034                  		move.w	$34(a0),d1
00012038 D272 0000                  		add.w	(a2,d0.w),d1
0001203C B268 000C                  		cmp.w	$C(a0),d1
00012040 6E00                       		bgt.s	locret_11938
00012042 2268 003C                  		movea.l	$3C(a0),a1
00012046 7202                       		moveq	#2,d1
00012048 4A68 0010                  		tst.w	$10(a0)
0001204C 6B00                       		bmi.s	Obj5E_Spring
0001204E 7200                       		moveq	#0,d1
00012050                            
00012050                            Obj5E_Spring:
00012050 1341 003A                  		move.b	d1,$3A(a1)
00012054 1141 003A                  		move.b	d1,$3A(a0)
00012058 B229 001A                  		cmp.b	$1A(a1),d1
0001205C 6700                       		beq.s	loc_1192C
0001205E 08A9 0003 0022             		bclr	#3,$22(a1)
00012064 6700                       		beq.s	loc_1192C
00012066 4229 0025                  		clr.b	$25(a1)
0001206A 137C 0002 0024             		move.b	#2,$24(a1)
00012070 45F8 D000                  		lea	($FFFFD000).w,a2
00012074 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001207A 446A 0012                  		neg.w	$12(a2)
0001207E 08EA 0001 0022             		bset	#1,$22(a2)
00012084 08AA 0003 0022             		bclr	#3,$22(a2)
0001208A 422A 003C                  		clr.b	$3C(a2)
0001208E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012094 157C 0002 0024             		move.b	#2,$24(a2)
0001209A 303C 00CC                  		move.w	#$CC,d0
0001209E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
000120A4                            
000120A4                            loc_1192C:
000120A4 4268 0010                  		clr.w	$10(a0)
000120A8 4268 0012                  		clr.w	$12(a0)
000120AC 5528 0024                  		subq.b	#2,$24(a0)
000120B0                            
000120B0                            locret_11938:
000120B0 4E75                       		rts	
000120B2                            ; ===========================================================================
000120B2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000120BC                            
000120BC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000120EC                            		even
000120EC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001211C                            		even
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            ; Sprite mappings - seesaws (SLZ)
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            Map_obj5E:
0001211C                            	include "_maps\obj5E.asm"
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            ; Sprite mappings - seesaws (SLZ)
0001211C                            ; ---------------------------------------------------------------------------
0001211C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012120 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012124 07                         byte_119AC:	dc.b 7
00012125 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001212A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001212F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012134 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012139 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001213E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012143 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012148 04                         byte_119D0:	dc.b 4
00012149 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001214E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012153 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012158 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001215E 00                         		even
0001215E 00                         		even
0001215E                            
0001215E                            ; ---------------------------------------------------------------------------
0001215E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001215E                            ; ---------------------------------------------------------------------------
0001215E                            Map_obj5Ea:
0001215E                            	include "_maps\obj5Eballs.asm"
0001215E                            ; ---------------------------------------------------------------------------
0001215E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001215E                            ; ---------------------------------------------------------------------------
0001215E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012160 0000                       		dc.w byte_119F0-Map_obj5Ea
00012162 01                         byte_119EA:	dc.b 1
00012163 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012168 01                         byte_119F0:	dc.b 1
00012169 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001216E                            		even
0001216E                            		even
0001216E                            
0001216E                            ; ===========================================================================
0001216E                            ; ---------------------------------------------------------------------------
0001216E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001216E                            ; ---------------------------------------------------------------------------
0001216E                            
0001216E                            Obj5F:					; XREF: Obj_Index
0001216E 7000                       		moveq	#0,d0
00012170 1028 0024                  		move.b	$24(a0),d0
00012174 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012178 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001217C                            ; ===========================================================================
0001217C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001217E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012180 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012182 0000                       		dc.w Obj5F_End-Obj5F_Index
00012184                            ; ===========================================================================
00012184                            
00012184                            Obj5F_Main:				; XREF: Obj5F_Index
00012184 5428 0024                  		addq.b	#2,$24(a0)
00012188 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012190 317C 0400 0002             		move.w	#$400,2(a0)
00012196 0028 0004 0001             		ori.b	#4,1(a0)
0001219C 117C 0003 0018             		move.b	#3,$18(a0)
000121A2 117C 000C 0019             		move.b	#$C,$19(a0)
000121A8 1028 0028                  		move.b	$28(a0),d0
000121AC 6700                       		beq.s	loc_11A3C
000121AE 1140 0024                  		move.b	d0,$24(a0)
000121B2 4E75                       		rts	
000121B4                            ; ===========================================================================
000121B4                            
000121B4                            loc_11A3C:
000121B4 117C 009A 0020             		move.b	#$9A,$20(a0)
000121BA 0868 0000 0022             		bchg	#0,$22(a0)
000121C0                            
000121C0                            Obj5F_Action:				; XREF: Obj5F_Index
000121C0 7000                       		moveq	#0,d0
000121C2 1028 0025                  		move.b	$25(a0),d0
000121C6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000121CA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000121CE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121D4 6100 8CA4                  		bsr.w	AnimateSprite
000121D8 6000 DC52                  		bra.w	MarkObjGone
000121DC                            ; ===========================================================================
000121DC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000121DE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000121E0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000121E2                            ; ===========================================================================
000121E2                            
000121E2                            Obj5F_Walk:				; XREF: Obj5F_Index2
000121E2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000121E6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000121EA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000121EC 5428 0025                  		addq.b	#2,$25(a0)
000121F0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000121F6 317C 0010 0010             		move.w	#$10,$10(a0)
000121FC 117C 0001 001C             		move.b	#1,$1C(a0)
00012202 0868 0000 0022             		bchg	#0,$22(a0)
00012208 6700                       		beq.s	locret_11A96
0001220A 4468 0010                  		neg.w	$10(a0)		; change direction
0001220E                            
0001220E                            locret_11A96:
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012210 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012214 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012218 6B00                       		bmi.s	loc_11AA8
0001221A 6100 BB40                  		bsr.w	SpeedToPos
0001221E 4E75                       		rts	
00012220                            ; ===========================================================================
00012220                            
00012220                            loc_11AA8:
00012220 5528 0025                  		subq.b	#2,$25(a0)
00012224 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001222A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001222E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012234 4E75                       		rts	
00012236                            ; ===========================================================================
00012236                            
00012236                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012236 5368 0030                  		subq.w	#1,$30(a0)
0001223A 6A00                       		bpl.s	locret_11AD0
0001223C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012240 117C 0000 0024             		move.b	#0,$24(a0)
00012246                            
00012246                            locret_11AD0:
00012246 4E75                       		rts	
00012248                            ; ===========================================================================
00012248                            
00012248                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012248 3038 D008                  		move.w	($FFFFD008).w,d0
0001224C 9068 0008                  		sub.w	8(a0),d0
00012250 6400                       		bcc.s	loc_11ADE
00012252 4440                       		neg.w	d0
00012254                            
00012254                            loc_11ADE:
00012254 0C40 0060                  		cmpi.w	#$60,d0
00012258 6400                       		bcc.s	locret_11B5E
0001225A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001225E 9068 000C                  		sub.w	$C(a0),d0
00012262 6400                       		bcc.s	Obj5F_MakeFuse
00012264 4440                       		neg.w	d0
00012266                            
00012266                            Obj5F_MakeFuse:
00012266 0C40 0060                  		cmpi.w	#$60,d0
0001226A 6400                       		bcc.s	locret_11B5E
0001226C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012270 6600                       		bne.s	locret_11B5E
00012272 117C 0004 0025             		move.b	#4,$25(a0)
00012278 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001227E 4268 0010                  		clr.w	$10(a0)
00012282 117C 0002 001C             		move.b	#2,$1C(a0)
00012288 6100 BF9A                  		bsr.w	SingleObjLoad2
0001228C 6600                       		bne.s	locret_11B5E
0001228E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012292 3368 0008 0008             		move.w	8(a0),8(a1)
00012298 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001229E 3368 000C 0034             		move.w	$C(a0),$34(a1)
000122A4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000122AA 137C 0004 0028             		move.b	#4,$28(a1)
000122B0 137C 0003 001C             		move.b	#3,$1C(a1)
000122B6 337C 0010 0012             		move.w	#$10,$12(a1)
000122BC 0828 0001 0022             		btst	#1,$22(a0)
000122C2 6700                       		beq.s	loc_11B54
000122C4 4469 0012                  		neg.w	$12(a1)
000122C8                            
000122C8                            loc_11B54:
000122C8 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000122CE 2348 003C                  		move.l	a0,$3C(a1)
000122D2                            
000122D2                            locret_11B5E:
000122D2 4E75                       		rts	
000122D4                            ; ===========================================================================
000122D4                            
000122D4                            Obj5F_Display:				; XREF: Obj5F_Index
000122D4 6100                       		bsr.s	loc_11B70
000122D6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122DC 6100 8B9C                  		bsr.w	AnimateSprite
000122E0 6000 DB4A                  		bra.w	MarkObjGone
000122E4                            ; ===========================================================================
000122E4                            
000122E4                            loc_11B70:
000122E4 5368 0030                  		subq.w	#1,$30(a0)
000122E8 6B00                       		bmi.s	loc_11B7C
000122EA 6100 BA70                  		bsr.w	SpeedToPos
000122EE 4E75                       		rts	
000122F0                            ; ===========================================================================
000122F0                            
000122F0                            loc_11B7C:
000122F0 4268 0030                  		clr.w	$30(a0)
000122F4 4228 0024                  		clr.b	$24(a0)
000122F8 3168 0034 000C             		move.w	$34(a0),$C(a0)
000122FE 7203                       		moveq	#3,d1
00012300 2248                       		movea.l	a0,a1
00012302 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012308 6000                       		bra.s	Obj5F_MakeShrap
0001230A                            ; ===========================================================================
0001230A                            
0001230A                            Obj5F_Loop:
0001230A 6100 BF18                  		bsr.w	SingleObjLoad2
0001230E 6600                       		bne.s	loc_11BCE
00012310                            
00012310                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012310 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012314 3368 0008 0008             		move.w	8(a0),8(a1)
0001231A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012320 137C 0006 0028             		move.b	#6,$28(a1)
00012326 137C 0004 001C             		move.b	#4,$1C(a1)
0001232C 335A 0010                  		move.w	(a2)+,$10(a1)
00012330 335A 0012                  		move.w	(a2)+,$12(a1)
00012334 137C 0098 0020             		move.b	#$98,$20(a1)
0001233A 08E9 0007 0001             		bset	#7,1(a1)
00012340                            
00012340                            loc_11BCE:
00012340 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012344                            
00012344 117C 0006 0024             		move.b	#6,$24(a0)
0001234A                            
0001234A                            Obj5F_End:				; XREF: Obj5F_Index
0001234A 6100 BA10                  		bsr.w	SpeedToPos
0001234E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012354 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001235A 6100 8B1E                  		bsr.w	AnimateSprite
0001235E 4A28 0001                  		tst.b	1(a0)
00012362 6A00 BA5A                  		bpl.w	DeleteObject
00012366 6000 BA1A                  		bra.w	DisplaySprite
0001236A                            ; ===========================================================================
0001236A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001237A                            
0001237A                            Ani_obj5F:
0001237A                            	include "_anim\obj5F.asm"
0001237A                            ; ---------------------------------------------------------------------------
0001237A                            ; Animation script - Bomb enemy
0001237A                            ; ---------------------------------------------------------------------------
0001237A 0000                       		dc.w byte_11C12-Ani_obj5F
0001237C 0000                       		dc.w byte_11C16-Ani_obj5F
0001237E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012380 0000                       		dc.w byte_11C20-Ani_obj5F
00012382 0000                       		dc.w byte_11C24-Ani_obj5F
00012384 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012388 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001238E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012392 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012396 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001239A                            		even
0001239A                            		even
0001239A                            
0001239A                            ; ---------------------------------------------------------------------------
0001239A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001239A                            ; ---------------------------------------------------------------------------
0001239A                            Map_obj5F:
0001239A                            	include "_maps\obj5F.asm"
0001239A                            ; ---------------------------------------------------------------------------
0001239A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001239A                            ; ---------------------------------------------------------------------------
0001239A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001239E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000123A2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000123A6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000123AA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000123AE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000123B2 03                         byte_11C40:	dc.b 3
000123B3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000123B8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123BD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123C2 03                         byte_11C50:	dc.b 3
000123C3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123C8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123CD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123D2 03                         byte_11C60:	dc.b 3
000123D3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123D8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000123DD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000123E2 03                         byte_11C70:	dc.b 3
000123E3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123E8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000123ED E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123F2 03                         byte_11C80:	dc.b 3
000123F3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000123F8 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000123FD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012402 03                         byte_11C90:	dc.b 3
00012403 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012408 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001240D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012412 02                         byte_11CA0:	dc.b 2
00012413 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012418 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001241D 02                         byte_11CAB:	dc.b 2
0001241E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012423 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012428 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012429 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001242E 01                         byte_11CBC:	dc.b 1			; fuse
0001242F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012434 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012435 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001243A 01                         byte_11CC8:	dc.b 1			; fireball
0001243B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012440                            		even
00012440                            		even
00012440                            
00012440                            ; ===========================================================================
00012440                            ; ---------------------------------------------------------------------------
00012440                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012440                            ; ---------------------------------------------------------------------------
00012440                            
00012440                            Obj60:					; XREF: Obj_Index
00012440 7000                       		moveq	#0,d0
00012442 1028 0024                  		move.b	$24(a0),d0
00012446 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001244A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001244E                            ; ===========================================================================
0001244E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012450 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012452 0000                       		dc.w Obj60_Display-Obj60_Index
00012454 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012456 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012458                            ; ===========================================================================
00012458                            
00012458                            Obj60_Main:				; XREF: Obj60_Index
00012458 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012460 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012466 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001246C 6700                       		beq.s	loc_11D02
0001246E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012474                            
00012474                            loc_11D02:
00012474 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001247A 6600                       		bne.s	loc_11D10
0001247C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012482                            
00012482                            loc_11D10:
00012482 0028 0004 0001             		ori.b	#4,1(a0)
00012488 117C 0004 0018             		move.b	#4,$18(a0)
0001248E 117C 000B 0020             		move.b	#$B,$20(a0)
00012494 117C 000C 0019             		move.b	#$C,$19(a0)
0001249A 7400                       		moveq	#0,d2
0001249C 45E8 0037                  		lea	$37(a0),a2
000124A0 264A                       		movea.l	a2,a3
000124A2 524A                       		addq.w	#1,a2
000124A4 7203                       		moveq	#3,d1
000124A6                            
000124A6                            Obj60_MakeOrbs:
000124A6 6100 BD7C                  		bsr.w	SingleObjLoad2
000124AA 6600                       		bne.s	loc_11D90
000124AC 5213                       		addq.b	#1,(a3)
000124AE 3A09                       		move.w	a1,d5
000124B0 0445 D000                  		subi.w	#-$3000,d5
000124B4 EC4D                       		lsr.w	#6,d5
000124B6 0245 007F                  		andi.w	#$7F,d5
000124BA 14C5                       		move.b	d5,(a2)+
000124BC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000124BE 137C 0006 0024             		move.b	#6,$24(a1)
000124C4 2368 0004 0004             		move.l	4(a0),4(a1)
000124CA 3368 0002 0002             		move.w	2(a0),2(a1)
000124D0 0029 0004 0001             		ori.b	#4,1(a1)
000124D6 137C 0004 0018             		move.b	#4,$18(a1)
000124DC 137C 0008 0019             		move.b	#8,$19(a1)
000124E2 137C 0003 001A             		move.b	#3,$1A(a1)
000124E8 137C 0098 0020             		move.b	#$98,$20(a1)
000124EE 1342 0026                  		move.b	d2,$26(a1)
000124F2 0602 0040                  		addi.b	#$40,d2
000124F6 2348 003C                  		move.l	a0,$3C(a1)
000124FA 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000124FE                            
000124FE                            loc_11D90:
000124FE 7001                       		moveq	#1,d0
00012500 0828 0000 0022             		btst	#0,$22(a0)
00012506 6700                       		beq.s	Obj60_Move
00012508 4440                       		neg.w	d0
0001250A                            
0001250A                            Obj60_Move:
0001250A 1140 0036                  		move.b	d0,$36(a0)
0001250E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012514 5428 0024                  		addq.b	#2,$24(a0)
00012518 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001251E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012524 6700                       		beq.s	locret_11DBC	; if not, branch
00012526 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001252A                            
0001252A                            locret_11DBC:
0001252A 4E75                       		rts	
0001252C                            ; ===========================================================================
0001252C                            
0001252C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001252C 3038 D008                  		move.w	($FFFFD008).w,d0
00012530 9068 0008                  		sub.w	8(a0),d0
00012534 6400                       		bcc.s	loc_11DCA
00012536 4440                       		neg.w	d0
00012538                            
00012538                            loc_11DCA:
00012538 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001253C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001253E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012542 9068 000C                  		sub.w	$C(a0),d0
00012546 6400                       		bcc.s	loc_11DDC
00012548 4440                       		neg.w	d0
0001254A                            
0001254A                            loc_11DDC:
0001254A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001254E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012550 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012554 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012556 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001255C                            
0001255C                            Obj60_Animate:
0001255C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012562 6100 8916                  		bsr.w	AnimateSprite
00012566 6000 0000                  		bra.w	Obj60_ChkDel
0001256A                            ; ===========================================================================
0001256A                            
0001256A                            Obj60_Display:				; XREF: Obj60_Index
0001256A 6100 B7F0                  		bsr.w	SpeedToPos
0001256E                            
0001256E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001256E 3028 0008                  		move.w	8(a0),d0
00012572 0240 FF80                  		andi.w	#$FF80,d0
00012576 3238 F700                  		move.w	($FFFFF700).w,d1
0001257A 0441 0080                  		subi.w	#$80,d1
0001257E 0241 FF80                  		andi.w	#$FF80,d1
00012582 9041                       		sub.w	d1,d0
00012584 0C40 0280                  		cmpi.w	#$280,d0
00012588 6200 0000                  		bhi.w	Obj60_ChkGone
0001258C 6000 B7F4                  		bra.w	DisplaySprite
00012590                            ; ===========================================================================
00012590                            
00012590                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012590 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012594 7000                       		moveq	#0,d0
00012596 1028 0023                  		move.b	$23(a0),d0
0001259A 6700                       		beq.s	loc_11E34
0001259C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000125A2                            
000125A2                            loc_11E34:
000125A2 45E8 0037                  		lea	$37(a0),a2
000125A6 7400                       		moveq	#0,d2
000125A8 141A                       		move.b	(a2)+,d2
000125AA 5342                       		subq.w	#1,d2
000125AC 6500                       		bcs.s	Obj60_Delete
000125AE                            
000125AE                            loc_11E40:
000125AE 7000                       		moveq	#0,d0
000125B0 101A                       		move.b	(a2)+,d0
000125B2 ED48                       		lsl.w	#6,d0
000125B4 0680 00FF D000             		addi.l	#$FFD000,d0
000125BA 2240                       		movea.l	d0,a1
000125BC 6100 B802                  		bsr.w	DeleteObject2
000125C0 51CA FFEC                  		dbf	d2,loc_11E40
000125C4                            
000125C4                            Obj60_Delete:
000125C4 6000 B7F8                  		bra.w	DeleteObject
000125C8                            ; ===========================================================================
000125C8                            
000125C8                            Obj60_MoveOrb:				; XREF: Obj60_Index
000125C8 2268 003C                  		movea.l	$3C(a0),a1
000125CC 0C11 0060                  		cmpi.b	#$60,0(a1)
000125D0 6600 B7EC                  		bne.w	DeleteObject
000125D4 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000125DA 6600                       		bne.s	Obj60_Circle
000125DC 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000125E2 6600                       		bne.s	Obj60_Circle
000125E4 5428 0024                  		addq.b	#2,$24(a0)
000125E8 5329 0037                  		subq.b	#1,$37(a1)
000125EC 6600                       		bne.s	Obj60_FireOrb
000125EE 5429 0024                  		addq.b	#2,$24(a1)
000125F2                            
000125F2                            Obj60_FireOrb:
000125F2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000125F8 0829 0000 0022             		btst	#0,$22(a1)
000125FE 6700                       		beq.s	Obj60_Display2
00012600 4468 0010                  		neg.w	$10(a0)
00012604                            
00012604                            Obj60_Display2:
00012604 6000 B77C                  		bra.w	DisplaySprite
00012608                            ; ===========================================================================
00012608                            
00012608                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012608 1028 0026                  		move.b	$26(a0),d0
0001260C 4EB9 0000 28EC             		jsr	(CalcSine).l
00012612 E841                       		asr.w	#4,d1
00012614 D269 0008                  		add.w	8(a1),d1
00012618 3141 0008                  		move.w	d1,8(a0)
0001261C E840                       		asr.w	#4,d0
0001261E D069 000C                  		add.w	$C(a1),d0
00012622 3140 000C                  		move.w	d0,$C(a0)
00012626 1029 0036                  		move.b	$36(a1),d0
0001262A D128 0026                  		add.b	d0,$26(a0)
0001262E 6000 B752                  		bra.w	DisplaySprite
00012632                            ; ===========================================================================
00012632                            
00012632                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012632 6100 B728                  		bsr.w	SpeedToPos
00012636 4A28 0001                  		tst.b	1(a0)
0001263A 6A00 B782                  		bpl.w	DeleteObject
0001263E 6000 B742                  		bra.w	DisplaySprite
00012642                            ; ===========================================================================
00012642                            Ani_obj60:
00012642                            	include "_anim\obj60.asm"
00012642                            ; ---------------------------------------------------------------------------
00012642                            ; Animation script - Orbinaut enemy
00012642                            ; ---------------------------------------------------------------------------
00012642 0000                       		dc.w byte_11EDA-Ani_obj60
00012644 0000                       		dc.w byte_11EDE-Ani_obj60
00012646 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001264A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012650                            		even
00012650                            		even
00012650                            
00012650                            ; ---------------------------------------------------------------------------
00012650                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012650                            ; ---------------------------------------------------------------------------
00012650                            Map_obj60:
00012650                            	include "_maps\obj60.asm"
00012650                            ; ---------------------------------------------------------------------------
00012650                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012650                            ; ---------------------------------------------------------------------------
00012650 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012654 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012658 01                         byte_11EEC:	dc.b 1
00012659 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001265E 01                         byte_11EF2:	dc.b 1
0001265F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012664 01                         byte_11EF8:	dc.b 1
00012665 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001266A 01                         byte_11EFE:	dc.b 1
0001266B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012670                            		even
00012670                            		even
00012670                            
00012670                            ; ===========================================================================
00012670                            ; ---------------------------------------------------------------------------
00012670                            ; Object 16 - harpoon (LZ)
00012670                            ; ---------------------------------------------------------------------------
00012670                            
00012670                            Obj16:					; XREF: Obj_Index
00012670 7000                       		moveq	#0,d0
00012672 1028 0024                  		move.b	$24(a0),d0
00012676 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001267A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001267E                            ; ===========================================================================
0001267E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012680 0000                       		dc.w Obj16_Move-Obj16_Index
00012682 0000                       		dc.w Obj16_Wait-Obj16_Index
00012684                            ; ===========================================================================
00012684                            
00012684                            Obj16_Main:				; XREF: Obj16_Index
00012684 5428 0024                  		addq.b	#2,$24(a0)
00012688 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012690 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012696 0028 0004 0001             		ori.b	#4,1(a0)
0001269C 117C 0004 0018             		move.b	#4,$18(a0)
000126A2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000126A8 117C 0014 0019             		move.b	#$14,$19(a0)
000126AE 317C 003C 0030             		move.w	#60,$30(a0)
000126B4                            
000126B4                            Obj16_Move:				; XREF: Obj16_Index
000126B4 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000126BA 6100 87BE                  		bsr.w	AnimateSprite
000126BE 7000                       		moveq	#0,d0
000126C0 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000126C4 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000126CA 6000 D760                  		bra.w	MarkObjGone
000126CE                            ; ===========================================================================
000126CE 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000126D4                            ; ===========================================================================
000126D4                            
000126D4                            Obj16_Wait:				; XREF: Obj16_Index
000126D4 5368 0030                  		subq.w	#1,$30(a0)
000126D8 6A00                       		bpl.s	Obj16_ChkDel
000126DA 317C 003C 0030             		move.w	#60,$30(a0)
000126E0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000126E4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000126EA                            
000126EA                            Obj16_ChkDel:
000126EA 6000 D740                  		bra.w	MarkObjGone
000126EE                            ; ===========================================================================
000126EE                            Ani_obj16:
000126EE                            	include "_anim\obj16.asm"
000126EE                            ; ---------------------------------------------------------------------------
000126EE                            ; Animation script - harpoon (LZ)
000126EE                            ; ---------------------------------------------------------------------------
000126EE 0000                       		dc.w byte_11F8A-Ani_obj16
000126F0 0000                       		dc.w byte_11F8E-Ani_obj16
000126F2 0000                       		dc.w byte_11F92-Ani_obj16
000126F4 0000                       		dc.w byte_11F96-Ani_obj16
000126F6 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000126FA 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000126FE 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012702 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012706                            		even
00012706                            		even
00012706                            
00012706                            ; ---------------------------------------------------------------------------
00012706                            ; Sprite mappings - harpoon (LZ)
00012706                            ; ---------------------------------------------------------------------------
00012706                            Map_obj16:
00012706                            	include "_maps\obj16.asm"
00012706                            ; ---------------------------------------------------------------------------
00012706                            ; Sprite mappings - harpoon (LZ)
00012706                            ; ---------------------------------------------------------------------------
00012706 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001270A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001270E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012712 01                         byte_11FA6:	dc.b 1
00012713 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012718 01                         byte_11FAC:	dc.b 1
00012719 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001271E 02                         byte_11FB2:	dc.b 2
0001271F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012724 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012729 01                         byte_11FBD:	dc.b 1
0001272A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001272F 01                         byte_11FC3:	dc.b 1
00012730 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012735 02                         byte_11FC9:	dc.b 2
00012736 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001273B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012740                            		even
00012740                            		even
00012740                            
00012740                            ; ===========================================================================
00012740                            ; ---------------------------------------------------------------------------
00012740                            ; Object 61 - blocks (LZ)
00012740                            ; ---------------------------------------------------------------------------
00012740                            
00012740                            Obj61:					; XREF: Obj_Index
00012740 7000                       		moveq	#0,d0
00012742 1028 0024                  		move.b	$24(a0),d0
00012746 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001274A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001274E                            ; ===========================================================================
0001274E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012750 0000                       		dc.w Obj61_Action-Obj61_Index
00012752                            
00012752 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012754 200C                       		dc.b $20, $C
00012756 1010                       		dc.b $10, $10
00012758 1010                       		dc.b $10, $10
0001275A                            ; ===========================================================================
0001275A                            
0001275A                            Obj61_Main:				; XREF: Obj61_Index
0001275A 5428 0024                  		addq.b	#2,$24(a0)
0001275E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012766 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001276C 117C 0004 0001             		move.b	#4,1(a0)
00012772 117C 0003 0018             		move.b	#3,$18(a0)
00012778 7000                       		moveq	#0,d0
0001277A 1028 0028                  		move.b	$28(a0),d0
0001277E E648                       		lsr.w	#3,d0
00012780 0240 000E                  		andi.w	#$E,d0
00012784 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012788 115A 0019                  		move.b	(a2)+,$19(a0)
0001278C 1152 0016                  		move.b	(a2),$16(a0)
00012790 E248                       		lsr.w	#1,d0
00012792 1140 001A                  		move.b	d0,$1A(a0)
00012796 3168 0008 0034             		move.w	8(a0),$34(a0)
0001279C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000127A2 1028 0028                  		move.b	$28(a0),d0
000127A6 0200 000F                  		andi.b	#$F,d0
000127AA 6700                       		beq.s	Obj61_Action
000127AC 0C00 0007                  		cmpi.b	#7,d0
000127B0 6700                       		beq.s	Obj61_Action
000127B2 117C 0001 0038             		move.b	#1,$38(a0)
000127B8                            
000127B8                            Obj61_Action:				; XREF: Obj61_Index
000127B8 3F28 0008                  		move.w	8(a0),-(sp)
000127BC 7000                       		moveq	#0,d0
000127BE 1028 0028                  		move.b	$28(a0),d0
000127C2 0240 000F                  		andi.w	#$F,d0
000127C6 D040                       		add.w	d0,d0
000127C8 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000127CC 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000127D0 381F                       		move.w	(sp)+,d4
000127D2 4A28 0001                  		tst.b	1(a0)
000127D6 6A00                       		bpl.s	Obj61_ChkDel
000127D8 7200                       		moveq	#0,d1
000127DA 1228 0019                  		move.b	$19(a0),d1
000127DE 0641 000B                  		addi.w	#$B,d1
000127E2 7400                       		moveq	#0,d2
000127E4 1428 0016                  		move.b	$16(a0),d2
000127E8 3602                       		move.w	d2,d3
000127EA 5243                       		addq.w	#1,d3
000127EC 6100 D966                  		bsr.w	SolidObject
000127F0 1144 003F                  		move.b	d4,$3F(a0)
000127F4 6100 0000                  		bsr.w	loc_12180
000127F8                            
000127F8                            Obj61_ChkDel:
000127F8 3028 0034                  		move.w	$34(a0),d0
000127FC 0240 FF80                  		andi.w	#$FF80,d0
00012800 3238 F700                  		move.w	($FFFFF700).w,d1
00012804 0441 0080                  		subi.w	#$80,d1
00012808 0241 FF80                  		andi.w	#$FF80,d1
0001280C 9041                       		sub.w	d1,d0
0001280E 0C40 0280                  		cmpi.w	#$280,d0
00012812 6200 B5AA                  		bhi.w	DeleteObject
00012816 6000 B56A                  		bra.w	DisplaySprite
0001281A                            ; ===========================================================================
0001281A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001281E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012822 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012826 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001282A                            ; ===========================================================================
0001282A                            
0001282A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001282A 4E75                       		rts	
0001282C                            ; ===========================================================================
0001282C                            
0001282C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001282C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012830 6600                       		bne.s	loc_120D6	; if yes, branch
00012832 0828 0003 0022             		btst	#3,$22(a0)
00012838 6700                       		beq.s	locret_120D4
0001283A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00012840                            
00012840                            locret_120D4:
00012840 4E75                       		rts	
00012842                            ; ===========================================================================
00012842                            
00012842                            loc_120D6:
00012842 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012846 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012848 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001284C 4228 0038                  		clr.b	$38(a0)
00012850 4E75                       		rts	
00012852                            ; ===========================================================================
00012852                            
00012852                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012852 6100 B508                  		bsr.w	SpeedToPos
00012856 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001285A 6100 0000                  		bsr.w	ObjHitFloor
0001285E 4A41                       		tst.w	d1
00012860 6A00 0000                  		bpl.w	locret_12106
00012864 5241                       		addq.w	#1,d1
00012866 D368 000C                  		add.w	d1,$C(a0)
0001286A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001286E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012872                            
00012872                            locret_12106:
00012872 4E75                       		rts	
00012874                            ; ===========================================================================
00012874                            
00012874                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012874 6100 B4E6                  		bsr.w	SpeedToPos
00012878 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001287C 6100 0000                  		bsr.w	ObjHitCeiling
00012880 4A41                       		tst.w	d1
00012882 6A00 0000                  		bpl.w	locret_12126
00012886 9368 000C                  		sub.w	d1,$C(a0)
0001288A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001288E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012892                            
00012892                            locret_12126:
00012892 4E75                       		rts	
00012894                            ; ===========================================================================
00012894                            
00012894                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012894 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001289A 6600                       		bne.s	locret_12138	; if not, branch
0001289C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000128A0 4228 0038                  		clr.b	$38(a0)
000128A4                            
000128A4                            locret_12138:
000128A4 4E75                       		rts	
000128A6                            ; ===========================================================================
000128A6                            
000128A6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000128A6 3038 F646                  		move.w	($FFFFF646).w,d0
000128AA 9068 000C                  		sub.w	$C(a0),d0
000128AE 6700                       		beq.s	locret_1217E
000128B0 6400                       		bcc.s	loc_12162
000128B2 0C40 FFFE                  		cmpi.w	#-2,d0
000128B6 6C00                       		bge.s	loc_1214E
000128B8 70FE                       		moveq	#-2,d0
000128BA                            
000128BA                            loc_1214E:
000128BA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000128BE 6100 0000                  		bsr.w	ObjHitCeiling
000128C2 4A41                       		tst.w	d1
000128C4 6A00 0000                  		bpl.w	locret_12160
000128C8 9368 000C                  		sub.w	d1,$C(a0)
000128CC                            
000128CC                            locret_12160:
000128CC 4E75                       		rts	
000128CE                            ; ===========================================================================
000128CE                            
000128CE                            loc_12162:				; XREF: Obj61_Type07
000128CE 0C40 0002                  		cmpi.w	#2,d0
000128D2 6F00                       		ble.s	loc_1216A
000128D4 7002                       		moveq	#2,d0
000128D6                            
000128D6                            loc_1216A:
000128D6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000128DA 6100 0000                  		bsr.w	ObjHitFloor
000128DE 4A41                       		tst.w	d1
000128E0 6A00 0000                  		bpl.w	locret_1217E
000128E4 5241                       		addq.w	#1,d1
000128E6 D368 000C                  		add.w	d1,$C(a0)
000128EA                            
000128EA                            locret_1217E:
000128EA 4E75                       		rts	
000128EC                            ; ===========================================================================
000128EC                            
000128EC                            loc_12180:				; XREF: Obj61_Action
000128EC 4A28 0038                  		tst.b	$38(a0)
000128F0 6700                       		beq.s	locret_121C0
000128F2 0828 0003 0022             		btst	#3,$22(a0)
000128F8 6600                       		bne.s	loc_1219A
000128FA 4A28 003E                  		tst.b	$3E(a0)
000128FE 6700                       		beq.s	locret_121C0
00012900 5928 003E                  		subq.b	#4,$3E(a0)
00012904 6000                       		bra.s	loc_121A6
00012906                            ; ===========================================================================
00012906                            
00012906                            loc_1219A:
00012906 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001290C 6700                       		beq.s	locret_121C0
0001290E 5828 003E                  		addq.b	#4,$3E(a0)
00012912                            
00012912                            loc_121A6:
00012912 1028 003E                  		move.b	$3E(a0),d0
00012916 4EB9 0000 28EC             		jsr	(CalcSine).l
0001291C 323C 0400                  		move.w	#$400,d1
00012920 C1C1                       		muls.w	d1,d0
00012922 4840                       		swap	d0
00012924 D068 0030                  		add.w	$30(a0),d0
00012928 3140 000C                  		move.w	d0,$C(a0)
0001292C                            
0001292C                            locret_121C0:
0001292C 4E75                       		rts	
0001292E                            ; ===========================================================================
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            ; Sprite mappings - blocks (LZ)
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            Map_obj61:
0001292E                            	include "_maps\obj61.asm"
0001292E                            ; ---------------------------------------------------------------------------
0001292E                            ; Sprite mappings - blocks (LZ)
0001292E                            ; ---------------------------------------------------------------------------
0001292E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012932 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012936 01                         byte_121CA:	dc.b 1
00012937 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001293C 02                         byte_121D0:	dc.b 2
0001293D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012942 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012947 01                         byte_121DB:	dc.b 1
00012948 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001294D 01                         byte_121E1:	dc.b 1
0001294E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012954 00                         		even
00012954 00                         		even
00012954                            
00012954                            ; ===========================================================================
00012954                            ; ---------------------------------------------------------------------------
00012954                            ; Object 62 - gargoyle head (LZ)
00012954                            ; ---------------------------------------------------------------------------
00012954                            
00012954                            Obj62:					; XREF: Obj_Index
00012954 7000                       		moveq	#0,d0
00012956 1028 0024                  		move.b	$24(a0),d0
0001295A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001295E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012962 6000 D4C8                  		bra.w	MarkObjGone
00012966                            ; ===========================================================================
00012966 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012968 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001296A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001296C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001296E                            
0001296E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012976                            ; ===========================================================================
00012976                            
00012976                            Obj62_Main:				; XREF: Obj62_Index
00012976 5428 0024                  		addq.b	#2,$24(a0)
0001297A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012982 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012988 0028 0004 0001             		ori.b	#4,1(a0)
0001298E 117C 0003 0018             		move.b	#3,$18(a0)
00012994 117C 0010 0019             		move.b	#$10,$19(a0)
0001299A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001299E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000129A2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000129A8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000129AE 0228 000F 0028             		andi.b	#$F,$28(a0)
000129B4                            
000129B4                            Obj62_MakeFire:				; XREF: Obj62_Index
000129B4 5328 001E                  		subq.b	#1,$1E(a0)
000129B8 6600                       		bne.s	Obj62_NoFire
000129BA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000129C0 6100 B640                  		bsr.w	ChkObjOnScreen
000129C4 6600                       		bne.s	Obj62_NoFire
000129C6 6100 B846                  		bsr.w	SingleObjLoad
000129CA 6600                       		bne.s	Obj62_NoFire
000129CC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000129D0 5829 0024                  		addq.b	#4,$24(a1)
000129D4 3368 0008 0008             		move.w	8(a0),8(a1)
000129DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129E0 1368 0001 0001             		move.b	1(a0),1(a1)
000129E6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000129EC                            
000129EC                            Obj62_NoFire:
000129EC 4E75                       		rts	
000129EE                            ; ===========================================================================
000129EE                            
000129EE                            Obj62_FireBall:				; XREF: Obj62_Index
000129EE 5428 0024                  		addq.b	#2,$24(a0)
000129F2 117C 0008 0016             		move.b	#8,$16(a0)
000129F8 117C 0008 0017             		move.b	#8,$17(a0)
000129FE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A06 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012A0C 0028 0004 0001             		ori.b	#4,1(a0)
00012A12 117C 0004 0018             		move.b	#4,$18(a0)
00012A18 117C 0098 0020             		move.b	#$98,$20(a0)
00012A1E 117C 0008 0019             		move.b	#8,$19(a0)
00012A24 117C 0002 001A             		move.b	#2,$1A(a0)
00012A2A 5068 000C                  		addq.w	#8,$C(a0)
00012A2E 317C 0200 0010             		move.w	#$200,$10(a0)
00012A34 0828 0000 0022             		btst	#0,$22(a0)
00012A3A 6600                       		bne.s	Obj62_Sound
00012A3C 4468 0010                  		neg.w	$10(a0)
00012A40                            
00012A40                            Obj62_Sound:
00012A40 303C 00AE                  		move.w	#$AE,d0
00012A44 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012A4A                            
00012A4A                            Obj62_AniFire:				; XREF: Obj62_Index
00012A4A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012A4E 0200 0007                  		andi.b	#7,d0
00012A52 6600                       		bne.s	Obj62_StopFire
00012A54 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012A5A                            
00012A5A                            Obj62_StopFire:
00012A5A 6100 B300                  		bsr.w	SpeedToPos
00012A5E 0828 0000 0022             		btst	#0,$22(a0)
00012A64 6600                       		bne.s	Obj62_StopFire2
00012A66 76F8                       		moveq	#-8,d3
00012A68 6100 0000                  		bsr.w	ObjHitWallLeft
00012A6C 4A41                       		tst.w	d1
00012A6E 6B00 B34E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012A72 4E75                       		rts	
00012A74                            ; ===========================================================================
00012A74                            
00012A74                            Obj62_StopFire2:
00012A74 7608                       		moveq	#8,d3
00012A76 6100 0000                  		bsr.w	ObjHitWallRight
00012A7A 4A41                       		tst.w	d1
00012A7C 6B00 B340                  		bmi.w	DeleteObject
00012A80 4E75                       		rts	
00012A82                            ; ===========================================================================
00012A82                            ; ---------------------------------------------------------------------------
00012A82                            ; Sprite mappings - gargoyle head (LZ)
00012A82                            ; ---------------------------------------------------------------------------
00012A82                            Map_obj62:
00012A82                            	include "_maps\obj62.asm"
00012A82                            ; ---------------------------------------------------------------------------
00012A82                            ; Sprite mappings - gargoyle head (LZ)
00012A82                            ; ---------------------------------------------------------------------------
00012A82 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012A86 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012A8A 03                         byte_12320:	dc.b 3
00012A8B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012A90 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012A95 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012A9A 01                         byte_12330:	dc.b 1
00012A9B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012AA0 01                         byte_12336:	dc.b 1
00012AA1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012AA6                            		even
00012AA6                            		even
00012AA6                            
00012AA6                            ; ===========================================================================
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012AA6                            ; ---------------------------------------------------------------------------
00012AA6                            
00012AA6                            Obj63:					; XREF: Obj_Index
00012AA6 7000                       		moveq	#0,d0
00012AA8 1028 0024                  		move.b	$24(a0),d0
00012AAC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012AB0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012AB4 3028 0030                  		move.w	$30(a0),d0
00012AB8 0240 FF80                  		andi.w	#$FF80,d0
00012ABC 3238 F700                  		move.w	($FFFFF700).w,d1
00012AC0 0441 0080                  		subi.w	#$80,d1
00012AC4 0241 FF80                  		andi.w	#$FF80,d1
00012AC8 9041                       		sub.w	d1,d0
00012ACA 0C40 0280                  		cmpi.w	#$280,d0
00012ACE 6200                       		bhi.s	loc_1236A
00012AD0                            
00012AD0                            Obj63_Display:				; XREF: loc_1236A
00012AD0 6000 B2B0                  		bra.w	DisplaySprite
00012AD4                            ; ===========================================================================
00012AD4                            
00012AD4                            loc_1236A:				; XREF: Obj63
00012AD4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012ADA 6600                       		bne.s	loc_12378
00012ADC 0C40 FF80                  		cmpi.w	#-$80,d0
00012AE0 64EE                       		bcc.s	Obj63_Display
00012AE2                            
00012AE2                            loc_12378:
00012AE2 1028 002F                  		move.b	$2F(a0),d0
00012AE6 6A00 B2D6                  		bpl.w	DeleteObject
00012AEA 0240 007F                  		andi.w	#$7F,d0
00012AEE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012AF2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012AF8 6000 B2C4                  		bra.w	DeleteObject
00012AFC                            ; ===========================================================================
00012AFC 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012AFE 0000                       		dc.w loc_124B2-Obj63_Index
00012B00 0000                       		dc.w loc_124C2-Obj63_Index
00012B02 0000                       		dc.w loc_124DE-Obj63_Index
00012B04                            ; ===========================================================================
00012B04                            
00012B04                            Obj63_Main:				; XREF: Obj63_Index
00012B04 1028 0028                  		move.b	$28(a0),d0
00012B08 6B00 0000                  		bmi.w	loc_12460
00012B0C 5428 0024                  		addq.b	#2,$24(a0)
00012B10 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012B18 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012B1E 0028 0004 0001             		ori.b	#4,1(a0)
00012B24 117C 0010 0019             		move.b	#$10,$19(a0)
00012B2A 117C 0004 0018             		move.b	#4,$18(a0)
00012B30 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012B36 6600                       		bne.s	loc_123E2
00012B38 5828 0024                  		addq.b	#4,$24(a0)
00012B3C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012B42 117C 0001 0018             		move.b	#1,$18(a0)
00012B48 6000 0000                  		bra.w	loc_124DE
00012B4C                            ; ===========================================================================
00012B4C                            
00012B4C                            loc_123E2:
00012B4C 117C 0004 001A             		move.b	#4,$1A(a0)
00012B52 7000                       		moveq	#0,d0
00012B54 1028 0028                  		move.b	$28(a0),d0
00012B58 3200                       		move.w	d0,d1
00012B5A E648                       		lsr.w	#3,d0
00012B5C 0240 001E                  		andi.w	#$1E,d0
00012B60 45FA 0000                  		lea	Obj63_Data(pc),a2
00012B64 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B68 315A 0038                  		move.w	(a2)+,$38(a0)
00012B6C 315A 0030                  		move.w	(a2)+,$30(a0)
00012B70 214A 003C                  		move.l	a2,$3C(a0)
00012B74 0241 000F                  		andi.w	#$F,d1
00012B78 E549                       		lsl.w	#2,d1
00012B7A 1141 0038                  		move.b	d1,$38(a0)
00012B7E 117C 0004 003A             		move.b	#4,$3A(a0)
00012B84 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012B88 6700                       		beq.s	loc_1244C
00012B8A 117C 0001 003B             		move.b	#1,$3B(a0)
00012B90 4428 003A                  		neg.b	$3A(a0)
00012B94 7200                       		moveq	#0,d1
00012B96 1228 0038                  		move.b	$38(a0),d1
00012B9A D228 003A                  		add.b	$3A(a0),d1
00012B9E B228 0039                  		cmp.b	$39(a0),d1
00012BA2 6500                       		bcs.s	loc_12448
00012BA4 1001                       		move.b	d1,d0
00012BA6 7200                       		moveq	#0,d1
00012BA8 4A00                       		tst.b	d0
00012BAA 6A00                       		bpl.s	loc_12448
00012BAC 1228 0039                  		move.b	$39(a0),d1
00012BB0 5901                       		subq.b	#4,d1
00012BB2                            
00012BB2                            loc_12448:
00012BB2 1141 0038                  		move.b	d1,$38(a0)
00012BB6                            
00012BB6                            loc_1244C:
00012BB6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012BBC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012BC2 6100 0000                  		bsr.w	Obj63_ChangeDir
00012BC6 6000 0000                  		bra.w	loc_124B2
00012BCA                            ; ===========================================================================
00012BCA                            
00012BCA                            loc_12460:				; XREF: Obj63_Main
00012BCA 1140 002F                  		move.b	d0,$2F(a0)
00012BCE 0240 007F                  		andi.w	#$7F,d0
00012BD2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BD6 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012BDC 6600 B1E0                  		bne.w	DeleteObject
00012BE0 D040                       		add.w	d0,d0
00012BE2 0240 001E                  		andi.w	#$1E,d0
00012BE6 0640 0070                  		addi.w	#$70,d0
00012BEA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012BF0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012BF4 321A                       		move.w	(a2)+,d1
00012BF6 2248                       		movea.l	a0,a1
00012BF8 6000                       		bra.s	Obj63_MakePtfms
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            Obj63_Loop:
00012BFA 6100 B612                  		bsr.w	SingleObjLoad
00012BFE 6600                       		bne.s	loc_124AA
00012C00                            
00012C00                            Obj63_MakePtfms:			; XREF: loc_12460
00012C00 12BC 0063                  		move.b	#$63,0(a1)
00012C04 335A 0008                  		move.w	(a2)+,8(a1)
00012C08 335A 000C                  		move.w	(a2)+,$C(a1)
00012C0C 301A                       		move.w	(a2)+,d0
00012C0E 1340 0028                  		move.b	d0,$28(a1)
00012C12                            
00012C12                            loc_124AA:
00012C12 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012C16                            
00012C16 588F                       		addq.l	#4,sp
00012C18 4E75                       		rts	
00012C1A                            ; ===========================================================================
00012C1A                            
00012C1A                            loc_124B2:				; XREF: Obj63_Index
00012C1A 7200                       		moveq	#0,d1
00012C1C 1228 0019                  		move.b	$19(a0),d1
00012C20 4EB9 0000 7B70             		jsr	(PlatformObject).l
00012C26 6000 0000                  		bra.w	sub_12502
00012C2A                            ; ===========================================================================
00012C2A                            
00012C2A                            loc_124C2:				; XREF: Obj63_Index
00012C2A 7200                       		moveq	#0,d1
00012C2C 1228 0019                  		move.b	$19(a0),d1
00012C30 4EB9 0000 7CE4             		jsr	(ExitPlatform).l
00012C36 3F28 0008                  		move.w	8(a0),-(sp)
00012C3A 6100 0000                  		bsr.w	sub_12502
00012C3E 341F                       		move.w	(sp)+,d2
00012C40 4EF9 0000 824E             		jmp	(MvSonicOnPtfm2).l
00012C46                            ; ===========================================================================
00012C46                            
00012C46                            loc_124DE:				; XREF: Obj63_Index
00012C46 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C4A 0240 0003                  		andi.w	#3,d0
00012C4E 6600                       		bne.s	loc_124FC
00012C50 7201                       		moveq	#1,d1
00012C52 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C56 6700                       		beq.s	loc_124F2
00012C58 4401                       		neg.b	d1
00012C5A                            
00012C5A                            loc_124F2:
00012C5A D328 001A                  		add.b	d1,$1A(a0)
00012C5E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012C64                            
00012C64                            loc_124FC:
00012C64 588F                       		addq.l	#4,sp
00012C66 6000 D1C4                  		bra.w	MarkObjGone
00012C6A                            
00012C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C6A                            
00012C6A                            
00012C6A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012C6A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012C6E 6700                       		beq.s	loc_12520
00012C70 4A28 003B                  		tst.b	$3B(a0)
00012C74 6600                       		bne.s	loc_12520
00012C76 117C 0001 003B             		move.b	#1,$3B(a0)
00012C7C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012C82 4428 003A                  		neg.b	$3A(a0)
00012C86 6000                       		bra.s	loc_12534
00012C88                            ; ===========================================================================
00012C88                            
00012C88                            loc_12520:
00012C88 3028 0008                  		move.w	8(a0),d0
00012C8C B068 0034                  		cmp.w	$34(a0),d0
00012C90 6600                       		bne.s	loc_1256A
00012C92 3028 000C                  		move.w	$C(a0),d0
00012C96 B068 0036                  		cmp.w	$36(a0),d0
00012C9A 6600                       		bne.s	loc_1256A
00012C9C                            
00012C9C                            loc_12534:
00012C9C 7200                       		moveq	#0,d1
00012C9E 1228 0038                  		move.b	$38(a0),d1
00012CA2 D228 003A                  		add.b	$3A(a0),d1
00012CA6 B228 0039                  		cmp.b	$39(a0),d1
00012CAA 6500                       		bcs.s	loc_12552
00012CAC 1001                       		move.b	d1,d0
00012CAE 7200                       		moveq	#0,d1
00012CB0 4A00                       		tst.b	d0
00012CB2 6A00                       		bpl.s	loc_12552
00012CB4 1228 0039                  		move.b	$39(a0),d1
00012CB8 5901                       		subq.b	#4,d1
00012CBA                            
00012CBA                            loc_12552:
00012CBA 1141 0038                  		move.b	d1,$38(a0)
00012CBE 2268 003C                  		movea.l	$3C(a0),a1
00012CC2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012CC8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012CCE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012CD2                            
00012CD2                            loc_1256A:
00012CD2 6100 B088                  		bsr.w	SpeedToPos
00012CD6 4E75                       		rts	
00012CD8                            ; End of function sub_12502
00012CD8                            
00012CD8                            
00012CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CD8                            
00012CD8                            
00012CD8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012CD8 7000                       		moveq	#0,d0
00012CDA 343C FF00                  		move.w	#-$100,d2
00012CDE 3028 0008                  		move.w	8(a0),d0
00012CE2 9068 0034                  		sub.w	$34(a0),d0
00012CE6 6400                       		bcc.s	loc_12584
00012CE8 4440                       		neg.w	d0
00012CEA 4442                       		neg.w	d2
00012CEC                            
00012CEC                            loc_12584:
00012CEC 7200                       		moveq	#0,d1
00012CEE 363C FF00                  		move.w	#-$100,d3
00012CF2 3228 000C                  		move.w	$C(a0),d1
00012CF6 9268 0036                  		sub.w	$36(a0),d1
00012CFA 6400                       		bcc.s	loc_12598
00012CFC 4441                       		neg.w	d1
00012CFE 4443                       		neg.w	d3
00012D00                            
00012D00                            loc_12598:
00012D00 B240                       		cmp.w	d0,d1
00012D02 6500                       		bcs.s	loc_125C2
00012D04 3028 0008                  		move.w	8(a0),d0
00012D08 9068 0034                  		sub.w	$34(a0),d0
00012D0C 6700                       		beq.s	loc_125AE
00012D0E 48C0                       		ext.l	d0
00012D10 E180                       		asl.l	#8,d0
00012D12 81C1                       		divs.w	d1,d0
00012D14 4440                       		neg.w	d0
00012D16                            
00012D16                            loc_125AE:
00012D16 3140 0010                  		move.w	d0,$10(a0)
00012D1A 3143 0012                  		move.w	d3,$12(a0)
00012D1E 4840                       		swap	d0
00012D20 3140 000A                  		move.w	d0,$A(a0)
00012D24 4268 000E                  		clr.w	$E(a0)
00012D28 4E75                       		rts	
00012D2A                            ; ===========================================================================
00012D2A                            
00012D2A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D2A 3228 000C                  		move.w	$C(a0),d1
00012D2E 9268 0036                  		sub.w	$36(a0),d1
00012D32 6700                       		beq.s	loc_125D4
00012D34 48C1                       		ext.l	d1
00012D36 E181                       		asl.l	#8,d1
00012D38 83C0                       		divs.w	d0,d1
00012D3A 4441                       		neg.w	d1
00012D3C                            
00012D3C                            loc_125D4:
00012D3C 3141 0012                  		move.w	d1,$12(a0)
00012D40 3142 0010                  		move.w	d2,$10(a0)
00012D44 4841                       		swap	d1
00012D46 3141 000E                  		move.w	d1,$E(a0)
00012D4A 4268 000A                  		clr.w	$A(a0)
00012D4E 4E75                       		rts	
00012D50                            ; End of function Obj63_ChangeDir
00012D50                            
00012D50                            ; ===========================================================================
00012D50 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012D52 0000                       		dc.w word_12610-Obj63_Data
00012D54 0000                       		dc.w word_12628-Obj63_Data
00012D56 0000                       		dc.w word_1263C-Obj63_Data
00012D58 0000                       		dc.w word_12650-Obj63_Data
00012D5A 0000                       		dc.w word_12668-Obj63_Data
00012D5C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012D6C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012D78 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012D88 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012D90 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012DA4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012DB8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012DD0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012DE4                            
00012DE4                            ; ---------------------------------------------------------------------------
00012DE4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DE4                            ; ---------------------------------------------------------------------------
00012DE4                            Map_obj63:
00012DE4                            	include "_maps\obj63.asm"
00012DE4                            ; ---------------------------------------------------------------------------
00012DE4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012DE4                            ; ---------------------------------------------------------------------------
00012DE4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012DE8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012DEC 0000                       		dc.w byte_1269E-Map_obj63
00012DEE 01                         byte_12686:	dc.b 1
00012DEF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012DF4 01                         byte_1268C:	dc.b 1
00012DF5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012DFA 01                         byte_12692:	dc.b 1
00012DFB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012E00 01                         byte_12698:	dc.b 1
00012E01 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012E06 01                         byte_1269E:	dc.b 1
00012E07 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012E0C                            		even
00012E0C                            		even
00012E0C                            
00012E0C                            ; ===========================================================================
00012E0C                            ; ---------------------------------------------------------------------------
00012E0C                            ; Object 64 - bubbles (LZ)
00012E0C                            ; ---------------------------------------------------------------------------
00012E0C                            
00012E0C                            Obj64:					; XREF: Obj_Index
00012E0C 7000                       		moveq	#0,d0
00012E0E 1028 0024                  		move.b	$24(a0),d0
00012E12 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012E16 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012E1A                            ; ===========================================================================
00012E1A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012E1C 0000                       		dc.w Obj64_Animate-Obj64_Index
00012E1E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012E20 0000                       		dc.w Obj64_Display2-Obj64_Index
00012E22 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012E24 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E26                            ; ===========================================================================
00012E26                            
00012E26                            Obj64_Main:				; XREF: Obj64_Index
00012E26 5428 0024                  		addq.b	#2,$24(a0)
00012E2A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012E32 317C 8348 0002             		move.w	#$8348,2(a0)
00012E38 117C 0084 0001             		move.b	#$84,1(a0)
00012E3E 117C 0010 0019             		move.b	#$10,$19(a0)
00012E44 117C 0001 0018             		move.b	#1,$18(a0)
00012E4A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E4E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012E50 5028 0024                  		addq.b	#8,$24(a0)
00012E54 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012E58 1140 0032                  		move.b	d0,$32(a0)
00012E5C 1140 0033                  		move.b	d0,$33(a0)
00012E60 117C 0006 001C             		move.b	#6,$1C(a0)
00012E66 6000 0000                  		bra.w	Obj64_BblMaker
00012E6A                            ; ===========================================================================
00012E6A                            
00012E6A                            Obj64_Bubble:				; XREF: Obj64_Main
00012E6A 1140 001C                  		move.b	d0,$1C(a0)
00012E6E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012E74 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012E7A 4EB9 0000 28C6             		jsr	(RandomNumber).l
00012E80 1140 0026                  		move.b	d0,$26(a0)
00012E84                            
00012E84                            Obj64_Animate:				; XREF: Obj64_Index
00012E84 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E8A 4EB9 0000 AE7A             		jsr	AnimateSprite
00012E90 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012E96 6600                       		bne.s	Obj64_ChkWater
00012E98 117C 0001 002E             		move.b	#1,$2E(a0)
00012E9E                            
00012E9E                            Obj64_ChkWater:				; XREF: Obj64_Index
00012E9E 3038 F646                  		move.w	($FFFFF646).w,d0
00012EA2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012EA6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012EA8                            
00012EA8                            Obj64_Burst:				; XREF: Obj64_Wobble
00012EA8 117C 0006 0024             		move.b	#6,$24(a0)
00012EAE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012EB2 6000 0000                  		bra.w	Obj64_Display2
00012EB6                            ; ===========================================================================
00012EB6                            
00012EB6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012EB6 1028 0026                  		move.b	$26(a0),d0
00012EBA 5228 0026                  		addq.b	#1,$26(a0)
00012EBE 0240 007F                  		andi.w	#$7F,d0
00012EC2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012EC8 1031 0000                  		move.b	(a1,d0.w),d0
00012ECC 4880                       		ext.w	d0
00012ECE D068 0030                  		add.w	$30(a0),d0
00012ED2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012ED6 4A28 002E                  		tst.b	$2E(a0)
00012EDA 6700                       		beq.s	Obj64_Display
00012EDC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012EE0 6700                       		beq.s	Obj64_Display	; if not, branch
00012EE2                            
00012EE2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012EE6 303C 00AD                  		move.w	#$AD,d0
00012EEA 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012EF0 43F8 D000                  		lea	($FFFFD000).w,a1
00012EF4 4269 0010                  		clr.w	$10(a1)
00012EF8 4269 0012                  		clr.w	$12(a1)
00012EFC 4269 0014                  		clr.w	$14(a1)
00012F00 137C 0015 001C             		move.b	#$15,$1C(a1)
00012F06 337C 0023 003E             		move.w	#$23,$3E(a1)
00012F0C 137C 0000 003C             		move.b	#0,$3C(a1)
00012F12 08A9 0005 0022             		bclr	#5,$22(a1)
00012F18 08A9 0004 0022             		bclr	#4,$22(a1)
00012F1E 0829 0002 0022             		btst	#2,$22(a1)
00012F24 6700 FF82                  		beq.w	Obj64_Burst
00012F28 08A9 0002 0022             		bclr	#2,$22(a1)
00012F2E 137C 0013 0016             		move.b	#$13,$16(a1)
00012F34 137C 0009 0017             		move.b	#9,$17(a1)
00012F3A 5B69 000C                  		subq.w	#5,$C(a1)
00012F3E 6000 FF68                  		bra.w	Obj64_Burst
00012F42                            ; ===========================================================================
00012F42                            
00012F42                            Obj64_Display:				; XREF: Obj64_Wobble
00012F42 6100 AE18                  		bsr.w	SpeedToPos
00012F46 4A28 0001                  		tst.b	1(a0)
00012F4A 6A00                       		bpl.s	Obj64_Delete
00012F4C 4EFA AE34                  		jmp	DisplaySprite
00012F50                            ; ===========================================================================
00012F50                            
00012F50                            Obj64_Delete:
00012F50 4EFA AE6C                  		jmp	DeleteObject
00012F54                            ; ===========================================================================
00012F54                            
00012F54                            Obj64_Display2:				; XREF: Obj64_Index
00012F54 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F5A 4EB9 0000 AE7A             		jsr	AnimateSprite
00012F60 4A28 0001                  		tst.b	1(a0)
00012F64 6A00                       		bpl.s	Obj64_Delete2
00012F66 4EFA AE1A                  		jmp	DisplaySprite
00012F6A                            ; ===========================================================================
00012F6A                            
00012F6A                            Obj64_Delete2:
00012F6A 4EFA AE52                  		jmp	DeleteObject
00012F6E                            ; ===========================================================================
00012F6E                            
00012F6E                            Obj64_Delete3:				; XREF: Obj64_Index
00012F6E 6000 AE4E                  		bra.w	DeleteObject
00012F72                            ; ===========================================================================
00012F72                            
00012F72                            Obj64_BblMaker:				; XREF: Obj64_Index
00012F72 4A68 0036                  		tst.w	$36(a0)
00012F76 6600                       		bne.s	loc_12874
00012F78 3038 F646                  		move.w	($FFFFF646).w,d0
00012F7C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012F80 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012F84 4A28 0001                  		tst.b	1(a0)
00012F88 6A00 0000                  		bpl.w	Obj64_ChkDel
00012F8C 5368 0038                  		subq.w	#1,$38(a0)
00012F90 6A00 0000                  		bpl.w	loc_12914
00012F94 317C 0001 0036             		move.w	#1,$36(a0)
00012F9A                            
00012F9A                            loc_1283A:
00012F9A 4EB9 0000 28C6             		jsr	(RandomNumber).l
00012FA0 3200                       		move.w	d0,d1
00012FA2 0240 0007                  		andi.w	#7,d0
00012FA6 0C40 0006                  		cmpi.w	#6,d0
00012FAA 64EE                       		bcc.s	loc_1283A
00012FAC                            
00012FAC 1140 0034                  		move.b	d0,$34(a0)
00012FB0 0241 000C                  		andi.w	#$C,d1
00012FB4 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012FBA D2C1                       		adda.w	d1,a1
00012FBC 2149 003C                  		move.l	a1,$3C(a0)
00012FC0 5328 0032                  		subq.b	#1,$32(a0)
00012FC4 6A00                       		bpl.s	loc_12872
00012FC6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012FCC 08E8 0007 0036             		bset	#7,$36(a0)
00012FD2                            
00012FD2                            loc_12872:
00012FD2 6000                       		bra.s	loc_1287C
00012FD4                            ; ===========================================================================
00012FD4                            
00012FD4                            loc_12874:				; XREF: Obj64_BblMaker
00012FD4 5368 0038                  		subq.w	#1,$38(a0)
00012FD8 6A00 0000                  		bpl.w	loc_12914
00012FDC                            
00012FDC                            loc_1287C:
00012FDC 4EB9 0000 28C6             		jsr	(RandomNumber).l
00012FE2 0240 001F                  		andi.w	#$1F,d0
00012FE6 3140 0038                  		move.w	d0,$38(a0)
00012FEA 6100 B222                  		bsr.w	SingleObjLoad
00012FEE 6600                       		bne.s	loc_128F8
00012FF0 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012FF4 3368 0008 0008             		move.w	8(a0),8(a1)
00012FFA 4EB9 0000 28C6             		jsr	(RandomNumber).l
00013000 0240 000F                  		andi.w	#$F,d0
00013004 5140                       		subq.w	#8,d0
00013006 D169 0008                  		add.w	d0,8(a1)
0001300A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013010 7000                       		moveq	#0,d0
00013012 1028 0034                  		move.b	$34(a0),d0
00013016 2468 003C                  		movea.l	$3C(a0),a2
0001301A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013020 0828 0007 0036             		btst	#7,$36(a0)
00013026 6700                       		beq.s	loc_128F8
00013028 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001302E 0240 0003                  		andi.w	#3,d0
00013032 6600                       		bne.s	loc_128E4
00013034 08E8 0006 0036             		bset	#6,$36(a0)
0001303A 6600                       		bne.s	loc_128F8
0001303C 137C 0002 0028             		move.b	#2,$28(a1)
00013042                            
00013042                            loc_128E4:
00013042 4A28 0034                  		tst.b	$34(a0)
00013046 6600                       		bne.s	loc_128F8
00013048 08E8 0006 0036             		bset	#6,$36(a0)
0001304E 6600                       		bne.s	loc_128F8
00013050 137C 0002 0028             		move.b	#2,$28(a1)
00013056                            
00013056                            loc_128F8:
00013056 5328 0034                  		subq.b	#1,$34(a0)
0001305A 6A00                       		bpl.s	loc_12914
0001305C 4EB9 0000 28C6             		jsr	(RandomNumber).l
00013062 0240 007F                  		andi.w	#$7F,d0
00013066 0640 0080                  		addi.w	#$80,d0
0001306A D168 0038                  		add.w	d0,$38(a0)
0001306E 4268 0036                  		clr.w	$36(a0)
00013072                            
00013072                            loc_12914:
00013072 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013078 4EB9 0000 AE7A             		jsr	AnimateSprite
0001307E                            
0001307E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001307E 3028 0008                  		move.w	8(a0),d0
00013082 0240 FF80                  		andi.w	#$FF80,d0
00013086 3238 F700                  		move.w	($FFFFF700).w,d1
0001308A 0441 0080                  		subi.w	#$80,d1
0001308E 0241 FF80                  		andi.w	#$FF80,d1
00013092 9041                       		sub.w	d1,d0
00013094 0C40 0280                  		cmpi.w	#$280,d0
00013098 6200 AD24                  		bhi.w	DeleteObject
0001309C 3038 F646                  		move.w	($FFFFF646).w,d0
000130A0 B068 000C                  		cmp.w	$C(a0),d0
000130A4 6500 ACDC                  		bcs.w	DisplaySprite
000130A8 4E75                       		rts	
000130AA                            ; ===========================================================================
000130AA                            ; bubble production sequence
000130AA                            
000130AA                            ; 0 = small bubble, 1 =	large bubble
000130AA                            
000130AA 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000130BC                            
000130BC                            ; ===========================================================================
000130BC                            
000130BC                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000130BC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000130C0 6B00                       		bmi.s	loc_12998
000130C2 43F8 D000                  		lea	($FFFFD000).w,a1
000130C6 3029 0008                  		move.w	8(a1),d0
000130CA 3228 0008                  		move.w	8(a0),d1
000130CE 0441 0010                  		subi.w	#$10,d1
000130D2 B240                       		cmp.w	d0,d1
000130D4 6400                       		bcc.s	loc_12998
000130D6 0641 0020                  		addi.w	#$20,d1
000130DA B240                       		cmp.w	d0,d1
000130DC 6500                       		bcs.s	loc_12998
000130DE 3029 000C                  		move.w	$C(a1),d0
000130E2 3228 000C                  		move.w	$C(a0),d1
000130E6 B240                       		cmp.w	d0,d1
000130E8 6400                       		bcc.s	loc_12998
000130EA 0641 0010                  		addi.w	#$10,d1
000130EE B240                       		cmp.w	d0,d1
000130F0 6500                       		bcs.s	loc_12998
000130F2 7001                       		moveq	#1,d0
000130F4 4E75                       		rts	
000130F6                            ; ===========================================================================
000130F6                            
000130F6                            loc_12998:
000130F6 7000                       		moveq	#0,d0
000130F8 4E75                       		rts	
000130FA                            ; ===========================================================================
000130FA                            Ani_obj64:
000130FA                            	include "_anim\obj64.asm"
000130FA                            ; ---------------------------------------------------------------------------
000130FA                            ; Animation script - bubbles (LZ)
000130FA                            ; ---------------------------------------------------------------------------
000130FA 0000                       		dc.w byte_129AA-Ani_obj64
000130FC 0000                       		dc.w byte_129B0-Ani_obj64
000130FE 0000                       		dc.w byte_129B6-Ani_obj64
00013100 0000                       		dc.w byte_129BE-Ani_obj64
00013102 0000                       		dc.w byte_129BE-Ani_obj64
00013104 0000                       		dc.w byte_129C0-Ani_obj64
00013106 0000                       		dc.w byte_129C6-Ani_obj64
00013108 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001310E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013114 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001311C 04FC                       byte_129BE:	dc.b 4,	$FC
0001311E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013124 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001312A 00                         		even
0001312A 00                         		even
0001312A                            
0001312A                            ; ---------------------------------------------------------------------------
0001312A                            ; Sprite mappings - bubbles (LZ)
0001312A                            ; ---------------------------------------------------------------------------
0001312A                            Map_obj64:
0001312A                            	include "_maps\obj64.asm"
0001312A                            ; ---------------------------------------------------------------------------
0001312A                            ; Sprite mappings - bubbles (LZ)
0001312A                            ; ---------------------------------------------------------------------------
0001312A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001312E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013132 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013136 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001313A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001313E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013142 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013146 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001314A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001314E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013152 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013156 0000                       		dc.w byte_12A9C-Map_obj64
00013158 01                         byte_129FA:	dc.b 1
00013159 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001315E 01                         byte_12A00:	dc.b 1
0001315F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013164 01                         byte_12A06:	dc.b 1
00013165 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001316A 01                         byte_12A0C:	dc.b 1
0001316B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013170 01                         byte_12A12:	dc.b 1
00013171 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013176 01                         byte_12A18:	dc.b 1
00013177 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001317C 01                         byte_12A1E:	dc.b 1
0001317D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013182 04                         byte_12A24:	dc.b 4
00013183 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013188 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001318D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013192 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013197 04                         byte_12A39:	dc.b 4
00013198 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001319D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000131A2 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000131A7 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000131AC 01                         byte_12A4E:	dc.b 1
000131AD F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000131B2 01                         byte_12A54:	dc.b 1
000131B3 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000131B8 01                         byte_12A5A:	dc.b 1
000131B9 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000131BE 01                         byte_12A60:	dc.b 1
000131BF F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000131C4 01                         byte_12A66:	dc.b 1
000131C5 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000131CA 01                         byte_12A6C:	dc.b 1
000131CB F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000131D0 01                         byte_12A72:	dc.b 1
000131D1 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000131D6 01                         byte_12A78:	dc.b 1
000131D7 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000131DC 01                         byte_12A7E:	dc.b 1
000131DD F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000131E2 01                         byte_12A84:	dc.b 1
000131E3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000131E8 01                         byte_12A8A:	dc.b 1
000131E9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000131EE 01                         byte_12A90:	dc.b 1
000131EF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000131F4 01                         byte_12A96:	dc.b 1
000131F5 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000131FA 00                         byte_12A9C:	dc.b 0
000131FC 00                         		even
000131FC 00                         		even
000131FC                            
000131FC                            ; ===========================================================================
000131FC                            ; ---------------------------------------------------------------------------
000131FC                            ; Object 65 - waterfalls (LZ)
000131FC                            ; ---------------------------------------------------------------------------
000131FC                            
000131FC                            Obj65:					; XREF: Obj_Index
000131FC 7000                       		moveq	#0,d0
000131FE 1028 0024                  		move.b	$24(a0),d0
00013202 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013206 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001320A                            ; ===========================================================================
0001320A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001320C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001320E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013210 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013212 0000                       		dc.w loc_12B36-Obj65_Index
00013214                            ; ===========================================================================
00013214                            
00013214                            Obj65_Main:				; XREF: Obj65_Index
00013214 5828 0024                  		addq.b	#4,$24(a0)
00013218 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013220 317C 4259 0002             		move.w	#$4259,2(a0)
00013226 0028 0004 0001             		ori.b	#4,1(a0)
0001322C 117C 0018 0019             		move.b	#$18,$19(a0)
00013232 117C 0001 0018             		move.b	#1,$18(a0)
00013238 1028 0028                  		move.b	$28(a0),d0	; get object type
0001323C 6A00                       		bpl.s	loc_12AE6
0001323E 08E8 0007 0002             		bset	#7,2(a0)
00013244                            
00013244                            loc_12AE6:
00013244 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013248 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001324C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013250 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013252 4228 0018                  		clr.b	$18(a0)
00013256 5528 0024                  		subq.b	#2,$24(a0)
0001325A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013260 6700                       		beq.s	loc_12B0A	; if not, branch
00013262 117C 0006 0024             		move.b	#6,$24(a0)
00013268                            
00013268                            loc_12B0A:
00013268 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001326E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013270 117C 0008 0024             		move.b	#8,$24(a0)
00013276                            
00013276                            Obj65_Animate:				; XREF: Obj65_Index
00013276 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001327C 4EB9 0000 AE7A             		jsr	AnimateSprite
00013282                            
00013282                            Obj65_ChkDel:				; XREF: Obj65_Index
00013282 6000 CBA8                  		bra.w	MarkObjGone
00013286                            ; ===========================================================================
00013286                            
00013286                            Obj65_FixHeight:			; XREF: Obj65_Index
00013286 3038 F646                  		move.w	($FFFFF646).w,d0
0001328A 0440 0010                  		subi.w	#$10,d0
0001328E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013292 60E2                       		bra.s	Obj65_Animate
00013294                            ; ===========================================================================
00013294                            
00013294                            loc_12B36:				; XREF: Obj65_Index
00013294 08A8 0007 0002             		bclr	#7,2(a0)
0001329A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000132A0 6600                       		bne.s	Obj65_Animate2
000132A2 08E8 0007 0002             		bset	#7,2(a0)
000132A8                            
000132A8                            Obj65_Animate2:
000132A8 60CC                       		bra.s	Obj65_Animate
000132AA                            ; ===========================================================================
000132AA                            Ani_obj65:
000132AA                            	include "_anim\obj65.asm"
000132AA                            ; ---------------------------------------------------------------------------
000132AA                            ; Animation script - waterfall (LZ)
000132AA                            ; ---------------------------------------------------------------------------
000132AA 0000                       		dc.w byte_12B4E-Ani_obj65
000132AC 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000132B2 00                         		even
000132B2 00                         		even
000132B2                            
000132B2                            ; ---------------------------------------------------------------------------
000132B2                            ; Sprite mappings - waterfalls (LZ)
000132B2                            ; ---------------------------------------------------------------------------
000132B2                            Map_obj65:
000132B2                            	include "_maps\obj65.asm"
000132B2                            ; ---------------------------------------------------------------------------
000132B2                            ; Sprite mappings - waterfalls (LZ)
000132B2                            ; ---------------------------------------------------------------------------
000132B2 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000132B6 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000132BA 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000132BE 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000132C2 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000132C6 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000132CA 01                         byte_12B6C:	dc.b 1
000132CB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000132D0 02                         byte_12B72:	dc.b 2
000132D1 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000132D6 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000132DB 02                         byte_12B7D:	dc.b 2
000132DC F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132E1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132E6 01                         byte_12B88:	dc.b 1
000132E7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000132EC 02                         byte_12B8E:	dc.b 2
000132ED F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000132F2 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000132F7 01                         byte_12B99:	dc.b 1
000132F8 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000132FD 01                         byte_12B9F:	dc.b 1
000132FE F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013303 01                         byte_12BA5:	dc.b 1
00013304 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013309 02                         byte_12BAB:	dc.b 2
0001330A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001330F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013314 02                         byte_12BB6:	dc.b 2
00013315 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001331A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001331F 02                         byte_12BC1:	dc.b 2
00013320 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013325 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001332A 02                         byte_12BCC:	dc.b 2
0001332B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013330 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013336 00                         		even
00013336 00                         		even
00013336                            
00013336                            ; ===========================================================================
00013336                            ; ---------------------------------------------------------------------------
00013336                            ; Object 01 - Sonic
00013336                            ; ---------------------------------------------------------------------------
00013336                            
00013336                            Obj01:					; XREF: Obj_Index
00013336 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001333A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001333C 4EF9 0000 0000             		jmp	DebugMode
00013342                            ; ===========================================================================
00013342                            
00013342                            Obj01_Normal:
00013342 7000                       		moveq	#0,d0
00013344 1028 0024                  		move.b	$24(a0),d0
00013348 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001334C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013350                            ; ===========================================================================
00013350 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013352 0000                       		dc.w Obj01_Control-Obj01_Index
00013354 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013356 0000                       		dc.w Obj01_Death-Obj01_Index
00013358 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001335A                            ; ===========================================================================
0001335A                            
0001335A                            Obj01_Main:				; XREF: Obj01_Index
0001335A 5428 0024                  		addq.b	#2,$24(a0)
0001335E 117C 0013 0016             		move.b	#$13,$16(a0)
00013364 117C 0009 0017             		move.b	#9,$17(a0)
0001336A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013372 317C 0780 0002             		move.w	#$780,2(a0)
00013378 117C 0002 0018             		move.b	#2,$18(a0)
0001337E 117C 0018 0019             		move.b	#$18,$19(a0)
00013384 117C 0004 0001             		move.b	#4,1(a0)
0001338A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013390 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013396 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001339C                            
0001339C                            Obj01_Control:				; XREF: Obj01_Index
0001339C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000133A0 6700                       		beq.s	loc_12C58	; if not, branch
000133A2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000133A8 6700                       		beq.s	loc_12C58	; if not, branch
000133AA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000133B0 4238 F7CC                  		clr.b	($FFFFF7CC).w
000133B4 4E75                       		rts	
000133B6                            ; ===========================================================================
000133B6                            
000133B6                            loc_12C58:
000133B6 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000133BA 6600                       		bne.s	loc_12C64	; if yes, branch
000133BC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000133C2                            
000133C2                            loc_12C64:
000133C2 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000133C8 6600                       		bne.s	loc_12C7E	; if yes, branch
000133CA 7000                       		moveq	#0,d0
000133CC 1028 0022                  		move.b	$22(a0),d0
000133D0 0240 0006                  		andi.w	#6,d0
000133D4 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000133D8 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000133DC                            
000133DC                            loc_12C7E:
000133DC 6100                       		bsr.s	Sonic_Display
000133DE 6100 0000                  		bsr.w	Sonic_RecordPos
000133E2 6100 0000                  		bsr.w	Sonic_Water
000133E6 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000133EC 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000133F2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000133F6 6700                       		beq.s	loc_12CA6
000133F8 4A28 001C                  		tst.b	$1C(a0)
000133FC 6600                       		bne.s	loc_12CA6
000133FE 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013404                            
00013404                            loc_12CA6:
00013404 6100 0000                  		bsr.w	Sonic_Animate
00013408 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001340C 6B00                       		bmi.s	loc_12CB6
0001340E 4EB9 0000 0000             		jsr	TouchResponse
00013414                            
00013414                            loc_12CB6:
00013414 6100 0000                  		bsr.w	Sonic_Loops
00013418 6100 0000                  		bsr.w	LoadSonicDynPLC
0001341C 4E75                       		rts	
0001341E                            ; ===========================================================================
0001341E 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013420 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013422 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013424 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013426                            ; ---------------------------------------------------------------------------
00013426                            ; Music	to play	after invincibility wears off
00013426                            ; ---------------------------------------------------------------------------
00013426                            MusicList2:	incbin	misc\muslist2.bin
0001342C                            		even
0001342C                            ; ===========================================================================
0001342C                            
0001342C                            Sonic_Display:				; XREF: loc_12C7E
0001342C 3028 0030                  		move.w	$30(a0),d0
00013430 6700                       		beq.s	Obj01_Display
00013432 5368 0030                  		subq.w	#1,$30(a0)
00013436 E648                       		lsr.w	#3,d0
00013438 6400                       		bcc.s	Obj01_ChkInvin
0001343A                            
0001343A                            Obj01_Display:
0001343A 4EBA A946                  		jsr	DisplaySprite
0001343E                            
0001343E                            Obj01_ChkInvin:
0001343E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013442 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00013444 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013448 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001344A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001344E 6600                       		bne.s	Obj01_ChkShoes
00013450 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013454 6600                       		bne.s	Obj01_RmvInvin
00013456 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001345C 6500                       		bcs.s	Obj01_RmvInvin
0001345E 7000                       		moveq	#0,d0
00013460 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013464 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
0001346A 6600                       		bne.s	Obj01_PlayMusic
0001346C 7005                       		moveq	#5,d0		; play SBZ music
0001346E                            
0001346E                            Obj01_PlayMusic:
0001346E 43F9 0001 3426             		lea	(MusicList2).l,a1
00013474 1031 0000                  		move.b	(a1,d0.w),d0
00013478 4EB9 0000 125C             		jsr	(PlaySound).l	; play normal music
0001347E                            
0001347E                            Obj01_RmvInvin:
0001347E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013484                            
00013484                            Obj01_ChkShoes:
00013484 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013488 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001348A 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001348E 6700                       		beq.s	Obj01_ExitChk
00013490 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013494 6600                       		bne.s	Obj01_ExitChk
00013496 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001349C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000134A2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000134A8 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000134AE 303C 00E3                  		move.w	#$E3,d0
000134B2 4EF9 0000 125C             		jmp	(PlaySound).l	; run music at normal speed
000134B8                            ; ===========================================================================
000134B8                            
000134B8                            Obj01_ExitChk:
000134B8 4E75                       		rts	
000134BA                            
000134BA                            ; ---------------------------------------------------------------------------
000134BA                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000134BA                            ; ---------------------------------------------------------------------------
000134BA                            
000134BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134BA                            
000134BA                            
000134BA                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000134BA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000134BE 43F8 CB00                  		lea	($FFFFCB00).w,a1
000134C2 43F1 0000                  		lea	(a1,d0.w),a1
000134C6 32E8 0008                  		move.w	8(a0),(a1)+
000134CA 32E8 000C                  		move.w	$C(a0),(a1)+
000134CE 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000134D2 4E75                       		rts	
000134D4                            ; End of function Sonic_RecordPos
000134D4                            
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            ; Subroutine for Sonic when he's underwater
000134D4                            ; ---------------------------------------------------------------------------
000134D4                            
000134D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134D4                            
000134D4                            
000134D4                            Sonic_Water:				; XREF: loc_12C7E
000134D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000134DA 6700                       		beq.s	Obj01_InWater	; if yes, branch
000134DC                            
000134DC                            locret_12D80:
000134DC 4E75                       		rts	
000134DE                            ; ===========================================================================
000134DE                            
000134DE                            Obj01_InWater:
000134DE 3038 F646                  		move.w	($FFFFF646).w,d0
000134E2 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000134E6 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000134E8 08E8 0006 0022             		bset	#6,$22(a0)
000134EE 66EC                       		bne.s	locret_12D80
000134F0 6100 0000                  		bsr.w	ResumeMusic
000134F4 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000134FA 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013500 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013506 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001350C 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013512 E0E8 0010                  		asr	$10(a0)
00013516 E0E8 0012                  		asr	$12(a0)
0001351A E0E8 0012                  		asr	$12(a0)
0001351E 67BC                       		beq.s	locret_12D80
00013520 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013526 303C 00AA                  		move.w	#$AA,d0
0001352A 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play splash sound
00013530                            ; ===========================================================================
00013530                            
00013530                            Obj01_OutWater:
00013530 08A8 0006 0022             		bclr	#6,$22(a0)
00013536 67A4                       		beq.s	locret_12D80
00013538 6100 0000                  		bsr.w	ResumeMusic
0001353C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013542 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013548 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001354E E1E8 0012                  		asl	$12(a0)
00013552 6700 FF88                  		beq.w	locret_12D80
00013556 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001355C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013562 6E00                       		bgt.s	loc_12E0E
00013564 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001356A                            
0001356A                            loc_12E0E:
0001356A 303C 00AA                  		move.w	#$AA,d0
0001356E 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play splash sound
00013574                            ; End of function Sonic_Water
00013574                            
00013574                            ; ===========================================================================
00013574                            ; ---------------------------------------------------------------------------
00013574                            ; Modes	for controlling	Sonic
00013574                            ; ---------------------------------------------------------------------------
00013574                            
00013574                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013574 6100 0000                  		bsr.w	Sonic_Jump
00013578 6100 0000                  		bsr.w	Sonic_SlopeResist
0001357C 6100 0000                  		bsr.w	Sonic_Move
00013580 6100 0000                  		bsr.w	Sonic_Roll
00013584 6100 0000                  		bsr.w	Sonic_LevelBound
00013588 4EBA A7D2                  		jsr	SpeedToPos
0001358C 6100 0000                  		bsr.w	Sonic_AnglePos
00013590 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013594 4E75                       		rts	
00013596                            ; ===========================================================================
00013596                            
00013596                            Obj01_MdJump:				; XREF: Obj01_Modes
00013596 6100 0000                  		bsr.w	Sonic_JumpHeight
0001359A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001359E 6100 0000                  		bsr.w	Sonic_LevelBound
000135A2 4EBA A78C                  		jsr	ObjectFall
000135A6 0828 0006 0022             		btst	#6,$22(a0)
000135AC 6700                       		beq.s	loc_12E5C
000135AE 0468 0028 0012             		subi.w	#$28,$12(a0)
000135B4                            
000135B4                            loc_12E5C:
000135B4 6100 0000                  		bsr.w	Sonic_JumpAngle
000135B8 6100 0000                  		bsr.w	Sonic_Floor
000135BC 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
000135C2 6600                       		bne.s	@addtimer
000135C4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000135CA 6300                       		bls.s	@done
000135CC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
000135D2 6700                       		beq.s	@done
000135D4 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
000135DA 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000135E0 6000                       		bra.s	@done
000135E2                            
000135E2                            
000135E2                            	@addtimer:
000135E2 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
000135E6 4A38 D012                  		tst.b	($FFFFD012).w
000135EA 6A00                       		bpl.s	@done
000135EC 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
000135F0                            
000135F0                            	@done:
000135F0 4E75                       		rts	
000135F2                            ; ===========================================================================
000135F2                            
000135F2                            Obj01_MdRoll:				; XREF: Obj01_Modes
000135F2 6100 0000                  		bsr.w	Sonic_Jump
000135F6 6100 0000                  		bsr.w	Sonic_RollRepel
000135FA 6100 0000                  		bsr.w	Sonic_RollSpeed
000135FE 6100 0000                  		bsr.w	Sonic_LevelBound
00013602 4EBA A758                  		jsr	SpeedToPos
00013606 6100 0000                  		bsr.w	Sonic_AnglePos
0001360A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001360E 4E75                       		rts	
00013610                            ; ===========================================================================
00013610                            
00013610                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013610 6100 0000                  		bsr.w	Sonic_JumpHeight
00013614 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013618 6100 0000                  		bsr.w	Sonic_LevelBound
0001361C 4EBA A712                  		jsr	ObjectFall
00013620 0828 0006 0022             		btst	#6,$22(a0)
00013626 6700                       		beq.s	loc_12EA6
00013628 0468 0028 0012             		subi.w	#$28,$12(a0)
0001362E                            
0001362E                            loc_12EA6:
0001362E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013632 6100 0000                  		bsr.w	Sonic_Floor
00013636 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
0001363C 6600                       		bne.s	@addtimer
0001363E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00013644 6300                       		bls.s	@done
00013646 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
0001364C 6700                       		beq.s	@done
0001364E 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00013654 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001365A 6000                       		bra.s	@done
0001365C                            
0001365C                            
0001365C                            	@addtimer:
0001365C 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00013660 4A38 D012                  		tst.b	($FFFFD012).w
00013664 6A00                       		bpl.s	@done
00013666 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001366A                            
0001366A                            	@done:
0001366A 4E75                       		rts	
0001366C                            ; ---------------------------------------------------------------------------
0001366C                            ; Subroutine to	make Sonic walk/run
0001366C                            ; ---------------------------------------------------------------------------
0001366C                            
0001366C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001366C                            
0001366C                            
0001366C                            Sonic_Move:				; XREF: Obj01_MdNormal
0001366C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013670 3A38 F762                  		move.w	($FFFFF762).w,d5
00013674 3838 F764                  		move.w	($FFFFF764).w,d4
00013678 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001367C 6600 0000                  		bne.w	loc_12FEE
00013680 4A68 003E                  		tst.w	$3E(a0)
00013684 6600 0000                  		bne.w	Obj01_ResetScr
00013688 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001368E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013690 6100 0000                  		bsr.w	Sonic_MoveLeft
00013694                            
00013694                            Obj01_NotLeft:
00013694 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001369A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001369C 6100 0000                  		bsr.w	Sonic_MoveRight
000136A0                            
000136A0                            Obj01_NotRight:
000136A0 1028 0026                  		move.b	$26(a0),d0
000136A4 0600 0020                  		addi.b	#$20,d0
000136A8 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000136AC 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000136B0 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000136B4 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000136B8 08A8 0005 0022             		bclr	#5,$22(a0)
000136BE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000136C4 0828 0003 0022             		btst	#3,$22(a0)
000136CA 6700                       		beq.s	Sonic_Balance
000136CC 7000                       		moveq	#0,d0
000136CE 1028 003D                  		move.b	$3D(a0),d0
000136D2 ED48                       		lsl.w	#6,d0
000136D4 43F8 D000                  		lea	($FFFFD000).w,a1
000136D8 43F1 0000                  		lea	(a1,d0.w),a1
000136DC 4A29 0022                  		tst.b	$22(a1)
000136E0 6B00                       		bmi.s	Sonic_LookUp
000136E2 7200                       		moveq	#0,d1
000136E4 1229 0019                  		move.b	$19(a1),d1
000136E8 3401                       		move.w	d1,d2
000136EA D442                       		add.w	d2,d2
000136EC 5942                       		subq.w	#4,d2
000136EE D268 0008                  		add.w	8(a0),d1
000136F2 9269 0008                  		sub.w	8(a1),d1
000136F6 0C41 0004                  		cmpi.w	#4,d1
000136FA 6D00                       		blt.s	loc_12F6A
000136FC B242                       		cmp.w	d2,d1
000136FE 6C00                       		bge.s	loc_12F5A
00013700 6000                       		bra.s	Sonic_LookUp
00013702                            ; ===========================================================================
00013702                            
00013702                            Sonic_Balance:
00013702 4EB9 0000 0000             		jsr	ObjHitFloor
00013708 0C41 000C                  		cmpi.w	#$C,d1
0001370C 6D00                       		blt.s	Sonic_LookUp
0001370E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013714 6600                       		bne.s	loc_12F62
00013716                            
00013716                            loc_12F5A:
00013716 08A8 0000 0022             		bclr	#0,$22(a0)
0001371C 6000                       		bra.s	loc_12F70
0001371E                            ; ===========================================================================
0001371E                            
0001371E                            loc_12F62:
0001371E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013724 6600                       		bne.s	Sonic_LookUp
00013726                            
00013726                            loc_12F6A:
00013726 08E8 0000 0022             		bset	#0,$22(a0)
0001372C                            
0001372C                            loc_12F70:
0001372C 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013732 6000                       		bra.s	Obj01_ResetScr
00013734                            ; ===========================================================================
00013734                            
00013734                            Sonic_LookUp:
00013734 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001373A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001373C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013742 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013748 6700                       		beq.s	loc_12FC2
0001374A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001374E 6000                       		bra.s	loc_12FC2
00013750                            ; ===========================================================================
00013750                            
00013750                            Sonic_Duck:
00013750 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013756 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013758 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001375E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013764 6700                       		beq.s	loc_12FC2
00013766 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001376A 6000                       		bra.s	loc_12FC2
0001376C                            ; ===========================================================================
0001376C                            
0001376C                            Obj01_ResetScr:
0001376C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013772 6700                       		beq.s	loc_12FC2	; if yes, branch
00013774 6400                       		bcc.s	loc_12FBE
00013776 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001377A                            
0001377A                            loc_12FBE:
0001377A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001377E                            
0001377E                            loc_12FC2:
0001377E 1038 F602                  		move.b	($FFFFF602).w,d0
00013782 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013786 6600                       		bne.s	loc_12FEE	; if yes, branch
00013788 3028 0014                  		move.w	$14(a0),d0
0001378C 6700                       		beq.s	loc_12FEE
0001378E 6B00                       		bmi.s	loc_12FE2
00013790 9045                       		sub.w	d5,d0
00013792 6400                       		bcc.s	loc_12FDC
00013794 303C 0000                  		move.w	#0,d0
00013798                            
00013798                            loc_12FDC:
00013798 3140 0014                  		move.w	d0,$14(a0)
0001379C 6000                       		bra.s	loc_12FEE
0001379E                            ; ===========================================================================
0001379E                            
0001379E                            loc_12FE2:
0001379E D045                       		add.w	d5,d0
000137A0 6400                       		bcc.s	loc_12FEA
000137A2 303C 0000                  		move.w	#0,d0
000137A6                            
000137A6                            loc_12FEA:
000137A6 3140 0014                  		move.w	d0,$14(a0)
000137AA                            
000137AA                            loc_12FEE:
000137AA 1028 0026                  		move.b	$26(a0),d0
000137AE 4EB9 0000 28EC             		jsr	(CalcSine).l
000137B4 C3E8 0014                  		muls.w	$14(a0),d1
000137B8 E081                       		asr.l	#8,d1
000137BA 3141 0010                  		move.w	d1,$10(a0)
000137BE C1E8 0014                  		muls.w	$14(a0),d0
000137C2 E080                       		asr.l	#8,d0
000137C4 3140 0012                  		move.w	d0,$12(a0)
000137C8                            
000137C8                            loc_1300C:
000137C8 1028 0026                  		move.b	$26(a0),d0
000137CC 0600 0040                  		addi.b	#$40,d0
000137D0 6B00                       		bmi.s	locret_1307C
000137D2 123C 0040                  		move.b	#$40,d1
000137D6 4A68 0014                  		tst.w	$14(a0)
000137DA 6700                       		beq.s	locret_1307C
000137DC 6B00                       		bmi.s	loc_13024
000137DE 4441                       		neg.w	d1
000137E0                            
000137E0                            loc_13024:
000137E0 1028 0026                  		move.b	$26(a0),d0
000137E4 D001                       		add.b	d1,d0
000137E6 3F00                       		move.w	d0,-(sp)
000137E8 6100 0000                  		bsr.w	Sonic_WalkSpeed
000137EC 301F                       		move.w	(sp)+,d0
000137EE 4A41                       		tst.w	d1
000137F0 6A00                       		bpl.s	locret_1307C
000137F2 E141                       		asl.w	#8,d1
000137F4 0600 0020                  		addi.b	#$20,d0
000137F8 0200 00C0                  		andi.b	#$C0,d0
000137FC 6700                       		beq.s	loc_13078
000137FE 0C00 0040                  		cmpi.b	#$40,d0
00013802 6700                       		beq.s	loc_13066
00013804 0C00 0080                  		cmpi.b	#$80,d0
00013808 6700                       		beq.s	loc_13060
0001380A D368 0010                  		add.w	d1,$10(a0)
0001380E 08E8 0005 0022             		bset	#5,$22(a0)
00013814 317C 0000 0014             		move.w	#0,$14(a0)
0001381A 4E75                       		rts	
0001381C                            ; ===========================================================================
0001381C                            
0001381C                            loc_13060:
0001381C 9368 0012                  		sub.w	d1,$12(a0)
00013820 4E75                       		rts	
00013822                            ; ===========================================================================
00013822                            
00013822                            loc_13066:
00013822 9368 0010                  		sub.w	d1,$10(a0)
00013826 08E8 0005 0022             		bset	#5,$22(a0)
0001382C 317C 0000 0014             		move.w	#0,$14(a0)
00013832 4E75                       		rts	
00013834                            ; ===========================================================================
00013834                            
00013834                            loc_13078:
00013834 D368 0012                  		add.w	d1,$12(a0)
00013838                            
00013838                            locret_1307C:
00013838 4E75                       		rts	
0001383A                            ; End of function Sonic_Move
0001383A                            
0001383A                            
0001383A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001383A                            
0001383A                            
0001383A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001383A 3028 0014                  		move.w	$14(a0),d0
0001383E 6700                       		beq.s	loc_13086
00013840 6A00                       		bpl.s	loc_130B2
00013842                            
00013842                            loc_13086:
00013842 08E8 0000 0022             		bset	#0,$22(a0)
00013848 6600                       		bne.s	loc_1309A
0001384A 08A8 0005 0022             		bclr	#5,$22(a0)
00013850 117C 0001 001D             		move.b	#1,$1D(a0)
00013856                            
00013856                            loc_1309A:
00013856 9045                       		sub.w	d5,d0
00013858 3206                       		move.w	d6,d1
0001385A 4441                       		neg.w	d1
0001385C B041                       		cmp.w	d1,d0
0001385E 6E00                       		bgt.s	loc_130A6
00013860 3001                       		move.w	d1,d0
00013862                            
00013862                            loc_130A6:
00013862 3140 0014                  		move.w	d0,$14(a0)
00013866 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001386C 4E75                       		rts	
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001386E 9044                       		sub.w	d4,d0
00013870 6400                       		bcc.s	loc_130BA
00013872 303C FF80                  		move.w	#-$80,d0
00013876                            
00013876                            loc_130BA:
00013876 3140 0014                  		move.w	d0,$14(a0)
0001387A 1028 0026                  		move.b	$26(a0),d0
0001387E 0600 0020                  		addi.b	#$20,d0
00013882 0200 00C0                  		andi.b	#$C0,d0
00013886 6600                       		bne.s	locret_130E8
00013888 0C40 0400                  		cmpi.w	#$400,d0
0001388C 6D00                       		blt.s	locret_130E8
0001388E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013894 08A8 0000 0022             		bclr	#0,$22(a0)
0001389A 303C 00A4                  		move.w	#$A4,d0
0001389E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stopping sound
000138A4                            
000138A4                            locret_130E8:
000138A4 4E75                       		rts	
000138A6                            ; End of function Sonic_MoveLeft
000138A6                            
000138A6                            
000138A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138A6                            
000138A6                            
000138A6                            Sonic_MoveRight:			; XREF: Sonic_Move
000138A6 3028 0014                  		move.w	$14(a0),d0
000138AA 6B00                       		bmi.s	loc_13118
000138AC 08A8 0000 0022             		bclr	#0,$22(a0)
000138B2 6700                       		beq.s	loc_13104
000138B4 08A8 0005 0022             		bclr	#5,$22(a0)
000138BA 117C 0001 001D             		move.b	#1,$1D(a0)
000138C0                            
000138C0                            loc_13104:
000138C0 D045                       		add.w	d5,d0
000138C2 B046                       		cmp.w	d6,d0
000138C4 6D00                       		blt.s	loc_1310C
000138C6 3006                       		move.w	d6,d0
000138C8                            
000138C8                            loc_1310C:
000138C8 3140 0014                  		move.w	d0,$14(a0)
000138CC 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138D2 4E75                       		rts	
000138D4                            ; ===========================================================================
000138D4                            
000138D4                            loc_13118:				; XREF: Sonic_MoveRight
000138D4 D044                       		add.w	d4,d0
000138D6 6400                       		bcc.s	loc_13120
000138D8 303C 0080                  		move.w	#$80,d0
000138DC                            
000138DC                            loc_13120:
000138DC 3140 0014                  		move.w	d0,$14(a0)
000138E0 1028 0026                  		move.b	$26(a0),d0
000138E4 0600 0020                  		addi.b	#$20,d0
000138E8 0200 00C0                  		andi.b	#$C0,d0
000138EC 6600                       		bne.s	locret_1314E
000138EE 0C40 FC00                  		cmpi.w	#-$400,d0
000138F2 6E00                       		bgt.s	locret_1314E
000138F4 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138FA 08E8 0000 0022             		bset	#0,$22(a0)
00013900 303C 00A4                  		move.w	#$A4,d0
00013904 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stopping sound
0001390A                            
0001390A                            locret_1314E:
0001390A 4E75                       		rts	
0001390C                            ; End of function Sonic_MoveRight
0001390C                            
0001390C                            ; ---------------------------------------------------------------------------
0001390C                            ; Subroutine to	change Sonic's speed as he rolls
0001390C                            ; ---------------------------------------------------------------------------
0001390C                            
0001390C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001390C                            
0001390C                            
0001390C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001390C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013910 E346                       		asl.w	#1,d6
00013912 3A38 F762                  		move.w	($FFFFF762).w,d5
00013916 E245                       		asr.w	#1,d5
00013918 3838 F764                  		move.w	($FFFFF764).w,d4
0001391C E444                       		asr.w	#2,d4
0001391E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013922 6600 0000                  		bne.w	loc_131CC
00013926 4A68 003E                  		tst.w	$3E(a0)
0001392A 6600                       		bne.s	loc_13188
0001392C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013932 6700                       		beq.s	loc_1317C	; if not, branch
00013934 6100 0000                  		bsr.w	Sonic_RollLeft
00013938                            
00013938                            loc_1317C:
00013938 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001393E 6700                       		beq.s	loc_13188	; if not, branch
00013940 6100 0000                  		bsr.w	Sonic_RollRight
00013944                            
00013944                            loc_13188:
00013944 3028 0014                  		move.w	$14(a0),d0
00013948 6700                       		beq.s	loc_131AA
0001394A 6B00                       		bmi.s	loc_1319E
0001394C 9045                       		sub.w	d5,d0
0001394E 6400                       		bcc.s	loc_13198
00013950 303C 0000                  		move.w	#0,d0
00013954                            
00013954                            loc_13198:
00013954 3140 0014                  		move.w	d0,$14(a0)
00013958 6000                       		bra.s	loc_131AA
0001395A                            ; ===========================================================================
0001395A                            
0001395A                            loc_1319E:				; XREF: Sonic_RollSpeed
0001395A D045                       		add.w	d5,d0
0001395C 6400                       		bcc.s	loc_131A6
0001395E 303C 0000                  		move.w	#0,d0
00013962                            
00013962                            loc_131A6:
00013962 3140 0014                  		move.w	d0,$14(a0)
00013966                            
00013966                            loc_131AA:
00013966 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001396A 6600                       		bne.s	loc_131CC	; if yes, branch
0001396C                            
0001396C                            	@NoReset:
0001396C 08A8 0002 0022             		bclr	#2,$22(a0)
00013972 117C 0013 0016             		move.b	#$13,$16(a0)
00013978 117C 0009 0017             		move.b	#9,$17(a0)
0001397E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013984 5B68 000C                  		subq.w	#5,$C(a0)
00013988                            
00013988                            loc_131CC:
00013988 1028 0026                  		move.b	$26(a0),d0
0001398C 4EB9 0000 28EC             		jsr	(CalcSine).l
00013992 C1E8 0014                  		muls.w	$14(a0),d0
00013996 E080                       		asr.l	#8,d0
00013998 3140 0012                  		move.w	d0,$12(a0)
0001399C C3E8 0014                  		muls.w	$14(a0),d1
000139A0 E081                       		asr.l	#8,d1
000139A2 0C41 1000                  		cmpi.w	#$1000,d1
000139A6 6F00                       		ble.s	loc_131F0
000139A8 323C 1000                  		move.w	#$1000,d1
000139AC                            
000139AC                            loc_131F0:
000139AC 0C41 F000                  		cmpi.w	#-$1000,d1
000139B0 6C00                       		bge.s	loc_131FA
000139B2 323C F000                  		move.w	#-$1000,d1
000139B6                            
000139B6                            loc_131FA:
000139B6 3141 0010                  		move.w	d1,$10(a0)
000139BA 6000 FE0C                  		bra.w	loc_1300C
000139BE                            ; End of function Sonic_RollSpeed
000139BE                            
000139BE                            
000139BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139BE                            
000139BE                            
000139BE                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000139BE 3028 0014                  		move.w	$14(a0),d0
000139C2 6700                       		beq.s	loc_1320A
000139C4 6A00                       		bpl.s	loc_13218
000139C6                            
000139C6                            loc_1320A:
000139C6 08E8 0000 0022             		bset	#0,$22(a0)
000139CC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139D2 4E75                       		rts	
000139D4                            ; ===========================================================================
000139D4                            
000139D4                            loc_13218:
000139D4 9044                       		sub.w	d4,d0
000139D6 6400                       		bcc.s	loc_13220
000139D8 303C FF80                  		move.w	#-$80,d0
000139DC                            
000139DC                            loc_13220:
000139DC 3140 0014                  		move.w	d0,$14(a0)
000139E0 4E75                       		rts	
000139E2                            ; End of function Sonic_RollLeft
000139E2                            
000139E2                            
000139E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139E2                            
000139E2                            
000139E2                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000139E2 3028 0014                  		move.w	$14(a0),d0
000139E6 6B00                       		bmi.s	loc_1323A
000139E8 08A8 0000 0022             		bclr	#0,$22(a0)
000139EE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139F4 4E75                       		rts	
000139F6                            ; ===========================================================================
000139F6                            
000139F6                            loc_1323A:
000139F6 D044                       		add.w	d4,d0
000139F8 6400                       		bcc.s	loc_13242
000139FA 303C 0080                  		move.w	#$80,d0
000139FE                            
000139FE                            loc_13242:
000139FE 3140 0014                  		move.w	d0,$14(a0)
00013A02 4E75                       		rts	
00013A04                            ; End of function Sonic_RollRight
00013A04                            
00013A04                            ; ---------------------------------------------------------------------------
00013A04                            ; Subroutine to	change Sonic's direction while jumping
00013A04                            ; ---------------------------------------------------------------------------
00013A04                            
00013A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A04                            
00013A04                            
00013A04                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A04 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A08 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A0C E345                       		asl.w	#1,d5
00013A0E 0828 0004 0022             		btst	#4,$22(a0)
00013A14 6600                       		bne.s	Obj01_ResetScr2
00013A16 3028 0010                  		move.w	$10(a0),d0
00013A1A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A20 6700                       		beq.s	loc_13278	; if not, branch
00013A22 08E8 0000 0022             		bset	#0,$22(a0)
00013A28 9045                       		sub.w	d5,d0
00013A2A 3206                       		move.w	d6,d1
00013A2C 4441                       		neg.w	d1
00013A2E B041                       		cmp.w	d1,d0
00013A30 6E00                       		bgt.s	loc_13278
00013A32 3001                       		move.w	d1,d0
00013A34                            
00013A34                            loc_13278:
00013A34 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A3A 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013A3C 08A8 0000 0022             		bclr	#0,$22(a0)
00013A42 D045                       		add.w	d5,d0
00013A44 B046                       		cmp.w	d6,d0
00013A46 6D00                       		blt.s	Obj01_JumpMove
00013A48 3006                       		move.w	d6,d0
00013A4A                            
00013A4A                            Obj01_JumpMove:
00013A4A 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013A4E                            
00013A4E                            Obj01_ResetScr2:
00013A4E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013A54 6700                       		beq.s	loc_132A4	; if yes, branch
00013A56 6400                       		bcc.s	loc_132A0
00013A58 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013A5C                            
00013A5C                            loc_132A0:
00013A5C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A60                            
00013A60                            loc_132A4:
00013A60 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013A66 6500                       		bcs.s	locret_132D2	; if yes, branch
00013A68 3028 0010                  		move.w	$10(a0),d0
00013A6C 3200                       		move.w	d0,d1
00013A6E EA41                       		asr.w	#5,d1
00013A70 6700                       		beq.s	locret_132D2
00013A72 6B00                       		bmi.s	loc_132C6
00013A74 9041                       		sub.w	d1,d0
00013A76 6400                       		bcc.s	loc_132C0
00013A78 303C 0000                  		move.w	#0,d0
00013A7C                            
00013A7C                            loc_132C0:
00013A7C 3140 0010                  		move.w	d0,$10(a0)
00013A80 4E75                       		rts	
00013A82                            ; ===========================================================================
00013A82                            
00013A82                            loc_132C6:
00013A82 9041                       		sub.w	d1,d0
00013A84 6500                       		bcs.s	loc_132CE
00013A86 303C 0000                  		move.w	#0,d0
00013A8A                            
00013A8A                            loc_132CE:
00013A8A 3140 0010                  		move.w	d0,$10(a0)
00013A8E                            
00013A8E                            locret_132D2:
00013A8E 4E75                       		rts	
00013A90                            ; End of function Sonic_ChgJumpDir
00013A90                            
00013A90                            ; ===========================================================================
00013A90                            ; ---------------------------------------------------------------------------
00013A90                            ; Unused subroutine to squash Sonic
00013A90                            ; ---------------------------------------------------------------------------
00013A90 1028 0026                  		move.b	$26(a0),d0
00013A94 0600 0020                  		addi.b	#$20,d0
00013A98 0200 00C0                  		andi.b	#$C0,d0
00013A9C 6600                       		bne.s	locret_13302
00013A9E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013AA2 4A41                       		tst.w	d1
00013AA4 6A00                       		bpl.s	locret_13302
00013AA6 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013AAC 317C 0000 0010             		move.w	#0,$10(a0)
00013AB2 317C 0000 0012             		move.w	#0,$12(a0)
00013AB8 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013ABE                            
00013ABE                            locret_13302:
00013ABE 4E75                       		rts	
00013AC0                            ; ---------------------------------------------------------------------------
00013AC0                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013AC0                            ; ---------------------------------------------------------------------------
00013AC0                            
00013AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC0                            
00013AC0                            
00013AC0                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013AC0 2228 0008                  		move.l	8(a0),d1
00013AC4 3028 0010                  		move.w	$10(a0),d0
00013AC8 48C0                       		ext.l	d0
00013ACA E180                       		asl.l	#8,d0
00013ACC D280                       		add.l	d0,d1
00013ACE 4841                       		swap	d1
00013AD0 3038 F728                  		move.w	($FFFFF728).w,d0
00013AD4 0640 0010                  		addi.w	#$10,d0
00013AD8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013ADA 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013ADC 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013AE0 0640 0128                  		addi.w	#$128,d0
00013AE4 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013AE8 6600                       		bne.s	loc_13332
00013AEA 0640 0040                  		addi.w	#$40,d0
00013AEE                            
00013AEE                            loc_13332:
00013AEE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013AF0 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013AF2                            
00013AF2                            loc_13336:
00013AF2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013AF6 0640 00E0                  		addi.w	#$E0,d0
00013AFA B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013AFE 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013B00 4E75                       		rts	
00013B02                            ; ===========================================================================
00013B02                            
00013B02                            Boundary_Bottom:
00013B02 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013B08 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00013B0A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013B10 6500                       		bcs.s	JMPKillSonic
00013B12 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013B16 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013B1C 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013B22 4E75                       		rts	
00013B24                            ; ===========================================================================
00013B24                            
00013B24                            Boundary_Sides:
00013B24 3140 0008                  		move.w	d0,8(a0)
00013B28 317C 0000 000A             		move.w	#0,$A(a0)
00013B2E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013B34 317C 0000 0014             		move.w	#0,$14(a0)
00013B3A 60B6                       		bra.s	loc_13336
00013B3C                            
00013B3C                            JMPKillSonic:
00013B3C 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00013B42 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00013B48 4EF9 0000 0000             		jmp	KillSonic
00013B4E                            ; End of function Sonic_LevelBound
00013B4E                            
00013B4E                            ; ---------------------------------------------------------------------------
00013B4E                            ; Subroutine allowing Sonic to roll when he's moving
00013B4E                            ; ---------------------------------------------------------------------------
00013B4E                            
00013B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B4E                            
00013B4E                            
00013B4E                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013B4E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B52 6600                       		bne.s	Obj01_NoRoll
00013B54 3028 0014                  		move.w	$14(a0),d0
00013B58 6A00                       		bpl.s	loc_13392
00013B5A 4440                       		neg.w	d0
00013B5C                            
00013B5C                            loc_13392:
00013B5C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013B60 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013B62 1038 F602                  		move.b	($FFFFF602).w,d0
00013B66 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013B6A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013B6C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B72 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013B74                            
00013B74                            Obj01_NoRoll:
00013B74 4E75                       		rts	
00013B76                            ; ===========================================================================
00013B76                            
00013B76                            Obj01_ChkRoll:
00013B76 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013B7C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013B7E 4E75                       		rts	
00013B80                            ; ===========================================================================
00013B80                            
00013B80                            Obj01_DoRoll:
00013B80 08E8 0002 0022             		bset	#2,$22(a0)
00013B86 117C 000E 0016             		move.b	#$E,$16(a0)
00013B8C 117C 0007 0017             		move.b	#7,$17(a0)
00013B92 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013B98 5A68 000C                  		addq.w	#5,$C(a0)
00013B9C 303C 00BE                  		move.w	#$BE,d0
00013BA0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rolling sound
00013BA6 4A68 0014                  		tst.w	$14(a0)
00013BAA 6600                       		bne.s	locret_133E8
00013BAC 317C 0200 0014             		move.w	#$200,$14(a0)
00013BB2                            
00013BB2                            locret_133E8:
00013BB2 4E75                       		rts	
00013BB4                            ; End of function Sonic_Roll
00013BB4                            
00013BB4                            ; ---------------------------------------------------------------------------
00013BB4                            ; Subroutine allowing Sonic to jump
00013BB4                            ; ---------------------------------------------------------------------------
00013BB4                            
00013BB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BB4                            
00013BB4                            
00013BB4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BB4 1038 F603                  		move.b	($FFFFF603).w,d0
00013BB8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013BBC 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013BC0 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00013BC6 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00013BCC 6600                       		bne.s	@notfrustrated
00013BCE 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00013BD4                            
00013BD4                            	@notfrustrated:
00013BD4 7000                       		moveq	#0,d0
00013BD6 1028 0026                  		move.b	$26(a0),d0
00013BDA 0600 0080                  		addi.b	#$80,d0
00013BDE 6100 0000                  		bsr.w	sub_14D48
00013BE2 0C41 0006                  		cmpi.w	#6,d1
00013BE6 6D00 0000                  		blt.w	locret_1348E
00013BEA 343C 0680                  		move.w	#$680,d2
00013BEE 0828 0006 0022             		btst	#6,$22(a0)
00013BF4 6700                       		beq.s	loc_1341C
00013BF6 343C 0380                  		move.w	#$380,d2
00013BFA                            
00013BFA                            loc_1341C:
00013BFA 7000                       		moveq	#0,d0
00013BFC 1028 0026                  		move.b	$26(a0),d0
00013C00 0400 0040                  		subi.b	#$40,d0
00013C04 4EB9 0000 28EC             		jsr	(CalcSine).l
00013C0A C3C2                       		muls.w	d2,d1
00013C0C E081                       		asr.l	#8,d1
00013C0E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013C12 C1C2                       		muls.w	d2,d0
00013C14 E080                       		asr.l	#8,d0
00013C16 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013C1A 08E8 0001 0022             		bset	#1,$22(a0)
00013C20 08A8 0005 0022             		bclr	#5,$22(a0)
00013C26 588F                       		addq.l	#4,sp
00013C28 117C 0001 003C             		move.b	#1,$3C(a0)
00013C2E 4228 0038                  		clr.b	$38(a0)
00013C32 303C 00A0                  		move.w	#$A0,d0
00013C36 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play jumping sound
00013C3C 117C 0013 0016             		move.b	#$13,$16(a0)
00013C42 117C 0009 0017             		move.b	#9,$17(a0)
00013C48 0828 0002 0022             		btst	#2,$22(a0)
00013C4E 6600                       		bne.s	loc_13490
00013C50 117C 000E 0016             		move.b	#$E,$16(a0)
00013C56 117C 0007 0017             		move.b	#7,$17(a0)
00013C5C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013C62 08E8 0002 0022             		bset	#2,$22(a0)
00013C68 5A68 000C                  		addq.w	#5,$C(a0)
00013C6C                            
00013C6C                            locret_1348E:
00013C6C 4E75                       		rts	
00013C6E                            ; ===========================================================================
00013C6E                            
00013C6E                            loc_13490:
00013C6E 08E8 0004 0022             		bset	#4,$22(a0)
00013C74 4E75                       		rts	
00013C76                            ; End of function Sonic_Jump
00013C76                            
00013C76                            
00013C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C76                            
00013C76                            
00013C76                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C76 4A28 003C                  		tst.b	$3C(a0)
00013C7A 6700                       		beq.s	loc_134C4
00013C7C 323C FC00                  		move.w	#-$400,d1
00013C80 0828 0006 0022             		btst	#6,$22(a0)
00013C86 6700                       		beq.s	loc_134AE
00013C88 323C FE00                  		move.w	#-$200,d1
00013C8C                            
00013C8C                            loc_134AE:
00013C8C B268 0012                  		cmp.w	$12(a0),d1
00013C90 6F00                       		ble.s	locret_134C2
00013C92 1038 F602                  		move.b	($FFFFF602).w,d0
00013C96 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C9A 6600                       		bne.s	locret_134C2	; if yes, branch
00013C9C 3141 0012                  		move.w	d1,$12(a0)
00013CA0                            
00013CA0                            locret_134C2:
00013CA0 4E75                       		rts	
00013CA2                            ; ===========================================================================
00013CA2                            
00013CA2                            loc_134C4:
00013CA2 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013CA8 6C00                       		bge.s	locret_134D2
00013CAA 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013CB0                            
00013CB0                            locret_134D2:
00013CB0 4E75                       		rts	
00013CB2                            ; End of function Sonic_JumpHeight
00013CB2                            
00013CB2                            ; ---------------------------------------------------------------------------
00013CB2                            ; Subroutine to	slow Sonic walking up a	slope
00013CB2                            ; ---------------------------------------------------------------------------
00013CB2                            
00013CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CB2                            
00013CB2                            
00013CB2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013CB2 1028 0026                  		move.b	$26(a0),d0
00013CB6 0600 0060                  		addi.b	#$60,d0
00013CBA 0C00 00C0                  		cmpi.b	#$C0,d0
00013CBE 6400                       		bcc.s	locret_13508
00013CC0 1028 0026                  		move.b	$26(a0),d0
00013CC4 4EB9 0000 28EC             		jsr	(CalcSine).l
00013CCA C1FC 0020                  		muls.w	#$20,d0
00013CCE E080                       		asr.l	#8,d0
00013CD0 4A68 0014                  		tst.w	$14(a0)
00013CD4 6700                       		beq.s	locret_13508
00013CD6 6B00                       		bmi.s	loc_13504
00013CD8 4A40                       		tst.w	d0
00013CDA 6700                       		beq.s	locret_13502
00013CDC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013CE0                            
00013CE0                            locret_13502:
00013CE0 4E75                       		rts	
00013CE2                            ; ===========================================================================
00013CE2                            
00013CE2                            loc_13504:
00013CE2 D168 0014                  		add.w	d0,$14(a0)
00013CE6                            
00013CE6                            locret_13508:
00013CE6 4E75                       		rts	
00013CE8                            ; End of function Sonic_SlopeResist
00013CE8                            
00013CE8                            ; ---------------------------------------------------------------------------
00013CE8                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013CE8                            ; ---------------------------------------------------------------------------
00013CE8                            
00013CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CE8                            
00013CE8                            
00013CE8                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013CE8 1028 0026                  		move.b	$26(a0),d0
00013CEC 0600 0060                  		addi.b	#$60,d0
00013CF0 0C00 00C0                  		cmpi.b	#-$40,d0
00013CF4 6400                       		bcc.s	locret_13544
00013CF6 1028 0026                  		move.b	$26(a0),d0
00013CFA 4EB9 0000 28EC             		jsr	(CalcSine).l
00013D00 C1FC 0050                  		muls.w	#$50,d0
00013D04 E080                       		asr.l	#8,d0
00013D06 4A68 0014                  		tst.w	$14(a0)
00013D0A 6B00                       		bmi.s	loc_1353A
00013D0C 4A40                       		tst.w	d0
00013D0E 6A00                       		bpl.s	loc_13534
00013D10 E480                       		asr.l	#2,d0
00013D12                            
00013D12                            loc_13534:
00013D12 D168 0014                  		add.w	d0,$14(a0)
00013D16 4E75                       		rts	
00013D18                            ; ===========================================================================
00013D18                            
00013D18                            loc_1353A:
00013D18 4A40                       		tst.w	d0
00013D1A 6B00                       		bmi.s	loc_13540
00013D1C E480                       		asr.l	#2,d0
00013D1E                            
00013D1E                            loc_13540:
00013D1E D168 0014                  		add.w	d0,$14(a0)
00013D22                            
00013D22                            locret_13544:
00013D22 4E75                       		rts	
00013D24                            ; End of function Sonic_RollRepel
00013D24                            
00013D24                            ; ---------------------------------------------------------------------------
00013D24                            ; Subroutine to	push Sonic down	a slope
00013D24                            ; ---------------------------------------------------------------------------
00013D24                            
00013D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D24                            
00013D24                            
00013D24                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013D24 4E71                       		nop	
00013D26 4A28 0038                  		tst.b	$38(a0)
00013D2A 6600                       		bne.s	locret_13580
00013D2C 4A68 003E                  		tst.w	$3E(a0)
00013D30 6600                       		bne.s	loc_13582
00013D32 1028 0026                  		move.b	$26(a0),d0
00013D36 0600 0020                  		addi.b	#$20,d0
00013D3A 0200 00C0                  		andi.b	#$C0,d0
00013D3E 6700                       		beq.s	locret_13580
00013D40 3028 0014                  		move.w	$14(a0),d0
00013D44 6A00                       		bpl.s	loc_1356A
00013D46 4440                       		neg.w	d0
00013D48                            
00013D48                            loc_1356A:
00013D48 0C40 0280                  		cmpi.w	#$280,d0
00013D4C 6400                       		bcc.s	locret_13580
00013D4E 4268 0014                  		clr.w	$14(a0)
00013D52 08E8 0001 0022             		bset	#1,$22(a0)
00013D58 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013D5E                            
00013D5E                            locret_13580:
00013D5E 4E75                       		rts	
00013D60                            ; ===========================================================================
00013D60                            
00013D60                            loc_13582:
00013D60 5368 003E                  		subq.w	#1,$3E(a0)
00013D64 4E75                       		rts	
00013D66                            ; End of function Sonic_SlopeRepel
00013D66                            
00013D66                            ; ---------------------------------------------------------------------------
00013D66                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013D66                            ; ---------------------------------------------------------------------------
00013D66                            
00013D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D66                            
00013D66                            
00013D66                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D66 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013D6A 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013D6C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013D6E                            
00013D6E 5400                       		addq.b	#2,d0		; increase angle
00013D70 6400                       		bcc.s	loc_13596
00013D72 7000                       		moveq	#0,d0
00013D74                            
00013D74                            loc_13596:
00013D74 6000                       		bra.s	loc_1359E
00013D76                            ; ===========================================================================
00013D76                            
00013D76                            loc_13598:
00013D76 5500                       		subq.b	#2,d0		; decrease angle
00013D78 6400                       		bcc.s	loc_1359E
00013D7A 7000                       		moveq	#0,d0
00013D7C                            
00013D7C                            loc_1359E:
00013D7C 1140 0026                  		move.b	d0,$26(a0)
00013D80                            
00013D80                            locret_135A2:
00013D80 4E75                       		rts	
00013D82                            ; End of function Sonic_JumpAngle
00013D82                            
00013D82                            ; ---------------------------------------------------------------------------
00013D82                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013D82                            ; ---------------------------------------------------------------------------
00013D82                            
00013D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D82                            
00013D82                            
00013D82                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013D82 3228 0010                  		move.w	$10(a0),d1
00013D86 3428 0012                  		move.w	$12(a0),d2
00013D8A 4EB9 0000 2BBA             		jsr	(CalcAngle).l
00013D90 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013D94 0400 0020                  		subi.b	#$20,d0
00013D98 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013D9C 0200 00C0                  		andi.b	#$C0,d0
00013DA0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013DA4 0C00 0040                  		cmpi.b	#$40,d0
00013DA8 6700 0000                  		beq.w	loc_13680
00013DAC 0C00 0080                  		cmpi.b	#$80,d0
00013DB0 6700 0000                  		beq.w	loc_136E2
00013DB4 0C00 00C0                  		cmpi.b	#-$40,d0
00013DB8 6700 0000                  		beq.w	loc_1373E
00013DBC 6100 0000                  		bsr.w	Sonic_HitWall
00013DC0 4A41                       		tst.w	d1
00013DC2 6A00                       		bpl.s	loc_135F0
00013DC4 9368 0008                  		sub.w	d1,8(a0)
00013DC8 317C 0000 0010             		move.w	#0,$10(a0)
00013DCE                            
00013DCE                            loc_135F0:
00013DCE 6100 0000                  		bsr.w	sub_14EB4
00013DD2 4A41                       		tst.w	d1
00013DD4 6A00                       		bpl.s	loc_13602
00013DD6 D368 0008                  		add.w	d1,8(a0)
00013DDA 317C 0000 0010             		move.w	#0,$10(a0)
00013DE0                            
00013DE0                            loc_13602:
00013DE0 6100 0000                  		bsr.w	Sonic_HitFloor
00013DE4 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013DE8 4A41                       		tst.w	d1
00013DEA 6A00                       		bpl.s	locret_1367E
00013DEC 1428 0012                  		move.b	$12(a0),d2
00013DF0 5002                       		addq.b	#8,d2
00013DF2 4402                       		neg.b	d2
00013DF4 B202                       		cmp.b	d2,d1
00013DF6 6C00                       		bge.s	loc_1361E
00013DF8 B002                       		cmp.b	d2,d0
00013DFA 6D00                       		blt.s	locret_1367E
00013DFC                            
00013DFC                            loc_1361E:
00013DFC D368 000C                  		add.w	d1,$C(a0)
00013E00 1143 0026                  		move.b	d3,$26(a0)
00013E04 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E08 117C 0000 001C             		move.b	#0,$1C(a0)
00013E0E 1003                       		move.b	d3,d0
00013E10 0600 0020                  		addi.b	#$20,d0
00013E14 0200 0040                  		andi.b	#$40,d0
00013E18 6600                       		bne.s	loc_1365C
00013E1A 1003                       		move.b	d3,d0
00013E1C 0600 0010                  		addi.b	#$10,d0
00013E20 0200 0020                  		andi.b	#$20,d0
00013E24 6700                       		beq.s	loc_1364E
00013E26 E0E8 0012                  		asr	$12(a0)
00013E2A 6000                       		bra.s	loc_13670
00013E2C                            ; ===========================================================================
00013E2C                            
00013E2C                            loc_1364E:
00013E2C 317C 0000 0012             		move.w	#0,$12(a0)
00013E32 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E38 4E75                       		rts	
00013E3A                            ; ===========================================================================
00013E3A                            
00013E3A                            loc_1365C:
00013E3A 317C 0000 0010             		move.w	#0,$10(a0)
00013E40 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013E46 6F00                       		ble.s	loc_13670
00013E48 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013E4E                            
00013E4E                            loc_13670:
00013E4E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E54 4A03                       		tst.b	d3
00013E56 6A00                       		bpl.s	locret_1367E
00013E58 4468 0014                  		neg.w	$14(a0)
00013E5C                            
00013E5C                            locret_1367E:
00013E5C 4E75                       		rts	
00013E5E                            ; ===========================================================================
00013E5E                            
00013E5E                            loc_13680:
00013E5E 6100 0000                  		bsr.w	Sonic_HitWall
00013E62 4A41                       		tst.w	d1
00013E64 6A00                       		bpl.s	loc_1369A
00013E66 9368 0008                  		sub.w	d1,8(a0)
00013E6A 317C 0000 0010             		move.w	#0,$10(a0)
00013E70 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E76 4E75                       		rts	
00013E78                            ; ===========================================================================
00013E78                            
00013E78                            loc_1369A:
00013E78 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E7C 4A41                       		tst.w	d1
00013E7E 6A00                       		bpl.s	loc_136B4
00013E80 9368 000C                  		sub.w	d1,$C(a0)
00013E84 4A68 0012                  		tst.w	$12(a0)
00013E88 6A00                       		bpl.s	locret_136B2
00013E8A 317C 0000 0012             		move.w	#0,$12(a0)
00013E90                            
00013E90                            locret_136B2:
00013E90 4E75                       		rts	
00013E92                            ; ===========================================================================
00013E92                            
00013E92                            loc_136B4:
00013E92 4A68 0012                  		tst.w	$12(a0)
00013E96 6B00                       		bmi.s	locret_136E0
00013E98 6100 0000                  		bsr.w	Sonic_HitFloor
00013E9C 4A41                       		tst.w	d1
00013E9E 6A00                       		bpl.s	locret_136E0
00013EA0 D368 000C                  		add.w	d1,$C(a0)
00013EA4 1143 0026                  		move.b	d3,$26(a0)
00013EA8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013EAC 117C 0000 001C             		move.b	#0,$1C(a0)
00013EB2 317C 0000 0012             		move.w	#0,$12(a0)
00013EB8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EBE                            
00013EBE                            locret_136E0:
00013EBE 4E75                       		rts	
00013EC0                            ; ===========================================================================
00013EC0                            
00013EC0                            loc_136E2:
00013EC0 6100 0000                  		bsr.w	Sonic_HitWall
00013EC4 4A41                       		tst.w	d1
00013EC6 6A00                       		bpl.s	loc_136F4
00013EC8 9368 0008                  		sub.w	d1,8(a0)
00013ECC 317C 0000 0010             		move.w	#0,$10(a0)
00013ED2                            
00013ED2                            loc_136F4:
00013ED2 6100 0000                  		bsr.w	sub_14EB4
00013ED6 4A41                       		tst.w	d1
00013ED8 6A00                       		bpl.s	loc_13706
00013EDA D368 0008                  		add.w	d1,8(a0)
00013EDE 317C 0000 0010             		move.w	#0,$10(a0)
00013EE4                            
00013EE4                            loc_13706:
00013EE4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EE8 4A41                       		tst.w	d1
00013EEA 6A00                       		bpl.s	locret_1373C
00013EEC 9368 000C                  		sub.w	d1,$C(a0)
00013EF0 1003                       		move.b	d3,d0
00013EF2 0600 0020                  		addi.b	#$20,d0
00013EF6 0200 0040                  		andi.b	#$40,d0
00013EFA 6600                       		bne.s	loc_13726
00013EFC 317C 0000 0012             		move.w	#0,$12(a0)
00013F02 4E75                       		rts	
00013F04                            ; ===========================================================================
00013F04                            
00013F04                            loc_13726:
00013F04 1143 0026                  		move.b	d3,$26(a0)
00013F08 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F0C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F12 4A03                       		tst.b	d3
00013F14 6A00                       		bpl.s	locret_1373C
00013F16 4468 0014                  		neg.w	$14(a0)
00013F1A                            
00013F1A                            locret_1373C:
00013F1A 4E75                       		rts	
00013F1C                            ; ===========================================================================
00013F1C                            
00013F1C                            loc_1373E:
00013F1C 6100 0000                  		bsr.w	sub_14EB4
00013F20 4A41                       		tst.w	d1
00013F22 6A00                       		bpl.s	loc_13758
00013F24 D368 0008                  		add.w	d1,8(a0)
00013F28 317C 0000 0010             		move.w	#0,$10(a0)
00013F2E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F34 4E75                       		rts	
00013F36                            ; ===========================================================================
00013F36                            
00013F36                            loc_13758:
00013F36 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F3A 4A41                       		tst.w	d1
00013F3C 6A00                       		bpl.s	loc_13772
00013F3E 9368 000C                  		sub.w	d1,$C(a0)
00013F42 4A68 0012                  		tst.w	$12(a0)
00013F46 6A00                       		bpl.s	locret_13770
00013F48 317C 0000 0012             		move.w	#0,$12(a0)
00013F4E                            
00013F4E                            locret_13770:
00013F4E 4E75                       		rts	
00013F50                            ; ===========================================================================
00013F50                            
00013F50                            loc_13772:
00013F50 4A68 0012                  		tst.w	$12(a0)
00013F54 6B00                       		bmi.s	locret_1379E
00013F56 6100 0000                  		bsr.w	Sonic_HitFloor
00013F5A 4A41                       		tst.w	d1
00013F5C 6A00                       		bpl.s	locret_1379E
00013F5E D368 000C                  		add.w	d1,$C(a0)
00013F62 1143 0026                  		move.b	d3,$26(a0)
00013F66 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F6A 117C 0000 001C             		move.b	#0,$1C(a0)
00013F70 317C 0000 0012             		move.w	#0,$12(a0)
00013F76 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F7C                            
00013F7C                            locret_1379E:
00013F7C 4E75                       		rts	
00013F7E                            ; End of function Sonic_Floor
00013F7E                            
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            
00013F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F7E                            
00013F7E                            
00013F7E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013F7E 0828 0004 0022             		btst	#4,$22(a0)
00013F84 6700                       		beq.s	loc_137AE
00013F86 4E71                       		nop	
00013F88 4E71                       		nop	
00013F8A 4E71                       		nop	
00013F8C                            
00013F8C                            loc_137AE:
00013F8C 08A8 0005 0022             		bclr	#5,$22(a0)
00013F92 08A8 0001 0022             		bclr	#1,$22(a0)
00013F98 08A8 0004 0022             		bclr	#4,$22(a0)
00013F9E 0828 0002 0022             		btst	#2,$22(a0)
00013FA4 6700                       		beq.s	loc_137E4
00013FA6 08A8 0002 0022             		bclr	#2,$22(a0)
00013FAC 117C 0013 0016             		move.b	#$13,$16(a0)
00013FB2 117C 0009 0017             		move.b	#9,$17(a0)
00013FB8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013FBE 5B68 000C                  		subq.w	#5,$C(a0)
00013FC2                            
00013FC2                            loc_137E4:
00013FC2 117C 0000 003C             		move.b	#0,$3C(a0)
00013FC8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013FCE 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00013FD2                            
00013FD2                            	@NoReset:
00013FD2 4E75                       		rts	
00013FD4                            ; End of function Sonic_ResetOnFloor
00013FD4                            
00013FD4                            ; ===========================================================================
00013FD4                            ; ---------------------------------------------------------------------------
00013FD4                            ; Sonic	when he	gets hurt
00013FD4                            ; ---------------------------------------------------------------------------
00013FD4                            
00013FD4                            Obj01_Hurt:				; XREF: Obj01_Index
00013FD4 4EBA 9D86                  		jsr	SpeedToPos
00013FD8 0668 0030 0012             		addi.w	#$30,$12(a0)
00013FDE 0828 0006 0022             		btst	#6,$22(a0)
00013FE4 6700                       		beq.s	loc_1380C
00013FE6 0468 0020 0012             		subi.w	#$20,$12(a0)
00013FEC                            
00013FEC                            loc_1380C:
00013FEC 6100 0000                  		bsr.w	Sonic_HurtStop
00013FF0 6100 FACE                  		bsr.w	Sonic_LevelBound
00013FF4 6100 F4C4                  		bsr.w	Sonic_RecordPos
00013FF8 6100 0000                  		bsr.w	Sonic_Animate
00013FFC 6100 0000                  		bsr.w	LoadSonicDynPLC
00014000 4EFA 9D80                  		jmp	DisplaySprite
00014004                            
00014004                            ; ---------------------------------------------------------------------------
00014004                            ; Subroutine to	stop Sonic falling after he's been hurt
00014004                            ; ---------------------------------------------------------------------------
00014004                            
00014004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014004                            
00014004                            
00014004                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014004 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014008 0640 00E0                  		addi.w	#$E0,d0
0001400C B068 000C                  		cmp.w	$C(a0),d0
00014010 6500 FB2A                  		bcs.w	JMPKillSonic
00014014 6100 FD6C                  		bsr.w	Sonic_Floor
00014018 0828 0001 0022             		btst	#1,$22(a0)
0001401E 6600                       		bne.s	locret_13860
00014020 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014026 7000                       		moveq	#0,d0
00014028 3140 0012                  		move.w	d0,$12(a0)
0001402C 3140 0010                  		move.w	d0,$10(a0)
00014030 3140 0014                  		move.w	d0,$14(a0)
00014034 117C 0000 001C             		move.b	#0,$1C(a0)
0001403A 5528 0024                  		subq.b	#2,$24(a0)
0001403E 317C 0078 0030             		move.w	#$78,$30(a0)
00014044                            
00014044                            locret_13860:
00014044 4E75                       		rts	
00014046                            ; End of function Sonic_HurtStop
00014046                            
00014046                            ; ===========================================================================
00014046                            ; ---------------------------------------------------------------------------
00014046                            ; Sonic	when he	dies
00014046                            ; ---------------------------------------------------------------------------
00014046                            
00014046                            Obj01_Death:				; XREF: Obj01_Index
00014046 6100 0000                  		bsr.w	GameOver
0001404A 4EBA 9CE4                  		jsr	ObjectFall
0001404E 6100 F46A                  		bsr.w	Sonic_RecordPos
00014052 6100 0000                  		bsr.w	Sonic_Animate
00014056 6100 0000                  		bsr.w	LoadSonicDynPLC
0001405A 4EFA 9D26                  		jmp	DisplaySprite
0001405E                            
0001405E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001405E                            
0001405E                            
0001405E                            GameOver:				; XREF: Obj01_Death
0001405E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014062 0640 0100                  		addi.w	#$100,d0
00014066 B068 000C                  		cmp.w	$C(a0),d0
0001406A 6400 0000                  		bcc.w	locret_13900
0001406E 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014074 5428 0024                  		addq.b	#2,$24(a0)
00014078 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001407C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014080 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014084 6600                       		bne.s	loc_138D4
00014086 317C 0000 003A             		move.w	#0,$3A(a0)
0001408C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014092 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014098 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001409E 4238 FE1A                  		clr.b	($FFFFFE1A).w
000140A2                            
000140A2                            loc_138C2:
000140A2 303C 008F                  		move.w	#$8F,d0
000140A6 4EB9 0000 125C             		jsr	(PlaySound).l	; play game over music
000140AC 7003                       		moveq	#3,d0
000140AE 4EF9 0000 148A             		jmp	(LoadPLC).l	; load game over patterns
000140B4                            ; ===========================================================================
000140B4                            
000140B4                            loc_138D4:
000140B4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000140BA 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000140BE 6700                       		beq.s	locret_13900	; if not, branch
000140C0 317C 0000 003A             		move.w	#0,$3A(a0)
000140C6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000140CC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000140D2 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000140D8 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000140DE 60C2                       		bra.s	loc_138C2
000140E0                            ; ===========================================================================
000140E0                            
000140E0                            locret_13900:
000140E0 4E75                       		rts	
000140E2                            ; End of function GameOver
000140E2                            
000140E2                            ; ===========================================================================
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            ; Sonic	when the level is restarted
000140E2                            ; ---------------------------------------------------------------------------
000140E2                            
000140E2                            Obj01_ResetLevel:			; XREF: Obj01_Index
000140E2 4A68 003A                  		tst.w	$3A(a0)
000140E6 6700                       		beq.s	locret_13914
000140E8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000140EC 6600                       		bne.s	locret_13914
000140EE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000140F4 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
000140FA                            
000140FA                            locret_13914:
000140FA 4E75                       		rts	
000140FC                            
000140FC                            ; ---------------------------------------------------------------------------
000140FC                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000140FC                            ; ---------------------------------------------------------------------------
000140FC                            
000140FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140FC                            
000140FC                            
000140FC                            Sonic_Loops:				; XREF: Obj01_Control
000140FC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014102 6700                       		beq.s	loc_13926	; if yes, branch
00014104 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014108 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001410C                            
0001410C                            loc_13926:
0001410C 3028 000C                  		move.w	$C(a0),d0
00014110 E248                       		lsr.w	#1,d0
00014112 0240 0380                  		andi.w	#$380,d0
00014116 1228 0008                  		move.b	8(a0),d1
0001411A 0241 007F                  		andi.w	#$7F,d1
0001411E D041                       		add.w	d1,d0
00014120 43F8 A400                  		lea	($FFFFA400).w,a1
00014124 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014128 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001412C 6700 FA48                  		beq.w	Obj01_ChkRoll
00014130 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014134 6700 FA40                  		beq.w	Obj01_ChkRoll
00014138 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001413C 6700                       		beq.s	loc_13976
0001413E B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014142 6700                       		beq.s	loc_13966
00014144 08A8 0006 0001             		bclr	#6,1(a0)
0001414A 4E75                       		rts	
0001414C                            ; ===========================================================================
0001414C                            
0001414C                            loc_13966:
0001414C 0828 0001 0022             		btst	#1,$22(a0)
00014152 6700                       		beq.s	loc_13976
00014154 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001415A 4E75                       		rts	
0001415C                            ; ===========================================================================
0001415C                            
0001415C                            loc_13976:
0001415C 3428 0008                  		move.w	8(a0),d2
00014160 0C02 002C                  		cmpi.b	#$2C,d2
00014164 6400                       		bcc.s	loc_13988
00014166 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001416C 4E75                       		rts	
0001416E                            ; ===========================================================================
0001416E                            
0001416E                            loc_13988:
0001416E 0C02 00E0                  		cmpi.b	#-$20,d2
00014172 6500                       		bcs.s	loc_13996
00014174 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001417A 4E75                       		rts	
0001417C                            ; ===========================================================================
0001417C                            
0001417C                            loc_13996:
0001417C 0828 0006 0001             		btst	#6,1(a0)
00014182 6600                       		bne.s	loc_139B2
00014184 1228 0026                  		move.b	$26(a0),d1
00014188 6700                       		beq.s	locret_139C2
0001418A 0C01 0080                  		cmpi.b	#-$80,d1
0001418E 6200                       		bhi.s	locret_139C2
00014190 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014196 4E75                       		rts	
00014198                            ; ===========================================================================
00014198                            
00014198                            loc_139B2:
00014198 1228 0026                  		move.b	$26(a0),d1
0001419C 0C01 0080                  		cmpi.b	#-$80,d1
000141A0 6300                       		bls.s	locret_139C2
000141A2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141A8                            
000141A8                            locret_139C2:
000141A8 4E75                       		rts	
000141AA                            ; End of function Sonic_Loops
000141AA                            
000141AA                            ; ---------------------------------------------------------------------------
000141AA                            ; Subroutine to	animate	Sonic's sprites
000141AA                            ; ---------------------------------------------------------------------------
000141AA                            
000141AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141AA                            
000141AA                            
000141AA                            Sonic_Animate:				; XREF: Obj01_Control; et al
000141AA 43F9 0000 0000             		lea	(SonicAniData).l,a1
000141B0 7000                       		moveq	#0,d0
000141B2 1028 001C                  		move.b	$1C(a0),d0
000141B6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000141BA 6700                       		beq.s	SAnim_Do	; if not, branch
000141BC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000141C0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000141C6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000141CC                            
000141CC                            SAnim_Do:
000141CC D040                       		add.w	d0,d0
000141CE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000141D2 1011                       		move.b	(a1),d0
000141D4 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000141D6 1228 0022                  		move.b	$22(a0),d1
000141DA 0201 0001                  		andi.b	#1,d1
000141DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141E4 8328 0001                  		or.b	d1,1(a0)
000141E8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000141EC 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000141EE 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000141F2                            
000141F2                            SAnim_Do2:
000141F2 7200                       		moveq	#0,d1
000141F4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000141F8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000141FC 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000141FE                            
000141FE                            SAnim_Next:
000141FE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014202 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014206                            
00014206                            SAnim_Delay:
00014206 4E75                       		rts	
00014208                            ; ===========================================================================
00014208                            
00014208                            SAnim_End_FF:
00014208 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001420A 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001420C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014212 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014216 60E6                       		bra.s	SAnim_Next
00014218                            ; ===========================================================================
00014218                            
00014218                            SAnim_End_FE:
00014218 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001421A 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001421C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014220 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014224 9200                       		sub.b	d0,d1
00014226 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001422A 60D2                       		bra.s	SAnim_Next
0001422C                            ; ===========================================================================
0001422C                            
0001422C                            SAnim_End_FD:
0001422C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001422E 6600                       		bne.s	SAnim_End	; if not, branch
00014230 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014236                            
00014236                            SAnim_End:
00014236 4E75                       		rts	
00014238                            ; ===========================================================================
00014238                            
00014238                            SAnim_WalkRun:				; XREF: SAnim_Do
00014238 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001423C 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001423E 5200                       		addq.b	#1,d0		; is animation walking/running?
00014240 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014244 7200                       		moveq	#0,d1
00014246 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001424A 1428 0022                  		move.b	$22(a0),d2
0001424E 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014252 6600                       		bne.s	loc_13A70	; if yes, branch
00014254 4600                       		not.b	d0		; reverse angle
00014256                            
00014256                            loc_13A70:
00014256 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001425A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001425C 7203                       		moveq	#3,d1
0001425E                            
0001425E                            loc_13A78:
0001425E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014264 B302                       		eor.b	d1,d2
00014266 8528 0001                  		or.b	d2,1(a0)
0001426A 0828 0005 0022             		btst	#5,$22(a0)
00014270 6600 0000                  		bne.w	SAnim_Push
00014274 E808                       		lsr.b	#4,d0		; divide angle by $10
00014276 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001427A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001427E 6A00                       		bpl.s	loc_13A9C
00014280 4442                       		neg.w	d2
00014282                            
00014282                            loc_13A9C:
00014282 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014288 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001428C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001428E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014294 1200                       		move.b	d0,d1
00014296 E209                       		lsr.b	#1,d1
00014298 D001                       		add.b	d1,d0
0001429A                            
0001429A                            loc_13AB4:
0001429A D000                       		add.b	d0,d0
0001429C 1600                       		move.b	d0,d3
0001429E 4442                       		neg.w	d2
000142A0 0642 0800                  		addi.w	#$800,d2
000142A4 6A00                       		bpl.s	loc_13AC2
000142A6 7400                       		moveq	#0,d2
000142A8                            
000142A8                            loc_13AC2:
000142A8 E04A                       		lsr.w	#8,d2
000142AA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000142AE 6100 FF42                  		bsr.w	SAnim_Do2
000142B2 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000142B6 4E75                       		rts	
000142B8                            ; ===========================================================================
000142B8                            
000142B8                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000142B8 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000142BA 6600                       		bne.s	SAnim_Push	; if not, branch
000142BC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142C0 6A00                       		bpl.s	loc_13ADE
000142C2 4442                       		neg.w	d2
000142C4                            
000142C4                            loc_13ADE:
000142C4 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000142CA 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000142CE 6400                       		bcc.s	loc_13AF0	; if yes, branch
000142D0 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000142D6                            
000142D6                            loc_13AF0:
000142D6 4442                       		neg.w	d2
000142D8 0642 0400                  		addi.w	#$400,d2
000142DC 6A00                       		bpl.s	loc_13AFA
000142DE 7400                       		moveq	#0,d2
000142E0                            
000142E0                            loc_13AFA:
000142E0 E04A                       		lsr.w	#8,d2
000142E2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000142E6 1228 0022                  		move.b	$22(a0),d1
000142EA 0201 0001                  		andi.b	#1,d1
000142EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142F4 8328 0001                  		or.b	d1,1(a0)
000142F8 6000 FEF8                  		bra.w	SAnim_Do2
000142FC                            ; ===========================================================================
000142FC                            
000142FC                            SAnim_Push:				; XREF: SAnim_RollJump
000142FC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014300 6B00                       		bmi.s	loc_13B1E
00014302 4442                       		neg.w	d2
00014304                            
00014304                            loc_13B1E:
00014304 0642 0800                  		addi.w	#$800,d2
00014308 6A00                       		bpl.s	loc_13B26
0001430A 7400                       		moveq	#0,d2
0001430C                            
0001430C                            loc_13B26:
0001430C EC4A                       		lsr.w	#6,d2
0001430E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014312 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014318 1228 0022                  		move.b	$22(a0),d1
0001431C 0201 0001                  		andi.b	#1,d1
00014320 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014326 8328 0001                  		or.b	d1,1(a0)
0001432A 6000 FEC6                  		bra.w	SAnim_Do2
0001432E                            ; End of function Sonic_Animate
0001432E                            
0001432E                            ; ===========================================================================
0001432E                            SonicAniData:
0001432E                            	include "_anim\Sonic.asm"
0001432E                            ; ---------------------------------------------------------------------------
0001432E                            ; Animation script - Sonic
0001432E                            ; ---------------------------------------------------------------------------
0001432E 0000                       		dc.w SonAni_Walk-SonicAniData
00014330 0000                       		dc.w SonAni_Run-SonicAniData
00014332 0000                       		dc.w SonAni_Roll-SonicAniData
00014334 0000                       		dc.w SonAni_Roll2-SonicAniData
00014336 0000                       		dc.w SonAni_Push-SonicAniData
00014338 0000                       		dc.w SonAni_Wait-SonicAniData
0001433A 0000                       		dc.w SonAni_Balance-SonicAniData
0001433C 0000                       		dc.w SonAni_LookUp-SonicAniData
0001433E 0000                       		dc.w SonAni_Duck-SonicAniData
00014340 0000                       		dc.w SonAni_Warp1-SonicAniData
00014342 0000                       		dc.w SonAni_Warp2-SonicAniData
00014344 0000                       		dc.w SonAni_Warp3-SonicAniData
00014346 0000                       		dc.w SonAni_Warp4-SonicAniData
00014348 0000                       		dc.w SonAni_Stop-SonicAniData
0001434A 0000                       		dc.w SonAni_Float1-SonicAniData
0001434C 0000                       		dc.w SonAni_Float2-SonicAniData
0001434E 0000                       		dc.w SonAni_Spring-SonicAniData
00014350 0000                       		dc.w SonAni_LZHang-SonicAniData
00014352 0000                       		dc.w SonAni_Leap1-SonicAniData
00014354 0000                       		dc.w SonAni_Leap2-SonicAniData
00014356 0000                       		dc.w SonAni_Surf-SonicAniData
00014358 0000                       		dc.w SonAni_Bubble-SonicAniData
0001435A 0000                       		dc.w SonAni_Death1-SonicAniData
0001435C 0000                       		dc.w SonAni_Drown-SonicAniData
0001435E 0000                       		dc.w SonAni_Death2-SonicAniData
00014360 0000                       		dc.w SonAni_Shrink-SonicAniData
00014362 0000                       		dc.w SonAni_Hurt-SonicAniData
00014364 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014366 0000                       		dc.w SonAni_Blank-SonicAniData
00014368 0000                       		dc.w SonAni_Float3-SonicAniData
0001436A 0000                       		dc.w SonAni_Float4-SonicAniData
0001436C FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00014374 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001437C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014384 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001438C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014394 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000143AA 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
000143AE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000143B2 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000143B6 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000143BA 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000143BE 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000143C2 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000143C6 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000143CA 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000143CE 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000143D6 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000143DA 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000143DE 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000143E4 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000143EA 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000143EE 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000143F6 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000143FA 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000143FE 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014402 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001440C 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00014410 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014414 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014418 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014420 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014424                            		even
00014424                            		even
00014424                            
00014424                            ; ---------------------------------------------------------------------------
00014424                            ; Sonic	pattern	loading	subroutine
00014424                            ; ---------------------------------------------------------------------------
00014424                            
00014424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014424                            
00014424                            
00014424                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014424 7000                       		moveq #0,d0
00014426 1028 001A                  		move.b $1A(a0),d0 ; load frame number
0001442A B038 F766                  		cmp.b ($FFFFF766).w,d0
0001442E 6700                       		beq.s locret_13C96
00014430 11C0 F766                  		move.b d0,($FFFFF766).w
00014434 45F9 0000 0000             		lea (SonicDynPLC).l,a2
0001443A D040                       		add.w d0,d0
0001443C D4F2 0000                  		adda.w (a2,d0.w),a2
00014440 7A00                       		moveq #0,d5
00014442 1A1A                       		move.b (a2)+,d5
00014444 5345                       		subq.w #1,d5
00014446 6B00                       		bmi.s locret_13C96
00014448 383C F000                  		move.w #$F000,d4
0001444C 2C3C 0000 0000             		move.l #Art_Sonic,d6
00014452                            
00014452                            SPLC_ReadEntry:
00014452 7200                       		moveq #0,d1
00014454 121A                       		move.b (a2)+,d1
00014456 E149                       		lsl.w #8,d1
00014458 121A                       		move.b (a2)+,d1
0001445A 3601                       		move.w d1,d3
0001445C E04B                       		lsr.w #8,d3
0001445E 0243 00F0                  		andi.w #$F0,d3
00014462 0643 0010                  		addi.w #$10,d3
00014466 0241 0FFF                  		andi.w #$FFF,d1
0001446A EB89                       		lsl.l #5,d1
0001446C D286                       		add.l d6,d1
0001446E 3404                       		move.w d4,d2
00014470 D843                       		add.w d3,d4
00014472 D843                       		add.w d3,d4
00014474 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
0001447A 51CD FFD6                  		dbf d5,SPLC_ReadEntry ; repeat for number of entries
0001447E                            
0001447E                            locret_13C96:
0001447E 4E75                       		rts 
00014480                            ; End of function LoadSonicDynPLC
00014480                            
00014480                            ; ===========================================================================
00014480                            ; ---------------------------------------------------------------------------
00014480                            ; Object 02 - Sonime
00014480                            ; ---------------------------------------------------------------------------
00014480                            
00014480                            Obj02:
00014480 7000                       		moveq	#0,d0
00014482 41F8 F5C0                  		lea	(SonimeSST).w,a0
00014486 1028 0004                  		move.b	sonime_routine(a0),d0
0001448A 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
0001448E 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
00014492                            ; ===========================================================================
00014492 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
00014494 0000                       		dc.w Obj02_MoveIn-Obj02_Index
00014496 0000                       		dc.w Obj02_Animate-Obj02_Index
00014498                            ; ===========================================================================
00014498                            
00014498                            Obj02_Init:				; XREF: Obj0A_Index
00014498 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001449C 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
000144A2 343C F400                  		move.w #(torsoart*$20),d2
000144A6 363C 00C0                  		move.w #$C0,d3
000144AA 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
000144B0 223C 0000 0000             		move.l #Art_Sonime_Head,d1
000144B6 343C F580                  		move.w #(headart*$20),d2
000144BA 363C 0140                  		move.w #$140,d3
000144BE 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
000144C4 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
000144CA 343C F300                  		move.w #(hairart*$20),d2
000144CE 363C 0080                  		move.w #$80,d3
000144D2 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
000144D8 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
000144DE 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000144E4                            
000144E4                            Obj02_MoveIn:
000144E4 5528 0017                  		subq.b	#2,sonime_movein(a0)
000144E8 1028 0017                  		move.b	sonime_movein(a0),d0
000144EC 1140 0002                  		move.b	d0,sonime_headx(a0)
000144F0 1140 0016                  		move.b	d0,sonime_torsox(a0)
000144F4 1140 0009                  		move.b	d0,sonime_hairx(a0)
000144F8 4A00                       		tst.b	d0
000144FA 6600 0000                  		bne.w	Obj02_Display
000144FE 5428 0004                  		addq.b	#2,sonime_routine(a0)
00014502                            
00014502                            Obj02_Animate:
00014502 5350                       		subi.w	#1,sonime_headtimer(a0)
00014504 6A00 0000                  		bpl.w	Obj02_Face
00014508 4EB8 28C6                  		jsr	RandomNumber
0001450C 0240 003F                  		andi.w	#$3F,d0
00014510 0640 0080                  		addi.w	#$80,d0
00014514 3080                       		move.w	d0,sonime_headtimer(a0)
00014516 4EB8 28C6                  		jsr	RandomNumber
0001451A 0240 0006                  		andi.w	#6,d0
0001451E 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
00014522 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
00014526                            
00014526                            ; ===========================================================================
00014526 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
00014528 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
0001452A 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
0001452C 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
0001452E                            ; ===========================================================================
0001452E                            
0001452E                            Obj02_Up:
0001452E 4A28 0003                  		tst.b	sonime_heady(a0)
00014532 6D00                       		blt.s	Obj02_Down
00014534 5328 0003                  		subi.b	#1,sonime_heady(a0)
00014538 6000                       		bra.s	Obj02_Face
0001453A                            
0001453A                            Obj02_Down:
0001453A 4A28 0003                  		tst.b	sonime_heady(a0)
0001453E 6EEE                       		bgt.s	Obj02_Up
00014540 5228 0003                  		addi.b	#1,sonime_heady(a0)
00014544 6000                       		bra.s	Obj02_Face
00014546                            
00014546                            Obj02_Left:
00014546 4A28 0002                  		tst.b	sonime_headx(a0)
0001454A 6D00                       		blt.s	Obj02_Right
0001454C 5328 0002                  		subi.b	#1,sonime_headx(a0)
00014550 6000                       		bra.s	Obj02_Face
00014552                            
00014552                            Obj02_Right:
00014552 4A28 0002                  		tst.b	sonime_headx(a0)
00014556 6EEE                       		bgt.s	Obj02_Left
00014558 5228 0002                  		addi.b	#1,sonime_headx(a0)
0001455C                            
0001455C                            Obj02_Face:
0001455C 4A38 FE12                  		tst.b	($FFFFFE12).w
00014560 6700                       		beq.s	@NoWait
00014562 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
00014568 6700                       		beq.s	@UnBlink
0001456A 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
0001456E 6A00                       		bpl.s	@NoWait
00014570 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
00014576 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
0001457C 6000                       		bra.s	@NoWait
0001457E                            
0001457E                            	@UnBlink:
0001457E 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00014582 6A00                       		bpl.s	@NoWait
00014584 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
0001458A 4EB8 28C6                  		jsr	RandomNumber
0001458E 0240 003F                  		andi.w	#$3F,d0
00014592 0640 00B0                  		addi.w	#$B0,d0
00014596 3140 0010                  		move.w	d0,sonime_facetimer(a0)
0001459A 4EB8 28C6                  		jsr	RandomNumber
0001459E 0200 000F                  		andi.b	#$F,d0
000145A2 4A00                       		tst.b	d0
000145A4 6700                       		beq.s	@NoBlink
000145A6 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
000145AC 0C00 0001                  		cmpi.b	#1,d0
000145B0 6700                       		beq.s	@NoBlink
000145B2 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
000145B8 0C00 0002                  		cmpi.b	#2,d0
000145BC 6700                       		beq.s	@NoBlink
000145BE 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
000145C4                            
000145C4                            	@NoBlink:
000145C4 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
000145CA 6600                       		bne.s	@NoWait
000145CC 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
000145D2 6500                       		bcs.s	@NoWait
000145D4 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
000145DA                            
000145DA                            	@NoWait:
000145DA 0C78 0800 D010             		cmpi.w	#$800,($FFFFD010).w
000145E0 6D00                       		blt.s	@TooSlow
000145E2 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
000145E8                            
000145E8                            	@TooSlow:
000145E8 0C78 F800 D010             		cmpi.w	#-$800,($FFFFD010).w
000145EE 6E00                       		bgt.s	@TooSlow2
000145F0 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
000145F6                            
000145F6                            	@TooSlow2:
000145F6 7800                       		moveq	#0,d4
000145F8 1828 000E                  		move.b	sonime_face(a0),d4
000145FC B828 000F                  		cmp.b	sonime_faceold(a0),d4
00014600 6700                       		beq.s	Obj02_Ear
00014602 1144 000F                  		move.b	d4,sonime_faceold(a0)
00014606 ED4C                       		lsl.w	#6,d4
00014608 3A04                       		move.w	d4,d5
0001460A DA45                       		add.w	d5,d5
0001460C D845                       		add.w	d5,d4
0001460E 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00014614 D244                       		add.w	d4,d1
00014616 343C F5C0                  		move.w #(headart*$20+$40),d2
0001461A 363C 0020                  		move.w #$20,d3
0001461E 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00014624 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
0001462A D244                       		add.w	d4,d1
0001462C 343C F640                  		move.w #(headart*$20+$C0),d2
00014630 363C 0020                  		move.w #$20,d3
00014634 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
0001463A 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
00014640 D244                       		add.w	d4,d1
00014642 343C F6C0                  		move.w #(headart*$20+$140),d2
00014646 363C 0020                  		move.w #$20,d3
0001464A 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00014650                            
00014650                            Obj02_Ear:
00014650 4A28 0012                  		tst.b	sonime_ear(a0)
00014654 6600                       		bne.s	@UnTwitch
00014656 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
0001465A 6A00                       		bpl.s	@NoTwitch
0001465C 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
00014662 4EB8 28C6                  		jsr	RandomNumber
00014666 0200 0001                  		andi.b	#1,d0
0001466A 5200                       		addq.b	#1,d0
0001466C 1140 0012                  		move.b	d0,sonime_ear(a0)
00014670 6000                       		bra.s	@NoTwitch
00014672                            
00014672                            	@UnTwitch:
00014672 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00014676 6A00                       		bpl.s	@NoTwitch
00014678 117C 0000 0012             		move.b	#0,sonime_ear(a0)
0001467E 4EB8 28C6                  		jsr	RandomNumber
00014682 0240 007F                  		andi.w	#$7F,d0
00014686 0640 0100                  		addi.w	#$100,d0
0001468A 3140 0014                  		move.w	d0,sonime_eartimer(a0)
0001468E                            
0001468E                            	@NoTwitch:
0001468E 7800                       		moveq	#0,d4
00014690 1828 0012                  		move.b	sonime_ear(a0),d4
00014694 B828 0013                  		cmp.b	sonime_earold(a0),d4
00014698 6700                       		beq.s	Obj02_Display
0001469A 1144 0013                  		move.b	d4,sonime_earold(a0)
0001469E EB0C                       		lsl.b	#5,d4
000146A0 0204 0020                  		andi.b	#$20,d4
000146A4 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
000146AA D284                       		add.l	d4,d1
000146AC 343C F580                  		move.w #(headart*$20),d2
000146B0 363C 0010                  		move.w #$10,d3
000146B4 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
000146BA 7800                       		moveq	#0,d4
000146BC 1828 0012                  		move.b	sonime_ear(a0),d4
000146C0 EB0C                       		lsl.b	#5,d4
000146C2 0204 0040                  		andi.b	#$40,d4
000146C6 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
000146CC D284                       		add.l	d4,d1
000146CE 343C F680                  		move.w #(headart*$20+$100),d2
000146D2 363C 0020                  		move.w #$20,d3
000146D6 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
000146DC                            
000146DC                            Obj02_Display:
000146DC 7200                       		moveq	#0,d1
000146DE 7400                       		moveq	#0,d2
000146E0 7600                       		moveq	#0,d3
000146E2 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
000146E6 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
000146EA 4883                       		ext.w	d3
000146EC 4882                       		ext.w	d2
000146EE 0643 01A0                  		addi.w	#$1A0,d3
000146F2 0642 0140                  		addi.w	#$140,d2
000146F6 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
000146FC 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00014700 D241                       		add.w	d1,d1
00014702 D2F1 1000                  		adda.w	(a1,d1.w),a1
00014706 1219                       		move.b	(a1)+,d1
00014708 5301                       		subq.b	#1,d1
0001470A 6B00                       		bmi.s	@nextspr
0001470C 6100 97DE                  		bsr.w	DrawSprite_Loop
00014710                            
00014710                            	@nextspr:
00014710 7200                       		moveq	#0,d1
00014712 7600                       		moveq	#0,d3
00014714 1628 0016                  		move.b	sonime_torsox(a0),d3
00014718 0643 01A0                  		add.w	#$1A0,d3	; set X pos
0001471C 343C 0154                  		move.w	#$154,d2	; set Y pos
00014720 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00014726 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
0001472A D241                       		add.w	d1,d1
0001472C D2F1 1000                  		adda.w	(a1,d1.w),a1
00014730 1219                       		move.b	(a1)+,d1
00014732 5301                       		subq.b	#1,d1
00014734 6B00                       		bmi.s	@nextspr2
00014736 6100 97B4                  		bsr.w	DrawSprite_Loop
0001473A                            
0001473A                            	@nextspr2:
0001473A 7200                       		moveq	#0,d1
0001473C 7400                       		moveq	#0,d2
0001473E 7600                       		moveq	#0,d3
00014740 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00014744 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00014748 4883                       		ext.w	d3
0001474A 4882                       		ext.w	d2
0001474C 0643 01A0                  		addi.w	#$1A0,d3
00014750 0642 0153                  		addi.w	#$153,d2
00014754 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
0001475A 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00014760 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00014766 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
0001476C 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00014772 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00014778 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
0001477E 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00014782 D241                       		add.w	d1,d1
00014784 D2F1 1000                  		adda.w	(a1,d1.w),a1
00014788 1219                       		move.b	(a1)+,d1
0001478A 5301                       		subq.b	#1,d1
0001478C 6B00                       		bmi.s	Obj02_Done
0001478E 6100 975C                  		bsr.w	DrawSprite_Loop
00014792                            
00014792                            Obj02_Done:		
00014792 4E75                       		rts	
00014794                            
00014794                            ; ---------------------------------------------------------------------------
00014794                            ; Sprite mappings - sonime
00014794                            ; ---------------------------------------------------------------------------
00014794                            Map_sonime_torso:
00014794                            	include "_maps\sonime_torso.asm"
00014794                            ; ================================================================================
00014794                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00014794                            ; ================================================================================
00014794                            
00014794                            DATAUI6DX8OCWY:
00014794 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00014796 01                         DATAUI6DX8OCWY_0: dc.b $1
00014797 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0001479C                            	even
0001479C                            	even
0001479C                            
0001479C                            Map_sonime_head:
0001479C                            	include "_maps\sonime_head.asm"
0001479C                            ; ================================================================================
0001479C                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
0001479C                            ; ================================================================================
0001479C                            
0001479C                            DATAYDZD849MEMA:
0001479C 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
0001479E 03                         DATAYDZD849MEMA_0: dc.b $3
0001479F E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
000147A4 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
000147A9 1000 0013 00               	dc.b $10, $0, $0, $13, $0
000147AE                            	even
000147AE                            	even
000147AE                            
000147AE                            Map_sonime_hair:
000147AE                            	include "_maps\sonime_hair.asm"
000147AE                            ; ================================================================================
000147AE                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
000147AE                            ; ================================================================================
000147AE                            
000147AE                            DATAQZ9CZ11E8T:
000147AE 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
000147B0 03                         DATAQZ9CZ11E8T_0: dc.b $3
000147B1 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
000147B6 FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
000147BB FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
000147C0                            	even
000147C0                            	even
000147C0                            
000147C0                            ; ===========================================================================
000147C0                            ; ---------------------------------------------------------------------------
000147C0                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000147C0                            ; ---------------------------------------------------------------------------
000147C0                            
000147C0                            Obj0A:					; XREF: Obj_Index
000147C0 7000                       		moveq	#0,d0
000147C2 1028 0024                  		move.b	$24(a0),d0
000147C6 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000147CA 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000147CE                            ; ===========================================================================
000147CE 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000147D2 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000147D6 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000147DA 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000147DE 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            Obj0A_Main:				; XREF: Obj0A_Index
000147E0 5428 0024                  		addq.b	#2,$24(a0)
000147E4 217C 0001 312A 0004        		move.l	#Map_obj64,4(a0)
000147EC 317C 8348 0002             		move.w	#$8348,2(a0)
000147F2 117C 0084 0001             		move.b	#$84,1(a0)
000147F8 117C 0010 0019             		move.b	#$10,$19(a0)
000147FE 117C 0001 0018             		move.b	#1,$18(a0)
00014804 1028 0028                  		move.b	$28(a0),d0
00014808 6A00                       		bpl.s	loc_13D00
0001480A 5028 0024                  		addq.b	#8,$24(a0)
0001480E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014816 317C 0440 0002             		move.w	#$440,2(a0)
0001481C 0240 007F                  		andi.w	#$7F,d0
00014820 1140 0033                  		move.b	d0,$33(a0)
00014824 6000 0000                  		bra.w	Obj0A_Countdown
00014828                            ; ===========================================================================
00014828                            
00014828                            loc_13D00:
00014828 1140 001C                  		move.b	d0,$1C(a0)
0001482C 3168 0008 0030             		move.w	8(a0),$30(a0)
00014832 317C FF78 0012             		move.w	#-$88,$12(a0)
00014838                            
00014838                            Obj0A_Animate:				; XREF: Obj0A_Index
00014838 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001483E 4EB9 0000 AE7A             		jsr	AnimateSprite
00014844                            
00014844                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014844 3038 F646                  		move.w	($FFFFF646).w,d0
00014848 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001484C 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001484E 117C 0006 0024             		move.b	#6,$24(a0)
00014854 5E28 001C                  		addq.b	#7,$1C(a0)
00014858 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001485E 6700                       		beq.s	Obj0A_Display
00014860 6000                       		bra.s	Obj0A_Display
00014862                            ; ===========================================================================
00014862                            
00014862                            Obj0A_Wobble:
00014862 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014866 6700                       		beq.s	loc_13D44
00014868 5868 0030                  		addq.w	#4,$30(a0)
0001486C                            
0001486C                            loc_13D44:
0001486C 1028 0026                  		move.b	$26(a0),d0
00014870 5228 0026                  		addq.b	#1,$26(a0)
00014874 0240 007F                  		andi.w	#$7F,d0
00014878 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001487E 1031 0000                  		move.b	(a1,d0.w),d0
00014882 4880                       		ext.w	d0
00014884 D068 0030                  		add.w	$30(a0),d0
00014888 3140 0008                  		move.w	d0,8(a0)
0001488C 6100                       		bsr.s	Obj0A_ShowNumber
0001488E 4EBA 94CC                  		jsr	SpeedToPos
00014892 4A28 0001                  		tst.b	1(a0)
00014896 6A00                       		bpl.s	Obj0A_Delete
00014898 4EFA 94E8                  		jmp	DisplaySprite
0001489C                            ; ===========================================================================
0001489C                            
0001489C                            Obj0A_Delete:
0001489C 4EFA 9520                  		jmp	DeleteObject
000148A0                            ; ===========================================================================
000148A0                            
000148A0                            Obj0A_Display:				; XREF: Obj0A_Index
000148A0 6100                       		bsr.s	Obj0A_ShowNumber
000148A2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148A8 4EB9 0000 AE7A             		jsr	AnimateSprite
000148AE 4EFA 94D2                  		jmp	DisplaySprite
000148B2                            ; ===========================================================================
000148B2                            
000148B2                            Obj0A_Delete2:				; XREF: Obj0A_Index
000148B2 4EFA 950A                  		jmp	DeleteObject
000148B6                            ; ===========================================================================
000148B6                            
000148B6                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000148B6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000148BC 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000148BE 5368 0038                  		subq.w	#1,$38(a0)
000148C2 6600                       		bne.s	Obj0A_Display2
000148C4 117C 000E 0024             		move.b	#$E,$24(a0)
000148CA 5E28 001C                  		addq.b	#7,$1C(a0)
000148CE 60D0                       		bra.s	Obj0A_Display
000148D0                            ; ===========================================================================
000148D0                            
000148D0                            Obj0A_Display2:
000148D0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148D6 4EB9 0000 AE7A             		jsr	AnimateSprite
000148DC 4A28 0001                  		tst.b	1(a0)
000148E0 6A00                       		bpl.s	Obj0A_Delete3
000148E2 4EFA 949E                  		jmp	DisplaySprite
000148E6                            ; ===========================================================================
000148E6                            
000148E6                            Obj0A_Delete3:
000148E6 4EFA 94D6                  		jmp	DeleteObject
000148EA                            ; ===========================================================================
000148EA                            
000148EA                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148EA 4A68 0038                  		tst.w	$38(a0)
000148EE 6700                       		beq.s	locret_13E1A
000148F0 5368 0038                  		subq.w	#1,$38(a0)
000148F4 6600                       		bne.s	locret_13E1A
000148F6 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148FC 6400                       		bcc.s	locret_13E1A
000148FE 317C 000F 0038             		move.w	#$F,$38(a0)
00014904 4268 0012                  		clr.w	$12(a0)
00014908 117C 0080 0001             		move.b	#$80,1(a0)
0001490E 3028 0008                  		move.w	8(a0),d0
00014912 9078 F700                  		sub.w	($FFFFF700).w,d0
00014916 0640 0080                  		addi.w	#$80,d0
0001491A 3140 0008                  		move.w	d0,8(a0)
0001491E 3028 000C                  		move.w	$C(a0),d0
00014922 9078 F704                  		sub.w	($FFFFF704).w,d0
00014926 0640 0080                  		addi.w	#$80,d0
0001492A 3140 000A                  		move.w	d0,$A(a0)
0001492E 117C 000C 0024             		move.b	#$C,$24(a0)
00014934                            
00014934                            locret_13E1A:
00014934 4E75                       		rts	
00014936                            ; ===========================================================================
00014936                            Obj0A_WobbleData:
00014936 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014947 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014958 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014969 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014979 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014986 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014993 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000149A0 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000149AD FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000149B6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000149C7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000149D8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000149E9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000149F9 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014A06 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014A13 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014A20 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014A2D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014A36                            ;===========================================================================
00014A36                            
00014A36                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014A36 4A68 002C                  		tst.w	$2C(a0)
00014A3A 6600 0000                  		bne.w	loc_13F86
00014A3E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014A44 6400 0000                  		bcc.w	locret_1408C
00014A48 0838 0006 D022             		btst	#6,($FFFFD022).w
00014A4E 6700 0000                  		beq.w	locret_1408C
00014A52 5368 0038                  		subq.w	#1,$38(a0)
00014A56 6A00 0000                  		bpl.w	loc_13FAC
00014A5A 317C 003B 0038             		move.w	#59,$38(a0)
00014A60 317C 0001 0036             		move.w	#1,$36(a0)
00014A66 4EB9 0000 28C6             		jsr	(RandomNumber).l
00014A6C 0240 0001                  		andi.w	#1,d0
00014A70 1140 0034                  		move.b	d0,$34(a0)
00014A74 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014A78 0C40 0019                  		cmpi.w	#$19,d0
00014A7C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014A7E 0C40 0014                  		cmpi.w	#$14,d0
00014A82 6700                       		beq.s	Obj0A_WarnSound
00014A84 0C40 000F                  		cmpi.w	#$F,d0
00014A88 6700                       		beq.s	Obj0A_WarnSound
00014A8A 0C40 000C                  		cmpi.w	#$C,d0
00014A8E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014A90 6600                       		bne.s	loc_13F02
00014A92 303C 0092                  		move.w	#$92,d0
00014A96 4EB9 0000 125C             		jsr	(PlaySound).l	; play countdown music
00014A9C                            
00014A9C                            loc_13F02:
00014A9C 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014AA2 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00014AA8 5328 0032                  		subq.b	#1,$32(a0)
00014AAC 6A00                       		bpl.s	Obj0A_ReduceAir
00014AAE 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014AB4 08E8 0007 0036             		bset	#7,$36(a0)
00014ABA 6000                       		bra.s	Obj0A_ReduceAir
00014ABC                            ; ===========================================================================
00014ABC                            
00014ABC                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014ABC 303C 00C2                  		move.w	#$C2,d0
00014AC0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014AC6                            
00014AC6                            Obj0A_ReduceAir:
00014AC6 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014ACA 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014ACE 6100 0000                  		bsr.w	ResumeMusic
00014AD2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014AD8 303C 00B2                  		move.w	#$B2,d0
00014ADC 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play drowning sound
00014AE2 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00014AE8 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014AEE 117C 000A 0034             		move.b	#$A,$34(a0)
00014AF4 317C 0001 0036             		move.w	#1,$36(a0)
00014AFA 317C 0078 002C             		move.w	#$78,$2C(a0)
00014B00 2F08                       		move.l	a0,-(sp)
00014B02 41F8 D000                  		lea	($FFFFD000).w,a0
00014B06 6100 F476                  		bsr.w	Sonic_ResetOnFloor
00014B0A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014B10 08E8 0001 0022             		bset	#1,$22(a0)
00014B16 08E8 0007 0002             		bset	#7,2(a0)
00014B1C 317C 0000 0012             		move.w	#0,$12(a0)
00014B22 317C 0000 0010             		move.w	#0,$10(a0)
00014B28 317C 0000 0014             		move.w	#0,$14(a0)
00014B2E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014B34 205F                       		movea.l	(sp)+,a0
00014B36 4E75                       		rts	
00014B38                            ; ===========================================================================
00014B38                            
00014B38                            loc_13F86:
00014B38 5368 002C                  		subq.w	#1,$2C(a0)
00014B3C 6600                       		bne.s	loc_13F94
00014B3E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014B44 4E75                       		rts	
00014B46                            ; ===========================================================================
00014B46                            
00014B46                            loc_13F94:
00014B46 2F08                       		move.l	a0,-(sp)
00014B48 41F8 D000                  		lea	($FFFFD000).w,a0
00014B4C 4EBA 920E                  		jsr	SpeedToPos
00014B50 0668 0010 0012             		addi.w	#$10,$12(a0)
00014B56 205F                       		movea.l	(sp)+,a0
00014B58 6000                       		bra.s	loc_13FAC
00014B5A                            ; ===========================================================================
00014B5A                            
00014B5A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014B5A 6000                       		bra.s	Obj0A_MakeItem
00014B5C                            ; ===========================================================================
00014B5C                            
00014B5C                            loc_13FAC:
00014B5C 4A68 0036                  		tst.w	$36(a0)
00014B60 6700 0000                  		beq.w	locret_1408C
00014B64 5368 003A                  		subq.w	#1,$3A(a0)
00014B68 6A00 0000                  		bpl.w	locret_1408C
00014B6C                            
00014B6C                            Obj0A_MakeItem:
00014B6C 4EB9 0000 28C6             		jsr	(RandomNumber).l
00014B72 0240 000F                  		andi.w	#$F,d0
00014B76 3140 003A                  		move.w	d0,$3A(a0)
00014B7A 4EBA 9692                  		jsr	SingleObjLoad
00014B7E 6600 0000                  		bne.w	locret_1408C
00014B82 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014B86 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014B8C 7006                       		moveq	#6,d0
00014B8E 0838 0000 D022             		btst	#0,($FFFFD022).w
00014B94 6700                       		beq.s	loc_13FF2
00014B96 4440                       		neg.w	d0
00014B98 137C 0040 0026             		move.b	#$40,$26(a1)
00014B9E                            
00014B9E                            loc_13FF2:
00014B9E D169 0008                  		add.w	d0,8(a1)
00014BA2 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014BA8 137C 0006 0028             		move.b	#6,$28(a1)
00014BAE 4A68 002C                  		tst.w	$2C(a0)
00014BB2 6700 0000                  		beq.w	loc_1403E
00014BB6 0268 0007 003A             		andi.w	#7,$3A(a0)
00014BBC 0668 0000 003A             		addi.w	#0,$3A(a0)
00014BC2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014BC6 0440 000C                  		subi.w	#$C,d0
00014BCA 3340 000C                  		move.w	d0,$C(a1)
00014BCE 4EB9 0000 28C6             		jsr	(RandomNumber).l
00014BD4 1340 0026                  		move.b	d0,$26(a1)
00014BD8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014BDC 0200 0003                  		andi.b	#3,d0
00014BE0 6600                       		bne.s	loc_14082
00014BE2 137C 000E 0028             		move.b	#$E,$28(a1)
00014BE8 6000                       		bra.s	loc_14082
00014BEA                            ; ===========================================================================
00014BEA                            
00014BEA                            loc_1403E:
00014BEA 0828 0007 0036             		btst	#7,$36(a0)
00014BF0 6700                       		beq.s	loc_14082
00014BF2 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014BF6 E24A                       		lsr.w	#1,d2
00014BF8 4EB9 0000 28C6             		jsr	(RandomNumber).l
00014BFE 0240 0003                  		andi.w	#3,d0
00014C02 6600                       		bne.s	loc_1406A
00014C04 08E8 0006 0036             		bset	#6,$36(a0)
00014C0A 6600                       		bne.s	loc_14082
00014C0C 1342 0028                  		move.b	d2,$28(a1)
00014C10 337C 001C 0038             		move.w	#$1C,$38(a1)
00014C16                            
00014C16                            loc_1406A:
00014C16 4A28 0034                  		tst.b	$34(a0)
00014C1A 6600                       		bne.s	loc_14082
00014C1C 08E8 0006 0036             		bset	#6,$36(a0)
00014C22 6600                       		bne.s	loc_14082
00014C24 1342 0028                  		move.b	d2,$28(a1)
00014C28 337C 001C 0038             		move.w	#$1C,$38(a1)
00014C2E                            
00014C2E                            loc_14082:
00014C2E 5328 0034                  		subq.b	#1,$34(a0)
00014C32 6A00                       		bpl.s	locret_1408C
00014C34 4268 0036                  		clr.w	$36(a0)
00014C38                            
00014C38                            locret_1408C:
00014C38 4E75                       		rts	
00014C3A                            
00014C3A                            ; ---------------------------------------------------------------------------
00014C3A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014C3A                            ; ---------------------------------------------------------------------------
00014C3A                            
00014C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C3A                            
00014C3A                            
00014C3A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014C3A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014C40 6200                       		bhi.s	loc_140AC
00014C42 303C 0082                  		move.w	#$82,d0		; play LZ music
00014C46 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00014C4C 6600                       		bne.s	loc_140A6
00014C4E 303C 0086                  		move.w	#$86,d0		; play SBZ music
00014C52                            
00014C52                            loc_140A6:
00014C52 4EB9 0000 125C             		jsr	(PlaySound).l
00014C58 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00014C5E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00014C64                            
00014C64                            loc_140AC:
00014C64 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014C6A 4238 D372                  		clr.b	($FFFFD372).w
00014C6E 4E75                       		rts	
00014C70                            ; End of function ResumeMusic
00014C70                            
00014C70                            ; ===========================================================================
00014C70                            Ani_obj0A:
00014C70                            	include "_anim\obj0A.asm"
00014C70                            ; ---------------------------------------------------------------------------
00014C70                            ; Animation script - countdown numbers and bubbles (LZ)
00014C70                            ; ---------------------------------------------------------------------------
00014C70 0000                       		dc.w byte_140D6-Ani_obj0A
00014C72 0000                       		dc.w byte_140E0-Ani_obj0A
00014C74 0000                       		dc.w byte_140EA-Ani_obj0A
00014C76 0000                       		dc.w byte_140F4-Ani_obj0A
00014C78 0000                       		dc.w byte_140FE-Ani_obj0A
00014C7A 0000                       		dc.w byte_14108-Ani_obj0A
00014C7C 0000                       		dc.w byte_14112-Ani_obj0A
00014C7E 0000                       		dc.w byte_14118-Ani_obj0A
00014C80 0000                       		dc.w byte_14120-Ani_obj0A
00014C82 0000                       		dc.w byte_14128-Ani_obj0A
00014C84 0000                       		dc.w byte_14130-Ani_obj0A
00014C86 0000                       		dc.w byte_14138-Ani_obj0A
00014C88 0000                       		dc.w byte_14140-Ani_obj0A
00014C8A 0000                       		dc.w byte_14148-Ani_obj0A
00014C8C 0000                       		dc.w byte_1414A-Ani_obj0A
00014C8E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014C98 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014CA2 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014CAC 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014CB6 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014CC0 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014CCA 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014CD0 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014CD8 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014CE0 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014CE8 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014CF0 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014CF8 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014D00 0EFC                       byte_14148:	dc.b $E, $FC
00014D02 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014D08                            		even
00014D08                            		even
00014D08                            
00014D08                            ; ---------------------------------------------------------------------------
00014D08                            ; Sprite mappings - drowning countdown numbers (LZ)
00014D08                            ; ---------------------------------------------------------------------------
00014D08                            Map_obj0A:
00014D08                            	include "_maps\obj0A.asm"
00014D08                            ; ---------------------------------------------------------------------------
00014D08                            ; Sprite mappings - drowning countdown numbers (LZ)
00014D08                            ; ---------------------------------------------------------------------------
00014D08 0000                       		dc.w byte_14152-Map_obj0A
00014D0A 01                         byte_14152:	dc.b 1
00014D0B E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014D10                            		even
00014D10                            		even
00014D10                            
00014D10                            ; ===========================================================================
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            ; Object 38 - shield
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            
00014D10                            Obj38: ; XREF: Obj_Index
00014D10 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
00014D16 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00014D1A                            ; In this case, VRAM = $541*20
00014D1A 363C 0200                  		move.w #$200,d3
00014D1E 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00014D24                            ; ---------------------------------------------------------------------------
00014D24                            
00014D24                            ShieldObj_Main:
00014D24 7000                       		moveq #0,d0
00014D26 1028 0024                  		move.b $24(a0),d0
00014D2A 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00014D2E 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00014D32                            ; ===========================================================================
00014D32                            Shield_Index:
00014D32 0000                       		dc.w Shield_Init-Shield_Index
00014D34 0000                       		dc.w ShieldChecks-Shield_Index
00014D36                            ; ===========================================================================
00014D36                            
00014D36                            Shield_Init:
00014D36 5428 0024                  		addq.b #2,$24(a0)
00014D3A 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
00014D42 117C 0004 0001             		move.b #4,1(a0)
00014D48 117C 0001 0018             		move.b #1,$18(a0)
00014D4E 117C 0018 0019             		move.b #$18,$19(a0)
00014D54 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00014D5A 0838 0007 D002             		btst #7,($FFFFD002).w
00014D60 6700                       		beq.s ShieldChecks
00014D62 08E8 0007 0002             		bset #7,2(a0)
00014D68                            ; ---------------------------------------------------------------------------
00014D68                            
00014D68                            ShieldChecks:
00014D68 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00014D6C 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00014D6E 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00014D72 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00014D74                            
00014D74                            ShieldProperties:
00014D74 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00014D7A 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00014D80 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00014D86 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
00014D8C 4EB9 0000 AE7A             		jsr AnimateSprite
00014D92 4EFA 8FEE                  		jmp DisplaySprite
00014D96                            
00014D96                            SonicHasShield:
00014D96 4E75                       		rts
00014D98                            
00014D98                            jmp_DeleteObj38: ; loc_12648:
00014D98 4EFA 9024                  		jmp DeleteObject 
00014D9C                            
00014D9C                            ; ---------------------------------------------------------------------------
00014D9C                            ; Object 4A - New Invincibility Object
00014D9C                            ; ---------------------------------------------------------------------------
00014D9C                            
00014D9C                            Obj4A: ; XREF: Obj_Index
00014D9C 223C 0000 0000             		move.l #UnC_Stars,d1
00014DA2 343C A820                  		move.w #$A820,d2
00014DA6 363C 0240                  		move.w #$240,d3
00014DAA 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00014DB0                            
00014DB0                            Invincibility_Main:
00014DB0 7000                       		moveq #0,d0
00014DB2 1028 0024                  		move.b $24(a0),d0
00014DB6                            
00014DB6                            Invincibility_Init:
00014DB6 5428 0024                  		addq.b #2,$24(a0)
00014DBA 217C 0000 0000 0004        		move.l #Map_obj38,4(a0) ; loads mapping
00014DC2 117C 0004 0001             		move.b #4,1(a0)
00014DC8 117C 0001 0018             		move.b #1,$18(a0)
00014DCE 117C 0010 0019             		move.b #$10,$19(a0)
00014DD4 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00014DDA                            ; ===========================================================================
00014DDA                            
00014DDA                            Obj4A_Stars: ; XREF: Obj38_Index
00014DDA 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00014DDE 6700                       		beq.s Obj4A_Delete2 ; if not, branch
00014DE0 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00014DE4 1228 001C                  		move.b $1C(a0),d1
00014DE8 5301                       		subq.b #1,d1
00014DEA                            ; ===========================================================================
00014DEA                            
00014DEA                            Obj4A_StarTrail: ; XREF: Obj4A_Stars
00014DEA E709                       		lsl.b #3,d1
00014DEC 1401                       		move.b d1,d2
00014DEE D201                       		add.b d1,d1
00014DF0 D202                       		add.b d2,d1
00014DF2 5801                       		addq.b #4,d1
00014DF4 9001                       		sub.b d1,d0
00014DF6 1228 0030                  		move.b $30(a0),d1
00014DFA 9001                       		sub.b d1,d0
00014DFC 5801                       		addq.b #4,d1
00014DFE 0C01 0018                  		cmpi.b #$18,d1
00014E02 6500                       		bcs.s Obj4A_StarTrail2
00014E04 7200                       		moveq #0,d1
00014E06                            
00014E06                            Obj4A_StarTrail2:
00014E06 1141 0030                  		move.b d1,$30(a0)
00014E0A                            
00014E0A                            Obj4A_StarTrail2a:
00014E0A 43F8 CB00                  		lea ($FFFFCB00).w,a1
00014E0E 43F1 0000                  		lea (a1,d0.w),a1
00014E12 3159 0008                  		move.w (a1)+,8(a0)
00014E16 3159 000C                  		move.w (a1)+,$C(a0)
00014E1A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
00014E20 43F9 0000 0000             		lea (Ani_obj38).l,a1
00014E26 4EB9 0000 AE7A             		jsr (AnimateSprite).l
00014E2C 4EF9 0000 DD82             		jmp (DisplaySprite).l
00014E32                            ; ===========================================================================
00014E32                            
00014E32                            Obj4A_Delete2: ; XREF: Obj4A_Stars
00014E32 4EF9 0000 DDBE             		jmp (DeleteObject).l 
00014E38                            
00014E38                            ; ===========================================================================
00014E38                            ; ---------------------------------------------------------------------------
00014E38                            ; Object 08 - water splash (LZ)
00014E38                            ; ---------------------------------------------------------------------------
00014E38                            
00014E38                            Obj08:					; XREF: Obj_Index
00014E38 7000                       		moveq	#0,d0
00014E3A 1028 0024                  		move.b	$24(a0),d0
00014E3E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014E42 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014E46                            ; ===========================================================================
00014E46 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014E48 0000                       		dc.w Obj08_Display-Obj08_Index
00014E4A 0000                       		dc.w Obj08_Delete-Obj08_Index
00014E4C                            ; ===========================================================================
00014E4C                            
00014E4C                            Obj08_Main:				; XREF: Obj08_Index
00014E4C 5428 0024                  		addq.b	#2,$24(a0)
00014E50 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E58 0028 0004 0001             		ori.b	#4,1(a0)
00014E5E 117C 0001 0018             		move.b	#1,$18(a0)
00014E64 117C 0010 0019             		move.b	#$10,$19(a0)
00014E6A 317C 4259 0002             		move.w	#$4259,2(a0)
00014E70 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E76                            
00014E76                            Obj08_Display:				; XREF: Obj08_Index
00014E76 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E7C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E82 4EB9 0000 AE7A             		jsr	AnimateSprite
00014E88 4EFA 8EF8                  		jmp	DisplaySprite
00014E8C                            ; ===========================================================================
00014E8C                            
00014E8C                            Obj08_Delete:				; XREF: Obj08_Index
00014E8C 4EFA 8F30                  		jmp	DeleteObject	; delete when animation	is complete
00014E90                            ; ===========================================================================
00014E90                            Ani_obj38:
00014E90                            	include "_anim\obj38.asm"
00014E90                            ; ---------------------------------------------------------------------------
00014E90                            ; Animation script - shield and invincibility stars
00014E90                            ; ---------------------------------------------------------------------------
00014E90 0000                       		dc.w byte_14356-Ani_obj38
00014E92 0000                       		dc.w byte_1435E-Ani_obj38
00014E94 0000                       		dc.w byte_14364-Ani_obj38
00014E96 0000                       		dc.w byte_1437E-Ani_obj38
00014E98 0000                       		dc.w byte_14398-Ani_obj38
00014E9A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014EA2 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014EA8 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014EB9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014EC2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014ED3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014EDC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014EED 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014EF6                            		even
00014EF6                            		even
00014EF6                            
00014EF6                            ; ---------------------------------------------------------------------------
00014EF6                            ; Sprite mappings - shield and invincibility stars
00014EF6                            ; ---------------------------------------------------------------------------
00014EF6                            Map_obj38:
00014EF6                            	include "_maps\obj38.asm"
00014EF6                            ; ---------------------------------------------------------------------------
00014EF6                            ; Sprite mappings - shield and invincibility stars
00014EF6                            ; ---------------------------------------------------------------------------
00014EF6 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EFA 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EFE 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014F02 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014F06 04                         byte_143C2:	dc.b 4
00014F07 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F0C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F11 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014F16 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F1B 04                         byte_143D7:	dc.b 4
00014F1C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014F21 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014F26 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014F2B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014F30 04                         byte_143EC:	dc.b 4
00014F31 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F36 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F3B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F40 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F45 04                         byte_14401:	dc.b 4
00014F46 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F4B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F50 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F55 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F5A 04                         byte_14416:	dc.b 4
00014F5B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F60 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F65 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F6A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F6F 04                         byte_1442B:	dc.b 4
00014F70 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F75 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F7A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F7F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F84 04                         byte_14440:	dc.b 4
00014F85 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F8A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F8F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F94 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F9A 00                         		even
00014F9A 00                         		even
00014F9A                            
00014F9A                            Ani_obj4A:
00014F9A                            	include "_anim\obj4A.asm"
00014F9A                            ; ---------------------------------------------------------------------------
00014F9A                            ; Animation script - special stage entry effect from beta
00014F9A                            ; ---------------------------------------------------------------------------
00014F9A 0000                       		dc.w byte_14458-Ani_obj4A
00014F9C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014FB0                            		even
00014FB0                            		even
00014FB0                            
00014FB0                            ; ---------------------------------------------------------------------------
00014FB0                            ; Sprite mappings - special stage entry	from beta
00014FB0                            ; ---------------------------------------------------------------------------
00014FB0                            Map_obj4A:
00014FB0                            	include "_maps\obj4A.asm"
00014FB0                            ; ---------------------------------------------------------------------------
00014FB0                            ; Sprite mappings - special stage entry	from beta
00014FB0                            ; ---------------------------------------------------------------------------
00014FB0 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014FB4 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014FB8 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014FBC 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014FC0 03                         byte_1447C:	dc.b 3
00014FC1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014FC6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014FCB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014FD0 03                         byte_1448C:	dc.b 3
00014FD1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014FD6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014FDB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014FE0 05                         byte_1449C:	dc.b 5
00014FE1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014FE6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014FEB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014FF0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014FF5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FFA 09                         byte_144B6:	dc.b 9
00014FFB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015000 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015005 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001500A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001500F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015014 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015019 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001501E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015023 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015028 12                         byte_144E4:	dc.b $12
00015029 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001502E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015033 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015038 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001503D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015042 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015047 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001504C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015051 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015056 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001505B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015060 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015065 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001506A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001506F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015074 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015079 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001507E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015083 11                         byte_1453F:	dc.b $11
00015084 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015089 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001508E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015093 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015098 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001509D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000150A2 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000150A7 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000150AC 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000150B1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000150B6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000150BB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000150C0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000150C5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000150CA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000150CF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000150D4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000150D9 09                         byte_14595:	dc.b 9
000150DA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000150DF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000150E4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000150E9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000150EE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000150F3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150F8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150FD 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015102 04                         		dc.b 4
00015103 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015108                            		even
00015108                            		even
00015108                            
00015108                            Ani_obj08:
00015108                            	include "_anim\obj08.asm"
00015108                            ; ---------------------------------------------------------------------------
00015108                            ; Animation script - water splash (LZ)
00015108                            ; ---------------------------------------------------------------------------
00015108 0000                       		dc.w byte_145C6-Ani_obj08
0001510A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015110                            		even
00015110                            		even
00015110                            
00015110                            ; ---------------------------------------------------------------------------
00015110                            ; Sprite mappings - water splash (LZ)
00015110                            ; ---------------------------------------------------------------------------
00015110                            Map_obj08:
00015110                            	include "_maps\obj08.asm"
00015110                            ; ---------------------------------------------------------------------------
00015110                            ; Sprite mappings - water splash (LZ)
00015110                            ; ---------------------------------------------------------------------------
00015110 0000                       		dc.w byte_145D2-Map_obj08
00015112 0000                       		dc.w byte_145DD-Map_obj08
00015114 0000                       		dc.w byte_145E8-Map_obj08
00015116 02                         byte_145D2:	dc.b 2
00015117 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001511C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015121 02                         byte_145DD:	dc.b 2
00015122 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015127 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001512C 01                         byte_145E8:	dc.b 1
0001512D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015132                            		even
00015132                            		even
00015132                            
00015132                            ; ---------------------------------------------------------------------------
00015132                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015132                            ; ---------------------------------------------------------------------------
00015132                            
00015132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015132                            
00015132                            
00015132                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015132 0828 0003 0022             		btst	#3,$22(a0)
00015138 6700                       		beq.s	loc_14602
0001513A 7000                       		moveq	#0,d0
0001513C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015140 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015144 4E75                       		rts	
00015146                            ; ===========================================================================
00015146                            
00015146                            loc_14602:
00015146 7003                       		moveq	#3,d0
00015148 11C0 F768                  		move.b	d0,($FFFFF768).w
0001514C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015150 1028 0026                  		move.b	$26(a0),d0
00015154 0600 0020                  		addi.b	#$20,d0
00015158 6A00                       		bpl.s	loc_14624
0001515A 1028 0026                  		move.b	$26(a0),d0
0001515E 6A00                       		bpl.s	loc_1461E
00015160 5300                       		subq.b	#1,d0
00015162                            
00015162                            loc_1461E:
00015162 0600 0020                  		addi.b	#$20,d0
00015166 6000                       		bra.s	loc_14630
00015168                            ; ===========================================================================
00015168                            
00015168                            loc_14624:
00015168 1028 0026                  		move.b	$26(a0),d0
0001516C 6A00                       		bpl.s	loc_1462C
0001516E 5200                       		addq.b	#1,d0
00015170                            
00015170                            loc_1462C:
00015170 0600 001F                  		addi.b	#$1F,d0
00015174                            
00015174                            loc_14630:
00015174 0200 00C0                  		andi.b	#$C0,d0
00015178 0C00 0040                  		cmpi.b	#$40,d0
0001517C 6700 0000                  		beq.w	Sonic_WalkVertL
00015180 0C00 0080                  		cmpi.b	#$80,d0
00015184 6700 0000                  		beq.w	Sonic_WalkCeiling
00015188 0C00 00C0                  		cmpi.b	#$C0,d0
0001518C 6700 0000                  		beq.w	Sonic_WalkVertR
00015190 3428 000C                  		move.w	$C(a0),d2
00015194 3628 0008                  		move.w	8(a0),d3
00015198 7000                       		moveq	#0,d0
0001519A 1028 0016                  		move.b	$16(a0),d0
0001519E 4880                       		ext.w	d0
000151A0 D440                       		add.w	d0,d2
000151A2 1028 0017                  		move.b	$17(a0),d0
000151A6 4880                       		ext.w	d0
000151A8 D640                       		add.w	d0,d3
000151AA 49F8 F768                  		lea	($FFFFF768).w,a4
000151AE 367C 0010                  		movea.w	#$10,a3
000151B2 3C3C 0000                  		move.w	#0,d6
000151B6 7A0D                       		moveq	#$D,d5
000151B8 6100 0000                  		bsr.w	FindFloor
000151BC 3F01                       		move.w	d1,-(sp)
000151BE 3428 000C                  		move.w	$C(a0),d2
000151C2 3628 0008                  		move.w	8(a0),d3
000151C6 7000                       		moveq	#0,d0
000151C8 1028 0016                  		move.b	$16(a0),d0
000151CC 4880                       		ext.w	d0
000151CE D440                       		add.w	d0,d2
000151D0 1028 0017                  		move.b	$17(a0),d0
000151D4 4880                       		ext.w	d0
000151D6 4440                       		neg.w	d0
000151D8 D640                       		add.w	d0,d3
000151DA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151DE 367C 0010                  		movea.w	#$10,a3
000151E2 3C3C 0000                  		move.w	#0,d6
000151E6 7A0D                       		moveq	#$D,d5
000151E8 6100 0000                  		bsr.w	FindFloor
000151EC 301F                       		move.w	(sp)+,d0
000151EE 6100 0000                  		bsr.w	Sonic_Angle
000151F2 4A41                       		tst.w	d1
000151F4 6700                       		beq.s	locret_146BE
000151F6 6A00                       		bpl.s	loc_146C0
000151F8 0C41 FFF2                  		cmpi.w	#-$E,d1
000151FC 6D00                       		blt.s	locret_146E6
000151FE D368 000C                  		add.w	d1,$C(a0)
00015202                            
00015202                            locret_146BE:
00015202 4E75                       		rts	
00015204                            ; ===========================================================================
00015204                            
00015204                            loc_146C0:
00015204 0C41 000E                  		cmpi.w	#$E,d1
00015208 6E00                       		bgt.s	loc_146CC
0001520A                            
0001520A                            loc_146C6:
0001520A D368 000C                  		add.w	d1,$C(a0)
0001520E 4E75                       		rts	
00015210                            ; ===========================================================================
00015210                            
00015210                            loc_146CC:
00015210 4A28 0038                  		tst.b	$38(a0)
00015214 66F4                       		bne.s	loc_146C6
00015216 08E8 0001 0022             		bset	#1,$22(a0)
0001521C 08A8 0005 0022             		bclr	#5,$22(a0)
00015222 117C 0001 001D             		move.b	#1,$1D(a0)
00015228 4E75                       		rts	
0001522A                            ; ===========================================================================
0001522A                            
0001522A                            locret_146E6:
0001522A 4E75                       		rts	
0001522C                            ; End of function Sonic_AnglePos
0001522C                            
0001522C                            ; ===========================================================================
0001522C 2428 0008                  		move.l	8(a0),d2
00015230 3028 0010                  		move.w	$10(a0),d0
00015234 48C0                       		ext.l	d0
00015236 E180                       		asl.l	#8,d0
00015238 9480                       		sub.l	d0,d2
0001523A 2142 0008                  		move.l	d2,8(a0)
0001523E 303C 0038                  		move.w	#$38,d0
00015242 48C0                       		ext.l	d0
00015244 E180                       		asl.l	#8,d0
00015246 9680                       		sub.l	d0,d3
00015248 2143 000C                  		move.l	d3,$C(a0)
0001524C 4E75                       		rts	
0001524E                            ; ===========================================================================
0001524E                            
0001524E                            locret_1470A:
0001524E 4E75                       		rts	
00015250                            ; ===========================================================================
00015250 2628 000C                  		move.l	$C(a0),d3
00015254 3028 0012                  		move.w	$12(a0),d0
00015258 0440 0038                  		subi.w	#$38,d0
0001525C 3140 0012                  		move.w	d0,$12(a0)
00015260 48C0                       		ext.l	d0
00015262 E180                       		asl.l	#8,d0
00015264 9680                       		sub.l	d0,d3
00015266 2143 000C                  		move.l	d3,$C(a0)
0001526A 4E75                       		rts	
0001526C 4E75                       		rts	
0001526E                            ; ===========================================================================
0001526E 2428 0008                  		move.l	8(a0),d2
00015272 2628 000C                  		move.l	$C(a0),d3
00015276 3028 0010                  		move.w	$10(a0),d0
0001527A 48C0                       		ext.l	d0
0001527C E180                       		asl.l	#8,d0
0001527E 9480                       		sub.l	d0,d2
00015280 3028 0012                  		move.w	$12(a0),d0
00015284 48C0                       		ext.l	d0
00015286 E180                       		asl.l	#8,d0
00015288 9680                       		sub.l	d0,d3
0001528A 2142 0008                  		move.l	d2,8(a0)
0001528E 2143 000C                  		move.l	d3,$C(a0)
00015292 4E75                       		rts	
00015294                            
00015294                            ; ---------------------------------------------------------------------------
00015294                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015294                            ; ---------------------------------------------------------------------------
00015294                            
00015294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015294                            
00015294                            
00015294                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015294 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015298 B240                       		cmp.w	d0,d1
0001529A 6F00                       		ble.s	loc_1475E
0001529C 1438 F768                  		move.b	($FFFFF768).w,d2
000152A0 3200                       		move.w	d0,d1
000152A2                            
000152A2                            loc_1475E:
000152A2 0802 0000                  		btst	#0,d2
000152A6 6600                       		bne.s	loc_1476A
000152A8 1142 0026                  		move.b	d2,$26(a0)
000152AC 4E75                       		rts	
000152AE                            ; ===========================================================================
000152AE                            
000152AE                            loc_1476A:
000152AE 1428 0026                  		move.b	$26(a0),d2
000152B2 0602 0020                  		addi.b	#$20,d2
000152B6 0202 00C0                  		andi.b	#$C0,d2
000152BA 1142 0026                  		move.b	d2,$26(a0)
000152BE 4E75                       		rts	
000152C0                            ; End of function Sonic_Angle
000152C0                            
000152C0                            ; ---------------------------------------------------------------------------
000152C0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000152C0                            ; ---------------------------------------------------------------------------
000152C0                            
000152C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C0                            
000152C0                            
000152C0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000152C0 3428 000C                  		move.w	$C(a0),d2
000152C4 3628 0008                  		move.w	8(a0),d3
000152C8 7000                       		moveq	#0,d0
000152CA 1028 0017                  		move.b	$17(a0),d0
000152CE 4880                       		ext.w	d0
000152D0 4440                       		neg.w	d0
000152D2 D440                       		add.w	d0,d2
000152D4 1028 0016                  		move.b	$16(a0),d0
000152D8 4880                       		ext.w	d0
000152DA D640                       		add.w	d0,d3
000152DC 49F8 F768                  		lea	($FFFFF768).w,a4
000152E0 367C 0010                  		movea.w	#$10,a3
000152E4 3C3C 0000                  		move.w	#0,d6
000152E8 7A0D                       		moveq	#$D,d5
000152EA 6100 0000                  		bsr.w	FindWall
000152EE 3F01                       		move.w	d1,-(sp)
000152F0 3428 000C                  		move.w	$C(a0),d2
000152F4 3628 0008                  		move.w	8(a0),d3
000152F8 7000                       		moveq	#0,d0
000152FA 1028 0017                  		move.b	$17(a0),d0
000152FE 4880                       		ext.w	d0
00015300 D440                       		add.w	d0,d2
00015302 1028 0016                  		move.b	$16(a0),d0
00015306 4880                       		ext.w	d0
00015308 D640                       		add.w	d0,d3
0001530A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001530E 367C 0010                  		movea.w	#$10,a3
00015312 3C3C 0000                  		move.w	#0,d6
00015316 7A0D                       		moveq	#$D,d5
00015318 6100 0000                  		bsr.w	FindWall
0001531C 301F                       		move.w	(sp)+,d0
0001531E 6100 FF74                  		bsr.w	Sonic_Angle
00015322 4A41                       		tst.w	d1
00015324 6700                       		beq.s	locret_147F0
00015326 6A00                       		bpl.s	loc_147F2
00015328 0C41 FFF2                  		cmpi.w	#-$E,d1
0001532C 6D00 FF20                  		blt.w	locret_1470A
00015330 D368 0008                  		add.w	d1,8(a0)
00015334                            
00015334                            locret_147F0:
00015334 4E75                       		rts	
00015336                            ; ===========================================================================
00015336                            
00015336                            loc_147F2:
00015336 0C41 000E                  		cmpi.w	#$E,d1
0001533A 6E00                       		bgt.s	loc_147FE
0001533C                            
0001533C                            loc_147F8:
0001533C D368 0008                  		add.w	d1,8(a0)
00015340 4E75                       		rts	
00015342                            ; ===========================================================================
00015342                            
00015342                            loc_147FE:
00015342 4A28 0038                  		tst.b	$38(a0)
00015346 66F4                       		bne.s	loc_147F8
00015348 08E8 0001 0022             		bset	#1,$22(a0)
0001534E 08A8 0005 0022             		bclr	#5,$22(a0)
00015354 117C 0001 001D             		move.b	#1,$1D(a0)
0001535A 4E75                       		rts	
0001535C                            ; End of function Sonic_WalkVertR
0001535C                            
0001535C                            ; ---------------------------------------------------------------------------
0001535C                            ; Subroutine allowing Sonic to walk upside-down
0001535C                            ; ---------------------------------------------------------------------------
0001535C                            
0001535C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001535C                            
0001535C                            
0001535C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001535C 3428 000C                  		move.w	$C(a0),d2
00015360 3628 0008                  		move.w	8(a0),d3
00015364 7000                       		moveq	#0,d0
00015366 1028 0016                  		move.b	$16(a0),d0
0001536A 4880                       		ext.w	d0
0001536C 9440                       		sub.w	d0,d2
0001536E 0A42 000F                  		eori.w	#$F,d2
00015372 1028 0017                  		move.b	$17(a0),d0
00015376 4880                       		ext.w	d0
00015378 D640                       		add.w	d0,d3
0001537A 49F8 F768                  		lea	($FFFFF768).w,a4
0001537E 367C FFF0                  		movea.w	#-$10,a3
00015382 3C3C 1000                  		move.w	#$1000,d6
00015386 7A0D                       		moveq	#$D,d5
00015388 6100 0000                  		bsr.w	FindFloor
0001538C 3F01                       		move.w	d1,-(sp)
0001538E 3428 000C                  		move.w	$C(a0),d2
00015392 3628 0008                  		move.w	8(a0),d3
00015396 7000                       		moveq	#0,d0
00015398 1028 0016                  		move.b	$16(a0),d0
0001539C 4880                       		ext.w	d0
0001539E 9440                       		sub.w	d0,d2
000153A0 0A42 000F                  		eori.w	#$F,d2
000153A4 1028 0017                  		move.b	$17(a0),d0
000153A8 4880                       		ext.w	d0
000153AA 9640                       		sub.w	d0,d3
000153AC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153B0 367C FFF0                  		movea.w	#-$10,a3
000153B4 3C3C 1000                  		move.w	#$1000,d6
000153B8 7A0D                       		moveq	#$D,d5
000153BA 6100 0000                  		bsr.w	FindFloor
000153BE 301F                       		move.w	(sp)+,d0
000153C0 6100 FED2                  		bsr.w	Sonic_Angle
000153C4 4A41                       		tst.w	d1
000153C6 6700                       		beq.s	locret_14892
000153C8 6A00                       		bpl.s	loc_14894
000153CA 0C41 FFF2                  		cmpi.w	#-$E,d1
000153CE 6D00 FE5A                  		blt.w	locret_146E6
000153D2 9368 000C                  		sub.w	d1,$C(a0)
000153D6                            
000153D6                            locret_14892:
000153D6 4E75                       		rts	
000153D8                            ; ===========================================================================
000153D8                            
000153D8                            loc_14894:
000153D8 0C41 000E                  		cmpi.w	#$E,d1
000153DC 6E00                       		bgt.s	loc_148A0
000153DE                            
000153DE                            loc_1489A:
000153DE 9368 000C                  		sub.w	d1,$C(a0)
000153E2 4E75                       		rts	
000153E4                            ; ===========================================================================
000153E4                            
000153E4                            loc_148A0:
000153E4 4A28 0038                  		tst.b	$38(a0)
000153E8 66F4                       		bne.s	loc_1489A
000153EA 08E8 0001 0022             		bset	#1,$22(a0)
000153F0 08A8 0005 0022             		bclr	#5,$22(a0)
000153F6 117C 0001 001D             		move.b	#1,$1D(a0)
000153FC 4E75                       		rts	
000153FE                            ; End of function Sonic_WalkCeiling
000153FE                            
000153FE                            ; ---------------------------------------------------------------------------
000153FE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153FE                            ; ---------------------------------------------------------------------------
000153FE                            
000153FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153FE                            
000153FE                            
000153FE                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153FE 3428 000C                  		move.w	$C(a0),d2
00015402 3628 0008                  		move.w	8(a0),d3
00015406 7000                       		moveq	#0,d0
00015408 1028 0017                  		move.b	$17(a0),d0
0001540C 4880                       		ext.w	d0
0001540E 9440                       		sub.w	d0,d2
00015410 1028 0016                  		move.b	$16(a0),d0
00015414 4880                       		ext.w	d0
00015416 9640                       		sub.w	d0,d3
00015418 0A43 000F                  		eori.w	#$F,d3
0001541C 49F8 F768                  		lea	($FFFFF768).w,a4
00015420 367C FFF0                  		movea.w	#-$10,a3
00015424 3C3C 0800                  		move.w	#$800,d6
00015428 7A0D                       		moveq	#$D,d5
0001542A 6100 0000                  		bsr.w	FindWall
0001542E 3F01                       		move.w	d1,-(sp)
00015430 3428 000C                  		move.w	$C(a0),d2
00015434 3628 0008                  		move.w	8(a0),d3
00015438 7000                       		moveq	#0,d0
0001543A 1028 0017                  		move.b	$17(a0),d0
0001543E 4880                       		ext.w	d0
00015440 D440                       		add.w	d0,d2
00015442 1028 0016                  		move.b	$16(a0),d0
00015446 4880                       		ext.w	d0
00015448 9640                       		sub.w	d0,d3
0001544A 0A43 000F                  		eori.w	#$F,d3
0001544E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015452 367C FFF0                  		movea.w	#-$10,a3
00015456 3C3C 0800                  		move.w	#$800,d6
0001545A 7A0D                       		moveq	#$D,d5
0001545C 6100 0000                  		bsr.w	FindWall
00015460 301F                       		move.w	(sp)+,d0
00015462 6100 FE30                  		bsr.w	Sonic_Angle
00015466 4A41                       		tst.w	d1
00015468 6700                       		beq.s	locret_14934
0001546A 6A00                       		bpl.s	loc_14936
0001546C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015470 6D00 FDDC                  		blt.w	locret_1470A
00015474 9368 0008                  		sub.w	d1,8(a0)
00015478                            
00015478                            locret_14934:
00015478 4E75                       		rts	
0001547A                            ; ===========================================================================
0001547A                            
0001547A                            loc_14936:
0001547A 0C41 000E                  		cmpi.w	#$E,d1
0001547E 6E00                       		bgt.s	loc_14942
00015480                            
00015480                            loc_1493C:
00015480 9368 0008                  		sub.w	d1,8(a0)
00015484 4E75                       		rts	
00015486                            ; ===========================================================================
00015486                            
00015486                            loc_14942:
00015486 4A28 0038                  		tst.b	$38(a0)
0001548A 66F4                       		bne.s	loc_1493C
0001548C 08E8 0001 0022             		bset	#1,$22(a0)
00015492 08A8 0005 0022             		bclr	#5,$22(a0)
00015498 117C 0001 001D             		move.b	#1,$1D(a0)
0001549E 4E75                       		rts	
000154A0                            ; End of function Sonic_WalkVertL
000154A0                            
000154A0                            ; ---------------------------------------------------------------------------
000154A0                            ; Subroutine to	find which tile	the object is standing on
000154A0                            ; ---------------------------------------------------------------------------
000154A0                            
000154A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A0                            
000154A0                            
000154A0                            Floor_ChkTile:				; XREF: FindFloor; et al
000154A0 3002                       		move.w	d2,d0
000154A2 E248                       		lsr.w	#1,d0
000154A4 0240 0380                  		andi.w	#$380,d0
000154A8 3203                       		move.w	d3,d1
000154AA E049                       		lsr.w	#8,d1
000154AC 0241 007F                  		andi.w	#$7F,d1
000154B0 D041                       		add.w	d1,d0
000154B2 72FF                       		moveq	#-1,d1
000154B4 43F8 A400                  		lea	($FFFFA400).w,a1
000154B8 1231 0000                  		move.b	(a1,d0.w),d1
000154BC 6700                       		beq.s	loc_14996
000154BE 6B00                       		bmi.s	loc_1499A
000154C0 5301                       		subq.b	#1,d1
000154C2 4881                       		ext.w	d1
000154C4 EE59                       		ror.w	#7,d1
000154C6 3002                       		move.w	d2,d0
000154C8 D040                       		add.w	d0,d0
000154CA 0240 01E0                  		andi.w	#$1E0,d0
000154CE D240                       		add.w	d0,d1
000154D0 3003                       		move.w	d3,d0
000154D2 E648                       		lsr.w	#3,d0
000154D4 0240 001E                  		andi.w	#$1E,d0
000154D8 D240                       		add.w	d0,d1
000154DA                            
000154DA                            loc_14996:
000154DA 2241                       		movea.l	d1,a1
000154DC 4E75                       		rts	
000154DE                            ; ===========================================================================
000154DE                            
000154DE                            loc_1499A:
000154DE 0241 007F                  		andi.w	#$7F,d1
000154E2 0828 0006 0001             		btst	#6,1(a0)
000154E8 6700                       		beq.s	loc_149B2
000154EA 5241                       		addq.w	#1,d1
000154EC 0C41 0029                  		cmpi.w	#$29,d1
000154F0 6600                       		bne.s	loc_149B2
000154F2 323C 0051                  		move.w	#$51,d1
000154F6                            
000154F6                            loc_149B2:
000154F6 5301                       		subq.b	#1,d1
000154F8 EE59                       		ror.w	#7,d1
000154FA 3002                       		move.w	d2,d0
000154FC D040                       		add.w	d0,d0
000154FE 0240 01E0                  		andi.w	#$1E0,d0
00015502 D240                       		add.w	d0,d1
00015504 3003                       		move.w	d3,d0
00015506 E648                       		lsr.w	#3,d0
00015508 0240 001E                  		andi.w	#$1E,d0
0001550C D240                       		add.w	d0,d1
0001550E 2241                       		movea.l	d1,a1
00015510 4E75                       		rts	
00015512                            ; End of function Floor_ChkTile
00015512                            
00015512                            
00015512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015512                            
00015512                            
00015512                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015512 618C                       		bsr.s	Floor_ChkTile
00015514 3011                       		move.w	(a1),d0
00015516 3800                       		move.w	d0,d4
00015518 0240 07FF                  		andi.w	#$7FF,d0
0001551C 6700                       		beq.s	loc_149DE
0001551E 0B04                       		btst	d5,d4
00015520 6600                       		bne.s	loc_149EC
00015522                            
00015522                            loc_149DE:
00015522 D44B                       		add.w	a3,d2
00015524 6100 0000                  		bsr.w	FindFloor2
00015528 944B                       		sub.w	a3,d2
0001552A 0641 0010                  		addi.w	#$10,d1
0001552E 4E75                       		rts	
00015530                            ; ===========================================================================
00015530                            
00015530                            loc_149EC:
00015530 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015534 1032 0000                  		move.b	(a2,d0.w),d0
00015538 0240 00FF                  		andi.w	#$FF,d0
0001553C 67E4                       		beq.s	loc_149DE
0001553E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015544 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015548 E948                       		lsl.w	#4,d0
0001554A 3203                       		move.w	d3,d1
0001554C 0804 000B                  		btst	#$B,d4
00015550 6700                       		beq.s	loc_14A12
00015552 4641                       		not.w	d1
00015554 4414                       		neg.b	(a4)
00015556                            
00015556                            loc_14A12:
00015556 0804 000C                  		btst	#$C,d4
0001555A 6700                       		beq.s	loc_14A22
0001555C 0614 0040                  		addi.b	#$40,(a4)
00015560 4414                       		neg.b	(a4)
00015562 0414 0040                  		subi.b	#$40,(a4)
00015566                            
00015566                            loc_14A22:
00015566 0241 000F                  		andi.w	#$F,d1
0001556A D240                       		add.w	d0,d1
0001556C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015572 1032 1000                  		move.b	(a2,d1.w),d0
00015576 4880                       		ext.w	d0
00015578 BD44                       		eor.w	d6,d4
0001557A 0804 000C                  		btst	#$C,d4
0001557E 6700                       		beq.s	loc_14A3E
00015580 4440                       		neg.w	d0
00015582                            
00015582                            loc_14A3E:
00015582 4A40                       		tst.w	d0
00015584 679C                       		beq.s	loc_149DE
00015586 6B00                       		bmi.s	loc_14A5A
00015588 0C00 0010                  		cmpi.b	#$10,d0
0001558C 6700                       		beq.s	loc_14A66
0001558E 3202                       		move.w	d2,d1
00015590 0241 000F                  		andi.w	#$F,d1
00015594 D041                       		add.w	d1,d0
00015596 323C 000F                  		move.w	#$F,d1
0001559A 9240                       		sub.w	d0,d1
0001559C 4E75                       		rts	
0001559E                            ; ===========================================================================
0001559E                            
0001559E                            loc_14A5A:
0001559E 3202                       		move.w	d2,d1
000155A0 0241 000F                  		andi.w	#$F,d1
000155A4 D041                       		add.w	d1,d0
000155A6 6A00 FF7A                  		bpl.w	loc_149DE
000155AA                            
000155AA                            loc_14A66:
000155AA 944B                       		sub.w	a3,d2
000155AC 6100 0000                  		bsr.w	FindFloor2
000155B0 D44B                       		add.w	a3,d2
000155B2 0441 0010                  		subi.w	#$10,d1
000155B6 4E75                       		rts	
000155B8                            ; End of function FindFloor
000155B8                            
000155B8                            
000155B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B8                            
000155B8                            
000155B8                            FindFloor2:				; XREF: FindFloor
000155B8 6100 FEE6                  		bsr.w	Floor_ChkTile
000155BC 3011                       		move.w	(a1),d0
000155BE 3800                       		move.w	d0,d4
000155C0 0240 07FF                  		andi.w	#$7FF,d0
000155C4 6700                       		beq.s	loc_14A86
000155C6 0B04                       		btst	d5,d4
000155C8 6600                       		bne.s	loc_14A94
000155CA                            
000155CA                            loc_14A86:
000155CA 323C 000F                  		move.w	#$F,d1
000155CE 3002                       		move.w	d2,d0
000155D0 0240 000F                  		andi.w	#$F,d0
000155D4 9240                       		sub.w	d0,d1
000155D6 4E75                       		rts	
000155D8                            ; ===========================================================================
000155D8                            
000155D8                            loc_14A94:
000155D8 2478 F796                  		movea.l	($FFFFF796).w,a2
000155DC 1032 0000                  		move.b	(a2,d0.w),d0
000155E0 0240 00FF                  		andi.w	#$FF,d0
000155E4 67E4                       		beq.s	loc_14A86
000155E6 45F9 0000 0000             		lea	(AngleMap).l,a2
000155EC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000155F0 E948                       		lsl.w	#4,d0
000155F2 3203                       		move.w	d3,d1
000155F4 0804 000B                  		btst	#$B,d4
000155F8 6700                       		beq.s	loc_14ABA
000155FA 4641                       		not.w	d1
000155FC 4414                       		neg.b	(a4)
000155FE                            
000155FE                            loc_14ABA:
000155FE 0804 000C                  		btst	#$C,d4
00015602 6700                       		beq.s	loc_14ACA
00015604 0614 0040                  		addi.b	#$40,(a4)
00015608 4414                       		neg.b	(a4)
0001560A 0414 0040                  		subi.b	#$40,(a4)
0001560E                            
0001560E                            loc_14ACA:
0001560E 0241 000F                  		andi.w	#$F,d1
00015612 D240                       		add.w	d0,d1
00015614 45F9 0000 0000             		lea	(CollArray1).l,a2
0001561A 1032 1000                  		move.b	(a2,d1.w),d0
0001561E 4880                       		ext.w	d0
00015620 BD44                       		eor.w	d6,d4
00015622 0804 000C                  		btst	#$C,d4
00015626 6700                       		beq.s	loc_14AE6
00015628 4440                       		neg.w	d0
0001562A                            
0001562A                            loc_14AE6:
0001562A 4A40                       		tst.w	d0
0001562C 679C                       		beq.s	loc_14A86
0001562E 6B00                       		bmi.s	loc_14AFC
00015630 3202                       		move.w	d2,d1
00015632 0241 000F                  		andi.w	#$F,d1
00015636 D041                       		add.w	d1,d0
00015638 323C 000F                  		move.w	#$F,d1
0001563C 9240                       		sub.w	d0,d1
0001563E 4E75                       		rts	
00015640                            ; ===========================================================================
00015640                            
00015640                            loc_14AFC:
00015640 3202                       		move.w	d2,d1
00015642 0241 000F                  		andi.w	#$F,d1
00015646 D041                       		add.w	d1,d0
00015648 6A00 FF80                  		bpl.w	loc_14A86
0001564C 4641                       		not.w	d1
0001564E 4E75                       		rts	
00015650                            ; End of function FindFloor2
00015650                            
00015650                            
00015650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015650                            
00015650                            
00015650                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015650 6100 FE4E                  		bsr.w	Floor_ChkTile
00015654 3011                       		move.w	(a1),d0
00015656 3800                       		move.w	d0,d4
00015658 0240 07FF                  		andi.w	#$7FF,d0
0001565C 6700                       		beq.s	loc_14B1E
0001565E 0B04                       		btst	d5,d4
00015660 6600                       		bne.s	loc_14B2C
00015662                            
00015662                            loc_14B1E:
00015662 D64B                       		add.w	a3,d3
00015664 6100 0000                  		bsr.w	FindWall2
00015668 964B                       		sub.w	a3,d3
0001566A 0641 0010                  		addi.w	#$10,d1
0001566E 4E75                       		rts	
00015670                            ; ===========================================================================
00015670                            
00015670                            loc_14B2C:
00015670 2478 F796                  		movea.l	($FFFFF796).w,a2
00015674 1032 0000                  		move.b	(a2,d0.w),d0
00015678 0240 00FF                  		andi.w	#$FF,d0
0001567C 67E4                       		beq.s	loc_14B1E
0001567E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015684 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015688 E948                       		lsl.w	#4,d0
0001568A 3202                       		move.w	d2,d1
0001568C 0804 000C                  		btst	#$C,d4
00015690 6700                       		beq.s	loc_14B5A
00015692 4641                       		not.w	d1
00015694 0614 0040                  		addi.b	#$40,(a4)
00015698 4414                       		neg.b	(a4)
0001569A 0414 0040                  		subi.b	#$40,(a4)
0001569E                            
0001569E                            loc_14B5A:
0001569E 0804 000B                  		btst	#$B,d4
000156A2 6700                       		beq.s	loc_14B62
000156A4 4414                       		neg.b	(a4)
000156A6                            
000156A6                            loc_14B62:
000156A6 0241 000F                  		andi.w	#$F,d1
000156AA D240                       		add.w	d0,d1
000156AC 45F9 0000 0000             		lea	(CollArray2).l,a2
000156B2 1032 1000                  		move.b	(a2,d1.w),d0
000156B6 4880                       		ext.w	d0
000156B8 BD44                       		eor.w	d6,d4
000156BA 0804 000B                  		btst	#$B,d4
000156BE 6700                       		beq.s	loc_14B7E
000156C0 4440                       		neg.w	d0
000156C2                            
000156C2                            loc_14B7E:
000156C2 4A40                       		tst.w	d0
000156C4 679C                       		beq.s	loc_14B1E
000156C6 6B00                       		bmi.s	loc_14B9A
000156C8 0C00 0010                  		cmpi.b	#$10,d0
000156CC 6700                       		beq.s	loc_14BA6
000156CE 3203                       		move.w	d3,d1
000156D0 0241 000F                  		andi.w	#$F,d1
000156D4 D041                       		add.w	d1,d0
000156D6 323C 000F                  		move.w	#$F,d1
000156DA 9240                       		sub.w	d0,d1
000156DC 4E75                       		rts	
000156DE                            ; ===========================================================================
000156DE                            
000156DE                            loc_14B9A:
000156DE 3203                       		move.w	d3,d1
000156E0 0241 000F                  		andi.w	#$F,d1
000156E4 D041                       		add.w	d1,d0
000156E6 6A00 FF7A                  		bpl.w	loc_14B1E
000156EA                            
000156EA                            loc_14BA6:
000156EA 964B                       		sub.w	a3,d3
000156EC 6100 0000                  		bsr.w	FindWall2
000156F0 D64B                       		add.w	a3,d3
000156F2 0441 0010                  		subi.w	#$10,d1
000156F6 4E75                       		rts	
000156F8                            ; End of function FindWall
000156F8                            
000156F8                            
000156F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156F8                            
000156F8                            
000156F8                            FindWall2:				; XREF: FindWall
000156F8 6100 FDA6                  		bsr.w	Floor_ChkTile
000156FC 3011                       		move.w	(a1),d0
000156FE 3800                       		move.w	d0,d4
00015700 0240 07FF                  		andi.w	#$7FF,d0
00015704 6700                       		beq.s	loc_14BC6
00015706 0B04                       		btst	d5,d4
00015708 6600                       		bne.s	loc_14BD4
0001570A                            
0001570A                            loc_14BC6:
0001570A 323C 000F                  		move.w	#$F,d1
0001570E 3003                       		move.w	d3,d0
00015710 0240 000F                  		andi.w	#$F,d0
00015714 9240                       		sub.w	d0,d1
00015716 4E75                       		rts	
00015718                            ; ===========================================================================
00015718                            
00015718                            loc_14BD4:
00015718 2478 F796                  		movea.l	($FFFFF796).w,a2
0001571C 1032 0000                  		move.b	(a2,d0.w),d0
00015720 0240 00FF                  		andi.w	#$FF,d0
00015724 67E4                       		beq.s	loc_14BC6
00015726 45F9 0000 0000             		lea	(AngleMap).l,a2
0001572C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015730 E948                       		lsl.w	#4,d0
00015732 3202                       		move.w	d2,d1
00015734 0804 000C                  		btst	#$C,d4
00015738 6700                       		beq.s	loc_14C02
0001573A 4641                       		not.w	d1
0001573C 0614 0040                  		addi.b	#$40,(a4)
00015740 4414                       		neg.b	(a4)
00015742 0414 0040                  		subi.b	#$40,(a4)
00015746                            
00015746                            loc_14C02:
00015746 0804 000B                  		btst	#$B,d4
0001574A 6700                       		beq.s	loc_14C0A
0001574C 4414                       		neg.b	(a4)
0001574E                            
0001574E                            loc_14C0A:
0001574E 0241 000F                  		andi.w	#$F,d1
00015752 D240                       		add.w	d0,d1
00015754 45F9 0000 0000             		lea	(CollArray2).l,a2
0001575A 1032 1000                  		move.b	(a2,d1.w),d0
0001575E 4880                       		ext.w	d0
00015760 BD44                       		eor.w	d6,d4
00015762 0804 000B                  		btst	#$B,d4
00015766 6700                       		beq.s	loc_14C26
00015768 4440                       		neg.w	d0
0001576A                            
0001576A                            loc_14C26:
0001576A 4A40                       		tst.w	d0
0001576C 679C                       		beq.s	loc_14BC6
0001576E 6B00                       		bmi.s	loc_14C3C
00015770 3203                       		move.w	d3,d1
00015772 0241 000F                  		andi.w	#$F,d1
00015776 D041                       		add.w	d1,d0
00015778 323C 000F                  		move.w	#$F,d1
0001577C 9240                       		sub.w	d0,d1
0001577E 4E75                       		rts	
00015780                            ; ===========================================================================
00015780                            
00015780                            loc_14C3C:
00015780 3203                       		move.w	d3,d1
00015782 0241 000F                  		andi.w	#$F,d1
00015786 D041                       		add.w	d1,d0
00015788 6A00 FF80                  		bpl.w	loc_14BC6
0001578C 4641                       		not.w	d1
0001578E 4E75                       		rts	
00015790                            ; End of function FindWall2
00015790                            
00015790                            ; ---------------------------------------------------------------------------
00015790                            ; Unused floor/wall subroutine - logs something	to do with collision
00015790                            ; ---------------------------------------------------------------------------
00015790                            
00015790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015790                            
00015790                            
00015790                            FloorLog_Unk:				; XREF: Level
00015790 4E75                       		rts	
00015792                            
00015792 43F9 0000 0000             		lea	(CollArray1).l,a1
00015798 45F9 0000 0000             		lea	(CollArray1).l,a2
0001579E 363C 00FF                  		move.w	#$FF,d3
000157A2                            
000157A2                            loc_14C5E:
000157A2 7A10                       		moveq	#$10,d5
000157A4 343C 000F                  		move.w	#$F,d2
000157A8                            
000157A8                            loc_14C64:
000157A8 7800                       		moveq	#0,d4
000157AA 323C 000F                  		move.w	#$F,d1
000157AE                            
000157AE                            loc_14C6A:
000157AE 3019                       		move.w	(a1)+,d0
000157B0 EAA8                       		lsr.l	d5,d0
000157B2 D944                       		addx.w	d4,d4
000157B4 51C9 FFF8                  		dbf	d1,loc_14C6A
000157B8                            
000157B8 34C4                       		move.w	d4,(a2)+
000157BA 92FC 0020                  		suba.w	#$20,a1
000157BE 5345                       		subq.w	#1,d5
000157C0 51CA FFE6                  		dbf	d2,loc_14C64
000157C4                            
000157C4 D2FC 0020                  		adda.w	#$20,a1
000157C8 51CB FFD8                  		dbf	d3,loc_14C5E
000157CC                            
000157CC 43F9 0000 0000             		lea	(CollArray1).l,a1
000157D2 45F9 0000 0000             		lea	(CollArray2).l,a2
000157D8 6100                       		bsr.s	FloorLog_Unk2
000157DA 43F9 0000 0000             		lea	(CollArray1).l,a1
000157E0 45F9 0000 0000             		lea	(CollArray1).l,a2
000157E6                            
000157E6                            ; End of function FloorLog_Unk
000157E6                            
000157E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E6                            
000157E6                            
000157E6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000157E6 363C 0FFF                  		move.w	#$FFF,d3
000157EA                            
000157EA                            loc_14CA6:
000157EA 7400                       		moveq	#0,d2
000157EC 323C 000F                  		move.w	#$F,d1
000157F0 3019                       		move.w	(a1)+,d0
000157F2 6700                       		beq.s	loc_14CD4
000157F4 6B00                       		bmi.s	loc_14CBE
000157F6                            
000157F6                            loc_14CB2:
000157F6 E248                       		lsr.w	#1,d0
000157F8 6400                       		bcc.s	loc_14CB8
000157FA 5202                       		addq.b	#1,d2
000157FC                            
000157FC                            loc_14CB8:
000157FC 51C9 FFF8                  		dbf	d1,loc_14CB2
00015800                            
00015800 6000                       		bra.s	loc_14CD6
00015802                            ; ===========================================================================
00015802                            
00015802                            loc_14CBE:
00015802 0C40 FFFF                  		cmpi.w	#-1,d0
00015806 6700                       		beq.s	loc_14CD0
00015808                            
00015808                            loc_14CC4:
00015808 E348                       		lsl.w	#1,d0
0001580A 6400                       		bcc.s	loc_14CCA
0001580C 5302                       		subq.b	#1,d2
0001580E                            
0001580E                            loc_14CCA:
0001580E 51C9 FFF8                  		dbf	d1,loc_14CC4
00015812                            
00015812 6000                       		bra.s	loc_14CD6
00015814                            ; ===========================================================================
00015814                            
00015814                            loc_14CD0:
00015814 303C 0010                  		move.w	#$10,d0
00015818                            
00015818                            loc_14CD4:
00015818 3400                       		move.w	d0,d2
0001581A                            
0001581A                            loc_14CD6:
0001581A 14C2                       		move.b	d2,(a2)+
0001581C 51CB FFCC                  		dbf	d3,loc_14CA6
00015820                            
00015820 4E75                       		rts	
00015822                            
00015822                            ; End of function FloorLog_Unk2
00015822                            
00015822                            
00015822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015822                            
00015822                            
00015822                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015822 2628 0008                  		move.l	8(a0),d3
00015826 2428 000C                  		move.l	$C(a0),d2
0001582A 3228 0010                  		move.w	$10(a0),d1
0001582E 48C1                       		ext.l	d1
00015830 E181                       		asl.l	#8,d1
00015832 D681                       		add.l	d1,d3
00015834 3228 0012                  		move.w	$12(a0),d1
00015838 48C1                       		ext.l	d1
0001583A E181                       		asl.l	#8,d1
0001583C D481                       		add.l	d1,d2
0001583E 4842                       		swap	d2
00015840 4843                       		swap	d3
00015842 11C0 F768                  		move.b	d0,($FFFFF768).w
00015846 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001584A 1200                       		move.b	d0,d1
0001584C 0600 0020                  		addi.b	#$20,d0
00015850 6A00                       		bpl.s	loc_14D1A
00015852 1001                       		move.b	d1,d0
00015854 6A00                       		bpl.s	loc_14D14
00015856 5300                       		subq.b	#1,d0
00015858                            
00015858                            loc_14D14:
00015858 0600 0020                  		addi.b	#$20,d0
0001585C 6000                       		bra.s	loc_14D24
0001585E                            ; ===========================================================================
0001585E                            
0001585E                            loc_14D1A:
0001585E 1001                       		move.b	d1,d0
00015860 6A00                       		bpl.s	loc_14D20
00015862 5200                       		addq.b	#1,d0
00015864                            
00015864                            loc_14D20:
00015864 0600 001F                  		addi.b	#$1F,d0
00015868                            
00015868                            loc_14D24:
00015868 0200 00C0                  		andi.b	#$C0,d0
0001586C 6700 0000                  		beq.w	loc_14DF0
00015870 0C00 0080                  		cmpi.b	#$80,d0
00015874 6700 0000                  		beq.w	loc_14F7C
00015878 0201 0038                  		andi.b	#$38,d1
0001587C 6600                       		bne.s	loc_14D3C
0001587E 5042                       		addq.w	#8,d2
00015880                            
00015880                            loc_14D3C:
00015880 0C00 0040                  		cmpi.b	#$40,d0
00015884 6700 0000                  		beq.w	loc_1504A
00015888 6000 0000                  		bra.w	loc_14EBC
0001588C                            
0001588C                            ; End of function Sonic_WalkSpeed
0001588C                            
0001588C                            
0001588C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001588C                            
0001588C                            
0001588C                            sub_14D48:				; XREF: Sonic_Jump
0001588C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015890 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015894 0600 0020                  		addi.b	#$20,d0
00015898 0200 00C0                  		andi.b	#$C0,d0
0001589C 0C00 0040                  		cmpi.b	#$40,d0
000158A0 6700 0000                  		beq.w	loc_14FD6
000158A4 0C00 0080                  		cmpi.b	#$80,d0
000158A8 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000158AC 0C00 00C0                  		cmpi.b	#$C0,d0
000158B0 6700 0000                  		beq.w	sub_14E50
000158B4                            
000158B4                            ; End of function sub_14D48
000158B4                            
000158B4                            ; ---------------------------------------------------------------------------
000158B4                            ; Subroutine to	make Sonic land	on the floor after jumping
000158B4                            ; ---------------------------------------------------------------------------
000158B4                            
000158B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158B4                            
000158B4                            
000158B4                            Sonic_HitFloor:				; XREF: Sonic_Floor
000158B4 3428 000C                  		move.w	$C(a0),d2
000158B8 3628 0008                  		move.w	8(a0),d3
000158BC 7000                       		moveq	#0,d0
000158BE 1028 0016                  		move.b	$16(a0),d0
000158C2 4880                       		ext.w	d0
000158C4 D440                       		add.w	d0,d2
000158C6 1028 0017                  		move.b	$17(a0),d0
000158CA 4880                       		ext.w	d0
000158CC D640                       		add.w	d0,d3
000158CE 49F8 F768                  		lea	($FFFFF768).w,a4
000158D2 367C 0010                  		movea.w	#$10,a3
000158D6 3C3C 0000                  		move.w	#0,d6
000158DA 7A0D                       		moveq	#$D,d5
000158DC 6100 FC34                  		bsr.w	FindFloor
000158E0 3F01                       		move.w	d1,-(sp)
000158E2 3428 000C                  		move.w	$C(a0),d2
000158E6 3628 0008                  		move.w	8(a0),d3
000158EA 7000                       		moveq	#0,d0
000158EC 1028 0016                  		move.b	$16(a0),d0
000158F0 4880                       		ext.w	d0
000158F2 D440                       		add.w	d0,d2
000158F4 1028 0017                  		move.b	$17(a0),d0
000158F8 4880                       		ext.w	d0
000158FA 9640                       		sub.w	d0,d3
000158FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015900 367C 0010                  		movea.w	#$10,a3
00015904 3C3C 0000                  		move.w	#0,d6
00015908 7A0D                       		moveq	#$D,d5
0001590A 6100 FC06                  		bsr.w	FindFloor
0001590E 301F                       		move.w	(sp)+,d0
00015910 143C 0000                  		move.b	#0,d2
00015914                            
00015914                            loc_14DD0:
00015914 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015918 B240                       		cmp.w	d0,d1
0001591A 6F00                       		ble.s	loc_14DDE
0001591C 1638 F768                  		move.b	($FFFFF768).w,d3
00015920 C141                       		exg	d0,d1
00015922                            
00015922                            loc_14DDE:
00015922 0803 0000                  		btst	#0,d3
00015926 6700                       		beq.s	locret_14DE6
00015928 1602                       		move.b	d2,d3
0001592A                            
0001592A                            locret_14DE6:
0001592A 4E75                       		rts	
0001592C                            
0001592C                            ; End of function Sonic_HitFloor
0001592C                            
0001592C                            ; ===========================================================================
0001592C 3428 000C                  		move.w	$C(a0),d2
00015930 3628 0008                  		move.w	8(a0),d3
00015934                            
00015934                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015934 0642 000A                  		addi.w	#$A,d2
00015938 49F8 F768                  		lea	($FFFFF768).w,a4
0001593C 367C 0010                  		movea.w	#$10,a3
00015940 3C3C 0000                  		move.w	#0,d6
00015944 7A0E                       		moveq	#$E,d5
00015946 6100 FBCA                  		bsr.w	FindFloor
0001594A 143C 0000                  		move.b	#0,d2
0001594E                            
0001594E                            loc_14E0A:				; XREF: sub_14EB4
0001594E 1638 F768                  		move.b	($FFFFF768).w,d3
00015952 0803 0000                  		btst	#0,d3
00015956 6700                       		beq.s	locret_14E16
00015958 1602                       		move.b	d2,d3
0001595A                            
0001595A                            locret_14E16:
0001595A 4E75                       		rts	
0001595C                            
0001595C                            ; ---------------------------------------------------------------------------
0001595C                            ; Subroutine allowing objects to interact with the floor
0001595C                            ; ---------------------------------------------------------------------------
0001595C                            
0001595C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001595C                            
0001595C                            
0001595C                            ObjHitFloor:
0001595C 3628 0008                  		move.w	8(a0),d3
00015960                            
00015960                            ; End of function ObjHitFloor
00015960                            
00015960                            
00015960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015960                            
00015960                            
00015960                            ObjHitFloor2:
00015960 3428 000C                  		move.w	$C(a0),d2
00015964 7000                       		moveq	#0,d0
00015966 1028 0016                  		move.b	$16(a0),d0
0001596A 4880                       		ext.w	d0
0001596C D440                       		add.w	d0,d2
0001596E 49F8 F768                  		lea	($FFFFF768).w,a4
00015972 18BC 0000                  		move.b	#0,(a4)
00015976 367C 0010                  		movea.w	#$10,a3
0001597A 3C3C 0000                  		move.w	#0,d6
0001597E 7A0D                       		moveq	#$D,d5
00015980 6100 FB90                  		bsr.w	FindFloor
00015984 1638 F768                  		move.b	($FFFFF768).w,d3
00015988 0803 0000                  		btst	#0,d3
0001598C 6700                       		beq.s	locret_14E4E
0001598E 163C 0000                  		move.b	#0,d3
00015992                            
00015992                            locret_14E4E:
00015992 4E75                       		rts	
00015994                            ; End of function ObjHitFloor2
00015994                            
00015994                            
00015994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015994                            
00015994                            
00015994                            sub_14E50:				; XREF: sub_14D48
00015994 3428 000C                  		move.w	$C(a0),d2
00015998 3628 0008                  		move.w	8(a0),d3
0001599C 7000                       		moveq	#0,d0
0001599E 1028 0017                  		move.b	$17(a0),d0
000159A2 4880                       		ext.w	d0
000159A4 9440                       		sub.w	d0,d2
000159A6 1028 0016                  		move.b	$16(a0),d0
000159AA 4880                       		ext.w	d0
000159AC D640                       		add.w	d0,d3
000159AE 49F8 F768                  		lea	($FFFFF768).w,a4
000159B2 367C 0010                  		movea.w	#$10,a3
000159B6 3C3C 0000                  		move.w	#0,d6
000159BA 7A0E                       		moveq	#$E,d5
000159BC 6100 FC92                  		bsr.w	FindWall
000159C0 3F01                       		move.w	d1,-(sp)
000159C2 3428 000C                  		move.w	$C(a0),d2
000159C6 3628 0008                  		move.w	8(a0),d3
000159CA 7000                       		moveq	#0,d0
000159CC 1028 0017                  		move.b	$17(a0),d0
000159D0 4880                       		ext.w	d0
000159D2 D440                       		add.w	d0,d2
000159D4 1028 0016                  		move.b	$16(a0),d0
000159D8 4880                       		ext.w	d0
000159DA D640                       		add.w	d0,d3
000159DC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159E0 367C 0010                  		movea.w	#$10,a3
000159E4 3C3C 0000                  		move.w	#0,d6
000159E8 7A0E                       		moveq	#$E,d5
000159EA 6100 FC64                  		bsr.w	FindWall
000159EE 301F                       		move.w	(sp)+,d0
000159F0 143C 00C0                  		move.b	#-$40,d2
000159F4 6000 FF1E                  		bra.w	loc_14DD0
000159F8                            
000159F8                            ; End of function sub_14E50
000159F8                            
000159F8                            
000159F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F8                            
000159F8                            
000159F8                            sub_14EB4:				; XREF: Sonic_Floor
000159F8 3428 000C                  		move.w	$C(a0),d2
000159FC 3628 0008                  		move.w	8(a0),d3
00015A00                            
00015A00                            loc_14EBC:
00015A00 0643 000A                  		addi.w	#$A,d3
00015A04 49F8 F768                  		lea	($FFFFF768).w,a4
00015A08 367C 0010                  		movea.w	#$10,a3
00015A0C 3C3C 0000                  		move.w	#0,d6
00015A10 7A0E                       		moveq	#$E,d5
00015A12 6100 FC3C                  		bsr.w	FindWall
00015A16 143C 00C0                  		move.b	#-$40,d2
00015A1A 6000 FF32                  		bra.w	loc_14E0A
00015A1E                            
00015A1E                            ; End of function sub_14EB4
00015A1E                            
00015A1E                            ; ---------------------------------------------------------------------------
00015A1E                            ; Subroutine to	detect when an object hits a wall to its right
00015A1E                            ; ---------------------------------------------------------------------------
00015A1E                            
00015A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A1E                            
00015A1E                            
00015A1E                            ObjHitWallRight:
00015A1E D668 0008                  		add.w	8(a0),d3
00015A22 3428 000C                  		move.w	$C(a0),d2
00015A26 49F8 F768                  		lea	($FFFFF768).w,a4
00015A2A 18BC 0000                  		move.b	#0,(a4)
00015A2E 367C 0010                  		movea.w	#$10,a3
00015A32 3C3C 0000                  		move.w	#0,d6
00015A36 7A0E                       		moveq	#$E,d5
00015A38 6100 FC16                  		bsr.w	FindWall
00015A3C 1638 F768                  		move.b	($FFFFF768).w,d3
00015A40 0803 0000                  		btst	#0,d3
00015A44 6700                       		beq.s	locret_14F06
00015A46 163C 00C0                  		move.b	#-$40,d3
00015A4A                            
00015A4A                            locret_14F06:
00015A4A 4E75                       		rts	
00015A4C                            
00015A4C                            ; End of function ObjHitWallRight
00015A4C                            
00015A4C                            ; ---------------------------------------------------------------------------
00015A4C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015A4C                            ; touches them
00015A4C                            ; ---------------------------------------------------------------------------
00015A4C                            
00015A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A4C                            
00015A4C                            
00015A4C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015A4C 3428 000C                  		move.w	$C(a0),d2
00015A50 3628 0008                  		move.w	8(a0),d3
00015A54 7000                       		moveq	#0,d0
00015A56 1028 0016                  		move.b	$16(a0),d0
00015A5A 4880                       		ext.w	d0
00015A5C 9440                       		sub.w	d0,d2
00015A5E 0A42 000F                  		eori.w	#$F,d2
00015A62 1028 0017                  		move.b	$17(a0),d0
00015A66 4880                       		ext.w	d0
00015A68 D640                       		add.w	d0,d3
00015A6A 49F8 F768                  		lea	($FFFFF768).w,a4
00015A6E 367C FFF0                  		movea.w	#-$10,a3
00015A72 3C3C 1000                  		move.w	#$1000,d6
00015A76 7A0E                       		moveq	#$E,d5
00015A78 6100 FA98                  		bsr.w	FindFloor
00015A7C 3F01                       		move.w	d1,-(sp)
00015A7E 3428 000C                  		move.w	$C(a0),d2
00015A82 3628 0008                  		move.w	8(a0),d3
00015A86 7000                       		moveq	#0,d0
00015A88 1028 0016                  		move.b	$16(a0),d0
00015A8C 4880                       		ext.w	d0
00015A8E 9440                       		sub.w	d0,d2
00015A90 0A42 000F                  		eori.w	#$F,d2
00015A94 1028 0017                  		move.b	$17(a0),d0
00015A98 4880                       		ext.w	d0
00015A9A 9640                       		sub.w	d0,d3
00015A9C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015AA0 367C FFF0                  		movea.w	#-$10,a3
00015AA4 3C3C 1000                  		move.w	#$1000,d6
00015AA8 7A0E                       		moveq	#$E,d5
00015AAA 6100 FA66                  		bsr.w	FindFloor
00015AAE 301F                       		move.w	(sp)+,d0
00015AB0 143C 0080                  		move.b	#-$80,d2
00015AB4 6000 FE5E                  		bra.w	loc_14DD0
00015AB8                            ; End of function Sonic_DontRunOnWalls
00015AB8                            
00015AB8                            ; ===========================================================================
00015AB8 3428 000C                  		move.w	$C(a0),d2
00015ABC 3628 0008                  		move.w	8(a0),d3
00015AC0                            
00015AC0                            loc_14F7C:
00015AC0 0442 000A                  		subi.w	#$A,d2
00015AC4 0A42 000F                  		eori.w	#$F,d2
00015AC8 49F8 F768                  		lea	($FFFFF768).w,a4
00015ACC 367C FFF0                  		movea.w	#-$10,a3
00015AD0 3C3C 1000                  		move.w	#$1000,d6
00015AD4 7A0E                       		moveq	#$E,d5
00015AD6 6100 FA3A                  		bsr.w	FindFloor
00015ADA 143C 0080                  		move.b	#-$80,d2
00015ADE 6000 FE6E                  		bra.w	loc_14E0A
00015AE2                            
00015AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AE2                            
00015AE2                            
00015AE2                            ObjHitCeiling:
00015AE2 3428 000C                  		move.w	$C(a0),d2
00015AE6 3628 0008                  		move.w	8(a0),d3
00015AEA 7000                       		moveq	#0,d0
00015AEC 1028 0016                  		move.b	$16(a0),d0
00015AF0 4880                       		ext.w	d0
00015AF2 9440                       		sub.w	d0,d2
00015AF4 0A42 000F                  		eori.w	#$F,d2
00015AF8 49F8 F768                  		lea	($FFFFF768).w,a4
00015AFC 367C FFF0                  		movea.w	#-$10,a3
00015B00 3C3C 1000                  		move.w	#$1000,d6
00015B04 7A0E                       		moveq	#$E,d5
00015B06 6100 FA0A                  		bsr.w	FindFloor
00015B0A 1638 F768                  		move.b	($FFFFF768).w,d3
00015B0E 0803 0000                  		btst	#0,d3
00015B12 6700                       		beq.s	locret_14FD4
00015B14 163C 0080                  		move.b	#-$80,d3
00015B18                            
00015B18                            locret_14FD4:
00015B18 4E75                       		rts	
00015B1A                            ; End of function ObjHitCeiling
00015B1A                            
00015B1A                            ; ===========================================================================
00015B1A                            
00015B1A                            loc_14FD6:				; XREF: sub_14D48
00015B1A 3428 000C                  		move.w	$C(a0),d2
00015B1E 3628 0008                  		move.w	8(a0),d3
00015B22 7000                       		moveq	#0,d0
00015B24 1028 0017                  		move.b	$17(a0),d0
00015B28 4880                       		ext.w	d0
00015B2A 9440                       		sub.w	d0,d2
00015B2C 1028 0016                  		move.b	$16(a0),d0
00015B30 4880                       		ext.w	d0
00015B32 9640                       		sub.w	d0,d3
00015B34 0A43 000F                  		eori.w	#$F,d3
00015B38 49F8 F768                  		lea	($FFFFF768).w,a4
00015B3C 367C FFF0                  		movea.w	#-$10,a3
00015B40 3C3C 0800                  		move.w	#$800,d6
00015B44 7A0E                       		moveq	#$E,d5
00015B46 6100 FB08                  		bsr.w	FindWall
00015B4A 3F01                       		move.w	d1,-(sp)
00015B4C 3428 000C                  		move.w	$C(a0),d2
00015B50 3628 0008                  		move.w	8(a0),d3
00015B54 7000                       		moveq	#0,d0
00015B56 1028 0017                  		move.b	$17(a0),d0
00015B5A 4880                       		ext.w	d0
00015B5C D440                       		add.w	d0,d2
00015B5E 1028 0016                  		move.b	$16(a0),d0
00015B62 4880                       		ext.w	d0
00015B64 9640                       		sub.w	d0,d3
00015B66 0A43 000F                  		eori.w	#$F,d3
00015B6A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B6E 367C FFF0                  		movea.w	#-$10,a3
00015B72 3C3C 0800                  		move.w	#$800,d6
00015B76 7A0E                       		moveq	#$E,d5
00015B78 6100 FAD6                  		bsr.w	FindWall
00015B7C 301F                       		move.w	(sp)+,d0
00015B7E 143C 0040                  		move.b	#$40,d2
00015B82 6000 FD90                  		bra.w	loc_14DD0
00015B86                            
00015B86                            ; ---------------------------------------------------------------------------
00015B86                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B86                            ; ---------------------------------------------------------------------------
00015B86                            
00015B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B86                            
00015B86                            
00015B86                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B86 3428 000C                  		move.w	$C(a0),d2
00015B8A 3628 0008                  		move.w	8(a0),d3
00015B8E                            
00015B8E                            loc_1504A:
00015B8E 0443 000A                  		subi.w	#$A,d3
00015B92 0A43 000F                  		eori.w	#$F,d3
00015B96 49F8 F768                  		lea	($FFFFF768).w,a4
00015B9A 367C FFF0                  		movea.w	#-$10,a3
00015B9E 3C3C 0800                  		move.w	#$800,d6
00015BA2 7A0E                       		moveq	#$E,d5
00015BA4 6100 FAAA                  		bsr.w	FindWall
00015BA8 143C 0040                  		move.b	#$40,d2
00015BAC 6000 FDA0                  		bra.w	loc_14E0A
00015BB0                            ; End of function Sonic_HitWall
00015BB0                            
00015BB0                            ; ---------------------------------------------------------------------------
00015BB0                            ; Subroutine to	detect when an object hits a wall to its left
00015BB0                            ; ---------------------------------------------------------------------------
00015BB0                            
00015BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BB0                            
00015BB0                            
00015BB0                            ObjHitWallLeft:
00015BB0 D668 0008                  		add.w	8(a0),d3
00015BB4 3428 000C                  		move.w	$C(a0),d2
00015BB8 49F8 F768                  		lea	($FFFFF768).w,a4
00015BBC 18BC 0000                  		move.b	#0,(a4)
00015BC0 367C FFF0                  		movea.w	#-$10,a3
00015BC4 3C3C 0800                  		move.w	#$800,d6
00015BC8 7A0E                       		moveq	#$E,d5
00015BCA 6100 FA84                  		bsr.w	FindWall
00015BCE 1638 F768                  		move.b	($FFFFF768).w,d3
00015BD2 0803 0000                  		btst	#0,d3
00015BD6 6700                       		beq.s	locret_15098
00015BD8 163C 0040                  		move.b	#$40,d3
00015BDC                            
00015BDC                            locret_15098:
00015BDC 4E75                       		rts	
00015BDE                            ; End of function ObjHitWallLeft
00015BDE                            
00015BDE                            ; ===========================================================================
00015BDE                            ; ---------------------------------------------------------------------------
00015BDE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015BDE                            ; ---------------------------------------------------------------------------
00015BDE                            
00015BDE                            Obj66:					; XREF: Obj_Index
00015BDE 7000                       		moveq	#0,d0
00015BE0 1028 0024                  		move.b	$24(a0),d0
00015BE4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015BE8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015BEC                            ; ===========================================================================
00015BEC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015BEE 0000                       		dc.w Obj66_Action-Obj66_Index
00015BF0 0000                       		dc.w Obj66_Display-Obj66_Index
00015BF2 0000                       		dc.w Obj66_Release-Obj66_Index
00015BF4                            ; ===========================================================================
00015BF4                            
00015BF4                            Obj66_Main:				; XREF: Obj66_Index
00015BF4 5428 0024                  		addq.b	#2,$24(a0)
00015BF8 323C 0001                  		move.w	#1,d1
00015BFC 2248                       		movea.l	a0,a1
00015BFE 6000                       		bra.s	Obj66_MakeItem
00015C00                            ; ===========================================================================
00015C00                            
00015C00                            Obj66_Loop:
00015C00 6100 860C                  		bsr.w	SingleObjLoad
00015C04 6600                       		bne.s	loc_150FE
00015C06 12BC 0066                  		move.b	#$66,0(a1)
00015C0A 5829 0024                  		addq.b	#4,$24(a1)
00015C0E 3368 0008 0008             		move.w	8(a0),8(a1)
00015C14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015C1A 137C 0003 0018             		move.b	#3,$18(a1)
00015C20 137C 0010 001A             		move.b	#$10,$1A(a1)
00015C26                            
00015C26                            Obj66_MakeItem:				; XREF: Obj66_Main
00015C26 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015C2E 337C 4348 0002             		move.w	#$4348,2(a1)
00015C34 0029 0004 0001             		ori.b	#4,1(a1)
00015C3A 137C 0038 0019             		move.b	#$38,$19(a1)
00015C40                            
00015C40                            loc_150FE:
00015C40 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015C44                            
00015C44 117C 0030 0019             		move.b	#$30,$19(a0)
00015C4A 117C 0004 0018             		move.b	#4,$18(a0)
00015C50 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C56 117C 0001 0034             		move.b	#1,$34(a0)
00015C5C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C62                            
00015C62                            Obj66_Action:				; XREF: Obj66_Index
00015C62 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C66 4A28 0001                  		tst.b	1(a0)
00015C6A 6A00 0000                  		bpl.w	Obj66_Display
00015C6E 323C 0030                  		move.w	#$30,d1
00015C72 3401                       		move.w	d1,d2
00015C74 3602                       		move.w	d2,d3
00015C76 5243                       		addq.w	#1,d3
00015C78 3828 0008                  		move.w	8(a0),d4
00015C7C 6100 A4D6                  		bsr.w	SolidObject
00015C80 0828 0005 0022             		btst	#5,$22(a0)
00015C86 6700 0000                  		beq.w	Obj66_Display
00015C8A 43F8 D000                  		lea	($FFFFD000).w,a1
00015C8E 720E                       		moveq	#$E,d1
00015C90 3029 0008                  		move.w	8(a1),d0
00015C94 B068 0008                  		cmp.w	8(a0),d0
00015C98 6500                       		bcs.s	Obj66_GrabSonic
00015C9A 7207                       		moveq	#7,d1
00015C9C                            
00015C9C                            Obj66_GrabSonic:
00015C9C B228 001A                  		cmp.b	$1A(a0),d1
00015CA0 6600                       		bne.s	Obj66_Display
00015CA2 1141 0032                  		move.b	d1,$32(a0)
00015CA6 5828 0024                  		addq.b	#4,$24(a0)
00015CAA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015CB0 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015CB6 337C 0800 0014             		move.w	#$800,$14(a1)
00015CBC 337C 0000 0010             		move.w	#0,$10(a1)
00015CC2 337C 0000 0012             		move.w	#0,$12(a1)
00015CC8 08A8 0005 0022             		bclr	#5,$22(a0)
00015CCE 08A9 0005 0022             		bclr	#5,$22(a1)
00015CD4 08E9 0001 0022             		bset	#1,$22(a1)
00015CDA 3429 0008                  		move.w	8(a1),d2
00015CDE 3629 000C                  		move.w	$C(a1),d3
00015CE2 6100 0000                  		bsr.w	Obj66_ChgPos
00015CE6 D569 0008                  		add.w	d2,8(a1)
00015CEA D769 000C                  		add.w	d3,$C(a1)
00015CEE E0E9 0008                  		asr	8(a1)
00015CF2 E0E9 000C                  		asr	$C(a1)
00015CF6                            
00015CF6                            Obj66_Display:				; XREF: Obj66_Index
00015CF6 6000 A134                  		bra.w	MarkObjGone
00015CFA                            ; ===========================================================================
00015CFA                            
00015CFA                            Obj66_Release:				; XREF: Obj66_Index
00015CFA 1028 001A                  		move.b	$1A(a0),d0
00015CFE 0C00 0004                  		cmpi.b	#4,d0
00015D02 6700                       		beq.s	loc_151C8
00015D04 0C00 0007                  		cmpi.b	#7,d0
00015D08 6600                       		bne.s	loc_151F8
00015D0A                            
00015D0A                            loc_151C8:
00015D0A B028 0032                  		cmp.b	$32(a0),d0
00015D0E 6700                       		beq.s	loc_151F8
00015D10 43F8 D000                  		lea	($FFFFD000).w,a1
00015D14 337C 0000 0010             		move.w	#0,$10(a1)
00015D1A 337C 0800 0012             		move.w	#$800,$12(a1)
00015D20 0C00 0004                  		cmpi.b	#4,d0
00015D24 6700                       		beq.s	loc_151F0
00015D26 337C 0800 0010             		move.w	#$800,$10(a1)
00015D2C 337C 0800 0012             		move.w	#$800,$12(a1)
00015D32                            
00015D32                            loc_151F0:
00015D32 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015D36 5928 0024                  		subq.b	#4,$24(a0)
00015D3A                            
00015D3A                            loc_151F8:
00015D3A 6100                       		bsr.s	Obj66_ChkSwitch
00015D3C 6100                       		bsr.s	Obj66_ChgPos
00015D3E 6000 A0EC                  		bra.w	MarkObjGone
00015D42                            
00015D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D42                            
00015D42                            
00015D42                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015D42 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015D46 7000                       		moveq	#0,d0
00015D48 1028 0038                  		move.b	$38(a0),d0
00015D4C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015D52 6700                       		beq.s	loc_15224	; if not, branch
00015D54 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D58 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D5A 4428 0034                  		neg.b	$34(a0)
00015D5E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D64 6000                       		bra.s	Obj66_Animate
00015D66                            ; ===========================================================================
00015D66                            
00015D66                            loc_15224:
00015D66 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D6A                            
00015D6A                            Obj66_Animate:
00015D6A 5328 001E                  		subq.b	#1,$1E(a0)
00015D6E 6A00                       		bpl.s	locret_15246
00015D70 117C 0007 001E             		move.b	#7,$1E(a0)
00015D76 1228 0034                  		move.b	$34(a0),d1
00015D7A 1028 001A                  		move.b	$1A(a0),d0
00015D7E D001                       		add.b	d1,d0
00015D80 0200 000F                  		andi.b	#$F,d0
00015D84 1140 001A                  		move.b	d0,$1A(a0)
00015D88                            
00015D88                            locret_15246:
00015D88 4E75                       		rts	
00015D8A                            ; End of function Obj66_ChkSwitch
00015D8A                            
00015D8A                            
00015D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D8A                            
00015D8A                            
00015D8A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D8A 43F8 D000                  		lea	($FFFFD000).w,a1
00015D8E 7000                       		moveq	#0,d0
00015D90 1028 001A                  		move.b	$1A(a0),d0
00015D94 D040                       		add.w	d0,d0
00015D96 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D9A 101A                       		move.b	(a2)+,d0
00015D9C 4880                       		ext.w	d0
00015D9E D068 0008                  		add.w	8(a0),d0
00015DA2 3340 0008                  		move.w	d0,8(a1)
00015DA6 101A                       		move.b	(a2)+,d0
00015DA8 4880                       		ext.w	d0
00015DAA D068 000C                  		add.w	$C(a0),d0
00015DAE 3340 000C                  		move.w	d0,$C(a1)
00015DB2 4E75                       		rts	
00015DB4                            ; End of function Obj66_ChgPos
00015DB4                            
00015DB4                            ; ===========================================================================
00015DB4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015DB8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015DBC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015DC0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015DC4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015DC8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015DCC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015DD0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015DD4                            ; ---------------------------------------------------------------------------
00015DD4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DD4                            ; ---------------------------------------------------------------------------
00015DD4                            Map_obj66:
00015DD4                            	include "_maps\obj66.asm"
00015DD4                            ; ---------------------------------------------------------------------------
00015DD4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DD4                            ; ---------------------------------------------------------------------------
00015DD4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015DD8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015DDC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015DE0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015DE4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015DE8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015DEC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015DF0 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015DF4 0000                       		dc.w byte_154A4-Map_obj66
00015DF6 06                         byte_152B4:	dc.b 6
00015DF7 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DFC 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015E01 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015E06 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015E0B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015E10 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015E15 06                         byte_152D3:	dc.b 6
00015E16 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015E1B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015E20 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015E25 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015E2A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015E2F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015E34 06                         byte_152F2:	dc.b 6
00015E35 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015E3A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015E3F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015E44 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015E49 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015E4E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015E53 06                         byte_15311:	dc.b 6
00015E54 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E59 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E5E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E63 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E68 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E6D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E72 06                         byte_15330:	dc.b 6
00015E73 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E78 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E7D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E82 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E87 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E8C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E91 06                         byte_1534F:	dc.b 6
00015E92 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E97 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E9C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015EA1 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015EA6 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015EAB 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015EB0 06                         byte_1536E:	dc.b 6
00015EB1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015EB6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015EBB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015EC0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015EC5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015ECA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015ECF 06                         byte_1538D:	dc.b 6
00015ED0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015ED5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015EDA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015EDF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015EE4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015EE9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015EEE 06                         byte_153AC:	dc.b 6
00015EEF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015EF4 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015EF9 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EFE E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015F03 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015F08 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015F0D 06                         byte_153CB:	dc.b 6
00015F0E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015F13 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015F18 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015F1D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015F22 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015F27 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015F2C 06                         byte_153EA:	dc.b 6
00015F2D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015F32 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015F37 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015F3C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015F41 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015F46 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015F4B 06                         byte_15409:	dc.b 6
00015F4C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015F51 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F56 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F5B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F60 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F65 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F6A 06                         byte_15428:	dc.b 6
00015F6B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F70 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F75 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F7A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F7F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F84 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F89 06                         byte_15447:	dc.b 6
00015F8A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F8F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F94 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F99 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F9E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015FA3 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015FA8 06                         byte_15466:	dc.b 6
00015FA9 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015FAE D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015FB3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015FB8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015FBD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015FC2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015FC7 06                         byte_15485:	dc.b 6
00015FC8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015FCD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015FD2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015FD7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015FDC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015FE1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015FE6 0C                         byte_154A4:	dc.b $C
00015FE7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015FEC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015FF1 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FF6 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FFB D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016000 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016005 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001600A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001600F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016014 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016019 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001601E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016024 00                         		even
00016024 00                         		even
00016024                            
00016024                            ; ===========================================================================
00016024                            ; ---------------------------------------------------------------------------
00016024                            ; Object 67 - disc that	you run	around (SBZ)
00016024                            ; ---------------------------------------------------------------------------
00016024                            
00016024                            Obj67:					; XREF: Obj_Index
00016024 7000                       		moveq	#0,d0
00016026 1028 0024                  		move.b	$24(a0),d0
0001602A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001602E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016032                            ; ===========================================================================
00016032 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016034 0000                       		dc.w Obj67_Action-Obj67_Index
00016036                            ; ===========================================================================
00016036                            
00016036                            Obj67_Main:				; XREF: Obj67_Index
00016036 5428 0024                  		addq.b	#2,$24(a0)
0001603A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016042 317C C344 0002             		move.w	#$C344,2(a0)
00016048 117C 0004 0001             		move.b	#4,1(a0)
0001604E 117C 0004 0018             		move.b	#4,$18(a0)
00016054 117C 0008 0019             		move.b	#8,$19(a0)
0001605A 3168 0008 0032             		move.w	8(a0),$32(a0)
00016060 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016066 117C 0018 0034             		move.b	#$18,$34(a0)
0001606C 117C 0048 0038             		move.b	#$48,$38(a0)
00016072 1228 0028                  		move.b	$28(a0),d1	; get object type
00016076 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001607A 6700                       		beq.s	loc_15546
0001607C 117C 0010 0034             		move.b	#$10,$34(a0)
00016082 117C 0038 0038             		move.b	#$38,$38(a0)
00016088                            
00016088                            loc_15546:
00016088 1228 0028                  		move.b	$28(a0),d1	; get object type
0001608C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016090 4881                       		ext.w	d1
00016092 E741                       		asl.w	#3,d1
00016094 3141 0036                  		move.w	d1,$36(a0)
00016098 1028 0022                  		move.b	$22(a0),d0
0001609C E418                       		ror.b	#2,d0
0001609E 0200 00C0                  		andi.b	#-$40,d0
000160A2 1140 0026                  		move.b	d0,$26(a0)
000160A6                            
000160A6                            Obj67_Action:				; XREF: Obj67_Index
000160A6 6100 0000                  		bsr.w	Obj67_MoveSonic
000160AA 6100 0000                  		bsr.w	Obj67_MoveSpot
000160AE 6000 0000                  		bra.w	Obj67_ChkDel
000160B2                            ; ===========================================================================
000160B2                            
000160B2                            Obj67_MoveSonic:			; XREF: Obj67_Action
000160B2 7400                       		moveq	#0,d2
000160B4 1428 0038                  		move.b	$38(a0),d2
000160B8 3602                       		move.w	d2,d3
000160BA D643                       		add.w	d3,d3
000160BC 43F8 D000                  		lea	($FFFFD000).w,a1
000160C0 3029 0008                  		move.w	8(a1),d0
000160C4 9068 0032                  		sub.w	$32(a0),d0
000160C8 D042                       		add.w	d2,d0
000160CA B043                       		cmp.w	d3,d0
000160CC 6400                       		bcc.s	loc_155A8
000160CE 3229 000C                  		move.w	$C(a1),d1
000160D2 9268 0030                  		sub.w	$30(a0),d1
000160D6 D242                       		add.w	d2,d1
000160D8 B243                       		cmp.w	d3,d1
000160DA 6400                       		bcc.s	loc_155A8
000160DC 0829 0001 0022             		btst	#1,$22(a1)
000160E2 6700                       		beq.s	loc_155B8
000160E4 4228 003A                  		clr.b	$3A(a0)
000160E8 4E75                       		rts	
000160EA                            ; ===========================================================================
000160EA                            
000160EA                            loc_155A8:
000160EA 4A28 003A                  		tst.b	$3A(a0)
000160EE 6700                       		beq.s	locret_155B6
000160F0 4229 0038                  		clr.b	$38(a1)
000160F4 4228 003A                  		clr.b	$3A(a0)
000160F8                            
000160F8                            locret_155B6:
000160F8 4E75                       		rts	
000160FA                            ; ===========================================================================
000160FA                            
000160FA                            loc_155B8:
000160FA 4A28 003A                  		tst.b	$3A(a0)
000160FE 6600                       		bne.s	loc_155E2
00016100 117C 0001 003A             		move.b	#1,$3A(a0)
00016106 0829 0002 0022             		btst	#2,$22(a1)
0001610C 6600                       		bne.s	loc_155D0
0001610E 4229 001C                  		clr.b	$1C(a1)
00016112                            
00016112                            loc_155D0:
00016112 08A9 0005 0022             		bclr	#5,$22(a1)
00016118 137C 0001 001D             		move.b	#1,$1D(a1)
0001611E 137C 0001 0038             		move.b	#1,$38(a1)
00016124                            
00016124                            loc_155E2:
00016124 3029 0014                  		move.w	$14(a1),d0
00016128 4A68 0036                  		tst.w	$36(a0)
0001612C 6A00                       		bpl.s	loc_15608
0001612E 0C40 FC00                  		cmpi.w	#-$400,d0
00016132 6F00                       		ble.s	loc_155FA
00016134 337C FC00 0014             		move.w	#-$400,$14(a1)
0001613A 4E75                       		rts	
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            loc_155FA:
0001613C 0C40 F100                  		cmpi.w	#-$F00,d0
00016140 6C00                       		bge.s	locret_15606
00016142 337C F100 0014             		move.w	#-$F00,$14(a1)
00016148                            
00016148                            locret_15606:
00016148 4E75                       		rts	
0001614A                            ; ===========================================================================
0001614A                            
0001614A                            loc_15608:
0001614A 0C40 0400                  		cmpi.w	#$400,d0
0001614E 6C00                       		bge.s	loc_15616
00016150 337C 0400 0014             		move.w	#$400,$14(a1)
00016156 4E75                       		rts	
00016158                            ; ===========================================================================
00016158                            
00016158                            loc_15616:
00016158 0C40 0F00                  		cmpi.w	#$F00,d0
0001615C 6F00                       		ble.s	locret_15622
0001615E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016164                            
00016164                            locret_15622:
00016164 4E75                       		rts	
00016166                            ; ===========================================================================
00016166                            
00016166                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016166 3028 0036                  		move.w	$36(a0),d0
0001616A D168 0026                  		add.w	d0,$26(a0)
0001616E 1028 0026                  		move.b	$26(a0),d0
00016172 4EB9 0000 28EC             		jsr	(CalcSine).l
00016178 3428 0030                  		move.w	$30(a0),d2
0001617C 3628 0032                  		move.w	$32(a0),d3
00016180 7800                       		moveq	#0,d4
00016182 1828 0034                  		move.b	$34(a0),d4
00016186 E14C                       		lsl.w	#8,d4
00016188 2A04                       		move.l	d4,d5
0001618A C9C0                       		muls.w	d0,d4
0001618C 4844                       		swap	d4
0001618E CBC1                       		muls.w	d1,d5
00016190 4845                       		swap	d5
00016192 D842                       		add.w	d2,d4
00016194 DA43                       		add.w	d3,d5
00016196 3144 000C                  		move.w	d4,$C(a0)
0001619A 3145 0008                  		move.w	d5,8(a0)
0001619E 4E75                       		rts	
000161A0                            ; ===========================================================================
000161A0                            
000161A0                            Obj67_ChkDel:				; XREF: Obj67_Action
000161A0 3028 0032                  		move.w	$32(a0),d0
000161A4 0240 FF80                  		andi.w	#-$80,d0
000161A8 3238 F700                  		move.w	($FFFFF700).w,d1
000161AC 0441 0080                  		subi.w	#$80,d1
000161B0 0241 FF80                  		andi.w	#-$80,d1
000161B4 9041                       		sub.w	d1,d0
000161B6 0C40 0280                  		cmpi.w	#$280,d0
000161BA 6200                       		bhi.s	Obj67_Delete
000161BC 4EF9 0000 DD82             		jmp	DisplaySprite
000161C2                            ; ===========================================================================
000161C2                            
000161C2                            Obj67_Delete:
000161C2 4EF9 0000 DDBE             		jmp	DeleteObject
000161C8                            ; ===========================================================================
000161C8                            ; ---------------------------------------------------------------------------
000161C8                            ; Sprite mappings - disc that you run around (SBZ)
000161C8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161C8                            ; part of the level tiles.)
000161C8                            ; ---------------------------------------------------------------------------
000161C8                            Map_obj67:
000161C8                            	include "_maps\obj67.asm"
000161C8                            ; ---------------------------------------------------------------------------
000161C8                            ; Sprite mappings - disc that you run around (SBZ)
000161C8                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161C8                            ; part of the level tiles.)
000161C8                            ; ---------------------------------------------------------------------------
000161C8 0000                       		dc.w byte_15688-Map_obj67
000161CA 01                         byte_15688:	dc.b 1
000161CB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000161D0                            		even
000161D0                            		even
000161D0                            
000161D0                            ; ===========================================================================
000161D0                            ; ---------------------------------------------------------------------------
000161D0                            ; Object 68 - conveyor belts (SBZ)
000161D0                            ; ---------------------------------------------------------------------------
000161D0                            
000161D0                            Obj68:					; XREF: Obj_Index
000161D0 7000                       		moveq	#0,d0
000161D2 1028 0024                  		move.b	$24(a0),d0
000161D6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000161DA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000161DE                            ; ===========================================================================
000161DE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000161E0 0000                       		dc.w Obj68_Action-Obj68_Index
000161E2                            ; ===========================================================================
000161E2                            
000161E2                            Obj68_Main:				; XREF: Obj68_Index
000161E2 5428 0024                  		addq.b	#2,$24(a0)
000161E6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000161EC 1228 0028                  		move.b	$28(a0),d1	; get object type
000161F0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161F4 6700                       		beq.s	loc_156BA	; if zero, branch
000161F6 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161FC                            
000161FC                            loc_156BA:
000161FC 1228 0028                  		move.b	$28(a0),d1	; get object type
00016200 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016204 4881                       		ext.w	d1
00016206 E841                       		asr.w	#4,d1
00016208 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001620C                            
0001620C                            Obj68_Action:				; XREF: Obj68_Index
0001620C 6100                       		bsr.s	Obj68_MoveSonic
0001620E 3028 0008                  		move.w	8(a0),d0
00016212 0240 FF80                  		andi.w	#$FF80,d0
00016216 3238 F700                  		move.w	($FFFFF700).w,d1
0001621A 0441 0080                  		subi.w	#$80,d1
0001621E 0241 FF80                  		andi.w	#$FF80,d1
00016222 9041                       		sub.w	d1,d0
00016224 0C40 0280                  		cmpi.w	#$280,d0
00016228 6200                       		bhi.s	Obj68_Delete
0001622A 4E75                       		rts	
0001622C                            ; ===========================================================================
0001622C                            
0001622C                            Obj68_Delete:
0001622C 4EF9 0000 DDBE             		jmp	DeleteObject
00016232                            ; ===========================================================================
00016232                            
00016232                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016232 7400                       		moveq	#0,d2
00016234 1428 0038                  		move.b	$38(a0),d2
00016238 3602                       		move.w	d2,d3
0001623A D643                       		add.w	d3,d3
0001623C 43F8 D000                  		lea	($FFFFD000).w,a1
00016240 3029 0008                  		move.w	8(a1),d0
00016244 9068 0008                  		sub.w	8(a0),d0
00016248 D042                       		add.w	d2,d0
0001624A B043                       		cmp.w	d3,d0
0001624C 6400                       		bcc.s	locret_1572E
0001624E 3229 000C                  		move.w	$C(a1),d1
00016252 9268 000C                  		sub.w	$C(a0),d1
00016256 0641 0030                  		addi.w	#$30,d1
0001625A 0C41 0030                  		cmpi.w	#$30,d1
0001625E 6400                       		bcc.s	locret_1572E
00016260 0829 0001 0022             		btst	#1,$22(a1)
00016266 6600                       		bne.s	locret_1572E
00016268 3028 0036                  		move.w	$36(a0),d0
0001626C D169 0008                  		add.w	d0,8(a1)
00016270                            
00016270                            locret_1572E:
00016270 4E75                       		rts	
00016272                            
00016272                            ; ===========================================================================
00016272                            ; ---------------------------------------------------------------------------
00016272                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016272                            ; ---------------------------------------------------------------------------
00016272                            
00016272                            Obj69:					; XREF: Obj_Index
00016272 7000                       		moveq	#0,d0
00016274 1028 0024                  		move.b	$24(a0),d0
00016278 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001627C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016280                            ; ===========================================================================
00016280 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016282 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016284 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016286                            ; ===========================================================================
00016286                            
00016286                            Obj69_Main:				; XREF: Obj69_Index
00016286 5428 0024                  		addq.b	#2,$24(a0)
0001628A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016292 317C 4492 0002             		move.w	#$4492,2(a0)
00016298 0028 0004 0001             		ori.b	#4,1(a0)
0001629E 117C 0080 0019             		move.b	#$80,$19(a0)
000162A4 7000                       		moveq	#0,d0
000162A6 1028 0028                  		move.b	$28(a0),d0
000162AA 0240 000F                  		andi.w	#$F,d0
000162AE C0FC 003C                  		mulu.w	#$3C,d0
000162B2 3140 0032                  		move.w	d0,$32(a0)
000162B6 4A28 0028                  		tst.b	$28(a0)
000162BA 6A00                       		bpl.s	Obj69_Trapdoor
000162BC 5428 0024                  		addq.b	#2,$24(a0)
000162C0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000162C8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000162CE 117C 0010 0019             		move.b	#$10,$19(a0)
000162D4 117C 0002 001C             		move.b	#2,$1C(a0)
000162DA 7000                       		moveq	#0,d0
000162DC 1028 0028                  		move.b	$28(a0),d0	; get object type
000162E0 3200                       		move.w	d0,d1
000162E2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000162E6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000162EA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000162EE 3140 0032                  		move.w	d0,$32(a0)
000162F2 0241 0070                  		andi.w	#$70,d1
000162F6 0641 0010                  		addi.w	#$10,d1
000162FA E549                       		lsl.w	#2,d1
000162FC 5341                       		subq.w	#1,d1
000162FE 3141 0036                  		move.w	d1,$36(a0)
00016302 6000                       		bra.s	Obj69_Spinner
00016304                            ; ===========================================================================
00016304                            
00016304                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016304 5368 0030                  		subq.w	#1,$30(a0)
00016308 6A00                       		bpl.s	Obj69_Animate
0001630A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016310 0868 0000 001C             		bchg	#0,$1C(a0)
00016316 4A28 0001                  		tst.b	1(a0)
0001631A 6A00                       		bpl.s	Obj69_Animate
0001631C 303C 00BB                  		move.w	#$BB,d0
00016320 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play door sound
00016326                            
00016326                            Obj69_Animate:
00016326 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001632C 4EB9 0000 AE7A             		jsr	AnimateSprite
00016332 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016336 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016338 323C 004B                  		move.w	#$4B,d1
0001633C 343C 000C                  		move.w	#$C,d2
00016340 3602                       		move.w	d2,d3
00016342 5243                       		addq.w	#1,d3
00016344 3828 0008                  		move.w	8(a0),d4
00016348 6100 9E0A                  		bsr.w	SolidObject
0001634C 6000 9ADE                  		bra.w	MarkObjGone
00016350                            ; ===========================================================================
00016350                            
00016350                            Obj69_NotSolid:
00016350 0828 0003 0022             		btst	#3,$22(a0)
00016356 6700                       		beq.s	Obj69_Display
00016358 43F8 D000                  		lea	($FFFFD000).w,a1
0001635C 08A9 0003 0022             		bclr	#3,$22(a1)
00016362 08A8 0003 0022             		bclr	#3,$22(a0)
00016368 4228 0025                  		clr.b	$25(a0)
0001636C                            
0001636C                            Obj69_Display:
0001636C 6000 9ABE                  		bra.w	MarkObjGone
00016370                            ; ===========================================================================
00016370                            
00016370                            Obj69_Spinner:				; XREF: Obj69_Index
00016370 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016374 C068 0036                  		and.w	$36(a0),d0
00016378 6600                       		bne.s	Obj69_Delay
0001637A 117C 0001 0034             		move.b	#1,$34(a0)
00016380                            
00016380                            Obj69_Delay:
00016380 4A28 0034                  		tst.b	$34(a0)
00016384 6700                       		beq.s	Obj69_Animate2
00016386 5368 0030                  		subq.w	#1,$30(a0)
0001638A 6A00                       		bpl.s	Obj69_Animate2
0001638C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016392 4228 0034                  		clr.b	$34(a0)
00016396 0868 0000 001C             		bchg	#0,$1C(a0)
0001639C                            
0001639C                            Obj69_Animate2:
0001639C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000163A2 4EB9 0000 AE7A             		jsr	AnimateSprite
000163A8 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000163AC 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000163AE 323C 001B                  		move.w	#$1B,d1
000163B2 343C 0007                  		move.w	#7,d2
000163B6 3602                       		move.w	d2,d3
000163B8 5243                       		addq.w	#1,d3
000163BA 3828 0008                  		move.w	8(a0),d4
000163BE 6100 9D94                  		bsr.w	SolidObject
000163C2 6000 9A68                  		bra.w	MarkObjGone
000163C6                            ; ===========================================================================
000163C6                            
000163C6                            Obj69_NotSolid2:
000163C6 0828 0003 0022             		btst	#3,$22(a0)
000163CC 6700                       		beq.s	Obj69_Display2
000163CE 43F8 D000                  		lea	($FFFFD000).w,a1
000163D2 08A9 0003 0022             		bclr	#3,$22(a1)
000163D8 08A8 0003 0022             		bclr	#3,$22(a0)
000163DE 4228 0025                  		clr.b	$25(a0)
000163E2                            
000163E2                            Obj69_Display2:
000163E2 6000 9A48                  		bra.w	MarkObjGone
000163E6                            ; ===========================================================================
000163E6                            Ani_obj69:
000163E6                            	include "_anim\obj69.asm"
000163E6                            ; ---------------------------------------------------------------------------
000163E6                            ; Animation script - trapdoor (SBZ)
000163E6                            ; ---------------------------------------------------------------------------
000163E6 0000                       		dc.w byte_158AC-Ani_obj69
000163E8 0000                       		dc.w byte_158B2-Ani_obj69
000163EA 0000                       		dc.w byte_158B8-Ani_obj69
000163EC 0000                       		dc.w byte_158CC-Ani_obj69
000163EE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000163F4 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163FA 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016407 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001640E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001641B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016422                            		even
00016422                            		even
00016422                            
00016422                            ; ---------------------------------------------------------------------------
00016422                            ; Sprite mappings - trapdoor (SBZ)
00016422                            ; ---------------------------------------------------------------------------
00016422                            Map_obj69:
00016422                            	include "_maps\obj69.asm"
00016422                            ; ---------------------------------------------------------------------------
00016422                            ; Sprite mappings - trapdoor (SBZ)
00016422                            ; ---------------------------------------------------------------------------
00016422 0000                       		dc.w byte_158E6-Map_obj69
00016424 0000                       		dc.w byte_158FB-Map_obj69
00016426 0000                       		dc.w byte_15924-Map_obj69
00016428 04                         byte_158E6:	dc.b 4
00016429 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001642E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016433 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016438 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001643D 08                         byte_158FB:	dc.b 8
0001643E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016443 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016448 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001644D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016452 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016457 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001645C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016461 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016466 04                         byte_15924:	dc.b 4
00016467 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001646C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016471 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016476 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001647C 00                         		even
0001647C 00                         		even
0001647C                            
0001647C                            ; ---------------------------------------------------------------------------
0001647C                            ; Sprite mappings - spinning platforms (SBZ)
0001647C                            ; ---------------------------------------------------------------------------
0001647C                            Map_obj69a:
0001647C                            	include "_maps\obj69a.asm"
0001647C                            ; ---------------------------------------------------------------------------
0001647C                            ; Sprite mappings - spinning platforms (SBZ)
0001647C                            ; ---------------------------------------------------------------------------
0001647C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016480 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016484 0000                       		dc.w byte_15970-Map_obj69a
00016486 02                         byte_15944:	dc.b 2
00016487 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001648C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016491 02                         byte_1594F:	dc.b 2
00016492 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016497 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001649C 02                         byte_1595A:	dc.b 2
0001649D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000164A2 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000164A7 02                         byte_15965:	dc.b 2
000164A8 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000164AD 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000164B2 02                         byte_15970:	dc.b 2
000164B3 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000164B8 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000164BE 00                         		even
000164BE 00                         		even
000164BE                            
000164BE                            ; ===========================================================================
000164BE                            ; ---------------------------------------------------------------------------
000164BE                            ; Object 6A - ground saws and pizza cutters (SBZ)
000164BE                            ; ---------------------------------------------------------------------------
000164BE                            
000164BE                            Obj6A:					; XREF: Obj_Index
000164BE 7000                       		moveq	#0,d0
000164C0 1028 0024                  		move.b	$24(a0),d0
000164C4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000164C8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000164CC                            ; ===========================================================================
000164CC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000164CE 0000                       		dc.w Obj6A_Action-Obj6A_Index
000164D0                            ; ===========================================================================
000164D0                            
000164D0                            Obj6A_Main:				; XREF: Obj6A_Index
000164D0 5428 0024                  		addq.b	#2,$24(a0)
000164D4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000164DC 317C 43B5 0002             		move.w	#$43B5,2(a0)
000164E2 117C 0004 0001             		move.b	#4,1(a0)
000164E8 117C 0004 0018             		move.b	#4,$18(a0)
000164EE 117C 0020 0019             		move.b	#$20,$19(a0)
000164F4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016500 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016506 6400                       		bcc.s	Obj6A_Action
00016508 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001650E                            
0001650E                            Obj6A_Action:				; XREF: Obj6A_Index
0001650E 7000                       		moveq	#0,d0
00016510 1028 0028                  		move.b	$28(a0),d0
00016514 0240 0007                  		andi.w	#7,d0
00016518 D040                       		add.w	d0,d0
0001651A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001651E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016522 3028 003A                  		move.w	$3A(a0),d0
00016526 0240 FF80                  		andi.w	#$FF80,d0
0001652A 3238 F700                  		move.w	($FFFFF700).w,d1
0001652E 0441 0080                  		subi.w	#$80,d1
00016532 0241 FF80                  		andi.w	#$FF80,d1
00016536 9041                       		sub.w	d1,d0
00016538 0C40 0280                  		cmpi.w	#$280,d0
0001653C 6200                       		bhi.s	Obj6A_Delete
0001653E 4EF9 0000 DD82             		jmp	DisplaySprite
00016544                            ; ===========================================================================
00016544                            
00016544                            Obj6A_Delete:
00016544 4EF9 0000 DDBE             		jmp	DeleteObject
0001654A                            ; ===========================================================================
0001654A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001654E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016552 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016554                            ; ===========================================================================
00016554                            
00016554                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016554 4E75                       		rts	
00016556                            ; ===========================================================================
00016556                            
00016556                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016556 323C 0060                  		move.w	#$60,d1
0001655A 7000                       		moveq	#0,d0
0001655C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016560 0828 0000 0022             		btst	#0,$22(a0)
00016566 6700                       		beq.s	Obj6A_Animate01
00016568 4440                       		neg.w	d0
0001656A D041                       		add.w	d1,d0
0001656C                            
0001656C                            Obj6A_Animate01:
0001656C 3228 003A                  		move.w	$3A(a0),d1
00016570 9240                       		sub.w	d0,d1
00016572 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016576 5328 001E                  		subq.b	#1,$1E(a0)
0001657A 6A00                       		bpl.s	loc_15A46
0001657C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016582 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016588                            
00016588                            loc_15A46:
00016588 4A28 0001                  		tst.b	1(a0)
0001658C 6A00                       		bpl.s	locret_15A60
0001658E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016592 0240 000F                  		andi.w	#$F,d0
00016596 6600                       		bne.s	locret_15A60
00016598 303C 00B0                  		move.w	#$B0,d0
0001659C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
000165A2                            
000165A2                            locret_15A60:
000165A2 4E75                       		rts	
000165A4                            ; ===========================================================================
000165A4                            
000165A4                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000165A4 323C 0030                  		move.w	#$30,d1
000165A8 7000                       		moveq	#0,d0
000165AA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165AE 0828 0000 0022             		btst	#0,$22(a0)
000165B4 6700                       		beq.s	Obj6A_Animate02
000165B6 4440                       		neg.w	d0
000165B8 0640 0080                  		addi.w	#$80,d0
000165BC                            
000165BC                            Obj6A_Animate02:
000165BC 3228 0038                  		move.w	$38(a0),d1
000165C0 9240                       		sub.w	d0,d1
000165C2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000165C6 5328 001E                  		subq.b	#1,$1E(a0)
000165CA 6A00                       		bpl.s	loc_15A96
000165CC 117C 0002 001E             		move.b	#2,$1E(a0)
000165D2 0868 0000 001A             		bchg	#0,$1A(a0)
000165D8                            
000165D8                            loc_15A96:
000165D8 4A28 0001                  		tst.b	1(a0)
000165DC 6A00                       		bpl.s	locret_15AB0
000165DE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165E2 0C00 0018                  		cmpi.b	#$18,d0
000165E6 6600                       		bne.s	locret_15AB0
000165E8 303C 00B0                  		move.w	#$B0,d0
000165EC 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
000165F2                            
000165F2                            locret_15AB0:
000165F2 4E75                       		rts	
000165F4                            ; ===========================================================================
000165F4                            
000165F4                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000165F4 4A28 003D                  		tst.b	$3D(a0)
000165F8 6600                       		bne.s	Obj6A_Animate03
000165FA 3038 D008                  		move.w	($FFFFD008).w,d0
000165FE 0440 00C0                  		subi.w	#$C0,d0
00016602 6500                       		bcs.s	loc_15B02
00016604 9068 0008                  		sub.w	8(a0),d0
00016608 6500                       		bcs.s	loc_15B02
0001660A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001660E 0440 0080                  		subi.w	#$80,d0
00016612 B068 000C                  		cmp.w	$C(a0),d0
00016616 6400                       		bcc.s	locret_15B04
00016618 0640 0100                  		addi.w	#$100,d0
0001661C B068 000C                  		cmp.w	$C(a0),d0
00016620 6500                       		bcs.s	locret_15B04
00016622 117C 0001 003D             		move.b	#1,$3D(a0)
00016628 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001662E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016634 117C 0002 001A             		move.b	#2,$1A(a0)
0001663A 303C 00B0                  		move.w	#$B0,d0
0001663E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
00016644                            
00016644                            loc_15B02:
00016644 588F                       		addq.l	#4,sp
00016646                            
00016646                            locret_15B04:
00016646 4E75                       		rts	
00016648                            ; ===========================================================================
00016648                            
00016648                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016648 4EB9 0000 DD5C             		jsr	SpeedToPos
0001664E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016654 5328 001E                  		subq.b	#1,$1E(a0)
00016658 6A00                       		bpl.s	locret_15B24
0001665A 117C 0002 001E             		move.b	#2,$1E(a0)
00016660 0868 0000 001A             		bchg	#0,$1A(a0)
00016666                            
00016666                            locret_15B24:
00016666 4E75                       		rts	
00016668                            ; ===========================================================================
00016668                            
00016668                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016668 4A28 003D                  		tst.b	$3D(a0)
0001666C 6600                       		bne.s	Obj6A_Animate04
0001666E 3038 D008                  		move.w	($FFFFD008).w,d0
00016672 0640 00E0                  		addi.w	#$E0,d0
00016676 9068 0008                  		sub.w	8(a0),d0
0001667A 6400                       		bcc.s	loc_15B74
0001667C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016680 0440 0080                  		subi.w	#$80,d0
00016684 B068 000C                  		cmp.w	$C(a0),d0
00016688 6400                       		bcc.s	locret_15B76
0001668A 0640 0100                  		addi.w	#$100,d0
0001668E B068 000C                  		cmp.w	$C(a0),d0
00016692 6500                       		bcs.s	locret_15B76
00016694 117C 0001 003D             		move.b	#1,$3D(a0)
0001669A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000166A0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000166A6 117C 0002 001A             		move.b	#2,$1A(a0)
000166AC 303C 00B0                  		move.w	#$B0,d0
000166B0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
000166B6                            
000166B6                            loc_15B74:
000166B6 588F                       		addq.l	#4,sp
000166B8                            
000166B8                            locret_15B76:
000166B8 4E75                       		rts	
000166BA                            ; ===========================================================================
000166BA                            
000166BA                            Obj6A_Animate04:
000166BA 4EB9 0000 DD5C             		jsr	SpeedToPos
000166C0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000166C6 5328 001E                  		subq.b	#1,$1E(a0)
000166CA 6A00                       		bpl.s	locret_15B96
000166CC 117C 0002 001E             		move.b	#2,$1E(a0)
000166D2 0868 0000 001A             		bchg	#0,$1A(a0)
000166D8                            
000166D8                            locret_15B96:
000166D8 4E75                       		rts	
000166DA                            ; ===========================================================================
000166DA                            ; ---------------------------------------------------------------------------
000166DA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166DA                            ; ---------------------------------------------------------------------------
000166DA                            Map_obj6A:
000166DA                            	include "_maps\obj6A.asm"
000166DA                            ; ---------------------------------------------------------------------------
000166DA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166DA                            ; ---------------------------------------------------------------------------
000166DA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000166DE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000166E2 07                         byte_15BA0:	dc.b 7
000166E3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166E8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166ED E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166F2 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166F7 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166FC 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016701 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016706 07                         byte_15BC4:	dc.b 7
00016707 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001670C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016711 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016716 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001671B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016720 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016725 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001672A 04                         byte_15BE8:	dc.b 4
0001672B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016730 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016735 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001673A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001673F 04                         byte_15BFD:	dc.b 4
00016740 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016745 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001674A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001674F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016754                            		even
00016754                            		even
00016754                            
00016754                            ; ===========================================================================
00016754                            ; ---------------------------------------------------------------------------
00016754                            ; Object 6B - stomper (SBZ)
00016754                            ; ---------------------------------------------------------------------------
00016754                            
00016754                            Obj6B:					; XREF: Obj_Index
00016754 7000                       		moveq	#0,d0
00016756 1028 0024                  		move.b	$24(a0),d0
0001675A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001675E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016762                            ; ===========================================================================
00016762 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016764 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016766                            
00016766 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001676A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001676E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016772 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016776 8040 0005                  		dc.b  $80, $40,	  0,   5
0001677A                            ; ===========================================================================
0001677A                            
0001677A                            Obj6B_Main:				; XREF: Obj6B_Index
0001677A 5428 0024                  		addq.b	#2,$24(a0)
0001677E 7000                       		moveq	#0,d0
00016780 1028 0028                  		move.b	$28(a0),d0
00016784 E448                       		lsr.w	#2,d0
00016786 0240 001C                  		andi.w	#$1C,d0
0001678A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001678E 115B 0019                  		move.b	(a3)+,$19(a0)
00016792 115B 0016                  		move.b	(a3)+,$16(a0)
00016796 E448                       		lsr.w	#2,d0
00016798 1140 001A                  		move.b	d0,$1A(a0)
0001679C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000167A4 317C 22C0 0002             		move.w	#$22C0,2(a0)
000167AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000167B0 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000167B2 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000167B8 6700                       		beq.s	Obj6B_SBZ3
000167BA                            
000167BA                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000167BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167BE 7000                       		moveq	#0,d0
000167C0 1028 0023                  		move.b	$23(a0),d0
000167C4 6700                       		beq.s	Obj6B_Delete
000167C6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167CC                            
000167CC                            Obj6B_Delete:
000167CC 4EF9 0000 DDBE             		jmp	DeleteObject
000167D2                            ; ===========================================================================
000167D2                            
000167D2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000167D2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000167D8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000167DE 6600                       		bne.s	Obj6B_SBZ12
000167E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167E4 7000                       		moveq	#0,d0
000167E6 1028 0023                  		move.b	$23(a0),d0
000167EA 6700                       		beq.s	Obj6B_SBZ12
000167EC 0832 0000 0002             		btst	#0,2(a2,d0.w)
000167F2 6700                       		beq.s	Obj6B_SBZ12
000167F4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167F8 60C0                       		bra.s	Obj6B_ChkGone
000167FA                            ; ===========================================================================
000167FA                            
000167FA                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167FA 0028 0004 0001             		ori.b	#4,1(a0)
00016800 117C 0004 0018             		move.b	#4,$18(a0)
00016806 3168 0008 0034             		move.w	8(a0),$34(a0)
0001680C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016812 7000                       		moveq	#0,d0
00016814 101B                       		move.b	(a3)+,d0
00016816 3140 003C                  		move.w	d0,$3C(a0)
0001681A 7000                       		moveq	#0,d0
0001681C 1028 0028                  		move.b	$28(a0),d0
00016820 6A00                       		bpl.s	Obj6B_Action
00016822 0200 000F                  		andi.b	#$F,d0
00016826 1140 003E                  		move.b	d0,$3E(a0)
0001682A 1153 0028                  		move.b	(a3),$28(a0)
0001682E 0C13 0005                  		cmpi.b	#5,(a3)
00016832 6600                       		bne.s	Obj6B_ChkGone2
00016834 08E8 0004 0001             		bset	#4,1(a0)
0001683A                            
0001683A                            Obj6B_ChkGone2:
0001683A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001683E 7000                       		moveq	#0,d0
00016840 1028 0023                  		move.b	$23(a0),d0
00016844 6700                       		beq.s	Obj6B_Action
00016846 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001684C                            
0001684C                            Obj6B_Action:				; XREF: Obj6B_Index
0001684C 3F28 0008                  		move.w	8(a0),-(sp)
00016850 7000                       		moveq	#0,d0
00016852 1028 0028                  		move.b	$28(a0),d0
00016856 0240 000F                  		andi.w	#$F,d0
0001685A D040                       		add.w	d0,d0
0001685C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016860 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016864 381F                       		move.w	(sp)+,d4
00016866 4A28 0001                  		tst.b	1(a0)
0001686A 6A00                       		bpl.s	Obj6B_ChkDel
0001686C 7200                       		moveq	#0,d1
0001686E 1228 0019                  		move.b	$19(a0),d1
00016872 0641 000B                  		addi.w	#$B,d1
00016876 7400                       		moveq	#0,d2
00016878 1428 0016                  		move.b	$16(a0),d2
0001687C 3602                       		move.w	d2,d3
0001687E 5243                       		addq.w	#1,d3
00016880 6100 98D2                  		bsr.w	SolidObject
00016884                            
00016884                            Obj6B_ChkDel:
00016884 3028 0034                  		move.w	$34(a0),d0
00016888 0240 FF80                  		andi.w	#$FF80,d0
0001688C 3238 F700                  		move.w	($FFFFF700).w,d1
00016890 0441 0080                  		subi.w	#$80,d1
00016894 0241 FF80                  		andi.w	#$FF80,d1
00016898 9041                       		sub.w	d1,d0
0001689A 0C40 0280                  		cmpi.w	#$280,d0
0001689E 6200                       		bhi.s	loc_15D64
000168A0 4EF9 0000 DD82             		jmp	DisplaySprite
000168A6                            ; ===========================================================================
000168A6                            
000168A6                            loc_15D64:
000168A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000168AC 6600                       		bne.s	Obj6B_Delete2
000168AE 4238 F7CB                  		clr.b	($FFFFF7CB).w
000168B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168B6 7000                       		moveq	#0,d0
000168B8 1028 0023                  		move.b	$23(a0),d0
000168BC 6700                       		beq.s	Obj6B_Delete2
000168BE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000168C4                            
000168C4                            Obj6B_Delete2:
000168C4 4EF9 0000 DDBE             		jmp	DeleteObject
000168CA                            ; ===========================================================================
000168CA 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000168CE 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000168D2 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000168D6                            ; ===========================================================================
000168D6                            
000168D6                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000168D6 4E75                       		rts	
000168D8                            ; ===========================================================================
000168D8                            
000168D8                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000168D8 4A28 0038                  		tst.b	$38(a0)
000168DC 6600                       		bne.s	loc_15DB4
000168DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000168E2 7000                       		moveq	#0,d0
000168E4 1028 003E                  		move.b	$3E(a0),d0
000168E8 0832 0000 0000             		btst	#0,(a2,d0.w)
000168EE 6700                       		beq.s	loc_15DC2
000168F0 117C 0001 0038             		move.b	#1,$38(a0)
000168F6                            
000168F6                            loc_15DB4:
000168F6 3028 003C                  		move.w	$3C(a0),d0
000168FA B068 003A                  		cmp.w	$3A(a0),d0
000168FE 6700                       		beq.s	loc_15DE0
00016900 5468 003A                  		addq.w	#2,$3A(a0)
00016904                            
00016904                            loc_15DC2:
00016904 3028 003A                  		move.w	$3A(a0),d0
00016908 0828 0000 0022             		btst	#0,$22(a0)
0001690E 6700                       		beq.s	loc_15DD4
00016910 4440                       		neg.w	d0
00016912 0640 0080                  		addi.w	#$80,d0
00016916                            
00016916                            loc_15DD4:
00016916 3228 0034                  		move.w	$34(a0),d1
0001691A 9240                       		sub.w	d0,d1
0001691C 3141 0008                  		move.w	d1,8(a0)
00016920 4E75                       		rts	
00016922                            ; ===========================================================================
00016922                            
00016922                            loc_15DE0:
00016922 5228 0028                  		addq.b	#1,$28(a0)
00016926 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001692C 4228 0038                  		clr.b	$38(a0)
00016930 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016934 7000                       		moveq	#0,d0
00016936 1028 0023                  		move.b	$23(a0),d0
0001693A 67C8                       		beq.s	loc_15DC2
0001693C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016942 60C0                       		bra.s	loc_15DC2
00016944                            ; ===========================================================================
00016944                            
00016944                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016944 4A28 0038                  		tst.b	$38(a0)
00016948 6600                       		bne.s	loc_15E14
0001694A 5368 0036                  		subq.w	#1,$36(a0)
0001694E 6600                       		bne.s	loc_15E1E
00016950 117C 0001 0038             		move.b	#1,$38(a0)
00016956                            
00016956                            loc_15E14:
00016956 4A68 003A                  		tst.w	$3A(a0)
0001695A 6700                       		beq.s	loc_15E3C
0001695C 5568 003A                  		subq.w	#2,$3A(a0)
00016960                            
00016960                            loc_15E1E:
00016960 3028 003A                  		move.w	$3A(a0),d0
00016964 0828 0000 0022             		btst	#0,$22(a0)
0001696A 6700                       		beq.s	loc_15E30
0001696C 4440                       		neg.w	d0
0001696E 0640 0080                  		addi.w	#$80,d0
00016972                            
00016972                            loc_15E30:
00016972 3228 0034                  		move.w	$34(a0),d1
00016976 9240                       		sub.w	d0,d1
00016978 3141 0008                  		move.w	d1,8(a0)
0001697C 4E75                       		rts	
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            loc_15E3C:
0001697E 5328 0028                  		subq.b	#1,$28(a0)
00016982 4228 0038                  		clr.b	$38(a0)
00016986 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001698A 7000                       		moveq	#0,d0
0001698C 1028 0023                  		move.b	$23(a0),d0
00016990 67CE                       		beq.s	loc_15E1E
00016992 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016998 60C6                       		bra.s	loc_15E1E
0001699A                            ; ===========================================================================
0001699A                            
0001699A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001699A 4A28 0038                  		tst.b	$38(a0)
0001699E 6600                       		bne.s	loc_15E7C
000169A0 4A68 003A                  		tst.w	$3A(a0)
000169A4 6700                       		beq.s	loc_15E6A
000169A6 5368 003A                  		subq.w	#1,$3A(a0)
000169AA 6000                       		bra.s	loc_15E8E
000169AC                            ; ===========================================================================
000169AC                            
000169AC                            loc_15E6A:
000169AC 5368 0036                  		subq.w	#1,$36(a0)
000169B0 6A00                       		bpl.s	loc_15E8E
000169B2 317C 003C 0036             		move.w	#$3C,$36(a0)
000169B8 117C 0001 0038             		move.b	#1,$38(a0)
000169BE                            
000169BE                            loc_15E7C:
000169BE 5068 003A                  		addq.w	#8,$3A(a0)
000169C2 3028 003A                  		move.w	$3A(a0),d0
000169C6 B068 003C                  		cmp.w	$3C(a0),d0
000169CA 6600                       		bne.s	loc_15E8E
000169CC 4228 0038                  		clr.b	$38(a0)
000169D0                            
000169D0                            loc_15E8E:
000169D0 3028 003A                  		move.w	$3A(a0),d0
000169D4 0828 0000 0022             		btst	#0,$22(a0)
000169DA 6700                       		beq.s	loc_15EA0
000169DC 4440                       		neg.w	d0
000169DE 0640 0038                  		addi.w	#$38,d0
000169E2                            
000169E2                            loc_15EA0:
000169E2 3228 0030                  		move.w	$30(a0),d1
000169E6 D240                       		add.w	d0,d1
000169E8 3141 000C                  		move.w	d1,$C(a0)
000169EC 4E75                       		rts	
000169EE                            ; ===========================================================================
000169EE                            
000169EE                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000169EE 4A28 0038                  		tst.b	$38(a0)
000169F2 6600                       		bne.s	loc_15ED0
000169F4 4A68 003A                  		tst.w	$3A(a0)
000169F8 6700                       		beq.s	loc_15EBE
000169FA 5168 003A                  		subq.w	#8,$3A(a0)
000169FE 6000                       		bra.s	loc_15EF0
00016A00                            ; ===========================================================================
00016A00                            
00016A00                            loc_15EBE:
00016A00 5368 0036                  		subq.w	#1,$36(a0)
00016A04 6A00                       		bpl.s	loc_15EF0
00016A06 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A0C 117C 0001 0038             		move.b	#1,$38(a0)
00016A12                            
00016A12                            loc_15ED0:
00016A12 3028 003A                  		move.w	$3A(a0),d0
00016A16 B068 003C                  		cmp.w	$3C(a0),d0
00016A1A 6700                       		beq.s	loc_15EE0
00016A1C 5068 003A                  		addq.w	#8,$3A(a0)
00016A20 6000                       		bra.s	loc_15EF0
00016A22                            ; ===========================================================================
00016A22                            
00016A22                            loc_15EE0:
00016A22 5368 0036                  		subq.w	#1,$36(a0)
00016A26 6A00                       		bpl.s	loc_15EF0
00016A28 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A2E 4228 0038                  		clr.b	$38(a0)
00016A32                            
00016A32                            loc_15EF0:
00016A32 3028 003A                  		move.w	$3A(a0),d0
00016A36 0828 0000 0022             		btst	#0,$22(a0)
00016A3C 6700                       		beq.s	loc_15F02
00016A3E 4440                       		neg.w	d0
00016A40 0640 0038                  		addi.w	#$38,d0
00016A44                            
00016A44                            loc_15F02:
00016A44 3228 0030                  		move.w	$30(a0),d1
00016A48 D240                       		add.w	d0,d1
00016A4A 3141 000C                  		move.w	d1,$C(a0)
00016A4E 4E75                       		rts	
00016A50                            ; ===========================================================================
00016A50                            
00016A50                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016A50 4A28 0038                  		tst.b	$38(a0)
00016A54 6600                       		bne.s	loc_15F3E
00016A56 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A5A 7000                       		moveq	#0,d0
00016A5C 1028 003E                  		move.b	$3E(a0),d0
00016A60 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A66 6700                       		beq.s	locret_15F5C
00016A68 117C 0001 0038             		move.b	#1,$38(a0)
00016A6E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A72 7000                       		moveq	#0,d0
00016A74 1028 0023                  		move.b	$23(a0),d0
00016A78 6700                       		beq.s	loc_15F3E
00016A7A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A80                            
00016A80                            loc_15F3E:
00016A80 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A88 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A90 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A96 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A9C 6700                       		beq.s	loc_15F5E
00016A9E                            
00016A9E                            locret_15F5C:
00016A9E 4E75                       		rts	
00016AA0                            ; ===========================================================================
00016AA0                            
00016AA0                            loc_15F5E:
00016AA0 4228 0028                  		clr.b	$28(a0)
00016AA4 4228 0038                  		clr.b	$38(a0)
00016AA8 4E75                       		rts	
00016AAA                            ; ===========================================================================
00016AAA                            ; ---------------------------------------------------------------------------
00016AAA                            ; Sprite mappings - stomper and	platforms (SBZ)
00016AAA                            ; ---------------------------------------------------------------------------
00016AAA                            Map_obj6B:
00016AAA                            	include "_maps\obj6B.asm"
00016AAA                            ; ---------------------------------------------------------------------------
00016AAA                            ; Sprite mappings - stomper and	platforms (SBZ)
00016AAA                            ; ---------------------------------------------------------------------------
00016AAA 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016AAE 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016AB2 0000                       		dc.w byte_15FB0-Map_obj6B
00016AB4 04                         byte_15F72:	dc.b 4
00016AB5 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016ABA F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016ABF F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016AC4 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016AC9 08                         byte_15F87:	dc.b 8
00016ACA E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016ACF E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016AD4 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016AD9 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016ADE 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016AE3 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016AE8 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016AED 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016AF2 0E                         byte_15FB0:	dc.b $E
00016AF3 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AF8 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AFD C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016B02 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016B07 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016B0C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016B11 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016B16 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016B1B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016B20 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016B25 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016B2A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016B2F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016B34 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016B3A 00                         		even
00016B3A 00                         		even
00016B3A                            
00016B3A                            ; ===========================================================================
00016B3A                            ; ---------------------------------------------------------------------------
00016B3A                            ; Object 6C - vanishing	platforms (SBZ)
00016B3A                            ; ---------------------------------------------------------------------------
00016B3A                            
00016B3A                            Obj6C:					; XREF: Obj_Index
00016B3A 7000                       		moveq	#0,d0
00016B3C 1028 0024                  		move.b	$24(a0),d0
00016B40 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016B44 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016B48                            ; ===========================================================================
00016B48 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016B4A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B4C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B4E 0000                       		dc.w loc_16068-Obj6C_Index
00016B50                            ; ===========================================================================
00016B50                            
00016B50                            Obj6C_Main:				; XREF: Obj6C_Index
00016B50 5C28 0024                  		addq.b	#6,$24(a0)
00016B54 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B5C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B62 0028 0004 0001             		ori.b	#4,1(a0)
00016B68 117C 0010 0019             		move.b	#$10,$19(a0)
00016B6E 117C 0004 0018             		move.b	#4,$18(a0)
00016B74 7000                       		moveq	#0,d0
00016B76 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B7A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B7E 5240                       		addq.w	#1,d0		; add 1
00016B80 EF48                       		lsl.w	#7,d0		; multiply by $80
00016B82 3200                       		move.w	d0,d1
00016B84 5340                       		subq.w	#1,d0
00016B86 3140 0030                  		move.w	d0,$30(a0)
00016B8A 3140 0032                  		move.w	d0,$32(a0)
00016B8E 7000                       		moveq	#0,d0
00016B90 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B94 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B98 0641 0080                  		addi.w	#$80,d1
00016B9C C0C1                       		mulu.w	d1,d0
00016B9E E088                       		lsr.l	#8,d0
00016BA0 3140 0036                  		move.w	d0,$36(a0)
00016BA4 5341                       		subq.w	#1,d1
00016BA6 3141 0038                  		move.w	d1,$38(a0)
00016BAA                            
00016BAA                            loc_16068:				; XREF: Obj6C_Index
00016BAA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016BAE 9068 0036                  		sub.w	$36(a0),d0
00016BB2 C068 0038                  		and.w	$38(a0),d0
00016BB6 6600                       		bne.s	Obj6C_Animate
00016BB8 5928 0024                  		subq.b	#4,$24(a0)
00016BBC 6000                       		bra.s	Obj6C_Vanish
00016BBE                            ; ===========================================================================
00016BBE                            
00016BBE                            Obj6C_Animate:
00016BBE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BC4 4EB9 0000 AE7A             		jsr	AnimateSprite
00016BCA 6000 9260                  		bra.w	MarkObjGone
00016BCE                            ; ===========================================================================
00016BCE                            
00016BCE                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016BCE 5368 0030                  		subq.w	#1,$30(a0)
00016BD2 6A00                       		bpl.s	loc_160AA
00016BD4 317C 007F 0030             		move.w	#127,$30(a0)
00016BDA 4A28 001C                  		tst.b	$1C(a0)
00016BDE 6700                       		beq.s	loc_160A4
00016BE0 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016BE6                            
00016BE6                            loc_160A4:
00016BE6 0868 0000 001C             		bchg	#0,$1C(a0)
00016BEC                            
00016BEC                            loc_160AA:
00016BEC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BF2 4EB9 0000 AE7A             		jsr	AnimateSprite
00016BF8 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BFE 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016C00 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016C06 6600                       		bne.s	loc_160D6
00016C08 7200                       		moveq	#0,d1
00016C0A 1228 0019                  		move.b	$19(a0),d1
00016C0E 4EB9 0000 7B70             		jsr	(PlatformObject).l
00016C14 6000 9216                  		bra.w	MarkObjGone
00016C18                            ; ===========================================================================
00016C18                            
00016C18                            loc_160D6:
00016C18 7200                       		moveq	#0,d1
00016C1A 1228 0019                  		move.b	$19(a0),d1
00016C1E 4EB9 0000 7CE4             		jsr	(ExitPlatform).l
00016C24 3428 0008                  		move.w	8(a0),d2
00016C28 4EB9 0000 824E             		jsr	(MvSonicOnPtfm2).l
00016C2E 6000 91FC                  		bra.w	MarkObjGone
00016C32                            ; ===========================================================================
00016C32                            
00016C32                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016C32 0828 0003 0022             		btst	#3,$22(a0)
00016C38 6700                       		beq.s	Obj6C_Display
00016C3A 43F8 D000                  		lea	($FFFFD000).w,a1
00016C3E 08A9 0003 0022             		bclr	#3,$22(a1)
00016C44 08A8 0003 0022             		bclr	#3,$22(a0)
00016C4A 117C 0002 0024             		move.b	#2,$24(a0)
00016C50 4228 0025                  		clr.b	$25(a0)
00016C54                            
00016C54                            Obj6C_Display:
00016C54 6000 91D6                  		bra.w	MarkObjGone
00016C58                            ; ===========================================================================
00016C58                            Ani_obj6C:
00016C58                            	include "_anim\obj6C.asm"
00016C58                            ; ---------------------------------------------------------------------------
00016C58                            ; Animation script - vanishing platforms (SBZ)
00016C58                            ; ---------------------------------------------------------------------------
00016C58 0000                       		dc.w byte_1611A-Ani_obj6C
00016C5A 0000                       		dc.w byte_16122-Ani_obj6C
00016C5C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C64 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C6C                            		even
00016C6C                            		even
00016C6C                            
00016C6C                            ; ---------------------------------------------------------------------------
00016C6C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C6C                            ; ---------------------------------------------------------------------------
00016C6C                            Map_obj6C:
00016C6C                            	include "_maps\obj6C.asm"
00016C6C                            ; ---------------------------------------------------------------------------
00016C6C                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C6C                            ; ---------------------------------------------------------------------------
00016C6C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C70 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C74 01                         byte_16132:	dc.b 1
00016C75 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C7A 01                         byte_16138:	dc.b 1
00016C7B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C80 01                         byte_1613E:	dc.b 1
00016C81 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C86 00                         byte_16144:	dc.b 0
00016C88 00                         		even
00016C88 00                         		even
00016C88                            
00016C88                            ; ===========================================================================
00016C88                            ; ---------------------------------------------------------------------------
00016C88                            ; Object 6E - electrocution orbs (SBZ)
00016C88                            ; ---------------------------------------------------------------------------
00016C88                            
00016C88                            Obj6E:					; XREF: Obj_Index
00016C88 7000                       		moveq	#0,d0
00016C8A 1028 0024                  		move.b	$24(a0),d0
00016C8E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C92 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C96                            ; ===========================================================================
00016C96 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C98 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C9A                            ; ===========================================================================
00016C9A                            
00016C9A                            Obj6E_Main:				; XREF: Obj6E_Index
00016C9A 5428 0024                  		addq.b	#2,$24(a0)
00016C9E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016CA6 317C 047E 0002             		move.w	#$47E,2(a0)
00016CAC 0028 0004 0001             		ori.b	#4,1(a0)
00016CB2 117C 0028 0019             		move.b	#$28,$19(a0)
00016CB8 7000                       		moveq	#0,d0
00016CBA 1028 0028                  		move.b	$28(a0),d0	; read object type
00016CBE E948                       		lsl.w	#4,d0		; multiply by $10
00016CC0 5340                       		subq.w	#1,d0
00016CC2 3140 0034                  		move.w	d0,$34(a0)
00016CC6                            
00016CC6                            Obj6E_Shock:				; XREF: Obj6E_Index
00016CC6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CCA C068 0034                  		and.w	$34(a0),d0
00016CCE 6600                       		bne.s	Obj6E_Animate
00016CD0 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016CD6 4A28 0001                  		tst.b	1(a0)
00016CDA 6A00                       		bpl.s	Obj6E_Animate
00016CDC 303C 00B1                  		move.w	#$B1,d0
00016CE0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play electricity sound
00016CE6                            
00016CE6                            Obj6E_Animate:
00016CE6 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016CEC 4EB9 0000 AE7A             		jsr	AnimateSprite
00016CF2 117C 0000 0020             		move.b	#0,$20(a0)
00016CF8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CFE 6600                       		bne.s	Obj6E_Display	; if not, branch
00016D00 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016D06                            
00016D06                            Obj6E_Display:
00016D06 6000 9124                  		bra.w	MarkObjGone
00016D0A                            ; ===========================================================================
00016D0A                            Ani_obj6E:
00016D0A                            	include "_anim\obj6E.asm"
00016D0A                            ; ---------------------------------------------------------------------------
00016D0A                            ; Animation script - electrocution orbs (SBZ)
00016D0A                            ; ---------------------------------------------------------------------------
00016D0A 0000                       		dc.w byte_161CC-Ani_obj6E
00016D0C 0000                       		dc.w byte_161D0-Ani_obj6E
00016D0E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016D12 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016D22                            		even
00016D22                            		even
00016D22                            
00016D22                            ; ---------------------------------------------------------------------------
00016D22                            ; Sprite mappings - electrocution orbs (SBZ)
00016D22                            ; ---------------------------------------------------------------------------
00016D22                            Map_obj6E:
00016D22                            	include "_maps\obj6E.asm"
00016D22                            ; ---------------------------------------------------------------------------
00016D22                            ; Sprite mappings - electrocution orbs (SBZ)
00016D22                            ; ---------------------------------------------------------------------------
00016D22 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016D26 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016D2A 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016D2E 02                         byte_161EC:	dc.b 2
00016D2F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016D34 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016D39 03                         byte_161F7:	dc.b 3
00016D3A F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016D3F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016D44 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016D49 05                         byte_16207:	dc.b 5
00016D4A F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016D4F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016D54 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016D59 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016D5E F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016D63 04                         byte_16221:	dc.b 4
00016D64 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016D69 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016D6E F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016D73 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016D78 06                         byte_16236:	dc.b 6
00016D79 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016D7E 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016D83 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016D88 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016D8D F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00016D92 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016D97 04                         byte_16255:	dc.b 4
00016D98 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016D9D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016DA2 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016DA7 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016DAC                            		even
00016DAC                            		even
00016DAC                            
00016DAC                            ; ===========================================================================
00016DAC                            ; ---------------------------------------------------------------------------
00016DAC                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016DAC                            ; ---------------------------------------------------------------------------
00016DAC                            
00016DAC                            Obj6F:					; XREF: Obj_Index
00016DAC 7000                       		moveq	#0,d0
00016DAE 1028 0024                  		move.b	$24(a0),d0
00016DB2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016DB6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016DBA 3028 0030                  		move.w	$30(a0),d0
00016DBE 0240 FF80                  		andi.w	#$FF80,d0
00016DC2 3238 F700                  		move.w	($FFFFF700).w,d1
00016DC6 0441 0080                  		subi.w	#$80,d1
00016DCA 0241 FF80                  		andi.w	#$FF80,d1
00016DCE 9041                       		sub.w	d1,d0
00016DD0 0C40 0280                  		cmpi.w	#$280,d0
00016DD4 6200                       		bhi.s	loc_1629A
00016DD6                            
00016DD6                            Obj6F_Display:
00016DD6 4EF9 0000 DD82             		jmp	DisplaySprite
00016DDC                            ; ===========================================================================
00016DDC                            
00016DDC                            loc_1629A:
00016DDC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016DE2 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016DE4 0C40 FF80                  		cmpi.w	#-$80,d0
00016DE8 64EC                       		bcc.s	Obj6F_Display
00016DEA                            
00016DEA                            Obj6F_Act1or2:
00016DEA 1028 002F                  		move.b	$2F(a0),d0
00016DEE 6A00                       		bpl.s	Obj6F_Delete
00016DF0 0240 007F                  		andi.w	#$7F,d0
00016DF4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DF8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016DFE                            
00016DFE                            Obj6F_Delete:
00016DFE 4EF9 0000 DDBE             		jmp	DeleteObject
00016E04                            ; ===========================================================================
00016E04 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016E06 0000                       		dc.w loc_163D8-Obj6F_Index
00016E08                            ; ===========================================================================
00016E08                            
00016E08                            Obj6F_Main:				; XREF: Obj6F_Index
00016E08 1028 0028                  		move.b	$28(a0),d0
00016E0C 6B00 0000                  		bmi.w	loc_16380
00016E10 5428 0024                  		addq.b	#2,$24(a0)
00016E14 217C 0001 647C 0004        		move.l	#Map_obj69a,4(a0)
00016E1C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016E22 117C 0010 0019             		move.b	#$10,$19(a0)
00016E28 0028 0004 0001             		ori.b	#4,1(a0)
00016E2E 117C 0004 0018             		move.b	#4,$18(a0)
00016E34 7000                       		moveq	#0,d0
00016E36 1028 0028                  		move.b	$28(a0),d0
00016E3A 3200                       		move.w	d0,d1
00016E3C E648                       		lsr.w	#3,d0
00016E3E 0240 001E                  		andi.w	#$1E,d0
00016E42 45FA 0000                  		lea	off_164A6(pc),a2
00016E46 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E4A 315A 0038                  		move.w	(a2)+,$38(a0)
00016E4E 315A 0030                  		move.w	(a2)+,$30(a0)
00016E52 214A 003C                  		move.l	a2,$3C(a0)
00016E56 0241 000F                  		andi.w	#$F,d1
00016E5A E549                       		lsl.w	#2,d1
00016E5C 1141 0038                  		move.b	d1,$38(a0)
00016E60 117C 0004 003A             		move.b	#4,$3A(a0)
00016E66 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E6A 6700                       		beq.s	loc_16356
00016E6C 117C 0001 003B             		move.b	#1,$3B(a0)
00016E72 4428 003A                  		neg.b	$3A(a0)
00016E76 7200                       		moveq	#0,d1
00016E78 1228 0038                  		move.b	$38(a0),d1
00016E7C D228 003A                  		add.b	$3A(a0),d1
00016E80 B228 0039                  		cmp.b	$39(a0),d1
00016E84 6500                       		bcs.s	loc_16352
00016E86 1001                       		move.b	d1,d0
00016E88 7200                       		moveq	#0,d1
00016E8A 4A00                       		tst.b	d0
00016E8C 6A00                       		bpl.s	loc_16352
00016E8E 1228 0039                  		move.b	$39(a0),d1
00016E92 5901                       		subq.b	#4,d1
00016E94                            
00016E94                            loc_16352:
00016E94 1141 0038                  		move.b	d1,$38(a0)
00016E98                            
00016E98                            loc_16356:
00016E98 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016E9E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016EA4 4A41                       		tst.w	d1
00016EA6 6600                       		bne.s	loc_1636C
00016EA8 117C 0001 001C             		move.b	#1,$1C(a0)
00016EAE                            
00016EAE                            loc_1636C:
00016EAE 0C41 0008                  		cmpi.w	#8,d1
00016EB2 6600                       		bne.s	loc_16378
00016EB4 117C 0000 001C             		move.b	#0,$1C(a0)
00016EBA                            
00016EBA                            loc_16378:
00016EBA 6100 BE1C                  		bsr.w	Obj63_ChangeDir
00016EBE 6000 0000                  		bra.w	loc_163D8
00016EC2                            ; ===========================================================================
00016EC2                            
00016EC2                            loc_16380:				; XREF: Obj6F_Main
00016EC2 1140 002F                  		move.b	d0,$2F(a0)
00016EC6 0240 007F                  		andi.w	#$7F,d0
00016ECA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016ECE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016ED4 6700                       		beq.s	loc_1639A
00016ED6 4EF9 0000 DDBE             		jmp	DeleteObject
00016EDC                            ; ===========================================================================
00016EDC                            
00016EDC                            loc_1639A:
00016EDC D040                       		add.w	d0,d0
00016EDE 0240 001E                  		andi.w	#$1E,d0
00016EE2 0640 0080                  		addi.w	#$80,d0
00016EE6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016EEC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EF0 321A                       		move.w	(a2)+,d1
00016EF2 2248                       		movea.l	a0,a1
00016EF4 6000                       		bra.s	Obj6F_LoadPform
00016EF6                            ; ===========================================================================
00016EF6                            
00016EF6                            Obj6F_Loop:
00016EF6 4EB9 0000 E20E             		jsr	SingleObjLoad
00016EFC 6600                       		bne.s	loc_163D0
00016EFE                            
00016EFE                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EFE 12BC 006F                  		move.b	#$6F,0(a1)
00016F02 335A 0008                  		move.w	(a2)+,8(a1)
00016F06 335A 000C                  		move.w	(a2)+,$C(a1)
00016F0A 301A                       		move.w	(a2)+,d0
00016F0C 1340 0028                  		move.b	d0,$28(a1)
00016F10                            
00016F10                            loc_163D0:
00016F10 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016F14                            
00016F14 588F                       		addq.l	#4,sp
00016F16 4E75                       		rts	
00016F18                            ; ===========================================================================
00016F18                            
00016F18                            loc_163D8:				; XREF: Obj6F_Index
00016F18 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016F1E 4EB9 0000 AE7A             		jsr	AnimateSprite
00016F24 4A28 001A                  		tst.b	$1A(a0)
00016F28 6600                       		bne.s	loc_16404
00016F2A 3F28 0008                  		move.w	8(a0),-(sp)
00016F2E 6100 0000                  		bsr.w	loc_16424
00016F32 323C 001B                  		move.w	#$1B,d1
00016F36 343C 0007                  		move.w	#7,d2
00016F3A 3602                       		move.w	d2,d3
00016F3C 5243                       		addq.w	#1,d3
00016F3E 381F                       		move.w	(sp)+,d4
00016F40 6000 9212                  		bra.w	SolidObject
00016F44                            ; ===========================================================================
00016F44                            
00016F44                            loc_16404:
00016F44 0828 0003 0022             		btst	#3,$22(a0)
00016F4A 6700                       		beq.s	loc_16420
00016F4C 43F8 D000                  		lea	($FFFFD000).w,a1
00016F50 08A9 0003 0022             		bclr	#3,$22(a1)
00016F56 08A8 0003 0022             		bclr	#3,$22(a0)
00016F5C 4228 0025                  		clr.b	$25(a0)
00016F60                            
00016F60                            loc_16420:
00016F60 6000 0002                  		bra.w	*+4
00016F64                            
00016F64                            loc_16424:
00016F64 3028 0008                  		move.w	8(a0),d0
00016F68 B068 0034                  		cmp.w	$34(a0),d0
00016F6C 6600                       		bne.s	loc_16484
00016F6E 3028 000C                  		move.w	$C(a0),d0
00016F72 B068 0036                  		cmp.w	$36(a0),d0
00016F76 6600                       		bne.s	loc_16484
00016F78 7200                       		moveq	#0,d1
00016F7A 1228 0038                  		move.b	$38(a0),d1
00016F7E D228 003A                  		add.b	$3A(a0),d1
00016F82 B228 0039                  		cmp.b	$39(a0),d1
00016F86 6500                       		bcs.s	loc_16456
00016F88 1001                       		move.b	d1,d0
00016F8A 7200                       		moveq	#0,d1
00016F8C 4A00                       		tst.b	d0
00016F8E 6A00                       		bpl.s	loc_16456
00016F90 1228 0039                  		move.b	$39(a0),d1
00016F94 5901                       		subq.b	#4,d1
00016F96                            
00016F96                            loc_16456:
00016F96 1141 0038                  		move.b	d1,$38(a0)
00016F9A 2268 003C                  		movea.l	$3C(a0),a1
00016F9E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016FA4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016FAA 4A41                       		tst.w	d1
00016FAC 6600                       		bne.s	loc_16474
00016FAE 117C 0001 001C             		move.b	#1,$1C(a0)
00016FB4                            
00016FB4                            loc_16474:
00016FB4 0C41 0008                  		cmpi.w	#8,d1
00016FB8 6600                       		bne.s	loc_16480
00016FBA 117C 0000 001C             		move.b	#0,$1C(a0)
00016FC0                            
00016FC0                            loc_16480:
00016FC0 6100 BD16                  		bsr.w	Obj63_ChangeDir
00016FC4                            
00016FC4                            loc_16484:
00016FC4 4EF9 0000 DD5C             		jmp	SpeedToPos
00016FCA                            ; ===========================================================================
00016FCA                            Ani_obj6F:
00016FCA                            	include "_anim\obj6F.asm"
00016FCA                            ; ---------------------------------------------------------------------------
00016FCA                            ; Animation script - platform on conveyor belt (SBZ)
00016FCA                            ; ---------------------------------------------------------------------------
00016FCA 0000                       		dc.w byte_1648E-Ani_obj6F
00016FCC 0000                       		dc.w byte_164A2-Ani_obj6F
00016FCE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016FDB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016FE2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FE6 00                         		even
00016FE6 00                         		even
00016FE6                            
00016FE6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FEC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FF2 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017006 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001701A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001702E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017042 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017056 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001706A                            ; ===========================================================================
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            ; Object 70 - large girder block (SBZ)
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            
0001706A                            Obj70:					; XREF: Obj_Index
0001706A 7000                       		moveq	#0,d0
0001706C 1028 0024                  		move.b	$24(a0),d0
00017070 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017074 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017078                            ; ===========================================================================
00017078 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001707A 0000                       		dc.w Obj70_Action-Obj70_Index
0001707C                            ; ===========================================================================
0001707C                            
0001707C                            Obj70_Main:				; XREF: Obj70_Index
0001707C 5428 0024                  		addq.b	#2,$24(a0)
00017080 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017088 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001708E 0028 0004 0001             		ori.b	#4,1(a0)
00017094 117C 0004 0018             		move.b	#4,$18(a0)
0001709A 117C 0060 0019             		move.b	#$60,$19(a0)
000170A0 117C 0018 0016             		move.b	#$18,$16(a0)
000170A6 3168 0008 0032             		move.w	8(a0),$32(a0)
000170AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000170B2 6100 0000                  		bsr.w	Obj70_Move2
000170B6                            
000170B6                            Obj70_Action:				; XREF: Obj70_Index
000170B6 3F28 0008                  		move.w	8(a0),-(sp)
000170BA 4A68 003A                  		tst.w	$3A(a0)
000170BE 6700                       		beq.s	Obj70_Move
000170C0 5368 003A                  		subq.w	#1,$3A(a0)
000170C4 6600                       		bne.s	Obj70_Solid
000170C6                            
000170C6                            Obj70_Move:
000170C6 4EB9 0000 DD5C             		jsr	SpeedToPos
000170CC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000170D0 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000170D2 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000170D6                            
000170D6                            Obj70_Solid:
000170D6 381F                       		move.w	(sp)+,d4
000170D8 4A28 0001                  		tst.b	1(a0)
000170DC 6A00                       		bpl.s	Obj70_ChkDel
000170DE 7200                       		moveq	#0,d1
000170E0 1228 0019                  		move.b	$19(a0),d1
000170E4 0641 000B                  		addi.w	#$B,d1
000170E8 7400                       		moveq	#0,d2
000170EA 1428 0016                  		move.b	$16(a0),d2
000170EE 3602                       		move.w	d2,d3
000170F0 5243                       		addq.w	#1,d3
000170F2 6100 9060                  		bsr.w	SolidObject
000170F6                            
000170F6                            Obj70_ChkDel:
000170F6 3028 0032                  		move.w	$32(a0),d0
000170FA 0240 FF80                  		andi.w	#$FF80,d0
000170FE 3238 F700                  		move.w	($FFFFF700).w,d1
00017102 0441 0080                  		subi.w	#$80,d1
00017106 0241 FF80                  		andi.w	#$FF80,d1
0001710A 9041                       		sub.w	d1,d0
0001710C 0C40 0280                  		cmpi.w	#$280,d0
00017110 6200                       		bhi.s	Obj70_Delete
00017112 4EF9 0000 DD82             		jmp	DisplaySprite
00017118                            ; ===========================================================================
00017118                            
00017118                            Obj70_Delete:
00017118 4EF9 0000 DDBE             		jmp	DeleteObject
0001711E                            ; ===========================================================================
0001711E                            
0001711E                            Obj70_Move2:				; XREF: Obj70_Main
0001711E 1028 0038                  		move.b	$38(a0),d0
00017122 0240 0018                  		andi.w	#$18,d0
00017126 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001712C 43F1 0000                  		lea	(a1,d0.w),a1
00017130 3159 0010                  		move.w	(a1)+,$10(a0)
00017134 3159 0012                  		move.w	(a1)+,$12(a0)
00017138 3159 0034                  		move.w	(a1)+,$34(a0)
0001713C 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017140 317C 0007 003A             		move.w	#7,$3A(a0)
00017146 4E75                       		rts	
00017148                            ; ===========================================================================
00017148 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017150 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017158 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017160 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017168                            ; ---------------------------------------------------------------------------
00017168                            ; Sprite mappings - large girder block (SBZ)
00017168                            ; ---------------------------------------------------------------------------
00017168                            Map_obj70:
00017168                            	include "_maps\obj70.asm"
00017168                            ; ---------------------------------------------------------------------------
00017168                            ; Sprite mappings - large girder block (SBZ)
00017168                            ; ---------------------------------------------------------------------------
00017168 0000                       		dc.w byte_1662A-Map_obj70
0001716A 0C                         byte_1662A:	dc.b $C
0001716B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017170 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017175 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001717A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001717F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017184 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017189 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001718E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017193 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017198 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001719D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000171A2 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000171A8 00                         		even
000171A8 00                         		even
000171A8                            
000171A8                            ; ===========================================================================
000171A8                            ; ---------------------------------------------------------------------------
000171A8                            ; Object 72 - teleporter (SBZ)
000171A8                            ; ---------------------------------------------------------------------------
000171A8                            
000171A8                            Obj72:					; XREF: Obj_Index
000171A8 7000                       		moveq	#0,d0
000171AA 1028 0024                  		move.b	$24(a0),d0
000171AE 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000171B2 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000171B6 3028 0008                  		move.w	8(a0),d0
000171BA 0240 FF80                  		andi.w	#$FF80,d0
000171BE 3238 F700                  		move.w	($FFFFF700).w,d1
000171C2 0441 0080                  		subi.w	#$80,d1
000171C6 0241 FF80                  		andi.w	#$FF80,d1
000171CA 9041                       		sub.w	d1,d0
000171CC 0C40 0280                  		cmpi.w	#$280,d0
000171D0 6200                       		bhi.s	Obj72_Delete
000171D2 4E75                       		rts	
000171D4                            ; ===========================================================================
000171D4                            
000171D4                            Obj72_Delete:
000171D4 4EF9 0000 DDBE             		jmp	DeleteObject
000171DA                            ; ===========================================================================
000171DA 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000171DC 0000                       		dc.w loc_166C8-Obj72_Index
000171DE 0000                       		dc.w loc_1675E-Obj72_Index
000171E0 0000                       		dc.w loc_16798-Obj72_Index
000171E2                            ; ===========================================================================
000171E2                            
000171E2                            Obj72_Main:				; XREF: Obj72_Index
000171E2 5428 0024                  		addq.b	#2,$24(a0)
000171E6 1028 0028                  		move.b	$28(a0),d0
000171EA D040                       		add.w	d0,d0
000171EC 0240 001E                  		andi.w	#$1E,d0
000171F0 45FA 0000                  		lea	Obj72_Data(pc),a2
000171F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000171F8 315A 003A                  		move.w	(a2)+,$3A(a0)
000171FC 214A 003C                  		move.l	a2,$3C(a0)
00017200 315A 0036                  		move.w	(a2)+,$36(a0)
00017204 315A 0038                  		move.w	(a2)+,$38(a0)
00017208                            
00017208                            loc_166C8:				; XREF: Obj72_Index
00017208 43F8 D000                  		lea	($FFFFD000).w,a1
0001720C 3029 0008                  		move.w	8(a1),d0
00017210 9068 0008                  		sub.w	8(a0),d0
00017214 0828 0000 0022             		btst	#0,$22(a0)
0001721A 6700                       		beq.s	loc_166E0
0001721C 0640 000F                  		addi.w	#$F,d0
00017220                            
00017220                            loc_166E0:
00017220 0C40 0010                  		cmpi.w	#$10,d0
00017224 6400                       		bcc.s	locret_1675C
00017226 3229 000C                  		move.w	$C(a1),d1
0001722A 9268 000C                  		sub.w	$C(a0),d1
0001722E 0641 0020                  		addi.w	#$20,d1
00017232 0C41 0040                  		cmpi.w	#$40,d1
00017236 6400                       		bcc.s	locret_1675C
00017238 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001723C 6600                       		bne.s	locret_1675C
0001723E 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017244 6600                       		bne.s	loc_1670E
00017246 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001724C 6500                       		bcs.s	locret_1675C
0001724E                            
0001724E                            loc_1670E:
0001724E 5428 0024                  		addq.b	#2,$24(a0)
00017252 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017258 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001725E 337C 0800 0014             		move.w	#$800,$14(a1)
00017264 337C 0000 0010             		move.w	#0,$10(a1)
0001726A 337C 0000 0012             		move.w	#0,$12(a1)
00017270 08A8 0005 0022             		bclr	#5,$22(a0)
00017276 08A9 0005 0022             		bclr	#5,$22(a1)
0001727C 08E9 0001 0022             		bset	#1,$22(a1)
00017282 3368 0008 0008             		move.w	8(a0),8(a1)
00017288 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001728E 4228 0032                  		clr.b	$32(a0)
00017292 303C 00BE                  		move.w	#$BE,d0
00017296 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001729C                            
0001729C                            locret_1675C:
0001729C 4E75                       		rts	
0001729E                            ; ===========================================================================
0001729E                            
0001729E                            loc_1675E:				; XREF: Obj72_Index
0001729E 43F8 D000                  		lea	($FFFFD000).w,a1
000172A2 1028 0032                  		move.b	$32(a0),d0
000172A6 5428 0032                  		addq.b	#2,$32(a0)
000172AA 4EB9 0000 28EC             		jsr	(CalcSine).l
000172B0 EA40                       		asr.w	#5,d0
000172B2 3428 000C                  		move.w	$C(a0),d2
000172B6 9440                       		sub.w	d0,d2
000172B8 3342 000C                  		move.w	d2,$C(a1)
000172BC 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000172C2 6600                       		bne.s	locret_16796
000172C4 6100 0000                  		bsr.w	sub_1681C
000172C8 5428 0024                  		addq.b	#2,$24(a0)
000172CC 303C 00BC                  		move.w	#$BC,d0
000172D0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play teleport sound
000172D6                            
000172D6                            locret_16796:
000172D6 4E75                       		rts	
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            loc_16798:				; XREF: Obj72_Index
000172D8 588F                       		addq.l	#4,sp
000172DA 43F8 D000                  		lea	($FFFFD000).w,a1
000172DE 5328 002E                  		subq.b	#1,$2E(a0)
000172E2 6A00                       		bpl.s	loc_167DA
000172E4 3368 0036 0008             		move.w	$36(a0),8(a1)
000172EA 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172F0 7200                       		moveq	#0,d1
000172F2 1228 003A                  		move.b	$3A(a0),d1
000172F6 5801                       		addq.b	#4,d1
000172F8 B228 003B                  		cmp.b	$3B(a0),d1
000172FC 6500                       		bcs.s	loc_167C2
000172FE 7200                       		moveq	#0,d1
00017300 6000                       		bra.s	loc_16800
00017302                            ; ===========================================================================
00017302                            
00017302                            loc_167C2:
00017302 1141 003A                  		move.b	d1,$3A(a0)
00017306 2468 003C                  		movea.l	$3C(a0),a2
0001730A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017310 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017316 6000 0000                  		bra.w	sub_1681C
0001731A                            ; ===========================================================================
0001731A                            
0001731A                            loc_167DA:
0001731A 2429 0008                  		move.l	8(a1),d2
0001731E 2629 000C                  		move.l	$C(a1),d3
00017322 3029 0010                  		move.w	$10(a1),d0
00017326 48C0                       		ext.l	d0
00017328 E180                       		asl.l	#8,d0
0001732A D480                       		add.l	d0,d2
0001732C 3029 0012                  		move.w	$12(a1),d0
00017330 48C0                       		ext.l	d0
00017332 E180                       		asl.l	#8,d0
00017334 D680                       		add.l	d0,d3
00017336 2342 0008                  		move.l	d2,8(a1)
0001733A 2343 000C                  		move.l	d3,$C(a1)
0001733E 4E75                       		rts	
00017340                            ; ===========================================================================
00017340                            
00017340                            loc_16800:
00017340 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017346 4228 0024                  		clr.b	$24(a0)
0001734A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001734E 337C 0000 0010             		move.w	#0,$10(a1)
00017354 337C 0200 0012             		move.w	#$200,$12(a1)
0001735A 4E75                       		rts	
0001735C                            
0001735C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001735C                            
0001735C                            
0001735C                            sub_1681C:
0001735C 7000                       		moveq	#0,d0
0001735E 343C 1000                  		move.w	#$1000,d2
00017362 3028 0036                  		move.w	$36(a0),d0
00017366 9069 0008                  		sub.w	8(a1),d0
0001736A 6C00                       		bge.s	loc_16830
0001736C 4440                       		neg.w	d0
0001736E 4442                       		neg.w	d2
00017370                            
00017370                            loc_16830:
00017370 7200                       		moveq	#0,d1
00017372 363C 1000                  		move.w	#$1000,d3
00017376 3228 0038                  		move.w	$38(a0),d1
0001737A 9269 000C                  		sub.w	$C(a1),d1
0001737E 6C00                       		bge.s	loc_16844
00017380 4441                       		neg.w	d1
00017382 4443                       		neg.w	d3
00017384                            
00017384                            loc_16844:
00017384 B240                       		cmp.w	d0,d1
00017386 6500                       		bcs.s	loc_1687A
00017388 7200                       		moveq	#0,d1
0001738A 3228 0038                  		move.w	$38(a0),d1
0001738E 9269 000C                  		sub.w	$C(a1),d1
00017392 4841                       		swap	d1
00017394 83C3                       		divs.w	d3,d1
00017396 7000                       		moveq	#0,d0
00017398 3028 0036                  		move.w	$36(a0),d0
0001739C 9069 0008                  		sub.w	8(a1),d0
000173A0 6700                       		beq.s	loc_16866
000173A2 4840                       		swap	d0
000173A4 81C1                       		divs.w	d1,d0
000173A6                            
000173A6                            loc_16866:
000173A6 3340 0010                  		move.w	d0,$10(a1)
000173AA 3343 0012                  		move.w	d3,$12(a1)
000173AE 4A41                       		tst.w	d1
000173B0 6A00                       		bpl.s	loc_16874
000173B2 4441                       		neg.w	d1
000173B4                            
000173B4                            loc_16874:
000173B4 3141 002E                  		move.w	d1,$2E(a0)
000173B8 4E75                       		rts	
000173BA                            ; ===========================================================================
000173BA                            
000173BA                            loc_1687A:
000173BA 7000                       		moveq	#0,d0
000173BC 3028 0036                  		move.w	$36(a0),d0
000173C0 9069 0008                  		sub.w	8(a1),d0
000173C4 4840                       		swap	d0
000173C6 81C2                       		divs.w	d2,d0
000173C8 7200                       		moveq	#0,d1
000173CA 3228 0038                  		move.w	$38(a0),d1
000173CE 9269 000C                  		sub.w	$C(a1),d1
000173D2 6700                       		beq.s	loc_16898
000173D4 4841                       		swap	d1
000173D6 83C0                       		divs.w	d0,d1
000173D8                            
000173D8                            loc_16898:
000173D8 3341 0012                  		move.w	d1,$12(a1)
000173DC 3342 0010                  		move.w	d2,$10(a1)
000173E0 4A40                       		tst.w	d0
000173E2 6A00                       		bpl.s	loc_168A6
000173E4 4440                       		neg.w	d0
000173E6                            
000173E6                            loc_168A6:
000173E6 3140 002E                  		move.w	d0,$2E(a0)
000173EA 4E75                       		rts	
000173EC                            ; End of function sub_1681C
000173EC                            
000173EC                            ; ===========================================================================
000173EC 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173F2 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173F8 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173FC 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017402 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017408 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001740E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017414 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001741A 0884 0298 0894             		dc.w $884, $298, $894
00017420 0270 0894 0190             		dc.w $270, $894, $190
00017426 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001742C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017432 1184 0498 1158             		dc.w $1184, $498, $1158
00017438 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001743E 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017444 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001744A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017450 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017456 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001745C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017462 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017468 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001746E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017474                            ; ===========================================================================
00017474                            ; ---------------------------------------------------------------------------
00017474                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017474                            ; ---------------------------------------------------------------------------
00017474                            
00017474                            Obj78:					; XREF: Obj_Index
00017474 7000                       		moveq	#0,d0
00017476 1028 0024                  		move.b	$24(a0),d0
0001747A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001747E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017482                            ; ===========================================================================
00017482 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017484 0000                       		dc.w Obj78_Action-Obj78_Index
00017486 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017488 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001748A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001748C 0000                       		dc.w Obj78_Delete-Obj78_Index
0001748E 0000                       		dc.w loc_16CC0-Obj78_Index
00017490                            ; ===========================================================================
00017490                            
00017490                            locret_16950:
00017490 4E75                       		rts	
00017492                            ; ===========================================================================
00017492                            
00017492                            Obj78_Main:				; XREF: Obj78_Index
00017492 117C 0007 0016             		move.b	#7,$16(a0)
00017498 117C 0008 0017             		move.b	#8,$17(a0)
0001749E 4EB9 0000 DD30             		jsr	ObjectFall
000174A4 4EBA E4B6                  		jsr	ObjHitFloor
000174A8 4A41                       		tst.w	d1
000174AA 6AE4                       		bpl.s	locret_16950
000174AC D368 000C                  		add.w	d1,$C(a0)
000174B0 4268 0012                  		clr.w	$12(a0)
000174B4 5428 0024                  		addq.b	#2,$24(a0)
000174B8 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000174C0 317C 22B0 0002             		move.w	#$22B0,2(a0)
000174C6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000174CC 6700                       		beq.s	loc_16996
000174CE 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000174D4                            
000174D4                            loc_16996:
000174D4 0228 0003 0001             		andi.b	#3,1(a0)
000174DA 0028 0004 0001             		ori.b	#4,1(a0)
000174E0 1168 0001 0022             		move.b	1(a0),$22(a0)
000174E6 117C 0004 0018             		move.b	#4,$18(a0)
000174EC 117C 0008 0019             		move.b	#8,$19(a0)
000174F2 117C 000B 0020             		move.b	#$B,$20(a0)
000174F8 3428 0008                  		move.w	8(a0),d2
000174FC 7A0C                       		moveq	#$C,d5
000174FE 0828 0000 0022             		btst	#0,$22(a0)
00017504 6700                       		beq.s	loc_169CA
00017506 4445                       		neg.w	d5
00017508                            
00017508                            loc_169CA:
00017508 1C3C 0004                  		move.b	#4,d6
0001750C 7600                       		moveq	#0,d3
0001750E 7804                       		moveq	#4,d4
00017510 2448                       		movea.l	a0,a2
00017512 7202                       		moveq	#2,d1
00017514                            
00017514                            Obj78_LoadBody:
00017514 4EB9 0000 E224             		jsr	SingleObjLoad2
0001751A 6600                       		bne.s	Obj78_QuitLoad
0001751C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017520 1346 0024                  		move.b	d6,$24(a1)
00017524 5406                       		addq.b	#2,d6
00017526 2368 0004 0004             		move.l	4(a0),4(a1)
0001752C 3368 0002 0002             		move.w	2(a0),2(a1)
00017532 137C 0005 0018             		move.b	#5,$18(a1)
00017538 137C 0008 0019             		move.b	#8,$19(a1)
0001753E 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017544 D445                       		add.w	d5,d2
00017546 3342 0008                  		move.w	d2,8(a1)
0001754A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017550 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017556 1368 0022 0001             		move.b	$22(a0),1(a1)
0001755C 137C 0008 001A             		move.b	#8,$1A(a1)
00017562 234A 003C                  		move.l	a2,$3C(a1)
00017566 1344 003C                  		move.b	d4,$3C(a1)
0001756A 5804                       		addq.b	#4,d4
0001756C 2449                       		movea.l	a1,a2
0001756E                            
0001756E                            Obj78_QuitLoad:
0001756E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017572                            
00017572 117C 0007 002A             		move.b	#7,$2A(a0)
00017578 4228 003C                  		clr.b	$3C(a0)
0001757C                            
0001757C                            Obj78_Action:				; XREF: Obj78_Index
0001757C 4A28 0022                  		tst.b	$22(a0)
00017580 6B00 0000                  		bmi.w	loc_16C96
00017584 7000                       		moveq	#0,d0
00017586 1028 0025                  		move.b	$25(a0),d0
0001758A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001758E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017592 1228 002B                  		move.b	$2B(a0),d1
00017596 6A00                       		bpl.s	Obj78_Display
00017598 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001759E 1028 0026                  		move.b	$26(a0),d0
000175A2 0240 007F                  		andi.w	#$7F,d0
000175A6 5828 0026                  		addq.b	#4,$26(a0)
000175AA 1031 0000                  		move.b	(a1,d0.w),d0
000175AE 6A00                       		bpl.s	Obj78_AniHead
000175B0 08A8 0007 002B             		bclr	#7,$2B(a0)
000175B6 6000                       		bra.s	Obj78_Display
000175B8                            ; ===========================================================================
000175B8                            
000175B8                            Obj78_AniHead:
000175B8 0201 0010                  		andi.b	#$10,d1
000175BC D001                       		add.b	d1,d0
000175BE 1140 001A                  		move.b	d0,$1A(a0)
000175C2                            
000175C2                            Obj78_Display:
000175C2 3028 0008                  		move.w	8(a0),d0
000175C6 0240 FF80                  		andi.w	#$FF80,d0
000175CA 3238 F700                  		move.w	($FFFFF700).w,d1
000175CE 0441 0080                  		subi.w	#$80,d1
000175D2 0241 FF80                  		andi.w	#$FF80,d1
000175D6 9041                       		sub.w	d1,d0
000175D8 0C40 0280                  		cmpi.w	#$280,d0
000175DC 6200 0000                  		bhi.w	Obj78_ChkGone
000175E0 4EF9 0000 DD82             		jmp	DisplaySprite
000175E6                            ; ===========================================================================
000175E6                            
000175E6                            Obj78_ChkGone:
000175E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175EA 7000                       		moveq	#0,d0
000175EC 1028 0023                  		move.b	$23(a0),d0
000175F0 6700                       		beq.s	loc_16ABC
000175F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175F8                            
000175F8                            loc_16ABC:
000175F8 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175FE 4E75                       		rts	
00017600                            ; ===========================================================================
00017600                            
00017600                            Obj78_Delete:				; XREF: Obj78_Index
00017600 4EF9 0000 DDBE             		jmp	DeleteObject
00017606                            ; ===========================================================================
00017606 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017608 0000                       		dc.w loc_16B02-Obj78_Index2
0001760A                            ; ===========================================================================
0001760A                            
0001760A                            Obj78_Move:				; XREF: Obj78_Index2
0001760A 5328 002A                  		subq.b	#1,$2A(a0)
0001760E 6B00                       		bmi.s	Obj78_Move2
00017610 4E75                       		rts	
00017612                            ; ===========================================================================
00017612                            
00017612                            Obj78_Move2:
00017612 5428 0025                  		addq.b	#2,$25(a0)
00017616 117C 0010 002A             		move.b	#$10,$2A(a0)
0001761C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017622 317C 0040 0014             		move.w	#$40,$14(a0)
00017628 0868 0004 002B             		bchg	#4,$2B(a0)
0001762E 6600                       		bne.s	loc_16AFC
00017630 4268 0010                  		clr.w	$10(a0)
00017634 4468 0014                  		neg.w	$14(a0)
00017638                            
00017638                            loc_16AFC:
00017638 08E8 0007 002B             		bset	#7,$2B(a0)
0001763E                            
0001763E                            loc_16B02:				; XREF: Obj78_Index2
0001763E 5328 002A                  		subq.b	#1,$2A(a0)
00017642 6B00                       		bmi.s	loc_16B5E
00017644 2F28 0008                  		move.l	8(a0),-(sp)
00017648 2428 0008                  		move.l	8(a0),d2
0001764C 3028 0010                  		move.w	$10(a0),d0
00017650 0828 0000 0022             		btst	#0,$22(a0)
00017656 6700                       		beq.s	loc_16B1E
00017658 4440                       		neg.w	d0
0001765A                            
0001765A                            loc_16B1E:
0001765A 48C0                       		ext.l	d0
0001765C E180                       		asl.l	#8,d0
0001765E D480                       		add.l	d0,d2
00017660 2142 0008                  		move.l	d2,8(a0)
00017664 4EBA E2F6                  		jsr	ObjHitFloor
00017668 241F                       		move.l	(sp)+,d2
0001766A 0C41 FFF8                  		cmpi.w	#-8,d1
0001766E 6D00                       		blt.s	loc_16B70
00017670 0C41 000C                  		cmpi.w	#$C,d1
00017674 6C00                       		bge.s	loc_16B70
00017676 D368 000C                  		add.w	d1,$C(a0)
0001767A 4842                       		swap	d2
0001767C B468 0008                  		cmp.w	8(a0),d2
00017680 6700                       		beq.s	locret_16B5C
00017682 7000                       		moveq	#0,d0
00017684 1028 003C                  		move.b	$3C(a0),d0
00017688 5228 003C                  		addq.b	#1,$3C(a0)
0001768C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017692 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017696                            
00017696                            locret_16B5C:
00017696 4E75                       		rts	
00017698                            ; ===========================================================================
00017698                            
00017698                            loc_16B5E:
00017698 5528 0025                  		subq.b	#2,$25(a0)
0001769C 117C 0007 002A             		move.b	#7,$2A(a0)
000176A2 317C 0000 0010             		move.w	#0,$10(a0)
000176A8 4E75                       		rts	
000176AA                            ; ===========================================================================
000176AA                            
000176AA                            loc_16B70:
000176AA 2142 0008                  		move.l	d2,8(a0)
000176AE 0868 0000 0022             		bchg	#0,$22(a0)
000176B4 1168 0022 0001             		move.b	$22(a0),1(a0)
000176BA 7000                       		moveq	#0,d0
000176BC 1028 003C                  		move.b	$3C(a0),d0
000176C0 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000176C6 5228 003C                  		addq.b	#1,$3C(a0)
000176CA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000176D0 4E75                       		rts	
000176D2                            ; ===========================================================================
000176D2                            
000176D2                            Obj78_BodySeg2:				; XREF: Obj78_Index
000176D2 2268 003C                  		movea.l	$3C(a0),a1
000176D6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176DC 6A00                       		bpl.s	Obj78_BodySeg1
000176DE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176E4 1028 0026                  		move.b	$26(a0),d0
000176E8 0240 007F                  		andi.w	#$7F,d0
000176EC 5828 0026                  		addq.b	#4,$26(a0)
000176F0 4A31 0004                  		tst.b	4(a1,d0.w)
000176F4 6A00                       		bpl.s	Obj78_AniBody
000176F6 5828 0026                  		addq.b	#4,$26(a0)
000176FA                            
000176FA                            Obj78_AniBody:
000176FA 1031 0000                  		move.b	(a1,d0.w),d0
000176FE 5000                       		addq.b	#8,d0
00017700 1140 001A                  		move.b	d0,$1A(a0)
00017704                            
00017704                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017704 2268 003C                  		movea.l	$3C(a0),a1
00017708 4A28 0022                  		tst.b	$22(a0)
0001770C 6B00 0000                  		bmi.w	loc_16C90
00017710 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017716 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001771C 6700 0000                  		beq.w	loc_16C64
00017720 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017726 3029 0010                  		move.w	$10(a1),d0
0001772A D069 0014                  		add.w	$14(a1),d0
0001772E 3140 0010                  		move.w	d0,$10(a0)
00017732 2428 0008                  		move.l	8(a0),d2
00017736 2602                       		move.l	d2,d3
00017738 3028 0010                  		move.w	$10(a0),d0
0001773C 0828 0000 0022             		btst	#0,$22(a0)
00017742 6700                       		beq.s	loc_16C0C
00017744 4440                       		neg.w	d0
00017746                            
00017746                            loc_16C0C:
00017746 48C0                       		ext.l	d0
00017748 E180                       		asl.l	#8,d0
0001774A D480                       		add.l	d0,d2
0001774C 2142 0008                  		move.l	d2,8(a0)
00017750 4843                       		swap	d3
00017752 B668 0008                  		cmp.w	8(a0),d3
00017756 6700                       		beq.s	loc_16C64
00017758 7000                       		moveq	#0,d0
0001775A 1028 003C                  		move.b	$3C(a0),d0
0001775E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017762 0C01 0080                  		cmpi.b	#-$80,d1
00017766 6600                       		bne.s	loc_16C50
00017768 4843                       		swap	d3
0001776A 2143 0008                  		move.l	d3,8(a0)
0001776E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017772 0868 0000 0022             		bchg	#0,$22(a0)
00017778 1168 0022 0001             		move.b	$22(a0),1(a0)
0001777E 5228 003C                  		addq.b	#1,$3C(a0)
00017782 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017788 6000                       		bra.s	loc_16C64
0001778A                            ; ===========================================================================
0001778A                            
0001778A                            loc_16C50:
0001778A 4881                       		ext.w	d1
0001778C D368 000C                  		add.w	d1,$C(a0)
00017790 5228 003C                  		addq.b	#1,$3C(a0)
00017794 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001779A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001779E                            
0001779E                            loc_16C64:
0001779E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000177A4 6700                       		beq.s	loc_16C90
000177A6 0C11 0027                  		cmpi.b	#$27,0(a1)
000177AA 6700                       		beq.s	loc_16C7C
000177AC 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000177B2 6600                       		bne.s	loc_16C82
000177B4                            
000177B4                            loc_16C7C:
000177B4 117C 000A 0024             		move.b	#$A,$24(a0)
000177BA                            
000177BA                            loc_16C82:
000177BA 4EF9 0000 DD82             		jmp	DisplaySprite
000177C0                            
000177C0                            ; ===========================================================================
000177C0 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000177C8                            ; ===========================================================================
000177C8                            
000177C8                            loc_16C90:
000177C8 08E9 0007 0022             		bset	#7,$22(a1)
000177CE                            
000177CE                            loc_16C96:
000177CE 7000                       		moveq	#0,d0
000177D0 1028 0024                  		move.b	$24(a0),d0
000177D4 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000177D8 0828 0000 0022             		btst	#0,$22(a0)
000177DE 6700                       		beq.s	loc_16CAA
000177E0 4440                       		neg.w	d0
000177E2                            
000177E2                            loc_16CAA:
000177E2 3140 0010                  		move.w	d0,$10(a0)
000177E6 317C FC00 0012             		move.w	#-$400,$12(a0)
000177EC 117C 000C 0024             		move.b	#$C,$24(a0)
000177F2 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177F8                            
000177F8                            loc_16CC0:				; XREF: Obj78_Index
000177F8 4EB9 0000 DD30             		jsr	ObjectFall
000177FE 4A68 0012                  		tst.w	$12(a0)
00017802 6B00                       		bmi.s	loc_16CE0
00017804 4EBA E156                  		jsr	ObjHitFloor
00017808 4A41                       		tst.w	d1
0001780A 6A00                       		bpl.s	loc_16CE0
0001780C D368 000C                  		add.w	d1,$C(a0)
00017810 317C FC00 0012             		move.w	#-$400,$12(a0)
00017816                            
00017816                            loc_16CE0:
00017816 4A28 0001                  		tst.b	1(a0)
0001781A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001781E 4EF9 0000 DD82             		jmp	DisplaySprite
00017824                            ; ===========================================================================
00017824                            Ani_obj78:
00017824                            	include "_anim\obj78.asm"
00017824                            ; ---------------------------------------------------------------------------
00017824                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017824                            ; ---------------------------------------------------------------------------
00017824 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017834 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017844 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017854 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017864 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017874 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017884 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017894 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000178A4                            	even
000178A4                            	even
000178A4                            
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            Map_obj78:
000178A4                            	include "_maps\obj78.asm"
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178A4                            ; ---------------------------------------------------------------------------
000178A4 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000178A8 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000178AC 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000178B0 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000178B4 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000178B8 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000178BC 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000178C0 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000178C4 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000178C8 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000178CC 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000178D0 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000178D4 01                         byte_16D9E:	dc.b 1
000178D5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000178DA 01                         byte_16DA4:	dc.b 1
000178DB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000178E0 01                         byte_16DAA:	dc.b 1
000178E1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178E6 01                         byte_16DB0:	dc.b 1
000178E7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178EC 01                         byte_16DB6:	dc.b 1
000178ED EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178F2 01                         byte_16DBC:	dc.b 1
000178F3 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178F8 01                         byte_16DC2:	dc.b 1
000178F9 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178FE 01                         byte_16DC8:	dc.b 1
000178FF EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017904 01                         byte_16DCE:	dc.b 1
00017905 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001790A 01                         byte_16DD4:	dc.b 1
0001790B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017910 01                         byte_16DDA:	dc.b 1
00017911 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017916 01                         byte_16DE0:	dc.b 1
00017917 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001791C 01                         byte_16DE6:	dc.b 1
0001791D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017922 01                         byte_16DEC:	dc.b 1
00017923 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017928 01                         byte_16DF2:	dc.b 1
00017929 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001792E 01                         byte_16DF8:	dc.b 1
0001792F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017934 01                         byte_16DFE:	dc.b 1
00017935 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001793A 01                         byte_16E04:	dc.b 1
0001793B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017940 01                         byte_16E0A:	dc.b 1
00017941 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017946 01                         byte_16E10:	dc.b 1
00017947 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001794C 01                         byte_16E16:	dc.b 1
0001794D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017952 01                         byte_16E1C:	dc.b 1
00017953 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017958 01                         byte_16E22:	dc.b 1
00017959 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001795E 01                         byte_16E28:	dc.b 1
0001795F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017964                            		even
00017964                            		even
00017964                            
00017964                            ; ===========================================================================
00017964                            ; ---------------------------------------------------------------------------
00017964                            ; Object 79 - lamppost
00017964                            ; ---------------------------------------------------------------------------
00017964                            
00017964                            Obj79:					; XREF: Obj_Index
00017964 7000                       		moveq	#0,d0
00017966 1028 0024                  		move.b	$24(a0),d0
0001796A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001796E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017972 4EFA 84B8                  		jmp	MarkObjGone
00017976                            ; ===========================================================================
00017976 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017978 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001797A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001797C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001797E                            ; ===========================================================================
0001797E                            
0001797E                            Obj79_Main:				; XREF: Obj79_Index
0001797E 5428 0024                  		addq.b	#2,$24(a0)
00017982 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001798A 317C 0571 0002             		move.w	#lamppostart,2(a0)
00017990 117C 0004 0001             		move.b	#4,1(a0)
00017996 117C 0008 0019             		move.b	#8,$19(a0)
0001799C 117C 0005 0018             		move.b	#5,$18(a0)
000179A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179A6 7000                       		moveq	#0,d0
000179A8 1028 0023                  		move.b	$23(a0),d0
000179AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000179B2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000179B8 6600                       		bne.s	Obj79_RedLamp
000179BA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179BE 0201 007F                  		andi.b	#$7F,d1
000179C2 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000179C6 0202 007F                  		andi.b	#$7F,d2
000179CA B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000179CC 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000179CE                            
000179CE                            Obj79_RedLamp:
000179CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179D4 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000179DA 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000179E0 4E75                       		rts	
000179E2                            ; ===========================================================================
000179E2                            
000179E2                            Obj79_BlueLamp:				; XREF: Obj79_Index
000179E2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179E6 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179EE 6B00 0000                  		bmi.w	locret_16F90
000179F2 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179F6 0201 007F                  		andi.b	#$7F,d1
000179FA 1428 0028                  		move.b	$28(a0),d2
000179FE 0202 007F                  		andi.b	#$7F,d2
00017A02 B202                       		cmp.b	d2,d1
00017A04 6500                       		bcs.s	Obj79_HitLamp
00017A06 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A0A 7000                       		moveq	#0,d0
00017A0C 1028 0023                  		move.b	$23(a0),d0
00017A10 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A16 117C 0004 0024             		move.b	#4,$24(a0)
00017A1C 117C 0003 001A             		move.b	#3,$1A(a0)
00017A22 6000 0000                  		bra.w	locret_16F90
00017A26                            ; ===========================================================================
00017A26                            
00017A26                            Obj79_HitLamp:
00017A26 3038 D008                  		move.w	($FFFFD008).w,d0
00017A2A 9068 0008                  		sub.w	8(a0),d0
00017A2E 5040                       		addq.w	#8,d0
00017A30 0C40 0010                  		cmpi.w	#$10,d0
00017A34 6400 0000                  		bcc.w	locret_16F90
00017A38 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A3C 9068 000C                  		sub.w	$C(a0),d0
00017A40 0640 0040                  		addi.w	#$40,d0
00017A44 0C40 0068                  		cmpi.w	#$68,d0
00017A48 6400                       		bcc.s	locret_16F90
00017A4A 303C 00A1                  		move.w	#$A1,d0
00017A4E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A54 5428 0024                  		addq.b	#2,$24(a0)
00017A58 4EB9 0000 E20E             		jsr	SingleObjLoad
00017A5E 6600                       		bne.s	loc_16F76
00017A60 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A64 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A6A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A70 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A76 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A7C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A84 337C 0571 0002             		move.w	#lamppostart,2(a1)
00017A8A 137C 0004 0001             		move.b	#4,1(a1)
00017A90 137C 0008 0019             		move.b	#8,$19(a1)
00017A96 137C 0004 0018             		move.b	#4,$18(a1)
00017A9C 137C 0002 001A             		move.b	#2,$1A(a1)
00017AA2 337C 0020 0036             		move.w	#$20,$36(a1)
00017AA8                            
00017AA8                            loc_16F76:
00017AA8 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017AAE 6100 0000                  		bsr.w	Obj79_StoreInfo
00017AB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017AB6 7000                       		moveq	#0,d0
00017AB8 1028 0023                  		move.b	$23(a0),d0
00017ABC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017AC2                            
00017AC2                            locret_16F90:
00017AC2 4E75                       		rts	
00017AC4                            ; ===========================================================================
00017AC4                            
00017AC4                            Obj79_AfterHit:				; XREF: Obj79_Index
00017AC4 4E75                       		rts	
00017AC6                            ; ===========================================================================
00017AC6                            
00017AC6                            Obj79_Twirl:				; XREF: Obj79_Index
00017AC6 5368 0036                  		subq.w	#1,$36(a0)
00017ACA 6A00                       		bpl.s	loc_16FA0
00017ACC 117C 0004 0024             		move.b	#4,$24(a0)
00017AD2                            
00017AD2                            loc_16FA0:
00017AD2 1028 0026                  		move.b	$26(a0),d0
00017AD6 0428 0010 0026             		subi.b	#$10,$26(a0)
00017ADC 0400 0040                  		subi.b	#$40,d0
00017AE0 4EB9 0000 28EC             		jsr	(CalcSine).l
00017AE6 C3FC 0C00                  		muls.w	#$C00,d1
00017AEA 4841                       		swap	d1
00017AEC D268 0030                  		add.w	$30(a0),d1
00017AF0 3141 0008                  		move.w	d1,8(a0)
00017AF4 C1FC 0C00                  		muls.w	#$C00,d0
00017AF8 4840                       		swap	d0
00017AFA D068 0032                  		add.w	$32(a0),d0
00017AFE 3140 000C                  		move.w	d0,$C(a0)
00017B02 4E75                       		rts	
00017B04                            ; ===========================================================================
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            ; Subroutine to	store information when you hit a lamppost
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            
00017B04                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017B04 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017B0A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017B10 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017B16 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017B1C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017B22 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017B28 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017B2E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017B34 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017B3A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017B40 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B46 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B4C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B52 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B58 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B5E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B64 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B6A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B70 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B76 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B7C 4E75                       		rts	
00017B7E                            
00017B7E                            ; ---------------------------------------------------------------------------
00017B7E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B7E                            ; ---------------------------------------------------------------------------
00017B7E                            
00017B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B7E                            
00017B7E                            
00017B7E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B7E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B84 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B8A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B90 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B96 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B9C 4278 FE20                  		clr.w	($FFFFFE20).w
00017BA0 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017BA4 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017BAA 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017BB0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017BB4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017BBA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BC0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017BC6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017BCC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017BD2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017BD8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017BDE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017BE4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BEA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BF0 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BF6 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017C02 6600                       		bne.s	loc_170E4
00017C04 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017C0A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017C10 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017C16                            
00017C16                            loc_170E4:
00017C16 4A38 FE30                  		tst.b	($FFFFFE30).w
00017C1A 6A00                       		bpl.s	locret_170F6
00017C1C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017C20 0440 00A0                  		subi.w	#$A0,d0
00017C24 31C0 F728                  		move.w	d0,($FFFFF728).w
00017C28                            
00017C28                            locret_170F6:
00017C28 4E75                       		rts	
00017C2A                            ; End of function Obj79_LoadInfo
00017C2A                            
00017C2A                            ; ===========================================================================
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A                            ; Sprite mappings - lamppost
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A                            Map_obj79:
00017C2A                            	include "_maps\obj79.asm"
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A                            ; Sprite mappings - lamppost
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017C2E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017C32 06                         byte_17100:	dc.b 6
00017C33 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C38 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C3D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C42 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C47 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C4C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C51 04                         byte_1711F:	dc.b 4
00017C52 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C57 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C5C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C61 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C66 02                         byte_17134:	dc.b 2
00017C67 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C6C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C71 06                         byte_1713F:	dc.b 6
00017C72 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C77 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C7C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C81 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C86 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C8B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C90                            		even
00017C90                            		even
00017C90                            
00017C90                            ; ===========================================================================
00017C90                            ; ---------------------------------------------------------------------------
00017C90                            ; Object 7D - hidden points at the end of a level
00017C90                            ; ---------------------------------------------------------------------------
00017C90                            
00017C90                            Obj7D:					; XREF: Obj_Index
00017C90 7000                       		moveq	#0,d0
00017C92 1028 0024                  		move.b	$24(a0),d0
00017C96 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C9A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C9E                            ; ===========================================================================
00017C9E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017CA0 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017CA2                            ; ===========================================================================
00017CA2                            
00017CA2                            Obj7D_Main:				; XREF: Obj7D_Index
00017CA2 7410                       		moveq	#$10,d2
00017CA4 3602                       		move.w	d2,d3
00017CA6 D643                       		add.w	d3,d3
00017CA8 43F8 D000                  		lea	($FFFFD000).w,a1
00017CAC 3029 0008                  		move.w	8(a1),d0
00017CB0 9068 0008                  		sub.w	8(a0),d0
00017CB4 D042                       		add.w	d2,d0
00017CB6 B043                       		cmp.w	d3,d0
00017CB8 6400                       		bcc.s	Obj7D_ChkDel
00017CBA 3229 000C                  		move.w	$C(a1),d1
00017CBE 9268 000C                  		sub.w	$C(a0),d1
00017CC2 D242                       		add.w	d2,d1
00017CC4 B243                       		cmp.w	d3,d1
00017CC6 6400                       		bcc.s	Obj7D_ChkDel
00017CC8 4A78 FE08                  		tst.w	($FFFFFE08).w
00017CCC 6600                       		bne.s	Obj7D_ChkDel
00017CCE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017CD2 6600                       		bne.s	Obj7D_ChkDel
00017CD4 5428 0024                  		addq.b	#2,$24(a0)
00017CD8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017CE0 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CE6 0028 0004 0001             		ori.b	#4,1(a0)
00017CEC 117C 0000 0018             		move.b	#0,$18(a0)
00017CF2 117C 0010 0019             		move.b	#$10,$19(a0)
00017CF8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CFE 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017D04 303C 00C9                  		move.w	#$C9,d0
00017D08 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play bonus sound
00017D0E 7000                       		moveq	#0,d0
00017D10 1028 0028                  		move.b	$28(a0),d0
00017D14 D040                       		add.w	d0,d0
00017D16 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017D1A 4EB9 0000 0000             		jsr	AddPoints
00017D20                            
00017D20                            Obj7D_ChkDel:
00017D20 3028 0008                  		move.w	8(a0),d0
00017D24 0240 FF80                  		andi.w	#$FF80,d0
00017D28 3238 F700                  		move.w	($FFFFF700).w,d1
00017D2C 0441 0080                  		subi.w	#$80,d1
00017D30 0241 FF80                  		andi.w	#$FF80,d1
00017D34 9041                       		sub.w	d1,d0
00017D36 0C40 0280                  		cmpi.w	#$280,d0
00017D3A 6200                       		bhi.s	Obj7D_Delete
00017D3C 4E75                       		rts	
00017D3E                            ; ===========================================================================
00017D3E                            
00017D3E                            Obj7D_Delete:
00017D3E 4EF9 0000 DDBE             		jmp	DeleteObject
00017D44                            ; ===========================================================================
00017D44 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D46 03E8                       		dc.w 1000
00017D48 0064                       		dc.w 100
00017D4A 0001                       		dc.w 1
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D4C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D50 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D52 3028 0008                  		move.w	8(a0),d0
00017D56 0240 FF80                  		andi.w	#-$80,d0
00017D5A 3238 F700                  		move.w	($FFFFF700).w,d1
00017D5E 0441 0080                  		subi.w	#$80,d1
00017D62 0241 FF80                  		andi.w	#-$80,d1
00017D66 9041                       		sub.w	d1,d0
00017D68 0C40 0280                  		cmpi.w	#$280,d0
00017D6C 6200                       		bhi.s	Obj7D_Delete2
00017D6E 4EF9 0000 DD82             		jmp	DisplaySprite
00017D74                            ; ===========================================================================
00017D74                            
00017D74                            Obj7D_Delete2:
00017D74 4EF9 0000 DDBE             		jmp	DeleteObject
00017D7A                            ; ===========================================================================
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A                            ; Sprite mappings - hidden points at the end of	a level
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A                            Map_obj7D:
00017D7A                            	include "_maps\obj7D.asm"
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A                            ; Sprite mappings - hidden points at the end of	a level
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D7E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D82 00                         byte_17250:	dc.b 0
00017D83 01                         byte_17251:	dc.b 1
00017D84 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D89 01                         byte_17257:	dc.b 1
00017D8A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D8F 01                         byte_1725D:	dc.b 1
00017D90 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D96 00                         		even
00017D96 00                         		even
00017D96                            
00017D96                            ; ===========================================================================
00017D96                            ; ---------------------------------------------------------------------------
00017D96                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D96                            ; ---------------------------------------------------------------------------
00017D96                            
00017D96                            Obj8A:					; XREF: Obj_Index
00017D96 7000                       		moveq	#0,d0
00017D98 1028 0024                  		move.b	$24(a0),d0
00017D9C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017DA0 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017DA4                            ; ===========================================================================
00017DA4 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017DA6 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017DA8                            ; ===========================================================================
00017DA8                            
00017DA8                            Obj8A_Main:				; XREF: Obj8A_Index
00017DA8 5428 0024                  		addq.b	#2,$24(a0)
00017DAC 317C 0120 0008             		move.w	#$120,8(a0)
00017DB2 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017DB8 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017DC0 317C 25A0 0002             		move.w	#$25A0,2(a0)
00017DC6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017DCA 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017DCE 117C 0000 0001             		move.b	#0,1(a0)
00017DD4 117C 0000 0018             		move.b	#0,$18(a0)
00017DDA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017DE0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DE2 317C 20A6 0002             		move.w	#$20A6,2(a0)
00017DE8 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DEE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DF2 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DF4 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DFA 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DFC 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017E02 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017E08 4EF9 0000 DDBE             		jmp	DeleteObject
00017E0E                            ; ===========================================================================
00017E0E                            
00017E0E                            Obj8A_Display:				; XREF: Obj8A_Index
00017E0E 4EF9 0000 DD82             		jmp	DisplaySprite
00017E14                            ; ===========================================================================
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            Map_obj8A:
00017E14                            	include "_maps\obj8A.asm"
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017E14                            ; ---------------------------------------------------------------------------
00017E14 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00017E18 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00017E1C 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00017E20 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00017E24 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00017E28 0000                       		dc.w byte_176A9-Map_obj8A
00017E2A 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00017E2B F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00017E30 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00017E35 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00017E3A F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00017E3F F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00017E44 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00017E49 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00017E4E F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00017E53 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00017E58 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017E5D F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00017E62 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00017E67 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017E6C F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00017E71 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00017E72 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00017E77 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00017E7C D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00017E81 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00017E86 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00017E8B D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00017E90 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00017E95 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00017E9A 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00017E9F 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00017EA4 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00017EA9 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00017EAE 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00017EB3 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00017EB8 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00017EBD 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00017EC2 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00017EC3 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00017EC8 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00017ECD D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00017ED2 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00017ED7 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00017EDC D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00017EE1 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00017EE6 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00017EEB 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00017EF0 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00017EF5 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00017EF6 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00017EFB D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00017F00 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00017F05 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00017F0A D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017F0F D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00017F14 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00017F19 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00017F1E D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017F23 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00017F28 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00017F2D D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00017F32 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00017F37 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00017F3C D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00017F41 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00017F46 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00017F4B 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00017F50 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00017F55 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00017F5A 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00017F5F 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00017F64 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00017F69 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00017F6E 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00017F6F D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00017F74 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00017F79 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00017F7E D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00017F83 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00017F88 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00017F8D 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00017F92 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00017F97 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00017F9C 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00017FA1 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00017FA6 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00017FAB 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00017FB0 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00017FB5 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00017FBA 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00017FBF 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00017FC4 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00017FC9 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00017FCE 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00017FD3 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00017FD4 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00017FD9 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00017FDE D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00017FE3 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00017FE8 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00017FED D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00017FF2 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017FF7 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00017FFC D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018001 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018006 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
0001800B D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018010 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018015 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
0001801A 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
0001801F 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018024 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018029 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
0001802E 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018033 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018038 0805 0058 18               		dc.b 8,	5, 0, $58, $18
0001803D 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018042 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018047 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
0001804C 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018051 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018056 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018057 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001805C D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018061 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018066 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001806B D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018070 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018075 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001807A D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001807F D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018084 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018089 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001808E D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018093 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018098 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001809D 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000180A2 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000180A7 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000180AC 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000180B1 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000180B6 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000180BB 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000180C0 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000180C5 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000180CA 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000180CB D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000180D0 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000180D5 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000180DA D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000180DF D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000180E4 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000180E9 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000180EE D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000180F3 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000180F8 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000180FD D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018102 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018107 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
0001810C 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018111 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018116 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001811B 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018120 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018125 0009 0008 00               		dc.b 0,	9, 0, 8, 0
0001812A 0001 0046 14               		dc.b 0,	1, 0, $46, $14
0001812F 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018134 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018139 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
0001813E 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018143 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018148 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
0001814D 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018152 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018157 2005 0004 08               		dc.b $20, 5, 0,	4, 8
0001815C 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018161 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00018166 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00018167 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
0001816C F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00018171 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00018176 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
0001817B F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00018180 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00018185 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
0001818A F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
0001818F F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00018194 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00018199 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001819E F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000181A3 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000181A8 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000181AD F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000181B2 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000181B3 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000181B8 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000181BD 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000181C2 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000181C7 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000181CC 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000181D1 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000181D6 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000181DB 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000181DC E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000181E1 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000181E6 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000181EB E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000181F0 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000181F5 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000181FA E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000181FF E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00018204 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00018209 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
0001820E 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00018213 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00018218 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
0001821D 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00018222 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00018227 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
0001822C 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00018232 00                         		even
00018232 00                         		even
00018232                            
00018232                            ; ===========================================================================
00018232                            ; ---------------------------------------------------------------------------
00018232                            ; Object 3D - Eggman (GHZ)
00018232                            ; ---------------------------------------------------------------------------
00018232                            
00018232                            Obj3D:					; XREF: Obj_Index
00018232 7000                       		moveq	#0,d0
00018234 1028 0024                  		move.b	$24(a0),d0
00018238 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001823C 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018240                            ; ===========================================================================
00018240 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018242 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018244 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018246 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018248                            
00018248 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001824A 0401                       		dc.b 4,	1
0001824C 0607                       		dc.b 6,	7
0001824E                            ; ===========================================================================
0001824E                            
0001824E                            Obj3D_Main:				; XREF: Obj3D_Index
0001824E 45F9 0001 8248             		lea	(Obj3D_ObjData).l,a2
00018254 2248                       		movea.l	a0,a1
00018256 7202                       		moveq	#2,d1
00018258 6000                       		bra.s	Obj3D_LoadBoss
0001825A                            ; ===========================================================================
0001825A                            
0001825A                            Obj3D_Loop:
0001825A 4EB9 0000 E224             		jsr	SingleObjLoad2
00018260 6600                       		bne.s	loc_17772
00018262                            
00018262                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018262 135A 0024                  		move.b	(a2)+,$24(a1)
00018266 12BC 003D                  		move.b	#$3D,0(a1)
0001826A 3368 0008 0008             		move.w	8(a0),8(a1)
00018270 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018276 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001827E 337C 0400 0002             		move.w	#$400,2(a1)
00018284 137C 0004 0001             		move.b	#4,1(a1)
0001828A 137C 0020 0019             		move.b	#$20,$19(a1)
00018290 137C 0003 0018             		move.b	#3,$18(a1)
00018296 135A 001C                  		move.b	(a2)+,$1C(a1)
0001829A 2348 0034                  		move.l	a0,$34(a1)
0001829E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000182A2                            
000182A2                            loc_17772:
000182A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000182A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000182AE 117C 000F 0020             		move.b	#$F,$20(a0)
000182B4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000182BA                            
000182BA                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000182BA 7000                       		moveq	#0,d0
000182BC 1028 0025                  		move.b	$25(a0),d0
000182C0 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000182C4 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182C8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182CE 4EB9 0000 AE7A             		jsr	AnimateSprite
000182D4 1028 0022                  		move.b	$22(a0),d0
000182D8 0200 0003                  		andi.b	#3,d0
000182DC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182E2 8128 0001                  		or.b	d0,1(a0)
000182E6 4EF9 0000 DD82             		jmp	DisplaySprite
000182EC                            ; ===========================================================================
000182EC 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000182EE 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000182F0 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000182F2 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000182F4 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000182F6 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000182F8 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000182FA                            ; ===========================================================================
000182FA                            
000182FA                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000182FA 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00018300 6100 0000                  		bsr.w	BossMove
00018304 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001830A 6600                       		bne.s	loc_177E6
0001830C 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018312 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018316                            
00018316                            loc_177E6:
00018316 1028 003F                  		move.b	$3F(a0),d0
0001831A 4EB9 0000 28EC             		jsr	(CalcSine).l
00018320 EC40                       		asr.w	#6,d0
00018322 D068 0038                  		add.w	$38(a0),d0
00018326 3140 000C                  		move.w	d0,$C(a0)
0001832A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018330 5428 003F                  		addq.b	#2,$3F(a0)
00018334 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001833A 6400                       		bcc.s	locret_1784A
0001833C 4A28 0022                  		tst.b	$22(a0)
00018340 6B00                       		bmi.s	loc_1784C
00018342 4A28 0020                  		tst.b	$20(a0)
00018346 6600                       		bne.s	locret_1784A
00018348 4A28 003E                  		tst.b	$3E(a0)
0001834C 6600                       		bne.s	Obj3D_ShipFlash
0001834E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018354 303C 00AC                  		move.w	#$AC,d0
00018358 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001835E                            
0001835E                            Obj3D_ShipFlash:
0001835E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018362 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018364 4A51                       		tst.w	(a1)
00018366 6600                       		bne.s	loc_1783C
00018368 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001836C                            
0001836C                            loc_1783C:
0001836C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001836E 5328 003E                  		subq.b	#1,$3E(a0)
00018372 6600                       		bne.s	locret_1784A
00018374 117C 000F 0020             		move.b	#$F,$20(a0)
0001837A                            
0001837A                            locret_1784A:
0001837A 4E75                       		rts	
0001837C                            ; ===========================================================================
0001837C                            
0001837C                            loc_1784C:				; XREF: loc_177E6
0001837C 7064                       		moveq	#100,d0
0001837E 6100 0000                  		bsr.w	AddPoints
00018382 117C 0008 0025             		move.b	#8,$25(a0)
00018388 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001838E 4E75                       		rts	
00018390                            
00018390                            ; ---------------------------------------------------------------------------
00018390                            ; Defeated boss	subroutine
00018390                            ; ---------------------------------------------------------------------------
00018390                            
00018390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018390                            
00018390                            
00018390                            BossDefeated:
00018390 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00018396 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001839C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000183A0 0200 0007                  		andi.b	#7,d0
000183A4 6600                       		bne.s	locret_178A2
000183A6 4EB9 0000 E20E             		jsr	SingleObjLoad
000183AC 6600                       		bne.s	locret_178A2
000183AE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000183B2 3368 0008 0008             		move.w	8(a0),8(a1)
000183B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183BE 4EB9 0000 28C6             		jsr	(RandomNumber).l
000183C4 3200                       		move.w	d0,d1
000183C6 7200                       		moveq	#0,d1
000183C8 1200                       		move.b	d0,d1
000183CA E409                       		lsr.b	#2,d1
000183CC 0441 0020                  		subi.w	#$20,d1
000183D0 D369 0008                  		add.w	d1,8(a1)
000183D4 E048                       		lsr.w	#8,d0
000183D6 E608                       		lsr.b	#3,d0
000183D8 D169 000C                  		add.w	d0,$C(a1)
000183DC                            
000183DC                            locret_178A2:
000183DC 4E75                       		rts	
000183DE                            ; End of function BossDefeated
000183DE                            
000183DE                            ; ---------------------------------------------------------------------------
000183DE                            ; Subroutine to	move a boss
000183DE                            ; ---------------------------------------------------------------------------
000183DE                            
000183DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183DE                            
000183DE                            
000183DE                            BossMove:
000183DE 2428 0030                  		move.l	$30(a0),d2
000183E2 2628 0038                  		move.l	$38(a0),d3
000183E6 3028 0010                  		move.w	$10(a0),d0
000183EA 48C0                       		ext.l	d0
000183EC E180                       		asl.l	#8,d0
000183EE D480                       		add.l	d0,d2
000183F0 3028 0012                  		move.w	$12(a0),d0
000183F4 48C0                       		ext.l	d0
000183F6 E180                       		asl.l	#8,d0
000183F8 D680                       		add.l	d0,d3
000183FA 2142 0030                  		move.l	d2,$30(a0)
000183FE 2143 0038                  		move.l	d3,$38(a0)
00018402 4E75                       		rts	
00018404                            ; End of function BossMove
00018404                            
00018404                            ; ===========================================================================
00018404                            
00018404                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00018404 317C FF00 0010             		move.w	#-$100,$10(a0)
0001840A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018410 6100 FFCC                  		bsr.w	BossMove
00018414 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001841A 6600                       		bne.s	loc_17916
0001841C 317C 0000 0010             		move.w	#0,$10(a0)
00018422 317C 0000 0012             		move.w	#0,$12(a0)
00018428 5428 0025                  		addq.b	#2,$25(a0)
0001842C 4EB9 0000 E224             		jsr	SingleObjLoad2
00018432 6600                       		bne.s	loc_17910
00018434 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018438 3368 0030 0008             		move.w	$30(a0),8(a1)
0001843E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018444 2348 0034                  		move.l	a0,$34(a1)
00018448                            
00018448                            loc_17910:
00018448 317C 0077 003C             		move.w	#$77,$3C(a0)
0001844E                            
0001844E                            loc_17916:
0001844E 6000 FEC6                  		bra.w	loc_177E6
00018452                            ; ===========================================================================
00018452                            
00018452                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00018452 5368 003C                  		subq.w	#1,$3C(a0)
00018456 6A00                       		bpl.s	Obj3D_Reverse
00018458 5428 0025                  		addq.b	#2,$25(a0)
0001845C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018462 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00018468 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001846E 6600                       		bne.s	Obj3D_Reverse
00018470 317C 007F 003C             		move.w	#$7F,$3C(a0)
00018476 317C 0040 0010             		move.w	#$40,$10(a0)
0001847C                            
0001847C                            Obj3D_Reverse:
0001847C 0828 0000 0022             		btst	#0,$22(a0)
00018482 6600                       		bne.s	loc_17950
00018484 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00018488                            
00018488                            loc_17950:
00018488 6000 FE8C                  		bra.w	loc_177E6
0001848C                            ; ===========================================================================
0001848C                            
0001848C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001848C 5368 003C                  		subq.w	#1,$3C(a0)
00018490 6B00                       		bmi.s	loc_17960
00018492 6100 FF4A                  		bsr.w	BossMove
00018496 6000                       		bra.s	loc_17976
00018498                            ; ===========================================================================
00018498                            
00018498                            loc_17960:
00018498 0868 0000 0022             		bchg	#0,$22(a0)
0001849E 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184A4 5528 0025                  		subq.b	#2,$25(a0)
000184A8 317C 0000 0010             		move.w	#0,$10(a0)
000184AE                            
000184AE                            loc_17976:
000184AE 6000 FE66                  		bra.w	loc_177E6
000184B2                            ; ===========================================================================
000184B2                            
000184B2                            loc_1797A:				; XREF: Obj3D_ShipIndex
000184B2 5368 003C                  		subq.w	#1,$3C(a0)
000184B6 6B00                       		bmi.s	loc_17984
000184B8 6000 FED6                  		bra.w	BossDefeated
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            loc_17984:
000184BC 08E8 0000 0022             		bset	#0,$22(a0)
000184C2 08A8 0007 0022             		bclr	#7,$22(a0)
000184C8 4268 0010                  		clr.w	$10(a0)
000184CC 5428 0025                  		addq.b	#2,$25(a0)
000184D0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000184D6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000184DA 6600                       		bne.s	locret_179AA
000184DC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000184E2                            
000184E2                            locret_179AA:
000184E2 4E75                       		rts	
000184E4                            ; ===========================================================================
000184E4                            
000184E4                            loc_179AC:				; XREF: Obj3D_ShipIndex
000184E4 5268 003C                  		addq.w	#1,$3C(a0)
000184E8 6700                       		beq.s	loc_179BC
000184EA 6A00                       		bpl.s	loc_179C2
000184EC 0668 0018 0012             		addi.w	#$18,$12(a0)
000184F2 6000                       		bra.s	loc_179EE
000184F4                            ; ===========================================================================
000184F4                            
000184F4                            loc_179BC:
000184F4 4268 0012                  		clr.w	$12(a0)
000184F8 6000                       		bra.s	loc_179EE
000184FA                            ; ===========================================================================
000184FA                            
000184FA                            loc_179C2:
000184FA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018500 6500                       		bcs.s	loc_179DA
00018502 6700                       		beq.s	loc_179E0
00018504 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001850A 6500                       		bcs.s	loc_179EE
0001850C 5428 0025                  		addq.b	#2,$25(a0)
00018510 6000                       		bra.s	loc_179EE
00018512                            ; ===========================================================================
00018512                            
00018512                            loc_179DA:
00018512 5168 0012                  		subq.w	#8,$12(a0)
00018516 6000                       		bra.s	loc_179EE
00018518                            ; ===========================================================================
00018518                            
00018518                            loc_179E0:
00018518 4268 0012                  		clr.w	$12(a0)
0001851C 303C 0081                  		move.w	#$81,d0
00018520 4EB9 0000 125C             		jsr	(PlaySound).l	; play GHZ music
00018526                            
00018526                            loc_179EE:
00018526 6100 FEB6                  		bsr.w	BossMove
0001852A 6000 FDEA                  		bra.w	loc_177E6
0001852E                            ; ===========================================================================
0001852E                            
0001852E                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001852E 317C 0400 0010             		move.w	#$400,$10(a0)
00018534 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001853A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018540 6700                       		beq.s	loc_17A10
00018542 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018546 6000                       		bra.s	loc_17A16
00018548                            ; ===========================================================================
00018548                            
00018548                            loc_17A10:
00018548 4A28 0001                  		tst.b	1(a0)
0001854C 6A00                       		bpl.s	Obj3D_ShipDel
0001854E                            
0001854E                            loc_17A16:
0001854E 6100 FE8E                  		bsr.w	BossMove
00018552 6000 FDC2                  		bra.w	loc_177E6
00018556                            ; ===========================================================================
00018556                            
00018556                            Obj3D_ShipDel:
00018556 4EF9 0000 DDBE             		jmp	DeleteObject
0001855C                            ; ===========================================================================
0001855C                            
0001855C                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001855C 7000                       		moveq	#0,d0
0001855E 7201                       		moveq	#1,d1
00018560 2268 0034                  		movea.l	$34(a0),a1
00018564 1029 0025                  		move.b	$25(a1),d0
00018568 5900                       		subq.b	#4,d0
0001856A 6600                       		bne.s	loc_17A3E
0001856C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018572 6600                       		bne.s	loc_17A46
00018574 7204                       		moveq	#4,d1
00018576                            
00018576                            loc_17A3E:
00018576 5D00                       		subq.b	#6,d0
00018578 6B00                       		bmi.s	loc_17A46
0001857A 720A                       		moveq	#$A,d1
0001857C 6000                       		bra.s	loc_17A5A
0001857E                            ; ===========================================================================
0001857E                            
0001857E                            loc_17A46:
0001857E 4A29 0020                  		tst.b	$20(a1)
00018582 6600                       		bne.s	loc_17A50
00018584 7205                       		moveq	#5,d1
00018586 6000                       		bra.s	loc_17A5A
00018588                            ; ===========================================================================
00018588                            
00018588                            loc_17A50:
00018588 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001858E 6500                       		bcs.s	loc_17A5A
00018590 7204                       		moveq	#4,d1
00018592                            
00018592                            loc_17A5A:
00018592 1141 001C                  		move.b	d1,$1C(a0)
00018596 5500                       		subq.b	#2,d0
00018598 6600                       		bne.s	Obj3D_FaceDisp
0001859A 117C 0006 001C             		move.b	#6,$1C(a0)
000185A0 4A28 0001                  		tst.b	1(a0)
000185A4 6A00                       		bpl.s	Obj3D_FaceDel
000185A6                            
000185A6                            Obj3D_FaceDisp:
000185A6 6000                       		bra.s	Obj3D_Display
000185A8                            ; ===========================================================================
000185A8                            
000185A8                            Obj3D_FaceDel:
000185A8 4EF9 0000 DDBE             		jmp	DeleteObject
000185AE                            ; ===========================================================================
000185AE                            
000185AE                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000185AE 117C 0007 001C             		move.b	#7,$1C(a0)
000185B4 2268 0034                  		movea.l	$34(a0),a1
000185B8 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000185BE 6600                       		bne.s	loc_17A96
000185C0 117C 000B 001C             		move.b	#$B,$1C(a0)
000185C6 4A28 0001                  		tst.b	1(a0)
000185CA 6A00                       		bpl.s	Obj3D_FlameDel
000185CC 6000                       		bra.s	Obj3D_FlameDisp
000185CE                            ; ===========================================================================
000185CE                            
000185CE                            loc_17A96:
000185CE 3029 0010                  		move.w	$10(a1),d0
000185D2 6700                       		beq.s	Obj3D_FlameDisp
000185D4 117C 0008 001C             		move.b	#8,$1C(a0)
000185DA                            
000185DA                            Obj3D_FlameDisp:
000185DA 6000                       		bra.s	Obj3D_Display
000185DC                            ; ===========================================================================
000185DC                            
000185DC                            Obj3D_FlameDel:
000185DC 4EF9 0000 DDBE             		jmp	DeleteObject
000185E2                            ; ===========================================================================
000185E2                            
000185E2                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000185E2 2268 0034                  		movea.l	$34(a0),a1
000185E6 3169 0008 0008             		move.w	8(a1),8(a0)
000185EC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000185F2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185F8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000185FE 4EB9 0000 AE7A             		jsr	AnimateSprite
00018604 1028 0022                  		move.b	$22(a0),d0
00018608 0200 0003                  		andi.b	#3,d0
0001860C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018612 8128 0001                  		or.b	d0,1(a0)
00018616 4EF9 0000 DD82             		jmp	DisplaySprite
0001861C                            ; ===========================================================================
0001861C                            ; ---------------------------------------------------------------------------
0001861C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001861C                            ; ---------------------------------------------------------------------------
0001861C                            
0001861C                            Obj48:					; XREF: Obj_Index
0001861C 7000                       		moveq	#0,d0
0001861E 1028 0024                  		move.b	$24(a0),d0
00018622 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018626 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001862A                            ; ===========================================================================
0001862A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001862C 0000                       		dc.w Obj48_Base-Obj48_Index
0001862E 0000                       		dc.w Obj48_Display2-Obj48_Index
00018630 0000                       		dc.w loc_17C68-Obj48_Index
00018632 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018634                            ; ===========================================================================
00018634                            
00018634                            Obj48_Main:				; XREF: Obj48_Index
00018634 5428 0024                  		addq.b	#2,$24(a0)
00018638 317C 4080 0026             		move.w	#$4080,$26(a0)
0001863E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018644 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001864C 317C 046C 0002             		move.w	#$46C,2(a0)
00018652 45E8 0028                  		lea	$28(a0),a2
00018656 14FC 0000                  		move.b	#0,(a2)+
0001865A 7205                       		moveq	#5,d1
0001865C 2248                       		movea.l	a0,a1
0001865E 6000                       		bra.s	loc_17B60
00018660                            ; ===========================================================================
00018660                            
00018660                            Obj48_MakeLinks:
00018660 4EB9 0000 E224             		jsr	SingleObjLoad2
00018666 6600                       		bne.s	Obj48_MakeBall
00018668 3368 0008 0008             		move.w	8(a0),8(a1)
0001866E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018674 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018678 137C 0006 0024             		move.b	#6,$24(a1)
0001867E 237C 0000 83AE 0004        		move.l	#Map_obj15,4(a1)
00018686 337C 0380 0002             		move.w	#$380,2(a1)
0001868C 137C 0001 001A             		move.b	#1,$1A(a1)
00018692 5228 0028                  		addq.b	#1,$28(a0)
00018696                            
00018696                            loc_17B60:				; XREF: Obj48_Main
00018696 3A09                       		move.w	a1,d5
00018698 0445 D000                  		subi.w	#$D000,d5
0001869C EC4D                       		lsr.w	#6,d5
0001869E 0245 007F                  		andi.w	#$7F,d5
000186A2 14C5                       		move.b	d5,(a2)+
000186A4 137C 0004 0001             		move.b	#4,1(a1)
000186AA 137C 0008 0019             		move.b	#8,$19(a1)
000186B0 137C 0006 0018             		move.b	#6,$18(a1)
000186B6 2368 0034 0034             		move.l	$34(a0),$34(a1)
000186BC 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000186C0                            
000186C0                            Obj48_MakeBall:
000186C0 137C 0008 0024             		move.b	#8,$24(a1)
000186C6 237C 0000 890C 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000186CE 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000186D4 137C 0001 001A             		move.b	#1,$1A(a1)
000186DA 137C 0005 0018             		move.b	#5,$18(a1)
000186E0 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000186E6 4E75                       		rts	
000186E8                            ; ===========================================================================
000186E8                            
000186E8 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000186EE                            
000186EE                            ; ===========================================================================
000186EE                            
000186EE                            Obj48_Base:				; XREF: Obj48_Index
000186EE 47F9 0001 86E8             		lea	(Obj48_PosData).l,a3
000186F4 45E8 0028                  		lea	$28(a0),a2
000186F8 7C00                       		moveq	#0,d6
000186FA 1C1A                       		move.b	(a2)+,d6
000186FC                            
000186FC                            loc_17BC6:
000186FC 7800                       		moveq	#0,d4
000186FE 181A                       		move.b	(a2)+,d4
00018700 ED4C                       		lsl.w	#6,d4
00018702 0684 00FF D000             		addi.l	#$FFD000,d4
00018708 2244                       		movea.l	d4,a1
0001870A 101B                       		move.b	(a3)+,d0
0001870C B029 003C                  		cmp.b	$3C(a1),d0
00018710 6700                       		beq.s	loc_17BE0
00018712 5229 003C                  		addq.b	#1,$3C(a1)
00018716                            
00018716                            loc_17BE0:
00018716 51CE FFE4                  		dbf	d6,loc_17BC6
0001871A                            
0001871A B029 003C                  		cmp.b	$3C(a1),d0
0001871E 6600                       		bne.s	loc_17BFA
00018720 2268 0034                  		movea.l	$34(a0),a1
00018724 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001872A 6600                       		bne.s	loc_17BFA
0001872C 5428 0024                  		addq.b	#2,$24(a0)
00018730                            
00018730                            loc_17BFA:
00018730 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018736 6700                       		beq.s	Obj48_Display
00018738 5268 0032                  		addq.w	#1,$32(a0)
0001873C                            
0001873C                            Obj48_Display:
0001873C 6100 0000                  		bsr.w	sub_17C2A
00018740 1028 0026                  		move.b	$26(a0),d0
00018744 4EB9 0000 8320             		jsr	(Obj15_Move2).l
0001874A 4EF9 0000 DD82             		jmp	DisplaySprite
00018750                            ; ===========================================================================
00018750                            
00018750                            Obj48_Display2:				; XREF: Obj48_Index
00018750 6100 0000                  		bsr.w	sub_17C2A
00018754 4EB9 0000 82E0             		jsr	(Obj48_Move).l
0001875A 4EF9 0000 DD82             		jmp	DisplaySprite
00018760                            
00018760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018760                            
00018760                            
00018760                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018760 2268 0034                  		movea.l	$34(a0),a1
00018764 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001876A 6400                       		bcc.s	loc_17C3C
0001876C 0868 0000 001A             		bchg	#0,$1A(a0)
00018772                            
00018772                            loc_17C3C:
00018772 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018778 3029 000C                  		move.w	$C(a1),d0
0001877C D068 0032                  		add.w	$32(a0),d0
00018780 3140 0038                  		move.w	d0,$38(a0)
00018784 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001878A 4A29 0022                  		tst.b	$22(a1)
0001878E 6A00                       		bpl.s	locret_17C66
00018790 10BC 003F                  		move.b	#$3F,0(a0)
00018794 117C 0000 0024             		move.b	#0,$24(a0)
0001879A                            
0001879A                            locret_17C66:
0001879A 4E75                       		rts	
0001879C                            ; End of function sub_17C2A
0001879C                            
0001879C                            ; ===========================================================================
0001879C                            
0001879C                            loc_17C68:				; XREF: Obj48_Index
0001879C 2268 0034                  		movea.l	$34(a0),a1
000187A0 4A29 0022                  		tst.b	$22(a1)
000187A4 6A00                       		bpl.s	Obj48_Display3
000187A6 10BC 003F                  		move.b	#$3F,0(a0)
000187AA 117C 0000 0024             		move.b	#0,$24(a0)
000187B0                            
000187B0                            Obj48_Display3:
000187B0 4EF9 0000 DD82             		jmp	DisplaySprite
000187B6                            ; ===========================================================================
000187B6                            
000187B6                            Obj48_ChkVanish:			; XREF: Obj48_Index
000187B6 7000                       		moveq	#0,d0
000187B8 4A28 001A                  		tst.b	$1A(a0)
000187BC 6600                       		bne.s	Obj48_Vanish
000187BE 5200                       		addq.b	#1,d0
000187C0                            
000187C0                            Obj48_Vanish:
000187C0 1140 001A                  		move.b	d0,$1A(a0)
000187C4 2268 0034                  		movea.l	$34(a0),a1
000187C8 4A29 0022                  		tst.b	$22(a1)
000187CC 6A00                       		bpl.s	Obj48_Display4
000187CE 117C 0000 0020             		move.b	#0,$20(a0)
000187D4 6100 FBBA                  		bsr.w	BossDefeated
000187D8 5328 003C                  		subq.b	#1,$3C(a0)
000187DC 6A00                       		bpl.s	Obj48_Display4
000187DE 10BC 003F                  		move.b	#$3F,(a0)
000187E2 117C 0000 0024             		move.b	#0,$24(a0)
000187E8                            
000187E8                            Obj48_Display4:
000187E8 4EF9 0000 DD82             		jmp	DisplaySprite
000187EE                            ; ===========================================================================
000187EE                            Ani_Eggman:
000187EE                            	include "_anim\Eggman.asm"
000187EE                            ; ---------------------------------------------------------------------------
000187EE                            ; Animation script - Eggman (bosses)
000187EE                            ; ---------------------------------------------------------------------------
000187EE 0000                       		dc.w byte_17CD4-Ani_Eggman
000187F0 0000                       		dc.w byte_17CD8-Ani_Eggman
000187F2 0000                       		dc.w byte_17CDC-Ani_Eggman
000187F4 0000                       		dc.w byte_17CE0-Ani_Eggman
000187F6 0000                       		dc.w byte_17CE4-Ani_Eggman
000187F8 0000                       		dc.w byte_17CE8-Ani_Eggman
000187FA 0000                       		dc.w byte_17CEC-Ani_Eggman
000187FC 0000                       		dc.w byte_17CF0-Ani_Eggman
000187FE 0000                       		dc.w byte_17CF4-Ani_Eggman
00018800 0000                       		dc.w byte_17CF8-Ani_Eggman
00018802 0000                       		dc.w byte_17CFC-Ani_Eggman
00018804 0000                       		dc.w byte_17D00-Ani_Eggman
00018806 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001880A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001880E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018812 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018816 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001881A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001881E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018822 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018826 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001882A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001882E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018832 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001883E                            		even
0001883E                            		even
0001883E                            
0001883E                            ; ---------------------------------------------------------------------------
0001883E                            ; Sprite mappings - Eggman (boss levels)
0001883E                            ; ---------------------------------------------------------------------------
0001883E                            Map_Eggman:
0001883E                            	include "_maps\Eggman.asm"
0001883E                            ; ---------------------------------------------------------------------------
0001883E                            ; Sprite mappings - Eggman (boss levels)
0001883E                            ; ---------------------------------------------------------------------------
0001883E 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00018842 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00018846 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0001884A 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
0001884E 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00018852 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00018856 0000                       		dc.w byte_17DC8-Map_Eggman
00018858 06                         byte_17D26:	dc.b 6
00018859 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
0001885E EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00018863 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00018868 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0001886D 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00018872 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00018877 02                         byte_17D45:	dc.b 2
00018878 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001887D EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00018882 02                         byte_17D50:	dc.b 2
00018883 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018888 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001888D 03                         byte_17D5B:	dc.b 3
0001888E E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00018893 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00018898 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0001889D 03                         byte_17D6B:	dc.b 3
0001889E E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
000188A3 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
000188A8 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
000188AD 03                         byte_17D7B:	dc.b 3
000188AE E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
000188B3 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
000188B8 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
000188BD 03                         byte_17D8B:	dc.b 3
000188BE E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
000188C3 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000188C8 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
000188CD 04                         byte_17D9B:	dc.b 4
000188CE E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
000188D3 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
000188D8 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
000188DD EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
000188E2 01                         byte_17DB0:	dc.b 1
000188E3 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
000188E8 01                         byte_17DB6:	dc.b 1
000188E9 0405 0031 22               		dc.b 4,	5, 0, $31, $22
000188EE 00                         byte_17DBC:	dc.b 0
000188EF 02                         byte_17DBD:	dc.b 2
000188F0 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
000188F5 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
000188FA 02                         byte_17DC8:	dc.b 2
000188FB F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00018900 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00018906 00                         		even
00018906 00                         		even
00018906                            
00018906                            ; ---------------------------------------------------------------------------
00018906                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018906                            ; ---------------------------------------------------------------------------
00018906                            Map_BossItems:
00018906                            	include "_maps\Boss items.asm"
00018906                            ; ---------------------------------------------------------------------------
00018906                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018906                            ; ---------------------------------------------------------------------------
00018906 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001890A 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001890E 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018912 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018916 01                         byte_17DE4:	dc.b 1
00018917 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001891C 02                         byte_17DEA:	dc.b 2
0001891D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018922 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018927 00                         		dc.b 0
00018928 01                         byte_17DF6:	dc.b 1
00018929 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001892E 01                         byte_17DFC:	dc.b 1
0001892F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018934 01                         byte_17E02:	dc.b 1
00018935 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001893A 04                         byte_17E08:	dc.b 4
0001893B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018940 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018945 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001894A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001894F 00                         		dc.b 0
00018950 02                         byte_17E1E:	dc.b 2
00018951 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018956 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001895B 00                         		dc.b 0
0001895C 02                         byte_17E2A:	dc.b 2
0001895D 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018962 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018968 00                         		even
00018968 00                         		even
00018968                            
00018968                            ; ===========================================================================
00018968                            ; ---------------------------------------------------------------------------
00018968                            ; Object 77 - Eggman (LZ)
00018968                            ; ---------------------------------------------------------------------------
00018968                            
00018968                            Obj77:					; XREF: Obj_Index
00018968 7000                       		moveq	#0,d0
0001896A 1028 0024                  		move.b	$24(a0),d0
0001896E 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018972 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018976                            ; ===========================================================================
00018976 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018978 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001897A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001897C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001897E                            
0001897E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018980 0401                       		dc.b 4,	1
00018982 0607                       		dc.b 6,	7
00018984                            ; ===========================================================================
00018984                            
00018984                            Obj77_Main:				; XREF: Obj77_Index
00018984 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001898A 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018990 3168 0008 0030             		move.w	8(a0),$30(a0)
00018996 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001899C 117C 000F 0020             		move.b	#$F,$20(a0)
000189A2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000189A8 117C 0004 0018             		move.b	#4,$18(a0)
000189AE 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
000189B2 2248                       		movea.l	a0,a1
000189B4 7202                       		moveq	#2,d1
000189B6 6000                       		bra.s	Obj77_LoadBoss
000189B8                            ; ===========================================================================
000189B8                            
000189B8                            Obj77_Loop:
000189B8 4EB9 0000 E224             		jsr	SingleObjLoad2
000189BE 6600                       		bne.s	Obj77_ShipMain
000189C0 12BC 0077                  		move.b	#$77,0(a1)
000189C4 3368 0008 0008             		move.w	8(a0),8(a1)
000189CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189D0                            
000189D0                            Obj77_LoadBoss:				; XREF: Obj77_Main
000189D0 08A8 0000 0022             		bclr	#0,$22(a0)
000189D6 4229 0025                  		clr.b	$25(a1)
000189DA 135A 0024                  		move.b	(a2)+,$24(a1)
000189DE 135A 001C                  		move.b	(a2)+,$1C(a1)
000189E2 1368 0018 0018             		move.b	$18(a0),$18(a1)
000189E8 237C 0001 883E 0004        		move.l	#Map_Eggman,4(a1)
000189F0 337C 0400 0002             		move.w	#$400,2(a1)
000189F6 137C 0004 0001             		move.b	#4,1(a1)
000189FC 137C 0020 0019             		move.b	#$20,$19(a1)
00018A02 2348 0034                  		move.l	a0,$34(a1)
00018A06 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018A0A                            
00018A0A                            Obj77_ShipMain:
00018A0A 43F8 D000                  		lea	($FFFFD000).w,a1
00018A0E 7000                       		moveq	#0,d0
00018A10 1028 0025                  		move.b	$25(a0),d0
00018A14 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018A18 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018A1C 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
00018A22 4EB9 0000 AE7A             		jsr	AnimateSprite
00018A28 7003                       		moveq	#3,d0
00018A2A C028 0022                  		and.b	$22(a0),d0
00018A2E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A34 8128 0001                  		or.b	d0,1(a0)
00018A38 4EF9 0000 DD82             		jmp	DisplaySprite
00018A3E                            ; ===========================================================================
00018A3E 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018A42 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018A46 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018A4A 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018A4E                            ; ===========================================================================
00018A4E                            
00018A4E                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018A4E 3029 0008                  		move.w	8(a1),d0
00018A52 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018A56 6500                       		bcs.s	loc_17F38
00018A58 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A5E 317C 0060 0010             		move.w	#$60,$10(a0)
00018A64 5428 0025                  		addq.b	#2,$25(a0)
00018A68                            
00018A68                            loc_17F38:
00018A68 6100 F974                  		bsr.w	BossMove
00018A6C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A72 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A78                            
00018A78                            loc_17F48:
00018A78 4A28 003D                  		tst.b	$3D(a0)
00018A7C 6600                       		bne.s	loc_17F8E
00018A7E 4A28 0022                  		tst.b	$22(a0)
00018A82 6B00                       		bmi.s	loc_17F92
00018A84 4A28 0020                  		tst.b	$20(a0)
00018A88 6600                       		bne.s	locret_17F8C
00018A8A 4A28 003E                  		tst.b	$3E(a0)
00018A8E 6600                       		bne.s	loc_17F70
00018A90 117C 0020 003E             		move.b	#$20,$3E(a0)
00018A96 303C 00AC                  		move.w	#$AC,d0
00018A9A 4EB9 0000 1262             		jsr	(PlaySound_Special).l
00018AA0                            
00018AA0                            loc_17F70:
00018AA0 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018AA4 7000                       		moveq	#0,d0
00018AA6 4A51                       		tst.w	(a1)
00018AA8 6600                       		bne.s	loc_17F7E
00018AAA 303C 0EEE                  		move.w	#$EEE,d0
00018AAE                            
00018AAE                            loc_17F7E:
00018AAE 3280                       		move.w	d0,(a1)
00018AB0 5328 003E                  		subq.b	#1,$3E(a0)
00018AB4 6600                       		bne.s	locret_17F8C
00018AB6 117C 000F 0020             		move.b	#$F,$20(a0)
00018ABC                            
00018ABC                            locret_17F8C:
00018ABC 4E75                       		rts	
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            loc_17F8E:				; XREF: loc_17F48
00018ABE 6000 F8D0                  		bra.w	BossDefeated
00018AC2                            ; ===========================================================================
00018AC2                            
00018AC2                            loc_17F92:				; XREF: loc_17F48
00018AC2 7064                       		moveq	#100,d0
00018AC4 6100 0000                  		bsr.w	AddPoints
00018AC8 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018ACE 4E75                       		rts	
00018AD0                            ; ===========================================================================
00018AD0                            
00018AD0                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018AD0 70FE                       		moveq	#-2,d0
00018AD2 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018AD8 6500                       		bcs.s	loc_17FB6
00018ADA 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00018AE0 4268 0010                  		clr.w	$10(a0)
00018AE4 5240                       		addq.w	#1,d0
00018AE6                            
00018AE6                            loc_17FB6:
00018AE6 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018AEC 6E00                       		bgt.s	loc_17FCA
00018AEE 317C 0500 0038             		move.w	#$500,$38(a0)
00018AF4 4268 0012                  		clr.w	$12(a0)
00018AF8 5240                       		addq.w	#1,d0
00018AFA                            
00018AFA                            loc_17FCA:
00018AFA 6600                       		bne.s	loc_17FDC
00018AFC 317C 0140 0010             		move.w	#$140,$10(a0)
00018B02 317C FE00 0012             		move.w	#-$200,$12(a0)
00018B08 5428 0025                  		addq.b	#2,$25(a0)
00018B0C                            
00018B0C                            loc_17FDC:
00018B0C 6000 FF5A                  		bra.w	loc_17F38
00018B10                            ; ===========================================================================
00018B10                            
00018B10                            loc_17FE0:				; XREF: Obj77_ShipIndex
00018B10 70FE                       		moveq	#-2,d0
00018B12 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018B18 6500                       		bcs.s	loc_17FF6
00018B1A 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018B20 4268 0010                  		clr.w	$10(a0)
00018B24 5240                       		addq.w	#1,d0
00018B26                            
00018B26                            loc_17FF6:
00018B26 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018B2C 6E00                       		bgt.s	loc_1800A
00018B2E 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018B34 4268 0012                  		clr.w	$12(a0)
00018B38 5240                       		addq.w	#1,d0
00018B3A                            
00018B3A                            loc_1800A:
00018B3A 6600                       		bne.s	loc_1801A
00018B3C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018B42 5428 0025                  		addq.b	#2,$25(a0)
00018B46 4228 003F                  		clr.b	$3F(a0)
00018B4A                            
00018B4A                            loc_1801A:
00018B4A 6000 FF1C                  		bra.w	loc_17F38
00018B4E                            ; ===========================================================================
00018B4E                            
00018B4E                            loc_1801E:				; XREF: Obj77_ShipIndex
00018B4E 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018B54 6E00                       		bgt.s	loc_1804E
00018B56 317C 0100 0038             		move.w	#$100,$38(a0)
00018B5C 317C 0140 0010             		move.w	#$140,$10(a0)
00018B62 317C FF80 0012             		move.w	#-$80,$12(a0)
00018B68 4A28 003D                  		tst.b	$3D(a0)
00018B6C 6700                       		beq.s	loc_18046
00018B6E E1E8 0010                  		asl	$10(a0)
00018B72 E1E8 0012                  		asl	$12(a0)
00018B76                            
00018B76                            loc_18046:
00018B76 5428 0025                  		addq.b	#2,$25(a0)
00018B7A 6000 FEEC                  		bra.w	loc_17F38
00018B7E                            ; ===========================================================================
00018B7E                            
00018B7E                            loc_1804E:
00018B7E 08E8 0000 0022             		bset	#0,$22(a0)
00018B84 5428 003F                  		addq.b	#2,$3F(a0)
00018B88 1028 003F                  		move.b	$3F(a0),d0
00018B8C 4EB9 0000 28EC             		jsr	(CalcSine).l
00018B92 4A41                       		tst.w	d1
00018B94 6A00                       		bpl.s	loc_1806C
00018B96 08A8 0000 0022             		bclr	#0,$22(a0)
00018B9C                            
00018B9C                            loc_1806C:
00018B9C E840                       		asr.w	#4,d0
00018B9E 4840                       		swap	d0
00018BA0 4240                       		clr.w	d0
00018BA2 D0A8 0030                  		add.l	$30(a0),d0
00018BA6 4840                       		swap	d0
00018BA8 3140 0008                  		move.w	d0,8(a0)
00018BAC 3028 0012                  		move.w	$12(a0),d0
00018BB0 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018BB4 9268 000C                  		sub.w	$C(a0),d1
00018BB8 6500                       		bcs.s	loc_180A2
00018BBA 0441 0048                  		subi.w	#$48,d1
00018BBE 6500                       		bcs.s	loc_180A2
00018BC0 E240                       		asr.w	#1,d0
00018BC2 0441 0028                  		subi.w	#$28,d1
00018BC6 6500                       		bcs.s	loc_180A2
00018BC8 E240                       		asr.w	#1,d0
00018BCA 0441 0028                  		subi.w	#$28,d1
00018BCE 6500                       		bcs.s	loc_180A2
00018BD0 7000                       		moveq	#0,d0
00018BD2                            
00018BD2                            loc_180A2:
00018BD2 48C0                       		ext.l	d0
00018BD4 E180                       		asl.l	#8,d0
00018BD6 4A28 003D                  		tst.b	$3D(a0)
00018BDA 6700                       		beq.s	loc_180AE
00018BDC D080                       		add.l	d0,d0
00018BDE                            
00018BDE                            loc_180AE:
00018BDE D1A8 0038                  		add.l	d0,$38(a0)
00018BE2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018BE8 6000 FE8E                  		bra.w	loc_17F48
00018BEC                            ; ===========================================================================
00018BEC                            
00018BEC                            loc_180BC:				; XREF: Obj77_ShipIndex
00018BEC 70FE                       		moveq	#-2,d0
00018BEE 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018BF4 6500                       		bcs.s	loc_180D2
00018BF6 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018BFC 4268 0010                  		clr.w	$10(a0)
00018C00 5240                       		addq.w	#1,d0
00018C02                            
00018C02                            loc_180D2:
00018C02 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018C08 6E00                       		bgt.s	loc_180E6
00018C0A 317C 00C0 0038             		move.w	#$C0,$38(a0)
00018C10 4268 0012                  		clr.w	$12(a0)
00018C14 5240                       		addq.w	#1,d0
00018C16                            
00018C16                            loc_180E6:
00018C16 6600                       		bne.s	loc_180F2
00018C18 5428 0025                  		addq.b	#2,$25(a0)
00018C1C 08A8 0000 0022             		bclr	#0,$22(a0)
00018C22                            
00018C22                            loc_180F2:
00018C22 6000 FE44                  		bra.w	loc_17F38
00018C26                            ; ===========================================================================
00018C26                            
00018C26                            loc_180F6:				; XREF: Obj77_ShipIndex
00018C26 4A28 003D                  		tst.b	$3D(a0)
00018C2A 6600                       		bne.s	loc_18112
00018C2C 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018C32 6D00                       		blt.s	loc_18126
00018C34 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018C3A 6E00                       		bgt.s	loc_18126
00018C3C 117C 0032 003C             		move.b	#$32,$3C(a0)
00018C42                            
00018C42                            loc_18112:
00018C42 303C 0082                  		move.w	#$82,d0
00018C46 4EB9 0000 125C             		jsr	(PlaySound).l	; play LZ music
00018C4C 08E8 0000 0022             		bset	#0,$22(a0)
00018C52 5428 0025                  		addq.b	#2,$25(a0)
00018C56                            
00018C56                            loc_18126:
00018C56 6000 FE10                  		bra.w	loc_17F38
00018C5A                            ; ===========================================================================
00018C5A                            
00018C5A                            loc_1812A:				; XREF: Obj77_ShipIndex
00018C5A 4A28 003D                  		tst.b	$3D(a0)
00018C5E 6600                       		bne.s	loc_18136
00018C60 5328 003C                  		subq.b	#1,$3C(a0)
00018C64 6600                       		bne.s	loc_1814E
00018C66                            
00018C66                            loc_18136:
00018C66 4228 003C                  		clr.b	$3C(a0)
00018C6A 317C 0400 0010             		move.w	#$400,$10(a0)
00018C70 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C76 4228 003D                  		clr.b	$3D(a0)
00018C7A 5428 0025                  		addq.b	#2,$25(a0)
00018C7E                            
00018C7E                            loc_1814E:
00018C7E 6000 FDE8                  		bra.w	loc_17F38
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            loc_18152:				; XREF: Obj77_ShipIndex
00018C82 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018C88 6400                       		bcc.s	loc_18160
00018C8A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C8E 6000                       		bra.s	loc_18166
00018C90                            ; ===========================================================================
00018C90                            
00018C90                            loc_18160:
00018C90 4A28 0001                  		tst.b	1(a0)
00018C94 6A00                       		bpl.s	Obj77_ShipDel
00018C96                            
00018C96                            loc_18166:
00018C96 6000 FDD0                  		bra.w	loc_17F38
00018C9A                            ; ===========================================================================
00018C9A                            
00018C9A                            Obj77_ShipDel:
00018C9A 4EF9 0000 DDBE             		jmp	DeleteObject
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            Obj77_FaceMain:				; XREF: Obj77_Index
00018CA0 2268 0034                  		movea.l	$34(a0),a1
00018CA4 1011                       		move.b	(a1),d0
00018CA6 B010                       		cmp.b	(a0),d0
00018CA8 6600                       		bne.s	Obj77_FaceDel
00018CAA 7000                       		moveq	#0,d0
00018CAC 1029 0025                  		move.b	$25(a1),d0
00018CB0 7201                       		moveq	#1,d1
00018CB2 4A28 003D                  		tst.b	$3D(a0)
00018CB6 6700                       		beq.s	loc_1818C
00018CB8 720A                       		moveq	#$A,d1
00018CBA 6000                       		bra.s	loc_181A0
00018CBC                            ; ===========================================================================
00018CBC                            
00018CBC                            loc_1818C:
00018CBC 4A29 0020                  		tst.b	$20(a1)
00018CC0 6600                       		bne.s	loc_18196
00018CC2 7205                       		moveq	#5,d1
00018CC4 6000                       		bra.s	loc_181A0
00018CC6                            ; ===========================================================================
00018CC6                            
00018CC6                            loc_18196:
00018CC6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018CCC 6500                       		bcs.s	loc_181A0
00018CCE 7204                       		moveq	#4,d1
00018CD0                            
00018CD0                            loc_181A0:
00018CD0 1141 001C                  		move.b	d1,$1C(a0)
00018CD4 0C00 000E                  		cmpi.b	#$E,d0
00018CD8 6600                       		bne.s	loc_181B6
00018CDA 117C 0006 001C             		move.b	#6,$1C(a0)
00018CE0 4A28 0001                  		tst.b	1(a0)
00018CE4 6A00                       		bpl.s	Obj77_FaceDel
00018CE6                            
00018CE6                            loc_181B6:
00018CE6 6000                       		bra.s	Obj77_Display
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            Obj77_FaceDel:
00018CE8 4EF9 0000 DDBE             		jmp	DeleteObject
00018CEE                            ; ===========================================================================
00018CEE                            
00018CEE                            Obj77_FlameMain:			; XREF: Obj77_Index
00018CEE 117C 0007 001C             		move.b	#7,$1C(a0)
00018CF4 2268 0034                  		movea.l	$34(a0),a1
00018CF8 1011                       		move.b	(a1),d0
00018CFA B010                       		cmp.b	(a0),d0
00018CFC 6600                       		bne.s	Obj77_FlameDel
00018CFE 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018D04 6600                       		bne.s	loc_181F0
00018D06 117C 000B 001C             		move.b	#$B,$1C(a0)
00018D0C 4A28 0001                  		tst.b	1(a0)
00018D10 6A00                       		bpl.s	Obj77_FlameDel
00018D12 6000                       		bra.s	loc_181F0
00018D14                            ; ===========================================================================
00018D14 4A69 0010                  		tst.w	$10(a1)
00018D18 6700                       		beq.s	loc_181F0
00018D1A 117C 0008 001C             		move.b	#8,$1C(a0)
00018D20                            
00018D20                            loc_181F0:
00018D20 6000                       		bra.s	Obj77_Display
00018D22                            ; ===========================================================================
00018D22                            
00018D22                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018D22 4EF9 0000 DDBE             		jmp	DeleteObject
00018D28                            ; ===========================================================================
00018D28                            
00018D28                            Obj77_Display:
00018D28 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
00018D2E 4EB9 0000 AE7A             		jsr	AnimateSprite
00018D34 2268 0034                  		movea.l	$34(a0),a1
00018D38 3169 0008 0008             		move.w	8(a1),8(a0)
00018D3E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018D44 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018D4A 7003                       		moveq	#3,d0
00018D4C C028 0022                  		and.b	$22(a0),d0
00018D50 0228 00FC 0001             		andi.b	#-4,1(a0)
00018D56 8128 0001                  		or.b	d0,1(a0)
00018D5A 4EF9 0000 DD82             		jmp	DisplaySprite
00018D60                            ; ===========================================================================
00018D60                            ; ---------------------------------------------------------------------------
00018D60                            ; Object 73 - Eggman (MZ)
00018D60                            ; ---------------------------------------------------------------------------
00018D60                            
00018D60                            Obj73:					; XREF: Obj_Index
00018D60 7000                       		moveq	#0,d0
00018D62 1028 0024                  		move.b	$24(a0),d0
00018D66 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D6A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D6E                            ; ===========================================================================
00018D6E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D70 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D72 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D74 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D76 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D78                            
00018D78 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D7B 0401 04                    		dc.b 4,	1, 4
00018D7E 0607 04                    		dc.b 6,	7, 4
00018D81 0800 03                    		dc.b 8,	0, 3
00018D84                            ; ===========================================================================
00018D84                            
00018D84                            Obj73_Main:				; XREF: Obj73_Index
00018D84 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D8A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D90 117C 000F 0020             		move.b	#$F,$20(a0)
00018D96 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D9C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018DA0 2248                       		movea.l	a0,a1
00018DA2 7203                       		moveq	#3,d1
00018DA4 6000                       		bra.s	Obj73_LoadBoss
00018DA6                            ; ===========================================================================
00018DA6                            
00018DA6                            Obj73_Loop:
00018DA6 4EB9 0000 E224             		jsr	SingleObjLoad2
00018DAC 6600                       		bne.s	Obj73_ShipMain
00018DAE 12BC 0073                  		move.b	#$73,0(a1)
00018DB2 3368 0008 0008             		move.w	8(a0),8(a1)
00018DB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DBE                            
00018DBE                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018DBE 08A8 0000 0022             		bclr	#0,$22(a0)
00018DC4 4229 0025                  		clr.b	$25(a1)
00018DC8 135A 0024                  		move.b	(a2)+,$24(a1)
00018DCC 135A 001C                  		move.b	(a2)+,$1C(a1)
00018DD0 135A 0018                  		move.b	(a2)+,$18(a1)
00018DD4 237C 0001 883E 0004        		move.l	#Map_Eggman,4(a1)
00018DDC 337C 0400 0002             		move.w	#$400,2(a1)
00018DE2 137C 0004 0001             		move.b	#4,1(a1)
00018DE8 137C 0020 0019             		move.b	#$20,$19(a1)
00018DEE 2348 0034                  		move.l	a0,$34(a1)
00018DF2 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DF6                            
00018DF6                            Obj73_ShipMain:
00018DF6 7000                       		moveq	#0,d0
00018DF8 1028 0025                  		move.b	$25(a0),d0
00018DFC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018E00 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018E04 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
00018E0A 4EB9 0000 AE7A             		jsr	AnimateSprite
00018E10 7003                       		moveq	#3,d0
00018E12 C028 0022                  		and.b	$22(a0),d0
00018E16 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E1C 8128 0001                  		or.b	d0,1(a0)
00018E20 4EF9 0000 DD82             		jmp	DisplaySprite
00018E26                            ; ===========================================================================
00018E26 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018E28 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018E2A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018E2C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018E2E 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018E30                            ; ===========================================================================
00018E30                            
00018E30                            loc_18302:				; XREF: Obj73_ShipIndex
00018E30 1028 003F                  		move.b	$3F(a0),d0
00018E34 5428 003F                  		addq.b	#2,$3F(a0)
00018E38 4EB9 0000 28EC             		jsr	(CalcSine).l
00018E3E E440                       		asr.w	#2,d0
00018E40 3140 0012                  		move.w	d0,$12(a0)
00018E44 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E4A 6100 F592                  		bsr.w	BossMove
00018E4E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E54 6600                       		bne.s	loc_18334
00018E56 5428 0025                  		addq.b	#2,$25(a0)
00018E5A 4228 0028                  		clr.b	$28(a0)
00018E5E 42A8 0010                  		clr.l	$10(a0)
00018E62                            
00018E62                            loc_18334:
00018E62 4EB9 0000 28C6             		jsr	(RandomNumber).l
00018E68 1140 0034                  		move.b	d0,$34(a0)
00018E6C                            
00018E6C                            loc_1833E:
00018E6C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E72 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E78 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E7E 6400                       		bcc.s	locret_18390
00018E80 4A28 0022                  		tst.b	$22(a0)
00018E84 6B00                       		bmi.s	loc_18392
00018E86 4A28 0020                  		tst.b	$20(a0)
00018E8A 6600                       		bne.s	locret_18390
00018E8C 4A28 003E                  		tst.b	$3E(a0)
00018E90 6600                       		bne.s	loc_18374
00018E92 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E98 303C 00AC                  		move.w	#$AC,d0
00018E9C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018EA2                            
00018EA2                            loc_18374:
00018EA2 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018EA6 7000                       		moveq	#0,d0
00018EA8 4A51                       		tst.w	(a1)
00018EAA 6600                       		bne.s	loc_18382
00018EAC 303C 0EEE                  		move.w	#$EEE,d0
00018EB0                            
00018EB0                            loc_18382:
00018EB0 3280                       		move.w	d0,(a1)
00018EB2 5328 003E                  		subq.b	#1,$3E(a0)
00018EB6 6600                       		bne.s	locret_18390
00018EB8 117C 000F 0020             		move.b	#$F,$20(a0)
00018EBE                            
00018EBE                            locret_18390:
00018EBE 4E75                       		rts	
00018EC0                            ; ===========================================================================
00018EC0                            
00018EC0                            loc_18392:				; XREF: loc_1833E
00018EC0 7064                       		moveq	#100,d0
00018EC2 6100 0000                  		bsr.w	AddPoints
00018EC6 117C 0004 0025             		move.b	#4,$25(a0)
00018ECC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018ED2 4268 0010                  		clr.w	$10(a0)
00018ED6 4E75                       		rts	
00018ED8                            ; ===========================================================================
00018ED8                            
00018ED8                            loc_183AA:				; XREF: Obj73_ShipIndex
00018ED8 7000                       		moveq	#0,d0
00018EDA 1028 0028                  		move.b	$28(a0),d0
00018EDE 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018EE2 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018EE6 0228 0006 0028             		andi.b	#6,$28(a0)
00018EEC 6000 FF7E                  		bra.w	loc_1833E
00018EF0                            ; ===========================================================================
00018EF0 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EF2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EF4 0000                       		dc.w loc_183CA-off_183C2
00018EF6 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EF8                            ; ===========================================================================
00018EF8                            
00018EF8                            loc_183CA:				; XREF: off_183C2
00018EF8 4A68 0010                  		tst.w	$10(a0)
00018EFC 6600                       		bne.s	loc_183FE
00018EFE 7040                       		moveq	#$40,d0
00018F00 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018F06 6700                       		beq.s	loc_183E6
00018F08 6500                       		bcs.s	loc_183DE
00018F0A 4440                       		neg.w	d0
00018F0C                            
00018F0C                            loc_183DE:
00018F0C 3140 0012                  		move.w	d0,$12(a0)
00018F10 6000 F4CC                  		bra.w	BossMove
00018F14                            ; ===========================================================================
00018F14                            
00018F14                            loc_183E6:
00018F14 317C 0200 0010             		move.w	#$200,$10(a0)
00018F1A 317C 0100 0012             		move.w	#$100,$12(a0)
00018F20 0828 0000 0022             		btst	#0,$22(a0)
00018F26 6600                       		bne.s	loc_183FE
00018F28 4468 0010                  		neg.w	$10(a0)
00018F2C                            
00018F2C                            loc_183FE:
00018F2C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018F32 6400                       		bcc.s	Obj73_MakeLava
00018F34 6100 F4A8                  		bsr.w	BossMove
00018F38 5968 0012                  		subq.w	#4,$12(a0)
00018F3C                            
00018F3C                            Obj73_MakeLava:
00018F3C 5328 0034                  		subq.b	#1,$34(a0)
00018F40 6400                       		bcc.s	loc_1845C
00018F42 4EB9 0000 E20E             		jsr	SingleObjLoad
00018F48 6600                       		bne.s	loc_1844A
00018F4A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F4E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F54 4EB9 0000 28C6             		jsr	(RandomNumber).l
00018F5A 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F60 80FC 0050                  		divu.w	#$50,d0
00018F64 4840                       		swap	d0
00018F66 0640 1878                  		addi.w	#$1878,d0
00018F6A 3340 0008                  		move.w	d0,8(a1)
00018F6E EE09                       		lsr.b	#7,d1
00018F70 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F76                            
00018F76                            loc_1844A:
00018F76 4EB9 0000 28C6             		jsr	(RandomNumber).l
00018F7C 0200 001F                  		andi.b	#$1F,d0
00018F80 0600 0040                  		addi.b	#$40,d0
00018F84 1140 0034                  		move.b	d0,$34(a0)
00018F88                            
00018F88                            loc_1845C:
00018F88 0828 0000 0022             		btst	#0,$22(a0)
00018F8E 6700                       		beq.s	loc_18474
00018F90 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F96 6D00                       		blt.s	locret_1849C
00018F98 317C 1910 0030             		move.w	#$1910,$30(a0)
00018F9E 6000                       		bra.s	loc_18482
00018FA0                            ; ===========================================================================
00018FA0                            
00018FA0                            loc_18474:
00018FA0 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018FA6 6E00                       		bgt.s	locret_1849C
00018FA8 317C 1830 0030             		move.w	#$1830,$30(a0)
00018FAE                            
00018FAE                            loc_18482:
00018FAE 4268 0010                  		clr.w	$10(a0)
00018FB2 317C FE80 0012             		move.w	#-$180,$12(a0)
00018FB8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018FBE 6400                       		bcc.s	loc_18498
00018FC0 4468 0012                  		neg.w	$12(a0)
00018FC4                            
00018FC4                            loc_18498:
00018FC4 5428 0028                  		addq.b	#2,$28(a0)
00018FC8                            
00018FC8                            locret_1849C:
00018FC8 4E75                       		rts	
00018FCA                            ; ===========================================================================
00018FCA                            
00018FCA                            Obj73_MakeLava2:			; XREF: off_183C2
00018FCA 6100 F412                  		bsr.w	BossMove
00018FCE 3028 0038                  		move.w	$38(a0),d0
00018FD2 0440 022C                  		subi.w	#$22C,d0
00018FD6 6E00                       		bgt.s	locret_184F4
00018FD8 303C 022C                  		move.w	#$22C,d0
00018FDC 4A68 0012                  		tst.w	$12(a0)
00018FE0 6700                       		beq.s	loc_184EA
00018FE2 4268 0012                  		clr.w	$12(a0)
00018FE6 317C 0050 003C             		move.w	#$50,$3C(a0)
00018FEC 0868 0000 0022             		bchg	#0,$22(a0)
00018FF2 4EB9 0000 E20E             		jsr	SingleObjLoad
00018FF8 6600                       		bne.s	loc_184EA
00018FFA 3368 0030 0008             		move.w	$30(a0),8(a1)
00019000 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019006 0669 0018 000C             		addi.w	#$18,$C(a1)
0001900C 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019010 137C 0001 0028             		move.b	#1,$28(a1)
00019016                            
00019016                            loc_184EA:
00019016 5368 003C                  		subq.w	#1,$3C(a0)
0001901A 6600                       		bne.s	locret_184F4
0001901C 5428 0028                  		addq.b	#2,$28(a0)
00019020                            
00019020                            locret_184F4:
00019020 4E75                       		rts	
00019022                            ; ===========================================================================
00019022                            
00019022                            loc_184F6:				; XREF: Obj73_ShipIndex
00019022 5368 003C                  		subq.w	#1,$3C(a0)
00019026 6B00                       		bmi.s	loc_18500
00019028 6000 F366                  		bra.w	BossDefeated
0001902C                            ; ===========================================================================
0001902C                            
0001902C                            loc_18500:
0001902C 08E8 0000 0022             		bset	#0,$22(a0)
00019032 08A8 0007 0022             		bclr	#7,$22(a0)
00019038 4268 0010                  		clr.w	$10(a0)
0001903C 5428 0025                  		addq.b	#2,$25(a0)
00019040 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019046 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001904A 6600                       		bne.s	locret_1852A
0001904C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019052 4268 0012                  		clr.w	$12(a0)
00019056                            
00019056                            locret_1852A:
00019056 4E75                       		rts	
00019058                            ; ===========================================================================
00019058                            
00019058                            loc_1852C:				; XREF: Obj73_ShipIndex
00019058 5268 003C                  		addq.w	#1,$3C(a0)
0001905C 6700                       		beq.s	loc_18544
0001905E 6A00                       		bpl.s	loc_1854E
00019060 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019066 6400                       		bcc.s	loc_18544
00019068 0668 0018 0012             		addi.w	#$18,$12(a0)
0001906E 6000                       		bra.s	loc_1857A
00019070                            ; ===========================================================================
00019070                            
00019070                            loc_18544:
00019070 4268 0012                  		clr.w	$12(a0)
00019074 4268 003C                  		clr.w	$3C(a0)
00019078 6000                       		bra.s	loc_1857A
0001907A                            ; ===========================================================================
0001907A                            
0001907A                            loc_1854E:
0001907A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019080 6500                       		bcs.s	loc_18566
00019082 6700                       		beq.s	loc_1856C
00019084 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001908A 6500                       		bcs.s	loc_1857A
0001908C 5428 0025                  		addq.b	#2,$25(a0)
00019090 6000                       		bra.s	loc_1857A
00019092                            ; ===========================================================================
00019092                            
00019092                            loc_18566:
00019092 5168 0012                  		subq.w	#8,$12(a0)
00019096 6000                       		bra.s	loc_1857A
00019098                            ; ===========================================================================
00019098                            
00019098                            loc_1856C:
00019098 4268 0012                  		clr.w	$12(a0)
0001909C 303C 0083                  		move.w	#$83,d0
000190A0 4EB9 0000 125C             		jsr	(PlaySound).l	; play MZ music
000190A6                            
000190A6                            loc_1857A:
000190A6 6100 F336                  		bsr.w	BossMove
000190AA 6000 FDC0                  		bra.w	loc_1833E
000190AE                            ; ===========================================================================
000190AE                            
000190AE                            loc_18582:				; XREF: Obj73_ShipIndex
000190AE 317C 0500 0010             		move.w	#$500,$10(a0)
000190B4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000190BA 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000190C0 6400                       		bcc.s	loc_1859C
000190C2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000190C6 6000                       		bra.s	loc_185A2
000190C8                            ; ===========================================================================
000190C8                            
000190C8                            loc_1859C:
000190C8 4A28 0001                  		tst.b	1(a0)
000190CC 6A00                       		bpl.s	Obj73_ShipDel
000190CE                            
000190CE                            loc_185A2:
000190CE 6100 F30E                  		bsr.w	BossMove
000190D2 6000 FD98                  		bra.w	loc_1833E
000190D6                            ; ===========================================================================
000190D6                            
000190D6                            Obj73_ShipDel:
000190D6 4EF9 0000 DDBE             		jmp	DeleteObject
000190DC                            ; ===========================================================================
000190DC                            
000190DC                            Obj73_FaceMain:				; XREF: Obj73_Index
000190DC 7000                       		moveq	#0,d0
000190DE 7201                       		moveq	#1,d1
000190E0 2268 0034                  		movea.l	$34(a0),a1
000190E4 1029 0025                  		move.b	$25(a1),d0
000190E8 5540                       		subq.w	#2,d0
000190EA 6600                       		bne.s	loc_185D2
000190EC 0829 0001 0028             		btst	#1,$28(a1)
000190F2 6700                       		beq.s	loc_185DA
000190F4 4A69 0012                  		tst.w	$12(a1)
000190F8 6600                       		bne.s	loc_185DA
000190FA 7204                       		moveq	#4,d1
000190FC 6000                       		bra.s	loc_185EE
000190FE                            ; ===========================================================================
000190FE                            
000190FE                            loc_185D2:
000190FE 5500                       		subq.b	#2,d0
00019100 6B00                       		bmi.s	loc_185DA
00019102 720A                       		moveq	#$A,d1
00019104 6000                       		bra.s	loc_185EE
00019106                            ; ===========================================================================
00019106                            
00019106                            loc_185DA:
00019106 4A29 0020                  		tst.b	$20(a1)
0001910A 6600                       		bne.s	loc_185E4
0001910C 7205                       		moveq	#5,d1
0001910E 6000                       		bra.s	loc_185EE
00019110                            ; ===========================================================================
00019110                            
00019110                            loc_185E4:
00019110 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019116 6500                       		bcs.s	loc_185EE
00019118 7204                       		moveq	#4,d1
0001911A                            
0001911A                            loc_185EE:
0001911A 1141 001C                  		move.b	d1,$1C(a0)
0001911E 5900                       		subq.b	#4,d0
00019120 6600                       		bne.s	loc_18602
00019122 117C 0006 001C             		move.b	#6,$1C(a0)
00019128 4A28 0001                  		tst.b	1(a0)
0001912C 6A00                       		bpl.s	Obj73_FaceDel
0001912E                            
0001912E                            loc_18602:
0001912E 6000                       		bra.s	Obj73_Display
00019130                            ; ===========================================================================
00019130                            
00019130                            Obj73_FaceDel:
00019130 4EF9 0000 DDBE             		jmp	DeleteObject
00019136                            ; ===========================================================================
00019136                            
00019136                            Obj73_FlameMain:			; XREF: Obj73_Index
00019136 117C 0007 001C             		move.b	#7,$1C(a0)
0001913C 2268 0034                  		movea.l	$34(a0),a1
00019140 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019146 6D00                       		blt.s	loc_1862A
00019148 117C 000B 001C             		move.b	#$B,$1C(a0)
0001914E 4A28 0001                  		tst.b	1(a0)
00019152 6A00                       		bpl.s	Obj73_FlameDel
00019154 6000                       		bra.s	loc_18636
00019156                            ; ===========================================================================
00019156                            
00019156                            loc_1862A:
00019156 4A69 0010                  		tst.w	$10(a1)
0001915A 6700                       		beq.s	loc_18636
0001915C 117C 0008 001C             		move.b	#8,$1C(a0)
00019162                            
00019162                            loc_18636:
00019162 6000                       		bra.s	Obj73_Display
00019164                            ; ===========================================================================
00019164                            
00019164                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019164 4EF9 0000 DDBE             		jmp	DeleteObject
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            Obj73_Display:
0001916A 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
00019170 4EB9 0000 AE7A             		jsr	AnimateSprite
00019176                            
00019176                            loc_1864A:
00019176 2268 0034                  		movea.l	$34(a0),a1
0001917A 3169 0008 0008             		move.w	8(a1),8(a0)
00019180 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019186 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001918C 7003                       		moveq	#3,d0
0001918E C028 0022                  		and.b	$22(a0),d0
00019192 0228 00FC 0001             		andi.b	#-4,1(a0)
00019198 8128 0001                  		or.b	d0,1(a0)
0001919C 4EF9 0000 DD82             		jmp	DisplaySprite
000191A2                            ; ===========================================================================
000191A2                            
000191A2                            Obj73_TubeMain:				; XREF: Obj73_Index
000191A2 2268 0034                  		movea.l	$34(a0),a1
000191A6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000191AC 6600                       		bne.s	loc_18688
000191AE 4A28 0001                  		tst.b	1(a0)
000191B2 6A00                       		bpl.s	Obj73_TubeDel
000191B4                            
000191B4                            loc_18688:
000191B4 217C 0001 8906 0004        		move.l	#Map_BossItems,4(a0)
000191BC 317C 246C 0002             		move.w	#$246C,2(a0)
000191C2 117C 0004 001A             		move.b	#4,$1A(a0)
000191C8 60AC                       		bra.s	loc_1864A
000191CA                            ; ===========================================================================
000191CA                            
000191CA                            Obj73_TubeDel:
000191CA 4EF9 0000 DDBE             		jmp	DeleteObject
000191D0                            ; ===========================================================================
000191D0                            ; ---------------------------------------------------------------------------
000191D0                            ; Object 74 - lava that	Eggman drops (MZ)
000191D0                            ; ---------------------------------------------------------------------------
000191D0                            
000191D0                            Obj74:					; XREF: Obj_Index
000191D0 7000                       		moveq	#0,d0
000191D2 1028 0024                  		move.b	$24(a0),d0
000191D6 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000191DA 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000191DE 4EF9 0000 DD82             		jmp	DisplaySprite
000191E4                            ; ===========================================================================
000191E4 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000191E6 0000                       		dc.w Obj74_Action-Obj74_Index
000191E8 0000                       		dc.w loc_18886-Obj74_Index
000191EA 0000                       		dc.w Obj74_Delete3-Obj74_Index
000191EC                            ; ===========================================================================
000191EC                            
000191EC                            Obj74_Main:				; XREF: Obj74_Index
000191EC 117C 0008 0016             		move.b	#8,$16(a0)
000191F2 117C 0008 0017             		move.b	#8,$17(a0)
000191F8 217C 0000 BACC 0004        		move.l	#Map_obj14,4(a0)
00019200 317C 0345 0002             		move.w	#$345,2(a0)
00019206 117C 0004 0001             		move.b	#4,1(a0)
0001920C 117C 0005 0018             		move.b	#5,$18(a0)
00019212 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019218 117C 0008 0019             		move.b	#8,$19(a0)
0001921E 5428 0024                  		addq.b	#2,$24(a0)
00019222 4A28 0028                  		tst.b	$28(a0)
00019226 6600                       		bne.s	loc_1870A
00019228 117C 008B 0020             		move.b	#$8B,$20(a0)
0001922E 5428 0024                  		addq.b	#2,$24(a0)
00019232 6000 0000                  		bra.w	loc_18886
00019236                            ; ===========================================================================
00019236                            
00019236                            loc_1870A:
00019236 117C 001E 0029             		move.b	#$1E,$29(a0)
0001923C 303C 00AE                  		move.w	#$AE,d0
00019240 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lava sound
00019246                            
00019246                            Obj74_Action:				; XREF: Obj74_Index
00019246 7000                       		moveq	#0,d0
00019248 1028 0025                  		move.b	$25(a0),d0
0001924C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019250 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019254 4EB9 0000 DD5C             		jsr	SpeedToPos
0001925A 43F9 0000 EC42             		lea	(Ani_obj14).l,a1
00019260 4EB9 0000 AE7A             		jsr	AnimateSprite
00019266 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001926C 6200                       		bhi.s	Obj74_Delete
0001926E 4E75                       		rts	
00019270                            ; ===========================================================================
00019270                            
00019270                            Obj74_Delete:
00019270 4EF9 0000 DDBE             		jmp	DeleteObject
00019276                            ; ===========================================================================
00019276 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019278 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001927A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001927C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001927E                            ; ===========================================================================
0001927E                            
0001927E                            Obj74_Drop:				; XREF: Obj74_Index2
0001927E 08E8 0001 0022             		bset	#1,$22(a0)
00019284 5328 0029                  		subq.b	#1,$29(a0)
00019288 6A00                       		bpl.s	locret_18780
0001928A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019290 4228 0028                  		clr.b	$28(a0)
00019294 0668 0018 0012             		addi.w	#$18,$12(a0)
0001929A 08A8 0001 0022             		bclr	#1,$22(a0)
000192A0 6100 C6BA                  		bsr.w	ObjHitFloor
000192A4 4A41                       		tst.w	d1
000192A6 6A00                       		bpl.s	locret_18780
000192A8 5428 0025                  		addq.b	#2,$25(a0)
000192AC                            
000192AC                            locret_18780:
000192AC 4E75                       		rts	
000192AE                            ; ===========================================================================
000192AE                            
000192AE                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000192AE 5568 000C                  		subq.w	#2,$C(a0)
000192B2 08E8 0007 0002             		bset	#7,2(a0)
000192B8 317C 00A0 0010             		move.w	#$A0,$10(a0)
000192BE 4268 0012                  		clr.w	$12(a0)
000192C2 3168 0008 0030             		move.w	8(a0),$30(a0)
000192C8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192CE 117C 0003 0029             		move.b	#3,$29(a0)
000192D4 4EB9 0000 E224             		jsr	SingleObjLoad2
000192DA 6600                       		bne.s	loc_187CA
000192DC 47D1                       		lea	(a1),a3
000192DE 45D0                       		lea	(a0),a2
000192E0 7003                       		moveq	#3,d0
000192E2                            
000192E2                            Obj74_Loop:
000192E2 26DA                       		move.l	(a2)+,(a3)+
000192E4 26DA                       		move.l	(a2)+,(a3)+
000192E6 26DA                       		move.l	(a2)+,(a3)+
000192E8 26DA                       		move.l	(a2)+,(a3)+
000192EA 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192EE                            
000192EE 4469 0010                  		neg.w	$10(a1)
000192F2 5429 0025                  		addq.b	#2,$25(a1)
000192F6                            
000192F6                            loc_187CA:
000192F6 5428 0025                  		addq.b	#2,$25(a0)
000192FA 4E75                       		rts	
000192FC                            
000192FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000192FC                            
000192FC                            
000192FC                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000192FC 4EB9 0000 E224             		jsr	SingleObjLoad2
00019302 6600                       		bne.s	locret_187EE
00019304 3368 0008 0008             		move.w	8(a0),8(a1)
0001930A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019310 12BC 0074                  		move.b	#$74,(a1)
00019314 337C 0067 0028             		move.w	#$67,$28(a1)
0001931A                            
0001931A                            locret_187EE:
0001931A 4E75                       		rts	
0001931C                            ; End of function Obj74_Duplicate2
0001931C                            
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001931C 6100 C63E                  		bsr.w	ObjHitFloor
00019320 4A41                       		tst.w	d1
00019322 6A00                       		bpl.s	loc_18826
00019324 3028 0008                  		move.w	8(a0),d0
00019328 0C40 1940                  		cmpi.w	#$1940,d0
0001932C 6E00                       		bgt.s	loc_1882C
0001932E 3228 0030                  		move.w	$30(a0),d1
00019332 B240                       		cmp.w	d0,d1
00019334 6700                       		beq.s	loc_1881E
00019336 0240 0010                  		andi.w	#$10,d0
0001933A 0241 0010                  		andi.w	#$10,d1
0001933E B240                       		cmp.w	d0,d1
00019340 6700                       		beq.s	loc_1881E
00019342 61B8                       		bsr.s	Obj74_Duplicate2
00019344 3168 0008 0032             		move.w	8(a0),$32(a0)
0001934A                            
0001934A                            loc_1881E:
0001934A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019350 4E75                       		rts	
00019352                            ; ===========================================================================
00019352                            
00019352                            loc_18826:
00019352 5428 0025                  		addq.b	#2,$25(a0)
00019356 4E75                       		rts	
00019358                            ; ===========================================================================
00019358                            
00019358                            loc_1882C:
00019358 5428 0024                  		addq.b	#2,$24(a0)
0001935C 4E75                       		rts	
0001935E                            ; ===========================================================================
0001935E                            
0001935E                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001935E 08A8 0001 0022             		bclr	#1,$22(a0)
00019364 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001936A 3028 0008                  		move.w	8(a0),d0
0001936E 9068 0032                  		sub.w	$32(a0),d0
00019372 6A00                       		bpl.s	loc_1884A
00019374 4440                       		neg.w	d0
00019376                            
00019376                            loc_1884A:
00019376 0C40 0012                  		cmpi.w	#$12,d0
0001937A 6600                       		bne.s	loc_18856
0001937C 08A8 0007 0002             		bclr	#7,2(a0)
00019382                            
00019382                            loc_18856:
00019382 6100 C5D8                  		bsr.w	ObjHitFloor
00019386 4A41                       		tst.w	d1
00019388 6A00                       		bpl.s	locret_1887E
0001938A 5328 0029                  		subq.b	#1,$29(a0)
0001938E 6700                       		beq.s	Obj74_Delete2
00019390 4268 0012                  		clr.w	$12(a0)
00019394 3168 0032 0008             		move.w	$32(a0),8(a0)
0001939A 3168 0038 000C             		move.w	$38(a0),$C(a0)
000193A0 08E8 0007 0002             		bset	#7,2(a0)
000193A6 5528 0025                  		subq.b	#2,$25(a0)
000193AA                            
000193AA                            locret_1887E:
000193AA 4E75                       		rts	
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            Obj74_Delete2:
000193AC 4EF9 0000 DDBE             		jmp	DeleteObject
000193B2                            ; ===========================================================================
000193B2                            
000193B2                            loc_18886:				; XREF: Obj74_Index
000193B2 08E8 0007 0002             		bset	#7,2(a0)
000193B8 5328 0029                  		subq.b	#1,$29(a0)
000193BC 6600                       		bne.s	Obj74_Animate
000193BE 117C 0001 001C             		move.b	#1,$1C(a0)
000193C4 5968 000C                  		subq.w	#4,$C(a0)
000193C8 4228 0020                  		clr.b	$20(a0)
000193CC                            
000193CC                            Obj74_Animate:
000193CC 43F9 0000 EC42             		lea	(Ani_obj14).l,a1
000193D2 4EF9 0000 AE7A             		jmp	AnimateSprite
000193D8                            ; ===========================================================================
000193D8                            
000193D8                            Obj74_Delete3:				; XREF: Obj74_Index
000193D8 4EF9 0000 DDBE             		jmp	DeleteObject
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            Obj7A_Delete:
000193DE 4EF9 0000 DDBE             		jmp	DeleteObject
000193E4                            ; ===========================================================================
000193E4                            ; ---------------------------------------------------------------------------
000193E4                            ; Object 7A - Eggman (SLZ)
000193E4                            ; ---------------------------------------------------------------------------
000193E4                            
000193E4                            Obj7A:					; XREF: Obj_Index
000193E4 7000                       		moveq	#0,d0
000193E6 1028 0024                  		move.b	$24(a0),d0
000193EA 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193EE 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193F2                            ; ===========================================================================
000193F2 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193F4 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193F6 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193F8 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000193FA 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000193FC                            
000193FC 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000193FF 0401 04                    		dc.b 4,	1, 4
00019402 0607 04                    		dc.b 6,	7, 4
00019405 0800 03                    		dc.b 8,	0, 3
00019408                            ; ===========================================================================
00019408                            
00019408                            Obj7A_Main:				; XREF: Obj7A_Index
00019408 317C 2188 0008             		move.w	#$2188,8(a0)
0001940E 317C 0228 000C             		move.w	#$228,$C(a0)
00019414 3168 0008 0030             		move.w	8(a0),$30(a0)
0001941A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019420 117C 000F 0020             		move.b	#$F,$20(a0)
00019426 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001942C 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019430 2248                       		movea.l	a0,a1
00019432 7203                       		moveq	#3,d1
00019434 6000                       		bra.s	Obj7A_LoadBoss
00019436                            ; ===========================================================================
00019436                            
00019436                            Obj7A_Loop:
00019436 4EB9 0000 E224             		jsr	SingleObjLoad2
0001943C 6600                       		bne.s	loc_1895C
0001943E 12BC 007A                  		move.b	#$7A,0(a1)
00019442 3368 0008 0008             		move.w	8(a0),8(a1)
00019448 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001944E                            
0001944E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001944E 08A8 0000 0022             		bclr	#0,$22(a0)
00019454 4229 0025                  		clr.b	$25(a1)
00019458 135A 0024                  		move.b	(a2)+,$24(a1)
0001945C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019460 135A 0018                  		move.b	(a2)+,$18(a1)
00019464 237C 0001 883E 0004        		move.l	#Map_Eggman,4(a1)
0001946C 337C 0400 0002             		move.w	#$400,2(a1)
00019472 137C 0004 0001             		move.b	#4,1(a1)
00019478 137C 0020 0019             		move.b	#$20,$19(a1)
0001947E 2348 0034                  		move.l	a0,$34(a1)
00019482 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019486                            
00019486                            loc_1895C:
00019486 43F8 D040                  		lea	($FFFFD040).w,a1
0001948A 45E8 002A                  		lea	$2A(a0),a2
0001948E 705E                       		moveq	#$5E,d0
00019490 723E                       		moveq	#$3E,d1
00019492                            
00019492                            loc_18968:
00019492 B011                       		cmp.b	(a1),d0
00019494 6600                       		bne.s	loc_18974
00019496 4A29 0028                  		tst.b	$28(a1)
0001949A 6700                       		beq.s	loc_18974
0001949C 34C9                       		move.w	a1,(a2)+
0001949E                            
0001949E                            loc_18974:
0001949E D2FC 0040                  		adda.w	#$40,a1
000194A2 51C9 FFEE                  		dbf	d1,loc_18968
000194A6                            
000194A6                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000194A6 7000                       		moveq	#0,d0
000194A8 1028 0025                  		move.b	$25(a0),d0
000194AC 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000194B0 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000194B4 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
000194BA 4EB9 0000 AE7A             		jsr	AnimateSprite
000194C0 7003                       		moveq	#3,d0
000194C2 C028 0022                  		and.b	$22(a0),d0
000194C6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194CC 8128 0001                  		or.b	d0,1(a0)
000194D0 4EF9 0000 DD82             		jmp	DisplaySprite
000194D6                            ; ===========================================================================
000194D6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000194D8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000194DA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000194DC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000194DE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000194E0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000194E2                            ; ===========================================================================
000194E2                            
000194E2                            loc_189B8:				; XREF: Obj7A_ShipIndex
000194E2 317C FF00 0010             		move.w	#-$100,$10(a0)
000194E8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194EE 6400                       		bcc.s	loc_189CA
000194F0 5428 0025                  		addq.b	#2,$25(a0)
000194F4                            
000194F4                            loc_189CA:
000194F4 6100 EEE8                  		bsr.w	BossMove
000194F8 1028 003F                  		move.b	$3F(a0),d0
000194FC 5428 003F                  		addq.b	#2,$3F(a0)
00019500 4EB9 0000 28EC             		jsr	(CalcSine).l
00019506 EC40                       		asr.w	#6,d0
00019508 D068 0038                  		add.w	$38(a0),d0
0001950C 3140 000C                  		move.w	d0,$C(a0)
00019510 3168 0030 0008             		move.w	$30(a0),8(a0)
00019516 6000                       		bra.s	loc_189FE
00019518                            ; ===========================================================================
00019518                            
00019518                            loc_189EE:
00019518 6100 EEC4                  		bsr.w	BossMove
0001951C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019522 3168 0030 0008             		move.w	$30(a0),8(a0)
00019528                            
00019528                            loc_189FE:
00019528 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001952E 6400                       		bcc.s	locret_18A44
00019530 4A28 0022                  		tst.b	$22(a0)
00019534 6B00                       		bmi.s	loc_18A46
00019536 4A28 0020                  		tst.b	$20(a0)
0001953A 6600                       		bne.s	locret_18A44
0001953C 4A28 003E                  		tst.b	$3E(a0)
00019540 6600                       		bne.s	loc_18A28
00019542 117C 0020 003E             		move.b	#$20,$3E(a0)
00019548 303C 00AC                  		move.w	#$AC,d0
0001954C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019552                            
00019552                            loc_18A28:
00019552 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019556 7000                       		moveq	#0,d0
00019558 4A51                       		tst.w	(a1)
0001955A 6600                       		bne.s	loc_18A36
0001955C 303C 0EEE                  		move.w	#$EEE,d0
00019560                            
00019560                            loc_18A36:
00019560 3280                       		move.w	d0,(a1)
00019562 5328 003E                  		subq.b	#1,$3E(a0)
00019566 6600                       		bne.s	locret_18A44
00019568 117C 000F 0020             		move.b	#$F,$20(a0)
0001956E                            
0001956E                            locret_18A44:
0001956E 4E75                       		rts	
00019570                            ; ===========================================================================
00019570                            
00019570                            loc_18A46:
00019570 7064                       		moveq	#100,d0
00019572 6100 0000                  		bsr.w	AddPoints
00019576 117C 0006 0025             		move.b	#6,$25(a0)
0001957C 117C 0078 003C             		move.b	#$78,$3C(a0)
00019582 4268 0010                  		clr.w	$10(a0)
00019586 4E75                       		rts	
00019588                            ; ===========================================================================
00019588                            
00019588                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019588 3028 0030                  		move.w	$30(a0),d0
0001958C 317C 0200 0010             		move.w	#$200,$10(a0)
00019592 0828 0000 0022             		btst	#0,$22(a0)
00019598 6600                       		bne.s	loc_18A7C
0001959A 4468 0010                  		neg.w	$10(a0)
0001959E 0C40 2008                  		cmpi.w	#$2008,d0
000195A2 6E00                       		bgt.s	loc_18A88
000195A4 6000                       		bra.s	loc_18A82
000195A6                            ; ===========================================================================
000195A6                            
000195A6                            loc_18A7C:
000195A6 0C40 2138                  		cmpi.w	#$2138,d0
000195AA 6D00                       		blt.s	loc_18A88
000195AC                            
000195AC                            loc_18A82:
000195AC 0868 0000 0022             		bchg	#0,$22(a0)
000195B2                            
000195B2                            loc_18A88:
000195B2 3028 0008                  		move.w	8(a0),d0
000195B6 72FF                       		moveq	#-1,d1
000195B8 7402                       		moveq	#2,d2
000195BA 45E8 002A                  		lea	$2A(a0),a2
000195BE 7828                       		moveq	#$28,d4
000195C0 4A68 0010                  		tst.w	$10(a0)
000195C4 6A00                       		bpl.s	loc_18A9E
000195C6 4444                       		neg.w	d4
000195C8                            
000195C8                            loc_18A9E:
000195C8 321A                       		move.w	(a2)+,d1
000195CA 2641                       		movea.l	d1,a3
000195CC 082B 0003 0022             		btst	#3,$22(a3)
000195D2 6600                       		bne.s	loc_18AB4
000195D4 362B 0008                  		move.w	8(a3),d3
000195D8 D644                       		add.w	d4,d3
000195DA 9640                       		sub.w	d0,d3
000195DC 6700                       		beq.s	loc_18AC0
000195DE                            
000195DE                            loc_18AB4:
000195DE 51CA FFE8                  		dbf	d2,loc_18A9E
000195E2                            
000195E2 1142 0028                  		move.b	d2,$28(a0)
000195E6 6000 FF0C                  		bra.w	loc_189CA
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            loc_18AC0:
000195EA 1142 0028                  		move.b	d2,$28(a0)
000195EE 5428 0025                  		addq.b	#2,$25(a0)
000195F2 117C 0028 003C             		move.b	#$28,$3C(a0)
000195F8 6000 FEFA                  		bra.w	loc_189CA
000195FC                            ; ===========================================================================
000195FC                            
000195FC                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000195FC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019602 6600                       		bne.s	loc_18B36
00019604 70FF                       		moveq	#-1,d0
00019606 1028 0028                  		move.b	$28(a0),d0
0001960A 4880                       		ext.w	d0
0001960C 6B00                       		bmi.s	loc_18B40
0001960E 5540                       		subq.w	#2,d0
00019610 4440                       		neg.w	d0
00019612 D040                       		add.w	d0,d0
00019614 43E8 002A                  		lea	$2A(a0),a1
00019618 3031 0000                  		move.w	(a1,d0.w),d0
0001961C 2440                       		movea.l	d0,a2
0001961E 43F8 D040                  		lea	($FFFFD040).w,a1
00019622 723E                       		moveq	#$3E,d1
00019624                            
00019624                            loc_18AFA:
00019624 B0A9 003C                  		cmp.l	$3C(a1),d0
00019628 6700                       		beq.s	loc_18B40
0001962A D2FC 0040                  		adda.w	#$40,a1
0001962E 51C9 FFF4                  		dbf	d1,loc_18AFA
00019632                            
00019632 2F08                       		move.l	a0,-(sp)
00019634 41D2                       		lea	(a2),a0
00019636 4EB9 0000 E224             		jsr	SingleObjLoad2
0001963C 205F                       		movea.l	(sp)+,a0
0001963E 6600                       		bne.s	loc_18B40
00019640 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019644 3368 0008 0008             		move.w	8(a0),8(a1)
0001964A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019650 0669 0020 000C             		addi.w	#$20,$C(a1)
00019656 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001965C 234A 003C                  		move.l	a2,$3C(a1)
00019660                            
00019660                            loc_18B36:
00019660 5328 003C                  		subq.b	#1,$3C(a0)
00019664 6700                       		beq.s	loc_18B40
00019666 6000 FEC0                  		bra.w	loc_189FE
0001966A                            ; ===========================================================================
0001966A                            
0001966A                            loc_18B40:
0001966A 5528 0025                  		subq.b	#2,$25(a0)
0001966E 6000 FE84                  		bra.w	loc_189CA
00019672                            ; ===========================================================================
00019672                            
00019672                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019672 5328 003C                  		subq.b	#1,$3C(a0)
00019676 6B00                       		bmi.s	loc_18B52
00019678 6000 ED16                  		bra.w	BossDefeated
0001967C                            ; ===========================================================================
0001967C                            
0001967C                            loc_18B52:
0001967C 5428 0025                  		addq.b	#2,$25(a0)
00019680 4268 0012                  		clr.w	$12(a0)
00019684 08E8 0000 0022             		bset	#0,$22(a0)
0001968A 08A8 0007 0022             		bclr	#7,$22(a0)
00019690 4268 0010                  		clr.w	$10(a0)
00019694 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001969A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001969E 6600                       		bne.s	loc_18B7C
000196A0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000196A6                            
000196A6                            loc_18B7C:
000196A6 6000 FE80                  		bra.w	loc_189FE
000196AA                            ; ===========================================================================
000196AA                            
000196AA                            loc_18B80:				; XREF: Obj7A_ShipIndex
000196AA 5228 003C                  		addq.b	#1,$3C(a0)
000196AE 6700                       		beq.s	loc_18B90
000196B0 6A00                       		bpl.s	loc_18B96
000196B2 0668 0018 0012             		addi.w	#$18,$12(a0)
000196B8 6000                       		bra.s	loc_18BC2
000196BA                            ; ===========================================================================
000196BA                            
000196BA                            loc_18B90:
000196BA 4268 0012                  		clr.w	$12(a0)
000196BE 6000                       		bra.s	loc_18BC2
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            loc_18B96:
000196C0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000196C6 6500                       		bcs.s	loc_18BAE
000196C8 6700                       		beq.s	loc_18BB4
000196CA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000196D0 6500                       		bcs.s	loc_18BC2
000196D2 5428 0025                  		addq.b	#2,$25(a0)
000196D6 6000                       		bra.s	loc_18BC2
000196D8                            ; ===========================================================================
000196D8                            
000196D8                            loc_18BAE:
000196D8 5168 0012                  		subq.w	#8,$12(a0)
000196DC 6000                       		bra.s	loc_18BC2
000196DE                            ; ===========================================================================
000196DE                            
000196DE                            loc_18BB4:
000196DE 4268 0012                  		clr.w	$12(a0)
000196E2 303C 0084                  		move.w	#$84,d0
000196E6 4EB9 0000 125C             		jsr	(PlaySound).l	; play SLZ music
000196EC                            
000196EC                            loc_18BC2:
000196EC 6000 FE2A                  		bra.w	loc_189EE
000196F0                            ; ===========================================================================
000196F0                            
000196F0                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196F0 317C 0400 0010             		move.w	#$400,$10(a0)
000196F6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196FC 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019702 6400                       		bcc.s	loc_18BE0
00019704 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019708 6000                       		bra.s	loc_18BE8
0001970A                            ; ===========================================================================
0001970A                            
0001970A                            loc_18BE0:
0001970A 4A28 0001                  		tst.b	1(a0)
0001970E 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019712                            
00019712                            loc_18BE8:
00019712 6100 ECCA                  		bsr.w	BossMove
00019716 6000 FDDC                  		bra.w	loc_189CA
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001971A 7000                       		moveq	#0,d0
0001971C 7201                       		moveq	#1,d1
0001971E 2268 0034                  		movea.l	$34(a0),a1
00019722 1029 0025                  		move.b	$25(a1),d0
00019726 0C00 0006                  		cmpi.b	#6,d0
0001972A 6B00                       		bmi.s	loc_18C06
0001972C 720A                       		moveq	#$A,d1
0001972E 6000                       		bra.s	loc_18C1A
00019730                            ; ===========================================================================
00019730                            
00019730                            loc_18C06:
00019730 4A29 0020                  		tst.b	$20(a1)
00019734 6600                       		bne.s	loc_18C10
00019736 7205                       		moveq	#5,d1
00019738 6000                       		bra.s	loc_18C1A
0001973A                            ; ===========================================================================
0001973A                            
0001973A                            loc_18C10:
0001973A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019740 6500                       		bcs.s	loc_18C1A
00019742 7204                       		moveq	#4,d1
00019744                            
00019744                            loc_18C1A:
00019744 1141 001C                  		move.b	d1,$1C(a0)
00019748 0C00 000A                  		cmpi.b	#$A,d0
0001974C 6600                       		bne.s	loc_18C32
0001974E 117C 0006 001C             		move.b	#6,$1C(a0)
00019754 4A28 0001                  		tst.b	1(a0)
00019758 6A00 FC84                  		bpl.w	Obj7A_Delete
0001975C                            
0001975C                            loc_18C32:
0001975C 6000                       		bra.s	loc_18C6C
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001975E 117C 0008 001C             		move.b	#8,$1C(a0)
00019764 2268 0034                  		movea.l	$34(a0),a1
00019768 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001976E 6600                       		bne.s	loc_18C56
00019770 4A28 0001                  		tst.b	1(a0)
00019774 6A00 FC68                  		bpl.w	Obj7A_Delete
00019778 117C 000B 001C             		move.b	#$B,$1C(a0)
0001977E 6000                       		bra.s	loc_18C6C
00019780                            ; ===========================================================================
00019780                            
00019780                            loc_18C56:
00019780 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019786 6E00                       		bgt.s	loc_18C6C
00019788 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001978E 6D00                       		blt.s	loc_18C6C
00019790 117C 0007 001C             		move.b	#7,$1C(a0)
00019796                            
00019796                            loc_18C6C:
00019796 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
0001979C 4EB9 0000 AE7A             		jsr	AnimateSprite
000197A2                            
000197A2                            loc_18C78:
000197A2 2268 0034                  		movea.l	$34(a0),a1
000197A6 3169 0008 0008             		move.w	8(a1),8(a0)
000197AC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000197B2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000197B8 7003                       		moveq	#3,d0
000197BA C028 0022                  		and.b	$22(a0),d0
000197BE 0228 00FC 0001             		andi.b	#-4,1(a0)
000197C4 8128 0001                  		or.b	d0,1(a0)
000197C8 4EF9 0000 DD82             		jmp	DisplaySprite
000197CE                            ; ===========================================================================
000197CE                            
000197CE                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000197CE 2268 0034                  		movea.l	$34(a0),a1
000197D2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000197D8 6600                       		bne.s	loc_18CB8
000197DA 4A28 0001                  		tst.b	1(a0)
000197DE 6A00 FBFE                  		bpl.w	Obj7A_Delete
000197E2                            
000197E2                            loc_18CB8:
000197E2 217C 0001 8906 0004        		move.l	#Map_BossItems,4(a0)
000197EA 317C 246C 0002             		move.w	#$246C,2(a0)
000197F0 117C 0003 001A             		move.b	#3,$1A(a0)
000197F6 60AA                       		bra.s	loc_18C78
000197F8                            ; ===========================================================================
000197F8                            ; ---------------------------------------------------------------------------
000197F8                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197F8                            ; ---------------------------------------------------------------------------
000197F8                            
000197F8                            Obj7B:					; XREF: Obj_Index
000197F8 7000                       		moveq	#0,d0
000197FA 1028 0024                  		move.b	$24(a0),d0
000197FE 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019802 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019806 3028 0030                  		move.w	$30(a0),d0
0001980A 0240 FF80                  		andi.w	#$FF80,d0
0001980E 3238 F700                  		move.w	($FFFFF700).w,d1
00019812 0441 0080                  		subi.w	#$80,d1
00019816 0241 FF80                  		andi.w	#$FF80,d1
0001981A 9041                       		sub.w	d1,d0
0001981C 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019820 0C40 0280                  		cmpi.w	#$280,d0
00019824 6200 FBB8                  		bhi.w	Obj7A_Delete
00019828 4EF9 0000 DD82             		jmp	DisplaySprite
0001982E                            ; ===========================================================================
0001982E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019830 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019832 0000                       		dc.w loc_18DC6-Obj7B_Index
00019834 0000                       		dc.w loc_18EAA-Obj7B_Index
00019836 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019838 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            Obj7B_Main:				; XREF: Obj7B_Index
0001983A 217C 0001 215E 0004        		move.l	#Map_obj5Ea,4(a0)
00019842 317C 0518 0002             		move.w	#$518,2(a0)
00019848 117C 0001 001A             		move.b	#1,$1A(a0)
0001984E 0028 0004 0001             		ori.b	#4,1(a0)
00019854 117C 0004 0018             		move.b	#4,$18(a0)
0001985A 117C 008B 0020             		move.b	#$8B,$20(a0)
00019860 117C 000C 0019             		move.b	#$C,$19(a0)
00019866 2268 003C                  		movea.l	$3C(a0),a1
0001986A 3169 0008 0030             		move.w	8(a1),$30(a0)
00019870 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019876 08E8 0000 0022             		bset	#0,$22(a0)
0001987C 3028 0008                  		move.w	8(a0),d0
00019880 B069 0008                  		cmp.w	8(a1),d0
00019884 6E00                       		bgt.s	loc_18D68
00019886 08A8 0000 0022             		bclr	#0,$22(a0)
0001988C 117C 0002 003A             		move.b	#2,$3A(a0)
00019892                            
00019892                            loc_18D68:
00019892 5428 0024                  		addq.b	#2,$24(a0)
00019896                            
00019896                            Obj7B_Fall:				; XREF: Obj7B_Index
00019896 4EB9 0000 DD30             		jsr	ObjectFall
0001989C 2268 003C                  		movea.l	$3C(a0),a1
000198A0 45F9 0000 0000             		lea	(word_19018).l,a2
000198A6 7000                       		moveq	#0,d0
000198A8 1029 001A                  		move.b	$1A(a1),d0
000198AC 3228 0008                  		move.w	8(a0),d1
000198B0 9268 0030                  		sub.w	$30(a0),d1
000198B4 6400                       		bcc.s	loc_18D8E
000198B6 5440                       		addq.w	#2,d0
000198B8                            
000198B8                            loc_18D8E:
000198B8 D040                       		add.w	d0,d0
000198BA 3228 0034                  		move.w	$34(a0),d1
000198BE D272 0000                  		add.w	(a2,d0.w),d1
000198C2 B268 000C                  		cmp.w	$C(a0),d1
000198C6 6E00                       		bgt.s	locret_18DC4
000198C8 2268 003C                  		movea.l	$3C(a0),a1
000198CC 7202                       		moveq	#2,d1
000198CE 0828 0000 0022             		btst	#0,$22(a0)
000198D4 6700                       		beq.s	loc_18DAE
000198D6 7200                       		moveq	#0,d1
000198D8                            
000198D8                            loc_18DAE:
000198D8 317C 00F0 0028             		move.w	#$F0,$28(a0)
000198DE 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000198E4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198EA 6000 0000                  		bra.w	loc_18FA2
000198EE                            ; ===========================================================================
000198EE                            
000198EE                            locret_18DC4:
000198EE 4E75                       		rts	
000198F0                            ; ===========================================================================
000198F0                            
000198F0                            loc_18DC6:				; XREF: Obj7B_Index
000198F0 2268 003C                  		movea.l	$3C(a0),a1
000198F4 7000                       		moveq	#0,d0
000198F6 1028 003A                  		move.b	$3A(a0),d0
000198FA 9029 003A                  		sub.b	$3A(a1),d0
000198FE 6700                       		beq.s	loc_18E2A
00019900 6400                       		bcc.s	loc_18DDA
00019902 4400                       		neg.b	d0
00019904                            
00019904                            loc_18DDA:
00019904 323C F7E8                  		move.w	#-$818,d1
00019908 343C FEEC                  		move.w	#-$114,d2
0001990C 0C00 0001                  		cmpi.b	#1,d0
00019910 6700                       		beq.s	loc_18E00
00019912 323C F6A0                  		move.w	#-$960,d1
00019916 343C FF0C                  		move.w	#-$F4,d2
0001991A 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019920 6D00                       		blt.s	loc_18E00
00019922 323C F5E0                  		move.w	#-$A20,d1
00019926 343C FF80                  		move.w	#-$80,d2
0001992A                            
0001992A                            loc_18E00:
0001992A 3141 0012                  		move.w	d1,$12(a0)
0001992E 3142 0010                  		move.w	d2,$10(a0)
00019932 3028 0008                  		move.w	8(a0),d0
00019936 9068 0030                  		sub.w	$30(a0),d0
0001993A 6400                       		bcc.s	loc_18E16
0001993C 4468 0010                  		neg.w	$10(a0)
00019940                            
00019940                            loc_18E16:
00019940 117C 0001 001A             		move.b	#1,$1A(a0)
00019946 317C 0020 0028             		move.w	#$20,$28(a0)
0001994C 5428 0024                  		addq.b	#2,$24(a0)
00019950 6000 0000                  		bra.w	loc_18EAA
00019954                            ; ===========================================================================
00019954                            
00019954                            loc_18E2A:				; XREF: loc_18DC6
00019954 45F9 0000 0000             		lea	(word_19018).l,a2
0001995A 7000                       		moveq	#0,d0
0001995C 1029 001A                  		move.b	$1A(a1),d0
00019960 343C 0028                  		move.w	#$28,d2
00019964 3228 0008                  		move.w	8(a0),d1
00019968 9268 0030                  		sub.w	$30(a0),d1
0001996C 6400                       		bcc.s	loc_18E48
0001996E 4442                       		neg.w	d2
00019970 5440                       		addq.w	#2,d0
00019972                            
00019972                            loc_18E48:
00019972 D040                       		add.w	d0,d0
00019974 3228 0034                  		move.w	$34(a0),d1
00019978 D272 0000                  		add.w	(a2,d0.w),d1
0001997C 3141 000C                  		move.w	d1,$C(a0)
00019980 D468 0030                  		add.w	$30(a0),d2
00019984 3142 0008                  		move.w	d2,8(a0)
00019988 4268 000E                  		clr.w	$E(a0)
0001998C 4268 000A                  		clr.w	$A(a0)
00019990 5368 0028                  		subq.w	#1,$28(a0)
00019994 6600                       		bne.s	loc_18E7A
00019996 317C 0020 0028             		move.w	#$20,$28(a0)
0001999C 117C 0008 0024             		move.b	#8,$24(a0)
000199A2 4E75                       		rts	
000199A4                            ; ===========================================================================
000199A4                            
000199A4                            loc_18E7A:
000199A4 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000199AA 6600                       		bne.s	loc_18E88
000199AC 117C 0005 001F             		move.b	#5,$1F(a0)
000199B2                            
000199B2                            loc_18E88:
000199B2 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000199B8 6600                       		bne.s	loc_18E96
000199BA 117C 0002 001F             		move.b	#2,$1F(a0)
000199C0                            
000199C0                            loc_18E96:
000199C0 5328 001E                  		subq.b	#1,$1E(a0)
000199C4 6E00                       		bgt.s	locret_18EA8
000199C6 0868 0000 001A             		bchg	#0,$1A(a0)
000199CC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000199D2                            
000199D2                            locret_18EA8:
000199D2 4E75                       		rts	
000199D4                            ; ===========================================================================
000199D4                            
000199D4                            loc_18EAA:				; XREF: Obj7B_Index
000199D4 43F8 D040                  		lea	($FFFFD040).w,a1
000199D8 707A                       		moveq	#$7A,d0
000199DA 7240                       		moveq	#$40,d1
000199DC 743E                       		moveq	#$3E,d2
000199DE                            
000199DE                            loc_18EB4:
000199DE B011                       		cmp.b	(a1),d0
000199E0 6700                       		beq.s	loc_18EC0
000199E2 D2C1                       		adda.w	d1,a1
000199E4 51CA FFF8                  		dbf	d2,loc_18EB4
000199E8                            
000199E8 6000                       		bra.s	loc_18F38
000199EA                            ; ===========================================================================
000199EA                            
000199EA                            loc_18EC0:
000199EA 3029 0008                  		move.w	8(a1),d0
000199EE 3229 000C                  		move.w	$C(a1),d1
000199F2 3428 0008                  		move.w	8(a0),d2
000199F6 3628 000C                  		move.w	$C(a0),d3
000199FA 45FA 0000                  		lea	byte_19022(pc),a2
000199FE 47FA 0000                  		lea	byte_19026(pc),a3
00019A02 181A                       		move.b	(a2)+,d4
00019A04 4884                       		ext.w	d4
00019A06 D044                       		add.w	d4,d0
00019A08 181B                       		move.b	(a3)+,d4
00019A0A 4884                       		ext.w	d4
00019A0C D444                       		add.w	d4,d2
00019A0E B440                       		cmp.w	d0,d2
00019A10 6500                       		bcs.s	loc_18F38
00019A12 181A                       		move.b	(a2)+,d4
00019A14 4884                       		ext.w	d4
00019A16 D044                       		add.w	d4,d0
00019A18 181B                       		move.b	(a3)+,d4
00019A1A 4884                       		ext.w	d4
00019A1C D444                       		add.w	d4,d2
00019A1E B042                       		cmp.w	d2,d0
00019A20 6500                       		bcs.s	loc_18F38
00019A22 181A                       		move.b	(a2)+,d4
00019A24 4884                       		ext.w	d4
00019A26 D244                       		add.w	d4,d1
00019A28 181B                       		move.b	(a3)+,d4
00019A2A 4884                       		ext.w	d4
00019A2C D644                       		add.w	d4,d3
00019A2E B641                       		cmp.w	d1,d3
00019A30 6500                       		bcs.s	loc_18F38
00019A32 181A                       		move.b	(a2)+,d4
00019A34 4884                       		ext.w	d4
00019A36 D244                       		add.w	d4,d1
00019A38 181B                       		move.b	(a3)+,d4
00019A3A 4884                       		ext.w	d4
00019A3C D644                       		add.w	d4,d3
00019A3E B243                       		cmp.w	d3,d1
00019A40 6500                       		bcs.s	loc_18F38
00019A42 5428 0024                  		addq.b	#2,$24(a0)
00019A46 4268 0028                  		clr.w	$28(a0)
00019A4A 4229 0020                  		clr.b	$20(a1)
00019A4E 5329 0021                  		subq.b	#1,$21(a1)
00019A52 6600                       		bne.s	loc_18F38
00019A54 08E9 0007 0022             		bset	#7,$22(a1)
00019A5A 4268 0010                  		clr.w	$10(a0)
00019A5E 4268 0012                  		clr.w	$12(a0)
00019A62                            
00019A62                            loc_18F38:
00019A62 4A68 0012                  		tst.w	$12(a0)
00019A66 6A00                       		bpl.s	loc_18F5C
00019A68 4EB9 0000 DD30             		jsr	ObjectFall
00019A6E 3028 0034                  		move.w	$34(a0),d0
00019A72 0440 002F                  		subi.w	#$2F,d0
00019A76 B068 000C                  		cmp.w	$C(a0),d0
00019A7A 6E00                       		bgt.s	loc_18F58
00019A7C 4EB9 0000 DD30             		jsr	ObjectFall
00019A82                            
00019A82                            loc_18F58:
00019A82 6000 FF20                  		bra.w	loc_18E7A
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            loc_18F5C:
00019A86 4EB9 0000 DD30             		jsr	ObjectFall
00019A8C 2268 003C                  		movea.l	$3C(a0),a1
00019A90 45F9 0000 0000             		lea	(word_19018).l,a2
00019A96 7000                       		moveq	#0,d0
00019A98 1029 001A                  		move.b	$1A(a1),d0
00019A9C 3228 0008                  		move.w	8(a0),d1
00019AA0 9268 0030                  		sub.w	$30(a0),d1
00019AA4 6400                       		bcc.s	loc_18F7E
00019AA6 5440                       		addq.w	#2,d0
00019AA8                            
00019AA8                            loc_18F7E:
00019AA8 D040                       		add.w	d0,d0
00019AAA 3228 0034                  		move.w	$34(a0),d1
00019AAE D272 0000                  		add.w	(a2,d0.w),d1
00019AB2 B268 000C                  		cmp.w	$C(a0),d1
00019AB6 6ECA                       		bgt.s	loc_18F58
00019AB8 2268 003C                  		movea.l	$3C(a0),a1
00019ABC 7202                       		moveq	#2,d1
00019ABE 4A68 0010                  		tst.w	$10(a0)
00019AC2 6B00                       		bmi.s	loc_18F9C
00019AC4 7200                       		moveq	#0,d1
00019AC6                            
00019AC6                            loc_18F9C:
00019AC6 317C 0000 0028             		move.w	#0,$28(a0)
00019ACC                            
00019ACC                            loc_18FA2:
00019ACC 1341 003A                  		move.b	d1,$3A(a1)
00019AD0 1141 003A                  		move.b	d1,$3A(a0)
00019AD4 B229 001A                  		cmp.b	$1A(a1),d1
00019AD8 6700                       		beq.s	loc_19008
00019ADA 08A9 0003 0022             		bclr	#3,$22(a1)
00019AE0 6700                       		beq.s	loc_19008
00019AE2 4229 0025                  		clr.b	$25(a1)
00019AE6 137C 0002 0024             		move.b	#2,$24(a1)
00019AEC 45F8 D000                  		lea	($FFFFD000).w,a2
00019AF0 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019AF6 446A 0012                  		neg.w	$12(a2)
00019AFA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019B00 6600                       		bne.s	loc_18FDC
00019B02 E0EA 0012                  		asr	$12(a2)
00019B06                            
00019B06                            loc_18FDC:
00019B06 08EA 0001 0022             		bset	#1,$22(a2)
00019B0C 08AA 0003 0022             		bclr	#3,$22(a2)
00019B12 422A 003C                  		clr.b	$3C(a2)
00019B16 2F08                       		move.l	a0,-(sp)
00019B18 41D2                       		lea	(a2),a0
00019B1A 4EBA A05A                  		jsr	Obj01_ChkRoll
00019B1E 205F                       		movea.l	(sp)+,a0
00019B20 157C 0002 0024             		move.b	#2,$24(a2)
00019B26 303C 00CC                  		move.w	#$CC,d0
00019B2A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019B30                            
00019B30                            loc_19008:
00019B30 4268 0010                  		clr.w	$10(a0)
00019B34 4268 0012                  		clr.w	$12(a0)
00019B38 5428 0024                  		addq.b	#2,$24(a0)
00019B3C 6000 FE66                  		bra.w	loc_18E7A
00019B40                            ; ===========================================================================
00019B40 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019B4A                            		even
00019B4A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B4E                            		even
00019B4E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B52                            		even
00019B52                            ; ===========================================================================
00019B52                            
00019B52                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B52 10BC 003F                  		move.b	#$3F,(a0)
00019B56 4228 0024                  		clr.b	$24(a0)
00019B5A 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B60 6700                       		beq.s	Obj7B_MakeFrag
00019B62 4E75                       		rts	
00019B64                            ; ===========================================================================
00019B64                            
00019B64                            Obj7B_MakeFrag:
00019B64 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B6A 7203                       		moveq	#3,d1
00019B6C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B70                            
00019B70                            Obj7B_Loop:
00019B70 4EB9 0000 E20E             		jsr	SingleObjLoad
00019B76 6600                       		bne.s	loc_1909A
00019B78 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B7C 137C 000A 0024             		move.b	#$A,$24(a1)
00019B82 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B8A 137C 0003 0018             		move.b	#3,$18(a1)
00019B90 337C 0518 0002             		move.w	#$518,2(a1)
00019B96 3368 0008 0008             		move.w	8(a0),8(a1)
00019B9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019BA2 335A 0010                  		move.w	(a2)+,$10(a1)
00019BA6 335A 0012                  		move.w	(a2)+,$12(a1)
00019BAA 137C 0098 0020             		move.b	#$98,$20(a1)
00019BB0 0029 0004 0001             		ori.b	#4,1(a1)
00019BB6 08E9 0007 0001             		bset	#7,1(a1)
00019BBC 137C 000C 0019             		move.b	#$C,$19(a1)
00019BC2                            
00019BC2                            loc_1909A:
00019BC2 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019BC6                            
00019BC6 4E75                       		rts	
00019BC8                            ; ===========================================================================
00019BC8 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019BCC FF60 FDC0                  		dc.w $FF60, $FDC0
00019BD0 0100 FCC0                  		dc.w $100, $FCC0
00019BD4 00A0 FDC0                  		dc.w $A0, $FDC0
00019BD8                            ; ===========================================================================
00019BD8                            
00019BD8                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019BD8 4EB9 0000 DD5C             		jsr	SpeedToPos
00019BDE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BE4 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019BEA 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BF0 7004                       		moveq	#4,d0
00019BF2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BF6 E448                       		lsr.w	#2,d0
00019BF8 1140 001A                  		move.b	d0,$1A(a0)
00019BFC 4A28 0001                  		tst.b	1(a0)
00019C00 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019C04 4E75                       		rts	
00019C06                            ; ===========================================================================
00019C06                            ; ---------------------------------------------------------------------------
00019C06                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019C06                            ; ---------------------------------------------------------------------------
00019C06                            Map_obj7B:
00019C06                            	include "_maps\obj7B.asm"
00019C06                            ; ---------------------------------------------------------------------------
00019C06                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019C06                            ; ---------------------------------------------------------------------------
00019C06 0000                       		dc.w byte_190E2-Map_obj7B
00019C08 0000                       		dc.w byte_190E8-Map_obj7B
00019C0A 01                         byte_190E2:	dc.b 1
00019C0B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019C10 01                         byte_190E8:	dc.b 1
00019C11 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019C16                            		even
00019C16                            		even
00019C16                            
00019C16                            ; ===========================================================================
00019C16                            ; ---------------------------------------------------------------------------
00019C16                            ; Object 75 - Eggman (SYZ)
00019C16                            ; ---------------------------------------------------------------------------
00019C16                            
00019C16                            Obj75:					; XREF: Obj_Index
00019C16 7000                       		moveq	#0,d0
00019C18 1028 0024                  		move.b	$24(a0),d0
00019C1C 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019C20 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019C24                            ; ===========================================================================
00019C24 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019C26 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019C28 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019C2A 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019C2C 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019C2E                            
00019C2E 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019C31 0401 05                    		dc.b 4,	1, 5
00019C34 0607 05                    		dc.b 6,	7, 5
00019C37 0800 05                    		dc.b 8,	0, 5
00019C3A                            ; ===========================================================================
00019C3A                            
00019C3A                            Obj75_Main:				; XREF: Obj75_Index
00019C3A 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019C40 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019C46 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C4C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C52 117C 000F 0020             		move.b	#$F,$20(a0)
00019C58 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C5E 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C62 2248                       		movea.l	a0,a1
00019C64 7203                       		moveq	#3,d1
00019C66 6000                       		bra.s	Obj75_LoadBoss
00019C68                            ; ===========================================================================
00019C68                            
00019C68                            Obj75_Loop:
00019C68 4EB9 0000 E224             		jsr	SingleObjLoad2
00019C6E 6600                       		bne.s	Obj75_ShipMain
00019C70 12BC 0075                  		move.b	#$75,(a1)
00019C74 3368 0008 0008             		move.w	8(a0),8(a1)
00019C7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C80                            
00019C80                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C80 08A8 0000 0022             		bclr	#0,$22(a0)
00019C86 4229 0025                  		clr.b	$25(a1)
00019C8A 135A 0024                  		move.b	(a2)+,$24(a1)
00019C8E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C92 135A 0018                  		move.b	(a2)+,$18(a1)
00019C96 237C 0001 883E 0004        		move.l	#Map_Eggman,4(a1)
00019C9E 337C 0400 0002             		move.w	#$400,2(a1)
00019CA4 137C 0004 0001             		move.b	#4,1(a1)
00019CAA 137C 0020 0019             		move.b	#$20,$19(a1)
00019CB0 2348 0034                  		move.l	a0,$34(a1)
00019CB4 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019CB8                            
00019CB8                            Obj75_ShipMain:				; XREF: Obj75_Index
00019CB8 7000                       		moveq	#0,d0
00019CBA 1028 0025                  		move.b	$25(a0),d0
00019CBE 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019CC2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019CC6 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
00019CCC 4EB9 0000 AE7A             		jsr	AnimateSprite
00019CD2 7003                       		moveq	#3,d0
00019CD4 C028 0022                  		and.b	$22(a0),d0
00019CD8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CDE 8128 0001                  		or.b	d0,1(a0)
00019CE2 4EF9 0000 DD82             		jmp	DisplaySprite
00019CE8                            ; ===========================================================================
00019CE8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019CEC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CF0 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CF4                            ; ===========================================================================
00019CF4                            
00019CF4                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CF4 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CFA 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019D00 6400                       		bcc.s	loc_191DE
00019D02 5428 0025                  		addq.b	#2,$25(a0)
00019D06                            
00019D06                            loc_191DE:
00019D06 1028 003F                  		move.b	$3F(a0),d0
00019D0A 5428 003F                  		addq.b	#2,$3F(a0)
00019D0E 4EB9 0000 28EC             		jsr	(CalcSine).l
00019D14 E440                       		asr.w	#2,d0
00019D16 3140 0012                  		move.w	d0,$12(a0)
00019D1A                            
00019D1A                            loc_191F2:
00019D1A 6100 E6C2                  		bsr.w	BossMove
00019D1E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D24 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D2A                            
00019D2A                            loc_19202:
00019D2A 3028 0008                  		move.w	8(a0),d0
00019D2E 0440 2C00                  		subi.w	#$2C00,d0
00019D32 EA48                       		lsr.w	#5,d0
00019D34 1140 0034                  		move.b	d0,$34(a0)
00019D38 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019D3E 6400                       		bcc.s	locret_19256
00019D40 4A28 0022                  		tst.b	$22(a0)
00019D44 6B00                       		bmi.s	loc_19258
00019D46 4A28 0020                  		tst.b	$20(a0)
00019D4A 6600                       		bne.s	locret_19256
00019D4C 4A28 003E                  		tst.b	$3E(a0)
00019D50 6600                       		bne.s	loc_1923A
00019D52 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D58 303C 00AC                  		move.w	#$AC,d0
00019D5C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D62                            
00019D62                            loc_1923A:
00019D62 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D66 7000                       		moveq	#0,d0
00019D68 4A51                       		tst.w	(a1)
00019D6A 6600                       		bne.s	loc_19248
00019D6C 303C 0EEE                  		move.w	#$EEE,d0
00019D70                            
00019D70                            loc_19248:
00019D70 3280                       		move.w	d0,(a1)
00019D72 5328 003E                  		subq.b	#1,$3E(a0)
00019D76 6600                       		bne.s	locret_19256
00019D78 117C 000F 0020             		move.b	#$F,$20(a0)
00019D7E                            
00019D7E                            locret_19256:
00019D7E 4E75                       		rts	
00019D80                            ; ===========================================================================
00019D80                            
00019D80                            loc_19258:				; XREF: loc_19202
00019D80 7064                       		moveq	#100,d0
00019D82 6100 0000                  		bsr.w	AddPoints
00019D86 117C 0006 0025             		move.b	#6,$25(a0)
00019D8C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D92 4268 0010                  		clr.w	$10(a0)
00019D96 4E75                       		rts	
00019D98                            ; ===========================================================================
00019D98                            
00019D98                            loc_19270:				; XREF: Obj75_ShipIndex
00019D98 3028 0030                  		move.w	$30(a0),d0
00019D9C 317C 0140 0010             		move.w	#$140,$10(a0)
00019DA2 0828 0000 0022             		btst	#0,$22(a0)
00019DA8 6600                       		bne.s	loc_1928E
00019DAA 4468 0010                  		neg.w	$10(a0)
00019DAE 0C40 2C08                  		cmpi.w	#$2C08,d0
00019DB2 6E00                       		bgt.s	loc_1929E
00019DB4 6000                       		bra.s	loc_19294
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_1928E:
00019DB6 0C40 2D38                  		cmpi.w	#$2D38,d0
00019DBA 6D00                       		blt.s	loc_1929E
00019DBC                            
00019DBC                            loc_19294:
00019DBC 0868 0000 0022             		bchg	#0,$22(a0)
00019DC2 4228 003D                  		clr.b	$3D(a0)
00019DC6                            
00019DC6                            loc_1929E:
00019DC6 0440 2C10                  		subi.w	#$2C10,d0
00019DCA 0240 001F                  		andi.w	#$1F,d0
00019DCE 0440 001F                  		subi.w	#$1F,d0
00019DD2 6A00                       		bpl.s	loc_192AE
00019DD4 4440                       		neg.w	d0
00019DD6                            
00019DD6                            loc_192AE:
00019DD6 5340                       		subq.w	#1,d0
00019DD8 6E00                       		bgt.s	loc_192E8
00019DDA 4A28 003D                  		tst.b	$3D(a0)
00019DDE 6600                       		bne.s	loc_192E8
00019DE0 3238 D008                  		move.w	($FFFFD008).w,d1
00019DE4 0441 2C00                  		subi.w	#$2C00,d1
00019DE8 EA41                       		asr.w	#5,d1
00019DEA B228 0034                  		cmp.b	$34(a0),d1
00019DEE 6600                       		bne.s	loc_192E8
00019DF0 7000                       		moveq	#0,d0
00019DF2 1028 0034                  		move.b	$34(a0),d0
00019DF6 EB40                       		asl.w	#5,d0
00019DF8 0640 2C10                  		addi.w	#$2C10,d0
00019DFC 3140 0030                  		move.w	d0,$30(a0)
00019E00 6100 0000                  		bsr.w	Obj75_FindBlocks
00019E04 5428 0025                  		addq.b	#2,$25(a0)
00019E08 4268 0028                  		clr.w	$28(a0)
00019E0C 4268 0010                  		clr.w	$10(a0)
00019E10                            
00019E10                            loc_192E8:
00019E10 6000 FEF4                  		bra.w	loc_191DE
00019E14                            ; ===========================================================================
00019E14                            
00019E14                            loc_192EC:				; XREF: Obj75_ShipIndex
00019E14 7000                       		moveq	#0,d0
00019E16 1028 0028                  		move.b	$28(a0),d0
00019E1A 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019E1E 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019E22                            ; ===========================================================================
00019E22 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019E24 0000                       		dc.w loc_19348-off_192FA
00019E26 0000                       		dc.w loc_1938E-off_192FA
00019E28 0000                       		dc.w loc_193D0-off_192FA
00019E2A                            ; ===========================================================================
00019E2A                            
00019E2A                            loc_19302:				; XREF: off_192FA
00019E2A 317C 0180 0012             		move.w	#$180,$12(a0)
00019E30 3028 0038                  		move.w	$38(a0),d0
00019E34 0C40 0556                  		cmpi.w	#$556,d0
00019E38 6500                       		bcs.s	loc_19344
00019E3A 317C 0556 0038             		move.w	#$556,$38(a0)
00019E40 4268 003C                  		clr.w	$3C(a0)
00019E44 70FF                       		moveq	#-1,d0
00019E46 3028 0036                  		move.w	$36(a0),d0
00019E4A 6700                       		beq.s	loc_1933C
00019E4C 2240                       		movea.l	d0,a1
00019E4E 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E54 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E5A 2348 0034                  		move.l	a0,$34(a1)
00019E5E 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E64                            
00019E64                            loc_1933C:
00019E64 4268 0012                  		clr.w	$12(a0)
00019E68 5428 0028                  		addq.b	#2,$28(a0)
00019E6C                            
00019E6C                            loc_19344:
00019E6C 6000 FEAC                  		bra.w	loc_191F2
00019E70                            ; ===========================================================================
00019E70                            
00019E70                            loc_19348:				; XREF: off_192FA
00019E70 5368 003C                  		subq.w	#1,$3C(a0)
00019E74 6A00                       		bpl.s	loc_19366
00019E76 5428 0028                  		addq.b	#2,$28(a0)
00019E7A 317C F800 0012             		move.w	#-$800,$12(a0)
00019E80 4A68 0036                  		tst.w	$36(a0)
00019E84 6600                       		bne.s	loc_19362
00019E86 E0E8 0012                  		asr	$12(a0)
00019E8A                            
00019E8A                            loc_19362:
00019E8A 7000                       		moveq	#0,d0
00019E8C 6000                       		bra.s	loc_1937C
00019E8E                            ; ===========================================================================
00019E8E                            
00019E8E                            loc_19366:
00019E8E 7000                       		moveq	#0,d0
00019E90 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E96 6E00                       		bgt.s	loc_1937C
00019E98 7002                       		moveq	#2,d0
00019E9A 0828 0001 003D             		btst	#1,$3D(a0)
00019EA0 6700                       		beq.s	loc_1937C
00019EA2 4440                       		neg.w	d0
00019EA4                            
00019EA4                            loc_1937C:
00019EA4 D068 0038                  		add.w	$38(a0),d0
00019EA8 3140 000C                  		move.w	d0,$C(a0)
00019EAC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019EB2 6000 FE76                  		bra.w	loc_19202
00019EB6                            ; ===========================================================================
00019EB6                            
00019EB6                            loc_1938E:				; XREF: off_192FA
00019EB6 303C 04DA                  		move.w	#$4DA,d0
00019EBA 4A68 0036                  		tst.w	$36(a0)
00019EBE 6700                       		beq.s	loc_1939C
00019EC0 0440 0018                  		subi.w	#$18,d0
00019EC4                            
00019EC4                            loc_1939C:
00019EC4 B068 0038                  		cmp.w	$38(a0),d0
00019EC8 6D00                       		blt.s	loc_193BE
00019ECA 317C 0008 003C             		move.w	#8,$3C(a0)
00019ED0 4A68 0036                  		tst.w	$36(a0)
00019ED4 6700                       		beq.s	loc_193B4
00019ED6 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019EDC                            
00019EDC                            loc_193B4:
00019EDC 5428 0028                  		addq.b	#2,$28(a0)
00019EE0 4268 0012                  		clr.w	$12(a0)
00019EE4 6000                       		bra.s	loc_193CC
00019EE6                            ; ===========================================================================
00019EE6                            
00019EE6                            loc_193BE:
00019EE6 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019EEC 6C00                       		bge.s	loc_193CC
00019EEE 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EF4                            
00019EF4                            loc_193CC:
00019EF4 6000 FE24                  		bra.w	loc_191F2
00019EF8                            ; ===========================================================================
00019EF8                            
00019EF8                            loc_193D0:				; XREF: off_192FA
00019EF8 5368 003C                  		subq.w	#1,$3C(a0)
00019EFC 6E00                       		bgt.s	loc_19406
00019EFE 6B00                       		bmi.s	loc_193EE
00019F00 70FF                       		moveq	#-1,d0
00019F02 3028 0036                  		move.w	$36(a0),d0
00019F06 6700                       		beq.s	loc_193E8
00019F08 2240                       		movea.l	d0,a1
00019F0A 137C 000A 0029             		move.b	#$A,$29(a1)
00019F10                            
00019F10                            loc_193E8:
00019F10 4268 0036                  		clr.w	$36(a0)
00019F14 6000                       		bra.s	loc_19406
00019F16                            ; ===========================================================================
00019F16                            
00019F16                            loc_193EE:
00019F16 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019F1C 6600                       		bne.s	loc_19406
00019F1E 4228 0029                  		clr.b	$29(a0)
00019F22 5528 0025                  		subq.b	#2,$25(a0)
00019F26 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019F2C 6000                       		bra.s	loc_19446
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            loc_19406:
00019F2E 7001                       		moveq	#1,d0
00019F30 4A68 0036                  		tst.w	$36(a0)
00019F34 6700                       		beq.s	loc_19410
00019F36 7002                       		moveq	#2,d0
00019F38                            
00019F38                            loc_19410:
00019F38 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019F3E 6700                       		beq.s	loc_19424
00019F40 6D00                       		blt.s	loc_1941C
00019F42 4440                       		neg.w	d0
00019F44                            
00019F44                            loc_1941C:
00019F44 4A68 0036                  		tst.w	$36(a0)
00019F48 D168 0038                  		add.w	d0,$38(a0)
00019F4C                            
00019F4C                            loc_19424:
00019F4C 7000                       		moveq	#0,d0
00019F4E 4A68 0036                  		tst.w	$36(a0)
00019F52 6700                       		beq.s	loc_19438
00019F54 7002                       		moveq	#2,d0
00019F56 0828 0000 003D             		btst	#0,$3D(a0)
00019F5C 6700                       		beq.s	loc_19438
00019F5E 4440                       		neg.w	d0
00019F60                            
00019F60                            loc_19438:
00019F60 D068 0038                  		add.w	$38(a0),d0
00019F64 3140 000C                  		move.w	d0,$C(a0)
00019F68 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F6E                            
00019F6E                            loc_19446:
00019F6E 6000 FDBA                  		bra.w	loc_19202
00019F72                            
00019F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F72                            
00019F72                            
00019F72                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F72 4268 0036                  		clr.w	$36(a0)
00019F76 43F8 D040                  		lea	($FFFFD040).w,a1
00019F7A 703E                       		moveq	#$3E,d0
00019F7C 7276                       		moveq	#$76,d1
00019F7E 1428 0034                  		move.b	$34(a0),d2
00019F82                            
00019F82                            Obj75_FindLoop:
00019F82 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F84 6600                       		bne.s	loc_1946A	; if not, branch
00019F86 B429 0028                  		cmp.b	$28(a1),d2
00019F8A 6600                       		bne.s	loc_1946A
00019F8C 3149 0036                  		move.w	a1,$36(a0)
00019F90 6000                       		bra.s	locret_19472
00019F92                            ; ===========================================================================
00019F92                            
00019F92                            loc_1946A:
00019F92 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F96 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019F9A                            
00019F9A                            locret_19472:
00019F9A 4E75                       		rts	
00019F9C                            ; End of function Obj75_FindBlocks
00019F9C                            
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_19474:				; XREF: Obj75_ShipIndex
00019F9C 5368 003C                  		subq.w	#1,$3C(a0)
00019FA0 6B00                       		bmi.s	loc_1947E
00019FA2 6000 E3EC                  		bra.w	BossDefeated
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_1947E:
00019FA6 5428 0025                  		addq.b	#2,$25(a0)
00019FAA 4268 0012                  		clr.w	$12(a0)
00019FAE 08E8 0000 0022             		bset	#0,$22(a0)
00019FB4 08A8 0007 0022             		bclr	#7,$22(a0)
00019FBA 4268 0010                  		clr.w	$10(a0)
00019FBE 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019FC4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019FC8 6600                       		bne.s	loc_194A8
00019FCA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019FD0                            
00019FD0                            loc_194A8:
00019FD0 6000 FD58                  		bra.w	loc_19202
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            loc_194AC:				; XREF: Obj75_ShipIndex
00019FD4 5268 003C                  		addq.w	#1,$3C(a0)
00019FD8 6700                       		beq.s	loc_194BC
00019FDA 6A00                       		bpl.s	loc_194C2
00019FDC 0668 0018 0012             		addi.w	#$18,$12(a0)
00019FE2 6000                       		bra.s	loc_194EE
00019FE4                            ; ===========================================================================
00019FE4                            
00019FE4                            loc_194BC:
00019FE4 4268 0012                  		clr.w	$12(a0)
00019FE8 6000                       		bra.s	loc_194EE
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            loc_194C2:
00019FEA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FF0 6500                       		bcs.s	loc_194DA
00019FF2 6700                       		beq.s	loc_194E0
00019FF4 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019FFA 6500                       		bcs.s	loc_194EE
00019FFC 5428 0025                  		addq.b	#2,$25(a0)
0001A000 6000                       		bra.s	loc_194EE
0001A002                            ; ===========================================================================
0001A002                            
0001A002                            loc_194DA:
0001A002 5168 0012                  		subq.w	#8,$12(a0)
0001A006 6000                       		bra.s	loc_194EE
0001A008                            ; ===========================================================================
0001A008                            
0001A008                            loc_194E0:
0001A008 4268 0012                  		clr.w	$12(a0)
0001A00C 303C 0085                  		move.w	#$85,d0
0001A010 4EB9 0000 125C             		jsr	(PlaySound).l	; play SYZ music
0001A016                            
0001A016                            loc_194EE:
0001A016 6000 FD02                  		bra.w	loc_191F2
0001A01A                            ; ===========================================================================
0001A01A                            
0001A01A                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A01A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A020 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A026 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A02C 6400                       		bcc.s	loc_1950C
0001A02E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A032 6000                       		bra.s	loc_19512
0001A034                            ; ===========================================================================
0001A034                            
0001A034                            loc_1950C:
0001A034 4A28 0001                  		tst.b	1(a0)
0001A038 6A00                       		bpl.s	Obj75_ShipDelete
0001A03A                            
0001A03A                            loc_19512:
0001A03A 6100 E3A2                  		bsr.w	BossMove
0001A03E 6000 FCC6                  		bra.w	loc_191DE
0001A042                            ; ===========================================================================
0001A042                            
0001A042                            Obj75_ShipDelete:
0001A042 4EF9 0000 DDBE             		jmp	DeleteObject
0001A048                            ; ===========================================================================
0001A048                            
0001A048                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A048 7201                       		moveq	#1,d1
0001A04A 2268 0034                  		movea.l	$34(a0),a1
0001A04E 7000                       		moveq	#0,d0
0001A050 1029 0025                  		move.b	$25(a1),d0
0001A054 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A058 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A05C 1141 001C                  		move.b	d1,$1C(a0)
0001A060 1010                       		move.b	(a0),d0
0001A062 B011                       		cmp.b	(a1),d0
0001A064 6600                       		bne.s	Obj75_FaceDelete
0001A066 6000                       		bra.s	loc_195BE
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            Obj75_FaceDelete:
0001A068 4EF9 0000 DDBE             		jmp	DeleteObject
0001A06E                            ; ===========================================================================
0001A06E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A072 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A076 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A07A                            ; ===========================================================================
0001A07A                            
0001A07A                            loc_19552:				; XREF: off_19546
0001A07A 720A                       		moveq	#$A,d1
0001A07C 4E75                       		rts	
0001A07E                            ; ===========================================================================
0001A07E                            
0001A07E                            loc_19556:				; XREF: off_19546
0001A07E 7206                       		moveq	#6,d1
0001A080 4E75                       		rts	
0001A082                            ; ===========================================================================
0001A082                            
0001A082                            loc_1955A:				; XREF: off_19546
0001A082 7000                       		moveq	#0,d0
0001A084 1029 0028                  		move.b	$28(a1),d0
0001A088 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A08C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A090                            ; ===========================================================================
0001A090 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A094 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A098                            ; ===========================================================================
0001A098                            
0001A098                            loc_19570:				; XREF: off_19568
0001A098 6000                       		bra.s	loc_19574
0001A09A                            ; ===========================================================================
0001A09A                            
0001A09A                            loc_19572:				; XREF: off_19568
0001A09A 7206                       		moveq	#6,d1
0001A09C                            
0001A09C                            loc_19574:				; XREF: off_19546
0001A09C 4A29 0020                  		tst.b	$20(a1)
0001A0A0 6600                       		bne.s	loc_1957E
0001A0A2 7205                       		moveq	#5,d1
0001A0A4 4E75                       		rts	
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_1957E:
0001A0A6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A0AC 6500                       		bcs.s	locret_19588
0001A0AE 7204                       		moveq	#4,d1
0001A0B0                            
0001A0B0                            locret_19588:
0001A0B0 4E75                       		rts	
0001A0B2                            ; ===========================================================================
0001A0B2                            
0001A0B2                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A0B2 117C 0007 001C             		move.b	#7,$1C(a0)
0001A0B8 2268 0034                  		movea.l	$34(a0),a1
0001A0BC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A0C2 6600                       		bne.s	loc_195AA
0001A0C4 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A0CA 4A28 0001                  		tst.b	1(a0)
0001A0CE 6A00                       		bpl.s	Obj75_FlameDelete
0001A0D0 6000                       		bra.s	loc_195B6
0001A0D2                            ; ===========================================================================
0001A0D2                            
0001A0D2                            loc_195AA:
0001A0D2 4A69 0010                  		tst.w	$10(a1)
0001A0D6 6700                       		beq.s	loc_195B6
0001A0D8 117C 0008 001C             		move.b	#8,$1C(a0)
0001A0DE                            
0001A0DE                            loc_195B6:
0001A0DE 6000                       		bra.s	loc_195BE
0001A0E0                            ; ===========================================================================
0001A0E0                            
0001A0E0                            Obj75_FlameDelete:
0001A0E0 4EF9 0000 DDBE             		jmp	DeleteObject
0001A0E6                            ; ===========================================================================
0001A0E6                            
0001A0E6                            loc_195BE:
0001A0E6 43F9 0001 87EE             		lea	(Ani_Eggman).l,a1
0001A0EC 4EB9 0000 AE7A             		jsr	AnimateSprite
0001A0F2 2268 0034                  		movea.l	$34(a0),a1
0001A0F6 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0FC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A102                            
0001A102                            loc_195DA:
0001A102 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A108 7003                       		moveq	#3,d0
0001A10A C028 0022                  		and.b	$22(a0),d0
0001A10E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A114 8128 0001                  		or.b	d0,1(a0)
0001A118 4EF9 0000 DD82             		jmp	DisplaySprite
0001A11E                            ; ===========================================================================
0001A11E                            
0001A11E                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A11E 217C 0001 8906 0004        		move.l	#Map_BossItems,4(a0)
0001A126 317C 246C 0002             		move.w	#$246C,2(a0)
0001A12C 117C 0005 001A             		move.b	#5,$1A(a0)
0001A132 2268 0034                  		movea.l	$34(a0),a1
0001A136 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A13C 6600                       		bne.s	loc_1961C
0001A13E 4A28 0001                  		tst.b	1(a0)
0001A142 6A00                       		bpl.s	Obj75_SpikeDelete
0001A144                            
0001A144                            loc_1961C:
0001A144 3169 0008 0008             		move.w	8(a1),8(a0)
0001A14A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A150 3028 003C                  		move.w	$3C(a0),d0
0001A154 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A15A 6600                       		bne.s	loc_19652
0001A15C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A162 6700                       		beq.s	loc_1964C
0001A164 4A29 0028                  		tst.b	$28(a1)
0001A168 6600                       		bne.s	loc_19658
0001A16A 0C40 0094                  		cmpi.w	#$94,d0
0001A16E 6C00                       		bge.s	loc_19658
0001A170 5E40                       		addq.w	#7,d0
0001A172 6000                       		bra.s	loc_19658
0001A174                            ; ===========================================================================
0001A174                            
0001A174                            loc_1964C:
0001A174 4A69 003C                  		tst.w	$3C(a1)
0001A178 6A00                       		bpl.s	loc_19658
0001A17A                            
0001A17A                            loc_19652:
0001A17A 4A40                       		tst.w	d0
0001A17C 6F00                       		ble.s	loc_19658
0001A17E 5B40                       		subq.w	#5,d0
0001A180                            
0001A180                            loc_19658:
0001A180 3140 003C                  		move.w	d0,$3C(a0)
0001A184 E440                       		asr.w	#2,d0
0001A186 D168 000C                  		add.w	d0,$C(a0)
0001A18A 117C 0008 0019             		move.b	#8,$19(a0)
0001A190 117C 000C 0016             		move.b	#$C,$16(a0)
0001A196 4228 0020                  		clr.b	$20(a0)
0001A19A 2268 0034                  		movea.l	$34(a0),a1
0001A19E 4A29 0020                  		tst.b	$20(a1)
0001A1A2 6700                       		beq.s	loc_19688
0001A1A4 4A29 0029                  		tst.b	$29(a1)
0001A1A8 6600                       		bne.s	loc_19688
0001A1AA 117C 0084 0020             		move.b	#$84,$20(a0)
0001A1B0                            
0001A1B0                            loc_19688:
0001A1B0 6000 FF50                  		bra.w	loc_195DA
0001A1B4                            ; ===========================================================================
0001A1B4                            
0001A1B4                            Obj75_SpikeDelete:
0001A1B4 4EF9 0000 DDBE             		jmp	DeleteObject
0001A1BA                            ; ===========================================================================
0001A1BA                            ; ---------------------------------------------------------------------------
0001A1BA                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A1BA                            ; ---------------------------------------------------------------------------
0001A1BA                            
0001A1BA                            Obj76:					; XREF: Obj_Index
0001A1BA 7000                       		moveq	#0,d0
0001A1BC 1028 0024                  		move.b	$24(a0),d0
0001A1C0 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A1C4 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A1C8                            ; ===========================================================================
0001A1C8 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A1CA 0000                       		dc.w Obj76_Action-Obj76_Index
0001A1CC 0000                       		dc.w loc_19762-Obj76_Index
0001A1CE                            ; ===========================================================================
0001A1CE                            
0001A1CE                            Obj76_Main:				; XREF: Obj76_Index
0001A1CE 7800                       		moveq	#0,d4
0001A1D0 3A3C 2C10                  		move.w	#$2C10,d5
0001A1D4 7C09                       		moveq	#9,d6
0001A1D6 43D0                       		lea	(a0),a1
0001A1D8 6000                       		bra.s	Obj76_MakeBlock
0001A1DA                            ; ===========================================================================
0001A1DA                            
0001A1DA                            Obj76_Loop:
0001A1DA 4EB9 0000 E20E             		jsr	SingleObjLoad
0001A1E0 6600                       		bne.s	Obj76_ExitLoop
0001A1E2                            
0001A1E2                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A1E2 12BC 0076                  		move.b	#$76,(a1)
0001A1E6 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1EE 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1F4 137C 0004 0001             		move.b	#4,1(a1)
0001A1FA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A200 137C 0010 0016             		move.b	#$10,$16(a1)
0001A206 137C 0003 0018             		move.b	#3,$18(a1)
0001A20C 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A210 337C 0582 000C             		move.w	#$582,$C(a1)
0001A216 3344 0028                  		move.w	d4,$28(a1)
0001A21A 0644 0101                  		addi.w	#$101,d4
0001A21E 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A222 5429 0024                  		addq.b	#2,$24(a1)
0001A226 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A22A                            
0001A22A                            Obj76_ExitLoop:
0001A22A 4E75                       		rts	
0001A22C                            ; ===========================================================================
0001A22C                            
0001A22C                            Obj76_Action:				; XREF: Obj76_Index
0001A22C 1028 0029                  		move.b	$29(a0),d0
0001A230 B028 0028                  		cmp.b	$28(a0),d0
0001A234 6700                       		beq.s	Obj76_Solid
0001A236 4A00                       		tst.b	d0
0001A238 6B00                       		bmi.s	loc_19718
0001A23A                            
0001A23A                            loc_19712:
0001A23A 6100 0000                  		bsr.w	Obj76_Break
0001A23E 6000                       		bra.s	Obj76_Display
0001A240                            ; ===========================================================================
0001A240                            
0001A240                            loc_19718:
0001A240 2268 0034                  		movea.l	$34(a0),a1
0001A244 4A29 0021                  		tst.b	$21(a1)
0001A248 67F0                       		beq.s	loc_19712
0001A24A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A250 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A256 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A25C B2C8                       		cmpa.w	a0,a1
0001A25E 6500                       		bcs.s	Obj76_Display
0001A260 3029 0012                  		move.w	$12(a1),d0
0001A264 48C0                       		ext.l	d0
0001A266 E080                       		asr.l	#8,d0
0001A268 D168 000C                  		add.w	d0,$C(a0)
0001A26C 6000                       		bra.s	Obj76_Display
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            Obj76_Solid:				; XREF: Obj76_Action
0001A26E 323C 001B                  		move.w	#$1B,d1
0001A272 343C 0010                  		move.w	#$10,d2
0001A276 363C 0011                  		move.w	#$11,d3
0001A27A 3828 0008                  		move.w	8(a0),d4
0001A27E 4EB9 0001 0154             		jsr	SolidObject
0001A284                            
0001A284                            Obj76_Display:				; XREF: Obj76_Action
0001A284 4EF9 0000 DD82             		jmp	DisplaySprite
0001A28A                            ; ===========================================================================
0001A28A                            
0001A28A                            loc_19762:				; XREF: Obj76_Index
0001A28A 4A28 0001                  		tst.b	1(a0)
0001A28E 6A00                       		bpl.s	Obj76_Delete
0001A290 4EB9 0000 DD30             		jsr	ObjectFall
0001A296 4EF9 0000 DD82             		jmp	DisplaySprite
0001A29C                            ; ===========================================================================
0001A29C                            
0001A29C                            Obj76_Delete:
0001A29C 4EF9 0000 DDBE             		jmp	DeleteObject
0001A2A2                            
0001A2A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A2A2                            
0001A2A2                            
0001A2A2                            Obj76_Break:				; XREF: Obj76_Action
0001A2A2 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A2A6 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A2AA 7801                       		moveq	#1,d4
0001A2AC 7203                       		moveq	#3,d1
0001A2AE 7438                       		moveq	#$38,d2
0001A2B0 5428 0024                  		addq.b	#2,$24(a0)
0001A2B4 117C 0008 0019             		move.b	#8,$19(a0)
0001A2BA 117C 0008 0016             		move.b	#8,$16(a0)
0001A2C0 43D0                       		lea	(a0),a1
0001A2C2 6000                       		bra.s	Obj76_MakeFrag
0001A2C4                            ; ===========================================================================
0001A2C4                            
0001A2C4                            Obj76_LoopFrag:
0001A2C4 4EB9 0000 E224             		jsr	SingleObjLoad2
0001A2CA 6600                       		bne.s	loc_197D4
0001A2CC                            
0001A2CC                            Obj76_MakeFrag:
0001A2CC 45D0                       		lea	(a0),a2
0001A2CE 47D1                       		lea	(a1),a3
0001A2D0 7603                       		moveq	#3,d3
0001A2D2                            
0001A2D2                            loc_197AA:
0001A2D2 26DA                       		move.l	(a2)+,(a3)+
0001A2D4 26DA                       		move.l	(a2)+,(a3)+
0001A2D6 26DA                       		move.l	(a2)+,(a3)+
0001A2D8 26DA                       		move.l	(a2)+,(a3)+
0001A2DA 51CB FFF6                  		dbf	d3,loc_197AA
0001A2DE                            
0001A2DE 335C 0010                  		move.w	(a4)+,$10(a1)
0001A2E2 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2E6 361D                       		move.w	(a5)+,d3
0001A2E8 D769 0008                  		add.w	d3,8(a1)
0001A2EC 361D                       		move.w	(a5)+,d3
0001A2EE D769 000C                  		add.w	d3,$C(a1)
0001A2F2 1344 001A                  		move.b	d4,$1A(a1)
0001A2F6 5244                       		addq.w	#1,d4
0001A2F8 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A2FC                            
0001A2FC                            loc_197D4:
0001A2FC 303C 00CB                  		move.w	#$CB,d0
0001A300 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A306                            ; End of function Obj76_Break
0001A306                            
0001A306                            ; ===========================================================================
0001A306 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A30A 0180 FE00                  		dc.w $180, $FE00
0001A30E FF00 FF00                  		dc.w $FF00, $FF00
0001A312 0100 FF00                  		dc.w $100, $FF00
0001A316 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A31A 0010 0000                  		dc.w $10, 0
0001A31E 0000 0010                  		dc.w 0,	$10
0001A322 0010 0010                  		dc.w $10, $10
0001A326                            ; ---------------------------------------------------------------------------
0001A326                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A326                            ; ---------------------------------------------------------------------------
0001A326                            Map_obj76:
0001A326                            	include "_maps\obj76.asm"
0001A326                            ; ---------------------------------------------------------------------------
0001A326                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A326                            ; ---------------------------------------------------------------------------
0001A326 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A32A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A32E 0000                       		dc.w byte_19826-Map_obj76
0001A330 02                         byte_19808:	dc.b 2
0001A331 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A336 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A33B 00                         		dc.b 0
0001A33C 01                         byte_19814:	dc.b 1
0001A33D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A342 01                         byte_1981A:	dc.b 1
0001A343 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A348 01                         byte_19820:	dc.b 1
0001A349 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A34E 01                         byte_19826:	dc.b 1
0001A34F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A354                            		even
0001A354                            		even
0001A354                            
0001A354                            ; ===========================================================================
0001A354                            
0001A354                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A354 4EF9 0000 DDBE             		jmp	DeleteObject
0001A35A                            ; ===========================================================================
0001A35A                            ; ---------------------------------------------------------------------------
0001A35A                            ; Object 82 - Eggman (SBZ2)
0001A35A                            ; ---------------------------------------------------------------------------
0001A35A                            
0001A35A                            Obj82:					; XREF: Obj_Index
0001A35A 7000                       		moveq	#0,d0
0001A35C 1028 0024                  		move.b	$24(a0),d0
0001A360 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A364 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A368                            ; ===========================================================================
0001A368 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A36A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A36C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A36E                            
0001A36E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A371 0400 03                    		dc.b 4,	0, 3
0001A374                            ; ===========================================================================
0001A374                            
0001A374                            Obj82_Main:				; XREF: Obj82_Index
0001A374 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A378 317C 2160 0008             		move.w	#$2160,8(a0)
0001A37E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A384 117C 000F 0020             		move.b	#$F,$20(a0)
0001A38A 117C 0010 0021             		move.b	#$10,$21(a0)
0001A390 08A8 0000 0022             		bclr	#0,$22(a0)
0001A396 4228 0025                  		clr.b	$25(a0)
0001A39A 115A 0024                  		move.b	(a2)+,$24(a0)
0001A39E 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A3A2 115A 0018                  		move.b	(a2)+,$18(a0)
0001A3A6 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A3AE 317C 0400 0002             		move.w	#$400,2(a0)
0001A3B4 117C 0004 0001             		move.b	#4,1(a0)
0001A3BA 08E8 0007 0001             		bset	#7,1(a0)
0001A3C0 117C 0020 0019             		move.b	#$20,$19(a0)
0001A3C6 4EB9 0000 E224             		jsr	SingleObjLoad2
0001A3CC 6600                       		bne.s	Obj82_Eggman
0001A3CE 2348 0034                  		move.l	a0,$34(a1)
0001A3D2 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A3D6 337C 2130 0008             		move.w	#$2130,8(a1)
0001A3DC 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A3E2 4228 0025                  		clr.b	$25(a0)
0001A3E6 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3EA 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3EE 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3F2 237C 0000 C608 0004        		move.l	#Map_obj32,4(a1)
0001A3FA 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A400 137C 0004 0001             		move.b	#4,1(a1)
0001A406 08E9 0007 0001             		bset	#7,1(a1)
0001A40C 137C 0010 0019             		move.b	#$10,$19(a1)
0001A412 137C 0000 001A             		move.b	#0,$1A(a1)
0001A418                            
0001A418                            Obj82_Eggman:				; XREF: Obj82_Index
0001A418 7000                       		moveq	#0,d0
0001A41A 1028 0025                  		move.b	$25(a0),d0
0001A41E 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A422 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A426 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A42A 4EB9 0000 AE7A             		jsr	AnimateSprite
0001A430 4EF9 0000 DD82             		jmp	DisplaySprite
0001A436                            ; ===========================================================================
0001A436 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A438 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A43A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A43C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A43E                            ; ===========================================================================
0001A43E                            
0001A43E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A43E 3028 0008                  		move.w	8(a0),d0
0001A442 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A446 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A44A 6400                       		bcc.s	loc_19934	; if not, branch
0001A44C 5428 0025                  		addq.b	#2,$25(a0)
0001A450 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A456 117C 0001 001C             		move.b	#1,$1C(a0)
0001A45C                            
0001A45C                            loc_19934:				; XREF: Obj82_EggIndex
0001A45C 4EF9 0000 DD5C             		jmp	SpeedToPos
0001A462                            ; ===========================================================================
0001A462                            
0001A462                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A462 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A466 6600                       		bne.s	loc_19954	; if time remains, branch
0001A468 5428 0025                  		addq.b	#2,$25(a0)
0001A46C 117C 0002 001C             		move.b	#2,$1C(a0)
0001A472 5868 000C                  		addq.w	#4,$C(a0)
0001A476 317C 000F 003C             		move.w	#15,$3C(a0)
0001A47C                            
0001A47C                            loc_19954:
0001A47C 60DE                       		bra.s	loc_19934
0001A47E                            ; ===========================================================================
0001A47E                            
0001A47E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A47E 5368 003C                  		subq.w	#1,$3C(a0)
0001A482 6E00                       		bgt.s	loc_199D0
0001A484 6600                       		bne.s	loc_1996A
0001A486 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A48C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A492                            
0001A492                            loc_1996A:
0001A492 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A498 6E00                       		bgt.s	loc_19976
0001A49A 4268 0010                  		clr.w	$10(a0)
0001A49E                            
0001A49E                            loc_19976:
0001A49E 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A4A4 4A68 0012                  		tst.w	$12(a0)
0001A4A8 6B00                       		bmi.s	Obj82_FindBlocks
0001A4AA 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A4B0 6500                       		bcs.s	Obj82_FindBlocks
0001A4B2 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A4B8 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A4BE 6500                       		bcs.s	Obj82_FindBlocks
0001A4C0 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A4C6 4268 0012                  		clr.w	$12(a0)
0001A4CA                            
0001A4CA                            Obj82_FindBlocks:
0001A4CA 3028 0010                  		move.w	$10(a0),d0
0001A4CE 8068 0012                  		or.w	$12(a0),d0
0001A4D2 6600                       		bne.s	loc_199D0
0001A4D4 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A4D8 703E                       		moveq	#$3E,d0
0001A4DA 7240                       		moveq	#$40,d1
0001A4DC                            
0001A4DC                            Obj82_FindLoop:	
0001A4DC D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A4DE 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A4E2 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A4E6                            
0001A4E6 6600                       		bne.s	loc_199D0
0001A4E8 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4EE 5428 0025                  		addq.b	#2,$25(a0)
0001A4F2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4F8                            
0001A4F8                            loc_199D0:
0001A4F8 6000 FF62                  		bra.w	loc_19934
0001A4FC                            ; ===========================================================================
0001A4FC                            
0001A4FC                            Obj82_Switch:				; XREF: Obj82_Index
0001A4FC 7000                       		moveq	#0,d0
0001A4FE 1028 0025                  		move.b	$25(a0),d0
0001A502 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A506 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A50A                            ; ===========================================================================
0001A50A 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A50C 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A50E                            ; ===========================================================================
0001A50E                            
0001A50E                            loc_199E6:				; XREF: Obj82_SwIndex
0001A50E 2268 0034                  		movea.l	$34(a0),a1
0001A512 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A518 6600                       		bne.s	Obj82_SwDisplay
0001A51A 117C 0001 001A             		move.b	#1,$1A(a0)
0001A520 5428 0025                  		addq.b	#2,$25(a0)
0001A524                            
0001A524                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A524 4EF9 0000 DD82             		jmp	DisplaySprite
0001A52A                            ; ===========================================================================
0001A52A                            Ani_obj82:
0001A52A                            	include "_anim\obj82.asm"
0001A52A                            ; ---------------------------------------------------------------------------
0001A52A                            ; Animation script - Eggman (SBZ2)
0001A52A                            ; ---------------------------------------------------------------------------
0001A52A 0000                       		dc.w byte_19A10-Ani_obj82
0001A52C 0000                       		dc.w byte_19A14-Ani_obj82
0001A52E 0000                       		dc.w byte_19A18-Ani_obj82
0001A530 0000                       		dc.w byte_19A20-Ani_obj82
0001A532 0000                       		dc.w byte_19A24-Ani_obj82
0001A534 0000                       		dc.w byte_19A2A-Ani_obj82
0001A536 0000                       		dc.w byte_19A30-Ani_obj82
0001A538 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A53C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A540 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A548 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A54C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A552 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A558 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A55C                            		even
0001A55C                            		even
0001A55C                            
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C                            ; Sprite mappings - Eggman (SBZ2)
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C                            Map_obj82:
0001A55C                            	include "_maps\obj82.asm"
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C                            ; Sprite mappings - Eggman (SBZ2)
0001A55C                            ; ---------------------------------------------------------------------------
0001A55C 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001A560 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001A564 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001A568 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001A56C 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001A570 0000                       		dc.w byte_19B4F-Map_obj82
0001A572 03                         byte_19A4A:	dc.b 3
0001A573 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001A578 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A57D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A582 04                         byte_19A5A:	dc.b 4
0001A583 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001A588 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A58D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A592 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001A597 00                         		dc.b 0
0001A598 04                         byte_19A70:	dc.b 4
0001A599 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001A59E E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001A5A3 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001A5A8 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001A5AD 00                         		dc.b 0
0001A5AE 04                         byte_19A86:	dc.b 4
0001A5AF F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001A5B4 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001A5B9 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001A5BE EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001A5C3 00                         		dc.b 0
0001A5C4 04                         byte_19A9C:	dc.b 4
0001A5C5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001A5CA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001A5CF 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001A5D4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A5D9 00                         		dc.b 0
0001A5DA 04                         byte_19AB2:	dc.b 4
0001A5DB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001A5E0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001A5E5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A5EA 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A5EF 00                         		dc.b 0
0001A5F0 07                         byte_19AC8:	dc.b 7
0001A5F1 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001A5F6 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001A5FB 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001A600 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001A605 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001A60A F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001A60F F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001A614 05                         byte_19AEC:	dc.b 5
0001A615 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001A61A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001A61F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001A624 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001A629 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A62E 06                         byte_19B06:	dc.b 6
0001A62F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001A634 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001A639 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001A63E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001A643 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001A648 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001A64D 00                         		dc.b 0
0001A64E 08                         byte_19B26:	dc.b 8
0001A64F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001A654 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001A659 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A65E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A663 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001A668 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001A66D 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001A672 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001A677 03                         byte_19B4F:	dc.b 3
0001A678 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001A67D F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001A682 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001A688 00                         		even
0001A688 00                         		even
0001A688                            
0001A688                            ; ===========================================================================
0001A688                            ; ---------------------------------------------------------------------------
0001A688                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A688                            ; ---------------------------------------------------------------------------
0001A688                            
0001A688                            Obj83:					; XREF: Obj_Index
0001A688 7000                       		moveq	#0,d0
0001A68A 1028 0024                  		move.b	$24(a0),d0
0001A68E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A692 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A696                            ; ===========================================================================
0001A696 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A698 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A69A 0000                       		dc.w loc_19C36-Obj83_Index
0001A69C 0000                       		dc.w loc_19C62-Obj83_Index
0001A69E 0000                       		dc.w loc_19C72-Obj83_Index
0001A6A0 0000                       		dc.w loc_19C80-Obj83_Index
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            Obj83_Main:				; XREF: Obj83_Index
0001A6A2 317C 2080 0008             		move.w	#$2080,8(a0)
0001A6A8 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A6AE 117C 0080 0019             		move.b	#$80,$19(a0)
0001A6B4 117C 0010 0016             		move.b	#$10,$16(a0)
0001A6BA 117C 0004 0001             		move.b	#4,1(a0)
0001A6C0 08E8 0007 0001             		bset	#7,1(a0)
0001A6C6 7800                       		moveq	#0,d4
0001A6C8 3A3C 2010                  		move.w	#$2010,d5
0001A6CC 7C07                       		moveq	#7,d6
0001A6CE 45E8 0030                  		lea	$30(a0),a2
0001A6D2                            
0001A6D2                            Obj83_MakeBlock:
0001A6D2 4EB9 0000 E20E             		jsr	SingleObjLoad
0001A6D8 6600                       		bne.s	Obj83_ExitMake
0001A6DA 34C9                       		move.w	a1,(a2)+
0001A6DC 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A6E0 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A6E8 337C 4518 0002             		move.w	#$4518,2(a1)
0001A6EE 137C 0004 0001             		move.b	#4,1(a1)
0001A6F4 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6FA 137C 0010 0016             		move.b	#$10,$16(a1)
0001A700 137C 0003 0018             		move.b	#3,$18(a1)
0001A706 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A70A 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A710 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A714 137C 0008 0024             		move.b	#8,$24(a1)
0001A71A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A71E                            
0001A71E                            Obj83_ExitMake:
0001A71E 5428 0024                  		addq.b	#2,$24(a0)
0001A722 4E75                       		rts	
0001A724                            ; ===========================================================================
0001A724                            
0001A724                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A724 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A72A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A72C 4228 001A                  		clr.b	$1A(a0)
0001A730 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A734                            
0001A734                            Obj83_Solid:
0001A734 7000                       		moveq	#0,d0
0001A736 1028 001A                  		move.b	$1A(a0),d0
0001A73A 4400                       		neg.b	d0
0001A73C 4880                       		ext.w	d0
0001A73E 5040                       		addq.w	#8,d0
0001A740 E940                       		asl.w	#4,d0
0001A742 383C 2100                  		move.w	#$2100,d4
0001A746 9840                       		sub.w	d0,d4
0001A748 1140 0019                  		move.b	d0,$19(a0)
0001A74C 3144 0008                  		move.w	d4,8(a0)
0001A750 720B                       		moveq	#$B,d1
0001A752 D240                       		add.w	d0,d1
0001A754 7410                       		moveq	#$10,d2
0001A756 7611                       		moveq	#$11,d3
0001A758 4EF9 0001 0154             		jmp	SolidObject
0001A75E                            ; ===========================================================================
0001A75E                            
0001A75E                            loc_19C36:				; XREF: Obj83_Index
0001A75E 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A764 6400                       		bcc.s	Obj83_Solid2
0001A766 70FF                       		moveq	#-1,d0
0001A768 1028 001A                  		move.b	$1A(a0),d0
0001A76C 4880                       		ext.w	d0
0001A76E D040                       		add.w	d0,d0
0001A770 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A774 2240                       		movea.l	d0,a1
0001A776 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A77C 5228 001A                  		addq.b	#1,$1A(a0)
0001A780 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A786 6700                       		beq.s	loc_19C62
0001A788                            
0001A788                            Obj83_Solid2:
0001A788 60AA                       		bra.s	Obj83_Solid
0001A78A                            ; ===========================================================================
0001A78A                            
0001A78A                            loc_19C62:				; XREF: Obj83_Index
0001A78A 08A8 0003 0022             		bclr	#3,$22(a0)
0001A790 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A796 6000 FBBC                  		bra.w	loc_1982C
0001A79A                            ; ===========================================================================
0001A79A                            
0001A79A                            loc_19C72:				; XREF: Obj83_Index
0001A79A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A7A0 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A7A2 4EF9 0000 DD82             		jmp	DisplaySprite
0001A7A8                            ; ===========================================================================
0001A7A8                            
0001A7A8                            loc_19C80:				; XREF: Obj83_Index
0001A7A8 4A28 0001                  		tst.b	1(a0)
0001A7AC 6A00 FBA6                  		bpl.w	loc_1982C
0001A7B0 4EB9 0000 DD30             		jsr	ObjectFall
0001A7B6 4EF9 0000 DD82             		jmp	DisplaySprite
0001A7BC                            ; ===========================================================================
0001A7BC                            
0001A7BC                            Obj83_Break:				; XREF: loc_19C72
0001A7BC 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A7C0 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A7C4 7801                       		moveq	#1,d4
0001A7C6 7203                       		moveq	#3,d1
0001A7C8 7438                       		moveq	#$38,d2
0001A7CA 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001A7D0 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001A7D6 5428 0024                  		addq.b	#2,$24(a0)
0001A7DA 117C 0008 0019             		move.b	#8,$19(a0)
0001A7E0 117C 0008 0016             		move.b	#8,$16(a0)
0001A7E6 43D0                       		lea	(a0),a1
0001A7E8 6000                       		bra.s	Obj83_MakeFrag
0001A7EA                            ; ===========================================================================
0001A7EA                            
0001A7EA                            Obj83_LoopFrag:
0001A7EA 4EB9 0000 E224             		jsr	SingleObjLoad2
0001A7F0 6600                       		bne.s	Obj83_BreakSnd
0001A7F2                            
0001A7F2                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A7F2 45D0                       		lea	(a0),a2
0001A7F4 47D1                       		lea	(a1),a3
0001A7F6 7603                       		moveq	#3,d3
0001A7F8                            
0001A7F8                            loc_19CC4:
0001A7F8 26DA                       		move.l	(a2)+,(a3)+
0001A7FA 26DA                       		move.l	(a2)+,(a3)+
0001A7FC 26DA                       		move.l	(a2)+,(a3)+
0001A7FE 26DA                       		move.l	(a2)+,(a3)+
0001A800 51CB FFF6                  		dbf	d3,loc_19CC4
0001A804                            
0001A804 335C 0012                  		move.w	(a4)+,$12(a1)
0001A808 361D                       		move.w	(a5)+,d3
0001A80A D769 0008                  		add.w	d3,8(a1)
0001A80E 361D                       		move.w	(a5)+,d3
0001A810 D769 000C                  		add.w	d3,$C(a1)
0001A814 1344 001A                  		move.b	d4,$1A(a1)
0001A818 5244                       		addq.w	#1,d4
0001A81A 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A81E                            
0001A81E                            Obj83_BreakSnd:
0001A81E 303C 00CB                  		move.w	#$CB,d0
0001A822 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A828 4EF9 0000 DD82             		jmp	DisplaySprite
0001A82E                            ; ===========================================================================
0001A82E 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A832 0120 00C0                  		dc.w $120, $C0
0001A836 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A83A 0010 0000                  		dc.w $10, 0
0001A83E 0000 0010                  		dc.w 0,	$10
0001A842 0010 0010                  		dc.w $10, $10
0001A846                            ; ---------------------------------------------------------------------------
0001A846                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A846                            ; ---------------------------------------------------------------------------
0001A846                            Map_obj83:
0001A846                            	include "_maps\obj83.asm"
0001A846                            ; ---------------------------------------------------------------------------
0001A846                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A846                            ; ---------------------------------------------------------------------------
0001A846 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A84A 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A84E 0000                       		dc.w byte_19D46-Map_obj83
0001A850 01                         byte_19D1C:	dc.b 1
0001A851 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A856 02                         byte_19D22:	dc.b 2
0001A857 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A85C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A861 00                         		dc.b 0
0001A862 02                         byte_19D2E:	dc.b 2
0001A863 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A868 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A86D 00                         		dc.b 0
0001A86E 02                         byte_19D3A:	dc.b 2
0001A86F F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A874 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A879 00                         		dc.b 0
0001A87A 02                         byte_19D46:	dc.b 2
0001A87B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A880 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A886 00                         		even
0001A886 00                         		even
0001A886                            
0001A886                            ; ===========================================================================
0001A886                            ; ---------------------------------------------------------------------------
0001A886                            ; Object 85 - Eggman (FZ)
0001A886                            ; ---------------------------------------------------------------------------
0001A886                            
0001A886                            Obj85_Delete:
0001A886 4EF9 0000 DDBE             		jmp	DeleteObject
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            Obj85:					; XREF: Obj_Index
0001A88C 7000                       		moveq	#0,d0
0001A88E 1028 0024                  		move.b	$24(a0),d0
0001A892 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A896 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A89A                            ; ===========================================================================
0001A89A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A89C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A89E 0000                       		dc.w loc_1A38E-Obj85_Index
0001A8A0 0000                       		dc.w loc_1A346-Obj85_Index
0001A8A2 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A8A4 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A8A6 0000                       		dc.w loc_1A264-Obj85_Index
0001A8A8                            
0001A8A8 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A8AE 0001 A55C                  		dc.l Map_obj82		; mappings pointer
0001A8B2 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A8B8 0000 0000                  		dc.l Map_obj84
0001A8BC 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A8C2 0000 0000                  		dc.l Map_FZBoss
0001A8C6 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A8CC 0001 A55C                  		dc.l Map_obj82
0001A8D0 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A8D6 0001 883E                  		dc.l Map_Eggman
0001A8DA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A8E0 0001 883E                  		dc.l Map_Eggman
0001A8E4                            
0001A8E4 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A8E9 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A8EE 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A8F3 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A8F8 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A8FD 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A902                            ; ===========================================================================
0001A902                            
0001A902                            Obj85_Main:				; XREF: Obj85_Index
0001A902 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A906 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A90A 2248                       		movea.l	a0,a1
0001A90C 7205                       		moveq	#5,d1
0001A90E 6000                       		bra.s	Obj85_LoadBoss
0001A910                            ; ===========================================================================
0001A910                            
0001A910                            Obj85_Loop:
0001A910 4EB9 0000 E224             		jsr	SingleObjLoad2
0001A916 6600                       		bne.s	loc_19E20
0001A918                            
0001A918                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A918 12BC 0085                  		move.b	#$85,(a1)
0001A91C 335A 0008                  		move.w	(a2)+,8(a1)
0001A920 335A 000C                  		move.w	(a2)+,$C(a1)
0001A924 335A 0002                  		move.w	(a2)+,2(a1)
0001A928 235A 0004                  		move.l	(a2)+,4(a1)
0001A92C 135B 0024                  		move.b	(a3)+,$24(a1)
0001A930 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A934 135B 0018                  		move.b	(a3)+,$18(a1)
0001A938 135B 0017                  		move.b	(a3)+,$17(a1)
0001A93C 135B 0016                  		move.b	(a3)+,$16(a1)
0001A940 137C 0004 0001             		move.b	#4,1(a1)
0001A946 08E8 0007 0001             		bset	#7,1(a0)
0001A94C 2348 0034                  		move.l	a0,$34(a1)
0001A950 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A954                            
0001A954                            loc_19E20:
0001A954 45E8 0036                  		lea	$36(a0),a2
0001A958 4EB9 0000 E20E             		jsr	SingleObjLoad
0001A95E 6600                       		bne.s	loc_19E5A
0001A960 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A964 3489                       		move.w	a1,(a2)
0001A966 2348 0034                  		move.l	a0,$34(a1)
0001A96A 45E8 0038                  		lea	$38(a0),a2
0001A96E 7400                       		moveq	#0,d2
0001A970 7203                       		moveq	#3,d1
0001A972                            
0001A972                            loc_19E3E:
0001A972 4EB9 0000 E224             		jsr	SingleObjLoad2
0001A978 6600                       		bne.s	loc_19E5A
0001A97A 34C9                       		move.w	a1,(a2)+
0001A97C 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A980 2348 0034                  		move.l	a0,$34(a1)
0001A984 1342 0028                  		move.b	d2,$28(a1)
0001A988 5442                       		addq.w	#2,d2
0001A98A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A98E                            
0001A98E                            loc_19E5A:
0001A98E 317C 0000 0034             		move.w	#0,$34(a0)
0001A994 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A99A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A9A0                            
0001A9A0                            Obj85_Eggman:				; XREF: Obj85_Index
0001A9A0 7000                       		moveq	#0,d0
0001A9A2 1028 0034                  		move.b	$34(a0),d0
0001A9A6 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A9AA 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A9AE 4EF9 0000 DD82             		jmp	DisplaySprite
0001A9B4                            ; ===========================================================================
0001A9B4 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A9B8 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A9BC 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A9C0 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A9C4                            ; ===========================================================================
0001A9C4                            
0001A9C4                            loc_19E90:				; XREF: off_19E80
0001A9C4 4AB8 F680                  		tst.l	($FFFFF680).w
0001A9C8 6600                       		bne.s	loc_19EA2
0001A9CA 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A9D0 6500                       		bcs.s	loc_19EA2
0001A9D2 5428 0034                  		addq.b	#2,$34(a0)
0001A9D6                            
0001A9D6                            loc_19EA2:
0001A9D6 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A9DA 4E75                       		rts	
0001A9DC                            ; ===========================================================================
0001A9DC                            
0001A9DC                            loc_19EA8:				; XREF: off_19E80
0001A9DC 4A68 0030                  		tst.w	$30(a0)
0001A9E0 6A00                       		bpl.s	loc_19F10
0001A9E2 4268 0030                  		clr.w	$30(a0)
0001A9E6 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001A9EC 0240 000C                  		andi.w	#$C,d0
0001A9F0 3200                       		move.w	d0,d1
0001A9F2 5441                       		addq.w	#2,d1
0001A9F4 4A80                       		tst.l	d0
0001A9F6 6A00                       		bpl.s	loc_19EC6
0001A9F8 C141                       		exg	d1,d0
0001A9FA                            
0001A9FA                            loc_19EC6:
0001A9FA 43FA 0000                  		lea	word_19FD6(pc),a1
0001A9FE 3031 0000                  		move.w	(a1,d0.w),d0
0001AA02 3231 1000                  		move.w	(a1,d1.w),d1
0001AA06 3140 0030                  		move.w	d0,$30(a0)
0001AA0A 74FF                       		moveq	#-1,d2
0001AA0C 3430 0038                  		move.w	$38(a0,d0.w),d2
0001AA10 2242                       		movea.l	d2,a1
0001AA12 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AA18 337C FFFF 0030             		move.w	#-1,$30(a1)
0001AA1E 3430 1038                  		move.w	$38(a0,d1.w),d2
0001AA22 2242                       		movea.l	d2,a1
0001AA24 137C 0001 0029             		move.b	#1,$29(a1)
0001AA2A 337C 0000 0030             		move.w	#0,$30(a1)
0001AA30 317C 0001 0032             		move.w	#1,$32(a0)
0001AA36 4228 0035                  		clr.b	$35(a0)
0001AA3A 303C 00B7                  		move.w	#$B7,d0
0001AA3E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AA44                            
0001AA44                            loc_19F10:
0001AA44 4A68 0032                  		tst.w	$32(a0)
0001AA48 6B00 0000                  		bmi.w	loc_19FA6
0001AA4C 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA52 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA56 9068 0008                  		sub.w	8(a0),d0
0001AA5A 6500                       		bcs.s	loc_19F2E
0001AA5C 08E8 0000 0022             		bset	#0,$22(a0)
0001AA62                            
0001AA62                            loc_19F2E:
0001AA62 323C 002B                  		move.w	#$2B,d1
0001AA66 343C 0014                  		move.w	#$14,d2
0001AA6A 363C 0014                  		move.w	#$14,d3
0001AA6E 3828 0008                  		move.w	8(a0),d4
0001AA72 4EB9 0001 0154             		jsr	SolidObject
0001AA78 4A44                       		tst.w	d4
0001AA7A 6E00                       		bgt.s	loc_19F50
0001AA7C                            
0001AA7C                            loc_19F48:
0001AA7C 4A28 0035                  		tst.b	$35(a0)
0001AA80 6600                       		bne.s	loc_19F88
0001AA82 6000                       		bra.s	loc_19F96
0001AA84                            ; ===========================================================================
0001AA84                            
0001AA84                            loc_19F50:
0001AA84 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001AA88 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001AA8E 66EC                       		bne.s	loc_19F48
0001AA90 303C 0300                  		move.w	#$300,d0
0001AA94 0828 0000 0022             		btst	#0,$22(a0)
0001AA9A 6600                       		bne.s	loc_19F6A
0001AA9C 4440                       		neg.w	d0
0001AA9E                            
0001AA9E                            loc_19F6A:
0001AA9E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001AAA2 4A28 0035                  		tst.b	$35(a0)
0001AAA6 6600                       		bne.s	loc_19F88
0001AAA8 5328 0021                  		subq.b	#1,$21(a0)
0001AAAC 117C 0064 0035             		move.b	#$64,$35(a0)
0001AAB2 303C 00AC                  		move.w	#$AC,d0
0001AAB6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AABC                            
0001AABC                            loc_19F88:
0001AABC 5328 0035                  		subq.b	#1,$35(a0)
0001AAC0 6700                       		beq.s	loc_19F96
0001AAC2 117C 0003 001C             		move.b	#3,$1C(a0)
0001AAC8 6000                       		bra.s	loc_19F9C
0001AACA                            ; ===========================================================================
0001AACA                            
0001AACA                            loc_19F96:
0001AACA 117C 0001 001C             		move.b	#1,$1C(a0)
0001AAD0                            
0001AAD0                            loc_19F9C:
0001AAD0 43FA FA58                  		lea	Ani_obj82(pc),a1
0001AAD4 4EF9 0000 AE7A             		jmp	AnimateSprite
0001AADA                            ; ===========================================================================
0001AADA                            
0001AADA                            loc_19FA6:
0001AADA 4A28 0021                  		tst.b	$21(a0)
0001AADE 6700                       		beq.s	loc_19FBC
0001AAE0 5428 0034                  		addq.b	#2,$34(a0)
0001AAE4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AAEA 4268 0032                  		clr.w	$32(a0)
0001AAEE 4E75                       		rts	
0001AAF0                            ; ===========================================================================
0001AAF0                            
0001AAF0                            loc_19FBC:
0001AAF0 117C 0006 0034             		move.b	#6,$34(a0)
0001AAF6 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AAFC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AB02 117C 0014 0016             		move.b	#$14,$16(a0)
0001AB08 4E75                       		rts	
0001AB0A                            ; ===========================================================================
0001AB0A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AB1A                            ; ===========================================================================
0001AB1A                            
0001AB1A                            loc_19FE6:				; XREF: off_19E80
0001AB1A 70FF                       		moveq	#-1,d0
0001AB1C 3028 0036                  		move.w	$36(a0),d0
0001AB20 2240                       		movea.l	d0,a1
0001AB22 4A68 0030                  		tst.w	$30(a0)
0001AB26 6A00                       		bpl.s	loc_1A000
0001AB28 4268 0030                  		clr.w	$30(a0)
0001AB2C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AB32 6100                       		bsr.s	loc_1A020
0001AB34                            
0001AB34                            loc_1A000:
0001AB34 700F                       		moveq	#$F,d0
0001AB36 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AB3A 6600                       		bne.s	loc_1A00A
0001AB3C 6100                       		bsr.s	loc_1A020
0001AB3E                            
0001AB3E                            loc_1A00A:
0001AB3E 4A68 0032                  		tst.w	$32(a0)
0001AB42 6700                       		beq.s	locret_1A01E
0001AB44 5528 0034                  		subq.b	#2,$34(a0)
0001AB48 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AB4E 4268 0032                  		clr.w	$32(a0)
0001AB52                            
0001AB52                            locret_1A01E:
0001AB52 4E75                       		rts	
0001AB54                            ; ===========================================================================
0001AB54                            
0001AB54                            loc_1A020:
0001AB54 303C 00B1                  		move.w	#$B1,d0
0001AB58 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            loc_1A02A:				; XREF: off_19E80
0001AB5E 117C 0030 0017             		move.b	#$30,$17(a0)
0001AB64 08E8 0000 0022             		bset	#0,$22(a0)
0001AB6A 4EB9 0000 DD5C             		jsr	SpeedToPos
0001AB70 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB76 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB7C 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB82 6500                       		bcs.s	loc_1A070
0001AB84 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB8A 5428 0034                  		addq.b	#2,$34(a0)
0001AB8E 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB94 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB9A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001ABA0 5438 F742                  		addq.b	#2,($FFFFF742).w
0001ABA4                            
0001ABA4                            loc_1A070:
0001ABA4 6000 0000                  		bra.w	loc_1A166
0001ABA8                            ; ===========================================================================
0001ABA8                            
0001ABA8                            loc_1A074:				; XREF: off_19E80
0001ABA8 08E8 0000 0022             		bset	#0,$22(a0)
0001ABAE 117C 0004 001C             		move.b	#4,$1C(a0)
0001ABB4 4EB9 0000 DD5C             		jsr	SpeedToPos
0001ABBA 0668 0010 0012             		addi.w	#$10,$12(a0)
0001ABC0 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001ABC6 6500                       		bcs.s	loc_1A09A
0001ABC8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001ABCE                            
0001ABCE                            loc_1A09A:
0001ABCE 317C 0400 0010             		move.w	#$400,$10(a0)
0001ABD4 3028 0008                  		move.w	8(a0),d0
0001ABD8 9078 D008                  		sub.w	($FFFFD008).w,d0
0001ABDC 6A00                       		bpl.s	loc_1A0B4
0001ABDE 317C 0500 0010             		move.w	#$500,$10(a0)
0001ABE4 6000 0000                  		bra.w	loc_1A0F2
0001ABE8                            ; ===========================================================================
0001ABE8                            
0001ABE8                            loc_1A0B4:
0001ABE8 0440 0070                  		subi.w	#$70,d0
0001ABEC 6500                       		bcs.s	loc_1A0F2
0001ABEE 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABF4 5140                       		subq.w	#8,d0
0001ABF6 6500                       		bcs.s	loc_1A0F2
0001ABF8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABFE 5140                       		subq.w	#8,d0
0001AC00 6500                       		bcs.s	loc_1A0F2
0001AC02 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC08 5140                       		subq.w	#8,d0
0001AC0A 6500                       		bcs.s	loc_1A0F2
0001AC0C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC12 5140                       		subq.w	#8,d0
0001AC14 6500                       		bcs.s	loc_1A0F2
0001AC16 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC1C 0440 0038                  		subi.w	#$38,d0
0001AC20 6500                       		bcs.s	loc_1A0F2
0001AC22 4268 0010                  		clr.w	$10(a0)
0001AC26                            
0001AC26                            loc_1A0F2:
0001AC26 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AC2C 6500                       		bcs.s	loc_1A110
0001AC2E 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AC34 317C 0240 0010             		move.w	#$240,$10(a0)
0001AC3A 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AC40 5428 0034                  		addq.b	#2,$34(a0)
0001AC44                            
0001AC44                            loc_1A110:
0001AC44 6000                       		bra.s	loc_1A15C
0001AC46                            ; ===========================================================================
0001AC46                            
0001AC46                            loc_1A112:				; XREF: off_19E80
0001AC46 4EB9 0000 DD5C             		jsr	SpeedToPos
0001AC4C 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AC52 6500                       		bcs.s	loc_1A124
0001AC54 4268 0010                  		clr.w	$10(a0)
0001AC58                            
0001AC58                            loc_1A124:
0001AC58 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AC5E 4A68 0012                  		tst.w	$12(a0)
0001AC62 6B00                       		bmi.s	loc_1A142
0001AC64 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AC6A 6500                       		bcs.s	loc_1A142
0001AC6C 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC72 4268 0012                  		clr.w	$12(a0)
0001AC76                            
0001AC76                            loc_1A142:
0001AC76 3028 0010                  		move.w	$10(a0),d0
0001AC7A 8068 0012                  		or.w	$12(a0),d0
0001AC7E 6600                       		bne.s	loc_1A15C
0001AC80 5428 0034                  		addq.b	#2,$34(a0)
0001AC84 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC8A 117C 0001 0021             		move.b	#1,$21(a0)
0001AC90                            
0001AC90                            loc_1A15C:
0001AC90 43FA F898                  		lea	Ani_obj82(pc),a1
0001AC94 4EB9 0000 AE7A             		jsr	AnimateSprite
0001AC9A                            
0001AC9A                            loc_1A166:
0001AC9A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001ACA0 6C00                       		bge.s	loc_1A172
0001ACA2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001ACA6                            
0001ACA6                            loc_1A172:
0001ACA6 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001ACAC 6C00                       		bge.s	locret_1A190
0001ACAE 323C 001B                  		move.w	#$1B,d1
0001ACB2 343C 0070                  		move.w	#$70,d2
0001ACB6 363C 0071                  		move.w	#$71,d3
0001ACBA 3828 0008                  		move.w	8(a0),d4
0001ACBE 4EF9 0001 0154             		jmp	SolidObject
0001ACC4                            ; ===========================================================================
0001ACC4                            
0001ACC4                            locret_1A190:
0001ACC4 4E75                       		rts	
0001ACC6                            ; ===========================================================================
0001ACC6                            
0001ACC6                            loc_1A192:				; XREF: off_19E80
0001ACC6 217C 0001 883E 0004        		move.l	#Map_Eggman,4(a0)
0001ACCE 317C 0400 0002             		move.w	#$400,2(a0)
0001ACD4 117C 0000 001C             		move.b	#0,$1C(a0)
0001ACDA 08E8 0000 0022             		bset	#0,$22(a0)
0001ACE0 4EB9 0000 DD5C             		jsr	SpeedToPos
0001ACE6 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001ACEC 6400                       		bcc.s	loc_1A1D0
0001ACEE 317C 0180 0010             		move.w	#$180,$10(a0)
0001ACF4 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001ACFA 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD00 5428 0034                  		addq.b	#2,$34(a0)
0001AD04                            
0001AD04                            loc_1A1D0:
0001AD04 6000 FF8A                  		bra.w	loc_1A15C
0001AD08                            ; ===========================================================================
0001AD08                            
0001AD08                            loc_1A1D4:				; XREF: off_19E80
0001AD08 08E8 0000 0022             		bset	#0,$22(a0)
0001AD0E 4EB9 0000 DD5C             		jsr	SpeedToPos
0001AD14 4A68 0030                  		tst.w	$30(a0)
0001AD18 6600                       		bne.s	loc_1A1FC
0001AD1A 4A28 0020                  		tst.b	$20(a0)
0001AD1E 6600                       		bne.s	loc_1A216
0001AD20 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AD26 303C 00AC                  		move.w	#$AC,d0
0001AD2A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AD30                            
0001AD30                            loc_1A1FC:
0001AD30 5368 0030                  		subq.w	#1,$30(a0)
0001AD34 6600                       		bne.s	loc_1A216
0001AD36 4A28 0022                  		tst.b	$22(a0)
0001AD3A 6A00                       		bpl.s	loc_1A210
0001AD3C 317C 0060 0012             		move.w	#$60,$12(a0)
0001AD42 6000                       		bra.s	loc_1A216
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            loc_1A210:
0001AD44 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD4A                            
0001AD4A                            loc_1A216:
0001AD4A 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AD50 6D00                       		blt.s	loc_1A23A
0001AD52 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AD58 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AD5E 4278 D014                  		clr.w	($FFFFD014).w
0001AD62 4A68 0012                  		tst.w	$12(a0)
0001AD66 6A00                       		bpl.s	loc_1A248
0001AD68 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AD6E                            
0001AD6E                            loc_1A23A:
0001AD6E 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD74 6D00                       		blt.s	loc_1A248
0001AD76 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD7C                            
0001AD7C                            loc_1A248:
0001AD7C 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD82 6500                       		bcs.s	loc_1A260
0001AD84 4A28 0001                  		tst.b	1(a0)
0001AD88 6B00                       		bmi.s	loc_1A260
0001AD8A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD90 6000 FAF4                  		bra.w	Obj85_Delete
0001AD94                            ; ===========================================================================
0001AD94                            
0001AD94                            loc_1A260:
0001AD94 6000 FEFA                  		bra.w	loc_1A15C
0001AD98                            ; ===========================================================================
0001AD98                            
0001AD98                            loc_1A264:				; XREF: Obj85_Index
0001AD98 2268 0034                  		movea.l	$34(a0),a1
0001AD9C 1011                       		move.b	(a1),d0
0001AD9E B010                       		cmp.b	(a0),d0
0001ADA0 6600 FAE4                  		bne.w	Obj85_Delete
0001ADA4 117C 0007 001C             		move.b	#7,$1C(a0)
0001ADAA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ADB0 6C00                       		bge.s	loc_1A280
0001ADB2 6000                       		bra.s	loc_1A2A6
0001ADB4                            ; ===========================================================================
0001ADB4                            
0001ADB4                            loc_1A280:
0001ADB4 4A69 0010                  		tst.w	$10(a1)
0001ADB8 6700                       		beq.s	loc_1A28C
0001ADBA 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ADC0                            
0001ADC0                            loc_1A28C:
0001ADC0 43FA DA2C                  		lea	Ani_Eggman(pc),a1
0001ADC4 4EB9 0000 AE7A             		jsr	AnimateSprite
0001ADCA                            
0001ADCA                            loc_1A296:
0001ADCA 2268 0034                  		movea.l	$34(a0),a1
0001ADCE 3169 0008 0008             		move.w	8(a1),8(a0)
0001ADD4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ADDA                            
0001ADDA                            loc_1A2A6:
0001ADDA 2268 0034                  		movea.l	$34(a0),a1
0001ADDE 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ADE4 7003                       		moveq	#3,d0
0001ADE6 C028 0022                  		and.b	$22(a0),d0
0001ADEA 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ADF0 8128 0001                  		or.b	d0,1(a0)
0001ADF4 4EF9 0000 DD82             		jmp	DisplaySprite
0001ADFA                            ; ===========================================================================
0001ADFA                            
0001ADFA                            loc_1A2C6:				; XREF: Obj85_Index
0001ADFA 2268 0034                  		movea.l	$34(a0),a1
0001ADFE 1011                       		move.b	(a1),d0
0001AE00 B010                       		cmp.b	(a0),d0
0001AE02 6600 FA82                  		bne.w	Obj85_Delete
0001AE06 0CA9 0001 883E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE0E 6700                       		beq.s	loc_1A2E4
0001AE10 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AE16 60C2                       		bra.s	loc_1A2A6
0001AE18                            ; ===========================================================================
0001AE18                            
0001AE18                            loc_1A2E4:
0001AE18 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE1E 4A29 0021                  		tst.b	$21(a1)
0001AE22 6F00                       		ble.s	loc_1A312
0001AE24 117C 0006 001C             		move.b	#6,$1C(a0)
0001AE2A 217C 0001 883E 0004        		move.l	#Map_Eggman,4(a0)
0001AE32 317C 0400 0002             		move.w	#$400,2(a0)
0001AE38 43FA D9B4                  		lea	Ani_Eggman(pc),a1
0001AE3C 4EB9 0000 AE7A             		jsr	AnimateSprite
0001AE42 6000 FF86                  		bra.w	loc_1A296
0001AE46                            ; ===========================================================================
0001AE46                            
0001AE46                            loc_1A312:
0001AE46 4A28 0001                  		tst.b	1(a0)
0001AE4A 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AE4E 6100 D540                  		bsr.w	BossDefeated
0001AE52 117C 0002 0018             		move.b	#2,$18(a0)
0001AE58 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE5E 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AE66 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AE6C 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE70 4EB9 0000 AE7A             		jsr	AnimateSprite
0001AE76 6000 FF52                  		bra.w	loc_1A296
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_1A346:				; XREF: Obj85_Index
0001AE7A 08E8 0000 0022             		bset	#0,$22(a0)
0001AE80 2268 0034                  		movea.l	$34(a0),a1
0001AE84 0CA9 0001 883E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE8C 6700                       		beq.s	loc_1A35E
0001AE8E 6000 FF4A                  		bra.w	loc_1A2A6
0001AE92                            ; ===========================================================================
0001AE92                            
0001AE92                            loc_1A35E:
0001AE92 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE98 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE9E 4A28 001E                  		tst.b	$1E(a0)
0001AEA2 6600                       		bne.s	loc_1A376
0001AEA4 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AEAA                            
0001AEAA                            loc_1A376:
0001AEAA 5328 001E                  		subq.b	#1,$1E(a0)
0001AEAE 6E00                       		bgt.s	loc_1A38A
0001AEB0 5228 001A                  		addq.b	#1,$1A(a0)
0001AEB4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AEBA 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AEBE                            
0001AEBE                            loc_1A38A:
0001AEBE 6000 FF0A                  		bra.w	loc_1A296
0001AEC2                            ; ===========================================================================
0001AEC2                            
0001AEC2                            loc_1A38E:				; XREF: Obj85_Index
0001AEC2 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AEC8 3038 D008                  		move.w	($FFFFD008).w,d0
0001AECC 9068 0008                  		sub.w	8(a0),d0
0001AED0 6500                       		bcs.s	loc_1A3A6
0001AED2 4A28 0001                  		tst.b	1(a0)
0001AED6 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AEDA                            
0001AEDA                            loc_1A3A6:
0001AEDA 4EF9 0000 DD82             		jmp	DisplaySprite
0001AEE0                            ; ===========================================================================
0001AEE0                            
0001AEE0                            loc_1A3AC:				; XREF: Obj85_Index
0001AEE0 117C 0000 001A             		move.b	#0,$1A(a0)
0001AEE6 08E8 0000 0022             		bset	#0,$22(a0)
0001AEEC 2268 0034                  		movea.l	$34(a0),a1
0001AEF0 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AEF6 6600                       		bne.s	loc_1A3D0
0001AEF8 0CA9 0001 883E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AF00 6700 F984                  		beq.w	Obj85_Delete
0001AF04                            
0001AF04                            loc_1A3D0:
0001AF04 6000 FED4                  		bra.w	loc_1A2A6
0001AF08                            ; ===========================================================================
0001AF08                            Ani_obj85:
0001AF08                            	include "_anim\obj85.asm"
0001AF08                            ; ---------------------------------------------------------------------------
0001AF08                            ; Animation script - Eggman (FZ)
0001AF08                            ; ---------------------------------------------------------------------------
0001AF08 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AF0A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AF0E                            		even
0001AF0E                            		even
0001AF0E                            
0001AF0E                            Map_Eggman2:
0001AF0E                            	include "_maps\Eggman2.asm"
0001AF0E                            ; ---------------------------------------------------------------------------
0001AF0E                            ; Sprite mappings - Eggman (FZ)
0001AF0E                            ; ---------------------------------------------------------------------------
0001AF0E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AF10 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AF12 06                         byte_1A3DE:	dc.b 6
0001AF13 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AF18 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AF1D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AF22 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AF27 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AF2C 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AF31 06                         byte_1A3FD:	dc.b 6
0001AF32 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AF37 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AF3C EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AF41 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AF46 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AF4B 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AF50                            		even
0001AF50                            		even
0001AF50                            
0001AF50                            Map_FZBoss:
0001AF50                            	include "_maps\FZ boss.asm"
0001AF50                            ; ---------------------------------------------------------------------------
0001AF50                            ; Sprite mappings - boss (FZ)
0001AF50                            ; ---------------------------------------------------------------------------
0001AF50 0000                       		dc.w byte_1A422-Map_FZBoss
0001AF52 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AF54 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AF56 02                         byte_1A422:	dc.b 2
0001AF57 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AF5C 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AF61 03                         byte_1A42D:	dc.b 3
0001AF62 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AF67 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AF6C 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF71 02                         byte_1A43D:	dc.b 2
0001AF72 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF77 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF7C                            		even
0001AF7C                            		even
0001AF7C                            
0001AF7C                            ; ===========================================================================
0001AF7C                            
0001AF7C                            Obj84_Delete:
0001AF7C 4EF9 0000 DDBE             		jmp	DeleteObject
0001AF82                            ; ===========================================================================
0001AF82                            ; ---------------------------------------------------------------------------
0001AF82                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF82                            ; ---------------------------------------------------------------------------
0001AF82                            
0001AF82                            Obj84:					; XREF: Obj_Index
0001AF82 7000                       		moveq	#0,d0
0001AF84 1028 0024                  		move.b	$24(a0),d0
0001AF88 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF8C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF90                            ; ===========================================================================
0001AF90 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF92 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF94 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF96                            
0001AF96 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF9A 2550 0620                  		dc.w $2550, $620
0001AF9E 2490 04C0                  		dc.w $2490, $4C0
0001AFA2 2510 04C0                  		dc.w $2510, $4C0
0001AFA6                            ; ===========================================================================
0001AFA6                            
0001AFA6                            Obj84_Main:				; XREF: Obj84_Index
0001AFA6 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AFAA 7000                       		moveq	#0,d0
0001AFAC 1028 0028                  		move.b	$28(a0),d0
0001AFB0 D040                       		add.w	d0,d0
0001AFB2 D2C0                       		adda.w	d0,a1
0001AFB4 117C 0004 0001             		move.b	#4,1(a0)
0001AFBA 08E8 0007 0001             		bset	#7,1(a0)
0001AFC0 08E8 0004 0001             		bset	#4,1(a0)
0001AFC6 317C 0300 0002             		move.w	#$300,2(a0)
0001AFCC 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AFD4 3159 0008                  		move.w	(a1)+,8(a0)
0001AFD8 3151 000C                  		move.w	(a1),$C(a0)
0001AFDC 3159 0038                  		move.w	(a1)+,$38(a0)
0001AFE0 117C 0020 0016             		move.b	#$20,$16(a0)
0001AFE6 117C 0060 0017             		move.b	#$60,$17(a0)
0001AFEC 117C 0020 0019             		move.b	#$20,$19(a0)
0001AFF2 117C 0060 0016             		move.b	#$60,$16(a0)
0001AFF8 117C 0003 0018             		move.b	#3,$18(a0)
0001AFFE 5428 0024                  		addq.b	#2,$24(a0)
0001B002                            
0001B002                            loc_1A4CE:				; XREF: Obj84_Index
0001B002 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B008 6F00                       		ble.s	loc_1A4DC
0001B00A 08E8 0001 0001             		bset	#1,1(a0)
0001B010                            
0001B010                            loc_1A4DC:
0001B010 42A8 003C                  		clr.l	$3C(a0)
0001B014 4A28 0029                  		tst.b	$29(a0)
0001B018 6700                       		beq.s	loc_1A4EA
0001B01A 5428 0024                  		addq.b	#2,$24(a0)
0001B01E                            
0001B01E                            loc_1A4EA:
0001B01E 2028 003C                  		move.l	$3C(a0),d0
0001B022 2228 0038                  		move.l	$38(a0),d1
0001B026 D280                       		add.l	d0,d1
0001B028 4841                       		swap	d1
0001B02A 3141 000C                  		move.w	d1,$C(a0)
0001B02E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B034 6600                       		bne.s	loc_1A524
0001B036 4A68 0030                  		tst.w	$30(a0)
0001B03A 6A00                       		bpl.s	loc_1A524
0001B03C 70F6                       		moveq	#-$A,d0
0001B03E 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B044 6F00                       		ble.s	loc_1A514
0001B046 700E                       		moveq	#$E,d0
0001B048                            
0001B048                            loc_1A514:
0001B048 D240                       		add.w	d0,d1
0001B04A 2268 0034                  		movea.l	$34(a0),a1
0001B04E 3341 000C                  		move.w	d1,$C(a1)
0001B052 3368 0008 0008             		move.w	8(a0),8(a1)
0001B058                            
0001B058                            loc_1A524:
0001B058 323C 002B                  		move.w	#$2B,d1
0001B05C 343C 0060                  		move.w	#$60,d2
0001B060 363C 0061                  		move.w	#$61,d3
0001B064 3828 0008                  		move.w	8(a0),d4
0001B068 4EB9 0001 0154             		jsr	SolidObject
0001B06E 7000                       		moveq	#0,d0
0001B070 3228 003C                  		move.w	$3C(a0),d1
0001B074 6A00                       		bpl.s	loc_1A550
0001B076 4441                       		neg.w	d1
0001B078 5141                       		subq.w	#8,d1
0001B07A 6500                       		bcs.s	loc_1A55C
0001B07C 5200                       		addq.b	#1,d0
0001B07E E841                       		asr.w	#4,d1
0001B080 D041                       		add.w	d1,d0
0001B082 6000                       		bra.s	loc_1A55C
0001B084                            ; ===========================================================================
0001B084                            
0001B084                            loc_1A550:
0001B084 0441 0027                  		subi.w	#$27,d1
0001B088 6500                       		bcs.s	loc_1A55C
0001B08A 5200                       		addq.b	#1,d0
0001B08C E841                       		asr.w	#4,d1
0001B08E D041                       		add.w	d1,d0
0001B090                            
0001B090                            loc_1A55C:
0001B090 1140 001A                  		move.b	d0,$1A(a0)
0001B094 3038 D008                  		move.w	($FFFFD008).w,d0
0001B098 9068 0008                  		sub.w	8(a0),d0
0001B09C 6B00                       		bmi.s	loc_1A578
0001B09E 0440 0140                  		subi.w	#$140,d0
0001B0A2 6B00                       		bmi.s	loc_1A578
0001B0A4 4A28 0001                  		tst.b	1(a0)
0001B0A8 6A00 FED2                  		bpl.w	Obj84_Delete
0001B0AC                            
0001B0AC                            loc_1A578:
0001B0AC 4EF9 0000 DD82             		jmp	DisplaySprite
0001B0B2                            ; ===========================================================================
0001B0B2                            
0001B0B2                            loc_1A57E:				; XREF: Obj84_Index
0001B0B2 7000                       		moveq	#0,d0
0001B0B4 1028 0028                  		move.b	$28(a0),d0
0001B0B8 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B0BC 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B0C0 6000 FF5C                  		bra.w	loc_1A4EA
0001B0C4                            ; ===========================================================================
0001B0C4 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B0C6 0000                       		dc.w loc_1A598-off_1A590
0001B0C8 0000                       		dc.w loc_1A604-off_1A590
0001B0CA 0000                       		dc.w loc_1A604-off_1A590
0001B0CC                            ; ===========================================================================
0001B0CC                            
0001B0CC                            loc_1A598:				; XREF: off_1A590
0001B0CC 4A28 0029                  		tst.b	$29(a0)
0001B0D0 6600                       		bne.s	loc_1A5D4
0001B0D2 2268 0034                  		movea.l	$34(a0),a1
0001B0D6 4A29 0021                  		tst.b	$21(a1)
0001B0DA 6600                       		bne.s	loc_1A5B4
0001B0DC 6100 D2B2                  		bsr.w	BossDefeated
0001B0E0 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B0E8                            
0001B0E8                            loc_1A5B4:
0001B0E8 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B0F0 6400                       		bcc.s	locret_1A602
0001B0F2 42A8 003C                  		clr.l	$3C(a0)
0001B0F6 2268 0034                  		movea.l	$34(a0),a1
0001B0FA 5369 0032                  		subq.w	#1,$32(a1)
0001B0FE 4269 0030                  		clr.w	$30(a1)
0001B102 5528 0024                  		subq.b	#2,$24(a0)
0001B106 4E75                       		rts	
0001B108                            ; ===========================================================================
0001B108                            
0001B108                            loc_1A5D4:
0001B108 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B10E 6C00                       		bge.s	loc_1A5E4
0001B110 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B118                            
0001B118                            loc_1A5E4:
0001B118 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B120 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B126 6E00                       		bgt.s	locret_1A602
0001B128 4268 003E                  		clr.w	$3E(a0)
0001B12C 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B132 4228 0029                  		clr.b	$29(a0)
0001B136                            
0001B136                            locret_1A602:
0001B136 4E75                       		rts	
0001B138                            ; ===========================================================================
0001B138                            
0001B138                            loc_1A604:				; XREF: off_1A590
0001B138 08E8 0001 0001             		bset	#1,1(a0)
0001B13E 4A28 0029                  		tst.b	$29(a0)
0001B142 6600                       		bne.s	loc_1A646
0001B144 2268 0034                  		movea.l	$34(a0),a1
0001B148 4A29 0021                  		tst.b	$21(a1)
0001B14C 6600                       		bne.s	loc_1A626
0001B14E 6100 D240                  		bsr.w	BossDefeated
0001B152 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B15A                            
0001B15A                            loc_1A626:
0001B15A 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B162 6400                       		bcc.s	locret_1A674
0001B164 42A8 003C                  		clr.l	$3C(a0)
0001B168 2268 0034                  		movea.l	$34(a0),a1
0001B16C 5369 0032                  		subq.w	#1,$32(a1)
0001B170 4269 0030                  		clr.w	$30(a1)
0001B174 5528 0024                  		subq.b	#2,$24(a0)
0001B178 4E75                       		rts	
0001B17A                            ; ===========================================================================
0001B17A                            
0001B17A                            loc_1A646:
0001B17A 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B180 6D00                       		blt.s	loc_1A656
0001B182 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B18A                            
0001B18A                            loc_1A656:
0001B18A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B192 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B198 6D00                       		blt.s	locret_1A674
0001B19A 4268 003E                  		clr.w	$3E(a0)
0001B19E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B1A4 4228 0029                  		clr.b	$29(a0)
0001B1A8                            
0001B1A8                            locret_1A674:
0001B1A8 4E75                       		rts	
0001B1AA                            ; ===========================================================================
0001B1AA                            ; ---------------------------------------------------------------------------
0001B1AA                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B1AA                            ; ---------------------------------------------------------------------------
0001B1AA                            Map_obj84:
0001B1AA                            	include "_maps\obj84.asm"
0001B1AA                            ; ---------------------------------------------------------------------------
0001B1AA                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B1AA                            ; ---------------------------------------------------------------------------
0001B1AA 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B1AE 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B1B2 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B1B6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B1BA 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B1BE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B1C2 06                         byte_1A68E:	dc.b 6
0001B1C3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1C8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1CD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1D2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1D7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1DC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1E1 08                         byte_1A6AD:	dc.b 8
0001B1E2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1E7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1EC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1F1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1F6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1FB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B200 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B205 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B20A 0A                         byte_1A6D6:	dc.b $A
0001B20B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B210 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B215 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B21A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B21F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B224 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B229 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B22E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B233 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B238 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B23D 0C                         byte_1A709:	dc.b $C
0001B23E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B243 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B248 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B24D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B252 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B257 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B25C D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B261 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B266 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B26B F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B270 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B275 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B27A 0D                         byte_1A746:	dc.b $D
0001B27B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B280 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B285 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B28A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B28F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B294 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B299 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B29E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2A3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2A8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2AD 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B2B2 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2B7 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2BC 0E                         byte_1A788:	dc.b $E
0001B2BD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B2C2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B2C7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B2CC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2D1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2D6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2DB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2E0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2E5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2EA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2EF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B2F4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2F9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2FE 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B303 02                         byte_1A7CF:	dc.b 2
0001B304 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B309 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B30E                            		even
0001B30E                            		even
0001B30E                            
0001B30E                            ; ===========================================================================
0001B30E                            ; ---------------------------------------------------------------------------
0001B30E                            ; Object 86 - energy balls (FZ)
0001B30E                            ; ---------------------------------------------------------------------------
0001B30E                            
0001B30E                            Obj86:					; XREF: Obj_Index
0001B30E 7000                       		moveq	#0,d0
0001B310 1028 0024                  		move.b	$24(a0),d0
0001B314 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B318 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B31C                            ; ===========================================================================
0001B31C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B31E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B320 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B322 0000                       		dc.w loc_1A962-Obj86_Index
0001B324 0000                       		dc.w loc_1A982-Obj86_Index
0001B326                            ; ===========================================================================
0001B326                            
0001B326                            Obj86_Main:				; XREF: Obj86_Index
0001B326 317C 2588 0008             		move.w	#$2588,8(a0)
0001B32C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B332 317C 0300 0002             		move.w	#$300,2(a0)
0001B338 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B340 117C 0000 001C             		move.b	#0,$1C(a0)
0001B346 117C 0003 0018             		move.b	#3,$18(a0)
0001B34C 117C 0008 0017             		move.b	#8,$17(a0)
0001B352 117C 0008 0016             		move.b	#8,$16(a0)
0001B358 117C 0004 0001             		move.b	#4,1(a0)
0001B35E 08E8 0007 0001             		bset	#7,1(a0)
0001B364 5428 0024                  		addq.b	#2,$24(a0)
0001B368                            
0001B368                            Obj86_Generator:			; XREF: Obj86_Index
0001B368 2268 0034                  		movea.l	$34(a0),a1
0001B36C 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B372 6600                       		bne.s	loc_1A850
0001B374 10BC 003F                  		move.b	#$3F,(a0)
0001B378 117C 0000 0024             		move.b	#0,$24(a0)
0001B37E 4EF9 0000 DD82             		jmp	DisplaySprite
0001B384                            ; ===========================================================================
0001B384                            
0001B384                            loc_1A850:
0001B384 117C 0000 001C             		move.b	#0,$1C(a0)
0001B38A 4A28 0029                  		tst.b	$29(a0)
0001B38E 6700                       		beq.s	loc_1A86C
0001B390 5428 0024                  		addq.b	#2,$24(a0)
0001B394 117C 0001 001C             		move.b	#1,$1C(a0)
0001B39A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B3A0                            
0001B3A0                            loc_1A86C:
0001B3A0 323C 0013                  		move.w	#$13,d1
0001B3A4 343C 0008                  		move.w	#8,d2
0001B3A8 363C 0011                  		move.w	#$11,d3
0001B3AC 3828 0008                  		move.w	8(a0),d4
0001B3B0 4EB9 0001 0154             		jsr	SolidObject
0001B3B6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B3BA 9068 0008                  		sub.w	8(a0),d0
0001B3BE 6B00                       		bmi.s	loc_1A89A
0001B3C0 0440 0140                  		subi.w	#$140,d0
0001B3C4 6B00                       		bmi.s	loc_1A89A
0001B3C6 4A28 0001                  		tst.b	1(a0)
0001B3CA 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B3CE                            
0001B3CE                            loc_1A89A:
0001B3CE 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B3D2 4EB9 0000 AE7A             		jsr	AnimateSprite
0001B3D8 4EF9 0000 DD82             		jmp	DisplaySprite
0001B3DE                            ; ===========================================================================
0001B3DE                            
0001B3DE                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B3DE 4A28 0029                  		tst.b	$29(a0)
0001B3E2 6700 0000                  		beq.w	loc_1A954
0001B3E6 4228 0029                  		clr.b	$29(a0)
0001B3EA D068 0030                  		add.w	$30(a0),d0
0001B3EE 0240 001E                  		andi.w	#$1E,d0
0001B3F2 D4C0                       		adda.w	d0,a2
0001B3F4 5868 0030                  		addq.w	#4,$30(a0)
0001B3F8 4268 0032                  		clr.w	$32(a0)
0001B3FC 7403                       		moveq	#3,d2
0001B3FE                            
0001B3FE                            Obj86_Loop:
0001B3FE 4EB9 0000 E224             		jsr	SingleObjLoad2
0001B404 6600 0000                  		bne.w	loc_1A954
0001B408 12BC 0086                  		move.b	#$86,(a1)
0001B40C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B412 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B418 137C 0008 0024             		move.b	#8,$24(a1)
0001B41E 337C 2300 0002             		move.w	#$2300,2(a1)
0001B424 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B42C 137C 000C 0016             		move.b	#$C,$16(a1)
0001B432 137C 000C 0017             		move.b	#$C,$17(a1)
0001B438 137C 0000 0020             		move.b	#0,$20(a1)
0001B43E 137C 0003 0018             		move.b	#3,$18(a1)
0001B444 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B44A 137C 0004 0001             		move.b	#4,1(a1)
0001B450 08E9 0007 0001             		bset	#7,1(a1)
0001B456 2348 0034                  		move.l	a0,$34(a1)
0001B45A 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001B460 3228 0032                  		move.w	$32(a0),d1
0001B464 C3FC FFB1                  		muls.w	#-$4F,d1
0001B468 0641 2578                  		addi.w	#$2578,d1
0001B46C 0240 001F                  		andi.w	#$1F,d0
0001B470 0440 0010                  		subi.w	#$10,d0
0001B474 D041                       		add.w	d1,d0
0001B476 3340 0030                  		move.w	d0,$30(a1)
0001B47A 5268 0032                  		addq.w	#1,$32(a0)
0001B47E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B484 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B488                            
0001B488                            loc_1A954:
0001B488 4A68 0032                  		tst.w	$32(a0)
0001B48C 6600                       		bne.s	loc_1A95E
0001B48E 5428 0024                  		addq.b	#2,$24(a0)
0001B492                            
0001B492                            loc_1A95E:
0001B492 6000 FF0C                  		bra.w	loc_1A86C
0001B496                            ; ===========================================================================
0001B496                            
0001B496                            loc_1A962:				; XREF: Obj86_Index
0001B496 117C 0002 001C             		move.b	#2,$1C(a0)
0001B49C 4A68 0038                  		tst.w	$38(a0)
0001B4A0 6600                       		bne.s	loc_1A97E
0001B4A2 117C 0002 0024             		move.b	#2,$24(a0)
0001B4A8 2268 0034                  		movea.l	$34(a0),a1
0001B4AC 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B4B2                            
0001B4B2                            loc_1A97E:
0001B4B2 6000 FEEC                  		bra.w	loc_1A86C
0001B4B6                            ; ===========================================================================
0001B4B6                            
0001B4B6                            loc_1A982:				; XREF: Obj86_Index
0001B4B6 7000                       		moveq	#0,d0
0001B4B8 1028 0025                  		move.b	$25(a0),d0
0001B4BC 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B4C0 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B4C4 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B4C8 4EB9 0000 AE7A             		jsr	AnimateSprite
0001B4CE 4EF9 0000 DD82             		jmp	DisplaySprite
0001B4D4                            ; ===========================================================================
0001B4D4 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B4D6 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B4D8 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B4DA                            ; ===========================================================================
0001B4DA                            
0001B4DA                            loc_1A9A6:				; XREF: Obj86_Index2
0001B4DA 3028 0030                  		move.w	$30(a0),d0
0001B4DE 9068 0008                  		sub.w	8(a0),d0
0001B4E2 E940                       		asl.w	#4,d0
0001B4E4 3140 0010                  		move.w	d0,$10(a0)
0001B4E8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B4EE 5428 0025                  		addq.b	#2,$25(a0)
0001B4F2 4E75                       		rts	
0001B4F4                            ; ===========================================================================
0001B4F4                            
0001B4F4                            loc_1A9C0:				; XREF: Obj86_Index2
0001B4F4 4A68 0010                  		tst.w	$10(a0)
0001B4F8 6700                       		beq.s	loc_1A9E6
0001B4FA 4EB9 0000 DD5C             		jsr	SpeedToPos
0001B500 3028 0008                  		move.w	8(a0),d0
0001B504 9068 0030                  		sub.w	$30(a0),d0
0001B508 6400                       		bcc.s	loc_1A9E6
0001B50A 4268 0010                  		clr.w	$10(a0)
0001B50E D168 0008                  		add.w	d0,8(a0)
0001B512 2268 0034                  		movea.l	$34(a0),a1
0001B516 5369 0032                  		subq.w	#1,$32(a1)
0001B51A                            
0001B51A                            loc_1A9E6:
0001B51A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B520 5368 0028                  		subq.w	#1,$28(a0)
0001B524 6600                       		bne.s	locret_1AA1C
0001B526 5428 0025                  		addq.b	#2,$25(a0)
0001B52A 117C 0001 001C             		move.b	#1,$1C(a0)
0001B530 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B536 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B53C 7000                       		moveq	#0,d0
0001B53E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B542 9068 0008                  		sub.w	8(a0),d0
0001B546 3140 0010                  		move.w	d0,$10(a0)
0001B54A 317C 0140 0012             		move.w	#$140,$12(a0)
0001B550                            
0001B550                            locret_1AA1C:
0001B550 4E75                       		rts	
0001B552                            ; ===========================================================================
0001B552                            
0001B552                            loc_1AA1E:				; XREF: Obj86_Index2
0001B552 4EB9 0000 DD5C             		jsr	SpeedToPos
0001B558 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B55E 6400                       		bcc.s	loc_1AA34
0001B560 5368 0028                  		subq.w	#1,$28(a0)
0001B564 6700                       		beq.s	loc_1AA34
0001B566 4E75                       		rts	
0001B568                            ; ===========================================================================
0001B568                            
0001B568                            loc_1AA34:
0001B568 2268 0034                  		movea.l	$34(a0),a1
0001B56C 5369 0038                  		subq.w	#1,$38(a1)
0001B570 6000 FA0A                  		bra.w	Obj84_Delete
0001B574                            ; ===========================================================================
0001B574                            Ani_obj86:
0001B574                            	include "_anim\obj86.asm"
0001B574                            ; ---------------------------------------------------------------------------
0001B574                            ; Animation script - energy ball launcher (FZ)
0001B574                            ; ---------------------------------------------------------------------------
0001B574 0000                       		dc.w byte_1AA46-Ani_obj86
0001B576 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B578 0000                       		dc.w byte_1AA50-Ani_obj86
0001B57A 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B57E 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B584 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B58A                            		even
0001B58A                            		even
0001B58A                            
0001B58A                            ; ---------------------------------------------------------------------------
0001B58A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B58A                            ; ---------------------------------------------------------------------------
0001B58A                            Map_obj86:
0001B58A                            	include "_maps\obj86.asm"
0001B58A                            ; ---------------------------------------------------------------------------
0001B58A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B58A                            ; ---------------------------------------------------------------------------
0001B58A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B58E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B592 01                         byte_1AA5E:	dc.b 1
0001B593 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B598 01                         byte_1AA64:	dc.b 1
0001B599 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B59E 01                         byte_1AA6A:	dc.b 1
0001B59F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B5A4 01                         byte_1AA70:	dc.b 1
0001B5A5 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B5AA                            		even
0001B5AA                            		even
0001B5AA                            
0001B5AA                            Ani_obj86a:
0001B5AA                            	include "_anim\obj86a.asm"
0001B5AA                            ; ---------------------------------------------------------------------------
0001B5AA                            ; Animation script - energy balls (FZ)
0001B5AA                            ; ---------------------------------------------------------------------------
0001B5AA 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B5AC 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B5AE 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B5BD 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B5CC 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B5D0 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B5DA                            		even
0001B5DA                            		even
0001B5DA                            
0001B5DA                            ; ---------------------------------------------------------------------------
0001B5DA                            ; Sprite mappings - energy balls (FZ)
0001B5DA                            ; ---------------------------------------------------------------------------
0001B5DA                            Map_obj86a:
0001B5DA                            	include "_maps\obj86a.asm"
0001B5DA                            ; ---------------------------------------------------------------------------
0001B5DA                            ; Sprite mappings - energy balls (FZ)
0001B5DA                            ; ---------------------------------------------------------------------------
0001B5DA 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B5DE 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B5E2 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B5E6 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B5EA 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B5EE 0000                       		dc.w byte_1AB20-Map_obj86a
0001B5F0 02                         byte_1AABC:	dc.b 2
0001B5F1 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B5F6 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B5FB 02                         byte_1AAC7:	dc.b 2
0001B5FC F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B601 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B606 02                         byte_1AAD2:	dc.b 2
0001B607 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B60C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B611 02                         byte_1AADD:	dc.b 2
0001B612 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B617 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B61C 02                         byte_1AAE8:	dc.b 2
0001B61D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B622 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B627 02                         byte_1AAF3:	dc.b 2
0001B628 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B62D F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B632 01                         byte_1AAFE:	dc.b 1
0001B633 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B638 01                         byte_1AB04:	dc.b 1
0001B639 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B63E 02                         byte_1AB0A:	dc.b 2
0001B63F F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B644 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B649 02                         byte_1AB15:	dc.b 2
0001B64A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B64F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B654 00                         byte_1AB20:	dc.b 0
0001B656 00                         		even
0001B656 00                         		even
0001B656                            
0001B656                            ; ===========================================================================
0001B656                            ; ---------------------------------------------------------------------------
0001B656                            ; Object 3E - prison capsule
0001B656                            ; ---------------------------------------------------------------------------
0001B656                            
0001B656                            Obj3E:					; XREF: Obj_Index
0001B656 7000                       		moveq	#0,d0
0001B658 1028 0024                  		move.b	$24(a0),d0
0001B65C 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B660 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B664 3028 0008                  		move.w	8(a0),d0
0001B668 0240 FF80                  		andi.w	#$FF80,d0
0001B66C 3238 F700                  		move.w	($FFFFF700).w,d1
0001B670 0441 0080                  		subi.w	#$80,d1
0001B674 0241 FF80                  		andi.w	#$FF80,d1
0001B678 9041                       		sub.w	d1,d0
0001B67A 0C40 0280                  		cmpi.w	#$280,d0
0001B67E 6200                       		bhi.s	Obj3E_Delete
0001B680 4EF9 0000 DD82             		jmp	DisplaySprite
0001B686                            ; ===========================================================================
0001B686                            
0001B686                            Obj3E_Delete:
0001B686 4EF9 0000 DDBE             		jmp	DeleteObject
0001B68C                            ; ===========================================================================
0001B68C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B68E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B690 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B692 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B694 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B696 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B698 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B69A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B69C                            
0001B69C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B6A0 040C 0501                  		dc.b 4,	$C, 5, 1
0001B6A4 0610 0403                  		dc.b 6,	$10, 4,	3
0001B6A8 0810 0305                  		dc.b 8,	$10, 3,	5
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            Obj3E_Main:				; XREF: Obj3E_Index
0001B6AC 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B6B4 317C 049D 0002             		move.w	#$49D,2(a0)
0001B6BA 117C 0004 0001             		move.b	#4,1(a0)
0001B6C0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B6C6 7000                       		moveq	#0,d0
0001B6C8 1028 0028                  		move.b	$28(a0),d0
0001B6CC E548                       		lsl.w	#2,d0
0001B6CE 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B6D2 1159 0024                  		move.b	(a1)+,$24(a0)
0001B6D6 1159 0019                  		move.b	(a1)+,$19(a0)
0001B6DA 1159 0018                  		move.b	(a1)+,$18(a0)
0001B6DE 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B6E2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B6E6 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B6E8 117C 0006 0020             		move.b	#6,$20(a0)
0001B6EE 117C 0008 0021             		move.b	#8,$21(a0)
0001B6F4                            
0001B6F4                            Obj3E_Not02:
0001B6F4 4E75                       		rts	
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B6F6 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B6FC 6700                       		beq.s	Obj3E_ChkOpened
0001B6FE 323C 002B                  		move.w	#$2B,d1
0001B702 343C 0018                  		move.w	#$18,d2
0001B706 363C 0018                  		move.w	#$18,d3
0001B70A 3828 0008                  		move.w	8(a0),d4
0001B70E 4EF9 0001 0154             		jmp	SolidObject
0001B714                            ; ===========================================================================
0001B714                            
0001B714                            Obj3E_ChkOpened:
0001B714 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B718 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B71A 4228 0025                  		clr.b	$25(a0)
0001B71E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B724 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B72A                            
0001B72A                            Obj3E_DoOpen:
0001B72A 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B730 4E75                       		rts	
0001B732                            ; ===========================================================================
0001B732                            
0001B732                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B732 323C 0017                  		move.w	#$17,d1
0001B736 343C 0008                  		move.w	#8,d2
0001B73A 363C 0008                  		move.w	#8,d3
0001B73E 3828 0008                  		move.w	8(a0),d4
0001B742 4EB9 0001 0154             		jsr	SolidObject
0001B748 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B74E 4EB9 0000 AE7A             		jsr	AnimateSprite
0001B754 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B75A 4A28 0025                  		tst.b	$25(a0)
0001B75E 6700                       		beq.s	locret_1AC60
0001B760 5068 000C                  		addq.w	#8,$C(a0)
0001B764 117C 000A 0024             		move.b	#$A,$24(a0)
0001B76A 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B770 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B774 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B778 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B77E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B784 4228 0025                  		clr.b	$25(a0)
0001B788 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B78E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B794                            
0001B794                            locret_1AC60:
0001B794 4E75                       		rts	
0001B796                            ; ===========================================================================
0001B796                            
0001B796                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B796 7007                       		moveq	#7,d0
0001B798 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B79C 6600                       		bne.s	loc_1ACA0
0001B79E 4EB9 0000 E20E             		jsr	SingleObjLoad
0001B7A4 6600                       		bne.s	loc_1ACA0
0001B7A6 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B7AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7B6 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001B7BC 7200                       		moveq	#0,d1
0001B7BE 1200                       		move.b	d0,d1
0001B7C0 E409                       		lsr.b	#2,d1
0001B7C2 0441 0020                  		subi.w	#$20,d1
0001B7C6 D369 0008                  		add.w	d1,8(a1)
0001B7CA E048                       		lsr.w	#8,d0
0001B7CC E608                       		lsr.b	#3,d0
0001B7CE D169 000C                  		add.w	d0,$C(a1)
0001B7D2                            
0001B7D2                            loc_1ACA0:
0001B7D2 5368 001E                  		subq.w	#1,$1E(a0)
0001B7D6 6700                       		beq.s	Obj3E_MakeAnimal
0001B7D8 4E75                       		rts	
0001B7DA                            ; ===========================================================================
0001B7DA                            
0001B7DA                            Obj3E_MakeAnimal:
0001B7DA 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B7E0 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B7E6 117C 0006 001A             		move.b	#6,$1A(a0)
0001B7EC 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B7F2 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B7F8 7C07                       		moveq	#7,d6
0001B7FA 3A3C 009A                  		move.w	#$9A,d5
0001B7FE 78E4                       		moveq	#-$1C,d4
0001B800                            
0001B800                            Obj3E_Loop:
0001B800 4EB9 0000 E20E             		jsr	SingleObjLoad
0001B806 6600                       		bne.s	locret_1ACF8
0001B808 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B80C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B812 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B818 D969 0008                  		add.w	d4,8(a1)
0001B81C 5E44                       		addq.w	#7,d4
0001B81E 3345 0036                  		move.w	d5,$36(a1)
0001B822 5145                       		subq.w	#8,d5
0001B824 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B828                            
0001B828                            locret_1ACF8:
0001B828 4E75                       		rts	
0001B82A                            ; ===========================================================================
0001B82A                            
0001B82A                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B82A 7007                       		moveq	#7,d0
0001B82C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B830 6600                       		bne.s	loc_1AD38
0001B832 4EB9 0000 E20E             		jsr	SingleObjLoad
0001B838 6600                       		bne.s	loc_1AD38
0001B83A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B83E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B844 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B84A 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001B850 0240 001F                  		andi.w	#$1F,d0
0001B854 5D40                       		subq.w	#6,d0
0001B856 4A41                       		tst.w	d1
0001B858 6A00                       		bpl.s	loc_1AD2E
0001B85A 4440                       		neg.w	d0
0001B85C                            
0001B85C                            loc_1AD2E:
0001B85C D169 0008                  		add.w	d0,8(a1)
0001B860 337C 000C 0036             		move.w	#$C,$36(a1)
0001B866                            
0001B866                            loc_1AD38:
0001B866 5368 001E                  		subq.w	#1,$1E(a0)
0001B86A 6600                       		bne.s	locret_1AD48
0001B86C 5428 0024                  		addq.b	#2,$24(a0)
0001B870 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B876                            
0001B876                            locret_1AD48:
0001B876 4E75                       		rts	
0001B878                            ; ===========================================================================
0001B878                            
0001B878                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B878 703E                       		moveq	#$3E,d0
0001B87A 7228                       		moveq	#$28,d1
0001B87C 7440                       		moveq	#$40,d2
0001B87E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B882                            
0001B882                            Obj3E_FindObj28:
0001B882 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B884 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B886 D2C2                       		adda.w	d2,a1		; next object RAM
0001B888 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B88C                            
0001B88C 4EB9 0000 F410             		jsr	GotThroughAct
0001B892 4EF9 0000 DDBE             		jmp	DeleteObject
0001B898                            ; ===========================================================================
0001B898                            
0001B898                            Obj3E_Obj28Found:
0001B898 4E75                       		rts	
0001B89A                            ; ===========================================================================
0001B89A                            Ani_obj3E:
0001B89A                            	include "_anim\obj3E.asm"
0001B89A                            ; ---------------------------------------------------------------------------
0001B89A                            ; Animation script - prison capsule
0001B89A                            ; ---------------------------------------------------------------------------
0001B89A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B89C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B89E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B8A2                            		even
0001B8A2                            		even
0001B8A2                            
0001B8A2                            ; ---------------------------------------------------------------------------
0001B8A2                            ; Sprite mappings - prison capsule
0001B8A2                            ; ---------------------------------------------------------------------------
0001B8A2                            Map_obj3E:
0001B8A2                            	include "_maps\obj3E.asm"
0001B8A2                            ; ---------------------------------------------------------------------------
0001B8A2                            ; Sprite mappings - prison capsule
0001B8A2                            ; ---------------------------------------------------------------------------
0001B8A2 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B8A6 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B8AA 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B8AE 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B8B0 07                         byte_1AD82:	dc.b 7
0001B8B1 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B8B6 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B8BB E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B8C0 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B8C5 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B8CA 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B8CF 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B8D4 01                         byte_1ADA6:	dc.b 1
0001B8D5 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B8DA 06                         byte_1ADAC:	dc.b 6
0001B8DB 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B8E0 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B8E5 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B8EA 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B8EF 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B8F4 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B8F9 01                         byte_1ADCB:	dc.b 1
0001B8FA F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B8FF 02                         byte_1ADD1:	dc.b 2
0001B900 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B905 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B90A 01                         byte_1ADDC:	dc.b 1
0001B90B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B910 00                         byte_1ADE2:	dc.b 0
0001B912 00                         		even
0001B912 00                         		even
0001B912                            
0001B912                            ; ---------------------------------------------------------------------------
0001B912                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B912                            ; ---------------------------------------------------------------------------
0001B912                            
0001B912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B912                            
0001B912                            
0001B912                            TouchResponse:				; XREF: Obj01
0001B912 4E71                       		nop	
0001B914 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B918 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B91C 5142                       		subq.w	#8,d2
0001B91E 7A00                       		moveq	#0,d5
0001B920 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B924 5705                       		subq.b	#3,d5
0001B926 9645                       		sub.w	d5,d3
0001B928 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B92E 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B930 0643 000C                  		addi.w	#$C,d3
0001B934 7A0A                       		moveq	#$A,d5
0001B936                            
0001B936                            Touch_NoDuck:
0001B936 383C 0010                  		move.w	#$10,d4
0001B93A DA45                       		add.w	d5,d5
0001B93C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B940 3C3C 005F                  		move.w	#$5F,d6
0001B944                            
0001B944                            Touch_Loop:
0001B944 4A29 0001                  		tst.b	1(a1)
0001B948 6A00                       		bpl.s	Touch_NextObj
0001B94A 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B94E 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B950                            
0001B950                            Touch_NextObj:
0001B950 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B954 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B958                            
0001B958 7000                       		moveq	#0,d0
0001B95A 4E75                       		rts	
0001B95C                            ; ===========================================================================
0001B95C 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B95E 0C14                       		dc.b   $C, $14
0001B960 140C                       		dc.b  $14,  $C
0001B962 0410                       		dc.b	4, $10
0001B964 0C12                       		dc.b   $C, $12
0001B966 1010                       		dc.b  $10, $10
0001B968 0606                       		dc.b	6,   6
0001B96A 180C                       		dc.b  $18,  $C
0001B96C 0C10                       		dc.b   $C, $10
0001B96E 100C                       		dc.b  $10,  $C
0001B970 0808                       		dc.b	8,   8
0001B972 1410                       		dc.b  $14, $10
0001B974 1408                       		dc.b  $14,   8
0001B976 0E0E                       		dc.b   $E,  $E
0001B978 1818                       		dc.b  $18, $18
0001B97A 2810                       		dc.b  $28, $10
0001B97C 1018                       		dc.b  $10, $18
0001B97E 0810                       		dc.b	8, $10
0001B980 2070                       		dc.b  $20, $70
0001B982 4020                       		dc.b  $40, $20
0001B984 8020                       		dc.b  $80, $20
0001B986 2020                       		dc.b  $20, $20
0001B988 0808                       		dc.b	8,   8
0001B98A 0404                       		dc.b	4,   4
0001B98C 2008                       		dc.b  $20,   8
0001B98E 0C0C                       		dc.b   $C,  $C
0001B990 0804                       		dc.b	8,   4
0001B992 1804                       		dc.b  $18,   4
0001B994 2804                       		dc.b  $28,   4
0001B996 0408                       		dc.b	4,   8
0001B998 0418                       		dc.b	4, $18
0001B99A 0428                       		dc.b	4, $28
0001B99C 0420                       		dc.b	4, $20
0001B99E 1818                       		dc.b  $18, $18
0001B9A0 0C18                       		dc.b   $C, $18
0001B9A2 4808                       		dc.b  $48,   8
0001B9A4                            ; ===========================================================================
0001B9A4                            
0001B9A4                            Touch_Height:				; XREF: TouchResponse
0001B9A4 0240 003F                  		andi.w	#$3F,d0
0001B9A8 D040                       		add.w	d0,d0
0001B9AA 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B9AE 7200                       		moveq	#0,d1
0001B9B0 121A                       		move.b	(a2)+,d1
0001B9B2 3029 0008                  		move.w	8(a1),d0
0001B9B6 9041                       		sub.w	d1,d0
0001B9B8 9042                       		sub.w	d2,d0
0001B9BA 6400                       		bcc.s	loc_1AE98
0001B9BC D241                       		add.w	d1,d1
0001B9BE D041                       		add.w	d1,d0
0001B9C0 6500                       		bcs.s	Touch_Width
0001B9C2 6000 FF8C                  		bra.w	Touch_NextObj
0001B9C6                            ; ===========================================================================
0001B9C6                            
0001B9C6                            loc_1AE98:
0001B9C6 B044                       		cmp.w	d4,d0
0001B9C8 6200 FF86                  		bhi.w	Touch_NextObj
0001B9CC                            
0001B9CC                            Touch_Width:
0001B9CC 7200                       		moveq	#0,d1
0001B9CE 121A                       		move.b	(a2)+,d1
0001B9D0 3029 000C                  		move.w	$C(a1),d0
0001B9D4 9041                       		sub.w	d1,d0
0001B9D6 9043                       		sub.w	d3,d0
0001B9D8 6400                       		bcc.s	loc_1AEB6
0001B9DA D241                       		add.w	d1,d1
0001B9DC D240                       		add.w	d0,d1
0001B9DE 6500                       		bcs.s	Touch_ChkValue
0001B9E0 6000 FF6E                  		bra.w	Touch_NextObj
0001B9E4                            ; ===========================================================================
0001B9E4                            
0001B9E4                            loc_1AEB6:
0001B9E4 B045                       		cmp.w	d5,d0
0001B9E6 6200 FF68                  		bhi.w	Touch_NextObj
0001B9EA                            
0001B9EA                            Touch_ChkValue:
0001B9EA 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B9EE 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B9F2 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B9F6 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B9FA 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B9FE 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BA00 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BA04                            
0001BA04                            ; touch	response is $40-$7F
0001BA04                            
0001BA04 1029 0020                  		move.b	$20(a1),d0
0001BA08 0200 003F                  		andi.b	#$3F,d0
0001BA0C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BA10 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BA12 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BA18 6400 0000                  		bcc.w	locret_1AEF2
0001BA1C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BA20                            
0001BA20                            locret_1AEF2:
0001BA20 4E75                       		rts	
0001BA22                            ; ===========================================================================
0001BA22                            
0001BA22                            Touch_Monitor:
0001BA22 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BA26 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BA28 3028 000C                  		move.w	$C(a0),d0
0001BA2C 0440 0010                  		subi.w	#$10,d0
0001BA30 B069 000C                  		cmp.w	$C(a1),d0
0001BA34 6500                       		bcs.s	locret_1AF2E
0001BA36 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BA3A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001BA3E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BA44 4A29 0025                  		tst.b	$25(a1)
0001BA48 6600                       		bne.s	locret_1AF2E
0001BA4A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BA4E 4E75                       		rts	
0001BA50                            ; ===========================================================================
0001BA50                            
0001BA50                            loc_1AF1E:
0001BA50 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BA56 6600                       		bne.s	locret_1AF2E
0001BA58 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BA5C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BA60 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001BA66 6E00                       		bgt.s	@happy
0001BA68 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001BA6E 6D00                       		blt.s	@happy
0001BA70 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001BA76 6E00                       		bgt.s	@happy
0001BA78 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001BA7E 6C00                       		bge.s	locret_1AF2E
0001BA80                            
0001BA80                            	@happy:
0001BA80 0828 0001 0022             		btst	#1,$22(a0)
0001BA86 6700                       		beq.s	locret_1AF2E
0001BA88 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001BA8E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001BA94                            
0001BA94                            locret_1AF2E:
0001BA94 4E75                       		rts	
0001BA96                            ; ===========================================================================
0001BA96                            
0001BA96                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BA96 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BA9A 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BA9C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BAA2 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BAA6                            
0001BAA6                            loc_1AF40:
0001BAA6 4A29 0021                  		tst.b	$21(a1)
0001BAAA 6700                       		beq.s	Touch_KillEnemy
0001BAAC 4468 0010                  		neg.w	$10(a0)
0001BAB0 4468 0012                  		neg.w	$12(a0)
0001BAB4 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001BAB8 E0E8 0010                  		asr	$10(a0)
0001BABC E0E8 0012                  		asr	$12(a0)
0001BAC0 137C 0000 0020             		move.b	#0,$20(a1)
0001BAC6 5329 0021                  		subq.b	#1,$21(a1)
0001BACA 6600                       		bne.s	locret_1AF68
0001BACC 08E9 0007 0022             		bset	#7,$22(a1)
0001BAD2                            
0001BAD2                            locret_1AF68:
0001BAD2 4E75                       		rts	
0001BAD4                            ; ===========================================================================
0001BAD4                            
0001BAD4                            Touch_KillEnemy:
0001BAD4 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001BADA 6E00                       		bgt.s	@happy
0001BADC 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001BAE2 6D00                       		blt.s	@happy
0001BAE4 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001BAEA 6E00                       		bgt.s	@happy
0001BAEC 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001BAF2 6C00                       		bge.s	@nothappy
0001BAF4                            
0001BAF4                            	@happy:
0001BAF4 0828 0001 0022             		btst	#1,$22(a0)
0001BAFA 6700                       		beq.s	@nothappy
0001BAFC 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001BB02 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001BB08                            
0001BB08                            	@nothappy:
0001BB08 08E9 0007 0022             		bset	#7,$22(a1)
0001BB0E 7000                       		moveq	#0,d0
0001BB10 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BB14 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BB18 0C40 0006                  		cmpi.w	#6,d0
0001BB1C 6500                       		bcs.s	loc_1AF82
0001BB1E 7006                       		moveq	#6,d0
0001BB20                            
0001BB20                            loc_1AF82:
0001BB20 3340 003E                  		move.w	d0,$3E(a1)
0001BB24 4A40                       		tst.w	d0
0001BB26 6700                       		beq.s	@nocombo
0001BB28 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001BB2E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001BB34                            
0001BB34                            	@nocombo:
0001BB34 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BB38 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BB3E 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BB40 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BB44 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BB4A                            
0001BB4A                            loc_1AF9C:
0001BB4A 6100 0000                  		bsr.w	AddPoints
0001BB4E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BB52 137C 0000 0024             		move.b	#0,$24(a1)
0001BB58 4A68 0012                  		tst.w	$12(a0)
0001BB5C 6B00                       		bmi.s	loc_1AFC2
0001BB5E 3028 000C                  		move.w	$C(a0),d0
0001BB62 B069 000C                  		cmp.w	$C(a1),d0
0001BB66 6400                       		bcc.s	loc_1AFCA
0001BB68 4468 0012                  		neg.w	$12(a0)
0001BB6C 4E75                       		rts	
0001BB6E                            ; ===========================================================================
0001BB6E                            
0001BB6E                            loc_1AFC2:
0001BB6E 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BB74 4E75                       		rts	
0001BB76                            ; ===========================================================================
0001BB76                            
0001BB76                            loc_1AFCA:
0001BB76 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BB7C 4E75                       		rts	
0001BB7E                            ; ===========================================================================
0001BB7E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BB86                            ; ===========================================================================
0001BB86                            
0001BB86                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BB86 08E9 0007 0022             		bset	#7,$22(a1)
0001BB8C                            
0001BB8C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BB8C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB90 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BB92                            
0001BB92                            loc_1AFE6:				; XREF: Touch_Hurt
0001BB92 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001BB98 6E00                       		bgt.s	locret_1AFE6
0001BB9A                            
0001BB9A                            loc2_1AFE6:				; XREF: Touch_Hurt
0001BB9A 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001BBA0 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001BBA6                            
0001BBA6                            locret_1AFE6:
0001BBA6 70FF                       		moveq	#-1,d0
0001BBA8 4E75                       		rts	
0001BBAA                            ; ===========================================================================
0001BBAA                            
0001BBAA                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BBAA 4E71                       		nop	
0001BBAC 4A68 0030                  		tst.w	$30(a0)
0001BBB0 66E8                       		bne.s	loc2_1AFE6
0001BBB2 2449                       		movea.l	a1,a2
0001BBB4                            
0001BBB4                            ; End of function TouchResponse
0001BBB4                            ; continue straight to HurtSonic
0001BBB4                            
0001BBB4                            ; ---------------------------------------------------------------------------
0001BBB4                            ; Hurting Sonic	subroutine
0001BBB4                            ; ---------------------------------------------------------------------------
0001BBB4                            
0001BBB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBB4                            
0001BBB4                            
0001BBB4                            HurtSonic:
0001BBB4 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001BBBA 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001BBC0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BBC4 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BBC6 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BBCA 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BBCE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001BBD4 6500                       		bcs.s	@notbad
0001BBD6 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BBDC                            
0001BBDC                            	@notbad:
0001BBDC 4EB9 0000 E20E             		jsr	SingleObjLoad
0001BBE2 6600                       		bne.s	Hurt_Shield
0001BBE4 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BBE8 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BBF4                            
0001BBF4                            Hurt_Shield:
0001BBF4 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BBFA 117C 0004 0024             		move.b	#4,$24(a0)
0001BC00 6100 837C                  		bsr.w	Sonic_ResetOnFloor
0001BC04 08E8 0001 0022             		bset	#1,$22(a0)
0001BC0A 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BC10 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BC16 0828 0006 0022             		btst	#6,$22(a0)
0001BC1C 6700                       		beq.s	Hurt_Reverse
0001BC1E 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BC24 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BC2A                            
0001BC2A                            Hurt_Reverse:
0001BC2A 3028 0008                  		move.w	8(a0),d0
0001BC2E B06A 0008                  		cmp.w	8(a2),d0
0001BC32 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BC34 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BC38                            
0001BC38                            Hurt_ChkSpikes:
0001BC38 317C 0000 0014             		move.w	#0,$14(a0)
0001BC3E 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BC44 317C 0078 0030             		move.w	#$78,$30(a0)
0001BC4A 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BC4E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BC52 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BC54 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BC58 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BC5A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BC5E                            
0001BC5E                            Hurt_Sound:
0001BC5E 4EB9 0000 1262             		jsr	(PlaySound_Special).l
0001BC64 70FF                       		moveq	#-1,d0
0001BC66 4E75                       		rts	
0001BC68                            ; ===========================================================================
0001BC68                            
0001BC68                            Hurt_NoRings:
0001BC68 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BC6C 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BC70                            ; End of function HurtSonic
0001BC70                            
0001BC70                            ; ---------------------------------------------------------------------------
0001BC70                            ; Subroutine to	kill Sonic
0001BC70                            ; ---------------------------------------------------------------------------
0001BC70                            
0001BC70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC70                            
0001BC70                            
0001BC70                            KillSonic:
0001BC70 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BC74 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BC76 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BC7C 117C 0006 0024             		move.b	#6,$24(a0)
0001BC82 6100 82FA                  		bsr.w	Sonic_ResetOnFloor
0001BC86 08E8 0001 0022             		bset	#1,$22(a0)
0001BC8C 317C F900 0012             		move.w	#-$700,$12(a0)
0001BC92 317C 0000 0010             		move.w	#0,$10(a0)
0001BC98 317C 0000 0014             		move.w	#0,$14(a0)
0001BC9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BCA4 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BCAA 08E8 0007 0002             		bset	#7,2(a0)
0001BCB0 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BCB4 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BCB8 6600                       		bne.s	Kill_Sound
0001BCBA 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BCBE                            
0001BCBE                            Kill_Sound:
0001BCBE 4EB9 0000 1262             		jsr	(PlaySound_Special).l
0001BCC4                            
0001BCC4                            Kill_NoDeath:
0001BCC4 70FF                       		moveq	#-1,d0
0001BCC6 4E75                       		rts	
0001BCC8                            ; End of function KillSonic
0001BCC8                            
0001BCC8                            
0001BCC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCC8                            
0001BCC8                            
0001BCC8                            Touch_Special:				; XREF: Touch_ChkValue
0001BCC8 1229 0020                  		move.b	$20(a1),d1
0001BCCC 0201 003F                  		andi.b	#$3F,d1
0001BCD0 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BCD4 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BCD6 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BCDA 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BCDC 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BCE0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BCE2 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BCE6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BCE8 4E75                       		rts	
0001BCEA                            ; ===========================================================================
0001BCEA                            
0001BCEA                            Touch_CatKiller:			; XREF: Touch_Special
0001BCEA 6000 FE9A                  		bra.w	loc_1AFDA
0001BCEE                            ; ===========================================================================
0001BCEE                            
0001BCEE                            Touch_Yadrin:				; XREF: Touch_Special
0001BCEE 9A40                       		sub.w	d0,d5
0001BCF0 0C45 0008                  		cmpi.w	#8,d5
0001BCF4 6400                       		bcc.s	loc_1B144
0001BCF6 3029 0008                  		move.w	8(a1),d0
0001BCFA 5940                       		subq.w	#4,d0
0001BCFC 0829 0000 0022             		btst	#0,$22(a1)
0001BD02 6700                       		beq.s	loc_1B130
0001BD04 0440 0010                  		subi.w	#$10,d0
0001BD08                            
0001BD08                            loc_1B130:
0001BD08 9042                       		sub.w	d2,d0
0001BD0A 6400                       		bcc.s	loc_1B13C
0001BD0C 0640 0018                  		addi.w	#$18,d0
0001BD10 6500                       		bcs.s	loc_1B140
0001BD12 6000                       		bra.s	loc_1B144
0001BD14                            ; ===========================================================================
0001BD14                            
0001BD14                            loc_1B13C:
0001BD14 B044                       		cmp.w	d4,d0
0001BD16 6200                       		bhi.s	loc_1B144
0001BD18                            
0001BD18                            loc_1B140:
0001BD18 6000 FE72                  		bra.w	Touch_ChkHurt
0001BD1C                            ; ===========================================================================
0001BD1C                            
0001BD1C                            loc_1B144:
0001BD1C 6000 FD78                  		bra.w	Touch_Enemy
0001BD20                            ; ===========================================================================
0001BD20                            
0001BD20                            Touch_D7orE1:				; XREF: Touch_Special
0001BD20 5229 0021                  		addq.b	#1,$21(a1)
0001BD24 4E75                       		rts	
0001BD26                            ; End of function Touch_Special
0001BD26                            
0001BD26                            ; ---------------------------------------------------------------------------
0001BD26                            ; Subroutine to	show the special stage layout
0001BD26                            ; ---------------------------------------------------------------------------
0001BD26                            
0001BD26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD26                            
0001BD26                            
0001BD26                            SS_ShowLayout:				; XREF: SpecialStage
0001BD26 4A78 F63A                  		tst.w	($FFFFF63A).w
0001BD2A 6600                       		bne.s	@noanimate
0001BD2C 6100 0000                  		bsr.w	SS_AniWallsRings
0001BD30 6100 0000                  		bsr.w	SS_AniItems
0001BD34                            
0001BD34                            	@noanimate:
0001BD34 3F05                       		move.w	d5,-(sp)
0001BD36 43F8 8000                  		lea	($FFFF8000).w,a1
0001BD3A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD3E 0200 00FC                  		andi.b	#$FC,d0
0001BD42 4EB9 0000 28EC             		jsr	(CalcSine).l
0001BD48 3800                       		move.w	d0,d4
0001BD4A 3A01                       		move.w	d1,d5
0001BD4C C9FC 0018                  		muls.w	#$18,d4
0001BD50 CBFC 0018                  		muls.w	#$18,d5
0001BD54 7400                       		moveq	#0,d2
0001BD56 3438 F700                  		move.w	($FFFFF700).w,d2
0001BD5A 84FC 0018                  		divu.w	#$18,d2
0001BD5E 4842                       		swap	d2
0001BD60 4442                       		neg.w	d2
0001BD62 0642 FF4C                  		addi.w	#-$B4,d2
0001BD66 7600                       		moveq	#0,d3
0001BD68 3638 F704                  		move.w	($FFFFF704).w,d3
0001BD6C 86FC 0018                  		divu.w	#$18,d3
0001BD70 4843                       		swap	d3
0001BD72 4443                       		neg.w	d3
0001BD74 0643 FF4C                  		addi.w	#-$B4,d3
0001BD78 3E3C 000F                  		move.w	#$F,d7
0001BD7C                            
0001BD7C                            loc_1B19E:
0001BD7C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BD80 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BD84 4440                       		neg.w	d0
0001BD86 C3C2                       		muls.w	d2,d1
0001BD88 C1C3                       		muls.w	d3,d0
0001BD8A 2C00                       		move.l	d0,d6
0001BD8C DC81                       		add.l	d1,d6
0001BD8E 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BD92 C1C2                       		muls.w	d2,d0
0001BD94 C3C3                       		muls.w	d3,d1
0001BD96 D280                       		add.l	d0,d1
0001BD98 2406                       		move.l	d6,d2
0001BD9A 3C3C 000F                  		move.w	#$F,d6
0001BD9E                            
0001BD9E                            loc_1B1C0:
0001BD9E 2002                       		move.l	d2,d0
0001BDA0 E080                       		asr.l	#8,d0
0001BDA2 32C0                       		move.w	d0,(a1)+
0001BDA4 2001                       		move.l	d1,d0
0001BDA6 E080                       		asr.l	#8,d0
0001BDA8 32C0                       		move.w	d0,(a1)+
0001BDAA D485                       		add.l	d5,d2
0001BDAC D284                       		add.l	d4,d1
0001BDAE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BDB2                            
0001BDB2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BDB6 0643 0018                  		addi.w	#$18,d3
0001BDBA 51CF FFC0                  		dbf	d7,loc_1B19E
0001BDBE                            
0001BDBE 3A1F                       		move.w	(sp)+,d5
0001BDC0 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BDC6 7000                       		moveq	#0,d0
0001BDC8 3038 F704                  		move.w	($FFFFF704).w,d0
0001BDCC 80FC 0018                  		divu.w	#$18,d0
0001BDD0 C0FC 0080                  		mulu.w	#$80,d0
0001BDD4 D1C0                       		adda.l	d0,a0
0001BDD6 7000                       		moveq	#0,d0
0001BDD8 3038 F700                  		move.w	($FFFFF700).w,d0
0001BDDC 80FC 0018                  		divu.w	#$18,d0
0001BDE0 D0C0                       		adda.w	d0,a0
0001BDE2 49F8 8000                  		lea	($FFFF8000).w,a4
0001BDE6 3E3C 000F                  		move.w	#$F,d7
0001BDEA                            
0001BDEA                            loc_1B20C:
0001BDEA 3C3C 000F                  		move.w	#$F,d6
0001BDEE                            
0001BDEE                            loc_1B210:
0001BDEE 7000                       		moveq	#0,d0
0001BDF0 1018                       		move.b	(a0)+,d0
0001BDF2 6700                       		beq.s	loc_1B268
0001BDF4 0C00 004E                  		cmpi.b	#$4E,d0
0001BDF8 6200                       		bhi.s	loc_1B268
0001BDFA 3614                       		move.w	(a4),d3
0001BDFC 0643 0120                  		addi.w	#$120,d3
0001BE00 0C43 0070                  		cmpi.w	#$70,d3
0001BE04 6500                       		bcs.s	loc_1B268
0001BE06 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BE0A 6400                       		bcc.s	loc_1B268
0001BE0C 342C 0002                  		move.w	2(a4),d2
0001BE10 0642 00F0                  		addi.w	#$F0,d2
0001BE14 0C42 0070                  		cmpi.w	#$70,d2
0001BE18 6500                       		bcs.s	loc_1B268
0001BE1A 0C42 0170                  		cmpi.w	#$170,d2
0001BE1E 6400                       		bcc.s	loc_1B268
0001BE20 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BE26 E748                       		lsl.w	#3,d0
0001BE28 4BF5 0000                  		lea	(a5,d0.w),a5
0001BE2C 225D                       		movea.l	(a5)+,a1
0001BE2E 321D                       		move.w	(a5)+,d1
0001BE30 D241                       		add.w	d1,d1
0001BE32 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BE36 365D                       		movea.w	(a5)+,a3
0001BE38 7200                       		moveq	#0,d1
0001BE3A 1219                       		move.b	(a1)+,d1
0001BE3C 5301                       		subq.b	#1,d1
0001BE3E 6B00                       		bmi.s	loc_1B268
0001BE40 4EB9 0000 DEE6             		jsr	sub_D762
0001BE46                            
0001BE46                            loc_1B268:
0001BE46 584C                       		addq.w	#4,a4
0001BE48 51CE FFA4                  		dbf	d6,loc_1B210
0001BE4C                            
0001BE4C 41E8 0070                  		lea	$70(a0),a0
0001BE50 51CF FF98                  		dbf	d7,loc_1B20C
0001BE54                            
0001BE54 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BE58 0C05 0050                  		cmpi.b	#$50,d5
0001BE5C 6700                       		beq.s	loc_1B288
0001BE5E 24BC 0000 0000             		move.l	#0,(a2)
0001BE64 4E75                       		rts	
0001BE66                            ; ===========================================================================
0001BE66                            
0001BE66                            loc_1B288:
0001BE66 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BE6C 4E75                       		rts	
0001BE6E                            ; End of function SS_ShowLayout
0001BE6E                            
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            ; Subroutine to	animate	walls and rings	in the special stage
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            
0001BE6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE6E                            
0001BE6E                            
0001BE6E                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BE6E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BE74 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BE78 6A00                       		bpl.s	loc_1B2C8
0001BE7A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BE80 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BE84 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BE8A                            
0001BE8A                            loc_1B2C8:
0001BE8A 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BE90 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BE94 6A00                       		bpl.s	loc_1B2E4
0001BE96 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BE9C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BEA0 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BEA6                            
0001BEA6                            loc_1B2E4:
0001BEA6 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BEAA 1340 0138                  		move.b	d0,$138(a1)
0001BEAE 1340 0160                  		move.b	d0,$160(a1)
0001BEB2 1340 0148                  		move.b	d0,$148(a1)
0001BEB6 1340 0150                  		move.b	d0,$150(a1)
0001BEBA 1340 01D8                  		move.b	d0,$1D8(a1)
0001BEBE 1340 01E0                  		move.b	d0,$1E0(a1)
0001BEC2 1340 01E8                  		move.b	d0,$1E8(a1)
0001BEC6 1340 01F0                  		move.b	d0,$1F0(a1)
0001BECA 1340 01F8                  		move.b	d0,$1F8(a1)
0001BECE 1340 0200                  		move.b	d0,$200(a1)
0001BED2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BED6 6A00                       		bpl.s	loc_1B326
0001BED8 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BEDE 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BEE2 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BEE8                            
0001BEE8                            loc_1B326:
0001BEE8 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BEEC 1340 0168                  		move.b	d0,$168(a1)
0001BEF0 1340 0170                  		move.b	d0,$170(a1)
0001BEF4 1340 0178                  		move.b	d0,$178(a1)
0001BEF8 1340 0180                  		move.b	d0,$180(a1)
0001BEFC 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BF00 6A00                       		bpl.s	loc_1B350
0001BF02 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BF08 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BF0C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BF12                            
0001BF12                            loc_1B350:
0001BF12 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BF18 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BF1E 7000                       		moveq	#0,d0
0001BF20 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BF24 D040                       		add.w	d0,d0
0001BF26 41F0 0000                  		lea	(a0,d0.w),a0
0001BF2A 3290                       		move.w	(a0),(a1)
0001BF2C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF32 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF38 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF3E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF44 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF4A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF50 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF56 D0FC 0020                  		adda.w	#$20,a0
0001BF5A D2FC 0048                  		adda.w	#$48,a1
0001BF5E 3290                       		move.w	(a0),(a1)
0001BF60 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF66 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF6C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF72 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF78 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF7E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF84 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF8A D0FC 0020                  		adda.w	#$20,a0
0001BF8E D2FC 0048                  		adda.w	#$48,a1
0001BF92 3290                       		move.w	(a0),(a1)
0001BF94 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF9A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFA0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFA6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFAC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFB2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFB8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFBE D0FC 0020                  		adda.w	#$20,a0
0001BFC2 D2FC 0048                  		adda.w	#$48,a1
0001BFC6 3290                       		move.w	(a0),(a1)
0001BFC8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFCE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFD4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFDA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFE0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFE6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFEC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFF2 D0FC 0020                  		adda.w	#$20,a0
0001BFF6 D2FC 0048                  		adda.w	#$48,a1
0001BFFA 4E75                       		rts	
0001BFFC                            ; End of function SS_AniWallsRings
0001BFFC                            
0001BFFC                            SS_LoadWalls:
0001BFFC 7000                       		moveq	#0,d0
0001BFFE 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001C002 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001C004 0240 000F                  		andi.w	#$F,d0
0001C008 B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001C00C 6700                       		beq.s	@return			; if so, branch
0001C00E                            
0001C00E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C014 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001C01A 3200                       		move.w	d0,d1
0001C01C E149                       		lsl.w	#8,d1
0001C01E D241                       		add.w	d1,d1
0001C020 D2C1                       		add.w	d1,a1
0001C022                            
0001C02C                            
0001C02C 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001C030 4EB9 0000 0000             		jsr	LoadTiles
0001C036 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001C03A                            
0001C03A                            	@return:
0001C03A 4E75                       		rts
0001C03C                            
0001C03C                            ; ===========================================================================
0001C03C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C04C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C05C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C06C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C07C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C08C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C09C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0AC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0BC                            ; ---------------------------------------------------------------------------
0001C0BC                            ; Subroutine to	remove items when you collect them in the special stage
0001C0BC                            ; ---------------------------------------------------------------------------
0001C0BC                            
0001C0BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0BC                            
0001C0BC                            
0001C0BC                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C0BC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C0C2 303C 001F                  		move.w	#$1F,d0
0001C0C6                            
0001C0C6                            loc_1B4C4:
0001C0C6 4A12                       		tst.b	(a2)
0001C0C8 6700                       		beq.s	locret_1B4CE
0001C0CA 504A                       		addq.w	#8,a2
0001C0CC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C0D0                            
0001C0D0                            locret_1B4CE:
0001C0D0 4E75                       		rts	
0001C0D2                            ; End of function SS_RemoveCollectedItem
0001C0D2                            
0001C0D2                            ; ---------------------------------------------------------------------------
0001C0D2                            ; Subroutine to	animate	special	stage items when you touch them
0001C0D2                            ; ---------------------------------------------------------------------------
0001C0D2                            
0001C0D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0D2                            
0001C0D2                            
0001C0D2                            SS_AniItems:				; XREF: SS_ShowLayout
0001C0D2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C0D8 3E3C 001F                  		move.w	#$1F,d7
0001C0DC                            
0001C0DC                            loc_1B4DA:
0001C0DC 7000                       		moveq	#0,d0
0001C0DE 1010                       		move.b	(a0),d0
0001C0E0 6700                       		beq.s	loc_1B4E8
0001C0E2 E548                       		lsl.w	#2,d0
0001C0E4 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C0E8 4E91                       		jsr	(a1)
0001C0EA                            
0001C0EA                            loc_1B4E8:
0001C0EA 5048                       		addq.w	#8,a0
0001C0EC                            
0001C0EC                            loc_1B4EA:
0001C0EC 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C0F0                            
0001C0F0 4E75                       		rts	
0001C0F2                            ; End of function SS_AniItems
0001C0F2                            
0001C0F2                            ; ===========================================================================
0001C0F2 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C0F6 0000 0000                  		dc.l SS_AniBumper
0001C0FA 0000 0000                  		dc.l SS_Ani1Up
0001C0FE 0000 0000                  		dc.l SS_AniReverse
0001C102 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C106 0000 0000                  		dc.l SS_AniGlassBlock
0001C10A                            ; ===========================================================================
0001C10A                            
0001C10A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C10A 5328 0002                  		subq.b	#1,2(a0)
0001C10E 6A00                       		bpl.s	locret_1B530
0001C110 117C 0005 0002             		move.b	#5,2(a0)
0001C116 7000                       		moveq	#0,d0
0001C118 1028 0003                  		move.b	3(a0),d0
0001C11C 5228 0003                  		addq.b	#1,3(a0)
0001C120 2268 0004                  		movea.l	4(a0),a1
0001C124 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C128 1280                       		move.b	d0,(a1)
0001C12A 6600                       		bne.s	locret_1B530
0001C12C 4290                       		clr.l	(a0)
0001C12E 42A8 0004                  		clr.l	4(a0)
0001C132                            
0001C132                            locret_1B530:
0001C132 4E75                       		rts	
0001C134                            ; ===========================================================================
0001C134 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C13A                            ; ===========================================================================
0001C13A                            
0001C13A                            SS_AniBumper:				; XREF: SS_AniIndex
0001C13A 5328 0002                  		subq.b	#1,2(a0)
0001C13E 6A00                       		bpl.s	locret_1B566
0001C140 117C 0007 0002             		move.b	#7,2(a0)
0001C146 7000                       		moveq	#0,d0
0001C148 1028 0003                  		move.b	3(a0),d0
0001C14C 5228 0003                  		addq.b	#1,3(a0)
0001C150 2268 0004                  		movea.l	4(a0),a1
0001C154 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C158 6600                       		bne.s	loc_1B564
0001C15A 4290                       		clr.l	(a0)
0001C15C 42A8 0004                  		clr.l	4(a0)
0001C160 12BC 0025                  		move.b	#$25,(a1)
0001C164 4E75                       		rts	
0001C166                            ; ===========================================================================
0001C166                            
0001C166                            loc_1B564:
0001C166 1280                       		move.b	d0,(a1)
0001C168                            
0001C168                            locret_1B566:
0001C168 4E75                       		rts	
0001C16A                            ; ===========================================================================
0001C16A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C170                            ; ===========================================================================
0001C170                            
0001C170                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C170 5328 0002                  		subq.b	#1,2(a0)
0001C174 6A00                       		bpl.s	locret_1B596
0001C176 117C 0005 0002             		move.b	#5,2(a0)
0001C17C 7000                       		moveq	#0,d0
0001C17E 1028 0003                  		move.b	3(a0),d0
0001C182 5228 0003                  		addq.b	#1,3(a0)
0001C186 2268 0004                  		movea.l	4(a0),a1
0001C18A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C18E 1280                       		move.b	d0,(a1)
0001C190 6600                       		bne.s	locret_1B596
0001C192 4290                       		clr.l	(a0)
0001C194 42A8 0004                  		clr.l	4(a0)
0001C198                            
0001C198                            locret_1B596:
0001C198 4E75                       		rts	
0001C19A                            ; ===========================================================================
0001C19A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C1A0                            ; ===========================================================================
0001C1A0                            
0001C1A0                            SS_AniReverse:				; XREF: SS_AniIndex
0001C1A0 5328 0002                  		subq.b	#1,2(a0)
0001C1A4 6A00                       		bpl.s	locret_1B5CC
0001C1A6 117C 0007 0002             		move.b	#7,2(a0)
0001C1AC 7000                       		moveq	#0,d0
0001C1AE 1028 0003                  		move.b	3(a0),d0
0001C1B2 5228 0003                  		addq.b	#1,3(a0)
0001C1B6 2268 0004                  		movea.l	4(a0),a1
0001C1BA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C1BE 6600                       		bne.s	loc_1B5CA
0001C1C0 4290                       		clr.l	(a0)
0001C1C2 42A8 0004                  		clr.l	4(a0)
0001C1C6 12BC 002B                  		move.b	#$2B,(a1)
0001C1CA 4E75                       		rts	
0001C1CC                            ; ===========================================================================
0001C1CC                            
0001C1CC                            loc_1B5CA:
0001C1CC 1280                       		move.b	d0,(a1)
0001C1CE                            
0001C1CE                            locret_1B5CC:
0001C1CE 4E75                       		rts	
0001C1D0                            ; ===========================================================================
0001C1D0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C1D6 5328 0002                  		subq.b	#1,2(a0)
0001C1DA 6A00                       		bpl.s	locret_1B60C
0001C1DC 117C 0005 0002             		move.b	#5,2(a0)
0001C1E2 7000                       		moveq	#0,d0
0001C1E4 1028 0003                  		move.b	3(a0),d0
0001C1E8 5228 0003                  		addq.b	#1,3(a0)
0001C1EC 2268 0004                  		movea.l	4(a0),a1
0001C1F0 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C1F4 1280                       		move.b	d0,(a1)
0001C1F6 6600                       		bne.s	locret_1B60C
0001C1F8 4290                       		clr.l	(a0)
0001C1FA 42A8 0004                  		clr.l	4(a0)
0001C1FE 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C204 303C 00A8                  		move.w	#$A8,d0
0001C208 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C20E                            
0001C20E                            locret_1B60C:
0001C20E 4E75                       		rts	
0001C210                            ; ===========================================================================
0001C210 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C216                            ; ===========================================================================
0001C216                            
0001C216                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C216 5328 0002                  		subq.b	#1,2(a0)
0001C21A 6A00                       		bpl.s	locret_1B640
0001C21C 117C 0001 0002             		move.b	#1,2(a0)
0001C222 7000                       		moveq	#0,d0
0001C224 1028 0003                  		move.b	3(a0),d0
0001C228 5228 0003                  		addq.b	#1,3(a0)
0001C22C 2268 0004                  		movea.l	4(a0),a1
0001C230 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C234 1280                       		move.b	d0,(a1)
0001C236 6600                       		bne.s	locret_1B640
0001C238 12A8 0004                  		move.b	4(a0),(a1)
0001C23C 4290                       		clr.l	(a0)
0001C23E 42A8 0004                  		clr.l	4(a0)
0001C242                            
0001C242                            locret_1B640:
0001C242 4E75                       		rts	
0001C244                            ; ===========================================================================
0001C244 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E                            ; Special stage	layout pointers
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E                            SS_LayoutIndex:
0001C24E                            	include "_inc\Special stage layout pointers.asm"
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E                            ; Special stage	layout pointers
0001C24E                            ; ---------------------------------------------------------------------------
0001C24E 0000 0000                  	dc.l SS_1
0001C252 0000 0000                  	dc.l SS_2
0001C256 0000 0000                  	dc.l SS_3
0001C25A 0000 0000                  	dc.l SS_4
0001C25E 0000 0000                  	dc.l SS_5
0001C262 0000 0000                  	dc.l SS_6
0001C266                            	even
0001C266                            	even
0001C266                            
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            ; Special stage	start locations
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C27E                            		even
0001C27E                            
0001C27E                            ; ---------------------------------------------------------------------------
0001C27E                            ; Subroutine to	load special stage layout
0001C27E                            ; ---------------------------------------------------------------------------
0001C27E                            
0001C27E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C27E                            
0001C27E                            
0001C27E                            SS_Load:				; XREF: SpecialStage
0001C27E 7000                       		moveq	#0,d0
0001C280 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C284 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C288 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C28E 6500                       		bcs.s	SS_ChkEmldNum
0001C290 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C296                            
0001C296                            SS_ChkEmldNum:
0001C296 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C29C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C29E 7200                       		moveq	#0,d1
0001C2A0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C2A4 5301                       		subq.b	#1,d1
0001C2A6 6500                       		bcs.s	SS_LoadData
0001C2A8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C2AC                            
0001C2AC                            SS_ChkEmldLoop:	
0001C2AC B033 1000                  		cmp.b	(a3,d1.w),d0
0001C2B0 6600                       		bne.s	SS_ChkEmldRepeat
0001C2B2 60CA                       		bra.s	SS_Load
0001C2B4                            ; ===========================================================================
0001C2B4                            
0001C2B4                            SS_ChkEmldRepeat:
0001C2B4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C2B8                            
0001C2B8                            SS_LoadData:
0001C2B8 E548                       		lsl.w	#2,d0
0001C2BA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C2BE 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C2C2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C2C6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C2CA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C2D0 303C 0000                  		move.w	#0,d0
0001C2D4 4EB9 0000 1628             		jsr	(EniDec).l
0001C2DA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2E0 303C 0FFF                  		move.w	#$FFF,d0
0001C2E4                            
0001C2E4                            SS_ClrRAM3:
0001C2E4 4299                       		clr.l	(a1)+
0001C2E6 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C2EA                            
0001C2EA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C2F0 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C2F6 723F                       		moveq	#$3F,d1
0001C2F8                            
0001C2F8                            loc_1B6F6:
0001C2F8 743F                       		moveq	#$3F,d2
0001C2FA                            
0001C2FA                            loc_1B6F8:
0001C2FA 12D8                       		move.b	(a0)+,(a1)+
0001C2FC 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C300                            
0001C300 43E9 0040                  		lea	$40(a1),a1
0001C304 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C308                            
0001C308 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C30E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C314 724D                       		moveq	#$4D,d1
0001C316                            
0001C316                            loc_1B714:
0001C316 22D8                       		move.l	(a0)+,(a1)+
0001C318 32FC 0000                  		move.w	#0,(a1)+
0001C31C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C322 32D8                       		move.w	(a0)+,(a1)+
0001C324 51C9 FFF0                  		dbf	d1,loc_1B714
0001C328                            
0001C328 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C32E 323C 003F                  		move.w	#$3F,d1
0001C332                            
0001C332                            loc_1B730:
0001C332                            
0001C332 4299                       		clr.l	(a1)+
0001C334 51C9 FFFC                  		dbf	d1,loc_1B730
0001C338                            
0001C338 4E75                       		rts	
0001C33A                            ; End of function SS_Load
0001C33A                            
0001C33A                            ; ===========================================================================
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A                            ; Special stage	mappings and VRAM pointers
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A                            SS_MapIndex:
0001C33A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A                            ; Special stage	mappings and VRAM pointers
0001C33A                            ; ---------------------------------------------------------------------------
0001C33A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C33E 0142                       	dc.w $142		; VRAM setting
0001C340 0000 0000                  	dc.l Map_SSWalls
0001C344 0142                       	dc.w $142
0001C346 0000 0000                  	dc.l Map_SSWalls
0001C34A 0142                       	dc.w $142
0001C34C 0000 0000                  	dc.l Map_SSWalls
0001C350 0142                       	dc.w $142
0001C352 0000 0000                  	dc.l Map_SSWalls
0001C356 0142                       	dc.w $142
0001C358 0000 0000                  	dc.l Map_SSWalls
0001C35C 0142                       	dc.w $142
0001C35E 0000 0000                  	dc.l Map_SSWalls
0001C362 0142                       	dc.w $142
0001C364 0000 0000                  	dc.l Map_SSWalls
0001C368 0142                       	dc.w $142
0001C36A 0000 0000                  	dc.l Map_SSWalls
0001C36E 0142                       	dc.w $142
0001C370 0000 0000                  	dc.l Map_SSWalls
0001C374 2142                       	dc.w $2142
0001C376 0000 0000                  	dc.l Map_SSWalls
0001C37A 2142                       	dc.w $2142
0001C37C 0000 0000                  	dc.l Map_SSWalls
0001C380 2142                       	dc.w $2142
0001C382 0000 0000                  	dc.l Map_SSWalls
0001C386 2142                       	dc.w $2142
0001C388 0000 0000                  	dc.l Map_SSWalls
0001C38C 2142                       	dc.w $2142
0001C38E 0000 0000                  	dc.l Map_SSWalls
0001C392 2142                       	dc.w $2142
0001C394 0000 0000                  	dc.l Map_SSWalls
0001C398 2142                       	dc.w $2142
0001C39A 0000 0000                  	dc.l Map_SSWalls
0001C39E 2142                       	dc.w $2142
0001C3A0 0000 0000                  	dc.l Map_SSWalls
0001C3A4 2142                       	dc.w $2142
0001C3A6 0000 0000                  	dc.l Map_SSWalls
0001C3AA 4142                       	dc.w $4142
0001C3AC 0000 0000                  	dc.l Map_SSWalls
0001C3B0 4142                       	dc.w $4142
0001C3B2 0000 0000                  	dc.l Map_SSWalls
0001C3B6 4142                       	dc.w $4142
0001C3B8 0000 0000                  	dc.l Map_SSWalls
0001C3BC 4142                       	dc.w $4142
0001C3BE 0000 0000                  	dc.l Map_SSWalls
0001C3C2 4142                       	dc.w $4142
0001C3C4 0000 0000                  	dc.l Map_SSWalls
0001C3C8 4142                       	dc.w $4142
0001C3CA 0000 0000                  	dc.l Map_SSWalls
0001C3CE 4142                       	dc.w $4142
0001C3D0 0000 0000                  	dc.l Map_SSWalls
0001C3D4 4142                       	dc.w $4142
0001C3D6 0000 0000                  	dc.l Map_SSWalls
0001C3DA 4142                       	dc.w $4142
0001C3DC 0000 0000                  	dc.l Map_SSWalls
0001C3E0 6142                       	dc.w $6142
0001C3E2 0000 0000                  	dc.l Map_SSWalls
0001C3E6 6142                       	dc.w $6142
0001C3E8 0000 0000                  	dc.l Map_SSWalls
0001C3EC 6142                       	dc.w $6142
0001C3EE 0000 0000                  	dc.l Map_SSWalls
0001C3F2 6142                       	dc.w $6142
0001C3F4 0000 0000                  	dc.l Map_SSWalls
0001C3F8 6142                       	dc.w $6142
0001C3FA 0000 0000                  	dc.l Map_SSWalls
0001C3FE 6142                       	dc.w $6142
0001C400 0000 0000                  	dc.l Map_SSWalls
0001C404 6142                       	dc.w $6142
0001C406 0000 0000                  	dc.l Map_SSWalls
0001C40A 6142                       	dc.w $6142
0001C40C 0000 0000                  	dc.l Map_SSWalls
0001C410 6142                       	dc.w $6142
0001C412 0000 F288                  	dc.l Map_obj47
0001C416 023B                       	dc.w $23B
0001C418 0000 0000                  	dc.l Map_SS_R
0001C41C 0570                       	dc.w $570
0001C41E 0000 0000                  	dc.l Map_SS_R
0001C422 0251                       	dc.w $251
0001C424 0000 0000                  	dc.l Map_SS_R
0001C428 0370                       	dc.w $370
0001C42A 0000 0000                  	dc.l Map_SS_Up
0001C42E 0263                       	dc.w $263
0001C430 0000 0000                  	dc.l Map_SS_Down
0001C434 0263                       	dc.w $263
0001C436 0000 0000                  	dc.l Map_SS_R
0001C43A 22F0                       	dc.w $22F0
0001C43C 0000 0000                  	dc.l Map_SS_Glass
0001C440 0470                       	dc.w $470
0001C442 0000 0000                  	dc.l Map_SS_Glass
0001C446 05F0                       	dc.w $5F0
0001C448 0000 0000                  	dc.l Map_SS_Glass
0001C44C 65F0                       	dc.w $65F0
0001C44E 0000 0000                  	dc.l Map_SS_Glass
0001C452 25F0                       	dc.w $25F0
0001C454 0000 0000                  	dc.l Map_SS_Glass
0001C458 45F0                       	dc.w $45F0
0001C45A 0000 0000                  	dc.l Map_SS_R
0001C45E 02F0                       	dc.w $2F0
0001C460 0100 F288                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C464 023B                       	dc.w $23B
0001C466 0200 F288                  	dc.l Map_obj47+$2000000
0001C46A 023B                       	dc.w $23B
0001C46C 0000 0000                  	dc.l Map_SS_R
0001C470 0797                       	dc.w $797
0001C472 0000 0000                  	dc.l Map_SS_R
0001C476 07A0                       	dc.w $7A0
0001C478 0000 0000                  	dc.l Map_SS_R
0001C47C 07A9                       	dc.w $7A9
0001C47E 0000 0000                  	dc.l Map_SS_R
0001C482 0797                       	dc.w $797
0001C484 0000 0000                  	dc.l Map_SS_R
0001C488 07A0                       	dc.w $7A0
0001C48A 0000 0000                  	dc.l Map_SS_R
0001C48E 07A9                       	dc.w $7A9
0001C490 0000 A6E2                  	dc.l Map_obj25
0001C494 222D                       	dc.w $2000+ssringart
0001C496 0000 0000                  	dc.l Map_SS_Chaos3
0001C49A 0770                       	dc.w $770
0001C49C 0000 0000                  	dc.l Map_SS_Chaos3
0001C4A0 2770                       	dc.w $2770
0001C4A2 0000 0000                  	dc.l Map_SS_Chaos3
0001C4A6 4770                       	dc.w $4770
0001C4A8 0000 0000                  	dc.l Map_SS_Chaos3
0001C4AC 6770                       	dc.w $6770
0001C4AE 0000 0000                  	dc.l Map_SS_Chaos1
0001C4B2 0770                       	dc.w $770
0001C4B4 0000 0000                  	dc.l Map_SS_Chaos2
0001C4B8 0770                       	dc.w $770
0001C4BA 0000 0000                  	dc.l Map_SS_R
0001C4BE 04F0                       	dc.w $4F0
0001C4C0 0400 A6E2                  	dc.l Map_obj25+$4000000
0001C4C4 222D                       	dc.w $2000+ssringart
0001C4C6 0500 A6E2                  	dc.l Map_obj25+$5000000
0001C4CA 222D                       	dc.w $2000+ssringart
0001C4CC 0600 A6E2                  	dc.l Map_obj25+$6000000
0001C4D0 222D                       	dc.w $2000+ssringart
0001C4D2 0700 A6E2                  	dc.l Map_obj25+$7000000
0001C4D6 222D                       	dc.w $2000+ssringart
0001C4D8 0000 0000                  	dc.l Map_SS_Glass
0001C4DC 23F0                       	dc.w $23F0
0001C4DE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C4E2 23F0                       	dc.w $23F0
0001C4E4 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C4E8 23F0                       	dc.w $23F0
0001C4EA 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C4EE 23F0                       	dc.w $23F0
0001C4F0 0000 0000                  	dc.l Map_SS_R+$2000000
0001C4F4 04F0                       	dc.w $4F0
0001C4F6 0000 0000                  	dc.l Map_SS_Glass
0001C4FA 05F0                       	dc.w $5F0
0001C4FC 0000 0000                  	dc.l Map_SS_Glass
0001C500 65F0                       	dc.w $65F0
0001C502 0000 0000                  	dc.l Map_SS_Glass
0001C506 25F0                       	dc.w $25F0
0001C508 0000 0000                  	dc.l Map_SS_Glass
0001C50C 45F0                       	dc.w $45F0
0001C50C 45F0                       	dc.w $45F0
0001C50E                            
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            ; Sprite mappings - special stage "R" block
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            Map_SS_R:
0001C50E                            	include "_maps\SSRblock.asm"
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            ; Sprite mappings - special stage "R" block
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C512 0000                       		dc.w byte_1B91E-Map_SS_R
0001C514 01                         byte_1B912:	dc.b 1
0001C515 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C51A 01                         byte_1B918:	dc.b 1
0001C51B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C520 00                         byte_1B91E:	dc.b 0
0001C522 00                         		even
0001C522 00                         		even
0001C522                            
0001C522                            ; ---------------------------------------------------------------------------
0001C522                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C522                            ; ---------------------------------------------------------------------------
0001C522                            Map_SS_Glass:
0001C522                            	include "_maps\SSglassblock.asm"
0001C522                            ; ---------------------------------------------------------------------------
0001C522                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C522                            ; ---------------------------------------------------------------------------
0001C522 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C526 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C52A 01                         byte_1B928:	dc.b 1
0001C52B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C530 01                         byte_1B92E:	dc.b 1
0001C531 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C536 01                         byte_1B934:	dc.b 1
0001C537 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C53C 01                         byte_1B93A:	dc.b 1
0001C53D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C542                            		even
0001C542                            		even
0001C542                            
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Sprite mappings - special stage "UP" block
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            Map_SS_Up:
0001C542                            	include "_maps\SSUPblock.asm"
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Sprite mappings - special stage "UP" block
0001C542                            ; ---------------------------------------------------------------------------
0001C542 0000                       		dc.w byte_1B944-Map_SS_Up
0001C544 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C546 01                         byte_1B944:	dc.b 1
0001C547 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C54C 01                         byte_1B94A:	dc.b 1
0001C54D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C552                            		even
0001C552                            		even
0001C552                            
0001C552                            ; ---------------------------------------------------------------------------
0001C552                            ; Sprite mappings - special stage "DOWN" block
0001C552                            ; ---------------------------------------------------------------------------
0001C552                            Map_SS_Down:
0001C552                            	include "_maps\SSDOWNblock.asm"
0001C552                            ; ---------------------------------------------------------------------------
0001C552                            ; Sprite mappings - special stage "DOWN" block
0001C552                            ; ---------------------------------------------------------------------------
0001C552 0000                       		dc.w byte_1B954-Map_SS_Down
0001C554 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C556 01                         byte_1B954:	dc.b 1
0001C557 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C55C 01                         byte_1B95A:	dc.b 1
0001C55D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C562                            		even
0001C562                            		even
0001C562                            
0001C562                            ; ---------------------------------------------------------------------------
0001C562                            ; Sprite mappings - special stage chaos	emeralds
0001C562                            ; ---------------------------------------------------------------------------
0001C562 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C564 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C566 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C568 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C56A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C56C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C56E 01                         byte_1B96C:	dc.b 1
0001C56F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C574 01                         byte_1B972:	dc.b 1
0001C575 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C57A 01                         byte_1B978:	dc.b 1
0001C57B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C580 01                         byte_1B97E:	dc.b 1
0001C581 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C586                            		even
0001C586                            ; ===========================================================================
0001C586                            ; ---------------------------------------------------------------------------
0001C586                            ; Object 09 - Sonic (special stage)
0001C586                            ; ---------------------------------------------------------------------------
0001C586                            
0001C586                            Obj09:					; XREF: Obj_Index
0001C586 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C58A 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C58C 6100 0000                  		bsr.w	SS_FixCamera
0001C590 6000 0000                  		bra.w	DebugMode
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            Obj09_Normal:
0001C594 7000                       		moveq	#0,d0
0001C596 1028 0024                  		move.b	$24(a0),d0
0001C59A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C59E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C5A2                            ; ===========================================================================
0001C5A2 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C5A4 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C5A6 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C5A8 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C5AA                            ; ===========================================================================
0001C5AA                            
0001C5AA                            Obj09_Main:				; XREF: Obj09_Index
0001C5AA 5428 0024                  		addq.b	#2,$24(a0)
0001C5AE 117C 000E 0016             		move.b	#$E,$16(a0)
0001C5B4 117C 0007 0017             		move.b	#7,$17(a0)
0001C5BA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C5C2 317C 0780 0002             		move.w	#$780,2(a0)
0001C5C8 117C 0004 0001             		move.b	#4,1(a0)
0001C5CE 117C 0000 0018             		move.b	#0,$18(a0)
0001C5D4 117C 0002 001C             		move.b	#2,$1C(a0)
0001C5DA 08E8 0002 0022             		bset	#2,$22(a0)
0001C5E0 08E8 0001 0022             		bset	#1,$22(a0)
0001C5E6                            
0001C5E6                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C5E6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C5EA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C5EC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C5F2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C5F4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C5FA                            
0001C5FA                            Obj09_NoDebug:
0001C5FA 117C 0000 0030             		move.b	#0,$30(a0)
0001C600 7000                       		moveq	#0,d0
0001C602 1028 0022                  		move.b	$22(a0),d0
0001C606 0240 0002                  		andi.w	#2,d0
0001C60A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C60E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C612 4EB9 0001 4424             		jsr	LoadSonicDynPLC
0001C618 4EF9 0000 DD82             		jmp	DisplaySprite
0001C61E                            ; ===========================================================================
0001C61E 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C620 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C622                            ; ===========================================================================
0001C622                            
0001C622                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C622 6100 0000                  		bsr.w	Obj09_Jump
0001C626 6100 0000                  		bsr.w	Obj09_Move
0001C62A 6100 0000                  		bsr.w	Obj09_Fall
0001C62E 6000                       		bra.s	Obj09_Display
0001C630                            ; ===========================================================================
0001C630                            
0001C630                            Obj09_InAir:				; XREF: Obj09_Modes
0001C630 6100 0000                  		bsr.w	nullsub_2
0001C634 6100 0000                  		bsr.w	Obj09_Move
0001C638 6100 0000                  		bsr.w	Obj09_Fall
0001C63C                            
0001C63C                            Obj09_Display:				; XREF: Obj09_OnWall
0001C63C 6100 0000                  		bsr.w	Obj09_ChkItems
0001C640 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C644 4EB9 0000 DD5C             		jsr	SpeedToPos
0001C64A 6100 0000                  		bsr.w	SS_FixCamera
0001C64E 3038 F780                  		move.w	($FFFFF780).w,d0
0001C652 D078 F782                  		add.w	($FFFFF782).w,d0
0001C656 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C65A 4EB9 0001 41AA             		jsr	Sonic_Animate
0001C660 4E75                       		rts	
0001C662                            
0001C662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C662                            
0001C662                            
0001C662                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C662 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C668 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C66A 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C66E                            
0001C66E                            Obj09_ChkRight:
0001C66E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C674 6700                       		beq.s	loc_1BA78	; if not, branch
0001C676 6100 0000                  		bsr.w	Obj09_MoveRight
0001C67A                            
0001C67A                            loc_1BA78:
0001C67A 1038 F602                  		move.b	($FFFFF602).w,d0
0001C67E 0200 000C                  		andi.b	#$C,d0
0001C682 6600                       		bne.s	loc_1BAA8
0001C684 3028 0014                  		move.w	$14(a0),d0
0001C688 6700                       		beq.s	loc_1BAA8
0001C68A 6B00                       		bmi.s	loc_1BA9A
0001C68C 0440 000C                  		subi.w	#$C,d0
0001C690 6400                       		bcc.s	loc_1BA94
0001C692 303C 0000                  		move.w	#0,d0
0001C696                            
0001C696                            loc_1BA94:
0001C696 3140 0014                  		move.w	d0,$14(a0)
0001C69A 6000                       		bra.s	loc_1BAA8
0001C69C                            ; ===========================================================================
0001C69C                            
0001C69C                            loc_1BA9A:
0001C69C 0640 000C                  		addi.w	#$C,d0
0001C6A0 6400                       		bcc.s	loc_1BAA4
0001C6A2 303C 0000                  		move.w	#0,d0
0001C6A6                            
0001C6A6                            loc_1BAA4:
0001C6A6 3140 0014                  		move.w	d0,$14(a0)
0001C6AA                            
0001C6AA                            loc_1BAA8:
0001C6AA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C6AE 0600 0020                  		addi.b	#$20,d0
0001C6B2 0200 00C0                  		andi.b	#$C0,d0
0001C6B6 4400                       		neg.b	d0
0001C6B8 4EB9 0000 28EC             		jsr	(CalcSine).l
0001C6BE C3E8 0014                  		muls.w	$14(a0),d1
0001C6C2 D3A8 0008                  		add.l	d1,8(a0)
0001C6C6 C1E8 0014                  		muls.w	$14(a0),d0
0001C6CA D1A8 000C                  		add.l	d0,$C(a0)
0001C6CE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C6D2 2428 000C                  		move.l	$C(a0),d2
0001C6D6 2628 0008                  		move.l	8(a0),d3
0001C6DA 6100 0000                  		bsr.w	sub_1BCE8
0001C6DE 6700                       		beq.s	loc_1BAF2
0001C6E0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6E4 93A8 0008                  		sub.l	d1,8(a0)
0001C6E8 91A8 000C                  		sub.l	d0,$C(a0)
0001C6EC 317C 0000 0014             		move.w	#0,$14(a0)
0001C6F2 4E75                       		rts	
0001C6F4                            ; ===========================================================================
0001C6F4                            
0001C6F4                            loc_1BAF2:
0001C6F4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C6F8 4E75                       		rts	
0001C6FA                            ; End of function Obj09_Move
0001C6FA                            
0001C6FA                            
0001C6FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6FA                            
0001C6FA                            
0001C6FA                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C6FA 08E8 0000 0022             		bset	#0,$22(a0)
0001C700 3028 0014                  		move.w	$14(a0),d0
0001C704 6700                       		beq.s	loc_1BB06
0001C706 6A00                       		bpl.s	loc_1BB1A
0001C708                            
0001C708                            loc_1BB06:
0001C708 0440 000C                  		subi.w	#$C,d0
0001C70C 0C40 F800                  		cmpi.w	#-$800,d0
0001C710 6E00                       		bgt.s	loc_1BB14
0001C712 303C F800                  		move.w	#-$800,d0
0001C716                            
0001C716                            loc_1BB14:
0001C716 3140 0014                  		move.w	d0,$14(a0)
0001C71A 4E75                       		rts	
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            loc_1BB1A:
0001C71C 0440 0040                  		subi.w	#$40,d0
0001C720 6400                       		bcc.s	loc_1BB22
0001C722 4E71                       		nop	
0001C724                            
0001C724                            loc_1BB22:
0001C724 3140 0014                  		move.w	d0,$14(a0)
0001C728 4E75                       		rts	
0001C72A                            ; End of function Obj09_MoveLeft
0001C72A                            
0001C72A                            
0001C72A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C72A                            
0001C72A                            
0001C72A                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C72A 08A8 0000 0022             		bclr	#0,$22(a0)
0001C730 3028 0014                  		move.w	$14(a0),d0
0001C734 6B00                       		bmi.s	loc_1BB48
0001C736 0640 000C                  		addi.w	#$C,d0
0001C73A 0C40 0800                  		cmpi.w	#$800,d0
0001C73E 6D00                       		blt.s	loc_1BB42
0001C740 303C 0800                  		move.w	#$800,d0
0001C744                            
0001C744                            loc_1BB42:
0001C744 3140 0014                  		move.w	d0,$14(a0)
0001C748 6000                       		bra.s	locret_1BB54
0001C74A                            ; ===========================================================================
0001C74A                            
0001C74A                            loc_1BB48:
0001C74A 0640 0040                  		addi.w	#$40,d0
0001C74E 6400                       		bcc.s	loc_1BB50
0001C750 4E71                       		nop	
0001C752                            
0001C752                            loc_1BB50:
0001C752 3140 0014                  		move.w	d0,$14(a0)
0001C756                            
0001C756                            locret_1BB54:
0001C756 4E75                       		rts	
0001C758                            ; End of function Obj09_MoveRight
0001C758                            
0001C758                            
0001C758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C758                            
0001C758                            
0001C758                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C758 1038 F603                  		move.b	($FFFFF603).w,d0
0001C75C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C760 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C762 1038 F780                  		move.b	($FFFFF780).w,d0
0001C766 0200 00FC                  		andi.b	#$FC,d0
0001C76A 4400                       		neg.b	d0
0001C76C 0400 0040                  		subi.b	#$40,d0
0001C770 4EB9 0000 28EC             		jsr	(CalcSine).l
0001C776 C3FC 0680                  		muls.w	#$680,d1
0001C77A E081                       		asr.l	#8,d1
0001C77C 3141 0010                  		move.w	d1,$10(a0)
0001C780 C1FC 0680                  		muls.w	#$680,d0
0001C784 E080                       		asr.l	#8,d0
0001C786 3140 0012                  		move.w	d0,$12(a0)
0001C78A 08E8 0001 0022             		bset	#1,$22(a0)
0001C790 303C 00A0                  		move.w	#$A0,d0
0001C794 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C79A                            
0001C79A                            Obj09_NoJump:
0001C79A 4E75                       		rts	
0001C79C                            ; End of function Obj09_Jump
0001C79C                            
0001C79C                            
0001C79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C79C                            
0001C79C                            
0001C79C                            nullsub_2:				; XREF: Obj09_InAir
0001C79C 4E75                       		rts	
0001C79E                            ; End of function nullsub_2
0001C79E                            
0001C79E                            ; ===========================================================================
0001C79E                            ; ---------------------------------------------------------------------------
0001C79E                            ; unused subroutine to limit Sonic's upward vertical speed
0001C79E                            ; ---------------------------------------------------------------------------
0001C79E 323C FC00                  		move.w	#-$400,d1
0001C7A2 B268 0012                  		cmp.w	$12(a0),d1
0001C7A6 6F00                       		ble.s	locret_1BBB4
0001C7A8 1038 F602                  		move.b	($FFFFF602).w,d0
0001C7AC 0200 0070                  		andi.b	#$70,d0
0001C7B0 6600                       		bne.s	locret_1BBB4
0001C7B2 3141 0012                  		move.w	d1,$12(a0)
0001C7B6                            
0001C7B6                            locret_1BBB4:
0001C7B6 4E75                       		rts	
0001C7B8                            ; ---------------------------------------------------------------------------
0001C7B8                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C7B8                            ; ---------------------------------------------------------------------------
0001C7B8                            
0001C7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7B8                            
0001C7B8                            
0001C7B8                            SS_FixCamera:				; XREF: Obj09
0001C7B8 3428 000C                  		move.w	$C(a0),d2
0001C7BC 3628 0008                  		move.w	8(a0),d3
0001C7C0 3038 F700                  		move.w	($FFFFF700).w,d0
0001C7C4 0443 00A0                  		subi.w	#$A0,d3
0001C7C8 6500                       		bcs.s	loc_1BBCE
0001C7CA 9043                       		sub.w	d3,d0
0001C7CC 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C7D0                            
0001C7D0                            loc_1BBCE:
0001C7D0 3038 F704                  		move.w	($FFFFF704).w,d0
0001C7D4 0442 0070                  		subi.w	#$70,d2
0001C7D8 6500                       		bcs.s	locret_1BBDE
0001C7DA 9042                       		sub.w	d2,d0
0001C7DC 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C7E0                            
0001C7E0                            locret_1BBDE:
0001C7E0 4E75                       		rts	
0001C7E2                            ; End of function SS_FixCamera
0001C7E2                            
0001C7E2                            ; ===========================================================================
0001C7E2                            
0001C7E2                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C7E2 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C7E8 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C7EE 6600                       		bne.s	loc_1BBF4
0001C7F0 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C7F6                            
0001C7F6                            loc_1BBF4:
0001C7F6 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C7FC 6D00                       		blt.s	loc_1BC12
0001C7FE 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C804 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C80A 5428 0024                  		addq.b	#2,$24(a0)
0001C80E 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C814                            
0001C814                            loc_1BC12:
0001C814 3038 F780                  		move.w	($FFFFF780).w,d0
0001C818 D078 F782                  		add.w	($FFFFF782).w,d0
0001C81C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C820 4EB9 0001 41AA             		jsr	Sonic_Animate
0001C826 4EB9 0001 4424             		jsr	LoadSonicDynPLC
0001C82C 6100 FF8A                  		bsr.w	SS_FixCamera
0001C830 4EF9 0000 DD82             		jmp	DisplaySprite
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            Obj09_Exit2:				; XREF: Obj09_Index
0001C836 5368 0038                  		subq.w	#1,$38(a0)
0001C83A 6600                       		bne.s	loc_1BC40
0001C83C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C842                            
0001C842                            loc_1BC40:
0001C842 4EB9 0001 41AA             		jsr	Sonic_Animate
0001C848 4EB9 0001 4424             		jsr	LoadSonicDynPLC
0001C84E 6100 FF68                  		bsr.w	SS_FixCamera
0001C852 4EF9 0000 DD82             		jmp	DisplaySprite
0001C858                            
0001C858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C858                            
0001C858                            
0001C858                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C858 2428 000C                  		move.l	$C(a0),d2
0001C85C 2628 0008                  		move.l	8(a0),d3
0001C860 1038 F780                  		move.b	($FFFFF780).w,d0
0001C864 0200 00FC                  		andi.b	#$FC,d0
0001C868 4EB9 0000 28EC             		jsr	(CalcSine).l
0001C86E 3828 0010                  		move.w	$10(a0),d4
0001C872 48C4                       		ext.l	d4
0001C874 E184                       		asl.l	#8,d4
0001C876 C1FC 002A                  		muls.w	#$2A,d0
0001C87A D084                       		add.l	d4,d0
0001C87C 3828 0012                  		move.w	$12(a0),d4
0001C880 48C4                       		ext.l	d4
0001C882 E184                       		asl.l	#8,d4
0001C884 C3FC 002A                  		muls.w	#$2A,d1
0001C888 D284                       		add.l	d4,d1
0001C88A D680                       		add.l	d0,d3
0001C88C 6100 0000                  		bsr.w	sub_1BCE8
0001C890 6700                       		beq.s	loc_1BCB0
0001C892 9680                       		sub.l	d0,d3
0001C894 7000                       		moveq	#0,d0
0001C896 3140 0010                  		move.w	d0,$10(a0)
0001C89A 08A8 0001 0022             		bclr	#1,$22(a0)
0001C8A0 D481                       		add.l	d1,d2
0001C8A2 6100 0000                  		bsr.w	sub_1BCE8
0001C8A6 6700                       		beq.s	loc_1BCC6
0001C8A8 9481                       		sub.l	d1,d2
0001C8AA 7200                       		moveq	#0,d1
0001C8AC 3141 0012                  		move.w	d1,$12(a0)
0001C8B0 4E75                       		rts	
0001C8B2                            ; ===========================================================================
0001C8B2                            
0001C8B2                            loc_1BCB0:
0001C8B2 D481                       		add.l	d1,d2
0001C8B4 6100 0000                  		bsr.w	sub_1BCE8
0001C8B8 6700                       		beq.s	loc_1BCD4
0001C8BA 9481                       		sub.l	d1,d2
0001C8BC 7200                       		moveq	#0,d1
0001C8BE 3141 0012                  		move.w	d1,$12(a0)
0001C8C2 08A8 0001 0022             		bclr	#1,$22(a0)
0001C8C8                            
0001C8C8                            loc_1BCC6:
0001C8C8 E080                       		asr.l	#8,d0
0001C8CA E081                       		asr.l	#8,d1
0001C8CC 3140 0010                  		move.w	d0,$10(a0)
0001C8D0 3141 0012                  		move.w	d1,$12(a0)
0001C8D4 4E75                       		rts	
0001C8D6                            ; ===========================================================================
0001C8D6                            
0001C8D6                            loc_1BCD4:
0001C8D6 E080                       		asr.l	#8,d0
0001C8D8 E081                       		asr.l	#8,d1
0001C8DA 3140 0010                  		move.w	d0,$10(a0)
0001C8DE 3141 0012                  		move.w	d1,$12(a0)
0001C8E2 08E8 0001 0022             		bset	#1,$22(a0)
0001C8E8 4E75                       		rts	
0001C8EA                            ; End of function Obj09_Fall
0001C8EA                            
0001C8EA                            
0001C8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8EA                            
0001C8EA                            
0001C8EA                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C8EA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C8F0 7800                       		moveq	#0,d4
0001C8F2 4842                       		swap	d2
0001C8F4 3802                       		move.w	d2,d4
0001C8F6 4842                       		swap	d2
0001C8F8 0644 0044                  		addi.w	#$44,d4
0001C8FC 88FC 0018                  		divu.w	#$18,d4
0001C900 C8FC 0080                  		mulu.w	#$80,d4
0001C904 D3C4                       		adda.l	d4,a1
0001C906 7800                       		moveq	#0,d4
0001C908 4843                       		swap	d3
0001C90A 3803                       		move.w	d3,d4
0001C90C 4843                       		swap	d3
0001C90E 0644 0014                  		addi.w	#$14,d4
0001C912 88FC 0018                  		divu.w	#$18,d4
0001C916 D2C4                       		adda.w	d4,a1
0001C918 7A00                       		moveq	#0,d5
0001C91A 1819                       		move.b	(a1)+,d4
0001C91C 6100                       		bsr.s	sub_1BD30
0001C91E 1819                       		move.b	(a1)+,d4
0001C920 6100                       		bsr.s	sub_1BD30
0001C922 D2FC 007E                  		adda.w	#$7E,a1
0001C926 1819                       		move.b	(a1)+,d4
0001C928 6100                       		bsr.s	sub_1BD30
0001C92A 1819                       		move.b	(a1)+,d4
0001C92C 6100                       		bsr.s	sub_1BD30
0001C92E 4A05                       		tst.b	d5
0001C930 4E75                       		rts	
0001C932                            ; End of function sub_1BCE8
0001C932                            
0001C932                            
0001C932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C932                            
0001C932                            
0001C932                            sub_1BD30:				; XREF: sub_1BCE8
0001C932 6700                       		beq.s	locret_1BD44
0001C934 0C04 0028                  		cmpi.b	#$28,d4
0001C938 6700                       		beq.s	locret_1BD44
0001C93A 0C04 003A                  		cmpi.b	#$3A,d4
0001C93E 6500                       		bcs.s	loc_1BD46
0001C940 0C04 004B                  		cmpi.b	#$4B,d4
0001C944 6400                       		bcc.s	loc_1BD46
0001C946                            
0001C946                            locret_1BD44:
0001C946 4E75                       		rts	
0001C948                            ; ===========================================================================
0001C948                            
0001C948                            loc_1BD46:
0001C948 1144 0030                  		move.b	d4,$30(a0)
0001C94C 2149 0032                  		move.l	a1,$32(a0)
0001C950 7AFF                       		moveq	#-1,d5
0001C952 4E75                       		rts	
0001C954                            ; End of function sub_1BD30
0001C954                            
0001C954                            
0001C954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C954                            
0001C954                            
0001C954                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C954 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C95A 7800                       		moveq	#0,d4
0001C95C 3828 000C                  		move.w	$C(a0),d4
0001C960 0644 0050                  		addi.w	#$50,d4
0001C964 88FC 0018                  		divu.w	#$18,d4
0001C968 C8FC 0080                  		mulu.w	#$80,d4
0001C96C D3C4                       		adda.l	d4,a1
0001C96E 7800                       		moveq	#0,d4
0001C970 3828 0008                  		move.w	8(a0),d4
0001C974 0644 0020                  		addi.w	#$20,d4
0001C978 88FC 0018                  		divu.w	#$18,d4
0001C97C D2C4                       		adda.w	d4,a1
0001C97E 1811                       		move.b	(a1),d4
0001C980 6600                       		bne.s	Obj09_ChkCont
0001C982 4A28 003A                  		tst.b	$3A(a0)
0001C986 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C98A 7800                       		moveq	#0,d4
0001C98C 4E75                       		rts	
0001C98E                            ; ===========================================================================
0001C98E                            
0001C98E                            Obj09_ChkCont:
0001C98E 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C992 6600                       		bne.s	Obj09_Chk1Up
0001C994 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001C998 6600                       		bne.s	Obj09_GetCont
0001C99A 14BC 0001                  		move.b	#1,(a2)
0001C99E 2549 0004                  		move.l	a1,4(a2)
0001C9A2                            
0001C9A2                            Obj09_GetCont:
0001C9A2 4EB9 0000 A3BE             		jsr	CollectRing
0001C9A8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C9AE 6500                       		bcs.s	Obj09_NoCont
0001C9B0 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C9B6 6600                       		bne.s	Obj09_NoCont
0001C9B8 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001C9BE 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001C9C4 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C9C8 303C 00BF                  		move.w	#$BF,d0
0001C9CC 4EB9 0000 125C             		jsr	(PlaySound).l	; play extra continue sound
0001C9D2                            
0001C9D2                            Obj09_NoCont:
0001C9D2 7800                       		moveq	#0,d4
0001C9D4 4E75                       		rts	
0001C9D6                            ; ===========================================================================
0001C9D6                            
0001C9D6                            Obj09_Chk1Up:
0001C9D6 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C9DA 6600                       		bne.s	Obj09_ChkEmer
0001C9DC 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C9E0 6600                       		bne.s	Obj09_Get1Up
0001C9E2 14BC 0003                  		move.b	#3,(a2)
0001C9E6 2549 0004                  		move.l	a1,4(a2)
0001C9EA                            
0001C9EA                            Obj09_Get1Up:
0001C9EA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C9EE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C9F2 303C 0088                  		move.w	#$88,d0
0001C9F6 4EB9 0000 125C             		jsr	(PlaySound).l	; play extra life music
0001C9FC 7800                       		moveq	#0,d4
0001C9FE 4E75                       		rts	
0001CA00                            ; ===========================================================================
0001CA00                            
0001CA00                            Obj09_ChkEmer:
0001CA00 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CA04 6500                       		bcs.s	Obj09_ChkGhost
0001CA06 0C04 0040                  		cmpi.b	#$40,d4
0001CA0A 6200                       		bhi.s	Obj09_ChkGhost
0001CA0C 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001CA10 6600                       		bne.s	Obj09_GetEmer
0001CA12 14BC 0005                  		move.b	#5,(a2)
0001CA16 2549 0004                  		move.l	a1,4(a2)
0001CA1A                            
0001CA1A                            Obj09_GetEmer:
0001CA1A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CA20 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CA22 0404 003B                  		subi.b	#$3B,d4
0001CA26 7000                       		moveq	#0,d0
0001CA28 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CA2C 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CA30 1584 0000                  		move.b	d4,(a2,d0.w)
0001CA34 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CA38 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CA3E 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001CA44                            
0001CA44                            Obj09_NoEmer:
0001CA44 303C 0093                  		move.w	#$93,d0
0001CA48 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play emerald music
0001CA4E 7800                       		moveq	#0,d4
0001CA50 4E75                       		rts	
0001CA52                            ; ===========================================================================
0001CA52                            
0001CA52                            Obj09_ChkGhost:
0001CA52 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CA56 6600                       		bne.s	Obj09_ChkGhostTag
0001CA58 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CA5E                            
0001CA5E                            Obj09_ChkGhostTag:
0001CA5E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CA62 6600                       		bne.s	Obj09_NoGhost
0001CA64 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CA6A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CA6C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CA72                            
0001CA72                            Obj09_NoGhost:
0001CA72 78FF                       		moveq	#-1,d4
0001CA74 4E75                       		rts	
0001CA76                            ; ===========================================================================
0001CA76                            
0001CA76                            Obj09_MakeGhostSolid:
0001CA76 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CA7C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CA7E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CA84 723F                       		moveq	#$3F,d1
0001CA86                            
0001CA86                            Obj09_GhostLoop2:
0001CA86 743F                       		moveq	#$3F,d2
0001CA88                            
0001CA88                            Obj09_GhostLoop:
0001CA88 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CA8C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CA8E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CA92                            
0001CA92                            Obj09_NoReplace:
0001CA92 5249                       		addq.w	#1,a1
0001CA94 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CA98 43E9 0040                  		lea	$40(a1),a1
0001CA9C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CAA0                            
0001CAA0                            Obj09_GhostNotSolid:
0001CAA0 4228 003A                  		clr.b	$3A(a0)
0001CAA4 7800                       		moveq	#0,d4
0001CAA6 4E75                       		rts	
0001CAA8                            ; End of function Obj09_ChkItems
0001CAA8                            
0001CAA8                            
0001CAA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAA8                            
0001CAA8                            
0001CAA8                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CAA8 1028 0030                  		move.b	$30(a0),d0
0001CAAC 6600                       		bne.s	Obj09_ChkBumper
0001CAAE 5328 0036                  		subq.b	#1,$36(a0)
0001CAB2 6A00                       		bpl.s	loc_1BEA0
0001CAB4 117C 0000 0036             		move.b	#0,$36(a0)
0001CABA                            
0001CABA                            loc_1BEA0:
0001CABA 5328 0037                  		subq.b	#1,$37(a0)
0001CABE 6A00                       		bpl.s	locret_1BEAC
0001CAC0 117C 0000 0037             		move.b	#0,$37(a0)
0001CAC6                            
0001CAC6                            locret_1BEAC:
0001CAC6 4E75                       		rts	
0001CAC8                            ; ===========================================================================
0001CAC8                            
0001CAC8                            Obj09_ChkBumper:
0001CAC8 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001CACC 6600                       		bne.s	Obj09_GOAL	
0001CACE 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001CAD4 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001CADA 2228 0032                  		move.l	$32(a0),d1
0001CADE 0481 00FF 0001             		subi.l	#$FF0001,d1
0001CAE4 3401                       		move.w	d1,d2
0001CAE6 0241 007F                  		andi.w	#$7F,d1
0001CAEA C2FC 0018                  		mulu.w	#$18,d1
0001CAEE 0441 0014                  		subi.w	#$14,d1
0001CAF2 EE4A                       		lsr.w	#7,d2
0001CAF4 0242 007F                  		andi.w	#$7F,d2
0001CAF8 C4FC 0018                  		mulu.w	#$18,d2
0001CAFC 0442 0044                  		subi.w	#$44,d2
0001CB00 9268 0008                  		sub.w	8(a0),d1
0001CB04 9468 000C                  		sub.w	$C(a0),d2
0001CB08 4EB9 0000 2BBA             		jsr	(CalcAngle).l
0001CB0E 4EB9 0000 28EC             		jsr	(CalcSine).l
0001CB14 C3FC F900                  		muls.w	#-$700,d1
0001CB18 E081                       		asr.l	#8,d1
0001CB1A 3141 0010                  		move.w	d1,$10(a0)
0001CB1E C1FC F900                  		muls.w	#-$700,d0
0001CB22 E080                       		asr.l	#8,d0
0001CB24 3140 0012                  		move.w	d0,$12(a0)
0001CB28 08E8 0001 0022             		bset	#1,$22(a0)
0001CB2E 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001CB32 6600                       		bne.s	Obj09_BumpSnd
0001CB34 14BC 0002                  		move.b	#2,(a2)
0001CB38 2028 0032                  		move.l	$32(a0),d0
0001CB3C 5380                       		subq.l	#1,d0
0001CB3E 2540 0004                  		move.l	d0,4(a2)
0001CB42                            
0001CB42                            Obj09_BumpSnd:
0001CB42 303C 00B4                  		move.w	#$B4,d0
0001CB46 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play bumper sound
0001CB4C                            ; ===========================================================================
0001CB4C                            
0001CB4C                            Obj09_GOAL:
0001CB4C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CB50 6600                       		bne.s	Obj09_UPblock
0001CB52 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CB56 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001CB5C 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001CB62 303C 00A8                  		move.w	#$A8,d0		; change item
0001CB66 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CB6C 4E75                       		rts	
0001CB6E                            ; ===========================================================================
0001CB6E                            
0001CB6E                            Obj09_UPblock:
0001CB6E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001CB72 6600                       		bne.s	Obj09_DOWNblock
0001CB74 4A28 0036                  		tst.b	$36(a0)
0001CB78 6600 0000                  		bne.w	Obj09_NoGlass
0001CB7C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001CB82 0838 0006 F783             		btst	#6,($FFFFF783).w
0001CB88 6700                       		beq.s	Obj09_UPsnd
0001CB8A E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001CB8E 2268 0032                  		movea.l	$32(a0),a1
0001CB92 5389                       		subq.l	#1,a1
0001CB94 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001CB98                            
0001CB98                            Obj09_UPsnd:
0001CB98 303C 00A9                  		move.w	#$A9,d0
0001CB9C 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play up/down sound
0001CBA2                            ; ===========================================================================
0001CBA2                            
0001CBA2                            Obj09_DOWNblock:
0001CBA2 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001CBA6 6600                       		bne.s	Obj09_Rblock
0001CBA8 4A28 0036                  		tst.b	$36(a0)
0001CBAC 6600 0000                  		bne.w	Obj09_NoGlass
0001CBB0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001CBB6 0838 0006 F783             		btst	#6,($FFFFF783).w
0001CBBC 6600                       		bne.s	Obj09_DOWNsnd
0001CBBE E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001CBC2 2268 0032                  		movea.l	$32(a0),a1
0001CBC6 5389                       		subq.l	#1,a1
0001CBC8 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001CBCC                            
0001CBCC                            Obj09_DOWNsnd:
0001CBCC 303C 00A9                  		move.w	#$A9,d0
0001CBD0 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play up/down sound
0001CBD6                            ; ===========================================================================
0001CBD6                            
0001CBD6                            Obj09_Rblock:
0001CBD6 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001CBDA 6600                       		bne.s	Obj09_ChkGlass
0001CBDC 4A28 0037                  		tst.b	$37(a0)
0001CBE0 6600 0000                  		bne.w	Obj09_NoGlass
0001CBE4 117C 001E 0037             		move.b	#$1E,$37(a0)
0001CBEA 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001CBEE 6600                       		bne.s	Obj09_RevStage
0001CBF0 14BC 0004                  		move.b	#4,(a2)
0001CBF4 2028 0032                  		move.l	$32(a0),d0
0001CBF8 5380                       		subq.l	#1,d0
0001CBFA 2540 0004                  		move.l	d0,4(a2)
0001CBFE                            
0001CBFE                            Obj09_RevStage:
0001CBFE 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001CC02 303C 00A9                  		move.w	#$A9,d0
0001CC06 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play sound
0001CC0C                            ; ===========================================================================
0001CC0C                            
0001CC0C                            Obj09_ChkGlass:
0001CC0C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CC10 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CC12 0C00 002E                  		cmpi.b	#$2E,d0
0001CC16 6700                       		beq.s	Obj09_Glass
0001CC18 0C00 002F                  		cmpi.b	#$2F,d0
0001CC1C 6700                       		beq.s	Obj09_Glass
0001CC1E 0C00 0030                  		cmpi.b	#$30,d0
0001CC22 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CC24                            
0001CC24                            Obj09_Glass:
0001CC24 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001CC2A 6700                       		beq.s	@happy
0001CC2C 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001CC32 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001CC38                            
0001CC38                            	@happy:
0001CC38 6100 F482                  		bsr.w	SS_RemoveCollectedItem
0001CC3C 6600                       		bne.s	Obj09_GlassSnd
0001CC3E 14BC 0006                  		move.b	#6,(a2)
0001CC42 2268 0032                  		movea.l	$32(a0),a1
0001CC46 5389                       		subq.l	#1,a1
0001CC48 2549 0004                  		move.l	a1,4(a2)
0001CC4C 1011                       		move.b	(a1),d0
0001CC4E 5200                       		addq.b	#1,d0		; change glass type when touched
0001CC50 0C00 0030                  		cmpi.b	#$30,d0
0001CC54 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CC56 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CC58                            
0001CC58                            Obj09_GlassUpdate:
0001CC58 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CC5C                            
0001CC5C                            Obj09_GlassSnd:
0001CC5C 303C 00BA                  		move.w	#$BA,d0
0001CC60 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CC66                            ; ===========================================================================
0001CC66                            
0001CC66                            Obj09_NoGlass:
0001CC66 4E75                       		rts	
0001CC68                            ; End of function Obj09_ChkItems2
0001CC68                            
0001CC68                            ; ===========================================================================
0001CC68                            ; ---------------------------------------------------------------------------
0001CC68                            ; Object 10 - blank
0001CC68                            ; ---------------------------------------------------------------------------
0001CC68                            
0001CC68                            Obj10:					; XREF: Obj_Index
0001CC68 4E75                       		rts	
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            ; Subroutine to	animate	level graphics
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            
0001CC6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC6A                            
0001CC6A                            
0001CC6A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CC6A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CC6E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CC70 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CC76 6100 0000                  		bsr.w	AniArt_GiantRing
0001CC7A 7000                       		moveq	#0,d0
0001CC7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CC80 D040                       		add.w	d0,d0
0001CC82 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CC86 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CC8A                            ; ===========================================================================
0001CC8A                            
0001CC8A                            AniArt_Pause:
0001CC8A 4E75                       		rts	
0001CC8C                            ; End of function AniArt_Load
0001CC8C                            
0001CC8C                            ; ===========================================================================
0001CC8C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC90 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC94 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CC98 0000                       		dc.w AniArt_Ending-AniArt_Index
0001CC9A                            ; ===========================================================================
0001CC9A                            ; ---------------------------------------------------------------------------
0001CC9A                            ; Animated pattern routine - Green Hill
0001CC9A                            ; ---------------------------------------------------------------------------
0001CC9A                            
0001CC9A                            AniArt_GHZ:				; XREF: AniArt_Index
0001CC9A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC9E 6A00                       		bpl.s	loc_1C08A
0001CCA0 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CCA6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CCAC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CCB0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CCB4 0240 0001                  		andi.w	#1,d0
0001CCB8 6700                       		beq.s	loc_1C078
0001CCBA 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CCBE                            
0001CCBE                            loc_1C078:
0001CCBE 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CCC8 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CCCC 6000 0000                  		bra.w	LoadTiles
0001CCD0                            ; ===========================================================================
0001CCD0                            
0001CCD0                            loc_1C08A:
0001CCD0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CCD4 6A00                       		bpl.s	loc_1C0C0
0001CCD6 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CCDC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CCE2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CCE6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CCEA 0240 0001                  		andi.w	#1,d0
0001CCEE 6700                       		beq.s	loc_1C0AE
0001CCF0 43E9 0200                  		lea	$200(a1),a1
0001CCF4                            
0001CCF4                            loc_1C0AE:
0001CCF4 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CCFE 323C 000F                  		move.w	#$F,d1
0001CD02 6000 0000                  		bra.w	LoadTiles
0001CD06                            ; ===========================================================================
0001CD06                            
0001CD06                            loc_1C0C0:
0001CD06 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD0A 6A00                       		bpl.s	locret_1C10C
0001CD0C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CD12 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CD16 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CD1A 0240 0003                  		andi.w	#3,d0
0001CD1E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CD22 0800 0000                  		btst	#0,d0
0001CD26 6600                       		bne.s	loc_1C0E8
0001CD28 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CD2E                            
0001CD2E                            loc_1C0E8:
0001CD2E EF48                       		lsl.w	#7,d0
0001CD30 3200                       		move.w	d0,d1
0001CD32 D040                       		add.w	d0,d0
0001CD34 D041                       		add.w	d1,d0
0001CD36 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CD40 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CD46 43F1 0000                  		lea	(a1,d0.w),a1
0001CD4A 323C 000B                  		move.w	#$B,d1
0001CD4E 6100 0000                  		bsr.w	LoadTiles
0001CD52                            
0001CD52                            locret_1C10C:
0001CD52 4E75                       		rts	
0001CD54                            ; ===========================================================================
0001CD54 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CD58                            ; ===========================================================================
0001CD58                            ; ---------------------------------------------------------------------------
0001CD58                            ; Animated pattern routine - Marble
0001CD58                            ; ---------------------------------------------------------------------------
0001CD58                            
0001CD58                            AniArt_MZ:				; XREF: AniArt_Index
0001CD58 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CD5C 6A00                       		bpl.s	loc_1C150
0001CD5E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CD64 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CD6A 7000                       		moveq	#0,d0
0001CD6C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD70 5200                       		addq.b	#1,d0
0001CD72 0C00 0003                  		cmpi.b	#3,d0
0001CD76 6600                       		bne.s	loc_1C134
0001CD78 7000                       		moveq	#0,d0
0001CD7A                            
0001CD7A                            loc_1C134:
0001CD7A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CD7E C0FC 0100                  		mulu.w	#$100,d0
0001CD82 D2C0                       		adda.w	d0,a1
0001CD84 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CD8E 323C 0007                  		move.w	#7,d1
0001CD92 6100 0000                  		bsr.w	LoadTiles
0001CD96                            
0001CD96                            loc_1C150:
0001CD96 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD9A 6A00                       		bpl.s	loc_1C1AE
0001CD9C 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CDA2 7000                       		moveq	#0,d0
0001CDA4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDA8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CDAE EE58                       		ror.w	#7,d0
0001CDB0 D8C0                       		adda.w	d0,a4
0001CDB2 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CDBC 7600                       		moveq	#0,d3
0001CDBE 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CDC2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CDC6 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CDCA 343C 0003                  		move.w	#3,d2
0001CDCE                            
0001CDCE                            loc_1C188:
0001CDCE 3003                       		move.w	d3,d0
0001CDD0 D040                       		add.w	d0,d0
0001CDD2 0240 001E                  		andi.w	#$1E,d0
0001CDD6 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CDDC 3033 0000                  		move.w	(a3,d0.w),d0
0001CDE0 47F3 0000                  		lea	(a3,d0.w),a3
0001CDE4 224C                       		movea.l	a4,a1
0001CDE6 323C 001F                  		move.w	#$1F,d1
0001CDEA 4E93                       		jsr	(a3)
0001CDEC 5843                       		addq.w	#4,d3
0001CDEE 51CA FFDE                  		dbf	d2,loc_1C188
0001CDF2 4E75                       		rts	
0001CDF4                            ; ===========================================================================
0001CDF4                            
0001CDF4                            loc_1C1AE:
0001CDF4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CDF8 6A00 0000                  		bpl.w	locret_1C1EA
0001CDFC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CE02 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CE08 7000                       		moveq	#0,d0
0001CE0A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CE0E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CE12 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CE18 C0FC 00C0                  		mulu.w	#$C0,d0
0001CE1C D2C0                       		adda.w	d0,a1
0001CE1E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CE28 323C 0005                  		move.w	#5,d1
0001CE2C 6000 0000                  		bra.w	LoadTiles
0001CE30                            ; ===========================================================================
0001CE30                            
0001CE30                            locret_1C1EA:
0001CE30 4E75                       		rts	
0001CE32                            ; ===========================================================================
0001CE32                            ; ---------------------------------------------------------------------------
0001CE32                            ; Animated pattern routine - Scrap Brain
0001CE32                            ; ---------------------------------------------------------------------------
0001CE32                            
0001CE32                            AniArt_SBZ:				; XREF: AniArt_Index
0001CE32 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CE36 6700                       		beq.s	loc_1C1F8
0001CE38 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CE3C 6000                       		bra.s	loc_1C250
0001CE3E                            ; ===========================================================================
0001CE3E                            
0001CE3E                            loc_1C1F8:
0001CE3E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CE42 6A00                       		bpl.s	loc_1C250
0001CE44 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CE4A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CE50 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CE5A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CE5E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CE62 0240 0007                  		andi.w	#7,d0
0001CE66 6700                       		beq.s	loc_1C234
0001CE68 5340                       		subq.w	#1,d0
0001CE6A C0FC 0180                  		mulu.w	#$180,d0
0001CE6E 43F1 0000                  		lea	(a1,d0.w),a1
0001CE72 323C 000B                  		move.w	#$B,d1
0001CE76 6000 0000                  		bra.w	LoadTiles
0001CE7A                            ; ===========================================================================
0001CE7A                            
0001CE7A                            loc_1C234:
0001CE7A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CE80                            
0001CE80                            loc_1C23A:
0001CE80 323C 0005                  		move.w	#5,d1
0001CE84 6100 0000                  		bsr.w	LoadTiles
0001CE88 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE8E 323C 0005                  		move.w	#5,d1
0001CE92 6000 0000                  		bra.w	LoadTiles
0001CE96                            ; ===========================================================================
0001CE96                            
0001CE96                            loc_1C250:
0001CE96 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CE9A 6700                       		beq.s	loc_1C25C
0001CE9C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEA0 6000                       		bra.s	locret_1C2A0
0001CEA2                            ; ===========================================================================
0001CEA2                            
0001CEA2                            loc_1C25C:
0001CEA2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CEA6 6A00                       		bpl.s	locret_1C2A0
0001CEA8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CEAE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CEB4 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CEBE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CEC2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CEC6 0240 0007                  		andi.w	#7,d0
0001CECA 6700                       		beq.s	loc_1C298
0001CECC 5340                       		subq.w	#1,d0
0001CECE C0FC 0180                  		mulu.w	#$180,d0
0001CED2 43F1 0000                  		lea	(a1,d0.w),a1
0001CED6 323C 000B                  		move.w	#$B,d1
0001CEDA 6000 0000                  		bra.w	LoadTiles
0001CEDE                            ; ===========================================================================
0001CEDE                            
0001CEDE                            loc_1C298:
0001CEDE 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CEE4 609A                       		bra.s	loc_1C23A
0001CEE6                            ; ===========================================================================
0001CEE6                            
0001CEE6                            locret_1C2A0:
0001CEE6 4E75                       		rts	
0001CEE8                            ; ===========================================================================
0001CEE8                            ; ---------------------------------------------------------------------------
0001CEE8                            ; Animated pattern routine - ending sequence
0001CEE8                            ; ---------------------------------------------------------------------------
0001CEE8                            
0001CEE8                            AniArt_Ending:				; XREF: AniArt_Index
0001CEE8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CEEC 6A00                       		bpl.s	loc_1C2F4
0001CEEE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CEF4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CEFA 45F8 9400                  		lea	($FFFF9400).w,a2
0001CEFE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF02 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF06 0240 0001                  		andi.w	#1,d0
0001CF0A 6700                       		beq.s	loc_1C2CE
0001CF0C 43E9 0200                  		lea	$200(a1),a1
0001CF10 45EA 0200                  		lea	$200(a2),a2
0001CF14                            
0001CF14                            loc_1C2CE:
0001CF14 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CF1E 323C 000F                  		move.w	#$F,d1
0001CF22 6100 0000                  		bsr.w	LoadTiles
0001CF26 224A                       		movea.l	a2,a1
0001CF28 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CF32 323C 000F                  		move.w	#$F,d1
0001CF36 6000 0000                  		bra.w	LoadTiles
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            loc_1C2F4:
0001CF3A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CF3E 6A00                       		bpl.s	loc_1C33C
0001CF40 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CF46 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CF4A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF4E 0240 0007                  		andi.w	#7,d0
0001CF52 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CF56 EF48                       		lsl.w	#7,d0
0001CF58 3200                       		move.w	d0,d1
0001CF5A D040                       		add.w	d0,d0
0001CF5C D041                       		add.w	d1,d0
0001CF5E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CF68 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CF6E 43F1 0000                  		lea	(a1,d0.w),a1
0001CF72 323C 000B                  		move.w	#$B,d1
0001CF76 6000 0000                  		bra.w	LoadTiles
0001CF7A                            ; ===========================================================================
0001CF7A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CF82                            ; ===========================================================================
0001CF82                            
0001CF82                            loc_1C33C:
0001CF82 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CF86 6A00                       		bpl.s	loc_1C37A
0001CF88 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CF8E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CF92 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CF96 0240 0003                  		andi.w	#3,d0
0001CF9A 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CF9E E148                       		lsl.w	#8,d0
0001CFA0 D040                       		add.w	d0,d0
0001CFA2 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CFAC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CFB0 43F1 0000                  		lea	(a1,d0.w),a1
0001CFB4 323C 000F                  		move.w	#$F,d1
0001CFB8 6000 0000                  		bra.w	LoadTiles
0001CFBC                            ; ===========================================================================
0001CFBC 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CFC0                            ; ===========================================================================
0001CFC0                            
0001CFC0                            loc_1C37A:
0001CFC0 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CFC4 6A00                       		bpl.s	locret_1C3B4
0001CFC6 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CFCC 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CFD0 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CFD4 0240 0003                  		andi.w	#3,d0
0001CFD8 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CFDC E148                       		lsl.w	#8,d0
0001CFDE D040                       		add.w	d0,d0
0001CFE0 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CFEA 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CFEE 43F1 0000                  		lea	(a1,d0.w),a1
0001CFF2 323C 000F                  		move.w	#$F,d1
0001CFF6 6000 0000                  		bra.w	LoadTiles
0001CFFA                            ; ===========================================================================
0001CFFA                            
0001CFFA                            locret_1C3B4:
0001CFFA 4E75                       		rts	
0001CFFC                            ; ===========================================================================
0001CFFC                            
0001CFFC                            AniArt_none:				; XREF: AniArt_Index
0001CFFC 4E75                       		rts	
0001CFFE                            
0001CFFE                            ; ---------------------------------------------------------------------------
0001CFFE                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CFFE                            ; ---------------------------------------------------------------------------
0001CFFE                            
0001CFFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFE                            
0001CFFE                            
0001CFFE                            LoadTiles:
0001CFFE 2C99                       		move.l	(a1)+,(a6)
0001D000 2C99                       		move.l	(a1)+,(a6)
0001D002 2C99                       		move.l	(a1)+,(a6)
0001D004 2C99                       		move.l	(a1)+,(a6)
0001D006 2C99                       		move.l	(a1)+,(a6)
0001D008 2C99                       		move.l	(a1)+,(a6)
0001D00A 2C99                       		move.l	(a1)+,(a6)
0001D00C 2C99                       		move.l	(a1)+,(a6)
0001D00E 51C9 FFEE                  		dbf	d1,LoadTiles
0001D012 4E75                       		rts	
0001D014                            ; End of function LoadTiles
0001D014                            
0001D014                            ; ===========================================================================
0001D014                            ; ---------------------------------------------------------------------------
0001D014                            ; Animated pattern routine - more Marble Zone
0001D014                            ; ---------------------------------------------------------------------------
0001D014 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D018 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D01C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D020 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D024 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D028 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D02C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D030 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D034                            ; ===========================================================================
0001D034                            
0001D034                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D034 2C91                       		move.l	(a1),(a6)
0001D036 43E9 0010                  		lea	$10(a1),a1
0001D03A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D03E 4E75                       		rts	
0001D040                            ; ===========================================================================
0001D040                            
0001D040                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D040 2029 0002                  		move.l	2(a1),d0
0001D044 1029 0001                  		move.b	1(a1),d0
0001D048 E098                       		ror.l	#8,d0
0001D04A 2C80                       		move.l	d0,(a6)
0001D04C 43E9 0010                  		lea	$10(a1),a1
0001D050 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D054 4E75                       		rts	
0001D056                            ; ===========================================================================
0001D056                            
0001D056                            loc_1C410:				; XREF: AniArt_MZextra
0001D056 2CA9 0002                  		move.l	2(a1),(a6)
0001D05A 43E9 0010                  		lea	$10(a1),a1
0001D05E 51C9 FFF6                  		dbf	d1,loc_1C410
0001D062 4E75                       		rts	
0001D064                            ; ===========================================================================
0001D064                            
0001D064                            loc_1C41E:				; XREF: AniArt_MZextra
0001D064 2029 0004                  		move.l	4(a1),d0
0001D068 1029 0003                  		move.b	3(a1),d0
0001D06C E098                       		ror.l	#8,d0
0001D06E 2C80                       		move.l	d0,(a6)
0001D070 43E9 0010                  		lea	$10(a1),a1
0001D074 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D078 4E75                       		rts	
0001D07A                            ; ===========================================================================
0001D07A                            
0001D07A                            loc_1C434:				; XREF: AniArt_MZextra
0001D07A 2CA9 0004                  		move.l	4(a1),(a6)
0001D07E 43E9 0010                  		lea	$10(a1),a1
0001D082 51C9 FFF6                  		dbf	d1,loc_1C434
0001D086 4E75                       		rts	
0001D088                            ; ===========================================================================
0001D088                            
0001D088                            loc_1C442:				; XREF: AniArt_MZextra
0001D088 2029 0006                  		move.l	6(a1),d0
0001D08C 1029 0005                  		move.b	5(a1),d0
0001D090 E098                       		ror.l	#8,d0
0001D092 2C80                       		move.l	d0,(a6)
0001D094 43E9 0010                  		lea	$10(a1),a1
0001D098 51C9 FFEE                  		dbf	d1,loc_1C442
0001D09C 4E75                       		rts	
0001D09E                            ; ===========================================================================
0001D09E                            
0001D09E                            loc_1C458:				; XREF: AniArt_MZextra
0001D09E 2CA9 0006                  		move.l	6(a1),(a6)
0001D0A2 43E9 0010                  		lea	$10(a1),a1
0001D0A6 51C9 FFF6                  		dbf	d1,loc_1C458
0001D0AA 4E75                       		rts	
0001D0AC                            ; ===========================================================================
0001D0AC                            
0001D0AC                            loc_1C466:				; XREF: AniArt_MZextra
0001D0AC 2029 0008                  		move.l	8(a1),d0
0001D0B0 1029 0007                  		move.b	7(a1),d0
0001D0B4 E098                       		ror.l	#8,d0
0001D0B6 2C80                       		move.l	d0,(a6)
0001D0B8 43E9 0010                  		lea	$10(a1),a1
0001D0BC 51C9 FFEE                  		dbf	d1,loc_1C466
0001D0C0 4E75                       		rts	
0001D0C2                            ; ===========================================================================
0001D0C2                            
0001D0C2                            loc_1C47C:				; XREF: AniArt_MZextra
0001D0C2 2CA9 0008                  		move.l	8(a1),(a6)
0001D0C6 43E9 0010                  		lea	$10(a1),a1
0001D0CA 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D0CE 4E75                       		rts	
0001D0D0                            ; ===========================================================================
0001D0D0                            
0001D0D0                            loc_1C48A:				; XREF: AniArt_MZextra
0001D0D0 2029 000A                  		move.l	$A(a1),d0
0001D0D4 1029 0009                  		move.b	9(a1),d0
0001D0D8 E098                       		ror.l	#8,d0
0001D0DA 2C80                       		move.l	d0,(a6)
0001D0DC 43E9 0010                  		lea	$10(a1),a1
0001D0E0 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D0E4 4E75                       		rts	
0001D0E6                            ; ===========================================================================
0001D0E6                            
0001D0E6                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D0E6 2CA9 000A                  		move.l	$A(a1),(a6)
0001D0EA 43E9 0010                  		lea	$10(a1),a1
0001D0EE 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D0F2 4E75                       		rts	
0001D0F4                            ; ===========================================================================
0001D0F4                            
0001D0F4                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D0F4 2029 000C                  		move.l	$C(a1),d0
0001D0F8 1029 000B                  		move.b	$B(a1),d0
0001D0FC E098                       		ror.l	#8,d0
0001D0FE 2C80                       		move.l	d0,(a6)
0001D100 43E9 0010                  		lea	$10(a1),a1
0001D104 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D108 4E75                       		rts	
0001D10A                            ; ===========================================================================
0001D10A                            
0001D10A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D10A 2CA9 000C                  		move.l	$C(a1),(a6)
0001D10E 43E9 0010                  		lea	$10(a1),a1
0001D112 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D116 4E75                       		rts	
0001D118                            ; ===========================================================================
0001D118                            
0001D118                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D118 2029 000C                  		move.l	$C(a1),d0
0001D11C E198                       		rol.l	#8,d0
0001D11E 1011                       		move.b	0(a1),d0
0001D120 2C80                       		move.l	d0,(a6)
0001D122 43E9 0010                  		lea	$10(a1),a1
0001D126 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D12A 4E75                       		rts	
0001D12C                            ; ===========================================================================
0001D12C                            
0001D12C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D12C 3CA9 000E                  		move.w	$E(a1),(a6)
0001D130 3C91                       		move.w	0(a1),(a6)
0001D132 43E9 0010                  		lea	$10(a1),a1
0001D136 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D13A 4E75                       		rts	
0001D13C                            ; ===========================================================================
0001D13C                            
0001D13C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D13C 2011                       		move.l	0(a1),d0
0001D13E 1029 000F                  		move.b	$F(a1),d0
0001D142 E098                       		ror.l	#8,d0
0001D144 2C80                       		move.l	d0,(a6)
0001D146 43E9 0010                  		lea	$10(a1),a1
0001D14A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D14E 4E75                       		rts	
0001D150                            
0001D150                            ; ---------------------------------------------------------------------------
0001D150                            ; Animated pattern routine - giant ring
0001D150                            ; ---------------------------------------------------------------------------
0001D150                            
0001D150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D150                            
0001D150                            
0001D150                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D150 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D154 6600                       		bne.s	loc_1C518
0001D156 4E75                       		rts	
0001D158                            ; ===========================================================================
0001D158                            
0001D158                            loc_1C518:
0001D158 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D15E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D164 7000                       		moveq	#0,d0
0001D166 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D16A 43F1 0000                  		lea	(a1,d0.w),a1
0001D16E 0640 8000                  		addi.w	#$8000,d0
0001D172 E588                       		lsl.l	#2,d0
0001D174 E448                       		lsr.w	#2,d0
0001D176 0040 4000                  		ori.w	#$4000,d0
0001D17A 4840                       		swap	d0
0001D17C 2D40 0004                  		move.l	d0,4(a6)
0001D180 323C 000D                  		move.w	#$D,d1
0001D184 6000 FE78                  		bra.w	LoadTiles
0001D188                            ; End of function AniArt_GiantRing
0001D188                            
0001D188                            ; ===========================================================================
0001D188                            ; ---------------------------------------------------------------------------
0001D188                            ; Object 21 - SCORE, TIME, RINGS
0001D188                            ; ---------------------------------------------------------------------------
0001D188                            
0001D188                            Obj21:					; XREF: Obj_Index
0001D188 7000                       		moveq	#0,d0
0001D18A 1028 0024                  		move.b	$24(a0),d0
0001D18E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D192 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D196                            ; ===========================================================================
0001D196 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D198 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D19A                            ; ===========================================================================
0001D19A                            
0001D19A                            Obj21_Main:				; XREF: Obj21_Main
0001D19A 5428 0024                  		addq.b	#2,$24(a0)
0001D19E 317C 0090 0008             		move.w	#$90,8(a0)
0001D1A4 317C 0108 000A             		move.w	#$108,$A(a0)
0001D1AA 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D1B2 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D1B8 117C 0000 0001             		move.b	#0,1(a0)
0001D1BE 117C 0000 0018             		move.b	#0,$18(a0)
0001D1C4                            
0001D1C4                            Obj21_Flash:				; XREF: Obj21_Main
0001D1C4 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D1C8 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D1CA 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D1CE 4EF9 0000 DD82             		jmp	DisplaySprite
0001D1D4                            ; ===========================================================================
0001D1D4                            
0001D1D4                            Obj21_Flash2:
0001D1D4 7000                       		moveq	#0,d0
0001D1D6 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D1DC 6600                       		bne.s	Obj21_Display
0001D1DE 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D1E0 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D1E6 6600                       		bne.s	Obj21_Display	; if not, branch
0001D1E8 5440                       		addq.w	#2,d0		; make time counter flash red
0001D1EA                            
0001D1EA                            Obj21_Display:
0001D1EA 1140 001A                  		move.b	d0,$1A(a0)
0001D1EE 4EF9 0000 DD82             		jmp	DisplaySprite
0001D1F4                            ; ===========================================================================
0001D1F4                            ; ---------------------------------------------------------------------------
0001D1F4                            ; Sprite mappings - SCORE, TIME, RINGS
0001D1F4                            ; ---------------------------------------------------------------------------
0001D1F4                            Map_obj21:
0001D1F4                            	include "_maps\obj21.asm"
0001D1F4                            ; ---------------------------------------------------------------------------
0001D1F4                            ; Sprite mappings - SCORE, TIME, RINGS
0001D1F4                            ; ---------------------------------------------------------------------------
0001D1F4 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D1F8 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D1FC 0A                         byte_1C5BC:	dc.b $A
0001D1FD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D202 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D207 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D20C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D211 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D216 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D21B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D220 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D225 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D22A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D22F 00                         		dc.b 0
0001D230 0A                         byte_1C5F0:	dc.b $A
0001D231 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D236 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D23B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D240 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D245 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D24A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D24F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D254 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D259 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D25E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D263 00                         		dc.b 0
0001D264 0A                         byte_1C624:	dc.b $A
0001D265 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D26A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D26F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D274 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D279 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D27E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D283 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D288 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D28D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D292 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D297 00                         		dc.b 0
0001D298 0A                         byte_1C658:	dc.b $A
0001D299 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D29E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D2A3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D2A8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D2AD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D2B2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D2B7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D2BC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D2C1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D2C6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D2CC 00                         		even
0001D2CC 00                         		even
0001D2CC                            
0001D2CC                            ; ---------------------------------------------------------------------------
0001D2CC                            ; Add points subroutine
0001D2CC                            ; ---------------------------------------------------------------------------
0001D2CC                            
0001D2CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2CC                            
0001D2CC                            
0001D2CC                            AddPoints:
0001D2CC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D2D2 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D2D6 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D2DA D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D2DC 223C 000F 423F             		move.l	#999999,d1
0001D2E2 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D2E4 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D2E8 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D2EA 2481                       		move.l	d1,(a2)
0001D2EC                            
0001D2EC                            loc_1C6AC:
0001D2EC 2013                       		move.l	(a3),d0
0001D2EE B092                       		cmp.l	(a2),d0
0001D2F0 6500 0000                  		bcs.w	locret_1C6B6
0001D2F4 2480                       		move.l	d0,(a2)
0001D2F6                            
0001D2F6                            locret_1C6B6:
0001D2F6 4E75                       		rts	
0001D2F8                            ; End of function AddPoints
0001D2F8                            
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            ; Subroutine to	update the HUD
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            
0001D2F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2F8                            
0001D2F8                            
0001D2F8                            HudUpdate:
0001D2F8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D2FC 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D300 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D304 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D306 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D30A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D310 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D314 6100 0000                  		bsr.w	Hud_Score
0001D318                            
0001D318                            Hud_ChkRings:
0001D318 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D31C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D31E 6A00                       		bpl.s	loc_1C6E4
0001D320 6100 0000                  		bsr.w	Hud_LoadZero
0001D324                            
0001D324                            loc_1C6E4:
0001D324 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D328 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D32E 7200                       		moveq	#0,d1
0001D330 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D334 6100 0000                  		bsr.w	Hud_Rings
0001D338                            
0001D338                            Hud_ChkTime:
0001D338 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D33C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D33E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D342 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D344 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D348 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D34E 6700                       		beq.s	TimeOver	; if yes, branch
0001D350 5221                       		addq.b	#1,-(a1)
0001D352 0C11 003C                  		cmpi.b	#60,(a1)
0001D356 6500                       		bcs.s	Hud_ChkLives
0001D358 12BC 0000                  		move.b	#0,(a1)
0001D35C 5221                       		addq.b	#1,-(a1)
0001D35E 0C11 003C                  		cmpi.b	#60,(a1)
0001D362 6500                       		bcs.s	loc_1C734
0001D364 12BC 0000                  		move.b	#0,(a1)
0001D368 5221                       		addq.b	#1,-(a1)
0001D36A 0C11 0009                  		cmpi.b	#9,(a1)
0001D36E 6500                       		bcs.s	loc_1C734
0001D370 12BC 0009                  		move.b	#9,(a1)
0001D374                            
0001D374                            loc_1C734:
0001D374 203C 5E40 0003             		move.l	#$5E400003,d0
0001D37A 7200                       		moveq	#0,d1
0001D37C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D380 6100 0000                  		bsr.w	Hud_Mins
0001D384 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D38A 7200                       		moveq	#0,d1
0001D38C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D390 6100 0000                  		bsr.w	Hud_Secs
0001D394                            
0001D394                            Hud_ChkLives:
0001D394 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D398 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D39A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D39E 6100 0000                  		bsr.w	Hud_Lives
0001D3A2                            
0001D3A2                            Hud_ChkBonus:
0001D3A2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D3A6 6700                       		beq.s	Hud_End		; if not, branch
0001D3A8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3AC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D3B6 7200                       		moveq	#0,d1
0001D3B8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3BC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3C0 7200                       		moveq	#0,d1
0001D3C2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3C6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3CA                            
0001D3CA                            Hud_End:
0001D3CA 4E75                       		rts	
0001D3CC                            ; ===========================================================================
0001D3CC                            
0001D3CC                            TimeOver:				; XREF: Hud_ChkTime
0001D3CC 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D3D0 41F8 D000                  		lea	($FFFFD000).w,a0
0001D3D4 2448                       		movea.l	a0,a2
0001D3D6 6100 E898                  		bsr.w	KillSonic
0001D3DA 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D3E0 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D3E6 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D3EC 4E75                       		rts	
0001D3EE                            ; ===========================================================================
0001D3EE                            
0001D3EE                            HudDebug:				; XREF: HudUpdate
0001D3EE 6100 0000                  		bsr.w	HudDb_XY
0001D3F2 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D3F6 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D3F8 6A00                       		bpl.s	HudDb_Rings
0001D3FA 6100 0000                  		bsr.w	Hud_LoadZero
0001D3FE                            
0001D3FE                            HudDb_Rings:
0001D3FE 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D402 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D408 7200                       		moveq	#0,d1
0001D40A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D40E 6100 0000                  		bsr.w	Hud_Rings
0001D412                            
0001D412                            HudDb_ObjCount:
0001D412 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D418 7200                       		moveq	#0,d1
0001D41A 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D41E 6100 0000                  		bsr.w	Hud_Secs
0001D422 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D426 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D428 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D42C 6100 0000                  		bsr.w	Hud_Lives
0001D430                            
0001D430                            HudDb_ChkBonus:
0001D430 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D434 6700                       		beq.s	HudDb_End	; if not, branch
0001D436 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D43A 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D444 7200                       		moveq	#0,d1
0001D446 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D44A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D44E 7200                       		moveq	#0,d1
0001D450 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D454 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D458                            
0001D458                            HudDb_End:
0001D458 4E75                       		rts	
0001D45A                            ; End of function HudUpdate
0001D45A                            
0001D45A                            ; ---------------------------------------------------------------------------
0001D45A                            ; Subroutine to	load "0" on the	HUD
0001D45A                            ; ---------------------------------------------------------------------------
0001D45A                            
0001D45A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D45A                            
0001D45A                            
0001D45A                            Hud_LoadZero:				; XREF: HudUpdate
0001D45A 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D464 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D468 343C 0002                  		move.w	#2,d2
0001D46C 6000                       		bra.s	loc_1C83E
0001D46E                            ; End of function Hud_LoadZero
0001D46E                            
0001D46E                            ; ---------------------------------------------------------------------------
0001D46E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D46E                            ; ---------------------------------------------------------------------------
0001D46E                            
0001D46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D46E                            
0001D46E                            
0001D46E                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D46E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D474 6100 0000                  		bsr.w	Hud_Lives
0001D478 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D482 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D486 343C 000E                  		move.w	#$E,d2
0001D48A                            
0001D48A                            loc_1C83E:				; XREF: Hud_LoadZero
0001D48A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D48E                            
0001D48E                            loc_1C842:
0001D48E 323C 000F                  		move.w	#$F,d1
0001D492 101A                       		move.b	(a2)+,d0
0001D494 6B00                       		bmi.s	loc_1C85E
0001D496 4880                       		ext.w	d0
0001D498 EB48                       		lsl.w	#5,d0
0001D49A 47F1 0000                  		lea	(a1,d0.w),a3
0001D49E                            
0001D49E                            loc_1C852:
0001D49E 2C9B                       		move.l	(a3)+,(a6)
0001D4A0 51C9 FFFC                  		dbf	d1,loc_1C852
0001D4A4                            
0001D4A4                            loc_1C858:
0001D4A4 51CA FFE8                  		dbf	d2,loc_1C842
0001D4A8                            
0001D4A8 4E75                       		rts	
0001D4AA                            ; ===========================================================================
0001D4AA                            
0001D4AA                            loc_1C85E:
0001D4AA 2CBC 0000 0000             		move.l	#0,(a6)
0001D4B0 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D4B4                            
0001D4B4 60EE                       		bra.s	loc_1C858
0001D4B6                            ; End of function Hud_Base
0001D4B6                            
0001D4B6                            ; ===========================================================================
0001D4B6 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D4C2 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D4C6                            ; ---------------------------------------------------------------------------
0001D4C6                            ; Subroutine to	load debug mode	numbers	patterns
0001D4C6                            ; ---------------------------------------------------------------------------
0001D4C6                            
0001D4C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4C6                            
0001D4C6                            
0001D4C6                            HudDb_XY:				; XREF: HudDebug
0001D4C6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D4D0 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D4D4 4841                       		swap	d1
0001D4D6 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D4DA 6100                       		bsr.s	HudDb_XY2
0001D4DC 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D4E0 4841                       		swap	d1
0001D4E2 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D4E6                            ; End of function HudDb_XY
0001D4E6                            
0001D4E6                            
0001D4E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4E6                            
0001D4E6                            
0001D4E6                            HudDb_XY2:
0001D4E6 7C07                       		moveq	#7,d6
0001D4E8 43F9 0000 0534             		lea	(Art_Text).l,a1
0001D4EE                            
0001D4EE                            HudDb_XYLoop:
0001D4EE E959                       		rol.w	#4,d1
0001D4F0 3401                       		move.w	d1,d2
0001D4F2 0242 000F                  		andi.w	#$F,d2
0001D4F6 0C42 000A                  		cmpi.w	#$A,d2
0001D4FA 6500                       		bcs.s	loc_1C8B2
0001D4FC 5E42                       		addq.w	#7,d2
0001D4FE                            
0001D4FE                            loc_1C8B2:
0001D4FE EB4A                       		lsl.w	#5,d2
0001D500 47F1 2000                  		lea	(a1,d2.w),a3
0001D504 2C9B                       		move.l	(a3)+,(a6)
0001D506 2C9B                       		move.l	(a3)+,(a6)
0001D508 2C9B                       		move.l	(a3)+,(a6)
0001D50A 2C9B                       		move.l	(a3)+,(a6)
0001D50C 2C9B                       		move.l	(a3)+,(a6)
0001D50E 2C9B                       		move.l	(a3)+,(a6)
0001D510 2C9B                       		move.l	(a3)+,(a6)
0001D512 2C9B                       		move.l	(a3)+,(a6)
0001D514 4841                       		swap	d1
0001D516 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D51A                            
0001D51A 4E75                       		rts	
0001D51C                            ; End of function HudDb_XY2
0001D51C                            
0001D51C                            ; ---------------------------------------------------------------------------
0001D51C                            ; Subroutine to	load rings numbers patterns
0001D51C                            ; ---------------------------------------------------------------------------
0001D51C                            
0001D51C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D51C                            
0001D51C                            
0001D51C                            Hud_Rings:				; XREF: HudUpdate
0001D51C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D522 7C02                       		moveq	#2,d6
0001D524 6000                       		bra.s	Hud_LoadArt
0001D526                            ; End of function Hud_Rings
0001D526                            
0001D526                            ; ---------------------------------------------------------------------------
0001D526                            ; Subroutine to	load score numbers patterns
0001D526                            ; ---------------------------------------------------------------------------
0001D526                            
0001D526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D526                            
0001D526                            
0001D526                            Hud_Score:				; XREF: HudUpdate
0001D526 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D52C 7C05                       		moveq	#5,d6
0001D52E                            
0001D52E                            Hud_LoadArt:
0001D52E 7800                       		moveq	#0,d4
0001D530 43FA 0000                  		lea	Art_Hud(pc),a1
0001D534                            
0001D534                            Hud_ScoreLoop:
0001D534 7400                       		moveq	#0,d2
0001D536 261A                       		move.l	(a2)+,d3
0001D538                            
0001D538                            loc_1C8EC:
0001D538 9283                       		sub.l	d3,d1
0001D53A 6500                       		bcs.s	loc_1C8F4
0001D53C 5242                       		addq.w	#1,d2
0001D53E 60F8                       		bra.s	loc_1C8EC
0001D540                            ; ===========================================================================
0001D540                            
0001D540                            loc_1C8F4:
0001D540 D283                       		add.l	d3,d1
0001D542 4A42                       		tst.w	d2
0001D544 6700                       		beq.s	loc_1C8FE
0001D546 383C 0001                  		move.w	#1,d4
0001D54A                            
0001D54A                            loc_1C8FE:
0001D54A 4A44                       		tst.w	d4
0001D54C 6700                       		beq.s	loc_1C92C
0001D54E ED4A                       		lsl.w	#6,d2
0001D550 2D40 0004                  		move.l	d0,4(a6)
0001D554 47F1 2000                  		lea	(a1,d2.w),a3
0001D558 2C9B                       		move.l	(a3)+,(a6)
0001D55A 2C9B                       		move.l	(a3)+,(a6)
0001D55C 2C9B                       		move.l	(a3)+,(a6)
0001D55E 2C9B                       		move.l	(a3)+,(a6)
0001D560 2C9B                       		move.l	(a3)+,(a6)
0001D562 2C9B                       		move.l	(a3)+,(a6)
0001D564 2C9B                       		move.l	(a3)+,(a6)
0001D566 2C9B                       		move.l	(a3)+,(a6)
0001D568 2C9B                       		move.l	(a3)+,(a6)
0001D56A 2C9B                       		move.l	(a3)+,(a6)
0001D56C 2C9B                       		move.l	(a3)+,(a6)
0001D56E 2C9B                       		move.l	(a3)+,(a6)
0001D570 2C9B                       		move.l	(a3)+,(a6)
0001D572 2C9B                       		move.l	(a3)+,(a6)
0001D574 2C9B                       		move.l	(a3)+,(a6)
0001D576 2C9B                       		move.l	(a3)+,(a6)
0001D578                            
0001D578                            loc_1C92C:
0001D578 0680 0040 0000             		addi.l	#$400000,d0
0001D57E 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D582                            
0001D582 4E75                       		rts	
0001D584                            ; End of function Hud_Score
0001D584                            
0001D584                            ; ---------------------------------------------------------------------------
0001D584                            ; Subroutine to	load countdown numbers on the continue screen
0001D584                            ; ---------------------------------------------------------------------------
0001D584                            
0001D584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D584                            
0001D584                            
0001D584                            ContScrCounter:				; XREF: ContinueScreen
0001D584 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D58E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D594 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D59A 7C01                       		moveq	#1,d6
0001D59C 7800                       		moveq	#0,d4
0001D59E 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D5A2                            
0001D5A2                            ContScr_Loop:
0001D5A2 7400                       		moveq	#0,d2
0001D5A4 261A                       		move.l	(a2)+,d3
0001D5A6                            
0001D5A6                            loc_1C95A:
0001D5A6 9283                       		sub.l	d3,d1
0001D5A8 6500                       		bcs.s	loc_1C962
0001D5AA 5242                       		addq.w	#1,d2
0001D5AC 60F8                       		bra.s	loc_1C95A
0001D5AE                            ; ===========================================================================
0001D5AE                            
0001D5AE                            loc_1C962:
0001D5AE D283                       		add.l	d3,d1
0001D5B0 ED4A                       		lsl.w	#6,d2
0001D5B2 47F1 2000                  		lea	(a1,d2.w),a3
0001D5B6 2C9B                       		move.l	(a3)+,(a6)
0001D5B8 2C9B                       		move.l	(a3)+,(a6)
0001D5BA 2C9B                       		move.l	(a3)+,(a6)
0001D5BC 2C9B                       		move.l	(a3)+,(a6)
0001D5BE 2C9B                       		move.l	(a3)+,(a6)
0001D5C0 2C9B                       		move.l	(a3)+,(a6)
0001D5C2 2C9B                       		move.l	(a3)+,(a6)
0001D5C4 2C9B                       		move.l	(a3)+,(a6)
0001D5C6 2C9B                       		move.l	(a3)+,(a6)
0001D5C8 2C9B                       		move.l	(a3)+,(a6)
0001D5CA 2C9B                       		move.l	(a3)+,(a6)
0001D5CC 2C9B                       		move.l	(a3)+,(a6)
0001D5CE 2C9B                       		move.l	(a3)+,(a6)
0001D5D0 2C9B                       		move.l	(a3)+,(a6)
0001D5D2 2C9B                       		move.l	(a3)+,(a6)
0001D5D4 2C9B                       		move.l	(a3)+,(a6)
0001D5D6 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D5DA                            
0001D5DA 4E75                       		rts	
0001D5DC                            ; End of function ContScrCounter
0001D5DC                            
0001D5DC                            ; ===========================================================================
0001D5DC                            ; ---------------------------------------------------------------------------
0001D5DC                            ; HUD counter sizes
0001D5DC                            ; ---------------------------------------------------------------------------
0001D5DC 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D5E0 0000 2710                  Hud_10000:	dc.l 10000
0001D5E4 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D5E8 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D5EC 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D5F0 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D5F4                            
0001D5F4                            ; ---------------------------------------------------------------------------
0001D5F4                            ; Subroutine to	load time numbers patterns
0001D5F4                            ; ---------------------------------------------------------------------------
0001D5F4                            
0001D5F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5F4                            
0001D5F4                            
0001D5F4                            Hud_Mins:				; XREF: Hud_ChkTime
0001D5F4 45F9 0001 D5F0             		lea	(Hud_1).l,a2
0001D5FA 7C00                       		moveq	#0,d6
0001D5FC 6000                       		bra.s	loc_1C9BA
0001D5FE                            ; End of function Hud_Mins
0001D5FE                            
0001D5FE                            
0001D5FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5FE                            
0001D5FE                            
0001D5FE                            Hud_Secs:				; XREF: Hud_ChkTime
0001D5FE 45F9 0001 D5EC             		lea	(Hud_10).l,a2
0001D604 7C01                       		moveq	#1,d6
0001D606                            
0001D606                            loc_1C9BA:
0001D606 7800                       		moveq	#0,d4
0001D608 43FA 0000                  		lea	Art_Hud(pc),a1
0001D60C                            
0001D60C                            Hud_TimeLoop:
0001D60C 7400                       		moveq	#0,d2
0001D60E 261A                       		move.l	(a2)+,d3
0001D610                            
0001D610                            loc_1C9C4:
0001D610 9283                       		sub.l	d3,d1
0001D612 6500                       		bcs.s	loc_1C9CC
0001D614 5242                       		addq.w	#1,d2
0001D616 60F8                       		bra.s	loc_1C9C4
0001D618                            ; ===========================================================================
0001D618                            
0001D618                            loc_1C9CC:
0001D618 D283                       		add.l	d3,d1
0001D61A 4A42                       		tst.w	d2
0001D61C 6700                       		beq.s	loc_1C9D6
0001D61E 383C 0001                  		move.w	#1,d4
0001D622                            
0001D622                            loc_1C9D6:
0001D622 ED4A                       		lsl.w	#6,d2
0001D624 2D40 0004                  		move.l	d0,4(a6)
0001D628 47F1 2000                  		lea	(a1,d2.w),a3
0001D62C 2C9B                       		move.l	(a3)+,(a6)
0001D62E 2C9B                       		move.l	(a3)+,(a6)
0001D630 2C9B                       		move.l	(a3)+,(a6)
0001D632 2C9B                       		move.l	(a3)+,(a6)
0001D634 2C9B                       		move.l	(a3)+,(a6)
0001D636 2C9B                       		move.l	(a3)+,(a6)
0001D638 2C9B                       		move.l	(a3)+,(a6)
0001D63A 2C9B                       		move.l	(a3)+,(a6)
0001D63C 2C9B                       		move.l	(a3)+,(a6)
0001D63E 2C9B                       		move.l	(a3)+,(a6)
0001D640 2C9B                       		move.l	(a3)+,(a6)
0001D642 2C9B                       		move.l	(a3)+,(a6)
0001D644 2C9B                       		move.l	(a3)+,(a6)
0001D646 2C9B                       		move.l	(a3)+,(a6)
0001D648 2C9B                       		move.l	(a3)+,(a6)
0001D64A 2C9B                       		move.l	(a3)+,(a6)
0001D64C 0680 0040 0000             		addi.l	#$400000,d0
0001D652 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D656                            
0001D656 4E75                       		rts	
0001D658                            ; End of function Hud_Secs
0001D658                            
0001D658                            ; ---------------------------------------------------------------------------
0001D658                            ; Subroutine to	load time/ring bonus numbers patterns
0001D658                            ; ---------------------------------------------------------------------------
0001D658                            
0001D658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D658                            
0001D658                            
0001D658                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D658 45F9 0001 D5E4             		lea	(Hud_1000).l,a2
0001D65E 7C03                       		moveq	#3,d6
0001D660 7800                       		moveq	#0,d4
0001D662 43FA 0000                  		lea	Art_Hud(pc),a1
0001D666                            
0001D666                            Hud_BonusLoop:
0001D666 7400                       		moveq	#0,d2
0001D668 261A                       		move.l	(a2)+,d3
0001D66A                            
0001D66A                            loc_1CA1E:
0001D66A 9283                       		sub.l	d3,d1
0001D66C 6500                       		bcs.s	loc_1CA26
0001D66E 5242                       		addq.w	#1,d2
0001D670 60F8                       		bra.s	loc_1CA1E
0001D672                            ; ===========================================================================
0001D672                            
0001D672                            loc_1CA26:
0001D672 D283                       		add.l	d3,d1
0001D674 4A42                       		tst.w	d2
0001D676 6700                       		beq.s	loc_1CA30
0001D678 383C 0001                  		move.w	#1,d4
0001D67C                            
0001D67C                            loc_1CA30:
0001D67C 4A44                       		tst.w	d4
0001D67E 6700                       		beq.s	Hud_ClrBonus
0001D680 ED4A                       		lsl.w	#6,d2
0001D682 47F1 2000                  		lea	(a1,d2.w),a3
0001D686 2C9B                       		move.l	(a3)+,(a6)
0001D688 2C9B                       		move.l	(a3)+,(a6)
0001D68A 2C9B                       		move.l	(a3)+,(a6)
0001D68C 2C9B                       		move.l	(a3)+,(a6)
0001D68E 2C9B                       		move.l	(a3)+,(a6)
0001D690 2C9B                       		move.l	(a3)+,(a6)
0001D692 2C9B                       		move.l	(a3)+,(a6)
0001D694 2C9B                       		move.l	(a3)+,(a6)
0001D696 2C9B                       		move.l	(a3)+,(a6)
0001D698 2C9B                       		move.l	(a3)+,(a6)
0001D69A 2C9B                       		move.l	(a3)+,(a6)
0001D69C 2C9B                       		move.l	(a3)+,(a6)
0001D69E 2C9B                       		move.l	(a3)+,(a6)
0001D6A0 2C9B                       		move.l	(a3)+,(a6)
0001D6A2 2C9B                       		move.l	(a3)+,(a6)
0001D6A4 2C9B                       		move.l	(a3)+,(a6)
0001D6A6                            
0001D6A6                            loc_1CA5A:
0001D6A6 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D6AA                            
0001D6AA 4E75                       		rts	
0001D6AC                            ; ===========================================================================
0001D6AC                            
0001D6AC                            Hud_ClrBonus:
0001D6AC 7A0F                       		moveq	#$F,d5
0001D6AE                            
0001D6AE                            Hud_ClrBonusLoop:
0001D6AE 2CBC 0000 0000             		move.l	#0,(a6)
0001D6B4 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D6B8                            
0001D6B8 60EC                       		bra.s	loc_1CA5A
0001D6BA                            ; End of function Hud_TimeRingBonus
0001D6BA                            
0001D6BA                            ; ---------------------------------------------------------------------------
0001D6BA                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D6BA                            ; ---------------------------------------------------------------------------
0001D6BA                            
0001D6BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6BA                            
0001D6BA                            
0001D6BA                            Hud_Lives:				; XREF: Hud_ChkLives
0001D6BA 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D6C0 7200                       		moveq	#0,d1
0001D6C2 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D6C6 45F9 0001 D5EC             		lea	(Hud_10).l,a2
0001D6CC 7C01                       		moveq	#1,d6
0001D6CE 7800                       		moveq	#0,d4
0001D6D0 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D6D4                            
0001D6D4                            Hud_LivesLoop:
0001D6D4 2D40 0004                  		move.l	d0,4(a6)
0001D6D8 7400                       		moveq	#0,d2
0001D6DA 261A                       		move.l	(a2)+,d3
0001D6DC                            
0001D6DC                            loc_1CA90:
0001D6DC 9283                       		sub.l	d3,d1
0001D6DE 6500                       		bcs.s	loc_1CA98
0001D6E0 5242                       		addq.w	#1,d2
0001D6E2 60F8                       		bra.s	loc_1CA90
0001D6E4                            ; ===========================================================================
0001D6E4                            
0001D6E4                            loc_1CA98:
0001D6E4 D283                       		add.l	d3,d1
0001D6E6 4A42                       		tst.w	d2
0001D6E8 6700                       		beq.s	loc_1CAA2
0001D6EA 383C 0001                  		move.w	#1,d4
0001D6EE                            
0001D6EE                            loc_1CAA2:
0001D6EE 4A44                       		tst.w	d4
0001D6F0 6700                       		beq.s	Hud_ClrLives
0001D6F2                            
0001D6F2                            loc_1CAA6:
0001D6F2 EB4A                       		lsl.w	#5,d2
0001D6F4 47F1 2000                  		lea	(a1,d2.w),a3
0001D6F8 2C9B                       		move.l	(a3)+,(a6)
0001D6FA 2C9B                       		move.l	(a3)+,(a6)
0001D6FC 2C9B                       		move.l	(a3)+,(a6)
0001D6FE 2C9B                       		move.l	(a3)+,(a6)
0001D700 2C9B                       		move.l	(a3)+,(a6)
0001D702 2C9B                       		move.l	(a3)+,(a6)
0001D704 2C9B                       		move.l	(a3)+,(a6)
0001D706 2C9B                       		move.l	(a3)+,(a6)
0001D708                            
0001D708                            loc_1CABC:
0001D708 0680 0040 0000             		addi.l	#$400000,d0
0001D70E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D712                            
0001D712 4E75                       		rts	
0001D714                            ; ===========================================================================
0001D714                            
0001D714                            Hud_ClrLives:
0001D714 4A46                       		tst.w	d6
0001D716 67DA                       		beq.s	loc_1CAA6
0001D718 7A07                       		moveq	#7,d5
0001D71A                            
0001D71A                            Hud_ClrLivesLoop:
0001D71A 2CBC 0000 0000             		move.l	#0,(a6)
0001D720 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D724 60E2                       		bra.s	loc_1CABC
0001D726                            ; End of function Hud_Lives
0001D726                            
0001D726                            ; ===========================================================================
0001D726                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DA26                            		even
0001DA26                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DB66                            		even
0001DB66                            ; ===========================================================================
0001DB66                            ; ---------------------------------------------------------------------------
0001DB66                            ; When debug mode is currently in use
0001DB66                            ; ---------------------------------------------------------------------------
0001DB66                            
0001DB66                            DebugMode:				; XREF: Obj01; Obj09
0001DB66 7000                       		moveq	#0,d0
0001DB68 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DB6C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DB70 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DB74                            ; ===========================================================================
0001DB74 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DB76 0000                       		dc.w Debug_Skip-Debug_Index
0001DB78                            ; ===========================================================================
0001DB78                            
0001DB78                            Debug_Main:				; XREF: Debug_Index
0001DB78 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DB7C 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DB82 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DB88 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DB8E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DB94 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DB9A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DBA0 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DBA6 117C 0000 001A             		move.b	#0,$1A(a0)
0001DBAC 117C 0000 001C             		move.b	#0,$1C(a0)
0001DBB2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DBB8 6600                       		bne.s	Debug_Zone	; if not, branch
0001DBBA 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DBC0 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DBC6 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DBC8 6000                       		bra.s	Debug_UseList
0001DBCA                            ; ===========================================================================
0001DBCA                            
0001DBCA                            Debug_Zone:
0001DBCA 7000                       		moveq	#0,d0
0001DBCC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DBD0                            
0001DBD0                            Debug_UseList:
0001DBD0 45F9 0000 0000             		lea	(DebugList).l,a2
0001DBD6 D040                       		add.w	d0,d0
0001DBD8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DBDC 3C1A                       		move.w	(a2)+,d6
0001DBDE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DBE2 6200                       		bhi.s	loc_1CF9E
0001DBE4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DBEA                            
0001DBEA                            loc_1CF9E:
0001DBEA 6100 0000                  		bsr.w	Debug_ShowItem
0001DBEE 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DBF4 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DBFA                            
0001DBFA                            Debug_Skip:				; XREF: Debug_Index
0001DBFA 7006                       		moveq	#6,d0
0001DBFC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DC02 6700                       		beq.s	loc_1CFBE
0001DC04 7000                       		moveq	#0,d0
0001DC06 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DC0A                            
0001DC0A                            loc_1CFBE:
0001DC0A 45F9 0000 0000             		lea	(DebugList).l,a2
0001DC10 D040                       		add.w	d0,d0
0001DC12 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DC16 3C1A                       		move.w	(a2)+,d6
0001DC18 6100 0000                  		bsr.w	Debug_Control
0001DC1C 4EF9 0000 DD82             		jmp	DisplaySprite
0001DC22                            
0001DC22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC22                            
0001DC22                            
0001DC22                            Debug_Control:
0001DC22 7800                       		moveq	#0,d4
0001DC24 323C 0001                  		move.w	#1,d1
0001DC28 1838 F605                  		move.b	($FFFFF605).w,d4
0001DC2C 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DC30 6600                       		bne.s	loc_1D018	; if yes, branch
0001DC32 1038 F604                  		move.b	($FFFFF604).w,d0
0001DC36 0240 000F                  		andi.w	#$F,d0
0001DC3A 6600                       		bne.s	loc_1D000
0001DC3C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DC42 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DC48 6000 0000                  		bra.w	Debug_BackItem
0001DC4C                            ; ===========================================================================
0001DC4C                            
0001DC4C                            loc_1D000:
0001DC4C 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DC50 6600                       		bne.s	loc_1D01C
0001DC52 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DC58 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DC5C 6600                       		bne.s	loc_1D018
0001DC5E 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DC64                            
0001DC64                            loc_1D018:
0001DC64 1838 F604                  		move.b	($FFFFF604).w,d4
0001DC68                            
0001DC68                            loc_1D01C:
0001DC68 7200                       		moveq	#0,d1
0001DC6A 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DC6E 5241                       		addq.w	#1,d1
0001DC70 4841                       		swap	d1
0001DC72 E881                       		asr.l	#4,d1
0001DC74 2428 000C                  		move.l	$C(a0),d2
0001DC78 2628 0008                  		move.l	8(a0),d3
0001DC7C 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DC80 6700                       		beq.s	loc_1D03C	; if not, branch
0001DC82 9481                       		sub.l	d1,d2
0001DC84 6400                       		bcc.s	loc_1D03C
0001DC86 7400                       		moveq	#0,d2
0001DC88                            
0001DC88                            loc_1D03C:
0001DC88 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DC8C 6700                       		beq.s	loc_1D052	; if not, branch
0001DC8E D481                       		add.l	d1,d2
0001DC90 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DC96 6500                       		bcs.s	loc_1D052
0001DC98 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DC9E                            
0001DC9E                            loc_1D052:
0001DC9E 0804 0002                  		btst	#2,d4
0001DCA2 6700                       		beq.s	loc_1D05E
0001DCA4 9681                       		sub.l	d1,d3
0001DCA6 6400                       		bcc.s	loc_1D05E
0001DCA8 7600                       		moveq	#0,d3
0001DCAA                            
0001DCAA                            loc_1D05E:
0001DCAA 0804 0003                  		btst	#3,d4
0001DCAE 6700                       		beq.s	loc_1D066
0001DCB0 D681                       		add.l	d1,d3
0001DCB2                            
0001DCB2                            loc_1D066:
0001DCB2 2142 000C                  		move.l	d2,$C(a0)
0001DCB6 2143 0008                  		move.l	d3,8(a0)
0001DCBA                            
0001DCBA                            Debug_BackItem:
0001DCBA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DCC0 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DCC2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DCC8 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DCCA 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DCCE 6400                       		bcc.s	Debug_NoLoop
0001DCD0 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DCD4 6000                       		bra.s	Debug_NoLoop
0001DCD6                            ; ===========================================================================
0001DCD6                            
0001DCD6                            Debug_NextItem:
0001DCD6 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DCDC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DCDE 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DCE2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DCE6 6200                       		bhi.s	Debug_NoLoop
0001DCE8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DCEE                            
0001DCEE                            Debug_NoLoop:
0001DCEE 6000 0000                  		bra.w	Debug_ShowItem
0001DCF2                            ; ===========================================================================
0001DCF2                            
0001DCF2                            Debug_MakeItem:
0001DCF2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DCF8 6700                       		beq.s	Debug_Exit	; if not, branch
0001DCFA 4EB9 0000 E20E             		jsr	SingleObjLoad
0001DD00 6600                       		bne.s	Debug_Exit
0001DD02 3368 0008 0008             		move.w	8(a0),8(a1)
0001DD08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DD0E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DD12 1368 0001 0001             		move.b	1(a0),1(a1)
0001DD18 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DD1E 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DD24 7000                       		moveq	#0,d0
0001DD26 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD2A E748                       		lsl.w	#3,d0
0001DD2C 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DD32 4E75                       		rts	
0001DD34                            ; ===========================================================================
0001DD34                            
0001DD34                            Debug_Exit:
0001DD34 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DD3A 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DD3C 7000                       		moveq	#0,d0
0001DD3E 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DD42 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD4A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD50 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DD54 3140 000A                  		move.w	d0,$A(a0)
0001DD58 3140 000E                  		move.w	d0,$E(a0)
0001DD5C 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DD62 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DD68 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DD6E 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DD70 4278 F780                  		clr.w	($FFFFF780).w
0001DD74 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DD7A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD82 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD88 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DD8E 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DD94 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DD9A                            
0001DD9A                            Debug_DoNothing:
0001DD9A 4E75                       		rts	
0001DD9C                            ; End of function Debug_Control
0001DD9C                            
0001DD9C                            
0001DD9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD9C                            
0001DD9C                            
0001DD9C                            Debug_ShowItem:				; XREF: Debug_Main
0001DD9C 7000                       		moveq	#0,d0
0001DD9E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DDA2 E748                       		lsl.w	#3,d0
0001DDA4 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DDAA 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DDB0 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DDB6 4E75                       		rts	
0001DDB8                            ; End of function Debug_ShowItem
0001DDB8                            
0001DDB8                            ; ===========================================================================
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8                            ; Debug	list pointers
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8                            DebugList:
0001DDB8                            	include "_inc\Debug list pointers.asm"
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8                            ; Debug	list pointers
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8 0000                       	dc.w Debug_GHZ-DebugList
0001DDBA 0000                       	dc.w Debug_LZ-DebugList
0001DDBC 0000                       	dc.w Debug_MZ-DebugList
0001DDBE 0000                       	dc.w Debug_SLZ-DebugList
0001DDC0 0000                       	dc.w Debug_SYZ-DebugList
0001DDC2 0000                       	dc.w Debug_SBZ-DebugList
0001DDC4 0000                       	dc.w Debug_Ending-DebugList
0001DDC4 0000                       	dc.w Debug_Ending-DebugList
0001DDC6                            
0001DDC6                            ; ---------------------------------------------------------------------------
0001DDC6                            ; Debug	list - Green Hill
0001DDC6                            ; ---------------------------------------------------------------------------
0001DDC6                            Debug_GHZ:
0001DDC6                            	include "_inc\Debug list - GHZ.asm"
0001DDC6                            ; ---------------------------------------------------------------------------
0001DDC6                            ; Debug	list - Green Hill
0001DDC6                            ; ---------------------------------------------------------------------------
0001DDC6 0010                       	dc.w $10			; number of items in list
0001DDC8 2500 A6E2                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DDCC 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001DDD0 2600 AD0A                  	dc.l Map_obj26+$26000000
0001DDD4 0000 0680                  	dc.b 0,	0, 6, $80
0001DDD8 1F00 9EA0                  	dc.l Map_obj1F+$1F000000
0001DDDC 0000 0400                  	dc.b 0,	0, 4, 0
0001DDE0 2200 A180                  	dc.l Map_obj22+$22000000
0001DDE4 0000 0444                  	dc.b 0,	0, 4, $44
0001DDE8 2B00 B32C                  	dc.l Map_obj2B+$2B000000
0001DDEC 0000 047B                  	dc.b 0,	0, 4, $7B
0001DDF0 3600 D76A                  	dc.l Map_obj36+$36000000
0001DDF4 0000 051B                  	dc.b 0,	0, 5, $1B
0001DDF8 1800 889E                  	dc.l Map_obj18+$18000000
0001DDFC 0000 4000                  	dc.b 0,	0, $40,	0
0001DE00 3B00 D890                  	dc.l Map_obj3B+$3B000000
0001DE04 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DE08 4000 FF1E                  	dc.l Map_obj40+$40000000
0001DE0C 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DE10 4100 E49C                  	dc.l Map_obj41+$41000000
0001DE14 0000 0523                  	dc.b 0,	0, 5, $23
0001DE18 4200 E6C2                  	dc.l Map_obj42+$42000000
0001DE1C 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DE20 4400 E9D0                  	dc.l Map_obj44+$44000000
0001DE24 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DE28 1900 890C                  	dc.l Map_obj48+$19000000
0001DE2C 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DE30 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DE34 0100 0571                  	dc.w $100, lamppostart
0001DE38 4B00 A722                  	dc.l Map_obj4B+$4B000000
0001DE3C 0000 222D                  	dc.w 0, ssringart+$2000
0001DE40 7D01 7D7A                  	dc.l Map_obj7D+$7D000000
0001DE44 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DE48                            	even
0001DE48                            	even
0001DE48                            
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48                            ; Debug	list - Labyrinth
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48                            Debug_LZ:
0001DE48                            	include "_inc\Debug list - LZ.asm"
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48                            ; Debug	list - Labyrinth
0001DE48                            ; ---------------------------------------------------------------------------
0001DE48 0019                       	dc.w $19
0001DE4A 2500 A6E2                  	dc.l Map_obj25+$25000000
0001DE4E 0000 26BA                  	dc.w 0, ringart+$2000
0001DE52 2600 AD0A                  	dc.l Map_obj26+$26000000
0001DE56 0000 0680                  	dc.b 0,	0, 6, $80
0001DE5A 4100 E49C                  	dc.l Map_obj41+$41000000
0001DE5E 0000 0523                  	dc.b 0,	0, 5, $23
0001DE62 2C00 B3D2                  	dc.l Map_obj2C+$2C000000
0001DE66 0800 2486                  	dc.b 8,	0, $24,	$86
0001DE6A 2D00 B5BE                  	dc.l Map_obj2D+$2D000000
0001DE6E 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DE72 1601 2706                  	dc.l Map_obj16+$16000000
0001DE76 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DE7A 1601 2706                  	dc.l Map_obj16+$16000000
0001DE7E 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DE82 3300 CA48                  	dc.l Map_obj33+$33000000
0001DE86 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE8A 3200 C608                  	dc.l Map_obj32+$32000000
0001DE8E 0000 0513                  	dc.b 0,	0, 5, $13
0001DE92 3600 D76A                  	dc.l Map_obj36+$36000000
0001DE96 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE9A 5201 0828                  	dc.l Map_obj52a+$52000000
0001DE9E 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DEA2 6101 292E                  	dc.l Map_obj61+$61000000
0001DEA6 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DEAA 6101 292E                  	dc.l Map_obj61+$61000000
0001DEAE 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DEB2 6101 292E                  	dc.l Map_obj61+$61000000
0001DEB6 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DEBA 6201 2A82                  	dc.l Map_obj62+$62000000
0001DEBE 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DEC2 6101 292E                  	dc.l Map_obj61+$61000000
0001DEC6 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DECA 6101 292E                  	dc.l Map_obj61+$61000000
0001DECE 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DED2 6301 2DE4                  	dc.l Map_obj63+$63000000
0001DED6 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DEDA 6001 2650                  	dc.l Map_obj60+$60000000
0001DEDE 0000 0467                  	dc.b 0,	0, 4, $67
0001DEE2 6401 312A                  	dc.l Map_obj64+$64000000
0001DEE6 8413 8348                  	dc.b $84, $13, $83, $48
0001DEEA 6501 32B2                  	dc.l Map_obj65+$65000000
0001DEEE 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DEF2 6501 32B2                  	dc.l Map_obj65+$65000000
0001DEF6 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DEFA 0B01 1AA0                  	dc.l Map_obj0B+$B000000
0001DEFE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DF02 0C01 1B70                  	dc.l Map_obj0C+$C000000
0001DF06 0200 4328                  	dc.b 2,	0, $43,	$28
0001DF0A 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DF0E 0100 0571                  	dc.w $100, lamppostart
0001DF12                            	even
0001DF12                            	even
0001DF12                            
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            ; Debug	list - Marble
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            Debug_MZ:
0001DF12                            	include "_inc\Debug list - MZ.asm"
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            ; Debug	list - Marble
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12 0012                       	dc.w $12
0001DF14 2500 A6E2                  	dc.l Map_obj25+$25000000
0001DF18 0000 26BA                  	dc.w 0, ringart+$2000
0001DF1C 2600 AD0A                  	dc.l Map_obj26+$26000000
0001DF20 0000 0680                  	dc.b 0,	0, 6, $80
0001DF24 2200 A180                  	dc.l Map_obj22+$22000000
0001DF28 0000 0444                  	dc.b 0,	0, 4, $44
0001DF2C 3600 D76A                  	dc.l Map_obj36+$36000000
0001DF30 0000 051B                  	dc.b 0,	0, 5, $1B
0001DF34 4100 E49C                  	dc.l Map_obj41+$41000000
0001DF38 0000 0523                  	dc.b 0,	0, 5, $23
0001DF3C 1300 BACC                  	dc.l Map_obj14+$13000000
0001DF40 0000 0345                  	dc.b 0,	0, 3, $45
0001DF44 4600 F082                  	dc.l Map_obj46+$46000000
0001DF48 0000 4000                  	dc.b 0,	0, $40,	0
0001DF4C 4C00 F9CA                  	dc.l Map_obj4C+$4C000000
0001DF50 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF54 4E00 FCAE                  	dc.l Map_obj4E+$4E000000
0001DF58 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF5C 3300 CA48                  	dc.l Map_obj33+$33000000
0001DF60 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF64 5001 00AC                  	dc.l Map_obj50+$50000000
0001DF68 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DF6C 5101 055C                  	dc.l Map_obj51+$51000000
0001DF70 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF74 5201 07D2                  	dc.l Map_obj52+$52000000
0001DF78 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DF7C 5300 8EA4                  	dc.l Map_obj53+$53000000
0001DF80 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DF84 5400 F990                  	dc.l Map_obj54+$54000000
0001DF88 0000 8680                  	dc.b 0,	0, $86,	$80
0001DF8C 5501 09C6                  	dc.l Map_obj55+$55000000
0001DF90 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DF94 7801 78A4                  	dc.l Map_obj78+$78000000
0001DF98 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF9C 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DFA0 0100 0571                  	dc.w $100, lamppostart
0001DFA4                            	even
0001DFA4                            	even
0001DFA4                            
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4                            ; Debug	list - Star Light
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4                            Debug_SLZ:
0001DFA4                            	include "_inc\Debug list - SLZ.asm"
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4                            ; Debug	list - Star Light
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4 000F                       	dc.w $F
0001DFA6 2500 A6E2                  	dc.l Map_obj25+$25000000
0001DFAA 0000 26BA                  	dc.w 0, ringart+$2000
0001DFAE 2600 AD0A                  	dc.l Map_obj26+$26000000
0001DFB2 0000 0680                  	dc.b 0,	0, 6, $80
0001DFB6 5901 14C8                  	dc.l Map_obj59+$59000000
0001DFBA 0000 4000                  	dc.b 0,	0, $40,	0
0001DFBE 5300 8EA4                  	dc.l Map_obj53+$53000000
0001DFC2 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DFC6 1800 88FC                  	dc.l Map_obj18b+$18000000
0001DFCA 0000 4000                  	dc.b 0,	0, $40,	0
0001DFCE 5A01 1602                  	dc.l Map_obj5A+$5A000000
0001DFD2 0000 4000                  	dc.b 0,	0, $40,	0
0001DFD6 5B01 17BA                  	dc.l Map_obj5B+$5B000000
0001DFDA 0000 4000                  	dc.b 0,	0, $40,	0
0001DFDE 5D01 1D8A                  	dc.l Map_obj5D+$5D000000
0001DFE2 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DFE6 5E01 211C                  	dc.l Map_obj5E+$5E000000
0001DFEA 0000 0374                  	dc.b 0,	0, 3, $74
0001DFEE 4100 E49C                  	dc.l Map_obj41+$41000000
0001DFF2 0000 0523                  	dc.b 0,	0, 5, $23
0001DFF6 1300 BACC                  	dc.l Map_obj14+$13000000
0001DFFA 0000 0480                  	dc.b 0,	0, 4, $80
0001DFFE 1C00 8FB4                  	dc.l Map_obj1C+$1C000000
0001E002 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E006 5F01 239A                  	dc.l Map_obj5F+$5F000000
0001E00A 0000 0400                  	dc.b 0,	0, 4, 0
0001E00E 6001 2650                  	dc.l Map_obj60+$60000000
0001E012 0000 2429                  	dc.b 0,	0, $24,	$29
0001E016 7901 7C2A                  	dc.l Map_obj79+$79000000
0001E01A 0100 0571                  	dc.w $100, lamppostart
0001E01E                            	even
0001E01E                            	even
0001E01E                            
0001E01E                            ; ---------------------------------------------------------------------------
0001E01E                            ; Debug	list - Spring Yard
0001E01E                            ; ---------------------------------------------------------------------------
0001E01E                            Debug_SYZ:
0001E01E                            	include "_inc\Debug list - SYZ.asm"
0001E01E                            ; ---------------------------------------------------------------------------
0001E01E                            ; Debug	list - Spring Yard
0001E01E                            ; ---------------------------------------------------------------------------
0001E01E 000F                       	dc.w $F
0001E020 2500 A6E2                  	dc.l Map_obj25+$25000000
0001E024 0000 26BA                  	dc.w 0, ringart+$2000
0001E028 2600 AD0A                  	dc.l Map_obj26+$26000000
0001E02C 0000 0680                  	dc.b 0,	0, 6, $80
0001E030 3600 D76A                  	dc.l Map_obj36+$36000000
0001E034 0000 051B                  	dc.b 0,	0, 5, $1B
0001E038 4100 E49C                  	dc.l Map_obj41+$41000000
0001E03C 0000 0523                  	dc.b 0,	0, 5, $23
0001E040 4300 E922                  	dc.l Map_obj43+$43000000
0001E044 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E048 1200 F100                  	dc.l Map_obj12+$12000000
0001E04C 0000 0000                  	dc.b 0,	0, 0, 0
0001E050 4700 F288                  	dc.l Map_obj47+$47000000
0001E054 0000 0380                  	dc.b 0,	0, 3, $80
0001E058 1F00 9EA0                  	dc.l Map_obj1F+$1F000000
0001E05C 0000 0400                  	dc.b 0,	0, 4, 0
0001E060 2200 A180                  	dc.l Map_obj22+$22000000
0001E064 0000 0444                  	dc.b 0,	0, 4, $44
0001E068 5001 00AC                  	dc.l Map_obj50+$50000000
0001E06C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E070 1800 88EA                  	dc.l Map_obj18a+$18000000
0001E074 0000 4000                  	dc.b 0,	0, $40,	0
0001E078 5601 0E88                  	dc.l Map_obj56+$56000000
0001E07C 0000 4000                  	dc.b 0,	0, $40,	0
0001E080 3200 C608                  	dc.l Map_obj32+$32000000
0001E084 0000 0513                  	dc.b 0,	0, 5, $13
0001E088 7801 78A4                  	dc.l Map_obj78+$78000000
0001E08C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E090 7901 7C2A                  	dc.l Map_obj79+$79000000
0001E094 0100 0571                  	dc.w $100, lamppostart
0001E098                            	even
0001E098                            	even
0001E098                            
0001E098                            ; ---------------------------------------------------------------------------
0001E098                            ; Debug	list - Scrap Brain
0001E098                            ; ---------------------------------------------------------------------------
0001E098                            Debug_SBZ:
0001E098                            	include "_inc\Debug list - SBZ.asm"
0001E098                            ; ---------------------------------------------------------------------------
0001E098                            ; Debug	list - Scrap Brain
0001E098                            ; ---------------------------------------------------------------------------
0001E098 001D                       	dc.w $1D
0001E09A 2500 A6E2                  	dc.l Map_obj25+$25000000
0001E09E 0000 26BA                  	dc.w 0, ringart+$2000
0001E0A2 2600 AD0A                  	dc.l Map_obj26+$26000000
0001E0A6 0000 0680                  	dc.b 0,	0, 6, $80
0001E0AA 5F01 239A                  	dc.l Map_obj5F+$5F000000
0001E0AE 0000 0400                  	dc.b 0,	0, 4, 0
0001E0B2 6001 2650                  	dc.l Map_obj60+$60000000
0001E0B6 0000 0429                  	dc.b 0,	0, 4, $29
0001E0BA 7801 78A4                  	dc.l Map_obj78+$78000000
0001E0BE 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E0C2 1501 1224                  	dc.l Map_obj15b+$15000000
0001E0C6 0702 4391                  	dc.b 7,	2, $43,	$91
0001E0CA 6701 61C8                  	dc.l Map_obj67+$67000000
0001E0CE E000 C344                  	dc.b $E0, 0, $C3, $44
0001E0D2 5201 07D2                  	dc.l Map_obj52+$52000000
0001E0D6 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E0DA 3200 C608                  	dc.l Map_obj32+$32000000
0001E0DE 0000 0513                  	dc.b 0,	0, 5, $13
0001E0E2 6901 6422                  	dc.l Map_obj69+$69000000
0001E0E6 0300 4492                  	dc.b 3,	0, $44,	$92
0001E0EA 6901 647C                  	dc.l Map_obj69a+$69000000
0001E0EE 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E0F2 6A01 66DA                  	dc.l Map_obj6A+$6A000000
0001E0F6 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E0FA 5300 8EA4                  	dc.l Map_obj53+$53000000
0001E0FE 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E102 5201 07D2                  	dc.l Map_obj52+$52000000
0001E106 3903 4460                  	dc.b $39, 3, $44, $60
0001E10A 6B01 6AAA                  	dc.l Map_obj6B+$6B000000
0001E10E 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E112 2A00 914A                  	dc.l Map_obj2A+$2A000000
0001E116 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E11A 6B01 6AAA                  	dc.l Map_obj6B+$6B000000
0001E11E 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E122 6A01 66DA                  	dc.l Map_obj6A+$6A000000
0001E126 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E12A 6B01 6AAA                  	dc.l Map_obj6B+$6B000000
0001E12E 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E132 6A01 66DA                  	dc.l Map_obj6A+$6A000000
0001E136 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E13A 6B01 6AAA                  	dc.l Map_obj6B+$6B000000
0001E13E 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E142 6C01 6C6C                  	dc.l Map_obj6C+$6C000000
0001E146 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E14A 6D00 ED72                  	dc.l Map_obj6D+$6D000000
0001E14E 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E152 6D00 ED72                  	dc.l Map_obj6D+$6D000000
0001E156 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E15A 6E01 6D22                  	dc.l Map_obj6E+$6E000000
0001E15E 0400 047E                  	dc.b 4,	0, 4, $7E
0001E162 7001 7168                  	dc.l Map_obj70+$70000000
0001E166 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E16A 7101 1C30                  	dc.l Map_obj71+$71000000
0001E16E 1100 8680                  	dc.b $11, 0, $86, $80
0001E172 1E00 95B8                  	dc.l Map_obj1E+$1E000000
0001E176 0400 2302                  	dc.b 4,	0, $23,	2
0001E17A 7901 7C2A                  	dc.l Map_obj79+$79000000
0001E17E 0100 0571                  	dc.w $100, lamppostart
0001E182                            	even
0001E182                            	even
0001E182                            
0001E182                            ; ---------------------------------------------------------------------------
0001E182                            ; Debug	list - ending sequence / special stage
0001E182                            ; ---------------------------------------------------------------------------
0001E182                            Debug_Ending:
0001E182                            	include "_inc\Debug list - Ending and SS.asm"
0001E182                            ; ---------------------------------------------------------------------------
0001E182                            ; Debug	list - ending sequence / special stage
0001E182                            ; ---------------------------------------------------------------------------
0001E182 000D                       	dc.w $D
0001E184 2500 A6E2                  	dc.l Map_obj25+$25000000
0001E188 0000 26BA                  	dc.w 0, ringart+$2000
0001E18C 4700 F288                  	dc.l Map_obj47+$47000000
0001E190 0000 0380                  	dc.b 0,	0, 3, $80
0001E194 2800 9BD2                  	dc.l Map_obj28a+$28000000
0001E198 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E19C 2800 9BD2                  	dc.l Map_obj28a+$28000000
0001E1A0 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E1A4 2800 9BD2                  	dc.l Map_obj28a+$28000000
0001E1A8 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E1AC 2800 9BBA                  	dc.l Map_obj28+$28000000
0001E1B0 0D00 0553                  	dc.b $D, 0, 5, $53
0001E1B4 2800 9BBA                  	dc.l Map_obj28+$28000000
0001E1B8 0E00 0553                  	dc.b $E, 0, 5, $53
0001E1BC 2800 9BBA                  	dc.l Map_obj28+$28000000
0001E1C0 0F00 0573                  	dc.b $F, 0, 5, $73
0001E1C4 2800 9BBA                  	dc.l Map_obj28+$28000000
0001E1C8 1000 0573                  	dc.b $10, 0, 5,	$73
0001E1CC 2800 9BD2                  	dc.l Map_obj28a+$28000000
0001E1D0 1100 0585                  	dc.b $11, 0, 5,	$85
0001E1D4 2800 9BEA                  	dc.l Map_obj28b+$28000000
0001E1D8 1200 0593                  	dc.b $12, 0, 5,	$93
0001E1DC 2800 9BD2                  	dc.l Map_obj28a+$28000000
0001E1E0 1300 0565                  	dc.b $13, 0, 5,	$65
0001E1E4 2800 9BEA                  	dc.l Map_obj28b+$28000000
0001E1E8 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E1EC                            	even
0001E1EC                            	even
0001E1EC                            
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            ; Main level load blocks
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            MainLoadBlocks:
0001E1EC                            	include "_inc\Main level load blocks.asm"
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            ; Main level load blocks
0001E1EC                            ;
0001E1EC                            ; ===FORMAT===
0001E1EC                            ; level	patterns + (1st	PLC num	* 10^6)
0001E1EC                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E1EC                            ; 256x256 mappings
0001E1EC                            ; blank, music (unused), pal index (unused), pal index
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001E1F0 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001E1F4 0000 0000                  	dc.l Blk256_GHZ
0001E1F8 0081 0404                  	dc.b 0,	$81, 4,	4
0001E1FC 0000 0000                  	dc.l Nem_LZ+$6000000
0001E200 0000 0000                  	dc.l Blk16_LZ+$7000000
0001E204 0000 0000                  	dc.l Blk256_LZ
0001E208 0082 0505                  	dc.b 0,	$82, 5,	5
0001E20C 0000 0000                  	dc.l Nem_MZ+$8000000
0001E210 0000 0000                  	dc.l Blk16_MZ+$9000000
0001E214 0000 0000                  	dc.l Blk256_MZ
0001E218 0083 0606                  	dc.b 0,	$83, 6,	6
0001E21C 0000 0000                  	dc.l Nem_SLZ+$A000000
0001E220 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001E224 0000 0000                  	dc.l Blk256_SLZ
0001E228 0084 0707                  	dc.b 0,	$84, 7,	7
0001E22C 0000 0000                  	dc.l Nem_SYZ+$C000000
0001E230 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001E234 0000 0000                  	dc.l Blk256_SYZ
0001E238 0085 0808                  	dc.b 0,	$85, 8,	8
0001E23C 0000 0000                  	dc.l Nem_SBZ+$E000000
0001E240 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001E244 0000 0000                  	dc.l Blk256_SBZ
0001E248 0086 0909                  	dc.b 0,	$86, 9,	9
0001E24C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E250 0000 0000                  	dc.l Blk16_GHZ
0001E254 0000 0000                  	dc.l Blk256_GHZ
0001E258 0086 1313                  	dc.b 0,	$86, $13, $13
0001E25C                            	even
0001E25C                            	even
0001E25C                            
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ; Pattern load cues
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ArtLoadCues:
0001E25C                            	include "_inc\Pattern load cues.asm"
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ; Pattern load cues - index
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001E260 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001E264 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001E268 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E26C 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E270 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E274 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E278 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E27C 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001E280 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E284 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E288 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E28C 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E290 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E294 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E298 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C                            ; Pattern load cues - standard block 1
0001E29C                            ; ---------------------------------------------------------------------------
0001E29C 0002                       PLC_Main:	dc.w 2
0001E29E 0000 0000                  		dc.l Nem_Hud		; HUD
0001E2A2 D940                       		dc.w $D940
0001E2A4 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E2A8 FA80                       		dc.w $FA80
0001E2AA 0000 0000                  		dc.l Nem_Ring		; rings
0001E2AE D740                       		dc.w ringart*$20
0001E2B0                            ; ---------------------------------------------------------------------------
0001E2B0                            ; Pattern load cues - standard block 2
0001E2B0                            ; ---------------------------------------------------------------------------
0001E2B0 0002                       PLC_Main2:	dc.w 2
0001E2B2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E2B6 AE20                       		dc.w lamppostart*$20
0001E2B8 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E2BC AD00                       		dc.w pointsart*$20
0001E2BE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E2C2 D000                       		dc.w $D000
0001E2C4                            ; ---------------------------------------------------------------------------
0001E2C4                            ; Pattern load cues - explosion
0001E2C4                            ; ---------------------------------------------------------------------------
0001E2C4 0000                       PLC_Explode:	dc.w 0
0001E2C6 0000 0000                  		dc.l Nem_Explode	; explosion
0001E2CA B400                       		dc.w $B400
0001E2CC                            ; ---------------------------------------------------------------------------
0001E2CC                            ; Pattern load cues - game/time	over
0001E2CC                            ; ---------------------------------------------------------------------------
0001E2CC 0000                       PLC_GameOver:	dc.w 0
0001E2CE 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E2D2 ABC0                       		dc.w $ABC0
0001E2D4                            ; ---------------------------------------------------------------------------
0001E2D4                            ; Pattern load cues - Green Hill
0001E2D4                            ; ---------------------------------------------------------------------------
0001E2D4 000B                       PLC_GHZ:	dc.w $B
0001E2D6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2DA 0000                       		dc.w 0
0001E2DC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2E0 39A0                       		dc.w $39A0
0001E2E2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2E6 6B00                       		dc.w $6B00
0001E2E8 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E2EC 7A00                       		dc.w $7A00
0001E2EE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E2F2 8000                       		dc.w $8000
0001E2F4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E2F8 8880                       		dc.w $8880
0001E2FA 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E2FE 8F60                       		dc.w $8F60
0001E300 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E304 9360                       		dc.w $9360
0001E306 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E30A 9E00                       		dc.w $9E00
0001E30C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E310 A360                       		dc.w $A360
0001E312 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E316 A460                       		dc.w $A460
0001E318 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E31C A660                       		dc.w $A660
0001E31E 0005                       PLC_GHZ2:	dc.w 5
0001E320 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E324 7000                       		dc.w $7000
0001E326 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E32A 71C0                       		dc.w $71C0
0001E32C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E330 7300                       		dc.w $7300
0001E332 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E336 7540                       		dc.w $7540
0001E338 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E33C A1E0                       		dc.w $A1E0
0001E33E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E342 6980                       		dc.w $6980
0001E344                            ; ---------------------------------------------------------------------------
0001E344                            ; Pattern load cues - Labyrinth
0001E344                            ; ---------------------------------------------------------------------------
0001E344 000B                       PLC_LZ:		dc.w $B
0001E346 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E34A 0000                       		dc.w 0
0001E34C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E350 3C00                       		dc.w $3C00
0001E352 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E356 3E00                       		dc.w $3E00
0001E358 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E35C 4B20                       		dc.w $4B20
0001E35E 0000 0000                  		dc.l Nem_Water		; water	surface
0001E362 6000                       		dc.w $6000
0001E364 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E368 6200                       		dc.w $6200
0001E36A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E36E 6500                       		dc.w $6500
0001E370 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E374 6900                       		dc.w $6900
0001E376 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E37A 7780                       		dc.w $7780
0001E37C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E380 7880                       		dc.w $7880
0001E382 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E386 7980                       		dc.w $7980
0001E388 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E38C 94C0                       		dc.w $94C0
0001E38E 000C                       PLC_LZ2:	dc.w $C
0001E390 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E394 7BC0                       		dc.w $7BC0
0001E396 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E39A 7CC0                       		dc.w $7CC0
0001E39C 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E3A0 7EC0                       		dc.w $7EC0
0001E3A2 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E3A6 5D20                       		dc.w $5D20
0001E3A8 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E3AC 8800                       		dc.w $8800
0001E3AE 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E3B2 89E0                       		dc.w $89E0
0001E3B4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E3B8 8CE0                       		dc.w $8CE0
0001E3BA 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E3BE 90C0                       		dc.w $90C0
0001E3C0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3C4 A1E0                       		dc.w $A1E0
0001E3C6 0000 0000                  		dc.l Nem_Cork		; cork block
0001E3CA A000                       		dc.w $A000
0001E3CC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3D0 A360                       		dc.w $A360
0001E3D2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3D6 A460                       		dc.w $A460
0001E3D8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3DC A660                       		dc.w $A660
0001E3DE                            ; ---------------------------------------------------------------------------
0001E3DE                            ; Pattern load cues - Marble
0001E3DE                            ; ---------------------------------------------------------------------------
0001E3DE 0009                       PLC_MZ:		dc.w 9
0001E3E0 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E3E4 0000                       		dc.w 0
0001E3E6 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E3EA 6000                       		dc.w $6000
0001E3EC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E3F0 68A0                       		dc.w $68A0
0001E3F2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E3F6 7000                       		dc.w $7000
0001E3F8 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E3FC 71C0                       		dc.w $71C0
0001E3FE 0000 0000                  		dc.l Nem_Lava		; lava
0001E402 7500                       		dc.w $7500
0001E404 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E408 8880                       		dc.w $8880
0001E40A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E40E 8F60                       		dc.w $8F60
0001E410 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E414 9700                       		dc.w $9700
0001E416 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E41A 9FE0                       		dc.w $9FE0
0001E41C 0004                       PLC_MZ2:	dc.w 4
0001E41E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E422 A260                       		dc.w $A260
0001E424 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E428 A360                       		dc.w $A360
0001E42A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E42E A460                       		dc.w $A460
0001E430 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E434 A660                       		dc.w $A660
0001E436 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E43A 5700                       		dc.w $5700
0001E43C                            ; ---------------------------------------------------------------------------
0001E43C                            ; Pattern load cues - Star Light
0001E43C                            ; ---------------------------------------------------------------------------
0001E43C 0008                       PLC_SLZ:	dc.w 8
0001E43E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E442 0000                       		dc.w 0
0001E444 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E448 8000                       		dc.w $8000
0001E44A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E44E 8520                       		dc.w $8520
0001E450 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E454 9000                       		dc.w $9000
0001E456 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E45A 9C00                       		dc.w $9C00
0001E45C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E460 A260                       		dc.w $A260
0001E462 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E466 A360                       		dc.w $A360
0001E468 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E46C A460                       		dc.w $A460
0001E46E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E472 A660                       		dc.w $A660
0001E474 0005                       PLC_SLZ2:	dc.w 5
0001E476 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E47A 6E80                       		dc.w $6E80
0001E47C 0000 0000                  		dc.l Nem_Fan		; fan
0001E480 7400                       		dc.w $7400
0001E482 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E486 7980                       		dc.w $7980
0001E488 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E48C 7B80                       		dc.w $7B80
0001E48E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E492 9B00                       		dc.w $9B00
0001E494 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E498 9E00                       		dc.w $9E00
0001E49A                            ; ---------------------------------------------------------------------------
0001E49A                            ; Pattern load cues - Spring Yard
0001E49A                            ; ---------------------------------------------------------------------------
0001E49A 0004                       PLC_SYZ:	dc.w 4
0001E49C 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E4A0 0000                       		dc.w 0
0001E4A2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E4A6 8000                       		dc.w $8000
0001E4A8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E4AC 8880                       		dc.w $8880
0001E4AE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E4B2 8F60                       		dc.w $8F60
0001E4B4 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E4B8 9700                       		dc.w $9700
0001E4BA 0007                       PLC_SYZ2:	dc.w 7
0001E4BC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E4C0 7000                       		dc.w $7000
0001E4C2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E4C6 72C0                       		dc.w $72C0
0001E4C8 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E4CC 7740                       		dc.w $7740
0001E4CE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E4D2 9FE0                       		dc.w $9FE0
0001E4D4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E4D8 A1E0                       		dc.w $A1E0
0001E4DA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4DE A360                       		dc.w $A360
0001E4E0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E4E4 A460                       		dc.w $A460
0001E4E6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E4EA A660                       		dc.w $A660
0001E4EC                            ; ---------------------------------------------------------------------------
0001E4EC                            ; Pattern load cues - Scrap Brain
0001E4EC                            ; ---------------------------------------------------------------------------
0001E4EC 000B                       PLC_SBZ:	dc.w $B
0001E4EE 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E4F2 0000                       		dc.w 0
0001E4F4 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E4F8 5800                       		dc.w $5800
0001E4FA 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E4FE 5D00                       		dc.w $5D00
0001E500 0000 0000                  		dc.l Nem_Girder		; girder
0001E504 5E00                       		dc.w $5E00
0001E506 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E50A 6040                       		dc.w $6040
0001E50C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E510 6880                       		dc.w $6880
0001E512 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E516 6900                       		dc.w $6900
0001E518 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E51C 7220                       		dc.w $7220
0001E51E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E522 76A0                       		dc.w $76A0
0001E524 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E528 7B20                       		dc.w $7B20
0001E52A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E52E 7EA0                       		dc.w $7EA0
0001E530 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E534 9860                       		dc.w $9860
0001E536 000C                       PLC_SBZ2:	dc.w $C
0001E538 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E53C 5600                       		dc.w $5600
0001E53E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E542 8000                       		dc.w $8000
0001E544 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E548 8520                       		dc.w $8520
0001E54A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E54E 8C00                       		dc.w $8C00
0001E550 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E554 8DE0                       		dc.w $8DE0
0001E556 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E55A 8FC0                       		dc.w $8FC0
0001E55C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E560 9240                       		dc.w $9240
0001E562 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E566 7F20                       		dc.w $7F20
0001E568 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E56C 9BE0                       		dc.w $9BE0
0001E56E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E572 A1E0                       		dc.w $A1E0
0001E574 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E578 A360                       		dc.w $A360
0001E57A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E57E A460                       		dc.w $A460
0001E580 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E584 A660                       		dc.w $A660
0001E586                            ; ---------------------------------------------------------------------------
0001E586                            ; Pattern load cues - title card
0001E586                            ; ---------------------------------------------------------------------------
0001E586 0000                       PLC_TitleCard:	dc.w 0
0001E588 0000 0000                  		dc.l Nem_TitleCard
0001E58C B000                       		dc.w $B000
0001E58E                            ; ---------------------------------------------------------------------------
0001E58E                            ; Pattern load cues - act 3 boss
0001E58E                            ; ---------------------------------------------------------------------------
0001E58E 0005                       PLC_Boss:	dc.w 5
0001E590 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E594 8000                       		dc.w $8000
0001E596 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E59A 8D80                       		dc.w $8D80
0001E59C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E5A0 93A0                       		dc.w $93A0
0001E5A2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E5A6 A300                       		dc.w $A300
0001E5A8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E5AC A300                       		dc.w $A300
0001E5AE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E5B2 A540                       		dc.w $A540
0001E5B4                            ; ---------------------------------------------------------------------------
0001E5B4                            ; Pattern load cues - act 1/2 signpost
0001E5B4                            ; ---------------------------------------------------------------------------
0001E5B4 0002                       PLC_Signpost:	dc.w 2
0001E5B6 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E5BA D000                       		dc.w $D000
0001E5BC 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E5C0 96C0                       		dc.w $96C0
0001E5C2 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E5C6 8C40                       		dc.w $8C40
0001E5C8                            ; ---------------------------------------------------------------------------
0001E5C8                            ; Pattern load cues - beta special stage warp effect
0001E5C8                            ; ---------------------------------------------------------------------------
0001E5C8 0000                       PLC_Warp:	dc.w 0
0001E5CA 0000 0000                  		dc.l Nem_Warp
0001E5CE A820                       		dc.w $A820
0001E5D0                            ; ---------------------------------------------------------------------------
0001E5D0                            ; Pattern load cues - special stage
0001E5D0                            ; ---------------------------------------------------------------------------
0001E5D0 000C                       PLC_SpeStage:	dc.w $C
0001E5D2 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E5D6 0000                       		dc.w 0
0001E5D8 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E5DC 0A20                       		dc.w $A20
0001E5DE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E5E2 4760                       		dc.w $4760
0001E5E4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E5E8 4A20                       		dc.w $4A20
0001E5EA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E5EE 4C60                       		dc.w $4C60
0001E5F0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E5F4 5E00                       		dc.w $5E00
0001E5F6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E5FA 6E00                       		dc.w $6E00
0001E5FC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E600 7E00                       		dc.w $7E00
0001E602 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E606 8E00                       		dc.w $8E00
0001E608 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E60C 9E00                       		dc.w $9E00
0001E60E 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E612 BE00                       		dc.w $BE00
0001E614 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E618 EE00                       		dc.w $EE00
0001E61A 0000 0000                  		dc.l Nem_Ring		; rings
0001E61E 45A0                       		dc.w ssringart*$20
0001E620                            ; ---------------------------------------------------------------------------
0001E620                            ; Pattern load cues - GHZ animals
0001E620                            ; ---------------------------------------------------------------------------
0001E620 0001                       PLC_GHZAnimals:	dc.w 1
0001E622 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E626 B000                       		dc.w $B000
0001E628 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E62C B240                       		dc.w $B240
0001E62E                            ; ---------------------------------------------------------------------------
0001E62E                            ; Pattern load cues - LZ animals
0001E62E                            ; ---------------------------------------------------------------------------
0001E62E 0001                       PLC_LZAnimals:	dc.w 1
0001E630 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E634 B000                       		dc.w $B000
0001E636 0000 0000                  		dc.l Nem_Seal		; seal
0001E63A B240                       		dc.w $B240
0001E63C                            ; ---------------------------------------------------------------------------
0001E63C                            ; Pattern load cues - MZ animals
0001E63C                            ; ---------------------------------------------------------------------------
0001E63C 0001                       PLC_MZAnimals:	dc.w 1
0001E63E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E642 B000                       		dc.w $B000
0001E644 0000 0000                  		dc.l Nem_Seal		; seal
0001E648 B240                       		dc.w $B240
0001E64A                            ; ---------------------------------------------------------------------------
0001E64A                            ; Pattern load cues - SLZ animals
0001E64A                            ; ---------------------------------------------------------------------------
0001E64A 0001                       PLC_SLZAnimals:	dc.w 1
0001E64C 0000 0000                  		dc.l Nem_Pig		; pig
0001E650 B000                       		dc.w $B000
0001E652 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E656 B240                       		dc.w $B240
0001E658                            ; ---------------------------------------------------------------------------
0001E658                            ; Pattern load cues - SYZ animals
0001E658                            ; ---------------------------------------------------------------------------
0001E658 0001                       PLC_SYZAnimals:	dc.w 1
0001E65A 0000 0000                  		dc.l Nem_Pig		; pig
0001E65E B000                       		dc.w $B000
0001E660 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E664 B240                       		dc.w $B240
0001E666                            ; ---------------------------------------------------------------------------
0001E666                            ; Pattern load cues - SBZ animals
0001E666                            ; ---------------------------------------------------------------------------
0001E666 0001                       PLC_SBZAnimals:	dc.w 1
0001E668 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E66C B000                       		dc.w $B000
0001E66E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E672 B240                       		dc.w $B240
0001E674                            ; ---------------------------------------------------------------------------
0001E674                            ; Pattern load cues - special stage results screen
0001E674                            ; ---------------------------------------------------------------------------
0001E674 0001                       PLC_SpeStResult:dc.w 1
0001E676 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E67A A820                       		dc.w $A820
0001E67C 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E680 AA20                       		dc.w $AA20
0001E682                            ; ---------------------------------------------------------------------------
0001E682                            ; Pattern load cues - ending sequence
0001E682                            ; ---------------------------------------------------------------------------
0001E682 000E                       PLC_Ending:	dc.w $E
0001E684 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E688 0000                       		dc.w 0
0001E68A 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E68E 39A0                       		dc.w $39A0
0001E690 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E694 6B00                       		dc.w $6B00
0001E696 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E69A 7400                       		dc.w $7400
0001E69C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E6A0 78A0                       		dc.w $78A0
0001E6A2 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E6A6 7C20                       		dc.w $7C20
0001E6A8 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E6AC A480                       		dc.w $A480
0001E6AE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6B2 AA60                       		dc.w $AA60
0001E6B4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6B8 ACA0                       		dc.w $ACA0
0001E6BA 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E6BE AE60                       		dc.w $AE60
0001E6C0 0000 0000                  		dc.l Nem_Seal		; seal
0001E6C4 B0A0                       		dc.w $B0A0
0001E6C6 0000 0000                  		dc.l Nem_Pig		; pig
0001E6CA B260                       		dc.w $B260
0001E6CC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E6D0 B4A0                       		dc.w $B4A0
0001E6D2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E6D6 B660                       		dc.w $B660
0001E6D8 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E6DC B8A0                       		dc.w $B8A0
0001E6DE                            ; ---------------------------------------------------------------------------
0001E6DE                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E6DE                            ; ---------------------------------------------------------------------------
0001E6DE 0002                       PLC_TryAgain:	dc.w 2
0001E6E0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E6E4 78A0                       		dc.w $78A0
0001E6E6 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E6EA 7C20                       		dc.w $7C20
0001E6EC 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E6F0 B400                       		dc.w $B400
0001E6F2                            ; ---------------------------------------------------------------------------
0001E6F2                            ; Pattern load cues - Eggman on SBZ 2
0001E6F2                            ; ---------------------------------------------------------------------------
0001E6F2 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E6F4 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E6F8 A300                       		dc.w $A300
0001E6FA 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E6FE 8000                       		dc.w $8000
0001E700 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E704 9400                       		dc.w $9400
0001E706                            ; ---------------------------------------------------------------------------
0001E706                            ; Pattern load cues - final boss
0001E706                            ; ---------------------------------------------------------------------------
0001E706 0004                       PLC_FZBoss:	dc.w 4
0001E708 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E70C 7400                       		dc.w $7400
0001E70E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E712 6000                       		dc.w $6000
0001E714 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E718 8000                       		dc.w $8000
0001E71A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E71E 8E00                       		dc.w $8E00
0001E720 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E724 A540                       		dc.w $A540
0001E726                            		even
0001E726                            		even
0001E726                            
0001E726                            		incbin	misc\padding.bin
0001E814                            		even
0001E814                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EC76                            		even
0001EC76                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001ED6E                            		even
0001ED6E                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EE68                            		even
0001EE68                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FE34                            		even
0001FE34                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000217DE 00                         		even
000217DE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00021820                            		even
00021820                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000218DE                            		even
000218DE                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00021D86                            		even
00021D86                            ; ---------------------------------------------------------------------------
00021D86                            ; Sprite mappings - Sonic
00021D86                            ; ---------------------------------------------------------------------------
00021D86                            Map_Sonic:
00021D86                            	include "_maps\Sonic.asm"
00021D86                            ; ---------------------------------------------------------------------------
00021D86                            ; Sprite mappings - Sonic
00021D86                            ; ---------------------------------------------------------------------------
00021D86 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
00021D8A 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00021D8E 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
00021D92 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
00021D96 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
00021D9A 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00021D9E 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
00021DA2 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
00021DA6 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
00021DAA 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00021DAE 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
00021DB2 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
00021DB6 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
00021DBA 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
00021DBE 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
00021DC2 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
00021DC6 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
00021DCA 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
00021DCE 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
00021DD2 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00021DD6 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00021DDA 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00021DDE 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
00021DE2 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00021DE6 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00021DEA 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00021DEE 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
00021DF2 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00021DF6 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00021DFA 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00021DFE 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
00021E02 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00021E06 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00021E0A 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00021E0E 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
00021E12 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00021E16 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00021E1A 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00021E1E 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
00021E22 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00021E26 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
00021E2A 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00021E2E 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
00021E32 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00021E36 00                         byte_21292:	dc.b 0
00021E37 04                         byte_21293:	dc.b 4			; standing
00021E38 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00021E3D F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
00021E42 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00021E47 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00021E4C 03                         byte_212A8:	dc.b 3			; waiting 1
00021E4D EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021E52 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021E57 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021E5C 03                         byte_212B8:	dc.b 3			; waiting 2
00021E5D EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021E62 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021E67 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021E6C 03                         byte_212C8:	dc.b 3			; waiting 3
00021E6D EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021E72 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021E77 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021E7C 03                         byte_212D8:	dc.b 3			; looking up
00021E7D EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00021E82 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
00021E87 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021E8C 04                         byte_212E8:	dc.b 4			; walking 1-1
00021E8D EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
00021E92 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
00021E97 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00021E9C 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00021EA1 02                         byte_212FD:	dc.b 2			; walking 1-2
00021EA2 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
00021EA7 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
00021EAC 02                         byte_21308:	dc.b 2			; walking 1-3
00021EAD ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
00021EB2 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
00021EB7 04                         byte_21313:	dc.b 4			; walking 1-4
00021EB8 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00021EBD FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00021EC2 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00021EC7 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
00021ECC 02                         byte_21328:	dc.b 2			; walking 1-5
00021ECD EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00021ED2 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00021ED7 03                         byte_21333:	dc.b 3			; walking 1-6
00021ED8 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00021EDD FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00021EE2 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00021EE7 05                         byte_21343:	dc.b 5			; walking 2-1
00021EE8 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021EED EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
00021EF2 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00021EF7 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00021EFC 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00021F01 06                         byte_2135D:	dc.b 6			; walking 2-2
00021F02 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00021F07 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021F0C FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00021F11 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00021F16 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00021F1B F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00021F20 04                         byte_2137C:	dc.b 4			; walking 2-3
00021F21 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021F26 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021F2B FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00021F30 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00021F35 05                         byte_21391:	dc.b 5			; walking 2-4
00021F36 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021F3B EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00021F40 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
00021F45 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00021F4A 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00021F4F 04                         byte_213AB:	dc.b 4			; walking 2-5
00021F50 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00021F55 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021F5A FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00021F5F 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
00021F64 05                         byte_213C0:	dc.b 5			; walking 2-6
00021F65 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021F6A ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021F6F FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
00021F74 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00021F79 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00021F7E 04                         byte_213DA:	dc.b 4			; walking 3-1
00021F7F F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
00021F84 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00021F89 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00021F8E 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00021F93 02                         byte_213EF:	dc.b 2			; walking 3-2
00021F94 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00021F99 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00021F9E 02                         byte_213FA:	dc.b 2			; walking 3-3
00021F9F F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00021FA4 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00021FA9 04                         byte_21405:	dc.b 4			; walking 3-4
00021FAA F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00021FAF EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
00021FB4 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00021FB9 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00021FBE 02                         byte_2141A:	dc.b 2			; walking 3-5
00021FBF F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00021FC4 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00021FC9 03                         byte_21425:	dc.b 3			; walking 3-6
00021FCA F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00021FCF EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00021FD4 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00021FD9 06                         byte_21435:	dc.b 6			; walking 4-1
00021FDA FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00021FDF ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00021FE4 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00021FE9 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00021FEE 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
00021FF3 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00021FF8 06                         byte_21454:	dc.b 6			; walking 4-2
00021FF9 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00021FFE E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
00022003 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00022008 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
0002200D F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00022012 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00022017 04                         byte_21473:	dc.b 4			; walking 4-3
00022018 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
0002201D F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00022022 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00022027 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
0002202C 05                         byte_21488:	dc.b 5			; walking 4-4
0002202D FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00022032 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00022037 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
0002203C F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00022041 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00022046 04                         byte_214A2:	dc.b 4			; walking 4-5
00022047 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
0002204C F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00022051 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00022056 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
0002205B 05                         byte_214B7:	dc.b 5			; walking 4-6
0002205C FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00022061 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00022066 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
0002206B 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00022070 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
00022075 02                         byte_214D1:	dc.b 2			; running 1-1
00022076 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002207B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00022080 02                         byte_214DC:	dc.b 2			; running 1-2
00022081 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00022086 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002208B 02                         byte_214E7:	dc.b 2			; running 1-3
0002208C EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00022091 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00022096 02                         byte_214F2:	dc.b 2			; running 1-4
00022097 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002209C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000220A1 04                         byte_214FD:	dc.b 4			; running 2-1
000220A2 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000220A7 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000220AC FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000220B1 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000220B6 03                         byte_21512:	dc.b 3			; running 2-2
000220B7 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000220BC EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000220C1 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000220C6 04                         byte_21522:	dc.b 4			; running 2-3
000220C7 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000220CC EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000220D1 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000220D6 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000220DB 03                         byte_21537:	dc.b 3			; running 2-4
000220DC EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000220E1 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000220E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000220EB 02                         byte_21547:	dc.b 2			; running 3-1
000220EC F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000220F1 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000220F6 02                         byte_21552:	dc.b 2			; running 3-2
000220F7 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000220FC F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00022101 02                         byte_2155D:	dc.b 2			; running 3-3
00022102 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00022107 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002210C 02                         byte_21568:	dc.b 2			; running 3-4
0002210D F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00022112 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00022117 04                         byte_21573:	dc.b 4			; running 4-1
00022118 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002211D F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00022122 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00022127 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
0002212C 02                         byte_21588:	dc.b 2			; running 4-2
0002212D F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00022132 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00022137 04                         byte_21593:	dc.b 4			; running 4-3
00022138 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002213D F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00022142 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00022147 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
0002214C 02                         byte_215A8:	dc.b 2			; running 4-4
0002214D F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
00022152 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00022157 01                         byte_215B3:	dc.b 1			; rolling 1
00022158 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002215D 01                         byte_215B9:	dc.b 1			; rolling 2
0002215E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00022163 01                         byte_215BF:	dc.b 1			; rolling 3
00022164 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00022169 01                         byte_215C5:	dc.b 1			; rolling 4
0002216A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002216F 01                         byte_215CB:	dc.b 1			; rolling 5
00022170 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00022175 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
00022176 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
0002217B F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00022180 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00022181 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00022186 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
00022187 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
0002218C 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00022191 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00022192 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00022197 02                         byte_215F3:	dc.b 2			; stopping 1
00022198 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
0002219D FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
000221A2 04                         byte_215FE:	dc.b 4			; stopping 2
000221A3 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000221A8 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
000221AD 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
000221B2 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
000221B7 04                         byte_21613:	dc.b 4			; ducking
000221B8 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
000221BD FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
000221C2 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
000221C7 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
000221CC 03                         byte_21628:	dc.b 3			; balancing 1
000221CD EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
000221D2 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
000221D7 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
000221DC 03                         byte_21638:	dc.b 3			; balancing 2
000221DD EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
000221E2 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
000221E7 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
000221EC 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
000221ED F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
000221F2 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
000221F7 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
000221FC 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
000221FD F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00022202 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00022207 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00022208 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
0002220D FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00022212 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00022217 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00022218 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
0002221D FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00022222 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00022227 03                         byte_21683:	dc.b 3			; bouncing
00022228 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
0002222D 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00022232 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00022237 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00022238 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
0002223D 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00022242 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00022247 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
0002224C 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
0002224D F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00022252 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00022257 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
0002225C F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00022261 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00022262 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00022267 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
0002226C 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00022271 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00022276 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
0002227B 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
0002227C E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00022281 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00022286 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
0002228B 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00022290 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00022295 02                         byte_216F1:	dc.b 2			; pushing 1
00022296 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
0002229B 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000222A0 03                         byte_216FC:	dc.b 3			; pushing 2
000222A1 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000222A6 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000222AB 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000222B0 02                         byte_2170C:	dc.b 2			; pushing 3
000222B1 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000222B6 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000222BB 03                         byte_21717:	dc.b 3			; pushing 4
000222BC EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000222C1 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000222C6 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000222CB 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
000222CC EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000222D1 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
000222D6 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
000222D7 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000222DC 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
000222E1 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
000222E6 03                         byte_21742:	dc.b 3			; death	1
000222E7 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000222EC E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
000222F1 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
000222F6 05                         byte_21752:	dc.b 5			; drowning
000222F7 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
000222FC E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00022301 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00022306 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
0002230B 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00022310 05                         byte_2176C:	dc.b 5			; death	2
00022311 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00022316 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002231B F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00022320 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00022325 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
0002232A 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
0002232B EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00022330 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00022335 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00022336 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002233B F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00022340 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00022345 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00022346 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
0002234B 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
0002234C F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00022351 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00022352 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00022357 03                         byte_217B3:	dc.b 3			; injury
00022358 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
0002235D FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00022362 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00022367 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00022368 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
0002236D FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00022372 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00022377 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00022378 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
0002237D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00022382 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00022387 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00022388 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
0002238D FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00022392 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00022397 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00022398 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
0002239D F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
000223A2                            		even
000223A2                            		even
000223A2                            
000223A2                            ; ---------------------------------------------------------------------------
000223A2                            ; Uncompressed graphics	loading	array for Sonic
000223A2                            ; ---------------------------------------------------------------------------
000223A2                            SonicDynPLC:
000223A2                            	include "_inc\Sonic dynamic pattern load cues.asm"
000223A2                            ; ---------------------------------------------------------------------------
000223A2                            ; Uncompressed graphics	loading	array for Sonic
000223A2                            ; ---------------------------------------------------------------------------
000223A2 0000                       		dc.w SonPLC_Blank-SonicDynPLC
000223A4 0000                       		dc.w SonPLC_Stand-SonicDynPLC
000223A6 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
000223A8 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
000223AA 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
000223AC 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
000223AE 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
000223B0 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
000223B2 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
000223B4 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
000223B6 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
000223B8 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
000223BA 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
000223BC 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
000223BE 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
000223C0 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
000223C2 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
000223C4 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
000223C6 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
000223C8 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
000223CA 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
000223CC 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
000223CE 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
000223D0 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
000223D2 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
000223D4 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
000223D6 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
000223D8 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
000223DA 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
000223DC 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
000223DE 0000                       		dc.w SonPLC_Run11-SonicDynPLC
000223E0 0000                       		dc.w SonPLC_Run12-SonicDynPLC
000223E2 0000                       		dc.w SonPLC_Run13-SonicDynPLC
000223E4 0000                       		dc.w SonPLC_Run14-SonicDynPLC
000223E6 0000                       		dc.w SonPLC_Run21-SonicDynPLC
000223E8 0000                       		dc.w SonPLC_Run22-SonicDynPLC
000223EA 0000                       		dc.w SonPLC_Run23-SonicDynPLC
000223EC 0000                       		dc.w SonPLC_Run24-SonicDynPLC
000223EE 0000                       		dc.w SonPLC_Run31-SonicDynPLC
000223F0 0000                       		dc.w SonPLC_Run32-SonicDynPLC
000223F2 0000                       		dc.w SonPLC_Run33-SonicDynPLC
000223F4 0000                       		dc.w SonPLC_Run34-SonicDynPLC
000223F6 0000                       		dc.w SonPLC_Run41-SonicDynPLC
000223F8 0000                       		dc.w SonPLC_Run42-SonicDynPLC
000223FA 0000                       		dc.w SonPLC_Run43-SonicDynPLC
000223FC 0000                       		dc.w SonPLC_Run44-SonicDynPLC
000223FE 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00022400 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00022402 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00022404 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00022406 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00022408 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
0002240A 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
0002240C 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
0002240E 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00022410 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00022412 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00022414 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00022416 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00022418 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
0002241A 0000                       		dc.w SonPLC_Float1-SonicDynPLC
0002241C 0000                       		dc.w SonPLC_Float2-SonicDynPLC
0002241E 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00022420 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00022422 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00022424 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00022426 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00022428 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
0002242A 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
0002242C 0000                       		dc.w SonPLC_Push1-SonicDynPLC
0002242E 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00022430 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00022432 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00022434 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00022436 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00022438 0000                       		dc.w SonPLC_Death1-SonicDynPLC
0002243A 0000                       		dc.w SonPLC_Drown-SonicDynPLC
0002243C 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
0002243E 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00022440 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00022442 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00022444 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00022446 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00022448 0000                       		dc.w SonPLC_Float1-SonicDynPLC
0002244A 0000                       		dc.w SonPLC_Float3-SonicDynPLC
0002244C 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
0002244E 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00022450 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00022452 00                         SonPLC_Blank:	dc.b 0
00022453 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
0002245C 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00022463 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
0002246A 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00022471 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00022478 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00022481 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00022486 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
0002248B 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00022494 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00022499 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
000224A0 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
000224AB 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
000224B8 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
000224C1 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
000224CC 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
000224D5 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
000224E0 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
000224E9 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
000224EE 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
000224F3 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
000224FC 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00022501 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00022508 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00022515 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00022522 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
0002252B 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00022536 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
0002253F 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
0002254A 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
0002254F 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00022554 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00022559 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
0002255E 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00022567 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
0002256E 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00022577 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
0002257E 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00022583 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00022588 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
0002258D 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00022592 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
0002259B 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
000225A0 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
000225A9 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
000225AE 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
000225B1 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
000225B4 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
000225B7 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
000225BA 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
000225BD 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
000225C2 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
000225C5 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
000225CA 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
000225CD 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
000225D2 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
000225DB 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
000225E4 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
000225EB 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
000225F2 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
000225F9 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
000225FC 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00022603 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
0002260A 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00022611 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
0002261A 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00022623 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
0002262E 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00022639 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
0002263E 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00022645 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
0002264A 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00022651 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00022656 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
0002265D 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00022664 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
0002266F 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
0002267A 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
0002267F 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00022686 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00022689 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
0002268C 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
0002268F 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00022696 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
0002269D 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
000226A2                            		even
000226A2                            		even
000226A2                            
000226A2                            ; ---------------------------------------------------------------------------
000226A2                            ; Uncompressed graphics	- Sonic
000226A2                            ; ---------------------------------------------------------------------------
000226A2                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002C7C2                            		even
0002C7C2                            
0002C7C2                            ; ---------------------------------------------------------------------------
0002C7C2                            ; Uncompressed graphics	- Sonime
0002C7C2                            ; ---------------------------------------------------------------------------
0002C7C2                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002C942                            		even
0002C942                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002CBC2                            		even
0002CBC2                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002CCC2                            		even
0002CCC2                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002D5C2                            		even
0002D5C2                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002D602                            		even
0002D602                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002D682                            		even
0002D682                            
0002D682                            ; ---------------------------------------------------------------------------
0002D682                            ; Compressed graphics - various
0002D682                            ; ---------------------------------------------------------------------------
0002D682                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002D786                            		even
0002D786                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002D7C0                            		even
0002D7C0                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002DB20                            		even
0002DB20                            UnC_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002DFA0                            		even
0002DFA0                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002E0AA                            		even
0002E0AA                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002E0FC                            		even
0002E0FC                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002E344                            		even
0002E344                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E4CA                            		even
0002E4CA                            ; ---------------------------------------------------------------------------
0002E4CA                            ; Sprite mappings - walls of the special stage
0002E4CA                            ; ---------------------------------------------------------------------------
0002E4CA                            Map_SSWalls:
0002E4CA                            	include "_maps\SSwalls.asm"
0002E4CA                            ; ---------------------------------------------------------------------------
0002E4CA                            ; Sprite mappings - walls of the special stage
0002E4CA                            ; ---------------------------------------------------------------------------
0002E4CA 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002E4CC 01                         byte_2C584:	dc.b 1
0002E4CD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002E4D2                            		even
0002E4D2                            		even
0002E4D2                            ; ---------------------------------------------------------------------------
0002E4D2                            ; Compressed graphics - special stage
0002E4D2                            ; ---------------------------------------------------------------------------
0002E4D2                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
000304D2                            		even
000304D2                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00030606                            		even
00030606                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00031296                            		even
00031296                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00031596                            		even
00031596                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00031A8A                            		even
00031A8A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031B78                            		even
00031B78                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031C48                            		even
00031C48                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00031D3E                            		even
00031D3E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031D9C                            		even
00031D9C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031E2E                            		even
00031E2E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031EF0                            		even
00031EF0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031FBE                            		even
00031FBE                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003208A                            		even
0003208A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00032152                            		even
00032152                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003221C                            		even
0003221C                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000322EC                            		even
000322EC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000324E0                            		even
000324E0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00032648                            		even
00032648                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000326F8                            		even
000326F8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000327D2                            		even
000327D2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00032856                            		even
00032856                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000329D4                            		even
000329D4                            ; ---------------------------------------------------------------------------
000329D4                            ; Compressed graphics - GHZ stuff
000329D4                            ; ---------------------------------------------------------------------------
000329D4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00032A1E                            		even
00032A1E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00032B38                            		even
00032B38                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032C24                            		even
00032C24                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032C6C                            		even
00032C6C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032E0A                            		even
00032E0A                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032E86                            		even
00032E86                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003309A                            		even
0003309A                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000331C6                            		even
000331C6                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000332F4                            		even
000332F4                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00033392                            		even
00033392                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000333F2                            		even
000333F2                            ; ---------------------------------------------------------------------------
000333F2                            ; Compressed graphics - LZ stuff
000333F2                            ; ---------------------------------------------------------------------------
000333F2                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00033516                            		even
00033516                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033D0A                            		even
00033D0A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033E8A                            		even
00033E8A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00033FF4                            		even
00033FF4                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003464A                            		even
0003464A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00034700                            		even
00034700                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000347A2                            		even
000347A2                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000348FE                            		even
000348FE                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00034962                            		even
00034962                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00034AB4                            		even
00034AB4                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034F96                            		even
00034F96                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00035106                            		even
00035106                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000353BE                            		even
000353BE                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000354F6                            		even
000354F6                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00035620                            		even
00035620                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00035730                            		even
00035730                            ; ---------------------------------------------------------------------------
00035730                            ; Compressed graphics - MZ stuff
00035730                            ; ---------------------------------------------------------------------------
00035730                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000359BE                            		even
000359BE                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00035A7C                            		even
00035A7C                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00035B34                            		even
00035B34                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035B88                            		even
00035B88                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035E66                            		even
00035E66                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003677C                            		even
0003677C                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000368E0                            		even
000368E0                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00036968                            		even
00036968                            ; ---------------------------------------------------------------------------
00036968                            ; Compressed graphics - SLZ stuff
00036968                            ; ---------------------------------------------------------------------------
00036968                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00036BA4                            		even
00036BA4                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036CEA                            		even
00036CEA                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00036F2E                            		even
00036F2E                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036F90                            		even
00036F90                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00037072                            		even
00037072                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00037254                            		even
00037254                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00037360                            		even
00037360                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00037404                            		even
00037404                            ; ---------------------------------------------------------------------------
00037404                            ; Compressed graphics - SYZ stuff
00037404                            ; ---------------------------------------------------------------------------
00037404                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003756E                            		even
0003756E                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000375D0                            		even
000375D0                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000376B2                            		even
000376B2                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00037940                            		even
00037940                            ; ---------------------------------------------------------------------------
00037940                            ; Compressed graphics - SBZ stuff
00037940                            ; ---------------------------------------------------------------------------
00037940                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00037994                            		even
00037994                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037C30                            		even
00037C30                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037E34                            		even
00037E34                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00037FD2                            		even
00037FD2                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00038302                            		even
00038302                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000384E0                            		even
000384E0                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00038538                            		even
00038538                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000386B8                            		even
000386B8                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000387B6                            		even
000387B6                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00038942                            		even
00038942                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00038992                            		even
00038992                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000389EA                            		even
000389EA                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00038AE6                            		even
00038AE6                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038BFC                            		even
00038BFC                            ; ---------------------------------------------------------------------------
00038BFC                            ; Compressed graphics - enemies
00038BFC                            ; ---------------------------------------------------------------------------
00038BFC                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038FBC                            		even
00038FBC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
000394AA                            		even
000394AA                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00039850                            		even
00039850                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00039A38                            		even
00039A38                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003A122                            		even
0003A122                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003A38A                            		even
0003A38A                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003A614                            		even
0003A614                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003AB38                            		even
0003AB38                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003ADC2                            		even
0003ADC2                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003B3E0                            		even
0003B3E0                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003B7C8                            		even
0003B7C8                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003BAC4                            		even
0003BAC4                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003BD0C                            		even
0003BD0C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003BFA4                            		even
0003BFA4                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003C182                            		even
0003C182                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003C310                            		even
0003C310                            ; ---------------------------------------------------------------------------
0003C310                            ; Compressed graphics - various
0003C310                            ; ---------------------------------------------------------------------------
0003C310                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C91E                            		even
0003C91E                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003CA14                            		even
0003CA14                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003CB1A                            		even
0003CB1A                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003CC0E                            		even
0003CC0E                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003CFC0 00                         		even
0003CFC0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003D626                            		even
0003D626                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003D6D6                            		even
0003D6D6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D868                            		even
0003D868                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D96A                            		even
0003D96A                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003DA46                            		even
0003DA46                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003DEC2                            		even
0003DEC2                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003DF82                            		even
0003DF82                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003E0F6                            		even
0003E0F6                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003E3F8                            		even
0003E3F8                            ; ---------------------------------------------------------------------------
0003E3F8                            ; Compressed graphics - continue screen
0003E3F8                            ; ---------------------------------------------------------------------------
0003E3F8                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003E6A8                            		even
0003E6A8                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E8E2                            		even
0003E8E2                            ; ---------------------------------------------------------------------------
0003E8E2                            ; Compressed graphics - animals
0003E8E2                            ; ---------------------------------------------------------------------------
0003E8E2                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003EA3A                            		even
0003EA3A                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003EB96                            		even
0003EB96                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003ED12                            		even
0003ED12                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003EE2E                            		even
0003EE2E                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003EF64                            		even
0003EF64                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003F09E                            		even
0003F09E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003F1FA                            		even
0003F1FA                            ; ---------------------------------------------------------------------------
0003F1FA                            ; Compressed graphics - primary patterns and block mappings
0003F1FA                            ; ---------------------------------------------------------------------------
0003F1FA                            Blk16_GHZ:	incbin	map16\ghz.bin
0003FB9A                            		even
0003FB9A                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000411FA                            		even
000411FA                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000425A2                            		even
000425A2                            Blk256_GHZ:	incbin	map256\ghz.bin
000446B2                            		even
000446B2                            Blk16_LZ:	incbin	map16\lz.bin
000449DC                            		even
000449DC                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00046524                            		even
00046524                            Blk256_LZ:	incbin	map256\lz.bin
00048D14                            		even
00048D14                            Blk16_MZ:	incbin	map16\mz.bin
0004951E                            		even
0004951E                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004BD62                            		even
0004BD62                            Blk256_MZ:	incbin	map256\mz.bin
0004D522                            		even
0004D522                            Blk16_SLZ:	incbin	map16\slz.bin
0004DD06                            		even
0004DD06                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005185A                            		even
0005185A                            Blk256_SLZ:	incbin	map256\slz.bin
00053C8A                            		even
00053C8A                            Blk16_SYZ:	incbin	map16\syz.bin
000545F8                            		even
000545F8                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057D24                            		even
00057D24                            Blk256_SYZ:	incbin	map256\syz.bin
0005A0D4                            		even
0005A0D4                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AF6E                            		even
0005AF6E                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D71A                            		even
0005D71A                            Blk256_SBZ:	incbin	map256\sbz.bin
0006016A                            		even
0006016A                            ; ---------------------------------------------------------------------------
0006016A                            ; Compressed graphics - bosses and ending sequence
0006016A                            ; ---------------------------------------------------------------------------
0006016A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000609CE                            		even
000609CE                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060CB8                            		even
00060CB8                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006153C                            		even
0006153C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061D68                            		even
00061D68                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000624D0                            		even
000624D0                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00062A50                            		even
00062A50                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062B70                            		even
00062B70                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062D6E                            		even
00062D6E                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063F4C                            		even
00063F4C                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064890                            		even
00064890                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00064C66                            		even
00064C66                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000651F6                            		even
000651F6                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006547E                            		even
0006547E                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00065A7C                            		even
00065A7C                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065D04                            		even
00065D04                            		incbin	misc\padding2.bin
00065E08                            		even
00065E08                            ; ---------------------------------------------------------------------------
00065E08                            ; Collision data
00065E08                            ; ---------------------------------------------------------------------------
00065E08                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065F08                            		even
00065F08                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066F08                            		even
00066F08                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067F08                            		even
00067F08                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000680A2                            		even
000680A2                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006816A                            		even
0006816A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000682FA                            		even
000682FA                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000684EE                            		even
000684EE                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000686E2                            		even
000686E2                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006893A                            		even
0006893A                            ; ---------------------------------------------------------------------------
0006893A                            ; Special layouts
0006893A                            ; ---------------------------------------------------------------------------
0006893A                            SS_1:		incbin	sslayout\1.bin
00068BB4                            		even
00068BB4                            SS_2:		incbin	sslayout\2.bin
00068FC6                            		even
00068FC6                            SS_3:		incbin	sslayout\3.bin
00069322                            		even
00069322                            SS_4:		incbin	sslayout\4.bin
000697FC                            		even
000697FC                            SS_5:		incbin	sslayout\5.bin
00069CCE                            		even
00069CCE                            SS_6:		incbin	sslayout\6.bin
00069FDE                            		even
00069FDE                            ; ---------------------------------------------------------------------------
00069FDE                            ; Animated uncompressed graphics
00069FDE                            ; ---------------------------------------------------------------------------
00069FDE                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A1DE                            		even
0006A1DE                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006A5DE                            		even
0006A5DE                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006AA5E                            		even
0006AA5E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006AD5E                            		even
0006AD5E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006B35E                            		even
0006B35E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006B65E                            		even
0006B65E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C0DE                            		even
0006C0DE                            
0006C0DE                            ; ---------------------------------------------------------------------------
0006C0DE                            ; Level	layout index
0006C0DE                            ; ---------------------------------------------------------------------------
0006C0DE 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C0E4 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C0EA 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C0F0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C0F6 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C0FC 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C102 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C108 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C10E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C114 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C11A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C120 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C126 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C12C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C132 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C138 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C13E 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C144 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C14A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C150 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C156 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C15C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C162 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C168 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C16E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C174 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C17A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C180 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C186                            
0006C186                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C278                            		even
0006C278 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C27C                            Level_GHZ2:	incbin	levels\ghz2.bin
0006C344                            		even
0006C344 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006C348                            Level_GHZ3:	incbin	levels\ghz3.bin
0006C46A                            		even
0006C46A                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006C48C                            		even
0006C48C 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006C490 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006C494                            
0006C494                            Level_LZ1:	incbin	levels\lz1.bin
0006C596                            		even
0006C596                            Level_LZbg:	incbin	levels\lzbg.bin
0006C698                            		even
0006C698 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006C69C                            Level_LZ2:	incbin	levels\lz2.bin
0006C736                            		even
0006C736 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006C73A                            Level_LZ3:	incbin	levels\lz3.bin
0006C854                            		even
0006C854 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C858                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C912                            		even
0006C912 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C916                            
0006C916                            Level_MZ1:	incbin	levels\mz1.bin
0006C9B4                            		even
0006C9B4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006CA2E                            		even
0006CA2E                            Level_MZ2:	incbin	levels\mz2.bin
0006CAD2                            		even
0006CAD2                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006CB64                            		even
0006CB64 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006CB68                            Level_MZ3:	incbin	levels\mz3.bin
0006CC4A                            		even
0006CC4A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006CCEE                            		even
0006CCEE 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006CCF2 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006CCF6                            
0006CCF6                            Level_SLZ1:	incbin	levels\slz1.bin
0006CE08                            		even
0006CE08                            Level_SLZbg:	incbin	levels\slzbg.bin
0006CE82                            		even
0006CE82                            Level_SLZ2:	incbin	levels\slz2.bin
0006CF72                            		even
0006CF72                            Level_SLZ3:	incbin	levels\slz3.bin
0006D08C                            		even
0006D08C 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D090                            
0006D090                            Level_SYZ1:	incbin	levels\syz1.bin
0006D14C                            		even
0006D14C                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D186                            		even
0006D186 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D18A                            Level_SYZ2:	incbin	levels\syz2.bin
0006D28E                            		even
0006D28E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D292                            Level_SYZ3:	incbin	levels\syz3.bin
0006D3EC                            		even
0006D3EC 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006D3F0 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006D3F4                            
0006D3F4                            Level_SBZ1:	incbin	levels\sbz1.bin
0006D516                            		even
0006D516                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006D554                            		even
0006D554                            Level_SBZ2:	incbin	levels\sbz2.bin
0006D696                            		even
0006D696                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D800                            		even
0006D800 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D804 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D808                            Level_End:	incbin	levels\ending.bin
0006D828                            		even
0006D828 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D82C                            
0006D82C                            ; ---------------------------------------------------------------------------
0006D82C                            ; Animated uncompressed giant ring graphics
0006D82C                            ; ---------------------------------------------------------------------------
0006D82C                            Art_BigRing:	incbin	artunc\bigring.bin
0006E46C                            		even
0006E46C                            
0006E46C                            		incbin	misc\padding3.bin
0006E508                            		even
0006E508                            
0006E508                            ; ---------------------------------------------------------------------------
0006E508                            ; Sprite locations index
0006E508                            ; ---------------------------------------------------------------------------
0006E508 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E50C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E510 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E514 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E518 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E51C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E520 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E524 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E528 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E52C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E530 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E534 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E538 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E53C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E540 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E544 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E548 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E54C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E550 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E554 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E558 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E55C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E560 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E564 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E568 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E56C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E570 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E574 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E578 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E57C 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006E580 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006E584 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E588 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E58C 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006E590 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006E594 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E598 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006E59E                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006EAA8                            		even
0006EAA8                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F066                            		even
0006F066                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006F720                            		even
0006F720                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006FB8E                            		even
0006FB8E                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006FED0                            		even
0006FED0                            ObjPos_LZ3:	incbin	objpos\lz3.bin
000704B2                            		even
000704B2                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007094A                            		even
0007094A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007097C                            		even
0007097C                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000709AE                            		even
000709AE                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000709E0                            		even
000709E0                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00070A12                            		even
00070A12                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00070A5C                            		even
00070A5C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00070A9A                            		even
00070A9A                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070E06                            		even
00070E06                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000712B0                            		even
000712B0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071826                            		even
00071826                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00071D66                            		even
00071D66                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000721CE                            		even
000721CE                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000727B0                            		even
000727B0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00072C3C                            		even
00072C3C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000731A6                            		even
000731A6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000737AC                            		even
000737AC                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073EEA                            		even
00073EEA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000745C8                            		even
000745C8                            ObjPos_FZ:	incbin	objpos\fz.bin
000745DA                            		even
000745DA                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007460C                            		even
0007460C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007463E                            		even
0007463E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074670                            		even
00074670                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000746A2                            		even
000746A2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000746D4                            		even
000746D4                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007470C                            		even
0007470C                            ObjPos_End:	incbin	objpos\ending.bin
00074868                            		even
00074868 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007486E                            ; ---------------------------------------------------------------------------
0007486E                            		incbin	misc\padding4.bin
00074E98                            		even
00074E98                            
00074E98 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00074E9C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00074EA0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00074EA4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00074EA8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074EAC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074EB0                            ; ---------------------------------------------------------------------------
00074EB0                            ; PSG instruments used in music
00074EB0                            ; ---------------------------------------------------------------------------
00074EB0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074EBC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074EC8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00074ED4                            PSG1:		incbin	sound\psg1.bin
00074EEB                            PSG2:		incbin	sound\psg2.bin
00074EF2                            PSG3:		incbin	sound\psg3.bin
00074F03                            PSG4:		incbin	sound\psg4.bin
00074F0E                            PSG6:		incbin	sound\psg6.bin
00074F1D                            PSG5:		incbin	sound\psg5.bin
00074F47                            PSG7:		incbin	sound\psg7.bin
00074F63                            PSG8:		incbin	sound\psg8.bin
00074F8B                            PSG9:		incbin	sound\psg9.bin
00074F9C                            
00074F9C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00074FA4                            ; ---------------------------------------------------------------------------
00074FA4                            ; Music	Pointers
00074FA4                            ; ---------------------------------------------------------------------------
00074FA4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074FAC 0000 0000 0000 0000        		dc.l Music83, Music84
00074FB4 0000 0000 0000 0000        		dc.l Music85, Music86
00074FBC 0000 0000 0000 0000        		dc.l Music87, Music88
00074FC4 0000 0000 0000 0000        		dc.l Music89, Music8A
00074FCC 0000 0000 0000 0000        		dc.l Music8B, Music8C
00074FD4 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074FDC 0000 0000 0000 0000        		dc.l Music8F, Music90
00074FE4 0000 0000 0000 0000        		dc.l Music91, Music92
00074FEC 0000 0000                  		dc.l Music93
00074FF0                            ; ---------------------------------------------------------------------------
00074FF0                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074FF0                            ; ---------------------------------------------------------------------------
00074FF0 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075000 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075010 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075020 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00075030 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075040 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075050 9090 9090                  		dc.b $90, $90, $90, $90
00075054                            
00075054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075054                            
00075054                            
00075054                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075054 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007505C 4E71                       		nop	
0007505E 4E71                       		nop	
00075060 4E71                       		nop	
00075062                            
00075062                            loc_71B5A:
00075062 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007506A 66F6                       		bne.s	loc_71B5A
0007506C                            
0007506C 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075074 6700                       		beq.s	loc_71B82
00075076 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007507E 4E71                       		nop	
00075080 4E71                       		nop	
00075082 4E71                       		nop	
00075084 4E71                       		nop	
00075086 4E71                       		nop	
00075088 60CA                       		bra.s	sub_71B4C
0007508A                            ; ===========================================================================
0007508A                            
0007508A                            loc_71B82:
0007508A 4DF9 00FF F000             		lea	($FFF000).l,a6
00075090 422E 000E                  		clr.b	$E(a6)
00075094 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00075098 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007509C 532E 0001                  		subq.b	#1,1(a6)
000750A0 6600                       		bne.s	loc_71B9E
000750A2 4EBA 0000                  		jsr	sub_7260C(pc)
000750A6                            
000750A6                            loc_71B9E:
000750A6 102E 0004                  		move.b	4(a6),d0
000750AA 6700                       		beq.s	loc_71BA8
000750AC 4EBA 0000                  		jsr	sub_72504(pc)
000750B0                            
000750B0                            loc_71BA8:
000750B0 4A2E 0024                  		tst.b	$24(a6)
000750B4 6700                       		beq.s	loc_71BB2
000750B6 4EBA 0000                  		jsr	sub_7267C(pc)
000750BA                            
000750BA                            loc_71BB2:
000750BA 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000750BE 6700                       		beq.s	loc_71BBC	; if not, branch
000750C0 4EBA 0000                  		jsr	Sound_Play(pc)
000750C4                            
000750C4                            loc_71BBC:
000750C4 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000750CA 6700                       		beq.s	loc_71BC8
000750CC 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000750D0                            
000750D0                            loc_71BC8:
000750D0 4BEE 0040                  		lea	$40(a6),a5
000750D4 4A15                       		tst.b	(a5)
000750D6 6A00                       		bpl.s	loc_71BD4
000750D8 4EBA 0000                  		jsr	sub_71C4E(pc)
000750DC                            
000750DC                            loc_71BD4:
000750DC 422E 0008                  		clr.b	8(a6)
000750E0 7E05                       		moveq	#5,d7
000750E2                            
000750E2                            loc_71BDA:
000750E2 DAFC 0030                  		adda.w	#$30,a5
000750E6 4A15                       		tst.b	(a5)
000750E8 6A00                       		bpl.s	loc_71BE6
000750EA 4EBA 0000                  		jsr	sub_71CCA(pc)
000750EE                            
000750EE                            loc_71BE6:
000750EE 51CF FFF2                  		dbf	d7,loc_71BDA
000750F2                            
000750F2 7E02                       		moveq	#2,d7
000750F4                            
000750F4                            loc_71BEC:
000750F4 DAFC 0030                  		adda.w	#$30,a5
000750F8 4A15                       		tst.b	(a5)
000750FA 6A00                       		bpl.s	loc_71BF8
000750FC 4EBA 0000                  		jsr	sub_72850(pc)
00075100                            
00075100                            loc_71BF8:
00075100 51CF FFF2                  		dbf	d7,loc_71BEC
00075104                            
00075104 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007510A 7E02                       		moveq	#2,d7
0007510C                            
0007510C                            loc_71C04:
0007510C DAFC 0030                  		adda.w	#$30,a5
00075110 4A15                       		tst.b	(a5)
00075112 6A00                       		bpl.s	loc_71C10
00075114 4EBA 0000                  		jsr	sub_71CCA(pc)
00075118                            
00075118                            loc_71C10:
00075118 51CF FFF2                  		dbf	d7,loc_71C04
0007511C                            
0007511C 7E02                       		moveq	#2,d7
0007511E                            
0007511E                            loc_71C16:
0007511E DAFC 0030                  		adda.w	#$30,a5
00075122 4A15                       		tst.b	(a5)
00075124 6A00                       		bpl.s	loc_71C22
00075126 4EBA 0000                  		jsr	sub_72850(pc)
0007512A                            
0007512A                            loc_71C22:
0007512A 51CF FFF2                  		dbf	d7,loc_71C16
0007512E 1D7C 0040 000E             		move.b	#$40,$E(a6)
00075134 DAFC 0030                  		adda.w	#$30,a5
00075138 4A15                       		tst.b	(a5)
0007513A 6A00                       		bpl.s	loc_71C38
0007513C 4EBA 0000                  		jsr	sub_71CCA(pc)
00075140                            
00075140                            loc_71C38:
00075140 DAFC 0030                  		adda.w	#$30,a5
00075144 4A15                       		tst.b	(a5)
00075146 6A00                       		bpl.s	loc_71C44
00075148 4EBA 0000                  		jsr	sub_72850(pc)
0007514C                            
0007514C                            loc_71C44:
0007514C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075154 4E75                       		rts	
00075156                            ; End of function sub_71B4C
00075156                            
00075156                            
00075156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075156                            
00075156                            
00075156                            sub_71C4E:				; XREF: sub_71B4C
00075156 532D 000E                  		subq.b	#1,$E(a5)
0007515A 6600                       		bne.s	locret_71CAA
0007515C 1D7C 0080 0008             		move.b	#$80,8(a6)
00075162 286D 0004                  		movea.l	4(a5),a4
00075166                            
00075166                            loc_71C5E:
00075166 7A00                       		moveq	#0,d5
00075168 1A1C                       		move.b	(a4)+,d5
0007516A 0C05 00E0                  		cmpi.b	#-$20,d5
0007516E 6500                       		bcs.s	loc_71C6E
00075170 4EBA 0000                  		jsr	sub_72A5A(pc)
00075174 60F0                       		bra.s	loc_71C5E
00075176                            ; ===========================================================================
00075176                            
00075176                            loc_71C6E:
00075176 4A05                       		tst.b	d5
00075178 6A00                       		bpl.s	loc_71C84
0007517A 1B45 0010                  		move.b	d5,$10(a5)
0007517E 1A1C                       		move.b	(a4)+,d5
00075180 6A00                       		bpl.s	loc_71C84
00075182 534C                       		subq.w	#1,a4
00075184 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007518A 6000                       		bra.s	loc_71C88
0007518C                            ; ===========================================================================
0007518C                            
0007518C                            loc_71C84:
0007518C 4EBA 0000                  		jsr	sub_71D40(pc)
00075190                            
00075190                            loc_71C88:
00075190 2B4C 0004                  		move.l	a4,4(a5)
00075194 0815 0002                  		btst	#2,(a5)
00075198 6600                       		bne.s	locret_71CAA
0007519A 7000                       		moveq	#0,d0
0007519C 102D 0010                  		move.b	$10(a5),d0
000751A0 0C00 0080                  		cmpi.b	#$80,d0
000751A4 6700                       		beq.s	locret_71CAA
000751A6 0800 0003                  		btst	#3,d0
000751AA 6600                       		bne.s	loc_71CAC
000751AC 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000751B2                            
000751B2                            locret_71CAA:
000751B2 4E75                       		rts	
000751B4                            ; ===========================================================================
000751B4                            
000751B4                            loc_71CAC:
000751B4 0400 0088                  		subi.b	#$88,d0
000751B8 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000751BC 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000751C2 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000751CA 4E75                       		rts	
000751CC                            ; End of function sub_71C4E
000751CC                            
000751CC                            ; ===========================================================================
000751CC 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000751D2                            
000751D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000751D2                            
000751D2                            
000751D2                            sub_71CCA:				; XREF: sub_71B4C
000751D2 532D 000E                  		subq.b	#1,$E(a5)
000751D6 6600                       		bne.s	loc_71CE0
000751D8 0895 0004                  		bclr	#4,(a5)
000751DC 4EBA 0000                  		jsr	sub_71CEC(pc)
000751E0 4EBA 0000                  		jsr	sub_71E18(pc)
000751E4 6000 0000                  		bra.w	loc_726E2
000751E8                            ; ===========================================================================
000751E8                            
000751E8                            loc_71CE0:
000751E8 4EBA 0000                  		jsr	sub_71D9E(pc)
000751EC 4EBA 0000                  		jsr	sub_71DC6(pc)
000751F0 6000 0000                  		bra.w	loc_71E24
000751F4                            ; End of function sub_71CCA
000751F4                            
000751F4                            
000751F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000751F4                            
000751F4                            
000751F4                            sub_71CEC:				; XREF: sub_71CCA
000751F4 286D 0004                  		movea.l	4(a5),a4
000751F8 0895 0001                  		bclr	#1,(a5)
000751FC                            
000751FC                            loc_71CF4:
000751FC 7A00                       		moveq	#0,d5
000751FE 1A1C                       		move.b	(a4)+,d5
00075200 0C05 00E0                  		cmpi.b	#-$20,d5
00075204 6500                       		bcs.s	loc_71D04
00075206 4EBA 0000                  		jsr	sub_72A5A(pc)
0007520A 60F0                       		bra.s	loc_71CF4
0007520C                            ; ===========================================================================
0007520C                            
0007520C                            loc_71D04:
0007520C 4EBA 0000                  		jsr	sub_726FE(pc)
00075210 4A05                       		tst.b	d5
00075212 6A00                       		bpl.s	loc_71D1A
00075214 4EBA 0000                  		jsr	sub_71D22(pc)
00075218 1A1C                       		move.b	(a4)+,d5
0007521A 6A00                       		bpl.s	loc_71D1A
0007521C 534C                       		subq.w	#1,a4
0007521E 6000 0000                  		bra.w	sub_71D60
00075222                            ; ===========================================================================
00075222                            
00075222                            loc_71D1A:
00075222 4EBA 0000                  		jsr	sub_71D40(pc)
00075226 6000 0000                  		bra.w	sub_71D60
0007522A                            ; End of function sub_71CEC
0007522A                            
0007522A                            
0007522A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007522A                            
0007522A                            
0007522A                            sub_71D22:				; XREF: sub_71CEC
0007522A 0405 0080                  		subi.b	#$80,d5
0007522E 6700                       		beq.s	loc_71D58
00075230 DA2D 0008                  		add.b	8(a5),d5
00075234 0245 007F                  		andi.w	#$7F,d5
00075238 E34D                       		lsl.w	#1,d5
0007523A 41FA 0000                  		lea	word_72790(pc),a0
0007523E 3C30 5000                  		move.w	(a0,d5.w),d6
00075242 3B46 0010                  		move.w	d6,$10(a5)
00075246 4E75                       		rts	
00075248                            ; End of function sub_71D22
00075248                            
00075248                            
00075248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075248                            
00075248                            
00075248                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075248 1005                       		move.b	d5,d0
0007524A 122D 0002                  		move.b	2(a5),d1
0007524E                            
0007524E                            loc_71D46:
0007524E 5301                       		subq.b	#1,d1
00075250 6700                       		beq.s	loc_71D4E
00075252 D005                       		add.b	d5,d0
00075254 60F8                       		bra.s	loc_71D46
00075256                            ; ===========================================================================
00075256                            
00075256                            loc_71D4E:
00075256 1B40 000F                  		move.b	d0,$F(a5)
0007525A 1B40 000E                  		move.b	d0,$E(a5)
0007525E 4E75                       		rts	
00075260                            ; End of function sub_71D40
00075260                            
00075260                            ; ===========================================================================
00075260                            
00075260                            loc_71D58:				; XREF: sub_71D22
00075260 08D5 0001                  		bset	#1,(a5)
00075264 426D 0010                  		clr.w	$10(a5)
00075268                            
00075268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075268                            
00075268                            
00075268                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00075268 2B4C 0004                  		move.l	a4,4(a5)
0007526C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075272 0815 0004                  		btst	#4,(a5)
00075276 6600                       		bne.s	locret_71D9C
00075278 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007527E 422D 000C                  		clr.b	$C(a5)
00075282 0815 0003                  		btst	#3,(a5)
00075286 6700                       		beq.s	locret_71D9C
00075288 206D 0014                  		movea.l	$14(a5),a0
0007528C 1B58 0018                  		move.b	(a0)+,$18(a5)
00075290 1B58 0019                  		move.b	(a0)+,$19(a5)
00075294 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075298 1018                       		move.b	(a0)+,d0
0007529A E208                       		lsr.b	#1,d0
0007529C 1B40 001B                  		move.b	d0,$1B(a5)
000752A0 426D 001C                  		clr.w	$1C(a5)
000752A4                            
000752A4                            locret_71D9C:
000752A4 4E75                       		rts	
000752A6                            ; End of function sub_71D60
000752A6                            
000752A6                            
000752A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752A6                            
000752A6                            
000752A6                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000752A6 4A2D 0012                  		tst.b	$12(a5)
000752AA 6700                       		beq.s	locret_71DC4
000752AC 532D 0012                  		subq.b	#1,$12(a5)
000752B0 6600                       		bne.s	locret_71DC4
000752B2 08D5 0001                  		bset	#1,(a5)
000752B6 4A2D 0001                  		tst.b	1(a5)
000752BA 6B00 0000                  		bmi.w	loc_71DBE
000752BE 4EBA 0000                  		jsr	sub_726FE(pc)
000752C2 584F                       		addq.w	#4,sp
000752C4 4E75                       		rts	
000752C6                            ; ===========================================================================
000752C6                            
000752C6                            loc_71DBE:
000752C6 4EBA 0000                  		jsr	sub_729A0(pc)
000752CA 584F                       		addq.w	#4,sp
000752CC                            
000752CC                            locret_71DC4:
000752CC 4E75                       		rts	
000752CE                            ; End of function sub_71D9E
000752CE                            
000752CE                            
000752CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752CE                            
000752CE                            
000752CE                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000752CE 584F                       		addq.w	#4,sp
000752D0 0815 0003                  		btst	#3,(a5)
000752D4 6700                       		beq.s	locret_71E16
000752D6 4A2D 0018                  		tst.b	$18(a5)
000752DA 6700                       		beq.s	loc_71DDA
000752DC 532D 0018                  		subq.b	#1,$18(a5)
000752E0 4E75                       		rts	
000752E2                            ; ===========================================================================
000752E2                            
000752E2                            loc_71DDA:
000752E2 532D 0019                  		subq.b	#1,$19(a5)
000752E6 6700                       		beq.s	loc_71DE2
000752E8 4E75                       		rts	
000752EA                            ; ===========================================================================
000752EA                            
000752EA                            loc_71DE2:
000752EA 206D 0014                  		movea.l	$14(a5),a0
000752EE 1B68 0001 0019             		move.b	1(a0),$19(a5)
000752F4 4A2D 001B                  		tst.b	$1B(a5)
000752F8 6600                       		bne.s	loc_71DFE
000752FA 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075300 442D 001A                  		neg.b	$1A(a5)
00075304 4E75                       		rts	
00075306                            ; ===========================================================================
00075306                            
00075306                            loc_71DFE:
00075306 532D 001B                  		subq.b	#1,$1B(a5)
0007530A 1C2D 001A                  		move.b	$1A(a5),d6
0007530E 4886                       		ext.w	d6
00075310 DC6D 001C                  		add.w	$1C(a5),d6
00075314 3B46 001C                  		move.w	d6,$1C(a5)
00075318 DC6D 0010                  		add.w	$10(a5),d6
0007531C 594F                       		subq.w	#4,sp
0007531E                            
0007531E                            locret_71E16:
0007531E 4E75                       		rts	
00075320                            ; End of function sub_71DC6
00075320                            
00075320                            
00075320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075320                            
00075320                            
00075320                            sub_71E18:				; XREF: sub_71CCA
00075320 0815 0001                  		btst	#1,(a5)
00075324 6600                       		bne.s	locret_71E48
00075326 3C2D 0010                  		move.w	$10(a5),d6
0007532A 6700                       		beq.s	loc_71E4A
0007532C                            
0007532C                            loc_71E24:				; XREF: sub_71CCA
0007532C 102D 001E                  		move.b	$1E(a5),d0
00075330 4880                       		ext.w	d0
00075332 DC40                       		add.w	d0,d6
00075334 0815 0002                  		btst	#2,(a5)
00075338 6600                       		bne.s	locret_71E48
0007533A 3206                       		move.w	d6,d1
0007533C E049                       		lsr.w	#8,d1
0007533E 103C 00A4                  		move.b	#-$5C,d0
00075342 4EBA 0000                  		jsr	sub_72722(pc)
00075346 1206                       		move.b	d6,d1
00075348 103C 00A0                  		move.b	#-$60,d0
0007534C 4EBA 0000                  		jsr	sub_72722(pc)
00075350                            
00075350                            locret_71E48:
00075350 4E75                       		rts	
00075352                            ; ===========================================================================
00075352                            
00075352                            loc_71E4A:
00075352 08D5 0001                  		bset	#1,(a5)
00075356 4E75                       		rts	
00075358                            ; End of function sub_71E18
00075358                            
00075358                            ; ===========================================================================
00075358                            
00075358                            loc_71E50:				; XREF: sub_71B4C
00075358 6B00                       		bmi.s	loc_71E94
0007535A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075360 6700 0000                  		beq.w	loc_71EFE
00075364 1D7C 0002 0003             		move.b	#2,3(a6)
0007536A 7602                       		moveq	#2,d3
0007536C 103C 00B4                  		move.b	#-$4C,d0
00075370 7200                       		moveq	#0,d1
00075372                            
00075372                            loc_71E6A:
00075372 4EBA 0000                  		jsr	sub_7272E(pc)
00075376 4EBA 0000                  		jsr	sub_72764(pc)
0007537A 5200                       		addq.b	#1,d0
0007537C 51CB FFF4                  		dbf	d3,loc_71E6A
00075380                            
00075380 7602                       		moveq	#2,d3
00075382 7028                       		moveq	#$28,d0
00075384                            
00075384                            loc_71E7C:
00075384 1203                       		move.b	d3,d1
00075386 4EBA 0000                  		jsr	sub_7272E(pc)
0007538A 5801                       		addq.b	#4,d1
0007538C 4EBA 0000                  		jsr	sub_7272E(pc)
00075390 51CB FFF2                  		dbf	d3,loc_71E7C
00075394                            
00075394 4EBA 0000                  		jsr	sub_729B6(pc)
00075398 6000 FDB2                  		bra.w	loc_71C44
0007539C                            ; ===========================================================================
0007539C                            
0007539C                            loc_71E94:				; XREF: loc_71E50
0007539C 422E 0003                  		clr.b	3(a6)
000753A0 7630                       		moveq	#$30,d3
000753A2 4BEE 0040                  		lea	$40(a6),a5
000753A6 7806                       		moveq	#6,d4
000753A8                            
000753A8                            loc_71EA0:
000753A8 0815 0007                  		btst	#7,(a5)
000753AC 6700                       		beq.s	loc_71EB8
000753AE 0815 0002                  		btst	#2,(a5)
000753B2 6600                       		bne.s	loc_71EB8
000753B4 103C 00B4                  		move.b	#-$4C,d0
000753B8 122D 000A                  		move.b	$A(a5),d1
000753BC 4EBA 0000                  		jsr	sub_72722(pc)
000753C0                            
000753C0                            loc_71EB8:
000753C0 DAC3                       		adda.w	d3,a5
000753C2 51CC FFE4                  		dbf	d4,loc_71EA0
000753C6                            
000753C6 4BEE 0220                  		lea	$220(a6),a5
000753CA 7802                       		moveq	#2,d4
000753CC                            
000753CC                            loc_71EC4:
000753CC 0815 0007                  		btst	#7,(a5)
000753D0 6700                       		beq.s	loc_71EDC
000753D2 0815 0002                  		btst	#2,(a5)
000753D6 6600                       		bne.s	loc_71EDC
000753D8 103C 00B4                  		move.b	#-$4C,d0
000753DC 122D 000A                  		move.b	$A(a5),d1
000753E0 4EBA 0000                  		jsr	sub_72722(pc)
000753E4                            
000753E4                            loc_71EDC:
000753E4 DAC3                       		adda.w	d3,a5
000753E6 51CC FFE4                  		dbf	d4,loc_71EC4
000753EA                            
000753EA 4BEE 0340                  		lea	$340(a6),a5
000753EE 0815 0007                  		btst	#7,(a5)
000753F2 6700                       		beq.s	loc_71EFE
000753F4 0815 0002                  		btst	#2,(a5)
000753F8 6600                       		bne.s	loc_71EFE
000753FA 103C 00B4                  		move.b	#-$4C,d0
000753FE 122D 000A                  		move.b	$A(a5),d1
00075402 4EBA 0000                  		jsr	sub_72722(pc)
00075406                            
00075406                            loc_71EFE:
00075406 6000 FD44                  		bra.w	loc_71C44
0007540A                            
0007540A                            ; ---------------------------------------------------------------------------
0007540A                            ; Subroutine to	play a sound or	music track
0007540A                            ; ---------------------------------------------------------------------------
0007540A                            
0007540A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007540A                            
0007540A                            
0007540A                            Sound_Play:				; XREF: sub_71B4C
0007540A 2079 0007 4E98             		movea.l	(Go_SoundTypes).l,a0
00075410 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075414 1616                       		move.b	0(a6),d3
00075416 7802                       		moveq	#2,d4
00075418                            
00075418                            loc_71F12:
00075418 1011                       		move.b	(a1),d0		; move track number to d0
0007541A 1200                       		move.b	d0,d1
0007541C 4219                       		clr.b	(a1)+
0007541E 0400 0081                  		subi.b	#$81,d0
00075422 6500                       		bcs.s	loc_71F3E
00075424 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007542A 6700                       		beq.s	loc_71F2C
0007542C 1D41 000A                  		move.b	d1,$A(a6)
00075430 6000                       		bra.s	loc_71F3E
00075432                            ; ===========================================================================
00075432                            
00075432                            loc_71F2C:
00075432 0240 007F                  		andi.w	#$7F,d0
00075436 1430 0000                  		move.b	(a0,d0.w),d2
0007543A B403                       		cmp.b	d3,d2
0007543C 6500                       		bcs.s	loc_71F3E
0007543E 1602                       		move.b	d2,d3
00075440 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075444                            
00075444                            loc_71F3E:
00075444 51CC FFD2                  		dbf	d4,loc_71F12
00075448                            
00075448 4A03                       		tst.b	d3
0007544A 6B00                       		bmi.s	locret_71F4A
0007544C 1C83                       		move.b	d3,0(a6)
0007544E                            
0007544E                            locret_71F4A:
0007544E 4E75                       		rts	
00075450                            ; End of function Sound_Play
00075450                            
00075450                            
00075450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075450                            
00075450                            
00075450                            Sound_ChkValue:				; XREF: sub_71B4C
00075450 7E00                       		moveq	#0,d7
00075452 1E2E 0009                  		move.b	9(a6),d7
00075456 6700 0000                  		beq.w	Sound_E4
0007545A 6A00                       		bpl.s	locret_71F8C
0007545C 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075462 0C07 009F                  		cmpi.b	#$9F,d7
00075466 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007546A 0C07 00A0                  		cmpi.b	#$A0,d7
0007546E 6500 0000                  		bcs.w	locret_71F8C
00075472 0C07 00CF                  		cmpi.b	#$CF,d7
00075476 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007547A 0C07 00D0                  		cmpi.b	#$D0,d7
0007547E 6500 0000                  		bcs.w	locret_71F8C
00075482 0C07 00E0                  		cmpi.b	#$E0,d7
00075486 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007548A 0C07 00E4                  		cmpi.b	#$E4,d7
0007548E 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00075490                            
00075490                            locret_71F8C:
00075490 4E75                       		rts	
00075492                            ; ===========================================================================
00075492                            
00075492                            Sound_E0toE4:				; XREF: Sound_ChkValue
00075492 0407 00E0                  		subi.b	#$E0,d7
00075496 E54F                       		lsl.w	#2,d7
00075498 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007549C                            ; ===========================================================================
0007549C                            
0007549C                            Sound_ExIndex:
0007549C 6000 0000                  		bra.w	Sound_E0
000754A0                            ; ===========================================================================
000754A0 6000 0000                  		bra.w	Sound_E1
000754A4                            ; ===========================================================================
000754A4 6000 0000                  		bra.w	Sound_E2
000754A8                            ; ===========================================================================
000754A8 6000 0000                  		bra.w	Sound_E3
000754AC                            ; ===========================================================================
000754AC 6000 0000                  		bra.w	Sound_E4
000754B0                            ; ===========================================================================
000754B0                            ; ---------------------------------------------------------------------------
000754B0                            ; Play "Say-gaa" PCM sound
000754B0                            ; ---------------------------------------------------------------------------
000754B0                            
000754B0                            Sound_E1:				  
000754B0 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000754B6 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000754BC 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000754C4                            PlayPCM_Loop:	  
000754C4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000754CA 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000754CE 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000754D2 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000754D4 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000754D6 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000754DA 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000754E0 4EB8 10BA                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000754E4 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000754EA 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000754EC 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000754EE                            return_PlayPCM: 
000754EE 584F                       		addq.w	#4,sp 
000754F0 4E75                       		rts
000754F2                            ; ===========================================================================
000754F2                            ; ---------------------------------------------------------------------------
000754F2                            ; Play music track $81-$9F
000754F2                            ; ---------------------------------------------------------------------------
000754F2                            
000754F2                            Sound_81to9F:				; XREF: Sound_ChkValue
000754F2 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000754F6 6600                       		bne.s	loc_72024	; if not, branch
000754F8 4A2E 0027                  		tst.b	$27(a6)
000754FC 6600 0000                  		bne.w	loc_721B6
00075500 4BEE 0040                  		lea	$40(a6),a5
00075504 7009                       		moveq	#9,d0
00075506                            
00075506                            loc_71FE6:
00075506 0895 0002                  		bclr	#2,(a5)
0007550A DAFC 0030                  		adda.w	#$30,a5
0007550E 51C8 FFF6                  		dbf	d0,loc_71FE6
00075512                            
00075512 4BEE 0220                  		lea	$220(a6),a5
00075516 7005                       		moveq	#5,d0
00075518                            
00075518                            loc_71FF8:
00075518 0895 0007                  		bclr	#7,(a5)
0007551C DAFC 0030                  		adda.w	#$30,a5
00075520 51C8 FFF6                  		dbf	d0,loc_71FF8
00075524 4216                       		clr.b	0(a6)
00075526 204E                       		movea.l	a6,a0
00075528 43EE 03A0                  		lea	$3A0(a6),a1
0007552C 303C 0087                  		move.w	#$87,d0
00075530                            
00075530                            loc_72012:
00075530 22D8                       		move.l	(a0)+,(a1)+
00075532 51C8 FFFC                  		dbf	d0,loc_72012
00075536                            
00075536 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007553C 4216                       		clr.b	0(a6)
0007553E 6000                       		bra.s	loc_7202C
00075540                            ; ===========================================================================
00075540                            
00075540                            loc_72024:
00075540 422E 0027                  		clr.b	$27(a6)
00075544 422E 0026                  		clr.b	$26(a6)
00075548                            
00075548                            loc_7202C:
00075548 4EBA 0000                  		jsr	sub_725CA(pc)
0007554C 2879 0007 4EA8             		movea.l	(off_719A0).l,a4
00075552 0407 0081                  		subi.b	#$81,d7
00075556 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007555C 2879 0007 4EA0             		movea.l	(Go_MusicIndex).l,a4
00075562 E54F                       		lsl.w	#2,d7
00075564 2874 7000                  		movea.l	(a4,d7.w),a4
00075568 7000                       		moveq	#0,d0
0007556A 3014                       		move.w	(a4),d0
0007556C D08C                       		add.l	a4,d0
0007556E 2D40 0018                  		move.l	d0,$18(a6)
00075572 102C 0005                  		move.b	5(a4),d0
00075576 1D40 0028                  		move.b	d0,$28(a6)
0007557A 4A2E 002A                  		tst.b	$2A(a6)
0007557E 6700                       		beq.s	loc_72068
00075580 102E 0029                  		move.b	$29(a6),d0
00075584                            
00075584                            loc_72068:
00075584 1D40 0002                  		move.b	d0,2(a6)
00075588 1D40 0001                  		move.b	d0,1(a6)
0007558C 7200                       		moveq	#0,d1
0007558E 264C                       		movea.l	a4,a3
00075590 5C4C                       		addq.w	#6,a4
00075592 7E00                       		moveq	#0,d7
00075594 1E2B 0002                  		move.b	2(a3),d7
00075598 6700 0000                  		beq.w	loc_72114
0007559C 5307                       		subq.b	#1,d7
0007559E 123C 00C0                  		move.b	#-$40,d1
000755A2 182B 0004                  		move.b	4(a3),d4
000755A6 7C30                       		moveq	#$30,d6
000755A8 1A3C 0001                  		move.b	#1,d5
000755AC 43EE 0040                  		lea	$40(a6),a1
000755B0 45FA 0000                  		lea	byte_721BA(pc),a2
000755B4                            
000755B4                            loc_72098:
000755B4 08D1 0007                  		bset	#7,(a1)
000755B8 135A 0001                  		move.b	(a2)+,1(a1)
000755BC 1344 0002                  		move.b	d4,2(a1)
000755C0 1346 000D                  		move.b	d6,$D(a1)
000755C4 1341 000A                  		move.b	d1,$A(a1)
000755C8 1345 000E                  		move.b	d5,$E(a1)
000755CC 7000                       		moveq	#0,d0
000755CE 301C                       		move.w	(a4)+,d0
000755D0 D08B                       		add.l	a3,d0
000755D2 2340 0004                  		move.l	d0,4(a1)
000755D6 335C 0008                  		move.w	(a4)+,8(a1)
000755DA D2C6                       		adda.w	d6,a1
000755DC 51CF FFD6                  		dbf	d7,loc_72098
000755E0 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000755E6 6600                       		bne.s	loc_720D8
000755E8 702B                       		moveq	#$2B,d0
000755EA 7200                       		moveq	#0,d1
000755EC 4EBA 0000                  		jsr	sub_7272E(pc)
000755F0 6000 0000                  		bra.w	loc_72114
000755F4                            ; ===========================================================================
000755F4                            
000755F4                            loc_720D8:
000755F4 7028                       		moveq	#$28,d0
000755F6 7206                       		moveq	#6,d1
000755F8 4EBA 0000                  		jsr	sub_7272E(pc)
000755FC 103C 0042                  		move.b	#$42,d0
00075600 727F                       		moveq	#$7F,d1
00075602 4EBA 0000                  		jsr	sub_72764(pc)
00075606 103C 004A                  		move.b	#$4A,d0
0007560A 727F                       		moveq	#$7F,d1
0007560C 4EBA 0000                  		jsr	sub_72764(pc)
00075610 103C 0046                  		move.b	#$46,d0
00075614 727F                       		moveq	#$7F,d1
00075616 4EBA 0000                  		jsr	sub_72764(pc)
0007561A 103C 004E                  		move.b	#$4E,d0
0007561E 727F                       		moveq	#$7F,d1
00075620 4EBA 0000                  		jsr	sub_72764(pc)
00075624 103C 00B6                  		move.b	#-$4A,d0
00075628 123C 00C0                  		move.b	#-$40,d1
0007562C 4EBA 0000                  		jsr	sub_72764(pc)
00075630                            
00075630                            loc_72114:
00075630 7E00                       		moveq	#0,d7
00075632 1E2B 0003                  		move.b	3(a3),d7
00075636 6700                       		beq.s	loc_72154
00075638 5307                       		subq.b	#1,d7
0007563A 43EE 0190                  		lea	$190(a6),a1
0007563E 45FA 0000                  		lea	byte_721C2(pc),a2
00075642                            
00075642                            loc_72126:
00075642 08D1 0007                  		bset	#7,(a1)
00075646 135A 0001                  		move.b	(a2)+,1(a1)
0007564A 1344 0002                  		move.b	d4,2(a1)
0007564E 1346 000D                  		move.b	d6,$D(a1)
00075652 1345 000E                  		move.b	d5,$E(a1)
00075656 7000                       		moveq	#0,d0
00075658 301C                       		move.w	(a4)+,d0
0007565A D08B                       		add.l	a3,d0
0007565C 2340 0004                  		move.l	d0,4(a1)
00075660 335C 0008                  		move.w	(a4)+,8(a1)
00075664 101C                       		move.b	(a4)+,d0
00075666 135C 000B                  		move.b	(a4)+,$B(a1)
0007566A D2C6                       		adda.w	d6,a1
0007566C 51CF FFD4                  		dbf	d7,loc_72126
00075670                            
00075670                            loc_72154:
00075670 43EE 0220                  		lea	$220(a6),a1
00075674 7E05                       		moveq	#5,d7
00075676                            
00075676                            loc_7215A:
00075676 4A11                       		tst.b	(a1)
00075678 6A00 0000                  		bpl.w	loc_7217C
0007567C 7000                       		moveq	#0,d0
0007567E 1029 0001                  		move.b	1(a1),d0
00075682 6B00                       		bmi.s	loc_7216E
00075684 5500                       		subq.b	#2,d0
00075686 E508                       		lsl.b	#2,d0
00075688 6000                       		bra.s	loc_72170
0007568A                            ; ===========================================================================
0007568A                            
0007568A                            loc_7216E:
0007568A E608                       		lsr.b	#3,d0
0007568C                            
0007568C                            loc_72170:
0007568C 41FA 0000                  		lea	dword_722CC(pc),a0
00075690 2070 0000                  		movea.l	(a0,d0.w),a0
00075694 08D0 0002                  		bset	#2,(a0)
00075698                            
00075698                            loc_7217C:
00075698 D2C6                       		adda.w	d6,a1
0007569A 51CF FFDA                  		dbf	d7,loc_7215A
0007569E                            
0007569E 4A6E 0340                  		tst.w	$340(a6)
000756A2 6A00                       		bpl.s	loc_7218E
000756A4 08EE 0002 0100             		bset	#2,$100(a6)
000756AA                            
000756AA                            loc_7218E:
000756AA 4A6E 0370                  		tst.w	$370(a6)
000756AE 6A00                       		bpl.s	loc_7219A
000756B0 08EE 0002 01F0             		bset	#2,$1F0(a6)
000756B6                            
000756B6                            loc_7219A:
000756B6 4BEE 0070                  		lea	$70(a6),a5
000756BA 7805                       		moveq	#5,d4
000756BC                            
000756BC                            loc_721A0:
000756BC 4EBA 0000                  		jsr	sub_726FE(pc)
000756C0 DAC6                       		adda.w	d6,a5
000756C2 51CC FFF8                  		dbf	d4,loc_721A0
000756C6 7802                       		moveq	#2,d4
000756C8                            
000756C8                            loc_721AC:
000756C8 4EBA 0000                  		jsr	sub_729A0(pc)
000756CC DAC6                       		adda.w	d6,a5
000756CE 51CC FFF8                  		dbf	d4,loc_721AC
000756D2                            
000756D2                            loc_721B6:
000756D2 584F                       		addq.w	#4,sp
000756D4 4E75                       		rts	
000756D6                            ; ===========================================================================
000756D6 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000756DE                            		even
000756DE 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000756E2                            		even
000756E2                            ; ===========================================================================
000756E2                            ; ---------------------------------------------------------------------------
000756E2                            ; Play normal sound effect
000756E2                            ; ---------------------------------------------------------------------------
000756E2                            
000756E2                            Sound_A0toCF:				; XREF: Sound_ChkValue
000756E2 4A2E 0027                  		tst.b	$27(a6)
000756E6 6600 0000                  		bne.w	loc_722C6
000756EA 4A2E 0004                  		tst.b	4(a6)
000756EE 6600 0000                  		bne.w	loc_722C6
000756F2 4A2E 0024                  		tst.b	$24(a6)
000756F6 6600 0000                  		bne.w	loc_722C6
000756FA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000756FE 6600                       		bne.s	Sound_notB5	; if not, branch
00075700 4A2E 002B                  		tst.b	$2B(a6)
00075704 6600                       		bne.s	loc_721EE
00075706 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007570A                            
0007570A                            loc_721EE:
0007570A 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075710                            
00075710                            Sound_notB5:
00075710 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075714 6600                       		bne.s	Sound_notA7	; if not, branch
00075716 4A2E 002C                  		tst.b	$2C(a6)
0007571A 6600 0000                  		bne.w	locret_722C4
0007571E 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075724                            
00075724                            Sound_notA7:
00075724 2079 0007 4EA4             		movea.l	(Go_SoundIndex).l,a0
0007572A 0407 00A0                  		subi.b	#$A0,d7
0007572E E54F                       		lsl.w	#2,d7
00075730 2670 7000                  		movea.l	(a0,d7.w),a3
00075734 224B                       		movea.l	a3,a1
00075736 7200                       		moveq	#0,d1
00075738 3219                       		move.w	(a1)+,d1
0007573A D28B                       		add.l	a3,d1
0007573C 1A19                       		move.b	(a1)+,d5
0007573E 1E19                       		move.b	(a1)+,d7
00075740 5307                       		subq.b	#1,d7
00075742 7C30                       		moveq	#$30,d6
00075744                            
00075744                            loc_72228:
00075744 7600                       		moveq	#0,d3
00075746 1629 0001                  		move.b	1(a1),d3
0007574A 1803                       		move.b	d3,d4
0007574C 6B00                       		bmi.s	loc_72244
0007574E 5543                       		subq.w	#2,d3
00075750 E54B                       		lsl.w	#2,d3
00075752 4BFA 0000                  		lea	dword_722CC(pc),a5
00075756 2A75 3000                  		movea.l	(a5,d3.w),a5
0007575A 08D5 0002                  		bset	#2,(a5)
0007575E 6000                       		bra.s	loc_7226E
00075760                            ; ===========================================================================
00075760                            
00075760                            loc_72244:
00075760 E64B                       		lsr.w	#3,d3
00075762 4BFA 0000                  		lea	dword_722CC(pc),a5
00075766 2A75 3000                  		movea.l	(a5,d3.w),a5
0007576A 08D5 0002                  		bset	#2,(a5)
0007576E 0C04 00C0                  		cmpi.b	#$C0,d4
00075772 6600                       		bne.s	loc_7226E
00075774 1004                       		move.b	d4,d0
00075776 0000 001F                  		ori.b	#$1F,d0
0007577A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075780 0840 0005                  		bchg	#5,d0
00075784 13C0 00C0 0011             		move.b	d0,($C00011).l
0007578A                            
0007578A                            loc_7226E:
0007578A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007578E 244D                       		movea.l	a5,a2
00075790 700B                       		moveq	#$B,d0
00075792                            
00075792                            loc_72276:
00075792 429A                       		clr.l	(a2)+
00075794 51C8 FFFC                  		dbf	d0,loc_72276
00075798                            
00075798 3A99                       		move.w	(a1)+,(a5)
0007579A 1B45 0002                  		move.b	d5,2(a5)
0007579E 7000                       		moveq	#0,d0
000757A0 3019                       		move.w	(a1)+,d0
000757A2 D08B                       		add.l	a3,d0
000757A4 2B40 0004                  		move.l	d0,4(a5)
000757A8 3B59 0008                  		move.w	(a1)+,8(a5)
000757AC 1B7C 0001 000E             		move.b	#1,$E(a5)
000757B2 1B46 000D                  		move.b	d6,$D(a5)
000757B6 4A04                       		tst.b	d4
000757B8 6B00                       		bmi.s	loc_722A8
000757BA 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000757C0 2B41 0020                  		move.l	d1,$20(a5)
000757C4                            
000757C4                            loc_722A8:
000757C4 51CF FF7E                  		dbf	d7,loc_72228
000757C8                            
000757C8 4A2E 0250                  		tst.b	$250(a6)
000757CC 6A00                       		bpl.s	loc_722B8
000757CE 08EE 0002 0340             		bset	#2,$340(a6)
000757D4                            
000757D4                            loc_722B8:
000757D4 4A2E 0310                  		tst.b	$310(a6)
000757D8 6A00                       		bpl.s	locret_722C4
000757DA 08EE 0002 0370             		bset	#2,$370(a6)
000757E0                            
000757E0                            locret_722C4:
000757E0 4E75                       		rts	
000757E2                            ; ===========================================================================
000757E2                            
000757E2                            loc_722C6:
000757E2 4216                       		clr.b	0(a6)
000757E4 4E75                       		rts	
000757E6                            ; ===========================================================================
000757E6 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000757EA 0000 0000                  		dc.l 0
000757EE 00FF F100                  		dc.l $FFF100
000757F2 00FF F130                  		dc.l $FFF130
000757F6 00FF F190                  		dc.l $FFF190
000757FA 00FF F1C0                  		dc.l $FFF1C0
000757FE 00FF F1F0                  		dc.l $FFF1F0
00075802 00FF F1F0                  		dc.l $FFF1F0
00075806 00FF F220                  dword_722EC:	dc.l $FFF220
0007580A 0000 0000                  		dc.l 0
0007580E 00FF F250                  		dc.l $FFF250
00075812 00FF F280                  		dc.l $FFF280
00075816 00FF F2B0                  		dc.l $FFF2B0
0007581A 00FF F2E0                  		dc.l $FFF2E0
0007581E 00FF F310                  		dc.l $FFF310
00075822 00FF F310                  		dc.l $FFF310
00075826                            ; ===========================================================================
00075826                            ; ---------------------------------------------------------------------------
00075826                            ; Play GHZ waterfall sound
00075826                            ; ---------------------------------------------------------------------------
00075826                            
00075826                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075826 4A2E 0027                  		tst.b	$27(a6)
0007582A 6600 0000                  		bne.w	locret_723C6
0007582E 4A2E 0004                  		tst.b	4(a6)
00075832 6600 0000                  		bne.w	locret_723C6
00075836 4A2E 0024                  		tst.b	$24(a6)
0007583A 6600 0000                  		bne.w	locret_723C6
0007583E 2079 0007 4E9C             		movea.l	(Go_SoundD0).l,a0
00075844 0407 00D0                  		subi.b	#$D0,d7
00075848 E54F                       		lsl.w	#2,d7
0007584A 2670 7000                  		movea.l	(a0,d7.w),a3
0007584E 224B                       		movea.l	a3,a1
00075850 7000                       		moveq	#0,d0
00075852 3019                       		move.w	(a1)+,d0
00075854 D08B                       		add.l	a3,d0
00075856 2D40 0020                  		move.l	d0,$20(a6)
0007585A 1A19                       		move.b	(a1)+,d5
0007585C 1E19                       		move.b	(a1)+,d7
0007585E 5307                       		subq.b	#1,d7
00075860 7C30                       		moveq	#$30,d6
00075862                            
00075862                            loc_72348:
00075862 1829 0001                  		move.b	1(a1),d4
00075866 6B00                       		bmi.s	loc_7235A
00075868 08EE 0002 0100             		bset	#2,$100(a6)
0007586E 4BEE 0340                  		lea	$340(a6),a5
00075872 6000                       		bra.s	loc_72364
00075874                            ; ===========================================================================
00075874                            
00075874                            loc_7235A:
00075874 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007587A 4BEE 0370                  		lea	$370(a6),a5
0007587E                            
0007587E                            loc_72364:
0007587E 244D                       		movea.l	a5,a2
00075880 700B                       		moveq	#$B,d0
00075882                            
00075882                            loc_72368:
00075882 429A                       		clr.l	(a2)+
00075884 51C8 FFFC                  		dbf	d0,loc_72368
00075888                            
00075888 3A99                       		move.w	(a1)+,(a5)
0007588A 1B45 0002                  		move.b	d5,2(a5)
0007588E 7000                       		moveq	#0,d0
00075890 3019                       		move.w	(a1)+,d0
00075892 D08B                       		add.l	a3,d0
00075894 2B40 0004                  		move.l	d0,4(a5)
00075898 3B59 0008                  		move.w	(a1)+,8(a5)
0007589C 1B7C 0001 000E             		move.b	#1,$E(a5)
000758A2 1B46 000D                  		move.b	d6,$D(a5)
000758A6 4A04                       		tst.b	d4
000758A8 6B00                       		bmi.s	loc_72396
000758AA 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000758B0                            
000758B0                            loc_72396:
000758B0 51CF FFB0                  		dbf	d7,loc_72348
000758B4                            
000758B4 4A2E 0250                  		tst.b	$250(a6)
000758B8 6A00                       		bpl.s	loc_723A6
000758BA 08EE 0002 0340             		bset	#2,$340(a6)
000758C0                            
000758C0                            loc_723A6:
000758C0 4A2E 0310                  		tst.b	$310(a6)
000758C4 6A00                       		bpl.s	locret_723C6
000758C6 08EE 0002 0370             		bset	#2,$370(a6)
000758CC 0004 001F                  		ori.b	#$1F,d4
000758D0 13C4 00C0 0011             		move.b	d4,($C00011).l
000758D6 0844 0005                  		bchg	#5,d4
000758DA 13C4 00C0 0011             		move.b	d4,($C00011).l
000758E0                            
000758E0                            locret_723C6:
000758E0 4E75                       		rts	
000758E2                            ; End of function Sound_ChkValue
000758E2                            
000758E2                            ; ===========================================================================
000758E2 00FF F100                  		dc.l $FFF100
000758E6 00FF F1F0                  		dc.l $FFF1F0
000758EA 00FF F250                  		dc.l $FFF250
000758EE 00FF F310                  		dc.l $FFF310
000758F2 00FF F340                  		dc.l $FFF340
000758F6 00FF F370                  		dc.l $FFF370
000758FA                            
000758FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758FA                            
000758FA                            
000758FA                            Snd_FadeOut1:				; XREF: Sound_E0
000758FA 4216                       		clr.b	0(a6)
000758FC 4BEE 0220                  		lea	$220(a6),a5
00075900 7E05                       		moveq	#5,d7
00075902                            
00075902                            loc_723EA:
00075902 4A15                       		tst.b	(a5)
00075904 6A00 0000                  		bpl.w	loc_72472
00075908 0895 0007                  		bclr	#7,(a5)
0007590C 7600                       		moveq	#0,d3
0007590E 162D 0001                  		move.b	1(a5),d3
00075912 6B00                       		bmi.s	loc_7243C
00075914 4EBA 0000                  		jsr	sub_726FE(pc)
00075918 0C03 0004                  		cmpi.b	#4,d3
0007591C 6600                       		bne.s	loc_72416
0007591E 4A2E 0340                  		tst.b	$340(a6)
00075922 6A00                       		bpl.s	loc_72416
00075924 4BEE 0340                  		lea	$340(a6),a5
00075928 226E 0020                  		movea.l	$20(a6),a1
0007592C 6000                       		bra.s	loc_72428
0007592E                            ; ===========================================================================
0007592E                            
0007592E                            loc_72416:
0007592E 5503                       		subq.b	#2,d3
00075930 E50B                       		lsl.b	#2,d3
00075932 41FA FEB2                  		lea	dword_722CC(pc),a0
00075936 264D                       		movea.l	a5,a3
00075938 2A70 3000                  		movea.l	(a0,d3.w),a5
0007593C 226E 0018                  		movea.l	$18(a6),a1
00075940                            
00075940                            loc_72428:
00075940 0895 0002                  		bclr	#2,(a5)
00075944 08D5 0001                  		bset	#1,(a5)
00075948 102D 000B                  		move.b	$B(a5),d0
0007594C 4EBA 0000                  		jsr	sub_72C4E(pc)
00075950 2A4B                       		movea.l	a3,a5
00075952 6000                       		bra.s	loc_72472
00075954                            ; ===========================================================================
00075954                            
00075954                            loc_7243C:
00075954 4EBA 0000                  		jsr	sub_729A0(pc)
00075958 41EE 0370                  		lea	$370(a6),a0
0007595C 0C03 00E0                  		cmpi.b	#$E0,d3
00075960 6700                       		beq.s	loc_7245A
00075962 0C03 00C0                  		cmpi.b	#$C0,d3
00075966 6700                       		beq.s	loc_7245A
00075968 E60B                       		lsr.b	#3,d3
0007596A 41FA FE7A                  		lea	dword_722CC(pc),a0
0007596E 2070 3000                  		movea.l	(a0,d3.w),a0
00075972                            
00075972                            loc_7245A:
00075972 0890 0002                  		bclr	#2,(a0)
00075976 08D0 0001                  		bset	#1,(a0)
0007597A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075980 6600                       		bne.s	loc_72472
00075982 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007598A                            
0007598A                            loc_72472:
0007598A DAFC 0030                  		adda.w	#$30,a5
0007598E 51CF FF72                  		dbf	d7,loc_723EA
00075992                            
00075992 4E75                       		rts	
00075994                            ; End of function Snd_FadeOut1
00075994                            
00075994                            
00075994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075994                            
00075994                            
00075994                            Snd_FadeOut2:				; XREF: Sound_E0
00075994 4BEE 0340                  		lea	$340(a6),a5
00075998 4A15                       		tst.b	(a5)
0007599A 6A00                       		bpl.s	loc_724AE
0007599C 0895 0007                  		bclr	#7,(a5)
000759A0 0815 0002                  		btst	#2,(a5)
000759A4 6600                       		bne.s	loc_724AE
000759A6 4EBA 0000                  		jsr	loc_7270A(pc)
000759AA 4BEE 0100                  		lea	$100(a6),a5
000759AE 0895 0002                  		bclr	#2,(a5)
000759B2 08D5 0001                  		bset	#1,(a5)
000759B6 4A15                       		tst.b	(a5)
000759B8 6A00                       		bpl.s	loc_724AE
000759BA 226E 0018                  		movea.l	$18(a6),a1
000759BE 102D 000B                  		move.b	$B(a5),d0
000759C2 4EBA 0000                  		jsr	sub_72C4E(pc)
000759C6                            
000759C6                            loc_724AE:
000759C6 4BEE 0370                  		lea	$370(a6),a5
000759CA 4A15                       		tst.b	(a5)
000759CC 6A00                       		bpl.s	locret_724E4
000759CE 0895 0007                  		bclr	#7,(a5)
000759D2 0815 0002                  		btst	#2,(a5)
000759D6 6600                       		bne.s	locret_724E4
000759D8 4EBA 0000                  		jsr	loc_729A6(pc)
000759DC 4BEE 01F0                  		lea	$1F0(a6),a5
000759E0 0895 0002                  		bclr	#2,(a5)
000759E4 08D5 0001                  		bset	#1,(a5)
000759E8 4A15                       		tst.b	(a5)
000759EA 6A00                       		bpl.s	locret_724E4
000759EC 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000759F2 6600                       		bne.s	locret_724E4
000759F4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000759FC                            
000759FC                            locret_724E4:
000759FC 4E75                       		rts	
000759FE                            ; End of function Snd_FadeOut2
000759FE                            
000759FE                            ; ===========================================================================
000759FE                            ; ---------------------------------------------------------------------------
000759FE                            ; Fade out music
000759FE                            ; ---------------------------------------------------------------------------
000759FE                            
000759FE                            Sound_E0:				; XREF: Sound_ExIndex
000759FE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075A02 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075A06 1D7C 0003 0006             		move.b	#3,6(a6)
00075A0C 1D7C 0028 0004             		move.b	#$28,4(a6)
00075A12 422E 0040                  		clr.b	$40(a6)
00075A16 422E 002A                  		clr.b	$2A(a6)
00075A1A 4E75                       		rts	
00075A1C                            
00075A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A1C                            
00075A1C                            
00075A1C                            sub_72504:				; XREF: sub_71B4C
00075A1C 102E 0006                  		move.b	6(a6),d0
00075A20 6700                       		beq.s	loc_72510
00075A22 532E 0006                  		subq.b	#1,6(a6)
00075A26 4E75                       		rts	
00075A28                            ; ===========================================================================
00075A28                            
00075A28                            loc_72510:
00075A28 532E 0004                  		subq.b	#1,4(a6)
00075A2C 6700 0000                  		beq.w	Sound_E4
00075A30 1D7C 0003 0006             		move.b	#3,6(a6)
00075A36 4BEE 0070                  		lea	$70(a6),a5
00075A3A 7E05                       		moveq	#5,d7
00075A3C                            
00075A3C                            loc_72524:
00075A3C 4A15                       		tst.b	(a5)
00075A3E 6A00                       		bpl.s	loc_72538
00075A40 522D 0009                  		addq.b	#1,9(a5)
00075A44 6A00                       		bpl.s	loc_72534
00075A46 0895 0007                  		bclr	#7,(a5)
00075A4A 6000                       		bra.s	loc_72538
00075A4C                            ; ===========================================================================
00075A4C                            
00075A4C                            loc_72534:
00075A4C 4EBA 0000                  		jsr	sub_72CB4(pc)
00075A50                            
00075A50                            loc_72538:
00075A50 DAFC 0030                  		adda.w	#$30,a5
00075A54 51CF FFE6                  		dbf	d7,loc_72524
00075A58                            
00075A58 7E02                       		moveq	#2,d7
00075A5A                            
00075A5A                            loc_72542:
00075A5A 4A15                       		tst.b	(a5)
00075A5C 6A00                       		bpl.s	loc_72560
00075A5E 522D 0009                  		addq.b	#1,9(a5)
00075A62 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075A68 6500                       		bcs.s	loc_72558
00075A6A 0895 0007                  		bclr	#7,(a5)
00075A6E 6000                       		bra.s	loc_72560
00075A70                            ; ===========================================================================
00075A70                            
00075A70                            loc_72558:
00075A70 1C2D 0009                  		move.b	9(a5),d6
00075A74 4EBA 0000                  		jsr	sub_7296A(pc)
00075A78                            
00075A78                            loc_72560:
00075A78 DAFC 0030                  		adda.w	#$30,a5
00075A7C 51CF FFDC                  		dbf	d7,loc_72542
00075A80                            
00075A80 4E75                       		rts	
00075A82                            ; End of function sub_72504
00075A82                            
00075A82                            
00075A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A82                            
00075A82                            
00075A82                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075A82 7602                       		moveq	#2,d3
00075A84 7028                       		moveq	#$28,d0
00075A86                            
00075A86                            loc_7256E:
00075A86 1203                       		move.b	d3,d1
00075A88 4EBA 0000                  		jsr	sub_7272E(pc)
00075A8C 5801                       		addq.b	#4,d1
00075A8E 4EBA 0000                  		jsr	sub_7272E(pc)
00075A92 51CB FFF2                  		dbf	d3,loc_7256E
00075A96                            
00075A96 7040                       		moveq	#$40,d0
00075A98 727F                       		moveq	#$7F,d1
00075A9A 7802                       		moveq	#2,d4
00075A9C                            
00075A9C                            loc_72584:
00075A9C 7603                       		moveq	#3,d3
00075A9E                            
00075A9E                            loc_72586:
00075A9E 4EBA 0000                  		jsr	sub_7272E(pc)
00075AA2 4EBA 0000                  		jsr	sub_72764(pc)
00075AA6 5840                       		addq.w	#4,d0
00075AA8 51CB FFF4                  		dbf	d3,loc_72586
00075AAC                            
00075AAC 0400 000F                  		subi.b	#$F,d0
00075AB0 51CC FFEA                  		dbf	d4,loc_72584
00075AB4                            
00075AB4 4E75                       		rts	
00075AB6                            ; End of function sub_7256A
00075AB6                            
00075AB6                            ; ===========================================================================
00075AB6                            ; ---------------------------------------------------------------------------
00075AB6                            ; Stop music
00075AB6                            ; ---------------------------------------------------------------------------
00075AB6                            
00075AB6                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075AB6 702B                       		moveq	#$2B,d0
00075AB8 123C 0080                  		move.b	#$80,d1
00075ABC 4EBA 0000                  		jsr	sub_7272E(pc)
00075AC0 7027                       		moveq	#$27,d0
00075AC2 7200                       		moveq	#0,d1
00075AC4 4EBA 0000                  		jsr	sub_7272E(pc)
00075AC8 204E                       		movea.l	a6,a0
00075ACA 303C 00E3                  		move.w	#$E3,d0
00075ACE                            
00075ACE                            loc_725B6:
00075ACE 4298                       		clr.l	(a0)+
00075AD0 51C8 FFFC                  		dbf	d0,loc_725B6
00075AD4                            
00075AD4 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00075ADA 4EBA FFA6                  		jsr	sub_7256A(pc)
00075ADE 6000 0000                  		bra.w	sub_729B6
00075AE2                            
00075AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AE2                            
00075AE2                            
00075AE2                            sub_725CA:				; XREF: Sound_ChkValue
00075AE2 204E                       		movea.l	a6,a0
00075AE4 1216                       		move.b	0(a6),d1
00075AE6 142E 0027                  		move.b	$27(a6),d2
00075AEA 162E 002A                  		move.b	$2A(a6),d3
00075AEE 182E 0026                  		move.b	$26(a6),d4
00075AF2 3A2E 000A                  		move.w	$A(a6),d5
00075AF6 303C 0087                  		move.w	#$87,d0
00075AFA                            
00075AFA                            loc_725E4:
00075AFA 4298                       		clr.l	(a0)+
00075AFC 51C8 FFFC                  		dbf	d0,loc_725E4
00075B00                            
00075B00 1C81                       		move.b	d1,0(a6)
00075B02 1D42 0027                  		move.b	d2,$27(a6)
00075B06 1D43 002A                  		move.b	d3,$2A(a6)
00075B0A 1D44 0026                  		move.b	d4,$26(a6)
00075B0E 3D45 000A                  		move.w	d5,$A(a6)
00075B12 1D7C 0080 0009             		move.b	#$80,9(a6)
00075B18 4EBA FF68                  		jsr	sub_7256A(pc)
00075B1C 6000 0000                  		bra.w	sub_729B6
00075B20                            ; End of function sub_725CA
00075B20                            
00075B20                            
00075B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B20                            
00075B20                            
00075B20                            sub_7260C:				; XREF: sub_71B4C
00075B20 1D6E 0002 0001             		move.b	2(a6),1(a6)
00075B26 41EE 004E                  		lea	$4E(a6),a0
00075B2A 7030                       		moveq	#$30,d0
00075B2C 7209                       		moveq	#9,d1
00075B2E                            
00075B2E                            loc_7261A:
00075B2E 5210                       		addq.b	#1,(a0)
00075B30 D0C0                       		adda.w	d0,a0
00075B32 51C9 FFFA                  		dbf	d1,loc_7261A
00075B36                            
00075B36 4E75                       		rts	
00075B38                            ; End of function sub_7260C
00075B38                            
00075B38                            ; ===========================================================================
00075B38                            ; ---------------------------------------------------------------------------
00075B38                            ; Speed	up music
00075B38                            ; ---------------------------------------------------------------------------
00075B38                            
00075B38                            Sound_E2:				; XREF: Sound_ExIndex
00075B38 4A2E 0027                  		tst.b	$27(a6)
00075B3C 6600                       		bne.s	loc_7263E
00075B3E 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00075B44 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00075B4A 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00075B50 4E75                       		rts	
00075B52                            ; ===========================================================================
00075B52                            
00075B52                            loc_7263E:
00075B52 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00075B58 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00075B5E 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00075B64 4E75                       		rts	
00075B66                            ; ===========================================================================
00075B66                            ; ---------------------------------------------------------------------------
00075B66                            ; Change music back to normal speed
00075B66                            ; ---------------------------------------------------------------------------
00075B66                            
00075B66                            Sound_E3:				; XREF: Sound_ExIndex
00075B66 4A2E 0027                  		tst.b	$27(a6)
00075B6A 6600                       		bne.s	loc_7266A
00075B6C 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00075B72 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00075B78 422E 002A                  		clr.b	$2A(a6)
00075B7C 4E75                       		rts	
00075B7E                            ; ===========================================================================
00075B7E                            
00075B7E                            loc_7266A:
00075B7E 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00075B84 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00075B8A 422E 03CA                  		clr.b	$3CA(a6)
00075B8E 4E75                       		rts	
00075B90                            
00075B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B90                            
00075B90                            
00075B90                            sub_7267C:				; XREF: sub_71B4C
00075B90 4A2E 0025                  		tst.b	$25(a6)
00075B94 6700                       		beq.s	loc_72688
00075B96 532E 0025                  		subq.b	#1,$25(a6)
00075B9A 4E75                       		rts	
00075B9C                            ; ===========================================================================
00075B9C                            
00075B9C                            loc_72688:
00075B9C 4A2E 0026                  		tst.b	$26(a6)
00075BA0 6700                       		beq.s	loc_726D6
00075BA2 532E 0026                  		subq.b	#1,$26(a6)
00075BA6 1D7C 0002 0025             		move.b	#2,$25(a6)
00075BAC 4BEE 0070                  		lea	$70(a6),a5
00075BB0 7E05                       		moveq	#5,d7
00075BB2                            
00075BB2                            loc_7269E:
00075BB2 4A15                       		tst.b	(a5)
00075BB4 6A00                       		bpl.s	loc_726AA
00075BB6 532D 0009                  		subq.b	#1,9(a5)
00075BBA 4EBA 0000                  		jsr	sub_72CB4(pc)
00075BBE                            
00075BBE                            loc_726AA:
00075BBE DAFC 0030                  		adda.w	#$30,a5
00075BC2 51CF FFEE                  		dbf	d7,loc_7269E
00075BC6 7E02                       		moveq	#2,d7
00075BC8                            
00075BC8                            loc_726B4:
00075BC8 4A15                       		tst.b	(a5)
00075BCA 6A00                       		bpl.s	loc_726CC
00075BCC 532D 0009                  		subq.b	#1,9(a5)
00075BD0 1C2D 0009                  		move.b	9(a5),d6
00075BD4 0C06 0010                  		cmpi.b	#$10,d6
00075BD8 6500                       		bcs.s	loc_726C8
00075BDA 7C0F                       		moveq	#$F,d6
00075BDC                            
00075BDC                            loc_726C8:
00075BDC 4EBA 0000                  		jsr	sub_7296A(pc)
00075BE0                            
00075BE0                            loc_726CC:
00075BE0 DAFC 0030                  		adda.w	#$30,a5
00075BE4 51CF FFE2                  		dbf	d7,loc_726B4
00075BE8 4E75                       		rts	
00075BEA                            ; ===========================================================================
00075BEA                            
00075BEA                            loc_726D6:
00075BEA 08AE 0002 0040             		bclr	#2,$40(a6)
00075BF0 422E 0024                  		clr.b	$24(a6)
00075BF4 4E75                       		rts	
00075BF6                            ; End of function sub_7267C
00075BF6                            
00075BF6                            ; ===========================================================================
00075BF6                            
00075BF6                            loc_726E2:				; XREF: sub_71CCA
00075BF6 0815 0001                  		btst	#1,(a5)
00075BFA 6600                       		bne.s	locret_726FC
00075BFC 0815 0002                  		btst	#2,(a5)
00075C00 6600                       		bne.s	locret_726FC
00075C02 7028                       		moveq	#$28,d0
00075C04 122D 0001                  		move.b	1(a5),d1
00075C08 0001 00F0                  		ori.b	#-$10,d1
00075C0C 6000 0000                  		bra.w	sub_7272E
00075C10                            ; ===========================================================================
00075C10                            
00075C10                            locret_726FC:
00075C10 4E75                       		rts	
00075C12                            
00075C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C12                            
00075C12                            
00075C12                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00075C12 0815 0004                  		btst	#4,(a5)
00075C16 6600                       		bne.s	locret_72714
00075C18 0815 0002                  		btst	#2,(a5)
00075C1C 6600                       		bne.s	locret_72714
00075C1E                            
00075C1E                            loc_7270A:				; XREF: Snd_FadeOut2
00075C1E 7028                       		moveq	#$28,d0
00075C20 122D 0001                  		move.b	1(a5),d1
00075C24 6000 0000                  		bra.w	sub_7272E
00075C28                            ; ===========================================================================
00075C28                            
00075C28                            locret_72714:
00075C28 4E75                       		rts	
00075C2A                            ; End of function sub_726FE
00075C2A                            
00075C2A                            ; ===========================================================================
00075C2A                            
00075C2A                            loc_72716:				; XREF: sub_72A5A
00075C2A 0815 0002                  		btst	#2,(a5)
00075C2E 6600                       		bne.s	locret_72720
00075C30 6000 0000                  		bra.w	sub_72722
00075C34                            ; ===========================================================================
00075C34                            
00075C34                            locret_72720:
00075C34 4E75                       		rts	
00075C36                            
00075C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C36                            
00075C36                            
00075C36                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00075C36 082D 0002 0001             		btst	#2,1(a5)
00075C3C 6600                       		bne.s	loc_7275A
00075C3E D02D 0001                  		add.b	1(a5),d0
00075C42                            ; End of function sub_72722
00075C42                            
00075C42                            
00075C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C42                            
00075C42                            
00075C42                            sub_7272E:				; XREF: loc_71E6A
00075C42 1439 00A0 4000             		move.b	($A04000).l,d2
00075C48 0802 0007                  		btst	#7,d2
00075C4C 66F4                       		bne.s	sub_7272E
00075C4E 13C0 00A0 4000             		move.b	d0,($A04000).l
00075C54 4E71                       		nop	
00075C56 4E71                       		nop	
00075C58 4E71                       		nop	
00075C5A                            
00075C5A                            loc_72746:
00075C5A 1439 00A0 4000             		move.b	($A04000).l,d2
00075C60 0802 0007                  		btst	#7,d2
00075C64 66F4                       		bne.s	loc_72746
00075C66                            
00075C66 13C1 00A0 4001             		move.b	d1,($A04001).l
00075C6C 4E75                       		rts	
00075C6E                            ; End of function sub_7272E
00075C6E                            
00075C6E                            ; ===========================================================================
00075C6E                            
00075C6E                            loc_7275A:				; XREF: sub_72722
00075C6E 142D 0001                  		move.b	1(a5),d2
00075C72 0882 0002                  		bclr	#2,d2
00075C76 D002                       		add.b	d2,d0
00075C78                            
00075C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C78                            
00075C78                            
00075C78                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075C78 1439 00A0 4000             		move.b	($A04000).l,d2
00075C7E 0802 0007                  		btst	#7,d2
00075C82 66F4                       		bne.s	sub_72764
00075C84 13C0 00A0 4002             		move.b	d0,($A04002).l
00075C8A 4E71                       		nop	
00075C8C 4E71                       		nop	
00075C8E 4E71                       		nop	
00075C90                            
00075C90                            loc_7277C:
00075C90 1439 00A0 4000             		move.b	($A04000).l,d2
00075C96 0802 0007                  		btst	#7,d2
00075C9A 66F4                       		bne.s	loc_7277C
00075C9C                            
00075C9C 13C1 00A0 4003             		move.b	d1,($A04003).l
00075CA2 4E75                       		rts	
00075CA4                            ; End of function sub_72764
00075CA4                            
00075CA4                            ; ===========================================================================
00075CA4 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00075CB6 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075CC8 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075CD8 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00075CE8 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00075CF8 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00075D08 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00075D18 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00075D28 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00075D38 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00075D48 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075D58 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00075D64                            
00075D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D64                            
00075D64                            
00075D64                            sub_72850:				; XREF: sub_71B4C
00075D64 532D 000E                  		subq.b	#1,$E(a5)
00075D68 6600                       		bne.s	loc_72866
00075D6A 0895 0004                  		bclr	#4,(a5)
00075D6E 4EBA 0000                  		jsr	sub_72878(pc)
00075D72 4EBA 0000                  		jsr	sub_728DC(pc)
00075D76 6000 0000                  		bra.w	loc_7292E
00075D7A                            ; ===========================================================================
00075D7A                            
00075D7A                            loc_72866:
00075D7A 4EBA F52A                  		jsr	sub_71D9E(pc)
00075D7E 4EBA 0000                  		jsr	sub_72926(pc)
00075D82 4EBA F54A                  		jsr	sub_71DC6(pc)
00075D86 4EBA 0000                  		jsr	sub_728E2(pc)
00075D8A 4E75                       		rts	
00075D8C                            ; End of function sub_72850
00075D8C                            
00075D8C                            
00075D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D8C                            
00075D8C                            
00075D8C                            sub_72878:				; XREF: sub_72850
00075D8C 0895 0001                  		bclr	#1,(a5)
00075D90 286D 0004                  		movea.l	4(a5),a4
00075D94                            
00075D94                            loc_72880:
00075D94 7A00                       		moveq	#0,d5
00075D96 1A1C                       		move.b	(a4)+,d5
00075D98 0C05 00E0                  		cmpi.b	#$E0,d5
00075D9C 6500                       		bcs.s	loc_72890
00075D9E 4EBA 0000                  		jsr	sub_72A5A(pc)
00075DA2 60F0                       		bra.s	loc_72880
00075DA4                            ; ===========================================================================
00075DA4                            
00075DA4                            loc_72890:
00075DA4 4A05                       		tst.b	d5
00075DA6 6A00                       		bpl.s	loc_728A4
00075DA8 4EBA 0000                  		jsr	sub_728AC(pc)
00075DAC 1A1C                       		move.b	(a4)+,d5
00075DAE 4A05                       		tst.b	d5
00075DB0 6A00                       		bpl.s	loc_728A4
00075DB2 534C                       		subq.w	#1,a4
00075DB4 6000 F4B2                  		bra.w	sub_71D60
00075DB8                            ; ===========================================================================
00075DB8                            
00075DB8                            loc_728A4:
00075DB8 4EBA F48E                  		jsr	sub_71D40(pc)
00075DBC 6000 F4AA                  		bra.w	sub_71D60
00075DC0                            ; End of function sub_72878
00075DC0                            
00075DC0                            
00075DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DC0                            
00075DC0                            
00075DC0                            sub_728AC:				; XREF: sub_72878
00075DC0 0405 0081                  		subi.b	#$81,d5
00075DC4 6500                       		bcs.s	loc_728CA
00075DC6 DA2D 0008                  		add.b	8(a5),d5
00075DCA 0245 007F                  		andi.w	#$7F,d5
00075DCE E34D                       		lsl.w	#1,d5
00075DD0 41FA 0000                  		lea	word_729CE(pc),a0
00075DD4 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075DDA 6000 F48C                  		bra.w	sub_71D60
00075DDE                            ; ===========================================================================
00075DDE                            
00075DDE                            loc_728CA:
00075DDE 08D5 0001                  		bset	#1,(a5)
00075DE2 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075DE8 4EBA F47E                  		jsr	sub_71D60(pc)
00075DEC 6000 0000                  		bra.w	sub_729A0
00075DF0                            ; End of function sub_728AC
00075DF0                            
00075DF0                            
00075DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DF0                            
00075DF0                            
00075DF0                            sub_728DC:				; XREF: sub_72850
00075DF0 3C2D 0010                  		move.w	$10(a5),d6
00075DF4 6B00                       		bmi.s	loc_72920
00075DF6                            ; End of function sub_728DC
00075DF6                            
00075DF6                            
00075DF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075DF6                            
00075DF6                            
00075DF6                            sub_728E2:				; XREF: sub_72850
00075DF6 102D 001E                  		move.b	$1E(a5),d0
00075DFA 4880                       		ext.w	d0
00075DFC DC40                       		add.w	d0,d6
00075DFE 0815 0002                  		btst	#2,(a5)
00075E02 6600                       		bne.s	locret_7291E
00075E04 0815 0001                  		btst	#1,(a5)
00075E08 6600                       		bne.s	locret_7291E
00075E0A 102D 0001                  		move.b	1(a5),d0
00075E0E 0C00 00E0                  		cmpi.b	#$E0,d0
00075E12 6600                       		bne.s	loc_72904
00075E14 103C 00C0                  		move.b	#$C0,d0
00075E18                            
00075E18                            loc_72904:
00075E18 3206                       		move.w	d6,d1
00075E1A 0201 000F                  		andi.b	#$F,d1
00075E1E 8001                       		or.b	d1,d0
00075E20 E84E                       		lsr.w	#4,d6
00075E22 0206 003F                  		andi.b	#$3F,d6
00075E26 13C0 00C0 0011             		move.b	d0,($C00011).l
00075E2C 13C6 00C0 0011             		move.b	d6,($C00011).l
00075E32                            
00075E32                            locret_7291E:
00075E32 4E75                       		rts	
00075E34                            ; End of function sub_728E2
00075E34                            
00075E34                            ; ===========================================================================
00075E34                            
00075E34                            loc_72920:				; XREF: sub_728DC
00075E34 08D5 0001                  		bset	#1,(a5)
00075E38 4E75                       		rts	
00075E3A                            
00075E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E3A                            
00075E3A                            
00075E3A                            sub_72926:				; XREF: sub_72850
00075E3A 4A2D 000B                  		tst.b	$B(a5)
00075E3E 6700 0000                  		beq.w	locret_7298A
00075E42                            
00075E42                            loc_7292E:				; XREF: sub_72850
00075E42 1C2D 0009                  		move.b	9(a5),d6
00075E46 7000                       		moveq	#0,d0
00075E48 102D 000B                  		move.b	$B(a5),d0
00075E4C 6700                       		beq.s	sub_7296A
00075E4E 2079 0007 4EAC             		movea.l	(Go_PSGIndex).l,a0
00075E54 5340                       		subq.w	#1,d0
00075E56 E548                       		lsl.w	#2,d0
00075E58 2070 0000                  		movea.l	(a0,d0.w),a0
00075E5C 102D 000C                  		move.b	$C(a5),d0
00075E60 1030 0000                  		move.b	(a0,d0.w),d0
00075E64 522D 000C                  		addq.b	#1,$C(a5)
00075E68 0800 0007                  		btst	#7,d0
00075E6C 6700                       		beq.s	loc_72960
00075E6E 0C00 0080                  		cmpi.b	#$80,d0
00075E72 6700                       		beq.s	loc_7299A
00075E74                            
00075E74                            loc_72960:
00075E74 DC40                       		add.w	d0,d6
00075E76 0C06 0010                  		cmpi.b	#$10,d6
00075E7A 6500                       		bcs.s	sub_7296A
00075E7C 7C0F                       		moveq	#$F,d6
00075E7E                            ; End of function sub_72926
00075E7E                            
00075E7E                            
00075E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E7E                            
00075E7E                            
00075E7E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075E7E 0815 0001                  		btst	#1,(a5)
00075E82 6600                       		bne.s	locret_7298A
00075E84 0815 0002                  		btst	#2,(a5)
00075E88 6600                       		bne.s	locret_7298A
00075E8A 0815 0004                  		btst	#4,(a5)
00075E8E 6600                       		bne.s	loc_7298C
00075E90                            
00075E90                            loc_7297C:
00075E90 8C2D 0001                  		or.b	1(a5),d6
00075E94 0606 0010                  		addi.b	#$10,d6
00075E98 13C6 00C0 0011             		move.b	d6,($C00011).l
00075E9E                            
00075E9E                            locret_7298A:
00075E9E 4E75                       		rts	
00075EA0                            ; ===========================================================================
00075EA0                            
00075EA0                            loc_7298C:
00075EA0 4A2D 0013                  		tst.b	$13(a5)
00075EA4 67EA                       		beq.s	loc_7297C
00075EA6 4A2D 0012                  		tst.b	$12(a5)
00075EAA 66E4                       		bne.s	loc_7297C
00075EAC 4E75                       		rts	
00075EAE                            ; End of function sub_7296A
00075EAE                            
00075EAE                            ; ===========================================================================
00075EAE                            
00075EAE                            loc_7299A:				; XREF: sub_72926
00075EAE 532D 000C                  		subq.b	#1,$C(a5)
00075EB2 4E75                       		rts	
00075EB4                            
00075EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075EB4                            
00075EB4                            
00075EB4                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075EB4 0815 0002                  		btst	#2,(a5)
00075EB8 6600                       		bne.s	locret_729B4
00075EBA                            
00075EBA                            loc_729A6:				; XREF: Snd_FadeOut2
00075EBA 102D 0001                  		move.b	1(a5),d0
00075EBE 0000 001F                  		ori.b	#$1F,d0
00075EC2 13C0 00C0 0011             		move.b	d0,($C00011).l
00075EC8                            
00075EC8                            locret_729B4:
00075EC8 4E75                       		rts	
00075ECA                            ; End of function sub_729A0
00075ECA                            
00075ECA                            
00075ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075ECA                            
00075ECA                            
00075ECA                            sub_729B6:				; XREF: loc_71E7C
00075ECA 41F9 00C0 0011             		lea	($C00011).l,a0
00075ED0 10BC 009F                  		move.b	#$9F,(a0)
00075ED4 10BC 00BF                  		move.b	#$BF,(a0)
00075ED8 10BC 00DF                  		move.b	#$DF,(a0)
00075EDC 10BC 00FF                  		move.b	#$FF,(a0)
00075EE0 4E75                       		rts	
00075EE2                            ; End of function sub_729B6
00075EE2                            
00075EE2                            ; ===========================================================================
00075EE2 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00075EF4 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00075F06 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00075F1A 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00075F2E 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075F42 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075F56 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075F6A 0011 0000                  		dc.w $11, 0
00075F6E                            
00075F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F6E                            
00075F6E                            
00075F6E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075F6E 0445 00E0                  		subi.w	#$E0,d5
00075F72 E54D                       		lsl.w	#2,d5
00075F74 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075F78                            ; End of function sub_72A5A
00075F78                            
00075F78                            ; ===========================================================================
00075F78                            
00075F78                            loc_72A64:
00075F78 6000 0000                  		bra.w	loc_72ACC
00075F7C                            ; ===========================================================================
00075F7C 6000 0000                  		bra.w	loc_72AEC
00075F80                            ; ===========================================================================
00075F80 6000 0000                  		bra.w	loc_72AF2
00075F84                            ; ===========================================================================
00075F84 6000 0000                  		bra.w	loc_72AF8
00075F88                            ; ===========================================================================
00075F88 6000 0000                  		bra.w	loc_72B14
00075F8C                            ; ===========================================================================
00075F8C 6000 0000                  		bra.w	loc_72B9E
00075F90                            ; ===========================================================================
00075F90 6000 0000                  		bra.w	loc_72BA4
00075F94                            ; ===========================================================================
00075F94 6000 0000                  		bra.w	loc_72BAE
00075F98                            ; ===========================================================================
00075F98 6000 0000                  		bra.w	loc_72BB4
00075F9C                            ; ===========================================================================
00075F9C 6000 0000                  		bra.w	loc_72BBE
00075FA0                            ; ===========================================================================
00075FA0 6000 0000                  		bra.w	loc_72BC6
00075FA4                            ; ===========================================================================
00075FA4 6000 0000                  		bra.w	loc_72BD0
00075FA8                            ; ===========================================================================
00075FA8 6000 0000                  		bra.w	loc_72BE6
00075FAC                            ; ===========================================================================
00075FAC 6000 0000                  		bra.w	loc_72BEE
00075FB0                            ; ===========================================================================
00075FB0 6000 0000                  		bra.w	loc_72BF4
00075FB4                            ; ===========================================================================
00075FB4 6000 0000                  		bra.w	loc_72C26
00075FB8                            ; ===========================================================================
00075FB8 6000 0000                  		bra.w	loc_72D30
00075FBC                            ; ===========================================================================
00075FBC 6000 0000                  		bra.w	loc_72D52
00075FC0                            ; ===========================================================================
00075FC0 6000 0000                  		bra.w	loc_72D58
00075FC4                            ; ===========================================================================
00075FC4 6000 0000                  		bra.w	loc_72E06
00075FC8                            ; ===========================================================================
00075FC8 6000 0000                  		bra.w	loc_72E20
00075FCC                            ; ===========================================================================
00075FCC 6000 0000                  		bra.w	loc_72E26
00075FD0                            ; ===========================================================================
00075FD0 6000 0000                  		bra.w	loc_72E2C
00075FD4                            ; ===========================================================================
00075FD4 6000 0000                  		bra.w	loc_72E38
00075FD8                            ; ===========================================================================
00075FD8 6000 0000                  		bra.w	loc_72E52
00075FDC                            ; ===========================================================================
00075FDC 6000 0000                  		bra.w	loc_72E64
00075FE0                            ; ===========================================================================
00075FE0                            
00075FE0                            loc_72ACC:				; XREF: loc_72A64
00075FE0 121C                       		move.b	(a4)+,d1
00075FE2 4A2D 0001                  		tst.b	1(a5)
00075FE6 6B00                       		bmi.s	locret_72AEA
00075FE8 102D 000A                  		move.b	$A(a5),d0
00075FEC 0200 0037                  		andi.b	#$37,d0
00075FF0 8200                       		or.b	d0,d1
00075FF2 1B41 000A                  		move.b	d1,$A(a5)
00075FF6 103C 00B4                  		move.b	#$B4,d0
00075FFA 6000 FC2E                  		bra.w	loc_72716
00075FFE                            ; ===========================================================================
00075FFE                            
00075FFE                            locret_72AEA:
00075FFE 4E75                       		rts	
00076000                            ; ===========================================================================
00076000                            
00076000                            loc_72AEC:				; XREF: loc_72A64
00076000 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00076004 4E75                       		rts	
00076006                            ; ===========================================================================
00076006                            
00076006                            loc_72AF2:				; XREF: loc_72A64
00076006 1D5C 0007                  		move.b	(a4)+,7(a6)
0007600A 4E75                       		rts	
0007600C                            ; ===========================================================================
0007600C                            
0007600C                            loc_72AF8:				; XREF: loc_72A64
0007600C 7000                       		moveq	#0,d0
0007600E 102D 000D                  		move.b	$D(a5),d0
00076012 2875 0000                  		movea.l	(a5,d0.w),a4
00076016 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007601E 544C                       		addq.w	#2,a4
00076020 5800                       		addq.b	#4,d0
00076022 1B40 000D                  		move.b	d0,$D(a5)
00076026 4E75                       		rts	
00076028                            ; ===========================================================================
00076028                            
00076028                            loc_72B14:				; XREF: loc_72A64
00076028 204E                       		movea.l	a6,a0
0007602A 43EE 03A0                  		lea	$3A0(a6),a1
0007602E 303C 0087                  		move.w	#$87,d0
00076032                            
00076032                            loc_72B1E:
00076032 20D9                       		move.l	(a1)+,(a0)+
00076034 51C8 FFFC                  		dbf	d0,loc_72B1E
00076038                            
00076038 08EE 0002 0040             		bset	#2,$40(a6)
0007603E 264D                       		movea.l	a5,a3
00076040 1C3C 0028                  		move.b	#$28,d6
00076044 9C2E 0026                  		sub.b	$26(a6),d6
00076048 7E05                       		moveq	#5,d7
0007604A 4BEE 0070                  		lea	$70(a6),a5
0007604E                            
0007604E                            loc_72B3A:
0007604E 0815 0007                  		btst	#7,(a5)
00076052 6700                       		beq.s	loc_72B5C
00076054 08D5 0001                  		bset	#1,(a5)
00076058 DD2D 0009                  		add.b	d6,9(a5)
0007605C 0815 0002                  		btst	#2,(a5)
00076060 6600                       		bne.s	loc_72B5C
00076062 7000                       		moveq	#0,d0
00076064 102D 000B                  		move.b	$B(a5),d0
00076068 226E 0018                  		movea.l	$18(a6),a1
0007606C 4EBA 0000                  		jsr	sub_72C4E(pc)
00076070                            
00076070                            loc_72B5C:
00076070 DAFC 0030                  		adda.w	#$30,a5
00076074 51CF FFD8                  		dbf	d7,loc_72B3A
00076078                            
00076078 7E02                       		moveq	#2,d7
0007607A                            
0007607A                            loc_72B66:
0007607A 0815 0007                  		btst	#7,(a5)
0007607E 6700                       		beq.s	loc_72B78
00076080 08D5 0001                  		bset	#1,(a5)
00076084 4EBA FE2E                  		jsr	sub_729A0(pc)
00076088 DD2D 0009                  		add.b	d6,9(a5)
0007608C                            
0007608C                            loc_72B78:
0007608C DAFC 0030                  		adda.w	#$30,a5
00076090 51CF FFE8                  		dbf	d7,loc_72B66
00076094 2A4B                       		movea.l	a3,a5
00076096 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007609C 1D7C 0028 0026             		move.b	#$28,$26(a6)
000760A2 422E 0027                  		clr.b	$27(a6)
000760A6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000760AE 504F                       		addq.w	#8,sp
000760B0 4E75                       		rts	
000760B2                            ; ===========================================================================
000760B2                            
000760B2                            loc_72B9E:				; XREF: loc_72A64
000760B2 1B5C 0002                  		move.b	(a4)+,2(a5)
000760B6 4E75                       		rts	
000760B8                            ; ===========================================================================
000760B8                            
000760B8                            loc_72BA4:				; XREF: loc_72A64
000760B8 101C                       		move.b	(a4)+,d0
000760BA D12D 0009                  		add.b	d0,9(a5)
000760BE 6000 0000                  		bra.w	sub_72CB4
000760C2                            ; ===========================================================================
000760C2                            
000760C2                            loc_72BAE:				; XREF: loc_72A64
000760C2 08D5 0004                  		bset	#4,(a5)
000760C6 4E75                       		rts	
000760C8                            ; ===========================================================================
000760C8                            
000760C8                            loc_72BB4:				; XREF: loc_72A64
000760C8 1B54 0012                  		move.b	(a4),$12(a5)
000760CC 1B5C 0013                  		move.b	(a4)+,$13(a5)
000760D0 4E75                       		rts	
000760D2                            ; ===========================================================================
000760D2                            
000760D2                            loc_72BBE:				; XREF: loc_72A64
000760D2 101C                       		move.b	(a4)+,d0
000760D4 D12D 0008                  		add.b	d0,8(a5)
000760D8 4E75                       		rts	
000760DA                            ; ===========================================================================
000760DA                            
000760DA                            loc_72BC6:				; XREF: loc_72A64
000760DA 1D54 0002                  		move.b	(a4),2(a6)
000760DE 1D5C 0001                  		move.b	(a4)+,1(a6)
000760E2 4E75                       		rts	
000760E4                            ; ===========================================================================
000760E4                            
000760E4                            loc_72BD0:				; XREF: loc_72A64
000760E4 41EE 0040                  		lea	$40(a6),a0
000760E8 101C                       		move.b	(a4)+,d0
000760EA 7230                       		moveq	#$30,d1
000760EC 7409                       		moveq	#9,d2
000760EE                            
000760EE                            loc_72BDA:
000760EE 1140 0002                  		move.b	d0,2(a0)
000760F2 D0C1                       		adda.w	d1,a0
000760F4 51CA FFF8                  		dbf	d2,loc_72BDA
000760F8                            
000760F8 4E75                       		rts	
000760FA                            ; ===========================================================================
000760FA                            
000760FA                            loc_72BE6:				; XREF: loc_72A64
000760FA 101C                       		move.b	(a4)+,d0
000760FC D12D 0009                  		add.b	d0,9(a5)
00076100 4E75                       		rts	
00076102                            ; ===========================================================================
00076102                            
00076102                            loc_72BEE:				; XREF: loc_72A64
00076102 422E 002C                  		clr.b	$2C(a6)
00076106 4E75                       		rts	
00076108                            ; ===========================================================================
00076108                            
00076108                            loc_72BF4:				; XREF: loc_72A64
00076108 0895 0007                  		bclr	#7,(a5)
0007610C 0895 0004                  		bclr	#4,(a5)
00076110 4EBA FB00                  		jsr	sub_726FE(pc)
00076114 4A2E 0250                  		tst.b	$250(a6)
00076118 6B00                       		bmi.s	loc_72C22
0007611A 264D                       		movea.l	a5,a3
0007611C 4BEE 0100                  		lea	$100(a6),a5
00076120 226E 0018                  		movea.l	$18(a6),a1
00076124 0895 0002                  		bclr	#2,(a5)
00076128 08D5 0001                  		bset	#1,(a5)
0007612C 102D 000B                  		move.b	$B(a5),d0
00076130 4EBA 0000                  		jsr	sub_72C4E(pc)
00076134 2A4B                       		movea.l	a3,a5
00076136                            
00076136                            loc_72C22:
00076136 504F                       		addq.w	#8,sp
00076138 4E75                       		rts	
0007613A                            ; ===========================================================================
0007613A                            
0007613A                            loc_72C26:				; XREF: loc_72A64
0007613A 7000                       		moveq	#0,d0
0007613C 101C                       		move.b	(a4)+,d0
0007613E 1B40 000B                  		move.b	d0,$B(a5)
00076142 0815 0002                  		btst	#2,(a5)
00076146 6600 0000                  		bne.w	locret_72CAA
0007614A 226E 0018                  		movea.l	$18(a6),a1
0007614E 4A2E 000E                  		tst.b	$E(a6)
00076152 6700                       		beq.s	sub_72C4E
00076154 226D 0020                  		movea.l	$20(a5),a1
00076158 4A2E 000E                  		tst.b	$E(a6)
0007615C 6B00                       		bmi.s	sub_72C4E
0007615E 226E 0020                  		movea.l	$20(a6),a1
00076162                            
00076162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076162                            
00076162                            
00076162                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076162 5340                       		subq.w	#1,d0
00076164 6B00                       		bmi.s	loc_72C5C
00076166 323C 0019                  		move.w	#$19,d1
0007616A                            
0007616A                            loc_72C56:
0007616A D2C1                       		adda.w	d1,a1
0007616C 51C8 FFFC                  		dbf	d0,loc_72C56
00076170                            
00076170                            loc_72C5C:
00076170 1219                       		move.b	(a1)+,d1
00076172 1B41 001F                  		move.b	d1,$1F(a5)
00076176 1801                       		move.b	d1,d4
00076178 103C 00B0                  		move.b	#$B0,d0
0007617C 4EBA FAB8                  		jsr	sub_72722(pc)
00076180 45FA 0000                  		lea	byte_72D18(pc),a2
00076184 7613                       		moveq	#$13,d3
00076186                            
00076186                            loc_72C72:
00076186 101A                       		move.b	(a2)+,d0
00076188 1219                       		move.b	(a1)+,d1
0007618A 4EBA FAAA                  		jsr	sub_72722(pc)
0007618E 51CB FFF6                  		dbf	d3,loc_72C72
00076192 7A03                       		moveq	#3,d5
00076194 0244 0007                  		andi.w	#7,d4
00076198 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007619C 162D 0009                  		move.b	9(a5),d3
000761A0                            
000761A0                            loc_72C8C:
000761A0 101A                       		move.b	(a2)+,d0
000761A2 1219                       		move.b	(a1)+,d1
000761A4 E20C                       		lsr.b	#1,d4
000761A6 6400                       		bcc.s	loc_72C96
000761A8 D203                       		add.b	d3,d1
000761AA                            
000761AA                            loc_72C96:
000761AA 4EBA FA8A                  		jsr	sub_72722(pc)
000761AE 51CD FFF0                  		dbf	d5,loc_72C8C
000761B2 103C 00B4                  		move.b	#$B4,d0
000761B6 122D 000A                  		move.b	$A(a5),d1
000761BA 4EBA FA7A                  		jsr	sub_72722(pc)
000761BE                            
000761BE                            locret_72CAA:
000761BE 4E75                       		rts	
000761C0                            ; End of function sub_72C4E
000761C0                            
000761C0                            ; ===========================================================================
000761C0 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000761C8                            
000761C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761C8                            
000761C8                            
000761C8                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000761C8 0815 0002                  		btst	#2,(a5)
000761CC 6600                       		bne.s	locret_72D16
000761CE 7000                       		moveq	#0,d0
000761D0 102D 000B                  		move.b	$B(a5),d0
000761D4 226E 0018                  		movea.l	$18(a6),a1
000761D8 4A2E 000E                  		tst.b	$E(a6)
000761DC 6700                       		beq.s	loc_72CD8
000761DE 226E 0020                  		movea.l	$20(a6),a1
000761E2 4A2E 000E                  		tst.b	$E(a6)
000761E6 6B00                       		bmi.s	loc_72CD8
000761E8 226E 0020                  		movea.l	$20(a6),a1
000761EC                            
000761EC                            loc_72CD8:
000761EC 5340                       		subq.w	#1,d0
000761EE 6B00                       		bmi.s	loc_72CE6
000761F0 323C 0019                  		move.w	#$19,d1
000761F4                            
000761F4                            loc_72CE0:
000761F4 D2C1                       		adda.w	d1,a1
000761F6 51C8 FFFC                  		dbf	d0,loc_72CE0
000761FA                            
000761FA                            loc_72CE6:
000761FA D2FC 0015                  		adda.w	#$15,a1
000761FE 45FA 0000                  		lea	byte_72D2C(pc),a2
00076202 102D 001F                  		move.b	$1F(a5),d0
00076206 0240 0007                  		andi.w	#7,d0
0007620A 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007620E 162D 0009                  		move.b	9(a5),d3
00076212 6B00                       		bmi.s	locret_72D16
00076214 7A03                       		moveq	#3,d5
00076216                            
00076216                            loc_72D02:
00076216 101A                       		move.b	(a2)+,d0
00076218 1219                       		move.b	(a1)+,d1
0007621A E20C                       		lsr.b	#1,d4
0007621C 6400                       		bcc.s	loc_72D12
0007621E D203                       		add.b	d3,d1
00076220 6500                       		bcs.s	loc_72D12
00076222 4EBA FA12                  		jsr	sub_72722(pc)
00076226                            
00076226                            loc_72D12:
00076226 51CD FFEE                  		dbf	d5,loc_72D02
0007622A                            
0007622A                            locret_72D16:
0007622A 4E75                       		rts	
0007622C                            ; End of function sub_72CB4
0007622C                            
0007622C                            ; ===========================================================================
0007622C 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076236 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076240 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076244                            ; ===========================================================================
00076244                            
00076244                            loc_72D30:				; XREF: loc_72A64
00076244 08D5 0003                  		bset	#3,(a5)
00076248 2B4C 0014                  		move.l	a4,$14(a5)
0007624C 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076250 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076254 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076258 101C                       		move.b	(a4)+,d0
0007625A E208                       		lsr.b	#1,d0
0007625C 1B40 001B                  		move.b	d0,$1B(a5)
00076260 426D 001C                  		clr.w	$1C(a5)
00076264 4E75                       		rts	
00076266                            ; ===========================================================================
00076266                            
00076266                            loc_72D52:				; XREF: loc_72A64
00076266 08D5 0003                  		bset	#3,(a5)
0007626A 4E75                       		rts	
0007626C                            ; ===========================================================================
0007626C                            
0007626C                            loc_72D58:				; XREF: loc_72A64
0007626C 0895 0007                  		bclr	#7,(a5)
00076270 0895 0004                  		bclr	#4,(a5)
00076274 4A2D 0001                  		tst.b	1(a5)
00076278 6B00                       		bmi.s	loc_72D74
0007627A 4A2E 0008                  		tst.b	8(a6)
0007627E 6B00 0000                  		bmi.w	loc_72E02
00076282 4EBA F98E                  		jsr	sub_726FE(pc)
00076286 6000                       		bra.s	loc_72D78
00076288                            ; ===========================================================================
00076288                            
00076288                            loc_72D74:
00076288 4EBA FC2A                  		jsr	sub_729A0(pc)
0007628C                            
0007628C                            loc_72D78:
0007628C 4A2E 000E                  		tst.b	$E(a6)
00076290 6A00 0000                  		bpl.w	loc_72E02
00076294 4216                       		clr.b	0(a6)
00076296 7000                       		moveq	#0,d0
00076298 102D 0001                  		move.b	1(a5),d0
0007629C 6B00                       		bmi.s	loc_72DCC
0007629E 41FA F546                  		lea	dword_722CC(pc),a0
000762A2 264D                       		movea.l	a5,a3
000762A4 0C00 0004                  		cmpi.b	#4,d0
000762A8 6600                       		bne.s	loc_72DA8
000762AA 4A2E 0340                  		tst.b	$340(a6)
000762AE 6A00                       		bpl.s	loc_72DA8
000762B0 4BEE 0340                  		lea	$340(a6),a5
000762B4 226E 0020                  		movea.l	$20(a6),a1
000762B8 6000                       		bra.s	loc_72DB8
000762BA                            ; ===========================================================================
000762BA                            
000762BA                            loc_72DA8:
000762BA 5500                       		subq.b	#2,d0
000762BC E508                       		lsl.b	#2,d0
000762BE 2A70 0000                  		movea.l	(a0,d0.w),a5
000762C2 4A15                       		tst.b	(a5)
000762C4 6A00                       		bpl.s	loc_72DC8
000762C6 226E 0018                  		movea.l	$18(a6),a1
000762CA                            
000762CA                            loc_72DB8:
000762CA 0895 0002                  		bclr	#2,(a5)
000762CE 08D5 0001                  		bset	#1,(a5)
000762D2 102D 000B                  		move.b	$B(a5),d0
000762D6 4EBA FE8A                  		jsr	sub_72C4E(pc)
000762DA                            
000762DA                            loc_72DC8:
000762DA 2A4B                       		movea.l	a3,a5
000762DC 6000                       		bra.s	loc_72E02
000762DE                            ; ===========================================================================
000762DE                            
000762DE                            loc_72DCC:
000762DE 41EE 0370                  		lea	$370(a6),a0
000762E2 4A10                       		tst.b	(a0)
000762E4 6A00                       		bpl.s	loc_72DE0
000762E6 0C00 00E0                  		cmpi.b	#$E0,d0
000762EA 6700                       		beq.s	loc_72DEA
000762EC 0C00 00C0                  		cmpi.b	#$C0,d0
000762F0 6700                       		beq.s	loc_72DEA
000762F2                            
000762F2                            loc_72DE0:
000762F2 41FA F4F2                  		lea	dword_722CC(pc),a0
000762F6 E608                       		lsr.b	#3,d0
000762F8 2070 0000                  		movea.l	(a0,d0.w),a0
000762FC                            
000762FC                            loc_72DEA:
000762FC 0890 0002                  		bclr	#2,(a0)
00076300 08D0 0001                  		bset	#1,(a0)
00076304 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007630A 6600                       		bne.s	loc_72E02
0007630C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076314                            
00076314                            loc_72E02:
00076314 504F                       		addq.w	#8,sp
00076316 4E75                       		rts	
00076318                            ; ===========================================================================
00076318                            
00076318                            loc_72E06:				; XREF: loc_72A64
00076318 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007631E 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076322 0815 0002                  		btst	#2,(a5)
00076326 6600                       		bne.s	locret_72E1E
00076328 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076330                            
00076330                            locret_72E1E:
00076330 4E75                       		rts	
00076332                            ; ===========================================================================
00076332                            
00076332                            loc_72E20:				; XREF: loc_72A64
00076332 0895 0003                  		bclr	#3,(a5)
00076336 4E75                       		rts	
00076338                            ; ===========================================================================
00076338                            
00076338                            loc_72E26:				; XREF: loc_72A64
00076338 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007633C 4E75                       		rts	
0007633E                            ; ===========================================================================
0007633E                            
0007633E                            loc_72E2C:				; XREF: loc_72A64
0007633E 101C                       		move.b	(a4)+,d0
00076340 E148                       		lsl.w	#8,d0
00076342 101C                       		move.b	(a4)+,d0
00076344 D8C0                       		adda.w	d0,a4
00076346 534C                       		subq.w	#1,a4
00076348 4E75                       		rts	
0007634A                            ; ===========================================================================
0007634A                            
0007634A                            loc_72E38:				; XREF: loc_72A64
0007634A 7000                       		moveq	#0,d0
0007634C 101C                       		move.b	(a4)+,d0
0007634E 121C                       		move.b	(a4)+,d1
00076350 4A35 0024                  		tst.b	$24(a5,d0.w)
00076354 6600                       		bne.s	loc_72E48
00076356 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007635A                            
0007635A                            loc_72E48:
0007635A 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007635E 66DE                       		bne.s	loc_72E2C
00076360 544C                       		addq.w	#2,a4
00076362 4E75                       		rts	
00076364                            ; ===========================================================================
00076364                            
00076364                            loc_72E52:				; XREF: loc_72A64
00076364 7000                       		moveq	#0,d0
00076366 102D 000D                  		move.b	$D(a5),d0
0007636A 5900                       		subq.b	#4,d0
0007636C 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076370 1B40 000D                  		move.b	d0,$D(a5)
00076374 60C8                       		bra.s	loc_72E2C
00076376                            ; ===========================================================================
00076376                            
00076376                            loc_72E64:				; XREF: loc_72A64
00076376 103C 0088                  		move.b	#$88,d0
0007637A 123C 000F                  		move.b	#$F,d1
0007637E 4EBA F8C2                  		jsr	sub_7272E(pc)
00076382 103C 008C                  		move.b	#$8C,d0
00076386 123C 000F                  		move.b	#$F,d1
0007638A 6000 F8B6                  		bra.w	sub_7272E
0007638E                            ; ===========================================================================
0007638E                            Kos_Z80:	incbin	sound\z80_1.bin
0007643E 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076440 21                         		dc.b $21
00076441 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076443                            		incbin	sound\z80_2.bin
00077AEE                            		even
00077AEE                            Music81:	incbin	sound\music81.bin
00078256                            		even
00078256                            Music82:	incbin	sound\music82.bin
000786A6                            		even
000786A6                            Music83:	incbin	sound\music83.bin
00078B04                            		even
00078B04                            Music84:	incbin	sound\music84.bin
00078F72                            		even
00078F72                            Music85:	incbin	sound\music85.bin
000793BE                            		even
000793BE                            Music86:	incbin	sound\music86.bin
0007990E                            		even
0007990E                            Music87:	incbin	sound\music87.bin
00079AF4                            		even
00079AF4                            Music88:	incbin	sound\music88.bin
00079BE2                            		even
00079BE2                            Music89:	incbin	sound\music89.bin
00079F0E                            		even
00079F0E                            Music8A:	incbin	sound\music8A.bin
0007A0BA                            		even
0007A0BA                            Music8B:	incbin	sound\music8B.bin
0007A354                            		even
0007A354                            Music8C:	incbin	sound\music8C.bin
0007A570                            		even
0007A570                            Music8D:	incbin	sound\music8D.bin
0007A78C                            		even
0007A78C                            Music8E:	incbin	sound\music8E.bin
0007A8E2                            		even
0007A8E2                            Music8F:	incbin	sound\music8F.bin
0007AA32                            		even
0007AA32                            Music90:	incbin	sound\music90.bin
0007AB90                            		even
0007AB90                            Music91:	incbin	sound\music91.bin
0007BE5E                            		even
0007BE5E                            Music92:	incbin	sound\music92.bin
0007BF88                            		even
0007BF88                            Music93:	incbin	sound\music93.bin
0007C056                            		even
0007C056                            ; ---------------------------------------------------------------------------
0007C056                            ; Sound	effect pointers
0007C056                            ; ---------------------------------------------------------------------------
0007C056 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0007C062 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0007C06E 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0007C07A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0007C086 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0007C092 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0007C09E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0007C0AA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0007C0B6 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0007C0C2 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0007C0CE 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0007C0DA 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0007C0E6 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0007C0F2 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0007C0FE 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0007C10A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0007C116 0000 0000                  SoundD0Index:	dc.l SoundD0
0007C11A                            SoundA0:	incbin	sound\soundA0.bin
0007C130                            		even
0007C130                            SoundA1:	incbin	sound\soundA1.bin
0007C15A                            		even
0007C15A                            SoundA2:	incbin	sound\soundA2.bin
0007C17A                            		even
0007C17A                            SoundA3:	incbin	sound\soundA3.bin
0007C1AC                            		even
0007C1AC                            SoundA4:	incbin	sound\soundA4.bin
0007C1E2                            		even
0007C1E2                            SoundA5:	incbin	sound\soundA5.bin
0007C20E                            		even
0007C20E                            SoundA6:	incbin	sound\soundA6.bin
0007C23E                            		even
0007C23E                            SoundA7:	incbin	sound\soundA7.bin
0007C26E                            		even
0007C26E                            SoundA8:	incbin	sound\soundA8.bin
0007C2A2                            		even
0007C2A2                            SoundA9:	incbin	sound\soundA9.bin
0007C2B4                            		even
0007C2B4                            SoundAA:	incbin	sound\soundAA.bin
0007C2F6                            		even
0007C2F6                            SoundAB:	incbin	sound\soundAB.bin
0007C316                            		even
0007C316                            SoundAC:	incbin	sound\soundAC.bin
0007C34A                            		even
0007C34A                            SoundAD:	incbin	sound\soundAD.bin
0007C380                            		even
0007C380                            SoundAE:	incbin	sound\soundAE.bin
0007C3CA                            		even
0007C3CA                            SoundAF:	incbin	sound\soundAF.bin
0007C3F8                            		even
0007C3F8                            SoundB0:	incbin	sound\soundB0.bin
0007C42A                            		even
0007C42A                            SoundB1:	incbin	sound\soundB1.bin
0007C456                            		even
0007C456                            SoundB2:	incbin	sound\soundB2.bin
0007C4A6                            		even
0007C4A6                            SoundB3:	incbin	sound\soundB3.bin
0007C4F0                            		even
0007C4F0                            SoundB4:	incbin	sound\soundB4.bin
0007C54C                            		even
0007C54C                            SoundB5:	incbin	sound\soundB5.bin
0007C57A                            		even
0007C57A                            SoundB6:	incbin	sound\soundB6.bin
0007C598                            		even
0007C598                            SoundB7:	incbin	sound\soundB7.bin
0007C5D4                            		even
0007C5D4                            SoundB8:	incbin	sound\soundB8.bin
0007C5F2                            		even
0007C5F2                            SoundB9:	incbin	sound\soundB9.bin
0007C656                            		even
0007C656                            SoundBA:	incbin	sound\soundBA.bin
0007C67E                            		even
0007C67E                            SoundBB:	incbin	sound\soundBB.bin
0007C6AA                            		even
0007C6AA                            SoundBC:	incbin	sound\soundBC.bin
0007C6EC                            		even
0007C6EC                            SoundBD:	incbin	sound\soundBD.bin
0007C740                            		even
0007C740                            SoundBE:	incbin	sound\soundBE.bin
0007C77A                            		even
0007C77A                            SoundBF:	incbin	sound\soundBF.bin
0007C7EC                            		even
0007C7EC                            SoundC0:	incbin	sound\soundC0.bin
0007C81A                            		even
0007C81A                            SoundC1:	incbin	sound\soundC1.bin
0007C854                            		even
0007C854                            SoundC2:	incbin	sound\soundC2.bin
0007C87E                            		even
0007C87E                            SoundC3:	incbin	sound\soundC3.bin
0007C8F8                            		even
0007C8F8                            SoundC4:	incbin	sound\soundC4.bin
0007C920                            		even
0007C920                            SoundC5:	incbin	sound\soundC5.bin
0007C988                            		even
0007C988                            SoundC6:	incbin	sound\soundC6.bin
0007C9CA                            		even
0007C9CA                            SoundC7:	incbin	sound\soundC7.bin
0007C9F8                            		even
0007C9F8                            SoundC8:	incbin	sound\soundC8.bin
0007CA0A                            		even
0007CA0A                            SoundC9:	incbin	sound\soundC9.bin
0007CA38                            		even
0007CA38                            SoundCA:	incbin	sound\soundCA.bin
0007CA66                            		even
0007CA66                            SoundCB:	incbin	sound\soundCB.bin
0007CAB2                            		even
0007CAB2                            SoundCC:	incbin	sound\soundCC.bin
0007CAEC                            		even
0007CAEC                            SoundCD:	incbin	sound\soundCD.bin
0007CAFA                            		even
0007CAFA                            SoundCE:	incbin	sound\soundCE.bin
0007CB28                            		even
0007CB28                            SoundCF:	incbin	sound\soundCF.bin
0007CB60                            		even
0007CB60                            SoundD0:	incbin	sound\soundD0.bin
0007CB9A                            		even
0007CB9A                            SegaPCM:	incbin	sound\segapcm.bin
00082014 00                         SegaPCM_end:	even
00082014                            
00082014                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
00088278                                        even
00088278                            
00088278                            ; ===============================================================
00088278                            ; ---------------------------------------------------------------
00088278                            ; Error handling module
00088278                            ; ---------------------------------------------------------------
00088278                            
00088278 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
0008827C 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
00088286 01                         		dc.b	1				; extended stack frame
00088288 00                         		even
00088288                            
00088288 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
0008828C 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
0008829A 01                         		dc.b	1				; extended stack frame
0008829C 00                         		even
0008829C                            
0008829C 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
000882A0 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
000882B4 00                         		dc.b	0				; extended stack frame
000882B6 00                         		even
000882B6                            
000882B6 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
000882BA 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
000882C6 00                         		dc.b	0				; extended stack frame
000882C8 00                         		even
000882C8                            
000882C8 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
000882CC 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
000882DC 00                         		dc.b	0				; extended stack frame
000882DE 00                         		even
000882DE                            
000882DE 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
000882E2 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
000882F4 00                         		dc.b	0				; extended stack frame
000882F6 00                         		even
000882F6                            
000882F6 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
000882FA 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
0008830E 00                         		dc.b	0				; extended stack frame
00088310 00                         		even
00088310                            
00088310 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
00088314 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
0008831A 00                         		dc.b	0				; extended stack frame
0008831C 00                         		even
0008831C                            
0008831C 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
00088320 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
00088333 00                         		dc.b	0				; extended stack frame
00088334                            		even
00088334                            
00088334 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
00088338 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
0008834B 00                         		dc.b	0				; extended stack frame
0008834C                            		even
0008834C                            
0008834C 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
00088350 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
00088360 00                         		dc.b	0				; extended stack frame
00088362 00                         		even
00088362                            
00088362                            ErrorHandler:	incbin	"ErrorHandler.bin"
00089D76                            
00089D76                            ; end of 'ROM'
00089D76                            EndOfRom:
00089D76                            
00089D76                            
