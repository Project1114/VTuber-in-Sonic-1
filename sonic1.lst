00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		org 0
00000000                            		include 	"macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E                            MainGameLoop:
0000034E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000352 0240 001C                  		andi.w	#$1C,d0
00000356 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000035A 60F2                       		bra.s	MainGameLoop
0000035C                            ; ===========================================================================
0000035C                            ; ---------------------------------------------------------------------------
0000035C                            ; Main game mode array
0000035C                            ; ---------------------------------------------------------------------------
0000035C                            
0000035C                            GameModeArray:
0000035C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000360                            ; ===========================================================================
00000360 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000364                            ; ===========================================================================
00000364 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000368                            ; ===========================================================================
00000368 6000 0000                  		bra.w	Level		; Normal Level ($0C)
0000036C                            ; ===========================================================================
0000036C 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000370                            ; ===========================================================================
00000370 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000374                            ; ===========================================================================
00000374 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000378                            ; ===========================================================================
00000378 6000 0000                  		bra.w	Credits		; Credits ($1C)
0000037C                            ; ===========================================================================
0000037C 4E75                       		rts	
0000037E                            ; ===========================================================================
0000037E                            
0000037E                            loc_43A:
0000037E 46FC 2700                  		move	#$2700,sr
00000382 544F                       		addq.w	#2,sp
00000384 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000388 544F                       		addq.w	#2,sp
0000038A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000390 6100 0000                  		bsr.w	ShowErrorMsg
00000394 202F 0002                  		move.l	2(sp),d0
00000398 6100 0000                  		bsr.w	sub_5BA
0000039C 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003A0 6100 0000                  		bsr.w	sub_5BA
000003A4 6000                       		bra.s	loc_478
000003A6                            ; ===========================================================================
000003A6                            
000003A6                            loc_462:
000003A6 46FC 2700                  		move	#$2700,sr
000003AA 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003B0 6100 0000                  		bsr.w	ShowErrorMsg
000003B4 202F 0002                  		move.l	2(sp),d0
000003B8 6100 0000                  		bsr.w	sub_5BA
000003BC                            
000003BC                            loc_478:
000003BC 6100 0000                  		bsr.w	ErrorWaitForC
000003C0 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003C6 46FC 2300                  		move	#$2300,sr
000003CA 4E73                       		rte	
000003CC                            
000003CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003CC                            
000003CC                            
000003CC                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003CC 4DF9 00C0 0000             		lea	($C00000).l,a6
000003D2 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003DC 41F9 0000 0000             		lea	(Art_Text).l,a0
000003E2 323C 027F                  		move.w	#$27F,d1
000003E6                            
000003E6                            Error_LoadGfx:
000003E6 3C98                       		move.w	(a0)+,(a6)
000003E8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000003EC 7000                       		moveq	#0,d0		; clear	d0
000003EE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000003F2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000003F6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000003FA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000404 7212                       		moveq	#$12,d1		; number of characters
00000406                            
00000406                            Error_LoopChars:
00000406 7000                       		moveq	#0,d0
00000408 1018                       		move.b	(a0)+,d0
0000040A 0640 0790                  		addi.w	#$790,d0
0000040E 3C80                       		move.w	d0,(a6)
00000410 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000414 4E75                       		rts	
00000416                            ; End of function ShowErrorMsg
00000416                            
00000416                            ; ===========================================================================
00000416 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
0000041A 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000041E 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
00000422 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000426 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
0000042A 0000                       		dc.w asc_5A6-ErrorText
0000042C 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000043F 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000452 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000465 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000478 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000048B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000049E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004B1 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004C4 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004D7 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000004EA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000004FE 00                         		even
000004FE                            
000004FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004FE                            
000004FE                            
000004FE                            sub_5BA:				; XREF: loc_43A; loc_462
000004FE 3CBC 07CA                  		move.w	#$7CA,(a6)
00000502 7407                       		moveq	#7,d2
00000504                            
00000504                            loc_5C0:
00000504 E998                       		rol.l	#4,d0
00000506 6100                       		bsr.s	sub_5CA
00000508 51CA FFFA                  		dbf	d2,loc_5C0
0000050C 4E75                       		rts	
0000050E                            ; End of function sub_5BA
0000050E                            
0000050E                            
0000050E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000050E                            
0000050E                            
0000050E                            sub_5CA:				; XREF: sub_5BA
0000050E 3200                       		move.w	d0,d1
00000510 0241 000F                  		andi.w	#$F,d1
00000514 0C41 000A                  		cmpi.w	#$A,d1
00000518 6500                       		bcs.s	loc_5D8
0000051A 5E41                       		addq.w	#7,d1
0000051C                            
0000051C                            loc_5D8:
0000051C 0641 07C0                  		addi.w	#$7C0,d1
00000520 3C81                       		move.w	d1,(a6)
00000522 4E75                       		rts	
00000524                            ; End of function sub_5CA
00000524                            
00000524                            
00000524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000524                            
00000524                            
00000524                            ErrorWaitForC:				; XREF: loc_478
00000524 6100 0000                  		bsr.w	ReadJoypads
00000528 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000052E 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000532 4E75                       		rts	
00000534                            ; End of function ErrorWaitForC
00000534                            
00000534                            ; ===========================================================================
00000534                            
00000534                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A54                            		even
00000A54                            
00000A54                            ; ===========================================================================
00000A54                            
00000A54                            loc_B10:				; XREF: Vectors
00000A54 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A58 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A5C 6700                       		beq.s	loc_B88
00000A5E 3039 00C0 0004             		move.w	($C00004).l,d0
00000A64 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A6E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A76 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A7C 6700                       		beq.s	loc_B42
00000A7E 303C 0700                  		move.w	#$700,d0
00000A82                            
00000A82                            loc_B3E:
00000A82 51C8 FFFE                  		dbf	d0,loc_B3E
00000A86                            
00000A86                            loc_B42:
00000A86 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000A8A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000A90 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000A96 0240 003E                  		andi.w	#$3E,d0
00000A9A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000A9E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AA2                            
00000AA2                            loc_B5E:				; XREF: loc_B88
00000AA2 4EB9 0000 0000             		jsr	sub_71B4C
00000AA8                            
00000AA8                            loc_B64:				; XREF: loc_D50
00000AA8 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AAC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000AB0 4E73                       		rte	
00000AB2                            ; ===========================================================================
00000AB2 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AB6 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000ABA 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ABE 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000AC2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AC6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000ACA 0000                       		dc.w loc_E72-off_B6E
00000ACC                            ; ===========================================================================
00000ACC                            
00000ACC                            loc_B88:				; XREF: loc_B10; off_B6E
00000ACC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AD2 6700                       		beq.s	loc_B9A
00000AD4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000ADA 6600 FFC6                  		bne.w	loc_B5E
00000ADE                            
00000ADE                            loc_B9A:
00000ADE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000AE4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000AE8 3039 00C0 0004             		move.w	($C00004).l,d0
00000AEE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AF4 6700                       		beq.s	loc_BBA
00000AF6 303C 0700                  		move.w	#$700,d0
00000AFA                            
00000AFA                            loc_BB6:
00000AFA 51C8 FFFE                  		dbf	d0,loc_BB6
00000AFE                            
00000AFE                            loc_BBA:
00000AFE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B04 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B0C                            
00000B0C                            loc_BC8:
00000B0C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000B14 66F6                       		bne.s	loc_BC8
00000B16 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B1A 6600                       		bne.s	loc_BFE
00000B1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B22 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B28 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B2E 3ABC 977F                  		move.w	#$977F,(a5)
00000B32 3ABC C000                  		move.w	#$C000,(a5)
00000B36 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B40 6000                       		bra.s	loc_C22
00000B42                            ; ===========================================================================
00000B42                            
00000B42                            loc_BFE:				; XREF: loc_BC8
00000B42 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B48 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B4E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000B54 3ABC 977F                  		move.w	#$977F,(a5)
00000B58 3ABC C000                  		move.w	#$C000,(a5)
00000B5C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B62 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B66                            
00000B66                            loc_C22:				; XREF: loc_BC8
00000B66 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B6A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000B72 6000 FF2E                  		bra.w	loc_B5E
00000B76                            ; ===========================================================================
00000B76                            
00000B76                            loc_C32:				; XREF: off_B6E
00000B76 6100 0000                  		bsr.w	sub_106E
00000B7A                            
00000B7A                            loc_C36:				; XREF: off_B6E
00000B7A 4A78 F614                  		tst.w	($FFFFF614).w
00000B7E 6700 0000                  		beq.w	locret_C42
00000B82 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B86                            
00000B86                            locret_C42:
00000B86 4E75                       		rts	
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_C44:				; XREF: off_B6E
00000B88 6100 0000                  		bsr.w	sub_106E
00000B8C 6100 0000                  		bsr.w	sub_6886
00000B90 6100 0000                  		bsr.w	sub_1642
00000B94 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000B9A 4A78 F614                  		tst.w	($FFFFF614).w
00000B9E 6700 0000                  		beq.w	locret_C5C
00000BA2 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BA6                            
00000BA6                            locret_C5C:
00000BA6 4E75                       		rts	
00000BA8                            ; ===========================================================================
00000BA8                            
00000BA8                            loc_C5E:				; XREF: off_B6E
00000BA8 6100 0000                  		bsr.w	sub_106E
00000BAC 4E75                       		rts	
00000BAE                            ; ===========================================================================
00000BAE                            
00000BAE                            loc_C64:				; XREF: off_B6E
00000BAE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BB4 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BB8                            
00000BB8                            loc_C6E:				; XREF: off_B6E
00000BB8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000BC0                            
00000BC0                            loc_C76:
00000BC0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000BC8 66F6                       		bne.s	loc_C76		; if not, branch
00000BCA 6100 0000                  		bsr.w	ReadJoypads
00000BCE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD2 6600                       		bne.s	loc_CB0
00000BD4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BE6 3ABC 977F                  		move.w	#$977F,(a5)
00000BEA 3ABC C000                  		move.w	#$C000,(a5)
00000BEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF8 6000                       		bra.s	loc_CD4
00000BFA                            ; ===========================================================================
00000BFA                            
00000BFA                            loc_CB0:				; XREF: loc_C76
00000BFA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E                            
00000C1E                            loc_CD4:				; XREF: loc_C76
00000C1E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C28 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C2E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C34 3ABC 977F                  		move.w	#$977F,(a5)
00000C38 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C4C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C52 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C58 3ABC 977F                  		move.w	#$977F,(a5)
00000C5C 3ABC 7800                  		move.w	#$7800,(a5)
00000C60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C6A 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000C70                            
00000C70                            loc_D50:
00000C70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C96 6400                       		bcc.s	Demo_Time
00000C98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C9E 588F                       		addq.l	#4,sp
00000CA0 6000 FE06                  		bra.w	loc_B64
00000CA4                            
00000CA4                            ; ---------------------------------------------------------------------------
00000CA4                            ; Subroutine to	run a demo for an amount of time
00000CA4                            ; ---------------------------------------------------------------------------
00000CA4                            
00000CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CA4                            
00000CA4                            
00000CA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000CA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CA8 4EB9 0000 0000             		jsr	AniArt_Load
00000CAE 4EB9 0000 0000             		jsr	HudUpdate
00000CB4 6100 0000                  		bsr.w	sub_165E
00000CB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CC4                            
00000CC4                            Demo_TimeEnd:
00000CC4 4E75                       		rts	
00000CC6                            ; End of function Demo_Time
00000CC6                            
00000CC6                            ; ===========================================================================
00000CC6                            
00000CC6                            loc_DA6:				; XREF: off_B6E
00000CC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000CCE                            
00000CCE                            loc_DAE:
00000CCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000CD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000CD8 6100 0000                  		bsr.w	ReadJoypads
00000CDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CEE 3ABC 977F                  		move.w	#$977F,(a5)
00000CF2 3ABC C000                  		move.w	#$C000,(a5)
00000CF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D12 3ABC 977F                  		move.w	#$977F,(a5)
00000D16 3ABC 7800                  		move.w	#$7800,(a5)
00000D1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D24 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D30 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D36 3ABC 977F                  		move.w	#$977F,(a5)
00000D3A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D3E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D44 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D48 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D50 6100 0000                  		bsr.w	PalCycle_SS
00000D54 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000D5A                            
00000D5A                            loc_E64:
00000D5A 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D60 6400                       		bcc.s	@update
00000D62 6000 0000                  		bra.w	@end
00000D66                            
00000D66                            	@update:
00000D66 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D6C 4A78 F614                  		tst.w	($FFFFF614).w
00000D70 6700 0000                  		beq.w	@end
00000D74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D78                            
00000D78                            	@end:
00000D78 4E75                       		rts	
00000D7A                            ; ===========================================================================
00000D7A                            
00000D7A                            loc_E72:				; XREF: off_B6E
00000D7A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D82                            
00000D82                            loc_E7A:
00000D82 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D8A 66F6                       		bne.s	loc_E7A		; if not, branch
00000D8C 6100 0000                  		bsr.w	ReadJoypads
00000D90 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D94 6600                       		bne.s	loc_EB4
00000D96 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D9C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DA2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA8 3ABC 977F                  		move.w	#$977F,(a5)
00000DAC 3ABC C000                  		move.w	#$C000,(a5)
00000DB0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DBA 6000                       		bra.s	loc_ED8
00000DBC                            ; ===========================================================================
00000DBC                            
00000DBC                            loc_EB4:				; XREF: loc_E7A
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0                            
00000DE0                            loc_ED8:				; XREF: loc_E7A
00000DE0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DE4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DEA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DF0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DF6                            
00000DF6                            loc_EEE:
00000DF6 3ABC 977F                  		move.w	#$977F,(a5)
00000DFA 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DFE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E04 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E14 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E1A 3ABC 977F                  		move.w	#$977F,(a5)
00000E1E 3ABC 7800                  		move.w	#$7800,(a5)
00000E22 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E28 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E2C 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000E32                            
00000E32                            loc_F54:
00000E32 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E3A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E40 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E46 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E4C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E52 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E56 4EB9 0000 0000             		jsr	AniArt_Load
00000E5C 4EB9 0000 0000             		jsr	HudUpdate
00000E62 6100 0000                  		bsr.w	sub_1642
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_F8A:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E70 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E76 4E75                       		rts	
00000E78                            ; ===========================================================================
00000E78                            
00000E78                            loc_F9A:				; XREF: off_B6E
00000E78 6100 0000                  		bsr.w	sub_106E
00000E7C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E80 6000 0000                  		bra.w	sub_1642
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_FA6:				; XREF: off_B6E
00000E84 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E8C                            
00000E8C                            loc_FAE:
00000E8C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E94 66F6                       		bne.s	loc_FAE		; if not, branch
00000E96 6100 0000                  		bsr.w	ReadJoypads
00000E9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EA6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EAC 3ABC 977F                  		move.w	#$977F,(a5)
00000EB0 3ABC C000                  		move.w	#$C000,(a5)
00000EB4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000ECA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000ED0 3ABC 977F                  		move.w	#$977F,(a5)
00000ED4 3ABC 7800                  		move.w	#$7800,(a5)
00000ED8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EEE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EFC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F0E 4EB9 0000 0000             		jsr (ProcessDMAQueue).l
00000F14                            
00000F14                            loc_1060:
00000F14 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000F1A 6400                       		bcc.s	@update
00000F1C 6000 0000                  		bra.w	@end
00000F20                            
00000F20                            	@update:
00000F20 4EB9 0000 0000             		jsr	SS_LoadWalls
00000F26 4A78 F614                  		tst.w	($FFFFF614).w
00000F2A 6700 0000                  		beq.w	@end
00000F2E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F32                            
00000F32                            	@end:
00000F32 4E75                       		rts	
00000F34                            
00000F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F34                            
00000F34                            
00000F34                            sub_106E:				; XREF: loc_C32; et al
00000F34 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F3C                            
00000F3C                            loc_1076:
00000F3C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F44 66F6                       		bne.s	loc_1076	; if not, branch
00000F46 6100 0000                  		bsr.w	ReadJoypads
00000F4A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000F4E 6600                       		bne.s	loc_10B0
00000F50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F56 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F5C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F62 3ABC 977F                  		move.w	#$977F,(a5)
00000F66 3ABC C000                  		move.w	#$C000,(a5)
00000F6A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F70 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F74 6000                       		bra.s	loc_10D4
00000F76                            ; ===========================================================================
00000F76                            
00000F76                            loc_10B0:				; XREF: sub_106E
00000F76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F7C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F82 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000F88 3ABC 977F                  		move.w	#$977F,(a5)
00000F8C 3ABC C000                  		move.w	#$C000,(a5)
00000F90 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F9A                            
00000F9A                            loc_10D4:				; XREF: sub_106E
00000F9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FA0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FA6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FAC 3ABC 977F                  		move.w	#$977F,(a5)
00000FB0 3ABC 7800                  		move.w	#$7800,(a5)
00000FB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000FCA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000FD0 3ABC 977F                  		move.w	#$977F,(a5)
00000FD4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000FD8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FDE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FEA 4E75                       		rts	
00000FEC                            ; End of function sub_106E
00000FEC                            
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            ; Subroutine to	move pallets from the RAM to CRAM
00000FEC                            ; ---------------------------------------------------------------------------
00000FEC                            
00000FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FEC                            
00000FEC                            
00000FEC                            PalToCRAM:
00000FEC 46FC 2700                  		move	#$2700,sr
00000FF0 4A78 F644                  		tst.w	($FFFFF644).w
00000FF4 6700                       		beq.s	locret_119C
00000FF6 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000FFC 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001000 43F9 00C0 0000             		lea	($C00000).l,a1
00001006 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000100A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001012 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 2298                       		move.l	(a0)+,(a1)
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 2298                       		move.l	(a0)+,(a1)
0000104E 2298                       		move.l	(a0)+,(a1)
00001050 2298                       		move.l	(a0)+,(a1)
00001052 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001058 4CDF 0300                  		movem.l	(sp)+,a0-a1
0000105C 4A38 F64F                  		tst.b	($FFFFF64F).w
00001060 6600                       		bne.s	loc_119E
00001062                            
00001062                            locret_119C:
00001062 4E73                       		rte	
00001064                            ; ===========================================================================
00001064                            
00001064                            loc_119E:				; XREF: PalToCRAM
00001064 4238 F64F                  		clr.b	($FFFFF64F).w
00001068 48E7 FFFE                  		movem.l	d0-a6,-(sp)
0000106C 6100 FC36                  		bsr.w	Demo_Time
00001070 4EB9 0000 0000             		jsr	sub_71B4C
00001076 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
0000107A 4E73                       		rte	
0000107C                            ; End of function PalToCRAM
0000107C                            
0000107C                            ; ---------------------------------------------------------------------------
0000107C                            ; Subroutine to	initialise joypads
0000107C                            ; ---------------------------------------------------------------------------
0000107C                            
0000107C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000107C                            
0000107C                            
0000107C                            JoypadInit:				; XREF: GameClrRAM
0000107C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001084                            
00001084                            Joypad_WaitZ80:
00001084 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
0000108C 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
0000108E 7040                       		moveq	#$40,d0
00001090 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001096 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000109C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000010A2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000010AA 4E75                       		rts	
000010AC                            ; End of function JoypadInit
000010AC                            
000010AC                            ; ---------------------------------------------------------------------------
000010AC                            ; Subroutine to	read joypad input, and send it to the RAM
000010AC                            ; ---------------------------------------------------------------------------
000010AC                            
000010AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010AC                            
000010AC                            
000010AC                            ReadJoypads:
000010AC 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000010B0 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010B6 6100                       		bsr.s	Joypad_Read	; do the first joypad
000010B8 5449                       		addq.w	#2,a1		; do the second	joypad
000010BA                            
000010BA                            Joypad_Read:
000010BA 12BC 0000                  		move.b	#0,(a1)
000010BE 4E71                       		nop	
000010C0 4E71                       		nop	
000010C2 1011                       		move.b	(a1),d0
000010C4 E508                       		lsl.b	#2,d0
000010C6 0200 00C0                  		andi.b	#$C0,d0
000010CA 12BC 0040                  		move.b	#$40,(a1)
000010CE 4E71                       		nop	
000010D0 4E71                       		nop	
000010D2 1211                       		move.b	(a1),d1
000010D4 0201 003F                  		andi.b	#$3F,d1
000010D8 8001                       		or.b	d1,d0
000010DA 4600                       		not.b	d0
000010DC 1210                       		move.b	(a0),d1
000010DE B101                       		eor.b	d0,d1
000010E0 10C0                       		move.b	d0,(a0)+
000010E2 C200                       		and.b	d0,d1
000010E4 10C1                       		move.b	d1,(a0)+
000010E6 4E75                       		rts	
000010E8                            ; End of function ReadJoypads
000010E8                            
000010E8                            
000010E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E8                            
000010E8                            
000010E8                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000010E8 41F9 00C0 0004             		lea	($C00004).l,a0
000010EE 43F9 00C0 0000             		lea	($C00000).l,a1
000010F4 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010FA 7E12                       		moveq	#$12,d7
000010FC                            
000010FC                            VDP_Loop:
000010FC 309A                       		move.w	(a2)+,(a0)
000010FE 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001102                            
00001102 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001108 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000110C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001112 7000                       		moveq	#0,d0
00001114 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000111E 3E3C 003F                  		move.w	#$3F,d7
00001122                            
00001122                            VDP_ClrCRAM:
00001122 3280                       		move.w	d0,(a1)
00001124 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001128                            
00001128 42B8 F616                  		clr.l	($FFFFF616).w
0000112C 42B8 F61A                  		clr.l	($FFFFF61A).w
00001130 2F01                       		move.l	d1,-(sp)
00001132 4BF9 00C0 0004             		lea	($C00004).l,a5
00001138 3ABC 8F01                  		move.w	#$8F01,(a5)
0000113C 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001142 3ABC 9780                  		move.w	#$9780,(a5)
00001146 2ABC 4000 0080             		move.l	#$40000080,(a5)
0000114C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001154                            
00001154                            loc_128E:
00001154 3215                       		move.w	(a5),d1
00001156 0801 0001                  		btst	#1,d1
0000115A 66F8                       		bne.s	loc_128E
0000115C                            
0000115C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001160 221F                       		move.l	(sp)+,d1
00001162 4E75                       		rts	
00001164                            ; End of function VDPSetupGame
00001164                            
00001164                            ; ===========================================================================
00001164 8004 8174 8230 8328        VDPSetupArray:	dc.w $8004, $8174, $8230, $8328	; XREF: VDPSetupGame
0000116C 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001174 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
0000117C 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001184 9001 9100 9200             		dc.w $9001, $9100, $9200
0000118A                            
0000118A                            ; ---------------------------------------------------------------------------
0000118A                            ; Subroutine to	clear the screen
0000118A                            ; ---------------------------------------------------------------------------
0000118A                            
0000118A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000118A                            
0000118A                            
0000118A                            ClearScreen:
0000118A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001190 3ABC 8F01                  		move.w	#$8F01,(a5)
00001194 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000119A 3ABC 9780                  		move.w	#$9780,(a5)
0000119E 2ABC 4000 0083             		move.l	#$40000083,(a5)
000011A4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011AC                            
000011AC                            loc_12E6:
000011AC 3215                       		move.w	(a5),d1
000011AE 0801 0001                  		btst	#1,d1
000011B2 66F8                       		bne.s	loc_12E6
000011B4                            
000011B4 3ABC 8F02                  		move.w	#$8F02,(a5)
000011B8 4BF9 00C0 0004             		lea	($C00004).l,a5
000011BE 3ABC 8F01                  		move.w	#$8F01,(a5)
000011C2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000011C8 3ABC 9780                  		move.w	#$9780,(a5)
000011CC 2ABC 6000 0083             		move.l	#$60000083,(a5)
000011D2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000011DA                            
000011DA                            loc_1314:
000011DA 3215                       		move.w	(a5),d1
000011DC 0801 0001                  		btst	#1,d1
000011E0 66F8                       		bne.s	loc_1314
000011E2                            
000011E2 3ABC 8F02                  		move.w	#$8F02,(a5)
000011E6 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000011EE 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000011F6 43F8 F838                  		lea	($FFFFF838).w,a1
000011FA 7000                       		moveq	#0,d0
000011FC 323C 0092                  		move.w	#$92,d1
00001200                            
00001200                            loc_133A:
00001200 22C0                       		move.l	d0,(a1)+
00001202 51C9 FFFC                  		dbf	d1,loc_133A
00001206                            
00001206 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000120A 7000                       		moveq	#0,d0
0000120C 323C 0100                  		move.w	#$100,d1
00001210                            
00001210                            loc_134A:
00001210 22C0                       		move.l	d0,(a1)+
00001212 51C9 FFFC                  		dbf	d1,loc_134A
00001216 4E75                       		rts	
00001218                            ; End of function ClearScreen
00001218                            
00001218                            ; ---------------------------------------------------------------------------
00001218                            ; Subroutine to	load the sound driver
00001218                            ; ---------------------------------------------------------------------------
00001218                            
00001218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001218                            
00001218                            
00001218                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001218 4E71                       		nop	
0000121A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001222 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000122A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001230 43F9 00A0 0000             		lea	($A00000).l,a1
00001236 6100 0000                  		bsr.w	KosDec		; decompress
0000123A 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001242 4E71                       		nop	
00001244 4E71                       		nop	
00001246 4E71                       		nop	
00001248 4E71                       		nop	
0000124A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001252 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000125A 4E75                       		rts	
0000125C                            ; End of function SoundDriverLoad
0000125C                            
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	play a sound or	music track
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PlaySound:
0000125C 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001260 4E75                       		rts	
00001262                            ; End of function PlaySound
00001262                            
00001262                            ; ---------------------------------------------------------------------------
00001262                            ; Subroutine to	play a special sound/music (E0-E4)
00001262                            ;
00001262                            ; E0 - Fade out
00001262                            ; E1 - Sega
00001262                            ; E2 - Speed up
00001262                            ; E3 - Normal speed
00001262                            ; E4 - Stop
00001262                            ; ---------------------------------------------------------------------------
00001262                            
00001262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001262                            
00001262                            
00001262                            PlaySound_Special:
00001262 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001266 4E75                       		rts	
00001268                            ; End of function PlaySound_Special
00001268                            
00001268                            ; ===========================================================================
00001268                            ; ---------------------------------------------------------------------------
00001268                            ; Unused sound/music subroutine
00001268                            ; ---------------------------------------------------------------------------
00001268                            
00001268                            PlaySound_Unk:
00001268 11C0 F00C                  		move.b	d0,($FFFFF00C).w
0000126C 4E75                       		rts	
0000126E                            
0000126E                            ; ---------------------------------------------------------------------------
0000126E                            ; Subroutine to	pause the game
0000126E                            ; ---------------------------------------------------------------------------
0000126E                            
0000126E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000126E                            
0000126E                            
0000126E                            PauseGame:				; XREF: Level_MainLoop; et al
0000126E 4E71                       		nop	
00001270 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001274 6700 0000                  		beq.w	Unpause		; if not, branch
00001278 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000127C 6600                       		bne.s	loc_13BE	; if yes, branch
0000127E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001284 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
00001288                            
00001288                            loc_13BE:
00001288 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000128E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001294                            
00001294                            loc_13CA:
00001294 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000129A 6100 0000                  		bsr.w	DelayProgram
0000129E 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000012A2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012A4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000012AA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012AC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000012B2 4E71                       		nop	
000012B4 6000                       		bra.s	loc_1404
000012B6                            ; ===========================================================================
000012B6                            
000012B6                            Pause_ChkBC:				; XREF: PauseGame
000012B6 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000012BC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012BE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000012C4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012C6                            
000012C6                            Pause_ChkStart:				; XREF: PauseGame
000012C6 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
000012CA 6600                       		bne.s	@waitlonger
000012CC 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
000012D2 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
000012D8 6000                       		bra.s	@cont
000012DA                            
000012DA                            	@waitlonger:
000012DA 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
000012DE                            
000012DE                            	@cont:
000012DE 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
000012E2 7000                       		moveq	#0,d0
000012E4 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
000012E6 4EB9 0000 0000             		jsr		loc_D368
000012EC 4EB9 0000 0000             		jsr		BuildSprites
000012F2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000012F8 6600                       		bne.s	@notss
000012FA 4EB9 0000 0000             		jsr	SS_ShowLayout
00001300                            
00001300                            	@notss:
00001300 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001306 678C                       		beq.s	loc_13CA	; if not, branch
00001308 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
0000130E                            
0000130E                            loc_1404:				; XREF: PauseGame
0000130E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001314                            
00001314                            Unpause:				; XREF: PauseGame
00001314 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000131A                            
0000131A                            Pause_DoNothing:			; XREF: PauseGame
0000131A 4E75                       		rts	
0000131C                            ; ===========================================================================
0000131C                            
0000131C                            Pause_SlowMo:				; XREF: PauseGame
0000131C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001322 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001328 4E75                       		rts	
0000132A                            ; End of function PauseGame
0000132A                            
0000132A                            ; ---------------------------------------------------------------------------
0000132A                            ; Subroutine to	display	patterns via the VDP
0000132A                            ; ---------------------------------------------------------------------------
0000132A                            
0000132A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000132A                            
0000132A                            
0000132A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000132A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001330 283C 0080 0000             		move.l	#$800000,d4
00001336                            
00001336                            loc_142C:
00001336 2D40 0004                  		move.l	d0,4(a6)
0000133A 3601                       		move.w	d1,d3
0000133C                            
0000133C                            loc_1432:
0000133C 3C99                       		move.w	(a1)+,(a6)
0000133E 51CB FFFC                  		dbf	d3,loc_1432
00001342 D084                       		add.l	d4,d0
00001344 51CA FFF0                  		dbf	d2,loc_142C
00001348 4E75                       		rts	
0000134A                            ; End of function ShowVDPGraphics
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Nemesis decompression	algorithm
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            NemDec:
0000134A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000134E 47F9 0000 0000             		lea	(loc_1502).l,a3
00001354 49F9 00C0 0000             		lea	($C00000).l,a4
0000135A 6000                       		bra.s	loc_145C
0000135C                            ; ===========================================================================
0000135C 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001360 47F9 0000 0000             		lea	(loc_1518).l,a3
00001366                            
00001366                            loc_145C:				; XREF: NemDec
00001366 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000136A 3418                       		move.w	(a0)+,d2
0000136C E34A                       		lsl.w	#1,d2
0000136E 6400                       		bcc.s	loc_146A
00001370 D6FC 000A                  		adda.w	#$A,a3
00001374                            
00001374                            loc_146A:
00001374 E54A                       		lsl.w	#2,d2
00001376 3A42                       		movea.w	d2,a5
00001378 7608                       		moveq	#8,d3
0000137A 7400                       		moveq	#0,d2
0000137C 7800                       		moveq	#0,d4
0000137E 6100 0000                  		bsr.w	NemDec4
00001382 1A18                       		move.b	(a0)+,d5
00001384 E145                       		asl.w	#8,d5
00001386 1A18                       		move.b	(a0)+,d5
00001388 3C3C 0010                  		move.w	#$10,d6
0000138C 6100                       		bsr.s	NemDec2
0000138E 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001392 4E75                       		rts	
00001394                            ; End of function NemDec
00001394                            
00001394                            
00001394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001394                            
00001394                            
00001394                            NemDec2:				; XREF: NemDec
00001394 3E06                       		move.w	d6,d7
00001396 5147                       		subq.w	#8,d7
00001398 3205                       		move.w	d5,d1
0000139A EE69                       		lsr.w	d7,d1
0000139C 0C01 00FC                  		cmpi.b	#-4,d1
000013A0 6400                       		bcc.s	loc_14D6
000013A2 0241 00FF                  		andi.w	#$FF,d1
000013A6 D241                       		add.w	d1,d1
000013A8 1031 1000                  		move.b	(a1,d1.w),d0
000013AC 4880                       		ext.w	d0
000013AE 9C40                       		sub.w	d0,d6
000013B0 0C46 0009                  		cmpi.w	#9,d6
000013B4 6400                       		bcc.s	loc_14B2
000013B6 5046                       		addq.w	#8,d6
000013B8 E145                       		asl.w	#8,d5
000013BA 1A18                       		move.b	(a0)+,d5
000013BC                            
000013BC                            loc_14B2:
000013BC 1231 1001                  		move.b	1(a1,d1.w),d1
000013C0 3001                       		move.w	d1,d0
000013C2 0241 000F                  		andi.w	#$F,d1
000013C6 0240 00F0                  		andi.w	#$F0,d0
000013CA                            
000013CA                            loc_14C0:				; XREF: NemDec3
000013CA E848                       		lsr.w	#4,d0
000013CC                            
000013CC                            loc_14C2:				; XREF: NemDec3
000013CC E98C                       		lsl.l	#4,d4
000013CE 8801                       		or.b	d1,d4
000013D0 5343                       		subq.w	#1,d3
000013D2 6600                       		bne.s	loc_14D0
000013D4 4ED3                       		jmp	(a3)
000013D6                            ; End of function NemDec2
000013D6                            
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            NemDec3:				; XREF: loc_1502
000013D6 7800                       		moveq	#0,d4
000013D8 7608                       		moveq	#8,d3
000013DA                            
000013DA                            loc_14D0:				; XREF: NemDec2
000013DA 51C8 FFF0                  		dbf	d0,loc_14C2
000013DE 60B4                       		bra.s	NemDec2
000013E0                            ; ===========================================================================
000013E0                            
000013E0                            loc_14D6:				; XREF: NemDec2
000013E0 5D46                       		subq.w	#6,d6
000013E2 0C46 0009                  		cmpi.w	#9,d6
000013E6 6400                       		bcc.s	loc_14E4
000013E8 5046                       		addq.w	#8,d6
000013EA E145                       		asl.w	#8,d5
000013EC 1A18                       		move.b	(a0)+,d5
000013EE                            
000013EE                            loc_14E4:				; XREF: NemDec3
000013EE 5F46                       		subq.w	#7,d6
000013F0 3205                       		move.w	d5,d1
000013F2 EC69                       		lsr.w	d6,d1
000013F4 3001                       		move.w	d1,d0
000013F6 0241 000F                  		andi.w	#$F,d1
000013FA 0240 0070                  		andi.w	#$70,d0
000013FE 0C46 0009                  		cmpi.w	#9,d6
00001402 64C6                       		bcc.s	loc_14C0
00001404 5046                       		addq.w	#8,d6
00001406 E145                       		asl.w	#8,d5
00001408 1A18                       		move.b	(a0)+,d5
0000140A 60BE                       		bra.s	loc_14C0
0000140C                            ; End of function NemDec3
0000140C                            
0000140C                            ; ===========================================================================
0000140C                            
0000140C                            loc_1502:				; XREF: NemDec
0000140C 2884                       		move.l	d4,(a4)
0000140E 534D                       		subq.w	#1,a5
00001410 380D                       		move.w	a5,d4
00001412 66C2                       		bne.s	NemDec3
00001414 4E75                       		rts	
00001416                            ; ===========================================================================
00001416 B982                       		eor.l	d4,d2
00001418 2882                       		move.l	d2,(a4)
0000141A 534D                       		subq.w	#1,a5
0000141C 380D                       		move.w	a5,d4
0000141E 66B6                       		bne.s	NemDec3
00001420 4E75                       		rts	
00001422                            ; ===========================================================================
00001422                            
00001422                            loc_1518:				; XREF: NemDec
00001422 28C4                       		move.l	d4,(a4)+
00001424 534D                       		subq.w	#1,a5
00001426 380D                       		move.w	a5,d4
00001428 66AC                       		bne.s	NemDec3
0000142A 4E75                       		rts	
0000142C                            ; ===========================================================================
0000142C B982                       		eor.l	d4,d2
0000142E 28C2                       		move.l	d2,(a4)+
00001430 534D                       		subq.w	#1,a5
00001432 380D                       		move.w	a5,d4
00001434 66A0                       		bne.s	NemDec3
00001436 4E75                       		rts	
00001438                            
00001438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001438                            
00001438                            
00001438                            NemDec4:				; XREF: NemDec
00001438 1018                       		move.b	(a0)+,d0
0000143A                            
0000143A                            loc_1530:
0000143A 0C00 00FF                  		cmpi.b	#-1,d0
0000143E 6600                       		bne.s	loc_1538
00001440 4E75                       		rts	
00001442                            ; ===========================================================================
00001442                            
00001442                            loc_1538:				; XREF: NemDec4
00001442 3E00                       		move.w	d0,d7
00001444                            
00001444                            loc_153A:
00001444 1018                       		move.b	(a0)+,d0
00001446 0C00 0080                  		cmpi.b	#$80,d0
0000144A 64EE                       		bcc.s	loc_1530
0000144C 1200                       		move.b	d0,d1
0000144E 0247 000F                  		andi.w	#$F,d7
00001452 0241 0070                  		andi.w	#$70,d1
00001456 8E41                       		or.w	d1,d7
00001458 0240 000F                  		andi.w	#$F,d0
0000145C 1200                       		move.b	d0,d1
0000145E E149                       		lsl.w	#8,d1
00001460 8E41                       		or.w	d1,d7
00001462 7208                       		moveq	#8,d1
00001464 9240                       		sub.w	d0,d1
00001466 6600                       		bne.s	loc_1568
00001468 1018                       		move.b	(a0)+,d0
0000146A D040                       		add.w	d0,d0
0000146C 3387 0000                  		move.w	d7,(a1,d0.w)
00001470 60D2                       		bra.s	loc_153A
00001472                            ; ===========================================================================
00001472                            
00001472                            loc_1568:				; XREF: NemDec4
00001472 1018                       		move.b	(a0)+,d0
00001474 E368                       		lsl.w	d1,d0
00001476 D040                       		add.w	d0,d0
00001478 7A01                       		moveq	#1,d5
0000147A E36D                       		lsl.w	d1,d5
0000147C 5345                       		subq.w	#1,d5
0000147E                            
0000147E                            loc_1574:
0000147E 3387 0000                  		move.w	d7,(a1,d0.w)
00001482 5440                       		addq.w	#2,d0
00001484 51CD FFF8                  		dbf	d5,loc_1574
00001488 60BA                       		bra.s	loc_153A
0000148A                            ; End of function NemDec4
0000148A                            
0000148A                            ; ---------------------------------------------------------------------------
0000148A                            ; Subroutine to	load pattern load cues
0000148A                            ; ---------------------------------------------------------------------------
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            LoadPLC:
0000148A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000148E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001494 D040                       		add.w	d0,d0
00001496 3031 0000                  		move.w	(a1,d0.w),d0
0000149A 43F1 0000                  		lea	(a1,d0.w),a1
0000149E 45F8 F680                  		lea	($FFFFF680).w,a2
000014A2                            
000014A2                            loc_1598:
000014A2 4A92                       		tst.l	(a2)
000014A4 6700                       		beq.s	loc_15A0
000014A6 5C4A                       		addq.w	#6,a2
000014A8 60F8                       		bra.s	loc_1598
000014AA                            ; ===========================================================================
000014AA                            
000014AA                            loc_15A0:				; XREF: LoadPLC
000014AA 3019                       		move.w	(a1)+,d0
000014AC 6B00                       		bmi.s	loc_15AC
000014AE                            
000014AE                            loc_15A4:
000014AE 24D9                       		move.l	(a1)+,(a2)+
000014B0 34D9                       		move.w	(a1)+,(a2)+
000014B2 51C8 FFFA                  		dbf	d0,loc_15A4
000014B6                            
000014B6                            loc_15AC:
000014B6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014BA 4E75                       		rts	
000014BC                            ; End of function LoadPLC
000014BC                            
000014BC                            
000014BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014BC                            
000014BC                            
000014BC                            LoadPLC2:
000014BC 48E7 0060                  		movem.l	a1-a2,-(sp)
000014C0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000014C6 D040                       		add.w	d0,d0
000014C8 3031 0000                  		move.w	(a1,d0.w),d0
000014CC 43F1 0000                  		lea	(a1,d0.w),a1
000014D0 6100                       		bsr.s	ClearPLC
000014D2 45F8 F680                  		lea	($FFFFF680).w,a2
000014D6 3019                       		move.w	(a1)+,d0
000014D8 6B00                       		bmi.s	loc_15D8
000014DA                            
000014DA                            loc_15D0:
000014DA 24D9                       		move.l	(a1)+,(a2)+
000014DC 34D9                       		move.w	(a1)+,(a2)+
000014DE 51C8 FFFA                  		dbf	d0,loc_15D0
000014E2                            
000014E2                            loc_15D8:
000014E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014E6 4E75                       		rts	
000014E8                            ; End of function LoadPLC2
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the pattern load cues
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearPLC:				; XREF: LoadPLC2
000014E8 45F8 F680                  		lea	($FFFFF680).w,a2
000014EC 701F                       		moveq	#$1F,d0
000014EE                            
000014EE                            ClearPLC_Loop:
000014EE 429A                       		clr.l	(a2)+
000014F0 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000014F4 4E75                       		rts	
000014F6                            ; End of function ClearPLC
000014F6                            
000014F6                            ; ---------------------------------------------------------------------------
000014F6                            ; Subroutine to	use graphics listed in a pattern load cue
000014F6                            ; ---------------------------------------------------------------------------
000014F6                            
000014F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014F6                            
000014F6                            
000014F6                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014F6 4AB8 F680                  		tst.l	($FFFFF680).w
000014FA 6700                       		beq.s	locret_1640
000014FC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001500 6600                       		bne.s	locret_1640
00001502 2078 F680                  		movea.l	($FFFFF680).w,a0
00001506 47F9 0000 140C             		lea	(loc_1502).l,a3
0000150C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001510 3418                       		move.w	(a0)+,d2
00001512 6A00                       		bpl.s	loc_160E
00001514 D6FC 000A                  		adda.w	#$A,a3
00001518                            
00001518                            loc_160E:
00001518 0242 7FFF                  		andi.w	#$7FFF,d2
0000151C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001520 6100 FF16                  		bsr.w	NemDec4
00001524 1A18                       		move.b	(a0)+,d5
00001526 E145                       		asl.w	#8,d5
00001528 1A18                       		move.b	(a0)+,d5
0000152A 7C10                       		moveq	#$10,d6
0000152C 7000                       		moveq	#0,d0
0000152E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001532 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001536 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000153A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000153E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001542 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001546 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000154A                            
0000154A                            locret_1640:
0000154A 4E75                       		rts	
0000154C                            ; End of function RunPLC_RAM
0000154C                            
0000154C                            
0000154C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000154C                            
0000154C                            
0000154C                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
0000154C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001550 6700 0000                  		beq.w	locret_16DA
00001554 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000155A 7000                       		moveq	#0,d0
0000155C 3038 F684                  		move.w	($FFFFF684).w,d0
00001560 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001566 6000                       		bra.s	loc_1676
00001568                            ; End of function sub_1642
00001568                            
00001568                            
00001568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001568                            
00001568                            
00001568                            sub_165E:				; XREF: Demo_Time
00001568 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000156C 6700                       		beq.s	locret_16DA
0000156E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001574 7000                       		moveq	#0,d0
00001576 3038 F684                  		move.w	($FFFFF684).w,d0
0000157A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001580                            
00001580                            loc_1676:				; XREF: sub_1642
00001580 49F9 00C0 0004             		lea	($C00004).l,a4
00001586 E588                       		lsl.l	#2,d0
00001588 E448                       		lsr.w	#2,d0
0000158A 0040 4000                  		ori.w	#$4000,d0
0000158E 4840                       		swap	d0
00001590 2880                       		move.l	d0,(a4)
00001592 594C                       		subq.w	#4,a4
00001594 2078 F680                  		movea.l	($FFFFF680).w,a0
00001598 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
0000159C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000015A0 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000015A4 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000015A8 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000015AC 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000015B0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015B4                            
000015B4                            loc_16AA:				; XREF: sub_165E
000015B4 3A7C 0008                  		movea.w	#8,a5
000015B8 6100 FE1C                  		bsr.w	NemDec3
000015BC 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000015C0 6700                       		beq.s	loc_16DC
000015C2 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000015C6 66EC                       		bne.s	loc_16AA
000015C8 21C8 F680                  		move.l	a0,($FFFFF680).w
000015CC 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015D0 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015D4 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015D8 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015DC 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015E0 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015E4                            
000015E4                            locret_16DA:				; XREF: sub_1642
000015E4 4E75                       		rts	
000015E6                            ; ===========================================================================
000015E6                            
000015E6                            loc_16DC:				; XREF: sub_165E
000015E6 41F8 F680                  		lea	($FFFFF680).w,a0
000015EA 7015                       		moveq	#$15,d0
000015EC                            
000015EC                            loc_16E2:				; XREF: sub_165E
000015EC 20E8 0006                  		move.l	6(a0),(a0)+
000015F0 51C8 FFFA                  		dbf	d0,loc_16E2
000015F4 4E75                       		rts	
000015F6                            ; End of function sub_165E
000015F6                            
000015F6                            ; ---------------------------------------------------------------------------
000015F6                            ; Subroutine to	execute	the pattern load cue
000015F6                            ; ---------------------------------------------------------------------------
000015F6                            
000015F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F6                            
000015F6                            
000015F6                            RunPLC_ROM:
000015F6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015FC D040                       		add.w	d0,d0
000015FE 3031 0000                  		move.w	(a1,d0.w),d0
00001602 43F1 0000                  		lea	(a1,d0.w),a1
00001606 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001608                            
00001608                            RunPLC_Loop:
00001608 2059                       		movea.l	(a1)+,a0	; get art pointer
0000160A 7000                       		moveq	#0,d0
0000160C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000160E E588                       		lsl.l	#2,d0		; divide address by $20
00001610 E448                       		lsr.w	#2,d0
00001612 0040 4000                  		ori.w	#$4000,d0
00001616 4840                       		swap	d0
00001618 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000161E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001622 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001626 4E75                       		rts	
00001628                            ; End of function RunPLC_ROM
00001628                            
00001628                            ; ---------------------------------------------------------------------------
00001628                            ; Enigma decompression algorithm
00001628                            ; ---------------------------------------------------------------------------
00001628                            
00001628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001628                            
00001628                            
00001628                            EniDec:
00001628 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000162C 3640                       		movea.w	d0,a3
0000162E 1018                       		move.b	(a0)+,d0
00001630 4880                       		ext.w	d0
00001632 3A40                       		movea.w	d0,a5
00001634 1818                       		move.b	(a0)+,d4
00001636 E70C                       		lsl.b	#3,d4
00001638 3458                       		movea.w	(a0)+,a2
0000163A D4CB                       		adda.w	a3,a2
0000163C 3858                       		movea.w	(a0)+,a4
0000163E D8CB                       		adda.w	a3,a4
00001640 1A18                       		move.b	(a0)+,d5
00001642 E145                       		asl.w	#8,d5
00001644 1A18                       		move.b	(a0)+,d5
00001646 7C10                       		moveq	#$10,d6
00001648                            
00001648                            loc_173E:				; XREF: loc_1768
00001648 7007                       		moveq	#7,d0
0000164A 3E06                       		move.w	d6,d7
0000164C 9E40                       		sub.w	d0,d7
0000164E 3205                       		move.w	d5,d1
00001650 EE69                       		lsr.w	d7,d1
00001652 0241 007F                  		andi.w	#$7F,d1
00001656 3401                       		move.w	d1,d2
00001658 0C41 0040                  		cmpi.w	#$40,d1
0000165C 6400                       		bcc.s	loc_1758
0000165E 7006                       		moveq	#6,d0
00001660 E24A                       		lsr.w	#1,d2
00001662                            
00001662                            loc_1758:
00001662 6100 0000                  		bsr.w	sub_188C
00001666 0242 000F                  		andi.w	#$F,d2
0000166A E849                       		lsr.w	#4,d1
0000166C D241                       		add.w	d1,d1
0000166E 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001672                            ; End of function EniDec
00001672                            
00001672                            ; ===========================================================================
00001672                            
00001672                            loc_1768:				; XREF: loc_17B4
00001672 32CA                       		move.w	a2,(a1)+
00001674 524A                       		addq.w	#1,a2
00001676 51CA FFFA                  		dbf	d2,loc_1768
0000167A 60CC                       		bra.s	loc_173E
0000167C                            ; ===========================================================================
0000167C                            
0000167C                            loc_1772:				; XREF: loc_17B4
0000167C 32CC                       		move.w	a4,(a1)+
0000167E 51CA FFFC                  		dbf	d2,loc_1772
00001682 60C4                       		bra.s	loc_173E
00001684                            ; ===========================================================================
00001684                            
00001684                            loc_177A:				; XREF: loc_17B4
00001684 6100 0000                  		bsr.w	loc_17DC
00001688                            
00001688                            loc_177E:
00001688 32C1                       		move.w	d1,(a1)+
0000168A 51CA FFFC                  		dbf	d2,loc_177E
0000168E 60B8                       		bra.s	loc_173E
00001690                            ; ===========================================================================
00001690                            
00001690                            loc_1786:				; XREF: loc_17B4
00001690 6100 0000                  		bsr.w	loc_17DC
00001694                            
00001694                            loc_178A:
00001694 32C1                       		move.w	d1,(a1)+
00001696 5241                       		addq.w	#1,d1
00001698 51CA FFFA                  		dbf	d2,loc_178A
0000169C 60AA                       		bra.s	loc_173E
0000169E                            ; ===========================================================================
0000169E                            
0000169E                            loc_1794:				; XREF: loc_17B4
0000169E 6100 0000                  		bsr.w	loc_17DC
000016A2                            
000016A2                            loc_1798:
000016A2 32C1                       		move.w	d1,(a1)+
000016A4 5341                       		subq.w	#1,d1
000016A6 51CA FFFA                  		dbf	d2,loc_1798
000016AA 609C                       		bra.s	loc_173E
000016AC                            ; ===========================================================================
000016AC                            
000016AC                            loc_17A2:				; XREF: loc_17B4
000016AC 0C42 000F                  		cmpi.w	#$F,d2
000016B0 6700                       		beq.s	loc_17C4
000016B2                            
000016B2                            loc_17A8:
000016B2 6100 0000                  		bsr.w	loc_17DC
000016B6 32C1                       		move.w	d1,(a1)+
000016B8 51CA FFF8                  		dbf	d2,loc_17A8
000016BC 608A                       		bra.s	loc_173E
000016BE                            ; ===========================================================================
000016BE                            
000016BE                            loc_17B4:				; XREF: EniDec
000016BE 60B2                       		bra.s	loc_1768
000016C0                            ; ===========================================================================
000016C0 60B0                       		bra.s	loc_1768
000016C2                            ; ===========================================================================
000016C2 60B8                       		bra.s	loc_1772
000016C4                            ; ===========================================================================
000016C4 60B6                       		bra.s	loc_1772
000016C6                            ; ===========================================================================
000016C6 60BC                       		bra.s	loc_177A
000016C8                            ; ===========================================================================
000016C8 60C6                       		bra.s	loc_1786
000016CA                            ; ===========================================================================
000016CA 60D2                       		bra.s	loc_1794
000016CC                            ; ===========================================================================
000016CC 60DE                       		bra.s	loc_17A2
000016CE                            ; ===========================================================================
000016CE                            
000016CE                            loc_17C4:				; XREF: loc_17A2
000016CE 5348                       		subq.w	#1,a0
000016D0 0C46 0010                  		cmpi.w	#$10,d6
000016D4 6600                       		bne.s	loc_17CE
000016D6 5348                       		subq.w	#1,a0
000016D8                            
000016D8                            loc_17CE:
000016D8 3008                       		move.w	a0,d0
000016DA E248                       		lsr.w	#1,d0
000016DC 6400                       		bcc.s	loc_17D6
000016DE 5248                       		addq.w	#1,a0
000016E0                            
000016E0                            loc_17D6:
000016E0 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016E4 4E75                       		rts	
000016E6                            ; ===========================================================================
000016E6                            
000016E6                            loc_17DC:				; XREF: loc_17A2
000016E6 360B                       		move.w	a3,d3
000016E8 1204                       		move.b	d4,d1
000016EA D201                       		add.b	d1,d1
000016EC 6400                       		bcc.s	loc_17EE
000016EE 5346                       		subq.w	#1,d6
000016F0 0D05                       		btst	d6,d5
000016F2 6700                       		beq.s	loc_17EE
000016F4 0043 8000                  		ori.w	#-$8000,d3
000016F8                            
000016F8                            loc_17EE:
000016F8 D201                       		add.b	d1,d1
000016FA 6400                       		bcc.s	loc_17FC
000016FC 5346                       		subq.w	#1,d6
000016FE 0D05                       		btst	d6,d5
00001700 6700                       		beq.s	loc_17FC
00001702 0643 4000                  		addi.w	#$4000,d3
00001706                            
00001706                            loc_17FC:
00001706 D201                       		add.b	d1,d1
00001708 6400                       		bcc.s	loc_180A
0000170A 5346                       		subq.w	#1,d6
0000170C 0D05                       		btst	d6,d5
0000170E 6700                       		beq.s	loc_180A
00001710 0643 2000                  		addi.w	#$2000,d3
00001714                            
00001714                            loc_180A:
00001714 D201                       		add.b	d1,d1
00001716 6400                       		bcc.s	loc_1818
00001718 5346                       		subq.w	#1,d6
0000171A 0D05                       		btst	d6,d5
0000171C 6700                       		beq.s	loc_1818
0000171E 0043 1000                  		ori.w	#$1000,d3
00001722                            
00001722                            loc_1818:
00001722 D201                       		add.b	d1,d1
00001724 6400                       		bcc.s	loc_1826
00001726 5346                       		subq.w	#1,d6
00001728 0D05                       		btst	d6,d5
0000172A 6700                       		beq.s	loc_1826
0000172C 0043 0800                  		ori.w	#$800,d3
00001730                            
00001730                            loc_1826:
00001730 3205                       		move.w	d5,d1
00001732 3E06                       		move.w	d6,d7
00001734 9E4D                       		sub.w	a5,d7
00001736 6400                       		bcc.s	loc_1856
00001738 3C07                       		move.w	d7,d6
0000173A 0646 0010                  		addi.w	#$10,d6
0000173E 4447                       		neg.w	d7
00001740 EF69                       		lsl.w	d7,d1
00001742 1A10                       		move.b	(a0),d5
00001744 EF3D                       		rol.b	d7,d5
00001746 DE47                       		add.w	d7,d7
00001748 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
0000174C D245                       		add.w	d5,d1
0000174E                            
0000174E                            loc_1844:				; XREF: loc_1868
0000174E 300D                       		move.w	a5,d0
00001750 D040                       		add.w	d0,d0
00001752 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001756 D243                       		add.w	d3,d1
00001758 1A18                       		move.b	(a0)+,d5
0000175A E14D                       		lsl.w	#8,d5
0000175C 1A18                       		move.b	(a0)+,d5
0000175E 4E75                       		rts	
00001760                            ; ===========================================================================
00001760                            
00001760                            loc_1856:				; XREF: loc_1826
00001760 6700                       		beq.s	loc_1868
00001762 EE69                       		lsr.w	d7,d1
00001764 300D                       		move.w	a5,d0
00001766 D040                       		add.w	d0,d0
00001768 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000176C D243                       		add.w	d3,d1
0000176E 300D                       		move.w	a5,d0
00001770 6000                       		bra.s	sub_188C
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1868:				; XREF: loc_1856
00001772 7C10                       		moveq	#$10,d6
00001774                            
00001774                            loc_186A:
00001774 60D8                       		bra.s	loc_1844
00001776                            ; ===========================================================================
00001776 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
0000178C 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001796                            
00001796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001796                            
00001796                            
00001796                            sub_188C:				; XREF: EniDec
00001796 9C40                       		sub.w	d0,d6
00001798 0C46 0009                  		cmpi.w	#9,d6
0000179C 6400                       		bcc.s	locret_189A
0000179E 5046                       		addq.w	#8,d6
000017A0 E145                       		asl.w	#8,d5
000017A2 1A18                       		move.b	(a0)+,d5
000017A4                            
000017A4                            locret_189A:
000017A4 4E75                       		rts	
000017A6                            ; End of function sub_188C
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Kosinski decompression algorithm
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            KosDec:
000017A6                            
000017A6 =FFFFFFFE                  var_2		= -2
000017A6 =FFFFFFFF                  var_1		= -1
000017A6                            
000017A6 558F                       		subq.l	#2,sp
000017A8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017AC 1E98                       		move.b	(a0)+,(sp)
000017AE 3A17                       		move.w	(sp),d5
000017B0 780F                       		moveq	#$F,d4
000017B2                            
000017B2                            loc_18A8:
000017B2 E24D                       		lsr.w	#1,d5
000017B4 40C6                       		move	sr,d6
000017B6 51CC 0000                  		dbf	d4,loc_18BA
000017BA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017BE 1E98                       		move.b	(a0)+,(sp)
000017C0 3A17                       		move.w	(sp),d5
000017C2 780F                       		moveq	#$F,d4
000017C4                            
000017C4                            loc_18BA:
000017C4 44C6                       		move	d6,ccr
000017C6 6400                       		bcc.s	loc_18C2
000017C8 12D8                       		move.b	(a0)+,(a1)+
000017CA 60E6                       		bra.s	loc_18A8
000017CC                            ; ===========================================================================
000017CC                            
000017CC                            loc_18C2:				; XREF: KosDec
000017CC 7600                       		moveq	#0,d3
000017CE E24D                       		lsr.w	#1,d5
000017D0 40C6                       		move	sr,d6
000017D2 51CC 0000                  		dbf	d4,loc_18D6
000017D6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017DA 1E98                       		move.b	(a0)+,(sp)
000017DC 3A17                       		move.w	(sp),d5
000017DE 780F                       		moveq	#$F,d4
000017E0                            
000017E0                            loc_18D6:
000017E0 44C6                       		move	d6,ccr
000017E2 6500                       		bcs.s	loc_1906
000017E4 E24D                       		lsr.w	#1,d5
000017E6 51CC 0000                  		dbf	d4,loc_18EA
000017EA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000017EE 1E98                       		move.b	(a0)+,(sp)
000017F0 3A17                       		move.w	(sp),d5
000017F2 780F                       		moveq	#$F,d4
000017F4                            
000017F4                            loc_18EA:
000017F4 E353                       		roxl.w	#1,d3
000017F6 E24D                       		lsr.w	#1,d5
000017F8 51CC 0000                  		dbf	d4,loc_18FC
000017FC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001800 1E98                       		move.b	(a0)+,(sp)
00001802 3A17                       		move.w	(sp),d5
00001804 780F                       		moveq	#$F,d4
00001806                            
00001806                            loc_18FC:
00001806 E353                       		roxl.w	#1,d3
00001808 5243                       		addq.w	#1,d3
0000180A 74FF                       		moveq	#-1,d2
0000180C 1418                       		move.b	(a0)+,d2
0000180E 6000                       		bra.s	loc_191C
00001810                            ; ===========================================================================
00001810                            
00001810                            loc_1906:				; XREF: loc_18C2
00001810 1018                       		move.b	(a0)+,d0
00001812 1218                       		move.b	(a0)+,d1
00001814 74FF                       		moveq	#-1,d2
00001816 1401                       		move.b	d1,d2
00001818 EB4A                       		lsl.w	#5,d2
0000181A 1400                       		move.b	d0,d2
0000181C 0241 0007                  		andi.w	#7,d1
00001820 6700                       		beq.s	loc_1928
00001822 1601                       		move.b	d1,d3
00001824 5243                       		addq.w	#1,d3
00001826                            
00001826                            loc_191C:
00001826 1031 2000                  		move.b	(a1,d2.w),d0
0000182A 12C0                       		move.b	d0,(a1)+
0000182C 51CB FFF8                  		dbf	d3,loc_191C
00001830 6080                       		bra.s	loc_18A8
00001832                            ; ===========================================================================
00001832                            
00001832                            loc_1928:				; XREF: loc_1906
00001832 1218                       		move.b	(a0)+,d1
00001834 6700                       		beq.s	loc_1938
00001836 0C01 0001                  		cmpi.b	#1,d1
0000183A 6700 FF76                  		beq.w	loc_18A8
0000183E 1601                       		move.b	d1,d3
00001840 60E4                       		bra.s	loc_191C
00001842                            ; ===========================================================================
00001842                            
00001842                            loc_1938:				; XREF: loc_1928
00001842 548F                       		addq.l	#2,sp
00001844 4E75                       		rts	
00001846                            ; End of function KosDec
00001846                            
00001846                            ; ---------------------------------------------------------------------------
00001846                            ; Pallet cycling routine loading subroutine
00001846                            ; ---------------------------------------------------------------------------
00001846                            
00001846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001846                            
00001846                            
00001846                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001846 7400                       		moveq	#0,d2
00001848 7000                       		moveq	#0,d0
0000184A 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
0000184E D040                       		add.w	d0,d0		; multiply by 2
00001850 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001854 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001858                            ; End of function PalCycle_Load
00001858                            
00001858                            ; ===========================================================================
00001858                            ; ---------------------------------------------------------------------------
00001858                            ; Pallet cycling routines
00001858                            ; ---------------------------------------------------------------------------
00001858 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000185A 0000                       		dc.w PalCycle_LZ-PalCycle
0000185C 0000                       		dc.w PalCycle_MZ-PalCycle
0000185E 0000                       		dc.w PalCycle_SLZ-PalCycle
00001860 0000                       		dc.w PalCycle_SYZ-PalCycle
00001862 0000                       		dc.w PalCycle_SBZ-PalCycle
00001864 0000                       		dc.w PalCycle_GHZ-PalCycle
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            PalCycle_Title:				; XREF: TitleScreen
00001866 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
0000186C 6000                       		bra.s	loc_196A
0000186E                            ; ===========================================================================
0000186E                            
0000186E                            PalCycle_GHZ:				; XREF: PalCycle
0000186E 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001874                            
00001874                            loc_196A:				; XREF: PalCycle_Title
00001874 5378 F634                  		subq.w	#1,($FFFFF634).w
00001878 6A00                       		bpl.s	locret_1990
0000187A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001880 3038 F632                  		move.w	($FFFFF632).w,d0
00001884 5278 F632                  		addq.w	#1,($FFFFF632).w
00001888 0240 0003                  		andi.w	#3,d0
0000188C E748                       		lsl.w	#3,d0
0000188E 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001892 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001896 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000189A                            
0000189A                            locret_1990:
0000189A 4E75                       		rts	
0000189C                            ; End of function PalCycle_Title
0000189C                            
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            PalCycle_LZ:				; XREF: PalCycle
0000189C 5378 F634                  		subq.w	#1,($FFFFF634).w
000018A0 6A00                       		bpl.s	loc_19D8
000018A2 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000018A8 3038 F632                  		move.w	($FFFFF632).w,d0
000018AC 5278 F632                  		addq.w	#1,($FFFFF632).w
000018B0 0240 0003                  		andi.w	#3,d0
000018B4 E748                       		lsl.w	#3,d0
000018B6 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000018BC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000018C2 6600                       		bne.s	loc_19C0
000018C4 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000018CA                            
000018CA                            loc_19C0:
000018CA 43F8 FB56                  		lea	($FFFFFB56).w,a1
000018CE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000018D2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000018D6 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000018DA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000018DE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000018E2                            
000018E2                            loc_19D8:
000018E2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000018E6 0240 0007                  		andi.w	#7,d0
000018EA 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000018EE 6700                       		beq.s	locret_1A3A
000018F0 7201                       		moveq	#1,d1
000018F2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000018F6 6700                       		beq.s	loc_19F0
000018F8 4441                       		neg.w	d1
000018FA                            
000018FA                            loc_19F0:
000018FA 3038 F650                  		move.w	($FFFFF650).w,d0
000018FE 0240 0003                  		andi.w	#3,d0
00001902 D041                       		add.w	d1,d0
00001904 0C40 0003                  		cmpi.w	#3,d0
00001908 6500                       		bcs.s	loc_1A0A
0000190A 3200                       		move.w	d0,d1
0000190C 7000                       		moveq	#0,d0
0000190E 4A41                       		tst.w	d1
00001910 6A00                       		bpl.s	loc_1A0A
00001912 7002                       		moveq	#2,d0
00001914                            
00001914                            loc_1A0A:
00001914 31C0 F650                  		move.w	d0,($FFFFF650).w
00001918 D040                       		add.w	d0,d0
0000191A 3200                       		move.w	d0,d1
0000191C D040                       		add.w	d0,d0
0000191E D041                       		add.w	d1,d0
00001920 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001926 43F8 FB76                  		lea	($FFFFFB76).w,a1
0000192A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000192E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001932 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001938 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
0000193C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001940 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001944                            
00001944                            locret_1A3A:
00001944 4E75                       		rts	
00001946                            ; End of function PalCycle_LZ
00001946                            
00001946                            ; ===========================================================================
00001946 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
0000194E                            ; ===========================================================================
0000194E                            
0000194E                            PalCycle_MZ:				; XREF: PalCycle
0000194E 4E75                       		rts	
00001950                            
00001950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001950                            
00001950                            
00001950                            PalCycle_SLZ:				; XREF: PalCycle
00001950 5378 F634                  		subq.w	#1,($FFFFF634).w
00001954 6A00                       		bpl.s	locret_1A80
00001956 31FC 0007 F634             		move.w	#7,($FFFFF634).w
0000195C 3038 F632                  		move.w	($FFFFF632).w,d0
00001960 5240                       		addq.w	#1,d0
00001962 0C40 0006                  		cmpi.w	#6,d0
00001966 6500                       		bcs.s	loc_1A60
00001968 7000                       		moveq	#0,d0
0000196A                            
0000196A                            loc_1A60:
0000196A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000196E 3200                       		move.w	d0,d1
00001970 D241                       		add.w	d1,d1
00001972 D041                       		add.w	d1,d0
00001974 D040                       		add.w	d0,d0
00001976 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
0000197C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001980 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001984 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
0000198A                            
0000198A                            locret_1A80:
0000198A 4E75                       		rts	
0000198C                            ; End of function PalCycle_SLZ
0000198C                            
0000198C                            
0000198C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000198C                            
0000198C                            
0000198C                            PalCycle_SYZ:				; XREF: PalCycle
0000198C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001990 6A00                       		bpl.s	locret_1AC6
00001992 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001998 3038 F632                  		move.w	($FFFFF632).w,d0
0000199C 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A0 0240 0003                  		andi.w	#3,d0
000019A4 E548                       		lsl.w	#2,d0
000019A6 3200                       		move.w	d0,d1
000019A8 D040                       		add.w	d0,d0
000019AA 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
000019B0 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
000019B4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019B8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019BC 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
000019C2 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019C6 32B0 1000                  		move.w	(a0,d1.w),(a1)
000019CA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
000019D0                            
000019D0                            locret_1AC6:
000019D0 4E75                       		rts	
000019D2                            ; End of function PalCycle_SYZ
000019D2                            
000019D2                            
000019D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019D2                            
000019D2                            
000019D2                            PalCycle_SBZ:				; XREF: PalCycle
000019D2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
000019D8 4A38 FE11                  		tst.b	($FFFFFE11).w
000019DC 6700                       		beq.s	loc_1ADA
000019DE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
000019E4                            
000019E4                            loc_1ADA:
000019E4 43F8 F650                  		lea	($FFFFF650).w,a1
000019E8 321A                       		move.w	(a2)+,d1
000019EA                            
000019EA                            loc_1AE0:
000019EA 5311                       		subq.b	#1,(a1)
000019EC 6B00                       		bmi.s	loc_1AEA
000019EE 5489                       		addq.l	#2,a1
000019F0 5C8A                       		addq.l	#6,a2
000019F2 6000                       		bra.s	loc_1B06
000019F4                            ; ===========================================================================
000019F4                            
000019F4                            loc_1AEA:				; XREF: PalCycle_SBZ
000019F4 12DA                       		move.b	(a2)+,(a1)+
000019F6 1011                       		move.b	(a1),d0
000019F8 5200                       		addq.b	#1,d0
000019FA B01A                       		cmp.b	(a2)+,d0
000019FC 6500                       		bcs.s	loc_1AF6
000019FE 7000                       		moveq	#0,d0
00001A00                            
00001A00                            loc_1AF6:
00001A00 12C0                       		move.b	d0,(a1)+
00001A02 0240 000F                  		andi.w	#$F,d0
00001A06 D040                       		add.w	d0,d0
00001A08 305A                       		movea.w	(a2)+,a0
00001A0A 365A                       		movea.w	(a2)+,a3
00001A0C 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001A10                            
00001A10                            loc_1B06:				; XREF: PalCycle_SBZ
00001A10 51C9 FFD8                  		dbf	d1,loc_1AE0
00001A14 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A18 6A00                       		bpl.s	locret_1B64
00001A1A 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001A20 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001A26 4A38 FE11                  		tst.b	($FFFFFE11).w
00001A2A 6700                       		beq.s	loc_1B2E
00001A2C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001A32 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001A38                            
00001A38                            loc_1B2E:
00001A38 72FF                       		moveq	#-1,d1
00001A3A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A3E 6700                       		beq.s	loc_1B38
00001A40 4441                       		neg.w	d1
00001A42                            
00001A42                            loc_1B38:
00001A42 3038 F632                  		move.w	($FFFFF632).w,d0
00001A46 0240 0003                  		andi.w	#3,d0
00001A4A D041                       		add.w	d1,d0
00001A4C 0C40 0003                  		cmpi.w	#3,d0
00001A50 6500                       		bcs.s	loc_1B52
00001A52 3200                       		move.w	d0,d1
00001A54 7000                       		moveq	#0,d0
00001A56 4A41                       		tst.w	d1
00001A58 6A00                       		bpl.s	loc_1B52
00001A5A 7002                       		moveq	#2,d0
00001A5C                            
00001A5C                            loc_1B52:
00001A5C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A60 D040                       		add.w	d0,d0
00001A62 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001A66 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A6A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A6E                            
00001A6E                            locret_1B64:
00001A6E 4E75                       		rts	
00001A70                            ; End of function PalCycle_SBZ
00001A70                            
00001A70                            ; ===========================================================================
00001A70                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001A90                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001AB0                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001AD0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001AE2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001AF4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001B5C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001B80                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001BA0                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001BB0                            
00001BB0                            Pal_SBZCycList:
00001BB0                            	include "_inc\SBZ pallet script 1.asm"
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0                            ; Scrap Brain Zone 1 pallet cycling script
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0 0008                       	dc.w 8			; number of entries - 1
00001BB2 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001BB4 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001BB6 FB50                       	dc.w $FB50		; RAM address
00001BB8 0D08                       	dc.b $D, 8
00001BBA 0000                       	dc.w Pal_SBZCyc2
00001BBC FB52                       	dc.w $FB52
00001BBE 0E08                       	dc.b $E, 8
00001BC0 0000                       	dc.w Pal_SBZCyc3
00001BC2 FB6E                       	dc.w $FB6E
00001BC4 0B08                       	dc.b $B, 8
00001BC6 0000                       	dc.w Pal_SBZCyc5
00001BC8 FB70                       	dc.w $FB70
00001BCA 0708                       	dc.b 7,	8
00001BCC 0000                       	dc.w Pal_SBZCyc6
00001BCE FB72                       	dc.w $FB72
00001BD0 1C10                       	dc.b $1C, $10
00001BD2 0000                       	dc.w Pal_SBZCyc7
00001BD4 FB7E                       	dc.w $FB7E
00001BD6 0303                       	dc.b 3,	3
00001BD8 0000                       	dc.w Pal_SBZCyc8
00001BDA FB78                       	dc.w $FB78
00001BDC 0303                       	dc.b 3,	3
00001BDE 0000                       	dc.w Pal_SBZCyc8+2
00001BE0 FB7A                       	dc.w $FB7A
00001BE2 0303                       	dc.b 3,	3
00001BE4 0000                       	dc.w Pal_SBZCyc8+4
00001BE6 FB7C                       	dc.w $FB7C
00001BE8                            	even
00001BE8                            	even
00001BE8                            
00001BE8                            Pal_SBZCycList2:
00001BE8                            	include "_inc\SBZ pallet script 2.asm"
00001BE8                            ; ---------------------------------------------------------------------------
00001BE8                            ; Scrap Brain Zone 2 pallet cycling script
00001BE8                            ; ---------------------------------------------------------------------------
00001BE8 0006                       	dc.w 6
00001BEA 0708                       	dc.b 7,	8
00001BEC 0000                       	dc.w Pal_SBZCyc1
00001BEE FB50                       	dc.w $FB50
00001BF0 0D08                       	dc.b $D, 8
00001BF2 0000                       	dc.w Pal_SBZCyc2
00001BF4 FB52                       	dc.w $FB52
00001BF6 0908                       	dc.b 9,	8
00001BF8 0000                       	dc.w Pal_SBZCyc9
00001BFA FB70                       	dc.w $FB70
00001BFC 0708                       	dc.b 7,	8
00001BFE 0000                       	dc.w Pal_SBZCyc6
00001C00 FB72                       	dc.w $FB72
00001C02 0303                       	dc.b 3,	3
00001C04 0000                       	dc.w Pal_SBZCyc8
00001C06 FB78                       	dc.w $FB78
00001C08 0303                       	dc.b 3,	3
00001C0A 0000                       	dc.w Pal_SBZCyc8+2
00001C0C FB7A                       	dc.w $FB7A
00001C0E 0303                       	dc.b 3,	3
00001C10 0000                       	dc.w Pal_SBZCyc8+4
00001C12 FB7C                       	dc.w $FB7C
00001C14                            	even
00001C14                            	even
00001C14                            
00001C14                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001C24                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001C34                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001C44                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001C50                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001C60                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001C70                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001C90                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001C9A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001CAA                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001CB6                            ; ---------------------------------------------------------------------------
00001CB6                            ; Subroutine to	fade out and fade in
00001CB6                            ; ---------------------------------------------------------------------------
00001CB6                            
00001CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB6                            
00001CB6                            
00001CB6                            Pal_FadeTo:
00001CB6 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001CBC                            
00001CBC                            Pal_FadeTo2:
00001CBC 7000                       		moveq	#0,d0
00001CBE 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001CC2 1038 F626                  		move.b	($FFFFF626).w,d0
00001CC6 D0C0                       		adda.w	d0,a0
00001CC8 7200                       		moveq	#0,d1
00001CCA 1038 F627                  		move.b	($FFFFF627).w,d0
00001CCE                            
00001CCE                            Pal_ToBlack:
00001CCE 30C1                       		move.w	d1,(a0)+
00001CD0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001CD4                            
00001CD4 383C 0015                  		move.w	#$15,d4
00001CD8                            
00001CD8                            loc_1DCE:
00001CD8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001CDE 6100 0000                  		bsr.w	DelayProgram
00001CE2 6100                       		bsr.s	Pal_FadeIn
00001CE4 6100 F810                  		bsr.w	RunPLC_RAM
00001CE8 51CC FFEE                  		dbf	d4,loc_1DCE
00001CEC 4E75                       		rts	
00001CEE                            ; End of function Pal_FadeTo
00001CEE                            
00001CEE                            ; ---------------------------------------------------------------------------
00001CEE                            ; Pallet fade-in subroutine
00001CEE                            ; ---------------------------------------------------------------------------
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001CEE 7000                       		moveq	#0,d0
00001CF0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001CF4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001CF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001CFC D0C0                       		adda.w	d0,a0
00001CFE D2C0                       		adda.w	d0,a1
00001D00 1038 F627                  		move.b	($FFFFF627).w,d0
00001D04                            
00001D04                            loc_1DFA:
00001D04 6100                       		bsr.s	Pal_AddColor
00001D06 51C8 FFFC                  		dbf	d0,loc_1DFA
00001D0A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001D10 6600                       		bne.s	locret_1E24
00001D12 7000                       		moveq	#0,d0
00001D14 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D18 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001D1C 1038 F626                  		move.b	($FFFFF626).w,d0
00001D20 D0C0                       		adda.w	d0,a0
00001D22 D2C0                       		adda.w	d0,a1
00001D24 1038 F627                  		move.b	($FFFFF627).w,d0
00001D28                            
00001D28                            loc_1E1E:
00001D28 6100                       		bsr.s	Pal_AddColor
00001D2A 51C8 FFFC                  		dbf	d0,loc_1E1E
00001D2E                            
00001D2E                            locret_1E24:
00001D2E 4E75                       		rts	
00001D30                            ; End of function Pal_FadeIn
00001D30                            
00001D30                            
00001D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D30                            
00001D30                            
00001D30                            Pal_AddColor:				; XREF: Pal_FadeIn
00001D30 3419                       		move.w	(a1)+,d2
00001D32 3610                       		move.w	(a0),d3
00001D34 B642                       		cmp.w	d2,d3
00001D36 6700                       		beq.s	loc_1E4E
00001D38 3203                       		move.w	d3,d1
00001D3A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001D3E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001D40 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001D42 30C1                       		move.w	d1,(a0)+	; update pallet
00001D44 4E75                       		rts	
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            Pal_AddGreen:				; XREF: Pal_AddColor
00001D46 3203                       		move.w	d3,d1
00001D48 0641 0020                  		addi.w	#$20,d1		; increase green value
00001D4C B242                       		cmp.w	d2,d1
00001D4E 6200                       		bhi.s	Pal_AddRed
00001D50 30C1                       		move.w	d1,(a0)+	; update pallet
00001D52 4E75                       		rts	
00001D54                            ; ===========================================================================
00001D54                            
00001D54                            Pal_AddRed:				; XREF: Pal_AddGreen
00001D54 5458                       		addq.w	#2,(a0)+	; increase red value
00001D56 4E75                       		rts	
00001D58                            ; ===========================================================================
00001D58                            
00001D58                            loc_1E4E:				; XREF: Pal_AddColor
00001D58 5448                       		addq.w	#2,a0
00001D5A 4E75                       		rts	
00001D5C                            ; End of function Pal_AddColor
00001D5C                            
00001D5C                            
00001D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D5C                            
00001D5C                            
00001D5C                            Pal_FadeFrom:
00001D5C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001D62                            
00001D62                            Pal_FadeFrom2:
00001D62 383C 0015                  		move.w	#$15,d4
00001D66                            
00001D66                            loc_1E5C:
00001D66 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D6C 6100 0000                  		bsr.w	DelayProgram
00001D70 6100                       		bsr.s	Pal_FadeOut
00001D72 6100 F782                  		bsr.w	RunPLC_RAM
00001D76 51CC FFEE                  		dbf	d4,loc_1E5C
00001D7A 4E75                       		rts	
00001D7C                            ; End of function Pal_FadeFrom
00001D7C                            
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            ; Pallet fade-out subroutine
00001D7C                            ; ---------------------------------------------------------------------------
00001D7C                            
00001D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7C                            
00001D7C                            
00001D7C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001D7C 7000                       		moveq	#0,d0
00001D7E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D82 1038 F626                  		move.b	($FFFFF626).w,d0
00001D86 D0C0                       		adda.w	d0,a0
00001D88 1038 F627                  		move.b	($FFFFF627).w,d0
00001D8C                            
00001D8C                            loc_1E82:
00001D8C 6100                       		bsr.s	Pal_DecColor
00001D8E 51C8 FFFC                  		dbf	d0,loc_1E82
00001D92                            
00001D92 7000                       		moveq	#0,d0
00001D94 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001D98 1038 F626                  		move.b	($FFFFF626).w,d0
00001D9C D0C0                       		adda.w	d0,a0
00001D9E 1038 F627                  		move.b	($FFFFF627).w,d0
00001DA2                            
00001DA2                            loc_1E98:
00001DA2 6100                       		bsr.s	Pal_DecColor
00001DA4 51C8 FFFC                  		dbf	d0,loc_1E98
00001DA8 4E75                       		rts	
00001DAA                            ; End of function Pal_FadeOut
00001DAA                            
00001DAA                            
00001DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAA                            
00001DAA                            
00001DAA                            Pal_DecColor:				; XREF: Pal_FadeOut
00001DAA 3410                       		move.w	(a0),d2
00001DAC 6700                       		beq.s	loc_1ECC
00001DAE 3202                       		move.w	d2,d1
00001DB0 0241 000E                  		andi.w	#$E,d1
00001DB4 6700                       		beq.s	Pal_DecGreen
00001DB6 5558                       		subq.w	#2,(a0)+	; decrease red value
00001DB8 4E75                       		rts	
00001DBA                            ; ===========================================================================
00001DBA                            
00001DBA                            Pal_DecGreen:				; XREF: Pal_DecColor
00001DBA 3202                       		move.w	d2,d1
00001DBC 0241 00E0                  		andi.w	#$E0,d1
00001DC0 6700                       		beq.s	Pal_DecBlue
00001DC2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001DC6 4E75                       		rts	
00001DC8                            ; ===========================================================================
00001DC8                            
00001DC8                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001DC8 3202                       		move.w	d2,d1
00001DCA 0241 0E00                  		andi.w	#$E00,d1
00001DCE 6700                       		beq.s	loc_1ECC
00001DD0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001DD4 4E75                       		rts	
00001DD6                            ; ===========================================================================
00001DD6                            
00001DD6                            loc_1ECC:				; XREF: Pal_DecColor
00001DD6 5448                       		addq.w	#2,a0
00001DD8 4E75                       		rts	
00001DDA                            ; End of function Pal_DecColor
00001DDA                            
00001DDA                            ; ---------------------------------------------------------------------------
00001DDA                            ; Subroutine to	fill the pallet	with white (special stage)
00001DDA                            ; ---------------------------------------------------------------------------
00001DDA                            
00001DDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DDA                            
00001DDA                            
00001DDA                            Pal_MakeWhite:				; XREF: SpecialStage
00001DDA 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001DE0 7000                       		moveq	#0,d0
00001DE2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DE6 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEA D0C0                       		adda.w	d0,a0
00001DEC 323C 0EEE                  		move.w	#$EEE,d1
00001DF0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF4                            
00001DF4                            PalWhite_Loop:
00001DF4 30C1                       		move.w	d1,(a0)+
00001DF6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001DFA 383C 0015                  		move.w	#$15,d4
00001DFE                            
00001DFE                            loc_1EF4:
00001DFE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E04 6100 0000                  		bsr.w	DelayProgram
00001E08 6100                       		bsr.s	Pal_WhiteToBlack
00001E0A 6100 F6EA                  		bsr.w	RunPLC_RAM
00001E0E 51CC FFEE                  		dbf	d4,loc_1EF4
00001E12 4E75                       		rts	
00001E14                            ; End of function Pal_MakeWhite
00001E14                            
00001E14                            
00001E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E14                            
00001E14                            
00001E14                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001E14 7000                       		moveq	#0,d0
00001E16 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E1A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E1E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E22 D0C0                       		adda.w	d0,a0
00001E24 D2C0                       		adda.w	d0,a1
00001E26 1038 F627                  		move.b	($FFFFF627).w,d0
00001E2A                            
00001E2A                            loc_1F20:
00001E2A 6100                       		bsr.s	Pal_DecColor2
00001E2C 51C8 FFFC                  		dbf	d0,loc_1F20
00001E30                            
00001E30 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E36 6600                       		bne.s	locret_1F4A
00001E38 7000                       		moveq	#0,d0
00001E3A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E3E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E42 1038 F626                  		move.b	($FFFFF626).w,d0
00001E46 D0C0                       		adda.w	d0,a0
00001E48 D2C0                       		adda.w	d0,a1
00001E4A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E4E                            
00001E4E                            loc_1F44:
00001E4E 6100                       		bsr.s	Pal_DecColor2
00001E50 51C8 FFFC                  		dbf	d0,loc_1F44
00001E54                            
00001E54                            locret_1F4A:
00001E54 4E75                       		rts	
00001E56                            ; End of function Pal_WhiteToBlack
00001E56                            
00001E56                            
00001E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E56                            
00001E56                            
00001E56                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001E56 3419                       		move.w	(a1)+,d2
00001E58 3610                       		move.w	(a0),d3
00001E5A B642                       		cmp.w	d2,d3
00001E5C 6700                       		beq.s	loc_1F78
00001E5E 3203                       		move.w	d3,d1
00001E60 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001E64 6500                       		bcs.s	loc_1F64
00001E66 B242                       		cmp.w	d2,d1
00001E68 6500                       		bcs.s	loc_1F64
00001E6A 30C1                       		move.w	d1,(a0)+
00001E6C 4E75                       		rts	
00001E6E                            ; ===========================================================================
00001E6E                            
00001E6E                            loc_1F64:				; XREF: Pal_DecColor2
00001E6E 3203                       		move.w	d3,d1
00001E70 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001E74 6500                       		bcs.s	loc_1F74
00001E76 B242                       		cmp.w	d2,d1
00001E78 6500                       		bcs.s	loc_1F74
00001E7A 30C1                       		move.w	d1,(a0)+
00001E7C 4E75                       		rts	
00001E7E                            ; ===========================================================================
00001E7E                            
00001E7E                            loc_1F74:				; XREF: loc_1F64
00001E7E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E80 4E75                       		rts	
00001E82                            ; ===========================================================================
00001E82                            
00001E82                            loc_1F78:				; XREF: Pal_DecColor2
00001E82 5448                       		addq.w	#2,a0
00001E84 4E75                       		rts	
00001E86                            ; End of function Pal_DecColor2
00001E86                            
00001E86                            ; ---------------------------------------------------------------------------
00001E86                            ; Subroutine to	make a white flash when	you enter a special stage
00001E86                            ; ---------------------------------------------------------------------------
00001E86                            
00001E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E86                            
00001E86                            
00001E86                            Pal_MakeFlash:				; XREF: SpecialStage
00001E86 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E8C 383C 0015                  		move.w	#$15,d4
00001E90                            
00001E90                            loc_1F86:
00001E90 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E96 6100 0000                  		bsr.w	DelayProgram
00001E9A 6100                       		bsr.s	Pal_ToWhite
00001E9C 6100 F658                  		bsr.w	RunPLC_RAM
00001EA0 51CC FFEE                  		dbf	d4,loc_1F86
00001EA4 4E75                       		rts	
00001EA6                            ; End of function Pal_MakeFlash
00001EA6                            
00001EA6                            
00001EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA6                            
00001EA6                            
00001EA6                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001EA6 7000                       		moveq	#0,d0
00001EA8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EAC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EB0 D0C0                       		adda.w	d0,a0
00001EB2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EB6                            
00001EB6                            loc_1FAC:
00001EB6 6100                       		bsr.s	Pal_AddColor2
00001EB8 51C8 FFFC                  		dbf	d0,loc_1FAC
00001EBC 7000                       		moveq	#0,d0
00001EBE 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EC2 1038 F626                  		move.b	($FFFFF626).w,d0
00001EC6 D0C0                       		adda.w	d0,a0
00001EC8 1038 F627                  		move.b	($FFFFF627).w,d0
00001ECC                            
00001ECC                            loc_1FC2:
00001ECC 6100                       		bsr.s	Pal_AddColor2
00001ECE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001ED2 4E75                       		rts	
00001ED4                            ; End of function Pal_ToWhite
00001ED4                            
00001ED4                            
00001ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED4                            
00001ED4                            
00001ED4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001ED4 3410                       		move.w	(a0),d2
00001ED6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001EDA 6700                       		beq.s	loc_2006
00001EDC 3202                       		move.w	d2,d1
00001EDE 0241 000E                  		andi.w	#$E,d1
00001EE2 0C41 000E                  		cmpi.w	#$E,d1
00001EE6 6700                       		beq.s	loc_1FE2
00001EE8 5458                       		addq.w	#2,(a0)+	; increase red value
00001EEA 4E75                       		rts	
00001EEC                            ; ===========================================================================
00001EEC                            
00001EEC                            loc_1FE2:				; XREF: Pal_AddColor2
00001EEC 3202                       		move.w	d2,d1
00001EEE 0241 00E0                  		andi.w	#$E0,d1
00001EF2 0C41 00E0                  		cmpi.w	#$E0,d1
00001EF6 6700                       		beq.s	loc_1FF4
00001EF8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001EFC 4E75                       		rts	
00001EFE                            ; ===========================================================================
00001EFE                            
00001EFE                            loc_1FF4:				; XREF: loc_1FE2
00001EFE 3202                       		move.w	d2,d1
00001F00 0241 0E00                  		andi.w	#$E00,d1
00001F04 0C41 0E00                  		cmpi.w	#$E00,d1
00001F08 6700                       		beq.s	loc_2006
00001F0A 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001F0E 4E75                       		rts	
00001F10                            ; ===========================================================================
00001F10                            
00001F10                            loc_2006:				; XREF: Pal_AddColor2
00001F10 5448                       		addq.w	#2,a0
00001F12 4E75                       		rts	
00001F14                            ; End of function Pal_AddColor2
00001F14                            
00001F14                            ; ---------------------------------------------------------------------------
00001F14                            ; Pallet cycling routine - Sega	logo
00001F14                            ; ---------------------------------------------------------------------------
00001F14                            
00001F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F14                            
00001F14                            
00001F14                            PalCycle_Sega:				; XREF: SegaScreen
00001F14 4A38 F635                  		tst.b	($FFFFF635).w
00001F18 6600                       		bne.s	loc_206A
00001F1A 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001F1E 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001F24 7205                       		moveq	#5,d1
00001F26 3038 F632                  		move.w	($FFFFF632).w,d0
00001F2A                            
00001F2A                            loc_2020:
00001F2A 6A00                       		bpl.s	loc_202A
00001F2C 5448                       		addq.w	#2,a0
00001F2E 5341                       		subq.w	#1,d1
00001F30 5440                       		addq.w	#2,d0
00001F32 60F6                       		bra.s	loc_2020
00001F34                            ; ===========================================================================
00001F34                            
00001F34                            loc_202A:				; XREF: PalCycle_Sega
00001F34 3400                       		move.w	d0,d2
00001F36 0242 001E                  		andi.w	#$1E,d2
00001F3A 6600                       		bne.s	loc_2034
00001F3C 5440                       		addq.w	#2,d0
00001F3E                            
00001F3E                            loc_2034:
00001F3E 0C40 0060                  		cmpi.w	#$60,d0
00001F42 6400                       		bcc.s	loc_203E
00001F44 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001F48                            
00001F48                            loc_203E:
00001F48 5440                       		addq.w	#2,d0
00001F4A 51C9 FFE8                  		dbf	d1,loc_202A
00001F4E 3038 F632                  		move.w	($FFFFF632).w,d0
00001F52 5440                       		addq.w	#2,d0
00001F54 3400                       		move.w	d0,d2
00001F56 0242 001E                  		andi.w	#$1E,d2
00001F5A 6600                       		bne.s	loc_2054
00001F5C 5440                       		addq.w	#2,d0
00001F5E                            
00001F5E                            loc_2054:
00001F5E 0C40 0064                  		cmpi.w	#$64,d0
00001F62 6D00                       		blt.s	loc_2062
00001F64 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00001F6A 70F4                       		moveq	#-$C,d0
00001F6C                            
00001F6C                            loc_2062:
00001F6C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001F70 7001                       		moveq	#1,d0
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_206A:				; XREF: loc_202A
00001F74 5338 F634                  		subq.b	#1,($FFFFF634).w
00001F78 6A00                       		bpl.s	loc_20BC
00001F7A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00001F80 3038 F632                  		move.w	($FFFFF632).w,d0
00001F84 0640 000C                  		addi.w	#$C,d0
00001F88 0C40 0030                  		cmpi.w	#$30,d0
00001F8C 6500                       		bcs.s	loc_2088
00001F8E 7000                       		moveq	#0,d0
00001F90 4E75                       		rts	
00001F92                            ; ===========================================================================
00001F92                            
00001F92                            loc_2088:				; XREF: loc_206A
00001F92 31C0 F632                  		move.w	d0,($FFFFF632).w
00001F96 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00001F9C 41F0 0000                  		lea	(a0,d0.w),a0
00001FA0 43F8 FB04                  		lea	($FFFFFB04).w,a1
00001FA4 22D8                       		move.l	(a0)+,(a1)+
00001FA6 22D8                       		move.l	(a0)+,(a1)+
00001FA8 3298                       		move.w	(a0)+,(a1)
00001FAA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FAE 7000                       		moveq	#0,d0
00001FB0 722C                       		moveq	#$2C,d1
00001FB2                            
00001FB2                            loc_20A8:
00001FB2 3400                       		move.w	d0,d2
00001FB4 0242 001E                  		andi.w	#$1E,d2
00001FB8 6600                       		bne.s	loc_20B2
00001FBA 5440                       		addq.w	#2,d0
00001FBC                            
00001FBC                            loc_20B2:
00001FBC 3390 0000                  		move.w	(a0),(a1,d0.w)
00001FC0 5440                       		addq.w	#2,d0
00001FC2 51C9 FFEE                  		dbf	d1,loc_20A8
00001FC6                            
00001FC6                            loc_20BC:
00001FC6 7001                       		moveq	#1,d0
00001FC8 4E75                       		rts	
00001FCA                            ; End of function PalCycle_Sega
00001FCA                            
00001FCA                            ; ===========================================================================
00001FCA                            
00001FCA                            Pal_Sega1:	incbin	pallet\sega1.bin
00001FD6                            Pal_Sega2:	incbin	pallet\sega2.bin
00002006                            
00002006                            ; ---------------------------------------------------------------------------
00002006                            ; Subroutines to load pallets
00002006                            ; ---------------------------------------------------------------------------
00002006                            
00002006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002006                            
00002006                            
00002006                            PalLoad1:
00002006 43F9 0000 0000             		lea	(PalPointers).l,a1
0000200C E748                       		lsl.w	#3,d0
0000200E D2C0                       		adda.w	d0,a1
00002010 2459                       		movea.l	(a1)+,a2
00002012 3659                       		movea.w	(a1)+,a3
00002014 D6FC 0080                  		adda.w	#$80,a3
00002018 3E19                       		move.w	(a1)+,d7
0000201A                            
0000201A                            loc_2110:
0000201A 26DA                       		move.l	(a2)+,(a3)+
0000201C 51CF FFFC                  		dbf	d7,loc_2110
00002020 4E75                       		rts	
00002022                            ; End of function PalLoad1
00002022                            
00002022                            
00002022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002022                            
00002022                            
00002022                            PalLoad2:
00002022 43F9 0000 0000             		lea	(PalPointers).l,a1
00002028 E748                       		lsl.w	#3,d0
0000202A D2C0                       		adda.w	d0,a1
0000202C 2459                       		movea.l	(a1)+,a2
0000202E 3659                       		movea.w	(a1)+,a3
00002030 3E19                       		move.w	(a1)+,d7
00002032                            
00002032                            loc_2128:
00002032 26DA                       		move.l	(a2)+,(a3)+
00002034 51CF FFFC                  		dbf	d7,loc_2128
00002038 4E75                       		rts	
0000203A                            ; End of function PalLoad2
0000203A                            
0000203A                            ; ---------------------------------------------------------------------------
0000203A                            ; Underwater pallet loading subroutine
0000203A                            ; ---------------------------------------------------------------------------
0000203A                            
0000203A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203A                            
0000203A                            
0000203A                            PalLoad3_Water:
0000203A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002040 E748                       		lsl.w	#3,d0
00002042 D2C0                       		adda.w	d0,a1
00002044 2459                       		movea.l	(a1)+,a2
00002046 3659                       		movea.w	(a1)+,a3
00002048 96FC 0080                  		suba.w	#$80,a3
0000204C 3E19                       		move.w	(a1)+,d7
0000204E                            
0000204E                            loc_2144:
0000204E 26DA                       		move.l	(a2)+,(a3)+
00002050 51CF FFFC                  		dbf	d7,loc_2144
00002054 4E75                       		rts	
00002056                            ; End of function PalLoad3_Water
00002056                            
00002056                            
00002056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002056                            
00002056                            
00002056                            PalLoad4_Water:
00002056 43F9 0000 0000             		lea	(PalPointers).l,a1
0000205C E748                       		lsl.w	#3,d0
0000205E D2C0                       		adda.w	d0,a1
00002060 2459                       		movea.l	(a1)+,a2
00002062 3659                       		movea.w	(a1)+,a3
00002064 96FC 0100                  		suba.w	#$100,a3
00002068 3E19                       		move.w	(a1)+,d7
0000206A                            
0000206A                            loc_2160:
0000206A 26DA                       		move.l	(a2)+,(a3)+
0000206C 51CF FFFC                  		dbf	d7,loc_2160
00002070 4E75                       		rts	
00002072                            ; End of function PalLoad4_Water
00002072                            
00002072                            ; ===========================================================================
00002072                            ; ---------------------------------------------------------------------------
00002072                            ; Pallet pointers
00002072                            ; ---------------------------------------------------------------------------
00002072                            PalPointers:
00002072                            	include "_inc\Pallet pointers.asm"
00002072                            ; ---------------------------------------------------------------------------
00002072                            ; Pallet pointers
00002072                            ; ---------------------------------------------------------------------------
00002072 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002076 FB00                       	dc.w $FB00		; RAM address
00002078 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000207A 0000 0000                  	dc.l Pal_Title
0000207E FB00                       	dc.w $FB00
00002080 001F                       	dc.w $1F
00002082 0000 0000                  	dc.l Pal_LevelSel
00002086 FB00                       	dc.w $FB00
00002088 001F                       	dc.w $1F
0000208A 0000 0000                  	dc.l Pal_Sonic
0000208E FB00                       	dc.w $FB00
00002090 0007                       	dc.w 7
00002092 0000 0000                  	dc.l Pal_GHZ
00002096 FB20                       	dc.w $FB20
00002098 0017                       	dc.w $17
0000209A 0000 0000                  	dc.l Pal_LZ
0000209E FB20                       	dc.w $FB20
000020A0 0017                       	dc.w $17
000020A2 0000 0000                  	dc.l Pal_MZ
000020A6 FB20                       	dc.w $FB20
000020A8 0017                       	dc.w $17
000020AA 0000 0000                  	dc.l Pal_SLZ
000020AE FB20                       	dc.w $FB20
000020B0 0017                       	dc.w $17
000020B2 0000 0000                  	dc.l Pal_SYZ
000020B6 FB20                       	dc.w $FB20
000020B8 0017                       	dc.w $17
000020BA 0000 0000                  	dc.l Pal_SBZ1
000020BE FB20                       	dc.w $FB20
000020C0 0017                       	dc.w $17
000020C2 0000 0000                  	dc.l Pal_Special
000020C6 FB00                       	dc.w $FB00
000020C8 001F                       	dc.w $1F
000020CA 0000 0000                  	dc.l Pal_LZWater
000020CE FB00                       	dc.w $FB00
000020D0 001F                       	dc.w $1F
000020D2 0000 0000                  	dc.l Pal_SBZ3
000020D6 FB20                       	dc.w $FB20
000020D8 0017                       	dc.w $17
000020DA 0000 0000                  	dc.l Pal_SBZ3Water
000020DE FB00                       	dc.w $FB00
000020E0 001F                       	dc.w $1F
000020E2 0000 0000                  	dc.l Pal_SBZ2
000020E6 FB20                       	dc.w $FB20
000020E8 0017                       	dc.w $17
000020EA 0000 0000                  	dc.l Pal_LZSonWater
000020EE FB00                       	dc.w $FB00
000020F0 0007                       	dc.w 7
000020F2 0000 0000                  	dc.l Pal_SBZ3SonWat
000020F6 FB00                       	dc.w $FB00
000020F8 0007                       	dc.w 7
000020FA 0000 0000                  	dc.l Pal_SpeResult
000020FE FB00                       	dc.w $FB00
00002100 001F                       	dc.w $1F
00002102 0000 0000                  	dc.l Pal_SpeContinue
00002106 FB00                       	dc.w $FB00
00002108 000F                       	dc.w $F
0000210A 0000 0000                  	dc.l Pal_Ending
0000210E FB00                       	dc.w $FB00
00002110 001F                       	dc.w $1F
00002112 0000 0000                  	dc.l Pal_Sonic
00002116 FB20                       	dc.w $FB20
00002118 0007                       	dc.w 7
00002118 0007                       	dc.w 7
0000211A                            
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            ; Pallet data
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000219A                            Pal_Title:	incbin	pallet\title.bin
0000221A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000229A                            Pal_Sonic:	incbin	pallet\sonic.bin
000022BA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000231A                            Pal_LZ:		incbin	pallet\lz.bin
0000237A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000023FA                            Pal_MZ:		incbin	pallet\mz.bin
0000245A                            Pal_SLZ:	incbin	pallet\slz.bin
000024BA                            Pal_SYZ:	incbin	pallet\syz.bin
0000251A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000257A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000025DA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000265A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000026BA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000273A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000275A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000277A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000027FA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000283A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000028BA                            
000028BA                            ; ---------------------------------------------------------------------------
000028BA                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000028BA                            ; ---------------------------------------------------------------------------
000028BA                            
000028BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028BA                            
000028BA                            
000028BA                            DelayProgram:				; XREF: PauseGame
000028BA 46FC 2300                  		move	#$2300,sr
000028BE                            
000028BE                            loc_29AC:
000028BE 4A38 F62A                  		tst.b	($FFFFF62A).w
000028C2 66FA                       		bne.s	loc_29AC
000028C4 4E75                       		rts	
000028C6                            ; End of function DelayProgram
000028C6                            
000028C6                            ; ---------------------------------------------------------------------------
000028C6                            ; Subroutine to	generate a pseudo-random number	in d0
000028C6                            ; ---------------------------------------------------------------------------
000028C6                            
000028C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028C6                            
000028C6                            
000028C6                            RandomNumber:
000028C6 2238 F636                  		move.l	($FFFFF636).w,d1
000028CA 6600                       		bne.s	loc_29C0
000028CC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000028D2                            
000028D2                            loc_29C0:
000028D2 2001                       		move.l	d1,d0
000028D4 E581                       		asl.l	#2,d1
000028D6 D280                       		add.l	d0,d1
000028D8 E781                       		asl.l	#3,d1
000028DA D280                       		add.l	d0,d1
000028DC 3001                       		move.w	d1,d0
000028DE 4841                       		swap	d1
000028E0 D041                       		add.w	d1,d0
000028E2 3200                       		move.w	d0,d1
000028E4 4841                       		swap	d1
000028E6 21C1 F636                  		move.l	d1,($FFFFF636).w
000028EA 4E75                       		rts	
000028EC                            ; End of function RandomNumber
000028EC                            
000028EC                            
000028EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028EC                            
000028EC                            
000028EC                            CalcSine:				; XREF: SS_BGAnimate; et al
000028EC 0240 00FF                  		andi.w	#$FF,d0
000028F0 D040                       		add.w	d0,d0
000028F2 0640 0080                  		addi.w	#$80,d0
000028F6 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000028FA 0440 0080                  		subi.w	#$80,d0
000028FE 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002902 4E75                       		rts	
00002904                            ; End of function CalcSine
00002904                            
00002904                            ; ===========================================================================
00002904                            
00002904                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002B84                            
00002B84                            ; ===========================================================================
00002B84 48E7 6000                  		movem.l	d1-d2,-(sp)
00002B88 3200                       		move.w	d0,d1
00002B8A 4841                       		swap	d1
00002B8C 7000                       		moveq	#0,d0
00002B8E 3200                       		move.w	d0,d1
00002B90 7407                       		moveq	#7,d2
00002B92                            
00002B92                            loc_2C80:
00002B92 E599                       		rol.l	#2,d1
00002B94 D040                       		add.w	d0,d0
00002B96 5240                       		addq.w	#1,d0
00002B98 9240                       		sub.w	d0,d1
00002B9A 6400                       		bcc.s	loc_2C9A
00002B9C D240                       		add.w	d0,d1
00002B9E 5340                       		subq.w	#1,d0
00002BA0 51CA FFF0                  		dbf	d2,loc_2C80
00002BA4 E248                       		lsr.w	#1,d0
00002BA6 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002BAA 4E75                       		rts	
00002BAC                            ; ===========================================================================
00002BAC                            
00002BAC                            loc_2C9A:
00002BAC 5240                       		addq.w	#1,d0
00002BAE 51CA FFE2                  		dbf	d2,loc_2C80
00002BB2 E248                       		lsr.w	#1,d0
00002BB4 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002BB8 4E75                       		rts	
00002BBA                            
00002BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BBA                            
00002BBA                            
00002BBA                            CalcAngle:
00002BBA 48E7 1800                  		movem.l	d3-d4,-(sp)
00002BBE 7600                       		moveq	#0,d3
00002BC0 7800                       		moveq	#0,d4
00002BC2 3601                       		move.w	d1,d3
00002BC4 3802                       		move.w	d2,d4
00002BC6 8843                       		or.w	d3,d4
00002BC8 6700                       		beq.s	loc_2D04
00002BCA 3802                       		move.w	d2,d4
00002BCC 4A43                       		tst.w	d3
00002BCE 6A00 0000                  		bpl.w	loc_2CC2
00002BD2 4443                       		neg.w	d3
00002BD4                            
00002BD4                            loc_2CC2:
00002BD4 4A44                       		tst.w	d4
00002BD6 6A00 0000                  		bpl.w	loc_2CCA
00002BDA 4444                       		neg.w	d4
00002BDC                            
00002BDC                            loc_2CCA:
00002BDC B843                       		cmp.w	d3,d4
00002BDE 6400 0000                  		bcc.w	loc_2CDC
00002BE2 E18C                       		lsl.l	#8,d4
00002BE4 88C3                       		divu.w	d3,d4
00002BE6 7000                       		moveq	#0,d0
00002BE8 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002BEC 6000                       		bra.s	loc_2CE6
00002BEE                            ; ===========================================================================
00002BEE                            
00002BEE                            loc_2CDC:				; XREF: CalcAngle
00002BEE E18B                       		lsl.l	#8,d3
00002BF0 86C4                       		divu.w	d4,d3
00002BF2 7040                       		moveq	#$40,d0
00002BF4 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002BF8                            
00002BF8                            loc_2CE6:
00002BF8 4A41                       		tst.w	d1
00002BFA 6A00 0000                  		bpl.w	loc_2CF2
00002BFE 4440                       		neg.w	d0
00002C00 0640 0080                  		addi.w	#$80,d0
00002C04                            
00002C04                            loc_2CF2:
00002C04 4A42                       		tst.w	d2
00002C06 6A00 0000                  		bpl.w	loc_2CFE
00002C0A 4440                       		neg.w	d0
00002C0C 0640 0100                  		addi.w	#$100,d0
00002C10                            
00002C10                            loc_2CFE:
00002C10 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002C14 4E75                       		rts	
00002C16                            ; ===========================================================================
00002C16                            
00002C16                            loc_2D04:				; XREF: CalcAngle
00002C16 303C 0040                  		move.w	#$40,d0
00002C1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002C1E 4E75                       		rts	
00002C20                            ; End of function CalcAngle
00002C20                            
00002C20                            ; ===========================================================================
00002C20                            
00002C20                            Angle_Data:	incbin	misc\angles.bin
00002D22                            
00002D22                            ; ===========================================================================
00002D22                            
00002D22                            ; ---------------------------------------------------------------------------
00002D22                            ; Sega screen
00002D22                            ; ---------------------------------------------------------------------------
00002D22                            
00002D22                            SegaScreen:				; XREF: GameModeArray
00002D22 103C 00E4                  		move.b	#$E4,d0
00002D26 6100 E53A                  		bsr.w	PlaySound_Special ; stop music
00002D2A 6100 E7BC                  		bsr.w	ClearPLC
00002D2E 6100 F02C                  		bsr.w	Pal_FadeFrom
00002D32 4DF9 00C0 0004             		lea	($C00004).l,a6
00002D38 3CBC 8004                  		move.w	#$8004,(a6)
00002D3C 3CBC 8230                  		move.w	#$8230,(a6)
00002D40 3CBC 8407                  		move.w	#$8407,(a6)
00002D44 3CBC 8700                  		move.w	#$8700,(a6)
00002D48 3CBC 8B00                  		move.w	#$8B00,(a6)
00002D4C 4238 F64E                  		clr.b	($FFFFF64E).w
00002D50 46FC 2700                  		move	#$2700,sr
00002D54 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002D58 0200 00BF                  		andi.b	#$BF,d0
00002D5C 33C0 00C0 0004             		move.w	d0,($C00004).l
00002D62 6100 E426                  		bsr.w	ClearScreen
00002D66 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002D70 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002D76 6100 E5D2                  		bsr.w	NemDec
00002D7A 43F9 00FF 0000             		lea	($FF0000).l,a1
00002D80 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002D86 303C 0000                  		move.w	#0,d0
00002D8A 6100 E89C                  		bsr.w	EniDec
00002D8E 43F9 00FF 0000             		lea	($FF0000).l,a1
00002D94 203C 6510 0003             		move.l	#$65100003,d0
00002D9A 7217                       		moveq	#$17,d1
00002D9C 7407                       		moveq	#7,d2
00002D9E 6100 E58A                  		bsr.w	ShowVDPGraphics
00002DA2 43F9 00FF 0180             		lea	($FF0180).l,a1
00002DA8 203C 4000 0003             		move.l	#$40000003,d0
00002DAE 7227                       		moveq	#$27,d1
00002DB0 741B                       		moveq	#$1B,d2
00002DB2 6100 E576                  		bsr.w	ShowVDPGraphics
00002DB6 7000                       		moveq	#0,d0
00002DB8 6100 F268                  		bsr.w	PalLoad2	; load Sega logo pallet
00002DBC 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002DC2 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002DC8 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002DCE 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002DD4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002DD8 0000 0040                  		ori.b	#$40,d0
00002DDC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002DE2                            
00002DE2                            Sega_WaitPallet:
00002DE2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002DE8 6100 FAD0                  		bsr.w	DelayProgram
00002DEC 6100 F126                  		bsr.w	PalCycle_Sega
00002DF0 66F0                       		bne.s	Sega_WaitPallet
00002DF2                            
00002DF2 103C 00E1                  		move.b	#$E1,d0
00002DF6 6100 E46A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002DFA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002E00 6100 FAB8                  		bsr.w	DelayProgram
00002E04 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002E0A                            
00002E0A                            Sega_WaitEnd:
00002E0A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002E10 6100 FAA8                  		bsr.w	DelayProgram
00002E14 4A78 F614                  		tst.w	($FFFFF614).w
00002E18 6700                       		beq.s	Sega_GotoTitle
00002E1A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002E20 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002E22                            
00002E22                            Sega_GotoTitle:
00002E22 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002E28 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002E2E 4E75                       		rts	
00002E30                            ; ===========================================================================
00002E30                            
00002E30                            ; ---------------------------------------------------------------------------
00002E30                            ; Title	screen
00002E30                            ; ---------------------------------------------------------------------------
00002E30                            
00002E30                            TitleScreen:				; XREF: GameModeArray
00002E30 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002E36 103C 00E4                  		move.b	#$E4,d0
00002E3A 6100 E426                  		bsr.w	PlaySound_Special ; stop music
00002E3E 6100 E6A8                  		bsr.w	ClearPLC
00002E42 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002E48 4A38 F601                  		tst.b	(FromSEGA).w
00002E4C 6700                       		beq.s	@notSEGA
00002E4E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002E54                            
00002E54                            	@notSEGA:
00002E54 6100 EF0C                  		bsr.w	Pal_FadeFrom2
00002E58 46FC 2700                  		move	#$2700,sr
00002E5C 6100 E3BA                  		bsr.w	SoundDriverLoad
00002E60 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E66 3CBC 8004                  		move.w	#$8004,(a6)
00002E6A 3CBC 8230                  		move.w	#$8230,(a6)
00002E6E 3CBC 8407                  		move.w	#$8407,(a6)
00002E72 3CBC 9001                  		move.w	#$9001,(a6)
00002E76 3CBC 9200                  		move.w	#$9200,(a6)
00002E7A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002E7E 3CBC 8720                  		move.w	#$8720,(a6)
00002E82 4238 F64E                  		clr.b	($FFFFF64E).w
00002E86 6100 E302                  		bsr.w	ClearScreen
00002E8A 4EB9 0000 0000             		jsr SHC2021
00002E90 43F8 D000                  		lea	($FFFFD000).w,a1
00002E94 7000                       		moveq	#0,d0
00002E96 323C 07FF                  		move.w	#$7FF,d1
00002E9A                            
00002E9A                            Title_ClrObjRam:
00002E9A 22C0                       		move.l	d0,(a1)+
00002E9C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002EA0                            
00002EA0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002EAA 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002EB0 6100 E498                  		bsr.w	NemDec
00002EB4 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002EBE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002EC4 6100 E484                  		bsr.w	NemDec
00002EC8 43F9 00FF 0000             		lea	($FF0000).l,a1
00002ECE 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002ED4 303C 0000                  		move.w	#0,d0
00002ED8 6100 E74E                  		bsr.w	EniDec
00002EDC 43F9 00FF 0000             		lea	($FF0000).l,a1
00002EE2 203C 4000 0003             		move.l	#$40000003,d0
00002EE8 7227                       		moveq	#$27,d1
00002EEA 741B                       		moveq	#$1B,d2
00002EEC 6100 E43C                  		bsr.w	ShowVDPGraphics
00002EF0                            
00002EF0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002EF4 7000                       		moveq	#0,d0
00002EF6 323C 001F                  		move.w	#$1F,d1
00002EFA                            
00002EFA                            Title_ClrPallet:
00002EFA 22C0                       		move.l	d0,(a1)+
00002EFC 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002F00                            
00002F00 7014                       		moveq	#$14,d0		; load Sonic's pallet
00002F02 6100 F102                  		bsr.w	PalLoad1
00002F06 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002F0C 4EB9 0000 0000             		jsr	ObjectsLoad
00002F12 4EB9 0000 0000             		jsr	BuildSprites
00002F18 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002F1E 4A38 F601                  		tst.b	(FromSEGA).w
00002F22 6700 0000                  		beq.w	@skip
00002F26 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F2C                            
00002F2C                            	@skip:
00002F2C 6100 ED8E                  		bsr.w	Pal_FadeTo2
00002F30 46FC 2700                  		move	#$2700,sr
00002F34 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002F3E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002F44 6100 E404                  		bsr.w	NemDec
00002F48 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00002F52 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00002F58 6100 E3F0                  		bsr.w	NemDec
00002F5C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00002F66 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00002F6C 6100 E3DC                  		bsr.w	NemDec
00002F70 4DF9 00C0 0000             		lea	($C00000).l,a6
00002F76 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00002F7E 4BF9 0000 0534             		lea	(Art_Text).l,a5
00002F84 323C 028F                  		move.w	#$28F,d1
00002F88                            
00002F88                            Title_LoadText:
00002F88 3C9D                       		move.w	(a5)+,(a6)
00002F8A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00002F8E                            
00002F8E 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00002F94 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00002F9A 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00002FA0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00002FA6 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00002FAC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00002FB2 6100 0000                  		bsr.w	LevelSizeLoad
00002FB6 6100 0000                  		bsr.w	DeformBgLayer
00002FBA 43F8 B000                  		lea	($FFFFB000).w,a1
00002FBE 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00002FC4 303C 0000                  		move.w	#0,d0
00002FC8 6100 E65E                  		bsr.w	EniDec
00002FCC 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00002FD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FD8 6100 E7CC                  		bsr.w	KosDec
00002FDC 6100 0000                  		bsr.w	LevelLayoutLoad
00002FE0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002FE6 4A38 F601                  		tst.b	(FromSEGA).w
00002FEA 6700                       		beq.s	@notSEGA
00002FEC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002FF2                            
00002FF2                            	@notSEGA:
00002FF2 6100 ED6E                  		bsr.w	Pal_FadeFrom2
00002FF6 46FC 2700                  		move	#$2700,sr
00002FFA 6100 E18E                  		bsr.w	ClearScreen
00002FFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00003004 4DF9 00C0 0000             		lea	($C00000).l,a6
0000300A 47F8 F708                  		lea	($FFFFF708).w,a3
0000300E 49F8 A440                  		lea	($FFFFA440).w,a4
00003012 343C 6000                  		move.w	#$6000,d2
00003016 6100 0000                  		bsr.w	LoadTilesFromStart2
0000301A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003020 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003026 303C 0000                  		move.w	#0,d0
0000302A 6100 E5FC                  		bsr.w	EniDec
0000302E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003034 203C 4206 0003             		move.l	#$42060003,d0
0000303A 7221                       		moveq	#$21,d1
0000303C 7415                       		moveq	#$15,d2
0000303E 6100 E2EA                  		bsr.w	ShowVDPGraphics
00003042 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000304C 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003052 6100 E2F6                  		bsr.w	NemDec
00003056 7001                       		moveq	#1,d0		; load title screen pallet
00003058 6100 EFAC                  		bsr.w	PalLoad1
0000305C 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003060 6100 E200                  		bsr.w	PlaySound_Special
00003064 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000306A                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
0000306A 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003070 43F8 D080                  		lea	($FFFFD080).w,a1
00003074 7000                       		moveq	#0,d0
00003076 323C 0007                  		move.w	#7,d1
0000307A                            
0000307A                            Title_ClrObjRam2:
0000307A 22C0                       		move.l	d0,(a1)+
0000307C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003080                            
00003080 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003086 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
0000308C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003092 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003098 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000309E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000030A4 4EB9 0000 0000             		jsr	ObjectsLoad
000030AA 6100 0000                  		bsr.w	DeformBgLayer
000030AE 4EB9 0000 0000             		jsr	BuildSprites
000030B4 7000                       		moveq	#0,d0
000030B6 6100 E404                  		bsr.w	LoadPLC2
000030BA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000030C0 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000030C6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030CA 0000 0040                  		ori.b	#$40,d0
000030CE 33C0 00C0 0004             		move.w	d0,($C00004).l
000030D4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000030DA 4A38 F601                  		tst.b	(FromSEGA).w
000030DE 6700                       		beq.s	@notSEGA
000030E0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000030E6 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
000030EC 11FC 0000 F601             		move.b	#0,(FromSEGA).w
000030F2                            
000030F2                            	@notSEGA:
000030F2 6100 EBC8                  		bsr.w	Pal_FadeTo2
000030F6                            
000030F6                            loc_317C:
000030F6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000030FC 6100 F7BC                  		bsr.w	DelayProgram
00003100 4EB9 0000 0000             		jsr	ObjectsLoad
00003106 6100 0000                  		bsr.w	DeformBgLayer
0000310A 4EB9 0000 0000             		jsr	BuildSprites
00003110 6100 E754                  		bsr.w	PalCycle_Title
00003114 6100 E3E0                  		bsr.w	RunPLC_RAM
00003118 3038 D008                  		move.w	($FFFFD008).w,d0
0000311C 5440                       		addq.w	#2,d0
0000311E 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003122 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003126 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003128 6000 FD06                  		bra.w	TitleScreen
0000312C                            ; ===========================================================================
0000312C                            
0000312C                            Title_ChkRegion:
0000312C 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003130 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003132 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003138 6000                       		bra.s	Title_EnterCheat
0000313A                            ; ===========================================================================
0000313A                            
0000313A                            Title_RegionJ:				; XREF: Title_ChkRegion
0000313A 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003140                            
00003140                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003140 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003144 D0C0                       		adda.w	d0,a0
00003146 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000314A 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000314E B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003150 6600                       		bne.s	loc_3210	; if not, branch
00003152 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003156 4A00                       		tst.b	d0
00003158 6600                       		bne.s	Title_CountC
0000315A 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
0000315E 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003162 E249                       		lsr.w	#1,d1
00003164 0241 0003                  		andi.w	#3,d1
00003168 6700                       		beq.s	Title_PlayRing
0000316A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000316E 6A00                       		bpl.s	Title_PlayRing
00003170 7201                       		moveq	#1,d1
00003172 1181 1001                  		move.b	d1,1(a0,d1.w)
00003176                            
00003176                            Title_PlayRing:
00003176 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000317C 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003180 6100 E0E0                  		bsr.w	PlaySound_Special
00003184 6000                       		bra.s	Title_CountC
00003186                            ; ===========================================================================
00003186                            
00003186                            loc_3210:				; XREF: Title_EnterCheat
00003186 4A00                       		tst.b	d0
00003188 6700                       		beq.s	Title_CountC
0000318A 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003190 6700                       		beq.s	Title_CountC
00003192 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003198                            
00003198                            Title_CountC:
00003198 1038 F605                  		move.b	($FFFFF605).w,d0
0000319C 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000031A0 6700                       		beq.s	loc_3230	; if not, branch
000031A2 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000031A6                            
000031A6                            loc_3230:
000031A6 4A78 F614                  		tst.w	($FFFFF614).w
000031AA 6700 0000                  		beq.w	Demo
000031AE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000031B4 6700 FF40                  		beq.w	loc_317C	; if not, branch
000031B8                            
000031B8                            Title_ChkLevSel:
000031B8 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000031BC 6700 0000                  		beq.w	PlayLevel	; if not, play level
000031C0 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000031C6 6700 0000                  		beq.w	PlayLevel	; if not, play level
000031CA 7002                       		moveq	#2,d0
000031CC 6100 EE54                  		bsr.w	PalLoad2	; load level select pallet
000031D0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000031D4 7000                       		moveq	#0,d0
000031D6 323C 00DF                  		move.w	#$DF,d1
000031DA                            
000031DA                            Title_ClrScroll:
000031DA 22C0                       		move.l	d0,(a1)+
000031DC 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000031E0                            
000031E0 21C0 F616                  		move.l	d0,($FFFFF616).w
000031E4 46FC 2700                  		move	#$2700,sr
000031E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000031EE 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000031F8 323C 03FF                  		move.w	#$3FF,d1
000031FC                            
000031FC                            Title_ClrVram:
000031FC 2C80                       		move.l	d0,(a6)
000031FE 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003202                            
00003202 6100 0000                  		bsr.w	LevSelTextLoad
00003206                            
00003206                            ; ---------------------------------------------------------------------------
00003206                            ; Level	Select
00003206                            ; ---------------------------------------------------------------------------
00003206                            
00003206                            LevelSelect:
00003206 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000320C 6100 F6AC                  		bsr.w	DelayProgram
00003210 4EB9 0000 0000             		jsr		BuildSprites
00003216 6100 0000                  		bsr.w	LevSelControls
0000321A 6100 E2DA                  		bsr.w	RunPLC_RAM
0000321E 4AB8 F680                  		tst.l	($FFFFF680).w
00003222 66E2                       		bne.s	LevelSelect
00003224 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000322A 67DA                       		beq.s	LevelSelect	; if not, branch
0000322C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003230 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003234 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003236 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000323A 0640 0080                  		addi.w	#$80,d0
0000323E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003242 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003244 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003248 6700                       		beq.s	LevSel_Ending	; if yes, branch
0000324A 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
0000324E 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003250                            
00003250                            LevSel_NoCheat:
00003250 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
00003254 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003256 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000325A 65AA                       		bcs.s	LevelSelect	; if yes, branch
0000325C                            
0000325C                            LevSel_PlaySnd:
0000325C 6100 E004                  		bsr.w	PlaySound_Special
00003260 60A4                       		bra.s	LevelSelect
00003262                            ; ===========================================================================
00003262                            
00003262                            LevSel_Ending:				; XREF: LevelSelect
00003262 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003268 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000326E                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
0000326E 4E75                       		rts	
00003270                            ; ===========================================================================
00003270                            
00003270                            LevSel_Credits:				; XREF: LevelSelect
00003270 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003276 103C 0091                  		move.b	#$91,d0
0000327A 6100 DFE6                  		bsr.w	PlaySound_Special ; play credits music
0000327E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003284 4E75                       		rts	
00003286                            ; ===========================================================================
00003286                            
00003286                            LevSel_Level_SS:			; XREF: LevelSelect
00003286 D040                       		add.w	d0,d0
00003288 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000328C 6B00 FF78                  		bmi.w	LevelSelect
00003290 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003294 6600                       		bne.s	LevSel_Level	; if not, branch
00003296 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000329C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000032A0 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000032A6 7000                       		moveq	#0,d0
000032A8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000032AC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000032B0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000032B4 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000032B8                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
000032B8                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
000032B8 4E75                       		rts	
000032BA                            ; ===========================================================================
000032BA                            ; ---------------------------------------------------------------------------
000032BA                            ; Level	select - level pointers
000032BA                            ; ---------------------------------------------------------------------------
000032BA                            LSelectPointers:
000032BA                            		incbin	misc\ls_point.bin
000032E4                            		even
000032E4                            
000032E4                            LevSel_Level:				; XREF: LevSel_Level_SS
000032E4 0240 3FFF                  		andi.w	#$3FFF,d0
000032E8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000032EC                            
000032EC                            PlayLevel:				; XREF: ROM:00003246j ...
000032EC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000032F2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000032F8 7000                       		moveq	#0,d0
000032FA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000032FE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003302 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003306 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000330A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000330E                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
0000330E                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
0000330E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003312 103C 00E0                  		move.b	#$E0,d0
00003316 6100 DF4A                  		bsr.w	PlaySound_Special ; fade out music
0000331A 4E75                       		rts	
0000331C                            ; ===========================================================================
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            ; Level	select codes
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            LevelSelectCode_J:
0000331C                            		incbin	misc\ls_jcode.bin
00003322                            		even
00003322                            
00003322                            LevelSelectCode_US:
00003322                            		incbin	misc\ls_ucode.bin
00003328                            		even
00003328                            ; ===========================================================================
00003328                            
00003328                            ; ---------------------------------------------------------------------------
00003328                            ; Demo mode
00003328                            ; ---------------------------------------------------------------------------
00003328                            
00003328                            Demo:					; XREF: TitleScreen
00003328 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000332E                            
0000332E                            loc_33B6:				; XREF: loc_33E4
0000332E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003334 6100 F584                  		bsr.w	DelayProgram
00003338 6100 0000                  		bsr.w	DeformBgLayer
0000333C 6100 E508                  		bsr.w	PalCycle_Load
00003340 6100 E1B4                  		bsr.w	RunPLC_RAM
00003344 3038 D008                  		move.w	($FFFFD008).w,d0
00003348 5440                       		addq.w	#2,d0
0000334A 31C0 D008                  		move.w	d0,($FFFFD008).w
0000334E 0C40 1C00                  		cmpi.w	#$1C00,d0
00003352 6500                       		bcs.s	loc_33E4
00003354 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
0000335A 4E75                       		rts	
0000335C                            ; ===========================================================================
0000335C                            
0000335C                            loc_33E4:				; XREF: Demo
0000335C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003362 6600 FE54                  		bne.w	Title_ChkLevSel	; if yes, branch
00003366 4A78 F614                  		tst.w	($FFFFF614).w
0000336A 6600 FFC2                  		bne.w	loc_33B6
0000336E 103C 00E0                  		move.b	#$E0,d0
00003372 6100 DEEE                  		bsr.w	PlaySound_Special ; fade out music
00003376 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000337A 0240 0007                  		andi.w	#7,d0
0000337E D040                       		add.w	d0,d0
00003380 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003384 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003388 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000338C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003392 6500                       		bcs.s	loc_3422	; if yes, branch
00003394 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000339A                            
0000339A                            loc_3422:
0000339A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000033A0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000033A6 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000033AA 6600                       		bne.s	Demo_Level	; if not, branch
000033AC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033B2 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000033B6 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000033BA                            
000033BA                            Demo_Level:
000033BA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033C0 7000                       		moveq	#0,d0
000033C2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033C6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000033CA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000033CE 4E75                       		rts	
000033D0                            ; ===========================================================================
000033D0                            ; ---------------------------------------------------------------------------
000033D0                            ; Levels used in demos
000033D0                            ; ---------------------------------------------------------------------------
000033D0                            Demo_Levels:	incbin	misc\dm_ord1.bin
000033D8                            		even
000033D8                            
000033D8                            ; ---------------------------------------------------------------------------
000033D8                            ; Subroutine to	change what you're selecting in the level select
000033D8                            ; ---------------------------------------------------------------------------
000033D8                            
000033D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033D8                            
000033D8                            
000033D8                            LevSelControls:				; XREF: LevelSelect
000033D8 1238 F605                  		move.b	($FFFFF605).w,d1
000033DC 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000033E0 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000033E2 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000033E6 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000033E8                            
000033E8                            LevSel_UpDown:
000033E8 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000033EE 1238 F604                  		move.b	($FFFFF604).w,d1
000033F2 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000033F6 6700                       		beq.s	LevSel_SndTest	; if not, branch
000033F8 3038 FF82                  		move.w	($FFFFFF82).w,d0
000033FC 0801 0000                  		btst	#0,d1		; is up	pressed?
00003400 6700                       		beq.s	LevSel_Down	; if not, branch
00003402 5340                       		subq.w	#1,d0		; move up 1 selection
00003404 6400                       		bcc.s	LevSel_Down
00003406 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003408                            
00003408                            LevSel_Down:
00003408 0801 0001                  		btst	#1,d1		; is down pressed?
0000340C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000340E 5240                       		addq.w	#1,d0		; move down 1 selection
00003410 0C40 0015                  		cmpi.w	#$15,d0
00003414 6500                       		bcs.s	LevSel_Refresh
00003416 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003418                            
00003418                            LevSel_Refresh:
00003418 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
0000341C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003420 4E75                       		rts	
00003422                            ; ===========================================================================
00003422                            
00003422                            LevSel_SndTest:				; XREF: LevSelControls
00003422 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003428 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000342A 1238 F605                  		move.b	($FFFFF605).w,d1
0000342E 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003432 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003434 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003438 0801 0002                  		btst	#2,d1		; is left pressed?
0000343C 6700                       		beq.s	LevSel_Right	; if not, branch
0000343E 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003440 6400                       		bcc.s	LevSel_Right
00003442 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003444                            
00003444                            LevSel_Right:
00003444 0801 0003                  		btst	#3,d1		; is right pressed?
00003448 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000344A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000344C 0C40 0050                  		cmpi.w	#$50,d0
00003450 6500                       		bcs.s	LevSel_Refresh2
00003452 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003454                            
00003454                            LevSel_Refresh2:
00003454 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003458 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000345C                            
0000345C                            LevSel_NoMove:
0000345C 4E75                       		rts	
0000345E                            ; End of function LevSelControls
0000345E                            
0000345E                            ; ---------------------------------------------------------------------------
0000345E                            ; Subroutine to load level select text
0000345E                            ; ---------------------------------------------------------------------------
0000345E                            
0000345E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000345E                            
0000345E                            
0000345E                            LevSelTextLoad:				; XREF: TitleScreen
0000345E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003464 4DF9 00C0 0000             		lea	($C00000).l,a6
0000346A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003470 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003474 7214                       		moveq	#$14,d1		; number of lines of text
00003476                            
00003476                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003476 2D44 0004                  		move.l	d4,4(a6)
0000347A 6100 0000                  		bsr.w	LevSel_ChgLine
0000347E 0684 0080 0000             		addi.l	#$800000,d4
00003484 51C9 FFF0                  		dbf	d1,loc_34FE
00003488 7000                       		moveq	#0,d0
0000348A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000348E 3200                       		move.w	d0,d1
00003490 283C 6210 0003             		move.l	#$62100003,d4
00003496 EF48                       		lsl.w	#7,d0
00003498 4840                       		swap	d0
0000349A D880                       		add.l	d0,d4
0000349C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034A2 E749                       		lsl.w	#3,d1
000034A4 3001                       		move.w	d1,d0
000034A6 D241                       		add.w	d1,d1
000034A8 D240                       		add.w	d0,d1
000034AA D2C1                       		adda.w	d1,a1
000034AC 363C C680                  		move.w	#$C680,d3
000034B0 2D44 0004                  		move.l	d4,4(a6)
000034B4 6100 0000                  		bsr.w	LevSel_ChgLine
000034B8 363C E680                  		move.w	#$E680,d3
000034BC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000034C2 6600                       		bne.s	loc_3550
000034C4 363C C680                  		move.w	#$C680,d3
000034C8                            
000034C8                            loc_3550:
000034C8 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
000034D2 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034D6 0640 0080                  		addi.w	#$80,d0
000034DA 1400                       		move.b	d0,d2
000034DC E808                       		lsr.b	#4,d0
000034DE 6100 0000                  		bsr.w	LevSel_ChgSnd
000034E2 1002                       		move.b	d2,d0
000034E4 6100 0000                  		bsr.w	LevSel_ChgSnd
000034E8 4E75                       		rts	
000034EA                            ; End of function LevSelTextLoad
000034EA                            
000034EA                            
000034EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034EA                            
000034EA                            
000034EA                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000034EA 0240 000F                  		andi.w	#$F,d0
000034EE 0C00 000A                  		cmpi.b	#$A,d0
000034F2 6500                       		bcs.s	loc_3580
000034F4 5E00                       		addi.b	#7,d0
000034F6                            
000034F6                            loc_3580:
000034F6 D043                       		add.w	d3,d0
000034F8 3C80                       		move.w	d0,(a6)
000034FA 4E75                       		rts	
000034FC                            ; End of function LevSel_ChgSnd
000034FC                            
000034FC                            
000034FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034FC                            
000034FC                            
000034FC                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000034FC 7417                       		moveq	#$17,d2		; number of characters per line
000034FE                            
000034FE                            loc_3588:
000034FE 7000                       		moveq	#0,d0
00003500 1019                       		move.b	(a1)+,d0
00003502 6A00                       		bpl.s	loc_3598
00003504 3CBC 0000                  		move.w	#0,(a6)
00003508 51CA FFF4                  		dbf	d2,loc_3588
0000350C 4E75                       		rts	
0000350E                            ; ===========================================================================
0000350E                            
0000350E                            loc_3598:				; XREF: LevSel_ChgLine
0000350E D043                       		add.w	d3,d0
00003510 3C80                       		move.w	d0,(a6)
00003512 51CA FFEA                  		dbf	d2,loc_3588
00003516 4E75                       		rts	
00003518                            ; End of function LevSel_ChgLine
00003518                            
00003518                            ; ===========================================================================
00003518                            ; ---------------------------------------------------------------------------
00003518                            ; Level	select menu text
00003518                            ; ---------------------------------------------------------------------------
00003518                            LevelMenuText:	incbin	misc\menutext.bin
00003710                            		even
00003710                            ; ---------------------------------------------------------------------------
00003710                            ; Music	playlist
00003710                            ; ---------------------------------------------------------------------------
00003710                            MusicList:	incbin	misc\muslist1.bin
00003718                            		even
00003718                            ; ===========================================================================
00003718                            
00003718                            ; ---------------------------------------------------------------------------
00003718                            ; Level
00003718                            ; ---------------------------------------------------------------------------
00003718                            
00003718                            Level:					; XREF: GameModeArray
00003718 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000371E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003722 6B00                       		bmi.s	loc_37B6
00003724 103C 00E0                  		move.b	#$E0,d0
00003728 6100 DB38                  		bsr.w	PlaySound_Special ; fade out music
0000372C                            
0000372C                            loc_37B6:
0000372C 6100 DDBA                  		bsr.w	ClearPLC
00003730 6100 E62A                  		bsr.w	Pal_FadeFrom
00003734 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003738 6B00                       		bmi.s	Level_ClrRam
0000373A 46FC 2700                  		move	#$2700,sr
0000373E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003748 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000374E 6100 DBFA                  		bsr.w	NemDec
00003752 46FC 2300                  		move	#$2300,sr
00003756 7000                       		moveq	#0,d0
00003758 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000375C E948                       		lsl.w	#4,d0
0000375E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003764 45F2 0000                  		lea	(a2,d0.w),a2
00003768 7000                       		moveq	#0,d0
0000376A 1012                       		move.b	(a2),d0
0000376C 6700                       		beq.s	loc_37FC
0000376E 6100 DD1A                  		bsr.w	LoadPLC		; load level patterns
00003772                            
00003772                            loc_37FC:
00003772 7001                       		moveq	#1,d0
00003774 6100 DD14                  		bsr.w	LoadPLC		; load standard	patterns
00003778                            
00003778                            Level_ClrRam:
00003778 43F8 D000                  		lea	($FFFFD000).w,a1
0000377C 7000                       		moveq	#0,d0
0000377E 323C 07FF                  		move.w	#$7FF,d1
00003782                            
00003782                            Level_ClrObjRam:
00003782 22C0                       		move.l	d0,(a1)+
00003784 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003788                            
00003788 43F8 F628                  		lea	($FFFFF628).w,a1
0000378C 7000                       		moveq	#0,d0
0000378E 323C 0015                  		move.w	#$15,d1
00003792                            
00003792                            Level_ClrVars:
00003792 22C0                       		move.l	d0,(a1)+
00003794 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003798                            
00003798 43F8 F700                  		lea	($FFFFF700).w,a1
0000379C 7000                       		moveq	#0,d0
0000379E 323C 003F                  		move.w	#$3F,d1
000037A2                            
000037A2                            Level_ClrVars2:
000037A2 22C0                       		move.l	d0,(a1)+
000037A4 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000037A8                            
000037A8 43F8 FE60                  		lea	($FFFFFE60).w,a1
000037AC 7000                       		moveq	#0,d0
000037AE 323C 0047                  		move.w	#$47,d1
000037B2                            
000037B2                            Level_ClrVars3:
000037B2 22C0                       		move.l	d0,(a1)+
000037B4 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000037B8 46FC 2700                  		move	#$2700,sr
000037BC 6100 D9CC                  		bsr.w	ClearScreen
000037C0 4DF9 00C0 0004             		lea	($C00004).l,a6
000037C6 3CBC 8B03                  		move.w	#$8B03,(a6)
000037CA 3CBC 8230                  		move.w	#$8230,(a6)
000037CE 3CBC 8407                  		move.w	#$8407,(a6)
000037D2 3CBC 857C                  		move.w	#$857C,(a6)
000037D6 3CBC 9001                  		move.w	#$9001,(a6)
000037DA 3CBC 8004                  		move.w	#$8004,(a6)
000037DE 3CBC 8720                  		move.w	#$8720,(a6)
000037E2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000037E8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000037EC 4278 C800                  		clr.w ($FFFFC800).w
000037F0 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
000037F8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000037FE 6600                       		bne.s	Level_LoadPal	; if not, branch
00003800 3CBC 8014                  		move.w	#$8014,(a6)
00003804 7000                       		moveq	#0,d0
00003806 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000380A D040                       		add.w	d0,d0
0000380C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003812 3031 0000                  		move.w	(a1,d0.w),d0
00003816 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000381A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000381E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003822 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003826 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000382A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003830                            
00003830                            Level_LoadPal:
00003830 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003836 46FC 2300                  		move	#$2300,sr
0000383A 7003                       		moveq	#3,d0
0000383C 6100 E7E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003840 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003846 6600                       		bne.s	Level_GetBgm	; if not, branch
00003848 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000384A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003850 6600                       		bne.s	Level_WaterPal	; if not, branch
00003852 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003854                            
00003854                            Level_WaterPal:
00003854 6100 E7E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003858 4A38 FE30                  		tst.b	($FFFFFE30).w
0000385C 6700                       		beq.s	Level_GetBgm
0000385E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003864                            
00003864                            Level_GetBgm:
00003864 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003868 6B00                       		bmi.s	loc_3946
0000386A 7000                       		moveq	#0,d0
0000386C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003870 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
00003876 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00003878 7005                       		moveq	#5,d0		; move 5 to d0
0000387A                            
0000387A                            Level_BgmNotLZ4:
0000387A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00003880 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003882 7006                       		moveq	#6,d0		; move 6 to d0
00003884                            
00003884                            Level_PlayBgm:
00003884 43F9 0000 3710             		lea	(MusicList).l,a1 ; load	music playlist
0000388A 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000388E 6100 D9CC                  		bsr.w	PlaySound	; play music
00003892 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003898                            
00003898                            Level_TtlCard:
00003898 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000389E 6100 F01A                  		bsr.w	DelayProgram
000038A2 4EB9 0000 0000             		jsr	ObjectsLoad
000038A8 4EB9 0000 0000             		jsr	BuildSprites
000038AE 6100 DC46                  		bsr.w	RunPLC_RAM
000038B2 3038 D108                  		move.w	($FFFFD108).w,d0
000038B6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000038BA 66DC                       		bne.s	Level_TtlCard	; if not, branch
000038BC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000038C0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000038C2 4EB9 0000 0000             		jsr	Hud_Base
000038C8                            
000038C8                            loc_3946:
000038C8 7003                       		moveq	#3,d0
000038CA 6100 E73A                  		bsr.w	PalLoad1	; load Sonic's pallet line
000038CE 6100 0000                  		bsr.w	LevelSizeLoad
000038D2 6100 0000                  		bsr.w	DeformBgLayer
000038D6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000038DC 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000038E0 6100 0000                  		bsr.w	LoadTilesFromStart
000038E4 4EB9 0000 0000             		jsr	FloorLog_Unk
000038EA 6100 0000                  		bsr.w	ColIndexLoad
000038EE 6100 0000                  		bsr.w	LZWaterEffects
000038F2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000038F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038FC 6B00                       		bmi.s	Level_ChkDebug
000038FE 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003904                            
00003904                            Level_ChkDebug:
00003904 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003908 6700                       		beq.s	Level_ChkWater	; if not, branch
0000390A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003910 6700                       		beq.s	Level_ChkWater	; if not, branch
00003912 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003918                            
00003918                            Level_ChkWater:
00003918 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000391E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003924 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000392A 6600                       		bne.s	Level_LoadObj	; if not, branch
0000392C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003932 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003938 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000393E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003944                            
00003944                            Level_LoadObj:
00003944 4EB9 0000 0000             		jsr	ObjPosLoad
0000394A 4EB9 0000 0000             		jsr	ObjectsLoad
00003950 4EB9 0000 0000             		jsr	BuildSprites
00003956 7000                       		moveq	#0,d0
00003958 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000395C 6600                       		bne.s	loc_39E8	; if yes, branch
0000395E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003962 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003966 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000396A                            
0000396A                            loc_39E8:
0000396A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000396E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003972 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003976 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000397A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000397E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003982 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003986 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000398A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0000398E 6100 0000                  		bsr.w	OscillateNumInit
00003992 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003998 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000399E 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000039A4 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000039AA 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000039B0 7000                       		moveq	#0,d0
000039B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039B6 E548                       		lsl.w	#2,d0
000039B8 2271 0000                  		movea.l	(a1,d0.w),a1
000039BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000039C0 6A00                       		bpl.s	Level_Demo	; if yes, branch
000039C2 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000039C8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000039CC 5340                       		subq.w	#1,d0
000039CE E548                       		lsl.w	#2,d0
000039D0 2271 0000                  		movea.l	(a1,d0.w),a1
000039D4                            
000039D4                            Level_Demo:
000039D4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000039DA 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000039DE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000039E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000039E8 6A00                       		bpl.s	Level_ChkWaterPal
000039EA 31FC 021C F614             		move.w	#540,($FFFFF614).w
000039F0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000039F6 6600                       		bne.s	Level_ChkWaterPal
000039F8 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000039FE                            
000039FE                            Level_ChkWaterPal:
000039FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A04 6600                       		bne.s	Level_Delay	; if not, branch
00003A06 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A08 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A0E 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A10 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A12                            
00003A12                            Level_WaterPal2:
00003A12 6100 E642                  		bsr.w	PalLoad4_Water
00003A16                            
00003A16                            Level_Delay:
00003A16 323C 0003                  		move.w	#3,d1
00003A1A                            
00003A1A                            Level_DelayLoop:
00003A1A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A20 6100 EE98                  		bsr.w	DelayProgram
00003A24 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003A28                            
00003A28 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003A2E 6100 E28C                  		bsr.w	Pal_FadeTo2
00003A32 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A36 6B00                       		bmi.s	Level_ClrCardArt
00003A38 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003A3C 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003A40 5838 D124                  		addq.b	#4,($FFFFD124).w
00003A44 5838 D164                  		addq.b	#4,($FFFFD164).w
00003A48 6000                       		bra.s	Level_StartGame
00003A4A                            ; ===========================================================================
00003A4A                            
00003A4A                            Level_ClrCardArt:
00003A4A 7002                       		moveq	#2,d0
00003A4C 4EB9 0000 148A             		jsr	(LoadPLC).l	; load explosion patterns
00003A52 7000                       		moveq	#0,d0
00003A54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A58 0640 0015                  		addi.w	#$15,d0
00003A5C 4EB9 0000 148A             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003A62                            
00003A62                            Level_StartGame:
00003A62 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003A68                            
00003A68                            ; ---------------------------------------------------------------------------
00003A68                            ; Main level loop (when	all title card and loading sequences are finished)
00003A68                            ; ---------------------------------------------------------------------------
00003A68                            
00003A68                            Level_MainLoop:
00003A68 6100 D804                  		bsr.w	PauseGame
00003A6C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A72 6100 EE46                  		bsr.w	DelayProgram
00003A76 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003A7A 6100 0000                  		bsr.w	MoveSonicInDemo
00003A7E 6100 0000                  		bsr.w	LZWaterEffects
00003A82 4EB9 0000 0000             		jsr	ObjectsLoad
00003A88 4A78 FE08                  		tst.w	($FFFFFE08).w
00003A8C 6600                       		bne.s	loc_3B10
00003A8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003A94 6400                       		bcc.s	loc_3B14
00003A96                            
00003A96                            loc_3B10:
00003A96 6100 0000                  		bsr.w	DeformBgLayer
00003A9A                            
00003A9A                            loc_3B14:
00003A9A 4EB9 0000 0000             		jsr	BuildSprites
00003AA0 4EB9 0000 0000             		jsr	ObjPosLoad
00003AA6 6100 DD9E                  		bsr.w	PalCycle_Load
00003AAA 6100 DA4A                  		bsr.w	RunPLC_RAM
00003AAE 6100 0000                  		bsr.w	OscillateNumDo
00003AB2 6100 0000                  		bsr.w	ChangeRingFrame
00003AB6 6100 0000                  		bsr.w	SignpostArtLoad
00003ABA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003AC0 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003AC2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003AC6 6600 FC50                  		bne.w	Level		; if yes, branch
00003ACA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003AD0 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003AD4 4E75                       		rts	
00003AD6                            ; ===========================================================================
00003AD6                            
00003AD6                            Level_ChkDemo:				; XREF: Level_MainLoop
00003AD6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003ADA 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003ADC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003AE0 6700                       		beq.s	Level_EndDemo	; if not, branch
00003AE2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003AE8 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003AEC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003AF2 4E75                       		rts	
00003AF4                            ; ===========================================================================
00003AF4                            
00003AF4                            Level_EndDemo:				; XREF: Level_ChkDemo
00003AF4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003AFA 6600                       		bne.s	loc_3B88	; if not, branch
00003AFC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003B02 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B06 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B08 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B0E                            
00003B0E                            loc_3B88:
00003B0E 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B14 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003B1A 4278 F794                  		clr.w	($FFFFF794).w
00003B1E                            
00003B1E                            loc_3B98:
00003B1E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B24 6100 ED94                  		bsr.w	DelayProgram
00003B28 6100 0000                  		bsr.w	MoveSonicInDemo
00003B2C 4EB9 0000 0000             		jsr	ObjectsLoad
00003B32 4EB9 0000 0000             		jsr	BuildSprites
00003B38 4EB9 0000 0000             		jsr	ObjPosLoad
00003B3E 5378 F794                  		subq.w	#1,($FFFFF794).w
00003B42 6A00                       		bpl.s	loc_3BC8
00003B44 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003B4A 6100 E230                  		bsr.w	Pal_FadeOut
00003B4E                            
00003B4E                            loc_3BC8:
00003B4E 4A78 F614                  		tst.w	($FFFFF614).w
00003B52 66CA                       		bne.s	loc_3B98
00003B54 4E75                       		rts	
00003B56                            ; ===========================================================================
00003B56                            ; ---------------------------------------------------------------------------
00003B56                            ; Subroutine to	do special water effects in Labyrinth Zone
00003B56                            ; ---------------------------------------------------------------------------
00003B56                            
00003B56                            LZWaterEffects:				; XREF: Level
00003B56 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003B5C 6600                       		bne.s	locret_3C28	; if not, branch
00003B5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B64 6400                       		bcc.s	LZMoveWater
00003B66 6100 0000                  		bsr.w	LZWindTunnels
00003B6A 6100 0000                  		bsr.w	LZWaterSlides
00003B6E 6100 0000                  		bsr.w	LZDynamicWater
00003B72                            
00003B72                            LZMoveWater:
00003B72 4238 F64E                  		clr.b	($FFFFF64E).w
00003B76 7000                       		moveq	#0,d0
00003B78 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003B7C E248                       		lsr.w	#1,d0
00003B7E D078 F648                  		add.w	($FFFFF648).w,d0
00003B82 31C0 F646                  		move.w	d0,($FFFFF646).w
00003B86 3038 F646                  		move.w	($FFFFF646).w,d0
00003B8A 9078 F704                  		sub.w	($FFFFF704).w,d0
00003B8E 6400                       		bcc.s	loc_3C1A
00003B90 4A40                       		tst.w	d0
00003B92 6A00                       		bpl.s	loc_3C1A
00003B94 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003B9A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003BA0                            
00003BA0                            loc_3C1A:
00003BA0 0C40 00DF                  		cmpi.w	#$DF,d0
00003BA4 6500                       		bcs.s	loc_3C24
00003BA6 303C 00DF                  		move.w	#$DF,d0
00003BAA                            
00003BAA                            loc_3C24:
00003BAA 11C0 F625                  		move.b	d0,($FFFFF625).w
00003BAE                            
00003BAE                            locret_3C28:
00003BAE 4E75                       		rts	
00003BB0                            ; ===========================================================================
00003BB0                            ; ---------------------------------------------------------------------------
00003BB0                            ; Labyrinth default water heights
00003BB0                            ; ---------------------------------------------------------------------------
00003BB0                            WaterHeight:	incbin	misc\lz_heigh.bin
00003BB8                            		even
00003BB8                            ; ===========================================================================
00003BB8                            
00003BB8                            ; ---------------------------------------------------------------------------
00003BB8                            ; Labyrinth dynamic water routines
00003BB8                            ; ---------------------------------------------------------------------------
00003BB8                            
00003BB8                            LZDynamicWater:				; XREF: LZWaterEffects
00003BB8 7000                       		moveq	#0,d0
00003BBA 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BBE D040                       		add.w	d0,d0
00003BC0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003BC4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003BC8 7200                       		moveq	#0,d1
00003BCA 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003BCE 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003BD2 9078 F648                  		sub.w	($FFFFF648).w,d0
00003BD6 6700                       		beq.s	locret_3C5A
00003BD8 6400                       		bcc.s	loc_3C56
00003BDA 4441                       		neg.w	d1
00003BDC                            
00003BDC                            loc_3C56:
00003BDC D378 F648                  		add.w	d1,($FFFFF648).w
00003BE0                            
00003BE0                            locret_3C5A:
00003BE0 4E75                       		rts	
00003BE2                            ; ===========================================================================
00003BE2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003BE4 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003BE6 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003BE8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003BEA                            ; ===========================================================================
00003BEA                            
00003BEA                            DynWater_LZ1:				; XREF: DynWater_Index
00003BEA 3038 F700                  		move.w	($FFFFF700).w,d0
00003BEE 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003BF2 6600                       		bne.s	loc_3CD0
00003BF4 323C 00B8                  		move.w	#$B8,d1
00003BF8 0C40 0600                  		cmpi.w	#$600,d0
00003BFC 6500                       		bcs.s	loc_3CB4
00003BFE 323C 0108                  		move.w	#$108,d1
00003C02 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C08 6500                       		bcs.s	loc_3CBA
00003C0A 0C40 0C00                  		cmpi.w	#$C00,d0
00003C0E 6500                       		bcs.s	loc_3CB4
00003C10 323C 0318                  		move.w	#$318,d1
00003C14 0C40 1080                  		cmpi.w	#$1080,d0
00003C18 6500                       		bcs.s	loc_3CB4
00003C1A 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C20 323C 05C8                  		move.w	#$5C8,d1
00003C24 0C40 1380                  		cmpi.w	#$1380,d0
00003C28 6500                       		bcs.s	loc_3CB4
00003C2A 323C 03A8                  		move.w	#$3A8,d1
00003C2E B278 F648                  		cmp.w	($FFFFF648).w,d1
00003C32 6600                       		bne.s	loc_3CB4
00003C34 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003C3A                            
00003C3A                            loc_3CB4:
00003C3A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C3E 4E75                       		rts	
00003C40                            ; ===========================================================================
00003C40                            
00003C40                            loc_3CBA:				; XREF: DynWater_LZ1
00003C40 0C40 0C80                  		cmpi.w	#$C80,d0
00003C44 65F4                       		bcs.s	loc_3CB4
00003C46 323C 00E8                  		move.w	#$E8,d1
00003C4A 0C40 1500                  		cmpi.w	#$1500,d0
00003C4E 65EA                       		bcs.s	loc_3CB4
00003C50 323C 0108                  		move.w	#$108,d1
00003C54 60E4                       		bra.s	loc_3CB4
00003C56                            ; ===========================================================================
00003C56                            
00003C56                            loc_3CD0:				; XREF: DynWater_LZ1
00003C56 5302                       		subq.b	#1,d2
00003C58 6600                       		bne.s	locret_3CF4
00003C5A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003C60 6400                       		bcc.s	locret_3CF4
00003C62 323C 03A8                  		move.w	#$3A8,d1
00003C66 0C40 1300                  		cmpi.w	#$1300,d0
00003C6A 6500                       		bcs.s	loc_3CF0
00003C6C 323C 0108                  		move.w	#$108,d1
00003C70 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003C76                            
00003C76                            loc_3CF0:
00003C76 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C7A                            
00003C7A                            locret_3CF4:
00003C7A 4E75                       		rts	
00003C7C                            ; ===========================================================================
00003C7C                            
00003C7C                            DynWater_LZ2:				; XREF: DynWater_Index
00003C7C 3038 F700                  		move.w	($FFFFF700).w,d0
00003C80 323C 0328                  		move.w	#$328,d1
00003C84 0C40 0500                  		cmpi.w	#$500,d0
00003C88 6500                       		bcs.s	loc_3D12
00003C8A 323C 03C8                  		move.w	#$3C8,d1
00003C8E 0C40 0B00                  		cmpi.w	#$B00,d0
00003C92 6500                       		bcs.s	loc_3D12
00003C94 323C 0428                  		move.w	#$428,d1
00003C98                            
00003C98                            loc_3D12:
00003C98 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003C9C 4E75                       		rts	
00003C9E                            ; ===========================================================================
00003C9E                            
00003C9E                            DynWater_LZ3:				; XREF: DynWater_Index
00003C9E 3038 F700                  		move.w	($FFFFF700).w,d0
00003CA2 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003CA6 6600                       		bne.s	loc_3D5E
00003CA8 323C 0900                  		move.w	#$900,d1
00003CAC 0C40 0600                  		cmpi.w	#$600,d0
00003CB0 6500                       		bcs.s	loc_3D54
00003CB2 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003CB8 6500                       		bcs.s	loc_3D54
00003CBA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003CC0 6400                       		bcc.s	loc_3D54
00003CC2 323C 04C8                  		move.w	#$4C8,d1
00003CC6 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003CCC 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CD2 303C 00B7                  		move.w	#$B7,d0
00003CD6 6100 D58A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003CDA                            
00003CDA                            loc_3D54:
00003CDA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CDE 31C1 F648                  		move.w	d1,($FFFFF648).w
00003CE2 4E75                       		rts	
00003CE4                            ; ===========================================================================
00003CE4                            
00003CE4                            loc_3D5E:				; XREF: DynWater_LZ3
00003CE4 5302                       		subq.b	#1,d2
00003CE6 6600                       		bne.s	loc_3DA8
00003CE8 323C 04C8                  		move.w	#$4C8,d1
00003CEC 0C40 0770                  		cmpi.w	#$770,d0
00003CF0 6500                       		bcs.s	loc_3DA2
00003CF2 323C 0308                  		move.w	#$308,d1
00003CF6 0C40 1400                  		cmpi.w	#$1400,d0
00003CFA 6500                       		bcs.s	loc_3DA2
00003CFC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D02 6700                       		beq.s	loc_3D8E
00003D04 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D0A 6400                       		bcc.s	loc_3D8E
00003D0C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D12 6400                       		bcc.s	loc_3DA2
00003D14                            
00003D14                            loc_3D8E:
00003D14 323C 0508                  		move.w	#$508,d1
00003D18 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D1C 0C40 1770                  		cmpi.w	#$1770,d0
00003D20 6500                       		bcs.s	loc_3DA2
00003D22 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003D28                            
00003D28                            loc_3DA2:
00003D28 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D2C 4E75                       		rts	
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            loc_3DA8:
00003D2E 5302                       		subq.b	#1,d2
00003D30 6600                       		bne.s	loc_3DD2
00003D32 323C 0508                  		move.w	#$508,d1
00003D36 0C40 1860                  		cmpi.w	#$1860,d0
00003D3A 6500                       		bcs.s	loc_3DCC
00003D3C 323C 0188                  		move.w	#$188,d1
00003D40 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003D44 6400                       		bcc.s	loc_3DC6
00003D46 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003D4A 6600                       		bne.s	loc_3DCC
00003D4C                            
00003D4C                            loc_3DC6:
00003D4C 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003D52                            
00003D52                            loc_3DCC:
00003D52 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D56 4E75                       		rts	
00003D58                            ; ===========================================================================
00003D58                            
00003D58                            loc_3DD2:
00003D58 5302                       		subq.b	#1,d2
00003D5A 6600                       		bne.s	loc_3E0E
00003D5C 323C 0188                  		move.w	#$188,d1
00003D60 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003D64 6500                       		bcs.s	loc_3E04
00003D66 323C 0900                  		move.w	#$900,d1
00003D6A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003D6E 6500                       		bcs.s	loc_3E04
00003D70 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003D76 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003D7C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003D82 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003D88 4E75                       		rts	
00003D8A                            ; ===========================================================================
00003D8A                            
00003D8A                            loc_3E04:
00003D8A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D8E 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D92 4E75                       		rts	
00003D94                            ; ===========================================================================
00003D94                            
00003D94                            loc_3E0E:
00003D94 0C40 1E00                  		cmpi.w	#$1E00,d0
00003D98 6500                       		bcs.s	locret_3E1A
00003D9A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003DA0                            
00003DA0                            locret_3E1A:
00003DA0 4E75                       		rts	
00003DA2                            ; ===========================================================================
00003DA2                            
00003DA2                            DynWater_SBZ3:				; XREF: DynWater_Index
00003DA2 323C 0228                  		move.w	#$228,d1
00003DA6 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003DAC 6500                       		bcs.s	loc_3E2C
00003DAE 323C 04C8                  		move.w	#$4C8,d1
00003DB2                            
00003DB2                            loc_3E2C:
00003DB2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DB6 4E75                       		rts
00003DB8                            
00003DB8                            ; ---------------------------------------------------------------------------
00003DB8                            ; Labyrinth Zone "wind tunnels"	subroutine
00003DB8                            ; ---------------------------------------------------------------------------
00003DB8                            
00003DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DB8                            
00003DB8                            
00003DB8                            LZWindTunnels:				; XREF: LZWaterEffects
00003DB8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003DBC 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003DC0 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003DC6 7000                       		moveq	#0,d0
00003DC8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003DCC E748                       		lsl.w	#3,d0
00003DCE D4C0                       		adda.w	d0,a2
00003DD0 7200                       		moveq	#0,d1
00003DD2 4A38 FE11                  		tst.b	($FFFFFE11).w
00003DD6 6600                       		bne.s	loc_3E56
00003DD8 7201                       		moveq	#1,d1
00003DDA 514A                       		subq.w	#8,a2
00003DDC                            
00003DDC                            loc_3E56:
00003DDC 43F8 D000                  		lea	($FFFFD000).w,a1
00003DE0                            
00003DE0                            LZWind_Loop:
00003DE0 3029 0008                  		move.w	8(a1),d0
00003DE4 B052                       		cmp.w	(a2),d0
00003DE6 6500 0000                  		bcs.w	loc_3EF4
00003DEA B06A 0004                  		cmp.w	4(a2),d0
00003DEE 6400 0000                  		bcc.w	loc_3EF4
00003DF2 3429 000C                  		move.w	$C(a1),d2
00003DF6 B46A 0002                  		cmp.w	2(a2),d2
00003DFA 6500                       		bcs.s	loc_3EF4
00003DFC B46A 0006                  		cmp.w	6(a2),d2
00003E00 6400                       		bcc.s	loc_3EF4
00003E02 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E06 0200 003F                  		andi.b	#$3F,d0
00003E0A 6600                       		bne.s	loc_3E90
00003E0C 303C 00D0                  		move.w	#$D0,d0
00003E10 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E16                            
00003E16                            loc_3E90:
00003E16 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E1A 6600 0000                  		bne.w	locret_3F0A
00003E1E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E24 6400                       		bcc.s	loc_3F06
00003E26 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003E2C 0440 0080                  		subi.w	#$80,d0
00003E30 B052                       		cmp.w	(a2),d0
00003E32 6400                       		bcc.s	LZWind_Move
00003E34 7002                       		moveq	#2,d0
00003E36 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003E3C 6600                       		bne.s	loc_3EBA
00003E3E 4440                       		neg.w	d0
00003E40                            
00003E40                            loc_3EBA:
00003E40 D169 000C                  		add.w	d0,$C(a1)
00003E44                            
00003E44                            LZWind_Move:
00003E44 5869 0008                  		addq.w	#4,8(a1)
00003E48 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003E4E 337C 0000 0012             		move.w	#0,$12(a1)
00003E54 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003E5A 08E9 0001 0022             		bset	#1,$22(a1)
00003E60 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003E66 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003E68 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003E6C                            
00003E6C                            LZWind_MoveDown:
00003E6C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003E72 6700                       		beq.s	locret_3EF2	; if not, branch
00003E74 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003E78                            
00003E78                            locret_3EF2:
00003E78 4E75                       		rts	
00003E7A                            ; ===========================================================================
00003E7A                            
00003E7A                            loc_3EF4:				; XREF: LZWindTunnels
00003E7A 504A                       		addq.w	#8,a2
00003E7C 51C9 FF62                  		dbf	d1,LZWind_Loop
00003E80 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003E84 6700                       		beq.s	locret_3F0A
00003E86 137C 0000 001C             		move.b	#0,$1C(a1)
00003E8C                            
00003E8C                            loc_3F06:
00003E8C 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003E90                            
00003E90                            locret_3F0A:
00003E90 4E75                       		rts	
00003E92                            ; End of function LZWindTunnels
00003E92                            
00003E92                            ; ===========================================================================
00003E92 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003E9A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003EAC 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003EBA                            					; XREF: LZWindTunnels
00003EBA                            		even
00003EBA                            
00003EBA                            ; ---------------------------------------------------------------------------
00003EBA                            ; Labyrinth Zone water slide subroutine
00003EBA                            ; ---------------------------------------------------------------------------
00003EBA                            
00003EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003EBA                            
00003EBA                            
00003EBA                            LZWaterSlides:				; XREF: LZWaterEffects
00003EBA 43F8 D000                  		lea	($FFFFD000).w,a1
00003EBE 0829 0001 0022             		btst	#1,$22(a1)
00003EC4 6600                       		bne.s	loc_3F6A
00003EC6 3029 000C                  		move.w	$C(a1),d0
00003ECA E248                       		lsr.w	#1,d0
00003ECC 0240 0380                  		andi.w	#$380,d0
00003ED0 1229 0008                  		move.b	8(a1),d1
00003ED4 0241 007F                  		andi.w	#$7F,d1
00003ED8 D041                       		add.w	d1,d0
00003EDA 45F8 A400                  		lea	($FFFFA400).w,a2
00003EDE 1032 0000                  		move.b	(a2,d0.w),d0
00003EE2 45FA 0000                  		lea	byte_3FCF(pc),a2
00003EE6 7206                       		moveq	#6,d1
00003EE8                            
00003EE8                            loc_3F62:
00003EE8 B022                       		cmp.b	-(a2),d0
00003EEA 57C9 FFFC                  		dbeq	d1,loc_3F62
00003EEE 6700                       		beq.s	LZSlide_Move
00003EF0                            
00003EF0                            loc_3F6A:
00003EF0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003EF4 6700                       		beq.s	locret_3F7A
00003EF6 337C 0005 003E             		move.w	#5,$3E(a1)
00003EFC 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F00                            
00003F00                            locret_3F7A:
00003F00 4E75                       		rts	
00003F02                            ; ===========================================================================
00003F02                            
00003F02                            LZSlide_Move:				; XREF: LZWaterSlides
00003F02 0C41 0003                  		cmpi.w	#3,d1
00003F06 6400                       		bcc.s	loc_3F84
00003F08 4E71                       		nop	
00003F0A                            
00003F0A                            loc_3F84:
00003F0A 08A9 0000 0022             		bclr	#0,$22(a1)
00003F10 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F14 1340 0014                  		move.b	d0,$14(a1)
00003F18 6A00                       		bpl.s	loc_3F9A
00003F1A 08E9 0000 0022             		bset	#0,$22(a1)
00003F20                            
00003F20                            loc_3F9A:
00003F20 4229 0015                  		clr.b	$15(a1)
00003F24 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003F2A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003F30 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F34 0200 001F                  		andi.b	#$1F,d0
00003F38 6600                       		bne.s	locret_3FBE
00003F3A 303C 00D0                  		move.w	#$D0,d0
00003F3E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play water sound
00003F44                            
00003F44                            locret_3FBE:
00003F44 4E75                       		rts	
00003F46                            ; End of function LZWaterSlides
00003F46                            
00003F46                            ; ===========================================================================
00003F46 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003F55 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003F56                            		even
00003F56                            
00003F56                            ; ---------------------------------------------------------------------------
00003F56                            ; Subroutine to	move Sonic in demo mode
00003F56                            ; ---------------------------------------------------------------------------
00003F56                            
00003F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F56                            
00003F56                            
00003F56                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003F56 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F5A 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003F5C 4E75                       		rts	
00003F5E                            ; ===========================================================================
00003F5E                            
00003F5E                            ; This is an unused subroutine for recording a demo
00003F5E                            
00003F5E                            MoveDemo_Record:
00003F5E 43F9 0008 0000             		lea	($80000).l,a1
00003F64 3038 F790                  		move.w	($FFFFF790).w,d0
00003F68 D2C0                       		adda.w	d0,a1
00003F6A 1038 F604                  		move.b	($FFFFF604).w,d0
00003F6E B011                       		cmp.b	(a1),d0
00003F70 6600                       		bne.s	loc_3FFA
00003F72 5229 0001                  		addq.b	#1,1(a1)
00003F76 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003F7C 6700                       		beq.s	loc_3FFA
00003F7E 4E75                       		rts	
00003F80                            ; ===========================================================================
00003F80                            
00003F80                            loc_3FFA:				; XREF: MoveDemo_Record
00003F80 1340 0002                  		move.b	d0,2(a1)
00003F84 137C 0000 0003             		move.b	#0,3(a1)
00003F8A 5478 F790                  		addq.w	#2,($FFFFF790).w
00003F8E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00003F94 4E75                       		rts	
00003F96                            ; ===========================================================================
00003F96                            
00003F96                            MoveDemo_On:				; XREF: MoveSonicInDemo
00003F96 4A38 F604                  		tst.b	($FFFFF604).w
00003F9A 6A00                       		bpl.s	loc_4022
00003F9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FA0 6B00                       		bmi.s	loc_4022
00003FA2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00003FA8                            
00003FA8                            loc_4022:
00003FA8 43F9 0000 0000             		lea	(Demo_Index).l,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003FB4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00003FBA 6600                       		bne.s	loc_4038
00003FBC 7006                       		moveq	#6,d0
00003FBE                            
00003FBE                            loc_4038:
00003FBE E548                       		lsl.w	#2,d0
00003FC0 2271 0000                  		movea.l	(a1,d0.w),a1
00003FC4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FC8 6A00                       		bpl.s	loc_4056
00003FCA 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00003FD0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003FD4 5340                       		subq.w	#1,d0
00003FD6 E548                       		lsl.w	#2,d0
00003FD8 2271 0000                  		movea.l	(a1,d0.w),a1
00003FDC                            
00003FDC                            loc_4056:
00003FDC 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE0 D2C0                       		adda.w	d0,a1
00003FE2 1011                       		move.b	(a1),d0
00003FE4 41F8 F604                  		lea	($FFFFF604).w,a0
00003FE8 1200                       		move.b	d0,d1
00003FEA 1410                       		move.b	(a0),d2
00003FEC B500                       		eor.b	d2,d0
00003FEE 10C1                       		move.b	d1,(a0)+
00003FF0 C001                       		and.b	d1,d0
00003FF2 10C0                       		move.b	d0,(a0)+
00003FF4 5338 F792                  		subq.b	#1,($FFFFF792).w
00003FF8 6400                       		bcc.s	locret_407E
00003FFA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004000 5478 F790                  		addq.w	#2,($FFFFF790).w
00004004                            
00004004                            locret_407E:
00004004 4E75                       		rts	
00004006                            ; End of function MoveSonicInDemo
00004006                            
00004006                            ; ===========================================================================
00004006                            ; ---------------------------------------------------------------------------
00004006                            ; Demo sequence	pointers
00004006                            ; ---------------------------------------------------------------------------
00004006                            Demo_Index:
00004006                            	include "_inc\Demo pointers for intro.asm"
00004006                            ; ---------------------------------------------------------------------------
00004006                            ; Demo sequence	pointers
00004006                            ; ---------------------------------------------------------------------------
00004006 0000 0000                  	dc.l Demo_GHZ
0000400A 0000 0000                  	dc.l Demo_GHZ
0000400E 0000 0000                  	dc.l Demo_MZ
00004012 0000 0000                  	dc.l Demo_MZ
00004016 0000 0000                  	dc.l Demo_SYZ
0000401A 0000 0000                  	dc.l Demo_SYZ
0000401E 0000 0000                  	dc.l Demo_SS
00004022 0000 0000                  	dc.l Demo_SS
00004022 0000 0000                  	dc.l Demo_SS
00004026                            
00004026                            Demo_EndIndex:
00004026                            	include "_inc\Demo pointers for ending.asm"
00004026                            ; ---------------------------------------------------------------------------
00004026                            ; Demo (ending) sequence pointers
00004026                            ; ---------------------------------------------------------------------------
00004026 0000 0000                  	dc.l Demo_EndGHZ1
0000402A 0000 0000                  	dc.l Demo_EndMZ
0000402E 0000 0000                  	dc.l Demo_EndSYZ
00004032 0000 0000                  	dc.l Demo_EndLZ
00004036 0000 0000                  	dc.l Demo_EndSLZ
0000403A 0000 0000                  	dc.l Demo_EndSBZ1
0000403E 0000 0000                  	dc.l Demo_EndSBZ2
00004042 0000 0000                  	dc.l Demo_EndGHZ2
00004042 0000 0000                  	dc.l Demo_EndGHZ2
00004046                            
00004046 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004056 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004066 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004076                            		even
00004076                            
00004076                            ; ---------------------------------------------------------------------------
00004076                            ; Collision index loading subroutine
00004076                            ; ---------------------------------------------------------------------------
00004076                            
00004076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004076                            
00004076                            
00004076                            ColIndexLoad:				; XREF: Level
00004076 7000                       		moveq	#0,d0
00004078 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000407C E548                       		lsl.w	#2,d0
0000407E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004084 4E75                       		rts	
00004086                            ; End of function ColIndexLoad
00004086                            
00004086                            ; ===========================================================================
00004086                            ; ---------------------------------------------------------------------------
00004086                            ; Collision index pointers
00004086                            ; ---------------------------------------------------------------------------
00004086                            ColPointers:
00004086                            	include "_inc\Collision index pointers.asm"
00004086                            ; ---------------------------------------------------------------------------
00004086                            ; Collision index pointers
00004086                            ; ---------------------------------------------------------------------------
00004086 0000 0000                  	dc.l Col_GHZ
0000408A 0000 0000                  	dc.l Col_LZ
0000408E 0000 0000                  	dc.l Col_MZ
00004092 0000 0000                  	dc.l Col_SLZ
00004096 0000 0000                  	dc.l Col_SYZ
0000409A 0000 0000                  	dc.l Col_SBZ
0000409A 0000 0000                  	dc.l Col_SBZ
0000409E                            
0000409E                            ; ---------------------------------------------------------------------------
0000409E                            ; Oscillating number subroutine
0000409E                            ; ---------------------------------------------------------------------------
0000409E                            
0000409E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000409E                            
0000409E                            
0000409E                            OscillateNumInit:			; XREF: Level
0000409E 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000040A2 45F9 0000 0000             		lea	(Osc_Data).l,a2
000040A8 7220                       		moveq	#$20,d1
000040AA                            
000040AA                            Osc_Loop:
000040AA 32DA                       		move.w	(a2)+,(a1)+
000040AC 51C9 FFFC                  		dbf	d1,Osc_Loop
000040B0 4E75                       		rts	
000040B2                            ; End of function OscillateNumInit
000040B2                            
000040B2                            ; ===========================================================================
000040B2 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000040B6 0000 0080                  		dc.w 0,	$80
000040BA 0000 0080                  		dc.w 0,	$80
000040BE 0000 0080                  		dc.w 0,	$80
000040C2 0000 0080                  		dc.w 0,	$80
000040C6 0000 0080                  		dc.w 0,	$80
000040CA 0000 0080                  		dc.w 0,	$80
000040CE 0000 0080                  		dc.w 0,	$80
000040D2 0000 0080                  		dc.w 0,	$80
000040D6 0000 50F0                  		dc.w 0,	$50F0
000040DA 011E 2080                  		dc.w $11E, $2080
000040DE 00B4 3080                  		dc.w $B4, $3080
000040E2 010E 5080                  		dc.w $10E, $5080
000040E6 01C2 7080                  		dc.w $1C2, $7080
000040EA 0276 0080                  		dc.w $276, $80
000040EE 0000 0080                  		dc.w 0,	$80
000040F2 0000                       		dc.w 0
000040F4                            		even
000040F4                            
000040F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040F4                            
000040F4                            
000040F4                            OscillateNumDo:				; XREF: Level
000040F4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000040FA 6400                       		bcc.s	locret_41C4
000040FC 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004100 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004106 3619                       		move.w	(a1)+,d3
00004108 720F                       		moveq	#$F,d1
0000410A                            
0000410A                            loc_4184:
0000410A 341A                       		move.w	(a2)+,d2
0000410C 381A                       		move.w	(a2)+,d4
0000410E 0303                       		btst	d1,d3
00004110 6600                       		bne.s	loc_41A4
00004112 3029 0002                  		move.w	2(a1),d0
00004116 D042                       		add.w	d2,d0
00004118 3340 0002                  		move.w	d0,2(a1)
0000411C D151                       		add.w	d0,0(a1)
0000411E B811                       		cmp.b	0(a1),d4
00004120 6200                       		bhi.s	loc_41BA
00004122 03C3                       		bset	d1,d3
00004124 6000                       		bra.s	loc_41BA
00004126                            ; ===========================================================================
00004126                            
00004126                            loc_41A4:				; XREF: OscillateNumDo
00004126 3029 0002                  		move.w	2(a1),d0
0000412A 9042                       		sub.w	d2,d0
0000412C 3340 0002                  		move.w	d0,2(a1)
00004130 D151                       		add.w	d0,0(a1)
00004132 B811                       		cmp.b	0(a1),d4
00004134 6300                       		bls.s	loc_41BA
00004136 0383                       		bclr	d1,d3
00004138                            
00004138                            loc_41BA:
00004138 5849                       		addq.w	#4,a1
0000413A 51C9 FFCE                  		dbf	d1,loc_4184
0000413E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004142                            
00004142                            locret_41C4:
00004142 4E75                       		rts	
00004144                            ; End of function OscillateNumDo
00004144                            
00004144                            ; ===========================================================================
00004144 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004148 0002 0018                  		dc.w 2,	$18
0000414C 0002 0020                  		dc.w 2,	$20
00004150 0002 0030                  		dc.w 2,	$30
00004154 0004 0020                  		dc.w 4,	$20
00004158 0008 0008                  		dc.w 8,	8
0000415C 0008 0040                  		dc.w 8,	$40
00004160 0004 0040                  		dc.w 4,	$40
00004164 0002 0050                  		dc.w 2,	$50
00004168 0002 0050                  		dc.w 2,	$50
0000416C 0002 0020                  		dc.w 2,	$20
00004170 0003 0030                  		dc.w 3,	$30
00004174 0005 0050                  		dc.w 5,	$50
00004178 0007 0070                  		dc.w 7,	$70
0000417C 0002 0010                  		dc.w 2,	$10
00004180 0002 0010                  		dc.w 2,	$10
00004184                            		even
00004184                            
00004184                            ; ---------------------------------------------------------------------------
00004184                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004184                            ; ---------------------------------------------------------------------------
00004184                            
00004184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004184                            
00004184                            
00004184                            ChangeRingFrame:			; XREF: Level
00004184 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004188 6A00                       		bpl.s	loc_421C
0000418A 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004190 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004194 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000419A                            
0000419A                            loc_421C:
0000419A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000419E 6A00                       		bpl.s	loc_4232
000041A0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000041A6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000041AA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000041B0                            
000041B0                            loc_4232:
000041B0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000041B4 6A00                       		bpl.s	loc_4250
000041B6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000041BC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000041C0 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000041C6 6500                       		bcs.s	loc_4250
000041C8 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000041CE                            
000041CE                            loc_4250:
000041CE 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000041D2 6700                       		beq.s	locret_4272
000041D4 7000                       		moveq	#0,d0
000041D6 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000041DA D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000041DE 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000041E2 EF58                       		rol.w	#7,d0
000041E4 0240 0003                  		andi.w	#3,d0
000041E8 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000041EC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000041F0                            
000041F0                            locret_4272:
000041F0 4E75                       		rts	
000041F2                            ; End of function ChangeRingFrame
000041F2                            
000041F2                            ; ---------------------------------------------------------------------------
000041F2                            ; End-of-act signpost pattern loading subroutine
000041F2                            ; ---------------------------------------------------------------------------
000041F2                            
000041F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F2                            
000041F2                            
000041F2                            SignpostArtLoad:			; XREF: Level
000041F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000041F6 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000041FA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004200 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004202 3038 F700                  		move.w	($FFFFF700).w,d0
00004206 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000420A 0441 0100                  		subi.w	#$100,d1
0000420E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004210 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004212 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004216 6700                       		beq.s	Signpost_Exit
00004218 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000421C 6700                       		beq.s	Signpost_Exit
0000421E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004222 7012                       		moveq	#$12,d0
00004224 6000 D296                  		bra.w	LoadPLC2	; load signpost	patterns
00004228                            ; ===========================================================================
00004228                            
00004228                            Signpost_Exit:
00004228 4E75                       		rts	
0000422A                            ; End of function SignpostArtLoad
0000422A                            
0000422A                            ; ===========================================================================
0000422A                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000042AA                            Demo_MZ:	incbin	demodata\i_mz.bin
000043DA                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000445A                            Demo_SS:	incbin	demodata\i_ss.bin
0000455A                            ; ===========================================================================
0000455A                            
0000455A                            ; ---------------------------------------------------------------------------
0000455A                            ; Special Stage
0000455A                            ; ---------------------------------------------------------------------------
0000455A                            
0000455A                            SpecialStage:				; XREF: GameModeArray
0000455A 303C 00CA                  		move.w	#$CA,d0
0000455E 6100 CD02                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004562 4EB9 0000 0000             		jsr	BuildSprites
00004568 6100 D91C                  		bsr.w	Pal_MakeFlash
0000456C 46FC 2700                  		move	#$2700,sr
00004570 4DF9 00C0 0004             		lea	($C00004).l,a6
00004576 3CBC 8B03                  		move.w	#$8B03,(a6)
0000457A 3CBC 8004                  		move.w	#$8004,(a6)
0000457E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004584 3CBC 9011                  		move.w	#$9011,(a6)
00004588 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000458C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004592 6100 CBF6                  		bsr.w	ClearScreen
00004596 46FC 2300                  		move	#$2300,sr
0000459A 4BF9 00C0 0004             		lea	($C00004).l,a5
000045A0 3ABC 8F01                  		move.w	#$8F01,(a5)
000045A4 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000045AA 3ABC 9780                  		move.w	#$9780,(a5)
000045AE 2ABC 5000 0081             		move.l	#$50000081,(a5)
000045B4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000045BC                            
000045BC                            loc_463C:
000045BC 3215                       		move.w	(a5),d1
000045BE 0801 0001                  		btst	#1,d1
000045C2 66F8                       		bne.s	loc_463C
000045C4 3ABC 8F02                  		move.w	#$8F02,(a5)
000045C8 6100 0000                  		bsr.w	SS_BGLoad
000045CC 7014                       		moveq	#$14,d0
000045CE 6100 D026                  		bsr.w	RunPLC_ROM	; load special stage patterns
000045D2                            
000045D2 43F8 D000                  		lea	($FFFFD000).w,a1
000045D6 7000                       		moveq	#0,d0
000045D8 323C 07FF                  		move.w	#$7FF,d1
000045DC                            
000045DC                            SS_ClrObjRam:
000045DC 22C0                       		move.l	d0,(a1)+
000045DE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000045E2                            
000045E2 43F8 F700                  		lea	($FFFFF700).w,a1
000045E6 7000                       		moveq	#0,d0
000045E8 323C 003F                  		move.w	#$3F,d1
000045EC                            
000045EC                            SS_ClrRam:
000045EC 22C0                       		move.l	d0,(a1)+
000045EE 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000045F2                            
000045F2 43F8 FE60                  		lea	($FFFFFE60).w,a1
000045F6 7000                       		moveq	#0,d0
000045F8 323C 0027                  		move.w	#$27,d1
000045FC                            
000045FC                            SS_ClrRam2:
000045FC 22C0                       		move.l	d0,(a1)+
000045FE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004602                            
00004602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004606 7000                       		moveq	#0,d0
00004608 323C 007F                  		move.w	#$7F,d1
0000460C                            
0000460C                            SS_ClrNemRam:
0000460C 22C0                       		move.l	d0,(a1)+
0000460E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004612 4238 F64E                  		clr.b	($FFFFF64E).w
00004616 4278 FE02                  		clr.w	($FFFFFE02).w
0000461A 700A                       		moveq	#$A,d0
0000461C 6100 D9E8                  		bsr.w	PalLoad1	; load special stage pallet
00004620 4EB9 0000 0000             		jsr	SS_Load
00004626 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000462E 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004636 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000463C 6100 0000                  		bsr.w	PalCycle_SS
00004640 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004644 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000464A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004650 303C 0089                  		move.w	#$89,d0
00004654 6100 CC06                  		bsr.w	PlaySound	; play special stage BG	music
00004658 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000465E 43F9 0000 4006             		lea	(Demo_Index).l,a1
00004664 7006                       		moveq	#6,d0
00004666 E548                       		lsl.w	#2,d0
00004668 2271 0000                  		movea.l	(a1,d0.w),a1
0000466C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004672 5338 F792                  		subq.b	#1,($FFFFF792).w
00004676 4278 FE20                  		clr.w	($FFFFFE20).w
0000467A 4238 FE1B                  		clr.b	($FFFFFE1B).w
0000467E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004684 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000468A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000468E 6700                       		beq.s	SS_NoDebug	; if not, branch
00004690 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004696 6700                       		beq.s	SS_NoDebug	; if not, branch
00004698 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000469E                            
0000469E                            SS_NoDebug:
0000469E 3038 F60C                  		move.w	($FFFFF60C).w,d0
000046A2 0000 0040                  		ori.b	#$40,d0
000046A6 33C0 00C0 0004             		move.w	d0,($C00004).l
000046AC 6100 D72C                  		bsr.w	Pal_MakeWhite
000046B0                            
000046B0                            ; ---------------------------------------------------------------------------
000046B0                            ; Main Special Stage loop
000046B0                            ; ---------------------------------------------------------------------------
000046B0                            
000046B0                            SS_MainLoop:
000046B0 6100 CBBC                  		bsr.w	PauseGame
000046B4 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
000046BA 6100 E1FE                  		bsr.w	DelayProgram
000046BE 6100 F896                  		bsr.w	MoveSonicInDemo
000046C2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000046C8 4EB9 0000 0000             		jsr	ObjectsLoad
000046CE 4EB9 0000 0000             		jsr	BuildSprites
000046D4 4EB9 0000 0000             		jsr	SS_ShowLayout
000046DA 6100 0000                  		bsr.w	SS_BGAnimate
000046DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000046E2 6700                       		beq.s	SS_ChkEnd	; if not, branch
000046E4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000046E8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000046EC                            
000046EC                            SS_ChkEnd:
000046EC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000046F2 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000046F6                            
000046F6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000046FA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000046FE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004704 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000470A 6500                       		bcs.s	SS_End		; if not, branch
0000470C 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004710                            
00004710                            SS_End:
00004710 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004716 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000471C 4278 F794                  		clr.w	($FFFFF794).w
00004720                            
00004720                            SS_EndLoop:
00004720 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004726 6100 E192                  		bsr.w	DelayProgram
0000472A 6100 F82A                  		bsr.w	MoveSonicInDemo
0000472E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004734 4EB9 0000 0000             		jsr	ObjectsLoad
0000473A 4EB9 0000 0000             		jsr	BuildSprites
00004740 4EB9 0000 0000             		jsr	SS_ShowLayout
00004746 6100 0000                  		bsr.w	SS_BGAnimate
0000474A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000474E 6A00                       		bpl.s	loc_47D4
00004750 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004756 6100 D74E                  		bsr.w	Pal_ToWhite
0000475A                            
0000475A                            loc_47D4:
0000475A 4A78 F614                  		tst.w	($FFFFF614).w
0000475E 66C0                       		bne.s	SS_EndLoop
00004760                            
00004760 46FC 2700                  		move	#$2700,sr
00004764 4DF9 00C0 0004             		lea	($C00004).l,a6
0000476A 3CBC 8230                  		move.w	#$8230,(a6)
0000476E 3CBC 8407                  		move.w	#$8407,(a6)
00004772 3CBC 9001                  		move.w	#$9001,(a6)
00004776 6100 CA12                  		bsr.w	ClearScreen
0000477A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004784 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000478A 6100 CBBE                  		bsr.w	NemDec
0000478E 4EB9 0000 0000             		jsr	Hud_Base
00004794 4278 C800                  		clr.w ($FFFFC800).w
00004798 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
000047A0 46FC 2300                  		move	#$2300,sr
000047A4 7011                       		moveq	#$11,d0
000047A6 6100 D87A                  		bsr.w	PalLoad2	; load results screen pallet
000047AA 7000                       		moveq	#0,d0
000047AC 6100 CD0E                  		bsr.w	LoadPLC2
000047B0 701B                       		moveq	#$1B,d0
000047B2 6100 CCD6                  		bsr.w	LoadPLC		; load results screen patterns
000047B6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000047BC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
000047C2 3038 FE20                  		move.w	($FFFFFE20).w,d0
000047C6 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000047CA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
000047CE 303C 008E                  		move.w	#$8E,d0
000047D2 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play end-of-level music
000047D8 43F8 D000                  		lea	($FFFFD000).w,a1
000047DC 7000                       		moveq	#0,d0
000047DE 323C 07FF                  		move.w	#$7FF,d1
000047E2                            
000047E2                            SS_EndClrObjRam:
000047E2 22C0                       		move.l	d0,(a1)+
000047E4 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000047E8                            
000047E8 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000047EE                            
000047EE                            SS_NormalExit:
000047EE 6100 CA7E                  		bsr.w	PauseGame
000047F2 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000047F8 6100 E0C0                  		bsr.w	DelayProgram
000047FC 4EB9 0000 0000             		jsr	ObjectsLoad
00004802 4EB9 0000 0000             		jsr	BuildSprites
00004808 6100 CCEC                  		bsr.w	RunPLC_RAM
0000480C 4A78 FE02                  		tst.w	($FFFFFE02).w
00004810 67DC                       		beq.s	SS_NormalExit
00004812 4AB8 F680                  		tst.l	($FFFFF680).w
00004816 66D6                       		bne.s	SS_NormalExit
00004818 303C 00CA                  		move.w	#$CA,d0
0000481C 6100 CA44                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004820 6100 D664                  		bsr.w	Pal_MakeFlash
00004824 4E75                       		rts	
00004826                            ; ===========================================================================
00004826                            
00004826                            SS_ToSegaScreen:
00004826 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000482C 4E75                       		rts
0000482E                            
0000482E                            ; ---------------------------------------------------------------------------
0000482E                            ; Special stage	background loading subroutine
0000482E                            ; ---------------------------------------------------------------------------
0000482E                            
0000482E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000482E                            
0000482E                            
0000482E                            SS_BGLoad:				; XREF: SpecialStage
0000482E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004834 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000483A 303C 4051                  		move.w	#$4051,d0
0000483E 6100 CDE8                  		bsr.w	EniDec
00004842 263C 5000 0001             		move.l	#$50000001,d3
00004848 45F9 00FF 0080             		lea	($FF0080).l,a2
0000484E 7E06                       		moveq	#6,d7
00004850                            
00004850                            loc_48BE:
00004850 2003                       		move.l	d3,d0
00004852 7C03                       		moveq	#3,d6
00004854 7800                       		moveq	#0,d4
00004856 0C47 0003                  		cmpi.w	#3,d7
0000485A 6400                       		bcc.s	loc_48CC
0000485C 7801                       		moveq	#1,d4
0000485E                            
0000485E                            loc_48CC:
0000485E 7A07                       		moveq	#7,d5
00004860                            
00004860                            loc_48CE:
00004860 224A                       		movea.l	a2,a1
00004862 0A04 0001                  		eori.b	#1,d4
00004866 6600                       		bne.s	loc_48E2
00004868 0C47 0006                  		cmpi.w	#6,d7
0000486C 6600                       		bne.s	loc_48F2
0000486E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004874                            
00004874                            loc_48E2:
00004874 48E7 F800                  		movem.l	d0-d4,-(sp)
00004878 7207                       		moveq	#7,d1
0000487A 7407                       		moveq	#7,d2
0000487C 6100 CAAC                  		bsr.w	ShowVDPGraphics
00004880 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004884                            
00004884                            loc_48F2:
00004884 0680 0010 0000             		addi.l	#$100000,d0
0000488A 51CD FFD4                  		dbf	d5,loc_48CE
0000488E 0680 0380 0000             		addi.l	#$3800000,d0
00004894 0A04 0001                  		eori.b	#1,d4
00004898 51CE FFC4                  		dbf	d6,loc_48CC
0000489C 0683 1000 0000             		addi.l	#$10000000,d3
000048A2 6A00                       		bpl.s	loc_491C
000048A4 4843                       		swap	d3
000048A6 0683 0000 C000             		addi.l	#$C000,d3
000048AC 4843                       		swap	d3
000048AE                            
000048AE                            loc_491C:
000048AE D4FC 0080                  		adda.w	#$80,a2
000048B2 51CF FF9C                  		dbf	d7,loc_48BE
000048B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000048BC 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000048C2 303C 4000                  		move.w	#$4000,d0
000048C6 6100 CD60                  		bsr.w	EniDec
000048CA 43F9 00FF 0000             		lea	($FF0000).l,a1
000048D0 203C 4000 0003             		move.l	#$40000003,d0
000048D6 723F                       		moveq	#$3F,d1
000048D8 741F                       		moveq	#$1F,d2
000048DA 6100 CA4E                  		bsr.w	ShowVDPGraphics
000048DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000048E4 203C 5000 0003             		move.l	#$50000003,d0
000048EA 723F                       		moveq	#$3F,d1
000048EC 743F                       		moveq	#$3F,d2
000048EE 6100 CA3A                  		bsr.w	ShowVDPGraphics
000048F2 4E75                       		rts	
000048F4                            ; End of function SS_BGLoad
000048F4                            
000048F4                            ; ---------------------------------------------------------------------------
000048F4                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000048F4                            ; to be issued the next time ProcessDMAQueue is called.
000048F4                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000048F4                            ; by issuing the commands (this subroutine DOES check for overflow)
000048F4                            ; ---------------------------------------------------------------------------
000048F4                            ; In case you wish to use this queue system outside of the spin dash, this is the
000048F4                            ; registers in which it expects data in:
000048F4                            ; d1.l: Address to data (In 68k address space)
000048F4                            ; d2.w: Destination in VRAM
000048F4                            ; d3.w: Length of data
000048F4                            ; ---------------------------------------------------------------------------
000048F4                            
000048F4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000048F4                            
000048F4                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000048F4                            QueueDMATransfer:
000048F4 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
000048F8 B2FC C8FC                  		cmpa.w #$C8FC,a1
000048FC 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
000048FE                            
000048FE                            ; piece together some VDP commands and store them for later...
000048FE 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004902 1003                       		move.b d3,d0
00004904 32C0                       		move.w d0,(a1)+ ; store command
00004906                            
00004906 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
0000490A E04B                       		lsr.w #8,d3
0000490C 1003                       		move.b d3,d0
0000490E 32C0                       		move.w d0,(a1)+ ; store command
00004910                            
00004910 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004914 E289                       		lsr.l #1,d1
00004916 1001                       		move.b d1,d0
00004918 32C0                       		move.w d0,(a1)+ ; store command
0000491A                            
0000491A 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
0000491E E089                       		lsr.l #8,d1
00004920 1001                       		move.b d1,d0
00004922 32C0                       		move.w d0,(a1)+ ; store command
00004924                            
00004924 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004928 E089                       		lsr.l #8,d1
0000492A 1001                       		move.b d1,d0
0000492C 32C0                       		move.w d0,(a1)+ ; store command
0000492E                            
0000492E 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004934 E58A                       		lsl.l #2,d2
00004936 E44A                       		lsr.w #2,d2
00004938 4842                       		swap d2
0000493A 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004940 22C2                       		move.l d2,(a1)+ ; store command
00004942                            
00004942 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004946 B2FC C8FC                  		cmpa.w #$C8FC,a1
0000494A 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
0000494C 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004950                            ; return_14AA:
00004950                            QueueDMATransfer_Done:
00004950 4E75                       		rts
00004952                            ; End of function QueueDMATransfer
00004952                            
00004952                            ; ---------------------------------------------------------------------------
00004952                            ; Subroutine for issuing all VDP commands that were queued
00004952                            ; (by earlier calls to QueueDMATransfer)
00004952                            ; Resets the queue when it's done
00004952                            ; ---------------------------------------------------------------------------
00004952                            
00004952                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004952                            
00004952                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004952                            ProcessDMAQueue:
00004952 4BF9 00C0 0004             		lea ($C00004).l,a5
00004958 43F8 C800                  		lea ($FFFFC800).w,a1
0000495C                            ; loc_14B6:
0000495C                            ProcessDMAQueue_Loop:
0000495C 3019                       		move.w (a1)+,d0
0000495E 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004960                            		; issue a set of VDP commands...
00004960 3A80                       		move.w d0,(a5) ; transfer length
00004962 3A99                       		move.w (a1)+,(a5) ; transfer length
00004964 3A99                       		move.w (a1)+,(a5) ; source address
00004966 3A99                       		move.w (a1)+,(a5) ; source address
00004968 3A99                       		move.w (a1)+,(a5) ; source address
0000496A 3A99                       		move.w (a1)+,(a5) ; destination
0000496C 3A99                       		move.w (a1)+,(a5) ; destination
0000496E B2FC C8FC                  		cmpa.w #$C8FC,a1
00004972 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004974                            ; loc_14CE:
00004974                            ProcessDMAQueue_Done:
00004974 31FC 0000 C800             		move.w #0,($FFFFC800).w
0000497A 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004982 4E75                       		rts
00004984                            ; End of function ProcessDMAQueue
00004984                            
00004984                            ; ---------------------------------------------------------------------------
00004984                            ; Pallet cycling routine - special stage
00004984                            ; ---------------------------------------------------------------------------
00004984                            
00004984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004984                            
00004984                            
00004984                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004984 4A78 F63A                  		tst.w	($FFFFF63A).w
00004988 6600                       		bne.s	locret_49E6
0000498A 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000498E 6A00                       		bpl.s	locret_49E6
00004990 4DF9 00C0 0004             		lea	($C00004).l,a6
00004996 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000499A 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000499E 0240 001F                  		andi.w	#$1F,d0
000049A2 E548                       		lsl.w	#2,d0
000049A4 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000049AA D0C0                       		adda.w	d0,a0
000049AC 1018                       		move.b	(a0)+,d0
000049AE 6A00                       		bpl.s	loc_4992
000049B0 303C 01FF                  		move.w	#$1FF,d0
000049B4                            
000049B4                            loc_4992:
000049B4 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000049B8 7000                       		moveq	#0,d0
000049BA 1018                       		move.b	(a0)+,d0
000049BC 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000049C0 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000049C6 43F1 0000                  		lea	(a1,d0.w),a1
000049CA 303C 8200                  		move.w	#-$7E00,d0
000049CE 1019                       		move.b	(a1)+,d0
000049D0 3C80                       		move.w	d0,(a6)
000049D2 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049D6 303C 8400                  		move.w	#-$7C00,d0
000049DA 1018                       		move.b	(a0)+,d0
000049DC 3C80                       		move.w	d0,(a6)
000049DE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049E8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049F0 7000                       		moveq	#0,d0
000049F2 1018                       		move.b	(a0)+,d0
000049F4 6B00                       		bmi.s	loc_49E8
000049F6 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049FC D2C0                       		adda.w	d0,a1
000049FE 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004A02 24D9                       		move.l	(a1)+,(a2)+
00004A04 24D9                       		move.l	(a1)+,(a2)+
00004A06 24D9                       		move.l	(a1)+,(a2)+
00004A08                            
00004A08                            locret_49E6:
00004A08 4E75                       		rts	
00004A0A                            ; ===========================================================================
00004A0A                            
00004A0A                            loc_49E8:				; XREF: PalCycle_SS
00004A0A 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004A0E 0C40 008A                  		cmpi.w	#$8A,d0
00004A12 6500                       		bcs.s	loc_49F4
00004A14 5241                       		addq.w	#1,d1
00004A16                            
00004A16                            loc_49F4:
00004A16 C2FC 002A                  		mulu.w	#$2A,d1
00004A1A 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004A20 D2C1                       		adda.w	d1,a1
00004A22 0240 007F                  		andi.w	#$7F,d0
00004A26 0880 0000                  		bclr	#0,d0
00004A2A 6700                       		beq.s	loc_4A18
00004A2C 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A30 24D1                       		move.l	(a1),(a2)+
00004A32 24E9 0004                  		move.l	4(a1),(a2)+
00004A36 24E9 0008                  		move.l	8(a1),(a2)+
00004A3A                            
00004A3A                            loc_4A18:
00004A3A D2FC 000C                  		adda.w	#$C,a1
00004A3E 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A42 0C40 000A                  		cmpi.w	#$A,d0
00004A46 6500                       		bcs.s	loc_4A2E
00004A48 0440 000A                  		subi.w	#$A,d0
00004A4C 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A50                            
00004A50                            loc_4A2E:
00004A50 3200                       		move.w	d0,d1
00004A52 D040                       		add.w	d0,d0
00004A54 D041                       		add.w	d1,d0
00004A56 D2C0                       		adda.w	d0,a1
00004A58 24D9                       		move.l	(a1)+,(a2)+
00004A5A 34D9                       		move.w	(a1)+,(a2)+
00004A5C 4E75                       		rts	
00004A5E                            ; End of function PalCycle_SS
00004A5E                            
00004A5E                            ; ===========================================================================
00004A5E 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A6E                            					; XREF: PalCycle_SS
00004A6E 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A7E 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A8E FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A9E 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004AAE 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004ABE 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004ACE FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004ADE                            		even
00004ADE 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AEC                            					; XREF: PalCycle_SS
00004AEC                            		even
00004AEC                            
00004AEC                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B34                            		even
00004B34                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004C06                            		even
00004C06                            
00004C06                            ; ---------------------------------------------------------------------------
00004C06                            ; Subroutine to	make the special stage background animated
00004C06                            ; ---------------------------------------------------------------------------
00004C06                            
00004C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C06                            
00004C06                            
00004C06                            SS_BGAnimate:				; XREF: SpecialStage
00004C06 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004C0A 6600                       		bne.s	loc_4BF6
00004C0C 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004C12 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C18                            
00004C18                            loc_4BF6:
00004C18 0C40 0008                  		cmpi.w	#8,d0
00004C1C 6400                       		bcc.s	loc_4C4E
00004C1E 0C40 0006                  		cmpi.w	#6,d0
00004C22 6600                       		bne.s	loc_4C10
00004C24 5278 F718                  		addq.w	#1,($FFFFF718).w
00004C28 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C2C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C32                            
00004C32                            loc_4C10:
00004C32 7000                       		moveq	#0,d0
00004C34 3038 F708                  		move.w	($FFFFF708).w,d0
00004C38 4440                       		neg.w	d0
00004C3A 4840                       		swap	d0
00004C3C 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C42 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C46 7609                       		moveq	#9,d3
00004C48                            
00004C48                            loc_4C26:
00004C48 302B 0002                  		move.w	2(a3),d0
00004C4C 6100 DC9E                  		bsr.w	CalcSine
00004C50 7400                       		moveq	#0,d2
00004C52 1419                       		move.b	(a1)+,d2
00004C54 C1C2                       		muls.w	d2,d0
00004C56 E080                       		asr.l	#8,d0
00004C58 36C0                       		move.w	d0,(a3)+
00004C5A 1419                       		move.b	(a1)+,d2
00004C5C 4882                       		ext.w	d2
00004C5E D55B                       		add.w	d2,(a3)+
00004C60 51CB FFE6                  		dbf	d3,loc_4C26
00004C64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C68 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C6E 6000                       		bra.s	loc_4C7E
00004C70                            ; ===========================================================================
00004C70                            
00004C70                            loc_4C4E:				; XREF: SS_BGAnimate
00004C70 0C40 000C                  		cmpi.w	#$C,d0
00004C74 6600                       		bne.s	loc_4C74
00004C76 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C7A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C7E 243C 0001 8000             		move.l	#$18000,d2
00004C84 7206                       		moveq	#6,d1
00004C86                            
00004C86                            loc_4C64:
00004C86 2013                       		move.l	(a3),d0
00004C88 9082                       		sub.l	d2,d0
00004C8A 26C0                       		move.l	d0,(a3)+
00004C8C 0482 0000 2000             		subi.l	#$2000,d2
00004C92 51C9 FFF2                  		dbf	d1,loc_4C64
00004C96                            
00004C96                            loc_4C74:
00004C96 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C9A 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004CA0                            
00004CA0                            loc_4C7E:
00004CA0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004CA4 3038 F718                  		move.w	($FFFFF718).w,d0
00004CA8 4440                       		neg.w	d0
00004CAA 4840                       		swap	d0
00004CAC 7600                       		moveq	#0,d3
00004CAE 161A                       		move.b	(a2)+,d3
00004CB0 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004CB4 4442                       		neg.w	d2
00004CB6 0242 00FF                  		andi.w	#$FF,d2
00004CBA E54A                       		lsl.w	#2,d2
00004CBC                            
00004CBC                            loc_4C9A:
00004CBC 301B                       		move.w	(a3)+,d0
00004CBE 544B                       		addq.w	#2,a3
00004CC0 7200                       		moveq	#0,d1
00004CC2 121A                       		move.b	(a2)+,d1
00004CC4 5341                       		subq.w	#1,d1
00004CC6                            
00004CC6                            loc_4CA4:
00004CC6 2380 2000                  		move.l	d0,(a1,d2.w)
00004CCA 5842                       		addq.w	#4,d2
00004CCC 0242 03FC                  		andi.w	#$3FC,d2
00004CD0 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CD4 51CB FFE6                  		dbf	d3,loc_4C9A
00004CD8 4E75                       		rts	
00004CDA                            ; End of function SS_BGAnimate
00004CDA                            
00004CDA                            ; ===========================================================================
00004CDA 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CE6                            		even
00004CE6 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CEE                            		even
00004CEE 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004D02                            		even
00004D02                            					; XREF: SS_BGAnimate
00004D02                            ; ===========================================================================
00004D02                            
00004D02                            ; ---------------------------------------------------------------------------
00004D02                            ; Continue screen
00004D02                            ; ---------------------------------------------------------------------------
00004D02                            
00004D02                            ContinueScreen:				; XREF: GameModeArray
00004D02 6100 D058                  		bsr.w	Pal_FadeFrom
00004D06 46FC 2700                  		move	#$2700,sr
00004D0A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D0E 0200 00BF                  		andi.b	#$BF,d0
00004D12 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D18 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D1E 3CBC 8004                  		move.w	#$8004,(a6)
00004D22 3CBC 8700                  		move.w	#$8700,(a6)
00004D26 6100 C462                  		bsr.w	ClearScreen
00004D2A 43F8 D000                  		lea	($FFFFD000).w,a1
00004D2E 7000                       		moveq	#0,d0
00004D30 323C 07FF                  		move.w	#$7FF,d1
00004D34                            
00004D34                            Cont_ClrObjRam:
00004D34 22C0                       		move.l	d0,(a1)+
00004D36 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D3A                            
00004D3A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D4A 6100 C5FE                  		bsr.w	NemDec
00004D4E 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D58 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D5E 6100 C5EA                  		bsr.w	NemDec
00004D62 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D6C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D72 6100 C5D6                  		bsr.w	NemDec
00004D76 720A                       		moveq	#10,d1
00004D78 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D7E 7012                       		moveq	#$12,d0
00004D80 6100 D284                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D84 103C 0090                  		move.b	#$90,d0
00004D88 6100 C4D2                  		bsr.w	PlaySound	; play continue	music
00004D8C 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D92 42B8 F700                  		clr.l	($FFFFF700).w
00004D96 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D9E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004DA4 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004DAA 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004DB0 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004DB6 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004DBC 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004DC2 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004DC8 4EB9 0000 0000             		jsr	ObjectsLoad
00004DCE 4EB9 0000 0000             		jsr	BuildSprites
00004DD4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DD8 0000 0040                  		ori.b	#$40,d0
00004DDC 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DE2 6100 CED2                  		bsr.w	Pal_FadeTo
00004DE6                            
00004DE6                            ; ---------------------------------------------------------------------------
00004DE6                            ; Continue screen main loop
00004DE6                            ; ---------------------------------------------------------------------------
00004DE6                            
00004DE6                            Cont_MainLoop:
00004DE6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DEC 6100 DACC                  		bsr.w	DelayProgram
00004DF0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DF6 6400                       		bcc.s	loc_4DF2
00004DF8 46FC 2700                  		move	#$2700,sr
00004DFC 3238 F614                  		move.w	($FFFFF614).w,d1
00004E00 82FC 003C                  		divu.w	#$3C,d1
00004E04 0281 0000 000F             		andi.l	#$F,d1
00004E0A 4EB9 0000 0000             		jsr	ContScrCounter
00004E10 46FC 2300                  		move	#$2300,sr
00004E14                            
00004E14                            loc_4DF2:
00004E14 4EB9 0000 0000             		jsr	ObjectsLoad
00004E1A 4EB9 0000 0000             		jsr	BuildSprites
00004E20 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004E26 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004E28 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E2E 64B6                       		bcc.s	Cont_MainLoop
00004E30 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004E36 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004E3A 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004E40 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004E46 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004E4A 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00004E50 4A78 F614                  		tst.w	($FFFFF614).w
00004E54 6600 FF90                  		bne.w	Cont_MainLoop
00004E58 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00004E5E 4E75                       		rts	
00004E60                            ; ===========================================================================
00004E60                            
00004E60                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E60 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E66 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E6C 7000                       		moveq	#0,d0
00004E6E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E72 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E76 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E7A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E7E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E82 4E75                       		rts	
00004E84                            ; ===========================================================================
00004E84                            
00004E84                            ; ---------------------------------------------------------------------------
00004E84                            ; Object 80 - Continue screen elements
00004E84                            ; ---------------------------------------------------------------------------
00004E84                            
00004E84                            Obj80:					; XREF: Obj_Index
00004E84 7000                       		moveq	#0,d0
00004E86 1028 0024                  		move.b	$24(a0),d0
00004E8A 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E8E 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E92                            ; ===========================================================================
00004E92 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E94 0000                       		dc.w Obj80_Display-Obj80_Index
00004E96 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E98 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E9A                            ; ===========================================================================
00004E9A                            
00004E9A                            Obj80_Main:				; XREF: Obj80_Index
00004E9A 5428 0024                  		addq.b	#2,$24(a0)
00004E9E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004EA6 317C 8500 0002             		move.w	#$8500,2(a0)
00004EAC 117C 0000 0001             		move.b	#0,1(a0)
00004EB2 117C 003C 0019             		move.b	#$3C,$19(a0)
00004EB8 317C 0120 0008             		move.w	#$120,8(a0)
00004EBE 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004EC4 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004ECA                            
00004ECA                            Obj80_Display:				; XREF: Obj80_Index
00004ECA 4EF9 0000 0000             		jmp	DisplaySprite
00004ED0                            ; ===========================================================================
00004ED0                            Obj80_MiniSonicPos:
00004ED0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004EE2 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EEE                            ; ===========================================================================
00004EEE                            
00004EEE                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EEE 2248                       		movea.l	a0,a1
00004EF0 45F9 0000 4ED0             		lea	(Obj80_MiniSonicPos).l,a2
00004EF6 7200                       		moveq	#0,d1
00004EF8 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EFC 5501                       		subq.b	#2,d1
00004EFE 6400                       		bcc.s	loc_4EC4
00004F00 4EF9 0000 0000             		jmp	DeleteObject
00004F06                            ; ===========================================================================
00004F06                            
00004F06                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004F06 7601                       		moveq	#1,d3
00004F08 0C01 000E                  		cmpi.b	#$E,d1
00004F0C 6500                       		bcs.s	loc_4ED0
00004F0E 7600                       		moveq	#0,d3
00004F10 720E                       		moveq	#$E,d1
00004F12                            
00004F12                            loc_4ED0:
00004F12 1401                       		move.b	d1,d2
00004F14 0202 0001                  		andi.b	#1,d2
00004F18                            
00004F18                            Obj80_MiniSonLoop:
00004F18 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004F1C 335A 0008                  		move.w	(a2)+,8(a1)
00004F20 4A02                       		tst.b	d2
00004F22 6700                       		beq.s	loc_4EEA
00004F24 0469 000A 0008             		subi.w	#$A,8(a1)
00004F2A                            
00004F2A                            loc_4EEA:
00004F2A 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004F30 137C 0006 001A             		move.b	#6,$1A(a1)
00004F36 137C 0006 0024             		move.b	#6,$24(a1)
00004F3C 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004F44 337C 8551 0002             		move.w	#$8551,2(a1)
00004F4A 137C 0000 0001             		move.b	#0,1(a1)
00004F50 43E9 0040                  		lea	$40(a1),a1
00004F54 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F58 43E9 FFC0                  		lea	-$40(a1),a1
00004F5C 1343 0028                  		move.b	d3,$28(a1)
00004F60                            
00004F60                            Obj80_ChkType:				; XREF: Obj80_Index
00004F60 4A28 0028                  		tst.b	$28(a0)
00004F64 6700                       		beq.s	loc_4F40
00004F66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F6C 6500                       		bcs.s	loc_4F40
00004F6E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F72 0200 0001                  		andi.b	#1,d0
00004F76 6600                       		bne.s	loc_4F40
00004F78 4A78 D010                  		tst.w	($FFFFD010).w
00004F7C 6600                       		bne.s	Obj80_Delete
00004F7E 4E75                       		rts	
00004F80                            ; ===========================================================================
00004F80                            
00004F80                            loc_4F40:				; XREF: Obj80_ChkType
00004F80 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F84 0200 000F                  		andi.b	#$F,d0
00004F88 6600                       		bne.s	Obj80_Display2
00004F8A 0868 0000 001A             		bchg	#0,$1A(a0)
00004F90                            
00004F90                            Obj80_Display2:
00004F90 4EF9 0000 0000             		jmp	DisplaySprite
00004F96                            ; ===========================================================================
00004F96                            
00004F96                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F96 4EF9 0000 0000             		jmp	DeleteObject
00004F9C                            ; ===========================================================================
00004F9C                            
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            ; Object 81 - Sonic on the continue screen
00004F9C                            ; ---------------------------------------------------------------------------
00004F9C                            
00004F9C                            Obj81:					; XREF: Obj_Index
00004F9C 7000                       		moveq	#0,d0
00004F9E 1028 0024                  		move.b	$24(a0),d0
00004FA2 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004FA6 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004FAA 4EF9 0000 0000             		jmp	DisplaySprite
00004FB0                            ; ===========================================================================
00004FB0 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004FB2 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004FB4 0000                       		dc.w Obj81_Animate-Obj81_Index
00004FB6 0000                       		dc.w Obj81_Run-Obj81_Index
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            Obj81_Main:				; XREF: Obj81_Index
00004FB8 5428 0024                  		addq.b	#2,$24(a0)
00004FBC 317C 00A0 0008             		move.w	#$A0,8(a0)
00004FC2 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004FC8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FD0 317C 0780 0002             		move.w	#$780,2(a0)
00004FD6 117C 0004 0001             		move.b	#4,1(a0)
00004FDC 117C 0002 0018             		move.b	#2,$18(a0)
00004FE2 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004FE8 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FEE                            
00004FEE                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FEE 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FF4 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FF6 5428 0024                  		addq.b	#2,$24(a0)
00004FFA 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FFE 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005006 317C 8500 0002             		move.w	#$8500,2(a0)
0000500C 117C 0000 001C             		move.b	#0,$1C(a0)
00005012 6000                       		bra.s	Obj81_Animate
00005014                            ; ===========================================================================
00005014                            
00005014                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005014 4EB9 0000 0000             		jsr	SpeedToPos
0000501A 4EB9 0000 0000             		jsr	Sonic_Animate
00005020 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005026                            ; ===========================================================================
00005026                            
00005026                            Obj81_Animate:				; XREF: Obj81_Index
00005026 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000502A 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000502C 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005032 4EF9 0000 0000             		jmp	AnimateSprite
00005038                            ; ===========================================================================
00005038                            
00005038                            Obj81_GetUp:				; XREF: Obj81_Animate
00005038 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000503E 5428 0024                  		addq.b	#2,$24(a0)
00005042 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000504A 317C 0780 0002             		move.w	#$780,2(a0)
00005050 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005056 4268 0014                  		clr.w	$14(a0)
0000505A 5168 000C                  		subq.w	#8,$C(a0)
0000505E 103C 00E0                  		move.b	#$E0,d0
00005062 6100 C1FE                  		bsr.w	PlaySound_Special ; fade out music
00005066                            
00005066                            Obj81_Run:				; XREF: Obj81_Index
00005066 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000506C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000506E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005074 6000                       		bra.s	Obj81_ShowRun
00005076                            ; ===========================================================================
00005076                            
00005076                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005076 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000507C                            
0000507C                            Obj81_ShowRun:				; XREF: Obj81_Run
0000507C 4EB9 0000 0000             		jsr	SpeedToPos
00005082 4EB9 0000 0000             		jsr	Sonic_Animate
00005088 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000508E                            ; ===========================================================================
0000508E                            Ani_obj81:
0000508E                            	include "_anim\obj81.asm"
0000508E                            ; ---------------------------------------------------------------------------
0000508E                            ; Animation script - Sonic on the continue screen
0000508E                            ; ---------------------------------------------------------------------------
0000508E 0000                       		dc.w byte_504A-Ani_obj81
00005090 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000509C 00                         		even
0000509C 00                         		even
0000509C                            
0000509C                            ; ---------------------------------------------------------------------------
0000509C                            ; Sprite mappings - Continue screen
0000509C                            ; ---------------------------------------------------------------------------
0000509C                            Map_obj80:
0000509C                            	include "_maps\obj80.asm"
0000509C                            ; ---------------------------------------------------------------------------
0000509C                            ; Sprite mappings - Continue screen
0000509C                            ; ---------------------------------------------------------------------------
0000509C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000050A0 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000050A4 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000050A8 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000050AC 0B                         byte_5066:	dc.b $B
000050AD F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000050B2 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000050B7 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000050BC F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000050C1 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000050C6 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000050CB F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000050D0 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000050D5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000050DA 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000050DF 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000050E4 03                         byte_509E:	dc.b 3
000050E5 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000050EA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050EF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050F4 03                         byte_50AE:	dc.b 3
000050F5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050FA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050FF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005104 03                         byte_50BE:	dc.b 3
00005105 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000510A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000510F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005114 02                         byte_50CE:	dc.b 2
00005115 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000511A 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000511F 01                         byte_50D9:	dc.b 1
00005120 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005125 01                         byte_50DF:	dc.b 1
00005126 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000512C 00                         		even
0000512C 00                         		even
0000512C                            
0000512C                            ; ===========================================================================
0000512C                            ; ---------------------------------------------------------------------------
0000512C                            ; Ending sequence in Green Hill	Zone
0000512C                            ; ---------------------------------------------------------------------------
0000512C                            
0000512C                            EndingSequence:				; XREF: GameModeArray
0000512C 103C 00E4                  		move.b	#$E4,d0
00005130 6100 C130                  		bsr.w	PlaySound_Special ; stop music
00005134 6100 CC26                  		bsr.w	Pal_FadeFrom
00005138 43F8 D000                  		lea	($FFFFD000).w,a1
0000513C 7000                       		moveq	#0,d0
0000513E 323C 07FF                  		move.w	#$7FF,d1
00005142                            
00005142                            End_ClrObjRam:
00005142 22C0                       		move.l	d0,(a1)+
00005144 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005148                            
00005148 43F8 F628                  		lea	($FFFFF628).w,a1
0000514C 7000                       		moveq	#0,d0
0000514E 323C 0015                  		move.w	#$15,d1
00005152                            
00005152                            End_ClrRam:
00005152 22C0                       		move.l	d0,(a1)+
00005154 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005158                            
00005158 43F8 F700                  		lea	($FFFFF700).w,a1
0000515C 7000                       		moveq	#0,d0
0000515E 323C 003F                  		move.w	#$3F,d1
00005162                            
00005162                            End_ClrRam2:
00005162 22C0                       		move.l	d0,(a1)+
00005164 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005168                            
00005168 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000516C 7000                       		moveq	#0,d0
0000516E 323C 0047                  		move.w	#$47,d1
00005172                            
00005172                            End_ClrRam3:
00005172 22C0                       		move.l	d0,(a1)+
00005174 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005178                            
00005178 46FC 2700                  		move	#$2700,sr
0000517C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005180 33C0 00C0 0004             		move.w	d0,($C00004).l
00005186 6100 C002                  		bsr.w	ClearScreen
0000518A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005190 3CBC 8B03                  		move.w	#$8B03,(a6)
00005194 3CBC 8230                  		move.w	#$8230,(a6)
00005198 3CBC 8407                  		move.w	#$8407,(a6)
0000519C 3CBC 857C                  		move.w	#$857C,(a6)
000051A0 3CBC 9001                  		move.w	#$9001,(a6)
000051A4 3CBC 8004                  		move.w	#$8004,(a6)
000051A8 3CBC 8720                  		move.w	#$8720,(a6)
000051AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000051B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000051B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000051BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000051C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000051C8 6700                       		beq.s	End_LoadData	; if yes, branch
000051CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000051D0                            
000051D0                            End_LoadData:
000051D0 701C                       		moveq	#$1C,d0
000051D2 6100 C422                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000051D6 4EB9 0000 0000             		jsr	Hud_Base
000051DC 6100 0000                  		bsr.w	LevelSizeLoad
000051E0 6100 0000                  		bsr.w	DeformBgLayer
000051E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000051EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000051EE 6100 0000                  		bsr.w	LoadTilesFromStart
000051F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051FA 46FC 2300                  		move	#$2300,sr
000051FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005204 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005208 6100 C59C                  		bsr.w	KosDec
0000520C 7003                       		moveq	#3,d0
0000520E 6100 CDF6                  		bsr.w	PalLoad1	; load Sonic's pallet
00005212 303C 008B                  		move.w	#$8B,d0
00005216 6100 C044                  		bsr.w	PlaySound	; play ending sequence music
0000521A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005220 6700                       		beq.s	End_LoadSonic	; if not, branch
00005222 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005228                            
00005228                            End_LoadSonic:
00005228 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000522E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005234 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000523A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005240 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005246 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000524C 4EB9 0000 0000             		jsr	ObjPosLoad
00005252 4EB9 0000 0000             		jsr	ObjectsLoad
00005258 4EB9 0000 0000             		jsr	BuildSprites
0000525E 7000                       		moveq	#0,d0
00005260 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005264 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005268 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000526C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005270 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005274 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005278 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000527C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005280 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005284 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005288 6100 EE14                  		bsr.w	OscillateNumInit
0000528C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005292 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005298 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000529E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000052A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052AA 6100 D60E                  		bsr.w	DelayProgram
000052AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052B2 0000 0040                  		ori.b	#$40,d0
000052B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000052BC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000052C2 6100 C9F2                  		bsr.w	Pal_FadeTo
000052C6                            
000052C6                            ; ---------------------------------------------------------------------------
000052C6                            ; Main ending sequence loop
000052C6                            ; ---------------------------------------------------------------------------
000052C6                            
000052C6                            End_MainLoop:
000052C6 6100 BFA6                  		bsr.w	PauseGame
000052CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052D0 6100 D5E8                  		bsr.w	DelayProgram
000052D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052D8 6100 0000                  		bsr.w	End_MoveSonic
000052DC 4EB9 0000 0000             		jsr	ObjectsLoad
000052E2 6100 0000                  		bsr.w	DeformBgLayer
000052E6 4EB9 0000 0000             		jsr	BuildSprites
000052EC 4EB9 0000 0000             		jsr	ObjPosLoad
000052F2 6100 C552                  		bsr.w	PalCycle_Load
000052F6 6100 EDFC                  		bsr.w	OscillateNumDo
000052FA 6100 EE88                  		bsr.w	ChangeRingFrame
000052FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005304 6700                       		beq.s	loc_52DA	; if yes, branch
00005306 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000530C 103C 0091                  		move.b	#$91,d0
00005310 6100 BF50                  		bsr.w	PlaySound_Special ; play credits music
00005314 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000531A 4E75                       		rts	
0000531C                            ; ===========================================================================
0000531C                            
0000531C                            loc_52DA:
0000531C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005320 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005324                            
00005324 4278 FE02                  		clr.w	($FFFFFE02).w
00005328 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000532E 4278 F794                  		clr.w	($FFFFF794).w
00005332                            
00005332                            End_AllEmlds:				; XREF: loc_5334
00005332 6100 BF3A                  		bsr.w	PauseGame
00005336 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000533C 6100 D57C                  		bsr.w	DelayProgram
00005340 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005344 6100 0000                  		bsr.w	End_MoveSonic
00005348 4EB9 0000 0000             		jsr	ObjectsLoad
0000534E 6100 0000                  		bsr.w	DeformBgLayer
00005352 4EB9 0000 0000             		jsr	BuildSprites
00005358 4EB9 0000 0000             		jsr	ObjPosLoad
0000535E 6100 ED94                  		bsr.w	OscillateNumDo
00005362 6100 EE20                  		bsr.w	ChangeRingFrame
00005366 5378 F794                  		subq.w	#1,($FFFFF794).w
0000536A 6A00                       		bpl.s	loc_5334
0000536C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005372 6100 CB32                  		bsr.w	Pal_ToWhite
00005376                            
00005376                            loc_5334:
00005376 4A78 FE02                  		tst.w	($FFFFFE02).w
0000537A 6700 FFB6                  		beq.w	End_AllEmlds
0000537E 4278 FE02                  		clr.w	($FFFFFE02).w
00005382 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005388 4BF9 00C0 0004             		lea	($C00004).l,a5
0000538E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005394 47F8 F700                  		lea	($FFFFF700).w,a3
00005398 49F8 A400                  		lea	($FFFFA400).w,a4
0000539C 343C 4000                  		move.w	#$4000,d2
000053A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000053A4 7013                       		moveq	#$13,d0
000053A6 6100 CC5E                  		bsr.w	PalLoad1	; load ending pallet
000053AA 6100 CA2E                  		bsr.w	Pal_MakeWhite
000053AE 6000 FF16                  		bra.w	End_MainLoop
000053B2                            
000053B2                            ; ---------------------------------------------------------------------------
000053B2                            ; Subroutine controlling Sonic on the ending sequence
000053B2                            ; ---------------------------------------------------------------------------
000053B2                            
000053B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053B2                            
000053B2                            
000053B2                            End_MoveSonic:				; XREF: End_MainLoop
000053B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000053B6 6600                       		bne.s	End_MoveSonic2
000053B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000053BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000053C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000053CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000053D0 4E75                       		rts	
000053D2                            ; ===========================================================================
000053D2                            
000053D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000053D2 5500                       		subq.b	#2,d0
000053D4 6600                       		bne.s	End_MoveSonic3
000053D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000053DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000053DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053E2 7000                       		moveq	#0,d0
000053E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000053E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000053F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005402 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005408 4E75                       		rts	
0000540A                            ; ===========================================================================
0000540A                            
0000540A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000540A 5500                       		subq.b	#2,d0
0000540C 6600                       		bne.s	End_MoveSonExit
0000540E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005412 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005418 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000541E 4278 D024                  		clr.w	($FFFFD024).w
00005422                            
00005422                            End_MoveSonExit:
00005422 4E75                       		rts	
00005424                            ; End of function End_MoveSonic
00005424                            
00005424                            ; ===========================================================================
00005424                            ; ---------------------------------------------------------------------------
00005424                            ; Object 87 - Sonic on ending sequence
00005424                            ; ---------------------------------------------------------------------------
00005424                            
00005424                            Obj87:					; XREF: Obj_Index
00005424 7000                       		moveq	#0,d0
00005426 1028 0025                  		move.b	$25(a0),d0
0000542A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000542E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005432 4EF9 0000 0000             		jmp	DisplaySprite
00005438                            ; ===========================================================================
00005438 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000543C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005440 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005444 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005448 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000544C                            ; ===========================================================================
0000544C                            
0000544C                            Obj87_Main:				; XREF: Obj87_Index
0000544C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005452 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005454 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000545A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005460 4E75                       		rts	
00005462                            ; ===========================================================================
00005462                            
00005462                            Obj87_Main2:				; XREF: Obj87_Main
00005462 5428 0025                  		addq.b	#2,$25(a0)
00005466 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000546E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005474 117C 0004 0001             		move.b	#4,1(a0)
0000547A 4228 0022                  		clr.b	$22(a0)
0000547E 117C 0002 0018             		move.b	#2,$18(a0)
00005484 117C 0000 001A             		move.b	#0,$1A(a0)
0000548A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005490                            
00005490                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005490 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005494 6600                       		bne.s	Obj87_Wait
00005496 5428 0025                  		addq.b	#2,$25(a0)
0000549A 317C 0001 001C             		move.w	#1,$1C(a0)
000054A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000054A6                            
000054A6                            Obj87_Wait:
000054A6 4E75                       		rts	
000054A8                            ; ===========================================================================
000054A8                            
000054A8                            Obj87_LookUp:				; XREF: Obj87_Index
000054A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000054B0 6600                       		bne.s	locret_5480
000054B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000054B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000054BE 5428 0025                  		addq.b	#2,$25(a0)
000054C2                            
000054C2                            locret_5480:
000054C2 4E75                       		rts	
000054C4                            ; ===========================================================================
000054C4                            
000054C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000054C4 5368 0030                  		subq.w	#1,$30(a0)
000054C8 6600                       		bne.s	Obj87_Wait2
000054CA 43F8 D400                  		lea	($FFFFD400).w,a1
000054CE 323C 00FF                  		move.w	#$FF,d1
000054D2                            
000054D2                            Obj87_ClrLoop:
000054D2 4299                       		clr.l	(a1)+
000054D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000054D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000054DE 5428 0025                  		addq.b	#2,$25(a0)
000054E2 117C 0001 001C             		move.b	#1,$1C(a0)
000054E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000054EE                            
000054EE                            Obj87_Wait2:
000054EE 4E75                       		rts	
000054F0                            ; ===========================================================================
000054F0                            
000054F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054F0 5368 0030                  		subq.w	#1,$30(a0)
000054F4 6600                       		bne.s	Obj87_Wait3
000054F6 5428 0025                  		addq.b	#2,$25(a0)
000054FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005500 117C 0002 001C             		move.b	#2,$1C(a0)
00005506 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000550C                            
0000550C                            Obj87_Wait3:
0000550C 4E75                       		rts	
0000550E                            ; ===========================================================================
0000550E                            
0000550E                            Obj87_Animate:				; XREF: Obj87_Index
0000550E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005514 4EF9 0000 0000             		jmp	AnimateSprite
0000551A                            ; ===========================================================================
0000551A                            
0000551A                            Obj87_Leap:				; XREF: Obj87_Index
0000551A 5368 0030                  		subq.w	#1,$30(a0)
0000551E 6600                       		bne.s	Obj87_Wait4
00005520 5428 0025                  		addq.b	#2,$25(a0)
00005524 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000552C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005532 117C 0004 0001             		move.b	#4,1(a0)
00005538 4228 0022                  		clr.b	$22(a0)
0000553C 117C 0002 0018             		move.b	#2,$18(a0)
00005542 117C 0005 001A             		move.b	#5,$1A(a0)
00005548 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000554E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005554 60B8                       		bra.s	Obj87_Animate
00005556                            ; ===========================================================================
00005556                            
00005556                            Obj87_Wait4:				; XREF: Obj87_Leap
00005556 4E75                       		rts	
00005558                            ; ===========================================================================
00005558                            Ani_obj87:
00005558                            	include "_anim\obj87.asm"
00005558                            ; ---------------------------------------------------------------------------
00005558                            ; Animation script - Sonic on the ending sequence
00005558                            ; ---------------------------------------------------------------------------
00005558 0000                       		dc.w byte_551C-Ani_obj87
0000555A 0000                       		dc.w byte_552A-Ani_obj87
0000555C 0000                       		dc.w byte_5534-Ani_obj87
0000555E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000556C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005576 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000557E                            		even
0000557E                            		even
0000557E                            
0000557E                            ; ===========================================================================
0000557E                            ; ---------------------------------------------------------------------------
0000557E                            ; Object 88 - chaos emeralds on	the ending sequence
0000557E                            ; ---------------------------------------------------------------------------
0000557E                            
0000557E                            Obj88:					; XREF: Obj_Index
0000557E 7000                       		moveq	#0,d0
00005580 1028 0024                  		move.b	$24(a0),d0
00005584 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005588 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000558C 4EF9 0000 0000             		jmp	DisplaySprite
00005592                            ; ===========================================================================
00005592 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005594 0000                       		dc.w Obj88_Move-Obj88_Index
00005596                            ; ===========================================================================
00005596                            
00005596                            Obj88_Main:				; XREF: Obj88_Index
00005596 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000559C 6700                       		beq.s	Obj88_Main2
0000559E 588F                       		addq.l	#4,sp
000055A0 4E75                       		rts	
000055A2                            ; ===========================================================================
000055A2                            
000055A2                            Obj88_Main2:				; XREF: Obj88_Main
000055A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000055A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000055AE 2248                       		movea.l	a0,a1
000055B0 7600                       		moveq	#0,d3
000055B2 7401                       		moveq	#1,d2
000055B4 7205                       		moveq	#5,d1
000055B6                            
000055B6                            Obj88_MainLoop:
000055B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000055BA 5429 0024                  		addq.b	#2,$24(a1)
000055BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000055C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000055CC 137C 0004 0001             		move.b	#4,1(a1)
000055D2 137C 0001 0018             		move.b	#1,$18(a1)
000055D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000055DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000055E4 1342 001C                  		move.b	d2,$1C(a1)
000055E8 1342 001A                  		move.b	d2,$1A(a1)
000055EC 5202                       		addq.b	#1,d2
000055EE 1343 0026                  		move.b	d3,$26(a1)
000055F2 0603 002A                  		addi.b	#$2A,d3
000055F6 43E9 0040                  		lea	$40(a1),a1
000055FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055FE                            
000055FE                            Obj88_Move:				; XREF: Obj88_Index
000055FE 3028 003E                  		move.w	$3E(a0),d0
00005602 D168 0026                  		add.w	d0,$26(a0)
00005606 1028 0026                  		move.b	$26(a0),d0
0000560A 4EB9 0000 28EC             		jsr	(CalcSine).l
00005610 7800                       		moveq	#0,d4
00005612 1828 003C                  		move.b	$3C(a0),d4
00005616 C3C4                       		muls.w	d4,d1
00005618 E081                       		asr.l	#8,d1
0000561A C1C4                       		muls.w	d4,d0
0000561C E080                       		asr.l	#8,d0
0000561E D268 0038                  		add.w	$38(a0),d1
00005622 D068 003A                  		add.w	$3A(a0),d0
00005626 3141 0008                  		move.w	d1,8(a0)
0000562A 3140 000C                  		move.w	d0,$C(a0)
0000562E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005634 6700                       		beq.s	loc_55FA
00005636 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000563C                            
0000563C                            loc_55FA:
0000563C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005642 6700                       		beq.s	loc_5608
00005644 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000564A                            
0000564A                            loc_5608:
0000564A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005650 6700                       		beq.s	locret_5614
00005652 5368 003A                  		subq.w	#1,$3A(a0)
00005656                            
00005656                            locret_5614:
00005656 4E75                       		rts	
00005658                            ; ===========================================================================
00005658                            ; ---------------------------------------------------------------------------
00005658                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005658                            ; ---------------------------------------------------------------------------
00005658                            
00005658                            Obj89:					; XREF: Obj_Index
00005658 7000                       		moveq	#0,d0
0000565A 1028 0024                  		move.b	$24(a0),d0
0000565E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005662 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005666                            ; ===========================================================================
00005666 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005668 0000                       		dc.w Obj89_Move-Obj89_Index
0000566A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000566C                            ; ===========================================================================
0000566C                            
0000566C                            Obj89_Main:				; XREF: Obj89_Index
0000566C 5428 0024                  		addq.b	#2,$24(a0)
00005670 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005676 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000567C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005684 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000568A 117C 0000 0001             		move.b	#0,1(a0)
00005690 117C 0000 0018             		move.b	#0,$18(a0)
00005696                            
00005696                            Obj89_Move:				; XREF: Obj89_Index
00005696 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000569C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000569E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000056A4 4EF9 0000 0000             		jmp	DisplaySprite
000056AA                            ; ===========================================================================
000056AA                            
000056AA                            Obj89_Delay:				; XREF: Obj89_Move
000056AA 5428 0024                  		addq.b	#2,$24(a0)
000056AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000056B4                            
000056B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000056B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000056B8 6A00                       		bpl.s	Obj89_Display
000056BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000056C0                            
000056C0                            Obj89_Display:
000056C0 6000 0000                  		bra.w	DisplaySprite
000056C4                            ; ===========================================================================
000056C4                            ; ---------------------------------------------------------------------------
000056C4                            ; Sprite mappings - Sonic on the ending	sequence
000056C4                            ; ---------------------------------------------------------------------------
000056C4                            Map_obj87:
000056C4                            	include "_maps\obj87.asm"
000056C4                            ; ---------------------------------------------------------------------------
000056C4                            ; Sprite mappings - Sonic on the ending	sequence
000056C4                            ; ---------------------------------------------------------------------------
000056C4 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000056C8 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000056CC 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000056D0 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000056D4 02                         byte_5690:	dc.b 2
000056D5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000056DA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056DF 03                         byte_569B:	dc.b 3
000056E0 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000056E5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056EA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056EF 02                         byte_56AB:	dc.b 2
000056F0 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056F5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056FA 02                         byte_56B6:	dc.b 2
000056FB EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005700 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005705 02                         byte_56C1:	dc.b 2
00005706 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000570B FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005710 03                         byte_56CC:	dc.b 3
00005711 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005716 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000571B 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005720 07                         byte_56DC:	dc.b 7
00005721 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005726 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000572B BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005730 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005735 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000573A E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000573F EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005744 18                         byte_5700:	dc.b $18
00005745 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000574A 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000574F 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005754 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005759 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000575E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005763 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005768 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000576D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005772 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005777 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000577C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005781 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005786 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000578B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005790 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005795 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000579A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000579F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000057A4 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000057A9 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000057AE E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000057B3 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000057B8 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000057BE 00                         		even
000057BE 00                         		even
000057BE                            
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            ; Sprite mappings - chaos emeralds on the ending sequence
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            Map_obj88:
000057BE                            	include "_maps\obj88.asm"
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            ; Sprite mappings - chaos emeralds on the ending sequence
000057BE                            ; ---------------------------------------------------------------------------
000057BE 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000057C2 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000057C6 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000057CA 0000                       		dc.w byte_57AC-Map_obj88
000057CC 01                         byte_5788:	dc.b 1
000057CD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000057D2 01                         byte_578E:	dc.b 1
000057D3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000057D8 01                         byte_5794:	dc.b 1
000057D9 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000057DE 01                         byte_579A:	dc.b 1
000057DF F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000057E4 01                         byte_57A0:	dc.b 1
000057E5 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057EA 01                         byte_57A6:	dc.b 1
000057EB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057F0 01                         byte_57AC:	dc.b 1
000057F1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057F6                            		even
000057F6                            		even
000057F6                            
000057F6                            ; ---------------------------------------------------------------------------
000057F6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057F6                            ; ---------------------------------------------------------------------------
000057F6                            Map_obj89:
000057F6                            	include "_maps\obj89.asm"
000057F6                            ; ---------------------------------------------------------------------------
000057F6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057F6                            ; ---------------------------------------------------------------------------
000057F6 0000                       		dc.w byte_57B4-Map_obj89
000057F8 03                         byte_57B4:	dc.b 3
000057F9 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057FE F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005803 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005808                            		even
00005808                            		even
00005808                            
00005808                            ; ===========================================================================
00005808                            ; ---------------------------------------------------------------------------
00005808                            ; Credits ending sequence
00005808                            ; ---------------------------------------------------------------------------
00005808                            
00005808                            Credits:				; XREF: GameModeArray
00005808 6100 BCDE                  		bsr.w	ClearPLC
0000580C 6100 C54E                  		bsr.w	Pal_FadeFrom
00005810 4DF9 00C0 0004             		lea	($C00004).l,a6
00005816 3CBC 8004                  		move.w	#$8004,(a6)
0000581A 3CBC 8230                  		move.w	#$8230,(a6)
0000581E 3CBC 8407                  		move.w	#$8407,(a6)
00005822 3CBC 9001                  		move.w	#$9001,(a6)
00005826 3CBC 9200                  		move.w	#$9200,(a6)
0000582A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000582E 3CBC 8720                  		move.w	#$8720,(a6)
00005832 4238 F64E                  		clr.b	($FFFFF64E).w
00005836 6100 B952                  		bsr.w	ClearScreen
0000583A 43F8 D000                  		lea	($FFFFD000).w,a1
0000583E 7000                       		moveq	#0,d0
00005840 323C 07FF                  		move.w	#$7FF,d1
00005844                            
00005844                            Cred_ClrObjRam:
00005844 22C0                       		move.l	d0,(a1)+
00005846 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000584A                            
0000584A 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005854 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000585A 6100 BAEE                  		bsr.w	NemDec
0000585E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005862 7000                       		moveq	#0,d0
00005864 323C 001F                  		move.w	#$1F,d1
00005868                            
00005868                            Cred_ClrPallet:
00005868 22C0                       		move.l	d0,(a1)+
0000586A 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000586E                            
0000586E 7014                       		moveq	#$14,d0
00005870 6100 C794                  		bsr.w	PalLoad1	; load Sonic's pallet
00005874 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000587A 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005880 4EB9 0000 0000             		jsr	ObjectsLoad
00005886 4EB9 0000 0000             		jsr	BuildSprites
0000588C 6100 0000                  		bsr.w	EndingDemoLoad
00005890 7000                       		moveq	#0,d0
00005892 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005896 E948                       		lsl.w	#4,d0
00005898 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000589E 45F2 0000                  		lea	(a2,d0.w),a2
000058A2 7000                       		moveq	#0,d0
000058A4 1012                       		move.b	(a2),d0
000058A6 6700                       		beq.s	loc_5862
000058A8 6100 BBE0                  		bsr.w	LoadPLC		; load level patterns
000058AC                            
000058AC                            loc_5862:
000058AC 7001                       		moveq	#1,d0
000058AE 6100 BBDA                  		bsr.w	LoadPLC		; load standard	level patterns
000058B2 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000058B8 6100 C3FC                  		bsr.w	Pal_FadeTo
000058BC                            
000058BC                            Cred_WaitLoop:
000058BC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000058C2 6100 CFF6                  		bsr.w	DelayProgram
000058C6 6100 BC2E                  		bsr.w	RunPLC_RAM
000058CA 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000058CE 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000058D0 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000058D4 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000058D6 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000058DC 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000058E0 4E75                       		rts	
000058E2                            
000058E2                            ; ---------------------------------------------------------------------------
000058E2                            ; Ending sequence demo loading subroutine
000058E2                            ; ---------------------------------------------------------------------------
000058E2                            
000058E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058E2                            
000058E2                            
000058E2                            EndingDemoLoad:				; XREF: Credits
000058E2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000058E6 0240 000F                  		andi.w	#$F,d0
000058EA D040                       		add.w	d0,d0
000058EC 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058F0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058F4 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058F8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058FE 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005900 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005906 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000590C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005912 7000                       		moveq	#0,d0
00005914 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005918 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000591C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005920 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005924 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000592A 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000592C 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005932 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005936 303C 0008                  		move.w	#8,d0
0000593A                            
0000593A                            EndDemo_LampLoad:
0000593A 24D9                       		move.l	(a1)+,(a2)+
0000593C 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005940                            
00005940                            EndDemo_Exit:
00005940 4E75                       		rts	
00005942                            ; End of function EndingDemoLoad
00005942                            
00005942                            ; ===========================================================================
00005942                            ; ---------------------------------------------------------------------------
00005942                            ; Levels used in the end sequence demos
00005942                            ; ---------------------------------------------------------------------------
00005942                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005952                            
00005952                            ; ---------------------------------------------------------------------------
00005952                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005952                            ; ---------------------------------------------------------------------------
00005952                            EndDemo_LampVar:
00005952 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005954 0A00 062C 000D             		dc.w $A00, $62C, $D
0000595A 0000 0000                  		dc.l 0
0000595E 0000                       		dc.b 0,	0
00005960 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005974 0101                       		dc.b 1,	1
00005976                            ; ===========================================================================
00005976                            ; ---------------------------------------------------------------------------
00005976                            ; "TRY AGAIN" and "END"	screens
00005976                            ; ---------------------------------------------------------------------------
00005976                            
00005976                            TryAgainEnd:				; XREF: Credits
00005976 6100 BB70                  		bsr.w	ClearPLC
0000597A 6100 C3E0                  		bsr.w	Pal_FadeFrom
0000597E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005984 3CBC 8004                  		move.w	#$8004,(a6)
00005988 3CBC 8230                  		move.w	#$8230,(a6)
0000598C 3CBC 8407                  		move.w	#$8407,(a6)
00005990 3CBC 9001                  		move.w	#$9001,(a6)
00005994 3CBC 9200                  		move.w	#$9200,(a6)
00005998 3CBC 8B03                  		move.w	#$8B03,(a6)
0000599C 3CBC 8720                  		move.w	#$8720,(a6)
000059A0 4238 F64E                  		clr.b	($FFFFF64E).w
000059A4 6100 B7E4                  		bsr.w	ClearScreen
000059A8 43F8 D000                  		lea	($FFFFD000).w,a1
000059AC 7000                       		moveq	#0,d0
000059AE 323C 07FF                  		move.w	#$7FF,d1
000059B2                            
000059B2                            TryAg_ClrObjRam:
000059B2 22C0                       		move.l	d0,(a1)+
000059B4 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000059B8                            
000059B8 701D                       		moveq	#$1D,d0
000059BA 6100 BC3A                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000059BE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000059C2 7000                       		moveq	#0,d0
000059C4 323C 001F                  		move.w	#$1F,d1
000059C8                            
000059C8                            TryAg_ClrPallet:
000059C8 22C0                       		move.l	d0,(a1)+
000059CA 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000059CE                            
000059CE 7013                       		moveq	#$13,d0
000059D0 6100 C634                  		bsr.w	PalLoad1	; load ending pallet
000059D4 4278 FBC0                  		clr.w	($FFFFFBC0).w
000059D8 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000059DE 4EB9 0000 0000             		jsr	ObjectsLoad
000059E4 4EB9 0000 0000             		jsr	BuildSprites
000059EA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059F0 6100 C2C4                  		bsr.w	Pal_FadeTo
000059F4                            
000059F4                            ; ---------------------------------------------------------------------------
000059F4                            ; "TRY AGAIN" and "END"	screen main loop
000059F4                            ; ---------------------------------------------------------------------------
000059F4                            TryAg_MainLoop:
000059F4 6100 B878                  		bsr.w	PauseGame
000059F8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059FE 6100 CEBA                  		bsr.w	DelayProgram
00005A02 4EB9 0000 0000             		jsr	ObjectsLoad
00005A08 4EB9 0000 0000             		jsr	BuildSprites
00005A0E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005A14 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005A16 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005A1A 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005A1C 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005A22 67D0                       		beq.s	TryAg_MainLoop
00005A24                            
00005A24                            TryAg_Exit:
00005A24 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005A2A 4E75                       		rts	
00005A2C                            
00005A2C                            ; ===========================================================================
00005A2C                            ; ---------------------------------------------------------------------------
00005A2C                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005A2C                            ; ---------------------------------------------------------------------------
00005A2C                            
00005A2C                            Obj8B:					; XREF: Obj_Index
00005A2C 7000                       		moveq	#0,d0
00005A2E 1028 0024                  		move.b	$24(a0),d0
00005A32 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005A36 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005A3A 4EF9 0000 0000             		jmp	DisplaySprite
00005A40                            ; ===========================================================================
00005A40 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005A42 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005A44 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005A46 0000                       		dc.w loc_5A8E-Obj8B_Index
00005A48                            ; ===========================================================================
00005A48                            
00005A48                            Obj8B_Main:				; XREF: Obj8B_Index
00005A48 5428 0024                  		addq.b	#2,$24(a0)
00005A4C 317C 0120 0008             		move.w	#$120,8(a0)
00005A52 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A58 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A60 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A66 117C 0000 0001             		move.b	#0,1(a0)
00005A6C 117C 0002 0018             		move.b	#2,$18(a0)
00005A72 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A78 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005A7E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A84 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A86 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005A8C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A92 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A98 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A9E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005AA4                            
00005AA4                            Obj8B_Animate:				; XREF: Obj8B_Index
00005AA4 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005AAA 4EF9 0000 0000             		jmp	AnimateSprite
00005AB0                            ; ===========================================================================
00005AB0                            
00005AB0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005AB0 5428 0024                  		addq.b	#2,$24(a0)
00005AB4 7002                       		moveq	#2,d0
00005AB6 0828 0000 001C             		btst	#0,$1C(a0)
00005ABC 6700                       		beq.s	loc_5A6A
00005ABE 4440                       		neg.w	d0
00005AC0                            
00005AC0                            loc_5A6A:
00005AC0 43F8 D800                  		lea	($FFFFD800).w,a1
00005AC4 7205                       		moveq	#5,d1
00005AC6                            
00005AC6                            loc_5A70:
00005AC6 1340 003E                  		move.b	d0,$3E(a1)
00005ACA 3400                       		move.w	d0,d2
00005ACC E742                       		asl.w	#3,d2
00005ACE D529 0026                  		add.b	d2,$26(a1)
00005AD2 43E9 0040                  		lea	$40(a1),a1
00005AD6 51C9 FFEE                  		dbf	d1,loc_5A70
00005ADA 5228 001A                  		addq.b	#1,$1A(a0)
00005ADE 317C 0070 0030             		move.w	#112,$30(a0)
00005AE4                            
00005AE4                            loc_5A8E:				; XREF: Obj8B_Index
00005AE4 5368 0030                  		subq.w	#1,$30(a0)
00005AE8 6A00                       		bpl.s	locret_5AA0
00005AEA 0868 0000 001C             		bchg	#0,$1C(a0)
00005AF0 117C 0002 0024             		move.b	#2,$24(a0)
00005AF6                            
00005AF6                            locret_5AA0:
00005AF6 4E75                       		rts	
00005AF8                            ; ===========================================================================
00005AF8                            Ani_obj8B:
00005AF8                            	include "_anim\obj8B.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005AFA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AFC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005AFE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005B02 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005B06 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005B18                            		even
00005B18                            		even
00005B18                            
00005B18                            ; ===========================================================================
00005B18                            ; ---------------------------------------------------------------------------
00005B18                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005B18                            ; ---------------------------------------------------------------------------
00005B18                            
00005B18                            Obj8C:					; XREF: Obj_Index
00005B18 7000                       		moveq	#0,d0
00005B1A 1028 0024                  		move.b	$24(a0),d0
00005B1E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005B22 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005B26 4EF9 0000 0000             		jmp	DisplaySprite
00005B2C                            ; ===========================================================================
00005B2C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005B2E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005B30                            ; ===========================================================================
00005B30                            
00005B30                            Obj8C_Main:				; XREF: Obj8C_Index
00005B30 2248                       		movea.l	a0,a1
00005B32 7400                       		moveq	#0,d2
00005B34 7600                       		moveq	#0,d3
00005B36 7205                       		moveq	#5,d1
00005B38 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005B3C                            
00005B3C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005B3C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005B40 5429 0024                  		addq.b	#2,$24(a1)
00005B44 237C 0000 57BE 0004        		move.l	#Map_obj88,4(a1)
00005B4C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005B52 137C 0000 0001             		move.b	#0,1(a1)
00005B58 137C 0001 0018             		move.b	#1,$18(a1)
00005B5E 337C 0104 0008             		move.w	#$104,8(a1)
00005B64 337C 0120 0038             		move.w	#$120,$38(a1)
00005B6A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B70 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B76 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B7C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B80                            
00005B80                            Obj8C_ChkEms:
00005B80 7000                       		moveq	#0,d0
00005B82 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B86 5340                       		subq.w	#1,d0
00005B88 6500                       		bcs.s	loc_5B42
00005B8A                            
00005B8A                            Obj8C_ChkEmLoop:
00005B8A B433 0000                  		cmp.b	(a3,d0.w),d2
00005B8E 6600                       		bne.s	loc_5B3E
00005B90 5202                       		addq.b	#1,d2
00005B92 60EC                       		bra.s	Obj8C_ChkEms
00005B94                            ; ===========================================================================
00005B94                            
00005B94                            loc_5B3E:
00005B94 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B98                            
00005B98                            loc_5B42:
00005B98 1342 001A                  		move.b	d2,$1A(a1)
00005B9C 5229 001A                  		addq.b	#1,$1A(a1)
00005BA0 5202                       		addq.b	#1,d2
00005BA2 137C 0080 0026             		move.b	#$80,$26(a1)
00005BA8 1343 001E                  		move.b	d3,$1E(a1)
00005BAC 1343 001F                  		move.b	d3,$1F(a1)
00005BB0 0643 000A                  		addi.w	#$A,d3
00005BB4 43E9 0040                  		lea	$40(a1),a1
00005BB8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005BBC                            
00005BBC                            Obj8C_Move:				; XREF: Obj8C_Index
00005BBC 4A68 003E                  		tst.w	$3E(a0)
00005BC0 6700                       		beq.s	locret_5BBA
00005BC2 4A28 001E                  		tst.b	$1E(a0)
00005BC6 6700                       		beq.s	loc_5B78
00005BC8 5328 001E                  		subq.b	#1,$1E(a0)
00005BCC 6600                       		bne.s	loc_5B80
00005BCE                            
00005BCE                            loc_5B78:
00005BCE 3028 003E                  		move.w	$3E(a0),d0
00005BD2 D168 0026                  		add.w	d0,$26(a0)
00005BD6                            
00005BD6                            loc_5B80:
00005BD6 1028 0026                  		move.b	$26(a0),d0
00005BDA 6700                       		beq.s	loc_5B8C
00005BDC 0C00 0080                  		cmpi.b	#$80,d0
00005BE0 6600                       		bne.s	loc_5B96
00005BE2                            
00005BE2                            loc_5B8C:
00005BE2 4268 003E                  		clr.w	$3E(a0)
00005BE6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005BEC                            
00005BEC                            loc_5B96:
00005BEC 4EB9 0000 28EC             		jsr	(CalcSine).l
00005BF2 7800                       		moveq	#0,d4
00005BF4 1828 003C                  		move.b	$3C(a0),d4
00005BF8 C3C4                       		muls.w	d4,d1
00005BFA E081                       		asr.l	#8,d1
00005BFC C1C4                       		muls.w	d4,d0
00005BFE E080                       		asr.l	#8,d0
00005C00 D268 0038                  		add.w	$38(a0),d1
00005C04 D068 003A                  		add.w	$3A(a0),d0
00005C08 3141 0008                  		move.w	d1,8(a0)
00005C0C 3140 000A                  		move.w	d0,$A(a0)
00005C10                            
00005C10                            locret_5BBA:
00005C10 4E75                       		rts	
00005C12                            ; ===========================================================================
00005C12                            ; ---------------------------------------------------------------------------
00005C12                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005C12                            ; ---------------------------------------------------------------------------
00005C12                            Map_obj8B:
00005C12                            	include "_maps\obj8B.asm"
00005C12                            ; ---------------------------------------------------------------------------
00005C12                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005C12                            ; ---------------------------------------------------------------------------
00005C12 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005C16 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005C1A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005C1E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005C22 08                         byte_5BCC:	dc.b 8
00005C23 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005C28 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005C2D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005C32 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005C37 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C3C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C41 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C46 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C4B 08                         byte_5BF5:	dc.b 8
00005C4C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005C51 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005C56 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005C5B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C60 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C65 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C6A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C6F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C74 08                         byte_5C1E:	dc.b 8
00005C75 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C7A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C7F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C84 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C89 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C8E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C93 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C98 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C9D 08                         byte_5C47:	dc.b 8
00005C9E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005CA3 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005CA8 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005CAD F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005CB2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005CB7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005CBC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005CC1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005CC6 0C                         byte_5C70:	dc.b $C
00005CC7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005CCC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005CD1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005CD6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005CDB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005CE0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005CE5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005CEA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005CEF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005CF4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005CF9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CFE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D03 0A                         byte_5CAD:	dc.b $A
00005D04 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005D09 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005D0E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005D13 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005D18 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005D1D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005D22 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D27 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D2C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005D31 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005D36 0A                         byte_5CE0:	dc.b $A
00005D37 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005D3C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005D41 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005D46 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005D4B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005D50 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005D55 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D5A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D5F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D64 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D69 0C                         byte_5D13:	dc.b $C
00005D6A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D6F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D74 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D79 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D7E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D83 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D88 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D8D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D92 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D97 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D9C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005DA1 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005DA6                            		even
00005DA6                            		even
00005DA6                            
00005DA6                            ; ---------------------------------------------------------------------------
00005DA6                            ; Ending sequence demos
00005DA6                            ; ---------------------------------------------------------------------------
00005DA6                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005DD4                            		even
00005DD4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005E14                            		even
00005E14                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005E44                            		even
00005E44                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E74                            		even
00005E74                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E94                            		even
00005E94                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005EB4                            		even
00005EB4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005EE4                            		even
00005EE4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005F14                            		even
00005F14                            
00005F14                            ; ---------------------------------------------------------------------------
00005F14                            ; Subroutine to	load level boundaries and start	locations
00005F14                            ; ---------------------------------------------------------------------------
00005F14                            
00005F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005F14                            
00005F14                            
00005F14                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005F14 7000                       		moveq	#0,d0
00005F16 11C0 F740                  		move.b	d0,($FFFFF740).w
00005F1A 11C0 F741                  		move.b	d0,($FFFFF741).w
00005F1E 11C0 F746                  		move.b	d0,($FFFFF746).w
00005F22 11C0 F748                  		move.b	d0,($FFFFF748).w
00005F26 11C0 F742                  		move.b	d0,($FFFFF742).w
00005F2A 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005F2E ED08                       		lsl.b	#6,d0
00005F30 E848                       		lsr.w	#4,d0
00005F32 3200                       		move.w	d0,d1
00005F34 D040                       		add.w	d0,d0
00005F36 D041                       		add.w	d1,d0
00005F38 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005F3C 3018                       		move.w	(a0)+,d0
00005F3E 31C0 F730                  		move.w	d0,($FFFFF730).w
00005F42 2018                       		move.l	(a0)+,d0
00005F44 21C0 F728                  		move.l	d0,($FFFFF728).w
00005F48 21C0 F720                  		move.l	d0,($FFFFF720).w
00005F4C 2018                       		move.l	(a0)+,d0
00005F4E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005F52 21C0 F724                  		move.l	d0,($FFFFF724).w
00005F56 3038 F728                  		move.w	($FFFFF728).w,d0
00005F5A 0640 0240                  		addi.w	#$240,d0
00005F5E 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F62 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F68 3018                       		move.w	(a0)+,d0
00005F6A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F6E 6000 0000                  		bra.w	LevSz_ChkLamp
00005F72                            ; ===========================================================================
00005F72                            ; ---------------------------------------------------------------------------
00005F72                            ; Level size array and ending start location array
00005F72                            ; ---------------------------------------------------------------------------
00005F72                            LevelSizeArray:	incbin	misc\lvl_size.bin
000060C2                            		even
000060C2                            
000060C2                            EndingStLocArray:
000060C2                            		incbin	misc\sloc_end.bin
000060E2                            		even
000060E2                            
000060E2                            ; ===========================================================================
000060E2                            
000060E2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000060E2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000060E6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000060E8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000060EE 3238 D008                  		move.w	($FFFFD008).w,d1
000060F2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000060F6 6000                       		bra.s	loc_60D0
000060F8                            ; ===========================================================================
000060F8                            
000060F8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000060F8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060FC ED08                       		lsl.b	#6,d0
000060FE E848                       		lsr.w	#4,d0
00006100 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006104 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006108 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000610A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000610E 5340                       		subq.w	#1,d0
00006110 E548                       		lsl.w	#2,d0
00006112 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006116                            
00006116                            LevSz_SonicPos:
00006116 7200                       		moveq	#0,d1
00006118 3219                       		move.w	(a1)+,d1
0000611A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000611E 7000                       		moveq	#0,d0
00006120 3011                       		move.w	(a1),d0
00006122 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006126                            
00006126                            loc_60D0:				; XREF: LevSz_ChkLamp
00006126 0441 00A0                  		subi.w	#$A0,d1
0000612A 6400                       		bcc.s	loc_60D8
0000612C 7200                       		moveq	#0,d1
0000612E                            
0000612E                            loc_60D8:
0000612E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006132 B242                       		cmp.w	d2,d1
00006134 6500                       		bcs.s	loc_60E2
00006136 3202                       		move.w	d2,d1
00006138                            
00006138                            loc_60E2:
00006138 31C1 F700                  		move.w	d1,($FFFFF700).w
0000613C 0440 0060                  		subi.w	#$60,d0
00006140 6400                       		bcc.s	loc_60EE
00006142 7000                       		moveq	#0,d0
00006144                            
00006144                            loc_60EE:
00006144 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006148 6D00                       		blt.s	loc_60F8
0000614A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000614E                            
0000614E                            loc_60F8:
0000614E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006152 6100 0000                  		bsr.w	BgScrollSpeed
00006156 7000                       		moveq	#0,d0
00006158 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000615C E508                       		lsl.b	#2,d0
0000615E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006164 6000 0000                  		bra.w	LevSz_Unk
00006168                            ; ===========================================================================
00006168                            ; ---------------------------------------------------------------------------
00006168                            ; Sonic	start location array
00006168                            ; ---------------------------------------------------------------------------
00006168                            StartLocArray:	incbin	misc\sloc_lev.bin
000061D8                            		even
000061D8                            
000061D8                            ; ---------------------------------------------------------------------------
000061D8                            ; Which	256x256	tiles contain loops or roll-tunnels
000061D8                            ; ---------------------------------------------------------------------------
000061D8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000061D8                            ; loop,	loop, tunnel, tunnel
000061D8                            ; ---------------------------------------------------------------------------
000061D8                            LoopTileNums:	incbin	misc\loopnums.bin
000061F4                            		even
000061F4                            
000061F4                            ; ===========================================================================
000061F4                            
000061F4                            LevSz_Unk:				; XREF: LevelSizeLoad
000061F4 7000                       		moveq	#0,d0
000061F6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000061FA E748                       		lsl.w	#3,d0
000061FC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006200 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006204 24D9                       		move.l	(a1)+,(a2)+
00006206 24D9                       		move.l	(a1)+,(a2)+
00006208 4E75                       		rts	
0000620A                            ; End of function LevelSizeLoad
0000620A                            
0000620A                            ; ===========================================================================
0000620A 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006212 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000621A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006222 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000622A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006232 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000623A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006242                            
00006242                            ; ---------------------------------------------------------------------------
00006242                            ; Subroutine to	set scroll speed of some backgrounds
00006242                            ; ---------------------------------------------------------------------------
00006242                            
00006242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006242                            
00006242                            
00006242                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006242 4A38 FE30                  		tst.b	($FFFFFE30).w
00006246 6600                       		bne.s	loc_6206
00006248 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000624C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006250 31C1 F708                  		move.w	d1,($FFFFF708).w
00006254 31C1 F710                  		move.w	d1,($FFFFF710).w
00006258 31C1 F718                  		move.w	d1,($FFFFF718).w
0000625C                            
0000625C                            loc_6206:
0000625C 7400                       		moveq	#0,d2
0000625E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006262 D442                       		add.w	d2,d2
00006264 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006268 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000626C                            ; End of function BgScrollSpeed
0000626C                            
0000626C                            ; ===========================================================================
0000626C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006270 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006274 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006278 0000                       		dc.w BgScroll_End-BgScroll_Index
0000627A                            ; ===========================================================================
0000627A                            
0000627A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000627A 6000 0000                  		bra.w	Deform_GHZ
0000627E                            ; ===========================================================================
0000627E                            
0000627E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000627E E280                       		asr.l	#1,d0
00006280 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006284 4E75                       		rts	
00006286                            ; ===========================================================================
00006286                            
00006286                            BgScroll_MZ:				; XREF: BgScroll_Index
00006286 4E75                       		rts	
00006288                            ; ===========================================================================
00006288                            
00006288                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006288 E280                       		asr.l	#1,d0
0000628A 0640 00C0                  		addi.w	#$C0,d0
0000628E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006292 4E75                       		rts	
00006294                            ; ===========================================================================
00006294                            
00006294                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006294 E980                       		asl.l	#4,d0
00006296 2400                       		move.l	d0,d2
00006298 E380                       		asl.l	#1,d0
0000629A D082                       		add.l	d2,d0
0000629C E080                       		asr.l	#8,d0
0000629E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000062A2 31C0 F714                  		move.w	d0,($FFFFF714).w
000062A6 4E75                       		rts	
000062A8                            ; ===========================================================================
000062A8                            
000062A8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000062A8 E980                       		asl.l	#4,d0
000062AA E380                       		asl.l	#1,d0
000062AC E080                       		asr.l	#8,d0
000062AE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000062B2 4E75                       		rts	
000062B4                            ; ===========================================================================
000062B4                            
000062B4                            BgScroll_End:				; XREF: BgScroll_Index
000062B4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000062BA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000062C0 4E75                       		rts	
000062C2                            ; ===========================================================================
000062C2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000062C8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000062CE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000062D4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000062DA 4E75                       		rts
000062DC                            
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            ; Background layer deformation subroutines
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            
000062DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062DC                            
000062DC                            
000062DC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000062DC 4A38 F744                  		tst.b	($FFFFF744).w
000062E0 6700                       		beq.s	loc_628E
000062E2 4E75                       		rts	
000062E4                            ; ===========================================================================
000062E4                            
000062E4                            loc_628E:
000062E4 4278 F754                  		clr.w	($FFFFF754).w
000062E8 4278 F756                  		clr.w	($FFFFF756).w
000062EC 4278 F758                  		clr.w	($FFFFF758).w
000062F0 4278 F75A                  		clr.w	($FFFFF75A).w
000062F4 6100 0000                  		bsr.w	ScrollHoriz
000062F8 6100 0000                  		bsr.w	ScrollVertical
000062FC 6100 0000                  		bsr.w	DynScrResizeLoad
00006300 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006306 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000630C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006312 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006318 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000631E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006324 7000                       		moveq	#0,d0
00006326 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000632A D040                       		add.w	d0,d0
0000632C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006330 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006334                            ; End of function DeformBgLayer
00006334                            
00006334                            ; ===========================================================================
00006334                            ; ---------------------------------------------------------------------------
00006334                            ; Offset index for background layer deformation	code
00006334                            ; ---------------------------------------------------------------------------
00006334 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006338 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000633C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006340 0000                       		dc.w Deform_GHZ-Deform_Index
00006342                            ; ---------------------------------------------------------------------------
00006342                            ; Green	Hill Zone background layer deformation code
00006342                            ; ---------------------------------------------------------------------------
00006342                            
00006342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006342                            
00006342                            
00006342                            Deform_GHZ:				; XREF: Deform_Index
00006342 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006346 48C4                       		ext.l	d4
00006348 EB84                       		asl.l	#5,d4
0000634A 2204                       		move.l	d4,d1
0000634C E384                       		asl.l	#1,d4
0000634E D881                       		add.l	d1,d4
00006350 7A00                       		moveq	#0,d5
00006352 6100 0000                  		bsr.w	ScrollBlock1
00006356 6100 0000                  		bsr.w	ScrollBlock4
0000635A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000635E 3038 F704                  		move.w	($FFFFF704).w,d0
00006362 0240 07FF                  		andi.w	#$7FF,d0
00006366 EA48                       		lsr.w	#5,d0
00006368 4440                       		neg.w	d0
0000636A 0640 0026                  		addi.w	#$26,d0
0000636E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006372 3800                       		move.w	d0,d4
00006374 6100 0000                  		bsr.w	ScrollBlock3
00006378 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000637E 323C 006F                  		move.w	#$6F,d1
00006382 9244                       		sub.w	d4,d1
00006384 3038 F700                  		move.w	($FFFFF700).w,d0
00006388 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000638E 6600                       		bne.s	loc_633C
00006390 7000                       		moveq	#0,d0
00006392                            
00006392                            loc_633C:
00006392 4440                       		neg.w	d0
00006394 4840                       		swap	d0
00006396 3038 F708                  		move.w	($FFFFF708).w,d0
0000639A 4440                       		neg.w	d0
0000639C                            
0000639C                            loc_6346:
0000639C 22C0                       		move.l	d0,(a1)+
0000639E 51C9 FFFC                  		dbf	d1,loc_6346
000063A2 323C 0027                  		move.w	#$27,d1
000063A6 3038 F710                  		move.w	($FFFFF710).w,d0
000063AA 4440                       		neg.w	d0
000063AC                            
000063AC                            loc_6356:
000063AC 22C0                       		move.l	d0,(a1)+
000063AE 51C9 FFFC                  		dbf	d1,loc_6356
000063B2 3038 F710                  		move.w	($FFFFF710).w,d0
000063B6 0640 0000                  		addi.w	#0,d0
000063BA 3438 F700                  		move.w	($FFFFF700).w,d2
000063BE 0642 FE00                  		addi.w	#-$200,d2
000063C2 9440                       		sub.w	d0,d2
000063C4 48C2                       		ext.l	d2
000063C6 E182                       		asl.l	#8,d2
000063C8 85FC 0068                  		divs.w	#$68,d2
000063CC 48C2                       		ext.l	d2
000063CE E182                       		asl.l	#8,d2
000063D0 7600                       		moveq	#0,d3
000063D2 3600                       		move.w	d0,d3
000063D4 323C 0047                  		move.w	#$47,d1
000063D8 D244                       		add.w	d4,d1
000063DA                            
000063DA                            loc_6384:
000063DA 3003                       		move.w	d3,d0
000063DC 4440                       		neg.w	d0
000063DE 22C0                       		move.l	d0,(a1)+
000063E0 4843                       		swap	d3
000063E2 D682                       		add.l	d2,d3
000063E4 4843                       		swap	d3
000063E6 51C9 FFF2                  		dbf	d1,loc_6384
000063EA 4E75                       		rts	
000063EC                            ; End of function Deform_GHZ
000063EC                            
000063EC                            ; ---------------------------------------------------------------------------
000063EC                            ; Labyrinth Zone background layer deformation code
000063EC                            ; ---------------------------------------------------------------------------
000063EC                            
000063EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063EC                            
000063EC                            
000063EC                            Deform_LZ:				; XREF: Deform_Index
000063EC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063F0 48C4                       		ext.l	d4
000063F2 EF84                       		asl.l	#7,d4
000063F4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000063F8 48C5                       		ext.l	d5
000063FA EF85                       		asl.l	#7,d5
000063FC 6100 0000                  		bsr.w	ScrollBlock1
00006400 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006406 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000640A 323C 00DF                  		move.w	#$DF,d1
0000640E 3038 F700                  		move.w	($FFFFF700).w,d0
00006412 4440                       		neg.w	d0
00006414 4840                       		swap	d0
00006416 3038 F708                  		move.w	($FFFFF708).w,d0
0000641A 4440                       		neg.w	d0
0000641C                            
0000641C                            loc_63C6:
0000641C 22C0                       		move.l	d0,(a1)+
0000641E 51C9 FFFC                  		dbf	d1,loc_63C6
00006422 3038 F646                  		move.w	($FFFFF646).w,d0
00006426 9078 F704                  		sub.w	($FFFFF704).w,d0
0000642A 4E75                       		rts	
0000642C                            ; End of function Deform_LZ
0000642C                            
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            ; Marble Zone background layer deformation code
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            
0000642C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000642C                            
0000642C                            
0000642C                            Deform_MZ:				; XREF: Deform_Index
0000642C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006430 48C4                       		ext.l	d4
00006432 ED84                       		asl.l	#6,d4
00006434 2204                       		move.l	d4,d1
00006436 E384                       		asl.l	#1,d4
00006438 D881                       		add.l	d1,d4
0000643A 7A00                       		moveq	#0,d5
0000643C 6100 0000                  		bsr.w	ScrollBlock1
00006440 303C 0200                  		move.w	#$200,d0
00006444 3238 F704                  		move.w	($FFFFF704).w,d1
00006448 0441 01C8                  		subi.w	#$1C8,d1
0000644C 6500                       		bcs.s	loc_6402
0000644E 3401                       		move.w	d1,d2
00006450 D241                       		add.w	d1,d1
00006452 D242                       		add.w	d2,d1
00006454 E441                       		asr.w	#2,d1
00006456 D041                       		add.w	d1,d0
00006458                            
00006458                            loc_6402:
00006458 31C0 F714                  		move.w	d0,($FFFFF714).w
0000645C 6100 0000                  		bsr.w	ScrollBlock3
00006460 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006466 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000646A 323C 00DF                  		move.w	#$DF,d1
0000646E 3038 F700                  		move.w	($FFFFF700).w,d0
00006472 4440                       		neg.w	d0
00006474 4840                       		swap	d0
00006476 3038 F708                  		move.w	($FFFFF708).w,d0
0000647A 4440                       		neg.w	d0
0000647C                            
0000647C                            loc_6426:
0000647C 22C0                       		move.l	d0,(a1)+
0000647E 51C9 FFFC                  		dbf	d1,loc_6426
00006482 4E75                       		rts	
00006484                            ; End of function Deform_MZ
00006484                            
00006484                            ; ---------------------------------------------------------------------------
00006484                            ; Star Light Zone background layer deformation code
00006484                            ; ---------------------------------------------------------------------------
00006484                            
00006484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006484                            
00006484                            
00006484                            Deform_SLZ:				; XREF: Deform_Index
00006484 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006488 48C4                       		ext.l	d4
0000648A EF84                       		asl.l	#7,d4
0000648C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006490 48C5                       		ext.l	d5
00006492 EF85                       		asl.l	#7,d5
00006494 6100 0000                  		bsr.w	ScrollBlock2
00006498 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000649E 6100 0000                  		bsr.w	Deform_SLZ_2
000064A2 45F8 A800                  		lea	($FFFFA800).w,a2
000064A6 3038 F70C                  		move.w	($FFFFF70C).w,d0
000064AA 3400                       		move.w	d0,d2
000064AC 0440 00C0                  		subi.w	#$C0,d0
000064B0 0240 03F0                  		andi.w	#$3F0,d0
000064B4 E648                       		lsr.w	#3,d0
000064B6 45F2 0000                  		lea	(a2,d0.w),a2
000064BA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000064BE 323C 000E                  		move.w	#$E,d1
000064C2 3038 F700                  		move.w	($FFFFF700).w,d0
000064C6 4440                       		neg.w	d0
000064C8 4840                       		swap	d0
000064CA 0242 000F                  		andi.w	#$F,d2
000064CE D442                       		add.w	d2,d2
000064D0 301A                       		move.w	(a2)+,d0
000064D2 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
000064D6                            ; ===========================================================================
000064D6                            
000064D6                            loc_6480:				; XREF: Deform_SLZ
000064D6 301A                       		move.w	(a2)+,d0
000064D8                            
000064D8                            loc_6482:
000064D8 22C0                       		move.l	d0,(a1)+
000064DA 22C0                       		move.l	d0,(a1)+
000064DC 22C0                       		move.l	d0,(a1)+
000064DE 22C0                       		move.l	d0,(a1)+
000064E0 22C0                       		move.l	d0,(a1)+
000064E2 22C0                       		move.l	d0,(a1)+
000064E4 22C0                       		move.l	d0,(a1)+
000064E6 22C0                       		move.l	d0,(a1)+
000064E8 22C0                       		move.l	d0,(a1)+
000064EA 22C0                       		move.l	d0,(a1)+
000064EC 22C0                       		move.l	d0,(a1)+
000064EE 22C0                       		move.l	d0,(a1)+
000064F0 22C0                       		move.l	d0,(a1)+
000064F2 22C0                       		move.l	d0,(a1)+
000064F4 22C0                       		move.l	d0,(a1)+
000064F6 22C0                       		move.l	d0,(a1)+
000064F8 51C9 FFDC                  		dbf	d1,loc_6480
000064FC 4E75                       		rts	
000064FE                            ; End of function Deform_SLZ
000064FE                            
000064FE                            
000064FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FE                            
000064FE                            
000064FE                            Deform_SLZ_2:				; XREF: Deform_SLZ
000064FE 43F8 A800                  		lea	($FFFFA800).w,a1
00006502 3438 F700                  		move.w	($FFFFF700).w,d2
00006506 4442                       		neg.w	d2
00006508 3002                       		move.w	d2,d0
0000650A E640                       		asr.w	#3,d0
0000650C 9042                       		sub.w	d2,d0
0000650E 48C0                       		ext.l	d0
00006510 E980                       		asl.l	#4,d0
00006512 81FC 001C                  		divs.w	#$1C,d0
00006516 48C0                       		ext.l	d0
00006518 E980                       		asl.l	#4,d0
0000651A E180                       		asl.l	#8,d0
0000651C 7600                       		moveq	#0,d3
0000651E 3602                       		move.w	d2,d3
00006520 323C 001B                  		move.w	#$1B,d1
00006524                            
00006524                            loc_64CE:
00006524 32C3                       		move.w	d3,(a1)+
00006526 4843                       		swap	d3
00006528 D680                       		add.l	d0,d3
0000652A 4843                       		swap	d3
0000652C 51C9 FFF6                  		dbf	d1,loc_64CE
00006530 3002                       		move.w	d2,d0
00006532 E640                       		asr.w	#3,d0
00006534 323C 0004                  		move.w	#4,d1
00006538                            
00006538                            loc_64E2:
00006538 32C0                       		move.w	d0,(a1)+
0000653A 51C9 FFFC                  		dbf	d1,loc_64E2
0000653E 3002                       		move.w	d2,d0
00006540 E440                       		asr.w	#2,d0
00006542 323C 0004                  		move.w	#4,d1
00006546                            
00006546                            loc_64F0:
00006546 32C0                       		move.w	d0,(a1)+
00006548 51C9 FFFC                  		dbf	d1,loc_64F0
0000654C 3002                       		move.w	d2,d0
0000654E E240                       		asr.w	#1,d0
00006550 323C 001D                  		move.w	#$1D,d1
00006554                            
00006554                            loc_64FE:
00006554 32C0                       		move.w	d0,(a1)+
00006556 51C9 FFFC                  		dbf	d1,loc_64FE
0000655A 4E75                       		rts	
0000655C                            ; End of function Deform_SLZ_2
0000655C                            
0000655C                            ; ---------------------------------------------------------------------------
0000655C                            ; Spring Yard Zone background layer deformation	code
0000655C                            ; ---------------------------------------------------------------------------
0000655C                            
0000655C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000655C                            
0000655C                            
0000655C                            Deform_SYZ:				; XREF: Deform_Index
0000655C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006560 48C4                       		ext.l	d4
00006562 ED84                       		asl.l	#6,d4
00006564 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006568 48C5                       		ext.l	d5
0000656A E985                       		asl.l	#4,d5
0000656C 2205                       		move.l	d5,d1
0000656E E385                       		asl.l	#1,d5
00006570 DA81                       		add.l	d1,d5
00006572 6100 0000                  		bsr.w	ScrollBlock1
00006576 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000657C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006580 323C 00DF                  		move.w	#$DF,d1
00006584 3038 F700                  		move.w	($FFFFF700).w,d0
00006588 4440                       		neg.w	d0
0000658A 4840                       		swap	d0
0000658C 3038 F708                  		move.w	($FFFFF708).w,d0
00006590 4440                       		neg.w	d0
00006592                            
00006592                            loc_653C:
00006592 22C0                       		move.l	d0,(a1)+
00006594 51C9 FFFC                  		dbf	d1,loc_653C
00006598 4E75                       		rts	
0000659A                            ; End of function Deform_SYZ
0000659A                            
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            ; Scrap	Brain Zone background layer deformation	code
0000659A                            ; ---------------------------------------------------------------------------
0000659A                            
0000659A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000659A                            
0000659A                            
0000659A                            Deform_SBZ:				; XREF: Deform_Index
0000659A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000659E 48C4                       		ext.l	d4
000065A0 ED84                       		asl.l	#6,d4
000065A2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000065A6 48C5                       		ext.l	d5
000065A8 E985                       		asl.l	#4,d5
000065AA E385                       		asl.l	#1,d5
000065AC 6100 0000                  		bsr.w	ScrollBlock1
000065B0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065B6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000065BA 323C 00DF                  		move.w	#$DF,d1
000065BE 3038 F700                  		move.w	($FFFFF700).w,d0
000065C2 4440                       		neg.w	d0
000065C4 4840                       		swap	d0
000065C6 3038 F708                  		move.w	($FFFFF708).w,d0
000065CA 4440                       		neg.w	d0
000065CC                            
000065CC                            loc_6576:
000065CC 22C0                       		move.l	d0,(a1)+
000065CE 51C9 FFFC                  		dbf	d1,loc_6576
000065D2 4E75                       		rts	
000065D4                            ; End of function Deform_SBZ
000065D4                            
000065D4                            ; ---------------------------------------------------------------------------
000065D4                            ; Subroutine to	scroll the level horizontally as Sonic moves
000065D4                            ; ---------------------------------------------------------------------------
000065D4                            
000065D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065D4                            
000065D4                            
000065D4                            ScrollHoriz:				; XREF: DeformBgLayer
000065D4 3838 F700                  		move.w	($FFFFF700).w,d4
000065D8 6100                       		bsr.s	ScrollHoriz2
000065DA 3038 F700                  		move.w	($FFFFF700).w,d0
000065DE 0240 0010                  		andi.w	#$10,d0
000065E2 1238 F74A                  		move.b	($FFFFF74A).w,d1
000065E6 B300                       		eor.b	d1,d0
000065E8 6600                       		bne.s	locret_65B0
000065EA 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000065F0 3038 F700                  		move.w	($FFFFF700).w,d0
000065F4 9044                       		sub.w	d4,d0
000065F6 6A00                       		bpl.s	loc_65AA
000065F8 08F8 0002 F754             		bset	#2,($FFFFF754).w
000065FE 4E75                       		rts	
00006600                            ; ===========================================================================
00006600                            
00006600                            loc_65AA:
00006600 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006606                            
00006606                            locret_65B0:
00006606 4E75                       		rts	
00006608                            ; End of function ScrollHoriz
00006608                            
00006608                            
00006608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006608                            
00006608                            
00006608                            ScrollHoriz2:				; XREF: ScrollHoriz
00006608 3038 D008                  		move.w	($FFFFD008).w,d0
0000660C 9078 F700                  		sub.w	($FFFFF700).w,d0
00006610 0440 0090                  		subi.w	#$90,d0
00006614 6500                       		bcs.s	loc_65F6
00006616 0440 0010                  		subi.w	#$10,d0
0000661A 6400                       		bcc.s	loc_65CC
0000661C 4278 F73A                  		clr.w	($FFFFF73A).w
00006620 4E75                       		rts	
00006622                            ; ===========================================================================
00006622                            
00006622                            loc_65CC:
00006622 0C40 0010                  		cmpi.w	#$10,d0
00006626 6500                       		bcs.s	loc_65D6
00006628 303C 0010                  		move.w	#$10,d0
0000662C                            
0000662C                            loc_65D6:
0000662C D078 F700                  		add.w	($FFFFF700).w,d0
00006630 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006634 6D00                       		blt.s	loc_65E4
00006636 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000663A                            
0000663A                            loc_65E4:
0000663A 3200                       		move.w	d0,d1
0000663C 9278 F700                  		sub.w	($FFFFF700).w,d1
00006640 E141                       		asl.w	#8,d1
00006642 31C0 F700                  		move.w	d0,($FFFFF700).w
00006646 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000664A 4E75                       		rts	
0000664C                            ; ===========================================================================
0000664C                            
0000664C                            loc_65F6:				; XREF: ScrollHoriz2
0000664C D078 F700                  		add.w	($FFFFF700).w,d0
00006650 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006654 6EE4                       		bgt.s	loc_65E4
00006656 3038 F728                  		move.w	($FFFFF728).w,d0
0000665A 60DE                       		bra.s	loc_65E4
0000665C                            ; End of function ScrollHoriz2
0000665C                            
0000665C                            ; ===========================================================================
0000665C 4A40                       		tst.w	d0
0000665E 6A00                       		bpl.s	loc_6610
00006660 303C FFFE                  		move.w	#-2,d0
00006664 60E6                       		bra.s	loc_65F6
00006666                            ; ===========================================================================
00006666                            
00006666                            loc_6610:
00006666 303C 0002                  		move.w	#2,d0
0000666A 60B6                       		bra.s	loc_65CC
0000666C                            
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; Subroutine to	scroll the level vertically as Sonic moves
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            
0000666C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000666C                            
0000666C                            
0000666C                            ScrollVertical:				; XREF: DeformBgLayer
0000666C 7200                       		moveq	#0,d1
0000666E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006672 9078 F704                  		sub.w	($FFFFF704).w,d0
00006676 0838 0002 D022             		btst	#2,($FFFFD022).w
0000667C 6700                       		beq.s	loc_662A
0000667E 5B40                       		subq.w	#5,d0
00006680                            
00006680                            loc_662A:
00006680 0838 0001 D022             		btst	#1,($FFFFD022).w
00006686 6700                       		beq.s	loc_664A
00006688 0640 0020                  		addi.w	#$20,d0
0000668C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006690 6500                       		bcs.s	loc_6696
00006692 0440 0040                  		subi.w	#$40,d0
00006696 6400                       		bcc.s	loc_6696
00006698 4A38 F75C                  		tst.b	($FFFFF75C).w
0000669C 6600                       		bne.s	loc_66A8
0000669E 6000                       		bra.s	loc_6656
000066A0                            ; ===========================================================================
000066A0                            
000066A0                            loc_664A:
000066A0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000066A4 6600                       		bne.s	loc_665C
000066A6 4A38 F75C                  		tst.b	($FFFFF75C).w
000066AA 6600                       		bne.s	loc_66A8
000066AC                            
000066AC                            loc_6656:
000066AC 4278 F73C                  		clr.w	($FFFFF73C).w
000066B0 4E75                       		rts	
000066B2                            ; ===========================================================================
000066B2                            
000066B2                            loc_665C:
000066B2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000066B8 6600                       		bne.s	loc_6684
000066BA 3238 D014                  		move.w	($FFFFD014).w,d1
000066BE 6A00                       		bpl.s	loc_666C
000066C0 4441                       		neg.w	d1
000066C2                            
000066C2                            loc_666C:
000066C2 0C41 0800                  		cmpi.w	#$800,d1
000066C6 6400                       		bcc.s	loc_6696
000066C8 323C 0600                  		move.w	#$600,d1
000066CC 0C40 0006                  		cmpi.w	#6,d0
000066D0 6E00                       		bgt.s	loc_66F6
000066D2 0C40 FFFA                  		cmpi.w	#-6,d0
000066D6 6D00                       		blt.s	loc_66C0
000066D8 6000                       		bra.s	loc_66AE
000066DA                            ; ===========================================================================
000066DA                            
000066DA                            loc_6684:
000066DA 323C 0200                  		move.w	#$200,d1
000066DE 0C40 0002                  		cmpi.w	#2,d0
000066E2 6E00                       		bgt.s	loc_66F6
000066E4 0C40 FFFE                  		cmpi.w	#-2,d0
000066E8 6D00                       		blt.s	loc_66C0
000066EA 6000                       		bra.s	loc_66AE
000066EC                            ; ===========================================================================
000066EC                            
000066EC                            loc_6696:
000066EC 323C 1000                  		move.w	#$1000,d1
000066F0 0C40 0010                  		cmpi.w	#$10,d0
000066F4 6E00                       		bgt.s	loc_66F6
000066F6 0C40 FFF0                  		cmpi.w	#-$10,d0
000066FA 6D00                       		blt.s	loc_66C0
000066FC 6000                       		bra.s	loc_66AE
000066FE                            ; ===========================================================================
000066FE                            
000066FE                            loc_66A8:
000066FE 7000                       		moveq	#0,d0
00006700 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006704                            
00006704                            loc_66AE:
00006704 7200                       		moveq	#0,d1
00006706 3200                       		move.w	d0,d1
00006708 D278 F704                  		add.w	($FFFFF704).w,d1
0000670C 4A40                       		tst.w	d0
0000670E 6A00 0000                  		bpl.w	loc_6700
00006712 6000 0000                  		bra.w	loc_66CC
00006716                            ; ===========================================================================
00006716                            
00006716                            loc_66C0:
00006716 4441                       		neg.w	d1
00006718 48C1                       		ext.l	d1
0000671A E181                       		asl.l	#8,d1
0000671C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006720 4841                       		swap	d1
00006722                            
00006722                            loc_66CC:
00006722 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006726 6E00                       		bgt.s	loc_6724
00006728 0C41 FF00                  		cmpi.w	#-$100,d1
0000672C 6E00                       		bgt.s	loc_66F0
0000672E 0241 07FF                  		andi.w	#$7FF,d1
00006732 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006738 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000673E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006744 6000                       		bra.s	loc_6724
00006746                            ; ===========================================================================
00006746                            
00006746                            loc_66F0:
00006746 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000674A 6000                       		bra.s	loc_6724
0000674C                            ; ===========================================================================
0000674C                            
0000674C                            loc_66F6:
0000674C 48C1                       		ext.l	d1
0000674E E181                       		asl.l	#8,d1
00006750 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006754 4841                       		swap	d1
00006756                            
00006756                            loc_6700:
00006756 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000675A 6D00                       		blt.s	loc_6724
0000675C 0441 0800                  		subi.w	#$800,d1
00006760 6500                       		bcs.s	loc_6720
00006762 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006768 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000676E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006774 6000                       		bra.s	loc_6724
00006776                            ; ===========================================================================
00006776                            
00006776                            loc_6720:
00006776 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000677A                            
0000677A                            loc_6724:
0000677A 3838 F704                  		move.w	($FFFFF704).w,d4
0000677E 4841                       		swap	d1
00006780 2601                       		move.l	d1,d3
00006782 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006786 E09B                       		ror.l	#8,d3
00006788 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000678C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006790 3038 F704                  		move.w	($FFFFF704).w,d0
00006794 0240 0010                  		andi.w	#$10,d0
00006798 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000679C B300                       		eor.b	d1,d0
0000679E 6600                       		bne.s	locret_6766
000067A0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000067A6 3038 F704                  		move.w	($FFFFF704).w,d0
000067AA 9044                       		sub.w	d4,d0
000067AC 6A00                       		bpl.s	loc_6760
000067AE 08F8 0000 F754             		bset	#0,($FFFFF754).w
000067B4 4E75                       		rts	
000067B6                            ; ===========================================================================
000067B6                            
000067B6                            loc_6760:
000067B6 08F8 0001 F754             		bset	#1,($FFFFF754).w
000067BC                            
000067BC                            locret_6766:
000067BC 4E75                       		rts	
000067BE                            ; End of function ScrollVertical
000067BE                            
000067BE                            
000067BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067BE                            
000067BE                            
000067BE                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000067BE 2438 F708                  		move.l	($FFFFF708).w,d2
000067C2 2002                       		move.l	d2,d0
000067C4 D084                       		add.l	d4,d0
000067C6 21C0 F708                  		move.l	d0,($FFFFF708).w
000067CA 2200                       		move.l	d0,d1
000067CC 4841                       		swap	d1
000067CE 0241 0010                  		andi.w	#$10,d1
000067D2 1638 F74C                  		move.b	($FFFFF74C).w,d3
000067D6 B701                       		eor.b	d3,d1
000067D8 6600                       		bne.s	loc_679C
000067DA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000067E0 9082                       		sub.l	d2,d0
000067E2 6A00                       		bpl.s	loc_6796
000067E4 08F8 0002 F756             		bset	#2,($FFFFF756).w
000067EA 6000                       		bra.s	loc_679C
000067EC                            ; ===========================================================================
000067EC                            
000067EC                            loc_6796:
000067EC 08F8 0003 F756             		bset	#3,($FFFFF756).w
000067F2                            
000067F2                            loc_679C:
000067F2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000067F6 2003                       		move.l	d3,d0
000067F8 D085                       		add.l	d5,d0
000067FA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000067FE 2200                       		move.l	d0,d1
00006800 4841                       		swap	d1
00006802 0241 0010                  		andi.w	#$10,d1
00006806 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000680A B501                       		eor.b	d2,d1
0000680C 6600                       		bne.s	locret_67D0
0000680E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006814 9083                       		sub.l	d3,d0
00006816 6A00                       		bpl.s	loc_67CA
00006818 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000681E 4E75                       		rts	
00006820                            ; ===========================================================================
00006820                            
00006820                            loc_67CA:
00006820 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006826                            
00006826                            locret_67D0:
00006826 4E75                       		rts	
00006828                            ; End of function ScrollBlock1
00006828                            
00006828                            
00006828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006828                            
00006828                            
00006828                            ScrollBlock2:				; XREF: Deform_SLZ
00006828 2438 F708                  		move.l	($FFFFF708).w,d2
0000682C 2002                       		move.l	d2,d0
0000682E D084                       		add.l	d4,d0
00006830 21C0 F708                  		move.l	d0,($FFFFF708).w
00006834 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006838 2003                       		move.l	d3,d0
0000683A D085                       		add.l	d5,d0
0000683C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006840 2200                       		move.l	d0,d1
00006842 4841                       		swap	d1
00006844 0241 0010                  		andi.w	#$10,d1
00006848 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000684C B501                       		eor.b	d2,d1
0000684E 6600                       		bne.s	locret_6812
00006850 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006856 9083                       		sub.l	d3,d0
00006858 6A00                       		bpl.s	loc_680C
0000685A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006860 4E75                       		rts	
00006862                            ; ===========================================================================
00006862                            
00006862                            loc_680C:
00006862 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006868                            
00006868                            locret_6812:
00006868 4E75                       		rts	
0000686A                            ; End of function ScrollBlock2
0000686A                            
0000686A                            
0000686A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000686A                            
0000686A                            
0000686A                            ScrollBlock3:				; XREF: Deform_GHZ; et al
0000686A 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000686E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006872 3200                       		move.w	d0,d1
00006874 0241 0010                  		andi.w	#$10,d1
00006878 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000687C B501                       		eor.b	d2,d1
0000687E 6600                       		bne.s	locret_6842
00006880 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006886 9043                       		sub.w	d3,d0
00006888 6A00                       		bpl.s	loc_683C
0000688A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006890 4E75                       		rts	
00006892                            ; ===========================================================================
00006892                            
00006892                            loc_683C:
00006892 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006898                            
00006898                            locret_6842:
00006898 4E75                       		rts	
0000689A                            ; End of function ScrollBlock3
0000689A                            
0000689A                            
0000689A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000689A                            
0000689A                            
0000689A                            ScrollBlock4:				; XREF: Deform_GHZ
0000689A 3438 F710                  		move.w	($FFFFF710).w,d2
0000689E 3638 F714                  		move.w	($FFFFF714).w,d3
000068A2 3038 F73A                  		move.w	($FFFFF73A).w,d0
000068A6 48C0                       		ext.l	d0
000068A8 EF80                       		asl.l	#7,d0
000068AA D1B8 F710                  		add.l	d0,($FFFFF710).w
000068AE 3038 F710                  		move.w	($FFFFF710).w,d0
000068B2 0240 0010                  		andi.w	#$10,d0
000068B6 1238 F74E                  		move.b	($FFFFF74E).w,d1
000068BA B300                       		eor.b	d1,d0
000068BC 6600                       		bne.s	locret_6884
000068BE 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000068C4 3038 F710                  		move.w	($FFFFF710).w,d0
000068C8 9042                       		sub.w	d2,d0
000068CA 6A00                       		bpl.s	loc_687E
000068CC 08F8 0002 F758             		bset	#2,($FFFFF758).w
000068D2 6000                       		bra.s	locret_6884
000068D4                            ; ===========================================================================
000068D4                            
000068D4                            loc_687E:
000068D4 08F8 0003 F758             		bset	#3,($FFFFF758).w
000068DA                            
000068DA                            locret_6884:
000068DA 4E75                       		rts	
000068DC                            ; End of function ScrollBlock4
000068DC                            
000068DC                            
000068DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068DC                            
000068DC                            
000068DC                            sub_6886:				; XREF: loc_C44
000068DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000068E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000068E8 45F8 F756                  		lea	($FFFFF756).w,a2
000068EC 47F8 F708                  		lea	($FFFFF708).w,a3
000068F0 49F8 A440                  		lea	($FFFFA440).w,a4
000068F4 343C 6000                  		move.w	#$6000,d2
000068F8 6100 0000                  		bsr.w	sub_6954
000068FC 45F8 F758                  		lea	($FFFFF758).w,a2
00006900 47F8 F710                  		lea	($FFFFF710).w,a3
00006904 6000 0000                  		bra.w	sub_69F4
00006908                            ; End of function sub_6886
00006908                            
00006908                            ; ---------------------------------------------------------------------------
00006908                            ; Subroutine to	display	correct	tiles as you move
00006908                            ; ---------------------------------------------------------------------------
00006908                            
00006908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006908                            
00006908                            
00006908                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006908 4BF9 00C0 0004             		lea	($C00004).l,a5
0000690E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006914 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006918 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000691C 49F8 A440                  		lea	($FFFFA440).w,a4
00006920 343C 6000                  		move.w	#$6000,d2
00006924 6100 0000                  		bsr.w	sub_6954
00006928 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000692C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006930 6100 0000                  		bsr.w	sub_69F4
00006934 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006938 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000693C 49F8 A400                  		lea	($FFFFA400).w,a4
00006940 343C 4000                  		move.w	#$4000,d2
00006944 4A12                       		tst.b	(a2)
00006946 6700                       		beq.s	locret_6952
00006948 0892 0000                  		bclr	#0,(a2)
0000694C 6700                       		beq.s	loc_6908
0000694E 78F0                       		moveq	#-$10,d4
00006950 7AF0                       		moveq	#-$10,d5
00006952 6100 0000                  		bsr.w	sub_6C20
00006956 78F0                       		moveq	#-$10,d4
00006958 7AF0                       		moveq	#-$10,d5
0000695A 6100 0000                  		bsr.w	sub_6AD8
0000695E                            
0000695E                            loc_6908:
0000695E 0892 0001                  		bclr	#1,(a2)
00006962 6700                       		beq.s	loc_6922
00006964 383C 00E0                  		move.w	#$E0,d4
00006968 7AF0                       		moveq	#-$10,d5
0000696A 6100 0000                  		bsr.w	sub_6C20
0000696E 383C 00E0                  		move.w	#$E0,d4
00006972 7AF0                       		moveq	#-$10,d5
00006974 6100 0000                  		bsr.w	sub_6AD8
00006978                            
00006978                            loc_6922:
00006978 0892 0002                  		bclr	#2,(a2)
0000697C 6700                       		beq.s	loc_6938
0000697E 78F0                       		moveq	#-$10,d4
00006980 7AF0                       		moveq	#-$10,d5
00006982 6100 0000                  		bsr.w	sub_6C20
00006986 78F0                       		moveq	#-$10,d4
00006988 7AF0                       		moveq	#-$10,d5
0000698A 6100 0000                  		bsr.w	sub_6B04
0000698E                            
0000698E                            loc_6938:
0000698E 0892 0003                  		bclr	#3,(a2)
00006992 6700                       		beq.s	locret_6952
00006994 78F0                       		moveq	#-$10,d4
00006996 3A3C 0140                  		move.w	#$140,d5
0000699A 6100 0000                  		bsr.w	sub_6C20
0000699E 78F0                       		moveq	#-$10,d4
000069A0 3A3C 0140                  		move.w	#$140,d5
000069A4 6100 0000                  		bsr.w	sub_6B04
000069A8                            
000069A8                            locret_6952:
000069A8 4E75                       		rts	
000069AA                            ; End of function LoadTilesAsYouMove
000069AA                            
000069AA                            
000069AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069AA                            
000069AA                            
000069AA                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000069AA 4A12                       		tst.b	(a2)
000069AC 6700 0000                  		beq.w	locret_69F2
000069B0 0892 0000                  		bclr	#0,(a2)
000069B4 6700                       		beq.s	loc_6972
000069B6 78F0                       		moveq	#-$10,d4
000069B8 7AF0                       		moveq	#-$10,d5
000069BA 6100 0000                  		bsr.w	sub_6C20
000069BE 78F0                       		moveq	#-$10,d4
000069C0 7AF0                       		moveq	#-$10,d5
000069C2 7C1F                       		moveq	#$1F,d6
000069C4 6100 0000                  		bsr.w	sub_6ADA
000069C8                            
000069C8                            loc_6972:
000069C8 0892 0001                  		bclr	#1,(a2)
000069CC 6700                       		beq.s	loc_698E
000069CE 383C 00E0                  		move.w	#$E0,d4
000069D2 7AF0                       		moveq	#-$10,d5
000069D4 6100 0000                  		bsr.w	sub_6C20
000069D8 383C 00E0                  		move.w	#$E0,d4
000069DC 7AF0                       		moveq	#-$10,d5
000069DE 7C1F                       		moveq	#$1F,d6
000069E0 6100 0000                  		bsr.w	sub_6ADA
000069E4                            
000069E4                            loc_698E:
000069E4 0892 0002                  		bclr	#2,(a2)
000069E8 6700                       		beq.s	loc_69BE
000069EA 78F0                       		moveq	#-$10,d4
000069EC 7AF0                       		moveq	#-$10,d5
000069EE 6100 0000                  		bsr.w	sub_6C20
000069F2 78F0                       		moveq	#-$10,d4
000069F4 7AF0                       		moveq	#-$10,d5
000069F6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000069FA 322B 0004                  		move.w	4(a3),d1
000069FE 0241 FFF0                  		andi.w	#-$10,d1
00006A02 9C41                       		sub.w	d1,d6
00006A04 6D00                       		blt.s	loc_69BE
00006A06 E84E                       		lsr.w	#4,d6
00006A08 0C46 000F                  		cmpi.w	#$F,d6
00006A0C 6500                       		bcs.s	loc_69BA
00006A0E 7C0F                       		moveq	#$F,d6
00006A10                            
00006A10                            loc_69BA:
00006A10 6100 0000                  		bsr.w	sub_6B06
00006A14                            
00006A14                            loc_69BE:
00006A14 0892 0003                  		bclr	#3,(a2)
00006A18 6700                       		beq.s	locret_69F2
00006A1A 78F0                       		moveq	#-$10,d4
00006A1C 3A3C 0140                  		move.w	#$140,d5
00006A20 6100 0000                  		bsr.w	sub_6C20
00006A24 78F0                       		moveq	#-$10,d4
00006A26 3A3C 0140                  		move.w	#$140,d5
00006A2A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A2E 322B 0004                  		move.w	4(a3),d1
00006A32 0241 FFF0                  		andi.w	#-$10,d1
00006A36 9C41                       		sub.w	d1,d6
00006A38 6D00                       		blt.s	locret_69F2
00006A3A E84E                       		lsr.w	#4,d6
00006A3C 0C46 000F                  		cmpi.w	#$F,d6
00006A40 6500                       		bcs.s	loc_69EE
00006A42 7C0F                       		moveq	#$F,d6
00006A44                            
00006A44                            loc_69EE:
00006A44 6100 0000                  		bsr.w	sub_6B06
00006A48                            
00006A48                            locret_69F2:
00006A48 4E75                       		rts	
00006A4A                            ; End of function sub_6954
00006A4A                            
00006A4A                            
00006A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A4A                            
00006A4A                            
00006A4A                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006A4A 4A12                       		tst.b	(a2)
00006A4C 6700 0000                  		beq.w	locret_6A80
00006A50 0892 0002                  		bclr	#2,(a2)
00006A54 6700                       		beq.s	loc_6A3E
00006A56 0C53 0010                  		cmpi.w	#$10,(a3)
00006A5A 6500                       		bcs.s	loc_6A3E
00006A5C 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006A60 322B 0004                  		move.w	4(a3),d1
00006A64 0241 FFF0                  		andi.w	#-$10,d1
00006A68 9841                       		sub.w	d1,d4
00006A6A 3F04                       		move.w	d4,-(sp)
00006A6C 7AF0                       		moveq	#-$10,d5
00006A6E 6100 0000                  		bsr.w	sub_6C20
00006A72 381F                       		move.w	(sp)+,d4
00006A74 7AF0                       		moveq	#-$10,d5
00006A76 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A7A 322B 0004                  		move.w	4(a3),d1
00006A7E 0241 FFF0                  		andi.w	#-$10,d1
00006A82 9C41                       		sub.w	d1,d6
00006A84 6D00                       		blt.s	loc_6A3E
00006A86 E84E                       		lsr.w	#4,d6
00006A88 0446 000E                  		subi.w	#$E,d6
00006A8C 6400                       		bcc.s	loc_6A3E
00006A8E 4446                       		neg.w	d6
00006A90 6100 0000                  		bsr.w	sub_6B06
00006A94                            
00006A94                            loc_6A3E:
00006A94 0892 0003                  		bclr	#3,(a2)
00006A98 6700                       		beq.s	locret_6A80
00006A9A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006A9E 322B 0004                  		move.w	4(a3),d1
00006AA2 0241 FFF0                  		andi.w	#-$10,d1
00006AA6 9841                       		sub.w	d1,d4
00006AA8 3F04                       		move.w	d4,-(sp)
00006AAA 3A3C 0140                  		move.w	#$140,d5
00006AAE 6100 0000                  		bsr.w	sub_6C20
00006AB2 381F                       		move.w	(sp)+,d4
00006AB4 3A3C 0140                  		move.w	#$140,d5
00006AB8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006ABC 322B 0004                  		move.w	4(a3),d1
00006AC0 0241 FFF0                  		andi.w	#-$10,d1
00006AC4 9C41                       		sub.w	d1,d6
00006AC6 6D00                       		blt.s	locret_6A80
00006AC8 E84E                       		lsr.w	#4,d6
00006ACA 0446 000E                  		subi.w	#$E,d6
00006ACE 6400                       		bcc.s	locret_6A80
00006AD0 4446                       		neg.w	d6
00006AD2 6100 0000                  		bsr.w	sub_6B06
00006AD6                            
00006AD6                            locret_6A80:
00006AD6 4E75                       		rts	
00006AD8                            ; End of function sub_69F4
00006AD8                            
00006AD8                            ; ===========================================================================
00006AD8 4A12                       		tst.b	(a2)
00006ADA 6700                       		beq.s	locret_6AD6
00006ADC 0892 0002                  		bclr	#2,(a2)
00006AE0 6700                       		beq.s	loc_6AAC
00006AE2 383C 00D0                  		move.w	#$D0,d4
00006AE6 322B 0004                  		move.w	4(a3),d1
00006AEA 0241 FFF0                  		andi.w	#-$10,d1
00006AEE 9841                       		sub.w	d1,d4
00006AF0 3F04                       		move.w	d4,-(sp)
00006AF2 7AF0                       		moveq	#-$10,d5
00006AF4 6100 0000                  		bsr.w	sub_6C3C
00006AF8 381F                       		move.w	(sp)+,d4
00006AFA 7AF0                       		moveq	#-$10,d5
00006AFC 7C02                       		moveq	#2,d6
00006AFE 6100 0000                  		bsr.w	sub_6B06
00006B02                            
00006B02                            loc_6AAC:
00006B02 0892 0003                  		bclr	#3,(a2)
00006B06 6700                       		beq.s	locret_6AD6
00006B08 383C 00D0                  		move.w	#$D0,d4
00006B0C 322B 0004                  		move.w	4(a3),d1
00006B10 0241 FFF0                  		andi.w	#-$10,d1
00006B14 9841                       		sub.w	d1,d4
00006B16 3F04                       		move.w	d4,-(sp)
00006B18 3A3C 0140                  		move.w	#$140,d5
00006B1C 6100 0000                  		bsr.w	sub_6C3C
00006B20 381F                       		move.w	(sp)+,d4
00006B22 3A3C 0140                  		move.w	#$140,d5
00006B26 7C02                       		moveq	#2,d6
00006B28 6100 0000                  		bsr.w	sub_6B06
00006B2C                            
00006B2C                            locret_6AD6:
00006B2C 4E75                       		rts	
00006B2E                            
00006B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B2E                            
00006B2E                            
00006B2E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006B2E 7C15                       		moveq	#$15,d6
00006B30                            ; End of function sub_6AD8
00006B30                            
00006B30                            
00006B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B30                            
00006B30                            
00006B30                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006B30 2E3C 0080 0000             		move.l	#$800000,d7
00006B36 2200                       		move.l	d0,d1
00006B38                            
00006B38                            loc_6AE2:
00006B38 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006B3C 6100 0000                  		bsr.w	sub_6BD6
00006B40 2001                       		move.l	d1,d0
00006B42 6100 0000                  		bsr.w	sub_6B32
00006B46 5801                       		addq.b	#4,d1
00006B48 0201 007F                  		andi.b	#$7F,d1
00006B4C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006B50 0645 0010                  		addi.w	#$10,d5
00006B54 51CE FFE2                  		dbf	d6,loc_6AE2
00006B58 4E75                       		rts	
00006B5A                            ; End of function sub_6ADA
00006B5A                            
00006B5A                            
00006B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B5A                            
00006B5A                            
00006B5A                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006B5A 7C0F                       		moveq	#$F,d6
00006B5C                            ; End of function sub_6B04
00006B5C                            
00006B5C                            
00006B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B5C                            
00006B5C                            
00006B5C                            sub_6B06:				; XREF: sub_6954
00006B5C 2E3C 0080 0000             		move.l	#$800000,d7
00006B62 2200                       		move.l	d0,d1
00006B64                            
00006B64                            loc_6B0E:
00006B64 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006B68 6100 0000                  		bsr.w	sub_6BD6
00006B6C 2001                       		move.l	d1,d0
00006B6E 6100 0000                  		bsr.w	sub_6B32
00006B72 0641 0100                  		addi.w	#$100,d1
00006B76 0241 0FFF                  		andi.w	#$FFF,d1
00006B7A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006B7E 0644 0010                  		addi.w	#$10,d4
00006B82 51CE FFE0                  		dbf	d6,loc_6B0E
00006B86 4E75                       		rts	
00006B88                            ; End of function sub_6B06
00006B88                            
00006B88                            
00006B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B88                            
00006B88                            
00006B88                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006B88 8042                       		or.w	d2,d0
00006B8A 4840                       		swap	d0
00006B8C 0810 0004                  		btst	#4,(a0)
00006B90 6600                       		bne.s	loc_6B6E
00006B92 0810 0003                  		btst	#3,(a0)
00006B96 6600                       		bne.s	loc_6B4E
00006B98 2A80                       		move.l	d0,(a5)
00006B9A 2C99                       		move.l	(a1)+,(a6)
00006B9C D087                       		add.l	d7,d0
00006B9E 2A80                       		move.l	d0,(a5)
00006BA0 2C99                       		move.l	(a1)+,(a6)
00006BA2 4E75                       		rts	
00006BA4                            ; ===========================================================================
00006BA4                            
00006BA4                            loc_6B4E:
00006BA4 2A80                       		move.l	d0,(a5)
00006BA6 2819                       		move.l	(a1)+,d4
00006BA8 0A84 0800 0800             		eori.l	#$8000800,d4
00006BAE 4844                       		swap	d4
00006BB0 2C84                       		move.l	d4,(a6)
00006BB2 D087                       		add.l	d7,d0
00006BB4 2A80                       		move.l	d0,(a5)
00006BB6 2819                       		move.l	(a1)+,d4
00006BB8 0A84 0800 0800             		eori.l	#$8000800,d4
00006BBE 4844                       		swap	d4
00006BC0 2C84                       		move.l	d4,(a6)
00006BC2 4E75                       		rts	
00006BC4                            ; ===========================================================================
00006BC4                            
00006BC4                            loc_6B6E:
00006BC4 0810 0003                  		btst	#3,(a0)
00006BC8 6600                       		bne.s	loc_6B90
00006BCA 2A80                       		move.l	d0,(a5)
00006BCC 2A19                       		move.l	(a1)+,d5
00006BCE 2819                       		move.l	(a1)+,d4
00006BD0 0A84 1000 1000             		eori.l	#$10001000,d4
00006BD6 2C84                       		move.l	d4,(a6)
00006BD8 D087                       		add.l	d7,d0
00006BDA 2A80                       		move.l	d0,(a5)
00006BDC 0A85 1000 1000             		eori.l	#$10001000,d5
00006BE2 2C85                       		move.l	d5,(a6)
00006BE4 4E75                       		rts	
00006BE6                            ; ===========================================================================
00006BE6                            
00006BE6                            loc_6B90:
00006BE6 2A80                       		move.l	d0,(a5)
00006BE8 2A19                       		move.l	(a1)+,d5
00006BEA 2819                       		move.l	(a1)+,d4
00006BEC 0A84 1800 1800             		eori.l	#$18001800,d4
00006BF2 4844                       		swap	d4
00006BF4 2C84                       		move.l	d4,(a6)
00006BF6 D087                       		add.l	d7,d0
00006BF8 2A80                       		move.l	d0,(a5)
00006BFA 0A85 1800 1800             		eori.l	#$18001800,d5
00006C00 4845                       		swap	d5
00006C02 2C85                       		move.l	d5,(a6)
00006C04 4E75                       		rts	
00006C06                            ; End of function sub_6B32
00006C06                            
00006C06                            ; ===========================================================================
00006C06 4E75                       		rts	
00006C08                            ; ===========================================================================
00006C08 2A80                       		move.l	d0,(a5)
00006C0A 3A3C 2000                  		move.w	#$2000,d5
00006C0E 3819                       		move.w	(a1)+,d4
00006C10 D845                       		add.w	d5,d4
00006C12 3C84                       		move.w	d4,(a6)
00006C14 3819                       		move.w	(a1)+,d4
00006C16 D845                       		add.w	d5,d4
00006C18 3C84                       		move.w	d4,(a6)
00006C1A D087                       		add.l	d7,d0
00006C1C 2A80                       		move.l	d0,(a5)
00006C1E 3819                       		move.w	(a1)+,d4
00006C20 D845                       		add.w	d5,d4
00006C22 3C84                       		move.w	d4,(a6)
00006C24 3819                       		move.w	(a1)+,d4
00006C26 D845                       		add.w	d5,d4
00006C28 3C84                       		move.w	d4,(a6)
00006C2A 4E75                       		rts	
00006C2C                            
00006C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2C                            
00006C2C                            
00006C2C                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006C2C 43F8 B000                  		lea	($FFFFB000).w,a1
00006C30 D86B 0004                  		add.w	4(a3),d4
00006C34 DA53                       		add.w	(a3),d5
00006C36 3604                       		move.w	d4,d3
00006C38 E24B                       		lsr.w	#1,d3
00006C3A 0243 0380                  		andi.w	#$380,d3
00006C3E E64D                       		lsr.w	#3,d5
00006C40 3005                       		move.w	d5,d0
00006C42 EA48                       		lsr.w	#5,d0
00006C44 0240 007F                  		andi.w	#$7F,d0
00006C48 D043                       		add.w	d3,d0
00006C4A 76FF                       		moveq	#-1,d3
00006C4C 1634 0000                  		move.b	(a4,d0.w),d3
00006C50 6700                       		beq.s	locret_6C1E
00006C52 5303                       		subq.b	#1,d3
00006C54 0243 007F                  		andi.w	#$7F,d3
00006C58 EE5B                       		ror.w	#7,d3
00006C5A D844                       		add.w	d4,d4
00006C5C 0244 01E0                  		andi.w	#$1E0,d4
00006C60 0245 001E                  		andi.w	#$1E,d5
00006C64 D644                       		add.w	d4,d3
00006C66 D645                       		add.w	d5,d3
00006C68 2043                       		movea.l	d3,a0
00006C6A 3610                       		move.w	(a0),d3
00006C6C 0243 03FF                  		andi.w	#$3FF,d3
00006C70 E74B                       		lsl.w	#3,d3
00006C72 D2C3                       		adda.w	d3,a1
00006C74                            
00006C74                            locret_6C1E:
00006C74 4E75                       		rts	
00006C76                            ; End of function sub_6BD6
00006C76                            
00006C76                            
00006C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C76                            
00006C76                            
00006C76                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006C76 D86B 0004                  		add.w	4(a3),d4
00006C7A DA53                       		add.w	(a3),d5
00006C7C 0244 00F0                  		andi.w	#$F0,d4
00006C80 0245 01F0                  		andi.w	#$1F0,d5
00006C84 E94C                       		lsl.w	#4,d4
00006C86 E44D                       		lsr.w	#2,d5
00006C88 D845                       		add.w	d5,d4
00006C8A 7003                       		moveq	#3,d0
00006C8C 4840                       		swap	d0
00006C8E 3004                       		move.w	d4,d0
00006C90 4E75                       		rts	
00006C92                            ; End of function sub_6C20
00006C92                            
00006C92                            
00006C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C92                            ; not used
00006C92                            
00006C92                            
00006C92                            sub_6C3C:
00006C92 D86B 0004                  		add.w	4(a3),d4
00006C96 DA53                       		add.w	(a3),d5
00006C98 0244 00F0                  		andi.w	#$F0,d4
00006C9C 0245 01F0                  		andi.w	#$1F0,d5
00006CA0 E94C                       		lsl.w	#4,d4
00006CA2 E44D                       		lsr.w	#2,d5
00006CA4 D845                       		add.w	d5,d4
00006CA6 7002                       		moveq	#2,d0
00006CA8 4840                       		swap	d0
00006CAA 3004                       		move.w	d4,d0
00006CAC 4E75                       		rts	
00006CAE                            ; End of function sub_6C3C
00006CAE                            
00006CAE                            ; ---------------------------------------------------------------------------
00006CAE                            ; Subroutine to	load tiles as soon as the level	appears
00006CAE                            ; ---------------------------------------------------------------------------
00006CAE                            
00006CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CAE                            
00006CAE                            
00006CAE                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006CAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CB4 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CBA 47F8 F700                  		lea	($FFFFF700).w,a3
00006CBE 49F8 A400                  		lea	($FFFFA400).w,a4
00006CC2 343C 4000                  		move.w	#$4000,d2
00006CC6 6100                       		bsr.s	LoadTilesFromStart2
00006CC8 47F8 F708                  		lea	($FFFFF708).w,a3
00006CCC 49F8 A440                  		lea	($FFFFA440).w,a4
00006CD0 343C 6000                  		move.w	#$6000,d2
00006CD4                            ; End of function LoadTilesFromStart
00006CD4                            
00006CD4                            
00006CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CD4                            
00006CD4                            
00006CD4                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006CD4 78F0                       		moveq	#-$10,d4
00006CD6 7C0F                       		moveq	#$F,d6
00006CD8                            
00006CD8                            loc_6C82:
00006CD8 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006CDC 7A00                       		moveq	#0,d5
00006CDE 3204                       		move.w	d4,d1
00006CE0 6100 FF94                  		bsr.w	sub_6C20
00006CE4 3801                       		move.w	d1,d4
00006CE6 7A00                       		moveq	#0,d5
00006CE8 7C1F                       		moveq	#$1F,d6
00006CEA 6100 FE44                  		bsr.w	sub_6ADA
00006CEE 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006CF2 0644 0010                  		addi.w	#$10,d4
00006CF6 51CE FFE0                  		dbf	d6,loc_6C82
00006CFA 4E75                       		rts	
00006CFC                            ; End of function LoadTilesFromStart2
00006CFC                            
00006CFC                            ; ---------------------------------------------------------------------------
00006CFC                            ; Main Load Block loading subroutine
00006CFC                            ; ---------------------------------------------------------------------------
00006CFC                            
00006CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CFC                            
00006CFC                            
00006CFC                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006CFC 7000                       		moveq	#0,d0
00006CFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D02 E948                       		lsl.w	#4,d0
00006D04 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006D0A 45F2 0000                  		lea	(a2,d0.w),a2
00006D0E 2F0A                       		move.l	a2,-(sp)
00006D10 588A                       		addq.l	#4,a2
00006D12 205A                       		movea.l	(a2)+,a0
00006D14 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006D18 303C 0000                  		move.w	#0,d0
00006D1C 6100 A90A                  		bsr.w	EniDec
00006D20 205A                       		movea.l	(a2)+,a0
00006D22 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006D28 6100 AA7C                  		bsr.w	KosDec
00006D2C 6100 0000                  		bsr.w	LevelLayoutLoad
00006D30 301A                       		move.w	(a2)+,d0
00006D32 3012                       		move.w	(a2),d0
00006D34 0240 00FF                  		andi.w	#$FF,d0
00006D38 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006D3E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006D40 700C                       		moveq	#$C,d0		; use SB3 pallet
00006D42                            
00006D42                            MLB_ChkSBZPal:
00006D42 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006D48 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006D4A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006D50 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006D52                            
00006D52                            MLB_UsePal0E:
00006D52 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006D54                            
00006D54                            MLB_NormalPal:
00006D54 6100 B2B0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006D58 245F                       		movea.l	(sp)+,a2
00006D5A 584A                       		addq.w	#4,a2
00006D5C 7000                       		moveq	#0,d0
00006D5E 1012                       		move.b	(a2),d0
00006D60 6700                       		beq.s	locret_6D10
00006D62 6100 A726                  		bsr.w	LoadPLC		; load pattern load cues
00006D66                            
00006D66                            locret_6D10:
00006D66 4E75                       		rts	
00006D68                            ; End of function MainLoadBlockLoad
00006D68                            
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Level	layout loading subroutine
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006D68 47F8 A400                  		lea	($FFFFA400).w,a3
00006D6C 323C 01FF                  		move.w	#$1FF,d1
00006D70 7000                       		moveq	#0,d0
00006D72                            
00006D72                            LevLoad_ClrRam:
00006D72 26C0                       		move.l	d0,(a3)+
00006D74 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006D78                            
00006D78 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006D7C 7200                       		moveq	#0,d1
00006D7E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006D82 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006D86 7202                       		moveq	#2,d1
00006D88                            ; End of function LevelLayoutLoad
00006D88                            
00006D88                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006D88                            
00006D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D88                            
00006D88                            
00006D88                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006D88 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006D8C ED08                       		lsl.b	#6,d0
00006D8E EA48                       		lsr.w	#5,d0
00006D90 3400                       		move.w	d0,d2
00006D92 D040                       		add.w	d0,d0
00006D94 D042                       		add.w	d2,d0
00006D96 D041                       		add.w	d1,d0
00006D98 43F9 0000 0000             		lea	(Level_Index).l,a1
00006D9E 3031 0000                  		move.w	(a1,d0.w),d0
00006DA2 43F1 0000                  		lea	(a1,d0.w),a1
00006DA6 7200                       		moveq	#0,d1
00006DA8 3401                       		move.w	d1,d2
00006DAA 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006DAC 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006DAE                            
00006DAE                            LevLoad_NumRows:
00006DAE 3001                       		move.w	d1,d0
00006DB0 204B                       		movea.l	a3,a0
00006DB2                            
00006DB2                            LevLoad_Row:
00006DB2 10D9                       		move.b	(a1)+,(a0)+
00006DB4 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006DB8 47EB 0080                  		lea	$80(a3),a3	; do next row
00006DBC 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006DC0 4E75                       		rts	
00006DC2                            ; End of function LevelLayoutLoad2
00006DC2                            
00006DC2                            ; ---------------------------------------------------------------------------
00006DC2                            ; Dynamic screen resize	loading	subroutine
00006DC2                            ; ---------------------------------------------------------------------------
00006DC2                            
00006DC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC2                            
00006DC2                            
00006DC2                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006DC2 7000                       		moveq	#0,d0
00006DC4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006DC8 D040                       		add.w	d0,d0
00006DCA 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006DCE 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006DD2 7202                       		moveq	#2,d1
00006DD4 3038 F726                  		move.w	($FFFFF726).w,d0
00006DD8 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006DDC 6700                       		beq.s	locret_6DAA
00006DDE 6400                       		bcc.s	loc_6DAC
00006DE0 4441                       		neg.w	d1
00006DE2 3038 F704                  		move.w	($FFFFF704).w,d0
00006DE6 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006DEA 6300                       		bls.s	loc_6DA0
00006DEC 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006DF0 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006DF6                            
00006DF6                            loc_6DA0:
00006DF6 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006DFA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006E00                            
00006E00                            locret_6DAA:
00006E00 4E75                       		rts	
00006E02                            ; ===========================================================================
00006E02                            
00006E02                            loc_6DAC:				; XREF: DynScrResizeLoad
00006E02 3038 F704                  		move.w	($FFFFF704).w,d0
00006E06 5040                       		addq.w	#8,d0
00006E08 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006E0C 6500                       		bcs.s	loc_6DC4
00006E0E 0838 0001 D022             		btst	#1,($FFFFD022).w
00006E14 6700                       		beq.s	loc_6DC4
00006E16 D241                       		add.w	d1,d1
00006E18 D241                       		add.w	d1,d1
00006E1A                            
00006E1A                            loc_6DC4:
00006E1A D378 F72E                  		add.w	d1,($FFFFF72E).w
00006E1E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006E24 4E75                       		rts	
00006E26                            ; End of function DynScrResizeLoad
00006E26                            
00006E26                            ; ===========================================================================
00006E26                            ; ---------------------------------------------------------------------------
00006E26                            ; Offset index for dynamic screen resizing
00006E26                            ; ---------------------------------------------------------------------------
00006E26 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006E2A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006E2E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006E32 0000                       		dc.w Resize_Ending-Resize_Index
00006E34                            ; ===========================================================================
00006E34                            ; ---------------------------------------------------------------------------
00006E34                            ; Green	Hill Zone dynamic screen resizing
00006E34                            ; ---------------------------------------------------------------------------
00006E34                            
00006E34                            Resize_GHZ:				; XREF: Resize_Index
00006E34 7000                       		moveq	#0,d0
00006E36 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006E3A D040                       		add.w	d0,d0
00006E3C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006E40 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006E44                            ; ===========================================================================
00006E44 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006E46 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006E48 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006E4A                            ; ===========================================================================
00006E4A                            
00006E4A                            Resize_GHZ1:
00006E4A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006E50 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006E56 6500                       		bcs.s	locret_6E08	; if not, branch
00006E58 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006E5E                            
00006E5E                            locret_6E08:
00006E5E 4E75                       		rts	
00006E60                            ; ===========================================================================
00006E60                            
00006E60                            Resize_GHZ2:
00006E60 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E66 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006E6C 6500                       		bcs.s	locret_6E3A
00006E6E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006E74 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006E7A 6500                       		bcs.s	locret_6E3A
00006E7C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006E82 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006E88 6500                       		bcs.s	locret_6E3A
00006E8A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E90                            
00006E90                            locret_6E3A:
00006E90 4E75                       		rts	
00006E92                            ; ===========================================================================
00006E92                            
00006E92                            Resize_GHZ3:
00006E92 7000                       		moveq	#0,d0
00006E94 1038 F742                  		move.b	($FFFFF742).w,d0
00006E98 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006E9C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006EA0                            ; ===========================================================================
00006EA0 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006EA2 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006EA4 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006EA6                            ; ===========================================================================
00006EA6                            
00006EA6                            Resize_GHZ3main:
00006EA6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006EAC 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006EB2 6500                       		bcs.s	locret_6E96
00006EB4 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006EBA 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006EC0 6500                       		bcs.s	locret_6E96
00006EC2 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006EC8 6500                       		bcs.s	loc_6E98
00006ECA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006ED0 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006ED6 6400                       		bcc.s	loc_6E8E
00006ED8 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006EDE 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006EE4                            
00006EE4                            loc_6E8E:
00006EE4 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006EEA 6400                       		bcc.s	loc_6E98
00006EEC                            
00006EEC                            locret_6E96:
00006EEC 4E75                       		rts	
00006EEE                            ; ===========================================================================
00006EEE                            
00006EEE                            loc_6E98:
00006EEE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006EF4 5438 F742                  		addq.b	#2,($FFFFF742).w
00006EF8 4E75                       		rts	
00006EFA                            ; ===========================================================================
00006EFA                            
00006EFA                            Resize_GHZ3boss:
00006EFA 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006F00 6400                       		bcc.s	loc_6EB0
00006F02 5538 F742                  		subq.b	#2,($FFFFF742).w
00006F06                            
00006F06                            loc_6EB0:
00006F06 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006F0C 6500                       		bcs.s	locret_6EE8
00006F0E 6100 0000                  		bsr.w	SingleObjLoad
00006F12 6600                       		bne.s	loc_6ED0
00006F14 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006F18 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006F1E 337C 0280 000C             		move.w	#$280,$C(a1)
00006F24                            
00006F24                            loc_6ED0:
00006F24 303C 008C                  		move.w	#$8C,d0
00006F28 6100 A332                  		bsr.w	PlaySound	; play boss music
00006F2C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006F32 5438 F742                  		addq.b	#2,($FFFFF742).w
00006F36 7011                       		moveq	#$11,d0
00006F38 6000 A550                  		bra.w	LoadPLC		; load boss patterns
00006F3C                            ; ===========================================================================
00006F3C                            
00006F3C                            locret_6EE8:
00006F3C 4E75                       		rts	
00006F3E                            ; ===========================================================================
00006F3E                            
00006F3E                            Resize_GHZ3end:
00006F3E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006F44 4E75                       		rts	
00006F46                            ; ===========================================================================
00006F46                            ; ---------------------------------------------------------------------------
00006F46                            ; Labyrinth Zone dynamic screen	resizing
00006F46                            ; ---------------------------------------------------------------------------
00006F46                            
00006F46                            Resize_LZ:				; XREF: Resize_Index
00006F46 7000                       		moveq	#0,d0
00006F48 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006F4C D040                       		add.w	d0,d0
00006F4E 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00006F52 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00006F56                            ; ===========================================================================
00006F56 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00006F58 0000                       		dc.w Resize_LZ12-Resize_LZx
00006F5A 0000                       		dc.w Resize_LZ3-Resize_LZx
00006F5C 0000                       		dc.w Resize_SBZ3-Resize_LZx
00006F5E                            ; ===========================================================================
00006F5E                            
00006F5E                            Resize_LZ12:
00006F5E 4E75                       		rts	
00006F60                            ; ===========================================================================
00006F60                            
00006F60                            Resize_LZ3:
00006F60 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00006F64 6700                       		beq.s	loc_6F28	; if not, branch
00006F66 43F8 A506                  		lea	($FFFFA506).w,a1
00006F6A 0C11 0007                  		cmpi.b	#7,(a1)
00006F6E 6700                       		beq.s	loc_6F28
00006F70 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00006F74 303C 00B7                  		move.w	#$B7,d0
00006F78 6100 A2E8                  		bsr.w	PlaySound_Special ; play rumbling sound
00006F7C                            
00006F7C                            loc_6F28:
00006F7C 4A38 F742                  		tst.b	($FFFFF742).w
00006F80 6600                       		bne.s	locret_6F64
00006F82 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00006F88 6500                       		bcs.s	locret_6F62
00006F8A 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00006F90 6400                       		bcc.s	locret_6F62
00006F92 6100 0000                  		bsr.w	SingleObjLoad
00006F96 6600                       		bne.s	loc_6F4A
00006F98 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00006F9C                            
00006F9C                            loc_6F4A:
00006F9C 303C 008C                  		move.w	#$8C,d0
00006FA0 6100 A2BA                  		bsr.w	PlaySound	; play boss music
00006FA4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006FAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FAE 7011                       		moveq	#$11,d0
00006FB0 6000 A4D8                  		bra.w	LoadPLC		; load boss patterns
00006FB4                            ; ===========================================================================
00006FB4                            
00006FB4                            locret_6F62:
00006FB4 4E75                       		rts	
00006FB6                            ; ===========================================================================
00006FB6                            
00006FB6                            locret_6F64:
00006FB6 4E75                       		rts	
00006FB8                            ; ===========================================================================
00006FB8                            
00006FB8                            Resize_SBZ3:
00006FB8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006FBE 6500                       		bcs.s	locret_6F8C
00006FC0 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00006FC6 6400                       		bcc.s	locret_6F8C	; if not, branch
00006FC8 4238 FE30                  		clr.b	($FFFFFE30).w
00006FCC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00006FD2 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00006FD8 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00006FDE                            
00006FDE                            locret_6F8C:
00006FDE 4E75                       		rts	
00006FE0                            ; ===========================================================================
00006FE0                            ; ---------------------------------------------------------------------------
00006FE0                            ; Marble Zone dynamic screen resizing
00006FE0                            ; ---------------------------------------------------------------------------
00006FE0                            
00006FE0                            Resize_MZ:				; XREF: Resize_Index
00006FE0 7000                       		moveq	#0,d0
00006FE2 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006FE6 D040                       		add.w	d0,d0
00006FE8 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00006FEC 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00006FF0                            ; ===========================================================================
00006FF0 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00006FF2 0000                       		dc.w Resize_MZ2-Resize_MZx
00006FF4 0000                       		dc.w Resize_MZ3-Resize_MZx
00006FF6                            ; ===========================================================================
00006FF6                            
00006FF6                            Resize_MZ1:
00006FF6 7000                       		moveq	#0,d0
00006FF8 1038 F742                  		move.b	($FFFFF742).w,d0
00006FFC 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007000 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007004                            ; ===========================================================================
00007004 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007006 0000                       		dc.w loc_6FEA-off_6FB2
00007008 0000                       		dc.w loc_702E-off_6FB2
0000700A 0000                       		dc.w loc_7050-off_6FB2
0000700C                            ; ===========================================================================
0000700C                            
0000700C                            loc_6FBA:
0000700C 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007012 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007018 6500                       		bcs.s	locret_6FE8
0000701A 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007020 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007026 6500                       		bcs.s	locret_6FE8
00007028 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000702E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007034 6500                       		bcs.s	locret_6FE8
00007036 5438 F742                  		addq.b	#2,($FFFFF742).w
0000703A                            
0000703A                            locret_6FE8:
0000703A 4E75                       		rts	
0000703C                            ; ===========================================================================
0000703C                            
0000703C                            loc_6FEA:
0000703C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007042 6400                       		bcc.s	loc_6FF8
00007044 5538 F742                  		subq.b	#2,($FFFFF742).w
00007048 4E75                       		rts	
0000704A                            ; ===========================================================================
0000704A                            
0000704A                            loc_6FF8:
0000704A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007050 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007056 6400                       		bcc.s	locret_702C
00007058 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000705E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007064 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000706A 6400                       		bcc.s	locret_702C
0000706C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007072 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007078 6500                       		bcs.s	locret_702C
0000707A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000707E                            
0000707E                            locret_702C:
0000707E 4E75                       		rts	
00007080                            ; ===========================================================================
00007080                            
00007080                            loc_702E:
00007080 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007086 6400                       		bcc.s	loc_703C
00007088 5538 F742                  		subq.b	#2,($FFFFF742).w
0000708C 4E75                       		rts	
0000708E                            ; ===========================================================================
0000708E                            
0000708E                            loc_703C:
0000708E 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007094 6500                       		bcs.s	locret_704E
00007096 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000709C 5438 F742                  		addq.b	#2,($FFFFF742).w
000070A0                            
000070A0                            locret_704E:
000070A0 4E75                       		rts	
000070A2                            ; ===========================================================================
000070A2                            
000070A2                            loc_7050:
000070A2 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000070A8 6500                       		bcs.s	locret_7072
000070AA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000070B0 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000070B6 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000070BC 6500                       		bcs.s	locret_7072
000070BE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000070C4                            
000070C4                            locret_7072:
000070C4 4E75                       		rts	
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            Resize_MZ2:
000070C6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000070CC 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000070D2 6500                       		bcs.s	locret_7088
000070D4 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000070DA                            
000070DA                            locret_7088:
000070DA 4E75                       		rts	
000070DC                            ; ===========================================================================
000070DC                            
000070DC                            Resize_MZ3:
000070DC 7000                       		moveq	#0,d0
000070DE 1038 F742                  		move.b	($FFFFF742).w,d0
000070E2 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000070E6 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000070EA                            ; ===========================================================================
000070EA 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000070EC 0000                       		dc.w Resize_MZ3end-off_7098
000070EE                            ; ===========================================================================
000070EE                            
000070EE                            Resize_MZ3boss:
000070EE 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000070F4 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000070FA 6500                       		bcs.s	locret_70E8
000070FC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007102 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007108 6500                       		bcs.s	locret_70E8
0000710A 6100 0000                  		bsr.w	SingleObjLoad
0000710E 6600                       		bne.s	loc_70D0
00007110 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007114 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000711A 337C 022C 000C             		move.w	#$22C,$C(a1)
00007120                            
00007120                            loc_70D0:
00007120 303C 008C                  		move.w	#$8C,d0
00007124 6100 A136                  		bsr.w	PlaySound	; play boss music
00007128 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000712E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007132 7011                       		moveq	#$11,d0
00007134 6000 A354                  		bra.w	LoadPLC		; load boss patterns
00007138                            ; ===========================================================================
00007138                            
00007138                            locret_70E8:
00007138 4E75                       		rts	
0000713A                            ; ===========================================================================
0000713A                            
0000713A                            Resize_MZ3end:
0000713A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007140 4E75                       		rts	
00007142                            ; ===========================================================================
00007142                            ; ---------------------------------------------------------------------------
00007142                            ; Star Light Zone dynamic screen resizing
00007142                            ; ---------------------------------------------------------------------------
00007142                            
00007142                            Resize_SLZ:				; XREF: Resize_Index
00007142 7000                       		moveq	#0,d0
00007144 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007148 D040                       		add.w	d0,d0
0000714A 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000714E 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007152                            ; ===========================================================================
00007152 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007154 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007156 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007158                            ; ===========================================================================
00007158                            
00007158                            Resize_SLZ12:
00007158 4E75                       		rts	
0000715A                            ; ===========================================================================
0000715A                            
0000715A                            Resize_SLZ3:
0000715A 7000                       		moveq	#0,d0
0000715C 1038 F742                  		move.b	($FFFFF742).w,d0
00007160 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007164 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007168                            ; ===========================================================================
00007168 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000716A 0000                       		dc.w Resize_SLZ3boss-off_7118
0000716C 0000                       		dc.w Resize_SLZ3end-off_7118
0000716E                            ; ===========================================================================
0000716E                            
0000716E                            Resize_SLZ3main:
0000716E 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007174 6500                       		bcs.s	locret_7130
00007176 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000717C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007180                            
00007180                            locret_7130:
00007180 4E75                       		rts	
00007182                            ; ===========================================================================
00007182                            
00007182                            Resize_SLZ3boss:
00007182 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007188 6500                       		bcs.s	locret_715C
0000718A 6100 0000                  		bsr.w	SingleObjLoad
0000718E 6600                       		bne.s	loc_7144
00007190 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007194                            
00007194                            loc_7144:
00007194 303C 008C                  		move.w	#$8C,d0
00007198 6100 A0C2                  		bsr.w	PlaySound	; play boss music
0000719C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000071A6 7011                       		moveq	#$11,d0
000071A8 6000 A2E0                  		bra.w	LoadPLC		; load boss patterns
000071AC                            ; ===========================================================================
000071AC                            
000071AC                            locret_715C:
000071AC 4E75                       		rts	
000071AE                            ; ===========================================================================
000071AE                            
000071AE                            Resize_SLZ3end:
000071AE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071B4 4E75                       		rts
000071B6 4E75                       		rts
000071B8                            ; ===========================================================================
000071B8                            ; ---------------------------------------------------------------------------
000071B8                            ; Spring Yard Zone dynamic screen resizing
000071B8                            ; ---------------------------------------------------------------------------
000071B8                            
000071B8                            Resize_SYZ:				; XREF: Resize_Index
000071B8 7000                       		moveq	#0,d0
000071BA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000071BE D040                       		add.w	d0,d0
000071C0 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000071C4 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000071C8                            ; ===========================================================================
000071C8 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000071CA 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000071CC 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000071CE                            ; ===========================================================================
000071CE                            
000071CE                            Resize_SYZ1:
000071CE 4E75                       		rts	
000071D0                            ; ===========================================================================
000071D0                            
000071D0                            Resize_SYZ2:
000071D0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000071D6 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000071DC 6500                       		bcs.s	locret_71A2
000071DE 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000071E4 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000071EA 6500                       		bcs.s	locret_71A2
000071EC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000071F2                            
000071F2                            locret_71A2:
000071F2 4E75                       		rts	
000071F4                            ; ===========================================================================
000071F4                            
000071F4                            Resize_SYZ3:
000071F4 7000                       		moveq	#0,d0
000071F6 1038 F742                  		move.b	($FFFFF742).w,d0
000071FA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000071FE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007202                            ; ===========================================================================
00007202 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007204 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007206 0000                       		dc.w Resize_SYZ3end-off_71B2
00007208                            ; ===========================================================================
00007208                            
00007208                            Resize_SYZ3main:
00007208 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000720E 6500                       		bcs.s	locret_71CE
00007210 6100 0000                  		bsr.w	SingleObjLoad
00007214 6600                       		bne.s	locret_71CE
00007216 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000721A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000721E                            
0000721E                            locret_71CE:
0000721E 4E75                       		rts	
00007220                            ; ===========================================================================
00007220                            
00007220                            Resize_SYZ3boss:
00007220 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007226 6500                       		bcs.s	locret_7200
00007228 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000722E 6100 0000                  		bsr.w	SingleObjLoad
00007232 6600                       		bne.s	loc_71EC
00007234 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007238 5438 F742                  		addq.b	#2,($FFFFF742).w
0000723C                            
0000723C                            loc_71EC:
0000723C 303C 008C                  		move.w	#$8C,d0
00007240 6100 A01A                  		bsr.w	PlaySound	; play boss music
00007244 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000724A 7011                       		moveq	#$11,d0
0000724C 6000 A23C                  		bra.w	LoadPLC		; load boss patterns
00007250                            ; ===========================================================================
00007250                            
00007250                            locret_7200:
00007250 4E75                       		rts	
00007252                            ; ===========================================================================
00007252                            
00007252                            Resize_SYZ3end:
00007252 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007258 4E75                       		rts	
0000725A                            ; ===========================================================================
0000725A                            ; ---------------------------------------------------------------------------
0000725A                            ; Scrap	Brain Zone dynamic screen resizing
0000725A                            ; ---------------------------------------------------------------------------
0000725A                            
0000725A                            Resize_SBZ:				; XREF: Resize_Index
0000725A 7000                       		moveq	#0,d0
0000725C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007260 D040                       		add.w	d0,d0
00007262 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007266 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000726A                            ; ===========================================================================
0000726A 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000726C 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000726E 0000                       		dc.w Resize_FZ-Resize_SBZx
00007270                            ; ===========================================================================
00007270                            
00007270                            Resize_SBZ1:
00007270 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007276 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000727C 6500                       		bcs.s	locret_7242
0000727E 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007284 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000728A 6500                       		bcs.s	locret_7242
0000728C 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007292                            
00007292                            locret_7242:
00007292 4E75                       		rts	
00007294                            ; ===========================================================================
00007294                            
00007294                            Resize_SBZ2:
00007294 7000                       		moveq	#0,d0
00007296 1038 F742                  		move.b	($FFFFF742).w,d0
0000729A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000729E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000072A2                            ; ===========================================================================
000072A2 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000072A4 0000                       		dc.w Resize_SBZ2boss-off_7252
000072A6 0000                       		dc.w Resize_SBZ2boss2-off_7252
000072A8 0000                       		dc.w Resize_SBZ2end-off_7252
000072AA                            ; ===========================================================================
000072AA                            
000072AA                            Resize_SBZ2main:
000072AA 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000072B0 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000072B6 6500                       		bcs.s	locret_727A
000072B8 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000072BE 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000072C4 6500                       		bcs.s	locret_727A
000072C6 5438 F742                  		addq.b	#2,($FFFFF742).w
000072CA                            
000072CA                            locret_727A:
000072CA 4E75                       		rts	
000072CC                            ; ===========================================================================
000072CC                            
000072CC                            Resize_SBZ2boss:
000072CC 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000072D2 6500                       		bcs.s	locret_7298
000072D4 6100 0000                  		bsr.w	SingleObjLoad
000072D8 6600                       		bne.s	locret_7298
000072DA 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000072DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000072E2 701E                       		moveq	#$1E,d0
000072E4 6000 A1A4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000072E8                            ; ===========================================================================
000072E8                            
000072E8                            locret_7298:
000072E8 4E75                       		rts	
000072EA                            ; ===========================================================================
000072EA                            
000072EA                            Resize_SBZ2boss2:
000072EA 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000072F0 6500                       		bcs.s	loc_72B6
000072F2 6100 0000                  		bsr.w	SingleObjLoad
000072F6 6600                       		bne.s	loc_72B0
000072F8 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000072FC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007300                            
00007300                            loc_72B0:
00007300 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007306                            
00007306                            loc_72B6:
00007306 6000                       		bra.s	loc_72C2
00007308                            ; ===========================================================================
00007308                            
00007308                            Resize_SBZ2end:
00007308 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000730E 6500                       		bcs.s	loc_72C2
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            
00007312                            loc_72C2:
00007312 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007318 4E75                       		rts	
0000731A                            ; ===========================================================================
0000731A                            
0000731A                            Resize_FZ:
0000731A 7000                       		moveq	#0,d0
0000731C 1038 F742                  		move.b	($FFFFF742).w,d0
00007320 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007324 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007328                            ; ===========================================================================
00007328 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000732C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007330 0000                       		dc.w Resize_FZend2-off_72D8
00007332                            ; ===========================================================================
00007332                            
00007332                            Resize_FZmain:
00007332 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007338 6500                       		bcs.s	loc_72F4
0000733A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733E 701F                       		moveq	#$1F,d0
00007340 6100 A148                  		bsr.w	LoadPLC		; load FZ boss patterns
00007344                            
00007344                            loc_72F4:
00007344 60CC                       		bra.s	loc_72C2
00007346                            ; ===========================================================================
00007346                            
00007346                            Resize_FZboss:
00007346 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000734C 6500                       		bcs.s	loc_7312
0000734E 6100 0000                  		bsr.w	SingleObjLoad
00007352 6600                       		bne.s	loc_7312
00007354 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007358 5438 F742                  		addq.b	#2,($FFFFF742).w
0000735C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007362                            
00007362                            loc_7312:
00007362 60AE                       		bra.s	loc_72C2
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_FZend:
00007364 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000736A 6500                       		bcs.s	loc_7320
0000736C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007370                            
00007370                            loc_7320:
00007370 60A0                       		bra.s	loc_72C2
00007372                            ; ===========================================================================
00007372                            
00007372                            locret_7322:
00007372 4E75                       		rts	
00007374                            ; ===========================================================================
00007374                            
00007374                            Resize_FZend2:
00007374 609C                       		bra.s	loc_72C2
00007376                            ; ===========================================================================
00007376                            ; ---------------------------------------------------------------------------
00007376                            ; Ending sequence dynamic screen resizing (empty)
00007376                            ; ---------------------------------------------------------------------------
00007376                            
00007376                            Resize_Ending:				; XREF: Resize_Index
00007376 4E75                       		rts	
00007378                            ; ===========================================================================
00007378                            ; ---------------------------------------------------------------------------
00007378                            ; Object 11 - GHZ bridge
00007378                            ; ---------------------------------------------------------------------------
00007378                            
00007378                            Obj11:					; XREF: Obj_Index
00007378 7000                       		moveq	#0,d0
0000737A 1028 0024                  		move.b	$24(a0),d0
0000737E 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007382 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007386                            ; ===========================================================================
00007386 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000738A 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000738E 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007392                            ; ===========================================================================
00007392                            
00007392                            Obj11_Main:				; XREF: Obj11_Index
00007392 5428 0024                  		addq.b	#2,$24(a0)
00007396 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000739E 317C 438E 0002             		move.w	#$438E,2(a0)
000073A4 117C 0004 0001             		move.b	#4,1(a0)
000073AA 117C 0003 0018             		move.b	#3,$18(a0)
000073B0 117C 0080 0019             		move.b	#$80,$19(a0)
000073B6 3428 000C                  		move.w	$C(a0),d2
000073BA 3628 0008                  		move.w	8(a0),d3
000073BE 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000073C0 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000073C4 7200                       		moveq	#0,d1
000073C6 1212                       		move.b	(a2),d1		; copy a2 to d1
000073C8 14FC 0000                  		move.b	#0,(a2)+
000073CC 3001                       		move.w	d1,d0
000073CE E248                       		lsr.w	#1,d0
000073D0 E948                       		lsl.w	#4,d0
000073D2 9640                       		sub.w	d0,d3
000073D4 5501                       		subq.b	#2,d1
000073D6 6500                       		bcs.s	Obj11_Action
000073D8                            
000073D8                            Obj11_MakeBdg:
000073D8 6100 0000                  		bsr.w	SingleObjLoad
000073DC 6600                       		bne.s	Obj11_Action
000073DE 5228 0028                  		addq.b	#1,$28(a0)
000073E2 B668 0008                  		cmp.w	8(a0),d3
000073E6 6600                       		bne.s	loc_73B8
000073E8 0643 0010                  		addi.w	#$10,d3
000073EC 3142 000C                  		move.w	d2,$C(a0)
000073F0 3142 003C                  		move.w	d2,$3C(a0)
000073F4 3A08                       		move.w	a0,d5
000073F6 0445 D000                  		subi.w	#-$3000,d5
000073FA EC4D                       		lsr.w	#6,d5
000073FC 0245 007F                  		andi.w	#$7F,d5
00007400 14C5                       		move.b	d5,(a2)+
00007402 5228 0028                  		addq.b	#1,$28(a0)
00007406                            
00007406                            loc_73B8:				; XREF: ROM:00007398j
00007406 3A09                       		move.w	a1,d5
00007408 0445 D000                  		subi.w	#-$3000,d5
0000740C EC4D                       		lsr.w	#6,d5
0000740E 0245 007F                  		andi.w	#$7F,d5
00007412 14C5                       		move.b	d5,(a2)+
00007414 137C 000A 0024             		move.b	#$A,$24(a1)
0000741A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000741C 3342 000C                  		move.w	d2,$C(a1)
00007420 3342 003C                  		move.w	d2,$3C(a1)
00007424 3343 0008                  		move.w	d3,8(a1)
00007428 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007430 337C 438E 0002             		move.w	#$438E,2(a1)
00007436 137C 0004 0001             		move.b	#4,1(a1)
0000743C 137C 0003 0018             		move.b	#3,$18(a1)
00007442 137C 0008 0019             		move.b	#8,$19(a1)
00007448 0643 0010                  		addi.w	#$10,d3
0000744C 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007450                            
00007450                            Obj11_Action:				; XREF: Obj11_Index
00007450 6100                       		bsr.s	Obj11_Solid
00007452 4A28 003E                  		tst.b	$3E(a0)
00007456 6700                       		beq.s	Obj11_Display
00007458 5928 003E                  		subq.b	#4,$3E(a0)
0000745C 6100 0000                  		bsr.w	Obj11_Bend
00007460                            
00007460                            Obj11_Display:
00007460 6100 0000                  		bsr.w	DisplaySprite
00007464 6000 0000                  		bra.w	Obj11_ChkDel
00007468                            
00007468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007468                            
00007468                            
00007468                            Obj11_Solid:				; XREF: Obj11_Action
00007468 7200                       		moveq	#0,d1
0000746A 1228 0028                  		move.b	$28(a0),d1
0000746E E749                       		lsl.w	#3,d1
00007470 3401                       		move.w	d1,d2
00007472 5041                       		addq.w	#8,d1
00007474 D442                       		add.w	d2,d2
00007476 43F8 D000                  		lea	($FFFFD000).w,a1
0000747A 4A69 0012                  		tst.w	$12(a1)
0000747E 6B00 0000                  		bmi.w	locret_751E
00007482 3029 0008                  		move.w	8(a1),d0
00007486 9068 0008                  		sub.w	8(a0),d0
0000748A D041                       		add.w	d1,d0
0000748C 6B00 0000                  		bmi.w	locret_751E
00007490 B042                       		cmp.w	d2,d0
00007492 6400 0000                  		bcc.w	locret_751E
00007496 6000                       		bra.s	Platform2
00007498                            ; End of function Obj11_Solid
00007498                            
00007498                            ; ---------------------------------------------------------------------------
00007498                            ; Platform subroutine
00007498                            ; ---------------------------------------------------------------------------
00007498                            
00007498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007498                            
00007498                            
00007498                            PlatformObject:
00007498 43F8 D000                  		lea	($FFFFD000).w,a1
0000749C 4A69 0012                  		tst.w	$12(a1)
000074A0 6B00 0000                  		bmi.w	locret_751E
000074A4 3029 0008                  		move.w	8(a1),d0
000074A8 9068 0008                  		sub.w	8(a0),d0
000074AC D041                       		add.w	d1,d0
000074AE 6B00 0000                  		bmi.w	locret_751E
000074B2 D241                       		add.w	d1,d1
000074B4 B041                       		cmp.w	d1,d0
000074B6 6400 0000                  		bcc.w	locret_751E
000074BA                            
000074BA                            Platform2:
000074BA 3028 000C                  		move.w	$C(a0),d0
000074BE 5140                       		subq.w	#8,d0
000074C0                            
000074C0                            Platform3:
000074C0 3429 000C                  		move.w	$C(a1),d2
000074C4 1229 0016                  		move.b	$16(a1),d1
000074C8 4881                       		ext.w	d1
000074CA D242                       		add.w	d2,d1
000074CC 5841                       		addq.w	#4,d1
000074CE 9041                       		sub.w	d1,d0
000074D0 6200 0000                  		bhi.w	locret_751E
000074D4 0C40 FFF0                  		cmpi.w	#-$10,d0
000074D8 6500 0000                  		bcs.w	locret_751E
000074DC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000074E0 6B00 0000                  		bmi.w	locret_751E
000074E4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000074EA 6400 0000                  		bcc.w	locret_751E
000074EE D440                       		add.w	d0,d2
000074F0 5642                       		addq.w	#3,d2
000074F2 3342 000C                  		move.w	d2,$C(a1)
000074F6 5428 0024                  		addq.b	#2,$24(a0)
000074FA                            
000074FA                            loc_74AE:
000074FA 0829 0003 0022             		btst	#3,$22(a1)
00007500 6700                       		beq.s	loc_74DC
00007502 7000                       		moveq	#0,d0
00007504 1029 003D                  		move.b	$3D(a1),d0
00007508 ED48                       		lsl.w	#6,d0
0000750A 0680 00FF D000             		addi.l	#$FFD000,d0
00007510 2440                       		movea.l	d0,a2
00007512 08AA 0003 0022             		bclr	#3,$22(a2)
00007518 422A 0025                  		clr.b	$25(a2)
0000751C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007522 6600                       		bne.s	loc_74DC
00007524 552A 0024                  		subq.b	#2,$24(a2)
00007528                            
00007528                            loc_74DC:
00007528 3008                       		move.w	a0,d0
0000752A 0440 D000                  		subi.w	#-$3000,d0
0000752E EC48                       		lsr.w	#6,d0
00007530 0240 007F                  		andi.w	#$7F,d0
00007534 1340 003D                  		move.b	d0,$3D(a1)
00007538 137C 0000 0026             		move.b	#0,$26(a1)
0000753E 337C 0000 0012             		move.w	#0,$12(a1)
00007544 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000754A 0829 0001 0022             		btst	#1,$22(a1)
00007550 6700                       		beq.s	loc_7512
00007552 2F08                       		move.l	a0,-(sp)
00007554 2049                       		movea.l	a1,a0
00007556 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000755C 205F                       		movea.l	(sp)+,a0
0000755E                            
0000755E                            loc_7512:
0000755E 08E9 0003 0022             		bset	#3,$22(a1)
00007564 08E8 0003 0022             		bset	#3,$22(a0)
0000756A                            
0000756A                            locret_751E:
0000756A 4E75                       		rts	
0000756C                            ; End of function PlatformObject
0000756C                            
0000756C                            ; ---------------------------------------------------------------------------
0000756C                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000756C                            ; ---------------------------------------------------------------------------
0000756C                            
0000756C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000756C                            
0000756C                            
0000756C                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000756C 43F8 D000                  		lea	($FFFFD000).w,a1
00007570 4A69 0012                  		tst.w	$12(a1)
00007574 6B00 FFF4                  		bmi.w	locret_751E
00007578 3029 0008                  		move.w	8(a1),d0
0000757C 9068 0008                  		sub.w	8(a0),d0
00007580 D041                       		add.w	d1,d0
00007582 6BE6                       		bmi.s	locret_751E
00007584 D241                       		add.w	d1,d1
00007586 B041                       		cmp.w	d1,d0
00007588 64E0                       		bcc.s	locret_751E
0000758A 0828 0000 0001             		btst	#0,1(a0)
00007590 6700                       		beq.s	loc_754A
00007592 4640                       		not.w	d0
00007594 D041                       		add.w	d1,d0
00007596                            
00007596                            loc_754A:
00007596 E248                       		lsr.w	#1,d0
00007598 7600                       		moveq	#0,d3
0000759A 1632 0000                  		move.b	(a2,d0.w),d3
0000759E 3028 000C                  		move.w	$C(a0),d0
000075A2 9043                       		sub.w	d3,d0
000075A4 6000 FF1A                  		bra.w	Platform3
000075A8                            ; End of function SlopeObject
000075A8                            
000075A8                            
000075A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A8                            
000075A8                            
000075A8                            Obj15_Solid:				; XREF: Obj15_SetSolid
000075A8 43F8 D000                  		lea	($FFFFD000).w,a1
000075AC 4A69 0012                  		tst.w	$12(a1)
000075B0 6B00 FFB8                  		bmi.w	locret_751E
000075B4 3029 0008                  		move.w	8(a1),d0
000075B8 9068 0008                  		sub.w	8(a0),d0
000075BC D041                       		add.w	d1,d0
000075BE 6B00 FFAA                  		bmi.w	locret_751E
000075C2 D241                       		add.w	d1,d1
000075C4 B041                       		cmp.w	d1,d0
000075C6 6400 FFA2                  		bcc.w	locret_751E
000075CA 3028 000C                  		move.w	$C(a0),d0
000075CE 9043                       		sub.w	d3,d0
000075D0 6000 FEEE                  		bra.w	Platform3
000075D4                            ; End of function Obj15_Solid
000075D4                            
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Obj11_Action2:				; XREF: Obj11_Index
000075D4 6100                       		bsr.s	Obj11_WalkOff
000075D6 6100 0000                  		bsr.w	DisplaySprite
000075DA 6000 0000                  		bra.w	Obj11_ChkDel
000075DE                            
000075DE                            ; ---------------------------------------------------------------------------
000075DE                            ; Subroutine allowing Sonic to walk off a bridge
000075DE                            ; ---------------------------------------------------------------------------
000075DE                            
000075DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075DE                            
000075DE                            
000075DE                            Obj11_WalkOff:				; XREF: Obj11_Action2
000075DE 7200                       		moveq	#0,d1
000075E0 1228 0028                  		move.b	$28(a0),d1
000075E4 E749                       		lsl.w	#3,d1
000075E6 3401                       		move.w	d1,d2
000075E8 5041                       		addq.w	#8,d1
000075EA 6100                       		bsr.s	ExitPlatform2
000075EC 6400                       		bcc.s	locret_75BE
000075EE E848                       		lsr.w	#4,d0
000075F0 1140 003F                  		move.b	d0,$3F(a0)
000075F4 1028 003E                  		move.b	$3E(a0),d0
000075F8 0C00 0040                  		cmpi.b	#$40,d0
000075FC 6700                       		beq.s	loc_75B6
000075FE 5828 003E                  		addq.b	#4,$3E(a0)
00007602                            
00007602                            loc_75B6:
00007602 6100 0000                  		bsr.w	Obj11_Bend
00007606 6100 0000                  		bsr.w	Obj11_MoveSonic
0000760A                            
0000760A                            locret_75BE:
0000760A 4E75                       		rts	
0000760C                            ; End of function Obj11_WalkOff
0000760C                            
0000760C                            ; ---------------------------------------------------------------------------
0000760C                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000760C                            ; ---------------------------------------------------------------------------
0000760C                            
0000760C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000760C                            
0000760C                            
0000760C                            ExitPlatform:
0000760C 3401                       		move.w	d1,d2
0000760E                            
0000760E                            ExitPlatform2:
0000760E D442                       		add.w	d2,d2
00007610 43F8 D000                  		lea	($FFFFD000).w,a1
00007614 0829 0001 0022             		btst	#1,$22(a1)
0000761A 6600                       		bne.s	loc_75E0
0000761C 3029 0008                  		move.w	8(a1),d0
00007620 9068 0008                  		sub.w	8(a0),d0
00007624 D041                       		add.w	d1,d0
00007626 6B00                       		bmi.s	loc_75E0
00007628 B042                       		cmp.w	d2,d0
0000762A 6500                       		bcs.s	locret_75F2
0000762C                            
0000762C                            loc_75E0:
0000762C 08A9 0003 0022             		bclr	#3,$22(a1)
00007632 117C 0002 0024             		move.b	#2,$24(a0)
00007638 08A8 0003 0022             		bclr	#3,$22(a0)
0000763E                            
0000763E                            locret_75F2:
0000763E 4E75                       		rts	
00007640                            ; End of function ExitPlatform
00007640                            
00007640                            
00007640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007640                            
00007640                            
00007640                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007640 7000                       		moveq	#0,d0
00007642 1028 003F                  		move.b	$3F(a0),d0
00007646 1030 0029                  		move.b	$29(a0,d0.w),d0
0000764A ED48                       		lsl.w	#6,d0
0000764C 0680 00FF D000             		addi.l	#$FFD000,d0
00007652 2440                       		movea.l	d0,a2
00007654 43F8 D000                  		lea	($FFFFD000).w,a1
00007658 302A 000C                  		move.w	$C(a2),d0
0000765C 5140                       		subq.w	#8,d0
0000765E 7200                       		moveq	#0,d1
00007660 1229 0016                  		move.b	$16(a1),d1
00007664 9041                       		sub.w	d1,d0
00007666 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000766A 4E75                       		rts	
0000766C                            ; End of function Obj11_MoveSonic
0000766C                            
0000766C                            
0000766C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000766C                            
0000766C                            
0000766C                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000766C 1028 003E                  		move.b	$3E(a0),d0
00007670 6100 B27A                  		bsr.w	CalcSine
00007674 3800                       		move.w	d0,d4
00007676 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000767C 7000                       		moveq	#0,d0
0000767E 1028 0028                  		move.b	$28(a0),d0
00007682 E948                       		lsl.w	#4,d0
00007684 7600                       		moveq	#0,d3
00007686 1628 003F                  		move.b	$3F(a0),d3
0000768A 3403                       		move.w	d3,d2
0000768C D640                       		add.w	d0,d3
0000768E 7A00                       		moveq	#0,d5
00007690 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007696 1A35 3000                  		move.b	(a5,d3.w),d5
0000769A 0243 000F                  		andi.w	#$F,d3
0000769E E94B                       		lsl.w	#4,d3
000076A0 47F4 3000                  		lea	(a4,d3.w),a3
000076A4 45E8 0029                  		lea	$29(a0),a2
000076A8                            
000076A8                            loc_765C:
000076A8 7000                       		moveq	#0,d0
000076AA 101A                       		move.b	(a2)+,d0
000076AC ED48                       		lsl.w	#6,d0
000076AE 0680 00FF D000             		addi.l	#$FFD000,d0
000076B4 2240                       		movea.l	d0,a1
000076B6 7000                       		moveq	#0,d0
000076B8 101B                       		move.b	(a3)+,d0
000076BA 5240                       		addq.w	#1,d0
000076BC C0C5                       		mulu.w	d5,d0
000076BE C0C4                       		mulu.w	d4,d0
000076C0 4840                       		swap	d0
000076C2 D069 003C                  		add.w	$3C(a1),d0
000076C6 3340 000C                  		move.w	d0,$C(a1)
000076CA 51CA FFDC                  		dbf	d2,loc_765C
000076CE 7000                       		moveq	#0,d0
000076D0 1028 0028                  		move.b	$28(a0),d0
000076D4 7600                       		moveq	#0,d3
000076D6 1628 003F                  		move.b	$3F(a0),d3
000076DA 5203                       		addq.b	#1,d3
000076DC 9600                       		sub.b	d0,d3
000076DE 4403                       		neg.b	d3
000076E0 6B00                       		bmi.s	locret_76CA
000076E2 3403                       		move.w	d3,d2
000076E4 E94B                       		lsl.w	#4,d3
000076E6 47F4 3000                  		lea	(a4,d3.w),a3
000076EA D6C2                       		adda.w	d2,a3
000076EC 5342                       		subq.w	#1,d2
000076EE 6500                       		bcs.s	locret_76CA
000076F0                            
000076F0                            loc_76A4:
000076F0 7000                       		moveq	#0,d0
000076F2 101A                       		move.b	(a2)+,d0
000076F4 ED48                       		lsl.w	#6,d0
000076F6 0680 00FF D000             		addi.l	#$FFD000,d0
000076FC 2240                       		movea.l	d0,a1
000076FE 7000                       		moveq	#0,d0
00007700 1023                       		move.b	-(a3),d0
00007702 5240                       		addq.w	#1,d0
00007704 C0C5                       		mulu.w	d5,d0
00007706 C0C4                       		mulu.w	d4,d0
00007708 4840                       		swap	d0
0000770A D069 003C                  		add.w	$3C(a1),d0
0000770E 3340 000C                  		move.w	d0,$C(a1)
00007712 51CA FFDC                  		dbf	d2,loc_76A4
00007716                            
00007716                            locret_76CA:
00007716 4E75                       		rts	
00007718                            ; End of function Obj11_Bend
00007718                            
00007718                            ; ===========================================================================
00007718                            ; ---------------------------------------------------------------------------
00007718                            ; GHZ bridge-bending data
00007718                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007718                            ; ---------------------------------------------------------------------------
00007718                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007828                            		even
00007828                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007928                            		even
00007928                            
00007928                            ; ===========================================================================
00007928                            
00007928                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007928 3028 0008                  		move.w	8(a0),d0
0000792C 0240 FF80                  		andi.w	#$FF80,d0
00007930 3238 F700                  		move.w	($FFFFF700).w,d1
00007934 0441 0080                  		subi.w	#$80,d1
00007938 0241 FF80                  		andi.w	#$FF80,d1
0000793C 9041                       		sub.w	d1,d0
0000793E 0C40 0280                  		cmpi.w	#$280,d0
00007942 6200 0000                  		bhi.w	Obj11_DelAll
00007946 4E75                       		rts	
00007948                            ; ===========================================================================
00007948                            
00007948                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007948 7400                       		moveq	#0,d2
0000794A 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000794E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007950 5302                       		subq.b	#1,d2		; subtract 1
00007952 6500                       		bcs.s	Obj11_Delete
00007954                            
00007954                            Obj11_DelLoop:
00007954 7000                       		moveq	#0,d0
00007956 101A                       		move.b	(a2)+,d0
00007958 ED48                       		lsl.w	#6,d0
0000795A 0680 00FF D000             		addi.l	#$FFD000,d0
00007960 2240                       		movea.l	d0,a1
00007962 B048                       		cmp.w	a0,d0
00007964 6700                       		beq.s	loc_791E
00007966 6100 0000                  		bsr.w	DeleteObject2
0000796A                            
0000796A                            loc_791E:
0000796A 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000796E                            
0000796E                            Obj11_Delete:
0000796E 6100 0000                  		bsr.w	DeleteObject
00007972 4E75                       		rts	
00007974                            ; ===========================================================================
00007974                            
00007974                            Obj11_Delete2:				; XREF: Obj11_Index
00007974 6100 0000                  		bsr.w	DeleteObject
00007978 4E75                       		rts	
0000797A                            ; ===========================================================================
0000797A                            
0000797A                            Obj11_Display2:				; XREF: Obj11_Index
0000797A 6100 0000                  		bsr.w	DisplaySprite
0000797E 4E75                       		rts	
00007980                            ; ===========================================================================
00007980                            ; ---------------------------------------------------------------------------
00007980                            ; Sprite mappings - GHZ	bridge
00007980                            ; ---------------------------------------------------------------------------
00007980                            Map_obj11:
00007980                            	include "_maps\obj11.asm"
00007980                            ; ---------------------------------------------------------------------------
00007980                            ; Sprite mappings - GHZ	bridge
00007980                            ; ---------------------------------------------------------------------------
00007980 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007984 0000                       		dc.w byte_794B-Map_obj11
00007986 01                         byte_793A:	dc.b 1
00007987 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000798C 02                         byte_7940:	dc.b 2
0000798D F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007992 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007997 01                         byte_794B:	dc.b 1
00007998 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000799E 00                         		even
0000799E 00                         		even
0000799E                            
0000799E                            ; ===========================================================================
0000799E                            ; ---------------------------------------------------------------------------
0000799E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000799E                            ;	    - spiked ball on a chain (SBZ)
0000799E                            ; ---------------------------------------------------------------------------
0000799E                            
0000799E                            Obj15:					; XREF: Obj_Index
0000799E 7000                       		moveq	#0,d0
000079A0 1028 0024                  		move.b	$24(a0),d0
000079A4 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000079A8 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000079AC                            ; ===========================================================================
000079AC 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000079B0 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000079B4 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000079B8 0000                       		dc.w Obj15_Action-Obj15_Index
000079BA                            ; ===========================================================================
000079BA                            
000079BA                            Obj15_Main:				; XREF: Obj15_Index
000079BA 5428 0024                  		addq.b	#2,$24(a0)
000079BE 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000079C6 317C 4380 0002             		move.w	#$4380,2(a0)
000079CC 117C 0004 0001             		move.b	#4,1(a0)
000079D2 117C 0003 0018             		move.b	#3,$18(a0)
000079D8 117C 0018 0019             		move.b	#$18,$19(a0)
000079DE 117C 0008 0016             		move.b	#8,$16(a0)
000079E4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000079EA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000079F0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000079F6 6600                       		bne.s	Obj15_NotSLZ
000079F8 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007A00 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007A06 117C 0020 0019             		move.b	#$20,$19(a0)
00007A0C 117C 0010 0016             		move.b	#$10,$16(a0)
00007A12 117C 0099 0020             		move.b	#$99,$20(a0)
00007A18                            
00007A18                            Obj15_NotSLZ:
00007A18 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007A1E 6600                       		bne.s	Obj15_SetLength
00007A20 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007A28 317C 0391 0002             		move.w	#$391,2(a0)
00007A2E 117C 0018 0019             		move.b	#$18,$19(a0)
00007A34 117C 0018 0016             		move.b	#$18,$16(a0)
00007A3A 117C 0086 0020             		move.b	#$86,$20(a0)
00007A40 117C 000C 0024             		move.b	#$C,$24(a0)
00007A46                            
00007A46                            Obj15_SetLength:
00007A46 1810                       		move.b	0(a0),d4
00007A48 7200                       		moveq	#0,d1
00007A4A 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007A4E 1212                       		move.b	(a2),d1		; move a2 to d1
00007A50 3F01                       		move.w	d1,-(sp)
00007A52 0241 000F                  		andi.w	#$F,d1
00007A56 14FC 0000                  		move.b	#0,(a2)+
00007A5A 3601                       		move.w	d1,d3
00007A5C E94B                       		lsl.w	#4,d3
00007A5E 5003                       		addq.b	#8,d3
00007A60 1143 003C                  		move.b	d3,$3C(a0)
00007A64 5103                       		subq.b	#8,d3
00007A66 4A28 001A                  		tst.b	$1A(a0)
00007A6A 6700                       		beq.s	Obj15_MakeChain
00007A6C 5003                       		addq.b	#8,d3
00007A6E 5341                       		subq.w	#1,d1
00007A70                            
00007A70                            Obj15_MakeChain:
00007A70 6100 0000                  		bsr.w	SingleObjLoad
00007A74 6600                       		bne.s	loc_7A92
00007A76 5228 0028                  		addq.b	#1,$28(a0)
00007A7A 3A09                       		move.w	a1,d5
00007A7C 0445 D000                  		subi.w	#-$3000,d5
00007A80 EC4D                       		lsr.w	#6,d5
00007A82 0245 007F                  		andi.w	#$7F,d5
00007A86 14C5                       		move.b	d5,(a2)+
00007A88 137C 000A 0024             		move.b	#$A,$24(a1)
00007A8E 1284                       		move.b	d4,0(a1)	; load swinging	object
00007A90 2368 0004 0004             		move.l	4(a0),4(a1)
00007A96 3368 0002 0002             		move.w	2(a0),2(a1)
00007A9C 08A9 0006 0002             		bclr	#6,2(a1)
00007AA2 137C 0004 0001             		move.b	#4,1(a1)
00007AA8 137C 0004 0018             		move.b	#4,$18(a1)
00007AAE 137C 0008 0019             		move.b	#8,$19(a1)
00007AB4 137C 0001 001A             		move.b	#1,$1A(a1)
00007ABA 1343 003C                  		move.b	d3,$3C(a1)
00007ABE 0403 0010                  		subi.b	#$10,d3
00007AC2 6400                       		bcc.s	loc_7A8E
00007AC4 137C 0002 001A             		move.b	#2,$1A(a1)
00007ACA 137C 0003 0018             		move.b	#3,$18(a1)
00007AD0 08E9 0006 0002             		bset	#6,2(a1)
00007AD6                            
00007AD6                            loc_7A8E:
00007AD6 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007ADA                            
00007ADA                            loc_7A92:
00007ADA 3A08                       		move.w	a0,d5
00007ADC 0445 D000                  		subi.w	#-$3000,d5
00007AE0 EC4D                       		lsr.w	#6,d5
00007AE2 0245 007F                  		andi.w	#$7F,d5
00007AE6 14C5                       		move.b	d5,(a2)+
00007AE8 317C 4080 0026             		move.w	#$4080,$26(a0)
00007AEE 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007AF4 321F                       		move.w	(sp)+,d1
00007AF6 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007AFA 6700                       		beq.s	loc_7AD4	; if not, branch
00007AFC 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007B04 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007B0A 117C 0001 001A             		move.b	#1,$1A(a0)
00007B10 117C 0002 0018             		move.b	#2,$18(a0)
00007B16 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007B1C                            
00007B1C                            loc_7AD4:
00007B1C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007B22 6700                       		beq.s	Obj15_Action	; if yes, branch
00007B24                            
00007B24                            Obj15_SetSolid:				; XREF: Obj15_Index
00007B24 7200                       		moveq	#0,d1
00007B26 1228 0019                  		move.b	$19(a0),d1
00007B2A 7600                       		moveq	#0,d3
00007B2C 1628 0016                  		move.b	$16(a0),d3
00007B30 6100 FA76                  		bsr.w	Obj15_Solid
00007B34                            
00007B34                            Obj15_Action:				; XREF: Obj15_Index
00007B34 6100 0000                  		bsr.w	Obj15_Move
00007B38 6100 0000                  		bsr.w	DisplaySprite
00007B3C 6000 0000                  		bra.w	Obj15_ChkDel
00007B40                            ; ===========================================================================
00007B40                            
00007B40                            Obj15_Action2:				; XREF: Obj15_Index
00007B40 7200                       		moveq	#0,d1
00007B42 1228 0019                  		move.b	$19(a0),d1
00007B46 6100 FAC4                  		bsr.w	ExitPlatform
00007B4A 3F28 0008                  		move.w	8(a0),-(sp)
00007B4E 6100 0000                  		bsr.w	Obj15_Move
00007B52 341F                       		move.w	(sp)+,d2
00007B54 7600                       		moveq	#0,d3
00007B56 1628 0016                  		move.b	$16(a0),d3
00007B5A 5203                       		addq.b	#1,d3
00007B5C 6100 0000                  		bsr.w	MvSonicOnPtfm
00007B60 6100 0000                  		bsr.w	DisplaySprite
00007B64 6000 0000                  		bra.w	Obj15_ChkDel
00007B68                            
00007B68 4E75                       		rts
00007B6A                            
00007B6A                            ; ---------------------------------------------------------------------------
00007B6A                            ; Subroutine to	change Sonic's position with a platform
00007B6A                            ; ---------------------------------------------------------------------------
00007B6A                            
00007B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B6A                            
00007B6A                            
00007B6A                            MvSonicOnPtfm:
00007B6A 43F8 D000                  		lea	($FFFFD000).w,a1
00007B6E 3028 000C                  		move.w	$C(a0),d0
00007B72 9043                       		sub.w	d3,d0
00007B74 6000                       		bra.s	MvSonic2
00007B76                            ; End of function MvSonicOnPtfm
00007B76                            
00007B76                            ; ---------------------------------------------------------------------------
00007B76                            ; Subroutine to	change Sonic's position with a platform
00007B76                            ; ---------------------------------------------------------------------------
00007B76                            
00007B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B76                            
00007B76                            
00007B76                            MvSonicOnPtfm2:
00007B76 43F8 D000                  		lea	($FFFFD000).w,a1
00007B7A 3028 000C                  		move.w	$C(a0),d0
00007B7E 0440 0009                  		subi.w	#9,d0
00007B82                            
00007B82                            MvSonic2:
00007B82 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007B86 6B00                       		bmi.s	locret_7B62
00007B88 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007B8E 6400                       		bcc.s	locret_7B62
00007B90 4A78 FE08                  		tst.w	($FFFFFE08).w
00007B94 6600                       		bne.s	locret_7B62
00007B96 9468 0008                  		sub.w	8(a0),d2
00007B9A 9569 0008                  		sub.w	d2,8(a1)
00007B9E 7200                       		moveq	#0,d1
00007BA0 1229 0016                  		move.b	$16(a1),d1
00007BA4 9041                       		sub.w	d1,d0
00007BA6 B069 000C                  		cmp.w	$C(a1),d0
00007BAA 6600                       		bne.s	@frustrated
00007BAC 4A42                       		tst.w	d2
00007BAE 6600                       		bne.s	@frustrated
00007BB0 3340 000C                  		move.w	d0,$C(a1)	
00007BB4 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00007BB8 6700                       		beq.s	@resetwaittimer
00007BBA 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00007BBE 6600                       		bne.s	locret_7B62
00007BC0 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00007BC4 6000                       		bra.s	@frustrated2
00007BC6                            
00007BC6                            	@frustrated:
00007BC6 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00007BCC 3340 000C                  		move.w	d0,$C(a1)
00007BD0 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00007BD4 6600                       		bne.s	@subtract
00007BD6                            
00007BD6                            	@frustrated2:
00007BD6 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00007BDC 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00007BE2 4E75                       		rts
00007BE4                            
00007BE4                            	@subtract:
00007BE4 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00007BE8 4E75                       		rts
00007BEA                            
00007BEA                            	@resetwaittimer:
00007BEA 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00007BF0                            
00007BF0                            locret_7B62:
00007BF0 4E75                       		rts	
00007BF2                            ; End of function MvSonicOnPtfm2
00007BF2                            
00007BF2                            
00007BF2                            CheckIfMoving:
00007BF2                            
00007BF2                            
00007BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF2                            
00007BF2                            
00007BF2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007BF2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007BF6 323C 0080                  		move.w	#$80,d1
00007BFA 0828 0000 0022             		btst	#0,$22(a0)
00007C00 6700                       		beq.s	loc_7B78
00007C02 4440                       		neg.w	d0
00007C04 D041                       		add.w	d1,d0
00007C06                            
00007C06                            loc_7B78:
00007C06 6000                       		bra.s	Obj15_Move2
00007C08                            ; End of function Obj15_Move
00007C08                            
00007C08                            
00007C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C08                            
00007C08                            
00007C08                            Obj48_Move:				; XREF: Obj48_Display2
00007C08 4A28 003D                  		tst.b	$3D(a0)
00007C0C 6600                       		bne.s	loc_7B9C
00007C0E 3028 003E                  		move.w	$3E(a0),d0
00007C12 5040                       		addq.w	#8,d0
00007C14 3140 003E                  		move.w	d0,$3E(a0)
00007C18 D168 0026                  		add.w	d0,$26(a0)
00007C1C 0C40 0200                  		cmpi.w	#$200,d0
00007C20 6600                       		bne.s	loc_7BB6
00007C22 117C 0001 003D             		move.b	#1,$3D(a0)
00007C28 6000                       		bra.s	loc_7BB6
00007C2A                            ; ===========================================================================
00007C2A                            
00007C2A                            loc_7B9C:
00007C2A 3028 003E                  		move.w	$3E(a0),d0
00007C2E 5140                       		subq.w	#8,d0
00007C30 3140 003E                  		move.w	d0,$3E(a0)
00007C34 D168 0026                  		add.w	d0,$26(a0)
00007C38 0C40 FE00                  		cmpi.w	#-$200,d0
00007C3C 6600                       		bne.s	loc_7BB6
00007C3E 117C 0000 003D             		move.b	#0,$3D(a0)
00007C44                            
00007C44                            loc_7BB6:
00007C44 1028 0026                  		move.b	$26(a0),d0
00007C48                            ; End of function Obj48_Move
00007C48                            
00007C48                            
00007C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C48                            
00007C48                            
00007C48                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007C48 6100 ACA2                  		bsr.w	CalcSine
00007C4C 3428 0038                  		move.w	$38(a0),d2
00007C50 3628 003A                  		move.w	$3A(a0),d3
00007C54 45E8 0028                  		lea	$28(a0),a2
00007C58 7C00                       		moveq	#0,d6
00007C5A 1C1A                       		move.b	(a2)+,d6
00007C5C                            
00007C5C                            loc_7BCE:
00007C5C 7800                       		moveq	#0,d4
00007C5E 181A                       		move.b	(a2)+,d4
00007C60 ED4C                       		lsl.w	#6,d4
00007C62 0684 00FF D000             		addi.l	#$FFD000,d4
00007C68 2244                       		movea.l	d4,a1
00007C6A 7800                       		moveq	#0,d4
00007C6C 1829 003C                  		move.b	$3C(a1),d4
00007C70 2A04                       		move.l	d4,d5
00007C72 C9C0                       		muls.w	d0,d4
00007C74 E084                       		asr.l	#8,d4
00007C76 CBC1                       		muls.w	d1,d5
00007C78 E085                       		asr.l	#8,d5
00007C7A D842                       		add.w	d2,d4
00007C7C DA43                       		add.w	d3,d5
00007C7E 3344 000C                  		move.w	d4,$C(a1)
00007C82 3345 0008                  		move.w	d5,8(a1)
00007C86 51CE FFD4                  		dbf	d6,loc_7BCE
00007C8A 4E75                       		rts	
00007C8C                            ; End of function Obj15_Move2
00007C8C                            
00007C8C                            ; ===========================================================================
00007C8C                            
00007C8C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007C8C 3028 003A                  		move.w	$3A(a0),d0
00007C90 0240 FF80                  		andi.w	#$FF80,d0
00007C94 3238 F700                  		move.w	($FFFFF700).w,d1
00007C98 0441 0080                  		subi.w	#$80,d1
00007C9C 0241 FF80                  		andi.w	#$FF80,d1
00007CA0 9041                       		sub.w	d1,d0
00007CA2 0C40 0280                  		cmpi.w	#$280,d0
00007CA6 6200 0000                  		bhi.w	Obj15_DelAll
00007CAA 4E75                       		rts	
00007CAC                            ; ===========================================================================
00007CAC                            
00007CAC                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007CAC 7400                       		moveq	#0,d2
00007CAE 45E8 0028                  		lea	$28(a0),a2
00007CB2 141A                       		move.b	(a2)+,d2
00007CB4                            
00007CB4                            Obj15_DelLoop:
00007CB4 7000                       		moveq	#0,d0
00007CB6 101A                       		move.b	(a2)+,d0
00007CB8 ED48                       		lsl.w	#6,d0
00007CBA 0680 00FF D000             		addi.l	#$FFD000,d0
00007CC0 2240                       		movea.l	d0,a1
00007CC2 6100 0000                  		bsr.w	DeleteObject2
00007CC6 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007CCA 4E75                       		rts	
00007CCC                            ; ===========================================================================
00007CCC                            
00007CCC                            Obj15_Delete:				; XREF: Obj15_Index
00007CCC 6100 0000                  		bsr.w	DeleteObject
00007CD0 4E75                       		rts	
00007CD2                            ; ===========================================================================
00007CD2                            
00007CD2                            Obj15_Display:				; XREF: Obj15_Index
00007CD2 6000 0000                  		bra.w	DisplaySprite
00007CD6                            ; ===========================================================================
00007CD6                            ; ---------------------------------------------------------------------------
00007CD6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007CD6                            ; ---------------------------------------------------------------------------
00007CD6                            Map_obj15:
00007CD6                            	include "_maps\obj15ghz.asm"
00007CD6                            ; ---------------------------------------------------------------------------
00007CD6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007CD6                            ; ---------------------------------------------------------------------------
00007CD6 0000                       		dc.w byte_7C4E-Map_obj15
00007CD8 0000                       		dc.w byte_7C59-Map_obj15
00007CDA 0000                       		dc.w byte_7C5F-Map_obj15
00007CDC 02                         byte_7C4E:	dc.b 2
00007CDD F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007CE2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007CE7 01                         byte_7C59:	dc.b 1
00007CE8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007CED 01                         byte_7C5F:	dc.b 1
00007CEE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007CF4 00                         		even
00007CF4 00                         		even
00007CF4                            
00007CF4                            ; ---------------------------------------------------------------------------
00007CF4                            ; Sprite mappings - SLZ	swinging platforms
00007CF4                            ; ---------------------------------------------------------------------------
00007CF4                            Map_obj15a:
00007CF4                            	include "_maps\obj15slz.asm"
00007CF4                            ; ---------------------------------------------------------------------------
00007CF4                            ; Sprite mappings - SLZ	swinging platforms
00007CF4                            ; ---------------------------------------------------------------------------
00007CF4 0000                       		dc.w byte_7C6C-Map_obj15a
00007CF6 0000                       		dc.w byte_7C95-Map_obj15a
00007CF8 0000                       		dc.w byte_7C9B-Map_obj15a
00007CFA 08                         byte_7C6C:	dc.b 8
00007CFB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007D00 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007D05 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007D0A F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007D0F 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007D14 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007D19 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007D1E 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007D23 01                         byte_7C95:	dc.b 1
00007D24 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007D29 01                         byte_7C9B:	dc.b 1
00007D2A F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007D30 00                         		even
00007D30 00                         		even
00007D30                            
00007D30                            ; ===========================================================================
00007D30                            ; ---------------------------------------------------------------------------
00007D30                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007D30                            ; ---------------------------------------------------------------------------
00007D30                            
00007D30                            Obj17:					; XREF: Obj_Index
00007D30 7000                       		moveq	#0,d0
00007D32 1028 0024                  		move.b	$24(a0),d0
00007D36 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007D3A 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007D3E                            ; ===========================================================================
00007D3E 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007D40 0000                       		dc.w Obj17_Action-Obj17_Index
00007D42 0000                       		dc.w Obj17_Action-Obj17_Index
00007D44 0000                       		dc.w Obj17_Delete-Obj17_Index
00007D46 0000                       		dc.w Obj17_Display-Obj17_Index
00007D48                            ; ===========================================================================
00007D48                            
00007D48                            Obj17_Main:				; XREF: Obj17_Index
00007D48 5428 0024                  		addq.b	#2,$24(a0)
00007D4C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007D54 317C 4398 0002             		move.w	#$4398,2(a0)
00007D5A 117C 0007 0022             		move.b	#7,$22(a0)
00007D60 117C 0004 0001             		move.b	#4,1(a0)
00007D66 117C 0003 0018             		move.b	#3,$18(a0)
00007D6C 117C 0008 0019             		move.b	#8,$19(a0)
00007D72 3428 000C                  		move.w	$C(a0),d2
00007D76 3628 0008                  		move.w	8(a0),d3
00007D7A 1810                       		move.b	0(a0),d4
00007D7C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007D80 7200                       		moveq	#0,d1
00007D82 1212                       		move.b	(a2),d1		; move a2 to d1
00007D84 14FC 0000                  		move.b	#0,(a2)+
00007D88 3001                       		move.w	d1,d0
00007D8A E248                       		lsr.w	#1,d0
00007D8C E948                       		lsl.w	#4,d0
00007D8E 9640                       		sub.w	d0,d3
00007D90 5501                       		subq.b	#2,d1
00007D92 6500                       		bcs.s	Obj17_Action
00007D94 7C00                       		moveq	#0,d6
00007D96                            
00007D96                            Obj17_MakeHelix:
00007D96 6100 0000                  		bsr.w	SingleObjLoad
00007D9A 6600                       		bne.s	Obj17_Action
00007D9C 5228 0028                  		addq.b	#1,$28(a0)
00007DA0 3A09                       		move.w	a1,d5
00007DA2 0445 D000                  		subi.w	#$D000,d5
00007DA6 EC4D                       		lsr.w	#6,d5
00007DA8 0245 007F                  		andi.w	#$7F,d5
00007DAC 14C5                       		move.b	d5,(a2)+
00007DAE 137C 0008 0024             		move.b	#8,$24(a1)
00007DB4 1284                       		move.b	d4,0(a1)
00007DB6 3342 000C                  		move.w	d2,$C(a1)
00007DBA 3343 0008                  		move.w	d3,8(a1)
00007DBE 2368 0004 0004             		move.l	4(a0),4(a1)
00007DC4 337C 4398 0002             		move.w	#$4398,2(a1)
00007DCA 137C 0004 0001             		move.b	#4,1(a1)
00007DD0 137C 0003 0018             		move.b	#3,$18(a1)
00007DD6 137C 0008 0019             		move.b	#8,$19(a1)
00007DDC 1346 003E                  		move.b	d6,$3E(a1)
00007DE0 5206                       		addq.b	#1,d6
00007DE2 0206 0007                  		andi.b	#7,d6
00007DE6 0643 0010                  		addi.w	#$10,d3
00007DEA B668 0008                  		cmp.w	8(a0),d3
00007DEE 6600                       		bne.s	loc_7D78
00007DF0 1146 003E                  		move.b	d6,$3E(a0)
00007DF4 5206                       		addq.b	#1,d6
00007DF6 0206 0007                  		andi.b	#7,d6
00007DFA 0643 0010                  		addi.w	#$10,d3
00007DFE 5228 0028                  		addq.b	#1,$28(a0)
00007E02                            
00007E02                            loc_7D78:
00007E02 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007E06                            
00007E06                            Obj17_Action:				; XREF: Obj17_Index
00007E06 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007E0A 6100 0000                  		bsr.w	DisplaySprite
00007E0E 6000 0000                  		bra.w	Obj17_ChkDel
00007E12                            
00007E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E12                            
00007E12                            
00007E12                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007E12 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007E16 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007E1C D028 003E                  		add.b	$3E(a0),d0
00007E20 0200 0007                  		andi.b	#7,d0
00007E24 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007E28 6600                       		bne.s	locret_7DA6
00007E2A 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007E30                            
00007E30                            locret_7DA6:
00007E30 4E75                       		rts	
00007E32                            ; End of function Obj17_RotateSpikes
00007E32                            
00007E32                            ; ===========================================================================
00007E32                            
00007E32                            Obj17_ChkDel:				; XREF: Obj17_Action
00007E32 3028 0008                  		move.w	8(a0),d0
00007E36 0240 FF80                  		andi.w	#$FF80,d0
00007E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00007E3E 0441 0080                  		subi.w	#$80,d1
00007E42 0241 FF80                  		andi.w	#$FF80,d1
00007E46 9041                       		sub.w	d1,d0
00007E48 0C40 0280                  		cmpi.w	#$280,d0
00007E4C 6200 0000                  		bhi.w	Obj17_DelAll
00007E50 4E75                       		rts	
00007E52                            ; ===========================================================================
00007E52                            
00007E52                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007E52 7400                       		moveq	#0,d2
00007E54 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007E58 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007E5A 5502                       		subq.b	#2,d2
00007E5C 6500                       		bcs.s	Obj17_Delete
00007E5E                            
00007E5E                            Obj17_DelLoop:
00007E5E 7000                       		moveq	#0,d0
00007E60 101A                       		move.b	(a2)+,d0
00007E62 ED48                       		lsl.w	#6,d0
00007E64 0680 00FF D000             		addi.l	#$FFD000,d0
00007E6A 2240                       		movea.l	d0,a1
00007E6C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007E70 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007E74                            
00007E74                            Obj17_Delete:				; XREF: Obj17_Index
00007E74 6100 0000                  		bsr.w	DeleteObject
00007E78 4E75                       		rts	
00007E7A                            ; ===========================================================================
00007E7A                            
00007E7A                            Obj17_Display:				; XREF: Obj17_Index
00007E7A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007E7E 6000 0000                  		bra.w	DisplaySprite
00007E82                            ; ===========================================================================
00007E82                            ; ---------------------------------------------------------------------------
00007E82                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007E82                            ; ---------------------------------------------------------------------------
00007E82                            Map_obj17:
00007E82                            	include "_maps\obj17.asm"
00007E82                            ; ---------------------------------------------------------------------------
00007E82                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007E82                            ; ---------------------------------------------------------------------------
00007E82 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007E86 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007E8A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007E8E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007E92 01                         byte_7E08:	dc.b 1
00007E93 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007E98 01                         byte_7E0E:	dc.b 1
00007E99 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007E9E 01                         byte_7E14:	dc.b 1
00007E9F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007EA4 01                         byte_7E1A:	dc.b 1
00007EA5 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007EAA 01                         byte_7E20:	dc.b 1
00007EAB 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007EB0 01                         byte_7E26:	dc.b 1
00007EB1 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007EB6 01                         byte_7E2C:	dc.b 1
00007EB7 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007EBC                            		even
00007EBC                            		even
00007EBC                            
00007EBC                            ; ===========================================================================
00007EBC                            ; ---------------------------------------------------------------------------
00007EBC                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007EBC                            ; ---------------------------------------------------------------------------
00007EBC                            
00007EBC                            Obj18:					; XREF: Obj_Index
00007EBC 7000                       		moveq	#0,d0
00007EBE 1028 0024                  		move.b	$24(a0),d0
00007EC2 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007EC6 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007ECA                            ; ===========================================================================
00007ECA 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007ECC 0000                       		dc.w Obj18_Solid-Obj18_Index
00007ECE 0000                       		dc.w Obj18_Action2-Obj18_Index
00007ED0 0000                       		dc.w Obj18_Delete-Obj18_Index
00007ED2 0000                       		dc.w Obj18_Action-Obj18_Index
00007ED4                            ; ===========================================================================
00007ED4                            
00007ED4                            Obj18_Main:				; XREF: Obj18_Index
00007ED4 5428 0024                  		addq.b	#2,$24(a0)
00007ED8 317C 4000 0002             		move.w	#$4000,2(a0)
00007EDE 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007EE6 117C 0020 0019             		move.b	#$20,$19(a0)
00007EEC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007EF2 6600                       		bne.s	Obj18_NotSYZ
00007EF4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007EFC 117C 0020 0019             		move.b	#$20,$19(a0)
00007F02                            
00007F02                            Obj18_NotSYZ:
00007F02 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F08 6600                       		bne.s	Obj18_NotSLZ
00007F0A 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007F12 117C 0020 0019             		move.b	#$20,$19(a0)
00007F18 317C 4000 0002             		move.w	#$4000,2(a0)
00007F1E 117C 0003 0028             		move.b	#3,$28(a0)
00007F24                            
00007F24                            Obj18_NotSLZ:
00007F24 117C 0004 0001             		move.b	#4,1(a0)
00007F2A 117C 0004 0018             		move.b	#4,$18(a0)
00007F30 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007F36 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007F3C 3168 0008 0032             		move.w	8(a0),$32(a0)
00007F42 317C 0080 0026             		move.w	#$80,$26(a0)
00007F48 7200                       		moveq	#0,d1
00007F4A 1028 0028                  		move.b	$28(a0),d0
00007F4E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007F52 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007F54 5201                       		addq.b	#1,d1		; use frame #1
00007F56 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007F5C                            
00007F5C                            Obj18_SetFrame:
00007F5C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007F60                            
00007F60                            Obj18_Solid:				; XREF: Obj18_Index
00007F60 4A28 0038                  		tst.b	$38(a0)
00007F64 6700                       		beq.s	loc_7EE0
00007F66 5928 0038                  		subq.b	#4,$38(a0)
00007F6A                            
00007F6A                            loc_7EE0:
00007F6A 7200                       		moveq	#0,d1
00007F6C 1228 0019                  		move.b	$19(a0),d1
00007F70 6100 F526                  		bsr.w	PlatformObject
00007F74                            
00007F74                            Obj18_Action:				; XREF: Obj18_Index
00007F74 6100 0000                  		bsr.w	Obj18_Move
00007F78 6100 0000                  		bsr.w	Obj18_Nudge
00007F7C 6100 0000                  		bsr.w	DisplaySprite
00007F80 6000 0000                  		bra.w	Obj18_ChkDel
00007F84                            ; ===========================================================================
00007F84                            
00007F84                            Obj18_Action2:				; XREF: Obj18_Index
00007F84 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007F8A 6700                       		beq.s	loc_7F06
00007F8C 5828 0038                  		addq.b	#4,$38(a0)
00007F90                            
00007F90                            loc_7F06:
00007F90 7200                       		moveq	#0,d1
00007F92 1228 0019                  		move.b	$19(a0),d1
00007F96 6100 F674                  		bsr.w	ExitPlatform
00007F9A 3F28 0008                  		move.w	8(a0),-(sp)
00007F9E 6100 0000                  		bsr.w	Obj18_Move
00007FA2 6100 0000                  		bsr.w	Obj18_Nudge
00007FA6 341F                       		move.w	(sp)+,d2
00007FA8 6100 FBCC                  		bsr.w	MvSonicOnPtfm2
00007FAC 6100 0000                  		bsr.w	DisplaySprite
00007FB0 6000 0000                  		bra.w	Obj18_ChkDel
00007FB4                            
00007FB4 4E75                       		rts
00007FB6                            
00007FB6                            ; ---------------------------------------------------------------------------
00007FB6                            ; Subroutine to	move platform slightly when you	stand on it
00007FB6                            ; ---------------------------------------------------------------------------
00007FB6                            
00007FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB6                            
00007FB6                            
00007FB6                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00007FB6 1028 0038                  		move.b	$38(a0),d0
00007FBA 6100 A930                  		bsr.w	CalcSine
00007FBE 323C 0400                  		move.w	#$400,d1
00007FC2 C1C1                       		muls.w	d1,d0
00007FC4 4840                       		swap	d0
00007FC6 D068 002C                  		add.w	$2C(a0),d0
00007FCA 3140 000C                  		move.w	d0,$C(a0)
00007FCE 4E75                       		rts	
00007FD0                            ; End of function Obj18_Nudge
00007FD0                            
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            ; Subroutine to	move platforms
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            
00007FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD0                            
00007FD0                            
00007FD0                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00007FD0 7000                       		moveq	#0,d0
00007FD2 1028 0028                  		move.b	$28(a0),d0
00007FD6 0240 000F                  		andi.w	#$F,d0
00007FDA D040                       		add.w	d0,d0
00007FDC 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00007FE0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00007FE4                            ; End of function Obj18_Move
00007FE4                            
00007FE4                            ; ===========================================================================
00007FE4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00007FE8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00007FEC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00007FF0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00007FF4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00007FF8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00007FFC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00007FFE                            ; ===========================================================================
00007FFE                            
00007FFE                            Obj18_Type00:
00007FFE 4E75                       		rts			; platform 00 doesn't move
00008000                            ; ===========================================================================
00008000                            
00008000                            Obj18_Type05:
00008000 3028 0032                  		move.w	$32(a0),d0
00008004 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008008 4401                       		neg.b	d1		; reverse platform-motion
0000800A 0601 0040                  		addi.b	#$40,d1
0000800E 6000                       		bra.s	Obj18_01_Move
00008010                            ; ===========================================================================
00008010                            
00008010                            Obj18_Type01:
00008010 3028 0032                  		move.w	$32(a0),d0
00008014 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008018 0401 0040                  		subi.b	#$40,d1
0000801C                            
0000801C                            Obj18_01_Move:
0000801C 4881                       		ext.w	d1
0000801E D041                       		add.w	d1,d0
00008020 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008024 6000 0000                  		bra.w	Obj18_ChgMotion
00008028                            ; ===========================================================================
00008028                            
00008028                            Obj18_Type0C:
00008028 3028 0034                  		move.w	$34(a0),d0
0000802C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008030 4401                       		neg.b	d1		; reverse platform-motion
00008032 0601 0030                  		addi.b	#$30,d1
00008036 6000                       		bra.s	Obj18_02_Move
00008038                            ; ===========================================================================
00008038                            
00008038                            Obj18_Type0B:
00008038 3028 0034                  		move.w	$34(a0),d0
0000803C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008040 0401 0030                  		subi.b	#$30,d1
00008044 6000                       		bra.s	Obj18_02_Move
00008046                            ; ===========================================================================
00008046                            
00008046                            Obj18_Type06:
00008046 3028 0034                  		move.w	$34(a0),d0
0000804A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000804E 4401                       		neg.b	d1		; reverse platform-motion
00008050 0601 0040                  		addi.b	#$40,d1
00008054 6000                       		bra.s	Obj18_02_Move
00008056                            ; ===========================================================================
00008056                            
00008056                            Obj18_Type02:
00008056 3028 0034                  		move.w	$34(a0),d0
0000805A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000805E 0401 0040                  		subi.b	#$40,d1
00008062                            
00008062                            Obj18_02_Move:
00008062 4881                       		ext.w	d1
00008064 D041                       		add.w	d1,d0
00008066 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000806A 6000 0000                  		bra.w	Obj18_ChgMotion
0000806E                            ; ===========================================================================
0000806E                            
0000806E                            Obj18_Type03:
0000806E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008072 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008074 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000807A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000807C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008082                            
00008082                            Obj18_03_NoMove:
00008082 4E75                       		rts	
00008084                            ; ===========================================================================
00008084                            
00008084                            Obj18_03_Wait:
00008084 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008088 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000808A 317C 0020 003A             		move.w	#32,$3A(a0)
00008090 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008094 4E75                       		rts	
00008096                            ; ===========================================================================
00008096                            
00008096                            Obj18_Type04:
00008096 4A68 003A                  		tst.w	$3A(a0)
0000809A 6700                       		beq.s	loc_8048
0000809C 5368 003A                  		subq.w	#1,$3A(a0)
000080A0 6600                       		bne.s	loc_8048
000080A2 0828 0003 0022             		btst	#3,$22(a0)
000080A8 6700                       		beq.s	loc_8042
000080AA 08E9 0001 0022             		bset	#1,$22(a1)
000080B0 08A9 0003 0022             		bclr	#3,$22(a1)
000080B6 137C 0002 0024             		move.b	#2,$24(a1)
000080BC 08A8 0003 0022             		bclr	#3,$22(a0)
000080C2 4228 0025                  		clr.b	$25(a0)
000080C6 3368 0012 0012             		move.w	$12(a0),$12(a1)
000080CC                            
000080CC                            loc_8042:
000080CC 117C 0008 0024             		move.b	#8,$24(a0)
000080D2                            
000080D2                            loc_8048:
000080D2 2628 002C                  		move.l	$2C(a0),d3
000080D6 3028 0012                  		move.w	$12(a0),d0
000080DA 48C0                       		ext.l	d0
000080DC E180                       		asl.l	#8,d0
000080DE D680                       		add.l	d0,d3
000080E0 2143 002C                  		move.l	d3,$2C(a0)
000080E4 0668 0038 0012             		addi.w	#$38,$12(a0)
000080EA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000080EE 0640 00E0                  		addi.w	#$E0,d0
000080F2 B068 002C                  		cmp.w	$2C(a0),d0
000080F6 6400                       		bcc.s	locret_8074
000080F8 117C 0006 0024             		move.b	#6,$24(a0)
000080FE                            
000080FE                            locret_8074:
000080FE 4E75                       		rts	
00008100                            ; ===========================================================================
00008100                            
00008100                            Obj18_Type07:
00008100 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008104 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008106 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000810A 7000                       		moveq	#0,d0
0000810C 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008110 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008112 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008116 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008118 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000811E                            
0000811E                            Obj18_07_NoMove:
0000811E 4E75                       		rts	
00008120                            ; ===========================================================================
00008120                            
00008120                            Obj18_07_Wait:
00008120 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008124 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008126 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000812A 4E75                       		rts	
0000812C                            ; ===========================================================================
0000812C                            
0000812C                            Obj18_Type08:
0000812C 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008130 3028 0034                  		move.w	$34(a0),d0
00008134 0440 0200                  		subi.w	#$200,d0
00008138 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000813C 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000813E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008142                            
00008142                            Obj18_08_NoStop:
00008142 4E75                       		rts	
00008144                            ; ===========================================================================
00008144                            
00008144                            Obj18_Type0A:
00008144 3028 0034                  		move.w	$34(a0),d0
00008148 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000814C 0401 0040                  		subi.b	#$40,d1
00008150 4881                       		ext.w	d1
00008152 E241                       		asr.w	#1,d1
00008154 D041                       		add.w	d1,d0
00008156 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000815A                            
0000815A                            Obj18_ChgMotion:
0000815A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008160 4E75                       		rts	
00008162                            ; ===========================================================================
00008162                            
00008162                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008162 3028 0032                  		move.w	$32(a0),d0
00008166 0240 FF80                  		andi.w	#$FF80,d0
0000816A 3238 F700                  		move.w	($FFFFF700).w,d1
0000816E 0441 0080                  		subi.w	#$80,d1
00008172 0241 FF80                  		andi.w	#$FF80,d1
00008176 9041                       		sub.w	d1,d0
00008178 0C40 0280                  		cmpi.w	#$280,d0
0000817C 6200                       		bhi.s	Obj18_Delete
0000817E 4E75                       		rts	
00008180                            ; ===========================================================================
00008180                            
00008180                            Obj18_Delete:				; XREF: Obj18_Index
00008180 6000 0000                  		bra.w	DeleteObject
00008184                            ; ===========================================================================
00008184                            ; ---------------------------------------------------------------------------
00008184                            ; Sprite mappings - unused
00008184                            ; ---------------------------------------------------------------------------
00008184                            Map_obj18x:
00008184                            	include "_maps\obj18x.asm"
00008184                            ; ---------------------------------------------------------------------------
00008184                            ; Sprite mappings - unused
00008184                            ; ---------------------------------------------------------------------------
00008184 0000                       		dc.w byte_80FE-Map_obj18x
00008186 0000                       		dc.w byte_8109-Map_obj18x
00008188 02                         byte_80FE:	dc.b 2
00008189 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000818E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008193 0A                         byte_8109:	dc.b $A
00008194 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008199 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000819E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000081A3 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000081A8 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000081AD F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000081B2 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000081B7 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000081BC 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000081C1 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000081C6                            		even
000081C6                            		even
000081C6                            
000081C6                            ; ---------------------------------------------------------------------------
000081C6                            ; Sprite mappings - GHZ	platforms
000081C6                            ; ---------------------------------------------------------------------------
000081C6                            Map_obj18:
000081C6                            	include "_maps\obj18ghz.asm"
000081C6                            ; ---------------------------------------------------------------------------
000081C6                            ; Sprite mappings - GHZ	platforms
000081C6                            ; ---------------------------------------------------------------------------
000081C6 0000                       		dc.w byte_8140-Map_obj18
000081C8 0000                       		dc.w byte_8155-Map_obj18
000081CA 04                         byte_8140:	dc.b 4
000081CB F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000081D0 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000081D5 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000081DA F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000081DF 0A                         byte_8155:	dc.b $A
000081E0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000081E5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000081EA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000081EF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000081F4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000081F9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000081FE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008203 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008208 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000820D 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008212                            		even
00008212                            		even
00008212                            
00008212                            ; ---------------------------------------------------------------------------
00008212                            ; Sprite mappings - SYZ	platforms
00008212                            ; ---------------------------------------------------------------------------
00008212                            Map_obj18a:
00008212                            	include "_maps\obj18syz.asm"
00008212                            ; ---------------------------------------------------------------------------
00008212                            ; Sprite mappings - SYZ	platforms
00008212                            ; ---------------------------------------------------------------------------
00008212 0000                       		dc.w byte_818A-Map_obj18a
00008214 03                         byte_818A:	dc.b 3
00008215 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000821A F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000821F F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008224                            		even
00008224                            		even
00008224                            
00008224                            ; ---------------------------------------------------------------------------
00008224                            ; Sprite mappings - SLZ	platforms
00008224                            ; ---------------------------------------------------------------------------
00008224                            Map_obj18b:
00008224                            	include "_maps\obj18slz.asm"
00008224                            ; ---------------------------------------------------------------------------
00008224                            ; Sprite mappings - SLZ	platforms
00008224                            ; ---------------------------------------------------------------------------
00008224 0000                       		dc.w byte_819C-Map_obj18b
00008226 02                         byte_819C:	dc.b 2
00008227 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000822C F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008232 00                         		even
00008232 00                         		even
00008232                            
00008232                            ; ===========================================================================
00008232                            ; ---------------------------------------------------------------------------
00008232                            ; Object 19 - blank
00008232                            ; ---------------------------------------------------------------------------
00008232                            
00008232                            Obj19:					; XREF: Obj_Index
00008232 4E75                       		rts	
00008234                            ; ===========================================================================
00008234                            ; ---------------------------------------------------------------------------
00008234                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008234                            ; ---------------------------------------------------------------------------
00008234                            Map_obj48:
00008234                            	include "_maps\obj48.asm"
00008234                            ; ---------------------------------------------------------------------------
00008234                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008234                            ; ---------------------------------------------------------------------------
00008234 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008238 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000823C 06                         byte_81B2:	dc.b 6
0000823D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008242 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008247 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000824C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008251 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008256 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000825B 04                         byte_81D1:	dc.b 4
0000825C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008261 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008266 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000826B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008270 04                         byte_81E6:	dc.b 4
00008271 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008276 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000827B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008280 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008285 04                         byte_81FB:	dc.b 4
00008286 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000828B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008290 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008295 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000829A                            		even
0000829A                            		even
0000829A                            
0000829A                            ; ===========================================================================
0000829A                            ; ---------------------------------------------------------------------------
0000829A                            ; Object 1A - GHZ collapsing ledge
0000829A                            ; ---------------------------------------------------------------------------
0000829A                            
0000829A                            Obj1A:					; XREF: Obj_Index
0000829A 7000                       		moveq	#0,d0
0000829C 1028 0024                  		move.b	$24(a0),d0
000082A0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000082A4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000082A8                            ; ===========================================================================
000082A8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000082AC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000082B0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000082B4                            ; ===========================================================================
000082B4                            
000082B4                            Obj1A_Main:				; XREF: Obj1A_Index
000082B4 5428 0024                  		addq.b	#2,$24(a0)
000082B8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000082C0 317C 4000 0002             		move.w	#$4000,2(a0)
000082C6 0028 0004 0001             		ori.b	#4,1(a0)
000082CC 117C 0004 0018             		move.b	#4,$18(a0)
000082D2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000082D8 117C 0064 0019             		move.b	#$64,$19(a0)
000082DE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000082E4 117C 0038 0016             		move.b	#$38,$16(a0)
000082EA 08E8 0004 0001             		bset	#4,1(a0)
000082F0                            
000082F0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000082F0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000082F4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000082F6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000082FA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000082FE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008302                            
00008302                            Obj1A_Slope:
00008302 323C 0030                  		move.w	#$30,d1
00008306 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000830C 6100 F25E                  		bsr.w	SlopeObject
00008310 6000 0000                  		bra.w	MarkObjGone
00008314                            ; ===========================================================================
00008314                            
00008314                            Obj1A_Touch:				; XREF: Obj1A_Index
00008314 4A28 0038                  		tst.b	$38(a0)
00008318 6700 0000                  		beq.w	loc_847A
0000831C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008322 5328 0038                  		subq.b	#1,$38(a0)
00008326                            
00008326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008326                            
00008326                            
00008326                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008326 323C 0030                  		move.w	#$30,d1
0000832A 6100 F2E0                  		bsr.w	ExitPlatform
0000832E 323C 0030                  		move.w	#$30,d1
00008332 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008338 3428 0008                  		move.w	8(a0),d2
0000833C 6100 0000                  		bsr.w	SlopeObject2
00008340 6000 0000                  		bra.w	MarkObjGone
00008344                            ; End of function Obj1A_WalkOff
00008344                            
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj1A_Display:				; XREF: Obj1A_Index
00008344 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008348 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000834A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000834E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008352 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008356 6000 0000                  		bra.w	DisplaySprite
0000835A                            ; ===========================================================================
0000835A                            
0000835A                            loc_82D0:				; XREF: Obj1A_Display
0000835A 5328 0038                  		subq.b	#1,$38(a0)
0000835E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008362 43F8 D000                  		lea	($FFFFD000).w,a1
00008366 0829 0003 0022             		btst	#3,$22(a1)
0000836C 6700                       		beq.s	loc_82FC
0000836E 4A28 0038                  		tst.b	$38(a0)
00008372 6600                       		bne.s	locret_8308
00008374 08A9 0003 0022             		bclr	#3,$22(a1)
0000837A 08A9 0005 0022             		bclr	#5,$22(a1)
00008380 137C 0001 001D             		move.b	#1,$1D(a1)
00008386                            
00008386                            loc_82FC:
00008386 117C 0000 003A             		move.b	#0,$3A(a0)
0000838C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008392                            
00008392                            locret_8308:
00008392 4E75                       		rts	
00008394                            ; ===========================================================================
00008394                            
00008394                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008394 6100 0000                  		bsr.w	ObjectFall
00008398 6100 0000                  		bsr.w	DisplaySprite
0000839C 4A28 0001                  		tst.b	1(a0)
000083A0 6A00                       		bpl.s	Obj1A_Delete
000083A2 4E75                       		rts	
000083A4                            ; ===========================================================================
000083A4                            
000083A4                            Obj1A_Delete:				; XREF: Obj1A_Index
000083A4 6100 0000                  		bsr.w	DeleteObject
000083A8 4E75                       		rts	
000083AA                            ; ===========================================================================
000083AA                            ; ---------------------------------------------------------------------------
000083AA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000083AA                            ; ---------------------------------------------------------------------------
000083AA                            
000083AA                            Obj53:					; XREF: Obj_Index
000083AA 7000                       		moveq	#0,d0
000083AC 1028 0024                  		move.b	$24(a0),d0
000083B0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000083B4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000083B8                            ; ===========================================================================
000083B8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000083BC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000083C0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000083C4                            ; ===========================================================================
000083C4                            
000083C4                            Obj53_Main:				; XREF: Obj53_Index
000083C4 5428 0024                  		addq.b	#2,$24(a0)
000083C8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000083D0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000083D6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000083DC 6600                       		bne.s	Obj53_NotSLZ
000083DE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000083E4 5428 001A                  		addq.b	#2,$1A(a0)
000083E8                            
000083E8                            Obj53_NotSLZ:
000083E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000083EE 6600                       		bne.s	Obj53_NotSBZ
000083F0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000083F6                            
000083F6                            Obj53_NotSBZ:
000083F6 0028 0004 0001             		ori.b	#4,1(a0)
000083FC 117C 0004 0018             		move.b	#4,$18(a0)
00008402 117C 0007 0038             		move.b	#7,$38(a0)
00008408 117C 0044 0019             		move.b	#$44,$19(a0)
0000840E                            
0000840E                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000840E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008412 6700                       		beq.s	Obj53_Solid	; if not, branch
00008414 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008418 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000841C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008420                            
00008420                            Obj53_Solid:
00008420 323C 0020                  		move.w	#$20,d1
00008424 6100 F072                  		bsr.w	PlatformObject
00008428 4A28 0028                  		tst.b	$28(a0)
0000842C 6A00                       		bpl.s	Obj53_MarkAsGone
0000842E 0829 0003 0022             		btst	#3,$22(a1)
00008434 6700                       		beq.s	Obj53_MarkAsGone
00008436 08A8 0000 0001             		bclr	#0,1(a0)
0000843C 3029 0008                  		move.w	8(a1),d0
00008440 9068 0008                  		sub.w	8(a0),d0
00008444 6400                       		bcc.s	Obj53_MarkAsGone
00008446 08E8 0000 0001             		bset	#0,1(a0)
0000844C                            
0000844C                            Obj53_MarkAsGone:
0000844C 6000 0000                  		bra.w	MarkObjGone
00008450                            ; ===========================================================================
00008450                            
00008450                            Obj53_Touch:				; XREF: Obj53_Index
00008450 4A28 0038                  		tst.b	$38(a0)
00008454 6700 0000                  		beq.w	loc_8458
00008458 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000845E 5328 0038                  		subq.b	#1,$38(a0)
00008462                            
00008462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008462                            
00008462                            
00008462                            Obj53_WalkOff:				; XREF: Obj53_Index
00008462 323C 0020                  		move.w	#$20,d1
00008466 6100 F1A4                  		bsr.w	ExitPlatform
0000846A 3428 0008                  		move.w	8(a0),d2
0000846E 6100 F706                  		bsr.w	MvSonicOnPtfm2
00008472 6000 0000                  		bra.w	MarkObjGone
00008476                            ; End of function Obj53_WalkOff
00008476                            
00008476                            ; ===========================================================================
00008476                            
00008476                            Obj53_Display:				; XREF: Obj53_Index
00008476 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000847A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000847C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008480 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008484 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008488 6000 0000                  		bra.w	DisplaySprite
0000848C                            ; ===========================================================================
0000848C                            
0000848C                            loc_8402:
0000848C 5328 0038                  		subq.b	#1,$38(a0)
00008490 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008494 43F8 D000                  		lea	($FFFFD000).w,a1
00008498 0829 0003 0022             		btst	#3,$22(a1)
0000849E 6700                       		beq.s	loc_842E
000084A0 4A28 0038                  		tst.b	$38(a0)
000084A4 6600                       		bne.s	locret_843A
000084A6 08A9 0003 0022             		bclr	#3,$22(a1)
000084AC 08A9 0005 0022             		bclr	#5,$22(a1)
000084B2 137C 0001 001D             		move.b	#1,$1D(a1)
000084B8                            
000084B8                            loc_842E:
000084B8 117C 0000 003A             		move.b	#0,$3A(a0)
000084BE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000084C4                            
000084C4                            locret_843A:
000084C4 4E75                       		rts	
000084C6                            ; ===========================================================================
000084C6                            
000084C6                            Obj53_TimeZero:				; XREF: Obj53_Display
000084C6 6100 0000                  		bsr.w	ObjectFall
000084CA 6100 0000                  		bsr.w	DisplaySprite
000084CE 4A28 0001                  		tst.b	1(a0)
000084D2 6A00                       		bpl.s	Obj53_Delete
000084D4 4E75                       		rts	
000084D6                            ; ===========================================================================
000084D6                            
000084D6                            Obj53_Delete:				; XREF: Obj53_Index
000084D6 6100 0000                  		bsr.w	DeleteObject
000084DA 4E75                       		rts	
000084DC                            ; ===========================================================================
000084DC                            
000084DC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000084DC 117C 0000 003A             		move.b	#0,$3A(a0)
000084E2                            
000084E2                            loc_8458:				; XREF: Obj53_Touch
000084E2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000084E8 0828 0000 0028             		btst	#0,$28(a0)
000084EE 6700                       		beq.s	loc_846C
000084F0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000084F6                            
000084F6                            loc_846C:
000084F6 7207                       		moveq	#7,d1
000084F8 5228 001A                  		addq.b	#1,$1A(a0)
000084FC 6000                       		bra.s	loc_8486
000084FE                            ; ===========================================================================
000084FE                            
000084FE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000084FE 117C 0000 003A             		move.b	#0,$3A(a0)
00008504                            
00008504                            loc_847A:				; XREF: Obj1A_Touch
00008504 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000850A 7218                       		moveq	#$18,d1
0000850C 5428 001A                  		addq.b	#2,$1A(a0)
00008510                            
00008510                            loc_8486:				; XREF: Obj53_Collapse
00008510 7000                       		moveq	#0,d0
00008512 1028 001A                  		move.b	$1A(a0),d0
00008516 D040                       		add.w	d0,d0
00008518 2668 0004                  		movea.l	4(a0),a3
0000851C D6F3 0000                  		adda.w	(a3,d0.w),a3
00008520 524B                       		addq.w	#1,a3
00008522 08E8 0005 0001             		bset	#5,1(a0)
00008528 1810                       		move.b	0(a0),d4
0000852A 1A28 0001                  		move.b	1(a0),d5
0000852E 2248                       		movea.l	a0,a1
00008530 6000                       		bra.s	loc_84B2
00008532                            ; ===========================================================================
00008532                            
00008532                            loc_84AA:
00008532 6100 0000                  		bsr.w	SingleObjLoad
00008536 6600                       		bne.s	loc_84F2
00008538 5A4B                       		addq.w	#5,a3
0000853A                            
0000853A                            loc_84B2:
0000853A 137C 0006 0024             		move.b	#6,$24(a1)
00008540 1284                       		move.b	d4,0(a1)
00008542 234B 0004                  		move.l	a3,4(a1)
00008546 1345 0001                  		move.b	d5,1(a1)
0000854A 3368 0008 0008             		move.w	8(a0),8(a1)
00008550 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008556 3368 0002 0002             		move.w	2(a0),2(a1)
0000855C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008562 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008568 135C 0038                  		move.b	(a4)+,$38(a1)
0000856C B3C8                       		cmpa.l	a0,a1
0000856E 6400                       		bcc.s	loc_84EE
00008570 6100 0000                  		bsr.w	DisplaySprite2
00008574                            
00008574                            loc_84EE:
00008574 51C9 FFBC                  		dbf	d1,loc_84AA
00008578                            
00008578                            loc_84F2:
00008578 6100 0000                  		bsr.w	DisplaySprite
0000857C 303C 00B9                  		move.w	#$B9,d0
00008580 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008586                            ; ===========================================================================
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008586                            ; ---------------------------------------------------------------------------
00008586 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008596 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000085A0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000085A8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000085B0                            
000085B0                            ; ---------------------------------------------------------------------------
000085B0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000085B0                            ; ---------------------------------------------------------------------------
000085B0                            
000085B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085B0                            
000085B0                            
000085B0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000085B0 43F8 D000                  		lea	($FFFFD000).w,a1
000085B4 0829 0003 0022             		btst	#3,$22(a1)
000085BA 6700                       		beq.s	locret_856E
000085BC 3029 0008                  		move.w	8(a1),d0
000085C0 9068 0008                  		sub.w	8(a0),d0
000085C4 D041                       		add.w	d1,d0
000085C6 E248                       		lsr.w	#1,d0
000085C8 0828 0000 0001             		btst	#0,1(a0)
000085CE 6700                       		beq.s	loc_854E
000085D0 4640                       		not.w	d0
000085D2 D041                       		add.w	d1,d0
000085D4                            
000085D4                            loc_854E:
000085D4 7200                       		moveq	#0,d1
000085D6 1232 0000                  		move.b	(a2,d0.w),d1
000085DA 3028 000C                  		move.w	$C(a0),d0
000085DE 9041                       		sub.w	d1,d0
000085E0 7200                       		moveq	#0,d1
000085E2 1229 0016                  		move.b	$16(a1),d1
000085E6 9041                       		sub.w	d1,d0
000085E8 3340 000C                  		move.w	d0,$C(a1)
000085EC 9468 0008                  		sub.w	8(a0),d2
000085F0 9569 0008                  		sub.w	d2,8(a1)
000085F4                            
000085F4                            locret_856E:
000085F4 4E75                       		rts	
000085F6                            ; End of function SlopeObject2
000085F6                            
000085F6                            ; ===========================================================================
000085F6                            ; ---------------------------------------------------------------------------
000085F6                            ; Collision data for GHZ collapsing ledge
000085F6                            ; ---------------------------------------------------------------------------
000085F6                            Obj1A_SlopeData:
000085F6                            		incbin	misc\ghzledge.bin
00008626                            		even
00008626                            
00008626                            ; ---------------------------------------------------------------------------
00008626                            ; Sprite mappings - GHZ	collapsing ledge
00008626                            ; ---------------------------------------------------------------------------
00008626                            Map_obj1A:
00008626                            	include "_maps\obj1A.asm"
00008626                            ; ---------------------------------------------------------------------------
00008626                            ; Sprite mappings - GHZ	collapsing ledge
00008626                            ; ---------------------------------------------------------------------------
00008626 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000862A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000862E 10                         byte_85A8:	dc.b $10
0000862F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008634 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008639 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000863E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008643 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008648 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000864D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008652 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008657 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000865C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008661 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008666 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000866B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008670 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008675 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000867A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000867F 10                         byte_85F9:	dc.b $10
00008680 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008685 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000868A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000868F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008694 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008699 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000869E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000086A3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000086A8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086AD F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000086B2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000086B7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000086BC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000086C1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000086C6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000086CB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086D0 19                         byte_864A:	dc.b $19
000086D1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000086D6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000086DB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000086E0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000086E5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000086EA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000086EF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000086F4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000086F9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086FE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008703 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008708 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000870D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008712 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008717 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000871C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008721 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008726 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000872B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008730 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008735 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000873A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000873F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008744 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008749 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000874E 19                         byte_86C8:	dc.b $19
0000874F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008754 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008759 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000875E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008763 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008768 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000876D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008772 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008777 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000877C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008781 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008786 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000878B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008790 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008795 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000879A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000879F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000087A4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000087A9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000087AE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000087B3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000087B8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000087BD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000087C2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000087C7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000087CC                            		even
000087CC                            		even
000087CC                            
000087CC                            ; ---------------------------------------------------------------------------
000087CC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000087CC                            ; ---------------------------------------------------------------------------
000087CC                            Map_obj53:
000087CC                            	include "_maps\obj53.asm"
000087CC                            ; ---------------------------------------------------------------------------
000087CC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000087CC                            ; ---------------------------------------------------------------------------
000087CC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000087D0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000087D4 04                         byte_874E:	dc.b 4
000087D5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000087DA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000087DF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000087E4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000087E9 08                         byte_8763:	dc.b 8
000087EA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000087EF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000087F4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000087F9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000087FE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008803 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008808 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000880D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008812 04                         byte_878C:	dc.b 4
00008813 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008818 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000881D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008822 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008827 08                         byte_87A1:	dc.b 8
00008828 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000882D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008832 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008837 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000883C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008841 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008846 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000884B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008850                            		even
00008850                            		even
00008850                            
00008850                            ; ===========================================================================
00008850                            ; ---------------------------------------------------------------------------
00008850                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008850                            ; ---------------------------------------------------------------------------
00008850                            
00008850                            Obj1C:					; XREF: Obj_Index
00008850 7000                       		moveq	#0,d0
00008852 1028 0024                  		move.b	$24(a0),d0
00008856 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000885A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000885E                            ; ===========================================================================
0000885E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008860 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008862                            ; ===========================================================================
00008862                            
00008862                            Obj1C_Main:				; XREF: Obj1C_Index
00008862 5428 0024                  		addq.b	#2,$24(a0)
00008866 7000                       		moveq	#0,d0
00008868 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000886C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008870 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008874 2159 0004                  		move.l	(a1)+,4(a0)
00008878 3159 0002                  		move.w	(a1)+,2(a0)
0000887C 0028 0004 0001             		ori.b	#4,1(a0)
00008882 1159 001A                  		move.b	(a1)+,$1A(a0)
00008886 1159 0019                  		move.b	(a1)+,$19(a0)
0000888A 1159 0018                  		move.b	(a1)+,$18(a0)
0000888E 1159 0020                  		move.b	(a1)+,$20(a0)
00008892                            
00008892                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008892 3028 0008                  		move.w	8(a0),d0
00008896 0240 FF80                  		andi.w	#$FF80,d0
0000889A 3238 F700                  		move.w	($FFFFF700).w,d1
0000889E 0441 0080                  		subi.w	#$80,d1
000088A2 0241 FF80                  		andi.w	#$FF80,d1
000088A6 9041                       		sub.w	d1,d0
000088A8 0C40 0280                  		cmpi.w	#$280,d0
000088AC 6200 0000                  		bhi.w	DeleteObject
000088B0 6000 0000                  		bra.w	DisplaySprite
000088B4                            ; ===========================================================================
000088B4                            ; ---------------------------------------------------------------------------
000088B4                            ; Variables for	object $1C are stored in an array
000088B4                            ; ---------------------------------------------------------------------------
000088B4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000088B8 44D8                       		dc.w $44D8		; VRAM setting
000088BA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000088BE 0000 0000                  		dc.l Map_obj1C
000088C2 44D8                       		dc.w $44D8
000088C4 0008 0200                  		dc.b 0,	8, 2, 0
000088C8 0000 0000                  		dc.l Map_obj1C
000088CC 44D8                       		dc.w $44D8
000088CE 0008 0200                  		dc.b 0,	8, 2, 0
000088D2 0000 7980                  		dc.l Map_obj11
000088D6 438E                       		dc.w $438E
000088D8 0110 0100                  		dc.b 1,	$10, 1,	0
000088DC                            ; ---------------------------------------------------------------------------
000088DC                            ; Sprite mappings - SLZ	lava thrower
000088DC                            ; ---------------------------------------------------------------------------
000088DC                            Map_obj1C:
000088DC                            	include "_maps\obj1C.asm"
000088DC                            ; ---------------------------------------------------------------------------
000088DC                            ; Sprite mappings - SLZ	lava thrower
000088DC                            ; ---------------------------------------------------------------------------
000088DC 0000                       		dc.w byte_8858-Map_obj1C
000088DE 01                         byte_8858:	dc.b 1
000088DF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000088E4                            		even
000088E4                            		even
000088E4                            
000088E4                            ; ===========================================================================
000088E4                            ; ---------------------------------------------------------------------------
000088E4                            ; Object 1D - switch that activates when Sonic touches it
000088E4                            ; (this	is not used anywhere in	the game)
000088E4                            ; ---------------------------------------------------------------------------
000088E4                            
000088E4                            Obj1D:					; XREF: Obj_Index
000088E4 7000                       		moveq	#0,d0
000088E6 1028 0024                  		move.b	$24(a0),d0
000088EA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000088EE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000088F2                            ; ===========================================================================
000088F2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000088F4 0000                       		dc.w Obj1D_Action-Obj1D_Index
000088F6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000088F8                            ; ===========================================================================
000088F8                            
000088F8                            Obj1D_Main:				; XREF: Obj1D_Index
000088F8 5428 0024                  		addq.b	#2,$24(a0)
000088FC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008904 317C 4000 0002             		move.w	#$4000,2(a0)
0000890A 117C 0004 0001             		move.b	#4,1(a0)
00008910 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008916 117C 0010 0019             		move.b	#$10,$19(a0)
0000891C 117C 0005 0018             		move.b	#5,$18(a0)
00008922                            
00008922                            Obj1D_Action:				; XREF: Obj1D_Index
00008922 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008928 323C 0010                  		move.w	#$10,d1
0000892C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008930 6700                       		beq.s	Obj1D_ChkDel
00008932 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008936 7001                       		moveq	#1,d0
00008938 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000893C                            
0000893C                            Obj1D_ChkDel:
0000893C 6100 0000                  		bsr.w	DisplaySprite
00008940 3028 0008                  		move.w	8(a0),d0
00008944 0240 FF80                  		andi.w	#$FF80,d0
00008948 3238 F700                  		move.w	($FFFFF700).w,d1
0000894C 0441 0080                  		subi.w	#$80,d1
00008950 0241 FF80                  		andi.w	#$FF80,d1
00008954 9041                       		sub.w	d1,d0
00008956 0C40 0280                  		cmpi.w	#$280,d0
0000895A 6200 0000                  		bhi.w	Obj1D_Delete
0000895E 4E75                       		rts	
00008960                            ; ===========================================================================
00008960                            
00008960                            Obj1D_Delete:				; XREF: Obj1D_Index
00008960 6100 0000                  		bsr.w	DeleteObject
00008964 4E75                       		rts	
00008966                            ; ---------------------------------------------------------------------------
00008966                            ; Subroutine to	check if Sonic touches the object
00008966                            ; ---------------------------------------------------------------------------
00008966                            
00008966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008966                            
00008966                            
00008966                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008966 43F8 D000                  		lea	($FFFFD000).w,a1
0000896A 3029 0008                  		move.w	8(a1),d0
0000896E 9068 0008                  		sub.w	8(a0),d0
00008972 D041                       		add.w	d1,d0
00008974 6B00                       		bmi.s	loc_8918
00008976 D241                       		add.w	d1,d1
00008978 B041                       		cmp.w	d1,d0
0000897A 6400                       		bcc.s	loc_8918
0000897C 3429 000C                  		move.w	$C(a1),d2
00008980 1229 0016                  		move.b	$16(a1),d1
00008984 4881                       		ext.w	d1
00008986 D242                       		add.w	d2,d1
00008988 3028 000C                  		move.w	$C(a0),d0
0000898C 0440 0010                  		subi.w	#$10,d0
00008990 9041                       		sub.w	d1,d0
00008992 6200                       		bhi.s	loc_8918
00008994 0C40 FFF0                  		cmpi.w	#-$10,d0
00008998 6500                       		bcs.s	loc_8918
0000899A 70FF                       		moveq	#-1,d0
0000899C 4E75                       		rts	
0000899E                            ; ===========================================================================
0000899E                            
0000899E                            loc_8918:
0000899E 7000                       		moveq	#0,d0
000089A0 4E75                       		rts	
000089A2                            ; End of function Obj1D_ChkTouch
000089A2                            
000089A2                            ; ===========================================================================
000089A2                            ; ---------------------------------------------------------------------------
000089A2                            ; Sprite mappings - object 1D
000089A2                            ; ---------------------------------------------------------------------------
000089A2                            Map_obj1D:
000089A2                            	include "_maps\obj1D.asm"
000089A2                            ; ---------------------------------------------------------------------------
000089A2                            ; Sprite mappings - object 1D
000089A2                            ; ---------------------------------------------------------------------------
000089A2 0000                       		dc.w byte_891E-Map_obj1D
000089A4 04                         byte_891E:	dc.b 4
000089A5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000089AA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000089AF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000089B4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000089BA 00                         		even
000089BA 00                         		even
000089BA                            
000089BA                            ; ===========================================================================
000089BA                            ; ---------------------------------------------------------------------------
000089BA                            ; Object 2A - doors (SBZ)
000089BA                            ; ---------------------------------------------------------------------------
000089BA                            
000089BA                            Obj2A:					; XREF: Obj_Index
000089BA 7000                       		moveq	#0,d0
000089BC 1028 0024                  		move.b	$24(a0),d0
000089C0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000089C4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000089C8                            ; ===========================================================================
000089C8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000089CA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000089CC                            ; ===========================================================================
000089CC                            
000089CC                            Obj2A_Main:				; XREF: Obj2A_Index
000089CC 5428 0024                  		addq.b	#2,$24(a0)
000089D0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000089D8 317C 42E8 0002             		move.w	#$42E8,2(a0)
000089DE 0028 0004 0001             		ori.b	#4,1(a0)
000089E4 117C 0008 0019             		move.b	#8,$19(a0)
000089EA 117C 0004 0018             		move.b	#4,$18(a0)
000089F0                            
000089F0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000089F0 323C 0040                  		move.w	#$40,d1
000089F4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000089F8 3038 D008                  		move.w	($FFFFD008).w,d0
000089FC D041                       		add.w	d1,d0
000089FE B068 0008                  		cmp.w	8(a0),d0
00008A02 6500                       		bcs.s	Obj2A_Animate
00008A04 9041                       		sub.w	d1,d0
00008A06 9041                       		sub.w	d1,d0
00008A08 B068 0008                  		cmp.w	8(a0),d0
00008A0C 6400                       		bcc.s	Obj2A_Animate
00008A0E D041                       		add.w	d1,d0
00008A10 B068 0008                  		cmp.w	8(a0),d0
00008A14 6400                       		bcc.s	loc_899A
00008A16 0828 0000 0022             		btst	#0,$22(a0)
00008A1C 6600                       		bne.s	Obj2A_Animate
00008A1E 6000                       		bra.s	Obj2A_Open
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            loc_899A:				; XREF: Obj2A_OpenShut
00008A20 0828 0000 0022             		btst	#0,$22(a0)
00008A26 6700                       		beq.s	Obj2A_Animate
00008A28                            
00008A28                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008A28 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008A2E                            
00008A2E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008A2E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008A34 6100 0000                  		bsr.w	AnimateSprite
00008A38 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008A3C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008A3E 323C 0011                  		move.w	#$11,d1
00008A42 343C 0020                  		move.w	#$20,d2
00008A46 3602                       		move.w	d2,d3
00008A48 5243                       		addq.w	#1,d3
00008A4A 3828 0008                  		move.w	8(a0),d4
00008A4E 6100 0000                  		bsr.w	SolidObject
00008A52                            
00008A52                            Obj2A_MarkAsUsed:
00008A52 6000 0000                  		bra.w	MarkObjGone
00008A56                            ; ===========================================================================
00008A56                            Ani_obj2A:
00008A56                            	include "_anim\obj2A.asm"
00008A56                            ; ---------------------------------------------------------------------------
00008A56                            ; Animation script - doors (SBZ)
00008A56                            ; ---------------------------------------------------------------------------
00008A56 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008A58 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008A5A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008A66 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008A72                            		even
00008A72                            		even
00008A72                            
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            ; Sprite mappings - doors (SBZ)
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            Map_obj2A:
00008A72                            	include "_maps\obj2A.asm"
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            ; Sprite mappings - doors (SBZ)
00008A72                            ; ---------------------------------------------------------------------------
00008A72 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008A76 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008A7A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008A7E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008A82 0000                       		dc.w byte_8A56-Map_obj2A
00008A84 02                         byte_89FE:	dc.b 2
00008A85 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008A8A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008A8F 02                         byte_8A09:	dc.b 2
00008A90 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008A95 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008A9A 02                         byte_8A14:	dc.b 2
00008A9B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008AA0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008AA5 02                         byte_8A1F:	dc.b 2
00008AA6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008AAB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008AB0 02                         byte_8A2A:	dc.b 2
00008AB1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008AB6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008ABB 02                         byte_8A35:	dc.b 2
00008ABC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008AC1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008AC6 02                         byte_8A40:	dc.b 2
00008AC7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008ACC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008AD1 02                         byte_8A4B:	dc.b 2
00008AD2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008AD7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008ADC 02                         byte_8A56:	dc.b 2
00008ADD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008AE2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008AE8 00                         		even
00008AE8 00                         		even
00008AE8                            
00008AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AE8                            
00008AE8                            
00008AE8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008AE8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008AEC 6700                       		beq.s	loc_8AA8
00008AEE 6B00 0000                  		bmi.w	loc_8AC4
00008AF2 4A40                       		tst.w	d0
00008AF4 6700 0000                  		beq.w	loc_8A92
00008AF8 6B00                       		bmi.s	loc_8A7C
00008AFA 4A69 0010                  		tst.w	$10(a1)
00008AFE 6B00                       		bmi.s	loc_8A92
00008B00 6000                       		bra.s	loc_8A82
00008B02                            ; ===========================================================================
00008B02                            
00008B02                            loc_8A7C:
00008B02 4A69 0010                  		tst.w	$10(a1)
00008B06 6A00                       		bpl.s	loc_8A92
00008B08                            
00008B08                            loc_8A82:
00008B08 9169 0008                  		sub.w	d0,8(a1)
00008B0C 337C 0000 0014             		move.w	#0,$14(a1)
00008B12 337C 0000 0010             		move.w	#0,$10(a1)
00008B18                            
00008B18                            loc_8A92:
00008B18 0829 0001 0022             		btst	#1,$22(a1)
00008B1E 6600                       		bne.s	loc_8AB6
00008B20 08E9 0005 0022             		bset	#5,$22(a1)
00008B26 08E8 0005 0022             		bset	#5,$22(a0)
00008B2C 4E75                       		rts	
00008B2E                            ; ===========================================================================
00008B2E                            
00008B2E                            loc_8AA8:
00008B2E 0828 0005 0022             		btst	#5,$22(a0)
00008B34 6700                       		beq.s	locret_8AC2
00008B36 337C 0001 001C             		move.w	#1,$1C(a1)
00008B3C                            
00008B3C                            loc_8AB6:
00008B3C 08A8 0005 0022             		bclr	#5,$22(a0)
00008B42 08A9 0005 0022             		bclr	#5,$22(a1)
00008B48                            
00008B48                            locret_8AC2:
00008B48 4E75                       		rts	
00008B4A                            ; ===========================================================================
00008B4A                            
00008B4A                            loc_8AC4:
00008B4A 4A69 0012                  		tst.w	$12(a1)
00008B4E 6A00                       		bpl.s	locret_8AD8
00008B50 4A43                       		tst.w	d3
00008B52 6A00                       		bpl.s	locret_8AD8
00008B54 9769 000C                  		sub.w	d3,$C(a1)
00008B58 337C 0000 0012             		move.w	#0,$12(a1)
00008B5E                            
00008B5E                            locret_8AD8:
00008B5E 4E75                       		rts	
00008B60                            ; End of function Obj44_SolidWall
00008B60                            
00008B60                            
00008B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B60                            
00008B60                            
00008B60                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008B60 43F8 D000                  		lea	($FFFFD000).w,a1
00008B64 3029 0008                  		move.w	8(a1),d0
00008B68 9068 0008                  		sub.w	8(a0),d0
00008B6C D041                       		add.w	d1,d0
00008B6E 6B00                       		bmi.s	loc_8B48
00008B70 3601                       		move.w	d1,d3
00008B72 D643                       		add.w	d3,d3
00008B74 B043                       		cmp.w	d3,d0
00008B76 6200                       		bhi.s	loc_8B48
00008B78 1629 0016                  		move.b	$16(a1),d3
00008B7C 4883                       		ext.w	d3
00008B7E D443                       		add.w	d3,d2
00008B80 3629 000C                  		move.w	$C(a1),d3
00008B84 9668 000C                  		sub.w	$C(a0),d3
00008B88 D642                       		add.w	d2,d3
00008B8A 6B00                       		bmi.s	loc_8B48
00008B8C 3802                       		move.w	d2,d4
00008B8E D844                       		add.w	d4,d4
00008B90 B644                       		cmp.w	d4,d3
00008B92 6400                       		bcc.s	loc_8B48
00008B94 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008B98 6B00                       		bmi.s	loc_8B48
00008B9A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008BA0 6400                       		bcc.s	loc_8B48
00008BA2 4A78 FE08                  		tst.w	($FFFFFE08).w
00008BA6 6600                       		bne.s	loc_8B48
00008BA8 3A00                       		move.w	d0,d5
00008BAA B240                       		cmp.w	d0,d1
00008BAC 6400                       		bcc.s	loc_8B30
00008BAE D241                       		add.w	d1,d1
00008BB0 9041                       		sub.w	d1,d0
00008BB2 3A00                       		move.w	d0,d5
00008BB4 4445                       		neg.w	d5
00008BB6                            
00008BB6                            loc_8B30:
00008BB6 3203                       		move.w	d3,d1
00008BB8 B443                       		cmp.w	d3,d2
00008BBA 6400                       		bcc.s	loc_8B3C
00008BBC 9644                       		sub.w	d4,d3
00008BBE 3203                       		move.w	d3,d1
00008BC0 4441                       		neg.w	d1
00008BC2                            
00008BC2                            loc_8B3C:
00008BC2 BA41                       		cmp.w	d1,d5
00008BC4 6200                       		bhi.s	loc_8B44
00008BC6 7801                       		moveq	#1,d4
00008BC8 4E75                       		rts	
00008BCA                            ; ===========================================================================
00008BCA                            
00008BCA                            loc_8B44:
00008BCA 78FF                       		moveq	#-1,d4
00008BCC 4E75                       		rts	
00008BCE                            ; ===========================================================================
00008BCE                            
00008BCE                            loc_8B48:
00008BCE 7800                       		moveq	#0,d4
00008BD0 4E75                       		rts	
00008BD2                            ; End of function Obj44_SolidWall2
00008BD2                            
00008BD2                            ; ===========================================================================
00008BD2                            ; ---------------------------------------------------------------------------
00008BD2                            ; Object 1E - Ball Hog enemy (SBZ)
00008BD2                            ; ---------------------------------------------------------------------------
00008BD2                            
00008BD2                            Obj1E:					; XREF: Obj_Index
00008BD2 7000                       		moveq	#0,d0
00008BD4 1028 0024                  		move.b	$24(a0),d0
00008BD8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008BDC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008BE0                            ; ===========================================================================
00008BE0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008BE2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008BE4                            ; ===========================================================================
00008BE4                            
00008BE4                            Obj1E_Main:				; XREF: Obj1E_Index
00008BE4 117C 0013 0016             		move.b	#$13,$16(a0)
00008BEA 117C 0008 0017             		move.b	#8,$17(a0)
00008BF0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008BF8 317C 2302 0002             		move.w	#$2302,2(a0)
00008BFE 117C 0004 0001             		move.b	#4,1(a0)
00008C04 117C 0004 0018             		move.b	#4,$18(a0)
00008C0A 117C 0005 0020             		move.b	#5,$20(a0)
00008C10 117C 000C 0019             		move.b	#$C,$19(a0)
00008C16 6100 0000                  		bsr.w	ObjectFall
00008C1A 4EB9 0000 0000             		jsr	ObjHitFloor
00008C20 4A41                       		tst.w	d1
00008C22 6A00                       		bpl.s	locret_8BAC
00008C24 D368 000C                  		add.w	d1,$C(a0)
00008C28 317C 0000 0012             		move.w	#0,$12(a0)
00008C2E 5428 0024                  		addq.b	#2,$24(a0)
00008C32                            
00008C32                            locret_8BAC:
00008C32 4E75                       		rts	
00008C34                            ; ===========================================================================
00008C34                            
00008C34                            Obj1E_Action:				; XREF: Obj1E_Index
00008C34 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008C3A 6100 0000                  		bsr.w	AnimateSprite
00008C3E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008C44 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008C46 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008C4A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008C4C 6000                       		bra.s	Obj1E_MarkAsGone
00008C4E                            ; ===========================================================================
00008C4E                            
00008C4E                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008C4E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008C52                            
00008C52                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008C52 6000 0000                  		bra.w	MarkObjGone
00008C56                            ; ===========================================================================
00008C56                            
00008C56                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008C56 117C 0001 0032             		move.b	#1,$32(a0)
00008C5C 6100 0000                  		bsr.w	SingleObjLoad
00008C60 6600                       		bne.s	loc_8C1A
00008C62 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008C66 3368 0008 0008             		move.w	8(a0),8(a1)
00008C6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008C72 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008C78 337C 0000 0012             		move.w	#0,$12(a1)
00008C7E 70FC                       		moveq	#-4,d0
00008C80 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008C86 6700                       		beq.s	loc_8C0A	; if not, branch
00008C88 4440                       		neg.w	d0
00008C8A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008C8E                            
00008C8E                            loc_8C0A:
00008C8E D169 0008                  		add.w	d0,8(a1)
00008C92 0669 000C 000C             		addi.w	#$C,$C(a1)
00008C98 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008C9E                            
00008C9E                            loc_8C1A:
00008C9E 60B2                       		bra.s	Obj1E_MarkAsGone
00008CA0                            ; ===========================================================================
00008CA0                            ; ---------------------------------------------------------------------------
00008CA0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008CA0                            ; ---------------------------------------------------------------------------
00008CA0                            
00008CA0                            Obj20:					; XREF: Obj_Index
00008CA0 7000                       		moveq	#0,d0
00008CA2 1028 0024                  		move.b	$24(a0),d0
00008CA6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008CAA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008CAE                            ; ===========================================================================
00008CAE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008CB0 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008CB2                            ; ===========================================================================
00008CB2                            
00008CB2                            Obj20_Main:				; XREF: Obj20_Index
00008CB2 5428 0024                  		addq.b	#2,$24(a0)
00008CB6 117C 0007 0016             		move.b	#7,$16(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008CC4 317C 2302 0002             		move.w	#$2302,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 117C 0003 0018             		move.b	#3,$18(a0)
00008CD6 117C 0087 0020             		move.b	#$87,$20(a0)
00008CDC 117C 0008 0019             		move.b	#8,$19(a0)
00008CE2 7000                       		moveq	#0,d0
00008CE4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008CE8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008CEC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008CF0 117C 0004 001A             		move.b	#4,$1A(a0)
00008CF6                            
00008CF6                            Obj20_Bounce:				; XREF: Obj20_Index
00008CF6 4EB9 0000 0000             		jsr	ObjectFall
00008CFC 4A68 0012                  		tst.w	$12(a0)
00008D00 6B00                       		bmi.s	Obj20_ChkExplode
00008D02 4EB9 0000 0000             		jsr	ObjHitFloor
00008D08 4A41                       		tst.w	d1
00008D0A 6A00                       		bpl.s	Obj20_ChkExplode
00008D0C D368 000C                  		add.w	d1,$C(a0)
00008D10 317C FD00 0012             		move.w	#-$300,$12(a0)
00008D16 4A03                       		tst.b	d3
00008D18 6700                       		beq.s	Obj20_ChkExplode
00008D1A 6B00                       		bmi.s	loc_8CA4
00008D1C 4A68 0010                  		tst.w	$10(a0)
00008D20 6A00                       		bpl.s	Obj20_ChkExplode
00008D22 4468 0010                  		neg.w	$10(a0)
00008D26 6000                       		bra.s	Obj20_ChkExplode
00008D28                            ; ===========================================================================
00008D28                            
00008D28                            loc_8CA4:				; XREF: Obj20_Bounce
00008D28 4A68 0010                  		tst.w	$10(a0)
00008D2C 6B00                       		bmi.s	Obj20_ChkExplode
00008D2E 4468 0010                  		neg.w	$10(a0)
00008D32                            
00008D32                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008D32 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008D36 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008D38 10BC 0024                  		move.b	#$24,0(a0)
00008D3C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008D40 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008D46 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008D4A                            ; ===========================================================================
00008D4A                            
00008D4A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008D4A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008D4E 6A00                       		bpl.s	Obj20_Display
00008D50 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008D56 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008D5C                            
00008D5C                            Obj20_Display:
00008D5C 6100 0000                  		bsr.w	DisplaySprite
00008D60 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008D64 0640 00E0                  		addi.w	#$E0,d0
00008D68 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008D6C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008D70 4E75                       		rts	
00008D72                            ; ===========================================================================
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            ; Object 24 - explosion	from a destroyed monitor
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            
00008D72                            Obj24:					; XREF: Obj_Index
00008D72 7000                       		moveq	#0,d0
00008D74 1028 0024                  		move.b	$24(a0),d0
00008D78 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008D7C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008D80                            ; ===========================================================================
00008D80 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008D82 0000                       		dc.w Obj24_Animate-Obj24_Index
00008D84                            ; ===========================================================================
00008D84                            
00008D84                            Obj24_Main:				; XREF: Obj24_Index
00008D84 5428 0024                  		addq.b	#2,$24(a0)
00008D88 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008D90 317C 041C 0002             		move.w	#$41C,2(a0)
00008D96 117C 0004 0001             		move.b	#4,1(a0)
00008D9C 117C 0001 0018             		move.b	#1,$18(a0)
00008DA2 117C 0000 0020             		move.b	#0,$20(a0)
00008DA8 117C 000C 0019             		move.b	#$C,$19(a0)
00008DAE 117C 0009 001E             		move.b	#9,$1E(a0)
00008DB4 117C 0000 001A             		move.b	#0,$1A(a0)
00008DBA 303C 00A5                  		move.w	#$A5,d0
00008DBE 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play explosion sound
00008DC4                            
00008DC4                            Obj24_Animate:				; XREF: Obj24_Index
00008DC4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DC8 6A00                       		bpl.s	Obj24_Display
00008DCA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008DD0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008DD4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008DDA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008DDE                            
00008DDE                            Obj24_Display:
00008DDE 6000 0000                  		bra.w	DisplaySprite
00008DE2                            ; ===========================================================================
00008DE2                            ; ---------------------------------------------------------------------------
00008DE2                            ; Object 27 - explosion	from a destroyed enemy
00008DE2                            ; ---------------------------------------------------------------------------
00008DE2                            
00008DE2                            Obj27:					; XREF: Obj_Index
00008DE2 7000                       		moveq	#0,d0
00008DE4 1028 0024                  		move.b	$24(a0),d0
00008DE8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008DEC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008DF0                            ; ===========================================================================
00008DF0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008DF2 0000                       		dc.w Obj27_Main-Obj27_Index
00008DF4 0000                       		dc.w Obj27_Animate-Obj27_Index
00008DF6                            ; ===========================================================================
00008DF6                            
00008DF6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008DF6 5428 0024                  		addq.b	#2,$24(a0)
00008DFA 6100 0000                  		bsr.w	SingleObjLoad
00008DFE 6600                       		bne.s	Obj27_Main
00008E00 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008E04 3368 0008 0008             		move.w	8(a0),8(a1)
00008E0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008E10 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008E16                            
00008E16                            Obj27_Main:				; XREF: Obj27_Index
00008E16 5428 0024                  		addq.b	#2,$24(a0)
00008E1A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008E22 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008E28 117C 0004 0001             		move.b	#4,1(a0)
00008E2E 117C 0001 0018             		move.b	#1,$18(a0)
00008E34 117C 0000 0020             		move.b	#0,$20(a0)
00008E3A 117C 000C 0019             		move.b	#$C,$19(a0)
00008E40 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008E46 117C 0000 001A             		move.b	#0,$1A(a0)
00008E4C 303C 00C1                  		move.w	#$C1,d0
00008E50 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008E56                            
00008E56                            Obj27_Animate:				; XREF: Obj27_Index
00008E56 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008E5A 6A00                       		bpl.s	Obj27_Display
00008E5C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008E62 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008E66 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008E6C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008E70                            
00008E70                            Obj27_Display:
00008E70 6000 0000                  		bra.w	DisplaySprite
00008E74                            ; ===========================================================================
00008E74                            ; ---------------------------------------------------------------------------
00008E74                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008E74                            ; ---------------------------------------------------------------------------
00008E74                            
00008E74                            Obj3F:					; XREF: Obj_Index
00008E74 7000                       		moveq	#0,d0
00008E76 1028 0024                  		move.b	$24(a0),d0
00008E7A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008E7E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008E82                            ; ===========================================================================
00008E82 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008E84 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008E86                            ; ===========================================================================
00008E86                            
00008E86                            Obj3F_Main:				; XREF: Obj3F_Index
00008E86 5428 0024                  		addq.b	#2,$24(a0)
00008E8A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008E92 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008E98 117C 0004 0001             		move.b	#4,1(a0)
00008E9E 117C 0001 0018             		move.b	#1,$18(a0)
00008EA4 117C 0000 0020             		move.b	#0,$20(a0)
00008EAA 117C 000C 0019             		move.b	#$C,$19(a0)
00008EB0 117C 0007 001E             		move.b	#7,$1E(a0)
00008EB6 117C 0000 001A             		move.b	#0,$1A(a0)
00008EBC 303C 00C4                  		move.w	#$C4,d0
00008EC0 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008EC6                            ; ===========================================================================
00008EC6                            Ani_obj1E:
00008EC6                            	include "_anim\obj1E.asm"
00008EC6                            ; ---------------------------------------------------------------------------
00008EC6                            ; Animation script - doors (SBZ)
00008EC6                            ; ---------------------------------------------------------------------------
00008EC6 0000                       		dc.w byte_8E4A-Ani_obj1E
00008EC8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008EE0 00                         		even
00008EE0 00                         		even
00008EE0                            
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            Map_obj1E:
00008EE0                            	include "_maps\obj1E.asm"
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008EE0                            ; ---------------------------------------------------------------------------
00008EE0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008EE4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008EE8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008EEC 02                         byte_8E6E:	dc.b 2
00008EED EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008EF2 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008EF7 02                         byte_8E79:	dc.b 2
00008EF8 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008EFD FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008F02 02                         byte_8E84:	dc.b 2
00008F03 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008F08 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008F0D 02                         byte_8E8F:	dc.b 2
00008F0E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008F13 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008F18 01                         byte_8E9A:	dc.b 1
00008F19 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008F1E 01                         byte_8EA0:	dc.b 1
00008F1F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008F24                            		even
00008F24                            		even
00008F24                            
00008F24                            ; ---------------------------------------------------------------------------
00008F24                            ; Sprite mappings - explosion
00008F24                            ; ---------------------------------------------------------------------------
00008F24                            Map_obj24:
00008F24                            	include "_maps\obj24.asm"
00008F24                            ; ---------------------------------------------------------------------------
00008F24                            ; Sprite mappings - explosion
00008F24                            ; ---------------------------------------------------------------------------
00008F24 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008F28 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008F2C 01                         byte_8EAE:	dc.b 1
00008F2D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008F32 01                         byte_8EB4:	dc.b 1
00008F33 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008F38 01                         byte_8EBA:	dc.b 1
00008F39 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008F3E 01                         byte_8EC0:	dc.b 1
00008F3F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008F44                            		even
00008F44                            		even
00008F44                            
00008F44                            ; ---------------------------------------------------------------------------
00008F44                            ; Sprite mappings - explosion
00008F44                            ; ---------------------------------------------------------------------------
00008F44 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008F48 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008F4C 0000                       		dc.w byte_8EF7-Map_obj27
00008F4E 01                         byte_8ED0:	dc.b 1
00008F4F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008F54 01                         byte_8ED6:	dc.b 1
00008F55 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008F5A 01                         byte_8EDC:	dc.b 1
00008F5B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008F60 04                         byte_8EE2:	dc.b 4
00008F61 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008F66 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008F6B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008F70 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008F75 04                         byte_8EF7:	dc.b 4
00008F76 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008F7B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008F80 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008F85 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008F8A                            		even
00008F8A                            ; ---------------------------------------------------------------------------
00008F8A                            ; Sprite mappings - explosion from when	a boss is destroyed
00008F8A                            ; ---------------------------------------------------------------------------
00008F8A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00008F8C 0000                       		dc.w byte_8F16-Map_obj3F
00008F8E 0000                       		dc.w byte_8F1C-Map_obj3F
00008F90 FFD6                       		dc.w byte_8EE2-Map_obj3F
00008F92 FFEB                       		dc.w byte_8EF7-Map_obj3F
00008F94 01                         byte_8F16:	dc.b 1
00008F95 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00008F9A 01                         byte_8F1C:	dc.b 1
00008F9B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00008FA0                            		even
00008FA0                            ; ===========================================================================
00008FA0                            ; ---------------------------------------------------------------------------
00008FA0                            ; Object 28 - animals
00008FA0                            ; ---------------------------------------------------------------------------
00008FA0                            
00008FA0                            Obj28:					; XREF: Obj_Index
00008FA0 7000                       		moveq	#0,d0
00008FA2 1028 0024                  		move.b	$24(a0),d0
00008FA6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00008FAA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00008FAE                            ; ===========================================================================
00008FAE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00008FB2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008FB6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00008FBA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008FBE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00008FC2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00008FC6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00008FCA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008FCE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008FD2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00008FD6 0000                       		dc.w loc_92D6-Obj28_Index
00008FD8                            
00008FD8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00008FE4                            
00008FE4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00008FE8 0000 0000                  		dc.l Map_obj28
00008FEC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00008FF0 0000 0000                  		dc.l Map_obj28a		; mappings address
00008FF4 FE80 FD00                  		dc.w $FE80, $FD00
00008FF8 0000 0000                  		dc.l Map_obj28
00008FFC FEC0 FE80                  		dc.w $FEC0, $FE80
00009000 0000 0000                  		dc.l Map_obj28a
00009004 FE40 FD00                  		dc.w $FE40, $FD00
00009008 0000 0000                  		dc.l Map_obj28b
0000900C FD00 FC00                  		dc.w $FD00, $FC00
00009010 0000 0000                  		dc.l Map_obj28a
00009014 FD80 FC80                  		dc.w $FD80, $FC80
00009018 0000 0000                  		dc.l Map_obj28b
0000901C                            
0000901C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000902C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000903C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009048                            
00009048 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000905C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009070 0000 0000                  		dc.l Map_obj28b
00009074                            
00009074 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009086 0565 05B3                  		dc.w $565, $5B3
0000908A                            ; ===========================================================================
0000908A                            
0000908A                            Obj28_Ending:				; XREF: Obj28_Index
0000908A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000908E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009092 7000                       		moveq	#0,d0
00009094 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009098 D040                       		add.w	d0,d0		; multiply d0 by 2
0000909A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000909E 0440 0014                  		subi.w	#$14,d0
000090A2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000090A8 D040                       		add.w	d0,d0
000090AA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000090B0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000090B4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000090BA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000090C0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000090C6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000090CC 117C 000C 0016             		move.b	#$C,$16(a0)
000090D2 117C 0004 0001             		move.b	#4,1(a0)
000090D8 08E8 0000 0001             		bset	#0,1(a0)
000090DE 117C 0006 0018             		move.b	#6,$18(a0)
000090E4 117C 0008 0019             		move.b	#8,$19(a0)
000090EA 117C 0007 001E             		move.b	#7,$1E(a0)
000090F0 6000 0000                  		bra.w	DisplaySprite
000090F4                            ; ===========================================================================
000090F4                            
000090F4                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000090F4 5428 0024                  		addq.b	#2,$24(a0)
000090F8 6100 97CC                  		bsr.w	RandomNumber
000090FC 0240 0001                  		andi.w	#1,d0
00009100 7200                       		moveq	#0,d1
00009102 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009106 D241                       		add.w	d1,d1
00009108 D240                       		add.w	d0,d1
0000910A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000910E 1031 1000                  		move.b	(a1,d1.w),d0
00009112 1140 0030                  		move.b	d0,$30(a0)
00009116 E748                       		lsl.w	#3,d0
00009118 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000911C D2C0                       		adda.w	d0,a1
0000911E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009122 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009126 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000912A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009130 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009136 6700                       		beq.s	loc_90C0	; if yes, branch
00009138 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000913E                            
0000913E                            loc_90C0:
0000913E 117C 000C 0016             		move.b	#$C,$16(a0)
00009144 117C 0004 0001             		move.b	#4,1(a0)
0000914A 08E8 0000 0001             		bset	#0,1(a0)
00009150 117C 0006 0018             		move.b	#6,$18(a0)
00009156 117C 0008 0019             		move.b	#8,$19(a0)
0000915C 117C 0007 001E             		move.b	#7,$1E(a0)
00009162 117C 0002 001A             		move.b	#2,$1A(a0)
00009168 317C FC00 0012             		move.w	#-$400,$12(a0)
0000916E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009172 6600                       		bne.s	loc_911C
00009174 6100 0000                  		bsr.w	SingleObjLoad
00009178 6600                       		bne.s	Obj28_Display
0000917A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000917E 3368 0008 0008             		move.w	8(a0),8(a1)
00009184 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000918A 3028 003E                  		move.w	$3E(a0),d0
0000918E E248                       		lsr.w	#1,d0
00009190 1340 001A                  		move.b	d0,$1A(a1)
00009194                            
00009194                            Obj28_Display:
00009194 6000 0000                  		bra.w	DisplaySprite
00009198                            ; ===========================================================================
00009198                            
00009198                            loc_911C:
00009198 117C 0012 0024             		move.b	#$12,$24(a0)
0000919E 4268 0010                  		clr.w	$10(a0)
000091A2 6000 0000                  		bra.w	DisplaySprite
000091A6                            ; ===========================================================================
000091A6                            
000091A6                            loc_912A:				; XREF: Obj28_Index
000091A6 4A28 0001                  		tst.b	1(a0)
000091AA 6A00 0000                  		bpl.w	DeleteObject
000091AE 6100 0000                  		bsr.w	ObjectFall
000091B2 4A68 0012                  		tst.w	$12(a0)
000091B6 6B00                       		bmi.s	loc_9180
000091B8 4EB9 0000 0000             		jsr	ObjHitFloor
000091BE 4A41                       		tst.w	d1
000091C0 6A00                       		bpl.s	loc_9180
000091C2 D368 000C                  		add.w	d1,$C(a0)
000091C6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000091CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000091D2 117C 0001 001A             		move.b	#1,$1A(a0)
000091D8 1028 0030                  		move.b	$30(a0),d0
000091DC D000                       		add.b	d0,d0
000091DE 5800                       		addq.b	#4,d0
000091E0 1140 0024                  		move.b	d0,$24(a0)
000091E4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000091E8 6700                       		beq.s	loc_9180
000091EA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000091F0 6700                       		beq.s	loc_9180
000091F2 4468 0010                  		neg.w	$10(a0)
000091F6 0868 0000 0001             		bchg	#0,1(a0)
000091FC                            
000091FC                            loc_9180:
000091FC 6000 0000                  		bra.w	DisplaySprite
00009200                            ; ===========================================================================
00009200                            
00009200                            loc_9184:				; XREF: Obj28_Index
00009200 6100 0000                  		bsr.w	ObjectFall
00009204 117C 0001 001A             		move.b	#1,$1A(a0)
0000920A 4A68 0012                  		tst.w	$12(a0)
0000920E 6B00                       		bmi.s	loc_91AE
00009210 117C 0000 001A             		move.b	#0,$1A(a0)
00009216 4EB9 0000 0000             		jsr	ObjHitFloor
0000921C 4A41                       		tst.w	d1
0000921E 6A00                       		bpl.s	loc_91AE
00009220 D368 000C                  		add.w	d1,$C(a0)
00009224 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000922A                            
0000922A                            loc_91AE:
0000922A 4A28 0028                  		tst.b	$28(a0)
0000922E 6600                       		bne.s	loc_9224
00009230 4A28 0001                  		tst.b	1(a0)
00009234 6A00 0000                  		bpl.w	DeleteObject
00009238 6000 0000                  		bra.w	DisplaySprite
0000923C                            ; ===========================================================================
0000923C                            
0000923C                            loc_91C0:				; XREF: Obj28_Index
0000923C 6100 0000                  		bsr.w	SpeedToPos
00009240 0668 0018 0012             		addi.w	#$18,$12(a0)
00009246 4A68 0012                  		tst.w	$12(a0)
0000924A 6B00                       		bmi.s	loc_91FC
0000924C 4EB9 0000 0000             		jsr	ObjHitFloor
00009252 4A41                       		tst.w	d1
00009254 6A00                       		bpl.s	loc_91FC
00009256 D368 000C                  		add.w	d1,$C(a0)
0000925A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009260 4A28 0028                  		tst.b	$28(a0)
00009264 6700                       		beq.s	loc_91FC
00009266 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000926C 6700                       		beq.s	loc_91FC
0000926E 4468 0010                  		neg.w	$10(a0)
00009272 0868 0000 0001             		bchg	#0,1(a0)
00009278                            
00009278                            loc_91FC:
00009278 5328 001E                  		subq.b	#1,$1E(a0)
0000927C 6A00                       		bpl.s	loc_9212
0000927E 117C 0001 001E             		move.b	#1,$1E(a0)
00009284 5228 001A                  		addq.b	#1,$1A(a0)
00009288 0228 0001 001A             		andi.b	#1,$1A(a0)
0000928E                            
0000928E                            loc_9212:
0000928E 4A28 0028                  		tst.b	$28(a0)
00009292 6600                       		bne.s	loc_9224
00009294 4A28 0001                  		tst.b	1(a0)
00009298 6A00 0000                  		bpl.w	DeleteObject
0000929C 6000 0000                  		bra.w	DisplaySprite
000092A0                            ; ===========================================================================
000092A0                            
000092A0                            loc_9224:				; XREF: Obj28_Index
000092A0 3028 0008                  		move.w	8(a0),d0
000092A4 9078 D008                  		sub.w	($FFFFD008).w,d0
000092A8 6500                       		bcs.s	loc_923C
000092AA 0440 0180                  		subi.w	#$180,d0
000092AE 6A00                       		bpl.s	loc_923C
000092B0 4A28 0001                  		tst.b	1(a0)
000092B4 6A00 0000                  		bpl.w	DeleteObject
000092B8                            
000092B8                            loc_923C:
000092B8 6000 0000                  		bra.w	DisplaySprite
000092BC                            ; ===========================================================================
000092BC                            
000092BC                            loc_9240:				; XREF: Obj28_Index
000092BC 4A28 0001                  		tst.b	1(a0)
000092C0 6A00 0000                  		bpl.w	DeleteObject
000092C4 5368 0036                  		subq.w	#1,$36(a0)
000092C8 6600 0000                  		bne.w	loc_925C
000092CC 117C 0002 0024             		move.b	#2,$24(a0)
000092D2 117C 0003 0018             		move.b	#3,$18(a0)
000092D8                            
000092D8                            loc_925C:
000092D8 6000 0000                  		bra.w	DisplaySprite
000092DC                            ; ===========================================================================
000092DC                            
000092DC                            loc_9260:				; XREF: Obj28_Index
000092DC 6100 0000                  		bsr.w	sub_9404
000092E0 6400                       		bcc.s	loc_927C
000092E2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000092E8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092EE 117C 000E 0024             		move.b	#$E,$24(a0)
000092F4 6000 FF46                  		bra.w	loc_91C0
000092F8                            ; ===========================================================================
000092F8                            
000092F8                            loc_927C:
000092F8 6000 FFA6                  		bra.w	loc_9224
000092FC                            ; ===========================================================================
000092FC                            
000092FC                            loc_9280:				; XREF: Obj28_Index
000092FC 6100 0000                  		bsr.w	sub_9404
00009300 6A00                       		bpl.s	loc_92B6
00009302 4268 0010                  		clr.w	$10(a0)
00009306 4268 0032                  		clr.w	$32(a0)
0000930A 6100 0000                  		bsr.w	SpeedToPos
0000930E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009314 6100 0000                  		bsr.w	loc_93C4
00009318 6100 0000                  		bsr.w	loc_93EC
0000931C 5328 001E                  		subq.b	#1,$1E(a0)
00009320 6A00                       		bpl.s	loc_92B6
00009322 117C 0001 001E             		move.b	#1,$1E(a0)
00009328 5228 001A                  		addq.b	#1,$1A(a0)
0000932C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009332                            
00009332                            loc_92B6:
00009332 6000 FF6C                  		bra.w	loc_9224
00009336                            ; ===========================================================================
00009336                            
00009336                            loc_92BA:				; XREF: Obj28_Index
00009336 6100 0000                  		bsr.w	sub_9404
0000933A 6A00                       		bpl.s	loc_9310
0000933C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009342 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009348 117C 0004 0024             		move.b	#4,$24(a0)
0000934E 6000 FEB0                  		bra.w	loc_9184
00009352                            ; ===========================================================================
00009352                            
00009352                            loc_92D6:				; XREF: Obj28_Index
00009352 6100 0000                  		bsr.w	ObjectFall
00009356 117C 0001 001A             		move.b	#1,$1A(a0)
0000935C 4A68 0012                  		tst.w	$12(a0)
00009360 6B00                       		bmi.s	loc_9310
00009362 117C 0000 001A             		move.b	#0,$1A(a0)
00009368 4EB9 0000 0000             		jsr	ObjHitFloor
0000936E 4A41                       		tst.w	d1
00009370 6A00                       		bpl.s	loc_9310
00009372 4628 0029                  		not.b	$29(a0)
00009376 6600                       		bne.s	loc_9306
00009378 4468 0010                  		neg.w	$10(a0)
0000937C 0868 0000 0001             		bchg	#0,1(a0)
00009382                            
00009382                            loc_9306:
00009382 D368 000C                  		add.w	d1,$C(a0)
00009386 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000938C                            
0000938C                            loc_9310:
0000938C 6000 FF12                  		bra.w	loc_9224
00009390                            ; ===========================================================================
00009390                            
00009390                            loc_9314:				; XREF: Obj28_Index
00009390 6100 0000                  		bsr.w	sub_9404
00009394 6A00                       		bpl.s	loc_932E
00009396 4268 0010                  		clr.w	$10(a0)
0000939A 4268 0032                  		clr.w	$32(a0)
0000939E 6100 0000                  		bsr.w	ObjectFall
000093A2 6100 0000                  		bsr.w	loc_93C4
000093A6 6100 0000                  		bsr.w	loc_93EC
000093AA                            
000093AA                            loc_932E:
000093AA 6000 FEF4                  		bra.w	loc_9224
000093AE                            ; ===========================================================================
000093AE                            
000093AE                            loc_9332:				; XREF: Obj28_Index
000093AE 6100 0000                  		bsr.w	sub_9404
000093B2 6A00                       		bpl.s	loc_936C
000093B4 6100 0000                  		bsr.w	ObjectFall
000093B8 117C 0001 001A             		move.b	#1,$1A(a0)
000093BE 4A68 0012                  		tst.w	$12(a0)
000093C2 6B00                       		bmi.s	loc_936C
000093C4 117C 0000 001A             		move.b	#0,$1A(a0)
000093CA 4EB9 0000 0000             		jsr	ObjHitFloor
000093D0 4A41                       		tst.w	d1
000093D2 6A00                       		bpl.s	loc_936C
000093D4 4468 0010                  		neg.w	$10(a0)
000093D8 0868 0000 0001             		bchg	#0,1(a0)
000093DE D368 000C                  		add.w	d1,$C(a0)
000093E2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093E8                            
000093E8                            loc_936C:
000093E8 6000 FEB6                  		bra.w	loc_9224
000093EC                            ; ===========================================================================
000093EC                            
000093EC                            loc_9370:				; XREF: Obj28_Index
000093EC 6100 0000                  		bsr.w	sub_9404
000093F0 6A00                       		bpl.s	loc_93C0
000093F2 6100 0000                  		bsr.w	SpeedToPos
000093F6 0668 0018 0012             		addi.w	#$18,$12(a0)
000093FC 4A68 0012                  		tst.w	$12(a0)
00009400 6B00                       		bmi.s	loc_93AA
00009402 4EB9 0000 0000             		jsr	ObjHitFloor
00009408 4A41                       		tst.w	d1
0000940A 6A00                       		bpl.s	loc_93AA
0000940C 4628 0029                  		not.b	$29(a0)
00009410 6600                       		bne.s	loc_93A0
00009412 4468 0010                  		neg.w	$10(a0)
00009416 0868 0000 0001             		bchg	#0,1(a0)
0000941C                            
0000941C                            loc_93A0:
0000941C D368 000C                  		add.w	d1,$C(a0)
00009420 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009426                            
00009426                            loc_93AA:
00009426 5328 001E                  		subq.b	#1,$1E(a0)
0000942A 6A00                       		bpl.s	loc_93C0
0000942C 117C 0001 001E             		move.b	#1,$1E(a0)
00009432 5228 001A                  		addq.b	#1,$1A(a0)
00009436 0228 0001 001A             		andi.b	#1,$1A(a0)
0000943C                            
0000943C                            loc_93C0:
0000943C 6000 FE62                  		bra.w	loc_9224
00009440                            ; ===========================================================================
00009440                            
00009440                            loc_93C4:
00009440 117C 0001 001A             		move.b	#1,$1A(a0)
00009446 4A68 0012                  		tst.w	$12(a0)
0000944A 6B00                       		bmi.s	locret_93EA
0000944C 117C 0000 001A             		move.b	#0,$1A(a0)
00009452 4EB9 0000 0000             		jsr	ObjHitFloor
00009458 4A41                       		tst.w	d1
0000945A 6A00                       		bpl.s	locret_93EA
0000945C D368 000C                  		add.w	d1,$C(a0)
00009460 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009466                            
00009466                            locret_93EA:
00009466 4E75                       		rts	
00009468                            ; ===========================================================================
00009468                            
00009468                            loc_93EC:
00009468 08E8 0000 0001             		bset	#0,1(a0)
0000946E 3028 0008                  		move.w	8(a0),d0
00009472 9078 D008                  		sub.w	($FFFFD008).w,d0
00009476 6400                       		bcc.s	locret_9402
00009478 08A8 0000 0001             		bclr	#0,1(a0)
0000947E                            
0000947E                            locret_9402:
0000947E 4E75                       		rts	
00009480                            
00009480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009480                            
00009480                            
00009480                            sub_9404:
00009480 3038 D008                  		move.w	($FFFFD008).w,d0
00009484 9068 0008                  		sub.w	8(a0),d0
00009488 0440 00B8                  		subi.w	#$B8,d0
0000948C 4E75                       		rts	
0000948E                            ; End of function sub_9404
0000948E                            
0000948E                            ; ===========================================================================
0000948E                            ; ---------------------------------------------------------------------------
0000948E                            ; Object 29 - points that appear when you destroy something
0000948E                            ; ---------------------------------------------------------------------------
0000948E                            
0000948E                            Obj29:					; XREF: Obj_Index
0000948E 7000                       		moveq	#0,d0
00009490 1028 0024                  		move.b	$24(a0),d0
00009494 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009498 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000949C 6000 0000                  		bra.w	DisplaySprite
000094A0                            ; ===========================================================================
000094A0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000094A2 0000                       		dc.w Obj29_Slower-Obj29_Index
000094A4                            ; ===========================================================================
000094A4                            
000094A4                            Obj29_Main:				; XREF: Obj29_Index
000094A4 5428 0024                  		addq.b	#2,$24(a0)
000094A8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000094B0 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
000094B6 117C 0004 0001             		move.b	#4,1(a0)
000094BC 117C 0001 0018             		move.b	#1,$18(a0)
000094C2 117C 0008 0019             		move.b	#8,$19(a0)
000094C8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000094CE                            
000094CE                            Obj29_Slower:				; XREF: Obj29_Index
000094CE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000094D2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000094D6 6100 0000                  		bsr.w	SpeedToPos
000094DA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000094E0 4E75                       		rts	
000094E2                            ; ===========================================================================
000094E2                            ; ---------------------------------------------------------------------------
000094E2                            ; Sprite mappings - animals
000094E2                            ; ---------------------------------------------------------------------------
000094E2                            Map_obj28:
000094E2                            	include "_maps\obj28.asm"
000094E2                            ; ---------------------------------------------------------------------------
000094E2                            ; Sprite mappings - animals
000094E2                            ; ---------------------------------------------------------------------------
000094E2 0000                       		dc.w byte_9472-Map_obj28
000094E4 0000                       		dc.w byte_9478-Map_obj28
000094E6 0000                       		dc.w byte_946C-Map_obj28
000094E8 01                         byte_946C:	dc.b 1
000094E9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000094EE 01                         byte_9472:	dc.b 1
000094EF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
000094F4 01                         byte_9478:	dc.b 1
000094F5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
000094FA                            		even
000094FA                            		even
000094FA                            
000094FA                            Map_obj28a:
000094FA                            	include "_maps\obj28a.asm"
000094FA                            ; ---------------------------------------------------------------------------
000094FA                            ; Sprite mappings - animals
000094FA                            ; ---------------------------------------------------------------------------
000094FA 0000                       		dc.w byte_948A-Map_obj28a
000094FC 0000                       		dc.w byte_9490-Map_obj28a
000094FE 0000                       		dc.w byte_9484-Map_obj28a
00009500 01                         byte_9484:	dc.b 1
00009501 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009506 01                         byte_948A:	dc.b 1
00009507 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000950C 01                         byte_9490:	dc.b 1
0000950D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009512                            		even
00009512                            		even
00009512                            
00009512                            Map_obj28b:
00009512                            	include "_maps\obj28b.asm"
00009512                            ; ---------------------------------------------------------------------------
00009512                            ; Sprite mappings - animals
00009512                            ; ---------------------------------------------------------------------------
00009512 0000                       		dc.w byte_94A2-Map_obj28b
00009514 0000                       		dc.w byte_94A8-Map_obj28b
00009516 0000                       		dc.w byte_949C-Map_obj28b
00009518 01                         byte_949C:	dc.b 1
00009519 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000951E 01                         byte_94A2:	dc.b 1
0000951F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009524 01                         byte_94A8:	dc.b 1
00009525 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000952A                            		even
0000952A                            		even
0000952A                            
0000952A                            ; ---------------------------------------------------------------------------
0000952A                            ; Sprite mappings - points that	appear when you	destroy	something
0000952A                            ; ---------------------------------------------------------------------------
0000952A                            Map_obj29:
0000952A                            	include "_maps\obj29.asm"
0000952A                            ; ---------------------------------------------------------------------------
0000952A                            ; Sprite mappings - points that	appear when you	destroy	something
0000952A                            ; ---------------------------------------------------------------------------
0000952A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000952E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009532 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009536 0000                       		dc.w byte_94E5-Map_obj29
00009538 01                         byte_94BC:	dc.b 1
00009539 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000953E 01                         byte_94C2:	dc.b 1
0000953F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009544 01                         byte_94C8:	dc.b 1
00009545 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000954A 01                         byte_94CE:	dc.b 1
0000954B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009550 01                         byte_94D4:	dc.b 1
00009551 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009556 02                         byte_94DA:	dc.b 2
00009557 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000955C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009561 02                         byte_94E5:	dc.b 2
00009562 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009567 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000956C                            		even
0000956C                            		even
0000956C                            
0000956C                            ; ===========================================================================
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            
0000956C                            Obj1F:					; XREF: Obj_Index
0000956C 7000                       		moveq	#0,d0
0000956E 1028 0024                  		move.b	$24(a0),d0
00009572 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009576 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000957A                            ; ===========================================================================
0000957A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000957C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000957E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009580 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009582 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009584                            ; ===========================================================================
00009584                            
00009584                            Obj1F_Main:				; XREF: Obj1F_Index
00009584 117C 0010 0016             		move.b	#$10,$16(a0)
0000958A 117C 0008 0017             		move.b	#8,$17(a0)
00009590 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009598 317C 0400 0002             		move.w	#$400,2(a0)
0000959E 117C 0004 0001             		move.b	#4,1(a0)
000095A4 117C 0003 0018             		move.b	#3,$18(a0)
000095AA 117C 0006 0020             		move.b	#6,$20(a0)
000095B0 117C 0015 0019             		move.b	#$15,$19(a0)
000095B6 6100 0000                  		bsr.w	ObjectFall
000095BA 4EB9 0000 0000             		jsr	ObjHitFloor
000095C0 4A41                       		tst.w	d1
000095C2 6A00                       		bpl.s	locret_955A
000095C4 D368 000C                  		add.w	d1,$C(a0)
000095C8 1143 0026                  		move.b	d3,$26(a0)
000095CC 317C 0000 0012             		move.w	#0,$12(a0)
000095D2 5428 0024                  		addq.b	#2,$24(a0)
000095D6                            
000095D6                            locret_955A:
000095D6 4E75                       		rts	
000095D8                            ; ===========================================================================
000095D8                            
000095D8                            Obj1F_Action:				; XREF: Obj1F_Index
000095D8 7000                       		moveq	#0,d0
000095DA 1028 0025                  		move.b	$25(a0),d0
000095DE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000095E2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000095E6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000095EC 6100 0000                  		bsr.w	AnimateSprite
000095F0 6000 0000                  		bra.w	MarkObjGone
000095F4                            ; ===========================================================================
000095F4 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
000095F6 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
000095F8                            ; ===========================================================================
000095F8                            
000095F8                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
000095F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000095FC 6A00                       		bpl.s	locret_95B6
000095FE 4A28 0001                  		tst.b	1(a0)
00009602 6A00                       		bpl.s	Obj1F_Move
00009604 0868 0001 0032             		bchg	#1,$32(a0)
0000960A 6600                       		bne.s	Obj1F_MakeFire
0000960C                            
0000960C                            Obj1F_Move:
0000960C 5428 0025                  		addq.b	#2,$25(a0)
00009610 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009616 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000961C 6100 0000                  		bsr.w	Obj1F_SetAni
00009620 5600                       		addq.b	#3,d0
00009622 1140 001C                  		move.b	d0,$1C(a0)
00009626 0868 0000 0022             		bchg	#0,$22(a0)
0000962C 6600                       		bne.s	locret_95B6
0000962E 4468 0010                  		neg.w	$10(a0)		; change direction
00009632                            
00009632                            locret_95B6:
00009632 4E75                       		rts	
00009634                            ; ===========================================================================
00009634                            
00009634                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009634 317C 003B 0030             		move.w	#$3B,$30(a0)
0000963A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009640 6100 0000                  		bsr.w	SingleObjLoad
00009644 6600                       		bne.s	Obj1F_MakeFire2
00009646 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000964A 137C 0006 0024             		move.b	#6,$24(a1)
00009650 3368 0008 0008             		move.w	8(a0),8(a1)
00009656 0469 0010 0008             		subi.w	#$10,8(a1)
0000965C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009662 337C FF00 0010             		move.w	#-$100,$10(a1)
00009668                            
00009668                            Obj1F_MakeFire2:
00009668 6100 0000                  		bsr.w	SingleObjLoad
0000966C 6600                       		bne.s	locret_9618
0000966E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009672 137C 0006 0024             		move.b	#6,$24(a1)
00009678 3368 0008 0008             		move.w	8(a0),8(a1)
0000967E 0669 0010 0008             		addi.w	#$10,8(a1)
00009684 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000968A 337C 0100 0010             		move.w	#$100,$10(a1)
00009690                            
00009690                            locret_9618:
00009690 4E75                       		rts	
00009692                            ; ===========================================================================
00009692                            
00009692                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009692 5368 0030                  		subq.w	#1,$30(a0)
00009696 6B00                       		bmi.s	loc_966E
00009698 6100 0000                  		bsr.w	SpeedToPos
0000969C 0868 0000 0032             		bchg	#0,$32(a0)
000096A2 6600                       		bne.s	loc_9654
000096A4 3628 0008                  		move.w	8(a0),d3
000096A8 0643 0010                  		addi.w	#$10,d3
000096AC 0828 0000 0022             		btst	#0,$22(a0)
000096B2 6700                       		beq.s	loc_9640
000096B4 0443 0020                  		subi.w	#$20,d3
000096B8                            
000096B8                            loc_9640:
000096B8 4EB9 0000 0000             		jsr	ObjHitFloor2
000096BE 0C41 FFF8                  		cmpi.w	#-8,d1
000096C2 6D00                       		blt.s	loc_966E
000096C4 0C41 000C                  		cmpi.w	#$C,d1
000096C8 6C00                       		bge.s	loc_966E
000096CA 4E75                       		rts	
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
000096CC 4EB9 0000 0000             		jsr	ObjHitFloor
000096D2 D368 000C                  		add.w	d1,$C(a0)
000096D6 1143 0026                  		move.b	d3,$26(a0)
000096DA 6100 0000                  		bsr.w	Obj1F_SetAni
000096DE 5600                       		addq.b	#3,d0
000096E0 1140 001C                  		move.b	d0,$1C(a0)
000096E4 4E75                       		rts	
000096E6                            ; ===========================================================================
000096E6                            
000096E6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
000096E6 5528 0025                  		subq.b	#2,$25(a0)
000096EA 317C 003B 0030             		move.w	#59,$30(a0)
000096F0 317C 0000 0010             		move.w	#0,$10(a0)
000096F6 6100 0000                  		bsr.w	Obj1F_SetAni
000096FA 1140 001C                  		move.b	d0,$1C(a0)
000096FE 4E75                       		rts	
00009700                            ; ---------------------------------------------------------------------------
00009700                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009700                            ; ---------------------------------------------------------------------------
00009700                            
00009700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009700                            
00009700                            
00009700                            Obj1F_SetAni:				; XREF: loc_966E
00009700 7000                       		moveq	#0,d0
00009702 1628 0026                  		move.b	$26(a0),d3
00009706 6B00                       		bmi.s	loc_96A4
00009708 0C03 0006                  		cmpi.b	#6,d3
0000970C 6500                       		bcs.s	locret_96A2
0000970E 7001                       		moveq	#1,d0
00009710 0828 0000 0022             		btst	#0,$22(a0)
00009716 6600                       		bne.s	locret_96A2
00009718 7002                       		moveq	#2,d0
0000971A                            
0000971A                            locret_96A2:
0000971A 4E75                       		rts	
0000971C                            ; ===========================================================================
0000971C                            
0000971C                            loc_96A4:				; XREF: Obj1F_SetAni
0000971C 0C03 00FA                  		cmpi.b	#-6,d3
00009720 6200                       		bhi.s	locret_96B6
00009722 7002                       		moveq	#2,d0
00009724 0828 0000 0022             		btst	#0,$22(a0)
0000972A 6600                       		bne.s	locret_96B6
0000972C 7001                       		moveq	#1,d0
0000972E                            
0000972E                            locret_96B6:
0000972E 4E75                       		rts	
00009730                            ; End of function Obj1F_SetAni
00009730                            
00009730                            ; ===========================================================================
00009730                            
00009730                            Obj1F_Delete:				; XREF: Obj1F_Index
00009730 6100 0000                  		bsr.w	DeleteObject
00009734 4E75                       		rts	
00009736                            ; ===========================================================================
00009736                            ; ---------------------------------------------------------------------------
00009736                            ; Sub-object - missile that the	Crabmeat throws
00009736                            ; ---------------------------------------------------------------------------
00009736                            
00009736                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009736 5428 0024                  		addq.b	#2,$24(a0)
0000973A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009742 317C 0400 0002             		move.w	#$400,2(a0)
00009748 117C 0004 0001             		move.b	#4,1(a0)
0000974E 117C 0003 0018             		move.b	#3,$18(a0)
00009754 117C 0087 0020             		move.b	#$87,$20(a0)
0000975A 117C 0008 0019             		move.b	#8,$19(a0)
00009760 317C FC00 0012             		move.w	#-$400,$12(a0)
00009766 117C 0007 001C             		move.b	#7,$1C(a0)
0000976C                            
0000976C                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000976C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009772 6100 0000                  		bsr.w	AnimateSprite
00009776 6100 0000                  		bsr.w	ObjectFall
0000977A 6100 0000                  		bsr.w	DisplaySprite
0000977E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009782 0640 00E0                  		addi.w	#$E0,d0
00009786 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000978A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000978C 4E75                       		rts	
0000978E                            ; ===========================================================================
0000978E                            
0000978E                            Obj1F_Delete2:
0000978E 6000 0000                  		bra.w	DeleteObject
00009792                            ; ===========================================================================
00009792                            Ani_obj1F:
00009792                            	include "_anim\obj1F.asm"
00009792                            ; ---------------------------------------------------------------------------
00009792                            ; Animation script - Crabmeat enemy
00009792                            ; ---------------------------------------------------------------------------
00009792 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009798 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000979E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
000097A2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
000097A6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
000097AA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
000097AE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
000097B4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
000097BA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
000097C0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
000097C4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
000097C8                            		even
000097C8                            		even
000097C8                            
000097C8                            ; ---------------------------------------------------------------------------
000097C8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000097C8                            ; ---------------------------------------------------------------------------
000097C8                            Map_obj1F:
000097C8                            	include "_maps\obj1F.asm"
000097C8                            ; ---------------------------------------------------------------------------
000097C8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000097C8                            ; ---------------------------------------------------------------------------
000097C8 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
000097CC 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
000097D0 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
000097D4 0000                       		dc.w byte_97D7-Map_obj1F
000097D6 04                         byte_975E:	dc.b 4
000097D7 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
000097DC F009 0800 00               		dc.b $F0, 9, 8,	0, 0
000097E1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
000097E6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
000097EB 04                         byte_9773:	dc.b 4
000097EC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
000097F1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
000097F6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
000097FB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009800 04                         byte_9788:	dc.b 4
00009801 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009806 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000980B FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009810 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009815 04                         byte_979D:	dc.b 4
00009816 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000981B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009820 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009825 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000982A 06                         byte_97B2:	dc.b 6
0000982B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009830 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009835 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000983A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000983F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009844 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009849 01                         byte_97D1:	dc.b 1
0000984A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000984F 01                         byte_97D7:	dc.b 1
00009850 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009856 00                         		even
00009856 00                         		even
00009856                            
00009856                            ; ===========================================================================
00009856                            ; ---------------------------------------------------------------------------
00009856                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009856                            ; ---------------------------------------------------------------------------
00009856                            
00009856                            Obj22:					; XREF: Obj_Index
00009856 7000                       		moveq	#0,d0
00009858 1028 0024                  		move.b	$24(a0),d0
0000985C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009860 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009864                            ; ===========================================================================
00009864 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009866 0000                       		dc.w Obj22_Action-Obj22_Index
00009868 0000                       		dc.w Obj22_Delete-Obj22_Index
0000986A                            ; ===========================================================================
0000986A                            
0000986A                            Obj22_Main:				; XREF: Obj22_Index
0000986A 5428 0024                  		addq.b	#2,$24(a0)
0000986E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009876 317C 0444 0002             		move.w	#$444,2(a0)
0000987C 117C 0004 0001             		move.b	#4,1(a0)
00009882 117C 0003 0018             		move.b	#3,$18(a0)
00009888 117C 0008 0020             		move.b	#8,$20(a0)
0000988E 117C 0018 0019             		move.b	#$18,$19(a0)
00009894                            
00009894                            Obj22_Action:				; XREF: Obj22_Index
00009894 7000                       		moveq	#0,d0
00009896 1028 0025                  		move.b	$25(a0),d0
0000989A 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000989E 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
000098A2 43F9 0000 0000             		lea	(Ani_obj22).l,a1
000098A8 6100 0000                  		bsr.w	AnimateSprite
000098AC 6000 0000                  		bra.w	MarkObjGone
000098B0                            ; ===========================================================================
000098B0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
000098B2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj22_Move:				; XREF: Obj22_Index2
000098B4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000098B8 6A00                       		bpl.s	locret_986C	; if time remains, branch
000098BA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
000098C0 6600                       		bne.s	Obj22_Fire	; if yes, branch
000098C2 5428 0025                  		addq.b	#2,$25(a0)
000098C6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
000098CC 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
000098D2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
000098D8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
000098DE 6600                       		bne.s	locret_986C	; if not, branch
000098E0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
000098E4                            
000098E4                            locret_986C:
000098E4 4E75                       		rts	
000098E6                            ; ===========================================================================
000098E6                            
000098E6                            Obj22_Fire:				; XREF: Obj22_Move
000098E6 6100 0000                  		bsr.w	SingleObjLoad
000098EA 6600                       		bne.s	locret_98D0
000098EC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
000098F0 3368 0008 0008             		move.w	8(a0),8(a1)
000098F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000098FC 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009902 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009908 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000990E 303C 0018                  		move.w	#$18,d0
00009912 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009918 6600                       		bne.s	loc_98AA	; if not, branch
0000991A 4440                       		neg.w	d0
0000991C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009920                            
00009920                            loc_98AA:
00009920 D169 0008                  		add.w	d0,8(a1)
00009924 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000992A 337C 000E 0032             		move.w	#$E,$32(a1)
00009930 2348 003C                  		move.l	a0,$3C(a1)
00009934 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000993A 317C 003B 0032             		move.w	#$3B,$32(a0)
00009940 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009946                            
00009946                            locret_98D0:
00009946 4E75                       		rts	
00009948                            ; ===========================================================================
00009948                            
00009948                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009948 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000994C 6B00                       		bmi.s	Obj22_ChgDir
0000994E 6100 0000                  		bsr.w	SpeedToPos
00009952 4A28 0034                  		tst.b	$34(a0)
00009956 6600                       		bne.s	locret_992A
00009958 3038 D008                  		move.w	($FFFFD008).w,d0
0000995C 9068 0008                  		sub.w	8(a0),d0
00009960 6A00                       		bpl.s	Obj22_SetNrSonic
00009962 4440                       		neg.w	d0
00009964                            
00009964                            Obj22_SetNrSonic:
00009964 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009968 6400                       		bcc.s	locret_992A	; if not, branch
0000996A 4A28 0001                  		tst.b	1(a0)
0000996E 6A00                       		bpl.s	locret_992A
00009970 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009976 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000997C 6000                       		bra.s	Obj22_Stop
0000997E                            ; ===========================================================================
0000997E                            
0000997E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000997E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009984 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000998A 317C 003B 0032             		move.w	#59,$32(a0)
00009990                            
00009990                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009990 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009994 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000999A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
000099A0                            
000099A0                            locret_992A:
000099A0 4E75                       		rts	
000099A2                            ; ===========================================================================
000099A2                            
000099A2                            Obj22_Delete:				; XREF: Obj22_Index
000099A2 6100 0000                  		bsr.w	DeleteObject
000099A6 4E75                       		rts	
000099A8                            ; ===========================================================================
000099A8                            ; ---------------------------------------------------------------------------
000099A8                            ; Object 23 - missile that Buzz	Bomber throws
000099A8                            ; ---------------------------------------------------------------------------
000099A8                            
000099A8                            Obj23:					; XREF: Obj_Index
000099A8 7000                       		moveq	#0,d0
000099AA 1028 0024                  		move.b	$24(a0),d0
000099AE 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
000099B2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
000099B6                            ; ===========================================================================
000099B6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
000099B8 0000                       		dc.w Obj23_Animate-Obj23_Index
000099BA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
000099BC 0000                       		dc.w Obj23_Delete-Obj23_Index
000099BE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
000099C0                            ; ===========================================================================
000099C0                            
000099C0                            Obj23_Main:				; XREF: Obj23_Index
000099C0 5368 0032                  		subq.w	#1,$32(a0)
000099C4 6A00                       		bpl.s	Obj23_ChkCancel
000099C6 5428 0024                  		addq.b	#2,$24(a0)
000099CA 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
000099D2 317C 2444 0002             		move.w	#$2444,2(a0)
000099D8 117C 0004 0001             		move.b	#4,1(a0)
000099DE 117C 0003 0018             		move.b	#3,$18(a0)
000099E4 117C 0008 0019             		move.b	#8,$19(a0)
000099EA 0228 0003 0022             		andi.b	#3,$22(a0)
000099F0 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
000099F4 6700                       		beq.s	Obj23_Animate	; if not, branch
000099F6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
000099FC 117C 0087 0020             		move.b	#$87,$20(a0)
00009A02 117C 0001 001C             		move.b	#1,$1C(a0)
00009A08 6000                       		bra.s	Obj23_Animate2
00009A0A                            ; ===========================================================================
00009A0A                            
00009A0A                            Obj23_Animate:				; XREF: Obj23_Index
00009A0A 6100                       		bsr.s	Obj23_ChkCancel
00009A0C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A12 6100 0000                  		bsr.w	AnimateSprite
00009A16 6000 0000                  		bra.w	DisplaySprite
00009A1A                            ; ---------------------------------------------------------------------------
00009A1A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009A1A                            ; destroyed, and if it has, then cancel	the missile
00009A1A                            ; ---------------------------------------------------------------------------
00009A1A                            
00009A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A1A                            
00009A1A                            
00009A1A                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009A1A 2268 003C                  		movea.l	$3C(a0),a1
00009A1E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009A22 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009A24 4E75                       		rts	
00009A26                            ; End of function Obj23_ChkCancel
00009A26                            
00009A26                            ; ===========================================================================
00009A26                            
00009A26                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009A26 0828 0007 0022             		btst	#7,$22(a0)
00009A2C 6600                       		bne.s	Obj23_Explode
00009A2E 117C 0087 0020             		move.b	#$87,$20(a0)
00009A34 117C 0001 001C             		move.b	#1,$1C(a0)
00009A3A 6100 0000                  		bsr.w	SpeedToPos
00009A3E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A44 6100 0000                  		bsr.w	AnimateSprite
00009A48 6100 0000                  		bsr.w	DisplaySprite
00009A4C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009A50 0640 00E0                  		addi.w	#$E0,d0
00009A54 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009A58 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009A5A 4E75                       		rts	
00009A5C                            ; ===========================================================================
00009A5C                            
00009A5C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009A5C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009A60 117C 0000 0024             		move.b	#0,$24(a0)
00009A66 6000 F30A                  		bra.w	Obj24
00009A6A                            ; ===========================================================================
00009A6A                            
00009A6A                            Obj23_Delete:				; XREF: Obj23_Index
00009A6A 6100 0000                  		bsr.w	DeleteObject
00009A6E 4E75                       		rts	
00009A70                            ; ===========================================================================
00009A70                            
00009A70                            Obj23_FromNewt:				; XREF: Obj23_Index
00009A70 4A28 0001                  		tst.b	1(a0)
00009A74 6AF4                       		bpl.s	Obj23_Delete
00009A76 6100 0000                  		bsr.w	SpeedToPos
00009A7A                            
00009A7A                            Obj23_Animate2:				; XREF: Obj23_Main
00009A7A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A80 6100 0000                  		bsr.w	AnimateSprite
00009A84 6100 0000                  		bsr.w	DisplaySprite
00009A88 4E75                       		rts	
00009A8A                            ; ===========================================================================
00009A8A                            Ani_obj22:
00009A8A                            	include "_anim\obj22.asm"
00009A8A                            ; ---------------------------------------------------------------------------
00009A8A                            ; Animation script - Buzz Bomber enemy
00009A8A                            ; ---------------------------------------------------------------------------
00009A8A 0000                       		dc.w byte_9A1E-Ani_obj22
00009A8C 0000                       		dc.w byte_9A22-Ani_obj22
00009A8E 0000                       		dc.w byte_9A26-Ani_obj22
00009A90 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009A94 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009A98 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009A9C                            		even
00009A9C                            		even
00009A9C                            
00009A9C                            Ani_obj23:
00009A9C                            	include "_anim\obj23.asm"
00009A9C                            ; ---------------------------------------------------------------------------
00009A9C                            ; Animation script - missile that Buzz Bomber throws
00009A9C                            ; ---------------------------------------------------------------------------
00009A9C 0000                       		dc.w byte_9A2E-Ani_obj23
00009A9E 0000                       		dc.w byte_9A32-Ani_obj23
00009AA0 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009AA4 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009AA8                            		even
00009AA8                            		even
00009AA8                            
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8                            ; Sprite mappings - Buzz Bomber	enemy
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8                            Map_obj22:
00009AA8                            	include "_maps\obj22.asm"
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8                            ; Sprite mappings - Buzz Bomber	enemy
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
00009AAC 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
00009AB0 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
00009AB4 06                         byte_9A42:	dc.b 6
00009AB5 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009ABA F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009ABF 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009AC4 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009AC9 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009ACE F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009AD3 06                         byte_9A61:	dc.b 6
00009AD4 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009AD9 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009ADE 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009AE3 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009AE8 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009AED F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009AF2 07                         byte_9A80:	dc.b 7
00009AF3 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00009AF8 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009AFD F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B02 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B07 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B0C F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009B11 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009B16 07                         byte_9AA4:	dc.b 7
00009B17 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00009B1C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B21 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B26 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B2B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B30 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009B35 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009B3A 06                         byte_9AC8:	dc.b 6
00009B3B F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009B40 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009B45 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009B4A 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009B4F F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009B54 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009B59 04                         byte_9AE7:	dc.b 4
00009B5A F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009B5F 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009B64 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009B69 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009B6E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009B73 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009B78                            		even
00009B78                            		even
00009B78                            
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            ; Sprite mappings - missile that Buzz Bomber throws
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            Map_obj23:
00009B78                            	include "_maps\obj23.asm"
00009B78                            ; ---------------------------------------------------------------------------
00009B78                            ; Sprite mappings - missile that Buzz Bomber throws
00009B78                            ; ---------------------------------------------------------------------------
00009B78 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009B7C 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009B80 01                         byte_9B0E:	dc.b 1
00009B81 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009B86 01                         byte_9B14:	dc.b 1
00009B87 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009B8C 01                         byte_9B1A:	dc.b 1
00009B8D F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009B92 01                         byte_9B20:	dc.b 1
00009B93 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009B98                            		even
00009B98                            		even
00009B98                            
00009B98                            ; ===========================================================================
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            ; Object 25 - rings
00009B98                            ; ---------------------------------------------------------------------------
00009B98                            
00009B98                            Obj25:					; XREF: Obj_Index
00009B98 7000                       		moveq	#0,d0
00009B9A 1028 0024                  		move.b	$24(a0),d0
00009B9E 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009BA2 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009BA6                            ; ===========================================================================
00009BA6 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009BA8 0000                       		dc.w Obj25_Animate-Obj25_Index
00009BAA 0000                       		dc.w Obj25_Collect-Obj25_Index
00009BAC 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009BAE 0000                       		dc.w Obj25_Delete-Obj25_Index
00009BB0                            ; ---------------------------------------------------------------------------
00009BB0                            ; Distances between rings (format: horizontal, vertical)
00009BB0                            ; ---------------------------------------------------------------------------
00009BB0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009BB2 1800                       		dc.b $18, 0		; horizontal normal
00009BB4 2000                       		dc.b $20, 0		; horizontal wide
00009BB6 0010                       		dc.b 0,	$10		; vertical tight
00009BB8 0018                       		dc.b 0,	$18		; vertical normal
00009BBA 0020                       		dc.b 0,	$20		; vertical wide
00009BBC 1010                       		dc.b $10, $10		; diagonal
00009BBE 1818                       		dc.b $18, $18
00009BC0 2020                       		dc.b $20, $20
00009BC2 F010                       		dc.b $F0, $10
00009BC4 E818                       		dc.b $E8, $18
00009BC6 E020                       		dc.b $E0, $20
00009BC8 1008                       		dc.b $10, 8
00009BCA 1810                       		dc.b $18, $10
00009BCC F008                       		dc.b $F0, 8
00009BCE E810                       		dc.b $E8, $10
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            Obj25_Main:				; XREF: Obj25_Index
00009BD0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009BD4 7000                       		moveq	#0,d0
00009BD6 1028 0023                  		move.b	$23(a0),d0
00009BDA 45F2 0002                  		lea	2(a2,d0.w),a2
00009BDE 1812                       		move.b	(a2),d4
00009BE0 1228 0028                  		move.b	$28(a0),d1
00009BE4 1001                       		move.b	d1,d0
00009BE6 0241 0007                  		andi.w	#7,d1
00009BEA 0C41 0007                  		cmpi.w	#7,d1
00009BEE 6600                       		bne.s	loc_9B80
00009BF0 7206                       		moveq	#6,d1
00009BF2                            
00009BF2                            loc_9B80:
00009BF2 4841                       		swap	d1
00009BF4 323C 0000                  		move.w	#0,d1
00009BF8 E808                       		lsr.b	#4,d0
00009BFA D040                       		add.w	d0,d0
00009BFC 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009C00 4885                       		ext.w	d5
00009C02 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009C06 4886                       		ext.w	d6
00009C08 2248                       		movea.l	a0,a1
00009C0A 3428 0008                  		move.w	8(a0),d2
00009C0E 3628 000C                  		move.w	$C(a0),d3
00009C12 E20C                       		lsr.b	#1,d4
00009C14 6500                       		bcs.s	loc_9C02
00009C16 0892 0007                  		bclr	#7,(a2)
00009C1A 6000                       		bra.s	loc_9BBA
00009C1C                            ; ===========================================================================
00009C1C                            
00009C1C                            Obj25_MakeRings:
00009C1C 4841                       		swap	d1
00009C1E E20C                       		lsr.b	#1,d4
00009C20 6500                       		bcs.s	loc_9C02
00009C22 0892 0007                  		bclr	#7,(a2)
00009C26 6100 0000                  		bsr.w	SingleObjLoad
00009C2A 6600                       		bne.s	loc_9C0E
00009C2C                            
00009C2C                            loc_9BBA:				; XREF: Obj25_Main
00009C2C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009C30 5429 0024                  		addq.b	#2,$24(a1)
00009C34 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009C38 3368 0008 0032             		move.w	8(a0),$32(a1)
00009C3E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009C42 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009C4A 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
00009C50 137C 0004 0001             		move.b	#4,1(a1)
00009C56 137C 0002 0018             		move.b	#2,$18(a1)
00009C5C 137C 0047 0020             		move.b	#$47,$20(a1)
00009C62 137C 0008 0019             		move.b	#8,$19(a1)
00009C68 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009C6E 1341 0034                  		move.b	d1,$34(a1)
00009C72                            
00009C72                            loc_9C02:
00009C72 5241                       		addq.w	#1,d1
00009C74 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009C76 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009C78 4841                       		swap	d1
00009C7A 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009C7E                            
00009C7E                            loc_9C0E:
00009C7E 0812 0000                  		btst	#0,(a2)
00009C82 6600 0000                  		bne.w	DeleteObject
00009C86                            
00009C86                            Obj25_Animate:				; XREF: Obj25_Index
00009C86 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009C8C 6100 0000                  		bsr.w	DisplaySprite
00009C90 3028 0032                  		move.w	$32(a0),d0
00009C94 0240 FF80                  		andi.w	#$FF80,d0
00009C98 3238 F700                  		move.w	($FFFFF700).w,d1
00009C9C 0441 0080                  		subi.w	#$80,d1
00009CA0 0241 FF80                  		andi.w	#$FF80,d1
00009CA4 9041                       		sub.w	d1,d0
00009CA6 0C40 0280                  		cmpi.w	#$280,d0
00009CAA 6200                       		bhi.s	Obj25_Delete
00009CAC 4E75                       		rts	
00009CAE                            ; ===========================================================================
00009CAE                            
00009CAE                            Obj25_Collect:				; XREF: Obj25_Index
00009CAE 5428 0024                  		addq.b	#2,$24(a0)
00009CB2 117C 0000 0020             		move.b	#0,$20(a0)
00009CB8 117C 0001 0018             		move.b	#1,$18(a0)
00009CBE 6100 0000                  		bsr.w	CollectRing
00009CC2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009CC6 7000                       		moveq	#0,d0
00009CC8 1028 0023                  		move.b	$23(a0),d0
00009CCC 1228 0034                  		move.b	$34(a0),d1
00009CD0 03F2 0002                  		bset	d1,2(a2,d0.w)
00009CD4                            
00009CD4                            Obj25_Sparkle:				; XREF: Obj25_Index
00009CD4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009CDA 6100 0000                  		bsr.w	AnimateSprite
00009CDE 6000 0000                  		bra.w	DisplaySprite
00009CE2                            ; ===========================================================================
00009CE2                            
00009CE2                            Obj25_Delete:				; XREF: Obj25_Index
00009CE2 6000 0000                  		bra.w	DeleteObject
00009CE6                            
00009CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CE6                            
00009CE6                            
00009CE6                            CollectRing:				; XREF: Obj25_Collect
00009CE6 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009CEA 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009CF0 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009CF4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009CFA 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009CFC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009D02 6700                       		beq.s	loc_9CA4
00009D04 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009D0A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D0C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009D12 6600                       		bne.s	Obj25_PlaySnd
00009D14                            
00009D14                            loc_9CA4:
00009D14 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009D18 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009D1C 303C 0088                  		move.w	#$88,d0		; play extra life music
00009D20                            
00009D20                            Obj25_PlaySnd:
00009D20 4EF9 0000 1262             		jmp	(PlaySound_Special).l
00009D26                            ; End of function CollectRing
00009D26                            
00009D26                            ; ===========================================================================
00009D26                            ; ---------------------------------------------------------------------------
00009D26                            ; Object 37 - rings flying out of Sonic	when he's hit
00009D26                            ; ---------------------------------------------------------------------------
00009D26                            
00009D26                            Obj37:					; XREF: Obj_Index
00009D26 7000                       		moveq	#0,d0
00009D28 1028 0024                  		move.b	$24(a0),d0
00009D2C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009D30 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009D34                            ; ===========================================================================
00009D34 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009D36 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009D38 0000                       		dc.w Obj37_Collect-Obj37_Index
00009D3A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009D3C 0000                       		dc.w Obj37_Delete-Obj37_Index
00009D3E                            ; ===========================================================================
00009D3E                            
00009D3E                            Obj37_CountRings:			; XREF: Obj37_Index
00009D3E 2248                       		movea.l	a0,a1
00009D40 7A00                       		moveq	#0,d5
00009D42 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009D46 7020                       		moveq	#32,d0
00009D48 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009D4A 6500                       		bcs.s	loc_9CDE	; if not, branch
00009D4C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009D4E                            
00009D4E                            loc_9CDE:
00009D4E 5345                       		subq.w	#1,d5
00009D50 383C 0288                  		move.w	#$288,d4
00009D54 6000                       		bra.s	Obj37_MakeRings
00009D56                            ; ===========================================================================
00009D56                            
00009D56                            Obj37_Loop:
00009D56 6100 0000                  		bsr.w	SingleObjLoad
00009D5A 6600 0000                  		bne.w	Obj37_ResetCounter
00009D5E                            
00009D5E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009D5E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009D62 5429 0024                  		addq.b	#2,$24(a1)
00009D66 137C 0008 0016             		move.b	#8,$16(a1)
00009D6C 137C 0008 0017             		move.b	#8,$17(a1)
00009D72 3368 0008 0008             		move.w	8(a0),8(a1)
00009D78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D7E 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009D86 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
00009D8C 137C 0004 0001             		move.b	#4,1(a1)
00009D92 137C 0003 0018             		move.b	#3,$18(a1)
00009D98 137C 0047 0020             		move.b	#$47,$20(a1)
00009D9E 137C 0008 0019             		move.b	#8,$19(a1)
00009DA4 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009DAA 4A44                       		tst.w	d4
00009DAC 6B00                       		bmi.s	loc_9D62
00009DAE 3004                       		move.w	d4,d0
00009DB0 6100 8B3A                  		bsr.w	CalcSine
00009DB4 3404                       		move.w	d4,d2
00009DB6 E04A                       		lsr.w	#8,d2
00009DB8 E560                       		asl.w	d2,d0
00009DBA E561                       		asl.w	d2,d1
00009DBC 3400                       		move.w	d0,d2
00009DBE 3601                       		move.w	d1,d3
00009DC0 0604 0010                  		addi.b	#$10,d4
00009DC4 6400                       		bcc.s	loc_9D62
00009DC6 0444 0080                  		subi.w	#$80,d4
00009DCA 6400                       		bcc.s	loc_9D62
00009DCC 383C 0288                  		move.w	#$288,d4
00009DD0                            
00009DD0                            loc_9D62:
00009DD0 3342 0010                  		move.w	d2,$10(a1)
00009DD4 3343 0012                  		move.w	d3,$12(a1)
00009DD8 4442                       		neg.w	d2
00009DDA 4444                       		neg.w	d4
00009DDC 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009DE0                            
00009DE0                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009DE0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009DE6 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009DEC 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009DF2 303C 00C6                  		move.w	#$C6,d0
00009DF6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009DFC                            
00009DFC                            Obj37_Bounce:				; XREF: Obj37_Index
00009DFC 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009E02 6100 0000                  		bsr.w	SpeedToPos
00009E06 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E0C 6B00                       		bmi.s	Obj37_ChkDel
00009E0E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009E12 D007                       		add.b	d7,d0
00009E14 0200 0003                  		andi.b	#3,d0
00009E18 6600                       		bne.s	Obj37_ChkDel
00009E1A 4EB9 0000 0000             		jsr	ObjHitFloor
00009E20 4A41                       		tst.w	d1
00009E22 6A00                       		bpl.s	Obj37_ChkDel
00009E24 D368 000C                  		add.w	d1,$C(a0)
00009E28 3028 0012                  		move.w	$12(a0),d0
00009E2C E440                       		asr.w	#2,d0
00009E2E 9168 0012                  		sub.w	d0,$12(a0)
00009E32 4468 0012                  		neg.w	$12(a0)
00009E36                            
00009E36                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009E36 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009E3A 6700                       		beq.s	Obj37_Delete
00009E3C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E40 0640 00E0                  		addi.w	#$E0,d0
00009E44 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009E48 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009E4A 6000 0000                  		bra.w	DisplaySprite
00009E4E                            ; ===========================================================================
00009E4E                            
00009E4E                            Obj37_Collect:				; XREF: Obj37_Index
00009E4E 5428 0024                  		addq.b	#2,$24(a0)
00009E52 117C 0000 0020             		move.b	#0,$20(a0)
00009E58 117C 0001 0018             		move.b	#1,$18(a0)
00009E5E 6100 FE86                  		bsr.w	CollectRing
00009E62                            
00009E62                            Obj37_Sparkle:				; XREF: Obj37_Index
00009E62 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009E68 6100 0000                  		bsr.w	AnimateSprite
00009E6C 6000 0000                  		bra.w	DisplaySprite
00009E70                            ; ===========================================================================
00009E70                            
00009E70                            Obj37_Delete:				; XREF: Obj37_Index
00009E70 6000 0000                  		bra.w	DeleteObject
00009E74                            ; ===========================================================================
00009E74                            ; ---------------------------------------------------------------------------
00009E74                            ; Object 4B - giant ring for entry to special stage
00009E74                            ; ---------------------------------------------------------------------------
00009E74                            
00009E74                            Obj4B:					; XREF: Obj_Index
00009E74 7000                       		moveq	#0,d0
00009E76 1028 0024                  		move.b	$24(a0),d0
00009E7A 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009E7E 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009E82                            ; ===========================================================================
00009E82 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009E84 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009E86 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009E88 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009E8A                            ; ===========================================================================
00009E8A                            
00009E8A                            Obj4B_Main:				; XREF: Obj4B_Index
00009E8A 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009E92 317C 2400 0002             		move.w	#$2400,2(a0)
00009E98 0028 0004 0001             		ori.b	#4,1(a0)
00009E9E 117C 0040 0019             		move.b	#$40,$19(a0)
00009EA4 4A28 0001                  		tst.b	1(a0)
00009EA8 6A00                       		bpl.s	Obj4B_Animate
00009EAA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009EB0 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009EB4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009EBA 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009EBC 4E75                       		rts	
00009EBE                            ; ===========================================================================
00009EBE                            
00009EBE                            Obj4B_Okay:				; XREF: Obj4B_Main
00009EBE 5428 0024                  		addq.b	#2,$24(a0)
00009EC2 117C 0002 0018             		move.b	#2,$18(a0)
00009EC8 117C 0052 0020             		move.b	#$52,$20(a0)
00009ECE 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009ED4                            
00009ED4                            Obj4B_Animate:				; XREF: Obj4B_Index
00009ED4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009EDA 3028 0008                  		move.w	8(a0),d0
00009EDE 0240 FF80                  		andi.w	#$FF80,d0
00009EE2 3238 F700                  		move.w	($FFFFF700).w,d1
00009EE6 0441 0080                  		subi.w	#$80,d1
00009EEA 0241 FF80                  		andi.w	#$FF80,d1
00009EEE 9041                       		sub.w	d1,d0
00009EF0 0C40 0280                  		cmpi.w	#$280,d0
00009EF4 6200 0000                  		bhi.w	DeleteObject
00009EF8 6000 0000                  		bra.w	DisplaySprite
00009EFC                            ; ===========================================================================
00009EFC                            
00009EFC                            Obj4B_Collect:				; XREF: Obj4B_Index
00009EFC 5528 0024                  		subq.b	#2,$24(a0)
00009F00 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00009F06 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
00009F0C 117C 0000 0020             		move.b	#0,$20(a0)
00009F12 6100 0000                  		bsr.w	SingleObjLoad
00009F16 6600 0000                  		bne.w	Obj4B_PlaySnd
00009F1A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009F1E 3368 0008 0008             		move.w	8(a0),8(a1)
00009F24 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F2A 2348 003C                  		move.l	a0,$3C(a1)
00009F2E 3038 D008                  		move.w	($FFFFD008).w,d0
00009F32 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009F36 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009F38 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009F3E                            
00009F3E                            Obj4B_PlaySnd:
00009F3E 303C 00C3                  		move.w	#$C3,d0
00009F42 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009F48 608A                       		bra.s	Obj4B_Animate
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Obj4B_Delete:				; XREF: Obj4B_Index
00009F4A 6000 0000                  		bra.w	DeleteObject
00009F4E                            ; ===========================================================================
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E                            ; Object 7C - flash effect when	you collect the	giant ring
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E                            
00009F4E                            Obj7C:					; XREF: Obj_Index
00009F4E 7000                       		moveq	#0,d0
00009F50 1028 0024                  		move.b	$24(a0),d0
00009F54 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009F58 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009F5C                            ; ===========================================================================
00009F5C 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009F5E 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009F60 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009F62                            ; ===========================================================================
00009F62                            
00009F62                            Obj7C_Main:				; XREF: Obj7C_Index
00009F62 5428 0024                  		addq.b	#2,$24(a0)
00009F66 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009F6E 317C 2462 0002             		move.w	#$2462,2(a0)
00009F74 0028 0004 0001             		ori.b	#4,1(a0)
00009F7A 117C 0000 0018             		move.b	#0,$18(a0)
00009F80 117C 0020 0019             		move.b	#$20,$19(a0)
00009F86 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009F8C                            
00009F8C                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009F8C 6100                       		bsr.s	Obj7C_Collect
00009F8E 3028 0008                  		move.w	8(a0),d0
00009F92 0240 FF80                  		andi.w	#$FF80,d0
00009F96 3238 F700                  		move.w	($FFFFF700).w,d1
00009F9A 0441 0080                  		subi.w	#$80,d1
00009F9E 0241 FF80                  		andi.w	#$FF80,d1
00009FA2 9041                       		sub.w	d1,d0
00009FA4 0C40 0280                  		cmpi.w	#$280,d0
00009FA8 6200 0000                  		bhi.w	DeleteObject
00009FAC 6000 0000                  		bra.w	DisplaySprite
00009FB0                            
00009FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FB0                            
00009FB0                            
00009FB0                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00009FB0 5328 001E                  		subq.b	#1,$1E(a0)
00009FB4 6A00                       		bpl.s	locret_9F76
00009FB6 117C 0001 001E             		move.b	#1,$1E(a0)
00009FBC 5228 001A                  		addq.b	#1,$1A(a0)
00009FC0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
00009FC6 6400                       		bcc.s	Obj7C_End	; if yes, branch
00009FC8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
00009FCE 6600                       		bne.s	locret_9F76	; if not, branch
00009FD0 2268 003C                  		movea.l	$3C(a0),a1
00009FD4 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
00009FDA 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
00009FE0 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00009FE6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
00009FEA 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00009FEE                            
00009FEE                            locret_9F76:
00009FEE 4E75                       		rts	
00009FF0                            ; ===========================================================================
00009FF0                            
00009FF0                            Obj7C_End:				; XREF: Obj7C_Collect
00009FF0 5428 0024                  		addq.b	#2,$24(a0)
00009FF4 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00009FFA 588F                       		addq.l	#4,sp
00009FFC 4E75                       		rts	
00009FFE                            ; End of function Obj7C_Collect
00009FFE                            
00009FFE                            ; ===========================================================================
00009FFE                            
00009FFE                            Obj7C_Delete:				; XREF: Obj7C_Index
00009FFE 6000 0000                  		bra.w	DeleteObject
0000A002                            ; ===========================================================================
0000A002                            Ani_obj25:
0000A002                            	include "_anim\obj25.asm"
0000A002                            ; ---------------------------------------------------------------------------
0000A002                            ; Animation script - ring
0000A002                            ; ---------------------------------------------------------------------------
0000A002 0000                       		dc.w byte_9F8C-Ani_obj25
0000A004 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A00A                            		even
0000A00A                            		even
0000A00A                            
0000A00A                            ; ---------------------------------------------------------------------------
0000A00A                            ; Sprite mappings - rings
0000A00A                            ; ---------------------------------------------------------------------------
0000A00A                            Map_obj25:
0000A00A                            	include "_maps\obj25.asm"
0000A00A                            ; ---------------------------------------------------------------------------
0000A00A                            ; Sprite mappings - rings
0000A00A                            ; ---------------------------------------------------------------------------
0000A00A 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A00E 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A012 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A016 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A01A 01                         byte_9FA2:	dc.b 1
0000A01B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A020 01                         byte_9FA8:	dc.b 1
0000A021 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A026 01                         byte_9FAE:	dc.b 1
0000A027 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A02C 01                         byte_9FB4:	dc.b 1
0000A02D F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A032 01                         byte_9FBA:	dc.b 1
0000A033 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A038 01                         byte_9FC0:	dc.b 1
0000A039 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A03E 01                         byte_9FC6:	dc.b 1
0000A03F F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A044 01                         byte_9FCC:	dc.b 1
0000A045 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A04A                            		even
0000A04A                            		even
0000A04A                            
0000A04A                            ; ---------------------------------------------------------------------------
0000A04A                            ; Sprite mappings - giant ring
0000A04A                            ; ---------------------------------------------------------------------------
0000A04A                            Map_obj4B:
0000A04A                            	include "_maps\obj4B.asm"
0000A04A                            ; ---------------------------------------------------------------------------
0000A04A                            ; Sprite mappings - giant ring
0000A04A                            ; ---------------------------------------------------------------------------
0000A04A 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A04E 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A052 0A                         byte_9FDA:	dc.b $A
0000A053 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A058 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A05D E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A062 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A067 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A06C F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A071 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A076 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A07B 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A080 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A085 08                         byte_A00D:	dc.b 8
0000A086 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A08B E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A090 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A095 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A09A F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A09F 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A0A4 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A0A9 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A0AE 04                         byte_A036:	dc.b 4
0000A0AF E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A0B4 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A0B9 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A0BE 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A0C3 08                         byte_A04B:	dc.b 8
0000A0C4 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A0C9 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A0CE E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A0D3 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A0D8 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A0DD 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A0E2 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A0E7 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A0EC                            		even
0000A0EC                            		even
0000A0EC                            
0000A0EC                            ; ---------------------------------------------------------------------------
0000A0EC                            ; Sprite mappings - flash effect when you collect the giant ring
0000A0EC                            ; ---------------------------------------------------------------------------
0000A0EC                            Map_obj7C:
0000A0EC                            	include "_maps\obj7C.asm"
0000A0EC                            ; ---------------------------------------------------------------------------
0000A0EC                            ; Sprite mappings - flash effect when you collect the giant ring
0000A0EC                            ; ---------------------------------------------------------------------------
0000A0EC 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A0F0 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A0F4 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A0F8 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A0FC 02                         byte_A084:	dc.b 2
0000A0FD E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A102 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A107 04                         byte_A08F:	dc.b 4
0000A108 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A10D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A112 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A117 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A11C 04                         byte_A0A4:	dc.b 4
0000A11D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A122 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A127 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A12C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A131 04                         byte_A0B9:	dc.b 4
0000A132 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A137 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A13C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A141 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A146 04                         byte_A0CE:	dc.b 4
0000A147 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A14C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A151 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A156 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A15B 04                         byte_A0E3:	dc.b 4
0000A15C E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A161 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A166 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A16B 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A170 02                         byte_A0F8:	dc.b 2
0000A171 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A176 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A17B 04                         byte_A103:	dc.b 4
0000A17C E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A181 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A186 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A18B 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A190                            		even
0000A190                            		even
0000A190                            
0000A190                            ; ===========================================================================
0000A190                            ; ---------------------------------------------------------------------------
0000A190                            ; Object 26 - monitors
0000A190                            ; ---------------------------------------------------------------------------
0000A190                            
0000A190                            Obj26:					; XREF: Obj_Index
0000A190 7000                       		moveq	#0,d0
0000A192 1028 0024                  		move.b	$24(a0),d0
0000A196 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A19A 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A19E                            ; ===========================================================================
0000A19E 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A1A0 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A1A2 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A1A4 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A1A6 0000                       		dc.w Obj26_Display-Obj26_Index
0000A1A8                            ; ===========================================================================
0000A1A8                            
0000A1A8                            Obj26_Main:				; XREF: Obj26_Index
0000A1A8 5428 0024                  		addq.b	#2,$24(a0)
0000A1AC 117C 000E 0016             		move.b	#$E,$16(a0)
0000A1B2 117C 000E 0017             		move.b	#$E,$17(a0)
0000A1B8 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A1C0 317C 0680 0002             		move.w	#$680,2(a0)
0000A1C6 117C 0004 0001             		move.b	#4,1(a0)
0000A1CC 117C 0003 0018             		move.b	#3,$18(a0)
0000A1D2 117C 000F 0019             		move.b	#$F,$19(a0)
0000A1D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A1DC 7000                       		moveq	#0,d0
0000A1DE 1028 0023                  		move.b	$23(a0),d0
0000A1E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A1E8 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A1EE 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A1F0 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A1F6 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A1FC 4E75                       		rts	
0000A1FE                            ; ===========================================================================
0000A1FE                            
0000A1FE                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A1FE 117C 0046 0020             		move.b	#$46,$20(a0)
0000A204 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A20A                            
0000A20A                            Obj26_Solid:				; XREF: Obj26_Index
0000A20A 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A20E 6700                       		beq.s	loc_A1EC	; if not, branch
0000A210 5500                       		subq.b	#2,d0
0000A212 6600                       		bne.s	Obj26_Fall
0000A214 7200                       		moveq	#0,d1
0000A216 1228 0019                  		move.b	$19(a0),d1
0000A21A 0641 000B                  		addi.w	#$B,d1
0000A21E 6100 D3EC                  		bsr.w	ExitPlatform
0000A222 0829 0003 0022             		btst	#3,$22(a1)
0000A228 6600 0000                  		bne.w	loc_A1BC
0000A22C 4228 0025                  		clr.b	$25(a0)
0000A230 6000 0000                  		bra.w	Obj26_Animate
0000A234                            ; ===========================================================================
0000A234                            
0000A234                            loc_A1BC:				; XREF: Obj26_Solid
0000A234 363C 0010                  		move.w	#$10,d3
0000A238 3428 0008                  		move.w	8(a0),d2
0000A23C 6100 D92C                  		bsr.w	MvSonicOnPtfm
0000A240 6000 0000                  		bra.w	Obj26_Animate
0000A244                            ; ===========================================================================
0000A244                            
0000A244                            Obj26_Fall:				; XREF: Obj26_Solid
0000A244 6100 0000                  		bsr.w	ObjectFall
0000A248 4EB9 0000 0000             		jsr	ObjHitFloor
0000A24E 4A41                       		tst.w	d1
0000A250 6A00 0000                  		bpl.w	Obj26_Animate
0000A254 D368 000C                  		add.w	d1,$C(a0)
0000A258 4268 0012                  		clr.w	$12(a0)
0000A25C 4228 0025                  		clr.b	$25(a0)
0000A260 6000 0000                  		bra.w	Obj26_Animate
0000A264                            ; ===========================================================================
0000A264                            
0000A264                            loc_A1EC:				; XREF: Obj26_Solid
0000A264 323C 001A                  		move.w	#$1A,d1
0000A268 343C 000F                  		move.w	#$F,d2
0000A26C 6100 0000                  		bsr.w	Obj26_SolidSides
0000A270 6700 0000                  		beq.w	loc_A25C
0000A274 4A69 0012                  		tst.w	$12(a1)
0000A278 6B00                       		bmi.s	loc_A20A
0000A27A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A280 6700                       		beq.s	loc_A25C	; if yes, branch
0000A282                            
0000A282                            loc_A20A:
0000A282 4A41                       		tst.w	d1
0000A284 6A00                       		bpl.s	loc_A220
0000A286 9769 000C                  		sub.w	d3,$C(a1)
0000A28A 6100 D26E                  		bsr.w	loc_74AE
0000A28E 117C 0002 0025             		move.b	#2,$25(a0)
0000A294 6000 0000                  		bra.w	Obj26_Animate
0000A298                            ; ===========================================================================
0000A298                            
0000A298                            loc_A220:
0000A298 4A40                       		tst.w	d0
0000A29A 6700 0000                  		beq.w	loc_A246
0000A29E 6B00                       		bmi.s	loc_A230
0000A2A0 4A69 0010                  		tst.w	$10(a1)
0000A2A4 6B00                       		bmi.s	loc_A246
0000A2A6 6000                       		bra.s	loc_A236
0000A2A8                            ; ===========================================================================
0000A2A8                            
0000A2A8                            loc_A230:
0000A2A8 4A69 0010                  		tst.w	$10(a1)
0000A2AC 6A00                       		bpl.s	loc_A246
0000A2AE                            
0000A2AE                            loc_A236:
0000A2AE 9169 0008                  		sub.w	d0,8(a1)
0000A2B2 337C 0000 0014             		move.w	#0,$14(a1)
0000A2B8 337C 0000 0010             		move.w	#0,$10(a1)
0000A2BE                            
0000A2BE                            loc_A246:
0000A2BE 0829 0001 0022             		btst	#1,$22(a1)
0000A2C4 6600                       		bne.s	loc_A26A
0000A2C6 08E9 0005 0022             		bset	#5,$22(a1)
0000A2CC 08E8 0005 0022             		bset	#5,$22(a0)
0000A2D2 6000                       		bra.s	Obj26_Animate
0000A2D4                            ; ===========================================================================
0000A2D4                            
0000A2D4                            loc_A25C:
0000A2D4 0828 0005 0022             		btst	#5,$22(a0)
0000A2DA 6700                       		beq.s	Obj26_Animate
0000A2DC 337C 0001 001C             		move.w	#1,$1C(a1)
0000A2E2                            
0000A2E2                            loc_A26A:
0000A2E2 08A8 0005 0022             		bclr	#5,$22(a0)
0000A2E8 08A9 0005 0022             		bclr	#5,$22(a1)
0000A2EE                            
0000A2EE                            Obj26_Animate:				; XREF: Obj26_Index
0000A2EE 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A2F4 6100 0000                  		bsr.w	AnimateSprite
0000A2F8                            
0000A2F8                            Obj26_Display:				; XREF: Obj26_Index
0000A2F8 6100 0000                  		bsr.w	DisplaySprite
0000A2FC 3028 0008                  		move.w	8(a0),d0
0000A300 0240 FF80                  		andi.w	#$FF80,d0
0000A304 3238 F700                  		move.w	($FFFFF700).w,d1
0000A308 0441 0080                  		subi.w	#$80,d1
0000A30C 0241 FF80                  		andi.w	#$FF80,d1
0000A310 9041                       		sub.w	d1,d0
0000A312 0C40 0280                  		cmpi.w	#$280,d0
0000A316 6200 0000                  		bhi.w	DeleteObject
0000A31A 4E75                       		rts	
0000A31C                            ; ===========================================================================
0000A31C                            
0000A31C                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A31C 5428 0024                  		addq.b	#2,$24(a0)
0000A320 117C 0000 0020             		move.b	#0,$20(a0)
0000A326 6100 0000                  		bsr.w	SingleObjLoad
0000A32A 6600                       		bne.s	Obj26_Explode
0000A32C 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A330 3368 0008 0008             		move.w	8(a0),8(a1)
0000A336 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A33C 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A342                            
0000A342                            Obj26_Explode:
0000A342 6100 0000                  		bsr.w	SingleObjLoad
0000A346 6600                       		bne.s	Obj26_SetBroken
0000A348 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A34C 5429 0024                  		addq.b	#2,$24(a1)
0000A350 3368 0008 0008             		move.w	8(a0),8(a1)
0000A356 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A35C                            
0000A35C                            Obj26_SetBroken:
0000A35C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A360 7000                       		moveq	#0,d0
0000A362 1028 0023                  		move.b	$23(a0),d0
0000A366 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A36C 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A372 6000 0000                  		bra.w	DisplaySprite
0000A376                            ; ===========================================================================
0000A376                            ; ---------------------------------------------------------------------------
0000A376                            ; Object 2E - contents of monitors
0000A376                            ; ---------------------------------------------------------------------------
0000A376                            
0000A376                            Obj2E:					; XREF: Obj_Index
0000A376 7000                       		moveq	#0,d0
0000A378 1028 0024                  		move.b	$24(a0),d0
0000A37C 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A380 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A384 6000 0000                  		bra.w	DisplaySprite
0000A388                            ; ===========================================================================
0000A388 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A38A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A38C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A38E                            ; ===========================================================================
0000A38E                            
0000A38E                            Obj2E_Main:				; XREF: Obj2E_Index
0000A38E 5428 0024                  		addq.b	#2,$24(a0)
0000A392 317C 0680 0002             		move.w	#$680,2(a0)
0000A398 117C 0024 0001             		move.b	#$24,1(a0)
0000A39E 117C 0003 0018             		move.b	#3,$18(a0)
0000A3A4 117C 0008 0019             		move.b	#8,$19(a0)
0000A3AA 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A3B0 7000                       		moveq	#0,d0
0000A3B2 1028 001C                  		move.b	$1C(a0),d0
0000A3B6 5400                       		addq.b	#2,d0
0000A3B8 1140 001A                  		move.b	d0,$1A(a0)
0000A3BC 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A3C2 D000                       		add.b	d0,d0
0000A3C4 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A3C8 5249                       		addq.w	#1,a1
0000A3CA 2149 0004                  		move.l	a1,4(a0)
0000A3CE                            
0000A3CE                            Obj2E_Move:				; XREF: Obj2E_Index
0000A3CE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A3D2 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A3D6 6100 0000                  		bsr.w	SpeedToPos
0000A3DA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A3E0 4E75                       		rts	
0000A3E2                            ; ===========================================================================
0000A3E2                            
0000A3E2                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A3E2 5428 0024                  		addq.b	#2,$24(a0)
0000A3E6 317C 001D 001E             		move.w	#29,$1E(a0)
0000A3EC 1028 001C                  		move.b	$1C(a0),d0
0000A3F0 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A3F4 6600                       		bne.s	Obj2E_ChkSonic
0000A3F6 4E75                       		rts			; Eggman monitor does nothing
0000A3F8                            ; ===========================================================================
0000A3F8                            
0000A3F8                            Obj2E_ChkSonic:
0000A3F8 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A3FC 6600                       		bne.s	Obj2E_ChkShoes
0000A3FE                            
0000A3FE                            ExtraLife:
0000A3FE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000A404 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000A40A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A40E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A412 303C 0088                  		move.w	#$88,d0
0000A416 4EF9 0000 125C             		jmp	(PlaySound).l	; play extra life music
0000A41C                            ; ===========================================================================
0000A41C                            
0000A41C                            Obj2E_ChkShoes:
0000A41C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A420 6600                       		bne.s	Obj2E_ChkShield
0000A422 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A428 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A42E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A434 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A43A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A440 303C 00E2                  		move.w	#$E2,d0
0000A444 4EF9 0000 125C             		jmp	(PlaySound).l	; Speed	up the music
0000A44A                            ; ===========================================================================
0000A44A                            
0000A44A                            Obj2E_ChkShield:
0000A44A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A44E 6600                       		bne.s	Obj2E_ChkInvinc
0000A450 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000A454 6600                       		bne.s	@alreadyshield
0000A456 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000A45C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000A462 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A468 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A46E                            
0000A46E                            	@alreadyshield:
0000A46E 303C 00AF                  		move.w	#$AF,d0
0000A472 4EF9 0000 125C             		jmp	(PlaySound).l	; play shield sound
0000A478                            ; ===========================================================================
0000A478                            
0000A478                            Obj2E_ChkInvinc:
0000A478 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000A47C 6600                       		bne.s Obj2E_ChkRings
0000A47E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000A484 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000A48A 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000A490 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000A496 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000A49C 11FC 0001 D21C             		move.b #1,($FFFFD21C).w
0000A4A2 11FC 004A D240             		move.b #$4A,($FFFFD240).w ; load stars object ($3802)
0000A4A8 11FC 0002 D25C             		move.b #2,($FFFFD25C).w
0000A4AE 11FC 004A D280             		move.b #$4A,($FFFFD280).w ; load stars object ($3803)
0000A4B4 11FC 0003 D29C             		move.b #3,($FFFFD29C).w
0000A4BA 11FC 004A D2C0             		move.b #$4A,($FFFFD2C0).w ; load stars object ($3804)
0000A4C0 11FC 0004 D2DC             		move.b #4,($FFFFD2DC).w
0000A4C6 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000A4CA 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000A4CC 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000A4D2 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000A4D4 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000A4D8 4EF9 0000 125C             		jmp (PlaySound).l
0000A4DE                            
0000A4DE                            DontPlayMusic:
0000A4DE 4E75                       		rts
0000A4E0                            ; ===========================================================================
0000A4E0                            
0000A4E0                            Obj2E_NoMusic:
0000A4E0 4E75                       		rts	
0000A4E2                            ; ===========================================================================
0000A4E2                            
0000A4E2                            Obj2E_ChkRings:
0000A4E2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A4E6 6600                       		bne.s	Obj2E_ChkS
0000A4E8 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A4EE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A4F4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A4FA 6500                       		bcs.s	Obj2E_RingSound
0000A4FC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A502 6700 FEFA                  		beq.w	ExtraLife
0000A506 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A50C 6500                       		bcs.s	Obj2E_RingSound
0000A50E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A514 6700 FEE8                  		beq.w	ExtraLife
0000A518                            
0000A518                            Obj2E_RingSound:
0000A518 303C 00B5                  		move.w	#$B5,d0
0000A51C 4EF9 0000 125C             		jmp	(PlaySound).l	; play ring sound
0000A522                            ; ===========================================================================
0000A522                            
0000A522                            Obj2E_ChkS:
0000A522 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A526 6600                       		bne.s	Obj2E_ChkEnd
0000A528 4E71                       		nop	
0000A52A                            
0000A52A                            Obj2E_ChkEnd:
0000A52A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A52C                            ; ===========================================================================
0000A52C                            
0000A52C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A52C 5368 001E                  		subq.w	#1,$1E(a0)
0000A530 6B00 0000                  		bmi.w	DeleteObject
0000A534 4E75                       		rts	
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            ; Subroutine to	make the sides of a monitor solid
0000A536                            ; ---------------------------------------------------------------------------
0000A536                            
0000A536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A536                            
0000A536                            
0000A536                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A536 43F8 D000                  		lea	($FFFFD000).w,a1
0000A53A 3029 0008                  		move.w	8(a1),d0
0000A53E 9068 0008                  		sub.w	8(a0),d0
0000A542 D041                       		add.w	d1,d0
0000A544 6B00                       		bmi.s	loc_A4E6
0000A546 3601                       		move.w	d1,d3
0000A548 D643                       		add.w	d3,d3
0000A54A B043                       		cmp.w	d3,d0
0000A54C 6200                       		bhi.s	loc_A4E6
0000A54E 1629 0016                  		move.b	$16(a1),d3
0000A552 4883                       		ext.w	d3
0000A554 D443                       		add.w	d3,d2
0000A556 3629 000C                  		move.w	$C(a1),d3
0000A55A 9668 000C                  		sub.w	$C(a0),d3
0000A55E D642                       		add.w	d2,d3
0000A560 6B00                       		bmi.s	loc_A4E6
0000A562 D442                       		add.w	d2,d2
0000A564 B642                       		cmp.w	d2,d3
0000A566 6400                       		bcc.s	loc_A4E6
0000A568 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A56C 6B00                       		bmi.s	loc_A4E6
0000A56E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A574 6400                       		bcc.s	loc_A4E6
0000A576 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A57A 6600                       		bne.s	loc_A4E6
0000A57C B240                       		cmp.w	d0,d1
0000A57E 6400                       		bcc.s	loc_A4DC
0000A580 D241                       		add.w	d1,d1
0000A582 9041                       		sub.w	d1,d0
0000A584                            
0000A584                            loc_A4DC:
0000A584 0C43 0010                  		cmpi.w	#$10,d3
0000A588 6500                       		bcs.s	loc_A4EA
0000A58A                            
0000A58A                            loc_A4E2:
0000A58A 7201                       		moveq	#1,d1
0000A58C 4E75                       		rts	
0000A58E                            ; ===========================================================================
0000A58E                            
0000A58E                            loc_A4E6:
0000A58E 7200                       		moveq	#0,d1
0000A590 4E75                       		rts	
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            loc_A4EA:
0000A592 7200                       		moveq	#0,d1
0000A594 1228 0019                  		move.b	$19(a0),d1
0000A598 5841                       		addq.w	#4,d1
0000A59A 3401                       		move.w	d1,d2
0000A59C D442                       		add.w	d2,d2
0000A59E D269 0008                  		add.w	8(a1),d1
0000A5A2 9268 0008                  		sub.w	8(a0),d1
0000A5A6 6BE2                       		bmi.s	loc_A4E2
0000A5A8 B242                       		cmp.w	d2,d1
0000A5AA 64DE                       		bcc.s	loc_A4E2
0000A5AC 72FF                       		moveq	#-1,d1
0000A5AE 4E75                       		rts	
0000A5B0                            ; End of function Obj26_SolidSides
0000A5B0                            
0000A5B0                            ; ===========================================================================
0000A5B0                            Ani_obj26:
0000A5B0                            	include "_anim\obj26.asm"
0000A5B0                            ; ---------------------------------------------------------------------------
0000A5B0                            ; Animation script - monitors
0000A5B0                            ; ---------------------------------------------------------------------------
0000A5B0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A5B6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A5BC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A5C2 0000                       		dc.w byte_A582-Ani_obj26
0000A5C4 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A5CA 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A5D6 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A5E2 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A5EE 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A5FA 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A606 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A612 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A61E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A62A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A632                            		even
0000A632                            		even
0000A632                            
0000A632                            ; ---------------------------------------------------------------------------
0000A632                            ; Sprite mappings - monitors
0000A632                            ; ---------------------------------------------------------------------------
0000A632                            Map_obj26:
0000A632                            	include "_maps\obj26.asm"
0000A632                            ; --------------------------------------------------------------------------------
0000A632                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A632                            ; --------------------------------------------------------------------------------
0000A632                            
0000A632                            SME_XK1AB:	
0000A632 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000A636 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000A63A 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000A63E 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000A642 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000A646 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000A64A 01                         SME_XK1AB_18:	dc.b 1	
0000A64B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A650 02                         SME_XK1AB_1E:	dc.b 2	
0000A651 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000A656 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A65B 02                         SME_XK1AB_29:	dc.b 2	
0000A65C F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000A661 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A666 00                         SME_XK1AB_34:	dc.b 0	
0000A667 02                         SME_XK1AB_35:	dc.b 2	
0000A668 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000A66D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A672 02                         SME_XK1AB_40:	dc.b 2	
0000A673 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000A678 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A67D 02                         SME_XK1AB_4B:	dc.b 2	
0000A67E F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000A683 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A688 02                         SME_XK1AB_56:	dc.b 2	
0000A689 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000A68E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A693 02                         SME_XK1AB_61:	dc.b 2	
0000A694 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000A699 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000A69E 00                         SME_XK1AB_6C:	dc.b 0	
0000A69F 00                         SME_XK1AB_6D:	dc.b 0	
0000A6A0 01                         SME_XK1AB_6E:	dc.b 1	
0000A6A1 FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000A6A6                            		even
0000A6A6                            		even
0000A6A6                            
0000A6A6                            ; ===========================================================================
0000A6A6                            ; ---------------------------------------------------------------------------
0000A6A6                            ; Object 0E - Sonic on the title screen
0000A6A6                            ; ---------------------------------------------------------------------------
0000A6A6                            
0000A6A6                            Obj0E:					; XREF: Obj_Index
0000A6A6 7000                       		moveq	#0,d0
0000A6A8 1028 0024                  		move.b	$24(a0),d0
0000A6AC 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A6B0 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A6B4                            ; ===========================================================================
0000A6B4 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A6B6 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A6B8 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A6BA 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A6BC                            ; ===========================================================================
0000A6BC                            
0000A6BC                            Obj0E_Main:				; XREF: Obj0E_Index
0000A6BC 5428 0024                  		addq.b	#2,$24(a0)
0000A6C0 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A6C6 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A6CC 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A6D4 317C 0300 0002             		move.w	#$300,2(a0)
0000A6DA 117C 0001 0018             		move.b	#1,$18(a0)
0000A6E0 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A6E6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A6EC 6100 0000                  		bsr.w	AnimateSprite
0000A6F0                            
0000A6F0                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A6F0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A6F4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A6F6 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A6FA 6000 0000                  		bra.w	DisplaySprite
0000A6FE                            ; ===========================================================================
0000A6FE                            
0000A6FE                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A6FE 4E75                       		rts	
0000A700                            ; ===========================================================================
0000A700                            
0000A700                            Obj0E_Move:				; XREF: Obj0E_Index
0000A700 5168 000A                  		subq.w	#8,$A(a0)
0000A704 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A70A 6600                       		bne.s	Obj0E_Display
0000A70C 5428 0024                  		addq.b	#2,$24(a0)
0000A710                            
0000A710                            Obj0E_Display:
0000A710 6000 0000                  		bra.w	DisplaySprite
0000A714                            ; ===========================================================================
0000A714 4E75                       		rts	
0000A716                            ; ===========================================================================
0000A716                            
0000A716                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A716 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A71C 6100 0000                  		bsr.w	AnimateSprite
0000A720 6000 0000                  		bra.w	DisplaySprite
0000A724                            ; ===========================================================================
0000A724 4E75                       		rts	
0000A726                            ; ===========================================================================
0000A726                            ; ---------------------------------------------------------------------------
0000A726                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A726                            ; ---------------------------------------------------------------------------
0000A726                            
0000A726                            Obj0F:					; XREF: Obj_Index
0000A726 7000                       		moveq	#0,d0
0000A728 1028 0024                  		move.b	$24(a0),d0
0000A72C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A730 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A734 6000 0000                  		bra.w	DisplaySprite
0000A738                            ; ===========================================================================
0000A738 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A73A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A73C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A73E                            ; ===========================================================================
0000A73E                            
0000A73E                            Obj0F_Main:				; XREF: Obj0F_Index
0000A73E 5428 0024                  		addq.b	#2,$24(a0)
0000A742 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A748 317C 0130 000A             		move.w	#$130,$A(a0)
0000A74E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A756 317C 2200 0002             		move.w	#$2200,2(a0)
0000A75C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A762 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A764 5428 0024                  		addq.b	#2,$24(a0)
0000A768 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A76E 6600                       		bne.s	locret_A6F8	; if not, branch
0000A770 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A776 317C 0170 0008             		move.w	#$170,8(a0)
0000A77C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A782                            
0000A782                            locret_A6F8:				; XREF: Obj0F_Index
0000A782 4E75                       		rts	
0000A784                            ; ===========================================================================
0000A784                            
0000A784                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A784 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A78A 6000 0000                  		bra.w	AnimateSprite
0000A78E                            ; ===========================================================================
0000A78E                            Ani_obj0E:
0000A78E                            	include "_anim\obj0E.asm"
0000A78E                            ; ---------------------------------------------------------------------------
0000A78E                            ; Animation script - Sonic on the title screen
0000A78E                            ; ---------------------------------------------------------------------------
0000A78E 0000                       		dc.w byte_A706-Ani_obj0E
0000A790 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A79C                            		even
0000A79C                            		even
0000A79C                            
0000A79C                            Ani_obj0F:
0000A79C                            	include "_anim\obj0F.asm"
0000A79C                            ; ---------------------------------------------------------------------------
0000A79C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A79C                            ; ---------------------------------------------------------------------------
0000A79C 0000                       		dc.w byte_A714-Ani_obj0F
0000A79E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A7A2                            		even
0000A7A2                            		even
0000A7A2                            
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            ; Subroutine to	animate	a sprite using an animation script
0000A7A2                            ; ---------------------------------------------------------------------------
0000A7A2                            
0000A7A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7A2                            
0000A7A2                            
0000A7A2                            AnimateSprite:
0000A7A2 7000                       		moveq	#0,d0
0000A7A4 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A7A8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A7AC 6700                       		beq.s	Anim_Run	; if not, branch
0000A7AE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A7B2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A7B8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A7BE                            
0000A7BE                            Anim_Run:
0000A7BE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A7C2 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A7C4 D040                       		add.w	d0,d0
0000A7C6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A7CA 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A7CE 7200                       		moveq	#0,d1
0000A7D0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A7D4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A7D8 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A7DA                            
0000A7DA                            Anim_Next:
0000A7DA 1200                       		move.b	d0,d1
0000A7DC 0200 001F                  		andi.b	#$1F,d0
0000A7E0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A7E4 1028 0022                  		move.b	$22(a0),d0
0000A7E8 E719                       		rol.b	#3,d1
0000A7EA B101                       		eor.b	d0,d1
0000A7EC 0201 0003                  		andi.b	#3,d1
0000A7F0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A7F6 8328 0001                  		or.b	d1,1(a0)
0000A7FA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A7FE                            
0000A7FE                            Anim_Wait:
0000A7FE 4E75                       		rts	
0000A800                            ; ===========================================================================
0000A800                            
0000A800                            Anim_End_FF:
0000A800 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A802 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A804 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A80A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A80E 60CA                       		bra.s	Anim_Next
0000A810                            ; ===========================================================================
0000A810                            
0000A810                            Anim_End_FE:
0000A810 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A812 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A814 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A818 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A81C 9200                       		sub.b	d0,d1
0000A81E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A822 60B6                       		bra.s	Anim_Next
0000A824                            ; ===========================================================================
0000A824                            
0000A824                            Anim_End_FD:
0000A824 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A826 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A828 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A82E                            
0000A82E                            Anim_End_FC:
0000A82E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A830 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A832 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A836                            
0000A836                            Anim_End_FB:
0000A836 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A838 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A83A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A840 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A844                            
0000A844                            Anim_End_FA:
0000A844 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A846 6600                       		bne.s	Anim_End	; if not, branch
0000A848 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A84C                            
0000A84C                            Anim_End:
0000A84C 4E75                       		rts	
0000A84E                            ; End of function AnimateSprite
0000A84E                            
0000A84E                            ; ===========================================================================
0000A84E                            ; ---------------------------------------------------------------------------
0000A84E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A84E                            ; ---------------------------------------------------------------------------
0000A84E                            Map_obj0F:
0000A84E                            	include "_maps\obj0F.asm"
0000A84E                            ; ---------------------------------------------------------------------------
0000A84E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A84E                            ; ---------------------------------------------------------------------------
0000A84E 0000                       		dc.w byte_A7CD-Map_obj0F
0000A850 0000                       		dc.w byte_A7CC-Map_obj0F
0000A852 0000                       		dc.w byte_A7EB-Map_obj0F
0000A854 0000                       		dc.w byte_A882-Map_obj0F
0000A856 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A857 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A85C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A861 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A866 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A86B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A870 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A875 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A876 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A87B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A880 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A885 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A88A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A88F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A894 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A899 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A89E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8A3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8A8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8AD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8B2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8B7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8BC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8C1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8C6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8CB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8D0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8D5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8DA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8DF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8E4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8E9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8EE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8F3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8F8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A8FD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A902 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A907 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A90C 01                         byte_A882:	dc.b 1			; "TM"
0000A90D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A912                            		even
0000A912                            		even
0000A912                            
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            ; Sprite mappings - Sonic on the title screen
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            Map_obj0E:
0000A912                            	include "_maps\obj0E.asm"
0000A912                            ; ---------------------------------------------------------------------------
0000A912                            ; Sprite mappings - Sonic on the title screen
0000A912                            ; ---------------------------------------------------------------------------
0000A912 0000                       		dc.w byte_A898-Map_obj0E
0000A914 0000                       		dc.w byte_A8CB-Map_obj0E
0000A916 0000                       		dc.w byte_A917-Map_obj0E
0000A918 0000                       		dc.w byte_A96D-Map_obj0E
0000A91A 0000                       		dc.w byte_A9AF-Map_obj0E
0000A91C 0000                       		dc.w byte_A9E7-Map_obj0E
0000A91E 0000                       		dc.w byte_AA47-Map_obj0E
0000A920 0000                       		dc.w byte_AAB1-Map_obj0E
0000A922 0A                         byte_A898:	dc.b $A
0000A923 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A928 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A92D 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A932 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A937 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A93C 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A941 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A946 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A94B 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A950 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A955 0F                         byte_A8CB:	dc.b $F
0000A956 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A95B 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A960 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A965 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A96A 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A96F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A974 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A979 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A97E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A983 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A988 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A98D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A992 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A997 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A99C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A9A1 11                         byte_A917:	dc.b $11
0000A9A2 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A9A7 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000A9AC 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000A9B1 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000A9B6 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000A9BB 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000A9C0 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000A9C5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A9CA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A9CF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A9D4 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A9D9 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A9DE 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A9E3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A9E8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A9ED 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A9F2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A9F7 0D                         byte_A96D:	dc.b $D
0000A9F8 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000A9FD 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000AA02 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000AA07 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000AA0C 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000AA11 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000AA16 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000AA1B 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000AA20 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000AA25 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000AA2A 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000AA2F 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000AA34 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000AA39 0B                         byte_A9AF:	dc.b $B
0000AA3A 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000AA3F 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000AA44 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000AA49 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000AA4E 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000AA53 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000AA58 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000AA5D 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000AA62 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000AA67 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000AA6C 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000AA71 13                         byte_A9E7:	dc.b $13
0000AA72 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AA77 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AA7C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AA81 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AA86 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AA8B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AA90 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AA95 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AA9A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AA9F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AAA4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AAA9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AAAE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AAB3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AAB8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AABD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AAC2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AAC7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AACC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AAD1 15                         byte_AA47:	dc.b $15
0000AAD2 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AAD7 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AADC 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AAE1 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AAE6 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AAEB 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AAF0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AAF5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AAFA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AAFF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AB04 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AB09 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AB0E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AB13 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AB18 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB1D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB22 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB27 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB2C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB31 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB36 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB3B 16                         byte_AAB1:	dc.b $16
0000AB3C 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AB41 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AB46 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000AB4B 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000AB50 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000AB55 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AB5A 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AB5F 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AB64 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AB69 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AB6E 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AB73 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AB78 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AB7D 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AB82 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AB87 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB8C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB91 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB96 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB9B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000ABA0 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000ABA5 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000ABAA                            		even
0000ABAA                            		even
0000ABAA                            
0000ABAA                            ; ===========================================================================
0000ABAA                            ; ---------------------------------------------------------------------------
0000ABAA                            ; Object 2B - Chopper enemy (GHZ)
0000ABAA                            ; ---------------------------------------------------------------------------
0000ABAA                            
0000ABAA                            Obj2B:					; XREF: Obj_Index
0000ABAA 7000                       		moveq	#0,d0
0000ABAC 1028 0024                  		move.b	$24(a0),d0
0000ABB0 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000ABB4 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000ABB8 6000 0000                  		bra.w	MarkObjGone
0000ABBC                            ; ===========================================================================
0000ABBC 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000ABBE 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000ABC0                            ; ===========================================================================
0000ABC0                            
0000ABC0                            Obj2B_Main:				; XREF: Obj2B_Index
0000ABC0 5428 0024                  		addq.b	#2,$24(a0)
0000ABC4 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000ABCC 317C 047B 0002             		move.w	#$47B,2(a0)
0000ABD2 117C 0004 0001             		move.b	#4,1(a0)
0000ABD8 117C 0004 0018             		move.b	#4,$18(a0)
0000ABDE 117C 0009 0020             		move.b	#9,$20(a0)
0000ABE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000ABEA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000ABF0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ABF6                            
0000ABF6                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000ABF6 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000ABFC 6100 FBA4                  		bsr.w	AnimateSprite
0000AC00 6100 0000                  		bsr.w	SpeedToPos
0000AC04 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AC0A 3028 0030                  		move.w	$30(a0),d0
0000AC0E B068 000C                  		cmp.w	$C(a0),d0
0000AC12 6400                       		bcc.s	Obj2B_ChgAni
0000AC14 3140 000C                  		move.w	d0,$C(a0)
0000AC18 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC1E                            
0000AC1E                            Obj2B_ChgAni:
0000AC1E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AC24 0440 00C0                  		subi.w	#$C0,d0
0000AC28 B068 000C                  		cmp.w	$C(a0),d0
0000AC2C 6400                       		bcc.s	locret_ABB6
0000AC2E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AC34 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AC38 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AC3A 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AC40                            
0000AC40                            locret_ABB6:
0000AC40 4E75                       		rts	
0000AC42                            ; ===========================================================================
0000AC42                            Ani_obj2B:
0000AC42                            	include "_anim\obj2B.asm"
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            ; Animation script - Chopper enemy
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AC44 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AC46 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AC48 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AC4C 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AC50 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AC54 00                         		even
0000AC54 00                         		even
0000AC54                            
0000AC54                            ; ---------------------------------------------------------------------------
0000AC54                            ; Sprite mappings - Chopper enemy (GHZ)
0000AC54                            ; ---------------------------------------------------------------------------
0000AC54                            Map_obj2B:
0000AC54                            	include "_maps\obj2B.asm"
0000AC54                            ; ---------------------------------------------------------------------------
0000AC54                            ; Sprite mappings - Chopper enemy (GHZ)
0000AC54                            ; ---------------------------------------------------------------------------
0000AC54 0000                       		dc.w byte_ABCE-Map_obj2B
0000AC56 0000                       		dc.w byte_ABD4-Map_obj2B
0000AC58 01                         byte_ABCE:	dc.b 1
0000AC59 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000AC5E 01                         byte_ABD4:	dc.b 1
0000AC5F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000AC64                            		even
0000AC64                            		even
0000AC64                            
0000AC64                            ; ===========================================================================
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            ; Object 2C - Jaws enemy (LZ)
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            
0000AC64                            Obj2C:					; XREF: Obj_Index
0000AC64 7000                       		moveq	#0,d0
0000AC66 1028 0024                  		move.b	$24(a0),d0
0000AC6A 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000AC6E 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000AC72                            ; ===========================================================================
0000AC72 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000AC74 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000AC76                            ; ===========================================================================
0000AC76                            
0000AC76                            Obj2C_Main:				; XREF: Obj2C_Index
0000AC76 5428 0024                  		addq.b	#2,$24(a0)
0000AC7A 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000AC82 317C 2486 0002             		move.w	#$2486,2(a0)
0000AC88 0028 0004 0001             		ori.b	#4,1(a0)
0000AC8E 117C 000A 0020             		move.b	#$A,$20(a0)
0000AC94 117C 0004 0018             		move.b	#4,$18(a0)
0000AC9A 117C 0010 0019             		move.b	#$10,$19(a0)
0000ACA0 7000                       		moveq	#0,d0
0000ACA2 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ACA6 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ACA8 5340                       		subq.w	#1,d0
0000ACAA 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ACAE 3140 0032                  		move.w	d0,$32(a0)
0000ACB2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000ACB8 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000ACBE 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000ACC0 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000ACC4                            
0000ACC4                            Obj2C_Turn:				; XREF: Obj2C_Index
0000ACC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000ACC8 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000ACCA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000ACD0 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000ACD4 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000ACDA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ACE0                            
0000ACE0                            Obj2C_Animate:
0000ACE0 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000ACE6 6100 FABA                  		bsr.w	AnimateSprite
0000ACEA 6100 0000                  		bsr.w	SpeedToPos
0000ACEE 6000 0000                  		bra.w	MarkObjGone
0000ACF2                            ; ===========================================================================
0000ACF2                            Ani_obj2C:
0000ACF2                            	include "_anim\obj2C.asm"
0000ACF2                            ; ---------------------------------------------------------------------------
0000ACF2                            ; Animation script - Jaws enemy
0000ACF2                            ; ---------------------------------------------------------------------------
0000ACF2 0000                       		dc.w byte_AC6A-Ani_obj2C
0000ACF4 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000ACFA                            		even
0000ACFA                            		even
0000ACFA                            
0000ACFA                            ; ---------------------------------------------------------------------------
0000ACFA                            ; Sprite mappings - Jaws enemy (LZ)
0000ACFA                            ; ---------------------------------------------------------------------------
0000ACFA                            Map_obj2C:
0000ACFA                            	include "_maps\obj2C.asm"
0000ACFA                            ; ---------------------------------------------------------------------------
0000ACFA                            ; Sprite mappings - Jaws enemy (LZ)
0000ACFA                            ; ---------------------------------------------------------------------------
0000ACFA 0000                       		dc.w byte_AC78-Map_obj2C
0000ACFC 0000                       		dc.w byte_AC83-Map_obj2C
0000ACFE 0000                       		dc.w byte_AC8E-Map_obj2C
0000AD00 0000                       		dc.w byte_AC99-Map_obj2C
0000AD02 02                         byte_AC78:	dc.b 2
0000AD03 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD08 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AD0D 02                         byte_AC83:	dc.b 2
0000AD0E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD13 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AD18 02                         byte_AC8E:	dc.b 2
0000AD19 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD1E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AD23 02                         byte_AC99:	dc.b 2
0000AD24 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD29 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AD2E                            		even
0000AD2E                            		even
0000AD2E                            
0000AD2E                            ; ===========================================================================
0000AD2E                            ; ---------------------------------------------------------------------------
0000AD2E                            ; Object 2D - Burrobot enemy (LZ)
0000AD2E                            ; ---------------------------------------------------------------------------
0000AD2E                            
0000AD2E                            Obj2D:					; XREF: Obj_Index
0000AD2E 7000                       		moveq	#0,d0
0000AD30 1028 0024                  		move.b	$24(a0),d0
0000AD34 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AD38 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AD3C                            ; ===========================================================================
0000AD3C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AD3E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AD40                            ; ===========================================================================
0000AD40                            
0000AD40                            Obj2D_Main:				; XREF: Obj2D_Index
0000AD40 5428 0024                  		addq.b	#2,$24(a0)
0000AD44 117C 0013 0016             		move.b	#$13,$16(a0)
0000AD4A 117C 0008 0017             		move.b	#8,$17(a0)
0000AD50 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000AD58 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000AD5E 0028 0004 0001             		ori.b	#4,1(a0)
0000AD64 117C 0004 0018             		move.b	#4,$18(a0)
0000AD6A 117C 0005 0020             		move.b	#5,$20(a0)
0000AD70 117C 000C 0019             		move.b	#$C,$19(a0)
0000AD76 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000AD7A 117C 0002 001C             		move.b	#2,$1C(a0)
0000AD80                            
0000AD80                            Obj2D_Action:				; XREF: Obj2D_Index
0000AD80 7000                       		moveq	#0,d0
0000AD82 1028 0025                  		move.b	$25(a0),d0
0000AD86 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000AD8A 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000AD8E 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000AD94 6100 FA0C                  		bsr.w	AnimateSprite
0000AD98 6000 0000                  		bra.w	MarkObjGone
0000AD9C                            ; ===========================================================================
0000AD9C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000AD9E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ADA0 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ADA2 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ADA4                            ; ===========================================================================
0000ADA4                            
0000ADA4                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ADA4 5368 0030                  		subq.w	#1,$30(a0)
0000ADA8 6A00                       		bpl.s	locret_AD42
0000ADAA 5428 0025                  		addq.b	#2,$25(a0)
0000ADAE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ADB4 317C 0080 0010             		move.w	#$80,$10(a0)
0000ADBA 117C 0001 001C             		move.b	#1,$1C(a0)
0000ADC0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000ADC6 6700                       		beq.s	locret_AD42
0000ADC8 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000ADCC                            
0000ADCC                            locret_AD42:
0000ADCC 4E75                       		rts	
0000ADCE                            ; ===========================================================================
0000ADCE                            
0000ADCE                            Obj2D_Move:				; XREF: Obj2D_Index2
0000ADCE 5368 0030                  		subq.w	#1,$30(a0)
0000ADD2 6B00                       		bmi.s	loc_AD84
0000ADD4 6100 0000                  		bsr.w	SpeedToPos
0000ADD8 0868 0000 0032             		bchg	#0,$32(a0)
0000ADDE 6600                       		bne.s	loc_AD78
0000ADE0 3628 0008                  		move.w	8(a0),d3
0000ADE4 0643 000C                  		addi.w	#$C,d3
0000ADE8 0828 0000 0022             		btst	#0,$22(a0)
0000ADEE 6600                       		bne.s	loc_AD6A
0000ADF0 0443 0018                  		subi.w	#$18,d3
0000ADF4                            
0000ADF4                            loc_AD6A:
0000ADF4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000ADFA 0C41 000C                  		cmpi.w	#$C,d1
0000ADFE 6C00                       		bge.s	loc_AD84
0000AE00 4E75                       		rts	
0000AE02                            ; ===========================================================================
0000AE02                            
0000AE02                            loc_AD78:				; XREF: Obj2D_Move
0000AE02 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE08 D368 000C                  		add.w	d1,$C(a0)
0000AE0C 4E75                       		rts	
0000AE0E                            ; ===========================================================================
0000AE0E                            
0000AE0E                            loc_AD84:				; XREF: Obj2D_Move
0000AE0E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AE14 6700                       		beq.s	loc_ADA4
0000AE16 5528 0025                  		subq.b	#2,$25(a0)
0000AE1A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AE20 317C 0000 0010             		move.w	#0,$10(a0)
0000AE26 117C 0000 001C             		move.b	#0,$1C(a0)
0000AE2C 4E75                       		rts	
0000AE2E                            ; ===========================================================================
0000AE2E                            
0000AE2E                            loc_ADA4:
0000AE2E 5428 0025                  		addq.b	#2,$25(a0)
0000AE32 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE38 117C 0002 001C             		move.b	#2,$1C(a0)
0000AE3E 4E75                       		rts	
0000AE40                            ; ===========================================================================
0000AE40                            
0000AE40                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AE40 6100 0000                  		bsr.w	SpeedToPos
0000AE44 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE4A 6B00                       		bmi.s	locret_ADF0
0000AE4C 117C 0003 001C             		move.b	#3,$1C(a0)
0000AE52 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE58 4A41                       		tst.w	d1
0000AE5A 6A00                       		bpl.s	locret_ADF0
0000AE5C D368 000C                  		add.w	d1,$C(a0)
0000AE60 317C 0000 0012             		move.w	#0,$12(a0)
0000AE66 117C 0001 001C             		move.b	#1,$1C(a0)
0000AE6C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AE72 5528 0025                  		subq.b	#2,$25(a0)
0000AE76 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AE7A                            
0000AE7A                            locret_ADF0:
0000AE7A 4E75                       		rts	
0000AE7C                            ; ===========================================================================
0000AE7C                            
0000AE7C                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AE7C 343C 0060                  		move.w	#$60,d2
0000AE80 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AE84 6400                       		bcc.s	locret_AE20
0000AE86 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AE8A 9068 000C                  		sub.w	$C(a0),d0
0000AE8E 6400                       		bcc.s	locret_AE20
0000AE90 0C40 FF80                  		cmpi.w	#-$80,d0
0000AE94 6500                       		bcs.s	locret_AE20
0000AE96 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AE9A 6600                       		bne.s	locret_AE20
0000AE9C 5528 0025                  		subq.b	#2,$25(a0)
0000AEA0 3141 0010                  		move.w	d1,$10(a0)
0000AEA4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AEAA                            
0000AEAA                            locret_AE20:
0000AEAA 4E75                       		rts	
0000AEAC                            
0000AEAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEAC                            
0000AEAC                            
0000AEAC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000AEAC 323C 0080                  		move.w	#$80,d1
0000AEB0 08E8 0000 0022             		bset	#0,$22(a0)
0000AEB6 3038 D008                  		move.w	($FFFFD008).w,d0
0000AEBA 9068 0008                  		sub.w	8(a0),d0
0000AEBE 6400                       		bcc.s	loc_AE40
0000AEC0 4440                       		neg.w	d0
0000AEC2 4441                       		neg.w	d1
0000AEC4 08A8 0000 0022             		bclr	#0,$22(a0)
0000AECA                            
0000AECA                            loc_AE40:
0000AECA B042                       		cmp.w	d2,d0
0000AECC 4E75                       		rts	
0000AECE                            ; End of function Obj2D_ChkSonic2
0000AECE                            
0000AECE                            ; ===========================================================================
0000AECE                            Ani_obj2D:
0000AECE                            	include "_anim\obj2D.asm"
0000AECE                            ; ---------------------------------------------------------------------------
0000AECE                            ; Animation script - Burrobot enemy
0000AECE                            ; ---------------------------------------------------------------------------
0000AECE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AED0 0000                       		dc.w byte_AE50-Ani_obj2D
0000AED2 0000                       		dc.w byte_AE54-Ani_obj2D
0000AED4 0000                       		dc.w byte_AE58-Ani_obj2D
0000AED6 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AEDA 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AEDE 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AEE2 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AEE6 00                         		even
0000AEE6 00                         		even
0000AEE6                            
0000AEE6                            ; ---------------------------------------------------------------------------
0000AEE6                            ; Sprite mappings - Burrobot enemy (LZ)
0000AEE6                            ; ---------------------------------------------------------------------------
0000AEE6                            Map_obj2D:
0000AEE6                            	include "_maps\obj2D.asm"
0000AEE6                            ; ---------------------------------------------------------------------------
0000AEE6                            ; Sprite mappings - Burrobot enemy (LZ)
0000AEE6                            ; ---------------------------------------------------------------------------
0000AEE6 0000                       		dc.w byte_AE6A-Map_obj2D
0000AEE8 0000                       		dc.w byte_AE75-Map_obj2D
0000AEEA 0000                       		dc.w byte_AE80-Map_obj2D
0000AEEC 0000                       		dc.w byte_AE8B-Map_obj2D
0000AEEE 0000                       		dc.w byte_AE96-Map_obj2D
0000AEF0 0000                       		dc.w byte_AEA1-Map_obj2D
0000AEF2 0000                       		dc.w byte_AEAC-Map_obj2D
0000AEF4 02                         byte_AE6A:	dc.b 2
0000AEF5 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AEFA 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AEFF 02                         byte_AE75:	dc.b 2
0000AF00 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF05 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AF0A 02                         byte_AE80:	dc.b 2
0000AF0B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AF10 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AF15 02                         byte_AE8B:	dc.b 2
0000AF16 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AF1B 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AF20 02                         byte_AE96:	dc.b 2
0000AF21 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AF26 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AF2B 02                         byte_AEA1:	dc.b 2
0000AF2C F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AF31 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AF36 02                         byte_AEAC:	dc.b 2
0000AF37 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF3C 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF42 00                         		even
0000AF42 00                         		even
0000AF42                            
0000AF42                            ; ===========================================================================
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            ; Object 2F - large moving platforms (MZ)
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            
0000AF42                            Obj2F:					; XREF: Obj_Index
0000AF42 7000                       		moveq	#0,d0
0000AF44 1028 0024                  		move.b	$24(a0),d0
0000AF48 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AF4C 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AF50                            ; ===========================================================================
0000AF50 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AF52 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AF54                            
0000AF54 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AF56 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AF58 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AF5A 0140                       		dc.b 1,	$40
0000AF5C 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AF5E 0220                       		dc.b 2,	$20
0000AF60                            ; ===========================================================================
0000AF60                            
0000AF60                            Obj2F_Main:				; XREF: Obj2F_Index
0000AF60 5428 0024                  		addq.b	#2,$24(a0)
0000AF64 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AF6C 317C C000 0002             		move.w	#$C000,2(a0)
0000AF72 117C 0004 0001             		move.b	#4,1(a0)
0000AF78 117C 0005 0018             		move.b	#5,$18(a0)
0000AF7E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AF84 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AF8A 7000                       		moveq	#0,d0
0000AF8C 1028 0028                  		move.b	$28(a0),d0
0000AF90 E448                       		lsr.w	#2,d0
0000AF92 0240 001C                  		andi.w	#$1C,d0
0000AF96 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AF9A 3019                       		move.w	(a1)+,d0
0000AF9C 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AFA0 214A 0030                  		move.l	a2,$30(a0)
0000AFA4 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFA8 1151 0019                  		move.b	(a1),$19(a0)
0000AFAC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AFB2 117C 0040 0016             		move.b	#$40,$16(a0)
0000AFB8 08E8 0004 0001             		bset	#4,1(a0)
0000AFBE                            
0000AFBE                            Obj2F_Action:				; XREF: Obj2F_Index
0000AFBE 6100 0000                  		bsr.w	Obj2F_Types
0000AFC2 4A28 0025                  		tst.b	$25(a0)
0000AFC6 6700                       		beq.s	Obj2F_Solid
0000AFC8 7200                       		moveq	#0,d1
0000AFCA 1228 0019                  		move.b	$19(a0),d1
0000AFCE 0641 000B                  		addi.w	#$B,d1
0000AFD2 6100 C638                  		bsr.w	ExitPlatform
0000AFD6 0829 0003 0022             		btst	#3,$22(a1)
0000AFDC 6600 0000                  		bne.w	Obj2F_Slope
0000AFE0 4228 0025                  		clr.b	$25(a0)
0000AFE4 6000                       		bra.s	Obj2F_Display
0000AFE6                            ; ===========================================================================
0000AFE6                            
0000AFE6                            Obj2F_Slope:				; XREF: Obj2F_Action
0000AFE6 7200                       		moveq	#0,d1
0000AFE8 1228 0019                  		move.b	$19(a0),d1
0000AFEC 0641 000B                  		addi.w	#$B,d1
0000AFF0 2468 0030                  		movea.l	$30(a0),a2
0000AFF4 3428 0008                  		move.w	8(a0),d2
0000AFF8 6100 D5B6                  		bsr.w	SlopeObject2
0000AFFC 6000                       		bra.s	Obj2F_Display
0000AFFE                            ; ===========================================================================
0000AFFE                            
0000AFFE                            Obj2F_Solid:				; XREF: Obj2F_Action
0000AFFE 7200                       		moveq	#0,d1
0000B000 1228 0019                  		move.b	$19(a0),d1
0000B004 0641 000B                  		addi.w	#$B,d1
0000B008 343C 0020                  		move.w	#$20,d2
0000B00C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B012 6600                       		bne.s	loc_AF8E
0000B014 343C 0030                  		move.w	#$30,d2
0000B018                            
0000B018                            loc_AF8E:
0000B018 2468 0030                  		movea.l	$30(a0),a2
0000B01C 6100 0000                  		bsr.w	SolidObject2F
0000B020                            
0000B020                            Obj2F_Display:				; XREF: Obj2F_Action
0000B020 6100 0000                  		bsr.w	DisplaySprite
0000B024 6000 0000                  		bra.w	Obj2F_ChkDel
0000B028                            
0000B028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B028                            
0000B028                            
0000B028                            Obj2F_Types:				; XREF: Obj2F_Action
0000B028 7000                       		moveq	#0,d0
0000B02A 1028 0028                  		move.b	$28(a0),d0
0000B02E 0240 0007                  		andi.w	#7,d0
0000B032 D040                       		add.w	d0,d0
0000B034 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B038 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B03C                            ; End of function Obj2F_Types
0000B03C                            
0000B03C                            ; ===========================================================================
0000B03C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B03E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B040 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B042 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B044 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B046 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B048                            ; ===========================================================================
0000B048                            
0000B048                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B048 4E75                       		rts			; type 00 platform doesn't move
0000B04A                            ; ===========================================================================
0000B04A                            
0000B04A                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B04A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B04E 323C 0020                  		move.w	#$20,d1
0000B052 6000                       		bra.s	Obj2F_Move
0000B054                            ; ===========================================================================
0000B054                            
0000B054                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B054 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B058 323C 0030                  		move.w	#$30,d1
0000B05C 6000                       		bra.s	Obj2F_Move
0000B05E                            ; ===========================================================================
0000B05E                            
0000B05E                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B05E 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B062 323C 0040                  		move.w	#$40,d1
0000B066 6000                       		bra.s	Obj2F_Move
0000B068                            ; ===========================================================================
0000B068                            
0000B068                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B068 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B06C 323C 0060                  		move.w	#$60,d1
0000B070                            
0000B070                            Obj2F_Move:
0000B070 0828 0003 0028             		btst	#3,$28(a0)
0000B076 6700                       		beq.s	loc_AFF2
0000B078 4440                       		neg.w	d0
0000B07A D041                       		add.w	d1,d0
0000B07C                            
0000B07C                            loc_AFF2:
0000B07C 3228 002C                  		move.w	$2C(a0),d1
0000B080 9240                       		sub.w	d0,d1
0000B082 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B086 4E75                       		rts	
0000B088                            ; ===========================================================================
0000B088                            
0000B088                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B088 1028 0034                  		move.b	$34(a0),d0
0000B08C 4A28 0025                  		tst.b	$25(a0)
0000B090 6600                       		bne.s	loc_B010
0000B092 5500                       		subq.b	#2,d0
0000B094 6400                       		bcc.s	loc_B01C
0000B096 7000                       		moveq	#0,d0
0000B098 6000                       		bra.s	loc_B01C
0000B09A                            ; ===========================================================================
0000B09A                            
0000B09A                            loc_B010:
0000B09A 5800                       		addq.b	#4,d0
0000B09C 0C00 0040                  		cmpi.b	#$40,d0
0000B0A0 6500                       		bcs.s	loc_B01C
0000B0A2 103C 0040                  		move.b	#$40,d0
0000B0A6                            
0000B0A6                            loc_B01C:
0000B0A6 1140 0034                  		move.b	d0,$34(a0)
0000B0AA 4EB9 0000 28EC             		jsr	(CalcSine).l
0000B0B0 E848                       		lsr.w	#4,d0
0000B0B2 3200                       		move.w	d0,d1
0000B0B4 D068 002C                  		add.w	$2C(a0),d0
0000B0B8 3140 000C                  		move.w	d0,$C(a0)
0000B0BC 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B0C2 6600                       		bne.s	loc_B07A
0000B0C4 4A28 0035                  		tst.b	$35(a0)
0000B0C8 6600                       		bne.s	loc_B07A
0000B0CA 117C 0001 0035             		move.b	#1,$35(a0)
0000B0D0 6100 0000                  		bsr.w	SingleObjLoad2
0000B0D4 6600                       		bne.s	loc_B07A
0000B0D6 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B0DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B0E0 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B0E6 5069 002C                  		addq.w	#8,$2C(a1)
0000B0EA 5769 002C                  		subq.w	#3,$2C(a1)
0000B0EE 0469 0040 0008             		subi.w	#$40,8(a1)
0000B0F4 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B0FA 2348 0038                  		move.l	a0,$38(a1)
0000B0FE 2448                       		movea.l	a0,a2
0000B100 6100                       		bsr.s	sub_B09C
0000B102                            
0000B102                            loc_B07A:
0000B102 7400                       		moveq	#0,d2
0000B104 45E8 0036                  		lea	$36(a0),a2
0000B108 141A                       		move.b	(a2)+,d2
0000B10A 5302                       		subq.b	#1,d2
0000B10C 6500                       		bcs.s	locret_B09A
0000B10E                            
0000B10E                            loc_B086:
0000B10E 7000                       		moveq	#0,d0
0000B110 101A                       		move.b	(a2)+,d0
0000B112 ED48                       		lsl.w	#6,d0
0000B114 0640 D000                  		addi.w	#-$3000,d0
0000B118 3240                       		movea.w	d0,a1
0000B11A 3341 003C                  		move.w	d1,$3C(a1)
0000B11E 51CA FFEE                  		dbf	d2,loc_B086
0000B122                            
0000B122                            locret_B09A:
0000B122 4E75                       		rts	
0000B124                            
0000B124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B124                            
0000B124                            
0000B124                            sub_B09C:
0000B124 45EA 0036                  		lea	$36(a2),a2
0000B128 7000                       		moveq	#0,d0
0000B12A 1012                       		move.b	(a2),d0
0000B12C 5212                       		addq.b	#1,(a2)
0000B12E 45F2 0001                  		lea	1(a2,d0.w),a2
0000B132 3009                       		move.w	a1,d0
0000B134 0440 D000                  		subi.w	#-$3000,d0
0000B138 EC48                       		lsr.w	#6,d0
0000B13A 0240 007F                  		andi.w	#$7F,d0
0000B13E 1480                       		move.b	d0,(a2)
0000B140 4E75                       		rts	
0000B142                            ; End of function sub_B09C
0000B142                            
0000B142                            ; ===========================================================================
0000B142                            
0000B142                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B142 4A28 0035                  		tst.b	$35(a0)
0000B146 6700                       		beq.s	loc_B0C6
0000B148 4A28 0001                  		tst.b	1(a0)
0000B14C 6A00                       		bpl.s	Obj2F_DelFlames
0000B14E                            
0000B14E                            loc_B0C6:
0000B14E 3028 002A                  		move.w	$2A(a0),d0
0000B152 0240 FF80                  		andi.w	#$FF80,d0
0000B156 3238 F700                  		move.w	($FFFFF700).w,d1
0000B15A 0441 0080                  		subi.w	#$80,d1
0000B15E 0241 FF80                  		andi.w	#$FF80,d1
0000B162 9041                       		sub.w	d1,d0
0000B164 0C40 0280                  		cmpi.w	#$280,d0
0000B168 6200 0000                  		bhi.w	DeleteObject
0000B16C 4E75                       		rts	
0000B16E                            ; ===========================================================================
0000B16E                            
0000B16E                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B16E 7400                       		moveq	#0,d2
0000B170                            
0000B170                            loc_B0E8:
0000B170 45E8 0036                  		lea	$36(a0),a2
0000B174 1412                       		move.b	(a2),d2
0000B176 421A                       		clr.b	(a2)+
0000B178 5302                       		subq.b	#1,d2
0000B17A 6500                       		bcs.s	locret_B116
0000B17C                            
0000B17C                            loc_B0F4:
0000B17C 7000                       		moveq	#0,d0
0000B17E 1012                       		move.b	(a2),d0
0000B180 421A                       		clr.b	(a2)+
0000B182 ED48                       		lsl.w	#6,d0
0000B184 0640 D000                  		addi.w	#-$3000,d0
0000B188 3240                       		movea.w	d0,a1
0000B18A 6100 0000                  		bsr.w	DeleteObject2
0000B18E 51CA FFEC                  		dbf	d2,loc_B0F4
0000B192 117C 0000 0035             		move.b	#0,$35(a0)
0000B198 117C 0000 0034             		move.b	#0,$34(a0)
0000B19E                            
0000B19E                            locret_B116:
0000B19E 4E75                       		rts	
0000B1A0                            ; ===========================================================================
0000B1A0                            ; ---------------------------------------------------------------------------
0000B1A0                            ; Collision data for large moving platforms (MZ)
0000B1A0                            ; ---------------------------------------------------------------------------
0000B1A0                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B1EC                            		even
0000B1EC                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B218                            		even
0000B218                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B264                            		even
0000B264                            ; ===========================================================================
0000B264                            ; ---------------------------------------------------------------------------
0000B264                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B264                            ; (appears when	you walk on sinking platforms)
0000B264                            ; ---------------------------------------------------------------------------
0000B264                            
0000B264                            Obj35:					; XREF: Obj_Index
0000B264 7000                       		moveq	#0,d0
0000B266 1028 0024                  		move.b	$24(a0),d0
0000B26A 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B26E 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B272                            ; ===========================================================================
0000B272 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B274 0000                       		dc.w loc_B238-Obj35_Index
0000B276 0000                       		dc.w Obj35_Move-Obj35_Index
0000B278                            ; ===========================================================================
0000B278                            
0000B278                            Obj35_Main:				; XREF: Obj35_Index
0000B278 5428 0024                  		addq.b	#2,$24(a0)
0000B27C 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B284 317C 0345 0002             		move.w	#$345,2(a0)
0000B28A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B290 117C 0004 0001             		move.b	#4,1(a0)
0000B296 117C 0001 0018             		move.b	#1,$18(a0)
0000B29C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B2A2 117C 0008 0019             		move.b	#8,$19(a0)
0000B2A8 303C 00C8                  		move.w	#$C8,d0
0000B2AC 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flame sound
0000B2B2 4A28 0028                  		tst.b	$28(a0)
0000B2B6 6700                       		beq.s	loc_B238
0000B2B8 5428 0024                  		addq.b	#2,$24(a0)
0000B2BC 6000 0000                  		bra.w	Obj35_Move
0000B2C0                            ; ===========================================================================
0000B2C0                            
0000B2C0                            loc_B238:				; XREF: Obj35_Index
0000B2C0 2268 0030                  		movea.l	$30(a0),a1
0000B2C4 3228 0008                  		move.w	8(a0),d1
0000B2C8 9268 002A                  		sub.w	$2A(a0),d1
0000B2CC 0641 000C                  		addi.w	#$C,d1
0000B2D0 3001                       		move.w	d1,d0
0000B2D2 E248                       		lsr.w	#1,d0
0000B2D4 1031 0000                  		move.b	(a1,d0.w),d0
0000B2D8 4440                       		neg.w	d0
0000B2DA D068 002C                  		add.w	$2C(a0),d0
0000B2DE 3400                       		move.w	d0,d2
0000B2E0 D068 003C                  		add.w	$3C(a0),d0
0000B2E4 3140 000C                  		move.w	d0,$C(a0)
0000B2E8 0C41 0084                  		cmpi.w	#$84,d1
0000B2EC 6400                       		bcc.s	loc_B2B0
0000B2EE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B2F6 0C41 0080                  		cmpi.w	#$80,d1
0000B2FA 6400                       		bcc.s	loc_B2B0
0000B2FC 2028 0008                  		move.l	8(a0),d0
0000B300 0680 0008 0000             		addi.l	#$80000,d0
0000B306 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B30C 6600                       		bne.s	loc_B2B0
0000B30E 6100 0000                  		bsr.w	SingleObjLoad2
0000B312 6600                       		bne.s	loc_B2B0
0000B314 12BC 0035                  		move.b	#$35,0(a1)
0000B318 3368 0008 0008             		move.w	8(a0),8(a1)
0000B31E 3342 002C                  		move.w	d2,$2C(a1)
0000B322 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B328 137C 0001 0028             		move.b	#1,$28(a1)
0000B32E 2468 0038                  		movea.l	$38(a0),a2
0000B332 6100 FDF0                  		bsr.w	sub_B09C
0000B336                            
0000B336                            loc_B2B0:
0000B336 6000                       		bra.s	Obj35_Animate
0000B338                            ; ===========================================================================
0000B338                            
0000B338                            Obj35_Move:				; XREF: Obj35_Index
0000B338 3028 002C                  		move.w	$2C(a0),d0
0000B33C D068 003C                  		add.w	$3C(a0),d0
0000B340 3140 000C                  		move.w	d0,$C(a0)
0000B344                            
0000B344                            Obj35_Animate:				; XREF: loc_B238
0000B344 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B34A 6100 F456                  		bsr.w	AnimateSprite
0000B34E 6000 0000                  		bra.w	DisplaySprite
0000B352                            ; ===========================================================================
0000B352                            Ani_obj35:
0000B352                            	include "_anim\obj35.asm"
0000B352                            ; ---------------------------------------------------------------------------
0000B352                            ; Animation script - fireball that sits on the	floor (MZ)
0000B352                            ; ---------------------------------------------------------------------------
0000B352 0000                       		dc.w byte_B2CE-Ani_obj35
0000B354 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B35A                            		even
0000B35A                            		even
0000B35A                            
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            ; Sprite mappings - large moving platforms (MZ)
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            Map_obj2F:
0000B35A                            	include "_maps\obj2F.asm"
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            ; Sprite mappings - large moving platforms (MZ)
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A 0000                       		dc.w byte_B2DA-Map_obj2F
0000B35C 0000                       		dc.w byte_B31C-Map_obj2F
0000B35E 0000                       		dc.w byte_B34F-Map_obj2F
0000B360 0D                         byte_B2DA:	dc.b $D
0000B361 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B366 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B36B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B370 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B375 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B37A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B37F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B384 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B389 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B38E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B393 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B398 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B39D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B3A2 0A                         byte_B31C:	dc.b $A
0000B3A3 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B3A8 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B3AD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3B2 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B3B7 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B3BC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3C1 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B3C6 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B3CB C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B3D0 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B3D5 06                         byte_B34F:	dc.b 6
0000B3D6 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B3DB F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3E0 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B3E5 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B3EA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B3EF 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B3F4                            		even
0000B3F4                            		even
0000B3F4                            
0000B3F4                            ; ---------------------------------------------------------------------------
0000B3F4                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B3F4                            ; ---------------------------------------------------------------------------
0000B3F4                            Map_obj14:
0000B3F4                            	include "_maps\obj14.asm"
0000B3F4                            ; ---------------------------------------------------------------------------
0000B3F4                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B3F4                            ; ---------------------------------------------------------------------------
0000B3F4 0000                       		dc.w byte_B37A-Map_obj14
0000B3F6 0000                       		dc.w byte_B380-Map_obj14
0000B3F8 0000                       		dc.w byte_B386-Map_obj14
0000B3FA 0000                       		dc.w byte_B38C-Map_obj14
0000B3FC 0000                       		dc.w byte_B392-Map_obj14
0000B3FE 0000                       		dc.w byte_B398-Map_obj14
0000B400 01                         byte_B37A:	dc.b 1
0000B401 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B406 01                         byte_B380:	dc.b 1
0000B407 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B40C 01                         byte_B386:	dc.b 1
0000B40D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B412 01                         byte_B38C:	dc.b 1
0000B413 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B418 01                         byte_B392:	dc.b 1
0000B419 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B41E 01                         byte_B398:	dc.b 1
0000B41F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B424                            		even
0000B424                            		even
0000B424                            
0000B424                            ; ===========================================================================
0000B424                            ; ---------------------------------------------------------------------------
0000B424                            ; Object 30 - large green glassy blocks	(MZ)
0000B424                            ; ---------------------------------------------------------------------------
0000B424                            
0000B424                            Obj30:					; XREF: Obj_Index
0000B424 7000                       		moveq	#0,d0
0000B426 1028 0024                  		move.b	$24(a0),d0
0000B42A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B42E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B432 3028 0008                  		move.w	8(a0),d0
0000B436 0240 FF80                  		andi.w	#$FF80,d0
0000B43A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B43E 0441 0080                  		subi.w	#$80,d1
0000B442 0241 FF80                  		andi.w	#$FF80,d1
0000B446 9041                       		sub.w	d1,d0
0000B448 0C40 0280                  		cmpi.w	#$280,d0
0000B44C 6200 0000                  		bhi.w	Obj30_Delete
0000B450 6000 0000                  		bra.w	DisplaySprite
0000B454                            ; ===========================================================================
0000B454                            
0000B454                            Obj30_Delete:
0000B454 6000 0000                  		bra.w	DeleteObject
0000B458                            ; ===========================================================================
0000B458 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B45A 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B45C 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B45E 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B460 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B462                            
0000B462 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B465 0400 01                    		dc.b 4,	0, 1
0000B468 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B46B 0800 01                    		dc.b 8,	0, 1
0000B46E                            ; ===========================================================================
0000B46E                            
0000B46E                            Obj30_Main:				; XREF: Obj30_Index
0000B46E 45F9 0000 B462             		lea	(Obj30_Vars1).l,a2
0000B474 7201                       		moveq	#1,d1
0000B476 117C 0048 0016             		move.b	#$48,$16(a0)
0000B47C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B482 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B484 45F9 0000 B468             		lea	(Obj30_Vars2).l,a2
0000B48A 7201                       		moveq	#1,d1
0000B48C 117C 0038 0016             		move.b	#$38,$16(a0)
0000B492                            
0000B492                            loc_B40C:
0000B492 2248                       		movea.l	a0,a1
0000B494 6000                       		bra.s	Obj30_Load	; load main object
0000B496                            ; ===========================================================================
0000B496                            
0000B496                            Obj30_Loop:
0000B496 6100 0000                  		bsr.w	SingleObjLoad2
0000B49A 6600                       		bne.s	loc_B480
0000B49C                            
0000B49C                            Obj30_Load:				; XREF: Obj30_Main
0000B49C 135A 0024                  		move.b	(a2)+,$24(a1)
0000B4A0 12BC 0030                  		move.b	#$30,0(a1)
0000B4A4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4AA 101A                       		move.b	(a2)+,d0
0000B4AC 4880                       		ext.w	d0
0000B4AE D068 000C                  		add.w	$C(a0),d0
0000B4B2 3340 000C                  		move.w	d0,$C(a1)
0000B4B6 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B4BE 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B4C4 137C 0004 0001             		move.b	#4,1(a1)
0000B4CA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B4D0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B4D6 137C 0020 0019             		move.b	#$20,$19(a1)
0000B4DC 137C 0004 0018             		move.b	#4,$18(a1)
0000B4E2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B4E6 2348 003C                  		move.l	a0,$3C(a1)
0000B4EA 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B4EE                            
0000B4EE 137C 0010 0019             		move.b	#$10,$19(a1)
0000B4F4 137C 0003 0018             		move.b	#3,$18(a1)
0000B4FA 5029 0028                  		addq.b	#8,$28(a1)
0000B4FE 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B504                            
0000B504                            loc_B480:
0000B504 317C 0090 0032             		move.w	#$90,$32(a0)
0000B50A 08E8 0004 0001             		bset	#4,1(a0)
0000B510                            
0000B510                            Obj30_Block012:				; XREF: Obj30_Index
0000B510 6100 0000                  		bsr.w	Obj30_Types
0000B514 323C 002B                  		move.w	#$2B,d1
0000B518 343C 0048                  		move.w	#$48,d2
0000B51C 363C 0049                  		move.w	#$49,d3
0000B520 3828 0008                  		move.w	8(a0),d4
0000B524 6000 0000                  		bra.w	SolidObject
0000B528                            ; ===========================================================================
0000B528                            
0000B528                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B528 2268 003C                  		movea.l	$3C(a0),a1
0000B52C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B532 6000 0000                  		bra.w	Obj30_Types
0000B536                            ; ===========================================================================
0000B536                            
0000B536                            Obj30_Block34:				; XREF: Obj30_Index
0000B536 6100 0000                  		bsr.w	Obj30_Types
0000B53A 323C 002B                  		move.w	#$2B,d1
0000B53E 343C 0038                  		move.w	#$38,d2
0000B542 363C 0039                  		move.w	#$39,d3
0000B546 3828 0008                  		move.w	8(a0),d4
0000B54A 6000 0000                  		bra.w	SolidObject
0000B54E                            ; ===========================================================================
0000B54E                            
0000B54E                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B54E 2268 003C                  		movea.l	$3C(a0),a1
0000B552 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B558 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B55E 6000 0002                  		bra.w	*+4
0000B562                            
0000B562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B562                            
0000B562                            
0000B562                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B562 7000                       		moveq	#0,d0
0000B564 1028 0028                  		move.b	$28(a0),d0
0000B568 0240 0007                  		andi.w	#7,d0
0000B56C D040                       		add.w	d0,d0
0000B56E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B572 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B576                            ; End of function Obj30_Types
0000B576                            
0000B576                            ; ===========================================================================
0000B576 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B578 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B57A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B57C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B57E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B580                            ; ===========================================================================
0000B580                            
0000B580                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B580 4E75                       		rts	
0000B582                            ; ===========================================================================
0000B582                            
0000B582                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B582 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B586 323C 0040                  		move.w	#$40,d1
0000B58A 6000                       		bra.s	loc_B514
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B58C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B590 323C 0040                  		move.w	#$40,d1
0000B594 4440                       		neg.w	d0
0000B596 D041                       		add.w	d1,d0
0000B598                            
0000B598                            loc_B514:				; XREF: Obj30_Type01
0000B598 0828 0003 0028             		btst	#3,$28(a0)
0000B59E 6700                       		beq.s	loc_B526
0000B5A0 4440                       		neg.w	d0
0000B5A2 D041                       		add.w	d1,d0
0000B5A4 E208                       		lsr.b	#1,d0
0000B5A6 0640 0020                  		addi.w	#$20,d0
0000B5AA                            
0000B5AA                            loc_B526:
0000B5AA 6000 0000                  		bra.w	loc_B5EE
0000B5AE                            ; ===========================================================================
0000B5AE                            
0000B5AE                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B5AE 0828 0003 0028             		btst	#3,$28(a0)
0000B5B4 6700                       		beq.s	loc_B53E
0000B5B6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5BA 0440 0010                  		subi.w	#$10,d0
0000B5BE 6000 0000                  		bra.w	loc_B5EE
0000B5C2                            ; ===========================================================================
0000B5C2                            
0000B5C2                            loc_B53E:
0000B5C2 0828 0003 0022             		btst	#3,$22(a0)
0000B5C8 6600                       		bne.s	loc_B54E
0000B5CA 08A8 0000 0034             		bclr	#0,$34(a0)
0000B5D0 6000                       		bra.s	loc_B582
0000B5D2                            ; ===========================================================================
0000B5D2                            
0000B5D2                            loc_B54E:
0000B5D2 4A28 0034                  		tst.b	$34(a0)
0000B5D6 6600                       		bne.s	loc_B582
0000B5D8 117C 0001 0034             		move.b	#1,$34(a0)
0000B5DE 08E8 0000 0035             		bset	#0,$35(a0)
0000B5E4 6700                       		beq.s	loc_B582
0000B5E6 08E8 0007 0034             		bset	#7,$34(a0)
0000B5EC 317C 0010 0036             		move.w	#$10,$36(a0)
0000B5F2 117C 000A 0038             		move.b	#$A,$38(a0)
0000B5F8 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B5FE 6600                       		bne.s	loc_B582
0000B600 317C 0040 0036             		move.w	#$40,$36(a0)
0000B606                            
0000B606                            loc_B582:
0000B606 4A28 0034                  		tst.b	$34(a0)
0000B60A 6A00                       		bpl.s	loc_B5AA
0000B60C 4A28 0038                  		tst.b	$38(a0)
0000B610 6700                       		beq.s	loc_B594
0000B612 5328 0038                  		subq.b	#1,$38(a0)
0000B616 6600                       		bne.s	loc_B5AA
0000B618                            
0000B618                            loc_B594:
0000B618 4A68 0032                  		tst.w	$32(a0)
0000B61C 6700                       		beq.s	loc_B5A4
0000B61E 5368 0032                  		subq.w	#1,$32(a0)
0000B622 5368 0036                  		subq.w	#1,$36(a0)
0000B626 6600                       		bne.s	loc_B5AA
0000B628                            
0000B628                            loc_B5A4:
0000B628 08A8 0007 0034             		bclr	#7,$34(a0)
0000B62E                            
0000B62E                            loc_B5AA:
0000B62E 3028 0032                  		move.w	$32(a0),d0
0000B632 6000                       		bra.s	loc_B5EE
0000B634                            ; ===========================================================================
0000B634                            
0000B634                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B634 0828 0003 0028             		btst	#3,$28(a0)
0000B63A 6700                       		beq.s	Obj30_ChkSwitch
0000B63C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B640 0440 0010                  		subi.w	#$10,d0
0000B644 6000                       		bra.s	loc_B5EE
0000B646                            ; ===========================================================================
0000B646                            
0000B646                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B646 4A28 0034                  		tst.b	$34(a0)
0000B64A 6600                       		bne.s	loc_B5E0
0000B64C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B650 7000                       		moveq	#0,d0
0000B652 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B656 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B658 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B65C 6700                       		beq.s	loc_B5EA	; if not, branch
0000B65E 117C 0001 0034             		move.b	#1,$34(a0)
0000B664                            
0000B664                            loc_B5E0:
0000B664 4A68 0032                  		tst.w	$32(a0)
0000B668 6700                       		beq.s	loc_B5EA
0000B66A 5568 0032                  		subq.w	#2,$32(a0)
0000B66E                            
0000B66E                            loc_B5EA:
0000B66E 3028 0032                  		move.w	$32(a0),d0
0000B672                            
0000B672                            loc_B5EE:
0000B672 3228 0030                  		move.w	$30(a0),d1
0000B676 9240                       		sub.w	d0,d1
0000B678 3141 000C                  		move.w	d1,$C(a0)
0000B67C 4E75                       		rts	
0000B67E                            ; ===========================================================================
0000B67E                            ; ---------------------------------------------------------------------------
0000B67E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B67E                            ; ---------------------------------------------------------------------------
0000B67E                            Map_obj30:
0000B67E                            	include "_maps\obj30.asm"
0000B67E                            ; ---------------------------------------------------------------------------
0000B67E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B67E                            ; ---------------------------------------------------------------------------
0000B67E 0000                       		dc.w byte_B600-Map_obj30
0000B680 0000                       		dc.w byte_B63D-Map_obj30
0000B682 0000                       		dc.w byte_B648-Map_obj30
0000B684 0C                         byte_B600:	dc.b $C
0000B685 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B68A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B68F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B694 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B699 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B69E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B6A3 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B6A8 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B6AD 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B6B2 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B6B7 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B6BC 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B6C1 02                         byte_B63D:	dc.b 2
0000B6C2 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B6C7 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B6CC 0A                         byte_B648:	dc.b $A
0000B6CD C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B6D2 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B6D7 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B6DC D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B6E1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B6E6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B6EB 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B6F0 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B6F5 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B6FA 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B700 00                         		even
0000B700 00                         		even
0000B700                            
0000B700                            ; ===========================================================================
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            
0000B700                            Obj31:					; XREF: Obj_Index
0000B700 7000                       		moveq	#0,d0
0000B702 1028 0024                  		move.b	$24(a0),d0
0000B706 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B70A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B70E                            ; ===========================================================================
0000B70E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B710 0000                       		dc.w loc_B798-Obj31_Index
0000B712 0000                       		dc.w loc_B7FE-Obj31_Index
0000B714 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B716 0000                       		dc.w loc_B7E2-Obj31_Index
0000B718                            
0000B718 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B71A 0100                       		dc.b 1,	0
0000B71C                            
0000B71C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B71F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B722 08CC 03                    		dc.b 8,	$CC, 3
0000B725 06F0 02                    		dc.b 6,	$F0, 2
0000B728                            
0000B728 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B72C 5000 7800                  		dc.w $5000, $7800
0000B730 3800 5800                  		dc.w $3800, $5800
0000B734 B800                       		dc.w $B800
0000B736                            ; ===========================================================================
0000B736                            
0000B736                            Obj31_Main:				; XREF: Obj31_Index
0000B736 7000                       		moveq	#0,d0
0000B738 1028 0028                  		move.b	$28(a0),d0
0000B73C 6A00                       		bpl.s	loc_B6CE
0000B73E 0240 007F                  		andi.w	#$7F,d0
0000B742 D040                       		add.w	d0,d0
0000B744 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B748 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B74C 101A                       		move.b	(a2)+,d0
0000B74E 1140 0028                  		move.b	d0,$28(a0)
0000B752                            
0000B752                            loc_B6CE:
0000B752 0200 000F                  		andi.b	#$F,d0
0000B756 D040                       		add.w	d0,d0
0000B758 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B75C 4A40                       		tst.w	d0
0000B75E 6600                       		bne.s	loc_B6E0
0000B760 3142 0032                  		move.w	d2,$32(a0)
0000B764                            
0000B764                            loc_B6E0:
0000B764 45F9 0000 B71C             		lea	(Obj31_Var).l,a2
0000B76A 2248                       		movea.l	a0,a1
0000B76C 7203                       		moveq	#3,d1
0000B76E 6000                       		bra.s	Obj31_MakeStomper
0000B770                            ; ===========================================================================
0000B770                            
0000B770                            Obj31_Loop:
0000B770 6100 0000                  		bsr.w	SingleObjLoad2
0000B774 6600 0000                  		bne.w	Obj31_SetSize
0000B778                            
0000B778                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B778 135A 0024                  		move.b	(a2)+,$24(a1)
0000B77C 12BC 0031                  		move.b	#$31,0(a1)
0000B780 3368 0008 0008             		move.w	8(a0),8(a1)
0000B786 101A                       		move.b	(a2)+,d0
0000B788 4880                       		ext.w	d0
0000B78A D068 000C                  		add.w	$C(a0),d0
0000B78E 3340 000C                  		move.w	d0,$C(a1)
0000B792 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B79A 337C 0300 0002             		move.w	#$300,2(a1)
0000B7A0 137C 0004 0001             		move.b	#4,1(a1)
0000B7A6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B7AC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B7B2 137C 0010 0019             		move.b	#$10,$19(a1)
0000B7B8 3342 0034                  		move.w	d2,$34(a1)
0000B7BC 137C 0004 0018             		move.b	#4,$18(a1)
0000B7C2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B7C6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B7CC 6600                       		bne.s	loc_B76A
0000B7CE 5341                       		subq.w	#1,d1
0000B7D0 1028 0028                  		move.b	$28(a0),d0
0000B7D4 0240 00F0                  		andi.w	#$F0,d0
0000B7D8 0C40 0020                  		cmpi.w	#$20,d0
0000B7DC 679A                       		beq.s	Obj31_MakeStomper
0000B7DE 137C 0038 0019             		move.b	#$38,$19(a1)
0000B7E4 137C 0090 0020             		move.b	#$90,$20(a1)
0000B7EA 5241                       		addq.w	#1,d1
0000B7EC                            
0000B7EC                            loc_B76A:
0000B7EC 2348 003C                  		move.l	a0,$3C(a1)
0000B7F0 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B7F4                            
0000B7F4 137C 0003 0018             		move.b	#3,$18(a1)
0000B7FA                            
0000B7FA                            Obj31_SetSize:
0000B7FA 7000                       		moveq	#0,d0
0000B7FC 1028 0028                  		move.b	$28(a0),d0
0000B800 E648                       		lsr.w	#3,d0
0000B802 0200 000E                  		andi.b	#$E,d0
0000B806 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B80A 115A 0019                  		move.b	(a2)+,$19(a0)
0000B80E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B812 6000                       		bra.s	loc_B798
0000B814                            ; ===========================================================================
0000B814 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B816 3009                       		dc.b $30, 9
0000B818 100A                       		dc.b $10, $A
0000B81A                            ; ===========================================================================
0000B81A                            
0000B81A                            loc_B798:				; XREF: Obj31_Index
0000B81A 6100 0000                  		bsr.w	Obj31_Types
0000B81E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B824 7200                       		moveq	#0,d1
0000B826 1228 0019                  		move.b	$19(a0),d1
0000B82A 0641 000B                  		addi.w	#$B,d1
0000B82E 343C 000C                  		move.w	#$C,d2
0000B832 363C 000D                  		move.w	#$D,d3
0000B836 3828 0008                  		move.w	8(a0),d4
0000B83A 6100 0000                  		bsr.w	SolidObject
0000B83E 0828 0003 0022             		btst	#3,$22(a0)
0000B844 6700                       		beq.s	Obj31_Display
0000B846 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B84C 6400                       		bcc.s	Obj31_Display
0000B84E 2448                       		movea.l	a0,a2
0000B850 41F8 D000                  		lea	($FFFFD000).w,a0
0000B854 4EB9 0000 0000             		jsr	KillSonic
0000B85A 204A                       		movea.l	a2,a0
0000B85C 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000B862 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000B868                            
0000B868                            Obj31_Display:
0000B868 6100 0000                  		bsr.w	DisplaySprite
0000B86C 6000 0000                  		bra.w	Obj31_ChkDel
0000B870                            ; ===========================================================================
0000B870                            
0000B870                            loc_B7E2:				; XREF: Obj31_Index
0000B870 117C 0080 0016             		move.b	#$80,$16(a0)
0000B876 08E8 0004 0001             		bset	#4,1(a0)
0000B87C 2268 003C                  		movea.l	$3C(a0),a1
0000B880 1029 0032                  		move.b	$32(a1),d0
0000B884 EA08                       		lsr.b	#5,d0
0000B886 5600                       		addq.b	#3,d0
0000B888 1140 001A                  		move.b	d0,$1A(a0)
0000B88C                            
0000B88C                            loc_B7FE:				; XREF: Obj31_Index
0000B88C 2268 003C                  		movea.l	$3C(a0),a1
0000B890 7000                       		moveq	#0,d0
0000B892 1029 0032                  		move.b	$32(a1),d0
0000B896 D068 0030                  		add.w	$30(a0),d0
0000B89A 3140 000C                  		move.w	d0,$C(a0)
0000B89E                            
0000B89E                            Obj31_Display2:				; XREF: Obj31_Index
0000B89E 6100 0000                  		bsr.w	DisplaySprite
0000B8A2                            
0000B8A2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B8A2 3028 0008                  		move.w	8(a0),d0
0000B8A6 0240 FF80                  		andi.w	#$FF80,d0
0000B8AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8AE 0441 0080                  		subi.w	#$80,d1
0000B8B2 0241 FF80                  		andi.w	#$FF80,d1
0000B8B6 9041                       		sub.w	d1,d0
0000B8B8 0C40 0280                  		cmpi.w	#$280,d0
0000B8BC 6200 0000                  		bhi.w	DeleteObject
0000B8C0 4E75                       		rts	
0000B8C2                            ; ===========================================================================
0000B8C2                            
0000B8C2                            Obj31_Types:				; XREF: loc_B798
0000B8C2 1028 0028                  		move.b	$28(a0),d0
0000B8C6 0240 000F                  		andi.w	#$F,d0
0000B8CA D040                       		add.w	d0,d0
0000B8CC 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B8D0 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B8D4                            ; ===========================================================================
0000B8D4 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B8D6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8D8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8DA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B8DC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8DE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B8E0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B8E2                            ; ===========================================================================
0000B8E2                            
0000B8E2                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B8E2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B8E6 7000                       		moveq	#0,d0
0000B8E8 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B8EC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B8F0 6700                       		beq.s	loc_B8A8	; if not, branch
0000B8F2 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B8F6 6A00                       		bpl.s	loc_B872
0000B8F8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B8FE 6700                       		beq.s	loc_B8A0
0000B900                            
0000B900                            loc_B872:
0000B900 4A68 0032                  		tst.w	$32(a0)
0000B904 6700                       		beq.s	loc_B8A0
0000B906 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B90A 0200 000F                  		andi.b	#$F,d0
0000B90E 6600                       		bne.s	loc_B892
0000B910 4A28 0001                  		tst.b	1(a0)
0000B914 6A00                       		bpl.s	loc_B892
0000B916 303C 00C7                  		move.w	#$C7,d0
0000B91A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B920                            
0000B920                            loc_B892:
0000B920 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B926 6400                       		bcc.s	Obj31_Restart
0000B928 317C 0000 0032             		move.w	#0,$32(a0)
0000B92E                            
0000B92E                            loc_B8A0:
0000B92E 317C 0000 0012             		move.w	#0,$12(a0)
0000B934 6000                       		bra.s	Obj31_Restart
0000B936                            ; ===========================================================================
0000B936                            
0000B936                            loc_B8A8:				; XREF: Obj31_Type00
0000B936 3228 0034                  		move.w	$34(a0),d1
0000B93A B268 0032                  		cmp.w	$32(a0),d1
0000B93E 6700                       		beq.s	Obj31_Restart
0000B940 3028 0012                  		move.w	$12(a0),d0
0000B944 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B94A D168 0032                  		add.w	d0,$32(a0)
0000B94E B268 0032                  		cmp.w	$32(a0),d1
0000B952 6200                       		bhi.s	Obj31_Restart
0000B954 3141 0032                  		move.w	d1,$32(a0)
0000B958 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B95E 4A28 0001                  		tst.b	1(a0)
0000B962 6A00                       		bpl.s	Obj31_Restart
0000B964 303C 00BD                  		move.w	#$BD,d0
0000B968 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B96E                            
0000B96E                            Obj31_Restart:
0000B96E 7000                       		moveq	#0,d0
0000B970 1028 0032                  		move.b	$32(a0),d0
0000B974 D068 0030                  		add.w	$30(a0),d0
0000B978 3140 000C                  		move.w	d0,$C(a0)
0000B97C 4E75                       		rts	
0000B97E                            ; ===========================================================================
0000B97E                            
0000B97E                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B97E 4A68 0036                  		tst.w	$36(a0)
0000B982 6700                       		beq.s	loc_B938
0000B984 4A68 0038                  		tst.w	$38(a0)
0000B988 6700                       		beq.s	loc_B902
0000B98A 5368 0038                  		subq.w	#1,$38(a0)
0000B98E 6000                       		bra.s	loc_B97C
0000B990                            ; ===========================================================================
0000B990                            
0000B990                            loc_B902:
0000B990 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B994 0200 000F                  		andi.b	#$F,d0
0000B998 6600                       		bne.s	loc_B91C
0000B99A 4A28 0001                  		tst.b	1(a0)
0000B99E 6A00                       		bpl.s	loc_B91C
0000B9A0 303C 00C7                  		move.w	#$C7,d0
0000B9A4 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B9AA                            
0000B9AA                            loc_B91C:
0000B9AA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B9B0 6400                       		bcc.s	loc_B97C
0000B9B2 317C 0000 0032             		move.w	#0,$32(a0)
0000B9B8 317C 0000 0012             		move.w	#0,$12(a0)
0000B9BE 317C 0000 0036             		move.w	#0,$36(a0)
0000B9C4 6000                       		bra.s	loc_B97C
0000B9C6                            ; ===========================================================================
0000B9C6                            
0000B9C6                            loc_B938:				; XREF: Obj31_Type01
0000B9C6 3228 0034                  		move.w	$34(a0),d1
0000B9CA B268 0032                  		cmp.w	$32(a0),d1
0000B9CE 6700                       		beq.s	loc_B97C
0000B9D0 3028 0012                  		move.w	$12(a0),d0
0000B9D4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B9DA D168 0032                  		add.w	d0,$32(a0)
0000B9DE B268 0032                  		cmp.w	$32(a0),d1
0000B9E2 6200                       		bhi.s	loc_B97C
0000B9E4 3141 0032                  		move.w	d1,$32(a0)
0000B9E8 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B9EE 317C 0001 0036             		move.w	#1,$36(a0)
0000B9F4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000B9FA 4A28 0001                  		tst.b	1(a0)
0000B9FE 6A00                       		bpl.s	loc_B97C
0000BA00 303C 00BD                  		move.w	#$BD,d0
0000BA04 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BA0A                            
0000BA0A                            loc_B97C:
0000BA0A 6000 FF62                  		bra.w	Obj31_Restart
0000BA0E                            ; ===========================================================================
0000BA0E                            
0000BA0E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BA0E 3038 D008                  		move.w	($FFFFD008).w,d0
0000BA12 9068 0008                  		sub.w	8(a0),d0
0000BA16 6400                       		bcc.s	loc_B98C
0000BA18 4440                       		neg.w	d0
0000BA1A                            
0000BA1A                            loc_B98C:
0000BA1A 0C40 0090                  		cmpi.w	#$90,d0
0000BA1E 6400                       		bcc.s	loc_B996
0000BA20 5228 0028                  		addq.b	#1,$28(a0)
0000BA24                            
0000BA24                            loc_B996:
0000BA24 6000 FF48                  		bra.w	Obj31_Restart
0000BA28                            ; ===========================================================================
0000BA28                            ; ---------------------------------------------------------------------------
0000BA28                            ; Object 45 - spiked metal block from beta version (MZ)
0000BA28                            ; ---------------------------------------------------------------------------
0000BA28                            
0000BA28                            Obj45:					; XREF: Obj_Index
0000BA28 7000                       		moveq	#0,d0
0000BA2A 1028 0024                  		move.b	$24(a0),d0
0000BA2E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BA32 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BA36                            ; ===========================================================================
0000BA36 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BA38 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BA3A 0000                       		dc.w loc_BA8E-Obj45_Index
0000BA3C 0000                       		dc.w Obj45_Display-Obj45_Index
0000BA3E 0000                       		dc.w loc_BA7A-Obj45_Index
0000BA40                            
0000BA40 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BA43 04E4 01                    		dc.b	4, $E4,	  1
0000BA46 0834 03                    		dc.b	8, $34,	  3
0000BA49 0628 02                    		dc.b	6, $28,	  2
0000BA4C                            
0000BA4C 3800                       word_B9BE:	dc.w $3800
0000BA4E A000                       		dc.w -$6000
0000BA50 5000                       		dc.w $5000
0000BA52                            ; ===========================================================================
0000BA52                            
0000BA52                            Obj45_Main:				; XREF: Obj45_Index
0000BA52 7000                       		moveq	#0,d0
0000BA54 1028 0028                  		move.b	$28(a0),d0
0000BA58 D040                       		add.w	d0,d0
0000BA5A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BA5E 45F9 0000 BA40             		lea	(Obj45_Var).l,a2
0000BA64 2248                       		movea.l	a0,a1
0000BA66 7203                       		moveq	#3,d1
0000BA68 6000                       		bra.s	Obj45_Load
0000BA6A                            ; ===========================================================================
0000BA6A                            
0000BA6A                            Obj45_Loop:
0000BA6A 6100 0000                  		bsr.w	SingleObjLoad2
0000BA6E 6600                       		bne.s	loc_BA52
0000BA70                            
0000BA70                            Obj45_Load:				; XREF: Obj45_Main
0000BA70 135A 0024                  		move.b	(a2)+,$24(a1)
0000BA74 12BC 0045                  		move.b	#$45,0(a1)
0000BA78 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BA7E 101A                       		move.b	(a2)+,d0
0000BA80 4880                       		ext.w	d0
0000BA82 D068 0008                  		add.w	8(a0),d0
0000BA86 3340 0008                  		move.w	d0,8(a1)
0000BA8A 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BA92 337C 0300 0002             		move.w	#$300,2(a1)
0000BA98 137C 0004 0001             		move.b	#4,1(a1)
0000BA9E 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BAA4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BAAA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAB0 137C 0020 0019             		move.b	#$20,$19(a1)
0000BAB6 3342 0034                  		move.w	d2,$34(a1)
0000BABA 137C 0004 0018             		move.b	#4,$18(a1)
0000BAC0 0C12 0001                  		cmpi.b	#1,(a2)
0000BAC4 6600                       		bne.s	loc_BA40
0000BAC6 137C 0091 0020             		move.b	#$91,$20(a1)
0000BACC                            
0000BACC                            loc_BA40:
0000BACC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BAD0 2348 003C                  		move.l	a0,$3C(a1)
0000BAD4 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BAD8                            
0000BAD8 137C 0003 0018             		move.b	#3,$18(a1)
0000BADE                            
0000BADE                            loc_BA52:
0000BADE 117C 0010 0019             		move.b	#$10,$19(a0)
0000BAE4                            
0000BAE4                            Obj45_Solid:				; XREF: Obj45_Index
0000BAE4 3F28 0008                  		move.w	8(a0),-(sp)
0000BAE8 6100 0000                  		bsr.w	Obj45_Move
0000BAEC 323C 0017                  		move.w	#$17,d1
0000BAF0 343C 0020                  		move.w	#$20,d2
0000BAF4 363C 0020                  		move.w	#$20,d3
0000BAF8 381F                       		move.w	(sp)+,d4
0000BAFA 6100 0000                  		bsr.w	SolidObject
0000BAFE 6100 0000                  		bsr.w	DisplaySprite
0000BB02 6000 0000                  		bra.w	Obj45_ChkDel
0000BB06                            ; ===========================================================================
0000BB06                            
0000BB06                            loc_BA7A:				; XREF: Obj45_Index
0000BB06 2268 003C                  		movea.l	$3C(a0),a1
0000BB0A 1029 0032                  		move.b	$32(a1),d0
0000BB0E 0600 0010                  		addi.b	#$10,d0
0000BB12 EA08                       		lsr.b	#5,d0
0000BB14 5600                       		addq.b	#3,d0
0000BB16 1140 001A                  		move.b	d0,$1A(a0)
0000BB1A                            
0000BB1A                            loc_BA8E:				; XREF: Obj45_Index
0000BB1A 2268 003C                  		movea.l	$3C(a0),a1
0000BB1E 7000                       		moveq	#0,d0
0000BB20 1029 0032                  		move.b	$32(a1),d0
0000BB24 4440                       		neg.w	d0
0000BB26 D068 0030                  		add.w	$30(a0),d0
0000BB2A 3140 0008                  		move.w	d0,8(a0)
0000BB2E                            
0000BB2E                            Obj45_Display:				; XREF: Obj45_Index
0000BB2E 6100 0000                  		bsr.w	DisplaySprite
0000BB32                            
0000BB32                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BB32 3028 003A                  		move.w	$3A(a0),d0
0000BB36 0240 FF80                  		andi.w	#$FF80,d0
0000BB3A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB3E 0441 0080                  		subi.w	#$80,d1
0000BB42 0241 FF80                  		andi.w	#$FF80,d1
0000BB46 9041                       		sub.w	d1,d0
0000BB48 0C40 0280                  		cmpi.w	#$280,d0
0000BB4C 6200 0000                  		bhi.w	DeleteObject
0000BB50 4E75                       		rts	
0000BB52                            
0000BB52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB52                            
0000BB52                            
0000BB52                            Obj45_Move:				; XREF: Obj45_Solid
0000BB52 7000                       		moveq	#0,d0
0000BB54 1028 0028                  		move.b	$28(a0),d0
0000BB58 D040                       		add.w	d0,d0
0000BB5A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BB5E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BB62                            ; End of function Obj45_Move
0000BB62                            
0000BB62                            ; ===========================================================================
0000BB62 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BB64 0000                       		dc.w loc_BADA-off_BAD6
0000BB66                            ; ===========================================================================
0000BB66                            
0000BB66                            loc_BADA:				; XREF: off_BAD6
0000BB66 4A68 0036                  		tst.w	$36(a0)
0000BB6A 6700                       		beq.s	loc_BB08
0000BB6C 4A68 0038                  		tst.w	$38(a0)
0000BB70 6700                       		beq.s	loc_BAEC
0000BB72 5368 0038                  		subq.w	#1,$38(a0)
0000BB76 6000                       		bra.s	loc_BB3C
0000BB78                            ; ===========================================================================
0000BB78                            
0000BB78                            loc_BAEC:
0000BB78 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BB7E 6400                       		bcc.s	loc_BB3C
0000BB80 317C 0000 0032             		move.w	#0,$32(a0)
0000BB86 317C 0000 0010             		move.w	#0,$10(a0)
0000BB8C 317C 0000 0036             		move.w	#0,$36(a0)
0000BB92 6000                       		bra.s	loc_BB3C
0000BB94                            ; ===========================================================================
0000BB94                            
0000BB94                            loc_BB08:				; XREF: loc_BADA
0000BB94 3228 0034                  		move.w	$34(a0),d1
0000BB98 B268 0032                  		cmp.w	$32(a0),d1
0000BB9C 6700                       		beq.s	loc_BB3C
0000BB9E 3028 0010                  		move.w	$10(a0),d0
0000BBA2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BBA8 D168 0032                  		add.w	d0,$32(a0)
0000BBAC B268 0032                  		cmp.w	$32(a0),d1
0000BBB0 6200                       		bhi.s	loc_BB3C
0000BBB2 3141 0032                  		move.w	d1,$32(a0)
0000BBB6 317C 0000 0010             		move.w	#0,$10(a0)
0000BBBC 317C 0001 0036             		move.w	#1,$36(a0)
0000BBC2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BBC8                            
0000BBC8                            loc_BB3C:
0000BBC8 7000                       		moveq	#0,d0
0000BBCA 1028 0032                  		move.b	$32(a0),d0
0000BBCE 4440                       		neg.w	d0
0000BBD0 D068 0030                  		add.w	$30(a0),d0
0000BBD4 3140 0008                  		move.w	d0,8(a0)
0000BBD8 4E75                       		rts	
0000BBDA                            ; ===========================================================================
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA                            Map_obj31:
0000BBDA                            	include "_maps\obj31.asm"
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BBDA                            ; ---------------------------------------------------------------------------
0000BBDA 0000                       		dc.w byte_BB64-Map_obj31
0000BBDC 0000                       		dc.w byte_BB7E-Map_obj31
0000BBDE 0000                       		dc.w byte_BB98-Map_obj31
0000BBE0 0000                       		dc.w byte_BB9E-Map_obj31
0000BBE2 0000                       		dc.w byte_BBA9-Map_obj31
0000BBE4 0000                       		dc.w byte_BBBE-Map_obj31
0000BBE6 0000                       		dc.w byte_BBDD-Map_obj31
0000BBE8 0000                       		dc.w byte_BC06-Map_obj31
0000BBEA 0000                       		dc.w byte_BC06-Map_obj31
0000BBEC 0000                       		dc.w byte_BC39-Map_obj31
0000BBEE 0000                       		dc.w byte_BC53-Map_obj31
0000BBF0 05                         byte_BB64:	dc.b 5
0000BBF1 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BBF6 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BBFB EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC00 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BC05 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BC0A 05                         byte_BB7E:	dc.b 5
0000BC0B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BC10 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BC15 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BC1A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BC1F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BC24 01                         byte_BB98:	dc.b 1
0000BC25 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BC2A 02                         byte_BB9E:	dc.b 2
0000BC2B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC30 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC35 04                         byte_BBA9:	dc.b 4
0000BC36 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC3B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC40 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC45 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC4A 06                         byte_BBBE:	dc.b 6
0000BC4B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC50 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC55 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC5A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC5F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC64 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC69 08                         byte_BBDD:	dc.b 8
0000BC6A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BC6F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BC74 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC79 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC7E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC83 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC88 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC8D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC92 0A                         byte_BC06:	dc.b $A
0000BC93 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BC98 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BC9D A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCA2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCA7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCAC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCB1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCB6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCBB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCC0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCC5 05                         byte_BC39:	dc.b 5
0000BCC6 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BCCB F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BCD0 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BCD5 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BCDA EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BCDF 01                         byte_BC53:	dc.b 1
0000BCE0 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BCE6 00                         		even
0000BCE6 00                         		even
0000BCE6                            
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            Map_obj45:
0000BCE6                            	include "_maps\obj45.asm"
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BCE6                            ; ---------------------------------------------------------------------------
0000BCE6 0000                       		dc.w byte_BC6C-Map_obj45
0000BCE8 0000                       		dc.w byte_BC7C-Map_obj45
0000BCEA 0000                       		dc.w byte_BC8C-Map_obj45
0000BCEC 0000                       		dc.w byte_BC92-Map_obj45
0000BCEE 0000                       		dc.w byte_BC9D-Map_obj45
0000BCF0 0000                       		dc.w byte_BCB2-Map_obj45
0000BCF2 0000                       		dc.w byte_BCD1-Map_obj45
0000BCF4 0000                       		dc.w byte_BCFA-Map_obj45
0000BCF6 0000                       		dc.w byte_BCFA-Map_obj45
0000BCF8 03                         byte_BC6C:	dc.b 3
0000BCF9 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BCFE 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BD03 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BD08 03                         byte_BC7C:	dc.b 3
0000BD09 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BD0E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BD13 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BD18 01                         byte_BC8C:	dc.b 1
0000BD19 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BD1E 02                         byte_BC92:	dc.b 2
0000BD1F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD24 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD29 04                         byte_BC9D:	dc.b 4
0000BD2A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD2F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD34 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD39 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD3E 06                         byte_BCB2:	dc.b 6
0000BD3F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD44 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD49 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD4E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD53 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD58 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BD5D 08                         byte_BCD1:	dc.b 8
0000BD5E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD63 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD68 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD6D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD72 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD77 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BD7C F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BD81 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BD86 08                         byte_BCFA:	dc.b 8
0000BD87 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD8C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD91 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD96 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD9B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDA0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDA5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDAA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDAF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BDB4 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BDBA 00                         		even
0000BDBA 00                         		even
0000BDBA                            
0000BDBA                            ; ===========================================================================
0000BDBA                            ; ---------------------------------------------------------------------------
0000BDBA                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BDBA                            ; ---------------------------------------------------------------------------
0000BDBA                            
0000BDBA                            Obj32:					; XREF: Obj_Index
0000BDBA 7000                       		moveq	#0,d0
0000BDBC 1028 0024                  		move.b	$24(a0),d0
0000BDC0 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BDC4 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BDC8                            ; ===========================================================================
0000BDC8 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BDCA 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BDCC                            ; ===========================================================================
0000BDCC                            
0000BDCC                            Obj32_Main:				; XREF: Obj32_Index
0000BDCC 5428 0024                  		addq.b	#2,$24(a0)
0000BDD0 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BDD8 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BDDE 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BDE4 6700                       		beq.s	loc_BD60
0000BDE6 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BDEC                            
0000BDEC                            loc_BD60:
0000BDEC 117C 0004 0001             		move.b	#4,1(a0)
0000BDF2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDF8 117C 0004 0018             		move.b	#4,$18(a0)
0000BDFE 5668 000C                  		addq.w	#3,$C(a0)
0000BE02                            
0000BE02                            Obj32_Pressed:				; XREF: Obj32_Index
0000BE02 4A28 0001                  		tst.b	1(a0)
0000BE06 6A00                       		bpl.s	Obj32_Display
0000BE08 323C 001B                  		move.w	#$1B,d1
0000BE0C 343C 0005                  		move.w	#5,d2
0000BE10 363C 0005                  		move.w	#5,d3
0000BE14 3828 0008                  		move.w	8(a0),d4
0000BE18 6100 0000                  		bsr.w	SolidObject
0000BE1C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BE22 1028 0028                  		move.b	$28(a0),d0
0000BE26 0240 000F                  		andi.w	#$F,d0
0000BE2A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BE2E 47F3 0000                  		lea	(a3,d0.w),a3
0000BE32 7600                       		moveq	#0,d3
0000BE34 0828 0006 0028             		btst	#6,$28(a0)
0000BE3A 6700                       		beq.s	loc_BDB2
0000BE3C 7607                       		moveq	#7,d3
0000BE3E                            
0000BE3E                            loc_BDB2:
0000BE3E 4A28 0028                  		tst.b	$28(a0)
0000BE42 6A00                       		bpl.s	loc_BDBE
0000BE44 6100 0000                  		bsr.w	Obj32_MZBlock
0000BE48 6600                       		bne.s	loc_BDC8
0000BE4A                            
0000BE4A                            loc_BDBE:
0000BE4A 4A28 0025                  		tst.b	$25(a0)
0000BE4E 6600                       		bne.s	loc_BDC8
0000BE50 0793                       		bclr	d3,(a3)
0000BE52 6000                       		bra.s	loc_BDDE
0000BE54                            ; ===========================================================================
0000BE54                            
0000BE54                            loc_BDC8:
0000BE54 4A13                       		tst.b	(a3)
0000BE56 6600                       		bne.s	loc_BDD6
0000BE58 303C 00CD                  		move.w	#$CD,d0
0000BE5C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play switch sound
0000BE62                            
0000BE62                            loc_BDD6:
0000BE62 07D3                       		bset	d3,(a3)
0000BE64 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BE6A                            
0000BE6A                            loc_BDDE:
0000BE6A 0828 0005 0028             		btst	#5,$28(a0)
0000BE70 6700                       		beq.s	Obj32_Display
0000BE72 5328 001E                  		subq.b	#1,$1E(a0)
0000BE76 6A00                       		bpl.s	Obj32_Display
0000BE78 117C 0007 001E             		move.b	#7,$1E(a0)
0000BE7E 0868 0001 001A             		bchg	#1,$1A(a0)
0000BE84                            
0000BE84                            Obj32_Display:
0000BE84 6100 0000                  		bsr.w	DisplaySprite
0000BE88 3028 0008                  		move.w	8(a0),d0
0000BE8C 0240 FF80                  		andi.w	#$FF80,d0
0000BE90 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE94 0441 0080                  		subi.w	#$80,d1
0000BE98 0241 FF80                  		andi.w	#$FF80,d1
0000BE9C 9041                       		sub.w	d1,d0
0000BE9E 0C40 0280                  		cmpi.w	#$280,d0
0000BEA2 6200 0000                  		bhi.w	Obj32_Delete
0000BEA6 4E75                       		rts	
0000BEA8                            ; ===========================================================================
0000BEA8                            
0000BEA8                            Obj32_Delete:
0000BEA8 6100 0000                  		bsr.w	DeleteObject
0000BEAC 4E75                       		rts	
0000BEAE                            
0000BEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEAE                            
0000BEAE                            
0000BEAE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BEAE 3F03                       		move.w	d3,-(sp)
0000BEB0 3428 0008                  		move.w	8(a0),d2
0000BEB4 3628 000C                  		move.w	$C(a0),d3
0000BEB8 0442 0010                  		subi.w	#$10,d2
0000BEBC 5143                       		subq.w	#8,d3
0000BEBE 383C 0020                  		move.w	#$20,d4
0000BEC2 3A3C 0010                  		move.w	#$10,d5
0000BEC6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BECA 3C3C 005F                  		move.w	#$5F,d6
0000BECE                            
0000BECE                            Obj32_MZLoop:
0000BECE 4A29 0001                  		tst.b	1(a1)
0000BED2 6A00                       		bpl.s	loc_BE4E
0000BED4 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BED8 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BEDA                            
0000BEDA                            loc_BE4E:
0000BEDA 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BEDE 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BEE2                            
0000BEE2 361F                       		move.w	(sp)+,d3
0000BEE4 7000                       		moveq	#0,d0
0000BEE6                            
0000BEE6                            locret_BE5A:
0000BEE6 4E75                       		rts	
0000BEE8                            ; ===========================================================================
0000BEE8 1010                       Obj32_MZData:	dc.b $10, $10
0000BEEA                            ; ===========================================================================
0000BEEA                            
0000BEEA                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BEEA 7001                       		moveq	#1,d0
0000BEEC 0240 003F                  		andi.w	#$3F,d0
0000BEF0 D040                       		add.w	d0,d0
0000BEF2 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BEF6 121A                       		move.b	(a2)+,d1
0000BEF8 4881                       		ext.w	d1
0000BEFA 3029 0008                  		move.w	8(a1),d0
0000BEFE 9041                       		sub.w	d1,d0
0000BF00 9042                       		sub.w	d2,d0
0000BF02 6400                       		bcc.s	loc_BE80
0000BF04 D241                       		add.w	d1,d1
0000BF06 D041                       		add.w	d1,d0
0000BF08 6500                       		bcs.s	loc_BE84
0000BF0A 60CE                       		bra.s	loc_BE4E
0000BF0C                            ; ===========================================================================
0000BF0C                            
0000BF0C                            loc_BE80:
0000BF0C B044                       		cmp.w	d4,d0
0000BF0E 62CA                       		bhi.s	loc_BE4E
0000BF10                            
0000BF10                            loc_BE84:
0000BF10 121A                       		move.b	(a2)+,d1
0000BF12 4881                       		ext.w	d1
0000BF14 3029 000C                  		move.w	$C(a1),d0
0000BF18 9041                       		sub.w	d1,d0
0000BF1A 9043                       		sub.w	d3,d0
0000BF1C 6400                       		bcc.s	loc_BE9A
0000BF1E D241                       		add.w	d1,d1
0000BF20 D041                       		add.w	d1,d0
0000BF22 6500                       		bcs.s	loc_BE9E
0000BF24 60B4                       		bra.s	loc_BE4E
0000BF26                            ; ===========================================================================
0000BF26                            
0000BF26                            loc_BE9A:
0000BF26 B045                       		cmp.w	d5,d0
0000BF28 62B0                       		bhi.s	loc_BE4E
0000BF2A                            
0000BF2A                            loc_BE9E:
0000BF2A 361F                       		move.w	(sp)+,d3
0000BF2C 7001                       		moveq	#1,d0
0000BF2E 4E75                       		rts	
0000BF30                            ; End of function Obj32_MZBlock
0000BF30                            
0000BF30                            ; ===========================================================================
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30                            Map_obj32:
0000BF30                            	include "_maps\obj32.asm"
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF30                            ; ---------------------------------------------------------------------------
0000BF30 0000                       		dc.w byte_BEAC-Map_obj32
0000BF32 0000                       		dc.w byte_BEB7-Map_obj32
0000BF34 0000                       		dc.w byte_BEC2-Map_obj32
0000BF36 0000                       		dc.w byte_BEB7-Map_obj32
0000BF38 02                         byte_BEAC:	dc.b 2
0000BF39 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BF3E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BF43 02                         byte_BEB7:	dc.b 2
0000BF44 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BF49 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BF4E 02                         byte_BEC2:	dc.b 2
0000BF4F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BF54 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BF59 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BF5E                            		even
0000BF5E                            		even
0000BF5E                            
0000BF5E                            ; ===========================================================================
0000BF5E                            ; ---------------------------------------------------------------------------
0000BF5E                            ; Object 33 - pushable blocks (MZ, LZ)
0000BF5E                            ; ---------------------------------------------------------------------------
0000BF5E                            
0000BF5E                            Obj33:					; XREF: Obj_Index
0000BF5E 7000                       		moveq	#0,d0
0000BF60 1028 0024                  		move.b	$24(a0),d0
0000BF64 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BF68 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BF6C                            ; ===========================================================================
0000BF6C 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BF6E 0000                       		dc.w loc_BF6E-Obj33_Index
0000BF70 0000                       		dc.w loc_C02C-Obj33_Index
0000BF72                            
0000BF72 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BF74 4001                       		dc.b $40, 1
0000BF76                            ; ===========================================================================
0000BF76                            
0000BF76                            Obj33_Main:				; XREF: Obj33_Index
0000BF76 5428 0024                  		addq.b	#2,$24(a0)
0000BF7A 117C 000F 0016             		move.b	#$F,$16(a0)
0000BF80 117C 000F 0017             		move.b	#$F,$17(a0)
0000BF86 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BF8E 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BF94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BF9A 6600                       		bne.s	loc_BF16
0000BF9C 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BFA2                            
0000BFA2                            loc_BF16:
0000BFA2 117C 0004 0001             		move.b	#4,1(a0)
0000BFA8 117C 0003 0018             		move.b	#3,$18(a0)
0000BFAE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BFB4 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BFBA 7000                       		moveq	#0,d0
0000BFBC 1028 0028                  		move.b	$28(a0),d0
0000BFC0 D040                       		add.w	d0,d0
0000BFC2 0240 000E                  		andi.w	#$E,d0
0000BFC6 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000BFCA 115A 0019                  		move.b	(a2)+,$19(a0)
0000BFCE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BFD2 4A28 0028                  		tst.b	$28(a0)
0000BFD6 6700                       		beq.s	Obj33_ChkGone
0000BFD8 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000BFDE                            
0000BFDE                            Obj33_ChkGone:
0000BFDE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BFE2 7000                       		moveq	#0,d0
0000BFE4 1028 0023                  		move.b	$23(a0),d0
0000BFE8 6700                       		beq.s	loc_BF6E
0000BFEA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BFF0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BFF6 6600 0000                  		bne.w	DeleteObject
0000BFFA                            
0000BFFA                            loc_BF6E:				; XREF: Obj33_Index
0000BFFA 4A28 0032                  		tst.b	$32(a0)
0000BFFE 6600 0000                  		bne.w	loc_C046
0000C002 7200                       		moveq	#0,d1
0000C004 1228 0019                  		move.b	$19(a0),d1
0000C008 0641 000B                  		addi.w	#$B,d1
0000C00C 343C 0010                  		move.w	#$10,d2
0000C010 363C 0011                  		move.w	#$11,d3
0000C014 3828 0008                  		move.w	8(a0),d4
0000C018 6100 0000                  		bsr.w	loc_C186
0000C01C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C022 6600                       		bne.s	loc_BFC6	; if not, branch
0000C024 08A8 0007 0028             		bclr	#7,$28(a0)
0000C02A 3028 0008                  		move.w	8(a0),d0
0000C02E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C032 6500                       		bcs.s	loc_BFC6
0000C034 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C038 6400                       		bcc.s	loc_BFC6
0000C03A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C03E 0440 001C                  		subi.w	#$1C,d0
0000C042 3140 000C                  		move.w	d0,$C(a0)
0000C046 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C04C 08E8 0007 0028             		bset	#7,$28(a0)
0000C052                            
0000C052                            loc_BFC6:
0000C052 3028 0008                  		move.w	8(a0),d0
0000C056 0240 FF80                  		andi.w	#$FF80,d0
0000C05A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C05E 0441 0080                  		subi.w	#$80,d1
0000C062 0241 FF80                  		andi.w	#$FF80,d1
0000C066 9041                       		sub.w	d1,d0
0000C068 0C40 0280                  		cmpi.w	#$280,d0
0000C06C 6200                       		bhi.s	loc_BFE6
0000C06E 6000 0000                  		bra.w	DisplaySprite
0000C072                            ; ===========================================================================
0000C072                            
0000C072                            loc_BFE6:
0000C072 3028 0034                  		move.w	$34(a0),d0
0000C076 0240 FF80                  		andi.w	#$FF80,d0
0000C07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C07E 0441 0080                  		subi.w	#$80,d1
0000C082 0241 FF80                  		andi.w	#$FF80,d1
0000C086 9041                       		sub.w	d1,d0
0000C088 0C40 0280                  		cmpi.w	#$280,d0
0000C08C 6200                       		bhi.s	loc_C016
0000C08E 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C094 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C09A 117C 0004 0024             		move.b	#4,$24(a0)
0000C0A0 6000                       		bra.s	loc_C02C
0000C0A2                            ; ===========================================================================
0000C0A2                            
0000C0A2                            loc_C016:
0000C0A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C0A6 7000                       		moveq	#0,d0
0000C0A8 1028 0023                  		move.b	$23(a0),d0
0000C0AC 6700                       		beq.s	loc_C028
0000C0AE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C0B4                            
0000C0B4                            loc_C028:
0000C0B4 6000 0000                  		bra.w	DeleteObject
0000C0B8                            ; ===========================================================================
0000C0B8                            
0000C0B8                            loc_C02C:				; XREF: Obj33_Index
0000C0B8 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C0BC 6700                       		beq.s	locret_C044
0000C0BE 117C 0002 0024             		move.b	#2,$24(a0)
0000C0C4 4228 0032                  		clr.b	$32(a0)
0000C0C8 4268 0010                  		clr.w	$10(a0)
0000C0CC 4268 0012                  		clr.w	$12(a0)
0000C0D0                            
0000C0D0                            locret_C044:
0000C0D0 4E75                       		rts	
0000C0D2                            ; ===========================================================================
0000C0D2                            
0000C0D2                            loc_C046:				; XREF: loc_BF6E
0000C0D2 3F28 0008                  		move.w	8(a0),-(sp)
0000C0D6 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C0DC 6400                       		bcc.s	loc_C056
0000C0DE 6100 0000                  		bsr.w	SpeedToPos
0000C0E2                            
0000C0E2                            loc_C056:
0000C0E2 0828 0001 0022             		btst	#1,$22(a0)
0000C0E8 6700                       		beq.s	loc_C0A0
0000C0EA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C0F0 4EB9 0000 0000             		jsr	ObjHitFloor
0000C0F6 4A41                       		tst.w	d1
0000C0F8 6A00 0000                  		bpl.w	loc_C09E
0000C0FC D368 000C                  		add.w	d1,$C(a0)
0000C100 4268 0012                  		clr.w	$12(a0)
0000C104 08A8 0001 0022             		bclr	#1,$22(a0)
0000C10A 3011                       		move.w	(a1),d0
0000C10C 0240 03FF                  		andi.w	#$3FF,d0
0000C110 0C40 016A                  		cmpi.w	#$16A,d0
0000C114 6500                       		bcs.s	loc_C09E
0000C116 3028 0030                  		move.w	$30(a0),d0
0000C11A E640                       		asr.w	#3,d0
0000C11C 3140 0010                  		move.w	d0,$10(a0)
0000C120 117C 0001 0032             		move.b	#1,$32(a0)
0000C126 4268 000E                  		clr.w	$E(a0)
0000C12A                            
0000C12A                            loc_C09E:
0000C12A 6000                       		bra.s	loc_C0E6
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            loc_C0A0:
0000C12C 4A68 0010                  		tst.w	$10(a0)
0000C130 6700 0000                  		beq.w	loc_C0D6
0000C134 6B00                       		bmi.s	loc_C0BC
0000C136 7600                       		moveq	#0,d3
0000C138 1628 0019                  		move.b	$19(a0),d3
0000C13C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C142 4A41                       		tst.w	d1		; has block touched a wall?
0000C144 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C146 6000                       		bra.s	loc_C0E6
0000C148                            ; ===========================================================================
0000C148                            
0000C148                            loc_C0BC:
0000C148 7600                       		moveq	#0,d3
0000C14A 1628 0019                  		move.b	$19(a0),d3
0000C14E 4643                       		not.w	d3
0000C150 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C156 4A41                       		tst.w	d1		; has block touched a wall?
0000C158 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C15A 6000                       		bra.s	loc_C0E6
0000C15C                            ; ===========================================================================
0000C15C                            
0000C15C                            Obj33_StopPush:
0000C15C 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C160 6000                       		bra.s	loc_C0E6
0000C162                            ; ===========================================================================
0000C162                            
0000C162                            loc_C0D6:
0000C162 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C16A 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C170 6400                       		bcc.s	loc_C104
0000C172                            
0000C172                            loc_C0E6:
0000C172 7200                       		moveq	#0,d1
0000C174 1228 0019                  		move.b	$19(a0),d1
0000C178 0641 000B                  		addi.w	#$B,d1
0000C17C 343C 0010                  		move.w	#$10,d2
0000C180 363C 0011                  		move.w	#$11,d3
0000C184 381F                       		move.w	(sp)+,d4
0000C186 6100 0000                  		bsr.w	loc_C186
0000C18A 6100                       		bsr.s	Obj33_ChkLava
0000C18C 6000 FEC4                  		bra.w	loc_BFC6
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            loc_C104:
0000C190 381F                       		move.w	(sp)+,d4
0000C192 43F8 D000                  		lea	($FFFFD000).w,a1
0000C196 08A9 0003 0022             		bclr	#3,$22(a1)
0000C19C 08A8 0003 0022             		bclr	#3,$22(a0)
0000C1A2 6000 FECE                  		bra.w	loc_BFE6
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            Obj33_ChkLava:
0000C1A6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C1AC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C1AE 343C FFE0                  		move.w	#-$20,d2
0000C1B2 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C1B8 6700                       		beq.s	Obj33_LoadLava
0000C1BA 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C1C0 6700                       		beq.s	Obj33_LoadLava
0000C1C2 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C1C8 6700                       		beq.s	Obj33_LoadLava
0000C1CA 4E75                       		rts	
0000C1CC                            ; ===========================================================================
0000C1CC                            
0000C1CC                            Obj33_ChkLava2:
0000C1CC 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C1D2 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C1D4 343C 0020                  		move.w	#$20,d2
0000C1D8 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C1DE 6700                       		beq.s	Obj33_LoadLava
0000C1E0 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C1E6 6700                       		beq.s	Obj33_LoadLava
0000C1E8                            
0000C1E8                            Obj33_NoLava:
0000C1E8 4E75                       		rts	
0000C1EA                            ; ===========================================================================
0000C1EA                            
0000C1EA                            Obj33_LoadLava:
0000C1EA 6100 0000                  		bsr.w	SingleObjLoad
0000C1EE 6600                       		bne.s	locret_C184
0000C1F0 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C1F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1FA D569 0008                  		add.w	d2,8(a1)
0000C1FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C204 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C20A 2348 003C                  		move.l	a0,$3C(a1)
0000C20E                            
0000C20E                            locret_C184:
0000C20E 4E75                       		rts	
0000C210                            ; ===========================================================================
0000C210                            
0000C210                            loc_C186:				; XREF: loc_BF6E
0000C210 1028 0025                  		move.b	$25(a0),d0
0000C214 6700 0000                  		beq.w	loc_C218
0000C218 5500                       		subq.b	#2,d0
0000C21A 6600                       		bne.s	loc_C1AA
0000C21C 6100 B3EE                  		bsr.w	ExitPlatform
0000C220 0829 0003 0022             		btst	#3,$22(a1)
0000C226 6600                       		bne.s	loc_C1A4
0000C228 4228 0025                  		clr.b	$25(a0)
0000C22C 4E75                       		rts	
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            loc_C1A4:
0000C22E 3404                       		move.w	d4,d2
0000C230 6000 B938                  		bra.w	MvSonicOnPtfm
0000C234                            ; ===========================================================================
0000C234                            
0000C234                            loc_C1AA:
0000C234 5500                       		subq.b	#2,d0
0000C236 6600                       		bne.s	loc_C1F2
0000C238 6100 0000                  		bsr.w	SpeedToPos
0000C23C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C242 4EB9 0000 0000             		jsr	ObjHitFloor
0000C248 4A41                       		tst.w	d1
0000C24A 6A00 0000                  		bpl.w	locret_C1F0
0000C24E D368 000C                  		add.w	d1,$C(a0)
0000C252 4268 0012                  		clr.w	$12(a0)
0000C256 4228 0025                  		clr.b	$25(a0)
0000C25A 3011                       		move.w	(a1),d0
0000C25C 0240 03FF                  		andi.w	#$3FF,d0
0000C260 0C40 016A                  		cmpi.w	#$16A,d0
0000C264 6500                       		bcs.s	locret_C1F0
0000C266 3028 0030                  		move.w	$30(a0),d0
0000C26A E640                       		asr.w	#3,d0
0000C26C 3140 0010                  		move.w	d0,$10(a0)
0000C270 117C 0001 0032             		move.b	#1,$32(a0)
0000C276 4268 000E                  		clr.w	$E(a0)
0000C27A                            
0000C27A                            locret_C1F0:
0000C27A 4E75                       		rts	
0000C27C                            ; ===========================================================================
0000C27C                            
0000C27C                            loc_C1F2:
0000C27C 6100 0000                  		bsr.w	SpeedToPos
0000C280 3028 0008                  		move.w	8(a0),d0
0000C284 0240 000C                  		andi.w	#$C,d0
0000C288 6600 0000                  		bne.w	locret_C2E4
0000C28C 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C292 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C298 4268 0010                  		clr.w	$10(a0)
0000C29C 5528 0025                  		subq.b	#2,$25(a0)
0000C2A0 4E75                       		rts	
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            loc_C218:
0000C2A2 6100 0000                  		bsr.w	loc_FAC8
0000C2A6 4A44                       		tst.w	d4
0000C2A8 6700 0000                  		beq.w	locret_C2E4
0000C2AC 6B00 0000                  		bmi.w	locret_C2E4
0000C2B0 4A28 0032                  		tst.b	$32(a0)
0000C2B4 6700                       		beq.s	loc_C230
0000C2B6 6000 0000                  		bra.w	locret_C2E4
0000C2BA                            ; ===========================================================================
0000C2BA                            
0000C2BA                            loc_C230:
0000C2BA 4A40                       		tst.w	d0
0000C2BC 6700 0000                  		beq.w	locret_C2E4
0000C2C0 6B00                       		bmi.s	loc_C268
0000C2C2 0829 0000 0022             		btst	#0,$22(a1)
0000C2C8 6600 0000                  		bne.w	locret_C2E4
0000C2CC 3F00                       		move.w	d0,-(sp)
0000C2CE 7600                       		moveq	#0,d3
0000C2D0 1628 0019                  		move.b	$19(a0),d3
0000C2D4 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C2DA 301F                       		move.w	(sp)+,d0
0000C2DC 4A41                       		tst.w	d1
0000C2DE 6B00 0000                  		bmi.w	locret_C2E4
0000C2E2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C2EA 7001                       		moveq	#1,d0
0000C2EC 323C 0040                  		move.w	#$40,d1
0000C2F0 6000                       		bra.s	loc_C294
0000C2F2                            ; ===========================================================================
0000C2F2                            
0000C2F2                            loc_C268:
0000C2F2 0829 0000 0022             		btst	#0,$22(a1)
0000C2F8 6700                       		beq.s	locret_C2E4
0000C2FA 3F00                       		move.w	d0,-(sp)
0000C2FC 7600                       		moveq	#0,d3
0000C2FE 1628 0019                  		move.b	$19(a0),d3
0000C302 4643                       		not.w	d3
0000C304 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C30A 301F                       		move.w	(sp)+,d0
0000C30C 4A41                       		tst.w	d1
0000C30E 6B00                       		bmi.s	locret_C2E4
0000C310 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C318 70FF                       		moveq	#-1,d0
0000C31A 323C FFC0                  		move.w	#-$40,d1
0000C31E                            
0000C31E                            loc_C294:
0000C31E 43F8 D000                  		lea	($FFFFD000).w,a1
0000C322 D169 0008                  		add.w	d0,8(a1)
0000C326 3341 0014                  		move.w	d1,$14(a1)
0000C32A 337C 0000 0010             		move.w	#0,$10(a1)
0000C330 3F00                       		move.w	d0,-(sp)
0000C332 303C 00A7                  		move.w	#$A7,d0
0000C336 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C33C 301F                       		move.w	(sp)+,d0
0000C33E 4A28 0028                  		tst.b	$28(a0)
0000C342 6B00                       		bmi.s	locret_C2E4
0000C344 3F00                       		move.w	d0,-(sp)
0000C346 4EB9 0000 0000             		jsr	ObjHitFloor
0000C34C 301F                       		move.w	(sp)+,d0
0000C34E 0C41 0004                  		cmpi.w	#4,d1
0000C352 6F00                       		ble.s	loc_C2E0
0000C354 317C 0400 0010             		move.w	#$400,$10(a0)
0000C35A 4A40                       		tst.w	d0
0000C35C 6A00                       		bpl.s	loc_C2D8
0000C35E 4468 0010                  		neg.w	$10(a0)
0000C362                            
0000C362                            loc_C2D8:
0000C362 117C 0006 0025             		move.b	#6,$25(a0)
0000C368 6000                       		bra.s	locret_C2E4
0000C36A                            ; ===========================================================================
0000C36A                            
0000C36A                            loc_C2E0:
0000C36A D368 000C                  		add.w	d1,$C(a0)
0000C36E                            
0000C36E                            locret_C2E4:
0000C36E 4E75                       		rts	
0000C370                            ; ===========================================================================
0000C370                            ; ---------------------------------------------------------------------------
0000C370                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C370                            ; ---------------------------------------------------------------------------
0000C370                            Map_obj33:
0000C370                            	include "_maps\obj33.asm"
0000C370                            ; ---------------------------------------------------------------------------
0000C370                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C370                            ; ---------------------------------------------------------------------------
0000C370 0000                       		dc.w byte_C2EA-Map_obj33
0000C372 0000                       		dc.w byte_C2F0-Map_obj33
0000C374 01                         byte_C2EA:	dc.b 1
0000C375 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C37A 04                         byte_C2F0:	dc.b 4
0000C37B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C380 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C385 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C38A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C390 00                         		even
0000C390 00                         		even
0000C390                            
0000C390                            ; ===========================================================================
0000C390                            ; ---------------------------------------------------------------------------
0000C390                            ; Object 34 - zone title cards
0000C390                            ; ---------------------------------------------------------------------------
0000C390                            
0000C390                            Obj34:					; XREF: Obj_Index
0000C390 7000                       		moveq	#0,d0
0000C392 1028 0024                  		move.b	$24(a0),d0
0000C396 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C39A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C39E                            ; ===========================================================================
0000C39E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C3A0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C3A2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3A4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3A6                            ; ===========================================================================
0000C3A6                            
0000C3A6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C3A6 2248                       		movea.l	a0,a1
0000C3A8 7000                       		moveq	#0,d0
0000C3AA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3AE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C3B4 6600                       		bne.s	Obj34_CheckFZ
0000C3B6 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C3B8                            
0000C3B8                            Obj34_CheckFZ:
0000C3B8 3400                       		move.w	d0,d2
0000C3BA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C3C0 6600                       		bne.s	Obj34_LoadConfig
0000C3C2 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C3C4 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C3C6                            
0000C3C6                            Obj34_LoadConfig:
0000C3C6 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C3CC E948                       		lsl.w	#4,d0
0000C3CE D6C0                       		adda.w	d0,a3
0000C3D0 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C3D6 7203                       		moveq	#3,d1
0000C3D8                            
0000C3D8                            Obj34_Loop:
0000C3D8 12BC 0034                  		move.b	#$34,0(a1)
0000C3DC 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C3E0 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C3E4 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C3E8 335A 000A                  		move.w	(a2)+,$A(a1)
0000C3EC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C3F0 101A                       		move.b	(a2)+,d0
0000C3F2 6600                       		bne.s	Obj34_ActNumber
0000C3F4 1002                       		move.b	d2,d0
0000C3F6                            
0000C3F6                            Obj34_ActNumber:
0000C3F6 0C00 0007                  		cmpi.b	#7,d0
0000C3FA 6600                       		bne.s	Obj34_MakeSprite
0000C3FC D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C400 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C406 6600                       		bne.s	Obj34_MakeSprite
0000C408 5300                       		subq.b	#1,d0
0000C40A                            
0000C40A                            Obj34_MakeSprite:
0000C40A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C40E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C416 337C 8580 0002             		move.w	#$8580,2(a1)
0000C41C 137C 0078 0019             		move.b	#$78,$19(a1)
0000C422 137C 0000 0001             		move.b	#0,1(a1)
0000C428 137C 0000 0018             		move.b	#0,$18(a1)
0000C42E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C434 43E9 0040                  		lea	$40(a1),a1	; next object
0000C438 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C43C                            
0000C43C                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C43C 7210                       		moveq	#$10,d1		; set horizontal speed
0000C43E 3028 0030                  		move.w	$30(a0),d0
0000C442 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C446 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C448 6C00                       		bge.s	Obj34_Move
0000C44A 4441                       		neg.w	d1
0000C44C                            
0000C44C                            Obj34_Move:
0000C44C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C450                            
0000C450                            loc_C3C8:
0000C450 3028 0008                  		move.w	8(a0),d0
0000C454 6B00                       		bmi.s	locret_C3D8
0000C456 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C45A 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C45C 6000 0000                  		bra.w	DisplaySprite
0000C460                            ; ===========================================================================
0000C460                            
0000C460                            locret_C3D8:
0000C460 4E75                       		rts	
0000C462                            ; ===========================================================================
0000C462                            
0000C462                            Obj34_Wait:				; XREF: Obj34_Index
0000C462 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C466 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C468 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C46C 6000 0000                  		bra.w	DisplaySprite
0000C470                            ; ===========================================================================
0000C470                            
0000C470                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C470 4A28 0001                  		tst.b	1(a0)
0000C474 6A00                       		bpl.s	Obj34_ChangeArt
0000C476 7220                       		moveq	#$20,d1
0000C478 3028 0032                  		move.w	$32(a0),d0
0000C47C B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C480 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C482 6C00                       		bge.s	Obj34_Move2
0000C484 4441                       		neg.w	d1
0000C486                            
0000C486                            Obj34_Move2:
0000C486 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C48A 3028 0008                  		move.w	8(a0),d0
0000C48E 6B00                       		bmi.s	locret_C412
0000C490 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C494 6400                       		bcc.s	locret_C412	; if yes, branch
0000C496 6000 0000                  		bra.w	DisplaySprite
0000C49A                            ; ===========================================================================
0000C49A                            
0000C49A                            locret_C412:
0000C49A 4E75                       		rts	
0000C49C                            ; ===========================================================================
0000C49C                            
0000C49C                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C49C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C4A2 6600                       		bne.s	Obj34_Delete
0000C4A4 7002                       		moveq	#2,d0
0000C4A6 4EB9 0000 148A             		jsr	(LoadPLC).l	; load explosion patterns
0000C4AC 7000                       		moveq	#0,d0
0000C4AE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C4B2 0640 0015                  		addi.w	#$15,d0
0000C4B6 4EB9 0000 148A             		jsr	(LoadPLC).l	; load animal patterns
0000C4BC                            
0000C4BC                            Obj34_Delete:
0000C4BC 6000 0000                  		bra.w	DeleteObject
0000C4C0                            ; ===========================================================================
0000C4C0 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C4C2 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C4C4 00E4                       		dc.w $E4
0000C4C6 0206                       		dc.b 2,	6
0000C4C8 00EA                       		dc.w $EA
0000C4CA 0207                       		dc.b 2,	7
0000C4CC 00E0                       		dc.w $E0
0000C4CE 020A                       		dc.b 2,	$A
0000C4D0                            ; ---------------------------------------------------------------------------
0000C4D0                            ; Title	card configuration data
0000C4D0                            ; Format:
0000C4D0                            ; 4 bytes per item (YYYY XXXX)
0000C4D0                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C4D0                            ; ---------------------------------------------------------------------------
0000C4D0 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C4E0 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C4F0 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C500 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C510 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C520 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C530 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C540                            ; ===========================================================================
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            
0000C540                            Obj39:					; XREF: Obj_Index
0000C540 7000                       		moveq	#0,d0
0000C542 1028 0024                  		move.b	$24(a0),d0
0000C546 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C54A 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C54E                            ; ===========================================================================
0000C54E 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C550 0000                       		dc.w loc_C50C-Obj39_Index
0000C552 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C554                            ; ===========================================================================
0000C554                            
0000C554                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C554 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C558 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C55A 4E75                       		rts	
0000C55C                            ; ===========================================================================
0000C55C                            
0000C55C                            Obj39_Main:
0000C55C 5428 0024                  		addq.b	#2,$24(a0)
0000C560 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C566 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C56C 6700                       		beq.s	loc_C4EC	; if not, branch
0000C56E 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C574                            
0000C574                            loc_C4EC:
0000C574 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C57A 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C582 317C 855E 0002             		move.w	#$855E,2(a0)
0000C588 117C 0000 0001             		move.b	#0,1(a0)
0000C58E 117C 0000 0018             		move.b	#0,$18(a0)
0000C594                            
0000C594                            loc_C50C:				; XREF: Obj39_Index
0000C594 7210                       		moveq	#$10,d1		; set horizontal speed
0000C596 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C59C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C59E 6500                       		bcs.s	Obj39_Move
0000C5A0 4441                       		neg.w	d1
0000C5A2                            
0000C5A2                            Obj39_Move:
0000C5A2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5A6 6000 0000                  		bra.w	DisplaySprite
0000C5AA                            ; ===========================================================================
0000C5AA                            
0000C5AA                            Obj39_SetWait:				; XREF: Obj39_Main
0000C5AA 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C5B0 5428 0024                  		addq.b	#2,$24(a0)
0000C5B4 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000C5BA 4A38 FE18                  		tst.b	($FFFFFE18).w
0000C5BE 6600                       		bne.s	@nocontinues
0000C5C0 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000C5C6                            
0000C5C6                            	@nocontinues:
0000C5C6 4E75                       		rts	
0000C5C8                            ; ===========================================================================
0000C5C8                            
0000C5C8                            Obj39_Wait:				; XREF: Obj39_Index
0000C5C8 1038 F605                  		move.b	($FFFFF605).w,d0
0000C5CC 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C5D0 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C5D2 0828 0000 001A             		btst	#0,$1A(a0)
0000C5D8 6600                       		bne.s	Obj39_Display
0000C5DA 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C5DE 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C5E0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C5E4 6000 0000                  		bra.w	DisplaySprite
0000C5E8                            ; ===========================================================================
0000C5E8                            
0000C5E8                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C5E8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C5EC 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C5EE 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C5F4 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C5F8 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C5FA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C600 6000                       		bra.s	Obj39_Display
0000C602                            ; ===========================================================================
0000C602                            
0000C602                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C602 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C608                            
0000C608                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C608 6000 0000                  		bra.w	DisplaySprite
0000C60C                            ; ===========================================================================
0000C60C                            ; ---------------------------------------------------------------------------
0000C60C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C60C                            ; ---------------------------------------------------------------------------
0000C60C                            
0000C60C                            Obj3A:					; XREF: Obj_Index
0000C60C 7000                       		moveq	#0,d0
0000C60E 1028 0024                  		move.b	$24(a0),d0
0000C612 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C616 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C61A                            ; ===========================================================================
0000C61A 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C61C 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C61E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C620 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C622 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C624 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C626 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C628 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C62A 0000                       		dc.w loc_C766-Obj3A_Index
0000C62C                            ; ===========================================================================
0000C62C                            
0000C62C                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C62C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C630 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C632 4E75                       		rts	
0000C634                            ; ===========================================================================
0000C634                            
0000C634                            Obj3A_Main:
0000C634 2248                       		movea.l	a0,a1
0000C636 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C63C 7206                       		moveq	#6,d1
0000C63E                            
0000C63E                            Obj3A_Loop:
0000C63E 12BC 003A                  		move.b	#$3A,0(a1)
0000C642 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C646 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C64A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C64E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C652 135A 0024                  		move.b	(a2)+,$24(a1)
0000C656 101A                       		move.b	(a2)+,d0
0000C658 0C00 0006                  		cmpi.b	#6,d0
0000C65C 6600                       		bne.s	loc_C5CA
0000C65E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C662                            
0000C662                            loc_C5CA:
0000C662 1340 001A                  		move.b	d0,$1A(a1)
0000C666 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C66E 337C 8580 0002             		move.w	#$8580,2(a1)
0000C674 137C 0000 0001             		move.b	#0,1(a1)
0000C67A 43E9 0040                  		lea	$40(a1),a1
0000C67E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C682                            
0000C682                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C682 7210                       		moveq	#$10,d1		; set horizontal speed
0000C684 3028 0030                  		move.w	$30(a0),d0
0000C688 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C68C 6700                       		beq.s	loc_C61A	; if yes, branch
0000C68E 6C00                       		bge.s	Obj3A_Move
0000C690 4441                       		neg.w	d1
0000C692                            
0000C692                            Obj3A_Move:
0000C692 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C696                            
0000C696                            loc_C5FE:				; XREF: loc_C61A
0000C696 3028 0008                  		move.w	8(a0),d0
0000C69A 6B00                       		bmi.s	locret_C60E
0000C69C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6A0 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C6A2 6000 0000                  		bra.w	DisplaySprite
0000C6A6                            ; ===========================================================================
0000C6A6                            
0000C6A6                            locret_C60E:
0000C6A6 4E75                       		rts	
0000C6A8                            ; ===========================================================================
0000C6A8                            
0000C6A8                            loc_C610:				; XREF: loc_C61A
0000C6A8 117C 000E 0024             		move.b	#$E,$24(a0)
0000C6AE 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C6B2                            ; ===========================================================================
0000C6B2                            
0000C6B2                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C6B2 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C6B8 67EE                       		beq.s	loc_C610
0000C6BA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6C0 66D4                       		bne.s	loc_C5FE
0000C6C2 5428 0024                  		addq.b	#2,$24(a0)
0000C6C6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C6CC                            
0000C6CC                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C6CC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C6D0 6600                       		bne.s	Obj3A_Display
0000C6D2 5428 0024                  		addq.b	#2,$24(a0)
0000C6D6                            
0000C6D6                            Obj3A_Display:
0000C6D6 6000 0000                  		bra.w	DisplaySprite
0000C6DA                            ; ===========================================================================
0000C6DA                            
0000C6DA                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C6DA 6100 0000                  		bsr.w	DisplaySprite
0000C6DE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C6E4 7000                       		moveq	#0,d0
0000C6E6 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C6EA 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C6EC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C6F0 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C6F6                            
0000C6F6                            Obj3A_RingBonus:
0000C6F6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C6FA 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C6FC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C700 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C706                            
0000C706                            Obj3A_ChkBonus:
0000C706 4A40                       		tst.w	d0		; is there any bonus?
0000C708 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C70A 303C 00C5                  		move.w	#$C5,d0
0000C70E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C714 5428 0024                  		addq.b	#2,$24(a0)
0000C718 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C71E 6600                       		bne.s	Obj3A_SetDelay
0000C720 5828 0024                  		addq.b	#4,$24(a0)
0000C724                            
0000C724                            Obj3A_SetDelay:
0000C724 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C72A                            
0000C72A                            locret_C692:
0000C72A 4E75                       		rts	
0000C72C                            ; ===========================================================================
0000C72C                            
0000C72C                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C72C 4EB9 0000 0000             		jsr	AddPoints
0000C732 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C736 0200 0003                  		andi.b	#3,d0
0000C73A 66EE                       		bne.s	locret_C692
0000C73C 303C 00CD                  		move.w	#$CD,d0
0000C740 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C746 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C74A 0240 0007                  		andi.w	#7,d0
0000C74E E748                       		lsl.w	#3,d0
0000C750 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C754 0241 0003                  		andi.w	#3,d1
0000C758 D241                       		add.w	d1,d1
0000C75A D041                       		add.w	d1,d0
0000C75C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C760 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C764 4A40                       		tst.w	d0
0000C766 6600                       		bne.s	Obj3A_ChkSS
0000C768 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000C76E 6000                       		bra.s	Obj3A_Display2
0000C770                            ; ===========================================================================
0000C770                            
0000C770                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C770 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C774 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C778 6700                       		beq.s	loc_C6EA	; if not, branch
0000C77A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C780 6000                       		bra.s	Obj3A_Display2
0000C782                            ; ===========================================================================
0000C782                            
0000C782                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C782 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C788                            
0000C788                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C788 6000 0000                  		bra.w	DisplaySprite
0000C78C                            ; ===========================================================================
0000C78C                            ; ---------------------------------------------------------------------------
0000C78C                            ; Level	order array
0000C78C                            ; ---------------------------------------------------------------------------
0000C78C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C7BC                            		even
0000C7BC                            ; ===========================================================================
0000C7BC                            
0000C7BC                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C7BC 7220                       		moveq	#$20,d1		; set horizontal speed
0000C7BE 3028 0032                  		move.w	$32(a0),d0
0000C7C2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C7C6 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C7C8 6C00                       		bge.s	Obj3A_Move2
0000C7CA 4441                       		neg.w	d1
0000C7CC                            
0000C7CC                            Obj3A_Move2:
0000C7CC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C7D0 3028 0008                  		move.w	8(a0),d0
0000C7D4 6B00                       		bmi.s	locret_C748
0000C7D6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C7DA 6400                       		bcc.s	locret_C748	; if yes, branch
0000C7DC 6000 0000                  		bra.w	DisplaySprite
0000C7E0                            ; ===========================================================================
0000C7E0                            
0000C7E0                            locret_C748:
0000C7E0 4E75                       		rts	
0000C7E2                            ; ===========================================================================
0000C7E2                            
0000C7E2                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C7E2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C7E8 6600 0000                  		bne.w	DeleteObject
0000C7EC 5428 0024                  		addq.b	#2,$24(a0)
0000C7F0 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C7F4 303C 008D                  		move.w	#$8D,d0
0000C7F8 4EF9 0000 125C             		jmp	(PlaySound).l	; play FZ music
0000C7FE                            ; ===========================================================================
0000C7FE                            
0000C7FE                            loc_C766:				; XREF: Obj3A_Index
0000C7FE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C802 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C808 6700 0000                  		beq.w	DeleteObject
0000C80C 4E75                       		rts	
0000C80E                            ; ===========================================================================
0000C80E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C814 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C816 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C81C 0201                       		dc.b 2,	1
0000C81E 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C824 0206                       		dc.b 2,	6
0000C826 0520 0120 00EC             		dc.w $520, $120, $EC
0000C82C 0202                       		dc.b 2,	2
0000C82E 0540 0120 00FC             		dc.w $540, $120, $FC
0000C834 0203                       		dc.b 2,	3
0000C836 0560 0120 010C             		dc.w $560, $120, $10C
0000C83C 0204                       		dc.b 2,	4
0000C83E 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C844 0205                       		dc.b 2,	5
0000C846                            ; ===========================================================================
0000C846                            ; ---------------------------------------------------------------------------
0000C846                            ; Object 7E - special stage results screen
0000C846                            ; ---------------------------------------------------------------------------
0000C846                            
0000C846                            Obj7E:					; XREF: Obj_Index
0000C846 7000                       		moveq	#0,d0
0000C848 1028 0024                  		move.b	$24(a0),d0
0000C84C 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C850 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C854                            ; ===========================================================================
0000C854 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C856 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C858 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C85A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C85C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C85E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C860 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C862 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C864 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C866 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C868 0000                       		dc.w loc_C91A-Obj7E_Index
0000C86A                            ; ===========================================================================
0000C86A                            
0000C86A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C86A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C86E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C870 4E75                       		rts	
0000C872                            ; ===========================================================================
0000C872                            
0000C872                            Obj7E_Main:
0000C872 2248                       		movea.l	a0,a1
0000C874 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C87A 7203                       		moveq	#3,d1
0000C87C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C882 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C884 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C886                            
0000C886                            Obj7E_Loop:
0000C886 12BC 007E                  		move.b	#$7E,0(a1)
0000C88A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C88E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C892 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C896 135A 0024                  		move.b	(a2)+,$24(a1)
0000C89A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C89E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C8A6 337C A580 0002             		move.w	#$A580,2(a1)
0000C8AC 137C 0000 0001             		move.b	#0,1(a1)
0000C8B2 43E9 0040                  		lea	$40(a1),a1
0000C8B6 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C8BA                            
0000C8BA 7007                       		moveq	#7,d0
0000C8BC 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C8C0 6700                       		beq.s	loc_C842
0000C8C2 7000                       		moveq	#0,d0
0000C8C4 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C8C8 6600                       		bne.s	loc_C842	; if not, branch
0000C8CA 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C8CC 317C 0018 0008             		move.w	#$18,8(a0)
0000C8D2 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C8D8                            
0000C8D8                            loc_C842:
0000C8D8 1140 001A                  		move.b	d0,$1A(a0)
0000C8DC                            
0000C8DC                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C8DC 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8DE 3028 0030                  		move.w	$30(a0),d0
0000C8E2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C8E6 6700                       		beq.s	loc_C86C	; if yes, branch
0000C8E8 6C00                       		bge.s	Obj7E_Move
0000C8EA 4441                       		neg.w	d1
0000C8EC                            
0000C8EC                            Obj7E_Move:
0000C8EC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8F0                            
0000C8F0                            loc_C85A:				; XREF: loc_C86C
0000C8F0 3028 0008                  		move.w	8(a0),d0
0000C8F4 6B00                       		bmi.s	locret_C86A
0000C8F6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8FA 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C8FC 6000 0000                  		bra.w	DisplaySprite
0000C900                            ; ===========================================================================
0000C900                            
0000C900                            locret_C86A:
0000C900 4E75                       		rts	
0000C902                            ; ===========================================================================
0000C902                            
0000C902                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C902 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C908 66E6                       		bne.s	loc_C85A
0000C90A 5428 0024                  		addq.b	#2,$24(a0)
0000C90E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C914 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C91A                            
0000C91A                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C91A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C91E 6600                       		bne.s	Obj7E_Display
0000C920 5428 0024                  		addq.b	#2,$24(a0)
0000C924                            
0000C924                            Obj7E_Display:
0000C924 6000 0000                  		bra.w	DisplaySprite
0000C928                            ; ===========================================================================
0000C928                            
0000C928                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C928 6100 0000                  		bsr.w	DisplaySprite
0000C92C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C932 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C936 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C938 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C93E 700A                       		moveq	#10,d0		; add 10 to score
0000C940 4EB9 0000 0000             		jsr	AddPoints
0000C946 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C94A 0200 0003                  		andi.b	#3,d0
0000C94E 6600                       		bne.s	locret_C8EA
0000C950 303C 00CD                  		move.w	#$CD,d0
0000C954 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C95A 303C 00C5                  		move.w	#$C5,d0
0000C95E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C964 5428 0024                  		addq.b	#2,$24(a0)
0000C968 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C96E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C974 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C976 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C97C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C980                            
0000C980                            locret_C8EA:
0000C980 4E75                       		rts	
0000C982                            ; ===========================================================================
0000C982                            
0000C982                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C982 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C988 6000 0000                  		bra.w	DisplaySprite
0000C98C                            ; ===========================================================================
0000C98C                            
0000C98C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C98C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C992 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C998 303C 00BF                  		move.w	#$BF,d0
0000C99C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play continues music
0000C9A2 5428 0024                  		addq.b	#2,$24(a0)
0000C9A6 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C9AC 6000 0000                  		bra.w	DisplaySprite
0000C9B0                            ; ===========================================================================
0000C9B0                            
0000C9B0                            loc_C91A:				; XREF: Obj7E_Index
0000C9B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9B4 0200 000F                  		andi.b	#$F,d0
0000C9B8 6600                       		bne.s	Obj7E_Display2
0000C9BA 0868 0000 001A             		bchg	#0,$1A(a0)
0000C9C0                            
0000C9C0                            Obj7E_Display2:
0000C9C0 6000 0000                  		bra.w	DisplaySprite
0000C9C4                            ; ===========================================================================
0000C9C4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C9CA 0200                       		dc.b 2,	0		; rountine number, frame number
0000C9CC 0320 0120 0118             		dc.w $320, $120, $118
0000C9D2 0201                       		dc.b 2,	1
0000C9D4 0360 0120 0128             		dc.w $360, $120, $128
0000C9DA 0202                       		dc.b 2,	2
0000C9DC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000C9E2 0203                       		dc.b 2,	3
0000C9E4 03A0 0120 0138             		dc.w $3A0, $120, $138
0000C9EA 0206                       		dc.b 2,	6
0000C9EC                            ; ===========================================================================
0000C9EC                            ; ---------------------------------------------------------------------------
0000C9EC                            ; Object 7F - chaos emeralds from the special stage results screen
0000C9EC                            ; ---------------------------------------------------------------------------
0000C9EC                            
0000C9EC                            Obj7F:					; XREF: Obj_Index
0000C9EC 7000                       		moveq	#0,d0
0000C9EE 1028 0024                  		move.b	$24(a0),d0
0000C9F2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000C9F6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000C9FA                            ; ===========================================================================
0000C9FA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000C9FC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000C9FE                            
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            ; X-axis positions for chaos emeralds
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CA0A                            ; ===========================================================================
0000CA0A                            
0000CA0A                            Obj7F_Main:				; XREF: Obj7F_Index
0000CA0A 2248                       		movea.l	a0,a1
0000CA0C 45F9 0000 C9FE             		lea	(Obj7F_PosData).l,a2
0000CA12 7400                       		moveq	#0,d2
0000CA14 7200                       		moveq	#0,d1
0000CA16 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CA1A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CA1C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CA20                            
0000CA20                            Obj7F_Loop:
0000CA20 12BC 007F                  		move.b	#$7F,0(a1)
0000CA24 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CA28 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CA2E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CA32 1633 2000                  		move.b	(a3,d2.w),d3
0000CA36 1343 001A                  		move.b	d3,$1A(a1)
0000CA3A 1343 001C                  		move.b	d3,$1C(a1)
0000CA3E 5202                       		addq.b	#1,d2
0000CA40 5429 0024                  		addq.b	#2,$24(a1)
0000CA44 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CA4C 337C 8541 0002             		move.w	#$8541,2(a1)
0000CA52 137C 0000 0001             		move.b	#0,1(a1)
0000CA58 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA5C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CA60                            
0000CA60                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CA60 1028 001A                  		move.b	$1A(a0),d0
0000CA64 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CA6A 0C00 0006                  		cmpi.b	#6,d0
0000CA6E 6600                       		bne.s	Obj7F_Display
0000CA70 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CA76                            
0000CA76                            Obj7F_Display:
0000CA76 6000 0000                  		bra.w	DisplaySprite
0000CA7A                            ; ===========================================================================
0000CA7A                            ; ---------------------------------------------------------------------------
0000CA7A                            ; Sprite mappings - zone title cards
0000CA7A                            ; ---------------------------------------------------------------------------
0000CA7A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CA7C 0000                       		dc.w byte_CA2C-Map_obj34
0000CA7E 0000                       		dc.w byte_CA5A-Map_obj34
0000CA80 0000                       		dc.w byte_CA7A-Map_obj34
0000CA82 0000                       		dc.w byte_CAA8-Map_obj34
0000CA84 0000                       		dc.w byte_CADC-Map_obj34
0000CA86 0000                       		dc.w byte_CB10-Map_obj34
0000CA88 0000                       		dc.w byte_CB26-Map_obj34
0000CA8A 0000                       		dc.w byte_CB31-Map_obj34
0000CA8C 0000                       		dc.w byte_CB3C-Map_obj34
0000CA8E 0000                       		dc.w byte_CB47-Map_obj34
0000CA90 0000                       		dc.w byte_CB8A-Map_obj34
0000CA92 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000CA93 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000CA98 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000CA9D F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000CAA2 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000CAA7 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CAAC F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000CAB1 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000CAB6 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000CABB F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000CAC0 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000CAC1 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000CAC6 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000CACB F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000CAD0 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000CAD5 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000CADA F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000CADF F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000CAE4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CAE9 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000CAEE 06                         byte_CA5A:	dc.b 6			; MARBLE
0000CAEF F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000CAF4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CAF9 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000CAFE F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000CB03 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000CB08 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000CB0D 00                         		dc.b 0
0000CB0E 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000CB0F F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000CB14 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000CB19 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000CB1E F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000CB23 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000CB28 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000CB2D F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000CB32 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000CB37 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000CB3C 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000CB3D F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CB42 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000CB47 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CB4C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CB51 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000CB56 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000CB5B F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000CB60 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000CB65 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000CB6A F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000CB6F 00                         		dc.b 0
0000CB70 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000CB71 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CB76 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000CB7B F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CB80 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000CB85 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000CB8A F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000CB8F F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000CB94 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000CB99 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000CB9E F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000CBA3 00                         		dc.b 0
0000CBA4 04                         byte_CB10:	dc.b 4			; ZONE
0000CBA5 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CBAA F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CBAF F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CBB4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CBB9 00                         		dc.b 0
0000CBBA 02                         byte_CB26:	dc.b 2			; ACT 1
0000CBBB 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CBC0 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CBC5 02                         byte_CB31:	dc.b 2			; ACT 2
0000CBC6 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CBCB F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CBD0 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CBD1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CBD6 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CBDB 0D                         byte_CB47:	dc.b $D			; Oval
0000CBDC E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CBE1 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CBE6 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CBEB F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CBF0 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CBF5 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CBFA 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CBFF FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CC04 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CC09 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CC0E FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CC13 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CC18 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CC1D 00                         		dc.b 0
0000CC1E 05                         byte_CB8A:	dc.b 5			; FINAL
0000CC1F F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CC24 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CC29 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CC2E F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CC33 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CC38                            		even
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            Map_obj39:
0000CC38                            	include "_maps\obj39.asm"
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38 0000                       		dc.w byte_CBAC-Map_obj39
0000CC3A 0000                       		dc.w byte_CBB7-Map_obj39
0000CC3C 0000                       		dc.w byte_CBC2-Map_obj39
0000CC3E 0000                       		dc.w byte_CBCD-Map_obj39
0000CC40 02                         byte_CBAC:	dc.b 2
0000CC41 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CC46 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CC4B 02                         byte_CBB7:	dc.b 2
0000CC4C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CC51 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CC56 02                         byte_CBC2:	dc.b 2
0000CC57 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CC5C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CC61 02                         byte_CBCD:	dc.b 2
0000CC62 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CC67 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CC6C                            		even
0000CC6C                            		even
0000CC6C                            
0000CC6C                            ; ---------------------------------------------------------------------------
0000CC6C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CC6C                            ; ---------------------------------------------------------------------------
0000CC6C 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CC6E 0000                       		dc.w byte_CC13-Map_obj3A
0000CC70 0000                       		dc.w byte_CC32-Map_obj3A
0000CC72 0000                       		dc.w byte_CC51-Map_obj3A
0000CC74 0000                       		dc.w byte_CC75-Map_obj3A
0000CC76 FF6F                       		dc.w byte_CB47-Map_obj3A
0000CC78 FF4E                       		dc.w byte_CB26-Map_obj3A
0000CC7A FF59                       		dc.w byte_CB31-Map_obj3A
0000CC7C FF64                       		dc.w byte_CB3C-Map_obj3A
0000CC7E 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000CC7F F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000CC84 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000CC89 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000CC8E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000CC93 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000CC98 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000CC9D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000CCA2 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000CCA7 06                         byte_CC13:	dc.b 6			; PASSED
0000CCA8 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CCAD F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CCB2 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CCB7 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CCBC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CCC1 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CCC6 06                         byte_CC32:	dc.b 6			; SCORE
0000CCC7 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CCCC F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CCD1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CCD6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CCDB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CCE0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CCE5 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CCE6 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CCEB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CCF0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CCF5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CCFA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CCFF F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CD04 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CD09 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CD0A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CD0F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CD14 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CD19 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CD1E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CD23 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CD28 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CD2E 00                         		even
0000CD2E                            ; ---------------------------------------------------------------------------
0000CD2E                            ; Sprite mappings - special stage results screen
0000CD2E                            ; ---------------------------------------------------------------------------
0000CD2E 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CD30 0000                       		dc.w byte_CCEE-Map_obj7E
0000CD32 0000                       		dc.w byte_CD0D-Map_obj7E
0000CD34 FEAD                       		dc.w byte_CB47-Map_obj7E
0000CD36 0000                       		dc.w byte_CD31-Map_obj7E
0000CD38 0000                       		dc.w byte_CD46-Map_obj7E
0000CD3A 0000                       		dc.w byte_CD5B-Map_obj7E
0000CD3C 0000                       		dc.w byte_CD6B-Map_obj7E
0000CD3E 0000                       		dc.w byte_CDA8-Map_obj7E
0000CD40 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CD41 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CD46 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CD4B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CD50 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CD55 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CD5A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CD5F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CD64 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CD69 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CD6E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CD73 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CD78 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CD7D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CD82 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CD83 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CD88 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CD8D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CD92 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CD97 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CD9C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CDA1 07                         byte_CD0D:	dc.b 7
0000CDA2 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CDA7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDAC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDB1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDB6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDBB F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CDC0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDC5 04                         byte_CD31:	dc.b 4
0000CDC6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CDCB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CDD0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CDD5 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CDDA 04                         byte_CD46:	dc.b 4
0000CDDB F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CDE0 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CDE5 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CDEA F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CDEF 03                         byte_CD5B:	dc.b 3
0000CDF0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CDF5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CDFA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CDFF 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CE00 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CE05 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CE0A F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CE0F F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CE14 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CE19 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CE1E F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CE23 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CE28 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CE2D F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CE32 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CE37 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CE3C 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CE3D F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CE42 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CE47 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CE4C F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CE51 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CE56 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CE5B F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CE60 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CE65 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CE6A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CE6F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CE74 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CE79 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CE7E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CE83 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CE88                            		even
0000CE88                            ; ---------------------------------------------------------------------------
0000CE88                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CE88                            ; ---------------------------------------------------------------------------
0000CE88                            Map_obj7F:
0000CE88                            	include "_maps\obj7F.asm"
0000CE88                            ; ---------------------------------------------------------------------------
0000CE88                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CE88                            ; ---------------------------------------------------------------------------
0000CE88 0000                       		dc.w byte_CE02-Map_obj7F
0000CE8A 0000                       		dc.w byte_CE08-Map_obj7F
0000CE8C 0000                       		dc.w byte_CE0E-Map_obj7F
0000CE8E 0000                       		dc.w byte_CE14-Map_obj7F
0000CE90 0000                       		dc.w byte_CE1A-Map_obj7F
0000CE92 0000                       		dc.w byte_CE20-Map_obj7F
0000CE94 0000                       		dc.w byte_CE26-Map_obj7F
0000CE96 01                         byte_CE02:	dc.b 1
0000CE97 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000CE9C 01                         byte_CE08:	dc.b 1
0000CE9D F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000CEA2 01                         byte_CE0E:	dc.b 1
0000CEA3 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CEA8 01                         byte_CE14:	dc.b 1
0000CEA9 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CEAE 01                         byte_CE1A:	dc.b 1
0000CEAF F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000CEB4 01                         byte_CE20:	dc.b 1
0000CEB5 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000CEBA 00                         byte_CE26:	dc.b 0			; Blank frame
0000CEBC 00                         		even
0000CEBC 00                         		even
0000CEBC                            
0000CEBC                            ; ===========================================================================
0000CEBC                            ; ---------------------------------------------------------------------------
0000CEBC                            ; Object 36 - spikes
0000CEBC                            ; ---------------------------------------------------------------------------
0000CEBC                            
0000CEBC                            Obj36:					; XREF: Obj_Index
0000CEBC 7000                       		moveq	#0,d0
0000CEBE 1028 0024                  		move.b	$24(a0),d0
0000CEC2 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CEC6 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CECA                            ; ===========================================================================
0000CECA 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CECC 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CECE                            
0000CECE 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CED0 0110                       		dc.b 1,	$10
0000CED2 0204                       		dc.b 2,	4
0000CED4 031C                       		dc.b 3,	$1C
0000CED6 0440                       		dc.b 4,	$40
0000CED8 0510                       		dc.b 5,	$10
0000CEDA                            ; ===========================================================================
0000CEDA                            
0000CEDA                            Obj36_Main:				; XREF: Obj36_Index
0000CEDA 5428 0024                  		addq.b	#2,$24(a0)
0000CEDE 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CEE6 317C 051B 0002             		move.w	#$51B,2(a0)
0000CEEC 0028 0004 0001             		ori.b	#4,1(a0)
0000CEF2 117C 0004 0018             		move.b	#4,$18(a0)
0000CEF8 1028 0028                  		move.b	$28(a0),d0
0000CEFC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CF02 0240 00F0                  		andi.w	#$F0,d0
0000CF06 43F9 0000 CECE             		lea	(Obj36_Var).l,a1
0000CF0C E648                       		lsr.w	#3,d0
0000CF0E D2C0                       		adda.w	d0,a1
0000CF10 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CF14 1159 0019                  		move.b	(a1)+,$19(a0)
0000CF18 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CF1E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CF24                            
0000CF24                            Obj36_Solid:				; XREF: Obj36_Index
0000CF24 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CF28 343C 0004                  		move.w	#4,d2
0000CF2C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CF32 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CF34 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CF3A 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CF3C 343C 0014                  		move.w	#$14,d2
0000CF40                            
0000CF40                            ; Spikes types $1x and $5x face	sideways
0000CF40                            
0000CF40                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CF40 323C 001B                  		move.w	#$1B,d1
0000CF44 3602                       		move.w	d2,d3
0000CF46 5243                       		addq.w	#1,d3
0000CF48 3828 0008                  		move.w	8(a0),d4
0000CF4C 6100 0000                  		bsr.w	SolidObject
0000CF50 0828 0003 0022             		btst	#3,$22(a0)
0000CF56 6600                       		bne.s	Obj36_Display
0000CF58 0C44 0001                  		cmpi.w	#1,d4
0000CF5C 6700                       		beq.s	Obj36_Hurt
0000CF5E 6000                       		bra.s	Obj36_Display
0000CF60                            ; ===========================================================================
0000CF60                            
0000CF60                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000CF60                            
0000CF60                            Obj36_Upright:				; XREF: Obj36_Solid
0000CF60 7200                       		moveq	#0,d1
0000CF62 1228 0019                  		move.b	$19(a0),d1
0000CF66 0641 000B                  		addi.w	#$B,d1
0000CF6A 343C 0010                  		move.w	#$10,d2
0000CF6E 363C 0011                  		move.w	#$11,d3
0000CF72 3828 0008                  		move.w	8(a0),d4
0000CF76 6100 0000                  		bsr.w	SolidObject
0000CF7A 0828 0003 0022             		btst	#3,$22(a0)
0000CF80 6600                       		bne.s	Obj36_Hurt
0000CF82 4A44                       		tst.w	d4
0000CF84 6A00                       		bpl.s	Obj36_Display
0000CF86                            
0000CF86                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000CF86 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000CF8A 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000CF8C 2F08                       		move.l	a0,-(sp)
0000CF8E 2448                       		movea.l	a0,a2
0000CF90 41F8 D000                  		lea	($FFFFD000).w,a0
0000CF94 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CF9A 6400                       		bcc.s	loc_CF20
0000CF9C 2628 000C                  		move.l	$C(a0),d3
0000CFA0 3028 0012                  		move.w	$12(a0),d0
0000CFA4 48C0                       		ext.l	d0
0000CFA6 E180                       		asl.l	#8,d0
0000CFA8 9680                       		sub.l	d0,d3
0000CFAA 2143 000C                  		move.l	d3,$C(a0)
0000CFAE 4EB9 0000 0000             		jsr	HurtSonic
0000CFB4                            
0000CFB4                            loc_CF20:
0000CFB4 205F                       		movea.l	(sp)+,a0
0000CFB6 6000                       		bra.s	Obj36_Display
0000CFB8                            
0000CFB8                            Obj36_PreDisplay:
0000CFB8 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000CFBE 6E00                       		bgt.s	Obj36_Display
0000CFC0 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000CFC6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000CFCC                            
0000CFCC                            Obj36_Display:
0000CFCC 6100 0000                  		bsr.w	DisplaySprite
0000CFD0 3028 0030                  		move.w	$30(a0),d0
0000CFD4 0240 FF80                  		andi.w	#$FF80,d0
0000CFD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CFDC 0441 0080                  		subi.w	#$80,d1
0000CFE0 0241 FF80                  		andi.w	#$FF80,d1
0000CFE4 9041                       		sub.w	d1,d0
0000CFE6 0C40 0280                  		cmpi.w	#$280,d0
0000CFEA 6200 0000                  		bhi.w	DeleteObject
0000CFEE 4E75                       		rts	
0000CFF0                            ; ===========================================================================
0000CFF0                            
0000CFF0                            Obj36_Type0x:				; XREF: Obj36_Solid
0000CFF0 7000                       		moveq	#0,d0
0000CFF2 1028 0028                  		move.b	$28(a0),d0
0000CFF6 D040                       		add.w	d0,d0
0000CFF8 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000CFFC 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D000                            ; ===========================================================================
0000D000 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D002 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D004 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D006                            ; ===========================================================================
0000D006                            
0000D006                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D006 4E75                       		rts			; don't move the object
0000D008                            ; ===========================================================================
0000D008                            
0000D008                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D008 6100 0000                  		bsr.w	Obj36_Wait
0000D00C 7000                       		moveq	#0,d0
0000D00E 1028 0034                  		move.b	$34(a0),d0
0000D012 D068 0032                  		add.w	$32(a0),d0
0000D016 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D01A 4E75                       		rts	
0000D01C                            ; ===========================================================================
0000D01C                            
0000D01C                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D01C 6100 0000                  		bsr.w	Obj36_Wait
0000D020 7000                       		moveq	#0,d0
0000D022 1028 0034                  		move.b	$34(a0),d0
0000D026 D068 0030                  		add.w	$30(a0),d0
0000D02A 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D02E 4E75                       		rts	
0000D030                            ; ===========================================================================
0000D030                            
0000D030                            Obj36_Wait:
0000D030 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D034 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D036 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D03A 6600                       		bne.s	locret_CFE6
0000D03C 4A28 0001                  		tst.b	1(a0)
0000D040 6A00                       		bpl.s	locret_CFE6
0000D042 303C 00B6                  		move.w	#$B6,d0
0000D046 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D04C 6000                       		bra.s	locret_CFE6
0000D04E                            ; ===========================================================================
0000D04E                            
0000D04E                            loc_CFA4:
0000D04E 4A68 0036                  		tst.w	$36(a0)
0000D052 6700                       		beq.s	loc_CFC6
0000D054 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D05A 6400                       		bcc.s	locret_CFE6
0000D05C 317C 0000 0034             		move.w	#0,$34(a0)
0000D062 317C 0000 0036             		move.w	#0,$36(a0)
0000D068 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D06E 6000                       		bra.s	locret_CFE6
0000D070                            ; ===========================================================================
0000D070                            
0000D070                            loc_CFC6:
0000D070 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D076 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D07C 6500                       		bcs.s	locret_CFE6
0000D07E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D084 317C 0001 0036             		move.w	#1,$36(a0)
0000D08A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D090                            
0000D090                            locret_CFE6:
0000D090 4E75                       		rts	
0000D092                            ; ===========================================================================
0000D092                            ; ---------------------------------------------------------------------------
0000D092                            ; Sprite mappings - spikes
0000D092                            ; ---------------------------------------------------------------------------
0000D092                            Map_obj36:
0000D092                            	include "_maps\obj36.asm"
0000D092                            ; ---------------------------------------------------------------------------
0000D092                            ; Sprite mappings - spikes
0000D092                            ; ---------------------------------------------------------------------------
0000D092 0000                       		dc.w byte_CFF4-Map_obj36
0000D094 0000                       		dc.w byte_D004-Map_obj36
0000D096 0000                       		dc.w byte_D014-Map_obj36
0000D098 0000                       		dc.w byte_D01A-Map_obj36
0000D09A 0000                       		dc.w byte_D02A-Map_obj36
0000D09C 0000                       		dc.w byte_D049-Map_obj36
0000D09E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D09F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D0A4 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0A9 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D0AE 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D0AF EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D0B4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D0B9 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D0BE 01                         byte_D014:	dc.b 1			; 1 spike
0000D0BF F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0C4 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D0C5 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D0CA F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0CF F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D0D4 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D0D5 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D0DA F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D0DF F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D0E4 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D0E9 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D0EE F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D0F3 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D0F4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D0FA 00                         		even
0000D0FA 00                         		even
0000D0FA                            
0000D0FA                            ; ===========================================================================
0000D0FA                            ; ---------------------------------------------------------------------------
0000D0FA                            ; Object 3B - purple rock (GHZ)
0000D0FA                            ; ---------------------------------------------------------------------------
0000D0FA                            
0000D0FA                            Obj3B:					; XREF: Obj_Index
0000D0FA 7000                       		moveq	#0,d0
0000D0FC 1028 0024                  		move.b	$24(a0),d0
0000D100 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D104 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D108                            ; ===========================================================================
0000D108 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D10A 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D10C                            ; ===========================================================================
0000D10C                            
0000D10C                            Obj3B_Main:				; XREF: Obj3B_Index
0000D10C 5428 0024                  		addq.b	#2,$24(a0)
0000D110 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D118 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D11E 117C 0004 0001             		move.b	#4,1(a0)
0000D124 117C 0013 0019             		move.b	#$13,$19(a0)
0000D12A 117C 0004 0018             		move.b	#4,$18(a0)
0000D130                            
0000D130                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D130 323C 001B                  		move.w	#$1B,d1
0000D134 343C 0010                  		move.w	#$10,d2
0000D138 363C 0010                  		move.w	#$10,d3
0000D13C 3828 0008                  		move.w	8(a0),d4
0000D140 6100 0000                  		bsr.w	SolidObject
0000D144 6100 0000                  		bsr.w	DisplaySprite
0000D148 3028 0008                  		move.w	8(a0),d0
0000D14C 0240 FF80                  		andi.w	#$FF80,d0
0000D150 3238 F700                  		move.w	($FFFFF700).w,d1
0000D154 0441 0080                  		subi.w	#$80,d1
0000D158 0241 FF80                  		andi.w	#$FF80,d1
0000D15C 9041                       		sub.w	d1,d0
0000D15E 0C40 0280                  		cmpi.w	#$280,d0
0000D162 6200 0000                  		bhi.w	DeleteObject
0000D166 4E75                       		rts	
0000D168                            ; ===========================================================================
0000D168                            ; ---------------------------------------------------------------------------
0000D168                            ; Object 49 - waterfall	sound effect (GHZ)
0000D168                            ; ---------------------------------------------------------------------------
0000D168                            
0000D168                            Obj49:					; XREF: Obj_Index
0000D168 7000                       		moveq	#0,d0
0000D16A 1028 0024                  		move.b	$24(a0),d0
0000D16E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D172 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D176                            ; ===========================================================================
0000D176 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D178 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D17A                            ; ===========================================================================
0000D17A                            
0000D17A                            Obj49_Main:				; XREF: Obj49_Index
0000D17A 5428 0024                  		addq.b	#2,$24(a0)
0000D17E 117C 0004 0001             		move.b	#4,1(a0)
0000D184                            
0000D184                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D184 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D188 0200 003F                  		andi.b	#$3F,d0
0000D18C 6600                       		bne.s	Obj49_ChkDel
0000D18E 303C 00D0                  		move.w	#$D0,d0
0000D192 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D198                            
0000D198                            Obj49_ChkDel:
0000D198 3028 0008                  		move.w	8(a0),d0
0000D19C 0240 FF80                  		andi.w	#$FF80,d0
0000D1A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D1A4 0441 0080                  		subi.w	#$80,d1
0000D1A8 0241 FF80                  		andi.w	#$FF80,d1
0000D1AC 9041                       		sub.w	d1,d0
0000D1AE 0C40 0280                  		cmpi.w	#$280,d0
0000D1B2 6200 0000                  		bhi.w	DeleteObject
0000D1B6 4E75                       		rts	
0000D1B8                            ; ===========================================================================
0000D1B8                            ; ---------------------------------------------------------------------------
0000D1B8                            ; Sprite mappings - purple rock	(GHZ)
0000D1B8                            ; ---------------------------------------------------------------------------
0000D1B8                            Map_obj3B:
0000D1B8                            	include "_maps\obj3B.asm"
0000D1B8                            ; ---------------------------------------------------------------------------
0000D1B8                            ; Sprite mappings - purple rock	(GHZ)
0000D1B8                            ; ---------------------------------------------------------------------------
0000D1B8 0000                       		dc.w byte_D110-Map_obj3B
0000D1BA 02                         byte_D110:	dc.b 2
0000D1BB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D1C0 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D1C6 00                         		even
0000D1C6 00                         		even
0000D1C6                            
0000D1C6                            ; ===========================================================================
0000D1C6                            ; ---------------------------------------------------------------------------
0000D1C6                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D1C6                            ; ---------------------------------------------------------------------------
0000D1C6                            
0000D1C6                            Obj3C:					; XREF: Obj_Index
0000D1C6 7000                       		moveq	#0,d0
0000D1C8 1028 0024                  		move.b	$24(a0),d0
0000D1CC 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D1D0 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D1D4 6000 0000                  		bra.w	MarkObjGone
0000D1D8                            ; ===========================================================================
0000D1D8 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D1DA 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D1DC 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D1DE                            ; ===========================================================================
0000D1DE                            
0000D1DE                            Obj3C_Main:				; XREF: Obj3C_Index
0000D1DE 5428 0024                  		addq.b	#2,$24(a0)
0000D1E2 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D1EA 317C 450F 0002             		move.w	#$450F,2(a0)
0000D1F0 117C 0004 0001             		move.b	#4,1(a0)
0000D1F6 117C 0010 0019             		move.b	#$10,$19(a0)
0000D1FC 117C 0004 0018             		move.b	#4,$18(a0)
0000D202 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D208                            
0000D208                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D208 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D20E 323C 001B                  		move.w	#$1B,d1
0000D212 343C 0020                  		move.w	#$20,d2
0000D216 363C 0020                  		move.w	#$20,d3
0000D21A 3828 0008                  		move.w	8(a0),d4
0000D21E 6100 0000                  		bsr.w	SolidObject
0000D222 0828 0005 0022             		btst	#5,$22(a0)
0000D228 6600                       		bne.s	Obj3C_ChkRoll
0000D22A                            
0000D22A                            locret_D180:
0000D22A 4E75                       		rts	
0000D22C                            ; ===========================================================================
0000D22C                            
0000D22C                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D22C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D232 66F6                       		bne.s	locret_D180	; if not, branch
0000D234 3028 0030                  		move.w	$30(a0),d0
0000D238 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D23A 4440                       		neg.w	d0
0000D23C                            
0000D23C                            Obj3C_ChkSpeed:
0000D23C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D240 65E8                       		bcs.s	locret_D180	; if not, branch
0000D242 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D248 5869 0008                  		addq.w	#4,8(a1)
0000D24C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D252 3028 0008                  		move.w	8(a0),d0
0000D256 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D25A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D25C 5169 0008                  		subq.w	#8,8(a1)
0000D260 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D266                            
0000D266                            Obj3C_Smash:
0000D266 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D26C 08A8 0005 0022             		bclr	#5,$22(a0)
0000D272 08A9 0005 0022             		bclr	#5,$22(a1)
0000D278 7207                       		moveq	#7,d1		; load 8 fragments
0000D27A 343C 0070                  		move.w	#$70,d2
0000D27E 6100                       		bsr.s	SmashObject
0000D280                            
0000D280                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D280 6100 0000                  		bsr.w	SpeedToPos
0000D284 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D28A 6100 0000                  		bsr.w	DisplaySprite
0000D28E 4A28 0001                  		tst.b	1(a0)
0000D292 6A00 0000                  		bpl.w	DeleteObject
0000D296 4E75                       		rts	
0000D298                            
0000D298                            ; ---------------------------------------------------------------------------
0000D298                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D298                            ; ---------------------------------------------------------------------------
0000D298                            
0000D298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D298                            
0000D298                            
0000D298                            SmashObject:				; XREF: Obj3C_Smash
0000D298 7000                       		moveq	#0,d0
0000D29A 1028 001A                  		move.b	$1A(a0),d0
0000D29E D040                       		add.w	d0,d0
0000D2A0 2668 0004                  		movea.l	4(a0),a3
0000D2A4 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D2A8 524B                       		addq.w	#1,a3
0000D2AA 08E8 0005 0001             		bset	#5,1(a0)
0000D2B0 1810                       		move.b	0(a0),d4
0000D2B2 1A28 0001                  		move.b	1(a0),d5
0000D2B6 2248                       		movea.l	a0,a1
0000D2B8 6000                       		bra.s	Smash_LoadFrag
0000D2BA                            ; ===========================================================================
0000D2BA                            
0000D2BA                            Smash_Loop:
0000D2BA 6100 0000                  		bsr.w	SingleObjLoad
0000D2BE 6600                       		bne.s	Smash_PlaySnd
0000D2C0 5A4B                       		addq.w	#5,a3
0000D2C2                            
0000D2C2                            Smash_LoadFrag:				; XREF: SmashObject
0000D2C2 137C 0004 0024             		move.b	#4,$24(a1)
0000D2C8 1284                       		move.b	d4,0(a1)
0000D2CA 234B 0004                  		move.l	a3,4(a1)
0000D2CE 1345 0001                  		move.b	d5,1(a1)
0000D2D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000D2D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D2DE 3368 0002 0002             		move.w	2(a0),2(a1)
0000D2E4 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D2EA 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D2F0 335C 0010                  		move.w	(a4)+,$10(a1)
0000D2F4 335C 0012                  		move.w	(a4)+,$12(a1)
0000D2F8 B3C8                       		cmpa.l	a0,a1
0000D2FA 6400                       		bcc.s	loc_D268
0000D2FC 2F08                       		move.l	a0,-(sp)
0000D2FE 2049                       		movea.l	a1,a0
0000D300 6100 0000                  		bsr.w	SpeedToPos
0000D304 D568 0012                  		add.w	d2,$12(a0)
0000D308 205F                       		movea.l	(sp)+,a0
0000D30A 6100 0000                  		bsr.w	DisplaySprite2
0000D30E                            
0000D30E                            loc_D268:
0000D30E 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D312                            
0000D312                            Smash_PlaySnd:
0000D312 303C 00CB                  		move.w	#$CB,d0
0000D316 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D31C                            ; End of function SmashObject
0000D31C                            
0000D31C                            ; ===========================================================================
0000D31C                            ; Smashed block	fragment speeds
0000D31C                            ;
0000D31C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D320 0600 FF00                  		dc.w $600, $FF00
0000D324 0600 0100                  		dc.w $600, $100
0000D328 0400 0500                  		dc.w $400, $500
0000D32C 0600 FA00                  		dc.w $600, $FA00
0000D330 0800 FE00                  		dc.w $800, $FE00
0000D334 0800 0200                  		dc.w $800, $200
0000D338 0600 0600                  		dc.w $600, $600
0000D33C                            
0000D33C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D340 F800 FE00                  		dc.w $F800, $FE00
0000D344 F800 0200                  		dc.w $F800, $200
0000D348 FA00 0600                  		dc.w $FA00, $600
0000D34C FC00 FB00                  		dc.w $FC00, $FB00
0000D350 FA00 FF00                  		dc.w $FA00, $FF00
0000D354 FA00 0100                  		dc.w $FA00, $100
0000D358 FC00 0500                  		dc.w $FC00, $500
0000D35C                            ; ---------------------------------------------------------------------------
0000D35C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D35C                            ; ---------------------------------------------------------------------------
0000D35C                            Map_obj3C:
0000D35C                            	include "_maps\obj3C.asm"
0000D35C                            ; ---------------------------------------------------------------------------
0000D35C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D35C                            ; ---------------------------------------------------------------------------
0000D35C 0000                       		dc.w byte_D2BC-Map_obj3C
0000D35E 0000                       		dc.w byte_D2E5-Map_obj3C
0000D360 0000                       		dc.w byte_D30E-Map_obj3C
0000D362 08                         byte_D2BC:	dc.b 8
0000D363 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D368 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D36D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D372 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D377 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D37C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D381 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D386 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D38B 08                         byte_D2E5:	dc.b 8
0000D38C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D391 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D396 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D39B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D3A0 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D3A5 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D3AA 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D3AF 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D3B4 08                         byte_D30E:	dc.b 8
0000D3B5 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D3BA F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D3BF 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D3C4 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D3C9 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D3CE F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D3D3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D3D8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D3DE 00                         		even
0000D3DE 00                         		even
0000D3DE                            
0000D3DE                            ; ---------------------------------------------------------------------------
0000D3DE                            ; Object code loading subroutine
0000D3DE                            ; ---------------------------------------------------------------------------
0000D3DE                            
0000D3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3DE                            
0000D3DE                            
0000D3DE                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D3DE 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D3E2 7E7F                       		moveq	#$7F,d7
0000D3E4 7000                       		moveq	#0,d0
0000D3E6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D3EC 6400                       		bcc.s	loc_D362
0000D3EE                            
0000D3EE                            loc_D348:
0000D3EE 1010                       		move.b	(a0),d0		; load object number from RAM
0000D3F0 6700                       		beq.s	loc_D358
0000D3F2 D040                       		add.w	d0,d0
0000D3F4 D040                       		add.w	d0,d0
0000D3F6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D3FA 4E91                       		jsr	(a1)		; run the object's code
0000D3FC 7000                       		moveq	#0,d0
0000D3FE                            
0000D3FE                            loc_D358:
0000D3FE 41E8 0040                  		lea	$40(a0),a0	; next object
0000D402 51CF FFEA                  		dbf	d7,loc_D348
0000D406 4E75                       		rts
0000D408                            ; ===========================================================================
0000D408                            
0000D408                            loc_D362:
0000D408 7E1F                       		moveq	#$1F,d7
0000D40A 61E2                       		bsr.s	loc_D348
0000D40C 7E5F                       		moveq	#$5F,d7
0000D40E                            
0000D40E                            loc_D368:
0000D40E 7000                       		moveq	#0,d0
0000D410 1010                       		move.b	(a0),d0
0000D412 6700                       		beq.s	loc_D378
0000D414 4A28 0001                  		tst.b	1(a0)
0000D418 6A00                       		bpl.s	loc_D378
0000D41A 6100 0000                  		bsr.w	DisplaySprite
0000D41E                            
0000D41E                            loc_D378:
0000D41E 41E8 0040                  		lea	$40(a0),a0
0000D422                            
0000D422                            loc_D37C:
0000D422 51CF FFEA                  		dbf	d7,loc_D368
0000D426 4E75                       		rts
0000D428                            ; End of function ObjectsLoad
0000D428                            
0000D428                            ; ===========================================================================
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            ; Object pointers
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            Obj_Index:
0000D428                            	include "_inc\Object pointers.asm"
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            ; Object pointers
0000D428                            ; ---------------------------------------------------------------------------
0000D428 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	ObjectFall, ObjectFall
0000D438 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D448 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D458 0000 0000 0000 A6A6 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D468 0000 7378 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D478 0000 799E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D488 0000 8232 0000 829A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D498 0000 88E4 0000 8BD2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D4A8 0000 0000 0000 9856 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D4B8 0000 9B98 0000 A190 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D4C8 0000 948E 0000 89BA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D4D8 0000 AD2E 0000 A376 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D4E8 0000 B700 0000 BDBA 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D4F8 0000 B264 0000 CEBC 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D508 0000 C540 0000 C60C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D518 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D528 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D538 0000 BA28 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D548 0000 D168 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D558 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D568 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D578 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D588 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D598 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D5A8 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D5B8 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D5C8 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D5D8 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D5E8 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D5F8 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D608 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D618 0000 0000 0000 C846 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D628 0000 4F9C 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D638 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D648 0000 5658 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D648 0000 5658 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D658                            
0000D658                            ; ---------------------------------------------------------------------------
0000D658                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D658                            ; ---------------------------------------------------------------------------
0000D658                            
0000D658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D658                            
0000D658                            
0000D658                            ObjectFall:
0000D658 2428 0008                  		move.l	8(a0),d2
0000D65C 2628 000C                  		move.l	$C(a0),d3
0000D660 3028 0010                  		move.w	$10(a0),d0
0000D664 48C0                       		ext.l	d0
0000D666 E180                       		asl.l	#8,d0
0000D668 D480                       		add.l	d0,d2
0000D66A 3028 0012                  		move.w	$12(a0),d0
0000D66E 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D674 48C0                       		ext.l	d0
0000D676 E180                       		asl.l	#8,d0
0000D678 D680                       		add.l	d0,d3
0000D67A 2142 0008                  		move.l	d2,8(a0)
0000D67E 2143 000C                  		move.l	d3,$C(a0)
0000D682 4E75                       		rts	
0000D684                            ; End of function ObjectFall
0000D684                            
0000D684                            ; ---------------------------------------------------------------------------
0000D684                            ; Subroutine translating object	speed to update	object position
0000D684                            ; ---------------------------------------------------------------------------
0000D684                            
0000D684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D684                            
0000D684                            
0000D684                            SpeedToPos:
0000D684 2428 0008                  		move.l	8(a0),d2
0000D688 2628 000C                  		move.l	$C(a0),d3
0000D68C 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D690 48C0                       		ext.l	d0
0000D692 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D694 D480                       		add.l	d0,d2		; add to x-axis	position
0000D696 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D69A 48C0                       		ext.l	d0
0000D69C E180                       		asl.l	#8,d0		; multiply by $100
0000D69E D680                       		add.l	d0,d3		; add to y-axis	position
0000D6A0 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D6A4 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D6A8 4E75                       		rts	
0000D6AA                            ; End of function SpeedToPos
0000D6AA                            
0000D6AA                            ; ---------------------------------------------------------------------------
0000D6AA                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D6AA                            ; ---------------------------------------------------------------------------
0000D6AA                            
0000D6AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6AA                            
0000D6AA                            
0000D6AA                            DisplaySprite:
0000D6AA 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D6AE 3028 0018                  		move.w	$18(a0),d0
0000D6B2 E248                       		lsr.w	#1,d0
0000D6B4 0240 0380                  		andi.w	#$380,d0
0000D6B8 D2C0                       		adda.w	d0,a1
0000D6BA 0C51 0072                  		cmpi.w	#$72,(a1)
0000D6BE 6400                       		bcc.s	locret_D620
0000D6C0 5451                       		addq.w	#2,(a1)
0000D6C2 D2D1                       		adda.w	(a1),a1
0000D6C4 3288                       		move.w	a0,(a1)
0000D6C6                            
0000D6C6                            locret_D620:
0000D6C6 4E75                       		rts	
0000D6C8                            ; End of function DisplaySprite
0000D6C8                            
0000D6C8                            ; ---------------------------------------------------------------------------
0000D6C8                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D6C8                            ; ---------------------------------------------------------------------------
0000D6C8                            
0000D6C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6C8                            
0000D6C8                            
0000D6C8                            DisplaySprite2:
0000D6C8 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D6CC 3029 0018                  		move.w	$18(a1),d0
0000D6D0 E248                       		lsr.w	#1,d0
0000D6D2 0240 0380                  		andi.w	#$380,d0
0000D6D6 D4C0                       		adda.w	d0,a2
0000D6D8 0C52 0072                  		cmpi.w	#$72,(a2)
0000D6DC 6400                       		bcc.s	locret_D63E
0000D6DE 5452                       		addq.w	#2,(a2)
0000D6E0 D4D2                       		adda.w	(a2),a2
0000D6E2 3489                       		move.w	a1,(a2)
0000D6E4                            
0000D6E4                            locret_D63E:
0000D6E4 4E75                       		rts	
0000D6E6                            ; End of function DisplaySprite2
0000D6E6                            
0000D6E6                            ; ---------------------------------------------------------------------------
0000D6E6                            ; Subroutine to	delete an object
0000D6E6                            ; ---------------------------------------------------------------------------
0000D6E6                            
0000D6E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6E6                            
0000D6E6                            
0000D6E6                            DeleteObject:
0000D6E6 2248                       		movea.l	a0,a1
0000D6E8                            
0000D6E8                            DeleteObject2:
0000D6E8 7200                       		moveq	#0,d1
0000D6EA 700F                       		moveq	#$F,d0
0000D6EC                            
0000D6EC                            loc_D646:
0000D6EC 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D6EE 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D6F2 4E75                       		rts	
0000D6F4                            ; End of function DeleteObject
0000D6F4                            
0000D6F4                            ; ===========================================================================
0000D6F4 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D6F8 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D6FC 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D700 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D704                            ; ---------------------------------------------------------------------------
0000D704                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D704                            ; ---------------------------------------------------------------------------
0000D704                            
0000D704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D704                            
0000D704                            
0000D704                            BuildSprites:				; XREF: TitleScreen; et al
0000D704 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D708 7A00                       		moveq	#0,d5
0000D70A 7800                       		moveq	#0,d4
0000D70C 6100 0000                  		bsr.w	Obj02
0000D710 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D714 7E07                       		moveq	#7,d7
0000D716                            
0000D716                            loc_D66A:
0000D716 4A54                       		tst.w	(a4)
0000D718 6700 0000                  		beq.w	loc_D72E
0000D71C 7C02                       		moveq	#2,d6
0000D71E                            
0000D71E                            loc_D672:
0000D71E 3074 6000                  		movea.w	(a4,d6.w),a0
0000D722 4A10                       		tst.b	(a0)
0000D724 6700 0000                  		beq.w	loc_D726
0000D728 08A8 0007 0001             		bclr	#7,1(a0)
0000D72E 1028 0001                  		move.b	1(a0),d0
0000D732 1800                       		move.b	d0,d4
0000D734 0240 000C                  		andi.w	#$C,d0
0000D738 6700                       		beq.s	loc_D6DE
0000D73A 227B 00B8                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D73E 7000                       		moveq	#0,d0
0000D740 1028 0019                  		move.b	$19(a0),d0
0000D744 3628 0008                  		move.w	8(a0),d3
0000D748 9651                       		sub.w	(a1),d3
0000D74A 3203                       		move.w	d3,d1
0000D74C D240                       		add.w	d0,d1
0000D74E 6B00 0000                  		bmi.w	loc_D726
0000D752 3203                       		move.w	d3,d1
0000D754 9240                       		sub.w	d0,d1
0000D756 0C41 0140                  		cmpi.w	#$140,d1
0000D75A 6C00                       		bge.s	loc_D726
0000D75C 0643 0080                  		addi.w	#$80,d3
0000D760 0804 0004                  		btst	#4,d4
0000D764 6700                       		beq.s	loc_D6E8
0000D766 7000                       		moveq	#0,d0
0000D768 1028 0016                  		move.b	$16(a0),d0
0000D76C 3428 000C                  		move.w	$C(a0),d2
0000D770 9469 0004                  		sub.w	4(a1),d2
0000D774 3202                       		move.w	d2,d1
0000D776 D240                       		add.w	d0,d1
0000D778 6B00                       		bmi.s	loc_D726
0000D77A 3202                       		move.w	d2,d1
0000D77C 9240                       		sub.w	d0,d1
0000D77E 0C41 00E0                  		cmpi.w	#$E0,d1
0000D782 6C00                       		bge.s	loc_D726
0000D784 0642 0080                  		addi.w	#$80,d2
0000D788 6000                       		bra.s	loc_D700
0000D78A                            ; ===========================================================================
0000D78A                            
0000D78A                            loc_D6DE:
0000D78A 3428 000A                  		move.w	$A(a0),d2
0000D78E 3628 0008                  		move.w	8(a0),d3
0000D792 6000                       		bra.s	loc_D700
0000D794                            ; ===========================================================================
0000D794                            
0000D794                            loc_D6E8:
0000D794 3428 000C                  		move.w	$C(a0),d2
0000D798 9469 0004                  		sub.w	4(a1),d2
0000D79C 0642 0080                  		addi.w	#$80,d2
0000D7A0 0C42 0060                  		cmpi.w	#$60,d2
0000D7A4 6500                       		bcs.s	loc_D726
0000D7A6 0C42 0180                  		cmpi.w	#$180,d2
0000D7AA 6400                       		bcc.s	loc_D726
0000D7AC                            
0000D7AC                            loc_D700:
0000D7AC 2268 0004                  		movea.l	4(a0),a1
0000D7B0 7200                       		moveq	#0,d1
0000D7B2 0804 0005                  		btst	#5,d4
0000D7B6 6600                       		bne.s	loc_D71C
0000D7B8 1228 001A                  		move.b	$1A(a0),d1
0000D7BC D201                       		add.b	d1,d1
0000D7BE D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D7C2 1219                       		move.b	(a1)+,d1
0000D7C4 5301                       		subq.b	#1,d1
0000D7C6 6B00                       		bmi.s	loc_D720
0000D7C8                            
0000D7C8                            loc_D71C:
0000D7C8 6100 0000                  		bsr.w	sub_D750
0000D7CC                            
0000D7CC                            loc_D720:
0000D7CC 08E8 0007 0001             		bset	#7,1(a0)
0000D7D2                            
0000D7D2                            loc_D726:
0000D7D2 5446                       		addq.w	#2,d6
0000D7D4 5554                       		subq.w	#2,(a4)
0000D7D6 6600 FF46                  		bne.w	loc_D672
0000D7DA                            
0000D7DA                            loc_D72E:
0000D7DA 49EC 0080                  		lea	$80(a4),a4
0000D7DE 51CF FF36                  		dbf	d7,loc_D66A
0000D7E2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D7E6 0C05 0050                  		cmpi.b	#$50,d5
0000D7EA 6700                       		beq.s	loc_D748
0000D7EC 24BC 0000 0000             		move.l	#0,(a2)
0000D7F2 4E75                       		rts	
0000D7F4                            ; ===========================================================================
0000D7F4                            
0000D7F4                            loc_D748:
0000D7F4 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D7FA 4E75                       		rts	
0000D7FC                            ; End of function BuildSprites
0000D7FC                            
0000D7FC                            
0000D7FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7FC                            
0000D7FC                            
0000D7FC                            sub_D750:				; XREF: BuildSprites
0000D7FC 3668 0002                  		movea.w	2(a0),a3
0000D800 0804 0000                  		btst	#0,d4
0000D804 6600                       		bne.s	loc_D796
0000D806 0804 0001                  		btst	#1,d4
0000D80A 6600 0000                  		bne.w	loc_D7E4
0000D80E                            ; End of function sub_D750
0000D80E                            
0000D80E                            
0000D80E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D80E                            
0000D80E                            
0000D80E                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D80E 0C05 0050                  		cmpi.b	#$50,d5
0000D812 6700                       		beq.s	locret_D794
0000D814                            
0000D814                            DrawSprite_Loop:
0000D814 1019                       		move.b	(a1)+,d0
0000D816 4880                       		ext.w	d0
0000D818 D042                       		add.w	d2,d0
0000D81A 34C0                       		move.w	d0,(a2)+
0000D81C 14D9                       		move.b	(a1)+,(a2)+
0000D81E 5205                       		addq.b	#1,d5
0000D820 14C5                       		move.b	d5,(a2)+
0000D822 1019                       		move.b	(a1)+,d0
0000D824 E148                       		lsl.w	#8,d0
0000D826 1019                       		move.b	(a1)+,d0
0000D828 D04B                       		add.w	a3,d0
0000D82A 34C0                       		move.w	d0,(a2)+
0000D82C 1019                       		move.b	(a1)+,d0
0000D82E 4880                       		ext.w	d0
0000D830 D043                       		add.w	d3,d0
0000D832 0240 01FF                  		andi.w	#$1FF,d0
0000D836 6600                       		bne.s	loc_D78E
0000D838 5240                       		addq.w	#1,d0
0000D83A                            
0000D83A                            loc_D78E:
0000D83A 34C0                       		move.w	d0,(a2)+
0000D83C 51C9 FFD0                  		dbf	d1,sub_D762
0000D840                            
0000D840                            locret_D794:
0000D840 4E75                       		rts	
0000D842                            ; End of function sub_D762
0000D842                            
0000D842                            ; ===========================================================================
0000D842                            
0000D842                            loc_D796:
0000D842 0804 0001                  		btst	#1,d4
0000D846 6600 0000                  		bne.w	loc_D82A
0000D84A                            
0000D84A                            loc_D79E:
0000D84A 0C05 0050                  		cmpi.b	#$50,d5
0000D84E 6700                       		beq.s	locret_D7E2
0000D850 1019                       		move.b	(a1)+,d0
0000D852 4880                       		ext.w	d0
0000D854 D042                       		add.w	d2,d0
0000D856 34C0                       		move.w	d0,(a2)+
0000D858 1819                       		move.b	(a1)+,d4
0000D85A 14C4                       		move.b	d4,(a2)+
0000D85C 5205                       		addq.b	#1,d5
0000D85E 14C5                       		move.b	d5,(a2)+
0000D860 1019                       		move.b	(a1)+,d0
0000D862 E148                       		lsl.w	#8,d0
0000D864 1019                       		move.b	(a1)+,d0
0000D866 D04B                       		add.w	a3,d0
0000D868 0A40 0800                  		eori.w	#$800,d0
0000D86C 34C0                       		move.w	d0,(a2)+
0000D86E 1019                       		move.b	(a1)+,d0
0000D870 4880                       		ext.w	d0
0000D872 4440                       		neg.w	d0
0000D874 D804                       		add.b	d4,d4
0000D876 0244 0018                  		andi.w	#$18,d4
0000D87A 5044                       		addq.w	#8,d4
0000D87C 9044                       		sub.w	d4,d0
0000D87E D043                       		add.w	d3,d0
0000D880 0240 01FF                  		andi.w	#$1FF,d0
0000D884 6600                       		bne.s	loc_D7DC
0000D886 5240                       		addq.w	#1,d0
0000D888                            
0000D888                            loc_D7DC:
0000D888 34C0                       		move.w	d0,(a2)+
0000D88A 51C9 FFBE                  		dbf	d1,loc_D79E
0000D88E                            
0000D88E                            locret_D7E2:
0000D88E 4E75                       		rts	
0000D890                            ; ===========================================================================
0000D890                            
0000D890                            loc_D7E4:				; XREF: sub_D750
0000D890 0C05 0050                  		cmpi.b	#$50,d5
0000D894 6700                       		beq.s	locret_D828
0000D896 1019                       		move.b	(a1)+,d0
0000D898 1811                       		move.b	(a1),d4
0000D89A 4880                       		ext.w	d0
0000D89C 4440                       		neg.w	d0
0000D89E E70C                       		lsl.b	#3,d4
0000D8A0 0244 0018                  		andi.w	#$18,d4
0000D8A4 5044                       		addq.w	#8,d4
0000D8A6 9044                       		sub.w	d4,d0
0000D8A8 D042                       		add.w	d2,d0
0000D8AA 34C0                       		move.w	d0,(a2)+
0000D8AC 14D9                       		move.b	(a1)+,(a2)+
0000D8AE 5205                       		addq.b	#1,d5
0000D8B0 14C5                       		move.b	d5,(a2)+
0000D8B2 1019                       		move.b	(a1)+,d0
0000D8B4 E148                       		lsl.w	#8,d0
0000D8B6 1019                       		move.b	(a1)+,d0
0000D8B8 D04B                       		add.w	a3,d0
0000D8BA 0A40 1000                  		eori.w	#$1000,d0
0000D8BE 34C0                       		move.w	d0,(a2)+
0000D8C0 1019                       		move.b	(a1)+,d0
0000D8C2 4880                       		ext.w	d0
0000D8C4 D043                       		add.w	d3,d0
0000D8C6 0240 01FF                  		andi.w	#$1FF,d0
0000D8CA 6600                       		bne.s	loc_D822
0000D8CC 5240                       		addq.w	#1,d0
0000D8CE                            
0000D8CE                            loc_D822:
0000D8CE 34C0                       		move.w	d0,(a2)+
0000D8D0 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D8D4                            
0000D8D4                            locret_D828:
0000D8D4 4E75                       		rts	
0000D8D6                            ; ===========================================================================
0000D8D6                            
0000D8D6                            loc_D82A:
0000D8D6 0C05 0050                  		cmpi.b	#$50,d5
0000D8DA 6700                       		beq.s	locret_D87C
0000D8DC 1019                       		move.b	(a1)+,d0
0000D8DE 1811                       		move.b	(a1),d4
0000D8E0 4880                       		ext.w	d0
0000D8E2 4440                       		neg.w	d0
0000D8E4 E70C                       		lsl.b	#3,d4
0000D8E6 0244 0018                  		andi.w	#$18,d4
0000D8EA 5044                       		addq.w	#8,d4
0000D8EC 9044                       		sub.w	d4,d0
0000D8EE D042                       		add.w	d2,d0
0000D8F0 34C0                       		move.w	d0,(a2)+
0000D8F2 1819                       		move.b	(a1)+,d4
0000D8F4 14C4                       		move.b	d4,(a2)+
0000D8F6 5205                       		addq.b	#1,d5
0000D8F8 14C5                       		move.b	d5,(a2)+
0000D8FA 1019                       		move.b	(a1)+,d0
0000D8FC E148                       		lsl.w	#8,d0
0000D8FE 1019                       		move.b	(a1)+,d0
0000D900 D04B                       		add.w	a3,d0
0000D902 0A40 1800                  		eori.w	#$1800,d0
0000D906 34C0                       		move.w	d0,(a2)+
0000D908 1019                       		move.b	(a1)+,d0
0000D90A 4880                       		ext.w	d0
0000D90C 4440                       		neg.w	d0
0000D90E D804                       		add.b	d4,d4
0000D910 0244 0018                  		andi.w	#$18,d4
0000D914 5044                       		addq.w	#8,d4
0000D916 9044                       		sub.w	d4,d0
0000D918 D043                       		add.w	d3,d0
0000D91A 0240 01FF                  		andi.w	#$1FF,d0
0000D91E 6600                       		bne.s	loc_D876
0000D920 5240                       		addq.w	#1,d0
0000D922                            
0000D922                            loc_D876:
0000D922 34C0                       		move.w	d0,(a2)+
0000D924 51C9 FFB0                  		dbf	d1,loc_D82A
0000D928                            
0000D928                            locret_D87C:
0000D928 4E75                       		rts	
0000D92A                            ; ---------------------------------------------------------------------------
0000D92A                            ; Subroutine to	check if an object is on the screen
0000D92A                            ; ---------------------------------------------------------------------------
0000D92A                            
0000D92A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D92A                            
0000D92A                            
0000D92A                            ChkObjOnScreen:
0000D92A 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D92E 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D932 6B00                       		bmi.s	NotOnScreen
0000D934 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D938 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D93A                            
0000D93A 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D93E 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D942 6B00                       		bmi.s	NotOnScreen
0000D944 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D948 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D94A                            
0000D94A 7000                       		moveq	#0,d0		; set flag to 0
0000D94C 4E75                       		rts	
0000D94E                            ; ===========================================================================
0000D94E                            
0000D94E                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D94E 7001                       		moveq	#1,d0		; set flag to 1
0000D950 4E75                       		rts	
0000D952                            ; End of function ChkObjOnScreen
0000D952                            
0000D952                            
0000D952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D952                            
0000D952                            
0000D952                            ChkObjOnScreen2:
0000D952 7200                       		moveq	#0,d1
0000D954 1228 0019                  		move.b	$19(a0),d1
0000D958 3028 0008                  		move.w	8(a0),d0
0000D95C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D960 D041                       		add.w	d1,d0
0000D962 6B00                       		bmi.s	NotOnScreen2
0000D964 D241                       		add.w	d1,d1
0000D966 9041                       		sub.w	d1,d0
0000D968 0C40 0140                  		cmpi.w	#320,d0
0000D96C 6C00                       		bge.s	NotOnScreen2
0000D96E                            
0000D96E 3228 000C                  		move.w	$C(a0),d1
0000D972 9278 F704                  		sub.w	($FFFFF704).w,d1
0000D976 6B00                       		bmi.s	NotOnScreen2
0000D978 0C41 00E0                  		cmpi.w	#224,d1
0000D97C 6C00                       		bge.s	NotOnScreen2
0000D97E                            
0000D97E 7000                       		moveq	#0,d0
0000D980 4E75                       		rts	
0000D982                            ; ===========================================================================
0000D982                            
0000D982                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000D982 7001                       		moveq	#1,d0
0000D984 4E75                       		rts	
0000D986                            ; End of function ChkObjOnScreen2
0000D986                            
0000D986                            ; ---------------------------------------------------------------------------
0000D986                            ; Subroutine to	load a level's objects
0000D986                            ; ---------------------------------------------------------------------------
0000D986                            
0000D986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D986                            
0000D986                            
0000D986                            ObjPosLoad:				; XREF: Level; et al
0000D986 7000                       		moveq	#0,d0
0000D988 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000D98C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000D990 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000D994                            ; End of function ObjPosLoad
0000D994                            
0000D994                            ; ===========================================================================
0000D994 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000D996 0000                       		dc.w OPL_Next-OPL_Index
0000D998                            ; ===========================================================================
0000D998                            
0000D998                            OPL_Main:				; XREF: OPL_Index
0000D998 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000D99C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000D9A0 ED08                       		lsl.b	#6,d0
0000D9A2 E848                       		lsr.w	#4,d0
0000D9A4 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000D9AA 2248                       		movea.l	a0,a1
0000D9AC D0F0 0000                  		adda.w	(a0,d0.w),a0
0000D9B0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9B4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D9B8 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000D9BC 21C9 F778                  		move.l	a1,($FFFFF778).w
0000D9C0 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000D9C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D9C8 34FC 0101                  		move.w	#$101,(a2)+
0000D9CC 303C 005E                  		move.w	#$5E,d0
0000D9D0                            
0000D9D0                            OPL_ClrList:
0000D9D0 429A                       		clr.l	(a2)+
0000D9D2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000D9D6                            
0000D9D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D9DA 7400                       		moveq	#0,d2
0000D9DC 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D9E0 0446 0080                  		subi.w	#$80,d6
0000D9E4 6400                       		bcc.s	loc_D93C
0000D9E6 7C00                       		moveq	#0,d6
0000D9E8                            
0000D9E8                            loc_D93C:
0000D9E8 0246 FF80                  		andi.w	#$FF80,d6
0000D9EC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D9F0                            
0000D9F0                            loc_D944:
0000D9F0 BC50                       		cmp.w	(a0),d6
0000D9F2 6300                       		bls.s	loc_D956
0000D9F4 4A28 0004                  		tst.b	4(a0)
0000D9F8 6A00                       		bpl.s	loc_D952
0000D9FA 1412                       		move.b	(a2),d2
0000D9FC 5212                       		addq.b	#1,(a2)
0000D9FE                            
0000D9FE                            loc_D952:
0000D9FE 5C48                       		addq.w	#6,a0
0000DA00 60EE                       		bra.s	loc_D944
0000DA02                            ; ===========================================================================
0000DA02                            
0000DA02                            loc_D956:
0000DA02 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA06 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA0A 0446 0080                  		subi.w	#$80,d6
0000DA0E 6500                       		bcs.s	loc_D976
0000DA10                            
0000DA10                            loc_D964:
0000DA10 BC50                       		cmp.w	(a0),d6
0000DA12 6300                       		bls.s	loc_D976
0000DA14 4A28 0004                  		tst.b	4(a0)
0000DA18 6A00                       		bpl.s	loc_D972
0000DA1A 522A 0001                  		addq.b	#1,1(a2)
0000DA1E                            
0000DA1E                            loc_D972:
0000DA1E 5C48                       		addq.w	#6,a0
0000DA20 60EE                       		bra.s	loc_D964
0000DA22                            ; ===========================================================================
0000DA22                            
0000DA22                            loc_D976:
0000DA22 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA26 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DA2C                            
0000DA2C                            OPL_Next:				; XREF: OPL_Index
0000DA2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA30 7400                       		moveq	#0,d2
0000DA32 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DA36 0246 FF80                  		andi.w	#$FF80,d6
0000DA3A BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DA3E 6700 0000                  		beq.w	locret_DA3A
0000DA42 6C00                       		bge.s	loc_D9F6
0000DA44 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DA48 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA4C 0446 0080                  		subi.w	#$80,d6
0000DA50 6500                       		bcs.s	loc_D9D2
0000DA52                            
0000DA52                            loc_D9A6:
0000DA52 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DA56 6C00                       		bge.s	loc_D9D2
0000DA58 5D48                       		subq.w	#6,a0
0000DA5A 4A28 0004                  		tst.b	4(a0)
0000DA5E 6A00                       		bpl.s	loc_D9BC
0000DA60 532A 0001                  		subq.b	#1,1(a2)
0000DA64 142A 0001                  		move.b	1(a2),d2
0000DA68                            
0000DA68                            loc_D9BC:
0000DA68 6100 0000                  		bsr.w	loc_DA3C
0000DA6C 6600                       		bne.s	loc_D9C6
0000DA6E 5D48                       		subq.w	#6,a0
0000DA70 60E0                       		bra.s	loc_D9A6
0000DA72                            ; ===========================================================================
0000DA72                            
0000DA72                            loc_D9C6:
0000DA72 4A28 0004                  		tst.b	4(a0)
0000DA76 6A00                       		bpl.s	loc_D9D0
0000DA78 522A 0001                  		addq.b	#1,1(a2)
0000DA7C                            
0000DA7C                            loc_D9D0:
0000DA7C 5C48                       		addq.w	#6,a0
0000DA7E                            
0000DA7E                            loc_D9D2:
0000DA7E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA82 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DA86 0646 0300                  		addi.w	#$300,d6
0000DA8A                            
0000DA8A                            loc_D9DE:
0000DA8A BC68 FFFA                  		cmp.w	-6(a0),d6
0000DA8E 6E00                       		bgt.s	loc_D9F0
0000DA90 4A28 FFFE                  		tst.b	-2(a0)
0000DA94 6A00                       		bpl.s	loc_D9EC
0000DA96 5312                       		subq.b	#1,(a2)
0000DA98                            
0000DA98                            loc_D9EC:
0000DA98 5D48                       		subq.w	#6,a0
0000DA9A 60EE                       		bra.s	loc_D9DE
0000DA9C                            ; ===========================================================================
0000DA9C                            
0000DA9C                            loc_D9F0:
0000DA9C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DAA0 4E75                       		rts	
0000DAA2                            ; ===========================================================================
0000DAA2                            
0000DAA2                            loc_D9F6:
0000DAA2 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DAA6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DAAA 0646 0280                  		addi.w	#$280,d6
0000DAAE                            
0000DAAE                            loc_DA02:
0000DAAE BC50                       		cmp.w	(a0),d6
0000DAB0 6300                       		bls.s	loc_DA16
0000DAB2 4A28 0004                  		tst.b	4(a0)
0000DAB6 6A00                       		bpl.s	loc_DA10
0000DAB8 1412                       		move.b	(a2),d2
0000DABA 5212                       		addq.b	#1,(a2)
0000DABC                            
0000DABC                            loc_DA10:
0000DABC 6100 0000                  		bsr.w	loc_DA3C
0000DAC0 67EC                       		beq.s	loc_DA02
0000DAC2                            
0000DAC2                            loc_DA16:
0000DAC2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DAC6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DACA 0446 0300                  		subi.w	#$300,d6
0000DACE 6500                       		bcs.s	loc_DA36
0000DAD0                            
0000DAD0                            loc_DA24:
0000DAD0 BC50                       		cmp.w	(a0),d6
0000DAD2 6300                       		bls.s	loc_DA36
0000DAD4 4A28 0004                  		tst.b	4(a0)
0000DAD8 6A00                       		bpl.s	loc_DA32
0000DADA 522A 0001                  		addq.b	#1,1(a2)
0000DADE                            
0000DADE                            loc_DA32:
0000DADE 5C48                       		addq.w	#6,a0
0000DAE0 60EE                       		bra.s	loc_DA24
0000DAE2                            ; ===========================================================================
0000DAE2                            
0000DAE2                            loc_DA36:
0000DAE2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DAE6                            
0000DAE6                            locret_DA3A:
0000DAE6 4E75                       		rts	
0000DAE8                            ; ===========================================================================
0000DAE8                            
0000DAE8                            loc_DA3C:
0000DAE8 4A28 0004                  		tst.b	4(a0)
0000DAEC 6A00                       		bpl.s	OPL_MakeItem
0000DAEE 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DAF4 6700                       		beq.s	OPL_MakeItem
0000DAF6 5C48                       		addq.w	#6,a0
0000DAF8 7000                       		moveq	#0,d0
0000DAFA 4E75                       		rts	
0000DAFC                            ; ===========================================================================
0000DAFC                            
0000DAFC                            OPL_MakeItem:
0000DAFC 6100 0000                  		bsr.w	SingleObjLoad
0000DB00 6600                       		bne.s	locret_DA8A
0000DB02 3358 0008                  		move.w	(a0)+,8(a1)
0000DB06 3018                       		move.w	(a0)+,d0
0000DB08 3200                       		move.w	d0,d1
0000DB0A 0240 0FFF                  		andi.w	#$FFF,d0
0000DB0E 3340 000C                  		move.w	d0,$C(a1)
0000DB12 E559                       		rol.w	#2,d1
0000DB14 0201 0003                  		andi.b	#3,d1
0000DB18 1341 0001                  		move.b	d1,1(a1)
0000DB1C 1341 0022                  		move.b	d1,$22(a1)
0000DB20 1018                       		move.b	(a0)+,d0
0000DB22 6A00                       		bpl.s	loc_DA80
0000DB24 0200 007F                  		andi.b	#$7F,d0
0000DB28 1342 0023                  		move.b	d2,$23(a1)
0000DB2C                            
0000DB2C                            loc_DA80:
0000DB2C 1280                       		move.b	d0,0(a1)
0000DB2E 1358 0028                  		move.b	(a0)+,$28(a1)
0000DB32 7000                       		moveq	#0,d0
0000DB34                            
0000DB34                            locret_DA8A:
0000DB34 4E75                       		rts	
0000DB36                            ; ---------------------------------------------------------------------------
0000DB36                            ; Single object	loading	subroutine
0000DB36                            ; ---------------------------------------------------------------------------
0000DB36                            
0000DB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB36                            
0000DB36                            
0000DB36                            SingleObjLoad:
0000DB36 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DB3A 303C 005F                  		move.w	#$5F,d0
0000DB3E                            
0000DB3E                            loc_DA94:
0000DB3E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DB40 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DB42 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DB46 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DB4A                            
0000DB4A                            locret_DAA0:
0000DB4A 4E75                       		rts	
0000DB4C                            ; End of function SingleObjLoad
0000DB4C                            
0000DB4C                            
0000DB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB4C                            
0000DB4C                            
0000DB4C                            SingleObjLoad2:
0000DB4C 2248                       		movea.l	a0,a1
0000DB4E 303C F000                  		move.w	#-$1000,d0
0000DB52 9048                       		sub.w	a0,d0
0000DB54 EC48                       		lsr.w	#6,d0
0000DB56 5340                       		subq.w	#1,d0
0000DB58 6500                       		bcs.s	locret_DABC
0000DB5A                            
0000DB5A                            loc_DAB0:
0000DB5A 4A11                       		tst.b	(a1)
0000DB5C 6700                       		beq.s	locret_DABC
0000DB5E 43E9 0040                  		lea	$40(a1),a1
0000DB62 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DB66                            
0000DB66                            locret_DABC:
0000DB66 4E75                       		rts	
0000DB68                            ; End of function SingleObjLoad2
0000DB68                            
0000DB68                            ; ===========================================================================
0000DB68                            ; ---------------------------------------------------------------------------
0000DB68                            ; Object 41 - springs
0000DB68                            ; ---------------------------------------------------------------------------
0000DB68                            
0000DB68                            Obj41:					; XREF: Obj_Index
0000DB68 7000                       		moveq	#0,d0
0000DB6A 1028 0024                  		move.b	$24(a0),d0
0000DB6E 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DB72 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DB76 6100 FB32                  		bsr.w	DisplaySprite
0000DB7A 3028 0008                  		move.w	8(a0),d0
0000DB7E 0240 FF80                  		andi.w	#$FF80,d0
0000DB82 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB86 0441 0080                  		subi.w	#$80,d1
0000DB8A 0241 FF80                  		andi.w	#$FF80,d1
0000DB8E 9041                       		sub.w	d1,d0
0000DB90 0C40 0280                  		cmpi.w	#$280,d0
0000DB94 6200 FB50                  		bhi.w	DeleteObject
0000DB98 4E75                       		rts	
0000DB9A                            ; ===========================================================================
0000DB9A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DB9C 0000                       		dc.w Obj41_Up-Obj41_Index
0000DB9E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DBA0 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DBA2 0000                       		dc.w Obj41_LR-Obj41_Index
0000DBA4 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DBA6 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DBA8 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DBAA 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DBAC 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DBAE                            
0000DBAE F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DBB0 F600                       		dc.w -$A00		; power	of yellow spring
0000DBB2                            ; ===========================================================================
0000DBB2                            
0000DBB2                            Obj41_Main:				; XREF: Obj41_Index
0000DBB2 5428 0024                  		addq.b	#2,$24(a0)
0000DBB6 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DBBE 317C 0523 0002             		move.w	#$523,2(a0)
0000DBC4 0028 0004 0001             		ori.b	#4,1(a0)
0000DBCA 117C 0010 0019             		move.b	#$10,$19(a0)
0000DBD0 117C 0004 0018             		move.b	#4,$18(a0)
0000DBD6 1028 0028                  		move.b	$28(a0),d0
0000DBDA 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DBDE 6700                       		beq.s	loc_DB54	; if not, branch
0000DBE0 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DBE6 117C 0001 001C             		move.b	#1,$1C(a0)
0000DBEC 117C 0003 001A             		move.b	#3,$1A(a0)
0000DBF2 317C 0533 0002             		move.w	#$533,2(a0)
0000DBF8 117C 0008 0019             		move.b	#8,$19(a0)
0000DBFE                            
0000DBFE                            loc_DB54:
0000DBFE 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DC02 6700                       		beq.s	loc_DB66	; if not, branch
0000DC04 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DC0A 08E8 0001 0022             		bset	#1,$22(a0)
0000DC10                            
0000DC10                            loc_DB66:
0000DC10 0800 0001                  		btst	#1,d0
0000DC14 6700                       		beq.s	loc_DB72
0000DC16 08E8 0005 0002             		bset	#5,2(a0)
0000DC1C                            
0000DC1C                            loc_DB72:
0000DC1C 0240 000F                  		andi.w	#$F,d0
0000DC20 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DC26 4E75                       		rts	
0000DC28                            ; ===========================================================================
0000DC28                            
0000DC28                            Obj41_Up:				; XREF: Obj41_Index
0000DC28 323C 001B                  		move.w	#$1B,d1
0000DC2C 343C 0008                  		move.w	#8,d2
0000DC30 363C 0010                  		move.w	#$10,d3
0000DC34 3828 0008                  		move.w	8(a0),d4
0000DC38 6100 0000                  		bsr.w	SolidObject
0000DC3C 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DC40 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DC42 4E75                       		rts	
0000DC44                            ; ===========================================================================
0000DC44                            
0000DC44                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DC44 5428 0024                  		addq.b	#2,$24(a0)
0000DC48 5069 000C                  		addq.w	#8,$C(a1)
0000DC4C 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DC52 08E9 0001 0022             		bset	#1,$22(a1)
0000DC58 08A9 0003 0022             		bclr	#3,$22(a1)
0000DC5E 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DC64 137C 0002 0024             		move.b	#2,$24(a1)
0000DC6A 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC70 4228 0025                  		clr.b	$25(a0)
0000DC74 303C 00CC                  		move.w	#$CC,d0
0000DC78 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC7E                            
0000DC7E                            Obj41_AniUp:				; XREF: Obj41_Index
0000DC7E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC84 6000 CB1C                  		bra.w	AnimateSprite
0000DC88                            ; ===========================================================================
0000DC88                            
0000DC88                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DC88 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DC8E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DC92 4E75                       		rts	
0000DC94                            ; ===========================================================================
0000DC94                            
0000DC94                            Obj41_LR:				; XREF: Obj41_Index
0000DC94 323C 0013                  		move.w	#$13,d1
0000DC98 343C 000E                  		move.w	#$E,d2
0000DC9C 363C 000F                  		move.w	#$F,d3
0000DCA0 3828 0008                  		move.w	8(a0),d4
0000DCA4 6100 0000                  		bsr.w	SolidObject
0000DCA8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DCAE 6600                       		bne.s	loc_DC0C
0000DCB0 117C 0008 0024             		move.b	#8,$24(a0)
0000DCB6                            
0000DCB6                            loc_DC0C:
0000DCB6 0828 0005 0022             		btst	#5,$22(a0)
0000DCBC 6600                       		bne.s	Obj41_BounceLR
0000DCBE 4E75                       		rts	
0000DCC0                            ; ===========================================================================
0000DCC0                            
0000DCC0                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DCC0 5428 0024                  		addq.b	#2,$24(a0)
0000DCC4 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DCCA 5069 0008                  		addq.w	#8,8(a1)
0000DCCE 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DCD4 6600                       		bne.s	loc_DC36	; if yes, branch
0000DCD6 0469 0010 0008             		subi.w	#$10,8(a1)
0000DCDC 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DCE0                            
0000DCE0                            loc_DC36:
0000DCE0 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DCE6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DCEC 0869 0000 0022             		bchg	#0,$22(a1)
0000DCF2 0829 0002 0022             		btst	#2,$22(a1)
0000DCF8 6600                       		bne.s	loc_DC56
0000DCFA 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DD00                            
0000DD00                            loc_DC56:
0000DD00 08A8 0005 0022             		bclr	#5,$22(a0)
0000DD06 08A9 0005 0022             		bclr	#5,$22(a1)
0000DD0C 303C 00CC                  		move.w	#$CC,d0
0000DD10 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD16                            
0000DD16                            Obj41_AniLR:				; XREF: Obj41_Index
0000DD16 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD1C 6000 CA84                  		bra.w	AnimateSprite
0000DD20                            ; ===========================================================================
0000DD20                            
0000DD20                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DD20 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DD26 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DD2A 4E75                       		rts	
0000DD2C                            ; ===========================================================================
0000DD2C                            
0000DD2C                            Obj41_Dwn:				; XREF: Obj41_Index
0000DD2C 323C 001B                  		move.w	#$1B,d1
0000DD30 343C 0008                  		move.w	#8,d2
0000DD34 363C 0010                  		move.w	#$10,d3
0000DD38 3828 0008                  		move.w	8(a0),d4
0000DD3C 6100 0000                  		bsr.w	SolidObject
0000DD40 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DD46 6600                       		bne.s	loc_DCA4
0000DD48 117C 000E 0024             		move.b	#$E,$24(a0)
0000DD4E                            
0000DD4E                            loc_DCA4:
0000DD4E 4A28 0025                  		tst.b	$25(a0)
0000DD52 6600                       		bne.s	locret_DCAE
0000DD54 4A44                       		tst.w	d4
0000DD56 6B00                       		bmi.s	Obj41_BounceDwn
0000DD58                            
0000DD58                            locret_DCAE:
0000DD58 4E75                       		rts	
0000DD5A                            ; ===========================================================================
0000DD5A                            
0000DD5A                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DD5A 5428 0024                  		addq.b	#2,$24(a0)
0000DD5E 5169 000C                  		subq.w	#8,$C(a1)
0000DD62 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DD68 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DD6C 08E9 0001 0022             		bset	#1,$22(a1)
0000DD72 08A9 0003 0022             		bclr	#3,$22(a1)
0000DD78 137C 0002 0024             		move.b	#2,$24(a1)
0000DD7E 08A8 0003 0022             		bclr	#3,$22(a0)
0000DD84 4228 0025                  		clr.b	$25(a0)
0000DD88 303C 00CC                  		move.w	#$CC,d0
0000DD8C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD92                            
0000DD92                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DD92 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD98 6000 CA08                  		bra.w	AnimateSprite
0000DD9C                            ; ===========================================================================
0000DD9C                            
0000DD9C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DD9C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DDA2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DDA6 4E75                       		rts	
0000DDA8                            ; ===========================================================================
0000DDA8                            Ani_obj41:
0000DDA8                            	include "_anim\obj41.asm"
0000DDA8                            ; ---------------------------------------------------------------------------
0000DDA8                            ; Animation script - springs
0000DDA8                            ; ---------------------------------------------------------------------------
0000DDA8 0000                       		dc.w byte_DD02-Ani_obj41
0000DDAA 0000                       		dc.w byte_DD0E-Ani_obj41
0000DDAC 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DDB8 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DDC4                            		even
0000DDC4                            		even
0000DDC4                            
0000DDC4                            ; ---------------------------------------------------------------------------
0000DDC4                            ; Sprite mappings - springs
0000DDC4                            ; ---------------------------------------------------------------------------
0000DDC4                            Map_obj41:
0000DDC4                            	include "_maps\obj41.asm"
0000DDC4                            ; ---------------------------------------------------------------------------
0000DDC4                            ; Sprite mappings - springs
0000DDC4                            ; ---------------------------------------------------------------------------
0000DDC4 0000                       		dc.w byte_DD26-Map_obj41
0000DDC6 0000                       		dc.w byte_DD31-Map_obj41
0000DDC8 0000                       		dc.w byte_DD37-Map_obj41
0000DDCA 0000                       		dc.w byte_DD47-Map_obj41
0000DDCC 0000                       		dc.w byte_DD4D-Map_obj41
0000DDCE 0000                       		dc.w byte_DD53-Map_obj41
0000DDD0 02                         byte_DD26:	dc.b 2
0000DDD1 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DDD6 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DDDB 01                         byte_DD31:	dc.b 1
0000DDDC 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DDE1 03                         byte_DD37:	dc.b 3
0000DDE2 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DDE7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DDEC 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DDF1 01                         byte_DD47:	dc.b 1
0000DDF2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DDF7 01                         byte_DD4D:	dc.b 1
0000DDF8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DDFD 04                         byte_DD53:	dc.b 4
0000DDFE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DE03 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DE08 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DE0D 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DE12                            		even
0000DE12                            		even
0000DE12                            
0000DE12                            ; ===========================================================================
0000DE12                            ; ---------------------------------------------------------------------------
0000DE12                            ; Object 42 - Newtron enemy (GHZ)
0000DE12                            ; ---------------------------------------------------------------------------
0000DE12                            
0000DE12                            Obj42:					; XREF: Obj_Index
0000DE12 7000                       		moveq	#0,d0
0000DE14 1028 0024                  		move.b	$24(a0),d0
0000DE18 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DE1C 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DE20                            ; ===========================================================================
0000DE20 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DE22 0000                       		dc.w Obj42_Action-Obj42_Index
0000DE24 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DE26                            ; ===========================================================================
0000DE26                            
0000DE26                            Obj42_Main:				; XREF: Obj42_Index
0000DE26 5428 0024                  		addq.b	#2,$24(a0)
0000DE2A 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DE32 317C 049B 0002             		move.w	#$49B,2(a0)
0000DE38 117C 0004 0001             		move.b	#4,1(a0)
0000DE3E 117C 0004 0018             		move.b	#4,$18(a0)
0000DE44 117C 0014 0019             		move.b	#$14,$19(a0)
0000DE4A 117C 0010 0016             		move.b	#$10,$16(a0)
0000DE50 117C 0008 0017             		move.b	#8,$17(a0)
0000DE56                            
0000DE56                            Obj42_Action:				; XREF: Obj42_Index
0000DE56 7000                       		moveq	#0,d0
0000DE58 1028 0025                  		move.b	$25(a0),d0
0000DE5C 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DE60 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DE64 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DE6A 6100 C936                  		bsr.w	AnimateSprite
0000DE6E 6000 0000                  		bra.w	MarkObjGone
0000DE72                            ; ===========================================================================
0000DE72 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DE74 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DE76 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DE78 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DE7A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DE7C                            ; ===========================================================================
0000DE7C                            
0000DE7C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DE7C 08E8 0000 0022             		bset	#0,$22(a0)
0000DE82 3038 D008                  		move.w	($FFFFD008).w,d0
0000DE86 9068 0008                  		sub.w	8(a0),d0
0000DE8A 6400                       		bcc.s	loc_DDEA
0000DE8C 4440                       		neg.w	d0
0000DE8E 08A8 0000 0022             		bclr	#0,$22(a0)
0000DE94                            
0000DE94                            loc_DDEA:
0000DE94 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DE98 6400                       		bcc.s	locret_DE12	; if not, branch
0000DE9A 5428 0025                  		addq.b	#2,$25(a0)
0000DE9E 117C 0001 001C             		move.b	#1,$1C(a0)
0000DEA4 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DEA8 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DEAA 317C 249B 0002             		move.w	#$249B,2(a0)
0000DEB0 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DEB6 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DEBC                            
0000DEBC                            locret_DE12:
0000DEBC 4E75                       		rts	
0000DEBE                            ; ===========================================================================
0000DEBE                            
0000DEBE                            Obj42_Type00:				; XREF: Obj42_Index2
0000DEBE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DEC4 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DEC6 08E8 0000 0022             		bset	#0,$22(a0)
0000DECC 3038 D008                  		move.w	($FFFFD008).w,d0
0000DED0 9068 0008                  		sub.w	8(a0),d0
0000DED4 6400                       		bcc.s	locret_DE32
0000DED6 08A8 0000 0022             		bclr	#0,$22(a0)
0000DEDC                            
0000DEDC                            locret_DE32:
0000DEDC 4E75                       		rts	
0000DEDE                            ; ===========================================================================
0000DEDE                            
0000DEDE                            Obj42_Fall:				; XREF: Obj42_Type00
0000DEDE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DEE4 6600                       		bne.s	loc_DE42
0000DEE6 117C 000C 0020             		move.b	#$C,$20(a0)
0000DEEC                            
0000DEEC                            loc_DE42:
0000DEEC 6100 F76A                  		bsr.w	ObjectFall
0000DEF0 6100 0000                  		bsr.w	ObjHitFloor
0000DEF4 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DEF6 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DEF8 D368 000C                  		add.w	d1,$C(a0)
0000DEFC 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DF02 5428 0025                  		addq.b	#2,$25(a0)
0000DF06 117C 0002 001C             		move.b	#2,$1C(a0)
0000DF0C 0828 0005 0002             		btst	#5,2(a0)
0000DF12 6700                       		beq.s	Obj42_Move
0000DF14 5228 001C                  		addq.b	#1,$1C(a0)
0000DF18                            
0000DF18                            Obj42_Move:
0000DF18 117C 000D 0020             		move.b	#$D,$20(a0)
0000DF1E 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DF24 0828 0000 0022             		btst	#0,$22(a0)
0000DF2A 6600                       		bne.s	locret_DE86
0000DF2C 4468 0010                  		neg.w	$10(a0)
0000DF30                            
0000DF30                            locret_DE86:
0000DF30 4E75                       		rts	
0000DF32                            ; ===========================================================================
0000DF32                            
0000DF32                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DF32 6100 F750                  		bsr.w	SpeedToPos
0000DF36 6100 0000                  		bsr.w	ObjHitFloor
0000DF3A 0C41 FFF8                  		cmpi.w	#-8,d1
0000DF3E 6D00                       		blt.s	loc_DEA2
0000DF40 0C41 000C                  		cmpi.w	#$C,d1
0000DF44 6C00                       		bge.s	loc_DEA2
0000DF46 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DF4A 4E75                       		rts	
0000DF4C                            ; ===========================================================================
0000DF4C                            
0000DF4C                            loc_DEA2:
0000DF4C 5428 0025                  		addq.b	#2,$25(a0)
0000DF50 4E75                       		rts	
0000DF52                            ; ===========================================================================
0000DF52                            
0000DF52                            Obj42_Speed:				; XREF: Obj42_Index2
0000DF52 6100 F730                  		bsr.w	SpeedToPos
0000DF56 4E75                       		rts	
0000DF58                            ; ===========================================================================
0000DF58                            
0000DF58                            Obj42_Type01:				; XREF: Obj42_Index2
0000DF58 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DF5E 6600                       		bne.s	Obj42_FireMissile
0000DF60 117C 000C 0020             		move.b	#$C,$20(a0)
0000DF66                            
0000DF66                            Obj42_FireMissile:
0000DF66 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DF6C 6600                       		bne.s	locret_DF14
0000DF6E 4A28 0032                  		tst.b	$32(a0)
0000DF72 6600                       		bne.s	locret_DF14
0000DF74 117C 0001 0032             		move.b	#1,$32(a0)
0000DF7A 6100 FBBA                  		bsr.w	SingleObjLoad
0000DF7E 6600                       		bne.s	locret_DF14
0000DF80 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000DF84 3368 0008 0008             		move.w	8(a0),8(a1)
0000DF8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DF90 5169 000C                  		subq.w	#8,$C(a1)
0000DF94 337C 0200 0010             		move.w	#$200,$10(a1)
0000DF9A 303C 0014                  		move.w	#$14,d0
0000DF9E 0828 0000 0022             		btst	#0,$22(a0)
0000DFA4 6600                       		bne.s	loc_DF04
0000DFA6 4440                       		neg.w	d0
0000DFA8 4469 0010                  		neg.w	$10(a1)
0000DFAC                            
0000DFAC                            loc_DF04:
0000DFAC D169 0008                  		add.w	d0,8(a1)
0000DFB0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000DFB6 137C 0001 0028             		move.b	#1,$28(a1)
0000DFBC                            
0000DFBC                            locret_DF14:
0000DFBC 4E75                       		rts	
0000DFBE                            ; ===========================================================================
0000DFBE                            
0000DFBE                            Obj42_Delete:				; XREF: Obj42_Index
0000DFBE 6000 F726                  		bra.w	DeleteObject
0000DFC2                            ; ===========================================================================
0000DFC2                            Ani_obj42:
0000DFC2                            	include "_anim\obj42.asm"
0000DFC2                            ; ---------------------------------------------------------------------------
0000DFC2                            ; Animation script - Newtron enemy
0000DFC2                            ; ---------------------------------------------------------------------------
0000DFC2 0000                       		dc.w byte_DF24-Ani_obj42
0000DFC4 0000                       		dc.w byte_DF28-Ani_obj42
0000DFC6 0000                       		dc.w byte_DF30-Ani_obj42
0000DFC8 0000                       		dc.w byte_DF34-Ani_obj42
0000DFCA 0000                       		dc.w byte_DF38-Ani_obj42
0000DFCC 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000DFD0 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000DFD8 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000DFDC 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000DFE0 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000DFEA                            		even
0000DFEA                            		even
0000DFEA                            
0000DFEA                            ; ---------------------------------------------------------------------------
0000DFEA                            ; Sprite mappings - Newtron enemy (GHZ)
0000DFEA                            ; ---------------------------------------------------------------------------
0000DFEA                            Map_obj42:
0000DFEA                            	include "_maps\obj42.asm"
0000DFEA                            ; ---------------------------------------------------------------------------
0000DFEA                            ; Sprite mappings - Newtron enemy (GHZ)
0000DFEA                            ; ---------------------------------------------------------------------------
0000DFEA 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000DFEE 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000DFF2 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000DFF6 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000DFFA 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000DFFE 0000                       		dc.w byte_DFF8-Map_obj42
0000E000 03                         byte_DF58:	dc.b 3
0000E001 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E006 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E00B FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E010 03                         byte_DF68:	dc.b 3
0000E011 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E016 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E01B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E020 03                         byte_DF78:	dc.b 3
0000E021 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E026 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E02B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E030 04                         byte_DF88:	dc.b 4
0000E031 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E036 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E03B FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E040 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E045 03                         byte_DF9D:	dc.b 3
0000E046 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E04B FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E050 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E055 02                         byte_DFAD:	dc.b 2
0000E056 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E05B F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E060 03                         byte_DFB8:	dc.b 3
0000E061 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E066 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E06B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E070 03                         byte_DFC8:	dc.b 3
0000E071 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E076 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E07B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E080 03                         byte_DFD8:	dc.b 3
0000E081 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E086 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E08B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E090 03                         byte_DFE8:	dc.b 3
0000E091 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E096 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E09B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E0A0 00                         byte_DFF8:	dc.b 0
0000E0A2 00                         		even
0000E0A2 00                         		even
0000E0A2                            
0000E0A2                            ; ===========================================================================
0000E0A2                            ; ---------------------------------------------------------------------------
0000E0A2                            ; Object 43 - Roller enemy (SYZ)
0000E0A2                            ; ---------------------------------------------------------------------------
0000E0A2                            
0000E0A2                            Obj43:					; XREF: Obj_Index
0000E0A2 7000                       		moveq	#0,d0
0000E0A4 1028 0024                  		move.b	$24(a0),d0
0000E0A8 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E0AC 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E0B0                            ; ===========================================================================
0000E0B0 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E0B2 0000                       		dc.w Obj43_Action-Obj43_Index
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            Obj43_Main:				; XREF: Obj43_Index
0000E0B4 117C 000E 0016             		move.b	#$E,$16(a0)
0000E0BA 117C 0008 0017             		move.b	#8,$17(a0)
0000E0C0 6100 F596                  		bsr.w	ObjectFall
0000E0C4 6100 0000                  		bsr.w	ObjHitFloor
0000E0C8 4A41                       		tst.w	d1
0000E0CA 6A00                       		bpl.s	locret_E052
0000E0CC D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E0D0 317C 0000 0012             		move.w	#0,$12(a0)
0000E0D6 5428 0024                  		addq.b	#2,$24(a0)
0000E0DA 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E0E2 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E0E8 117C 0004 0001             		move.b	#4,1(a0)
0000E0EE 117C 0004 0018             		move.b	#4,$18(a0)
0000E0F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000E0FA                            
0000E0FA                            locret_E052:
0000E0FA 4E75                       		rts	
0000E0FC                            ; ===========================================================================
0000E0FC                            
0000E0FC                            Obj43_Action:				; XREF: Obj43_Index
0000E0FC 7000                       		moveq	#0,d0
0000E0FE 1028 0025                  		move.b	$25(a0),d0
0000E102 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E106 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E10A 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E110 6100 C690                  		bsr.w	AnimateSprite
0000E114 3028 0008                  		move.w	8(a0),d0
0000E118 0240 FF80                  		andi.w	#$FF80,d0
0000E11C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E120 0441 0080                  		subi.w	#$80,d1
0000E124 0241 FF80                  		andi.w	#$FF80,d1
0000E128 9041                       		sub.w	d1,d0
0000E12A 0C40 0280                  		cmpi.w	#$280,d0
0000E12E 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E132 6000 F576                  		bra.w	DisplaySprite
0000E136                            ; ===========================================================================
0000E136                            
0000E136                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E136 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E13A 7000                       		moveq	#0,d0
0000E13C 1028 0023                  		move.b	$23(a0),d0
0000E140 6700                       		beq.s	Obj43_Delete
0000E142 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E148                            
0000E148                            Obj43_Delete:
0000E148 6000 F59C                  		bra.w	DeleteObject
0000E14C                            ; ===========================================================================
0000E14C 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E14E 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E150 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E152 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E154 3038 D008                  		move.w	($FFFFD008).w,d0
0000E158 0440 0100                  		subi.w	#$100,d0
0000E15C 6500                       		bcs.s	loc_E0D2
0000E15E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E162 6500                       		bcs.s	loc_E0D2
0000E164 5828 0025                  		addq.b	#4,$25(a0)
0000E168 117C 0002 001C             		move.b	#2,$1C(a0)
0000E16E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E174 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E17A                            
0000E17A                            loc_E0D2:
0000E17A 588F                       		addq.l	#4,sp
0000E17C 4E75                       		rts	
0000E17E                            ; ===========================================================================
0000E17E                            
0000E17E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E17E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E184 6700                       		beq.s	loc_E0F8
0000E186 5368 0030                  		subq.w	#1,$30(a0)
0000E18A 6A00                       		bpl.s	locret_E0F6
0000E18C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E192 317C 0700 0010             		move.w	#$700,$10(a0)
0000E198 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E19E                            
0000E19E                            locret_E0F6:
0000E19E 4E75                       		rts	
0000E1A0                            ; ===========================================================================
0000E1A0                            
0000E1A0                            loc_E0F8:
0000E1A0 5428 0025                  		addq.b	#2,$25(a0)
0000E1A4 4E75                       		rts	
0000E1A6                            ; ===========================================================================
0000E1A6                            
0000E1A6                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E1A6 6100 0000                  		bsr.w	Obj43_Stop
0000E1AA 6100 F4D8                  		bsr.w	SpeedToPos
0000E1AE 6100 0000                  		bsr.w	ObjHitFloor
0000E1B2 0C41 FFF8                  		cmpi.w	#-8,d1
0000E1B6 6D00                       		blt.s	Obj43_Jump
0000E1B8 0C41 000C                  		cmpi.w	#$C,d1
0000E1BC 6C00                       		bge.s	Obj43_Jump
0000E1BE D368 000C                  		add.w	d1,$C(a0)
0000E1C2 4E75                       		rts	
0000E1C4                            ; ===========================================================================
0000E1C4                            
0000E1C4                            Obj43_Jump:
0000E1C4 5428 0025                  		addq.b	#2,$25(a0)
0000E1C8 08E8 0000 0032             		bset	#0,$32(a0)
0000E1CE 6700                       		beq.s	locret_E12E
0000E1D0 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E1D6                            
0000E1D6                            locret_E12E:
0000E1D6 4E75                       		rts	
0000E1D8                            ; ===========================================================================
0000E1D8                            
0000E1D8                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E1D8 6100 F47E                  		bsr.w	ObjectFall
0000E1DC 4A68 0012                  		tst.w	$12(a0)
0000E1E0 6B00                       		bmi.s	locret_E150
0000E1E2 6100 0000                  		bsr.w	ObjHitFloor
0000E1E6 4A41                       		tst.w	d1
0000E1E8 6A00                       		bpl.s	locret_E150
0000E1EA D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E1EE 5528 0025                  		subq.b	#2,$25(a0)
0000E1F2 317C 0000 0012             		move.w	#0,$12(a0)
0000E1F8                            
0000E1F8                            locret_E150:
0000E1F8 4E75                       		rts	
0000E1FA                            
0000E1FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1FA                            
0000E1FA                            
0000E1FA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E1FA 4A28 0032                  		tst.b	$32(a0)
0000E1FE 6B00                       		bmi.s	locret_E188
0000E200 3038 D008                  		move.w	($FFFFD008).w,d0
0000E204 0440 0030                  		subi.w	#$30,d0
0000E208 9068 0008                  		sub.w	8(a0),d0
0000E20C 6400                       		bcc.s	locret_E188
0000E20E 117C 0000 001C             		move.b	#0,$1C(a0)
0000E214 117C 000E 0020             		move.b	#$E,$20(a0)
0000E21A 4268 0010                  		clr.w	$10(a0)
0000E21E 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E224 117C 0002 0025             		move.b	#2,$25(a0)
0000E22A 08E8 0007 0032             		bset	#7,$32(a0)
0000E230                            
0000E230                            locret_E188:
0000E230 4E75                       		rts	
0000E232                            ; End of function Obj43_Stop
0000E232                            
0000E232                            ; ===========================================================================
0000E232                            Ani_obj43:
0000E232                            	include "_anim\obj43.asm"
0000E232                            ; ---------------------------------------------------------------------------
0000E232                            ; Animation script - Roller enemy
0000E232                            ; ---------------------------------------------------------------------------
0000E232 0000                       		dc.w byte_E190-Ani_obj43
0000E234 0000                       		dc.w byte_E196-Ani_obj43
0000E236 0000                       		dc.w byte_E19C-Ani_obj43
0000E238 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E23E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E244 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E24A 00                         		even
0000E24A 00                         		even
0000E24A                            
0000E24A                            ; ---------------------------------------------------------------------------
0000E24A                            ; Sprite mappings - Roller enemy (SYZ)
0000E24A                            ; ---------------------------------------------------------------------------
0000E24A                            Map_obj43:
0000E24A                            	include "_maps\obj43.asm"
0000E24A                            ; ---------------------------------------------------------------------------
0000E24A                            ; Sprite mappings - Roller enemy (SYZ)
0000E24A                            ; ---------------------------------------------------------------------------
0000E24A 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E24E 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E252 0000                       		dc.w byte_E1CE-Map_obj43
0000E254 02                         byte_E1AC:	dc.b 2
0000E255 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E25A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E25F 02                         byte_E1B7:	dc.b 2
0000E260 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E265 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E26A 01                         byte_E1C2:	dc.b 1
0000E26B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E270 01                         byte_E1C8:	dc.b 1
0000E271 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E276 01                         byte_E1CE:	dc.b 1
0000E277 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E27C                            		even
0000E27C                            		even
0000E27C                            
0000E27C                            ; ===========================================================================
0000E27C                            ; ---------------------------------------------------------------------------
0000E27C                            ; Object 44 - walls (GHZ)
0000E27C                            ; ---------------------------------------------------------------------------
0000E27C                            
0000E27C                            Obj44:					; XREF: Obj_Index
0000E27C 7000                       		moveq	#0,d0
0000E27E 1028 0024                  		move.b	$24(a0),d0
0000E282 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E286 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E28A                            ; ===========================================================================
0000E28A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E28C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E28E 0000                       		dc.w Obj44_Display-Obj44_Index
0000E290                            ; ===========================================================================
0000E290                            
0000E290                            Obj44_Main:				; XREF: Obj44_Index
0000E290 5428 0024                  		addq.b	#2,$24(a0)
0000E294 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E29C 317C 434C 0002             		move.w	#$434C,2(a0)
0000E2A2 0028 0004 0001             		ori.b	#4,1(a0)
0000E2A8 117C 0008 0019             		move.b	#8,$19(a0)
0000E2AE 117C 0006 0018             		move.b	#6,$18(a0)
0000E2B4 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E2BA 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E2C0 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E2C2 5428 0024                  		addq.b	#2,$24(a0)
0000E2C6 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E2C8                            ; ===========================================================================
0000E2C8                            
0000E2C8                            Obj44_Solid:				; XREF: Obj44_Index
0000E2C8 323C 0013                  		move.w	#$13,d1
0000E2CC 343C 0028                  		move.w	#$28,d2
0000E2D0 6100 A816                  		bsr.w	Obj44_SolidWall
0000E2D4                            
0000E2D4                            Obj44_Display:				; XREF: Obj44_Index
0000E2D4 6100 F3D4                  		bsr.w	DisplaySprite
0000E2D8 3028 0008                  		move.w	8(a0),d0
0000E2DC 0240 FF80                  		andi.w	#$FF80,d0
0000E2E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E2E4 0441 0080                  		subi.w	#$80,d1
0000E2E8 0241 FF80                  		andi.w	#$FF80,d1
0000E2EC 9041                       		sub.w	d1,d0
0000E2EE 0C40 0280                  		cmpi.w	#$280,d0
0000E2F2 6200 F3F2                  		bhi.w	DeleteObject
0000E2F6 4E75                       		rts	
0000E2F8                            ; ===========================================================================
0000E2F8                            ; ---------------------------------------------------------------------------
0000E2F8                            ; Sprite mappings - walls (GHZ)
0000E2F8                            ; ---------------------------------------------------------------------------
0000E2F8                            Map_obj44:
0000E2F8                            	include "_maps\obj44.asm"
0000E2F8                            ; ---------------------------------------------------------------------------
0000E2F8                            ; Sprite mappings - walls (GHZ)
0000E2F8                            ; ---------------------------------------------------------------------------
0000E2F8 0000                       		dc.w byte_E256-Map_obj44
0000E2FA 0000                       		dc.w byte_E26B-Map_obj44
0000E2FC 0000                       		dc.w byte_E280-Map_obj44
0000E2FE 04                         byte_E256:	dc.b 4
0000E2FF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E304 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E309 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E30E 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E313 04                         byte_E26B:	dc.b 4
0000E314 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E319 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E31E 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E323 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E328 04                         byte_E280:	dc.b 4
0000E329 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E32E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E333 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E338 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E33E 00                         		even
0000E33E 00                         		even
0000E33E                            
0000E33E                            ; ===========================================================================
0000E33E                            ; ---------------------------------------------------------------------------
0000E33E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E33E                            ; ---------------------------------------------------------------------------
0000E33E                            
0000E33E                            Obj13:					; XREF: Obj_Index
0000E33E 7000                       		moveq	#0,d0
0000E340 1028 0024                  		move.b	$24(a0),d0
0000E344 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E348 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E34C 6000 0000                  		bra.w	Obj14_ChkDel
0000E350                            ; ===========================================================================
0000E350 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E352 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E354                            ; ---------------------------------------------------------------------------
0000E354                            ;
0000E354                            ; Lava ball production rates
0000E354                            ;
0000E354 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E35A                            ; ===========================================================================
0000E35A                            
0000E35A                            Obj13_Main:				; XREF: Obj13_Index
0000E35A 5428 0024                  		addq.b	#2,$24(a0)
0000E35E 1028 0028                  		move.b	$28(a0),d0
0000E362 E848                       		lsr.w	#4,d0
0000E364 0240 000F                  		andi.w	#$F,d0
0000E368 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E36E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E374 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E37A                            
0000E37A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E37A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E37E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E380 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E386 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E38A 6600                       		bne.s	locret_E302
0000E38C 6100 F7A8                  		bsr.w	SingleObjLoad
0000E390 6600                       		bne.s	locret_E302
0000E392 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E396 3368 0008 0008             		move.w	8(a0),8(a1)
0000E39C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E3A2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E3A8                            
0000E3A8                            locret_E302:
0000E3A8 4E75                       		rts	
0000E3AA                            ; ===========================================================================
0000E3AA                            ; ---------------------------------------------------------------------------
0000E3AA                            ; Object 14 - lava balls (MZ, SLZ)
0000E3AA                            ; ---------------------------------------------------------------------------
0000E3AA                            
0000E3AA                            Obj14:					; XREF: Obj_Index
0000E3AA 7000                       		moveq	#0,d0
0000E3AC 1028 0024                  		move.b	$24(a0),d0
0000E3B0 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E3B4 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E3B8 6000 F2F0                  		bra.w	DisplaySprite
0000E3BC                            ; ===========================================================================
0000E3BC 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E3BE 0000                       		dc.w Obj14_Action-Obj14_Index
0000E3C0 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E3C2                            
0000E3C2 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E3CC 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E3D4                            ; ===========================================================================
0000E3D4                            
0000E3D4                            Obj14_Main:				; XREF: Obj14_Index
0000E3D4 5428 0024                  		addq.b	#2,$24(a0)
0000E3D8 117C 0008 0016             		move.b	#8,$16(a0)
0000E3DE 117C 0008 0017             		move.b	#8,$17(a0)
0000E3E4 217C 0000 B3F4 0004        		move.l	#Map_obj14,4(a0)
0000E3EC 317C 0345 0002             		move.w	#$345,2(a0)
0000E3F2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E3F8 6600                       		bne.s	loc_E35A
0000E3FA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E400                            
0000E400                            loc_E35A:
0000E400 117C 0004 0001             		move.b	#4,1(a0)
0000E406 117C 0003 0018             		move.b	#3,$18(a0)
0000E40C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E412 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E418 4A28 0029                  		tst.b	$29(a0)
0000E41C 6700                       		beq.s	Obj14_SetSpeed
0000E41E 5428 0018                  		addq.b	#2,$18(a0)
0000E422                            
0000E422                            Obj14_SetSpeed:
0000E422 7000                       		moveq	#0,d0
0000E424 1028 0028                  		move.b	$28(a0),d0
0000E428 D040                       		add.w	d0,d0
0000E42A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E430 117C 0008 0019             		move.b	#8,$19(a0)
0000E436 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E43C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E43E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E444 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E44A 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E450 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E456                            
0000E456                            Obj14_PlaySnd:
0000E456 303C 00AE                  		move.w	#$AE,d0
0000E45A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E460                            
0000E460                            Obj14_Action:				; XREF: Obj14_Index
0000E460 7000                       		moveq	#0,d0
0000E462 1028 0028                  		move.b	$28(a0),d0
0000E466 D040                       		add.w	d0,d0
0000E468 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E46C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E470 6100 F212                  		bsr.w	SpeedToPos
0000E474 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E47A 6100 C326                  		bsr.w	AnimateSprite
0000E47E                            
0000E47E                            Obj14_ChkDel:				; XREF: Obj13
0000E47E 3028 0008                  		move.w	8(a0),d0
0000E482 0240 FF80                  		andi.w	#$FF80,d0
0000E486 3238 F700                  		move.w	($FFFFF700).w,d1
0000E48A 0441 0080                  		subi.w	#$80,d1
0000E48E 0241 FF80                  		andi.w	#$FF80,d1
0000E492 9041                       		sub.w	d1,d0
0000E494 0C40 0280                  		cmpi.w	#$280,d0
0000E498 6200 F24C                  		bhi.w	DeleteObject
0000E49C 4E75                       		rts	
0000E49E                            ; ===========================================================================
0000E49E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E4A2 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E4A6 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E4AA 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E4AE 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E4B0                            ; ===========================================================================
0000E4B0                            ; lavaball types 00-03 fly up and fall back down
0000E4B0                            
0000E4B0                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E4B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E4B6 3028 0030                  		move.w	$30(a0),d0
0000E4BA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E4BE 6400                       		bcc.s	loc_E41E	; if not, branch
0000E4C0 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E4C4                            
0000E4C4                            loc_E41E:
0000E4C4 08A8 0001 0022             		bclr	#1,$22(a0)
0000E4CA 4A68 0012                  		tst.w	$12(a0)
0000E4CE 6A00                       		bpl.s	locret_E430
0000E4D0 08E8 0001 0022             		bset	#1,$22(a0)
0000E4D6                            
0000E4D6                            locret_E430:
0000E4D6 4E75                       		rts	
0000E4D8                            ; ===========================================================================
0000E4D8                            ; lavaball type	04 flies up until it hits the ceiling
0000E4D8                            
0000E4D8                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E4D8 08E8 0001 0022             		bset	#1,$22(a0)
0000E4DE 6100 0000                  		bsr.w	ObjHitCeiling
0000E4E2 4A41                       		tst.w	d1
0000E4E4 6A00                       		bpl.s	locret_E452
0000E4E6 117C 0008 0028             		move.b	#8,$28(a0)
0000E4EC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E4F2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E4F8                            
0000E4F8                            locret_E452:
0000E4F8 4E75                       		rts	
0000E4FA                            ; ===========================================================================
0000E4FA                            ; lavaball type	05 falls down until it hits the	floor
0000E4FA                            
0000E4FA                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E4FA 08A8 0001 0022             		bclr	#1,$22(a0)
0000E500 6100 0000                  		bsr.w	ObjHitFloor
0000E504 4A41                       		tst.w	d1
0000E506 6A00                       		bpl.s	locret_E474
0000E508 117C 0008 0028             		move.b	#8,$28(a0)
0000E50E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E514 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E51A                            
0000E51A                            locret_E474:
0000E51A 4E75                       		rts	
0000E51C                            ; ===========================================================================
0000E51C                            ; lavaball types 06-07 move sideways
0000E51C                            
0000E51C                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E51C 08E8 0000 0022             		bset	#0,$22(a0)
0000E522 76F8                       		moveq	#-8,d3
0000E524 6100 0000                  		bsr.w	ObjHitWallLeft
0000E528 4A41                       		tst.w	d1
0000E52A 6A00                       		bpl.s	locret_E498
0000E52C 117C 0008 0028             		move.b	#8,$28(a0)
0000E532 117C 0003 001C             		move.b	#3,$1C(a0)
0000E538 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E53E                            
0000E53E                            locret_E498:
0000E53E 4E75                       		rts	
0000E540                            ; ===========================================================================
0000E540                            
0000E540                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E540 08A8 0000 0022             		bclr	#0,$22(a0)
0000E546 7608                       		moveq	#8,d3
0000E548 6100 0000                  		bsr.w	ObjHitWallRight
0000E54C 4A41                       		tst.w	d1
0000E54E 6A00                       		bpl.s	locret_E4BC
0000E550 117C 0008 0028             		move.b	#8,$28(a0)
0000E556 117C 0003 001C             		move.b	#3,$1C(a0)
0000E55C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E562                            
0000E562                            locret_E4BC:
0000E562 4E75                       		rts	
0000E564                            ; ===========================================================================
0000E564                            
0000E564                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E564 4E75                       		rts	
0000E566                            ; ===========================================================================
0000E566                            
0000E566                            Obj14_Delete:				; XREF: Obj14_Index
0000E566 6000 F17E                  		bra.w	DeleteObject
0000E56A                            ; ===========================================================================
0000E56A                            Ani_obj14:
0000E56A                            	include "_anim\obj14.asm"
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A                            ; Animation script - lava balls
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A 0000                       		dc.w byte_E4CC-Ani_obj14
0000E56C 0000                       		dc.w byte_E4D2-Ani_obj14
0000E56E 0000                       		dc.w byte_E4D6-Ani_obj14
0000E570 0000                       		dc.w byte_E4DC-Ani_obj14
0000E572 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E578 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E57C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E582 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E586                            		even
0000E586                            		even
0000E586                            
0000E586                            ; ===========================================================================
0000E586                            ; ---------------------------------------------------------------------------
0000E586                            ; Object 6D - flame thrower (SBZ)
0000E586                            ; ---------------------------------------------------------------------------
0000E586                            
0000E586                            Obj6D:					; XREF: Obj_Index
0000E586 7000                       		moveq	#0,d0
0000E588 1028 0024                  		move.b	$24(a0),d0
0000E58C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E590 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E594                            ; ===========================================================================
0000E594 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E596 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E598                            ; ===========================================================================
0000E598                            
0000E598                            Obj6D_Main:				; XREF: Obj6D_Index
0000E598 5428 0024                  		addq.b	#2,$24(a0)
0000E59C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E5A4 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E5AA 0028 0004 0001             		ori.b	#4,1(a0)
0000E5B0 117C 0001 0018             		move.b	#1,$18(a0)
0000E5B6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E5BC 117C 000C 0019             		move.b	#$C,$19(a0)
0000E5C2 1028 0028                  		move.b	$28(a0),d0
0000E5C6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E5CA D040                       		add.w	d0,d0		; multiply by 2
0000E5CC 3140 0030                  		move.w	d0,$30(a0)
0000E5D0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E5D4 1028 0028                  		move.b	$28(a0),d0
0000E5D8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E5DC EB48                       		lsl.w	#5,d0		; multiply by $20
0000E5DE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E5E2 117C 000A 0036             		move.b	#$A,$36(a0)
0000E5E8 0828 0001 0022             		btst	#1,$22(a0)
0000E5EE 6700                       		beq.s	Obj6D_Action
0000E5F0 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5F6 117C 0015 0036             		move.b	#$15,$36(a0)
0000E5FC                            
0000E5FC                            Obj6D_Action:				; XREF: Obj6D_Index
0000E5FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E600 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E602 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E608 0868 0000 001C             		bchg	#0,$1C(a0)
0000E60E 6700                       		beq.s	loc_E57A
0000E610 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E616 303C 00B3                  		move.w	#$B3,d0
0000E61A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flame sound
0000E620                            
0000E620                            loc_E57A:
0000E620 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E626 6100 C17A                  		bsr.w	AnimateSprite
0000E62A 117C 0000 0020             		move.b	#0,$20(a0)
0000E630 1028 0036                  		move.b	$36(a0),d0
0000E634 B028 001A                  		cmp.b	$1A(a0),d0
0000E638 6600                       		bne.s	Obj6D_ChkDel
0000E63A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E640                            
0000E640                            Obj6D_ChkDel:
0000E640 3028 0008                  		move.w	8(a0),d0
0000E644 0240 FF80                  		andi.w	#$FF80,d0
0000E648 3238 F700                  		move.w	($FFFFF700).w,d1
0000E64C 0441 0080                  		subi.w	#$80,d1
0000E650 0241 FF80                  		andi.w	#$FF80,d1
0000E654 9041                       		sub.w	d1,d0
0000E656 0C40 0280                  		cmpi.w	#$280,d0
0000E65A 6200 F08A                  		bhi.w	DeleteObject
0000E65E 6000 F04A                  		bra.w	DisplaySprite
0000E662                            ; ===========================================================================
0000E662                            Ani_obj6D:
0000E662                            	include "_anim\obj6D.asm"
0000E662                            ; ---------------------------------------------------------------------------
0000E662                            ; Animation script - flamethrower (SBZ)
0000E662                            ; ---------------------------------------------------------------------------
0000E662 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E664 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E666 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E668 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E66A 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E678 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E682 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E690 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E69A                            		even
0000E69A                            		even
0000E69A                            
0000E69A                            ; ---------------------------------------------------------------------------
0000E69A                            ; Sprite mappings - flame thrower (SBZ)
0000E69A                            ; ---------------------------------------------------------------------------
0000E69A                            Map_obj6D:
0000E69A                            	include "_maps\obj6D.asm"
0000E69A                            ; ---------------------------------------------------------------------------
0000E69A                            ; Sprite mappings - flame thrower (SBZ)
0000E69A                            ; ---------------------------------------------------------------------------
0000E69A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E69E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E6A2 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E6A6 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E6AA 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E6AE 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E6B2 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E6B6 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E6BA 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E6BE 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E6C2 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E6C6 01                         byte_E620:	dc.b 1
0000E6C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6CC 02                         byte_E626:	dc.b 2
0000E6CD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6D2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6D7 02                         byte_E631:	dc.b 2
0000E6D8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6E2 03                         byte_E63C:	dc.b 3
0000E6E3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6E8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6F2 03                         byte_E64C:	dc.b 3
0000E6F3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6F8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6FD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E702 04                         byte_E65C:	dc.b 4
0000E703 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E708 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E70D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E712 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E717 04                         byte_E671:	dc.b 4
0000E718 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E71D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E722 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E727 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E72C 05                         byte_E686:	dc.b 5
0000E72D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E732 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E737 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E73C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E741 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E746 05                         byte_E6A0:	dc.b 5
0000E747 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E74C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E751 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E756 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E75B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E760 06                         byte_E6BA:	dc.b 6
0000E761 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E766 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E76B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E770 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E775 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E77A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E77F 06                         byte_E6D9:	dc.b 6
0000E780 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E785 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E78A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E78F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E794 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E799 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E79E 01                         byte_E6F8:	dc.b 1
0000E79F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7A4 02                         byte_E6FE:	dc.b 2
0000E7A5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7AA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7AF 02                         byte_E709:	dc.b 2
0000E7B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7B5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7BA 03                         byte_E714:	dc.b 3
0000E7BB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7C0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7C5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7CA 03                         byte_E724:	dc.b 3
0000E7CB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7D0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7D5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7DA 04                         byte_E734:	dc.b 4
0000E7DB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7E0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7E5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7EA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7EF 04                         byte_E749:	dc.b 4
0000E7F0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E7F5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7FA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7FF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E804 05                         byte_E75E:	dc.b 5
0000E805 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E80A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E80F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E814 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E819 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E81E 05                         byte_E778:	dc.b 5
0000E81F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E824 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E829 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E82E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E833 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E838 06                         byte_E792:	dc.b 6
0000E839 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E83E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E843 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E848 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E84D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E852 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E857 06                         byte_E7B1:	dc.b 6
0000E858 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E85D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E862 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E867 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E86C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E871 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E876                            		even
0000E876                            		even
0000E876                            
0000E876                            ; ===========================================================================
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E876                            ; ---------------------------------------------------------------------------
0000E876                            
0000E876                            Obj46:					; XREF: Obj_Index
0000E876 7000                       		moveq	#0,d0
0000E878 1028 0024                  		move.b	$24(a0),d0
0000E87C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E880 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E884                            ; ===========================================================================
0000E884 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E886 0000                       		dc.w Obj46_Action-Obj46_Index
0000E888                            ; ===========================================================================
0000E888                            
0000E888                            Obj46_Main:				; XREF: Obj46_Index
0000E888 5428 0024                  		addq.b	#2,$24(a0)
0000E88C 117C 000F 0016             		move.b	#$F,$16(a0)
0000E892 117C 000F 0017             		move.b	#$F,$17(a0)
0000E898 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E8A0 317C 4000 0002             		move.w	#$4000,2(a0)
0000E8A6 117C 0004 0001             		move.b	#4,1(a0)
0000E8AC 117C 0003 0018             		move.b	#3,$18(a0)
0000E8B2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8BE 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E8C4                            
0000E8C4                            Obj46_Action:				; XREF: Obj46_Index
0000E8C4 4A28 0001                  		tst.b	1(a0)
0000E8C8 6A00                       		bpl.s	Obj46_ChkDel
0000E8CA 7000                       		moveq	#0,d0
0000E8CC 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E8D0 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E8D4 D040                       		add.w	d0,d0
0000E8D6 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E8DA 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E8DE 323C 001B                  		move.w	#$1B,d1
0000E8E2 343C 0010                  		move.w	#$10,d2
0000E8E6 363C 0011                  		move.w	#$11,d3
0000E8EA 3828 0008                  		move.w	8(a0),d4
0000E8EE 6100 0000                  		bsr.w	SolidObject
0000E8F2                            
0000E8F2                            Obj46_ChkDel:
0000E8F2 6100 EDB6                  		bsr.w	DisplaySprite
0000E8F6 3028 0008                  		move.w	8(a0),d0
0000E8FA 0240 FF80                  		andi.w	#$FF80,d0
0000E8FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E902 0441 0080                  		subi.w	#$80,d1
0000E906 0241 FF80                  		andi.w	#$FF80,d1
0000E90A 9041                       		sub.w	d1,d0
0000E90C 0C40 0280                  		cmpi.w	#$280,d0
0000E910 6200 EDD4                  		bhi.w	DeleteObject
0000E914 4E75                       		rts	
0000E916                            ; ===========================================================================
0000E916 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E918 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E91A 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E91C 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E91E 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E920                            ; ===========================================================================
0000E920                            
0000E920                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E920 4E75                       		rts	
0000E922                            ; ===========================================================================
0000E922                            
0000E922                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E922 3038 D008                  		move.w	($FFFFD008).w,d0
0000E926 9068 0008                  		sub.w	8(a0),d0
0000E92A 6400                       		bcc.s	loc_E888
0000E92C 4440                       		neg.w	d0
0000E92E                            
0000E92E                            loc_E888:
0000E92E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E932 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E934 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E93A                            
0000E93A                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E93A 7000                       		moveq	#0,d0
0000E93C 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E940 0828 0003 0028             		btst	#3,$28(a0)
0000E946 6700                       		beq.s	loc_E8A8
0000E948 4440                       		neg.w	d0
0000E94A 0640 0010                  		addi.w	#$10,d0
0000E94E                            
0000E94E                            loc_E8A8:
0000E94E 3228 0030                  		move.w	$30(a0),d1
0000E952 9240                       		sub.w	d0,d1
0000E954 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E958 4E75                       		rts	
0000E95A                            ; ===========================================================================
0000E95A                            
0000E95A                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E95A 6100 ED28                  		bsr.w	SpeedToPos
0000E95E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E964 6100 0000                  		bsr.w	ObjHitFloor
0000E968 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E96A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E96E D368 000C                  		add.w	d1,$C(a0)
0000E972 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000E976 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E97C 117C 0004 0028             		move.b	#4,$28(a0)
0000E982 3011                       		move.w	(a1),d0
0000E984 0240 03FF                  		andi.w	#$3FF,d0
0000E988 0C40 02E8                  		cmpi.w	#$2E8,d0
0000E98C 6400                       		bcc.s	locret_E8EE
0000E98E 117C 0000 0028             		move.b	#0,$28(a0)
0000E994                            
0000E994                            locret_E8EE:
0000E994 4E75                       		rts	
0000E996                            ; ===========================================================================
0000E996                            
0000E996                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000E996 7000                       		moveq	#0,d0
0000E998 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E99C E648                       		lsr.w	#3,d0
0000E99E 3228 0030                  		move.w	$30(a0),d1
0000E9A2 9240                       		sub.w	d0,d1
0000E9A4 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000E9A8 4E75                       		rts	
0000E9AA                            ; ===========================================================================
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA                            Map_obj46:
0000E9AA                            	include "_maps\obj46.asm"
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E9AA                            ; ---------------------------------------------------------------------------
0000E9AA 0000                       		dc.w byte_E906-Map_obj46
0000E9AC 01                         byte_E906:	dc.b 1
0000E9AD F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000E9B2                            		even
0000E9B2                            		even
0000E9B2                            
0000E9B2                            ; ===========================================================================
0000E9B2                            ; ---------------------------------------------------------------------------
0000E9B2                            ; Object 12 - lamp (SYZ)
0000E9B2                            ; ---------------------------------------------------------------------------
0000E9B2                            
0000E9B2                            Obj12:					; XREF: Obj_Index
0000E9B2 7000                       		moveq	#0,d0
0000E9B4 1028 0024                  		move.b	$24(a0),d0
0000E9B8 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000E9BC 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000E9C0                            ; ===========================================================================
0000E9C0 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000E9C2 0000                       		dc.w Obj12_Animate-Obj12_Index
0000E9C4                            ; ===========================================================================
0000E9C4                            
0000E9C4                            Obj12_Main:				; XREF: Obj12_Index
0000E9C4 5428 0024                  		addq.b	#2,$24(a0)
0000E9C8 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000E9D0 317C 0000 0002             		move.w	#0,2(a0)
0000E9D6 117C 0004 0001             		move.b	#4,1(a0)
0000E9DC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E9E2 117C 0006 0018             		move.b	#6,$18(a0)
0000E9E8                            
0000E9E8                            Obj12_Animate:				; XREF: Obj12_Index
0000E9E8 5328 001E                  		subq.b	#1,$1E(a0)
0000E9EC 6A00                       		bpl.s	Obj12_ChkDel
0000E9EE 117C 0007 001E             		move.b	#7,$1E(a0)
0000E9F4 5228 001A                  		addq.b	#1,$1A(a0)
0000E9F8 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000E9FE 6500                       		bcs.s	Obj12_ChkDel
0000EA00 117C 0000 001A             		move.b	#0,$1A(a0)
0000EA06                            
0000EA06                            Obj12_ChkDel:
0000EA06 3028 0008                  		move.w	8(a0),d0
0000EA0A 0240 FF80                  		andi.w	#$FF80,d0
0000EA0E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA12 0441 0080                  		subi.w	#$80,d1
0000EA16 0241 FF80                  		andi.w	#$FF80,d1
0000EA1A 9041                       		sub.w	d1,d0
0000EA1C 0C40 0280                  		cmpi.w	#$280,d0
0000EA20 6200 ECC4                  		bhi.w	DeleteObject
0000EA24 6000 EC84                  		bra.w	DisplaySprite
0000EA28                            ; ===========================================================================
0000EA28                            ; ---------------------------------------------------------------------------
0000EA28                            ; Sprite mappings - lamp (SYZ)
0000EA28                            ; ---------------------------------------------------------------------------
0000EA28                            Map_obj12:
0000EA28                            	include "_maps\obj12.asm"
0000EA28                            ; ---------------------------------------------------------------------------
0000EA28                            ; Sprite mappings - lamp (SYZ)
0000EA28                            ; ---------------------------------------------------------------------------
0000EA28 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EA2C 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EA30 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EA34 02                         byte_E98E:	dc.b 2
0000EA35 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EA3A 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EA3F 02                         byte_E999:	dc.b 2
0000EA40 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EA45 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EA4A 02                         byte_E9A4:	dc.b 2
0000EA4B F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EA50 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EA55 02                         byte_E9AF:	dc.b 2
0000EA56 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EA5B 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EA60 02                         byte_E9BA:	dc.b 2
0000EA61 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EA66 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EA6B 02                         byte_E9C5:	dc.b 2
0000EA6C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EA71 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EA76                            		even
0000EA76                            		even
0000EA76                            
0000EA76                            ; ===========================================================================
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            ; Object 47 - pinball bumper (SYZ)
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            
0000EA76                            Obj47:					; XREF: Obj_Index
0000EA76 7000                       		moveq	#0,d0
0000EA78 1028 0024                  		move.b	$24(a0),d0
0000EA7C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EA80 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EA84                            ; ===========================================================================
0000EA84 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EA86 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EA88                            ; ===========================================================================
0000EA88                            
0000EA88                            Obj47_Main:				; XREF: Obj47_Index
0000EA88 5428 0024                  		addq.b	#2,$24(a0)
0000EA8C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EA94 317C 0380 0002             		move.w	#$380,2(a0)
0000EA9A 117C 0004 0001             		move.b	#4,1(a0)
0000EAA0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAA6 117C 0001 0018             		move.b	#1,$18(a0)
0000EAAC 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EAB2                            
0000EAB2                            Obj47_Hit:				; XREF: Obj47_Index
0000EAB2 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EAB6 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EABA 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0000EAC0 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0000EAC6 4228 0021                  		clr.b	$21(a0)
0000EACA 43F8 D000                  		lea	($FFFFD000).w,a1
0000EACE 3228 0008                  		move.w	8(a0),d1
0000EAD2 3428 000C                  		move.w	$C(a0),d2
0000EAD6 9269 0008                  		sub.w	8(a1),d1
0000EADA 9469 000C                  		sub.w	$C(a1),d2
0000EADE 4EB9 0000 2BBA             		jsr	(CalcAngle).l
0000EAE4 4EB9 0000 28EC             		jsr	(CalcSine).l
0000EAEA C3FC F900                  		muls.w	#-$700,d1
0000EAEE E081                       		asr.l	#8,d1
0000EAF0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EAF4 C1FC F900                  		muls.w	#-$700,d0
0000EAF8 E080                       		asr.l	#8,d0
0000EAFA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EAFE 08E9 0001 0022             		bset	#1,$22(a1)
0000EB04 08A9 0004 0022             		bclr	#4,$22(a1)
0000EB0A 08A9 0005 0022             		bclr	#5,$22(a1)
0000EB10 4229 003C                  		clr.b	$3C(a1)
0000EB14 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB1A 303C 00B4                  		move.w	#$B4,d0
0000EB1E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EB24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB28 7000                       		moveq	#0,d0
0000EB2A 1028 0023                  		move.b	$23(a0),d0
0000EB2E 6700                       		beq.s	Obj47_Score
0000EB30 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EB36 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EB38 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EB3C                            
0000EB3C                            Obj47_Score:
0000EB3C 7001                       		moveq	#1,d0
0000EB3E 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EB44 6100 EFF0                  		bsr.w	SingleObjLoad
0000EB48 6600                       		bne.s	Obj47_Display
0000EB4A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EB4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB54 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB5A 137C 0004 001A             		move.b	#4,$1A(a1)
0000EB60                            
0000EB60                            Obj47_Display:
0000EB60 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EB66 6100 BC3A                  		bsr.w	AnimateSprite
0000EB6A 3028 0008                  		move.w	8(a0),d0
0000EB6E 0240 FF80                  		andi.w	#$FF80,d0
0000EB72 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB76 0441 0080                  		subi.w	#$80,d1
0000EB7A 0241 FF80                  		andi.w	#$FF80,d1
0000EB7E 9041                       		sub.w	d1,d0
0000EB80 0C40 0280                  		cmpi.w	#$280,d0
0000EB84 6200                       		bhi.s	Obj47_ChkHit
0000EB86 6000 EB22                  		bra.w	DisplaySprite
0000EB8A                            ; ===========================================================================
0000EB8A                            
0000EB8A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EB8A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB8E 7000                       		moveq	#0,d0
0000EB90 1028 0023                  		move.b	$23(a0),d0
0000EB94 6700                       		beq.s	Obj47_Delete
0000EB96 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EB9C                            
0000EB9C                            Obj47_Delete:
0000EB9C 6000 EB48                  		bra.w	DeleteObject
0000EBA0                            ; ===========================================================================
0000EBA0                            Ani_obj47:
0000EBA0                            	include "_anim\obj47.asm"
0000EBA0                            ; ---------------------------------------------------------------------------
0000EBA0                            ; Animation script - flamethrower (SBZ)
0000EBA0                            ; ---------------------------------------------------------------------------
0000EBA0 0000                       		dc.w byte_EAF4-Ani_obj47
0000EBA2 0000                       		dc.w byte_EAF8-Ani_obj47
0000EBA4 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EBA8 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EBB0                            		even
0000EBB0                            		even
0000EBB0                            
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0                            ; Sprite mappings - pinball bumper (SYZ)
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0                            Map_obj47:
0000EBB0                            	include "_maps\obj47.asm"
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0                            ; Sprite mappings - pinball bumper (SYZ)
0000EBB0                            ; ---------------------------------------------------------------------------
0000EBB0 0000                       		dc.w byte_EB06-Map_obj47
0000EBB2 0000                       		dc.w byte_EB11-Map_obj47
0000EBB4 0000                       		dc.w byte_EB1C-Map_obj47
0000EBB6 02                         byte_EB06:	dc.b 2
0000EBB7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EBBC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EBC1 02                         byte_EB11:	dc.b 2
0000EBC2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EBC7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EBCC 02                         byte_EB1C:	dc.b 2
0000EBCD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EBD2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EBD8 00                         		even
0000EBD8 00                         		even
0000EBD8                            
0000EBD8                            ; ===========================================================================
0000EBD8                            ; ---------------------------------------------------------------------------
0000EBD8                            ; Object 0D - signpost at the end of a level
0000EBD8                            ; ---------------------------------------------------------------------------
0000EBD8                            
0000EBD8                            Obj0D:					; XREF: Obj_Index
0000EBD8 7000                       		moveq	#0,d0
0000EBDA 1028 0024                  		move.b	$24(a0),d0
0000EBDE 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EBE2 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EBE6 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EBEC 6100 BBB4                  		bsr.w	AnimateSprite
0000EBF0 6100 EAB8                  		bsr.w	DisplaySprite
0000EBF4 3028 0008                  		move.w	8(a0),d0
0000EBF8 0240 FF80                  		andi.w	#$FF80,d0
0000EBFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC00 0441 0080                  		subi.w	#$80,d1
0000EC04 0241 FF80                  		andi.w	#$FF80,d1
0000EC08 9041                       		sub.w	d1,d0
0000EC0A 0C40 0280                  		cmpi.w	#$280,d0
0000EC0E 6200 EAD6                  		bhi.w	DeleteObject
0000EC12 4E75                       		rts	
0000EC14                            ; ===========================================================================
0000EC14 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EC16 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EC18 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EC1A 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EC1C 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EC1E                            ; ===========================================================================
0000EC1E                            
0000EC1E                            Obj0D_Main:				; XREF: Obj0D_Index
0000EC1E 5428 0024                  		addq.b	#2,$24(a0)
0000EC22 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EC2A 317C 0680 0002             		move.w	#$680,2(a0)
0000EC30 117C 0004 0001             		move.b	#4,1(a0)
0000EC36 117C 0018 0019             		move.b	#$18,$19(a0)
0000EC3C 117C 0004 0018             		move.b	#4,$18(a0)
0000EC42                            
0000EC42                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EC42 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC46 9068 0008                  		sub.w	8(a0),d0
0000EC4A 6500                       		bcs.s	locret_EBBA
0000EC4C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EC50 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EC52 303C 00CF                  		move.w	#$CF,d0
0000EC56 4EB9 0000 125C             		jsr	(PlaySound).l	; play signpost	sound
0000EC5C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EC60 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EC66 5428 0024                  		addq.b	#2,$24(a0)
0000EC6A                            
0000EC6A                            locret_EBBA:
0000EC6A 4E75                       		rts	
0000EC6C                            ; ===========================================================================
0000EC6C                            
0000EC6C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EC6C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EC70 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EC72 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EC78 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EC7C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EC82 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EC84 5428 0024                  		addq.b	#2,$24(a0)
0000EC88                            
0000EC88                            Obj0D_Sparkle:
0000EC88 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EC8C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EC8E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000EC94 7000                       		moveq	#0,d0
0000EC96 1028 0034                  		move.b	$34(a0),d0
0000EC9A 5428 0034                  		addq.b	#2,$34(a0)
0000EC9E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000ECA4 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000ECA8 6100 EE8C                  		bsr.w	SingleObjLoad
0000ECAC 6600                       		bne.s	locret_EC42
0000ECAE 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000ECB2 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000ECB8 101A                       		move.b	(a2)+,d0
0000ECBA 4880                       		ext.w	d0
0000ECBC D068 0008                  		add.w	8(a0),d0
0000ECC0 3340 0008                  		move.w	d0,8(a1)
0000ECC4 101A                       		move.b	(a2)+,d0
0000ECC6 4880                       		ext.w	d0
0000ECC8 D068 000C                  		add.w	$C(a0),d0
0000ECCC 3340 000C                  		move.w	d0,$C(a1)
0000ECD0 237C 0000 A00A 0004        		move.l	#Map_obj25,4(a1)
0000ECD8 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000ECDE 137C 0004 0001             		move.b	#4,1(a1)
0000ECE4 137C 0002 0018             		move.b	#2,$18(a1)
0000ECEA 137C 0008 0019             		move.b	#8,$19(a1)
0000ECF0                            
0000ECF0                            locret_EC42:
0000ECF0 4E75                       		rts	
0000ECF2                            ; ===========================================================================
0000ECF2 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000ECF4 0808                       		dc.b	8,   8
0000ECF6 F000                       		dc.b -$10,   0
0000ECF8 18F8                       		dc.b  $18,  -8
0000ECFA 00F8                       		dc.b	0,  -8
0000ECFC 1000                       		dc.b  $10,   0
0000ECFE E808                       		dc.b -$18,   8
0000ED00 1810                       		dc.b  $18, $10
0000ED02                            ; ===========================================================================
0000ED02                            
0000ED02                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000ED02 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000ED06 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000ED0A 0838 0001 D022             		btst	#1,($FFFFD022).w
0000ED10 6600                       		bne.s	loc_EC70
0000ED12 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000ED18 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000ED1E                            
0000ED1E                            loc_EC70:
0000ED1E 4A38 D000                  		tst.b	($FFFFD000).w
0000ED22 6700                       		beq.s	loc_EC86
0000ED24 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED28 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000ED2C 0641 0128                  		addi.w	#$128,d1
0000ED30 B041                       		cmp.w	d1,d0
0000ED32 6500                       		bcs.s	locret_ECEE
0000ED34                            
0000ED34                            loc_EC86:
0000ED34 5428 0024                  		addq.b	#2,$24(a0)
0000ED38                            
0000ED38                            ; ---------------------------------------------------------------------------
0000ED38                            ; Subroutine to	set up bonuses at the end of an	act
0000ED38                            ; ---------------------------------------------------------------------------
0000ED38                            
0000ED38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED38                            
0000ED38                            
0000ED38                            GotThroughAct:				; XREF: Obj3E_EndAct
0000ED38 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000ED3C 6600                       		bne.s	locret_ECEE
0000ED3E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000ED44 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000ED48 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000ED4C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000ED52 7010                       		moveq	#$10,d0
0000ED54 4EB9 0000 14BC             		jsr	(LoadPLC2).l	; load title card patterns
0000ED5A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000ED60 7000                       		moveq	#0,d0
0000ED62 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000ED66 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000ED6A 7200                       		moveq	#0,d1
0000ED6C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000ED70 D041                       		add.w	d1,d0		; add up your time
0000ED72 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000ED76 7214                       		moveq	#$14,d1
0000ED78 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000ED7A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000ED7C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000ED7E                            
0000ED7E                            loc_ECD0:
0000ED7E D040                       		add.w	d0,d0
0000ED80 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000ED86 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000ED8A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000ED8E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000ED92 303C 008E                  		move.w	#$8E,d0
0000ED96 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000ED9C                            
0000ED9C                            locret_ECEE:
0000ED9C 4E75                       		rts	
0000ED9E                            ; End of function GotThroughAct
0000ED9E                            
0000ED9E                            ; ===========================================================================
0000ED9E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EDB2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EDC8                            ; ===========================================================================
0000EDC8                            
0000EDC8                            locret_ED1A:				; XREF: Obj0D_Index
0000EDC8 4E75                       		rts	
0000EDCA                            ; ===========================================================================
0000EDCA                            Ani_obj0D:
0000EDCA                            	include "_anim\obj0D.asm"
0000EDCA                            ; ---------------------------------------------------------------------------
0000EDCA                            ; Animation script - signpost
0000EDCA                            ; ---------------------------------------------------------------------------
0000EDCA 0000                       		dc.w byte_ED24-Ani_obj0D
0000EDCC 0000                       		dc.w byte_ED28-Ani_obj0D
0000EDCE 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EDD0 0000                       		dc.w byte_ED34-Ani_obj0D
0000EDD2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000EDD6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000EDDC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000EDE2 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000EDE6 00                         		even
0000EDE6 00                         		even
0000EDE6                            
0000EDE6                            ; ---------------------------------------------------------------------------
0000EDE6                            ; Sprite mappings - signpost
0000EDE6                            ; ---------------------------------------------------------------------------
0000EDE6                            Map_obj0D:
0000EDE6                            	include "_maps\obj0D.asm"
0000EDE6                            ; ---------------------------------------------------------------------------
0000EDE6                            ; Sprite mappings - signpost
0000EDE6                            ; ---------------------------------------------------------------------------
0000EDE6 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000EDEA 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000EDEE 0000                       		dc.w byte_ED73-Map_obj0D
0000EDF0 03                         byte_ED42:	dc.b 3
0000EDF1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EDF6 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000EDFB 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE00 02                         byte_ED52:	dc.b 2
0000EE01 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000EE06 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE0B 02                         byte_ED5D:	dc.b 2
0000EE0C F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000EE11 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EE16 02                         byte_ED68:	dc.b 2
0000EE17 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000EE1C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EE21 03                         byte_ED73:	dc.b 3
0000EE22 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000EE27 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000EE2C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE32 00                         		even
0000EE32 00                         		even
0000EE32                            
0000EE32                            ; ===========================================================================
0000EE32                            ; ---------------------------------------------------------------------------
0000EE32                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000EE32                            ; ---------------------------------------------------------------------------
0000EE32                            
0000EE32                            Obj4C:					; XREF: Obj_Index
0000EE32 7000                       		moveq	#0,d0
0000EE34 1028 0024                  		move.b	$24(a0),d0
0000EE38 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000EE3C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000EE40 6000 0000                  		bra.w	Obj4D_ChkDel
0000EE44                            ; ===========================================================================
0000EE44 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000EE46 0000                       		dc.w loc_EDCC-Obj4C_Index
0000EE48 0000                       		dc.w loc_EE3E-Obj4C_Index
0000EE4A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000EE4C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000EE4E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000EE50                            ; ===========================================================================
0000EE50                            
0000EE50                            Obj4C_Main:				; XREF: Obj4C_Index
0000EE50 5428 0024                  		addq.b	#2,$24(a0)
0000EE54 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000EE5C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000EE62 117C 0004 0001             		move.b	#4,1(a0)
0000EE68 117C 0001 0018             		move.b	#1,$18(a0)
0000EE6E 117C 0038 0019             		move.b	#$38,$19(a0)
0000EE74 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000EE7A                            
0000EE7A                            loc_EDCC:				; XREF: Obj4C_Index
0000EE7A 5368 0032                  		subq.w	#1,$32(a0)
0000EE7E 6A00                       		bpl.s	locret_EDF0
0000EE80 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000EE86 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000EE8A 3228 000C                  		move.w	$C(a0),d1
0000EE8E B041                       		cmp.w	d1,d0
0000EE90 6400                       		bcc.s	locret_EDF0
0000EE92 0441 0170                  		subi.w	#$170,d1
0000EE96 B041                       		cmp.w	d1,d0
0000EE98 6500                       		bcs.s	locret_EDF0
0000EE9A 5428 0024                  		addq.b	#2,$24(a0)
0000EE9E                            
0000EE9E                            locret_EDF0:
0000EE9E 4E75                       		rts	
0000EEA0                            ; ===========================================================================
0000EEA0                            
0000EEA0                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000EEA0 5428 0024                  		addq.b	#2,$24(a0)
0000EEA4 6100 ECA6                  		bsr.w	SingleObjLoad2
0000EEA8 6600                       		bne.s	loc_EE18
0000EEAA 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EEAE 3368 0008 0008             		move.w	8(a0),8(a1)
0000EEB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EEBA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EEC0 2348 003C                  		move.l	a0,$3C(a1)
0000EEC4                            
0000EEC4                            loc_EE18:
0000EEC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EECA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EECE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EED0 117C 0004 001C             		move.b	#4,$1C(a0)
0000EED6 6000                       		bra.s	Obj4C_Display
0000EED8                            ; ===========================================================================
0000EED8                            
0000EED8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EED8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EEDC 08E9 0001 0022             		bset	#1,$22(a1)
0000EEE2 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EEE8 6000                       		bra.s	Obj4C_Display
0000EEEA                            ; ===========================================================================
0000EEEA                            
0000EEEA                            loc_EE3E:				; XREF: Obj4C_Index
0000EEEA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EEEE 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EEF0 5428 0024                  		addq.b	#2,$24(a0)
0000EEF4 4E75                       		rts	
0000EEF6                            ; ===========================================================================
0000EEF6                            
0000EEF6                            Obj4C_Display:				; XREF: Obj4C_Index
0000EEF6 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EEFC 6100 B8A4                  		bsr.w	AnimateSprite
0000EF00 6100 E7A8                  		bsr.w	DisplaySprite
0000EF04 4E75                       		rts	
0000EF06                            ; ===========================================================================
0000EF06                            
0000EF06                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EF06 117C 0000 001C             		move.b	#0,$1C(a0)
0000EF0C 117C 0002 0024             		move.b	#2,$24(a0)
0000EF12 4A28 0028                  		tst.b	$28(a0)
0000EF16 6700 E7CE                  		beq.w	DeleteObject
0000EF1A 4E75                       		rts	
0000EF1C                            ; ===========================================================================
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            ; Object 4D - lava geyser / lavafall (MZ)
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            
0000EF1C                            Obj4D:					; XREF: Obj_Index
0000EF1C 7000                       		moveq	#0,d0
0000EF1E 1028 0024                  		move.b	$24(a0),d0
0000EF22 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EF26 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EF2A 6000 E77E                  		bra.w	DisplaySprite
0000EF2E                            ; ===========================================================================
0000EF2E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EF30 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EF32 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EF34 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EF36                            
0000EF36 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EF3A                            ; ===========================================================================
0000EF3A                            
0000EF3A                            Obj4D_Main:				; XREF: Obj4D_Index
0000EF3A 5428 0024                  		addq.b	#2,$24(a0)
0000EF3E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF44 4A28 0028                  		tst.b	$28(a0)
0000EF48 6700                       		beq.s	loc_EEA4
0000EF4A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EF50                            
0000EF50                            loc_EEA4:
0000EF50 7000                       		moveq	#0,d0
0000EF52 1028 0028                  		move.b	$28(a0),d0
0000EF56 D040                       		add.w	d0,d0
0000EF58 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EF5E 2248                       		movea.l	a0,a1
0000EF60 7201                       		moveq	#1,d1
0000EF62 6100                       		bsr.s	Obj4D_MakeLava
0000EF64 6000                       		bra.s	loc_EF10
0000EF66                            ; ===========================================================================
0000EF66                            
0000EF66                            Obj4D_Loop:
0000EF66 6100 EBE4                  		bsr.w	SingleObjLoad2
0000EF6A 6600                       		bne.s	loc_EF0A
0000EF6C                            
0000EF6C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EF6C 12BC 004D                  		move.b	#$4D,0(a1)
0000EF70 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000EF78 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000EF7E 137C 0004 0001             		move.b	#4,1(a1)
0000EF84 137C 0020 0019             		move.b	#$20,$19(a1)
0000EF8A 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF90 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF96 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF9C 137C 0001 0018             		move.b	#1,$18(a1)
0000EFA2 137C 0005 001C             		move.b	#5,$1C(a1)
0000EFA8 4A28 0028                  		tst.b	$28(a0)
0000EFAC 6700                       		beq.s	loc_EF0A
0000EFAE 137C 0002 001C             		move.b	#2,$1C(a1)
0000EFB4                            
0000EFB4                            loc_EF0A:
0000EFB4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000EFB8 4E75                       		rts	
0000EFBA                            ; ===========================================================================
0000EFBA                            
0000EFBA                            loc_EF10:				; XREF: Obj4D_Main
0000EFBA 0669 0060 000C             		addi.w	#$60,$C(a1)
0000EFC0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EFC6 0669 0060 0030             		addi.w	#$60,$30(a1)
0000EFCC 137C 0093 0020             		move.b	#$93,$20(a1)
0000EFD2 137C 0080 0016             		move.b	#$80,$16(a1)
0000EFD8 08E9 0004 0001             		bset	#4,1(a1)
0000EFDE 5829 0024                  		addq.b	#4,$24(a1)
0000EFE2 2348 003C                  		move.l	a0,$3C(a1)
0000EFE6 4A28 0028                  		tst.b	$28(a0)
0000EFEA 6700                       		beq.s	Obj4D_PlaySnd
0000EFEC 7200                       		moveq	#0,d1
0000EFEE 6100 FF76                  		bsr.w	Obj4D_Loop
0000EFF2 5429 0024                  		addq.b	#2,$24(a1)
0000EFF6 08E9 0004 0002             		bset	#4,2(a1)
0000EFFC 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F002 137C 0000 0018             		move.b	#0,$18(a1)
0000F008 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F00E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F014 117C 0000 0028             		move.b	#0,$28(a0)
0000F01A                            
0000F01A                            Obj4D_PlaySnd:
0000F01A 303C 00C8                  		move.w	#$C8,d0
0000F01E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flame sound
0000F024                            
0000F024                            Obj4D_Action:				; XREF: Obj4D_Index
0000F024 7000                       		moveq	#0,d0
0000F026 1028 0028                  		move.b	$28(a0),d0
0000F02A D040                       		add.w	d0,d0
0000F02C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F030 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F034 6100 E64E                  		bsr.w	SpeedToPos
0000F038 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F03E 6100 B762                  		bsr.w	AnimateSprite
0000F042                            
0000F042                            Obj4D_ChkDel:				; XREF: Obj4C
0000F042 3028 0008                  		move.w	8(a0),d0
0000F046 0240 FF80                  		andi.w	#$FF80,d0
0000F04A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F04E 0441 0080                  		subi.w	#$80,d1
0000F052 0241 FF80                  		andi.w	#$FF80,d1
0000F056 9041                       		sub.w	d1,d0
0000F058 0C40 0280                  		cmpi.w	#$280,d0
0000F05C 6200 E688                  		bhi.w	DeleteObject
0000F060 4E75                       		rts	
0000F062                            ; ===========================================================================
0000F062 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F064 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F066                            ; ===========================================================================
0000F066                            
0000F066                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F066 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F06C 3028 0030                  		move.w	$30(a0),d0
0000F070 B068 000C                  		cmp.w	$C(a0),d0
0000F074 6400                       		bcc.s	locret_EFDA
0000F076 5828 0024                  		addq.b	#4,$24(a0)
0000F07A 2268 003C                  		movea.l	$3C(a0),a1
0000F07E 137C 0003 001C             		move.b	#3,$1C(a1)
0000F084                            
0000F084                            locret_EFDA:
0000F084 4E75                       		rts	
0000F086                            ; ===========================================================================
0000F086                            
0000F086                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F086 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F08C 3028 0030                  		move.w	$30(a0),d0
0000F090 B068 000C                  		cmp.w	$C(a0),d0
0000F094 6400                       		bcc.s	locret_EFFA
0000F096 5828 0024                  		addq.b	#4,$24(a0)
0000F09A 2268 003C                  		movea.l	$3C(a0),a1
0000F09E 137C 0001 001C             		move.b	#1,$1C(a1)
0000F0A4                            
0000F0A4                            locret_EFFA:
0000F0A4 4E75                       		rts	
0000F0A6                            ; ===========================================================================
0000F0A6                            
0000F0A6                            loc_EFFC:				; XREF: Obj4D_Index
0000F0A6 2268 003C                  		movea.l	$3C(a0),a1
0000F0AA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F0B0 6700 0000                  		beq.w	Obj4D_Delete
0000F0B4 3029 000C                  		move.w	$C(a1),d0
0000F0B8 0640 0060                  		addi.w	#$60,d0
0000F0BC 3140 000C                  		move.w	d0,$C(a0)
0000F0C0 9068 0030                  		sub.w	$30(a0),d0
0000F0C4 4440                       		neg.w	d0
0000F0C6 7208                       		moveq	#8,d1
0000F0C8 0C40 0040                  		cmpi.w	#$40,d0
0000F0CC 6C00                       		bge.s	loc_F026
0000F0CE 720B                       		moveq	#$B,d1
0000F0D0                            
0000F0D0                            loc_F026:
0000F0D0 0C40 0080                  		cmpi.w	#$80,d0
0000F0D4 6F00                       		ble.s	loc_F02E
0000F0D6 720E                       		moveq	#$E,d1
0000F0D8                            
0000F0D8                            loc_F02E:
0000F0D8 5328 001E                  		subq.b	#1,$1E(a0)
0000F0DC 6A00                       		bpl.s	loc_F04C
0000F0DE 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0E4 5228 001B                  		addq.b	#1,$1B(a0)
0000F0E8 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F0EE 6500                       		bcs.s	loc_F04C
0000F0F0 117C 0000 001B             		move.b	#0,$1B(a0)
0000F0F6                            
0000F0F6                            loc_F04C:
0000F0F6 1028 001B                  		move.b	$1B(a0),d0
0000F0FA D001                       		add.b	d1,d0
0000F0FC 1140 001A                  		move.b	d0,$1A(a0)
0000F100 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F104                            ; ===========================================================================
0000F104                            
0000F104                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F104 6000 E5E0                  		bra.w	DeleteObject
0000F108                            ; ===========================================================================
0000F108                            ; ---------------------------------------------------------------------------
0000F108                            ; Object 4E - advancing	wall of	lava (MZ)
0000F108                            ; ---------------------------------------------------------------------------
0000F108                            
0000F108                            Obj4E:					; XREF: Obj_Index
0000F108 7000                       		moveq	#0,d0
0000F10A 1028 0024                  		move.b	$24(a0),d0
0000F10E 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F112 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F116                            ; ===========================================================================
0000F116 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F118 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F11A 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F11C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F11E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F120                            ; ===========================================================================
0000F120                            
0000F120                            Obj4E_Main:				; XREF: Obj4E_Index
0000F120 5828 0024                  		addq.b	#4,$24(a0)
0000F124 2248                       		movea.l	a0,a1
0000F126 7201                       		moveq	#1,d1
0000F128 6000                       		bra.s	Obj4E_Main2
0000F12A                            ; ===========================================================================
0000F12A                            
0000F12A                            Obj4E_Loop:
0000F12A 6100 EA20                  		bsr.w	SingleObjLoad2
0000F12E 6600                       		bne.s	loc_F0C8
0000F130                            
0000F130                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F130 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F134 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F13C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F142 137C 0004 0001             		move.b	#4,1(a1)
0000F148 137C 0050 0019             		move.b	#$50,$19(a1)
0000F14E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F154 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F15A 137C 0001 0018             		move.b	#1,$18(a1)
0000F160 137C 0000 001C             		move.b	#0,$1C(a1)
0000F166 137C 0094 0020             		move.b	#$94,$20(a1)
0000F16C 2348 003C                  		move.l	a0,$3C(a1)
0000F170                            
0000F170                            loc_F0C8:
0000F170 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F174                            
0000F174 5C29 0024                  		addq.b	#6,$24(a1)
0000F178 137C 0004 001A             		move.b	#4,$1A(a1)
0000F17E                            
0000F17E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F17E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F182 9068 0008                  		sub.w	8(a0),d0
0000F186 6400                       		bcc.s	Obj4E_ChkSonic
0000F188 4440                       		neg.w	d0
0000F18A                            
0000F18A                            Obj4E_ChkSonic:
0000F18A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F18E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F190 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F194 9068 000C                  		sub.w	$C(a0),d0
0000F198 6400                       		bcc.s	loc_F0F4
0000F19A 4440                       		neg.w	d0
0000F19C                            
0000F19C                            loc_F0F4:
0000F19C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F1A0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F1A2 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F1A8 6000                       		bra.s	Obj4E_Solid
0000F1AA                            ; ===========================================================================
0000F1AA                            
0000F1AA                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F1AA 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F1AE 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F1B0 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F1B6 5528 0024                  		subq.b	#2,$24(a0)
0000F1BA                            
0000F1BA                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F1BA 323C 002B                  		move.w	#$2B,d1
0000F1BE 343C 0018                  		move.w	#$18,d2
0000F1C2 3602                       		move.w	d2,d3
0000F1C4 5243                       		addq.w	#1,d3
0000F1C6 3828 0008                  		move.w	8(a0),d4
0000F1CA 1028 0024                  		move.b	$24(a0),d0
0000F1CE 3F00                       		move.w	d0,-(sp)
0000F1D0 6100 0000                  		bsr.w	SolidObject
0000F1D4 301F                       		move.w	(sp)+,d0
0000F1D6 1140 0024                  		move.b	d0,$24(a0)
0000F1DA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F1E0 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F1E2 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F1E6 4228 0036                  		clr.b	$36(a0)
0000F1EA                            
0000F1EA                            Obj4E_Animate:
0000F1EA 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F1F0 6100 B5B0                  		bsr.w	AnimateSprite
0000F1F4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F1FA 6400                       		bcc.s	Obj4E_ChkDel
0000F1FC 6100 E486                  		bsr.w	SpeedToPos
0000F200                            
0000F200                            Obj4E_ChkDel:
0000F200 6100 E4A8                  		bsr.w	DisplaySprite
0000F204 4A28 0036                  		tst.b	$36(a0)
0000F208 6600                       		bne.s	locret_F17E
0000F20A 3028 0008                  		move.w	8(a0),d0
0000F20E 0240 FF80                  		andi.w	#$FF80,d0
0000F212 3238 F700                  		move.w	($FFFFF700).w,d1
0000F216 0441 0080                  		subi.w	#$80,d1
0000F21A 0241 FF80                  		andi.w	#$FF80,d1
0000F21E 9041                       		sub.w	d1,d0
0000F220 0C40 0280                  		cmpi.w	#$280,d0
0000F224 6200                       		bhi.s	Obj4E_ChkGone
0000F226                            
0000F226                            locret_F17E:
0000F226 4E75                       		rts	
0000F228                            ; ===========================================================================
0000F228                            
0000F228                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F228 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F22C 7000                       		moveq	#0,d0
0000F22E 1028 0023                  		move.b	$23(a0),d0
0000F232 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F238 117C 0008 0024             		move.b	#8,$24(a0)
0000F23E 4E75                       		rts	
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F240 2268 003C                  		movea.l	$3C(a0),a1
0000F244 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F24A 6700                       		beq.s	Obj4E_Delete
0000F24C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F252 0468 0080 0008             		subi.w	#$80,8(a0)
0000F258 6000 E450                  		bra.w	DisplaySprite
0000F25C                            ; ===========================================================================
0000F25C                            
0000F25C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F25C 6000 E488                  		bra.w	DeleteObject
0000F260                            ; ===========================================================================
0000F260                            ; ---------------------------------------------------------------------------
0000F260                            ; Object 54 - invisible	lava tag (MZ)
0000F260                            ; ---------------------------------------------------------------------------
0000F260                            
0000F260                            Obj54:					; XREF: Obj_Index
0000F260 7000                       		moveq	#0,d0
0000F262 1028 0024                  		move.b	$24(a0),d0
0000F266 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F26A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F26E                            ; ===========================================================================
0000F26E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F270 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F272                            
0000F272 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F276                            ; ===========================================================================
0000F276                            
0000F276                            Obj54_Main:				; XREF: Obj54_Index
0000F276 5428 0024                  		addq.b	#2,$24(a0)
0000F27A 7000                       		moveq	#0,d0
0000F27C 1028 0028                  		move.b	$28(a0),d0
0000F280 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F286 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F28E 117C 0084 0001             		move.b	#$84,1(a0)
0000F294                            
0000F294                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F294 3028 0008                  		move.w	8(a0),d0
0000F298 0240 FF80                  		andi.w	#$FF80,d0
0000F29C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2A0 0441 0080                  		subi.w	#$80,d1
0000F2A4 0241 FF80                  		andi.w	#$FF80,d1
0000F2A8 9041                       		sub.w	d1,d0
0000F2AA 6B00 E43A                  		bmi.w	DeleteObject
0000F2AE 0C40 0280                  		cmpi.w	#$280,d0
0000F2B2 6200 E432                  		bhi.w	DeleteObject
0000F2B6 4E75                       		rts	
0000F2B8                            ; ===========================================================================
0000F2B8                            ; ---------------------------------------------------------------------------
0000F2B8                            ; Sprite mappings - invisible lava tag (MZ)
0000F2B8                            ; ---------------------------------------------------------------------------
0000F2B8                            Map_obj54:
0000F2B8                            	include "_maps\obj54.asm"
0000F2B8                            ; ---------------------------------------------------------------------------
0000F2B8                            ; Sprite mappings - invisible lava tag (MZ)
0000F2B8                            ; ---------------------------------------------------------------------------
0000F2B8 0000                       		dc.w byte_F212-Map_obj54
0000F2BA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F2BC 00                         		even
0000F2BC 00                         		even
0000F2BC                            
0000F2BC                            Ani_obj4C:
0000F2BC                            	include "_anim\obj4C.asm"
0000F2BC                            ; ---------------------------------------------------------------------------
0000F2BC                            ; Animation script - geyser of lava (MZ)
0000F2BC                            ; ---------------------------------------------------------------------------
0000F2BC 0000                       		dc.w byte_F220-Ani_obj4C
0000F2BE 0000                       		dc.w byte_F22A-Ani_obj4C
0000F2C0 0000                       		dc.w byte_F22E-Ani_obj4C
0000F2C2 0000                       		dc.w byte_F232-Ani_obj4C
0000F2C4 0000                       		dc.w byte_F23A-Ani_obj4C
0000F2C6 0000                       		dc.w byte_F23E-Ani_obj4C
0000F2C8 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F2D2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F2D6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F2DA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F2E2 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F2E6 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F2EA                            		even
0000F2EA                            		even
0000F2EA                            
0000F2EA                            Ani_obj4E:
0000F2EA                            	include "_anim\obj4E.asm"
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA                            ; Animation script - advancing wall of lava (MZ)
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA 0000                       		dc.w byte_F244-Ani_obj4E
0000F2EC 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F2F2                            		even
0000F2F2                            		even
0000F2F2                            
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            Map_obj4C:
0000F2F2                            	include "_maps\obj4C.asm"
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F2F6 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F2FA 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F2FE 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F302 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F306 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F30A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F30E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F312 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F316 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F31A 02                         byte_F272:	dc.b 2
0000F31B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F320 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F325 02                         byte_F27D:	dc.b 2
0000F326 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F32B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F330 04                         byte_F288:	dc.b 4
0000F331 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F336 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F33B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F340 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F345 04                         byte_F29D:	dc.b 4
0000F346 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F34B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F350 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F355 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F35A 06                         byte_F2B2:	dc.b 6
0000F35B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F360 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F365 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F36A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F36F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F374 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F379 06                         byte_F2D1:	dc.b 6
0000F37A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F37F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F384 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F389 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F38E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F393 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F398 02                         byte_F2F0:	dc.b 2
0000F399 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F39E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F3A3 02                         byte_F2FB:	dc.b 2
0000F3A4 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F3A9 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F3AE 0A                         byte_F306:	dc.b $A
0000F3AF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F3B4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F3B9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F3BE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F3C3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F3C8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F3CD F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F3D2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F3D7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F3DC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F3E1 0A                         byte_F339:	dc.b $A
0000F3E2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F3E7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F3EC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F3F1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F3F6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F3FB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F400 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F405 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F40A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F40F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F414 0A                         byte_F36C:	dc.b $A
0000F415 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F41A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F41F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F424 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F429 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F42E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F433 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F438 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F43D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F442 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F447 06                         byte_F39F:	dc.b 6
0000F448 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F44D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F452 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F457 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F45C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F461 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F466 06                         byte_F3BE:	dc.b 6
0000F467 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F46C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F471 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F476 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F47B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F480 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F485 06                         byte_F3DD:	dc.b 6
0000F486 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F48B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F490 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F495 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F49A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F49F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F4A4 10                         byte_F3FC:	dc.b $10
0000F4A5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F4AA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F4AF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F4B4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F4B9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F4BE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F4C3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F4C8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F4CD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F4D2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F4D7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F4DC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F4E1 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F4E6 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F4EB 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F4F0 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F4F5 10                         byte_F44D:	dc.b $10
0000F4F6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F4FB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F500 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F505 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F50A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F50F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F514 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F519 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F51E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F523 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F528 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F52D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F532 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F537 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F53C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F541 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F546 10                         byte_F49E:	dc.b $10
0000F547 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F54C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F551 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F556 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F55B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F560 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F565 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F56A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F56F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F574 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F579 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F57E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F583 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F588 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F58D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F592 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F597 06                         byte_F4EF:	dc.b 6
0000F598 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F59D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F5A2 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F5A7 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F5AC D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F5B1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F5B6 06                         byte_F50E:	dc.b 6
0000F5B7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F5BC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F5C1 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F5C6 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F5CB D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F5D0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F5D5 00                         byte_F52D:	dc.b 0
0000F5D6                            		even
0000F5D6                            		even
0000F5D6                            
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            Map_obj4E:
0000F5D6                            	include "_maps\obj4E.asm"
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6 0000                       		dc.w byte_F538-Map_obj4E
0000F5D8 0000                       		dc.w byte_F566-Map_obj4E
0000F5DA 0000                       		dc.w byte_F594-Map_obj4E
0000F5DC 0000                       		dc.w byte_F5C2-Map_obj4E
0000F5DE 0000                       		dc.w byte_F5F0-Map_obj4E
0000F5E0 09                         byte_F538:	dc.b 9
0000F5E1 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F5E6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F5EB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F5F0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F5F5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F5FA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F5FF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F604 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F609 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F60E 09                         byte_F566:	dc.b 9
0000F60F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F614 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F619 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F61E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F623 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F628 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F62D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F632 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F637 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F63C 09                         byte_F594:	dc.b 9
0000F63D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F642 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F647 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F64C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F651 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F656 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F65B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F660 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F665 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F66A 09                         byte_F5C2:	dc.b 9
0000F66B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F670 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F675 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F67A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F67F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F684 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F689 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F68E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F693 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F698 08                         byte_F5F0:	dc.b 8
0000F699 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F69E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6A3 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6A8 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6AD E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6B2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6B7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6BC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6C2 00                         		even
0000F6C2 00                         		even
0000F6C2                            
0000F6C2                            ; ===========================================================================
0000F6C2                            ; ---------------------------------------------------------------------------
0000F6C2                            ; Object 40 - Moto Bug enemy (GHZ)
0000F6C2                            ; ---------------------------------------------------------------------------
0000F6C2                            
0000F6C2                            Obj40:					; XREF: Obj_Index
0000F6C2 7000                       		moveq	#0,d0
0000F6C4 1028 0024                  		move.b	$24(a0),d0
0000F6C8 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F6CC 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F6D0                            ; ===========================================================================
0000F6D0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F6D2 0000                       		dc.w Obj40_Action-Obj40_Index
0000F6D4 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F6D6 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F6D8                            ; ===========================================================================
0000F6D8                            
0000F6D8                            Obj40_Main:				; XREF: Obj40_Index
0000F6D8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F6E0 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F6E6 117C 0004 0001             		move.b	#4,1(a0)
0000F6EC 117C 0004 0018             		move.b	#4,$18(a0)
0000F6F2 117C 0014 0019             		move.b	#$14,$19(a0)
0000F6F8 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F6FC 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F6FE 117C 000E 0016             		move.b	#$E,$16(a0)
0000F704 117C 0008 0017             		move.b	#8,$17(a0)
0000F70A 117C 000C 0020             		move.b	#$C,$20(a0)
0000F710 6100 DF46                  		bsr.w	ObjectFall
0000F714 4EB9 0000 0000             		jsr	ObjHitFloor
0000F71A 4A41                       		tst.w	d1
0000F71C 6A00                       		bpl.s	locret_F68A
0000F71E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F722 317C 0000 0012             		move.w	#0,$12(a0)
0000F728 5428 0024                  		addq.b	#2,$24(a0)
0000F72C 0868 0000 0022             		bchg	#0,$22(a0)
0000F732                            
0000F732                            locret_F68A:
0000F732 4E75                       		rts	
0000F734                            ; ===========================================================================
0000F734                            
0000F734                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F734 5828 0024                  		addq.b	#4,$24(a0)
0000F738 6000 0000                  		bra.w	Obj40_Animate
0000F73C                            ; ===========================================================================
0000F73C                            
0000F73C                            Obj40_Action:				; XREF: Obj40_Index
0000F73C 7000                       		moveq	#0,d0
0000F73E 1028 0025                  		move.b	$25(a0),d0
0000F742 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F746 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F74A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F750 6100 B050                  		bsr.w	AnimateSprite
0000F754                            
0000F754                            ; ---------------------------------------------------------------------------
0000F754                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F754                            ; ---------------------------------------------------------------------------
0000F754                            
0000F754                            MarkObjGone:
0000F754 3028 0008                  		move.w	8(a0),d0
0000F758 0240 FF80                  		andi.w	#$FF80,d0
0000F75C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F760 0441 0080                  		subi.w	#$80,d1
0000F764 0241 FF80                  		andi.w	#$FF80,d1
0000F768 9041                       		sub.w	d1,d0
0000F76A 0C40 0280                  		cmpi.w	#$280,d0
0000F76E 6200 0000                  		bhi.w	Mark_ChkGone
0000F772 6000 DF36                  		bra.w	DisplaySprite
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            Mark_ChkGone:
0000F776 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F77A 7000                       		moveq	#0,d0
0000F77C 1028 0023                  		move.b	$23(a0),d0
0000F780 6700                       		beq.s	Mark_Delete
0000F782 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F788                            
0000F788                            Mark_Delete:
0000F788 6000 DF5C                  		bra.w	DeleteObject
0000F78C                            
0000F78C                            ; ===========================================================================
0000F78C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F78E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F790                            ; ===========================================================================
0000F790                            
0000F790                            Obj40_Move:				; XREF: Obj40_Index2
0000F790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F794 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F796 5428 0025                  		addq.b	#2,$25(a0)
0000F79A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F7A0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F7A6 0868 0000 0022             		bchg	#0,$22(a0)
0000F7AC 6600                       		bne.s	locret_F70A
0000F7AE 4468 0010                  		neg.w	$10(a0)		; change direction
0000F7B2                            
0000F7B2                            locret_F70A:
0000F7B2 4E75                       		rts	
0000F7B4                            ; ===========================================================================
0000F7B4                            
0000F7B4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F7B4 6100 DECE                  		bsr.w	SpeedToPos
0000F7B8 4EB9 0000 0000             		jsr	ObjHitFloor
0000F7BE 0C41 FFF8                  		cmpi.w	#-8,d1
0000F7C2 6D00                       		blt.s	Obj40_Pause
0000F7C4 0C41 000C                  		cmpi.w	#$C,d1
0000F7C8 6C00                       		bge.s	Obj40_Pause
0000F7CA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F7CE 5328 0033                  		subq.b	#1,$33(a0)
0000F7D2 6A00                       		bpl.s	locret_F756
0000F7D4 117C 000F 0033             		move.b	#$F,$33(a0)
0000F7DA 6100 E35A                  		bsr.w	SingleObjLoad
0000F7DE 6600                       		bne.s	locret_F756
0000F7E0 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F7E4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F7EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F7F0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F7F6 137C 0002 001C             		move.b	#2,$1C(a1)
0000F7FC                            
0000F7FC                            locret_F756:
0000F7FC 4E75                       		rts	
0000F7FE                            ; ===========================================================================
0000F7FE                            
0000F7FE                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F7FE 5528 0025                  		subq.b	#2,$25(a0)
0000F802 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F808 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F80E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F814 4E75                       		rts	
0000F816                            ; ===========================================================================
0000F816                            
0000F816                            Obj40_Animate:				; XREF: Obj40_Index
0000F816 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F81C 6100 AF84                  		bsr.w	AnimateSprite
0000F820 6000 DE88                  		bra.w	DisplaySprite
0000F824                            ; ===========================================================================
0000F824                            
0000F824                            Obj40_Delete:				; XREF: Obj40_Index
0000F824 6000 DEC0                  		bra.w	DeleteObject
0000F828                            ; ===========================================================================
0000F828                            Ani_obj40:
0000F828                            	include "_anim\obj40.asm"
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            ; Animation script - Motobug enemy
0000F828                            ; ---------------------------------------------------------------------------
0000F828 0000                       		dc.w byte_F788-Ani_obj40
0000F82A 0000                       		dc.w byte_F78C-Ani_obj40
0000F82C 0000                       		dc.w byte_F792-Ani_obj40
0000F82E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F832 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F838 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F846                            		even
0000F846                            		even
0000F846                            
0000F846                            ; ---------------------------------------------------------------------------
0000F846                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F846                            ; ---------------------------------------------------------------------------
0000F846                            Map_obj40:
0000F846                            	include "_maps\obj40.asm"
0000F846                            ; ---------------------------------------------------------------------------
0000F846                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F846                            ; ---------------------------------------------------------------------------
0000F846 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F84A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F84E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F852 0000                       		dc.w byte_F804-Map_obj40
0000F854 04                         byte_F7AE:	dc.b 4
0000F855 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F85A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F85F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F864 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F869 04                         byte_F7C3:	dc.b 4
0000F86A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F86F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F874 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F879 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F87E 05                         byte_F7D8:	dc.b 5
0000F87F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F884 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F889 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F88E 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F893 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F898 01                         byte_F7F2:	dc.b 1
0000F899 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F89E 01                         byte_F7F8:	dc.b 1
0000F89F FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F8A4 01                         byte_F7FE:	dc.b 1
0000F8A5 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F8AA 00                         byte_F804:	dc.b 0
0000F8AC 00                         		even
0000F8AC 00                         		even
0000F8AC                            
0000F8AC                            ; ===========================================================================
0000F8AC                            ; ---------------------------------------------------------------------------
0000F8AC                            ; Object 4F - blank
0000F8AC                            ; ---------------------------------------------------------------------------
0000F8AC                            
0000F8AC                            Obj4F:					; XREF: Obj_Index
0000F8AC 4E75                       		rts	
0000F8AE                            
0000F8AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8AE                            
0000F8AE                            
0000F8AE                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F8AE 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F8B2 D047                       		add.w	d7,d0
0000F8B4 0240 0003                  		andi.w	#3,d0
0000F8B8 6600                       		bne.s	loc_F836
0000F8BA 7600                       		moveq	#0,d3
0000F8BC 1628 0019                  		move.b	$19(a0),d3
0000F8C0 4A68 0010                  		tst.w	$10(a0)
0000F8C4 6B00                       		bmi.s	loc_F82C
0000F8C6 6100 0000                  		bsr.w	ObjHitWallRight
0000F8CA 4A41                       		tst.w	d1
0000F8CC 6A00                       		bpl.s	loc_F836
0000F8CE                            
0000F8CE                            loc_F828:
0000F8CE 7001                       		moveq	#1,d0
0000F8D0 4E75                       		rts	
0000F8D2                            ; ===========================================================================
0000F8D2                            
0000F8D2                            loc_F82C:
0000F8D2 4643                       		not.w	d3
0000F8D4 6100 0000                  		bsr.w	ObjHitWallLeft
0000F8D8 4A41                       		tst.w	d1
0000F8DA 6BF2                       		bmi.s	loc_F828
0000F8DC                            
0000F8DC                            loc_F836:
0000F8DC 7000                       		moveq	#0,d0
0000F8DE 4E75                       		rts	
0000F8E0                            ; End of function Obj50_ChkWall
0000F8E0                            
0000F8E0                            ; ===========================================================================
0000F8E0                            ; ---------------------------------------------------------------------------
0000F8E0                            ; Object 50 - Yadrin enemy (SYZ)
0000F8E0                            ; ---------------------------------------------------------------------------
0000F8E0                            
0000F8E0                            Obj50:					; XREF: Obj_Index
0000F8E0 7000                       		moveq	#0,d0
0000F8E2 1028 0024                  		move.b	$24(a0),d0
0000F8E6 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F8EA 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F8EE                            ; ===========================================================================
0000F8EE 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F8F0 0000                       		dc.w Obj50_Action-Obj50_Index
0000F8F2                            ; ===========================================================================
0000F8F2                            
0000F8F2                            Obj50_Main:				; XREF: Obj50_Index
0000F8F2 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F8FA 317C 247B 0002             		move.w	#$247B,2(a0)
0000F900 117C 0004 0001             		move.b	#4,1(a0)
0000F906 117C 0004 0018             		move.b	#4,$18(a0)
0000F90C 117C 0014 0019             		move.b	#$14,$19(a0)
0000F912 117C 0011 0016             		move.b	#$11,$16(a0)
0000F918 117C 0008 0017             		move.b	#8,$17(a0)
0000F91E 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F924 6100 DD32                  		bsr.w	ObjectFall
0000F928 6100 0000                  		bsr.w	ObjHitFloor
0000F92C 4A41                       		tst.w	d1
0000F92E 6A00                       		bpl.s	locret_F89E
0000F930 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F934 317C 0000 0012             		move.w	#0,$12(a0)
0000F93A 5428 0024                  		addq.b	#2,$24(a0)
0000F93E 0868 0000 0022             		bchg	#0,$22(a0)
0000F944                            
0000F944                            locret_F89E:
0000F944 4E75                       		rts	
0000F946                            ; ===========================================================================
0000F946                            
0000F946                            Obj50_Action:				; XREF: Obj50_Index
0000F946 7000                       		moveq	#0,d0
0000F948 1028 0025                  		move.b	$25(a0),d0
0000F94C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F950 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F954 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F95A 6100 AE46                  		bsr.w	AnimateSprite
0000F95E 6000 FDF4                  		bra.w	MarkObjGone
0000F962                            ; ===========================================================================
0000F962 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F964 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F966                            ; ===========================================================================
0000F966                            
0000F966                            Obj50_Move:				; XREF: Obj50_Index2
0000F966 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F96A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F96C 5428 0025                  		addq.b	#2,$25(a0)
0000F970 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000F976 117C 0001 001C             		move.b	#1,$1C(a0)
0000F97C 0868 0000 0022             		bchg	#0,$22(a0)
0000F982 6600                       		bne.s	locret_F8E2
0000F984 4468 0010                  		neg.w	$10(a0)		; change direction
0000F988                            
0000F988                            locret_F8E2:
0000F988 4E75                       		rts	
0000F98A                            ; ===========================================================================
0000F98A                            
0000F98A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000F98A 6100 DCF8                  		bsr.w	SpeedToPos
0000F98E 6100 0000                  		bsr.w	ObjHitFloor
0000F992 0C41 FFF8                  		cmpi.w	#-8,d1
0000F996 6D00                       		blt.s	Obj50_Pause
0000F998 0C41 000C                  		cmpi.w	#$C,d1
0000F99C 6C00                       		bge.s	Obj50_Pause
0000F99E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000F9A2 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000F9A6 6600                       		bne.s	Obj50_Pause
0000F9A8 4E75                       		rts	
0000F9AA                            ; ===========================================================================
0000F9AA                            
0000F9AA                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000F9AA 5528 0025                  		subq.b	#2,$25(a0)
0000F9AE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F9B4 317C 0000 0010             		move.w	#0,$10(a0)
0000F9BA 117C 0000 001C             		move.b	#0,$1C(a0)
0000F9C0 4E75                       		rts	
0000F9C2                            ; ===========================================================================
0000F9C2                            Ani_obj50:
0000F9C2                            	include "_anim\obj50.asm"
0000F9C2                            ; ---------------------------------------------------------------------------
0000F9C2                            ; Animation script - Yadrin enemy
0000F9C2                            ; ---------------------------------------------------------------------------
0000F9C2 0000                       		dc.w byte_F920-Ani_obj50
0000F9C4 0000                       		dc.w byte_F924-Ani_obj50
0000F9C6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000F9CA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000F9D4                            		even
0000F9D4                            		even
0000F9D4                            
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            Map_obj50:
0000F9D4                            	include "_maps\obj50.asm"
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000F9D8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000F9DC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000F9E0 05                         byte_F93A:	dc.b 5
0000F9E1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F9E6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F9EB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F9F0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F9F5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F9FA 05                         byte_F954:	dc.b 5
0000F9FB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA00 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA05 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA0A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA0F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA14 05                         byte_F96E:	dc.b 5
0000FA15 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FA1A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FA1F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA24 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA29 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA2E 05                         byte_F988:	dc.b 5
0000FA2F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FA34 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FA39 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA3E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA43 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA48 05                         byte_F9A2:	dc.b 5
0000FA49 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA4E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA53 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA58 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA5D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA62 05                         byte_F9BC:	dc.b 5
0000FA63 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FA68 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FA6D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA72 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA77 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA7C                            		even
0000FA7C                            		even
0000FA7C                            
0000FA7C                            ; ---------------------------------------------------------------------------
0000FA7C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FA7C                            ;
0000FA7C                            ; variables:
0000FA7C                            ; d1 = width
0000FA7C                            ; d2 = height /	2 (when	jumping)
0000FA7C                            ; d3 = height /	2 (when	walking)
0000FA7C                            ; d4 = x-axis position
0000FA7C                            ; ---------------------------------------------------------------------------
0000FA7C                            
0000FA7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA7C                            
0000FA7C                            
0000FA7C                            SolidObject:
0000FA7C 4A28 0025                  		tst.b	$25(a0)
0000FA80 6700 0000                  		beq.w	loc_FAC8
0000FA84 3401                       		move.w	d1,d2
0000FA86 D442                       		add.w	d2,d2
0000FA88 43F8 D000                  		lea	($FFFFD000).w,a1
0000FA8C 0829 0001 0022             		btst	#1,$22(a1)
0000FA92 6600                       		bne.s	loc_F9FE
0000FA94 3029 0008                  		move.w	8(a1),d0
0000FA98 9068 0008                  		sub.w	8(a0),d0
0000FA9C D041                       		add.w	d1,d0
0000FA9E 6B00                       		bmi.s	loc_F9FE
0000FAA0 B042                       		cmp.w	d2,d0
0000FAA2 6500                       		bcs.s	loc_FA12
0000FAA4                            
0000FAA4                            loc_F9FE:
0000FAA4 08A9 0003 0022             		bclr	#3,$22(a1)
0000FAAA 08A8 0003 0022             		bclr	#3,$22(a0)
0000FAB0 4228 0025                  		clr.b	$25(a0)
0000FAB4 7800                       		moveq	#0,d4
0000FAB6 4E75                       		rts	
0000FAB8                            ; ===========================================================================
0000FAB8                            
0000FAB8                            loc_FA12:
0000FAB8 3404                       		move.w	d4,d2
0000FABA 6100 80AE                  		bsr.w	MvSonicOnPtfm
0000FABE 7800                       		moveq	#0,d4
0000FAC0 4E75                       		rts	
0000FAC2                            ; ===========================================================================
0000FAC2                            
0000FAC2                            SolidObject71:				; XREF: Obj71_Solid
0000FAC2 4A28 0025                  		tst.b	$25(a0)
0000FAC6 6700 0000                  		beq.w	loc_FAD0
0000FACA 3401                       		move.w	d1,d2
0000FACC D442                       		add.w	d2,d2
0000FACE 43F8 D000                  		lea	($FFFFD000).w,a1
0000FAD2 0829 0001 0022             		btst	#1,$22(a1)
0000FAD8 6600                       		bne.s	loc_FA44
0000FADA 3029 0008                  		move.w	8(a1),d0
0000FADE 9068 0008                  		sub.w	8(a0),d0
0000FAE2 D041                       		add.w	d1,d0
0000FAE4 6B00                       		bmi.s	loc_FA44
0000FAE6 B042                       		cmp.w	d2,d0
0000FAE8 6500                       		bcs.s	loc_FA58
0000FAEA                            
0000FAEA                            loc_FA44:
0000FAEA 08A9 0003 0022             		bclr	#3,$22(a1)
0000FAF0 08A8 0003 0022             		bclr	#3,$22(a0)
0000FAF6 4228 0025                  		clr.b	$25(a0)
0000FAFA 7800                       		moveq	#0,d4
0000FAFC 4E75                       		rts	
0000FAFE                            ; ===========================================================================
0000FAFE                            
0000FAFE                            loc_FA58:
0000FAFE 3404                       		move.w	d4,d2
0000FB00 6100 8068                  		bsr.w	MvSonicOnPtfm
0000FB04 7800                       		moveq	#0,d4
0000FB06 4E75                       		rts	
0000FB08                            ; ===========================================================================
0000FB08                            
0000FB08                            SolidObject2F:				; XREF: Obj2F_Solid
0000FB08 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB0C 4A28 0001                  		tst.b	1(a0)
0000FB10 6A00 0000                  		bpl.w	loc_FB92
0000FB14 3029 0008                  		move.w	8(a1),d0
0000FB18 9068 0008                  		sub.w	8(a0),d0
0000FB1C D041                       		add.w	d1,d0
0000FB1E 6B00 0000                  		bmi.w	loc_FB92
0000FB22 3601                       		move.w	d1,d3
0000FB24 D643                       		add.w	d3,d3
0000FB26 B043                       		cmp.w	d3,d0
0000FB28 6200 0000                  		bhi.w	loc_FB92
0000FB2C 3A00                       		move.w	d0,d5
0000FB2E 0828 0000 0001             		btst	#0,1(a0)
0000FB34 6700                       		beq.s	loc_FA94
0000FB36 4645                       		not.w	d5
0000FB38 DA43                       		add.w	d3,d5
0000FB3A                            
0000FB3A                            loc_FA94:
0000FB3A E24D                       		lsr.w	#1,d5
0000FB3C 7600                       		moveq	#0,d3
0000FB3E 1632 5000                  		move.b	(a2,d5.w),d3
0000FB42 9612                       		sub.b	(a2),d3
0000FB44 3A28 000C                  		move.w	$C(a0),d5
0000FB48 9A43                       		sub.w	d3,d5
0000FB4A 1629 0016                  		move.b	$16(a1),d3
0000FB4E 4883                       		ext.w	d3
0000FB50 D443                       		add.w	d3,d2
0000FB52 3629 000C                  		move.w	$C(a1),d3
0000FB56 9645                       		sub.w	d5,d3
0000FB58 5843                       		addq.w	#4,d3
0000FB5A D642                       		add.w	d2,d3
0000FB5C 6B00 0000                  		bmi.w	loc_FB92
0000FB60 3802                       		move.w	d2,d4
0000FB62 D844                       		add.w	d4,d4
0000FB64 B644                       		cmp.w	d4,d3
0000FB66 6400 0000                  		bcc.w	loc_FB92
0000FB6A 6000 0000                  		bra.w	loc_FB0E
0000FB6E                            ; ===========================================================================
0000FB6E                            
0000FB6E                            loc_FAC8:
0000FB6E 4A28 0001                  		tst.b	1(a0)
0000FB72 6A00 0000                  		bpl.w	loc_FB92
0000FB76                            
0000FB76                            loc_FAD0:
0000FB76 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB7A 3029 0008                  		move.w	8(a1),d0
0000FB7E 9068 0008                  		sub.w	8(a0),d0
0000FB82 D041                       		add.w	d1,d0
0000FB84 6B00 0000                  		bmi.w	loc_FB92
0000FB88 3601                       		move.w	d1,d3
0000FB8A D643                       		add.w	d3,d3
0000FB8C B043                       		cmp.w	d3,d0
0000FB8E 6200 0000                  		bhi.w	loc_FB92
0000FB92 1629 0016                  		move.b	$16(a1),d3
0000FB96 4883                       		ext.w	d3
0000FB98 D443                       		add.w	d3,d2
0000FB9A 3629 000C                  		move.w	$C(a1),d3
0000FB9E 9668 000C                  		sub.w	$C(a0),d3
0000FBA2 5843                       		addq.w	#4,d3
0000FBA4 D642                       		add.w	d2,d3
0000FBA6 6B00 0000                  		bmi.w	loc_FB92
0000FBAA 3802                       		move.w	d2,d4
0000FBAC D844                       		add.w	d4,d4
0000FBAE B644                       		cmp.w	d4,d3
0000FBB0 6400 0000                  		bcc.w	loc_FB92
0000FBB4                            
0000FBB4                            loc_FB0E:
0000FBB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FBB8 6B00 0000                  		bmi.w	loc_FB92
0000FBBC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FBC2 6400 0000                  		bcc.w	loc_FB92
0000FBC6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FBCA 6600 0000                  		bne.w	loc_FBAC
0000FBCE 3A00                       		move.w	d0,d5
0000FBD0 B240                       		cmp.w	d0,d1
0000FBD2 6400                       		bcc.s	loc_FB36
0000FBD4 D241                       		add.w	d1,d1
0000FBD6 9041                       		sub.w	d1,d0
0000FBD8 3A00                       		move.w	d0,d5
0000FBDA 4445                       		neg.w	d5
0000FBDC                            
0000FBDC                            loc_FB36:
0000FBDC 3203                       		move.w	d3,d1
0000FBDE B443                       		cmp.w	d3,d2
0000FBE0 6400                       		bcc.s	loc_FB44
0000FBE2 5943                       		subq.w	#4,d3
0000FBE4 9644                       		sub.w	d4,d3
0000FBE6 3203                       		move.w	d3,d1
0000FBE8 4441                       		neg.w	d1
0000FBEA                            
0000FBEA                            loc_FB44:
0000FBEA BA41                       		cmp.w	d1,d5
0000FBEC 6200 0000                  		bhi.w	loc_FBB0
0000FBF0 0C41 0004                  		cmpi.w	#4,d1
0000FBF4 6300                       		bls.s	loc_FB8C
0000FBF6 4A40                       		tst.w	d0
0000FBF8 6700                       		beq.s	loc_FB70
0000FBFA 6B00                       		bmi.s	loc_FB5E
0000FBFC 4A69 0010                  		tst.w	$10(a1)
0000FC00 6B00                       		bmi.s	loc_FB70
0000FC02 6000                       		bra.s	loc_FB64
0000FC04                            ; ===========================================================================
0000FC04                            
0000FC04                            loc_FB5E:
0000FC04 4A69 0010                  		tst.w	$10(a1)
0000FC08 6A00                       		bpl.s	loc_FB70
0000FC0A                            
0000FC0A                            loc_FB64:
0000FC0A 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FC10 337C 0000 0010             		move.w	#0,$10(a1)
0000FC16                            
0000FC16                            loc_FB70:
0000FC16 9169 0008                  		sub.w	d0,8(a1)
0000FC1A 0829 0001 0022             		btst	#1,$22(a1)
0000FC20 6600                       		bne.s	loc_FB8C
0000FC22 08E9 0005 0022             		bset	#5,$22(a1)
0000FC28 08E8 0005 0022             		bset	#5,$22(a0)
0000FC2E 7801                       		moveq	#1,d4
0000FC30 4E75                       		rts	
0000FC32                            ; ===========================================================================
0000FC32                            
0000FC32                            loc_FB8C:
0000FC32 6100                       		bsr.s	loc_FBA0
0000FC34 7801                       		moveq	#1,d4
0000FC36 4E75                       		rts	
0000FC38                            ; ===========================================================================
0000FC38                            
0000FC38                            loc_FB92:
0000FC38 0828 0005 0022             		btst	#5,$22(a0)
0000FC3E 6700                       		beq.s	loc_FBAC
0000FC40 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FC46                            
0000FC46                            loc_FBA0:
0000FC46 08A8 0005 0022             		bclr	#5,$22(a0)
0000FC4C 08A9 0005 0022             		bclr	#5,$22(a1)
0000FC52                            
0000FC52                            loc_FBAC:
0000FC52 7800                       		moveq	#0,d4
0000FC54 4E75                       		rts	
0000FC56                            ; ===========================================================================
0000FC56                            
0000FC56                            loc_FBB0:
0000FC56 4A43                       		tst.w	d3
0000FC58 6B00                       		bmi.s	loc_FBBC
0000FC5A 0C43 0010                  		cmpi.w	#$10,d3
0000FC5E 6500                       		bcs.s	loc_FBEE
0000FC60 60D6                       		bra.s	loc_FB92
0000FC62                            ; ===========================================================================
0000FC62                            
0000FC62                            loc_FBBC:
0000FC62 4A69 0012                  		tst.w	$12(a1)
0000FC66 6700                       		beq.s	loc_FBD6
0000FC68 6A00                       		bpl.s	loc_FBD2
0000FC6A 4A43                       		tst.w	d3
0000FC6C 6A00                       		bpl.s	loc_FBD2
0000FC6E 9769 000C                  		sub.w	d3,$C(a1)
0000FC72 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FC78                            
0000FC78                            loc_FBD2:
0000FC78 78FF                       		moveq	#-1,d4
0000FC7A 4E75                       		rts	
0000FC7C                            ; ===========================================================================
0000FC7C                            
0000FC7C                            loc_FBD6:
0000FC7C 0829 0001 0022             		btst	#1,$22(a1)
0000FC82 66F4                       		bne.s	loc_FBD2
0000FC84 2F08                       		move.l	a0,-(sp)
0000FC86 2049                       		movea.l	a1,a0
0000FC88 4EB9 0000 0000             		jsr	KillSonic
0000FC8E 205F                       		movea.l	(sp)+,a0
0000FC90 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000FC96 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000FC9C 78FF                       		moveq	#-1,d4
0000FC9E 4E75                       		rts	
0000FCA0                            ; ===========================================================================
0000FCA0                            
0000FCA0                            loc_FBEE:
0000FCA0 5943                       		subq.w	#4,d3
0000FCA2 7200                       		moveq	#0,d1
0000FCA4 1228 0019                  		move.b	$19(a0),d1
0000FCA8 3401                       		move.w	d1,d2
0000FCAA D442                       		add.w	d2,d2
0000FCAC D269 0008                  		add.w	8(a1),d1
0000FCB0 9268 0008                  		sub.w	8(a0),d1
0000FCB4 6B00                       		bmi.s	loc_FC28
0000FCB6 B242                       		cmp.w	d2,d1
0000FCB8 6400                       		bcc.s	loc_FC28
0000FCBA 4A69 0012                  		tst.w	$12(a1)
0000FCBE 6B00                       		bmi.s	loc_FC28
0000FCC0 9769 000C                  		sub.w	d3,$C(a1)
0000FCC4 5369 000C                  		subq.w	#1,$C(a1)
0000FCC8 6100                       		bsr.s	sub_FC2C
0000FCCA 117C 0002 0025             		move.b	#2,$25(a0)
0000FCD0 08E8 0003 0022             		bset	#3,$22(a0)
0000FCD6 78FF                       		moveq	#-1,d4
0000FCD8 4E75                       		rts	
0000FCDA                            ; ===========================================================================
0000FCDA                            
0000FCDA                            loc_FC28:
0000FCDA 7800                       		moveq	#0,d4
0000FCDC 4E75                       		rts	
0000FCDE                            ; End of function SolidObject
0000FCDE                            
0000FCDE                            
0000FCDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCDE                            
0000FCDE                            
0000FCDE                            sub_FC2C:				; XREF: SolidObject
0000FCDE 0829 0003 0022             		btst	#3,$22(a1)
0000FCE4 6700                       		beq.s	loc_FC4E
0000FCE6 7000                       		moveq	#0,d0
0000FCE8 1029 003D                  		move.b	$3D(a1),d0
0000FCEC ED48                       		lsl.w	#6,d0
0000FCEE 0680 00FF D000             		addi.l	#$FFD000,d0
0000FCF4 2440                       		movea.l	d0,a2
0000FCF6 08AA 0003 0022             		bclr	#3,$22(a2)
0000FCFC 422A 0025                  		clr.b	$25(a2)
0000FD00                            
0000FD00                            loc_FC4E:
0000FD00 3008                       		move.w	a0,d0
0000FD02 0440 D000                  		subi.w	#-$3000,d0
0000FD06 EC48                       		lsr.w	#6,d0
0000FD08 0240 007F                  		andi.w	#$7F,d0
0000FD0C 1340 003D                  		move.b	d0,$3D(a1)
0000FD10 137C 0000 0026             		move.b	#0,$26(a1)
0000FD16 337C 0000 0012             		move.w	#0,$12(a1)
0000FD1C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FD22 0829 0001 0022             		btst	#1,$22(a1)
0000FD28 6700                       		beq.s	loc_FC84
0000FD2A 2F08                       		move.l	a0,-(sp)
0000FD2C 2049                       		movea.l	a1,a0
0000FD2E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FD34 205F                       		movea.l	(sp)+,a0
0000FD36                            
0000FD36                            loc_FC84:
0000FD36 08E9 0003 0022             		bset	#3,$22(a1)
0000FD3C 08E8 0003 0022             		bset	#3,$22(a0)
0000FD42 4E75                       		rts	
0000FD44                            ; End of function sub_FC2C
0000FD44                            
0000FD44                            ; ===========================================================================
0000FD44                            ; ---------------------------------------------------------------------------
0000FD44                            ; Object 51 - smashable	green block (MZ)
0000FD44                            ; ---------------------------------------------------------------------------
0000FD44                            
0000FD44                            Obj51:					; XREF: Obj_Index
0000FD44 7000                       		moveq	#0,d0
0000FD46 1028 0024                  		move.b	$24(a0),d0
0000FD4A 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FD4E 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FD52 6000 FA00                  		bra.w	MarkObjGone
0000FD56                            ; ===========================================================================
0000FD56 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FD58 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FD5A 0000                       		dc.w Obj51_Display-Obj51_Index
0000FD5C                            ; ===========================================================================
0000FD5C                            
0000FD5C                            Obj51_Main:				; XREF: Obj51_Index
0000FD5C 5428 0024                  		addq.b	#2,$24(a0)
0000FD60 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FD68 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FD6E 117C 0004 0001             		move.b	#4,1(a0)
0000FD74 117C 0010 0019             		move.b	#$10,$19(a0)
0000FD7A 117C 0004 0018             		move.b	#4,$18(a0)
0000FD80 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FD86                            
0000FD86                            Obj51_Solid:				; XREF: Obj51_Index
0000FD86 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FD8C 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FD92 323C 001B                  		move.w	#$1B,d1
0000FD96 343C 0010                  		move.w	#$10,d2
0000FD9A 363C 0011                  		move.w	#$11,d3
0000FD9E 3828 0008                  		move.w	8(a0),d4
0000FDA2 6100 FCD8                  		bsr.w	SolidObject
0000FDA6 0828 0003 0022             		btst	#3,$22(a0)
0000FDAC 6600                       		bne.s	Obj51_Smash
0000FDAE                            
0000FDAE                            locret_FCFC:
0000FDAE 4E75                       		rts	
0000FDB0                            ; ===========================================================================
0000FDB0                            
0000FDB0                            Obj51_Smash:				; XREF: Obj51_Solid
0000FDB0 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FDB6 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FDB8 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FDBE 08E9 0002 0022             		bset	#2,$22(a1)
0000FDC4 137C 000E 0016             		move.b	#$E,$16(a1)
0000FDCA 137C 0007 0017             		move.b	#7,$17(a1)
0000FDD0 137C 0002 001C             		move.b	#2,$1C(a1)
0000FDD6 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FDDC 08E9 0001 0022             		bset	#1,$22(a1)
0000FDE2 08A9 0003 0022             		bclr	#3,$22(a1)
0000FDE8 137C 0002 0024             		move.b	#2,$24(a1)
0000FDEE 08A8 0003 0022             		bclr	#3,$22(a0)
0000FDF4 4228 0025                  		clr.b	$25(a0)
0000FDF8 117C 0001 001A             		move.b	#1,$1A(a0)
0000FDFE 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FE04 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FE06 343C 0038                  		move.w	#$38,d2
0000FE0A 6100 D48C                  		bsr.w	SmashObject
0000FE0E 6100 DD26                  		bsr.w	SingleObjLoad
0000FE12 6600                       		bne.s	Obj51_Display
0000FE14 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FE18 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FE24 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FE28 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FE2C 0C42 0006                  		cmpi.w	#6,d2
0000FE30 6500                       		bcs.s	Obj51_Bonus
0000FE32 7406                       		moveq	#6,d2
0000FE34                            
0000FE34                            Obj51_Bonus:
0000FE34 7000                       		moveq	#0,d0
0000FE36 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FE3A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FE40 6500                       		bcs.s	loc_FD98	; if not, branch
0000FE42 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FE46 740A                       		moveq	#10,d2
0000FE48                            
0000FE48                            loc_FD98:
0000FE48 4EB9 0000 0000             		jsr	AddPoints
0000FE4E E24A                       		lsr.w	#1,d2
0000FE50 1342 001A                  		move.b	d2,$1A(a1)
0000FE54                            
0000FE54                            Obj51_Display:				; XREF: Obj51_Index
0000FE54 6100 D82E                  		bsr.w	SpeedToPos
0000FE58 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FE5E 6100 D84A                  		bsr.w	DisplaySprite
0000FE62 4A28 0001                  		tst.b	1(a0)
0000FE66 6A00 D87E                  		bpl.w	DeleteObject
0000FE6A 4E75                       		rts	
0000FE6C                            ; ===========================================================================
0000FE6C FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FE70 FF00 FF00                  		dc.w $FF00, $FF00
0000FE74 0200 FE00                  		dc.w $200, $FE00
0000FE78 0100 FF00                  		dc.w $100, $FF00
0000FE7C                            
0000FE7C 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FE84                            ; ---------------------------------------------------------------------------
0000FE84                            ; Sprite mappings - smashable green block (MZ)
0000FE84                            ; ---------------------------------------------------------------------------
0000FE84                            Map_obj51:
0000FE84                            	include "_maps\obj51.asm"
0000FE84                            ; ---------------------------------------------------------------------------
0000FE84                            ; Sprite mappings - smashable green block (MZ)
0000FE84                            ; ---------------------------------------------------------------------------
0000FE84 0000                       		dc.w byte_FDD8-Map_obj51
0000FE86 0000                       		dc.w byte_FDE3-Map_obj51
0000FE88 02                         byte_FDD8:	dc.b 2
0000FE89 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FE8E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FE93 04                         byte_FDE3:	dc.b 4
0000FE94 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FE99 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FE9E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FEA3 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FEA8                            		even
0000FEA8                            		even
0000FEA8                            
0000FEA8                            ; ===========================================================================
0000FEA8                            ; ---------------------------------------------------------------------------
0000FEA8                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FEA8                            ; ---------------------------------------------------------------------------
0000FEA8                            
0000FEA8                            Obj52:					; XREF: Obj_Index
0000FEA8 7000                       		moveq	#0,d0
0000FEAA 1028 0024                  		move.b	$24(a0),d0
0000FEAE 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FEB2 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FEB6                            ; ===========================================================================
0000FEB6 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FEB8 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FEBA 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FEBC                            
0000FEBC 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FEBE 2001                       		dc.b $20, 1
0000FEC0 2002                       		dc.b $20, 2
0000FEC2 4003                       		dc.b $40, 3
0000FEC4 3004                       		dc.b $30, 4
0000FEC6                            ; ===========================================================================
0000FEC6                            
0000FEC6                            Obj52_Main:				; XREF: Obj52_Index
0000FEC6 5428 0024                  		addq.b	#2,$24(a0)
0000FECA 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FED2 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FED8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FEDE 6600                       		bne.s	loc_FE44
0000FEE0 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FEE8 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FEEE 117C 0007 0016             		move.b	#7,$16(a0)
0000FEF4                            
0000FEF4                            loc_FE44:
0000FEF4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FEFA 6600                       		bne.s	loc_FE60
0000FEFC 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FF02 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FF08 6700                       		beq.s	loc_FE60	; if yes, branch
0000FF0A 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FF10                            
0000FF10                            loc_FE60:
0000FF10 117C 0004 0001             		move.b	#4,1(a0)
0000FF16 7000                       		moveq	#0,d0
0000FF18 1028 0028                  		move.b	$28(a0),d0
0000FF1C E648                       		lsr.w	#3,d0
0000FF1E 0240 001E                  		andi.w	#$1E,d0
0000FF22 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FF26 115A 0019                  		move.b	(a2)+,$19(a0)
0000FF2A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FF2E 117C 0004 0018             		move.b	#4,$18(a0)
0000FF34 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FF3A 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FF40 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FF46                            
0000FF46                            Obj52_Platform:				; XREF: Obj52_Index
0000FF46 6100 0000                  		bsr.w	Obj52_Move
0000FF4A 7200                       		moveq	#0,d1
0000FF4C 1228 0019                  		move.b	$19(a0),d1
0000FF50 4EB9 0000 7498             		jsr	(PlatformObject).l
0000FF56 6000                       		bra.s	Obj52_ChkDel
0000FF58                            ; ===========================================================================
0000FF58                            
0000FF58                            Obj52_StandOn:				; XREF: Obj52_Index
0000FF58 7200                       		moveq	#0,d1
0000FF5A 1228 0019                  		move.b	$19(a0),d1
0000FF5E 4EB9 0000 760C             		jsr	(ExitPlatform).l
0000FF64 3F28 0008                  		move.w	8(a0),-(sp)
0000FF68 6100 0000                  		bsr.w	Obj52_Move
0000FF6C 341F                       		move.w	(sp)+,d2
0000FF6E 4EB9 0000 7B76             		jsr	(MvSonicOnPtfm2).l
0000FF74                            
0000FF74                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FF74 3028 0030                  		move.w	$30(a0),d0
0000FF78 0240 FF80                  		andi.w	#$FF80,d0
0000FF7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF80 0441 0080                  		subi.w	#$80,d1
0000FF84 0241 FF80                  		andi.w	#$FF80,d1
0000FF88 9041                       		sub.w	d1,d0
0000FF8A 0C40 0280                  		cmpi.w	#$280,d0
0000FF8E 6200 D756                  		bhi.w	DeleteObject
0000FF92 6000 D716                  		bra.w	DisplaySprite
0000FF96                            ; ===========================================================================
0000FF96                            
0000FF96                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000FF96 7000                       		moveq	#0,d0
0000FF98 1028 0028                  		move.b	$28(a0),d0
0000FF9C 0240 000F                  		andi.w	#$F,d0
0000FFA0 D040                       		add.w	d0,d0
0000FFA2 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000FFA6 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000FFAA                            ; ===========================================================================
0000FFAA 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000FFAE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000FFB2 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000FFB6 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000FFBA 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000FFBE 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000FFC0                            ; ===========================================================================
0000FFC0                            
0000FFC0                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000FFC0 4E75                       		rts	
0000FFC2                            ; ===========================================================================
0000FFC2                            
0000FFC2                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000FFC2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000FFC6 323C 0060                  		move.w	#$60,d1
0000FFCA 0828 0000 0022             		btst	#0,$22(a0)
0000FFD0 6700                       		beq.s	loc_FF26
0000FFD2 4440                       		neg.w	d0
0000FFD4 D041                       		add.w	d1,d0
0000FFD6                            
0000FFD6                            loc_FF26:
0000FFD6 3228 0030                  		move.w	$30(a0),d1
0000FFDA 9240                       		sub.w	d0,d1
0000FFDC 3141 0008                  		move.w	d1,8(a0)
0000FFE0 4E75                       		rts	
0000FFE2                            ; ===========================================================================
0000FFE2                            
0000FFE2                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000FFE2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000FFE8 6600                       		bne.s	Obj52_02_Wait
0000FFEA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000FFEE                            
0000FFEE                            Obj52_02_Wait:
0000FFEE 4E75                       		rts	
0000FFF0                            ; ===========================================================================
0000FFF0                            
0000FFF0                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0000FFF0 7600                       		moveq	#0,d3
0000FFF2 1628 0019                  		move.b	$19(a0),d3
0000FFF6 6100 0000                  		bsr.w	ObjHitWallRight
0000FFFA 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FFFC 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0000FFFE 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010002 3168 0008 0030             		move.w	8(a0),$30(a0)
00010008 4E75                       		rts	
0001000A                            ; ===========================================================================
0001000A                            
0001000A                            Obj52_03_End:
0001000A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001000E 4E75                       		rts	
00010010                            ; ===========================================================================
00010010                            
00010010                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010010 7600                       		moveq	#0,d3
00010012 1628 0019                  		move.b	$19(a0),d3
00010016 6100 0000                  		bsr.w	ObjHitWallRight
0001001A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001001C 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001001E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010022 3168 0008 0030             		move.w	8(a0),$30(a0)
00010028 4E75                       		rts	
0001002A                            ; ===========================================================================
0001002A                            
0001002A                            Obj52_05_End:
0001002A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001002E 4E75                       		rts	
00010030                            ; ===========================================================================
00010030                            
00010030                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010030 6100 D652                  		bsr.w	SpeedToPos
00010034 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001003A 6100 0000                  		bsr.w	ObjHitFloor
0001003E 4A41                       		tst.w	d1		; has platform hit the floor?
00010040 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010044 D368 000C                  		add.w	d1,$C(a0)
00010048 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001004C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010050                            
00010050                            locret_FFA0:
00010050 4E75                       		rts	
00010052                            ; ===========================================================================
00010052                            
00010052                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010052 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010056 6700                       		beq.s	Obj52_07_ChkDel
00010058 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001005C                            
0001005C                            Obj52_07_ChkDel:
0001005C 588F                       		addq.l	#4,sp
0001005E 3028 0030                  		move.w	$30(a0),d0
00010062 0240 FF80                  		andi.w	#$FF80,d0
00010066 3238 F700                  		move.w	($FFFFF700).w,d1
0001006A 0441 0080                  		subi.w	#$80,d1
0001006E 0241 FF80                  		andi.w	#$FF80,d1
00010072 9041                       		sub.w	d1,d0
00010074 0C40 0280                  		cmpi.w	#$280,d0
00010078 6200 D66C                  		bhi.w	DeleteObject
0001007C 4E75                       		rts	
0001007E                            ; ===========================================================================
0001007E                            
0001007E                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001007E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010082 323C 0080                  		move.w	#$80,d1
00010086 0828 0000 0022             		btst	#0,$22(a0)
0001008C 6700                       		beq.s	loc_FFE2
0001008E 4440                       		neg.w	d0
00010090 D041                       		add.w	d1,d0
00010092                            
00010092                            loc_FFE2:
00010092 3228 0032                  		move.w	$32(a0),d1
00010096 9240                       		sub.w	d0,d1
00010098 3141 000C                  		move.w	d1,$C(a0)
0001009C 4E75                       		rts	
0001009E                            ; ===========================================================================
0001009E                            
0001009E                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001009E 7600                       		moveq	#0,d3
000100A0 1628 0019                  		move.b	$19(a0),d3
000100A4 D643                       		add.w	d3,d3
000100A6 7208                       		moveq	#8,d1
000100A8 0828 0000 0022             		btst	#0,$22(a0)
000100AE 6700                       		beq.s	loc_10004
000100B0 4441                       		neg.w	d1
000100B2 4443                       		neg.w	d3
000100B4                            
000100B4                            loc_10004:
000100B4 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000100B8 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000100BA 3028 0008                  		move.w	8(a0),d0
000100BE 9068 0030                  		sub.w	$30(a0),d0
000100C2 B043                       		cmp.w	d3,d0
000100C4 6700                       		beq.s	Obj52_0A_Wait
000100C6 D368 0008                  		add.w	d1,8(a0)	; move platform
000100CA 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000100D0 4E75                       		rts	
000100D2                            ; ===========================================================================
000100D2                            
000100D2                            Obj52_0A_Wait:
000100D2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000100D6 6600                       		bne.s	locret_1002E	; if time remains, branch
000100D8 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000100DE                            
000100DE                            locret_1002E:
000100DE 4E75                       		rts	
000100E0                            ; ===========================================================================
000100E0                            
000100E0                            Obj52_0A_Back:
000100E0 3028 0008                  		move.w	8(a0),d0
000100E4 9068 0030                  		sub.w	$30(a0),d0
000100E8 6700                       		beq.s	Obj52_0A_Reset
000100EA 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000100EE 4E75                       		rts	
000100F0                            ; ===========================================================================
000100F0                            
000100F0                            Obj52_0A_Reset:
000100F0 4268 0036                  		clr.w	$36(a0)
000100F4 5328 0028                  		subq.b	#1,$28(a0)
000100F8 4E75                       		rts	
000100FA                            ; ===========================================================================
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            ; Sprite mappings - moving blocks (MZ, SBZ)
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            Map_obj52:
000100FA                            	include "_maps\obj52mz.asm"
000100FA                            ; ---------------------------------------------------------------------------
000100FA                            ; Sprite mappings - moving blocks (MZ, SBZ)
000100FA                            ; ---------------------------------------------------------------------------
000100FA 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000100FE 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010102 0000                       		dc.w byte_1008F-Map_obj52
00010104 01                         byte_10054:	dc.b 1
00010105 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001010A 02                         byte_1005A:	dc.b 2
0001010B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010110 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010115 04                         byte_10065:	dc.b 4
00010116 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001011B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010120 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010125 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001012A 04                         byte_1007A:	dc.b 4
0001012B F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010130 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010135 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001013A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001013F 03                         byte_1008F:	dc.b 3
00010140 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010145 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001014A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010150 00                         		even
00010150 00                         		even
00010150                            
00010150                            ; ---------------------------------------------------------------------------
00010150                            ; Sprite mappings - moving block (LZ)
00010150                            ; ---------------------------------------------------------------------------
00010150                            Map_obj52a:
00010150                            	include "_maps\obj52lz.asm"
00010150                            ; ---------------------------------------------------------------------------
00010150                            ; Sprite mappings - moving block (LZ)
00010150                            ; ---------------------------------------------------------------------------
00010150 0000                       		dc.w byte_100A2-Map_obj52a
00010152 01                         byte_100A2:	dc.b 1
00010153 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010158                            		even
00010158                            		even
00010158                            
00010158                            ; ===========================================================================
00010158                            ; ---------------------------------------------------------------------------
00010158                            ; Object 55 - Basaran enemy (MZ)
00010158                            ; ---------------------------------------------------------------------------
00010158                            
00010158                            Obj55:					; XREF: Obj_Index
00010158 7000                       		moveq	#0,d0
0001015A 1028 0024                  		move.b	$24(a0),d0
0001015E 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010162 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010166                            ; ===========================================================================
00010166 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010168 0000                       		dc.w Obj55_Action-Obj55_Index
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            Obj55_Main:				; XREF: Obj55_Index
0001016A 5428 0024                  		addq.b	#2,$24(a0)
0001016E 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010176 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001017C 117C 0004 0001             		move.b	#4,1(a0)
00010182 117C 000C 0016             		move.b	#$C,$16(a0)
00010188 117C 0002 0018             		move.b	#2,$18(a0)
0001018E 117C 000B 0020             		move.b	#$B,$20(a0)
00010194 117C 0010 0019             		move.b	#$10,$19(a0)
0001019A                            
0001019A                            Obj55_Action:				; XREF: Obj55_Index
0001019A 7000                       		moveq	#0,d0
0001019C 1028 0025                  		move.b	$25(a0),d0
000101A0 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000101A4 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000101A8 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000101AE 6100 A5F2                  		bsr.w	AnimateSprite
000101B2 6000 F5A0                  		bra.w	MarkObjGone
000101B6                            ; ===========================================================================
000101B6 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000101B8 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000101BA 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000101BC 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000101BE                            ; ===========================================================================
000101BE                            
000101BE                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000101BE 343C 0080                  		move.w	#$80,d2
000101C2 6100 0000                  		bsr.w	Obj55_ChkSonic
000101C6 6400                       		bcc.s	Obj55_NoDrop
000101C8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000101CC 3140 0036                  		move.w	d0,$36(a0)
000101D0 9068 000C                  		sub.w	$C(a0),d0
000101D4 6500                       		bcs.s	Obj55_NoDrop
000101D6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000101DA 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000101DC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000101E0 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000101E2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000101E6 D007                       		add.b	d7,d0
000101E8 0200 0007                  		andi.b	#7,d0
000101EC 6600                       		bne.s	Obj55_NoDrop
000101EE 117C 0001 001C             		move.b	#1,$1C(a0)
000101F4 5428 0025                  		addq.b	#2,$25(a0)
000101F8                            
000101F8                            Obj55_NoDrop:
000101F8 4E75                       		rts	
000101FA                            ; ===========================================================================
000101FA                            
000101FA                            Obj55_DropFly:				; XREF: Obj55_Index2
000101FA 6100 D488                  		bsr.w	SpeedToPos
000101FE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010204 343C 0080                  		move.w	#$80,d2
00010208 6100 0000                  		bsr.w	Obj55_ChkSonic
0001020C 3028 0036                  		move.w	$36(a0),d0
00010210 9068 000C                  		sub.w	$C(a0),d0
00010214 6500                       		bcs.s	Obj55_ChkDel
00010216 0C40 0010                  		cmpi.w	#$10,d0
0001021A 6400                       		bcc.s	locret_10180
0001021C 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010220 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010226 117C 0002 001C             		move.b	#2,$1C(a0)
0001022C 5428 0025                  		addq.b	#2,$25(a0)
00010230                            
00010230                            locret_10180:
00010230 4E75                       		rts	
00010232                            ; ===========================================================================
00010232                            
00010232                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010232 4A28 0001                  		tst.b	1(a0)
00010236 6A00 D4AE                  		bpl.w	DeleteObject
0001023A 4E75                       		rts	
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001023C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010240 0200 000F                  		andi.b	#$F,d0
00010244 6600                       		bne.s	loc_101A0
00010246 303C 00C0                  		move.w	#$C0,d0
0001024A 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play flapping sound
00010250                            
00010250                            loc_101A0:
00010250 6100 D432                  		bsr.w	SpeedToPos
00010254 3038 D008                  		move.w	($FFFFD008).w,d0
00010258 9068 0008                  		sub.w	8(a0),d0
0001025C 6400                       		bcc.s	loc_101B0
0001025E 4440                       		neg.w	d0
00010260                            
00010260                            loc_101B0:
00010260 0C40 0080                  		cmpi.w	#$80,d0
00010264 6500                       		bcs.s	locret_101C6
00010266 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001026A D007                       		add.b	d7,d0
0001026C 0200 0007                  		andi.b	#7,d0
00010270 6600                       		bne.s	locret_101C6
00010272 5428 0025                  		addq.b	#2,$25(a0)
00010276                            
00010276                            locret_101C6:
00010276 4E75                       		rts	
00010278                            ; ===========================================================================
00010278                            
00010278                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010278 6100 D40A                  		bsr.w	SpeedToPos
0001027C 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010282 6100 0000                  		bsr.w	ObjHitCeiling
00010286 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010288 6A00                       		bpl.s	locret_101F4	; if not, branch
0001028A 9368 000C                  		sub.w	d1,$C(a0)
0001028E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010294 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010298 4268 0012                  		clr.w	$12(a0)
0001029C 4228 001C                  		clr.b	$1C(a0)
000102A0 4228 0025                  		clr.b	$25(a0)
000102A4                            
000102A4                            locret_101F4:
000102A4 4E75                       		rts	
000102A6                            ; ===========================================================================
000102A6                            
000102A6                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000102A6 323C 0100                  		move.w	#$100,d1
000102AA 08E8 0000 0022             		bset	#0,$22(a0)
000102B0 3038 D008                  		move.w	($FFFFD008).w,d0
000102B4 9068 0008                  		sub.w	8(a0),d0
000102B8 6400                       		bcc.s	loc_10214
000102BA 4440                       		neg.w	d0
000102BC 4441                       		neg.w	d1
000102BE 08A8 0000 0022             		bclr	#0,$22(a0)
000102C4                            
000102C4                            loc_10214:
000102C4 B042                       		cmp.w	d2,d0
000102C6 4E75                       		rts	
000102C8                            ; ===========================================================================
000102C8 6100 D3BA                  		bsr.w	SpeedToPos
000102CC 6100 D3DC                  		bsr.w	DisplaySprite
000102D0 4A28 0001                  		tst.b	1(a0)
000102D4 6A00 D410                  		bpl.w	DeleteObject
000102D8 4E75                       		rts	
000102DA                            ; ===========================================================================
000102DA                            Ani_obj55:
000102DA                            	include "_anim\obj55.asm"
000102DA                            ; ---------------------------------------------------------------------------
000102DA                            ; Animation script - Basaran enemy
000102DA                            ; ---------------------------------------------------------------------------
000102DA 0000                       		dc.w byte_10230-Ani_obj55
000102DC 0000                       		dc.w byte_10234-Ani_obj55
000102DE 0000                       		dc.w byte_10238-Ani_obj55
000102E0 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000102E4 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000102E8 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000102EE                            		even
000102EE                            		even
000102EE                            
000102EE                            ; ---------------------------------------------------------------------------
000102EE                            ; Sprite mappings - Basaran enemy (MZ)
000102EE                            ; ---------------------------------------------------------------------------
000102EE                            Map_obj55:
000102EE                            	include "_maps\obj55.asm"
000102EE                            ; ---------------------------------------------------------------------------
000102EE                            ; Sprite mappings - Basaran enemy (MZ)
000102EE                            ; ---------------------------------------------------------------------------
000102EE 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000102F2 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000102F6 01                         byte_10246:	dc.b 1
000102F7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000102FC 03                         byte_1024C:	dc.b 3
000102FD F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010302 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010307 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
0001030C 04                         byte_1025C:	dc.b 4
0001030D F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010312 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010317 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
0001031C 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010321 04                         byte_10271:	dc.b 4
00010322 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010327 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
0001032C 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010331 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010336                            		even
00010336                            		even
00010336                            
00010336                            ; ===========================================================================
00010336                            ; ---------------------------------------------------------------------------
00010336                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010336                            ; ---------------------------------------------------------------------------
00010336                            
00010336                            Obj56:					; XREF: Obj_Index
00010336 7000                       		moveq	#0,d0
00010338 1028 0024                  		move.b	$24(a0),d0
0001033C 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010340 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010344                            ; ===========================================================================
00010344 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010346 0000                       		dc.w Obj56_Action-Obj56_Index
00010348                            
00010348 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001034A 2020                       		dc.b  $20, $20
0001034C 1020                       		dc.b  $10, $20
0001034E 201A                       		dc.b  $20, $1A
00010350 1027                       		dc.b  $10, $27
00010352 1010                       		dc.b  $10, $10
00010354 0820                       		dc.b	8, $20
00010356 4010                       		dc.b  $40, $10
00010358                            ; ===========================================================================
00010358                            
00010358                            Obj56_Main:				; XREF: Obj56_Index
00010358 5428 0024                  		addq.b	#2,$24(a0)
0001035C 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010364 317C 4000 0002             		move.w	#$4000,2(a0)
0001036A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010370 6600                       		bne.s	loc_102C8
00010372 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010378                            
00010378                            loc_102C8:
00010378 117C 0004 0001             		move.b	#4,1(a0)
0001037E 117C 0003 0018             		move.b	#3,$18(a0)
00010384 7000                       		moveq	#0,d0
00010386 1028 0028                  		move.b	$28(a0),d0
0001038A E648                       		lsr.w	#3,d0
0001038C 0240 000E                  		andi.w	#$E,d0
00010390 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010394 115A 0019                  		move.b	(a2)+,$19(a0)
00010398 1152 0016                  		move.b	(a2),$16(a0)
0001039C E248                       		lsr.w	#1,d0
0001039E 1140 001A                  		move.b	d0,$1A(a0)
000103A2 3168 0008 0034             		move.w	8(a0),$34(a0)
000103A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103AE 7000                       		moveq	#0,d0
000103B0 1012                       		move.b	(a2),d0
000103B2 D040                       		add.w	d0,d0
000103B4 3140 003A                  		move.w	d0,$3A(a0)
000103B8 7000                       		moveq	#0,d0
000103BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103C0 6700                       		beq.s	loc_10332
000103C2 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000103C6 0240 000F                  		andi.w	#$F,d0
000103CA 5140                       		subq.w	#8,d0
000103CC 6500                       		bcs.s	loc_10332
000103CE E548                       		lsl.w	#2,d0
000103D0 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000103D4 45F2 0000                  		lea	(a2,d0.w),a2
000103D8 4A52                       		tst.w	(a2)
000103DA 6A00                       		bpl.s	loc_10332
000103DC 0868 0000 0022             		bchg	#0,$22(a0)
000103E2                            
000103E2                            loc_10332:
000103E2 1028 0028                  		move.b	$28(a0),d0
000103E6 6A00                       		bpl.s	Obj56_Action
000103E8 0200 000F                  		andi.b	#$F,d0
000103EC 1140 003C                  		move.b	d0,$3C(a0)
000103F0 117C 0005 0028             		move.b	#5,$28(a0)
000103F6 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000103FC 6600                       		bne.s	Obj56_ChkGone
000103FE 117C 000C 0028             		move.b	#$C,$28(a0)
00010404 317C 0080 003A             		move.w	#$80,$3A(a0)
0001040A                            
0001040A                            Obj56_ChkGone:
0001040A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001040E 7000                       		moveq	#0,d0
00010410 1028 0023                  		move.b	$23(a0),d0
00010414 6700                       		beq.s	Obj56_Action
00010416 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001041C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010422 6700                       		beq.s	Obj56_Action
00010424 5228 0028                  		addq.b	#1,$28(a0)
00010428 4268 003A                  		clr.w	$3A(a0)
0001042C                            
0001042C                            Obj56_Action:				; XREF: Obj56_Index
0001042C 3F28 0008                  		move.w	8(a0),-(sp)
00010430 7000                       		moveq	#0,d0
00010432 1028 0028                  		move.b	$28(a0),d0	; get object type
00010436 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001043A D040                       		add.w	d0,d0
0001043C 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010440 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010444 381F                       		move.w	(sp)+,d4
00010446 4A28 0001                  		tst.b	1(a0)
0001044A 6A00                       		bpl.s	Obj56_ChkDel
0001044C 7200                       		moveq	#0,d1
0001044E 1228 0019                  		move.b	$19(a0),d1
00010452 0641 000B                  		addi.w	#$B,d1
00010456 7400                       		moveq	#0,d2
00010458 1428 0016                  		move.b	$16(a0),d2
0001045C 3602                       		move.w	d2,d3
0001045E 5243                       		addq.w	#1,d3
00010460 6100 F61A                  		bsr.w	SolidObject
00010464                            
00010464                            Obj56_ChkDel:
00010464 3028 0034                  		move.w	$34(a0),d0
00010468 0240 FF80                  		andi.w	#$FF80,d0
0001046C 3238 F700                  		move.w	($FFFFF700).w,d1
00010470 0441 0080                  		subi.w	#$80,d1
00010474 0241 FF80                  		andi.w	#$FF80,d1
00010478 9041                       		sub.w	d1,d0
0001047A 0C40 0280                  		cmpi.w	#$280,d0
0001047E 6200 D266                  		bhi.w	DeleteObject
00010482 6000 D226                  		bra.w	DisplaySprite
00010486                            ; ===========================================================================
00010486 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001048A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001048E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010492 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010496 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001049A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001049E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000104A2                            ; ===========================================================================
000104A2                            
000104A2                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000104A2 4E75                       		rts	
000104A4                            ; ===========================================================================
000104A4                            
000104A4                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000104A4 323C 0040                  		move.w	#$40,d1
000104A8 7000                       		moveq	#0,d0
000104AA 1038 FE68                  		move.b	($FFFFFE68).w,d0
000104AE 6000                       		bra.s	Obj56_Move_LR
000104B0                            ; ===========================================================================
000104B0                            
000104B0                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000104B0 323C 0080                  		move.w	#$80,d1
000104B4 7000                       		moveq	#0,d0
000104B6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000104BA                            
000104BA                            Obj56_Move_LR:
000104BA 0828 0000 0022             		btst	#0,$22(a0)
000104C0 6700                       		beq.s	loc_10416
000104C2 4440                       		neg.w	d0
000104C4 D041                       		add.w	d1,d0
000104C6                            
000104C6                            loc_10416:
000104C6 3228 0034                  		move.w	$34(a0),d1
000104CA 9240                       		sub.w	d0,d1
000104CC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000104D0 4E75                       		rts	
000104D2                            ; ===========================================================================
000104D2                            
000104D2                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000104D2 323C 0040                  		move.w	#$40,d1
000104D6 7000                       		moveq	#0,d0
000104D8 1038 FE68                  		move.b	($FFFFFE68).w,d0
000104DC 6000                       		bra.s	Obj56_Move_UD
000104DE                            ; ===========================================================================
000104DE                            
000104DE                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000104DE 323C 0080                  		move.w	#$80,d1
000104E2 7000                       		moveq	#0,d0
000104E4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000104E8                            
000104E8                            Obj56_Move_UD:
000104E8 0828 0000 0022             		btst	#0,$22(a0)
000104EE 6700                       		beq.s	loc_10444
000104F0 4440                       		neg.w	d0
000104F2 D041                       		add.w	d1,d0
000104F4                            
000104F4                            loc_10444:
000104F4 3228 0030                  		move.w	$30(a0),d1
000104F8 9240                       		sub.w	d0,d1
000104FA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000104FE 4E75                       		rts	
00010500                            ; ===========================================================================
00010500                            
00010500                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010500 4A28 0038                  		tst.b	$38(a0)
00010504 6600                       		bne.s	loc_104A4
00010506 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001050C 6600                       		bne.s	loc_1047A	; if not, branch
0001050E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010514 6600                       		bne.s	loc_1047A
00010516 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001051A 3038 D008                  		move.w	($FFFFD008).w,d0
0001051E B068 0008                  		cmp.w	8(a0),d0
00010522 6400                       		bcc.s	loc_1047A
00010524 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
0001052A                            
0001052A                            loc_1047A:
0001052A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001052E 7000                       		moveq	#0,d0
00010530 1028 003C                  		move.b	$3C(a0),d0
00010534 0832 0000 0000             		btst	#0,(a2,d0.w)
0001053A 6700                       		beq.s	loc_104AE
0001053C 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010542 6600                       		bne.s	loc_1049E	; if not, branch
00010544 0C00 0003                  		cmpi.b	#3,d0
00010548 6600                       		bne.s	loc_1049E
0001054A 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001054E                            
0001054E                            loc_1049E:
0001054E 117C 0001 0038             		move.b	#1,$38(a0)
00010554                            
00010554                            loc_104A4:
00010554 4A68 003A                  		tst.w	$3A(a0)
00010558 6700                       		beq.s	loc_104C8
0001055A 5568 003A                  		subq.w	#2,$3A(a0)
0001055E                            
0001055E                            loc_104AE:
0001055E 3028 003A                  		move.w	$3A(a0),d0
00010562 0828 0000 0022             		btst	#0,$22(a0)
00010568 6700                       		beq.s	loc_104BC
0001056A 4440                       		neg.w	d0
0001056C                            
0001056C                            loc_104BC:
0001056C 3228 0030                  		move.w	$30(a0),d1
00010570 D240                       		add.w	d0,d1
00010572 3141 000C                  		move.w	d1,$C(a0)
00010576 4E75                       		rts	
00010578                            ; ===========================================================================
00010578                            
00010578                            loc_104C8:
00010578 5228 0028                  		addq.b	#1,$28(a0)
0001057C 4228 0038                  		clr.b	$38(a0)
00010580 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010584 7000                       		moveq	#0,d0
00010586 1028 0023                  		move.b	$23(a0),d0
0001058A 67D2                       		beq.s	loc_104AE
0001058C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010592 60CA                       		bra.s	loc_104AE
00010594                            ; ===========================================================================
00010594                            
00010594                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010594 4A28 0038                  		tst.b	$38(a0)
00010598 6600                       		bne.s	loc_10500
0001059A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001059E 7000                       		moveq	#0,d0
000105A0 1028 003C                  		move.b	$3C(a0),d0
000105A4 4A32 0000                  		tst.b	(a2,d0.w)
000105A8 6A00                       		bpl.s	loc_10512
000105AA 117C 0001 0038             		move.b	#1,$38(a0)
000105B0                            
000105B0                            loc_10500:
000105B0 7000                       		moveq	#0,d0
000105B2 1028 0016                  		move.b	$16(a0),d0
000105B6 D040                       		add.w	d0,d0
000105B8 B068 003A                  		cmp.w	$3A(a0),d0
000105BC 6700                       		beq.s	loc_1052C
000105BE 5468 003A                  		addq.w	#2,$3A(a0)
000105C2                            
000105C2                            loc_10512:
000105C2 3028 003A                  		move.w	$3A(a0),d0
000105C6 0828 0000 0022             		btst	#0,$22(a0)
000105CC 6700                       		beq.s	loc_10520
000105CE 4440                       		neg.w	d0
000105D0                            
000105D0                            loc_10520:
000105D0 3228 0030                  		move.w	$30(a0),d1
000105D4 D240                       		add.w	d0,d1
000105D6 3141 000C                  		move.w	d1,$C(a0)
000105DA 4E75                       		rts	
000105DC                            ; ===========================================================================
000105DC                            
000105DC                            loc_1052C:
000105DC 5328 0028                  		subq.b	#1,$28(a0)
000105E0 4228 0038                  		clr.b	$38(a0)
000105E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105E8 7000                       		moveq	#0,d0
000105EA 1028 0023                  		move.b	$23(a0),d0
000105EE 67D2                       		beq.s	loc_10512
000105F0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000105F6 60CA                       		bra.s	loc_10512
000105F8                            ; ===========================================================================
000105F8                            
000105F8                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000105F8 4A28 0038                  		tst.b	$38(a0)
000105FC 6600                       		bne.s	loc_1055E
000105FE 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010602 6700                       		beq.s	locret_10578
00010604 117C 0001 0038             		move.b	#1,$38(a0)
0001060A 4268 003A                  		clr.w	$3A(a0)
0001060E                            
0001060E                            loc_1055E:
0001060E 5268 0008                  		addq.w	#1,8(a0)
00010612 3168 0008 0034             		move.w	8(a0),$34(a0)
00010618 5268 003A                  		addq.w	#1,$3A(a0)
0001061C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010622 6600                       		bne.s	locret_10578
00010624 4228 0028                  		clr.b	$28(a0)
00010628                            
00010628                            locret_10578:
00010628 4E75                       		rts	
0001062A                            ; ===========================================================================
0001062A                            
0001062A                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001062A 4A28 0038                  		tst.b	$38(a0)
0001062E 6600                       		bne.s	loc_10598
00010630 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010634 7000                       		moveq	#0,d0
00010636 1028 003C                  		move.b	$3C(a0),d0
0001063A 0832 0000 0000             		btst	#0,(a2,d0.w)
00010640 6700                       		beq.s	loc_105A2
00010642 117C 0001 0038             		move.b	#1,$38(a0)
00010648                            
00010648                            loc_10598:
00010648 4A68 003A                  		tst.w	$3A(a0)
0001064C 6700                       		beq.s	loc_105C0
0001064E 5568 003A                  		subq.w	#2,$3A(a0)
00010652                            
00010652                            loc_105A2:
00010652 3028 003A                  		move.w	$3A(a0),d0
00010656 0828 0000 0022             		btst	#0,$22(a0)
0001065C 6700                       		beq.s	loc_105B4
0001065E 4440                       		neg.w	d0
00010660 0640 0080                  		addi.w	#$80,d0
00010664                            
00010664                            loc_105B4:
00010664 3228 0034                  		move.w	$34(a0),d1
00010668 D240                       		add.w	d0,d1
0001066A 3141 0008                  		move.w	d1,8(a0)
0001066E 4E75                       		rts	
00010670                            ; ===========================================================================
00010670                            
00010670                            loc_105C0:
00010670 5228 0028                  		addq.b	#1,$28(a0)
00010674 4228 0038                  		clr.b	$38(a0)
00010678 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001067C 7000                       		moveq	#0,d0
0001067E 1028 0023                  		move.b	$23(a0),d0
00010682 67CE                       		beq.s	loc_105A2
00010684 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001068A 60C6                       		bra.s	loc_105A2
0001068C                            ; ===========================================================================
0001068C                            
0001068C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001068C 4A28 0038                  		tst.b	$38(a0)
00010690 6600                       		bne.s	loc_105F8
00010692 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010696 7000                       		moveq	#0,d0
00010698 1028 003C                  		move.b	$3C(a0),d0
0001069C 4A32 0000                  		tst.b	(a2,d0.w)
000106A0 6A00                       		bpl.s	loc_10606
000106A2 117C 0001 0038             		move.b	#1,$38(a0)
000106A8                            
000106A8                            loc_105F8:
000106A8 303C 0080                  		move.w	#$80,d0
000106AC B068 003A                  		cmp.w	$3A(a0),d0
000106B0 6700                       		beq.s	loc_10624
000106B2 5468 003A                  		addq.w	#2,$3A(a0)
000106B6                            
000106B6                            loc_10606:
000106B6 3028 003A                  		move.w	$3A(a0),d0
000106BA 0828 0000 0022             		btst	#0,$22(a0)
000106C0 6700                       		beq.s	loc_10618
000106C2 4440                       		neg.w	d0
000106C4 0640 0080                  		addi.w	#$80,d0
000106C8                            
000106C8                            loc_10618:
000106C8 3228 0034                  		move.w	$34(a0),d1
000106CC D240                       		add.w	d0,d1
000106CE 3141 0008                  		move.w	d1,8(a0)
000106D2 4E75                       		rts	
000106D4                            ; ===========================================================================
000106D4                            
000106D4                            loc_10624:
000106D4 5328 0028                  		subq.b	#1,$28(a0)
000106D8 4228 0038                  		clr.b	$38(a0)
000106DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000106E0 7000                       		moveq	#0,d0
000106E2 1028 0023                  		move.b	$23(a0),d0
000106E6 67CE                       		beq.s	loc_10606
000106E8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000106EE 60C6                       		bra.s	loc_10606
000106F0                            ; ===========================================================================
000106F0                            
000106F0                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000106F0 323C 0010                  		move.w	#$10,d1
000106F4 7000                       		moveq	#0,d0
000106F6 1038 FE88                  		move.b	($FFFFFE88).w,d0
000106FA E248                       		lsr.w	#1,d0
000106FC 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010700 6000                       		bra.s	Obj56_Move_Sqr
00010702                            ; ===========================================================================
00010702                            
00010702                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010702 323C 0030                  		move.w	#$30,d1
00010706 7000                       		moveq	#0,d0
00010708 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001070C 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010710 6000                       		bra.s	Obj56_Move_Sqr
00010712                            ; ===========================================================================
00010712                            
00010712                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010712 323C 0050                  		move.w	#$50,d1
00010716 7000                       		moveq	#0,d0
00010718 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001071C 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010720 6000                       		bra.s	Obj56_Move_Sqr
00010722                            ; ===========================================================================
00010722                            
00010722                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010722 323C 0070                  		move.w	#$70,d1
00010726 7000                       		moveq	#0,d0
00010728 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001072C 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010730                            
00010730                            Obj56_Move_Sqr:
00010730 4A43                       		tst.w	d3
00010732 6600                       		bne.s	loc_1068E
00010734 5228 0022                  		addq.b	#1,$22(a0)
00010738 0228 0003 0022             		andi.b	#3,$22(a0)
0001073E                            
0001073E                            loc_1068E:
0001073E 1428 0022                  		move.b	$22(a0),d2
00010742 0202 0003                  		andi.b	#3,d2
00010746 6600                       		bne.s	loc_106AE
00010748 9041                       		sub.w	d1,d0
0001074A D068 0034                  		add.w	$34(a0),d0
0001074E 3140 0008                  		move.w	d0,8(a0)
00010752 4441                       		neg.w	d1
00010754 D268 0030                  		add.w	$30(a0),d1
00010758 3141 000C                  		move.w	d1,$C(a0)
0001075C 4E75                       		rts	
0001075E                            ; ===========================================================================
0001075E                            
0001075E                            loc_106AE:
0001075E 5302                       		subq.b	#1,d2
00010760 6600                       		bne.s	loc_106CC
00010762 5341                       		subq.w	#1,d1
00010764 9041                       		sub.w	d1,d0
00010766 4440                       		neg.w	d0
00010768 D068 0030                  		add.w	$30(a0),d0
0001076C 3140 000C                  		move.w	d0,$C(a0)
00010770 5241                       		addq.w	#1,d1
00010772 D268 0034                  		add.w	$34(a0),d1
00010776 3141 0008                  		move.w	d1,8(a0)
0001077A 4E75                       		rts	
0001077C                            ; ===========================================================================
0001077C                            
0001077C                            loc_106CC:
0001077C 5302                       		subq.b	#1,d2
0001077E 6600                       		bne.s	loc_106EA
00010780 5341                       		subq.w	#1,d1
00010782 9041                       		sub.w	d1,d0
00010784 4440                       		neg.w	d0
00010786 D068 0034                  		add.w	$34(a0),d0
0001078A 3140 0008                  		move.w	d0,8(a0)
0001078E 5241                       		addq.w	#1,d1
00010790 D268 0030                  		add.w	$30(a0),d1
00010794 3141 000C                  		move.w	d1,$C(a0)
00010798 4E75                       		rts	
0001079A                            ; ===========================================================================
0001079A                            
0001079A                            loc_106EA:
0001079A 9041                       		sub.w	d1,d0
0001079C D068 0030                  		add.w	$30(a0),d0
000107A0 3140 000C                  		move.w	d0,$C(a0)
000107A4 4441                       		neg.w	d1
000107A6 D268 0034                  		add.w	$34(a0),d1
000107AA 3141 0008                  		move.w	d1,8(a0)
000107AE 4E75                       		rts	
000107B0                            ; ===========================================================================
000107B0                            ; ---------------------------------------------------------------------------
000107B0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000107B0                            ; ---------------------------------------------------------------------------
000107B0                            Map_obj56:
000107B0                            	include "_maps\obj56.asm"
000107B0                            ; ---------------------------------------------------------------------------
000107B0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000107B0                            ; ---------------------------------------------------------------------------
000107B0 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000107B4 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000107B8 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000107BC 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000107C0 01                         byte_10710:	dc.b 1
000107C1 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000107C6 04                         byte_10716:	dc.b 4
000107C7 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000107CC E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000107D1 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000107D6 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000107DB 02                         byte_1072B:	dc.b 2
000107DC E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000107E1 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000107E6 04                         byte_10736:	dc.b 4
000107E7 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000107EC E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000107F1 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000107F6 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000107FB 03                         byte_1074B:	dc.b 3
000107FC D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010801 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010806 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001080B 01                         byte_1075B:	dc.b 1
0001080C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010811 02                         byte_10761:	dc.b 2
00010812 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010817 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001081C 04                         byte_1076C:	dc.b 4
0001081D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010822 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010827 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001082C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010832 00                         		even
00010832 00                         		even
00010832                            
00010832                            ; ===========================================================================
00010832                            ; ---------------------------------------------------------------------------
00010832                            ; Object 57 - spiked balls (SYZ, LZ)
00010832                            ; ---------------------------------------------------------------------------
00010832                            
00010832                            Obj57:					; XREF: Obj_Index
00010832 7000                       		moveq	#0,d0
00010834 1028 0024                  		move.b	$24(a0),d0
00010838 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001083C 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010840                            ; ===========================================================================
00010840 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010842 0000                       		dc.w Obj57_Move-Obj57_Index
00010844 0000                       		dc.w Obj57_Display-Obj57_Index
00010846                            ; ===========================================================================
00010846                            
00010846                            Obj57_Main:				; XREF: Obj57_Index
00010846 5428 0024                  		addq.b	#2,$24(a0)
0001084A 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010852 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010858 117C 0004 0001             		move.b	#4,1(a0)
0001085E 117C 0004 0018             		move.b	#4,$18(a0)
00010864 117C 0008 0019             		move.b	#8,$19(a0)
0001086A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010870 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010876 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001087C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010882 6600                       		bne.s	loc_107E8
00010884 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001088A 317C 0310 0002             		move.w	#$310,2(a0)
00010890 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010898                            
00010898                            loc_107E8:
00010898 1228 0028                  		move.b	$28(a0),d1	; get object type
0001089C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000108A0 4881                       		ext.w	d1
000108A2 E741                       		asl.w	#3,d1		; multiply by 8
000108A4 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000108A8 1028 0022                  		move.b	$22(a0),d0
000108AC E418                       		ror.b	#2,d0
000108AE 0200 00C0                  		andi.b	#-$40,d0
000108B2 1140 0026                  		move.b	d0,$26(a0)
000108B6 45E8 0029                  		lea	$29(a0),a2
000108BA 1228 0028                  		move.b	$28(a0),d1	; get object type
000108BE 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000108C2 14FC 0000                  		move.b	#0,(a2)+
000108C6 3601                       		move.w	d1,d3
000108C8 E94B                       		lsl.w	#4,d3
000108CA 1143 003C                  		move.b	d3,$3C(a0)
000108CE 5341                       		subq.w	#1,d1		; set chain length (type-1)
000108D0 6500                       		bcs.s	loc_10894
000108D2 0828 0003 0028             		btst	#3,$28(a0)
000108D8 6700                       		beq.s	Obj57_MakeChain
000108DA 5341                       		subq.w	#1,d1
000108DC 6500                       		bcs.s	loc_10894
000108DE                            
000108DE                            Obj57_MakeChain:
000108DE 6100 D256                  		bsr.w	SingleObjLoad
000108E2 6600                       		bne.s	loc_10894
000108E4 5228 0029                  		addq.b	#1,$29(a0)
000108E8 3A09                       		move.w	a1,d5
000108EA 0445 D000                  		subi.w	#-$3000,d5
000108EE EC4D                       		lsr.w	#6,d5
000108F0 0245 007F                  		andi.w	#$7F,d5
000108F4 14C5                       		move.b	d5,(a2)+
000108F6 137C 0004 0024             		move.b	#4,$24(a1)
000108FC 1290                       		move.b	0(a0),0(a1)
000108FE 2368 0004 0004             		move.l	4(a0),4(a1)
00010904 3368 0002 0002             		move.w	2(a0),2(a1)
0001090A 1368 0001 0001             		move.b	1(a0),1(a1)
00010910 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010916 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001091C 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010922 0403 0010                  		subi.b	#$10,d3
00010926 1343 003C                  		move.b	d3,$3C(a1)
0001092A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010930 6600                       		bne.s	loc_10890
00010932 4A03                       		tst.b	d3
00010934 6600                       		bne.s	loc_10890
00010936 137C 0002 001A             		move.b	#2,$1A(a1)
0001093C                            
0001093C                            loc_10890:
0001093C 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010940                            
00010940                            loc_10894:
00010940 3A08                       		move.w	a0,d5
00010942 0445 D000                  		subi.w	#-$3000,d5
00010946 EC4D                       		lsr.w	#6,d5
00010948 0245 007F                  		andi.w	#$7F,d5
0001094C 14C5                       		move.b	d5,(a2)+
0001094E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010954 6600                       		bne.s	Obj57_Move
00010956 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001095C 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010962                            
00010962                            Obj57_Move:				; XREF: Obj57_Index
00010962 6100 0000                  		bsr.w	Obj57_MoveSub
00010966 6000 0000                  		bra.w	Obj57_ChkDel
0001096A                            ; ===========================================================================
0001096A                            
0001096A                            Obj57_MoveSub:				; XREF: Obj57_Move
0001096A 3028 003E                  		move.w	$3E(a0),d0
0001096E D168 0026                  		add.w	d0,$26(a0)
00010972 1028 0026                  		move.b	$26(a0),d0
00010976 4EB9 0000 28EC             		jsr	(CalcSine).l
0001097C 3428 0038                  		move.w	$38(a0),d2
00010980 3628 003A                  		move.w	$3A(a0),d3
00010984 45E8 0029                  		lea	$29(a0),a2
00010988 7C00                       		moveq	#0,d6
0001098A 1C1A                       		move.b	(a2)+,d6
0001098C                            
0001098C                            Obj57_MoveLoop:
0001098C 7800                       		moveq	#0,d4
0001098E 181A                       		move.b	(a2)+,d4
00010990 ED4C                       		lsl.w	#6,d4
00010992 0684 00FF D000             		addi.l	#$FFD000,d4
00010998 2244                       		movea.l	d4,a1
0001099A 7800                       		moveq	#0,d4
0001099C 1829 003C                  		move.b	$3C(a1),d4
000109A0 2A04                       		move.l	d4,d5
000109A2 C9C0                       		muls.w	d0,d4
000109A4 E084                       		asr.l	#8,d4
000109A6 CBC1                       		muls.w	d1,d5
000109A8 E085                       		asr.l	#8,d5
000109AA D842                       		add.w	d2,d4
000109AC DA43                       		add.w	d3,d5
000109AE 3344 000C                  		move.w	d4,$C(a1)
000109B2 3345 0008                  		move.w	d5,8(a1)
000109B6 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000109BA 4E75                       		rts	
000109BC                            ; ===========================================================================
000109BC                            
000109BC                            Obj57_ChkDel:				; XREF: Obj57_Move
000109BC 3028 003A                  		move.w	$3A(a0),d0
000109C0 0240 FF80                  		andi.w	#$FF80,d0
000109C4 3238 F700                  		move.w	($FFFFF700).w,d1
000109C8 0441 0080                  		subi.w	#$80,d1
000109CC 0241 FF80                  		andi.w	#$FF80,d1
000109D0 9041                       		sub.w	d1,d0
000109D2 0C40 0280                  		cmpi.w	#$280,d0
000109D6 6200 0000                  		bhi.w	Obj57_Delete
000109DA 6000 CCCE                  		bra.w	DisplaySprite
000109DE                            ; ===========================================================================
000109DE                            
000109DE                            Obj57_Delete:				; XREF: Obj57_ChkDel
000109DE 7400                       		moveq	#0,d2
000109E0 45E8 0029                  		lea	$29(a0),a2
000109E4 141A                       		move.b	(a2)+,d2
000109E6                            
000109E6                            Obj57_DelLoop:
000109E6 7000                       		moveq	#0,d0
000109E8 101A                       		move.b	(a2)+,d0
000109EA ED48                       		lsl.w	#6,d0
000109EC 0680 00FF D000             		addi.l	#$FFD000,d0
000109F2 2240                       		movea.l	d0,a1
000109F4 6100 CCF2                  		bsr.w	DeleteObject2
000109F8 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000109FC                            
000109FC 4E75                       		rts	
000109FE                            ; ===========================================================================
000109FE                            
000109FE                            Obj57_Display:				; XREF: Obj57_Index
000109FE 6000 CCAA                  		bra.w	DisplaySprite
00010A02                            ; ===========================================================================
00010A02                            ; ---------------------------------------------------------------------------
00010A02                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A02                            ; ---------------------------------------------------------------------------
00010A02                            Map_obj57:
00010A02                            	include "_maps\obj57syz.asm"
00010A02                            ; ---------------------------------------------------------------------------
00010A02                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A02                            ; ---------------------------------------------------------------------------
00010A02 0000                       		dc.w byte_10958-Map_obj57
00010A04 01                         byte_10958:	dc.b 1
00010A05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A0A                            		even
00010A0A                            		even
00010A0A                            
00010A0A                            ; ---------------------------------------------------------------------------
00010A0A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A0A                            ; ---------------------------------------------------------------------------
00010A0A                            Map_obj57a:
00010A0A                            	include "_maps\obj57lz.asm"
00010A0A                            ; ---------------------------------------------------------------------------
00010A0A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A0A                            ; ---------------------------------------------------------------------------
00010A0A 0000                       		dc.w byte_10964-Map_obj57a
00010A0C 0000                       		dc.w byte_1096A-Map_obj57a
00010A0E 0000                       		dc.w byte_10970-Map_obj57a
00010A10 01                         byte_10964:	dc.b 1
00010A11 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A16 01                         byte_1096A:	dc.b 1
00010A17 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010A1C 01                         byte_10970:	dc.b 1
00010A1D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010A22                            		even
00010A22                            		even
00010A22                            
00010A22                            ; ===========================================================================
00010A22                            ; ---------------------------------------------------------------------------
00010A22                            ; Object 58 - giant spiked balls (SYZ)
00010A22                            ; ---------------------------------------------------------------------------
00010A22                            
00010A22                            Obj58:					; XREF: Obj_Index
00010A22 7000                       		moveq	#0,d0
00010A24 1028 0024                  		move.b	$24(a0),d0
00010A28 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010A2C 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010A30                            ; ===========================================================================
00010A30 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010A32 0000                       		dc.w Obj58_Move-Obj58_Index
00010A34                            ; ===========================================================================
00010A34                            
00010A34                            Obj58_Main:				; XREF: Obj58_Index
00010A34 5428 0024                  		addq.b	#2,$24(a0)
00010A38 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010A40 317C 0396 0002             		move.w	#$396,2(a0)
00010A46 117C 0004 0001             		move.b	#4,1(a0)
00010A4C 117C 0004 0018             		move.b	#4,$18(a0)
00010A52 117C 0018 0019             		move.b	#$18,$19(a0)
00010A58 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010A5E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010A64 117C 0086 0020             		move.b	#$86,$20(a0)
00010A6A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010A6E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010A72 4881                       		ext.w	d1
00010A74 E741                       		asl.w	#3,d1		; multiply by 8
00010A76 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010A7A 1028 0022                  		move.b	$22(a0),d0
00010A7E E418                       		ror.b	#2,d0
00010A80 0200 00C0                  		andi.b	#$C0,d0
00010A84 1140 0026                  		move.b	d0,$26(a0)
00010A88 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010A8E                            
00010A8E                            Obj58_Move:				; XREF: Obj58_Index
00010A8E 7000                       		moveq	#0,d0
00010A90 1028 0028                  		move.b	$28(a0),d0	; get object type
00010A94 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010A98 D040                       		add.w	d0,d0
00010A9A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010A9E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010AA2 3028 003A                  		move.w	$3A(a0),d0
00010AA6 0240 FF80                  		andi.w	#$FF80,d0
00010AAA 3238 F700                  		move.w	($FFFFF700).w,d1
00010AAE 0441 0080                  		subi.w	#$80,d1
00010AB2 0241 FF80                  		andi.w	#$FF80,d1
00010AB6 9041                       		sub.w	d1,d0
00010AB8 0C40 0280                  		cmpi.w	#$280,d0
00010ABC 6200 CC28                  		bhi.w	DeleteObject
00010AC0 6000 CBE8                  		bra.w	DisplaySprite
00010AC4                            ; ===========================================================================
00010AC4 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010AC6 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010AC8 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010ACA 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010ACC                            ; ===========================================================================
00010ACC                            
00010ACC                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010ACC 4E75                       		rts	
00010ACE                            ; ===========================================================================
00010ACE                            
00010ACE                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010ACE 323C 0060                  		move.w	#$60,d1
00010AD2 7000                       		moveq	#0,d0
00010AD4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010AD8 0828 0000 0022             		btst	#0,$22(a0)
00010ADE 6700                       		beq.s	loc_10A38
00010AE0 4440                       		neg.w	d0
00010AE2 D041                       		add.w	d1,d0
00010AE4                            
00010AE4                            loc_10A38:
00010AE4 3228 003A                  		move.w	$3A(a0),d1
00010AE8 9240                       		sub.w	d0,d1
00010AEA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010AEE 4E75                       		rts	
00010AF0                            ; ===========================================================================
00010AF0                            
00010AF0                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010AF0 323C 0060                  		move.w	#$60,d1
00010AF4 7000                       		moveq	#0,d0
00010AF6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010AFA 0828 0000 0022             		btst	#0,$22(a0)
00010B00 6700                       		beq.s	loc_10A5C
00010B02 4440                       		neg.w	d0
00010B04 0640 0080                  		addi.w	#$80,d0
00010B08                            
00010B08                            loc_10A5C:
00010B08 3228 0038                  		move.w	$38(a0),d1
00010B0C 9240                       		sub.w	d0,d1
00010B0E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010B12 4E75                       		rts	
00010B14                            ; ===========================================================================
00010B14                            
00010B14                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010B14 3028 003E                  		move.w	$3E(a0),d0
00010B18 D168 0026                  		add.w	d0,$26(a0)
00010B1C 1028 0026                  		move.b	$26(a0),d0
00010B20 4EB9 0000 28EC             		jsr	(CalcSine).l
00010B26 3428 0038                  		move.w	$38(a0),d2
00010B2A 3628 003A                  		move.w	$3A(a0),d3
00010B2E 7800                       		moveq	#0,d4
00010B30 1828 003C                  		move.b	$3C(a0),d4
00010B34 2A04                       		move.l	d4,d5
00010B36 C9C0                       		muls.w	d0,d4
00010B38 E084                       		asr.l	#8,d4
00010B3A CBC1                       		muls.w	d1,d5
00010B3C E085                       		asr.l	#8,d5
00010B3E D842                       		add.w	d2,d4
00010B40 DA43                       		add.w	d3,d5
00010B42 3144 000C                  		move.w	d4,$C(a0)
00010B46 3145 0008                  		move.w	d5,8(a0)
00010B4A 4E75                       		rts	
00010B4C                            ; ===========================================================================
00010B4C                            ; ---------------------------------------------------------------------------
00010B4C                            ; Sprite mappings - SBZ	spiked ball on a chain
00010B4C                            ; ---------------------------------------------------------------------------
00010B4C                            Map_obj15b:
00010B4C                            	include "_maps\obj15sbz.asm"
00010B4C                            ; ---------------------------------------------------------------------------
00010B4C                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010B4C                            ; ---------------------------------------------------------------------------
00010B4C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010B50 0000                       		dc.w byte_10AC6-Map_obj15b
00010B52 05                         byte_10AA6:	dc.b 5
00010B53 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010B58 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010B5D F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010B62 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010B67 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010B6C 01                         byte_10AC0:	dc.b 1
00010B6D F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010B72 02                         byte_10AC6:	dc.b 2
00010B73 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010B78 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010B7E 00                         		even
00010B7E 00                         		even
00010B7E                            
00010B7E                            ; ===========================================================================
00010B7E                            ; ---------------------------------------------------------------------------
00010B7E                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010B7E                            ; ---------------------------------------------------------------------------
00010B7E                            
00010B7E                            Obj59:					; XREF: Obj_Index
00010B7E 7000                       		moveq	#0,d0
00010B80 1028 0024                  		move.b	$24(a0),d0
00010B84 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010B88 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010B8C 3028 0032                  		move.w	$32(a0),d0
00010B90 0240 FF80                  		andi.w	#$FF80,d0
00010B94 3238 F700                  		move.w	($FFFFF700).w,d1
00010B98 0441 0080                  		subi.w	#$80,d1
00010B9C 0241 FF80                  		andi.w	#$FF80,d1
00010BA0 9041                       		sub.w	d1,d0
00010BA2 0C40 0280                  		cmpi.w	#$280,d0
00010BA6 6200 CB3E                  		bhi.w	DeleteObject
00010BAA 6000 CAFE                  		bra.w	DisplaySprite
00010BAE                            ; ===========================================================================
00010BAE 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010BB0 0000                       		dc.w Obj59_Platform-Obj59_Index
00010BB2 0000                       		dc.w Obj59_Action-Obj59_Index
00010BB4 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010BB6                            
00010BB6 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010BB8                            
00010BB8 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010BBA 2001                       		dc.b $20, 1
00010BBC 3401                       		dc.b $34, 1
00010BBE 1003                       		dc.b $10, 3
00010BC0 2003                       		dc.b $20, 3
00010BC2 3403                       		dc.b $34, 3
00010BC4 1401                       		dc.b $14, 1
00010BC6 2401                       		dc.b $24, 1
00010BC8 2C01                       		dc.b $2C, 1
00010BCA 1403                       		dc.b $14, 3
00010BCC 2403                       		dc.b $24, 3
00010BCE 2C03                       		dc.b $2C, 3
00010BD0 2005                       		dc.b $20, 5
00010BD2 2007                       		dc.b $20, 7
00010BD4 3009                       		dc.b $30, 9
00010BD6                            ; ===========================================================================
00010BD6                            
00010BD6                            Obj59_Main:				; XREF: Obj59_Index
00010BD6 5428 0024                  		addq.b	#2,$24(a0)
00010BDA 7000                       		moveq	#0,d0
00010BDC 1028 0028                  		move.b	$28(a0),d0
00010BE0 6A00                       		bpl.s	Obj59_Main2
00010BE2 5828 0024                  		addq.b	#4,$24(a0)
00010BE6 0240 007F                  		andi.w	#$7F,d0
00010BEA C0FC 0006                  		mulu.w	#6,d0
00010BEE 3140 003C                  		move.w	d0,$3C(a0)
00010BF2 3140 003E                  		move.w	d0,$3E(a0)
00010BF6 588F                       		addq.l	#4,sp
00010BF8 4E75                       		rts	
00010BFA                            ; ===========================================================================
00010BFA                            
00010BFA                            Obj59_Main2:
00010BFA E648                       		lsr.w	#3,d0
00010BFC 0240 001E                  		andi.w	#$1E,d0
00010C00 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010C04 115A 0019                  		move.b	(a2)+,$19(a0)
00010C08 115A 001A                  		move.b	(a2)+,$1A(a0)
00010C0C 7000                       		moveq	#0,d0
00010C0E 1028 0028                  		move.b	$28(a0),d0
00010C12 D040                       		add.w	d0,d0
00010C14 0240 001E                  		andi.w	#$1E,d0
00010C18 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010C1C 101A                       		move.b	(a2)+,d0
00010C1E E548                       		lsl.w	#2,d0
00010C20 3140 003C                  		move.w	d0,$3C(a0)
00010C24 115A 0028                  		move.b	(a2)+,$28(a0)
00010C28 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010C30 317C 4000 0002             		move.w	#$4000,2(a0)
00010C36 117C 0004 0001             		move.b	#4,1(a0)
00010C3C 117C 0004 0018             		move.b	#4,$18(a0)
00010C42 3168 0008 0032             		move.w	8(a0),$32(a0)
00010C48 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010C4E                            
00010C4E                            Obj59_Platform:				; XREF: Obj59_Index
00010C4E 7200                       		moveq	#0,d1
00010C50 1228 0019                  		move.b	$19(a0),d1
00010C54 4EB9 0000 7498             		jsr	(PlatformObject).l
00010C5A 6000 0000                  		bra.w	Obj59_Types
00010C5E                            ; ===========================================================================
00010C5E                            
00010C5E                            Obj59_Action:				; XREF: Obj59_Index
00010C5E 7200                       		moveq	#0,d1
00010C60 1228 0019                  		move.b	$19(a0),d1
00010C64 4EB9 0000 760C             		jsr	(ExitPlatform).l
00010C6A 3F28 0008                  		move.w	8(a0),-(sp)
00010C6E 6100 0000                  		bsr.w	Obj59_Types
00010C72 341F                       		move.w	(sp)+,d2
00010C74 4A10                       		tst.b	0(a0)
00010C76 6700                       		beq.s	locret_10BD4
00010C78 4EF9 0000 7B76             		jmp	(MvSonicOnPtfm2).l
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            locret_10BD4:
00010C7E 4E75                       		rts	
00010C80                            ; ===========================================================================
00010C80                            
00010C80                            Obj59_Types:
00010C80 7000                       		moveq	#0,d0
00010C82 1028 0028                  		move.b	$28(a0),d0
00010C86 0240 000F                  		andi.w	#$F,d0
00010C8A D040                       		add.w	d0,d0
00010C8C 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010C90 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010C94                            ; ===========================================================================
00010C94 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010C98 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010C9C 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CA0 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CA4 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010CA8                            ; ===========================================================================
00010CA8                            
00010CA8                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010CA8 4E75                       		rts	
00010CAA                            ; ===========================================================================
00010CAA                            
00010CAA                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010CAA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010CB0 6600                       		bne.s	locret_10C0C
00010CB2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010CB6                            
00010CB6                            locret_10C0C:
00010CB6 4E75                       		rts	
00010CB8                            ; ===========================================================================
00010CB8                            
00010CB8                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010CB8 6100 0000                  		bsr.w	Obj59_Move
00010CBC 3028 0034                  		move.w	$34(a0),d0
00010CC0 4440                       		neg.w	d0
00010CC2 D068 0030                  		add.w	$30(a0),d0
00010CC6 3140 000C                  		move.w	d0,$C(a0)
00010CCA 4E75                       		rts	
00010CCC                            ; ===========================================================================
00010CCC                            
00010CCC                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010CCC 6100 0000                  		bsr.w	Obj59_Move
00010CD0 3028 0034                  		move.w	$34(a0),d0
00010CD4 D068 0030                  		add.w	$30(a0),d0
00010CD8 3140 000C                  		move.w	d0,$C(a0)
00010CDC 4E75                       		rts	
00010CDE                            ; ===========================================================================
00010CDE                            
00010CDE                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010CDE 6100 0000                  		bsr.w	Obj59_Move
00010CE2 3028 0034                  		move.w	$34(a0),d0
00010CE6 E240                       		asr.w	#1,d0
00010CE8 4440                       		neg.w	d0
00010CEA D068 0030                  		add.w	$30(a0),d0
00010CEE 3140 000C                  		move.w	d0,$C(a0)
00010CF2 3028 0034                  		move.w	$34(a0),d0
00010CF6 D068 0032                  		add.w	$32(a0),d0
00010CFA 3140 0008                  		move.w	d0,8(a0)
00010CFE 4E75                       		rts	
00010D00                            ; ===========================================================================
00010D00                            
00010D00                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010D00 6100 0000                  		bsr.w	Obj59_Move
00010D04 3028 0034                  		move.w	$34(a0),d0
00010D08 E240                       		asr.w	#1,d0
00010D0A D068 0030                  		add.w	$30(a0),d0
00010D0E 3140 000C                  		move.w	d0,$C(a0)
00010D12 3028 0034                  		move.w	$34(a0),d0
00010D16 4440                       		neg.w	d0
00010D18 D068 0032                  		add.w	$32(a0),d0
00010D1C 3140 0008                  		move.w	d0,8(a0)
00010D20 4E75                       		rts	
00010D22                            ; ===========================================================================
00010D22                            
00010D22                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010D22 6100 0000                  		bsr.w	Obj59_Move
00010D26 3028 0034                  		move.w	$34(a0),d0
00010D2A 4440                       		neg.w	d0
00010D2C D068 0030                  		add.w	$30(a0),d0
00010D30 3140 000C                  		move.w	d0,$C(a0)
00010D34 4A28 0028                  		tst.b	$28(a0)
00010D38 6700 0000                  		beq.w	loc_10C94
00010D3C 4E75                       		rts	
00010D3E                            ; ===========================================================================
00010D3E                            
00010D3E                            loc_10C94:
00010D3E 0828 0003 0022             		btst	#3,$22(a0)
00010D44 6700                       		beq.s	Obj59_Delete
00010D46 08E9 0001 0022             		bset	#1,$22(a1)
00010D4C 08A9 0003 0022             		bclr	#3,$22(a1)
00010D52 137C 0002 0024             		move.b	#2,$24(a1)
00010D58                            
00010D58                            Obj59_Delete:
00010D58 6000 C98C                  		bra.w	DeleteObject
00010D5C                            
00010D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D5C                            
00010D5C                            
00010D5C                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010D5C 3028 0038                  		move.w	$38(a0),d0
00010D60 4A28 003A                  		tst.b	$3A(a0)
00010D64 6600                       		bne.s	loc_10CC8
00010D66 0C40 0800                  		cmpi.w	#$800,d0
00010D6A 6400                       		bcc.s	loc_10CD0
00010D6C 0640 0010                  		addi.w	#$10,d0
00010D70 6000                       		bra.s	loc_10CD0
00010D72                            ; ===========================================================================
00010D72                            
00010D72                            loc_10CC8:
00010D72 4A40                       		tst.w	d0
00010D74 6700                       		beq.s	loc_10CD0
00010D76 0440 0010                  		subi.w	#$10,d0
00010D7A                            
00010D7A                            loc_10CD0:
00010D7A 3140 0038                  		move.w	d0,$38(a0)
00010D7E 48C0                       		ext.l	d0
00010D80 E180                       		asl.l	#8,d0
00010D82 D0A8 0034                  		add.l	$34(a0),d0
00010D86 2140 0034                  		move.l	d0,$34(a0)
00010D8A 4840                       		swap	d0
00010D8C 3428 003C                  		move.w	$3C(a0),d2
00010D90 B042                       		cmp.w	d2,d0
00010D92 6300                       		bls.s	loc_10CF0
00010D94 117C 0001 003A             		move.b	#1,$3A(a0)
00010D9A                            
00010D9A                            loc_10CF0:
00010D9A D442                       		add.w	d2,d2
00010D9C B042                       		cmp.w	d2,d0
00010D9E 6600                       		bne.s	locret_10CFA
00010DA0 4228 0028                  		clr.b	$28(a0)
00010DA4                            
00010DA4                            locret_10CFA:
00010DA4 4E75                       		rts	
00010DA6                            ; End of function Obj59_Move
00010DA6                            
00010DA6                            ; ===========================================================================
00010DA6                            
00010DA6                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010DA6 5368 003C                  		subq.w	#1,$3C(a0)
00010DAA 6600                       		bne.s	Obj59_ChkDel
00010DAC 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010DB2 6100 CD82                  		bsr.w	SingleObjLoad
00010DB6 6600                       		bne.s	Obj59_ChkDel
00010DB8 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010DBC 3368 0008 0008             		move.w	8(a0),8(a1)
00010DC2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010DC8 137C 000E 0028             		move.b	#$E,$28(a1)
00010DCE                            
00010DCE                            Obj59_ChkDel:
00010DCE 588F                       		addq.l	#4,sp
00010DD0 3028 0008                  		move.w	8(a0),d0
00010DD4 0240 FF80                  		andi.w	#$FF80,d0
00010DD8 3238 F700                  		move.w	($FFFFF700).w,d1
00010DDC 0441 0080                  		subi.w	#$80,d1
00010DE0 0241 FF80                  		andi.w	#$FF80,d1
00010DE4 9041                       		sub.w	d1,d0
00010DE6 0C40 0280                  		cmpi.w	#$280,d0
00010DEA 6200 C8FA                  		bhi.w	DeleteObject
00010DEE 4E75                       		rts	
00010DF0                            ; ===========================================================================
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            Map_obj59:
00010DF0                            	include "_maps\obj59.asm"
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010DF0                            ; ---------------------------------------------------------------------------
00010DF0 0000                       		dc.w byte_10D4A-Map_obj59
00010DF2 03                         byte_10D4A:	dc.b 3
00010DF3 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010DF8 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010DFD F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010E02                            		even
00010E02                            		even
00010E02                            
00010E02                            ; ===========================================================================
00010E02                            ; ---------------------------------------------------------------------------
00010E02                            ; Object 5A - platforms	moving in circles (SLZ)
00010E02                            ; ---------------------------------------------------------------------------
00010E02                            
00010E02                            Obj5A:					; XREF: Obj_Index
00010E02 7000                       		moveq	#0,d0
00010E04 1028 0024                  		move.b	$24(a0),d0
00010E08 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010E0C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010E10 3028 0032                  		move.w	$32(a0),d0
00010E14 0240 FF80                  		andi.w	#$FF80,d0
00010E18 3238 F700                  		move.w	($FFFFF700).w,d1
00010E1C 0441 0080                  		subi.w	#$80,d1
00010E20 0241 FF80                  		andi.w	#$FF80,d1
00010E24 9041                       		sub.w	d1,d0
00010E26 0C40 0280                  		cmpi.w	#$280,d0
00010E2A 6200 C8BA                  		bhi.w	DeleteObject
00010E2E 6000 C87A                  		bra.w	DisplaySprite
00010E32                            ; ===========================================================================
00010E32 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010E34 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010E36 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010E38                            ; ===========================================================================
00010E38                            
00010E38                            Obj5A_Main:				; XREF: Obj5A_Index
00010E38 5428 0024                  		addq.b	#2,$24(a0)
00010E3C 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010E44 317C 4000 0002             		move.w	#$4000,2(a0)
00010E4A 117C 0004 0001             		move.b	#4,1(a0)
00010E50 117C 0004 0018             		move.b	#4,$18(a0)
00010E56 117C 0018 0019             		move.b	#$18,$19(a0)
00010E5C 3168 0008 0032             		move.w	8(a0),$32(a0)
00010E62 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E68                            
00010E68                            Obj5A_Platform:				; XREF: Obj5A_Index
00010E68 7200                       		moveq	#0,d1
00010E6A 1228 0019                  		move.b	$19(a0),d1
00010E6E 4EB9 0000 7498             		jsr	(PlatformObject).l
00010E74 6000 0000                  		bra.w	Obj5A_Types
00010E78                            ; ===========================================================================
00010E78                            
00010E78                            Obj5A_Action:				; XREF: Obj5A_Index
00010E78 7200                       		moveq	#0,d1
00010E7A 1228 0019                  		move.b	$19(a0),d1
00010E7E 4EB9 0000 760C             		jsr	(ExitPlatform).l
00010E84 3F28 0008                  		move.w	8(a0),-(sp)
00010E88 6100 0000                  		bsr.w	Obj5A_Types
00010E8C 341F                       		move.w	(sp)+,d2
00010E8E 4EF9 0000 7B76             		jmp	(MvSonicOnPtfm2).l
00010E94                            ; ===========================================================================
00010E94                            
00010E94                            Obj5A_Types:
00010E94 7000                       		moveq	#0,d0
00010E96 1028 0028                  		move.b	$28(a0),d0
00010E9A 0240 000C                  		andi.w	#$C,d0
00010E9E E248                       		lsr.w	#1,d0
00010EA0 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010EA4 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010EA8                            ; ===========================================================================
00010EA8 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010EAA 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010EAC                            ; ===========================================================================
00010EAC                            
00010EAC                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010EAC 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010EB0 0401 0050                  		subi.b	#$50,d1
00010EB4 4881                       		ext.w	d1
00010EB6 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010EBA 0402 0050                  		subi.b	#$50,d2
00010EBE 4882                       		ext.w	d2
00010EC0 0828 0000 0028             		btst	#0,$28(a0)
00010EC6 6700                       		beq.s	loc_10E24
00010EC8 4441                       		neg.w	d1
00010ECA 4442                       		neg.w	d2
00010ECC                            
00010ECC                            loc_10E24:
00010ECC 0828 0001 0028             		btst	#1,$28(a0)
00010ED2 6700                       		beq.s	loc_10E30
00010ED4 4441                       		neg.w	d1
00010ED6 C342                       		exg	d1,d2
00010ED8                            
00010ED8                            loc_10E30:
00010ED8 D268 0032                  		add.w	$32(a0),d1
00010EDC 3141 0008                  		move.w	d1,8(a0)
00010EE0 D468 0030                  		add.w	$30(a0),d2
00010EE4 3142 000C                  		move.w	d2,$C(a0)
00010EE8 4E75                       		rts	
00010EEA                            ; ===========================================================================
00010EEA                            
00010EEA                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010EEA 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010EEE 0401 0050                  		subi.b	#$50,d1
00010EF2 4881                       		ext.w	d1
00010EF4 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010EF8 0402 0050                  		subi.b	#$50,d2
00010EFC 4882                       		ext.w	d2
00010EFE 0828 0000 0028             		btst	#0,$28(a0)
00010F04 6700                       		beq.s	loc_10E62
00010F06 4441                       		neg.w	d1
00010F08 4442                       		neg.w	d2
00010F0A                            
00010F0A                            loc_10E62:
00010F0A 0828 0001 0028             		btst	#1,$28(a0)
00010F10 6700                       		beq.s	loc_10E6E
00010F12 4441                       		neg.w	d1
00010F14 C342                       		exg	d1,d2
00010F16                            
00010F16                            loc_10E6E:
00010F16 4441                       		neg.w	d1
00010F18 D268 0032                  		add.w	$32(a0),d1
00010F1C 3141 0008                  		move.w	d1,8(a0)
00010F20 D468 0030                  		add.w	$30(a0),d2
00010F24 3142 000C                  		move.w	d2,$C(a0)
00010F28 4E75                       		rts	
00010F2A                            ; ===========================================================================
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A                            Map_obj5A:
00010F2A                            	include "_maps\obj5A.asm"
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010F2A                            ; ---------------------------------------------------------------------------
00010F2A 0000                       		dc.w byte_10E84-Map_obj5A
00010F2C 02                         byte_10E84:	dc.b 2
00010F2D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010F32 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010F38 00                         		even
00010F38 00                         		even
00010F38                            
00010F38                            ; ===========================================================================
00010F38                            ; ---------------------------------------------------------------------------
00010F38                            ; Object 5B - blocks that form a staircase (SLZ)
00010F38                            ; ---------------------------------------------------------------------------
00010F38                            
00010F38                            Obj5B:					; XREF: Obj_Index
00010F38 7000                       		moveq	#0,d0
00010F3A 1028 0024                  		move.b	$24(a0),d0
00010F3E 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010F42 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010F46 3028 0030                  		move.w	$30(a0),d0
00010F4A 0240 FF80                  		andi.w	#$FF80,d0
00010F4E 3238 F700                  		move.w	($FFFFF700).w,d1
00010F52 0441 0080                  		subi.w	#$80,d1
00010F56 0241 FF80                  		andi.w	#$FF80,d1
00010F5A 9041                       		sub.w	d1,d0
00010F5C 0C40 0280                  		cmpi.w	#$280,d0
00010F60 6200 C784                  		bhi.w	DeleteObject
00010F64 6000 C744                  		bra.w	DisplaySprite
00010F68                            ; ===========================================================================
00010F68 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010F6A 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010F6C 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010F6E                            ; ===========================================================================
00010F6E                            
00010F6E                            Obj5B_Main:				; XREF: Obj5B_Index
00010F6E 5428 0024                  		addq.b	#2,$24(a0)
00010F72 7638                       		moveq	#$38,d3
00010F74 7801                       		moveq	#1,d4
00010F76 0828 0000 0022             		btst	#0,$22(a0)
00010F7C 6700                       		beq.s	loc_10EDA
00010F7E 763B                       		moveq	#$3B,d3
00010F80 78FF                       		moveq	#-1,d4
00010F82                            
00010F82                            loc_10EDA:
00010F82 3428 0008                  		move.w	8(a0),d2
00010F86 2248                       		movea.l	a0,a1
00010F88 7203                       		moveq	#3,d1
00010F8A 6000                       		bra.s	Obj5B_MakeBlocks
00010F8C                            ; ===========================================================================
00010F8C                            
00010F8C                            Obj5B_Loop:
00010F8C 6100 CBBE                  		bsr.w	SingleObjLoad2
00010F90 6600 0000                  		bne.w	Obj5B_Move
00010F94 137C 0004 0024             		move.b	#4,$24(a1)
00010F9A                            
00010F9A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00010F9A 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00010F9E 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00010FA6 337C 4000 0002             		move.w	#$4000,2(a1)
00010FAC 137C 0004 0001             		move.b	#4,1(a1)
00010FB2 137C 0003 0018             		move.b	#3,$18(a1)
00010FB8 137C 0010 0019             		move.b	#$10,$19(a1)
00010FBE 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010FC4 3342 0008                  		move.w	d2,8(a1)
00010FC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010FCE 3368 0008 0030             		move.w	8(a0),$30(a1)
00010FD4 3369 000C 0032             		move.w	$C(a1),$32(a1)
00010FDA 0642 0020                  		addi.w	#$20,d2
00010FDE 1343 0037                  		move.b	d3,$37(a1)
00010FE2 2348 003C                  		move.l	a0,$3C(a1)
00010FE6 D604                       		add.b	d4,d3
00010FE8 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00010FEC                            
00010FEC                            Obj5B_Move:				; XREF: Obj5B_Index
00010FEC 7000                       		moveq	#0,d0
00010FEE 1028 0028                  		move.b	$28(a0),d0
00010FF2 0240 0007                  		andi.w	#7,d0
00010FF6 D040                       		add.w	d0,d0
00010FF8 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00010FFC 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011000                            
00011000                            Obj5B_Solid:				; XREF: Obj5B_Index
00011000 2468 003C                  		movea.l	$3C(a0),a2
00011004 7000                       		moveq	#0,d0
00011006 1028 0037                  		move.b	$37(a0),d0
0001100A 1032 0000                  		move.b	(a2,d0.w),d0
0001100E D068 0032                  		add.w	$32(a0),d0
00011012 3140 000C                  		move.w	d0,$C(a0)
00011016 7200                       		moveq	#0,d1
00011018 1228 0019                  		move.b	$19(a0),d1
0001101C 0641 000B                  		addi.w	#$B,d1
00011020 343C 0010                  		move.w	#$10,d2
00011024 363C 0011                  		move.w	#$11,d3
00011028 3828 0008                  		move.w	8(a0),d4
0001102C 6100 EA4E                  		bsr.w	SolidObject
00011030 4A04                       		tst.b	d4
00011032 6A00                       		bpl.s	loc_10F92
00011034 1544 0036                  		move.b	d4,$36(a2)
00011038                            
00011038                            loc_10F92:
00011038 0828 0003 0022             		btst	#3,$22(a0)
0001103E 6700                       		beq.s	locret_10FA0
00011040 157C 0001 0036             		move.b	#1,$36(a2)
00011046                            
00011046                            locret_10FA0:
00011046 4E75                       		rts	
00011048                            ; ===========================================================================
00011048 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001104A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001104C 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001104E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011050                            ; ===========================================================================
00011050                            
00011050                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011050 4A68 0034                  		tst.w	$34(a0)
00011054 6600                       		bne.s	loc_10FC0
00011056 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001105C 6600                       		bne.s	locret_10FBE
0001105E 317C 001E 0034             		move.w	#$1E,$34(a0)
00011064                            
00011064                            locret_10FBE:
00011064 4E75                       		rts	
00011066                            ; ===========================================================================
00011066                            
00011066                            loc_10FC0:
00011066 5368 0034                  		subq.w	#1,$34(a0)
0001106A 66F8                       		bne.s	locret_10FBE
0001106C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011070 4E75                       		rts	
00011072                            ; ===========================================================================
00011072                            
00011072                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011072 4A68 0034                  		tst.w	$34(a0)
00011076 6600                       		bne.s	loc_10FE0
00011078 4A28 0036                  		tst.b	$36(a0)
0001107C 6A00                       		bpl.s	locret_10FDE
0001107E 317C 003C 0034             		move.w	#$3C,$34(a0)
00011084                            
00011084                            locret_10FDE:
00011084 4E75                       		rts	
00011086                            ; ===========================================================================
00011086                            
00011086                            loc_10FE0:
00011086 5368 0034                  		subq.w	#1,$34(a0)
0001108A 6600                       		bne.s	loc_10FEC
0001108C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011090 4E75                       		rts	
00011092                            ; ===========================================================================
00011092                            
00011092                            loc_10FEC:
00011092 43E8 0038                  		lea	$38(a0),a1
00011096 3028 0034                  		move.w	$34(a0),d0
0001109A E408                       		lsr.b	#2,d0
0001109C 0200 0001                  		andi.b	#1,d0
000110A0 12C0                       		move.b	d0,(a1)+
000110A2 0A00 0001                  		eori.b	#1,d0
000110A6 12C0                       		move.b	d0,(a1)+
000110A8 0A00 0001                  		eori.b	#1,d0
000110AC 12C0                       		move.b	d0,(a1)+
000110AE 0A00 0001                  		eori.b	#1,d0
000110B2 12C0                       		move.b	d0,(a1)+
000110B4 4E75                       		rts	
000110B6                            ; ===========================================================================
000110B6                            
000110B6                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000110B6 43E8 0038                  		lea	$38(a0),a1
000110BA 0C11 0080                  		cmpi.b	#$80,(a1)
000110BE 6700                       		beq.s	locret_11038
000110C0 5211                       		addq.b	#1,(a1)
000110C2 7200                       		moveq	#0,d1
000110C4 1219                       		move.b	(a1)+,d1
000110C6 4841                       		swap	d1
000110C8 E289                       		lsr.l	#1,d1
000110CA 2401                       		move.l	d1,d2
000110CC E289                       		lsr.l	#1,d1
000110CE 2601                       		move.l	d1,d3
000110D0 D682                       		add.l	d2,d3
000110D2 4841                       		swap	d1
000110D4 4842                       		swap	d2
000110D6 4843                       		swap	d3
000110D8 12C3                       		move.b	d3,(a1)+
000110DA 12C2                       		move.b	d2,(a1)+
000110DC 12C1                       		move.b	d1,(a1)+
000110DE                            
000110DE                            locret_11038:
000110DE 4E75                       		rts	
000110E0 4E75                       		rts	
000110E2                            ; ===========================================================================
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            Map_obj5B:
000110E2                            	include "_maps\obj5B.asm"
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000110E2                            ; ---------------------------------------------------------------------------
000110E2 0000                       		dc.w byte_1103E-Map_obj5B
000110E4 01                         byte_1103E:	dc.b 1
000110E5 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000110EA                            		even
000110EA                            		even
000110EA                            
000110EA                            ; ===========================================================================
000110EA                            ; ---------------------------------------------------------------------------
000110EA                            ; Object 5C - metal girders in foreground (SLZ)
000110EA                            ; ---------------------------------------------------------------------------
000110EA                            
000110EA                            Obj5C:					; XREF: Obj_Index
000110EA 7000                       		moveq	#0,d0
000110EC 1028 0024                  		move.b	$24(a0),d0
000110F0 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000110F4 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000110F8                            ; ===========================================================================
000110F8 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000110FA 0000                       		dc.w Obj5C_Display-Obj5C_Index
000110FC                            ; ===========================================================================
000110FC                            
000110FC                            Obj5C_Main:				; XREF: Obj5C_Index
000110FC 5428 0024                  		addq.b	#2,$24(a0)
00011100 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011108 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001110E 117C 0010 0019             		move.b	#$10,$19(a0)
00011114                            
00011114                            Obj5C_Display:				; XREF: Obj5C_Index
00011114 2238 F700                  		move.l	($FFFFF700).w,d1
00011118 D281                       		add.l	d1,d1
0001111A 4841                       		swap	d1
0001111C 4441                       		neg.w	d1
0001111E 3141 0008                  		move.w	d1,8(a0)
00011122 2238 F704                  		move.l	($FFFFF704).w,d1
00011126 D281                       		add.l	d1,d1
00011128 4841                       		swap	d1
0001112A 0241 003F                  		andi.w	#$3F,d1
0001112E 4441                       		neg.w	d1
00011130 0641 0100                  		addi.w	#$100,d1
00011134 3141 000A                  		move.w	d1,$A(a0)
00011138 6000 C570                  		bra.w	DisplaySprite
0001113C                            ; ===========================================================================
0001113C                            ; ---------------------------------------------------------------------------
0001113C                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001113C                            ; ---------------------------------------------------------------------------
0001113C                            Map_obj5C:
0001113C                            	include "_maps\obj5C.asm"
0001113C                            ; ---------------------------------------------------------------------------
0001113C                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001113C                            ; ---------------------------------------------------------------------------
0001113C 0000                       		dc.w byte_11098-Map_obj5C
0001113E 09                         byte_11098:	dc.b 9
0001113F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011144 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011149 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001114E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011153 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011158 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001115D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011162 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011167 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001116C                            		even
0001116C                            		even
0001116C                            
0001116C                            ; ===========================================================================
0001116C                            ; ---------------------------------------------------------------------------
0001116C                            ; Object 1B - water surface (LZ)
0001116C                            ; ---------------------------------------------------------------------------
0001116C                            
0001116C                            Obj1B:					; XREF: Obj_Index
0001116C 7000                       		moveq	#0,d0
0001116E 1028 0024                  		move.b	$24(a0),d0
00011172 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011176 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001117A                            ; ===========================================================================
0001117A 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001117C 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Obj1B_Main:				; XREF: Obj1B_Index
0001117E 5428 0024                  		addq.b	#2,$24(a0)
00011182 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001118A 317C C300 0002             		move.w	#$C300,2(a0)
00011190 117C 0004 0001             		move.b	#4,1(a0)
00011196 117C 0080 0019             		move.b	#$80,$19(a0)
0001119C 3168 0008 0030             		move.w	8(a0),$30(a0)
000111A2                            
000111A2                            Obj1B_Action:				; XREF: Obj1B_Index
000111A2 3238 F700                  		move.w	($FFFFF700).w,d1
000111A6 0241 FFE0                  		andi.w	#$FFE0,d1
000111AA D268 0030                  		add.w	$30(a0),d1
000111AE 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000111B4 6700                       		beq.s	loc_11114
000111B6 0641 0020                  		addi.w	#$20,d1
000111BA                            
000111BA                            loc_11114:
000111BA 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000111BE 3238 F646                  		move.w	($FFFFF646).w,d1
000111C2 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000111C6 4A28 0032                  		tst.b	$32(a0)
000111CA 6600                       		bne.s	Obj1B_Animate
000111CC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000111D2 6700                       		beq.s	loc_1114A	; if not, branch
000111D4 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000111D8 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000111DE 6000                       		bra.s	Obj1B_Display
000111E0                            ; ===========================================================================
000111E0                            
000111E0                            Obj1B_Animate:				; XREF: loc_11114
000111E0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000111E4 6600                       		bne.s	Obj1B_Display	; if yes, branch
000111E6 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000111EC 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000111F0                            
000111F0                            loc_1114A:				; XREF: loc_11114
000111F0 5328 001E                  		subq.b	#1,$1E(a0)
000111F4 6A00                       		bpl.s	Obj1B_Display
000111F6 117C 0007 001E             		move.b	#7,$1E(a0)
000111FC 5228 001A                  		addq.b	#1,$1A(a0)
00011200 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011206 6500                       		bcs.s	Obj1B_Display
00011208 117C 0000 001A             		move.b	#0,$1A(a0)
0001120E                            
0001120E                            Obj1B_Display:
0001120E 6000 C49A                  		bra.w	DisplaySprite
00011212                            ; ===========================================================================
00011212                            ; ---------------------------------------------------------------------------
00011212                            ; Sprite mappings - water surface (LZ)
00011212                            ; ---------------------------------------------------------------------------
00011212                            Map_obj1B:
00011212                            	include "_maps\obj1B.asm"
00011212                            ; ---------------------------------------------------------------------------
00011212                            ; Sprite mappings - water surface (LZ)
00011212                            ; ---------------------------------------------------------------------------
00011212 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011216 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001121A 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001121E 03                         byte_11178:	dc.b 3
0001121F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011224 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011229 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001122E 03                         byte_11188:	dc.b 3
0001122F FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011234 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011239 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001123E 03                         byte_11198:	dc.b 3
0001123F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011244 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011249 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001124E 06                         byte_111A8:	dc.b 6
0001124F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011254 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011259 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001125E FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011263 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011268 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001126D 06                         byte_111C7:	dc.b 6
0001126E FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011273 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011278 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001127D FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011282 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011287 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001128C 06                         byte_111E6:	dc.b 6
0001128D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011292 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011297 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001129C FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000112A1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000112A6 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000112AC 00                         		even
000112AC 00                         		even
000112AC                            
000112AC                            ; ===========================================================================
000112AC                            ; ---------------------------------------------------------------------------
000112AC                            ; Object 0B - pole that	breaks (LZ)
000112AC                            ; ---------------------------------------------------------------------------
000112AC                            
000112AC                            Obj0B:					; XREF: Obj_Index
000112AC 7000                       		moveq	#0,d0
000112AE 1028 0024                  		move.b	$24(a0),d0
000112B2 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000112B6 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000112BA                            ; ===========================================================================
000112BA 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000112BC 0000                       		dc.w Obj0B_Action-Obj0B_Index
000112BE 0000                       		dc.w Obj0B_Display-Obj0B_Index
000112C0                            ; ===========================================================================
000112C0                            
000112C0                            Obj0B_Main:				; XREF: Obj0B_Index
000112C0 5428 0024                  		addq.b	#2,$24(a0)
000112C4 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000112CC 317C 43DE 0002             		move.w	#$43DE,2(a0)
000112D2 117C 0004 0001             		move.b	#4,1(a0)
000112D8 117C 0008 0019             		move.b	#8,$19(a0)
000112DE 117C 0004 0018             		move.b	#4,$18(a0)
000112E4 117C 00E1 0020             		move.b	#$E1,$20(a0)
000112EA 7000                       		moveq	#0,d0
000112EC 1028 0028                  		move.b	$28(a0),d0	; get object type
000112F0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000112F4 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000112F8                            
000112F8                            Obj0B_Action:				; XREF: Obj0B_Index
000112F8 4A28 0032                  		tst.b	$32(a0)
000112FC 6700                       		beq.s	Obj0B_Grab
000112FE 4A68 0030                  		tst.w	$30(a0)
00011302 6700                       		beq.s	Obj0B_MoveUp
00011304 5368 0030                  		subq.w	#1,$30(a0)
00011308 6600                       		bne.s	Obj0B_MoveUp
0001130A 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011310 6000                       		bra.s	Obj0B_Release
00011312                            ; ===========================================================================
00011312                            
00011312                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011312 43F8 D000                  		lea	($FFFFD000).w,a1
00011316 3028 000C                  		move.w	$C(a0),d0
0001131A 0440 0018                  		subi.w	#$18,d0
0001131E 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011324 6700                       		beq.s	Obj0B_MoveDown
00011326 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001132A B069 000C                  		cmp.w	$C(a1),d0
0001132E 6500                       		bcs.s	Obj0B_MoveDown
00011330 3340 000C                  		move.w	d0,$C(a1)
00011334                            
00011334                            Obj0B_MoveDown:
00011334 0640 0024                  		addi.w	#$24,d0
00011338 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001133E 6700                       		beq.s	Obj0B_LetGo
00011340 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011344 B069 000C                  		cmp.w	$C(a1),d0
00011348 6400                       		bcc.s	Obj0B_LetGo
0001134A 3340 000C                  		move.w	d0,$C(a1)
0001134E                            
0001134E                            Obj0B_LetGo:
0001134E 1038 F603                  		move.b	($FFFFF603).w,d0
00011352 0240 0070                  		andi.w	#$70,d0
00011356 6700                       		beq.s	Obj0B_Display
00011358                            
00011358                            Obj0B_Release:				; XREF: Obj0B_Action
00011358 4228 0020                  		clr.b	$20(a0)
0001135C 5428 0024                  		addq.b	#2,$24(a0)
00011360 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011364 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011368 4228 0032                  		clr.b	$32(a0)
0001136C 6000                       		bra.s	Obj0B_Display
0001136E                            ; ===========================================================================
0001136E                            
0001136E                            Obj0B_Grab:				; XREF: Obj0B_Action
0001136E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011372 6700                       		beq.s	Obj0B_Display	; if not, branch
00011374 43F8 D000                  		lea	($FFFFD000).w,a1
00011378 3028 0008                  		move.w	8(a0),d0
0001137C 0640 0014                  		addi.w	#$14,d0
00011380 B069 0008                  		cmp.w	8(a1),d0
00011384 6400                       		bcc.s	Obj0B_Display
00011386 4228 0021                  		clr.b	$21(a0)
0001138A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011390 6400                       		bcc.s	Obj0B_Display
00011392 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011396 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001139A 3028 0008                  		move.w	8(a0),d0
0001139E 0640 0014                  		addi.w	#$14,d0
000113A2 3340 0008                  		move.w	d0,8(a1)
000113A6 08A9 0000 0022             		bclr	#0,$22(a1)
000113AC 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000113B2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000113B8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000113BE 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000113C4                            
000113C4                            Obj0B_Display:				; XREF: Obj0B_Index
000113C4 6000 E38E                  		bra.w	MarkObjGone
000113C8                            ; ===========================================================================
000113C8                            ; ---------------------------------------------------------------------------
000113C8                            ; Sprite mappings - pole that breaks (LZ)
000113C8                            ; ---------------------------------------------------------------------------
000113C8                            Map_obj0B:
000113C8                            	include "_maps\obj0B.asm"
000113C8                            ; ---------------------------------------------------------------------------
000113C8                            ; Sprite mappings - pole that breaks (LZ)
000113C8                            ; ---------------------------------------------------------------------------
000113C8 0000                       		dc.w byte_11326-Map_obj0B
000113CA 0000                       		dc.w byte_11331-Map_obj0B
000113CC 02                         byte_11326:	dc.b 2			; normal pole
000113CD E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000113D2 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000113D7 04                         byte_11331:	dc.b 4			; broken pole
000113D8 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000113DD F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000113E2 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000113E7 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000113EC                            		even
000113EC                            		even
000113EC                            
000113EC                            ; ===========================================================================
000113EC                            ; ---------------------------------------------------------------------------
000113EC                            ; Object 0C - flapping door (LZ)
000113EC                            ; ---------------------------------------------------------------------------
000113EC                            
000113EC                            Obj0C:					; XREF: Obj_Index
000113EC 7000                       		moveq	#0,d0
000113EE 1028 0024                  		move.b	$24(a0),d0
000113F2 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000113F6 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000113FA                            ; ===========================================================================
000113FA 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000113FC 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000113FE                            ; ===========================================================================
000113FE                            
000113FE                            Obj0C_Main:				; XREF: Obj0C_Index
000113FE 5428 0024                  		addq.b	#2,$24(a0)
00011402 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001140A 317C 4328 0002             		move.w	#$4328,2(a0)
00011410 0028 0004 0001             		ori.b	#4,1(a0)
00011416 117C 0028 0019             		move.b	#$28,$19(a0)
0001141C 7000                       		moveq	#0,d0
0001141E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011422 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011426 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001142A                            
0001142A                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001142A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001142E 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011430 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011436 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
0001143C 4A28 0001                  		tst.b	1(a0)
00011440 6A00                       		bpl.s	Obj0C_Solid
00011442 303C 00BB                  		move.w	#$BB,d0
00011446 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play door sound
0001144C                            
0001144C                            Obj0C_Solid:
0001144C 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011452 6100 934E                  		bsr.w	AnimateSprite
00011456 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001145A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001145E 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011460 3038 D008                  		move.w	($FFFFD008).w,d0
00011464 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011468 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001146A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011470 323C 0013                  		move.w	#$13,d1
00011474 343C 0020                  		move.w	#$20,d2
00011478 3602                       		move.w	d2,d3
0001147A 5243                       		addq.w	#1,d3
0001147C 3828 0008                  		move.w	8(a0),d4
00011480 6100 E5FA                  		bsr.w	SolidObject	; make the door	solid
00011484                            
00011484                            Obj0C_Display:
00011484 6000 E2CE                  		bra.w	MarkObjGone
00011488                            ; ===========================================================================
00011488                            Ani_obj0C:
00011488                            	include "_anim\obj0C.asm"
00011488                            ; ---------------------------------------------------------------------------
00011488                            ; Animation script - flapping door (LZ)
00011488                            ; ---------------------------------------------------------------------------
00011488 0000                       		dc.w byte_113E6-Ani_obj0C
0001148A 0000                       		dc.w byte_113EC-Ani_obj0C
0001148C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011492 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011498                            		even
00011498                            		even
00011498                            
00011498                            ; ---------------------------------------------------------------------------
00011498                            ; Sprite mappings - flapping door (LZ)
00011498                            ; ---------------------------------------------------------------------------
00011498                            Map_obj0C:
00011498                            	include "_maps\obj0C.asm"
00011498                            ; ---------------------------------------------------------------------------
00011498                            ; Sprite mappings - flapping door (LZ)
00011498                            ; ---------------------------------------------------------------------------
00011498 0000                       		dc.w byte_113F8-Map_obj0C
0001149A 0000                       		dc.w byte_11403-Map_obj0C
0001149C 0000                       		dc.w byte_1140E-Map_obj0C
0001149E 02                         byte_113F8:	dc.b 2
0001149F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000114A4 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000114A9 02                         byte_11403:	dc.b 2
000114AA DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000114AF 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000114B4 02                         byte_1140E:	dc.b 2
000114B5 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000114BA 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000114C0 00                         		even
000114C0 00                         		even
000114C0                            
000114C0                            ; ===========================================================================
000114C0                            ; ---------------------------------------------------------------------------
000114C0                            ; Object 71 - invisible	solid blocks
000114C0                            ; ---------------------------------------------------------------------------
000114C0                            
000114C0                            Obj71:					; XREF: Obj_Index
000114C0 7000                       		moveq	#0,d0
000114C2 1028 0024                  		move.b	$24(a0),d0
000114C6 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000114CA 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000114CE                            ; ===========================================================================
000114CE 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000114D0 0000                       		dc.w Obj71_Solid-Obj71_Index
000114D2                            ; ===========================================================================
000114D2                            
000114D2                            Obj71_Main:				; XREF: Obj71_Index
000114D2 5428 0024                  		addq.b	#2,$24(a0)
000114D6 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000114DE 317C 8680 0002             		move.w	#$8680,2(a0)
000114E4 0028 0004 0001             		ori.b	#4,1(a0)
000114EA 1028 0028                  		move.b	$28(a0),d0	; get object type
000114EE 1200                       		move.b	d0,d1
000114F0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000114F4 0640 0010                  		addi.w	#$10,d0
000114F8 E248                       		lsr.w	#1,d0
000114FA 1140 0019                  		move.b	d0,$19(a0)	; set object width
000114FE 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011502 5241                       		addq.w	#1,d1
00011504 E749                       		lsl.w	#3,d1
00011506 1141 0016                  		move.b	d1,$16(a0)	; set object height
0001150A                            
0001150A                            Obj71_Solid:				; XREF: Obj71_Index
0001150A 6100 C41E                  		bsr.w	ChkObjOnScreen
0001150E 6600                       		bne.s	Obj71_ChkDel
00011510 7200                       		moveq	#0,d1
00011512 1228 0019                  		move.b	$19(a0),d1
00011516 0641 000B                  		addi.w	#$B,d1
0001151A 7400                       		moveq	#0,d2
0001151C 1428 0016                  		move.b	$16(a0),d2
00011520 3602                       		move.w	d2,d3
00011522 5243                       		addq.w	#1,d3
00011524 3828 0008                  		move.w	8(a0),d4
00011528 6100 E598                  		bsr.w	SolidObject71
0001152C                            
0001152C                            Obj71_ChkDel:
0001152C 3028 0008                  		move.w	8(a0),d0
00011530 0240 FF80                  		andi.w	#$FF80,d0
00011534 3238 F700                  		move.w	($FFFFF700).w,d1
00011538 0441 0080                  		subi.w	#$80,d1
0001153C 0241 FF80                  		andi.w	#$FF80,d1
00011540 9041                       		sub.w	d1,d0
00011542 0C40 0280                  		cmpi.w	#$280,d0
00011546 6200                       		bhi.s	Obj71_Delete
00011548 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001154C 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0001154E 4EFA C15A                  		jmp	DisplaySprite	; if yes, display the object
00011552                            ; ===========================================================================
00011552                            
00011552                            Obj71_NoDisplay:
00011552 4E75                       		rts	
00011554                            ; ===========================================================================
00011554                            
00011554                            Obj71_Delete:
00011554 4EFA C190                  		jmp	DeleteObject
00011558                            ; ===========================================================================
00011558                            ; ---------------------------------------------------------------------------
00011558                            ; Sprite mappings - invisible solid blocks
00011558                            ; ---------------------------------------------------------------------------
00011558                            Map_obj71:
00011558                            	include "_maps\obj71.asm"
00011558                            ; ---------------------------------------------------------------------------
00011558                            ; Sprite mappings - invisible solid blocks
00011558                            ; ---------------------------------------------------------------------------
00011558 0000                       		dc.w byte_114BC-Map_obj71
0001155A 0000                       		dc.w byte_114D1-Map_obj71
0001155C 0000                       		dc.w byte_114E6-Map_obj71
0001155E 04                         byte_114BC:	dc.b 4
0001155F F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011564 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011569 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001156E 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011573 04                         byte_114D1:	dc.b 4
00011574 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011579 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001157E 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011583 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011588 04                         byte_114E6:	dc.b 4
00011589 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001158E E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011593 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011598 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001159E 00                         		even
0001159E 00                         		even
0001159E                            
0001159E                            ; ===========================================================================
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            ; Object 5D - fans (SLZ)
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            
0001159E                            Obj5D:					; XREF: Obj_Index
0001159E 7000                       		moveq	#0,d0
000115A0 1028 0024                  		move.b	$24(a0),d0
000115A4 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
000115A8 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
000115AC                            ; ===========================================================================
000115AC 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
000115AE 0000                       		dc.w Obj5D_Delay-Obj5D_Index
000115B0                            ; ===========================================================================
000115B0                            
000115B0                            Obj5D_Main:				; XREF: Obj5D_Index
000115B0 5428 0024                  		addq.b	#2,$24(a0)
000115B4 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000115BC 317C 43A0 0002             		move.w	#$43A0,2(a0)
000115C2 0028 0004 0001             		ori.b	#4,1(a0)
000115C8 117C 0010 0019             		move.b	#$10,$19(a0)
000115CE 117C 0004 0018             		move.b	#4,$18(a0)
000115D4                            
000115D4                            Obj5D_Delay:				; XREF: Obj5D_Index
000115D4 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000115DA 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000115DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000115E0 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000115E2 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000115E8 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000115EE 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000115F0 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000115F6                            
000115F6                            Obj5D_Blow:
000115F6 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000115FA 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000115FE 43F8 D000                  		lea	($FFFFD000).w,a1
00011602 3029 0008                  		move.w	8(a1),d0
00011606 9068 0008                  		sub.w	8(a0),d0
0001160A 0828 0000 0022             		btst	#0,$22(a0)
00011610 6600                       		bne.s	Obj5D_ChkSonic
00011612 4440                       		neg.w	d0
00011614                            
00011614                            Obj5D_ChkSonic:
00011614 0640 0050                  		addi.w	#$50,d0
00011618 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001161C 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001161E 3229 000C                  		move.w	$C(a1),d1
00011622 0641 0060                  		addi.w	#$60,d1
00011626 9268 000C                  		sub.w	$C(a0),d1
0001162A 6500                       		bcs.s	Obj5D_Animate
0001162C 0C41 0070                  		cmpi.w	#$70,d1
00011630 6400                       		bcc.s	Obj5D_Animate
00011632 0440 0050                  		subi.w	#$50,d0
00011636 6400                       		bcc.s	loc_1159A
00011638 4640                       		not.w	d0
0001163A D040                       		add.w	d0,d0
0001163C                            
0001163C                            loc_1159A:
0001163C 0640 0060                  		addi.w	#$60,d0
00011640 0828 0000 0022             		btst	#0,$22(a0)
00011646 6600                       		bne.s	loc_115A8
00011648 4440                       		neg.w	d0
0001164A                            
0001164A                            loc_115A8:
0001164A 4400                       		neg.b	d0
0001164C E840                       		asr.w	#4,d0
0001164E 0828 0000 0028             		btst	#0,$28(a0)
00011654 6700                       		beq.s	Obj5D_MoveSonic
00011656 4440                       		neg.w	d0
00011658                            
00011658                            Obj5D_MoveSonic:
00011658 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001165C                            
0001165C                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001165C 5328 001E                  		subq.b	#1,$1E(a0)
00011660 6A00                       		bpl.s	Obj5D_ChkDel
00011662 117C 0000 001E             		move.b	#0,$1E(a0)
00011668 5228 001B                  		addq.b	#1,$1B(a0)
0001166C 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011672 6500                       		bcs.s	loc_115D8
00011674 117C 0000 001B             		move.b	#0,$1B(a0)
0001167A                            
0001167A                            loc_115D8:
0001167A 7000                       		moveq	#0,d0
0001167C 0828 0000 0028             		btst	#0,$28(a0)
00011682 6700                       		beq.s	loc_115E4
00011684 7002                       		moveq	#2,d0
00011686                            
00011686                            loc_115E4:
00011686 D028 001B                  		add.b	$1B(a0),d0
0001168A 1140 001A                  		move.b	d0,$1A(a0)
0001168E                            
0001168E                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001168E 6100 C01A                  		bsr.w	DisplaySprite
00011692 3028 0008                  		move.w	8(a0),d0
00011696 0240 FF80                  		andi.w	#$FF80,d0
0001169A 3238 F700                  		move.w	($FFFFF700).w,d1
0001169E 0441 0080                  		subi.w	#$80,d1
000116A2 0241 FF80                  		andi.w	#$FF80,d1
000116A6 9041                       		sub.w	d1,d0
000116A8 0C40 0280                  		cmpi.w	#$280,d0
000116AC 6200 C038                  		bhi.w	DeleteObject
000116B0 4E75                       		rts	
000116B2                            ; ===========================================================================
000116B2                            ; ---------------------------------------------------------------------------
000116B2                            ; Sprite mappings - fans (SLZ)
000116B2                            ; ---------------------------------------------------------------------------
000116B2                            Map_obj5D:
000116B2                            	include "_maps\obj5D.asm"
000116B2                            ; ---------------------------------------------------------------------------
000116B2                            ; Sprite mappings - fans (SLZ)
000116B2                            ; ---------------------------------------------------------------------------
000116B2 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000116B6 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000116BA 0000                       		dc.w byte_1161A-Map_obj5D
000116BC 02                         byte_1161A:	dc.b 2
000116BD F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000116C2 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000116C7 02                         byte_11625:	dc.b 2
000116C8 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000116CD 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000116D2 02                         byte_11630:	dc.b 2
000116D3 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000116D8 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000116DE 00                         		even
000116DE 00                         		even
000116DE                            
000116DE                            ; ===========================================================================
000116DE                            ; ---------------------------------------------------------------------------
000116DE                            ; Object 5E - seesaws (SLZ)
000116DE                            ; ---------------------------------------------------------------------------
000116DE                            
000116DE                            Obj5E:					; XREF: Obj_Index
000116DE 7000                       		moveq	#0,d0
000116E0 1028 0024                  		move.b	$24(a0),d0
000116E4 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000116E8 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000116EC 3028 0030                  		move.w	$30(a0),d0
000116F0 0240 FF80                  		andi.w	#$FF80,d0
000116F4 3238 F700                  		move.w	($FFFFF700).w,d1
000116F8 0441 0080                  		subi.w	#$80,d1
000116FC 0241 FF80                  		andi.w	#$FF80,d1
00011700 9041                       		sub.w	d1,d0
00011702 6B00 BFE2                  		bmi.w	DeleteObject
00011706 0C40 0280                  		cmpi.w	#$280,d0
0001170A 6200 BFDA                  		bhi.w	DeleteObject
0001170E 6000 BF9A                  		bra.w	DisplaySprite
00011712                            ; ===========================================================================
00011712 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011714 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011716 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011718 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001171A 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001171C 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001171E                            ; ===========================================================================
0001171E                            
0001171E                            Obj5E_Main:				; XREF: Obj5E_Index
0001171E 5428 0024                  		addq.b	#2,$24(a0)
00011722 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001172A 317C 0374 0002             		move.w	#$374,2(a0)
00011730 0028 0004 0001             		ori.b	#4,1(a0)
00011736 117C 0004 0018             		move.b	#4,$18(a0)
0001173C 117C 0030 0019             		move.b	#$30,$19(a0)
00011742 3168 0008 0030             		move.w	8(a0),$30(a0)
00011748 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001174C 6600                       		bne.s	loc_116D2	; if not, branch
0001174E 6100 C3FC                  		bsr.w	SingleObjLoad2
00011752 6600                       		bne.s	loc_116D2
00011754 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011758 5C29 0024                  		addq.b	#6,$24(a1)
0001175C 3368 0008 0008             		move.w	8(a0),8(a1)
00011762 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011768 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001176E 2348 003C                  		move.l	a0,$3C(a1)
00011772                            
00011772                            loc_116D2:
00011772 0828 0000 0022             		btst	#0,$22(a0)
00011778 6700                       		beq.s	loc_116E0
0001177A 117C 0002 001A             		move.b	#2,$1A(a0)
00011780                            
00011780                            loc_116E0:
00011780 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011786                            
00011786                            Obj5E_Slope:				; XREF: Obj5E_Index
00011786 1228 003A                  		move.b	$3A(a0),d1
0001178A 6100 0000                  		bsr.w	loc_11766
0001178E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011794 0828 0000 001A             		btst	#0,$1A(a0)
0001179A 6700                       		beq.s	loc_11702
0001179C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000117A2                            
000117A2                            loc_11702:
000117A2 43F8 D000                  		lea	($FFFFD000).w,a1
000117A6 3169 0012 0038             		move.w	$12(a1),$38(a0)
000117AC 323C 0030                  		move.w	#$30,d1
000117B0 4EB9 0000 756C             		jsr	(SlopeObject).l
000117B6 4E75                       		rts	
000117B8                            ; ===========================================================================
000117B8                            
000117B8                            Obj5E_Slope2:				; XREF: Obj5E_Index
000117B8 6100 0000                  		bsr.w	loc_1174A
000117BC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000117C2 0828 0000 001A             		btst	#0,$1A(a0)
000117C8 6700                       		beq.s	loc_11730
000117CA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000117D0                            
000117D0                            loc_11730:
000117D0 323C 0030                  		move.w	#$30,d1
000117D4 4EB9 0000 760C             		jsr	(ExitPlatform).l
000117DA 323C 0030                  		move.w	#$30,d1
000117DE 3428 0008                  		move.w	8(a0),d2
000117E2 4EB9 0000 85B0             		jsr	SlopeObject2
000117E8 4E75                       		rts	
000117EA                            ; ===========================================================================
000117EA                            
000117EA                            loc_1174A:				; XREF: Obj5E_Slope2
000117EA 7202                       		moveq	#2,d1
000117EC 43F8 D000                  		lea	($FFFFD000).w,a1
000117F0 3028 0008                  		move.w	8(a0),d0
000117F4 9069 0008                  		sub.w	8(a1),d0
000117F8 6400                       		bcc.s	loc_1175E
000117FA 4440                       		neg.w	d0
000117FC 7200                       		moveq	#0,d1
000117FE                            
000117FE                            loc_1175E:
000117FE 0C40 0008                  		cmpi.w	#8,d0
00011802 6400                       		bcc.s	loc_11766
00011804 7201                       		moveq	#1,d1
00011806                            
00011806                            loc_11766:
00011806 1028 001A                  		move.b	$1A(a0),d0
0001180A B001                       		cmp.b	d1,d0
0001180C 6700                       		beq.s	locret_11790
0001180E 6400                       		bcc.s	loc_11772
00011810 5400                       		addq.b	#2,d0
00011812                            
00011812                            loc_11772:
00011812 5300                       		subq.b	#1,d0
00011814 1140 001A                  		move.b	d0,$1A(a0)
00011818 1141 003A                  		move.b	d1,$3A(a0)
0001181C 08A8 0000 0001             		bclr	#0,1(a0)
00011822 0828 0001 001A             		btst	#1,$1A(a0)
00011828 6700                       		beq.s	locret_11790
0001182A 08E8 0000 0001             		bset	#0,1(a0)
00011830                            
00011830                            locret_11790:
00011830 4E75                       		rts	
00011832                            ; ===========================================================================
00011832                            
00011832                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011832 5428 0024                  		addq.b	#2,$24(a0)
00011836 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001183E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011844 0028 0004 0001             		ori.b	#4,1(a0)
0001184A 117C 0004 0018             		move.b	#4,$18(a0)
00011850 117C 008B 0020             		move.b	#$8B,$20(a0)
00011856 117C 000C 0019             		move.b	#$C,$19(a0)
0001185C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011862 0668 0028 0008             		addi.w	#$28,8(a0)
00011868 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001186E 117C 0001 001A             		move.b	#1,$1A(a0)
00011874 0828 0000 0022             		btst	#0,$22(a0)
0001187A 6700                       		beq.s	Obj5E_MoveSpike
0001187C 0468 0050 0008             		subi.w	#$50,8(a0)
00011882 117C 0002 003A             		move.b	#2,$3A(a0)
00011888                            
00011888                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011888 2268 003C                  		movea.l	$3C(a0),a1
0001188C 7000                       		moveq	#0,d0
0001188E 1028 003A                  		move.b	$3A(a0),d0
00011892 9029 003A                  		sub.b	$3A(a1),d0
00011896 6700                       		beq.s	loc_1183E
00011898 6400                       		bcc.s	loc_117FC
0001189A 4400                       		neg.b	d0
0001189C                            
0001189C                            loc_117FC:
0001189C 323C F7E8                  		move.w	#-$818,d1
000118A0 343C FEEC                  		move.w	#-$114,d2
000118A4 0C00 0001                  		cmpi.b	#1,d0
000118A8 6700                       		beq.s	loc_11822
000118AA 323C F510                  		move.w	#-$AF0,d1
000118AE 343C FF34                  		move.w	#-$CC,d2
000118B2 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000118B8 6D00                       		blt.s	loc_11822
000118BA 323C F200                  		move.w	#-$E00,d1
000118BE 343C FF60                  		move.w	#-$A0,d2
000118C2                            
000118C2                            loc_11822:
000118C2 3141 0012                  		move.w	d1,$12(a0)
000118C6 3142 0010                  		move.w	d2,$10(a0)
000118CA 3028 0008                  		move.w	8(a0),d0
000118CE 9068 0030                  		sub.w	$30(a0),d0
000118D2 6400                       		bcc.s	loc_11838
000118D4 4468 0010                  		neg.w	$10(a0)
000118D8                            
000118D8                            loc_11838:
000118D8 5428 0024                  		addq.b	#2,$24(a0)
000118DC 6000                       		bra.s	Obj5E_SpikeFall
000118DE                            ; ===========================================================================
000118DE                            
000118DE                            loc_1183E:				; XREF: Obj5E_MoveSpike
000118DE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000118E4 7000                       		moveq	#0,d0
000118E6 1029 001A                  		move.b	$1A(a1),d0
000118EA 343C 0028                  		move.w	#$28,d2
000118EE 3228 0008                  		move.w	8(a0),d1
000118F2 9268 0030                  		sub.w	$30(a0),d1
000118F6 6400                       		bcc.s	loc_1185C
000118F8 4442                       		neg.w	d2
000118FA 5440                       		addq.w	#2,d0
000118FC                            
000118FC                            loc_1185C:
000118FC D040                       		add.w	d0,d0
000118FE 3228 0034                  		move.w	$34(a0),d1
00011902 D272 0000                  		add.w	(a2,d0.w),d1
00011906 3141 000C                  		move.w	d1,$C(a0)
0001190A D468 0030                  		add.w	$30(a0),d2
0001190E 3142 0008                  		move.w	d2,8(a0)
00011912 4268 000E                  		clr.w	$E(a0)
00011916 4268 000A                  		clr.w	$A(a0)
0001191A 4E75                       		rts	
0001191C                            ; ===========================================================================
0001191C                            
0001191C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001191C 4A68 0012                  		tst.w	$12(a0)
00011920 6A00                       		bpl.s	loc_1189A
00011922 6100 BD34                  		bsr.w	ObjectFall
00011926 3028 0034                  		move.w	$34(a0),d0
0001192A 0440 002F                  		subi.w	#$2F,d0
0001192E B068 000C                  		cmp.w	$C(a0),d0
00011932 6E00                       		bgt.s	locret_11898
00011934 6100 BD22                  		bsr.w	ObjectFall
00011938                            
00011938                            locret_11898:
00011938 4E75                       		rts	
0001193A                            ; ===========================================================================
0001193A                            
0001193A                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001193A 6100 BD1C                  		bsr.w	ObjectFall
0001193E 2268 003C                  		movea.l	$3C(a0),a1
00011942 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011948 7000                       		moveq	#0,d0
0001194A 1029 001A                  		move.b	$1A(a1),d0
0001194E 3228 0008                  		move.w	8(a0),d1
00011952 9268 0030                  		sub.w	$30(a0),d1
00011956 6400                       		bcc.s	loc_118BA
00011958 5440                       		addq.w	#2,d0
0001195A                            
0001195A                            loc_118BA:
0001195A D040                       		add.w	d0,d0
0001195C 3228 0034                  		move.w	$34(a0),d1
00011960 D272 0000                  		add.w	(a2,d0.w),d1
00011964 B268 000C                  		cmp.w	$C(a0),d1
00011968 6E00                       		bgt.s	locret_11938
0001196A 2268 003C                  		movea.l	$3C(a0),a1
0001196E 7202                       		moveq	#2,d1
00011970 4A68 0010                  		tst.w	$10(a0)
00011974 6B00                       		bmi.s	Obj5E_Spring
00011976 7200                       		moveq	#0,d1
00011978                            
00011978                            Obj5E_Spring:
00011978 1341 003A                  		move.b	d1,$3A(a1)
0001197C 1141 003A                  		move.b	d1,$3A(a0)
00011980 B229 001A                  		cmp.b	$1A(a1),d1
00011984 6700                       		beq.s	loc_1192C
00011986 08A9 0003 0022             		bclr	#3,$22(a1)
0001198C 6700                       		beq.s	loc_1192C
0001198E 4229 0025                  		clr.b	$25(a1)
00011992 137C 0002 0024             		move.b	#2,$24(a1)
00011998 45F8 D000                  		lea	($FFFFD000).w,a2
0001199C 3568 0012 0012             		move.w	$12(a0),$12(a2)
000119A2 446A 0012                  		neg.w	$12(a2)
000119A6 08EA 0001 0022             		bset	#1,$22(a2)
000119AC 08AA 0003 0022             		bclr	#3,$22(a2)
000119B2 422A 003C                  		clr.b	$3C(a2)
000119B6 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000119BC 157C 0002 0024             		move.b	#2,$24(a2)
000119C2 303C 00CC                  		move.w	#$CC,d0
000119C6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play spring sound
000119CC                            
000119CC                            loc_1192C:
000119CC 4268 0010                  		clr.w	$10(a0)
000119D0 4268 0012                  		clr.w	$12(a0)
000119D4 5528 0024                  		subq.b	#2,$24(a0)
000119D8                            
000119D8                            locret_11938:
000119D8 4E75                       		rts	
000119DA                            ; ===========================================================================
000119DA FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000119E4                            
000119E4                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011A14                            		even
00011A14                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011A44                            		even
00011A44                            ; ---------------------------------------------------------------------------
00011A44                            ; Sprite mappings - seesaws (SLZ)
00011A44                            ; ---------------------------------------------------------------------------
00011A44                            Map_obj5E:
00011A44                            	include "_maps\obj5E.asm"
00011A44                            ; ---------------------------------------------------------------------------
00011A44                            ; Sprite mappings - seesaws (SLZ)
00011A44                            ; ---------------------------------------------------------------------------
00011A44 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011A48 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011A4C 07                         byte_119AC:	dc.b 7
00011A4D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011A52 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011A57 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011A5C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011A61 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011A66 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011A6B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011A70 04                         byte_119D0:	dc.b 4
00011A71 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011A76 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011A7B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011A80 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011A86 00                         		even
00011A86 00                         		even
00011A86                            
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            Map_obj5Ea:
00011A86                            	include "_maps\obj5Eballs.asm"
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011A86                            ; ---------------------------------------------------------------------------
00011A86 0000                       		dc.w byte_119EA-Map_obj5Ea
00011A88 0000                       		dc.w byte_119F0-Map_obj5Ea
00011A8A 01                         byte_119EA:	dc.b 1
00011A8B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011A90 01                         byte_119F0:	dc.b 1
00011A91 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011A96                            		even
00011A96                            		even
00011A96                            
00011A96                            ; ===========================================================================
00011A96                            ; ---------------------------------------------------------------------------
00011A96                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011A96                            ; ---------------------------------------------------------------------------
00011A96                            
00011A96                            Obj5F:					; XREF: Obj_Index
00011A96 7000                       		moveq	#0,d0
00011A98 1028 0024                  		move.b	$24(a0),d0
00011A9C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011AA0 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011AA4                            ; ===========================================================================
00011AA4 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011AA6 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011AA8 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011AAA 0000                       		dc.w Obj5F_End-Obj5F_Index
00011AAC                            ; ===========================================================================
00011AAC                            
00011AAC                            Obj5F_Main:				; XREF: Obj5F_Index
00011AAC 5428 0024                  		addq.b	#2,$24(a0)
00011AB0 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011AB8 317C 0400 0002             		move.w	#$400,2(a0)
00011ABE 0028 0004 0001             		ori.b	#4,1(a0)
00011AC4 117C 0003 0018             		move.b	#3,$18(a0)
00011ACA 117C 000C 0019             		move.b	#$C,$19(a0)
00011AD0 1028 0028                  		move.b	$28(a0),d0
00011AD4 6700                       		beq.s	loc_11A3C
00011AD6 1140 0024                  		move.b	d0,$24(a0)
00011ADA 4E75                       		rts	
00011ADC                            ; ===========================================================================
00011ADC                            
00011ADC                            loc_11A3C:
00011ADC 117C 009A 0020             		move.b	#$9A,$20(a0)
00011AE2 0868 0000 0022             		bchg	#0,$22(a0)
00011AE8                            
00011AE8                            Obj5F_Action:				; XREF: Obj5F_Index
00011AE8 7000                       		moveq	#0,d0
00011AEA 1028 0025                  		move.b	$25(a0),d0
00011AEE 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011AF2 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011AF6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011AFC 6100 8CA4                  		bsr.w	AnimateSprite
00011B00 6000 DC52                  		bra.w	MarkObjGone
00011B04                            ; ===========================================================================
00011B04 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011B06 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011B08 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011B0A                            ; ===========================================================================
00011B0A                            
00011B0A                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011B0A 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B0E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B12 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011B14 5428 0025                  		addq.b	#2,$25(a0)
00011B18 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011B1E 317C 0010 0010             		move.w	#$10,$10(a0)
00011B24 117C 0001 001C             		move.b	#1,$1C(a0)
00011B2A 0868 0000 0022             		bchg	#0,$22(a0)
00011B30 6700                       		beq.s	locret_11A96
00011B32 4468 0010                  		neg.w	$10(a0)		; change direction
00011B36                            
00011B36                            locret_11A96:
00011B36 4E75                       		rts	
00011B38                            ; ===========================================================================
00011B38                            
00011B38                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011B38 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B3C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B40 6B00                       		bmi.s	loc_11AA8
00011B42 6100 BB40                  		bsr.w	SpeedToPos
00011B46 4E75                       		rts	
00011B48                            ; ===========================================================================
00011B48                            
00011B48                            loc_11AA8:
00011B48 5528 0025                  		subq.b	#2,$25(a0)
00011B4C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011B52 4268 0010                  		clr.w	$10(a0)		; stop walking
00011B56 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011B5C 4E75                       		rts	
00011B5E                            ; ===========================================================================
00011B5E                            
00011B5E                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011B5E 5368 0030                  		subq.w	#1,$30(a0)
00011B62 6A00                       		bpl.s	locret_11AD0
00011B64 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011B68 117C 0000 0024             		move.b	#0,$24(a0)
00011B6E                            
00011B6E                            locret_11AD0:
00011B6E 4E75                       		rts	
00011B70                            ; ===========================================================================
00011B70                            
00011B70                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011B70 3038 D008                  		move.w	($FFFFD008).w,d0
00011B74 9068 0008                  		sub.w	8(a0),d0
00011B78 6400                       		bcc.s	loc_11ADE
00011B7A 4440                       		neg.w	d0
00011B7C                            
00011B7C                            loc_11ADE:
00011B7C 0C40 0060                  		cmpi.w	#$60,d0
00011B80 6400                       		bcc.s	locret_11B5E
00011B82 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011B86 9068 000C                  		sub.w	$C(a0),d0
00011B8A 6400                       		bcc.s	Obj5F_MakeFuse
00011B8C 4440                       		neg.w	d0
00011B8E                            
00011B8E                            Obj5F_MakeFuse:
00011B8E 0C40 0060                  		cmpi.w	#$60,d0
00011B92 6400                       		bcc.s	locret_11B5E
00011B94 4A78 FE08                  		tst.w	($FFFFFE08).w
00011B98 6600                       		bne.s	locret_11B5E
00011B9A 117C 0004 0025             		move.b	#4,$25(a0)
00011BA0 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011BA6 4268 0010                  		clr.w	$10(a0)
00011BAA 117C 0002 001C             		move.b	#2,$1C(a0)
00011BB0 6100 BF9A                  		bsr.w	SingleObjLoad2
00011BB4 6600                       		bne.s	locret_11B5E
00011BB6 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011BBA 3368 0008 0008             		move.w	8(a0),8(a1)
00011BC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011BC6 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011BCC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011BD2 137C 0004 0028             		move.b	#4,$28(a1)
00011BD8 137C 0003 001C             		move.b	#3,$1C(a1)
00011BDE 337C 0010 0012             		move.w	#$10,$12(a1)
00011BE4 0828 0001 0022             		btst	#1,$22(a0)
00011BEA 6700                       		beq.s	loc_11B54
00011BEC 4469 0012                  		neg.w	$12(a1)
00011BF0                            
00011BF0                            loc_11B54:
00011BF0 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011BF6 2348 003C                  		move.l	a0,$3C(a1)
00011BFA                            
00011BFA                            locret_11B5E:
00011BFA 4E75                       		rts	
00011BFC                            ; ===========================================================================
00011BFC                            
00011BFC                            Obj5F_Display:				; XREF: Obj5F_Index
00011BFC 6100                       		bsr.s	loc_11B70
00011BFE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C04 6100 8B9C                  		bsr.w	AnimateSprite
00011C08 6000 DB4A                  		bra.w	MarkObjGone
00011C0C                            ; ===========================================================================
00011C0C                            
00011C0C                            loc_11B70:
00011C0C 5368 0030                  		subq.w	#1,$30(a0)
00011C10 6B00                       		bmi.s	loc_11B7C
00011C12 6100 BA70                  		bsr.w	SpeedToPos
00011C16 4E75                       		rts	
00011C18                            ; ===========================================================================
00011C18                            
00011C18                            loc_11B7C:
00011C18 4268 0030                  		clr.w	$30(a0)
00011C1C 4228 0024                  		clr.b	$24(a0)
00011C20 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011C26 7203                       		moveq	#3,d1
00011C28 2248                       		movea.l	a0,a1
00011C2A 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011C30 6000                       		bra.s	Obj5F_MakeShrap
00011C32                            ; ===========================================================================
00011C32                            
00011C32                            Obj5F_Loop:
00011C32 6100 BF18                  		bsr.w	SingleObjLoad2
00011C36 6600                       		bne.s	loc_11BCE
00011C38                            
00011C38                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011C38 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011C3C 3368 0008 0008             		move.w	8(a0),8(a1)
00011C42 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C48 137C 0006 0028             		move.b	#6,$28(a1)
00011C4E 137C 0004 001C             		move.b	#4,$1C(a1)
00011C54 335A 0010                  		move.w	(a2)+,$10(a1)
00011C58 335A 0012                  		move.w	(a2)+,$12(a1)
00011C5C 137C 0098 0020             		move.b	#$98,$20(a1)
00011C62 08E9 0007 0001             		bset	#7,1(a1)
00011C68                            
00011C68                            loc_11BCE:
00011C68 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011C6C                            
00011C6C 117C 0006 0024             		move.b	#6,$24(a0)
00011C72                            
00011C72                            Obj5F_End:				; XREF: Obj5F_Index
00011C72 6100 BA10                  		bsr.w	SpeedToPos
00011C76 0668 0018 0012             		addi.w	#$18,$12(a0)
00011C7C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C82 6100 8B1E                  		bsr.w	AnimateSprite
00011C86 4A28 0001                  		tst.b	1(a0)
00011C8A 6A00 BA5A                  		bpl.w	DeleteObject
00011C8E 6000 BA1A                  		bra.w	DisplaySprite
00011C92                            ; ===========================================================================
00011C92 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011CA2                            
00011CA2                            Ani_obj5F:
00011CA2                            	include "_anim\obj5F.asm"
00011CA2                            ; ---------------------------------------------------------------------------
00011CA2                            ; Animation script - Bomb enemy
00011CA2                            ; ---------------------------------------------------------------------------
00011CA2 0000                       		dc.w byte_11C12-Ani_obj5F
00011CA4 0000                       		dc.w byte_11C16-Ani_obj5F
00011CA6 0000                       		dc.w byte_11C1C-Ani_obj5F
00011CA8 0000                       		dc.w byte_11C20-Ani_obj5F
00011CAA 0000                       		dc.w byte_11C24-Ani_obj5F
00011CAC 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011CB0 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011CB6 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011CBA 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011CBE 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011CC2                            		even
00011CC2                            		even
00011CC2                            
00011CC2                            ; ---------------------------------------------------------------------------
00011CC2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011CC2                            ; ---------------------------------------------------------------------------
00011CC2                            Map_obj5F:
00011CC2                            	include "_maps\obj5F.asm"
00011CC2                            ; ---------------------------------------------------------------------------
00011CC2                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011CC2                            ; ---------------------------------------------------------------------------
00011CC2 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011CC6 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011CCA 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011CCE 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011CD2 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011CD6 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011CDA 03                         byte_11C40:	dc.b 3
00011CDB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011CE0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011CE5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011CEA 03                         byte_11C50:	dc.b 3
00011CEB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011CF0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011CF5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011CFA 03                         byte_11C60:	dc.b 3
00011CFB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011D00 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011D05 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D0A 03                         byte_11C70:	dc.b 3
00011D0B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D10 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011D15 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D1A 03                         byte_11C80:	dc.b 3
00011D1B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011D20 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011D25 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D2A 03                         byte_11C90:	dc.b 3
00011D2B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D30 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011D35 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D3A 02                         byte_11CA0:	dc.b 2
00011D3B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011D40 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D45 02                         byte_11CAB:	dc.b 2
00011D46 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D4B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D50 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011D51 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011D56 01                         byte_11CBC:	dc.b 1			; fuse
00011D57 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011D5C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011D5D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011D62 01                         byte_11CC8:	dc.b 1			; fireball
00011D63 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011D68                            		even
00011D68                            		even
00011D68                            
00011D68                            ; ===========================================================================
00011D68                            ; ---------------------------------------------------------------------------
00011D68                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011D68                            ; ---------------------------------------------------------------------------
00011D68                            
00011D68                            Obj60:					; XREF: Obj_Index
00011D68 7000                       		moveq	#0,d0
00011D6A 1028 0024                  		move.b	$24(a0),d0
00011D6E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011D72 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011D76                            ; ===========================================================================
00011D76 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011D78 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011D7A 0000                       		dc.w Obj60_Display-Obj60_Index
00011D7C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011D7E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011D80                            ; ===========================================================================
00011D80                            
00011D80                            Obj60_Main:				; XREF: Obj60_Index
00011D80 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011D88 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011D8E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011D94 6700                       		beq.s	loc_11D02
00011D96 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011D9C                            
00011D9C                            loc_11D02:
00011D9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DA2 6600                       		bne.s	loc_11D10
00011DA4 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011DAA                            
00011DAA                            loc_11D10:
00011DAA 0028 0004 0001             		ori.b	#4,1(a0)
00011DB0 117C 0004 0018             		move.b	#4,$18(a0)
00011DB6 117C 000B 0020             		move.b	#$B,$20(a0)
00011DBC 117C 000C 0019             		move.b	#$C,$19(a0)
00011DC2 7400                       		moveq	#0,d2
00011DC4 45E8 0037                  		lea	$37(a0),a2
00011DC8 264A                       		movea.l	a2,a3
00011DCA 524A                       		addq.w	#1,a2
00011DCC 7203                       		moveq	#3,d1
00011DCE                            
00011DCE                            Obj60_MakeOrbs:
00011DCE 6100 BD7C                  		bsr.w	SingleObjLoad2
00011DD2 6600                       		bne.s	loc_11D90
00011DD4 5213                       		addq.b	#1,(a3)
00011DD6 3A09                       		move.w	a1,d5
00011DD8 0445 D000                  		subi.w	#-$3000,d5
00011DDC EC4D                       		lsr.w	#6,d5
00011DDE 0245 007F                  		andi.w	#$7F,d5
00011DE2 14C5                       		move.b	d5,(a2)+
00011DE4 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011DE6 137C 0006 0024             		move.b	#6,$24(a1)
00011DEC 2368 0004 0004             		move.l	4(a0),4(a1)
00011DF2 3368 0002 0002             		move.w	2(a0),2(a1)
00011DF8 0029 0004 0001             		ori.b	#4,1(a1)
00011DFE 137C 0004 0018             		move.b	#4,$18(a1)
00011E04 137C 0008 0019             		move.b	#8,$19(a1)
00011E0A 137C 0003 001A             		move.b	#3,$1A(a1)
00011E10 137C 0098 0020             		move.b	#$98,$20(a1)
00011E16 1342 0026                  		move.b	d2,$26(a1)
00011E1A 0602 0040                  		addi.b	#$40,d2
00011E1E 2348 003C                  		move.l	a0,$3C(a1)
00011E22 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011E26                            
00011E26                            loc_11D90:
00011E26 7001                       		moveq	#1,d0
00011E28 0828 0000 0022             		btst	#0,$22(a0)
00011E2E 6700                       		beq.s	Obj60_Move
00011E30 4440                       		neg.w	d0
00011E32                            
00011E32                            Obj60_Move:
00011E32 1140 0036                  		move.b	d0,$36(a0)
00011E36 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011E3C 5428 0024                  		addq.b	#2,$24(a0)
00011E40 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011E46 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011E4C 6700                       		beq.s	locret_11DBC	; if not, branch
00011E4E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011E52                            
00011E52                            locret_11DBC:
00011E52 4E75                       		rts	
00011E54                            ; ===========================================================================
00011E54                            
00011E54                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011E54 3038 D008                  		move.w	($FFFFD008).w,d0
00011E58 9068 0008                  		sub.w	8(a0),d0
00011E5C 6400                       		bcc.s	loc_11DCA
00011E5E 4440                       		neg.w	d0
00011E60                            
00011E60                            loc_11DCA:
00011E60 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011E64 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011E66 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011E6A 9068 000C                  		sub.w	$C(a0),d0
00011E6E 6400                       		bcc.s	loc_11DDC
00011E70 4440                       		neg.w	d0
00011E72                            
00011E72                            loc_11DDC:
00011E72 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011E76 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011E78 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011E7C 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011E7E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011E84                            
00011E84                            Obj60_Animate:
00011E84 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011E8A 6100 8916                  		bsr.w	AnimateSprite
00011E8E 6000 0000                  		bra.w	Obj60_ChkDel
00011E92                            ; ===========================================================================
00011E92                            
00011E92                            Obj60_Display:				; XREF: Obj60_Index
00011E92 6100 B7F0                  		bsr.w	SpeedToPos
00011E96                            
00011E96                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011E96 3028 0008                  		move.w	8(a0),d0
00011E9A 0240 FF80                  		andi.w	#$FF80,d0
00011E9E 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA2 0441 0080                  		subi.w	#$80,d1
00011EA6 0241 FF80                  		andi.w	#$FF80,d1
00011EAA 9041                       		sub.w	d1,d0
00011EAC 0C40 0280                  		cmpi.w	#$280,d0
00011EB0 6200 0000                  		bhi.w	Obj60_ChkGone
00011EB4 6000 B7F4                  		bra.w	DisplaySprite
00011EB8                            ; ===========================================================================
00011EB8                            
00011EB8                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011EB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011EBC 7000                       		moveq	#0,d0
00011EBE 1028 0023                  		move.b	$23(a0),d0
00011EC2 6700                       		beq.s	loc_11E34
00011EC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011ECA                            
00011ECA                            loc_11E34:
00011ECA 45E8 0037                  		lea	$37(a0),a2
00011ECE 7400                       		moveq	#0,d2
00011ED0 141A                       		move.b	(a2)+,d2
00011ED2 5342                       		subq.w	#1,d2
00011ED4 6500                       		bcs.s	Obj60_Delete
00011ED6                            
00011ED6                            loc_11E40:
00011ED6 7000                       		moveq	#0,d0
00011ED8 101A                       		move.b	(a2)+,d0
00011EDA ED48                       		lsl.w	#6,d0
00011EDC 0680 00FF D000             		addi.l	#$FFD000,d0
00011EE2 2240                       		movea.l	d0,a1
00011EE4 6100 B802                  		bsr.w	DeleteObject2
00011EE8 51CA FFEC                  		dbf	d2,loc_11E40
00011EEC                            
00011EEC                            Obj60_Delete:
00011EEC 6000 B7F8                  		bra.w	DeleteObject
00011EF0                            ; ===========================================================================
00011EF0                            
00011EF0                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011EF0 2268 003C                  		movea.l	$3C(a0),a1
00011EF4 0C11 0060                  		cmpi.b	#$60,0(a1)
00011EF8 6600 B7EC                  		bne.w	DeleteObject
00011EFC 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011F02 6600                       		bne.s	Obj60_Circle
00011F04 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011F0A 6600                       		bne.s	Obj60_Circle
00011F0C 5428 0024                  		addq.b	#2,$24(a0)
00011F10 5329 0037                  		subq.b	#1,$37(a1)
00011F14 6600                       		bne.s	Obj60_FireOrb
00011F16 5429 0024                  		addq.b	#2,$24(a1)
00011F1A                            
00011F1A                            Obj60_FireOrb:
00011F1A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011F20 0829 0000 0022             		btst	#0,$22(a1)
00011F26 6700                       		beq.s	Obj60_Display2
00011F28 4468 0010                  		neg.w	$10(a0)
00011F2C                            
00011F2C                            Obj60_Display2:
00011F2C 6000 B77C                  		bra.w	DisplaySprite
00011F30                            ; ===========================================================================
00011F30                            
00011F30                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011F30 1028 0026                  		move.b	$26(a0),d0
00011F34 4EB9 0000 28EC             		jsr	(CalcSine).l
00011F3A E841                       		asr.w	#4,d1
00011F3C D269 0008                  		add.w	8(a1),d1
00011F40 3141 0008                  		move.w	d1,8(a0)
00011F44 E840                       		asr.w	#4,d0
00011F46 D069 000C                  		add.w	$C(a1),d0
00011F4A 3140 000C                  		move.w	d0,$C(a0)
00011F4E 1029 0036                  		move.b	$36(a1),d0
00011F52 D128 0026                  		add.b	d0,$26(a0)
00011F56 6000 B752                  		bra.w	DisplaySprite
00011F5A                            ; ===========================================================================
00011F5A                            
00011F5A                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011F5A 6100 B728                  		bsr.w	SpeedToPos
00011F5E 4A28 0001                  		tst.b	1(a0)
00011F62 6A00 B782                  		bpl.w	DeleteObject
00011F66 6000 B742                  		bra.w	DisplaySprite
00011F6A                            ; ===========================================================================
00011F6A                            Ani_obj60:
00011F6A                            	include "_anim\obj60.asm"
00011F6A                            ; ---------------------------------------------------------------------------
00011F6A                            ; Animation script - Orbinaut enemy
00011F6A                            ; ---------------------------------------------------------------------------
00011F6A 0000                       		dc.w byte_11EDA-Ani_obj60
00011F6C 0000                       		dc.w byte_11EDE-Ani_obj60
00011F6E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011F72 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011F78                            		even
00011F78                            		even
00011F78                            
00011F78                            ; ---------------------------------------------------------------------------
00011F78                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011F78                            ; ---------------------------------------------------------------------------
00011F78                            Map_obj60:
00011F78                            	include "_maps\obj60.asm"
00011F78                            ; ---------------------------------------------------------------------------
00011F78                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011F78                            ; ---------------------------------------------------------------------------
00011F78 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00011F7C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00011F80 01                         byte_11EEC:	dc.b 1
00011F81 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F86 01                         byte_11EF2:	dc.b 1
00011F87 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00011F8C 01                         byte_11EF8:	dc.b 1
00011F8D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00011F92 01                         byte_11EFE:	dc.b 1
00011F93 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00011F98                            		even
00011F98                            		even
00011F98                            
00011F98                            ; ===========================================================================
00011F98                            ; ---------------------------------------------------------------------------
00011F98                            ; Object 16 - harpoon (LZ)
00011F98                            ; ---------------------------------------------------------------------------
00011F98                            
00011F98                            Obj16:					; XREF: Obj_Index
00011F98 7000                       		moveq	#0,d0
00011F9A 1028 0024                  		move.b	$24(a0),d0
00011F9E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00011FA2 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00011FA6                            ; ===========================================================================
00011FA6 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00011FA8 0000                       		dc.w Obj16_Move-Obj16_Index
00011FAA 0000                       		dc.w Obj16_Wait-Obj16_Index
00011FAC                            ; ===========================================================================
00011FAC                            
00011FAC                            Obj16_Main:				; XREF: Obj16_Index
00011FAC 5428 0024                  		addq.b	#2,$24(a0)
00011FB0 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00011FB8 317C 03CC 0002             		move.w	#$3CC,2(a0)
00011FBE 0028 0004 0001             		ori.b	#4,1(a0)
00011FC4 117C 0004 0018             		move.b	#4,$18(a0)
00011FCA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011FD0 117C 0014 0019             		move.b	#$14,$19(a0)
00011FD6 317C 003C 0030             		move.w	#60,$30(a0)
00011FDC                            
00011FDC                            Obj16_Move:				; XREF: Obj16_Index
00011FDC 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00011FE2 6100 87BE                  		bsr.w	AnimateSprite
00011FE6 7000                       		moveq	#0,d0
00011FE8 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00011FEC 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00011FF2 6000 D760                  		bra.w	MarkObjGone
00011FF6                            ; ===========================================================================
00011FF6 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00011FFC                            ; ===========================================================================
00011FFC                            
00011FFC                            Obj16_Wait:				; XREF: Obj16_Index
00011FFC 5368 0030                  		subq.w	#1,$30(a0)
00012000 6A00                       		bpl.s	Obj16_ChkDel
00012002 317C 003C 0030             		move.w	#60,$30(a0)
00012008 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001200C 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012012                            
00012012                            Obj16_ChkDel:
00012012 6000 D740                  		bra.w	MarkObjGone
00012016                            ; ===========================================================================
00012016                            Ani_obj16:
00012016                            	include "_anim\obj16.asm"
00012016                            ; ---------------------------------------------------------------------------
00012016                            ; Animation script - harpoon (LZ)
00012016                            ; ---------------------------------------------------------------------------
00012016 0000                       		dc.w byte_11F8A-Ani_obj16
00012018 0000                       		dc.w byte_11F8E-Ani_obj16
0001201A 0000                       		dc.w byte_11F92-Ani_obj16
0001201C 0000                       		dc.w byte_11F96-Ani_obj16
0001201E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012022 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012026 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001202A 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001202E                            		even
0001202E                            		even
0001202E                            
0001202E                            ; ---------------------------------------------------------------------------
0001202E                            ; Sprite mappings - harpoon (LZ)
0001202E                            ; ---------------------------------------------------------------------------
0001202E                            Map_obj16:
0001202E                            	include "_maps\obj16.asm"
0001202E                            ; ---------------------------------------------------------------------------
0001202E                            ; Sprite mappings - harpoon (LZ)
0001202E                            ; ---------------------------------------------------------------------------
0001202E 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012032 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012036 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001203A 01                         byte_11FA6:	dc.b 1
0001203B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012040 01                         byte_11FAC:	dc.b 1
00012041 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012046 02                         byte_11FB2:	dc.b 2
00012047 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001204C FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012051 01                         byte_11FBD:	dc.b 1
00012052 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012057 01                         byte_11FC3:	dc.b 1
00012058 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001205D 02                         byte_11FC9:	dc.b 2
0001205E D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012063 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012068                            		even
00012068                            		even
00012068                            
00012068                            ; ===========================================================================
00012068                            ; ---------------------------------------------------------------------------
00012068                            ; Object 61 - blocks (LZ)
00012068                            ; ---------------------------------------------------------------------------
00012068                            
00012068                            Obj61:					; XREF: Obj_Index
00012068 7000                       		moveq	#0,d0
0001206A 1028 0024                  		move.b	$24(a0),d0
0001206E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012072 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012076                            ; ===========================================================================
00012076 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012078 0000                       		dc.w Obj61_Action-Obj61_Index
0001207A                            
0001207A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001207C 200C                       		dc.b $20, $C
0001207E 1010                       		dc.b $10, $10
00012080 1010                       		dc.b $10, $10
00012082                            ; ===========================================================================
00012082                            
00012082                            Obj61_Main:				; XREF: Obj61_Index
00012082 5428 0024                  		addq.b	#2,$24(a0)
00012086 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001208E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012094 117C 0004 0001             		move.b	#4,1(a0)
0001209A 117C 0003 0018             		move.b	#3,$18(a0)
000120A0 7000                       		moveq	#0,d0
000120A2 1028 0028                  		move.b	$28(a0),d0
000120A6 E648                       		lsr.w	#3,d0
000120A8 0240 000E                  		andi.w	#$E,d0
000120AC 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000120B0 115A 0019                  		move.b	(a2)+,$19(a0)
000120B4 1152 0016                  		move.b	(a2),$16(a0)
000120B8 E248                       		lsr.w	#1,d0
000120BA 1140 001A                  		move.b	d0,$1A(a0)
000120BE 3168 0008 0034             		move.w	8(a0),$34(a0)
000120C4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000120CA 1028 0028                  		move.b	$28(a0),d0
000120CE 0200 000F                  		andi.b	#$F,d0
000120D2 6700                       		beq.s	Obj61_Action
000120D4 0C00 0007                  		cmpi.b	#7,d0
000120D8 6700                       		beq.s	Obj61_Action
000120DA 117C 0001 0038             		move.b	#1,$38(a0)
000120E0                            
000120E0                            Obj61_Action:				; XREF: Obj61_Index
000120E0 3F28 0008                  		move.w	8(a0),-(sp)
000120E4 7000                       		moveq	#0,d0
000120E6 1028 0028                  		move.b	$28(a0),d0
000120EA 0240 000F                  		andi.w	#$F,d0
000120EE D040                       		add.w	d0,d0
000120F0 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000120F4 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000120F8 381F                       		move.w	(sp)+,d4
000120FA 4A28 0001                  		tst.b	1(a0)
000120FE 6A00                       		bpl.s	Obj61_ChkDel
00012100 7200                       		moveq	#0,d1
00012102 1228 0019                  		move.b	$19(a0),d1
00012106 0641 000B                  		addi.w	#$B,d1
0001210A 7400                       		moveq	#0,d2
0001210C 1428 0016                  		move.b	$16(a0),d2
00012110 3602                       		move.w	d2,d3
00012112 5243                       		addq.w	#1,d3
00012114 6100 D966                  		bsr.w	SolidObject
00012118 1144 003F                  		move.b	d4,$3F(a0)
0001211C 6100 0000                  		bsr.w	loc_12180
00012120                            
00012120                            Obj61_ChkDel:
00012120 3028 0034                  		move.w	$34(a0),d0
00012124 0240 FF80                  		andi.w	#$FF80,d0
00012128 3238 F700                  		move.w	($FFFFF700).w,d1
0001212C 0441 0080                  		subi.w	#$80,d1
00012130 0241 FF80                  		andi.w	#$FF80,d1
00012134 9041                       		sub.w	d1,d0
00012136 0C40 0280                  		cmpi.w	#$280,d0
0001213A 6200 B5AA                  		bhi.w	DeleteObject
0001213E 6000 B56A                  		bra.w	DisplaySprite
00012142                            ; ===========================================================================
00012142 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012146 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001214A 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001214E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012152                            ; ===========================================================================
00012152                            
00012152                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012152 4E75                       		rts	
00012154                            ; ===========================================================================
00012154                            
00012154                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012154 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012158 6600                       		bne.s	loc_120D6	; if yes, branch
0001215A 0828 0003 0022             		btst	#3,$22(a0)
00012160 6700                       		beq.s	locret_120D4
00012162 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012168                            
00012168                            locret_120D4:
00012168 4E75                       		rts	
0001216A                            ; ===========================================================================
0001216A                            
0001216A                            loc_120D6:
0001216A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001216E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012170 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012174 4228 0038                  		clr.b	$38(a0)
00012178 4E75                       		rts	
0001217A                            ; ===========================================================================
0001217A                            
0001217A                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001217A 6100 B508                  		bsr.w	SpeedToPos
0001217E 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012182 6100 0000                  		bsr.w	ObjHitFloor
00012186 4A41                       		tst.w	d1
00012188 6A00 0000                  		bpl.w	locret_12106
0001218C 5241                       		addq.w	#1,d1
0001218E D368 000C                  		add.w	d1,$C(a0)
00012192 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012196 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001219A                            
0001219A                            locret_12106:
0001219A 4E75                       		rts	
0001219C                            ; ===========================================================================
0001219C                            
0001219C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001219C 6100 B4E6                  		bsr.w	SpeedToPos
000121A0 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000121A4 6100 0000                  		bsr.w	ObjHitCeiling
000121A8 4A41                       		tst.w	d1
000121AA 6A00 0000                  		bpl.w	locret_12126
000121AE 9368 000C                  		sub.w	d1,$C(a0)
000121B2 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000121B6 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000121BA                            
000121BA                            locret_12126:
000121BA 4E75                       		rts	
000121BC                            ; ===========================================================================
000121BC                            
000121BC                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000121BC 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000121C2 6600                       		bne.s	locret_12138	; if not, branch
000121C4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000121C8 4228 0038                  		clr.b	$38(a0)
000121CC                            
000121CC                            locret_12138:
000121CC 4E75                       		rts	
000121CE                            ; ===========================================================================
000121CE                            
000121CE                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000121CE 3038 F646                  		move.w	($FFFFF646).w,d0
000121D2 9068 000C                  		sub.w	$C(a0),d0
000121D6 6700                       		beq.s	locret_1217E
000121D8 6400                       		bcc.s	loc_12162
000121DA 0C40 FFFE                  		cmpi.w	#-2,d0
000121DE 6C00                       		bge.s	loc_1214E
000121E0 70FE                       		moveq	#-2,d0
000121E2                            
000121E2                            loc_1214E:
000121E2 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000121E6 6100 0000                  		bsr.w	ObjHitCeiling
000121EA 4A41                       		tst.w	d1
000121EC 6A00 0000                  		bpl.w	locret_12160
000121F0 9368 000C                  		sub.w	d1,$C(a0)
000121F4                            
000121F4                            locret_12160:
000121F4 4E75                       		rts	
000121F6                            ; ===========================================================================
000121F6                            
000121F6                            loc_12162:				; XREF: Obj61_Type07
000121F6 0C40 0002                  		cmpi.w	#2,d0
000121FA 6F00                       		ble.s	loc_1216A
000121FC 7002                       		moveq	#2,d0
000121FE                            
000121FE                            loc_1216A:
000121FE D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012202 6100 0000                  		bsr.w	ObjHitFloor
00012206 4A41                       		tst.w	d1
00012208 6A00 0000                  		bpl.w	locret_1217E
0001220C 5241                       		addq.w	#1,d1
0001220E D368 000C                  		add.w	d1,$C(a0)
00012212                            
00012212                            locret_1217E:
00012212 4E75                       		rts	
00012214                            ; ===========================================================================
00012214                            
00012214                            loc_12180:				; XREF: Obj61_Action
00012214 4A28 0038                  		tst.b	$38(a0)
00012218 6700                       		beq.s	locret_121C0
0001221A 0828 0003 0022             		btst	#3,$22(a0)
00012220 6600                       		bne.s	loc_1219A
00012222 4A28 003E                  		tst.b	$3E(a0)
00012226 6700                       		beq.s	locret_121C0
00012228 5928 003E                  		subq.b	#4,$3E(a0)
0001222C 6000                       		bra.s	loc_121A6
0001222E                            ; ===========================================================================
0001222E                            
0001222E                            loc_1219A:
0001222E 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012234 6700                       		beq.s	locret_121C0
00012236 5828 003E                  		addq.b	#4,$3E(a0)
0001223A                            
0001223A                            loc_121A6:
0001223A 1028 003E                  		move.b	$3E(a0),d0
0001223E 4EB9 0000 28EC             		jsr	(CalcSine).l
00012244 323C 0400                  		move.w	#$400,d1
00012248 C1C1                       		muls.w	d1,d0
0001224A 4840                       		swap	d0
0001224C D068 0030                  		add.w	$30(a0),d0
00012250 3140 000C                  		move.w	d0,$C(a0)
00012254                            
00012254                            locret_121C0:
00012254 4E75                       		rts	
00012256                            ; ===========================================================================
00012256                            ; ---------------------------------------------------------------------------
00012256                            ; Sprite mappings - blocks (LZ)
00012256                            ; ---------------------------------------------------------------------------
00012256                            Map_obj61:
00012256                            	include "_maps\obj61.asm"
00012256                            ; ---------------------------------------------------------------------------
00012256                            ; Sprite mappings - blocks (LZ)
00012256                            ; ---------------------------------------------------------------------------
00012256 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001225A 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001225E 01                         byte_121CA:	dc.b 1
0001225F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012264 02                         byte_121D0:	dc.b 2
00012265 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001226A F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001226F 01                         byte_121DB:	dc.b 1
00012270 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012275 01                         byte_121E1:	dc.b 1
00012276 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001227C 00                         		even
0001227C 00                         		even
0001227C                            
0001227C                            ; ===========================================================================
0001227C                            ; ---------------------------------------------------------------------------
0001227C                            ; Object 62 - gargoyle head (LZ)
0001227C                            ; ---------------------------------------------------------------------------
0001227C                            
0001227C                            Obj62:					; XREF: Obj_Index
0001227C 7000                       		moveq	#0,d0
0001227E 1028 0024                  		move.b	$24(a0),d0
00012282 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012286 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001228A 6000 D4C8                  		bra.w	MarkObjGone
0001228E                            ; ===========================================================================
0001228E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012290 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012292 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012294 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012296                            
00012296 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001229E                            ; ===========================================================================
0001229E                            
0001229E                            Obj62_Main:				; XREF: Obj62_Index
0001229E 5428 0024                  		addq.b	#2,$24(a0)
000122A2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000122AA 317C 42E9 0002             		move.w	#$42E9,2(a0)
000122B0 0028 0004 0001             		ori.b	#4,1(a0)
000122B6 117C 0003 0018             		move.b	#3,$18(a0)
000122BC 117C 0010 0019             		move.b	#$10,$19(a0)
000122C2 1028 0028                  		move.b	$28(a0),d0	; get object type
000122C6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000122CA 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000122D0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000122D6 0228 000F 0028             		andi.b	#$F,$28(a0)
000122DC                            
000122DC                            Obj62_MakeFire:				; XREF: Obj62_Index
000122DC 5328 001E                  		subq.b	#1,$1E(a0)
000122E0 6600                       		bne.s	Obj62_NoFire
000122E2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000122E8 6100 B640                  		bsr.w	ChkObjOnScreen
000122EC 6600                       		bne.s	Obj62_NoFire
000122EE 6100 B846                  		bsr.w	SingleObjLoad
000122F2 6600                       		bne.s	Obj62_NoFire
000122F4 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000122F8 5829 0024                  		addq.b	#4,$24(a1)
000122FC 3368 0008 0008             		move.w	8(a0),8(a1)
00012302 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012308 1368 0001 0001             		move.b	1(a0),1(a1)
0001230E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012314                            
00012314                            Obj62_NoFire:
00012314 4E75                       		rts	
00012316                            ; ===========================================================================
00012316                            
00012316                            Obj62_FireBall:				; XREF: Obj62_Index
00012316 5428 0024                  		addq.b	#2,$24(a0)
0001231A 117C 0008 0016             		move.b	#8,$16(a0)
00012320 117C 0008 0017             		move.b	#8,$17(a0)
00012326 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001232E 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012334 0028 0004 0001             		ori.b	#4,1(a0)
0001233A 117C 0004 0018             		move.b	#4,$18(a0)
00012340 117C 0098 0020             		move.b	#$98,$20(a0)
00012346 117C 0008 0019             		move.b	#8,$19(a0)
0001234C 117C 0002 001A             		move.b	#2,$1A(a0)
00012352 5068 000C                  		addq.w	#8,$C(a0)
00012356 317C 0200 0010             		move.w	#$200,$10(a0)
0001235C 0828 0000 0022             		btst	#0,$22(a0)
00012362 6600                       		bne.s	Obj62_Sound
00012364 4468 0010                  		neg.w	$10(a0)
00012368                            
00012368                            Obj62_Sound:
00012368 303C 00AE                  		move.w	#$AE,d0
0001236C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012372                            
00012372                            Obj62_AniFire:				; XREF: Obj62_Index
00012372 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012376 0200 0007                  		andi.b	#7,d0
0001237A 6600                       		bne.s	Obj62_StopFire
0001237C 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012382                            
00012382                            Obj62_StopFire:
00012382 6100 B300                  		bsr.w	SpeedToPos
00012386 0828 0000 0022             		btst	#0,$22(a0)
0001238C 6600                       		bne.s	Obj62_StopFire2
0001238E 76F8                       		moveq	#-8,d3
00012390 6100 0000                  		bsr.w	ObjHitWallLeft
00012394 4A41                       		tst.w	d1
00012396 6B00 B34E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001239A 4E75                       		rts	
0001239C                            ; ===========================================================================
0001239C                            
0001239C                            Obj62_StopFire2:
0001239C 7608                       		moveq	#8,d3
0001239E 6100 0000                  		bsr.w	ObjHitWallRight
000123A2 4A41                       		tst.w	d1
000123A4 6B00 B340                  		bmi.w	DeleteObject
000123A8 4E75                       		rts	
000123AA                            ; ===========================================================================
000123AA                            ; ---------------------------------------------------------------------------
000123AA                            ; Sprite mappings - gargoyle head (LZ)
000123AA                            ; ---------------------------------------------------------------------------
000123AA                            Map_obj62:
000123AA                            	include "_maps\obj62.asm"
000123AA                            ; ---------------------------------------------------------------------------
000123AA                            ; Sprite mappings - gargoyle head (LZ)
000123AA                            ; ---------------------------------------------------------------------------
000123AA 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000123AE 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000123B2 03                         byte_12320:	dc.b 3
000123B3 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000123B8 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000123BD 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000123C2 01                         byte_12330:	dc.b 1
000123C3 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000123C8 01                         byte_12336:	dc.b 1
000123C9 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000123CE                            		even
000123CE                            		even
000123CE                            
000123CE                            ; ===========================================================================
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Object 63 - platforms	on a conveyor belt (LZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            
000123CE                            Obj63:					; XREF: Obj_Index
000123CE 7000                       		moveq	#0,d0
000123D0 1028 0024                  		move.b	$24(a0),d0
000123D4 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000123D8 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000123DC 3028 0030                  		move.w	$30(a0),d0
000123E0 0240 FF80                  		andi.w	#$FF80,d0
000123E4 3238 F700                  		move.w	($FFFFF700).w,d1
000123E8 0441 0080                  		subi.w	#$80,d1
000123EC 0241 FF80                  		andi.w	#$FF80,d1
000123F0 9041                       		sub.w	d1,d0
000123F2 0C40 0280                  		cmpi.w	#$280,d0
000123F6 6200                       		bhi.s	loc_1236A
000123F8                            
000123F8                            Obj63_Display:				; XREF: loc_1236A
000123F8 6000 B2B0                  		bra.w	DisplaySprite
000123FC                            ; ===========================================================================
000123FC                            
000123FC                            loc_1236A:				; XREF: Obj63
000123FC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012402 6600                       		bne.s	loc_12378
00012404 0C40 FF80                  		cmpi.w	#-$80,d0
00012408 64EE                       		bcc.s	Obj63_Display
0001240A                            
0001240A                            loc_12378:
0001240A 1028 002F                  		move.b	$2F(a0),d0
0001240E 6A00 B2D6                  		bpl.w	DeleteObject
00012412 0240 007F                  		andi.w	#$7F,d0
00012416 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001241A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012420 6000 B2C4                  		bra.w	DeleteObject
00012424                            ; ===========================================================================
00012424 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012426 0000                       		dc.w loc_124B2-Obj63_Index
00012428 0000                       		dc.w loc_124C2-Obj63_Index
0001242A 0000                       		dc.w loc_124DE-Obj63_Index
0001242C                            ; ===========================================================================
0001242C                            
0001242C                            Obj63_Main:				; XREF: Obj63_Index
0001242C 1028 0028                  		move.b	$28(a0),d0
00012430 6B00 0000                  		bmi.w	loc_12460
00012434 5428 0024                  		addq.b	#2,$24(a0)
00012438 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012440 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012446 0028 0004 0001             		ori.b	#4,1(a0)
0001244C 117C 0010 0019             		move.b	#$10,$19(a0)
00012452 117C 0004 0018             		move.b	#4,$18(a0)
00012458 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001245E 6600                       		bne.s	loc_123E2
00012460 5828 0024                  		addq.b	#4,$24(a0)
00012464 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001246A 117C 0001 0018             		move.b	#1,$18(a0)
00012470 6000 0000                  		bra.w	loc_124DE
00012474                            ; ===========================================================================
00012474                            
00012474                            loc_123E2:
00012474 117C 0004 001A             		move.b	#4,$1A(a0)
0001247A 7000                       		moveq	#0,d0
0001247C 1028 0028                  		move.b	$28(a0),d0
00012480 3200                       		move.w	d0,d1
00012482 E648                       		lsr.w	#3,d0
00012484 0240 001E                  		andi.w	#$1E,d0
00012488 45FA 0000                  		lea	Obj63_Data(pc),a2
0001248C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012490 315A 0038                  		move.w	(a2)+,$38(a0)
00012494 315A 0030                  		move.w	(a2)+,$30(a0)
00012498 214A 003C                  		move.l	a2,$3C(a0)
0001249C 0241 000F                  		andi.w	#$F,d1
000124A0 E549                       		lsl.w	#2,d1
000124A2 1141 0038                  		move.b	d1,$38(a0)
000124A6 117C 0004 003A             		move.b	#4,$3A(a0)
000124AC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000124B0 6700                       		beq.s	loc_1244C
000124B2 117C 0001 003B             		move.b	#1,$3B(a0)
000124B8 4428 003A                  		neg.b	$3A(a0)
000124BC 7200                       		moveq	#0,d1
000124BE 1228 0038                  		move.b	$38(a0),d1
000124C2 D228 003A                  		add.b	$3A(a0),d1
000124C6 B228 0039                  		cmp.b	$39(a0),d1
000124CA 6500                       		bcs.s	loc_12448
000124CC 1001                       		move.b	d1,d0
000124CE 7200                       		moveq	#0,d1
000124D0 4A00                       		tst.b	d0
000124D2 6A00                       		bpl.s	loc_12448
000124D4 1228 0039                  		move.b	$39(a0),d1
000124D8 5901                       		subq.b	#4,d1
000124DA                            
000124DA                            loc_12448:
000124DA 1141 0038                  		move.b	d1,$38(a0)
000124DE                            
000124DE                            loc_1244C:
000124DE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000124E4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000124EA 6100 0000                  		bsr.w	Obj63_ChangeDir
000124EE 6000 0000                  		bra.w	loc_124B2
000124F2                            ; ===========================================================================
000124F2                            
000124F2                            loc_12460:				; XREF: Obj63_Main
000124F2 1140 002F                  		move.b	d0,$2F(a0)
000124F6 0240 007F                  		andi.w	#$7F,d0
000124FA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000124FE 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012504 6600 B1E0                  		bne.w	DeleteObject
00012508 D040                       		add.w	d0,d0
0001250A 0240 001E                  		andi.w	#$1E,d0
0001250E 0640 0070                  		addi.w	#$70,d0
00012512 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012518 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001251C 321A                       		move.w	(a2)+,d1
0001251E 2248                       		movea.l	a0,a1
00012520 6000                       		bra.s	Obj63_MakePtfms
00012522                            ; ===========================================================================
00012522                            
00012522                            Obj63_Loop:
00012522 6100 B612                  		bsr.w	SingleObjLoad
00012526 6600                       		bne.s	loc_124AA
00012528                            
00012528                            Obj63_MakePtfms:			; XREF: loc_12460
00012528 12BC 0063                  		move.b	#$63,0(a1)
0001252C 335A 0008                  		move.w	(a2)+,8(a1)
00012530 335A 000C                  		move.w	(a2)+,$C(a1)
00012534 301A                       		move.w	(a2)+,d0
00012536 1340 0028                  		move.b	d0,$28(a1)
0001253A                            
0001253A                            loc_124AA:
0001253A 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001253E                            
0001253E 588F                       		addq.l	#4,sp
00012540 4E75                       		rts	
00012542                            ; ===========================================================================
00012542                            
00012542                            loc_124B2:				; XREF: Obj63_Index
00012542 7200                       		moveq	#0,d1
00012544 1228 0019                  		move.b	$19(a0),d1
00012548 4EB9 0000 7498             		jsr	(PlatformObject).l
0001254E 6000 0000                  		bra.w	sub_12502
00012552                            ; ===========================================================================
00012552                            
00012552                            loc_124C2:				; XREF: Obj63_Index
00012552 7200                       		moveq	#0,d1
00012554 1228 0019                  		move.b	$19(a0),d1
00012558 4EB9 0000 760C             		jsr	(ExitPlatform).l
0001255E 3F28 0008                  		move.w	8(a0),-(sp)
00012562 6100 0000                  		bsr.w	sub_12502
00012566 341F                       		move.w	(sp)+,d2
00012568 4EF9 0000 7B76             		jmp	(MvSonicOnPtfm2).l
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            loc_124DE:				; XREF: Obj63_Index
0001256E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012572 0240 0003                  		andi.w	#3,d0
00012576 6600                       		bne.s	loc_124FC
00012578 7201                       		moveq	#1,d1
0001257A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001257E 6700                       		beq.s	loc_124F2
00012580 4401                       		neg.b	d1
00012582                            
00012582                            loc_124F2:
00012582 D328 001A                  		add.b	d1,$1A(a0)
00012586 0228 0003 001A             		andi.b	#3,$1A(a0)
0001258C                            
0001258C                            loc_124FC:
0001258C 588F                       		addq.l	#4,sp
0001258E 6000 D1C4                  		bra.w	MarkObjGone
00012592                            
00012592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012592                            
00012592                            
00012592                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012592 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012596 6700                       		beq.s	loc_12520
00012598 4A28 003B                  		tst.b	$3B(a0)
0001259C 6600                       		bne.s	loc_12520
0001259E 117C 0001 003B             		move.b	#1,$3B(a0)
000125A4 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
000125AA 4428 003A                  		neg.b	$3A(a0)
000125AE 6000                       		bra.s	loc_12534
000125B0                            ; ===========================================================================
000125B0                            
000125B0                            loc_12520:
000125B0 3028 0008                  		move.w	8(a0),d0
000125B4 B068 0034                  		cmp.w	$34(a0),d0
000125B8 6600                       		bne.s	loc_1256A
000125BA 3028 000C                  		move.w	$C(a0),d0
000125BE B068 0036                  		cmp.w	$36(a0),d0
000125C2 6600                       		bne.s	loc_1256A
000125C4                            
000125C4                            loc_12534:
000125C4 7200                       		moveq	#0,d1
000125C6 1228 0038                  		move.b	$38(a0),d1
000125CA D228 003A                  		add.b	$3A(a0),d1
000125CE B228 0039                  		cmp.b	$39(a0),d1
000125D2 6500                       		bcs.s	loc_12552
000125D4 1001                       		move.b	d1,d0
000125D6 7200                       		moveq	#0,d1
000125D8 4A00                       		tst.b	d0
000125DA 6A00                       		bpl.s	loc_12552
000125DC 1228 0039                  		move.b	$39(a0),d1
000125E0 5901                       		subq.b	#4,d1
000125E2                            
000125E2                            loc_12552:
000125E2 1141 0038                  		move.b	d1,$38(a0)
000125E6 2268 003C                  		movea.l	$3C(a0),a1
000125EA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000125F0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000125F6 6100 0000                  		bsr.w	Obj63_ChangeDir
000125FA                            
000125FA                            loc_1256A:
000125FA 6100 B088                  		bsr.w	SpeedToPos
000125FE 4E75                       		rts	
00012600                            ; End of function sub_12502
00012600                            
00012600                            
00012600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012600                            
00012600                            
00012600                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012600 7000                       		moveq	#0,d0
00012602 343C FF00                  		move.w	#-$100,d2
00012606 3028 0008                  		move.w	8(a0),d0
0001260A 9068 0034                  		sub.w	$34(a0),d0
0001260E 6400                       		bcc.s	loc_12584
00012610 4440                       		neg.w	d0
00012612 4442                       		neg.w	d2
00012614                            
00012614                            loc_12584:
00012614 7200                       		moveq	#0,d1
00012616 363C FF00                  		move.w	#-$100,d3
0001261A 3228 000C                  		move.w	$C(a0),d1
0001261E 9268 0036                  		sub.w	$36(a0),d1
00012622 6400                       		bcc.s	loc_12598
00012624 4441                       		neg.w	d1
00012626 4443                       		neg.w	d3
00012628                            
00012628                            loc_12598:
00012628 B240                       		cmp.w	d0,d1
0001262A 6500                       		bcs.s	loc_125C2
0001262C 3028 0008                  		move.w	8(a0),d0
00012630 9068 0034                  		sub.w	$34(a0),d0
00012634 6700                       		beq.s	loc_125AE
00012636 48C0                       		ext.l	d0
00012638 E180                       		asl.l	#8,d0
0001263A 81C1                       		divs.w	d1,d0
0001263C 4440                       		neg.w	d0
0001263E                            
0001263E                            loc_125AE:
0001263E 3140 0010                  		move.w	d0,$10(a0)
00012642 3143 0012                  		move.w	d3,$12(a0)
00012646 4840                       		swap	d0
00012648 3140 000A                  		move.w	d0,$A(a0)
0001264C 4268 000E                  		clr.w	$E(a0)
00012650 4E75                       		rts	
00012652                            ; ===========================================================================
00012652                            
00012652                            loc_125C2:				; XREF: Obj63_ChangeDir
00012652 3228 000C                  		move.w	$C(a0),d1
00012656 9268 0036                  		sub.w	$36(a0),d1
0001265A 6700                       		beq.s	loc_125D4
0001265C 48C1                       		ext.l	d1
0001265E E181                       		asl.l	#8,d1
00012660 83C0                       		divs.w	d0,d1
00012662 4441                       		neg.w	d1
00012664                            
00012664                            loc_125D4:
00012664 3141 0012                  		move.w	d1,$12(a0)
00012668 3142 0010                  		move.w	d2,$10(a0)
0001266C 4841                       		swap	d1
0001266E 3141 000E                  		move.w	d1,$E(a0)
00012672 4268 000A                  		clr.w	$A(a0)
00012676 4E75                       		rts	
00012678                            ; End of function Obj63_ChangeDir
00012678                            
00012678                            ; ===========================================================================
00012678 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001267A 0000                       		dc.w word_12610-Obj63_Data
0001267C 0000                       		dc.w word_12628-Obj63_Data
0001267E 0000                       		dc.w word_1263C-Obj63_Data
00012680 0000                       		dc.w word_12650-Obj63_Data
00012682 0000                       		dc.w word_12668-Obj63_Data
00012684 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012694 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000126A0 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000126B0 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000126B8 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000126CC 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000126E0 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000126F8 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001270C                            
0001270C                            ; ---------------------------------------------------------------------------
0001270C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001270C                            ; ---------------------------------------------------------------------------
0001270C                            Map_obj63:
0001270C                            	include "_maps\obj63.asm"
0001270C                            ; ---------------------------------------------------------------------------
0001270C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001270C                            ; ---------------------------------------------------------------------------
0001270C 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012710 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012714 0000                       		dc.w byte_1269E-Map_obj63
00012716 01                         byte_12686:	dc.b 1
00012717 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001271C 01                         byte_1268C:	dc.b 1
0001271D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012722 01                         byte_12692:	dc.b 1
00012723 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012728 01                         byte_12698:	dc.b 1
00012729 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001272E 01                         byte_1269E:	dc.b 1
0001272F F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012734                            		even
00012734                            		even
00012734                            
00012734                            ; ===========================================================================
00012734                            ; ---------------------------------------------------------------------------
00012734                            ; Object 64 - bubbles (LZ)
00012734                            ; ---------------------------------------------------------------------------
00012734                            
00012734                            Obj64:					; XREF: Obj_Index
00012734 7000                       		moveq	#0,d0
00012736 1028 0024                  		move.b	$24(a0),d0
0001273A 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001273E 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012742                            ; ===========================================================================
00012742 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012744 0000                       		dc.w Obj64_Animate-Obj64_Index
00012746 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012748 0000                       		dc.w Obj64_Display2-Obj64_Index
0001274A 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001274C 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001274E                            ; ===========================================================================
0001274E                            
0001274E                            Obj64_Main:				; XREF: Obj64_Index
0001274E 5428 0024                  		addq.b	#2,$24(a0)
00012752 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001275A 317C 8348 0002             		move.w	#$8348,2(a0)
00012760 117C 0084 0001             		move.b	#$84,1(a0)
00012766 117C 0010 0019             		move.b	#$10,$19(a0)
0001276C 117C 0001 0018             		move.b	#1,$18(a0)
00012772 1028 0028                  		move.b	$28(a0),d0	; get object type
00012776 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012778 5028 0024                  		addq.b	#8,$24(a0)
0001277C 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012780 1140 0032                  		move.b	d0,$32(a0)
00012784 1140 0033                  		move.b	d0,$33(a0)
00012788 117C 0006 001C             		move.b	#6,$1C(a0)
0001278E 6000 0000                  		bra.w	Obj64_BblMaker
00012792                            ; ===========================================================================
00012792                            
00012792                            Obj64_Bubble:				; XREF: Obj64_Main
00012792 1140 001C                  		move.b	d0,$1C(a0)
00012796 3168 0008 0030             		move.w	8(a0),$30(a0)
0001279C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000127A2 4EB9 0000 28C6             		jsr	(RandomNumber).l
000127A8 1140 0026                  		move.b	d0,$26(a0)
000127AC                            
000127AC                            Obj64_Animate:				; XREF: Obj64_Index
000127AC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000127B2 4EB9 0000 A7A2             		jsr	AnimateSprite
000127B8 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000127BE 6600                       		bne.s	Obj64_ChkWater
000127C0 117C 0001 002E             		move.b	#1,$2E(a0)
000127C6                            
000127C6                            Obj64_ChkWater:				; XREF: Obj64_Index
000127C6 3038 F646                  		move.w	($FFFFF646).w,d0
000127CA B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000127CE 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000127D0                            
000127D0                            Obj64_Burst:				; XREF: Obj64_Wobble
000127D0 117C 0006 0024             		move.b	#6,$24(a0)
000127D6 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000127DA 6000 0000                  		bra.w	Obj64_Display2
000127DE                            ; ===========================================================================
000127DE                            
000127DE                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000127DE 1028 0026                  		move.b	$26(a0),d0
000127E2 5228 0026                  		addq.b	#1,$26(a0)
000127E6 0240 007F                  		andi.w	#$7F,d0
000127EA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000127F0 1031 0000                  		move.b	(a1,d0.w),d0
000127F4 4880                       		ext.w	d0
000127F6 D068 0030                  		add.w	$30(a0),d0
000127FA 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000127FE 4A28 002E                  		tst.b	$2E(a0)
00012802 6700                       		beq.s	Obj64_Display
00012804 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012808 6700                       		beq.s	Obj64_Display	; if not, branch
0001280A                            
0001280A 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001280E 303C 00AD                  		move.w	#$AD,d0
00012812 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012818 43F8 D000                  		lea	($FFFFD000).w,a1
0001281C 4269 0010                  		clr.w	$10(a1)
00012820 4269 0012                  		clr.w	$12(a1)
00012824 4269 0014                  		clr.w	$14(a1)
00012828 137C 0015 001C             		move.b	#$15,$1C(a1)
0001282E 337C 0023 003E             		move.w	#$23,$3E(a1)
00012834 137C 0000 003C             		move.b	#0,$3C(a1)
0001283A 08A9 0005 0022             		bclr	#5,$22(a1)
00012840 08A9 0004 0022             		bclr	#4,$22(a1)
00012846 0829 0002 0022             		btst	#2,$22(a1)
0001284C 6700 FF82                  		beq.w	Obj64_Burst
00012850 08A9 0002 0022             		bclr	#2,$22(a1)
00012856 137C 0013 0016             		move.b	#$13,$16(a1)
0001285C 137C 0009 0017             		move.b	#9,$17(a1)
00012862 5B69 000C                  		subq.w	#5,$C(a1)
00012866 6000 FF68                  		bra.w	Obj64_Burst
0001286A                            ; ===========================================================================
0001286A                            
0001286A                            Obj64_Display:				; XREF: Obj64_Wobble
0001286A 6100 AE18                  		bsr.w	SpeedToPos
0001286E 4A28 0001                  		tst.b	1(a0)
00012872 6A00                       		bpl.s	Obj64_Delete
00012874 4EFA AE34                  		jmp	DisplaySprite
00012878                            ; ===========================================================================
00012878                            
00012878                            Obj64_Delete:
00012878 4EFA AE6C                  		jmp	DeleteObject
0001287C                            ; ===========================================================================
0001287C                            
0001287C                            Obj64_Display2:				; XREF: Obj64_Index
0001287C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012882 4EB9 0000 A7A2             		jsr	AnimateSprite
00012888 4A28 0001                  		tst.b	1(a0)
0001288C 6A00                       		bpl.s	Obj64_Delete2
0001288E 4EFA AE1A                  		jmp	DisplaySprite
00012892                            ; ===========================================================================
00012892                            
00012892                            Obj64_Delete2:
00012892 4EFA AE52                  		jmp	DeleteObject
00012896                            ; ===========================================================================
00012896                            
00012896                            Obj64_Delete3:				; XREF: Obj64_Index
00012896 6000 AE4E                  		bra.w	DeleteObject
0001289A                            ; ===========================================================================
0001289A                            
0001289A                            Obj64_BblMaker:				; XREF: Obj64_Index
0001289A 4A68 0036                  		tst.w	$36(a0)
0001289E 6600                       		bne.s	loc_12874
000128A0 3038 F646                  		move.w	($FFFFF646).w,d0
000128A4 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000128A8 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000128AC 4A28 0001                  		tst.b	1(a0)
000128B0 6A00 0000                  		bpl.w	Obj64_ChkDel
000128B4 5368 0038                  		subq.w	#1,$38(a0)
000128B8 6A00 0000                  		bpl.w	loc_12914
000128BC 317C 0001 0036             		move.w	#1,$36(a0)
000128C2                            
000128C2                            loc_1283A:
000128C2 4EB9 0000 28C6             		jsr	(RandomNumber).l
000128C8 3200                       		move.w	d0,d1
000128CA 0240 0007                  		andi.w	#7,d0
000128CE 0C40 0006                  		cmpi.w	#6,d0
000128D2 64EE                       		bcc.s	loc_1283A
000128D4                            
000128D4 1140 0034                  		move.b	d0,$34(a0)
000128D8 0241 000C                  		andi.w	#$C,d1
000128DC 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000128E2 D2C1                       		adda.w	d1,a1
000128E4 2149 003C                  		move.l	a1,$3C(a0)
000128E8 5328 0032                  		subq.b	#1,$32(a0)
000128EC 6A00                       		bpl.s	loc_12872
000128EE 1168 0033 0032             		move.b	$33(a0),$32(a0)
000128F4 08E8 0007 0036             		bset	#7,$36(a0)
000128FA                            
000128FA                            loc_12872:
000128FA 6000                       		bra.s	loc_1287C
000128FC                            ; ===========================================================================
000128FC                            
000128FC                            loc_12874:				; XREF: Obj64_BblMaker
000128FC 5368 0038                  		subq.w	#1,$38(a0)
00012900 6A00 0000                  		bpl.w	loc_12914
00012904                            
00012904                            loc_1287C:
00012904 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001290A 0240 001F                  		andi.w	#$1F,d0
0001290E 3140 0038                  		move.w	d0,$38(a0)
00012912 6100 B222                  		bsr.w	SingleObjLoad
00012916 6600                       		bne.s	loc_128F8
00012918 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001291C 3368 0008 0008             		move.w	8(a0),8(a1)
00012922 4EB9 0000 28C6             		jsr	(RandomNumber).l
00012928 0240 000F                  		andi.w	#$F,d0
0001292C 5140                       		subq.w	#8,d0
0001292E D169 0008                  		add.w	d0,8(a1)
00012932 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012938 7000                       		moveq	#0,d0
0001293A 1028 0034                  		move.b	$34(a0),d0
0001293E 2468 003C                  		movea.l	$3C(a0),a2
00012942 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012948 0828 0007 0036             		btst	#7,$36(a0)
0001294E 6700                       		beq.s	loc_128F8
00012950 4EB9 0000 28C6             		jsr	(RandomNumber).l
00012956 0240 0003                  		andi.w	#3,d0
0001295A 6600                       		bne.s	loc_128E4
0001295C 08E8 0006 0036             		bset	#6,$36(a0)
00012962 6600                       		bne.s	loc_128F8
00012964 137C 0002 0028             		move.b	#2,$28(a1)
0001296A                            
0001296A                            loc_128E4:
0001296A 4A28 0034                  		tst.b	$34(a0)
0001296E 6600                       		bne.s	loc_128F8
00012970 08E8 0006 0036             		bset	#6,$36(a0)
00012976 6600                       		bne.s	loc_128F8
00012978 137C 0002 0028             		move.b	#2,$28(a1)
0001297E                            
0001297E                            loc_128F8:
0001297E 5328 0034                  		subq.b	#1,$34(a0)
00012982 6A00                       		bpl.s	loc_12914
00012984 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001298A 0240 007F                  		andi.w	#$7F,d0
0001298E 0640 0080                  		addi.w	#$80,d0
00012992 D168 0038                  		add.w	d0,$38(a0)
00012996 4268 0036                  		clr.w	$36(a0)
0001299A                            
0001299A                            loc_12914:
0001299A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000129A0 4EB9 0000 A7A2             		jsr	AnimateSprite
000129A6                            
000129A6                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000129A6 3028 0008                  		move.w	8(a0),d0
000129AA 0240 FF80                  		andi.w	#$FF80,d0
000129AE 3238 F700                  		move.w	($FFFFF700).w,d1
000129B2 0441 0080                  		subi.w	#$80,d1
000129B6 0241 FF80                  		andi.w	#$FF80,d1
000129BA 9041                       		sub.w	d1,d0
000129BC 0C40 0280                  		cmpi.w	#$280,d0
000129C0 6200 AD24                  		bhi.w	DeleteObject
000129C4 3038 F646                  		move.w	($FFFFF646).w,d0
000129C8 B068 000C                  		cmp.w	$C(a0),d0
000129CC 6500 ACDC                  		bcs.w	DisplaySprite
000129D0 4E75                       		rts	
000129D2                            ; ===========================================================================
000129D2                            ; bubble production sequence
000129D2                            
000129D2                            ; 0 = small bubble, 1 =	large bubble
000129D2                            
000129D2 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000129E4                            
000129E4                            ; ===========================================================================
000129E4                            
000129E4                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000129E4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000129E8 6B00                       		bmi.s	loc_12998
000129EA 43F8 D000                  		lea	($FFFFD000).w,a1
000129EE 3029 0008                  		move.w	8(a1),d0
000129F2 3228 0008                  		move.w	8(a0),d1
000129F6 0441 0010                  		subi.w	#$10,d1
000129FA B240                       		cmp.w	d0,d1
000129FC 6400                       		bcc.s	loc_12998
000129FE 0641 0020                  		addi.w	#$20,d1
00012A02 B240                       		cmp.w	d0,d1
00012A04 6500                       		bcs.s	loc_12998
00012A06 3029 000C                  		move.w	$C(a1),d0
00012A0A 3228 000C                  		move.w	$C(a0),d1
00012A0E B240                       		cmp.w	d0,d1
00012A10 6400                       		bcc.s	loc_12998
00012A12 0641 0010                  		addi.w	#$10,d1
00012A16 B240                       		cmp.w	d0,d1
00012A18 6500                       		bcs.s	loc_12998
00012A1A 7001                       		moveq	#1,d0
00012A1C 4E75                       		rts	
00012A1E                            ; ===========================================================================
00012A1E                            
00012A1E                            loc_12998:
00012A1E 7000                       		moveq	#0,d0
00012A20 4E75                       		rts	
00012A22                            ; ===========================================================================
00012A22                            Ani_obj64:
00012A22                            	include "_anim\obj64.asm"
00012A22                            ; ---------------------------------------------------------------------------
00012A22                            ; Animation script - bubbles (LZ)
00012A22                            ; ---------------------------------------------------------------------------
00012A22 0000                       		dc.w byte_129AA-Ani_obj64
00012A24 0000                       		dc.w byte_129B0-Ani_obj64
00012A26 0000                       		dc.w byte_129B6-Ani_obj64
00012A28 0000                       		dc.w byte_129BE-Ani_obj64
00012A2A 0000                       		dc.w byte_129BE-Ani_obj64
00012A2C 0000                       		dc.w byte_129C0-Ani_obj64
00012A2E 0000                       		dc.w byte_129C6-Ani_obj64
00012A30 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012A36 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012A3C 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012A44 04FC                       byte_129BE:	dc.b 4,	$FC
00012A46 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012A4C 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012A52 00                         		even
00012A52 00                         		even
00012A52                            
00012A52                            ; ---------------------------------------------------------------------------
00012A52                            ; Sprite mappings - bubbles (LZ)
00012A52                            ; ---------------------------------------------------------------------------
00012A52                            Map_obj64:
00012A52                            	include "_maps\obj64.asm"
00012A52                            ; ---------------------------------------------------------------------------
00012A52                            ; Sprite mappings - bubbles (LZ)
00012A52                            ; ---------------------------------------------------------------------------
00012A52 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012A56 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012A5A 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012A5E 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012A62 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012A66 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012A6A 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012A6E 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012A72 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012A76 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012A7A 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012A7E 0000                       		dc.w byte_12A9C-Map_obj64
00012A80 01                         byte_129FA:	dc.b 1
00012A81 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012A86 01                         byte_12A00:	dc.b 1
00012A87 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012A8C 01                         byte_12A06:	dc.b 1
00012A8D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012A92 01                         byte_12A0C:	dc.b 1
00012A93 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012A98 01                         byte_12A12:	dc.b 1
00012A99 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012A9E 01                         byte_12A18:	dc.b 1
00012A9F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012AA4 01                         byte_12A1E:	dc.b 1
00012AA5 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012AAA 04                         byte_12A24:	dc.b 4
00012AAB F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012AB0 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012AB5 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012ABA 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012ABF 04                         byte_12A39:	dc.b 4
00012AC0 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012AC5 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012ACA 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012ACF 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012AD4 01                         byte_12A4E:	dc.b 1
00012AD5 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012ADA 01                         byte_12A54:	dc.b 1
00012ADB F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012AE0 01                         byte_12A5A:	dc.b 1
00012AE1 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012AE6 01                         byte_12A60:	dc.b 1
00012AE7 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012AEC 01                         byte_12A66:	dc.b 1
00012AED F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012AF2 01                         byte_12A6C:	dc.b 1
00012AF3 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012AF8 01                         byte_12A72:	dc.b 1
00012AF9 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012AFE 01                         byte_12A78:	dc.b 1
00012AFF F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012B04 01                         byte_12A7E:	dc.b 1
00012B05 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012B0A 01                         byte_12A84:	dc.b 1
00012B0B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012B10 01                         byte_12A8A:	dc.b 1
00012B11 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012B16 01                         byte_12A90:	dc.b 1
00012B17 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012B1C 01                         byte_12A96:	dc.b 1
00012B1D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012B22 00                         byte_12A9C:	dc.b 0
00012B24 00                         		even
00012B24 00                         		even
00012B24                            
00012B24                            ; ===========================================================================
00012B24                            ; ---------------------------------------------------------------------------
00012B24                            ; Object 65 - waterfalls (LZ)
00012B24                            ; ---------------------------------------------------------------------------
00012B24                            
00012B24                            Obj65:					; XREF: Obj_Index
00012B24 7000                       		moveq	#0,d0
00012B26 1028 0024                  		move.b	$24(a0),d0
00012B2A 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012B2E 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012B32                            ; ===========================================================================
00012B32 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012B34 0000                       		dc.w Obj65_Animate-Obj65_Index
00012B36 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012B38 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012B3A 0000                       		dc.w loc_12B36-Obj65_Index
00012B3C                            ; ===========================================================================
00012B3C                            
00012B3C                            Obj65_Main:				; XREF: Obj65_Index
00012B3C 5828 0024                  		addq.b	#4,$24(a0)
00012B40 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012B48 317C 4259 0002             		move.w	#$4259,2(a0)
00012B4E 0028 0004 0001             		ori.b	#4,1(a0)
00012B54 117C 0018 0019             		move.b	#$18,$19(a0)
00012B5A 117C 0001 0018             		move.b	#1,$18(a0)
00012B60 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B64 6A00                       		bpl.s	loc_12AE6
00012B66 08E8 0007 0002             		bset	#7,2(a0)
00012B6C                            
00012B6C                            loc_12AE6:
00012B6C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012B70 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012B74 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012B78 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012B7A 4228 0018                  		clr.b	$18(a0)
00012B7E 5528 0024                  		subq.b	#2,$24(a0)
00012B82 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012B88 6700                       		beq.s	loc_12B0A	; if not, branch
00012B8A 117C 0006 0024             		move.b	#6,$24(a0)
00012B90                            
00012B90                            loc_12B0A:
00012B90 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012B96 6700                       		beq.s	Obj65_Animate	; if not, branch
00012B98 117C 0008 0024             		move.b	#8,$24(a0)
00012B9E                            
00012B9E                            Obj65_Animate:				; XREF: Obj65_Index
00012B9E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012BA4 4EB9 0000 A7A2             		jsr	AnimateSprite
00012BAA                            
00012BAA                            Obj65_ChkDel:				; XREF: Obj65_Index
00012BAA 6000 CBA8                  		bra.w	MarkObjGone
00012BAE                            ; ===========================================================================
00012BAE                            
00012BAE                            Obj65_FixHeight:			; XREF: Obj65_Index
00012BAE 3038 F646                  		move.w	($FFFFF646).w,d0
00012BB2 0440 0010                  		subi.w	#$10,d0
00012BB6 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012BBA 60E2                       		bra.s	Obj65_Animate
00012BBC                            ; ===========================================================================
00012BBC                            
00012BBC                            loc_12B36:				; XREF: Obj65_Index
00012BBC 08A8 0007 0002             		bclr	#7,2(a0)
00012BC2 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012BC8 6600                       		bne.s	Obj65_Animate2
00012BCA 08E8 0007 0002             		bset	#7,2(a0)
00012BD0                            
00012BD0                            Obj65_Animate2:
00012BD0 60CC                       		bra.s	Obj65_Animate
00012BD2                            ; ===========================================================================
00012BD2                            Ani_obj65:
00012BD2                            	include "_anim\obj65.asm"
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2                            ; Animation script - waterfall (LZ)
00012BD2                            ; ---------------------------------------------------------------------------
00012BD2 0000                       		dc.w byte_12B4E-Ani_obj65
00012BD4 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012BDA 00                         		even
00012BDA 00                         		even
00012BDA                            
00012BDA                            ; ---------------------------------------------------------------------------
00012BDA                            ; Sprite mappings - waterfalls (LZ)
00012BDA                            ; ---------------------------------------------------------------------------
00012BDA                            Map_obj65:
00012BDA                            	include "_maps\obj65.asm"
00012BDA                            ; ---------------------------------------------------------------------------
00012BDA                            ; Sprite mappings - waterfalls (LZ)
00012BDA                            ; ---------------------------------------------------------------------------
00012BDA 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012BDE 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012BE2 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012BE6 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012BEA 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012BEE 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012BF2 01                         byte_12B6C:	dc.b 1
00012BF3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012BF8 02                         byte_12B72:	dc.b 2
00012BF9 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012BFE 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012C03 02                         byte_12B7D:	dc.b 2
00012C04 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C09 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C0E 01                         byte_12B88:	dc.b 1
00012C0F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012C14 02                         byte_12B8E:	dc.b 2
00012C15 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C1A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C1F 01                         byte_12B99:	dc.b 1
00012C20 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012C25 01                         byte_12B9F:	dc.b 1
00012C26 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012C2B 01                         byte_12BA5:	dc.b 1
00012C2C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012C31 02                         byte_12BAB:	dc.b 2
00012C32 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012C37 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012C3C 02                         byte_12BB6:	dc.b 2
00012C3D F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012C42 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012C47 02                         byte_12BC1:	dc.b 2
00012C48 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012C4D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012C52 02                         byte_12BCC:	dc.b 2
00012C53 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012C58 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012C5E 00                         		even
00012C5E 00                         		even
00012C5E                            
00012C5E                            ; ===========================================================================
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            ; Object 01 - Sonic
00012C5E                            ; ---------------------------------------------------------------------------
00012C5E                            
00012C5E                            Obj01:					; XREF: Obj_Index
00012C5E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012C62 6700                       		beq.s	Obj01_Normal	; if not, branch
00012C64 4EF9 0000 0000             		jmp	DebugMode
00012C6A                            ; ===========================================================================
00012C6A                            
00012C6A                            Obj01_Normal:
00012C6A 7000                       		moveq	#0,d0
00012C6C 1028 0024                  		move.b	$24(a0),d0
00012C70 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012C74 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012C78                            ; ===========================================================================
00012C78 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012C7A 0000                       		dc.w Obj01_Control-Obj01_Index
00012C7C 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012C7E 0000                       		dc.w Obj01_Death-Obj01_Index
00012C80 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012C82                            ; ===========================================================================
00012C82                            
00012C82                            Obj01_Main:				; XREF: Obj01_Index
00012C82 5428 0024                  		addq.b	#2,$24(a0)
00012C86 117C 0013 0016             		move.b	#$13,$16(a0)
00012C8C 117C 0009 0017             		move.b	#9,$17(a0)
00012C92 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012C9A 317C 0780 0002             		move.w	#$780,2(a0)
00012CA0 117C 0002 0018             		move.b	#2,$18(a0)
00012CA6 117C 0018 0019             		move.b	#$18,$19(a0)
00012CAC 117C 0004 0001             		move.b	#4,1(a0)
00012CB2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012CB8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012CBE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012CC4                            
00012CC4                            Obj01_Control:				; XREF: Obj01_Index
00012CC4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012CC8 6700                       		beq.s	loc_12C58	; if not, branch
00012CCA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012CD0 6700                       		beq.s	loc_12C58	; if not, branch
00012CD2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012CD8 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012CDC 4E75                       		rts	
00012CDE                            ; ===========================================================================
00012CDE                            
00012CDE                            loc_12C58:
00012CDE 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012CE2 6600                       		bne.s	loc_12C64	; if yes, branch
00012CE4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012CEA                            
00012CEA                            loc_12C64:
00012CEA 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012CF0 6600                       		bne.s	loc_12C7E	; if yes, branch
00012CF2 7000                       		moveq	#0,d0
00012CF4 1028 0022                  		move.b	$22(a0),d0
00012CF8 0240 0006                  		andi.w	#6,d0
00012CFC 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012D00 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012D04                            
00012D04                            loc_12C7E:
00012D04 6100                       		bsr.s	Sonic_Display
00012D06 6100 0000                  		bsr.w	Sonic_RecordPos
00012D0A 6100 0000                  		bsr.w	Sonic_Water
00012D0E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012D14 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012D1A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012D1E 6700                       		beq.s	loc_12CA6
00012D20 4A28 001C                  		tst.b	$1C(a0)
00012D24 6600                       		bne.s	loc_12CA6
00012D26 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012D2C                            
00012D2C                            loc_12CA6:
00012D2C 6100 0000                  		bsr.w	Sonic_Animate
00012D30 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012D34 6B00                       		bmi.s	loc_12CB6
00012D36 4EB9 0000 0000             		jsr	TouchResponse
00012D3C                            
00012D3C                            loc_12CB6:
00012D3C 6100 0000                  		bsr.w	Sonic_Loops
00012D40 6100 0000                  		bsr.w	LoadSonicDynPLC
00012D44 4E75                       		rts	
00012D46                            ; ===========================================================================
00012D46 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012D48 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012D4A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012D4C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012D4E                            ; ---------------------------------------------------------------------------
00012D4E                            ; Music	to play	after invincibility wears off
00012D4E                            ; ---------------------------------------------------------------------------
00012D4E                            MusicList2:	incbin	misc\muslist2.bin
00012D54                            		even
00012D54                            ; ===========================================================================
00012D54                            
00012D54                            Sonic_Display:				; XREF: loc_12C7E
00012D54 3028 0030                  		move.w	$30(a0),d0
00012D58 6700                       		beq.s	Obj01_Display
00012D5A 5368 0030                  		subq.w	#1,$30(a0)
00012D5E E648                       		lsr.w	#3,d0
00012D60 6400                       		bcc.s	Obj01_ChkInvin
00012D62                            
00012D62                            Obj01_Display:
00012D62 4EBA A946                  		jsr	DisplaySprite
00012D66                            
00012D66                            Obj01_ChkInvin:
00012D66 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012D6A 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012D6C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012D70 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012D72 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012D76 6600                       		bne.s	Obj01_ChkShoes
00012D78 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012D7C 6600                       		bne.s	Obj01_RmvInvin
00012D7E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012D84 6500                       		bcs.s	Obj01_RmvInvin
00012D86 7000                       		moveq	#0,d0
00012D88 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012D8C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012D92 6600                       		bne.s	Obj01_PlayMusic
00012D94 7005                       		moveq	#5,d0		; play SBZ music
00012D96                            
00012D96                            Obj01_PlayMusic:
00012D96 43F9 0001 2D4E             		lea	(MusicList2).l,a1
00012D9C 1031 0000                  		move.b	(a1,d0.w),d0
00012DA0 4EB9 0000 125C             		jsr	(PlaySound).l	; play normal music
00012DA6                            
00012DA6                            Obj01_RmvInvin:
00012DA6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012DAC                            
00012DAC                            Obj01_ChkShoes:
00012DAC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012DB0 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012DB2 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012DB6 6700                       		beq.s	Obj01_ExitChk
00012DB8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012DBC 6600                       		bne.s	Obj01_ExitChk
00012DBE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012DC4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012DCA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012DD0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012DD6 303C 00E3                  		move.w	#$E3,d0
00012DDA 4EF9 0000 125C             		jmp	(PlaySound).l	; run music at normal speed
00012DE0                            ; ===========================================================================
00012DE0                            
00012DE0                            Obj01_ExitChk:
00012DE0 4E75                       		rts	
00012DE2                            
00012DE2                            ; ---------------------------------------------------------------------------
00012DE2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012DE2                            ; ---------------------------------------------------------------------------
00012DE2                            
00012DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DE2                            
00012DE2                            
00012DE2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012DE2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012DE6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012DEA 43F1 0000                  		lea	(a1,d0.w),a1
00012DEE 32E8 0008                  		move.w	8(a0),(a1)+
00012DF2 32E8 000C                  		move.w	$C(a0),(a1)+
00012DF6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012DFA 4E75                       		rts	
00012DFC                            ; End of function Sonic_RecordPos
00012DFC                            
00012DFC                            ; ---------------------------------------------------------------------------
00012DFC                            ; Subroutine for Sonic when he's underwater
00012DFC                            ; ---------------------------------------------------------------------------
00012DFC                            
00012DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DFC                            
00012DFC                            
00012DFC                            Sonic_Water:				; XREF: loc_12C7E
00012DFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012E02 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012E04                            
00012E04                            locret_12D80:
00012E04 4E75                       		rts	
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            Obj01_InWater:
00012E06 3038 F646                  		move.w	($FFFFF646).w,d0
00012E0A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012E0E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012E10 08E8 0006 0022             		bset	#6,$22(a0)
00012E16 66EC                       		bne.s	locret_12D80
00012E18 6100 0000                  		bsr.w	ResumeMusic
00012E1C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012E22 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012E28 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012E2E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012E34 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012E3A E0E8 0010                  		asr	$10(a0)
00012E3E E0E8 0012                  		asr	$12(a0)
00012E42 E0E8 0012                  		asr	$12(a0)
00012E46 67BC                       		beq.s	locret_12D80
00012E48 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012E4E 303C 00AA                  		move.w	#$AA,d0
00012E52 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play splash sound
00012E58                            ; ===========================================================================
00012E58                            
00012E58                            Obj01_OutWater:
00012E58 08A8 0006 0022             		bclr	#6,$22(a0)
00012E5E 67A4                       		beq.s	locret_12D80
00012E60 6100 0000                  		bsr.w	ResumeMusic
00012E64 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012E6A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012E70 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012E76 E1E8 0012                  		asl	$12(a0)
00012E7A 6700 FF88                  		beq.w	locret_12D80
00012E7E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012E84 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012E8A 6E00                       		bgt.s	loc_12E0E
00012E8C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012E92                            
00012E92                            loc_12E0E:
00012E92 303C 00AA                  		move.w	#$AA,d0
00012E96 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play splash sound
00012E9C                            ; End of function Sonic_Water
00012E9C                            
00012E9C                            ; ===========================================================================
00012E9C                            ; ---------------------------------------------------------------------------
00012E9C                            ; Modes	for controlling	Sonic
00012E9C                            ; ---------------------------------------------------------------------------
00012E9C                            
00012E9C                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012E9C 6100 0000                  		bsr.w	Sonic_Jump
00012EA0 6100 0000                  		bsr.w	Sonic_SlopeResist
00012EA4 6100 0000                  		bsr.w	Sonic_Move
00012EA8 6100 0000                  		bsr.w	Sonic_Roll
00012EAC 6100 0000                  		bsr.w	Sonic_LevelBound
00012EB0 4EBA A7D2                  		jsr	SpeedToPos
00012EB4 6100 0000                  		bsr.w	Sonic_AnglePos
00012EB8 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012EBC 4E75                       		rts	
00012EBE                            ; ===========================================================================
00012EBE                            
00012EBE                            Obj01_MdJump:				; XREF: Obj01_Modes
00012EBE 6100 0000                  		bsr.w	Sonic_JumpHeight
00012EC2 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012EC6 6100 0000                  		bsr.w	Sonic_LevelBound
00012ECA 4EBA A78C                  		jsr	ObjectFall
00012ECE 0828 0006 0022             		btst	#6,$22(a0)
00012ED4 6700                       		beq.s	loc_12E5C
00012ED6 0468 0028 0012             		subi.w	#$28,$12(a0)
00012EDC                            
00012EDC                            loc_12E5C:
00012EDC 6100 0000                  		bsr.w	Sonic_JumpAngle
00012EE0 6100 0000                  		bsr.w	Sonic_Floor
00012EE4 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
00012EEA 6600                       		bne.s	@addtimer
00012EEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012EF2 6300                       		bls.s	@done
00012EF4 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00012EFA 6700                       		beq.s	@done
00012EFC 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00012F02 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00012F08 6000                       		bra.s	@done
00012F0A                            
00012F0A                            
00012F0A                            	@addtimer:
00012F0A 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00012F0E 4A38 D012                  		tst.b	($FFFFD012).w
00012F12 6A00                       		bpl.s	@done
00012F14 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00012F18                            
00012F18                            	@done:
00012F18 4E75                       		rts	
00012F1A                            ; ===========================================================================
00012F1A                            
00012F1A                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012F1A 6100 0000                  		bsr.w	Sonic_Jump
00012F1E 6100 0000                  		bsr.w	Sonic_RollRepel
00012F22 6100 0000                  		bsr.w	Sonic_RollSpeed
00012F26 6100 0000                  		bsr.w	Sonic_LevelBound
00012F2A 4EBA A758                  		jsr	SpeedToPos
00012F2E 6100 0000                  		bsr.w	Sonic_AnglePos
00012F32 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012F36 4E75                       		rts	
00012F38                            ; ===========================================================================
00012F38                            
00012F38                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012F38 6100 0000                  		bsr.w	Sonic_JumpHeight
00012F3C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012F40 6100 0000                  		bsr.w	Sonic_LevelBound
00012F44 4EBA A712                  		jsr	ObjectFall
00012F48 0828 0006 0022             		btst	#6,$22(a0)
00012F4E 6700                       		beq.s	loc_12EA6
00012F50 0468 0028 0012             		subi.w	#$28,$12(a0)
00012F56                            
00012F56                            loc_12EA6:
00012F56 6100 0000                  		bsr.w	Sonic_JumpAngle
00012F5A 6100 0000                  		bsr.w	Sonic_Floor
00012F5E 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
00012F64 6600                       		bne.s	@addtimer
00012F66 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00012F6C 6300                       		bls.s	@done
00012F6E 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00012F74 6700                       		beq.s	@done
00012F76 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00012F7C 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00012F82 6000                       		bra.s	@done
00012F84                            
00012F84                            
00012F84                            	@addtimer:
00012F84 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00012F88 4A38 D012                  		tst.b	($FFFFD012).w
00012F8C 6A00                       		bpl.s	@done
00012F8E 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00012F92                            
00012F92                            	@done:
00012F92 4E75                       		rts	
00012F94                            ; ---------------------------------------------------------------------------
00012F94                            ; Subroutine to	make Sonic walk/run
00012F94                            ; ---------------------------------------------------------------------------
00012F94                            
00012F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F94                            
00012F94                            
00012F94                            Sonic_Move:				; XREF: Obj01_MdNormal
00012F94 3C38 F760                  		move.w	($FFFFF760).w,d6
00012F98 3A38 F762                  		move.w	($FFFFF762).w,d5
00012F9C 3838 F764                  		move.w	($FFFFF764).w,d4
00012FA0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00012FA4 6600 0000                  		bne.w	loc_12FEE
00012FA8 4A68 003E                  		tst.w	$3E(a0)
00012FAC 6600 0000                  		bne.w	Obj01_ResetScr
00012FB0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00012FB6 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00012FB8 6100 0000                  		bsr.w	Sonic_MoveLeft
00012FBC                            
00012FBC                            Obj01_NotLeft:
00012FBC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00012FC2 6700                       		beq.s	Obj01_NotRight	; if not, branch
00012FC4 6100 0000                  		bsr.w	Sonic_MoveRight
00012FC8                            
00012FC8                            Obj01_NotRight:
00012FC8 1028 0026                  		move.b	$26(a0),d0
00012FCC 0600 0020                  		addi.b	#$20,d0
00012FD0 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00012FD4 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012FD8 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00012FDC 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012FE0 08A8 0005 0022             		bclr	#5,$22(a0)
00012FE6 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00012FEC 0828 0003 0022             		btst	#3,$22(a0)
00012FF2 6700                       		beq.s	Sonic_Balance
00012FF4 7000                       		moveq	#0,d0
00012FF6 1028 003D                  		move.b	$3D(a0),d0
00012FFA ED48                       		lsl.w	#6,d0
00012FFC 43F8 D000                  		lea	($FFFFD000).w,a1
00013000 43F1 0000                  		lea	(a1,d0.w),a1
00013004 4A29 0022                  		tst.b	$22(a1)
00013008 6B00                       		bmi.s	Sonic_LookUp
0001300A 7200                       		moveq	#0,d1
0001300C 1229 0019                  		move.b	$19(a1),d1
00013010 3401                       		move.w	d1,d2
00013012 D442                       		add.w	d2,d2
00013014 5942                       		subq.w	#4,d2
00013016 D268 0008                  		add.w	8(a0),d1
0001301A 9269 0008                  		sub.w	8(a1),d1
0001301E 0C41 0004                  		cmpi.w	#4,d1
00013022 6D00                       		blt.s	loc_12F6A
00013024 B242                       		cmp.w	d2,d1
00013026 6C00                       		bge.s	loc_12F5A
00013028 6000                       		bra.s	Sonic_LookUp
0001302A                            ; ===========================================================================
0001302A                            
0001302A                            Sonic_Balance:
0001302A 4EB9 0000 0000             		jsr	ObjHitFloor
00013030 0C41 000C                  		cmpi.w	#$C,d1
00013034 6D00                       		blt.s	Sonic_LookUp
00013036 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001303C 6600                       		bne.s	loc_12F62
0001303E                            
0001303E                            loc_12F5A:
0001303E 08A8 0000 0022             		bclr	#0,$22(a0)
00013044 6000                       		bra.s	loc_12F70
00013046                            ; ===========================================================================
00013046                            
00013046                            loc_12F62:
00013046 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001304C 6600                       		bne.s	Sonic_LookUp
0001304E                            
0001304E                            loc_12F6A:
0001304E 08E8 0000 0022             		bset	#0,$22(a0)
00013054                            
00013054                            loc_12F70:
00013054 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001305A 6000                       		bra.s	Obj01_ResetScr
0001305C                            ; ===========================================================================
0001305C                            
0001305C                            Sonic_LookUp:
0001305C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013062 6700                       		beq.s	Sonic_Duck	; if not, branch
00013064 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001306A 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013070 6700                       		beq.s	loc_12FC2
00013072 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013076 6000                       		bra.s	loc_12FC2
00013078                            ; ===========================================================================
00013078                            
00013078                            Sonic_Duck:
00013078 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001307E 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013080 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013086 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001308C 6700                       		beq.s	loc_12FC2
0001308E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013092 6000                       		bra.s	loc_12FC2
00013094                            ; ===========================================================================
00013094                            
00013094                            Obj01_ResetScr:
00013094 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001309A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001309C 6400                       		bcc.s	loc_12FBE
0001309E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000130A2                            
000130A2                            loc_12FBE:
000130A2 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000130A6                            
000130A6                            loc_12FC2:
000130A6 1038 F602                  		move.b	($FFFFF602).w,d0
000130AA 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000130AE 6600                       		bne.s	loc_12FEE	; if yes, branch
000130B0 3028 0014                  		move.w	$14(a0),d0
000130B4 6700                       		beq.s	loc_12FEE
000130B6 6B00                       		bmi.s	loc_12FE2
000130B8 9045                       		sub.w	d5,d0
000130BA 6400                       		bcc.s	loc_12FDC
000130BC 303C 0000                  		move.w	#0,d0
000130C0                            
000130C0                            loc_12FDC:
000130C0 3140 0014                  		move.w	d0,$14(a0)
000130C4 6000                       		bra.s	loc_12FEE
000130C6                            ; ===========================================================================
000130C6                            
000130C6                            loc_12FE2:
000130C6 D045                       		add.w	d5,d0
000130C8 6400                       		bcc.s	loc_12FEA
000130CA 303C 0000                  		move.w	#0,d0
000130CE                            
000130CE                            loc_12FEA:
000130CE 3140 0014                  		move.w	d0,$14(a0)
000130D2                            
000130D2                            loc_12FEE:
000130D2 1028 0026                  		move.b	$26(a0),d0
000130D6 4EB9 0000 28EC             		jsr	(CalcSine).l
000130DC C3E8 0014                  		muls.w	$14(a0),d1
000130E0 E081                       		asr.l	#8,d1
000130E2 3141 0010                  		move.w	d1,$10(a0)
000130E6 C1E8 0014                  		muls.w	$14(a0),d0
000130EA E080                       		asr.l	#8,d0
000130EC 3140 0012                  		move.w	d0,$12(a0)
000130F0                            
000130F0                            loc_1300C:
000130F0 1028 0026                  		move.b	$26(a0),d0
000130F4 0600 0040                  		addi.b	#$40,d0
000130F8 6B00                       		bmi.s	locret_1307C
000130FA 123C 0040                  		move.b	#$40,d1
000130FE 4A68 0014                  		tst.w	$14(a0)
00013102 6700                       		beq.s	locret_1307C
00013104 6B00                       		bmi.s	loc_13024
00013106 4441                       		neg.w	d1
00013108                            
00013108                            loc_13024:
00013108 1028 0026                  		move.b	$26(a0),d0
0001310C D001                       		add.b	d1,d0
0001310E 3F00                       		move.w	d0,-(sp)
00013110 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013114 301F                       		move.w	(sp)+,d0
00013116 4A41                       		tst.w	d1
00013118 6A00                       		bpl.s	locret_1307C
0001311A E141                       		asl.w	#8,d1
0001311C 0600 0020                  		addi.b	#$20,d0
00013120 0200 00C0                  		andi.b	#$C0,d0
00013124 6700                       		beq.s	loc_13078
00013126 0C00 0040                  		cmpi.b	#$40,d0
0001312A 6700                       		beq.s	loc_13066
0001312C 0C00 0080                  		cmpi.b	#$80,d0
00013130 6700                       		beq.s	loc_13060
00013132 D368 0010                  		add.w	d1,$10(a0)
00013136 08E8 0005 0022             		bset	#5,$22(a0)
0001313C 317C 0000 0014             		move.w	#0,$14(a0)
00013142 4E75                       		rts	
00013144                            ; ===========================================================================
00013144                            
00013144                            loc_13060:
00013144 9368 0012                  		sub.w	d1,$12(a0)
00013148 4E75                       		rts	
0001314A                            ; ===========================================================================
0001314A                            
0001314A                            loc_13066:
0001314A 9368 0010                  		sub.w	d1,$10(a0)
0001314E 08E8 0005 0022             		bset	#5,$22(a0)
00013154 317C 0000 0014             		move.w	#0,$14(a0)
0001315A 4E75                       		rts	
0001315C                            ; ===========================================================================
0001315C                            
0001315C                            loc_13078:
0001315C D368 0012                  		add.w	d1,$12(a0)
00013160                            
00013160                            locret_1307C:
00013160 4E75                       		rts	
00013162                            ; End of function Sonic_Move
00013162                            
00013162                            
00013162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013162                            
00013162                            
00013162                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013162 3028 0014                  		move.w	$14(a0),d0
00013166 6700                       		beq.s	loc_13086
00013168 6A00                       		bpl.s	loc_130B2
0001316A                            
0001316A                            loc_13086:
0001316A 08E8 0000 0022             		bset	#0,$22(a0)
00013170 6600                       		bne.s	loc_1309A
00013172 08A8 0005 0022             		bclr	#5,$22(a0)
00013178 117C 0001 001D             		move.b	#1,$1D(a0)
0001317E                            
0001317E                            loc_1309A:
0001317E 9045                       		sub.w	d5,d0
00013180 3206                       		move.w	d6,d1
00013182 4441                       		neg.w	d1
00013184 B041                       		cmp.w	d1,d0
00013186 6E00                       		bgt.s	loc_130A6
00013188 3001                       		move.w	d1,d0
0001318A                            
0001318A                            loc_130A6:
0001318A 3140 0014                  		move.w	d0,$14(a0)
0001318E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013194 4E75                       		rts	
00013196                            ; ===========================================================================
00013196                            
00013196                            loc_130B2:				; XREF: Sonic_MoveLeft
00013196 9044                       		sub.w	d4,d0
00013198 6400                       		bcc.s	loc_130BA
0001319A 303C FF80                  		move.w	#-$80,d0
0001319E                            
0001319E                            loc_130BA:
0001319E 3140 0014                  		move.w	d0,$14(a0)
000131A2 1028 0026                  		move.b	$26(a0),d0
000131A6 0600 0020                  		addi.b	#$20,d0
000131AA 0200 00C0                  		andi.b	#$C0,d0
000131AE 6600                       		bne.s	locret_130E8
000131B0 0C40 0400                  		cmpi.w	#$400,d0
000131B4 6D00                       		blt.s	locret_130E8
000131B6 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000131BC 08A8 0000 0022             		bclr	#0,$22(a0)
000131C2 303C 00A4                  		move.w	#$A4,d0
000131C6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stopping sound
000131CC                            
000131CC                            locret_130E8:
000131CC 4E75                       		rts	
000131CE                            ; End of function Sonic_MoveLeft
000131CE                            
000131CE                            
000131CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131CE                            
000131CE                            
000131CE                            Sonic_MoveRight:			; XREF: Sonic_Move
000131CE 3028 0014                  		move.w	$14(a0),d0
000131D2 6B00                       		bmi.s	loc_13118
000131D4 08A8 0000 0022             		bclr	#0,$22(a0)
000131DA 6700                       		beq.s	loc_13104
000131DC 08A8 0005 0022             		bclr	#5,$22(a0)
000131E2 117C 0001 001D             		move.b	#1,$1D(a0)
000131E8                            
000131E8                            loc_13104:
000131E8 D045                       		add.w	d5,d0
000131EA B046                       		cmp.w	d6,d0
000131EC 6D00                       		blt.s	loc_1310C
000131EE 3006                       		move.w	d6,d0
000131F0                            
000131F0                            loc_1310C:
000131F0 3140 0014                  		move.w	d0,$14(a0)
000131F4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000131FA 4E75                       		rts	
000131FC                            ; ===========================================================================
000131FC                            
000131FC                            loc_13118:				; XREF: Sonic_MoveRight
000131FC D044                       		add.w	d4,d0
000131FE 6400                       		bcc.s	loc_13120
00013200 303C 0080                  		move.w	#$80,d0
00013204                            
00013204                            loc_13120:
00013204 3140 0014                  		move.w	d0,$14(a0)
00013208 1028 0026                  		move.b	$26(a0),d0
0001320C 0600 0020                  		addi.b	#$20,d0
00013210 0200 00C0                  		andi.b	#$C0,d0
00013214 6600                       		bne.s	locret_1314E
00013216 0C40 FC00                  		cmpi.w	#-$400,d0
0001321A 6E00                       		bgt.s	locret_1314E
0001321C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013222 08E8 0000 0022             		bset	#0,$22(a0)
00013228 303C 00A4                  		move.w	#$A4,d0
0001322C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play stopping sound
00013232                            
00013232                            locret_1314E:
00013232 4E75                       		rts	
00013234                            ; End of function Sonic_MoveRight
00013234                            
00013234                            ; ---------------------------------------------------------------------------
00013234                            ; Subroutine to	change Sonic's speed as he rolls
00013234                            ; ---------------------------------------------------------------------------
00013234                            
00013234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013234                            
00013234                            
00013234                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013234 3C38 F760                  		move.w	($FFFFF760).w,d6
00013238 E346                       		asl.w	#1,d6
0001323A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001323E E245                       		asr.w	#1,d5
00013240 3838 F764                  		move.w	($FFFFF764).w,d4
00013244 E444                       		asr.w	#2,d4
00013246 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001324A 6600 0000                  		bne.w	loc_131CC
0001324E 4A68 003E                  		tst.w	$3E(a0)
00013252 6600                       		bne.s	loc_13188
00013254 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001325A 6700                       		beq.s	loc_1317C	; if not, branch
0001325C 6100 0000                  		bsr.w	Sonic_RollLeft
00013260                            
00013260                            loc_1317C:
00013260 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013266 6700                       		beq.s	loc_13188	; if not, branch
00013268 6100 0000                  		bsr.w	Sonic_RollRight
0001326C                            
0001326C                            loc_13188:
0001326C 3028 0014                  		move.w	$14(a0),d0
00013270 6700                       		beq.s	loc_131AA
00013272 6B00                       		bmi.s	loc_1319E
00013274 9045                       		sub.w	d5,d0
00013276 6400                       		bcc.s	loc_13198
00013278 303C 0000                  		move.w	#0,d0
0001327C                            
0001327C                            loc_13198:
0001327C 3140 0014                  		move.w	d0,$14(a0)
00013280 6000                       		bra.s	loc_131AA
00013282                            ; ===========================================================================
00013282                            
00013282                            loc_1319E:				; XREF: Sonic_RollSpeed
00013282 D045                       		add.w	d5,d0
00013284 6400                       		bcc.s	loc_131A6
00013286 303C 0000                  		move.w	#0,d0
0001328A                            
0001328A                            loc_131A6:
0001328A 3140 0014                  		move.w	d0,$14(a0)
0001328E                            
0001328E                            loc_131AA:
0001328E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013292 6600                       		bne.s	loc_131CC	; if yes, branch
00013294                            
00013294                            	@NoReset:
00013294 08A8 0002 0022             		bclr	#2,$22(a0)
0001329A 117C 0013 0016             		move.b	#$13,$16(a0)
000132A0 117C 0009 0017             		move.b	#9,$17(a0)
000132A6 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000132AC 5B68 000C                  		subq.w	#5,$C(a0)
000132B0                            
000132B0                            loc_131CC:
000132B0 1028 0026                  		move.b	$26(a0),d0
000132B4 4EB9 0000 28EC             		jsr	(CalcSine).l
000132BA C1E8 0014                  		muls.w	$14(a0),d0
000132BE E080                       		asr.l	#8,d0
000132C0 3140 0012                  		move.w	d0,$12(a0)
000132C4 C3E8 0014                  		muls.w	$14(a0),d1
000132C8 E081                       		asr.l	#8,d1
000132CA 0C41 1000                  		cmpi.w	#$1000,d1
000132CE 6F00                       		ble.s	loc_131F0
000132D0 323C 1000                  		move.w	#$1000,d1
000132D4                            
000132D4                            loc_131F0:
000132D4 0C41 F000                  		cmpi.w	#-$1000,d1
000132D8 6C00                       		bge.s	loc_131FA
000132DA 323C F000                  		move.w	#-$1000,d1
000132DE                            
000132DE                            loc_131FA:
000132DE 3141 0010                  		move.w	d1,$10(a0)
000132E2 6000 FE0C                  		bra.w	loc_1300C
000132E6                            ; End of function Sonic_RollSpeed
000132E6                            
000132E6                            
000132E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E6                            
000132E6                            
000132E6                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000132E6 3028 0014                  		move.w	$14(a0),d0
000132EA 6700                       		beq.s	loc_1320A
000132EC 6A00                       		bpl.s	loc_13218
000132EE                            
000132EE                            loc_1320A:
000132EE 08E8 0000 0022             		bset	#0,$22(a0)
000132F4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000132FA 4E75                       		rts	
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            loc_13218:
000132FC 9044                       		sub.w	d4,d0
000132FE 6400                       		bcc.s	loc_13220
00013300 303C FF80                  		move.w	#-$80,d0
00013304                            
00013304                            loc_13220:
00013304 3140 0014                  		move.w	d0,$14(a0)
00013308 4E75                       		rts	
0001330A                            ; End of function Sonic_RollLeft
0001330A                            
0001330A                            
0001330A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001330A                            
0001330A                            
0001330A                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001330A 3028 0014                  		move.w	$14(a0),d0
0001330E 6B00                       		bmi.s	loc_1323A
00013310 08A8 0000 0022             		bclr	#0,$22(a0)
00013316 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001331C 4E75                       		rts	
0001331E                            ; ===========================================================================
0001331E                            
0001331E                            loc_1323A:
0001331E D044                       		add.w	d4,d0
00013320 6400                       		bcc.s	loc_13242
00013322 303C 0080                  		move.w	#$80,d0
00013326                            
00013326                            loc_13242:
00013326 3140 0014                  		move.w	d0,$14(a0)
0001332A 4E75                       		rts	
0001332C                            ; End of function Sonic_RollRight
0001332C                            
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            ; Subroutine to	change Sonic's direction while jumping
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            
0001332C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001332C                            
0001332C                            
0001332C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001332C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013330 3A38 F762                  		move.w	($FFFFF762).w,d5
00013334 E345                       		asl.w	#1,d5
00013336 0828 0004 0022             		btst	#4,$22(a0)
0001333C 6600                       		bne.s	Obj01_ResetScr2
0001333E 3028 0010                  		move.w	$10(a0),d0
00013342 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013348 6700                       		beq.s	loc_13278	; if not, branch
0001334A 08E8 0000 0022             		bset	#0,$22(a0)
00013350 9045                       		sub.w	d5,d0
00013352 3206                       		move.w	d6,d1
00013354 4441                       		neg.w	d1
00013356 B041                       		cmp.w	d1,d0
00013358 6E00                       		bgt.s	loc_13278
0001335A 3001                       		move.w	d1,d0
0001335C                            
0001335C                            loc_13278:
0001335C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013362 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013364 08A8 0000 0022             		bclr	#0,$22(a0)
0001336A D045                       		add.w	d5,d0
0001336C B046                       		cmp.w	d6,d0
0001336E 6D00                       		blt.s	Obj01_JumpMove
00013370 3006                       		move.w	d6,d0
00013372                            
00013372                            Obj01_JumpMove:
00013372 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013376                            
00013376                            Obj01_ResetScr2:
00013376 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001337C 6700                       		beq.s	loc_132A4	; if yes, branch
0001337E 6400                       		bcc.s	loc_132A0
00013380 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013384                            
00013384                            loc_132A0:
00013384 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013388                            
00013388                            loc_132A4:
00013388 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001338E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013390 3028 0010                  		move.w	$10(a0),d0
00013394 3200                       		move.w	d0,d1
00013396 EA41                       		asr.w	#5,d1
00013398 6700                       		beq.s	locret_132D2
0001339A 6B00                       		bmi.s	loc_132C6
0001339C 9041                       		sub.w	d1,d0
0001339E 6400                       		bcc.s	loc_132C0
000133A0 303C 0000                  		move.w	#0,d0
000133A4                            
000133A4                            loc_132C0:
000133A4 3140 0010                  		move.w	d0,$10(a0)
000133A8 4E75                       		rts	
000133AA                            ; ===========================================================================
000133AA                            
000133AA                            loc_132C6:
000133AA 9041                       		sub.w	d1,d0
000133AC 6500                       		bcs.s	loc_132CE
000133AE 303C 0000                  		move.w	#0,d0
000133B2                            
000133B2                            loc_132CE:
000133B2 3140 0010                  		move.w	d0,$10(a0)
000133B6                            
000133B6                            locret_132D2:
000133B6 4E75                       		rts	
000133B8                            ; End of function Sonic_ChgJumpDir
000133B8                            
000133B8                            ; ===========================================================================
000133B8                            ; ---------------------------------------------------------------------------
000133B8                            ; Unused subroutine to squash Sonic
000133B8                            ; ---------------------------------------------------------------------------
000133B8 1028 0026                  		move.b	$26(a0),d0
000133BC 0600 0020                  		addi.b	#$20,d0
000133C0 0200 00C0                  		andi.b	#$C0,d0
000133C4 6600                       		bne.s	locret_13302
000133C6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000133CA 4A41                       		tst.w	d1
000133CC 6A00                       		bpl.s	locret_13302
000133CE 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000133D4 317C 0000 0010             		move.w	#0,$10(a0)
000133DA 317C 0000 0012             		move.w	#0,$12(a0)
000133E0 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000133E6                            
000133E6                            locret_13302:
000133E6 4E75                       		rts	
000133E8                            ; ---------------------------------------------------------------------------
000133E8                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000133E8                            ; ---------------------------------------------------------------------------
000133E8                            
000133E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133E8                            
000133E8                            
000133E8                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000133E8 2228 0008                  		move.l	8(a0),d1
000133EC 3028 0010                  		move.w	$10(a0),d0
000133F0 48C0                       		ext.l	d0
000133F2 E180                       		asl.l	#8,d0
000133F4 D280                       		add.l	d0,d1
000133F6 4841                       		swap	d1
000133F8 3038 F728                  		move.w	($FFFFF728).w,d0
000133FC 0640 0010                  		addi.w	#$10,d0
00013400 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013402 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013404 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013408 0640 0128                  		addi.w	#$128,d0
0001340C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013410 6600                       		bne.s	loc_13332
00013412 0640 0040                  		addi.w	#$40,d0
00013416                            
00013416                            loc_13332:
00013416 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013418 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001341A                            
0001341A                            loc_13336:
0001341A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001341E 0640 00E0                  		addi.w	#$E0,d0
00013422 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013426 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013428 4E75                       		rts	
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            Boundary_Bottom:
0001342A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013430 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00013432 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013438 6500                       		bcs.s	JMPKillSonic
0001343A 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001343E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013444 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001344A 4E75                       		rts	
0001344C                            ; ===========================================================================
0001344C                            
0001344C                            Boundary_Sides:
0001344C 3140 0008                  		move.w	d0,8(a0)
00013450 317C 0000 000A             		move.w	#0,$A(a0)
00013456 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001345C 317C 0000 0014             		move.w	#0,$14(a0)
00013462 60B6                       		bra.s	loc_13336
00013464                            
00013464                            JMPKillSonic:
00013464 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001346A 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00013470 4EF9 0000 0000             		jmp	KillSonic
00013476                            ; End of function Sonic_LevelBound
00013476                            
00013476                            ; ---------------------------------------------------------------------------
00013476                            ; Subroutine allowing Sonic to roll when he's moving
00013476                            ; ---------------------------------------------------------------------------
00013476                            
00013476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013476                            
00013476                            
00013476                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013476 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001347A 6600                       		bne.s	Obj01_NoRoll
0001347C 3028 0014                  		move.w	$14(a0),d0
00013480 6A00                       		bpl.s	loc_13392
00013482 4440                       		neg.w	d0
00013484                            
00013484                            loc_13392:
00013484 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013488 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001348A 1038 F602                  		move.b	($FFFFF602).w,d0
0001348E 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013492 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013494 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001349A 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
0001349C                            
0001349C                            Obj01_NoRoll:
0001349C 4E75                       		rts	
0001349E                            ; ===========================================================================
0001349E                            
0001349E                            Obj01_ChkRoll:
0001349E 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000134A4 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000134A6 4E75                       		rts	
000134A8                            ; ===========================================================================
000134A8                            
000134A8                            Obj01_DoRoll:
000134A8 08E8 0002 0022             		bset	#2,$22(a0)
000134AE 117C 000E 0016             		move.b	#$E,$16(a0)
000134B4 117C 0007 0017             		move.b	#7,$17(a0)
000134BA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000134C0 5A68 000C                  		addq.w	#5,$C(a0)
000134C4 303C 00BE                  		move.w	#$BE,d0
000134C8 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rolling sound
000134CE 4A68 0014                  		tst.w	$14(a0)
000134D2 6600                       		bne.s	locret_133E8
000134D4 317C 0200 0014             		move.w	#$200,$14(a0)
000134DA                            
000134DA                            locret_133E8:
000134DA 4E75                       		rts	
000134DC                            ; End of function Sonic_Roll
000134DC                            
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            ; Subroutine allowing Sonic to jump
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            
000134DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134DC                            
000134DC                            
000134DC                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000134DC 1038 F603                  		move.b	($FFFFF603).w,d0
000134E0 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000134E4 6700 0000                  		beq.w	locret_1348E	; if not, branch
000134E8 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
000134EE 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
000134F4 6600                       		bne.s	@notfrustrated
000134F6 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
000134FC                            
000134FC                            	@notfrustrated:
000134FC 7000                       		moveq	#0,d0
000134FE 1028 0026                  		move.b	$26(a0),d0
00013502 0600 0080                  		addi.b	#$80,d0
00013506 6100 0000                  		bsr.w	sub_14D48
0001350A 0C41 0006                  		cmpi.w	#6,d1
0001350E 6D00 0000                  		blt.w	locret_1348E
00013512 343C 0680                  		move.w	#$680,d2
00013516 0828 0006 0022             		btst	#6,$22(a0)
0001351C 6700                       		beq.s	loc_1341C
0001351E 343C 0380                  		move.w	#$380,d2
00013522                            
00013522                            loc_1341C:
00013522 7000                       		moveq	#0,d0
00013524 1028 0026                  		move.b	$26(a0),d0
00013528 0400 0040                  		subi.b	#$40,d0
0001352C 4EB9 0000 28EC             		jsr	(CalcSine).l
00013532 C3C2                       		muls.w	d2,d1
00013534 E081                       		asr.l	#8,d1
00013536 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001353A C1C2                       		muls.w	d2,d0
0001353C E080                       		asr.l	#8,d0
0001353E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013542 08E8 0001 0022             		bset	#1,$22(a0)
00013548 08A8 0005 0022             		bclr	#5,$22(a0)
0001354E 588F                       		addq.l	#4,sp
00013550 117C 0001 003C             		move.b	#1,$3C(a0)
00013556 4228 0038                  		clr.b	$38(a0)
0001355A 303C 00A0                  		move.w	#$A0,d0
0001355E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play jumping sound
00013564 117C 0013 0016             		move.b	#$13,$16(a0)
0001356A 117C 0009 0017             		move.b	#9,$17(a0)
00013570 0828 0002 0022             		btst	#2,$22(a0)
00013576 6600                       		bne.s	loc_13490
00013578 117C 000E 0016             		move.b	#$E,$16(a0)
0001357E 117C 0007 0017             		move.b	#7,$17(a0)
00013584 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001358A 08E8 0002 0022             		bset	#2,$22(a0)
00013590 5A68 000C                  		addq.w	#5,$C(a0)
00013594                            
00013594                            locret_1348E:
00013594 4E75                       		rts	
00013596                            ; ===========================================================================
00013596                            
00013596                            loc_13490:
00013596 08E8 0004 0022             		bset	#4,$22(a0)
0001359C 4E75                       		rts	
0001359E                            ; End of function Sonic_Jump
0001359E                            
0001359E                            
0001359E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001359E                            
0001359E                            
0001359E                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001359E 4A28 003C                  		tst.b	$3C(a0)
000135A2 6700                       		beq.s	loc_134C4
000135A4 323C FC00                  		move.w	#-$400,d1
000135A8 0828 0006 0022             		btst	#6,$22(a0)
000135AE 6700                       		beq.s	loc_134AE
000135B0 323C FE00                  		move.w	#-$200,d1
000135B4                            
000135B4                            loc_134AE:
000135B4 B268 0012                  		cmp.w	$12(a0),d1
000135B8 6F00                       		ble.s	locret_134C2
000135BA 1038 F602                  		move.b	($FFFFF602).w,d0
000135BE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000135C2 6600                       		bne.s	locret_134C2	; if yes, branch
000135C4 3141 0012                  		move.w	d1,$12(a0)
000135C8                            
000135C8                            locret_134C2:
000135C8 4E75                       		rts	
000135CA                            ; ===========================================================================
000135CA                            
000135CA                            loc_134C4:
000135CA 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000135D0 6C00                       		bge.s	locret_134D2
000135D2 317C F040 0012             		move.w	#-$FC0,$12(a0)
000135D8                            
000135D8                            locret_134D2:
000135D8 4E75                       		rts	
000135DA                            ; End of function Sonic_JumpHeight
000135DA                            
000135DA                            ; ---------------------------------------------------------------------------
000135DA                            ; Subroutine to	slow Sonic walking up a	slope
000135DA                            ; ---------------------------------------------------------------------------
000135DA                            
000135DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135DA                            
000135DA                            
000135DA                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000135DA 1028 0026                  		move.b	$26(a0),d0
000135DE 0600 0060                  		addi.b	#$60,d0
000135E2 0C00 00C0                  		cmpi.b	#$C0,d0
000135E6 6400                       		bcc.s	locret_13508
000135E8 1028 0026                  		move.b	$26(a0),d0
000135EC 4EB9 0000 28EC             		jsr	(CalcSine).l
000135F2 C1FC 0020                  		muls.w	#$20,d0
000135F6 E080                       		asr.l	#8,d0
000135F8 4A68 0014                  		tst.w	$14(a0)
000135FC 6700                       		beq.s	locret_13508
000135FE 6B00                       		bmi.s	loc_13504
00013600 4A40                       		tst.w	d0
00013602 6700                       		beq.s	locret_13502
00013604 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013608                            
00013608                            locret_13502:
00013608 4E75                       		rts	
0001360A                            ; ===========================================================================
0001360A                            
0001360A                            loc_13504:
0001360A D168 0014                  		add.w	d0,$14(a0)
0001360E                            
0001360E                            locret_13508:
0001360E 4E75                       		rts	
00013610                            ; End of function Sonic_SlopeResist
00013610                            
00013610                            ; ---------------------------------------------------------------------------
00013610                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013610                            ; ---------------------------------------------------------------------------
00013610                            
00013610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013610                            
00013610                            
00013610                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013610 1028 0026                  		move.b	$26(a0),d0
00013614 0600 0060                  		addi.b	#$60,d0
00013618 0C00 00C0                  		cmpi.b	#-$40,d0
0001361C 6400                       		bcc.s	locret_13544
0001361E 1028 0026                  		move.b	$26(a0),d0
00013622 4EB9 0000 28EC             		jsr	(CalcSine).l
00013628 C1FC 0050                  		muls.w	#$50,d0
0001362C E080                       		asr.l	#8,d0
0001362E 4A68 0014                  		tst.w	$14(a0)
00013632 6B00                       		bmi.s	loc_1353A
00013634 4A40                       		tst.w	d0
00013636 6A00                       		bpl.s	loc_13534
00013638 E480                       		asr.l	#2,d0
0001363A                            
0001363A                            loc_13534:
0001363A D168 0014                  		add.w	d0,$14(a0)
0001363E 4E75                       		rts	
00013640                            ; ===========================================================================
00013640                            
00013640                            loc_1353A:
00013640 4A40                       		tst.w	d0
00013642 6B00                       		bmi.s	loc_13540
00013644 E480                       		asr.l	#2,d0
00013646                            
00013646                            loc_13540:
00013646 D168 0014                  		add.w	d0,$14(a0)
0001364A                            
0001364A                            locret_13544:
0001364A 4E75                       		rts	
0001364C                            ; End of function Sonic_RollRepel
0001364C                            
0001364C                            ; ---------------------------------------------------------------------------
0001364C                            ; Subroutine to	push Sonic down	a slope
0001364C                            ; ---------------------------------------------------------------------------
0001364C                            
0001364C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001364C                            
0001364C                            
0001364C                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001364C 4E71                       		nop	
0001364E 4A28 0038                  		tst.b	$38(a0)
00013652 6600                       		bne.s	locret_13580
00013654 4A68 003E                  		tst.w	$3E(a0)
00013658 6600                       		bne.s	loc_13582
0001365A 1028 0026                  		move.b	$26(a0),d0
0001365E 0600 0020                  		addi.b	#$20,d0
00013662 0200 00C0                  		andi.b	#$C0,d0
00013666 6700                       		beq.s	locret_13580
00013668 3028 0014                  		move.w	$14(a0),d0
0001366C 6A00                       		bpl.s	loc_1356A
0001366E 4440                       		neg.w	d0
00013670                            
00013670                            loc_1356A:
00013670 0C40 0280                  		cmpi.w	#$280,d0
00013674 6400                       		bcc.s	locret_13580
00013676 4268 0014                  		clr.w	$14(a0)
0001367A 08E8 0001 0022             		bset	#1,$22(a0)
00013680 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013686                            
00013686                            locret_13580:
00013686 4E75                       		rts	
00013688                            ; ===========================================================================
00013688                            
00013688                            loc_13582:
00013688 5368 003E                  		subq.w	#1,$3E(a0)
0001368C 4E75                       		rts	
0001368E                            ; End of function Sonic_SlopeRepel
0001368E                            
0001368E                            ; ---------------------------------------------------------------------------
0001368E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001368E                            ; ---------------------------------------------------------------------------
0001368E                            
0001368E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001368E                            
0001368E                            
0001368E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001368E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013692 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013694 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013696                            
00013696 5400                       		addq.b	#2,d0		; increase angle
00013698 6400                       		bcc.s	loc_13596
0001369A 7000                       		moveq	#0,d0
0001369C                            
0001369C                            loc_13596:
0001369C 6000                       		bra.s	loc_1359E
0001369E                            ; ===========================================================================
0001369E                            
0001369E                            loc_13598:
0001369E 5500                       		subq.b	#2,d0		; decrease angle
000136A0 6400                       		bcc.s	loc_1359E
000136A2 7000                       		moveq	#0,d0
000136A4                            
000136A4                            loc_1359E:
000136A4 1140 0026                  		move.b	d0,$26(a0)
000136A8                            
000136A8                            locret_135A2:
000136A8 4E75                       		rts	
000136AA                            ; End of function Sonic_JumpAngle
000136AA                            
000136AA                            ; ---------------------------------------------------------------------------
000136AA                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000136AA                            ; ---------------------------------------------------------------------------
000136AA                            
000136AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136AA                            
000136AA                            
000136AA                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
000136AA 3228 0010                  		move.w	$10(a0),d1
000136AE 3428 0012                  		move.w	$12(a0),d2
000136B2 4EB9 0000 2BBA             		jsr	(CalcAngle).l
000136B8 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000136BC 0400 0020                  		subi.b	#$20,d0
000136C0 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000136C4 0200 00C0                  		andi.b	#$C0,d0
000136C8 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000136CC 0C00 0040                  		cmpi.b	#$40,d0
000136D0 6700 0000                  		beq.w	loc_13680
000136D4 0C00 0080                  		cmpi.b	#$80,d0
000136D8 6700 0000                  		beq.w	loc_136E2
000136DC 0C00 00C0                  		cmpi.b	#-$40,d0
000136E0 6700 0000                  		beq.w	loc_1373E
000136E4 6100 0000                  		bsr.w	Sonic_HitWall
000136E8 4A41                       		tst.w	d1
000136EA 6A00                       		bpl.s	loc_135F0
000136EC 9368 0008                  		sub.w	d1,8(a0)
000136F0 317C 0000 0010             		move.w	#0,$10(a0)
000136F6                            
000136F6                            loc_135F0:
000136F6 6100 0000                  		bsr.w	sub_14EB4
000136FA 4A41                       		tst.w	d1
000136FC 6A00                       		bpl.s	loc_13602
000136FE D368 0008                  		add.w	d1,8(a0)
00013702 317C 0000 0010             		move.w	#0,$10(a0)
00013708                            
00013708                            loc_13602:
00013708 6100 0000                  		bsr.w	Sonic_HitFloor
0001370C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013710 4A41                       		tst.w	d1
00013712 6A00                       		bpl.s	locret_1367E
00013714 1428 0012                  		move.b	$12(a0),d2
00013718 5002                       		addq.b	#8,d2
0001371A 4402                       		neg.b	d2
0001371C B202                       		cmp.b	d2,d1
0001371E 6C00                       		bge.s	loc_1361E
00013720 B002                       		cmp.b	d2,d0
00013722 6D00                       		blt.s	locret_1367E
00013724                            
00013724                            loc_1361E:
00013724 D368 000C                  		add.w	d1,$C(a0)
00013728 1143 0026                  		move.b	d3,$26(a0)
0001372C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013730 117C 0000 001C             		move.b	#0,$1C(a0)
00013736 1003                       		move.b	d3,d0
00013738 0600 0020                  		addi.b	#$20,d0
0001373C 0200 0040                  		andi.b	#$40,d0
00013740 6600                       		bne.s	loc_1365C
00013742 1003                       		move.b	d3,d0
00013744 0600 0010                  		addi.b	#$10,d0
00013748 0200 0020                  		andi.b	#$20,d0
0001374C 6700                       		beq.s	loc_1364E
0001374E E0E8 0012                  		asr	$12(a0)
00013752 6000                       		bra.s	loc_13670
00013754                            ; ===========================================================================
00013754                            
00013754                            loc_1364E:
00013754 317C 0000 0012             		move.w	#0,$12(a0)
0001375A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013760 4E75                       		rts	
00013762                            ; ===========================================================================
00013762                            
00013762                            loc_1365C:
00013762 317C 0000 0010             		move.w	#0,$10(a0)
00013768 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001376E 6F00                       		ble.s	loc_13670
00013770 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013776                            
00013776                            loc_13670:
00013776 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001377C 4A03                       		tst.b	d3
0001377E 6A00                       		bpl.s	locret_1367E
00013780 4468 0014                  		neg.w	$14(a0)
00013784                            
00013784                            locret_1367E:
00013784 4E75                       		rts	
00013786                            ; ===========================================================================
00013786                            
00013786                            loc_13680:
00013786 6100 0000                  		bsr.w	Sonic_HitWall
0001378A 4A41                       		tst.w	d1
0001378C 6A00                       		bpl.s	loc_1369A
0001378E 9368 0008                  		sub.w	d1,8(a0)
00013792 317C 0000 0010             		move.w	#0,$10(a0)
00013798 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001379E 4E75                       		rts	
000137A0                            ; ===========================================================================
000137A0                            
000137A0                            loc_1369A:
000137A0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000137A4 4A41                       		tst.w	d1
000137A6 6A00                       		bpl.s	loc_136B4
000137A8 9368 000C                  		sub.w	d1,$C(a0)
000137AC 4A68 0012                  		tst.w	$12(a0)
000137B0 6A00                       		bpl.s	locret_136B2
000137B2 317C 0000 0012             		move.w	#0,$12(a0)
000137B8                            
000137B8                            locret_136B2:
000137B8 4E75                       		rts	
000137BA                            ; ===========================================================================
000137BA                            
000137BA                            loc_136B4:
000137BA 4A68 0012                  		tst.w	$12(a0)
000137BE 6B00                       		bmi.s	locret_136E0
000137C0 6100 0000                  		bsr.w	Sonic_HitFloor
000137C4 4A41                       		tst.w	d1
000137C6 6A00                       		bpl.s	locret_136E0
000137C8 D368 000C                  		add.w	d1,$C(a0)
000137CC 1143 0026                  		move.b	d3,$26(a0)
000137D0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000137D4 117C 0000 001C             		move.b	#0,$1C(a0)
000137DA 317C 0000 0012             		move.w	#0,$12(a0)
000137E0 3168 0010 0014             		move.w	$10(a0),$14(a0)
000137E6                            
000137E6                            locret_136E0:
000137E6 4E75                       		rts	
000137E8                            ; ===========================================================================
000137E8                            
000137E8                            loc_136E2:
000137E8 6100 0000                  		bsr.w	Sonic_HitWall
000137EC 4A41                       		tst.w	d1
000137EE 6A00                       		bpl.s	loc_136F4
000137F0 9368 0008                  		sub.w	d1,8(a0)
000137F4 317C 0000 0010             		move.w	#0,$10(a0)
000137FA                            
000137FA                            loc_136F4:
000137FA 6100 0000                  		bsr.w	sub_14EB4
000137FE 4A41                       		tst.w	d1
00013800 6A00                       		bpl.s	loc_13706
00013802 D368 0008                  		add.w	d1,8(a0)
00013806 317C 0000 0010             		move.w	#0,$10(a0)
0001380C                            
0001380C                            loc_13706:
0001380C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013810 4A41                       		tst.w	d1
00013812 6A00                       		bpl.s	locret_1373C
00013814 9368 000C                  		sub.w	d1,$C(a0)
00013818 1003                       		move.b	d3,d0
0001381A 0600 0020                  		addi.b	#$20,d0
0001381E 0200 0040                  		andi.b	#$40,d0
00013822 6600                       		bne.s	loc_13726
00013824 317C 0000 0012             		move.w	#0,$12(a0)
0001382A 4E75                       		rts	
0001382C                            ; ===========================================================================
0001382C                            
0001382C                            loc_13726:
0001382C 1143 0026                  		move.b	d3,$26(a0)
00013830 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013834 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001383A 4A03                       		tst.b	d3
0001383C 6A00                       		bpl.s	locret_1373C
0001383E 4468 0014                  		neg.w	$14(a0)
00013842                            
00013842                            locret_1373C:
00013842 4E75                       		rts	
00013844                            ; ===========================================================================
00013844                            
00013844                            loc_1373E:
00013844 6100 0000                  		bsr.w	sub_14EB4
00013848 4A41                       		tst.w	d1
0001384A 6A00                       		bpl.s	loc_13758
0001384C D368 0008                  		add.w	d1,8(a0)
00013850 317C 0000 0010             		move.w	#0,$10(a0)
00013856 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001385C 4E75                       		rts	
0001385E                            ; ===========================================================================
0001385E                            
0001385E                            loc_13758:
0001385E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013862 4A41                       		tst.w	d1
00013864 6A00                       		bpl.s	loc_13772
00013866 9368 000C                  		sub.w	d1,$C(a0)
0001386A 4A68 0012                  		tst.w	$12(a0)
0001386E 6A00                       		bpl.s	locret_13770
00013870 317C 0000 0012             		move.w	#0,$12(a0)
00013876                            
00013876                            locret_13770:
00013876 4E75                       		rts	
00013878                            ; ===========================================================================
00013878                            
00013878                            loc_13772:
00013878 4A68 0012                  		tst.w	$12(a0)
0001387C 6B00                       		bmi.s	locret_1379E
0001387E 6100 0000                  		bsr.w	Sonic_HitFloor
00013882 4A41                       		tst.w	d1
00013884 6A00                       		bpl.s	locret_1379E
00013886 D368 000C                  		add.w	d1,$C(a0)
0001388A 1143 0026                  		move.b	d3,$26(a0)
0001388E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013892 117C 0000 001C             		move.b	#0,$1C(a0)
00013898 317C 0000 0012             		move.w	#0,$12(a0)
0001389E 3168 0010 0014             		move.w	$10(a0),$14(a0)
000138A4                            
000138A4                            locret_1379E:
000138A4 4E75                       		rts	
000138A6                            ; End of function Sonic_Floor
000138A6                            
000138A6                            ; ---------------------------------------------------------------------------
000138A6                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000138A6                            ; ---------------------------------------------------------------------------
000138A6                            
000138A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138A6                            
000138A6                            
000138A6                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000138A6 0828 0004 0022             		btst	#4,$22(a0)
000138AC 6700                       		beq.s	loc_137AE
000138AE 4E71                       		nop	
000138B0 4E71                       		nop	
000138B2 4E71                       		nop	
000138B4                            
000138B4                            loc_137AE:
000138B4 08A8 0005 0022             		bclr	#5,$22(a0)
000138BA 08A8 0001 0022             		bclr	#1,$22(a0)
000138C0 08A8 0004 0022             		bclr	#4,$22(a0)
000138C6 0828 0002 0022             		btst	#2,$22(a0)
000138CC 6700                       		beq.s	loc_137E4
000138CE 08A8 0002 0022             		bclr	#2,$22(a0)
000138D4 117C 0013 0016             		move.b	#$13,$16(a0)
000138DA 117C 0009 0017             		move.b	#9,$17(a0)
000138E0 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000138E6 5B68 000C                  		subq.w	#5,$C(a0)
000138EA                            
000138EA                            loc_137E4:
000138EA 117C 0000 003C             		move.b	#0,$3C(a0)
000138F0 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000138F6 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
000138FA                            
000138FA                            	@NoReset:
000138FA 4E75                       		rts	
000138FC                            ; End of function Sonic_ResetOnFloor
000138FC                            
000138FC                            ; ===========================================================================
000138FC                            ; ---------------------------------------------------------------------------
000138FC                            ; Sonic	when he	gets hurt
000138FC                            ; ---------------------------------------------------------------------------
000138FC                            
000138FC                            Obj01_Hurt:				; XREF: Obj01_Index
000138FC 4EBA 9D86                  		jsr	SpeedToPos
00013900 0668 0030 0012             		addi.w	#$30,$12(a0)
00013906 0828 0006 0022             		btst	#6,$22(a0)
0001390C 6700                       		beq.s	loc_1380C
0001390E 0468 0020 0012             		subi.w	#$20,$12(a0)
00013914                            
00013914                            loc_1380C:
00013914 6100 0000                  		bsr.w	Sonic_HurtStop
00013918 6100 FACE                  		bsr.w	Sonic_LevelBound
0001391C 6100 F4C4                  		bsr.w	Sonic_RecordPos
00013920 6100 0000                  		bsr.w	Sonic_Animate
00013924 6100 0000                  		bsr.w	LoadSonicDynPLC
00013928 4EFA 9D80                  		jmp	DisplaySprite
0001392C                            
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            
0001392C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001392C                            
0001392C                            
0001392C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001392C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013930 0640 00E0                  		addi.w	#$E0,d0
00013934 B068 000C                  		cmp.w	$C(a0),d0
00013938 6500 FB2A                  		bcs.w	JMPKillSonic
0001393C 6100 FD6C                  		bsr.w	Sonic_Floor
00013940 0828 0001 0022             		btst	#1,$22(a0)
00013946 6600                       		bne.s	locret_13860
00013948 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
0001394E 7000                       		moveq	#0,d0
00013950 3140 0012                  		move.w	d0,$12(a0)
00013954 3140 0010                  		move.w	d0,$10(a0)
00013958 3140 0014                  		move.w	d0,$14(a0)
0001395C 117C 0000 001C             		move.b	#0,$1C(a0)
00013962 5528 0024                  		subq.b	#2,$24(a0)
00013966 317C 0078 0030             		move.w	#$78,$30(a0)
0001396C                            
0001396C                            locret_13860:
0001396C 4E75                       		rts	
0001396E                            ; End of function Sonic_HurtStop
0001396E                            
0001396E                            ; ===========================================================================
0001396E                            ; ---------------------------------------------------------------------------
0001396E                            ; Sonic	when he	dies
0001396E                            ; ---------------------------------------------------------------------------
0001396E                            
0001396E                            Obj01_Death:				; XREF: Obj01_Index
0001396E 6100 0000                  		bsr.w	GameOver
00013972 4EBA 9CE4                  		jsr	ObjectFall
00013976 6100 F46A                  		bsr.w	Sonic_RecordPos
0001397A 6100 0000                  		bsr.w	Sonic_Animate
0001397E 6100 0000                  		bsr.w	LoadSonicDynPLC
00013982 4EFA 9D26                  		jmp	DisplaySprite
00013986                            
00013986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013986                            
00013986                            
00013986                            GameOver:				; XREF: Obj01_Death
00013986 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001398A 0640 0100                  		addi.w	#$100,d0
0001398E B068 000C                  		cmp.w	$C(a0),d0
00013992 6400 0000                  		bcc.w	locret_13900
00013996 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001399C 5428 0024                  		addq.b	#2,$24(a0)
000139A0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000139A4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000139A8 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000139AC 6600                       		bne.s	loc_138D4
000139AE 317C 0000 003A             		move.w	#0,$3A(a0)
000139B4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000139BA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000139C0 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000139C6 4238 FE1A                  		clr.b	($FFFFFE1A).w
000139CA                            
000139CA                            loc_138C2:
000139CA 303C 008F                  		move.w	#$8F,d0
000139CE 4EB9 0000 125C             		jsr	(PlaySound).l	; play game over music
000139D4 7003                       		moveq	#3,d0
000139D6 4EF9 0000 148A             		jmp	(LoadPLC).l	; load game over patterns
000139DC                            ; ===========================================================================
000139DC                            
000139DC                            loc_138D4:
000139DC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000139E2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000139E6 6700                       		beq.s	locret_13900	; if not, branch
000139E8 317C 0000 003A             		move.w	#0,$3A(a0)
000139EE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000139F4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000139FA 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013A00 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013A06 60C2                       		bra.s	loc_138C2
00013A08                            ; ===========================================================================
00013A08                            
00013A08                            locret_13900:
00013A08 4E75                       		rts	
00013A0A                            ; End of function GameOver
00013A0A                            
00013A0A                            ; ===========================================================================
00013A0A                            ; ---------------------------------------------------------------------------
00013A0A                            ; Sonic	when the level is restarted
00013A0A                            ; ---------------------------------------------------------------------------
00013A0A                            
00013A0A                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013A0A 4A68 003A                  		tst.w	$3A(a0)
00013A0E 6700                       		beq.s	locret_13914
00013A10 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013A14 6600                       		bne.s	locret_13914
00013A16 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013A1C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00013A22                            
00013A22                            locret_13914:
00013A22 4E75                       		rts	
00013A24                            
00013A24                            ; ---------------------------------------------------------------------------
00013A24                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013A24                            ; ---------------------------------------------------------------------------
00013A24                            
00013A24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A24                            
00013A24                            
00013A24                            Sonic_Loops:				; XREF: Obj01_Control
00013A24 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013A2A 6700                       		beq.s	loc_13926	; if yes, branch
00013A2C 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013A30 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013A34                            
00013A34                            loc_13926:
00013A34 3028 000C                  		move.w	$C(a0),d0
00013A38 E248                       		lsr.w	#1,d0
00013A3A 0240 0380                  		andi.w	#$380,d0
00013A3E 1228 0008                  		move.b	8(a0),d1
00013A42 0241 007F                  		andi.w	#$7F,d1
00013A46 D041                       		add.w	d1,d0
00013A48 43F8 A400                  		lea	($FFFFA400).w,a1
00013A4C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013A50 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013A54 6700 FA48                  		beq.w	Obj01_ChkRoll
00013A58 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013A5C 6700 FA40                  		beq.w	Obj01_ChkRoll
00013A60 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013A64 6700                       		beq.s	loc_13976
00013A66 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013A6A 6700                       		beq.s	loc_13966
00013A6C 08A8 0006 0001             		bclr	#6,1(a0)
00013A72 4E75                       		rts	
00013A74                            ; ===========================================================================
00013A74                            
00013A74                            loc_13966:
00013A74 0828 0001 0022             		btst	#1,$22(a0)
00013A7A 6700                       		beq.s	loc_13976
00013A7C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            loc_13976:
00013A84 3428 0008                  		move.w	8(a0),d2
00013A88 0C02 002C                  		cmpi.b	#$2C,d2
00013A8C 6400                       		bcc.s	loc_13988
00013A8E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013A94 4E75                       		rts	
00013A96                            ; ===========================================================================
00013A96                            
00013A96                            loc_13988:
00013A96 0C02 00E0                  		cmpi.b	#-$20,d2
00013A9A 6500                       		bcs.s	loc_13996
00013A9C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013AA2 4E75                       		rts	
00013AA4                            ; ===========================================================================
00013AA4                            
00013AA4                            loc_13996:
00013AA4 0828 0006 0001             		btst	#6,1(a0)
00013AAA 6600                       		bne.s	loc_139B2
00013AAC 1228 0026                  		move.b	$26(a0),d1
00013AB0 6700                       		beq.s	locret_139C2
00013AB2 0C01 0080                  		cmpi.b	#-$80,d1
00013AB6 6200                       		bhi.s	locret_139C2
00013AB8 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013ABE 4E75                       		rts	
00013AC0                            ; ===========================================================================
00013AC0                            
00013AC0                            loc_139B2:
00013AC0 1228 0026                  		move.b	$26(a0),d1
00013AC4 0C01 0080                  		cmpi.b	#-$80,d1
00013AC8 6300                       		bls.s	locret_139C2
00013ACA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013AD0                            
00013AD0                            locret_139C2:
00013AD0 4E75                       		rts	
00013AD2                            ; End of function Sonic_Loops
00013AD2                            
00013AD2                            ; ---------------------------------------------------------------------------
00013AD2                            ; Subroutine to	animate	Sonic's sprites
00013AD2                            ; ---------------------------------------------------------------------------
00013AD2                            
00013AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AD2                            
00013AD2                            
00013AD2                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013AD2 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013AD8 7000                       		moveq	#0,d0
00013ADA 1028 001C                  		move.b	$1C(a0),d0
00013ADE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013AE2 6700                       		beq.s	SAnim_Do	; if not, branch
00013AE4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013AE8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013AEE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013AF4                            
00013AF4                            SAnim_Do:
00013AF4 D040                       		add.w	d0,d0
00013AF6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013AFA 1011                       		move.b	(a1),d0
00013AFC 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013AFE 1228 0022                  		move.b	$22(a0),d1
00013B02 0201 0001                  		andi.b	#1,d1
00013B06 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013B0C 8328 0001                  		or.b	d1,1(a0)
00013B10 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013B14 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013B16 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013B1A                            
00013B1A                            SAnim_Do2:
00013B1A 7200                       		moveq	#0,d1
00013B1C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013B20 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013B24 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013B26                            
00013B26                            SAnim_Next:
00013B26 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013B2A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013B2E                            
00013B2E                            SAnim_Delay:
00013B2E 4E75                       		rts	
00013B30                            ; ===========================================================================
00013B30                            
00013B30                            SAnim_End_FF:
00013B30 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013B32 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013B34 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013B3A 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013B3E 60E6                       		bra.s	SAnim_Next
00013B40                            ; ===========================================================================
00013B40                            
00013B40                            SAnim_End_FE:
00013B40 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013B42 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013B44 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013B48 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013B4C 9200                       		sub.b	d0,d1
00013B4E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013B52 60D2                       		bra.s	SAnim_Next
00013B54                            ; ===========================================================================
00013B54                            
00013B54                            SAnim_End_FD:
00013B54 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013B56 6600                       		bne.s	SAnim_End	; if not, branch
00013B58 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013B5E                            
00013B5E                            SAnim_End:
00013B5E 4E75                       		rts	
00013B60                            ; ===========================================================================
00013B60                            
00013B60                            SAnim_WalkRun:				; XREF: SAnim_Do
00013B60 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013B64 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013B66 5200                       		addq.b	#1,d0		; is animation walking/running?
00013B68 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013B6C 7200                       		moveq	#0,d1
00013B6E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B72 1428 0022                  		move.b	$22(a0),d2
00013B76 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013B7A 6600                       		bne.s	loc_13A70	; if yes, branch
00013B7C 4600                       		not.b	d0		; reverse angle
00013B7E                            
00013B7E                            loc_13A70:
00013B7E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013B82 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013B84 7203                       		moveq	#3,d1
00013B86                            
00013B86                            loc_13A78:
00013B86 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013B8C B302                       		eor.b	d1,d2
00013B8E 8528 0001                  		or.b	d2,1(a0)
00013B92 0828 0005 0022             		btst	#5,$22(a0)
00013B98 6600 0000                  		bne.w	SAnim_Push
00013B9C E808                       		lsr.b	#4,d0		; divide angle by $10
00013B9E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013BA2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013BA6 6A00                       		bpl.s	loc_13A9C
00013BA8 4442                       		neg.w	d2
00013BAA                            
00013BAA                            loc_13A9C:
00013BAA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013BB0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013BB4 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013BB6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013BBC 1200                       		move.b	d0,d1
00013BBE E209                       		lsr.b	#1,d1
00013BC0 D001                       		add.b	d1,d0
00013BC2                            
00013BC2                            loc_13AB4:
00013BC2 D000                       		add.b	d0,d0
00013BC4 1600                       		move.b	d0,d3
00013BC6 4442                       		neg.w	d2
00013BC8 0642 0800                  		addi.w	#$800,d2
00013BCC 6A00                       		bpl.s	loc_13AC2
00013BCE 7400                       		moveq	#0,d2
00013BD0                            
00013BD0                            loc_13AC2:
00013BD0 E04A                       		lsr.w	#8,d2
00013BD2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013BD6 6100 FF42                  		bsr.w	SAnim_Do2
00013BDA D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013BDE 4E75                       		rts	
00013BE0                            ; ===========================================================================
00013BE0                            
00013BE0                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013BE0 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013BE2 6600                       		bne.s	SAnim_Push	; if not, branch
00013BE4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013BE8 6A00                       		bpl.s	loc_13ADE
00013BEA 4442                       		neg.w	d2
00013BEC                            
00013BEC                            loc_13ADE:
00013BEC 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013BF2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013BF6 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013BF8 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013BFE                            
00013BFE                            loc_13AF0:
00013BFE 4442                       		neg.w	d2
00013C00 0642 0400                  		addi.w	#$400,d2
00013C04 6A00                       		bpl.s	loc_13AFA
00013C06 7400                       		moveq	#0,d2
00013C08                            
00013C08                            loc_13AFA:
00013C08 E04A                       		lsr.w	#8,d2
00013C0A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C0E 1228 0022                  		move.b	$22(a0),d1
00013C12 0201 0001                  		andi.b	#1,d1
00013C16 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C1C 8328 0001                  		or.b	d1,1(a0)
00013C20 6000 FEF8                  		bra.w	SAnim_Do2
00013C24                            ; ===========================================================================
00013C24                            
00013C24                            SAnim_Push:				; XREF: SAnim_RollJump
00013C24 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C28 6B00                       		bmi.s	loc_13B1E
00013C2A 4442                       		neg.w	d2
00013C2C                            
00013C2C                            loc_13B1E:
00013C2C 0642 0800                  		addi.w	#$800,d2
00013C30 6A00                       		bpl.s	loc_13B26
00013C32 7400                       		moveq	#0,d2
00013C34                            
00013C34                            loc_13B26:
00013C34 EC4A                       		lsr.w	#6,d2
00013C36 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C3A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013C40 1228 0022                  		move.b	$22(a0),d1
00013C44 0201 0001                  		andi.b	#1,d1
00013C48 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C4E 8328 0001                  		or.b	d1,1(a0)
00013C52 6000 FEC6                  		bra.w	SAnim_Do2
00013C56                            ; End of function Sonic_Animate
00013C56                            
00013C56                            ; ===========================================================================
00013C56                            SonicAniData:
00013C56                            	include "_anim\Sonic.asm"
00013C56                            ; ---------------------------------------------------------------------------
00013C56                            ; Animation script - Sonic
00013C56                            ; ---------------------------------------------------------------------------
00013C56 0000                       		dc.w SonAni_Walk-SonicAniData
00013C58 0000                       		dc.w SonAni_Run-SonicAniData
00013C5A 0000                       		dc.w SonAni_Roll-SonicAniData
00013C5C 0000                       		dc.w SonAni_Roll2-SonicAniData
00013C5E 0000                       		dc.w SonAni_Push-SonicAniData
00013C60 0000                       		dc.w SonAni_Wait-SonicAniData
00013C62 0000                       		dc.w SonAni_Balance-SonicAniData
00013C64 0000                       		dc.w SonAni_LookUp-SonicAniData
00013C66 0000                       		dc.w SonAni_Duck-SonicAniData
00013C68 0000                       		dc.w SonAni_Warp1-SonicAniData
00013C6A 0000                       		dc.w SonAni_Warp2-SonicAniData
00013C6C 0000                       		dc.w SonAni_Warp3-SonicAniData
00013C6E 0000                       		dc.w SonAni_Warp4-SonicAniData
00013C70 0000                       		dc.w SonAni_Stop-SonicAniData
00013C72 0000                       		dc.w SonAni_Float1-SonicAniData
00013C74 0000                       		dc.w SonAni_Float2-SonicAniData
00013C76 0000                       		dc.w SonAni_Spring-SonicAniData
00013C78 0000                       		dc.w SonAni_LZHang-SonicAniData
00013C7A 0000                       		dc.w SonAni_Leap1-SonicAniData
00013C7C 0000                       		dc.w SonAni_Leap2-SonicAniData
00013C7E 0000                       		dc.w SonAni_Surf-SonicAniData
00013C80 0000                       		dc.w SonAni_Bubble-SonicAniData
00013C82 0000                       		dc.w SonAni_Death1-SonicAniData
00013C84 0000                       		dc.w SonAni_Drown-SonicAniData
00013C86 0000                       		dc.w SonAni_Death2-SonicAniData
00013C88 0000                       		dc.w SonAni_Shrink-SonicAniData
00013C8A 0000                       		dc.w SonAni_Hurt-SonicAniData
00013C8C 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013C8E 0000                       		dc.w SonAni_Blank-SonicAniData
00013C90 0000                       		dc.w SonAni_Float3-SonicAniData
00013C92 0000                       		dc.w SonAni_Float4-SonicAniData
00013C94 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013C9C FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013CA4 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013CAC FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013CB4 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013CBC 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013CD2 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013CD6 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013CDA 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013CDE 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013CE2 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013CE6 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013CEA 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013CEE 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013CF2 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013CF6 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013CFE 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013D02 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013D06 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013D0C 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013D12 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013D16 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013D1E 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013D22 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013D26 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013D2A 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013D34 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013D38 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013D3C 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013D40 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013D48 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013D4C                            		even
00013D4C                            		even
00013D4C                            
00013D4C                            ; ---------------------------------------------------------------------------
00013D4C                            ; Sonic	pattern	loading	subroutine
00013D4C                            ; ---------------------------------------------------------------------------
00013D4C                            
00013D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D4C                            
00013D4C                            
00013D4C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013D4C 7000                       		moveq #0,d0
00013D4E 1028 001A                  		move.b $1A(a0),d0 ; load frame number
00013D52 B038 F766                  		cmp.b ($FFFFF766).w,d0
00013D56 6700                       		beq.s locret_13C96
00013D58 11C0 F766                  		move.b d0,($FFFFF766).w
00013D5C 45F9 0000 0000             		lea (SonicDynPLC).l,a2
00013D62 D040                       		add.w d0,d0
00013D64 D4F2 0000                  		adda.w (a2,d0.w),a2
00013D68 7A00                       		moveq #0,d5
00013D6A 1A1A                       		move.b (a2)+,d5
00013D6C 5345                       		subq.w #1,d5
00013D6E 6B00                       		bmi.s locret_13C96
00013D70 383C F000                  		move.w #$F000,d4
00013D74 2C3C 0000 0000             		move.l #Art_Sonic,d6
00013D7A                            
00013D7A                            SPLC_ReadEntry:
00013D7A 7200                       		moveq #0,d1
00013D7C 121A                       		move.b (a2)+,d1
00013D7E E149                       		lsl.w #8,d1
00013D80 121A                       		move.b (a2)+,d1
00013D82 3601                       		move.w d1,d3
00013D84 E04B                       		lsr.w #8,d3
00013D86 0243 00F0                  		andi.w #$F0,d3
00013D8A 0643 0010                  		addi.w #$10,d3
00013D8E 0241 0FFF                  		andi.w #$FFF,d1
00013D92 EB89                       		lsl.l #5,d1
00013D94 D286                       		add.l d6,d1
00013D96 3404                       		move.w d4,d2
00013D98 D843                       		add.w d3,d4
00013D9A D843                       		add.w d3,d4
00013D9C 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013DA2 51CD FFD6                  		dbf d5,SPLC_ReadEntry ; repeat for number of entries
00013DA6                            
00013DA6                            locret_13C96:
00013DA6 4E75                       		rts 
00013DA8                            ; End of function LoadSonicDynPLC
00013DA8                            
00013DA8                            ; ===========================================================================
00013DA8                            ; ---------------------------------------------------------------------------
00013DA8                            ; Object 02 - Sonime
00013DA8                            ; ---------------------------------------------------------------------------
00013DA8                            
00013DA8                            Obj02:
00013DA8 7000                       		moveq	#0,d0
00013DAA 41F8 F5C0                  		lea	(SonimeSST).w,a0
00013DAE 1028 0004                  		move.b	sonime_routine(a0),d0
00013DB2 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
00013DB6 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
00013DBA                            ; ===========================================================================
00013DBA 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
00013DBC 0000                       		dc.w Obj02_MoveIn-Obj02_Index
00013DBE 0000                       		dc.w Obj02_Animate-Obj02_Index
00013DC0                            ; ===========================================================================
00013DC0                            
00013DC0                            Obj02_Init:				; XREF: Obj0A_Index
00013DC0 5428 0004                  		addq.b	#2,sonime_routine(a0)
00013DC4 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
00013DCA 343C F400                  		move.w #(torsoart*$20),d2
00013DCE 363C 00C0                  		move.w #$C0,d3
00013DD2 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013DD8 223C 0000 0000             		move.l #Art_Sonime_Head,d1
00013DDE 343C F580                  		move.w #(headart*$20),d2
00013DE2 363C 0140                  		move.w #$140,d3
00013DE6 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013DEC 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
00013DF2 343C F300                  		move.w #(hairart*$20),d2
00013DF6 363C 0080                  		move.w #$80,d3
00013DFA 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013E00 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00013E06 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
00013E0C                            
00013E0C                            Obj02_MoveIn:
00013E0C 5528 0017                  		subq.b	#2,sonime_movein(a0)
00013E10 1028 0017                  		move.b	sonime_movein(a0),d0
00013E14 1140 0002                  		move.b	d0,sonime_headx(a0)
00013E18 1140 0016                  		move.b	d0,sonime_torsox(a0)
00013E1C 1140 0009                  		move.b	d0,sonime_hairx(a0)
00013E20 4A00                       		tst.b	d0
00013E22 6600 0000                  		bne.w	Obj02_Display
00013E26 5428 0004                  		addq.b	#2,sonime_routine(a0)
00013E2A                            
00013E2A                            Obj02_Animate:
00013E2A 5350                       		subi.w	#1,sonime_headtimer(a0)
00013E2C 6A00 0000                  		bpl.w	Obj02_Face
00013E30 4EB8 28C6                  		jsr	RandomNumber
00013E34 0240 003F                  		andi.w	#$3F,d0
00013E38 0640 0080                  		addi.w	#$80,d0
00013E3C 3080                       		move.w	d0,sonime_headtimer(a0)
00013E3E 4EB8 28C6                  		jsr	RandomNumber
00013E42 0240 0006                  		andi.w	#6,d0
00013E46 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
00013E4A 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
00013E4E                            
00013E4E                            ; ===========================================================================
00013E4E 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
00013E50 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
00013E52 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
00013E54 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
00013E56                            ; ===========================================================================
00013E56                            
00013E56                            Obj02_Up:
00013E56 4A28 0003                  		tst.b	sonime_heady(a0)
00013E5A 6D00                       		blt.s	Obj02_Down
00013E5C 5328 0003                  		subi.b	#1,sonime_heady(a0)
00013E60 6000                       		bra.s	Obj02_Face
00013E62                            
00013E62                            Obj02_Down:
00013E62 4A28 0003                  		tst.b	sonime_heady(a0)
00013E66 6EEE                       		bgt.s	Obj02_Up
00013E68 5228 0003                  		addi.b	#1,sonime_heady(a0)
00013E6C 6000                       		bra.s	Obj02_Face
00013E6E                            
00013E6E                            Obj02_Left:
00013E6E 4A28 0002                  		tst.b	sonime_headx(a0)
00013E72 6D00                       		blt.s	Obj02_Right
00013E74 5328 0002                  		subi.b	#1,sonime_headx(a0)
00013E78 6000                       		bra.s	Obj02_Face
00013E7A                            
00013E7A                            Obj02_Right:
00013E7A 4A28 0002                  		tst.b	sonime_headx(a0)
00013E7E 6EEE                       		bgt.s	Obj02_Left
00013E80 5228 0002                  		addi.b	#1,sonime_headx(a0)
00013E84                            
00013E84                            Obj02_Face:
00013E84 4A38 FE12                  		tst.b	($FFFFFE12).w
00013E88 6700                       		beq.s	@NoWait
00013E8A 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
00013E90 6700                       		beq.s	@UnBlink
00013E92 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00013E96 6A00                       		bpl.s	@NoWait
00013E98 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
00013E9E 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
00013EA4 6000                       		bra.s	@NoWait
00013EA6                            
00013EA6                            	@UnBlink:
00013EA6 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
00013EAA 6A00                       		bpl.s	@NoWait
00013EAC 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
00013EB2 4EB8 28C6                  		jsr	RandomNumber
00013EB6 0240 003F                  		andi.w	#$3F,d0
00013EBA 0640 00B0                  		addi.w	#$B0,d0
00013EBE 3140 0010                  		move.w	d0,sonime_facetimer(a0)
00013EC2 4EB8 28C6                  		jsr	RandomNumber
00013EC6 0200 000F                  		andi.b	#$F,d0
00013ECA 4A00                       		tst.b	d0
00013ECC 6700                       		beq.s	@NoBlink
00013ECE 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
00013ED4 0C00 0001                  		cmpi.b	#1,d0
00013ED8 6700                       		beq.s	@NoBlink
00013EDA 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
00013EE0 0C00 0002                  		cmpi.b	#2,d0
00013EE4 6700                       		beq.s	@NoBlink
00013EE6 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
00013EEC                            
00013EEC                            	@NoBlink:
00013EEC 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
00013EF2 6600                       		bne.s	@NoWait
00013EF4 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
00013EFA 6500                       		bcs.s	@NoWait
00013EFC 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
00013F02                            
00013F02                            	@NoWait:
00013F02 0C78 0800 D010             		cmpi.w	#$800,($FFFFD010).w
00013F08 6D00                       		blt.s	@TooSlow
00013F0A 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00013F10                            
00013F10                            	@TooSlow:
00013F10 0C78 F800 D010             		cmpi.w	#-$800,($FFFFD010).w
00013F16 6E00                       		bgt.s	@TooSlow2
00013F18 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00013F1E                            
00013F1E                            	@TooSlow2:
00013F1E 7800                       		moveq	#0,d4
00013F20 1828 000E                  		move.b	sonime_face(a0),d4
00013F24 B828 000F                  		cmp.b	sonime_faceold(a0),d4
00013F28 6700                       		beq.s	Obj02_Ear
00013F2A 1144 000F                  		move.b	d4,sonime_faceold(a0)
00013F2E ED4C                       		lsl.w	#6,d4
00013F30 3A04                       		move.w	d4,d5
00013F32 DA45                       		add.w	d5,d5
00013F34 D845                       		add.w	d5,d4
00013F36 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00013F3C D244                       		add.w	d4,d1
00013F3E 343C F5C0                  		move.w #(headart*$20+$40),d2
00013F42 363C 0020                  		move.w #$20,d3
00013F46 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013F4C 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
00013F52 D244                       		add.w	d4,d1
00013F54 343C F640                  		move.w #(headart*$20+$C0),d2
00013F58 363C 0020                  		move.w #$20,d3
00013F5C 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013F62 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
00013F68 D244                       		add.w	d4,d1
00013F6A 343C F6C0                  		move.w #(headart*$20+$140),d2
00013F6E 363C 0020                  		move.w #$20,d3
00013F72 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013F78                            
00013F78                            Obj02_Ear:
00013F78 4A28 0012                  		tst.b	sonime_ear(a0)
00013F7C 6600                       		bne.s	@UnTwitch
00013F7E 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00013F82 6A00                       		bpl.s	@NoTwitch
00013F84 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
00013F8A 4EB8 28C6                  		jsr	RandomNumber
00013F8E 0200 0001                  		andi.b	#1,d0
00013F92 5200                       		addq.b	#1,d0
00013F94 1140 0012                  		move.b	d0,sonime_ear(a0)
00013F98 6000                       		bra.s	@NoTwitch
00013F9A                            
00013F9A                            	@UnTwitch:
00013F9A 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00013F9E 6A00                       		bpl.s	@NoTwitch
00013FA0 117C 0000 0012             		move.b	#0,sonime_ear(a0)
00013FA6 4EB8 28C6                  		jsr	RandomNumber
00013FAA 0240 007F                  		andi.w	#$7F,d0
00013FAE 0640 0100                  		addi.w	#$100,d0
00013FB2 3140 0014                  		move.w	d0,sonime_eartimer(a0)
00013FB6                            
00013FB6                            	@NoTwitch:
00013FB6 7800                       		moveq	#0,d4
00013FB8 1828 0012                  		move.b	sonime_ear(a0),d4
00013FBC B828 0013                  		cmp.b	sonime_earold(a0),d4
00013FC0 6700                       		beq.s	Obj02_Display
00013FC2 1144 0013                  		move.b	d4,sonime_earold(a0)
00013FC6 EB0C                       		lsl.b	#5,d4
00013FC8 0204 0020                  		andi.b	#$20,d4
00013FCC 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
00013FD2 D284                       		add.l	d4,d1
00013FD4 343C F580                  		move.w #(headart*$20),d2
00013FD8 363C 0010                  		move.w #$10,d3
00013FDC 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00013FE2 7800                       		moveq	#0,d4
00013FE4 1828 0012                  		move.b	sonime_ear(a0),d4
00013FE8 EB0C                       		lsl.b	#5,d4
00013FEA 0204 0040                  		andi.b	#$40,d4
00013FEE 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
00013FF4 D284                       		add.l	d4,d1
00013FF6 343C F680                  		move.w #(headart*$20+$100),d2
00013FFA 363C 0020                  		move.w #$20,d3
00013FFE 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00014004                            
00014004                            Obj02_Display:
00014004 7200                       		moveq	#0,d1
00014006 7400                       		moveq	#0,d2
00014008 7600                       		moveq	#0,d3
0001400A 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
0001400E 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
00014012 4883                       		ext.w	d3
00014014 4882                       		ext.w	d2
00014016 0643 01A0                  		addi.w	#$1A0,d3
0001401A 0642 0140                  		addi.w	#$140,d2
0001401E 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00014024 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00014028 D241                       		add.w	d1,d1
0001402A D2F1 1000                  		adda.w	(a1,d1.w),a1
0001402E 1219                       		move.b	(a1)+,d1
00014030 5301                       		subq.b	#1,d1
00014032 6B00                       		bmi.s	@nextspr
00014034 6100 97DE                  		bsr.w	DrawSprite_Loop
00014038                            
00014038                            	@nextspr:
00014038 7200                       		moveq	#0,d1
0001403A 7600                       		moveq	#0,d3
0001403C 1628 0016                  		move.b	sonime_torsox(a0),d3
00014040 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00014044 343C 0154                  		move.w	#$154,d2	; set Y pos
00014048 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
0001404E 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00014052 D241                       		add.w	d1,d1
00014054 D2F1 1000                  		adda.w	(a1,d1.w),a1
00014058 1219                       		move.b	(a1)+,d1
0001405A 5301                       		subq.b	#1,d1
0001405C 6B00                       		bmi.s	@nextspr2
0001405E 6100 97B4                  		bsr.w	DrawSprite_Loop
00014062                            
00014062                            	@nextspr2:
00014062 7200                       		moveq	#0,d1
00014064 7400                       		moveq	#0,d2
00014066 7600                       		moveq	#0,d3
00014068 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
0001406C 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00014070 4883                       		ext.w	d3
00014072 4882                       		ext.w	d2
00014074 0643 01A0                  		addi.w	#$1A0,d3
00014078 0642 0153                  		addi.w	#$153,d2
0001407C 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00014082 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00014088 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
0001408E 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00014094 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
0001409A 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
000140A0 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
000140A6 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
000140AA D241                       		add.w	d1,d1
000140AC D2F1 1000                  		adda.w	(a1,d1.w),a1
000140B0 1219                       		move.b	(a1)+,d1
000140B2 5301                       		subq.b	#1,d1
000140B4 6B00                       		bmi.s	Obj02_Done
000140B6 6100 975C                  		bsr.w	DrawSprite_Loop
000140BA                            
000140BA                            Obj02_Done:		
000140BA 4E75                       		rts	
000140BC                            
000140BC                            ; ---------------------------------------------------------------------------
000140BC                            ; Sprite mappings - sonime
000140BC                            ; ---------------------------------------------------------------------------
000140BC                            Map_sonime_torso:
000140BC                            	include "_maps\sonime_torso.asm"
000140BC                            ; ================================================================================
000140BC                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
000140BC                            ; ================================================================================
000140BC                            
000140BC                            DATAUI6DX8OCWY:
000140BC 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
000140BE 01                         DATAUI6DX8OCWY_0: dc.b $1
000140BF F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
000140C4                            	even
000140C4                            	even
000140C4                            
000140C4                            Map_sonime_head:
000140C4                            	include "_maps\sonime_head.asm"
000140C4                            ; ================================================================================
000140C4                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
000140C4                            ; ================================================================================
000140C4                            
000140C4                            DATAYDZD849MEMA:
000140C4 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
000140C6 03                         DATAYDZD849MEMA_0: dc.b $3
000140C7 E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
000140CC 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
000140D1 1000 0013 00               	dc.b $10, $0, $0, $13, $0
000140D6                            	even
000140D6                            	even
000140D6                            
000140D6                            Map_sonime_hair:
000140D6                            	include "_maps\sonime_hair.asm"
000140D6                            ; ================================================================================
000140D6                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
000140D6                            ; ================================================================================
000140D6                            
000140D6                            DATAQZ9CZ11E8T:
000140D6 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
000140D8 03                         DATAQZ9CZ11E8T_0: dc.b $3
000140D9 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
000140DE FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
000140E3 FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
000140E8                            	even
000140E8                            	even
000140E8                            
000140E8                            ; ===========================================================================
000140E8                            ; ---------------------------------------------------------------------------
000140E8                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000140E8                            ; ---------------------------------------------------------------------------
000140E8                            
000140E8                            Obj0A:					; XREF: Obj_Index
000140E8 7000                       		moveq	#0,d0
000140EA 1028 0024                  		move.b	$24(a0),d0
000140EE 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000140F2 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000140F6                            ; ===========================================================================
000140F6 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000140FA 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000140FE 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014102 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014106 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014108                            ; ===========================================================================
00014108                            
00014108                            Obj0A_Main:				; XREF: Obj0A_Index
00014108 5428 0024                  		addq.b	#2,$24(a0)
0001410C 217C 0001 2A52 0004        		move.l	#Map_obj64,4(a0)
00014114 317C 8348 0002             		move.w	#$8348,2(a0)
0001411A 117C 0084 0001             		move.b	#$84,1(a0)
00014120 117C 0010 0019             		move.b	#$10,$19(a0)
00014126 117C 0001 0018             		move.b	#1,$18(a0)
0001412C 1028 0028                  		move.b	$28(a0),d0
00014130 6A00                       		bpl.s	loc_13D00
00014132 5028 0024                  		addq.b	#8,$24(a0)
00014136 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001413E 317C 0440 0002             		move.w	#$440,2(a0)
00014144 0240 007F                  		andi.w	#$7F,d0
00014148 1140 0033                  		move.b	d0,$33(a0)
0001414C 6000 0000                  		bra.w	Obj0A_Countdown
00014150                            ; ===========================================================================
00014150                            
00014150                            loc_13D00:
00014150 1140 001C                  		move.b	d0,$1C(a0)
00014154 3168 0008 0030             		move.w	8(a0),$30(a0)
0001415A 317C FF78 0012             		move.w	#-$88,$12(a0)
00014160                            
00014160                            Obj0A_Animate:				; XREF: Obj0A_Index
00014160 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014166 4EB9 0000 A7A2             		jsr	AnimateSprite
0001416C                            
0001416C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001416C 3038 F646                  		move.w	($FFFFF646).w,d0
00014170 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014174 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014176 117C 0006 0024             		move.b	#6,$24(a0)
0001417C 5E28 001C                  		addq.b	#7,$1C(a0)
00014180 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014186 6700                       		beq.s	Obj0A_Display
00014188 6000                       		bra.s	Obj0A_Display
0001418A                            ; ===========================================================================
0001418A                            
0001418A                            Obj0A_Wobble:
0001418A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001418E 6700                       		beq.s	loc_13D44
00014190 5868 0030                  		addq.w	#4,$30(a0)
00014194                            
00014194                            loc_13D44:
00014194 1028 0026                  		move.b	$26(a0),d0
00014198 5228 0026                  		addq.b	#1,$26(a0)
0001419C 0240 007F                  		andi.w	#$7F,d0
000141A0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000141A6 1031 0000                  		move.b	(a1,d0.w),d0
000141AA 4880                       		ext.w	d0
000141AC D068 0030                  		add.w	$30(a0),d0
000141B0 3140 0008                  		move.w	d0,8(a0)
000141B4 6100                       		bsr.s	Obj0A_ShowNumber
000141B6 4EBA 94CC                  		jsr	SpeedToPos
000141BA 4A28 0001                  		tst.b	1(a0)
000141BE 6A00                       		bpl.s	Obj0A_Delete
000141C0 4EFA 94E8                  		jmp	DisplaySprite
000141C4                            ; ===========================================================================
000141C4                            
000141C4                            Obj0A_Delete:
000141C4 4EFA 9520                  		jmp	DeleteObject
000141C8                            ; ===========================================================================
000141C8                            
000141C8                            Obj0A_Display:				; XREF: Obj0A_Index
000141C8 6100                       		bsr.s	Obj0A_ShowNumber
000141CA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000141D0 4EB9 0000 A7A2             		jsr	AnimateSprite
000141D6 4EFA 94D2                  		jmp	DisplaySprite
000141DA                            ; ===========================================================================
000141DA                            
000141DA                            Obj0A_Delete2:				; XREF: Obj0A_Index
000141DA 4EFA 950A                  		jmp	DeleteObject
000141DE                            ; ===========================================================================
000141DE                            
000141DE                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000141DE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000141E4 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000141E6 5368 0038                  		subq.w	#1,$38(a0)
000141EA 6600                       		bne.s	Obj0A_Display2
000141EC 117C 000E 0024             		move.b	#$E,$24(a0)
000141F2 5E28 001C                  		addq.b	#7,$1C(a0)
000141F6 60D0                       		bra.s	Obj0A_Display
000141F8                            ; ===========================================================================
000141F8                            
000141F8                            Obj0A_Display2:
000141F8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000141FE 4EB9 0000 A7A2             		jsr	AnimateSprite
00014204 4A28 0001                  		tst.b	1(a0)
00014208 6A00                       		bpl.s	Obj0A_Delete3
0001420A 4EFA 949E                  		jmp	DisplaySprite
0001420E                            ; ===========================================================================
0001420E                            
0001420E                            Obj0A_Delete3:
0001420E 4EFA 94D6                  		jmp	DeleteObject
00014212                            ; ===========================================================================
00014212                            
00014212                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014212 4A68 0038                  		tst.w	$38(a0)
00014216 6700                       		beq.s	locret_13E1A
00014218 5368 0038                  		subq.w	#1,$38(a0)
0001421C 6600                       		bne.s	locret_13E1A
0001421E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014224 6400                       		bcc.s	locret_13E1A
00014226 317C 000F 0038             		move.w	#$F,$38(a0)
0001422C 4268 0012                  		clr.w	$12(a0)
00014230 117C 0080 0001             		move.b	#$80,1(a0)
00014236 3028 0008                  		move.w	8(a0),d0
0001423A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001423E 0640 0080                  		addi.w	#$80,d0
00014242 3140 0008                  		move.w	d0,8(a0)
00014246 3028 000C                  		move.w	$C(a0),d0
0001424A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001424E 0640 0080                  		addi.w	#$80,d0
00014252 3140 000A                  		move.w	d0,$A(a0)
00014256 117C 000C 0024             		move.b	#$C,$24(a0)
0001425C                            
0001425C                            locret_13E1A:
0001425C 4E75                       		rts	
0001425E                            ; ===========================================================================
0001425E                            Obj0A_WobbleData:
0001425E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001426F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014280 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014291 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000142A1 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000142AE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000142BB FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000142C8 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000142D5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000142DE                            ; ===========================================================================
000142DE                            
000142DE                            Obj0A_Countdown:			; XREF: Obj0A_Index
000142DE 4A68 002C                  		tst.w	$2C(a0)
000142E2 6600 0000                  		bne.w	loc_13F86
000142E6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000142EC 6400 0000                  		bcc.w	locret_1408C
000142F0 0838 0006 D022             		btst	#6,($FFFFD022).w
000142F6 6700 0000                  		beq.w	locret_1408C
000142FA 5368 0038                  		subq.w	#1,$38(a0)
000142FE 6A00 0000                  		bpl.w	loc_13FAC
00014302 317C 003B 0038             		move.w	#59,$38(a0)
00014308 317C 0001 0036             		move.w	#1,$36(a0)
0001430E 4EB9 0000 28C6             		jsr	(RandomNumber).l
00014314 0240 0001                  		andi.w	#1,d0
00014318 1140 0034                  		move.b	d0,$34(a0)
0001431C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014320 0C40 0019                  		cmpi.w	#$19,d0
00014324 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014326 0C40 0014                  		cmpi.w	#$14,d0
0001432A 6700                       		beq.s	Obj0A_WarnSound
0001432C 0C40 000F                  		cmpi.w	#$F,d0
00014330 6700                       		beq.s	Obj0A_WarnSound
00014332 0C40 000C                  		cmpi.w	#$C,d0
00014336 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014338 6600                       		bne.s	loc_13F02
0001433A 303C 0092                  		move.w	#$92,d0
0001433E 4EB9 0000 125C             		jsr	(PlaySound).l	; play countdown music
00014344                            
00014344                            loc_13F02:
00014344 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001434A 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00014350 5328 0032                  		subq.b	#1,$32(a0)
00014354 6A00                       		bpl.s	Obj0A_ReduceAir
00014356 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001435C 08E8 0007 0036             		bset	#7,$36(a0)
00014362 6000                       		bra.s	Obj0A_ReduceAir
00014364                            ; ===========================================================================
00014364                            
00014364                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014364 303C 00C2                  		move.w	#$C2,d0
00014368 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001436E                            
0001436E                            Obj0A_ReduceAir:
0001436E 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014372 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014376 6100 0000                  		bsr.w	ResumeMusic
0001437A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014380 303C 00B2                  		move.w	#$B2,d0
00014384 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play drowning sound
0001438A 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00014390 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014396 117C 000A 0034             		move.b	#$A,$34(a0)
0001439C 317C 0001 0036             		move.w	#1,$36(a0)
000143A2 317C 0078 002C             		move.w	#$78,$2C(a0)
000143A8 2F08                       		move.l	a0,-(sp)
000143AA 41F8 D000                  		lea	($FFFFD000).w,a0
000143AE 6100 F4F6                  		bsr.w	Sonic_ResetOnFloor
000143B2 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000143B8 08E8 0001 0022             		bset	#1,$22(a0)
000143BE 08E8 0007 0002             		bset	#7,2(a0)
000143C4 317C 0000 0012             		move.w	#0,$12(a0)
000143CA 317C 0000 0010             		move.w	#0,$10(a0)
000143D0 317C 0000 0014             		move.w	#0,$14(a0)
000143D6 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000143DC 205F                       		movea.l	(sp)+,a0
000143DE 4E75                       		rts	
000143E0                            ; ===========================================================================
000143E0                            
000143E0                            loc_13F86:
000143E0 5368 002C                  		subq.w	#1,$2C(a0)
000143E4 6600                       		bne.s	loc_13F94
000143E6 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000143EC 4E75                       		rts	
000143EE                            ; ===========================================================================
000143EE                            
000143EE                            loc_13F94:
000143EE 2F08                       		move.l	a0,-(sp)
000143F0 41F8 D000                  		lea	($FFFFD000).w,a0
000143F4 4EBA 928E                  		jsr	SpeedToPos
000143F8 0668 0010 0012             		addi.w	#$10,$12(a0)
000143FE 205F                       		movea.l	(sp)+,a0
00014400 6000                       		bra.s	loc_13FAC
00014402                            ; ===========================================================================
00014402                            
00014402                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014402 6000                       		bra.s	Obj0A_MakeItem
00014404                            ; ===========================================================================
00014404                            
00014404                            loc_13FAC:
00014404 4A68 0036                  		tst.w	$36(a0)
00014408 6700 0000                  		beq.w	locret_1408C
0001440C 5368 003A                  		subq.w	#1,$3A(a0)
00014410 6A00 0000                  		bpl.w	locret_1408C
00014414                            
00014414                            Obj0A_MakeItem:
00014414 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001441A 0240 000F                  		andi.w	#$F,d0
0001441E 3140 003A                  		move.w	d0,$3A(a0)
00014422 4EBA 9712                  		jsr	SingleObjLoad
00014426 6600 0000                  		bne.w	locret_1408C
0001442A 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001442E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014434 7006                       		moveq	#6,d0
00014436 0838 0000 D022             		btst	#0,($FFFFD022).w
0001443C 6700                       		beq.s	loc_13FF2
0001443E 4440                       		neg.w	d0
00014440 137C 0040 0026             		move.b	#$40,$26(a1)
00014446                            
00014446                            loc_13FF2:
00014446 D169 0008                  		add.w	d0,8(a1)
0001444A 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014450 137C 0006 0028             		move.b	#6,$28(a1)
00014456 4A68 002C                  		tst.w	$2C(a0)
0001445A 6700 0000                  		beq.w	loc_1403E
0001445E 0268 0007 003A             		andi.w	#7,$3A(a0)
00014464 0668 0000 003A             		addi.w	#0,$3A(a0)
0001446A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001446E 0440 000C                  		subi.w	#$C,d0
00014472 3340 000C                  		move.w	d0,$C(a1)
00014476 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001447C 1340 0026                  		move.b	d0,$26(a1)
00014480 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014484 0200 0003                  		andi.b	#3,d0
00014488 6600                       		bne.s	loc_14082
0001448A 137C 000E 0028             		move.b	#$E,$28(a1)
00014490 6000                       		bra.s	loc_14082
00014492                            ; ===========================================================================
00014492                            
00014492                            loc_1403E:
00014492 0828 0007 0036             		btst	#7,$36(a0)
00014498 6700                       		beq.s	loc_14082
0001449A 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001449E E24A                       		lsr.w	#1,d2
000144A0 4EB9 0000 28C6             		jsr	(RandomNumber).l
000144A6 0240 0003                  		andi.w	#3,d0
000144AA 6600                       		bne.s	loc_1406A
000144AC 08E8 0006 0036             		bset	#6,$36(a0)
000144B2 6600                       		bne.s	loc_14082
000144B4 1342 0028                  		move.b	d2,$28(a1)
000144B8 337C 001C 0038             		move.w	#$1C,$38(a1)
000144BE                            
000144BE                            loc_1406A:
000144BE 4A28 0034                  		tst.b	$34(a0)
000144C2 6600                       		bne.s	loc_14082
000144C4 08E8 0006 0036             		bset	#6,$36(a0)
000144CA 6600                       		bne.s	loc_14082
000144CC 1342 0028                  		move.b	d2,$28(a1)
000144D0 337C 001C 0038             		move.w	#$1C,$38(a1)
000144D6                            
000144D6                            loc_14082:
000144D6 5328 0034                  		subq.b	#1,$34(a0)
000144DA 6A00                       		bpl.s	locret_1408C
000144DC 4268 0036                  		clr.w	$36(a0)
000144E0                            
000144E0                            locret_1408C:
000144E0 4E75                       		rts	
000144E2                            
000144E2                            ; ---------------------------------------------------------------------------
000144E2                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000144E2                            ; ---------------------------------------------------------------------------
000144E2                            
000144E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144E2                            
000144E2                            
000144E2                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000144E2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000144E8 6200                       		bhi.s	loc_140AC
000144EA 303C 0082                  		move.w	#$82,d0		; play LZ music
000144EE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
000144F4 6600                       		bne.s	loc_140A6
000144F6 303C 0086                  		move.w	#$86,d0		; play SBZ music
000144FA                            
000144FA                            loc_140A6:
000144FA 4EB9 0000 125C             		jsr	(PlaySound).l
00014500 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00014506 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001450C                            
0001450C                            loc_140AC:
0001450C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014512 4238 D372                  		clr.b	($FFFFD372).w
00014516 4E75                       		rts	
00014518                            ; End of function ResumeMusic
00014518                            
00014518                            ; ===========================================================================
00014518                            Ani_obj0A:
00014518                            	include "_anim\obj0A.asm"
00014518                            ; ---------------------------------------------------------------------------
00014518                            ; Animation script - countdown numbers and bubbles (LZ)
00014518                            ; ---------------------------------------------------------------------------
00014518 0000                       		dc.w byte_140D6-Ani_obj0A
0001451A 0000                       		dc.w byte_140E0-Ani_obj0A
0001451C 0000                       		dc.w byte_140EA-Ani_obj0A
0001451E 0000                       		dc.w byte_140F4-Ani_obj0A
00014520 0000                       		dc.w byte_140FE-Ani_obj0A
00014522 0000                       		dc.w byte_14108-Ani_obj0A
00014524 0000                       		dc.w byte_14112-Ani_obj0A
00014526 0000                       		dc.w byte_14118-Ani_obj0A
00014528 0000                       		dc.w byte_14120-Ani_obj0A
0001452A 0000                       		dc.w byte_14128-Ani_obj0A
0001452C 0000                       		dc.w byte_14130-Ani_obj0A
0001452E 0000                       		dc.w byte_14138-Ani_obj0A
00014530 0000                       		dc.w byte_14140-Ani_obj0A
00014532 0000                       		dc.w byte_14148-Ani_obj0A
00014534 0000                       		dc.w byte_1414A-Ani_obj0A
00014536 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014540 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001454A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014554 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001455E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014568 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014572 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014578 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014580 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014588 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014590 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014598 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000145A0 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000145A8 0EFC                       byte_14148:	dc.b $E, $FC
000145AA 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000145B0                            		even
000145B0                            		even
000145B0                            
000145B0                            ; ---------------------------------------------------------------------------
000145B0                            ; Sprite mappings - drowning countdown numbers (LZ)
000145B0                            ; ---------------------------------------------------------------------------
000145B0                            Map_obj0A:
000145B0                            	include "_maps\obj0A.asm"
000145B0                            ; ---------------------------------------------------------------------------
000145B0                            ; Sprite mappings - drowning countdown numbers (LZ)
000145B0                            ; ---------------------------------------------------------------------------
000145B0 0000                       		dc.w byte_14152-Map_obj0A
000145B2 01                         byte_14152:	dc.b 1
000145B3 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000145B8                            		even
000145B8                            		even
000145B8                            
000145B8                            ; ===========================================================================
000145B8                            ; ---------------------------------------------------------------------------
000145B8                            ; Object 38 - shield
000145B8                            ; ---------------------------------------------------------------------------
000145B8                            
000145B8                            Obj38: ; XREF: Obj_Index
000145B8 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
000145BE 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000145C2                            ; In this case, VRAM = $541*20
000145C2 363C 0200                  		move.w #$200,d3
000145C6 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
000145CC                            ; ---------------------------------------------------------------------------
000145CC                            
000145CC                            ShieldObj_Main:
000145CC 7000                       		moveq #0,d0
000145CE 1028 0024                  		move.b $24(a0),d0
000145D2 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000145D6 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000145DA                            ; ===========================================================================
000145DA                            Shield_Index:
000145DA 0000                       		dc.w Shield_Init-Shield_Index
000145DC 0000                       		dc.w ShieldChecks-Shield_Index
000145DE                            ; ===========================================================================
000145DE                            
000145DE                            Shield_Init:
000145DE 5428 0024                  		addq.b #2,$24(a0)
000145E2 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
000145EA 117C 0004 0001             		move.b #4,1(a0)
000145F0 117C 0001 0018             		move.b #1,$18(a0)
000145F6 117C 0018 0019             		move.b #$18,$19(a0)
000145FC 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00014602 0838 0007 D002             		btst #7,($FFFFD002).w
00014608 6700                       		beq.s ShieldChecks
0001460A 08E8 0007 0002             		bset #7,2(a0)
00014610                            ; ---------------------------------------------------------------------------
00014610                            
00014610                            ShieldChecks:
00014610 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00014614 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00014616 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001461A 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001461C                            
0001461C                            ShieldProperties:
0001461C 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00014622 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00014628 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001462E 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
00014634 4EB9 0000 A7A2             		jsr AnimateSprite
0001463A 4EFA 906E                  		jmp DisplaySprite
0001463E                            
0001463E                            SonicHasShield:
0001463E 4E75                       		rts
00014640                            
00014640                            jmp_DeleteObj38: ; loc_12648:
00014640 4EFA 90A4                  		jmp DeleteObject 
00014644                            
00014644                            ; ---------------------------------------------------------------------------
00014644                            ; Object 4A - New Invincibility Object
00014644                            ; ---------------------------------------------------------------------------
00014644                            
00014644                            Obj4A: ; XREF: Obj_Index
00014644 223C 0000 0000             		move.l #UnC_Stars,d1
0001464A 343C A820                  		move.w #$A820,d2
0001464E 363C 0240                  		move.w #$240,d3
00014652 4EB9 0000 48F4             		jsr (QueueDMATransfer).l
00014658                            
00014658                            Invincibility_Main:
00014658 7000                       		moveq #0,d0
0001465A 1028 0024                  		move.b $24(a0),d0
0001465E                            
0001465E                            Invincibility_Init:
0001465E 5428 0024                  		addq.b #2,$24(a0)
00014662 217C 0000 0000 0004        		move.l #Map_obj38,4(a0) ; loads mapping
0001466A 117C 0004 0001             		move.b #4,1(a0)
00014670 117C 0001 0018             		move.b #1,$18(a0)
00014676 117C 0010 0019             		move.b #$10,$19(a0)
0001467C 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00014682                            ; ===========================================================================
00014682                            
00014682                            Obj4A_Stars: ; XREF: Obj38_Index
00014682 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00014686 6700                       		beq.s Obj4A_Delete2 ; if not, branch
00014688 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
0001468C 1228 001C                  		move.b $1C(a0),d1
00014690 5301                       		subq.b #1,d1
00014692                            ; ===========================================================================
00014692                            
00014692                            Obj4A_StarTrail: ; XREF: Obj4A_Stars
00014692 E709                       		lsl.b #3,d1
00014694 1401                       		move.b d1,d2
00014696 D201                       		add.b d1,d1
00014698 D202                       		add.b d2,d1
0001469A 5801                       		addq.b #4,d1
0001469C 9001                       		sub.b d1,d0
0001469E 1228 0030                  		move.b $30(a0),d1
000146A2 9001                       		sub.b d1,d0
000146A4 5801                       		addq.b #4,d1
000146A6 0C01 0018                  		cmpi.b #$18,d1
000146AA 6500                       		bcs.s Obj4A_StarTrail2
000146AC 7200                       		moveq #0,d1
000146AE                            
000146AE                            Obj4A_StarTrail2:
000146AE 1141 0030                  		move.b d1,$30(a0)
000146B2                            
000146B2                            Obj4A_StarTrail2a:
000146B2 43F8 CB00                  		lea ($FFFFCB00).w,a1
000146B6 43F1 0000                  		lea (a1,d0.w),a1
000146BA 3159 0008                  		move.w (a1)+,8(a0)
000146BE 3159 000C                  		move.w (a1)+,$C(a0)
000146C2 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000146C8 43F9 0000 0000             		lea (Ani_obj38).l,a1
000146CE 4EB9 0000 A7A2             		jsr (AnimateSprite).l
000146D4 4EF9 0000 D6AA             		jmp (DisplaySprite).l
000146DA                            ; ===========================================================================
000146DA                            
000146DA                            Obj4A_Delete2: ; XREF: Obj4A_Stars
000146DA 4EF9 0000 D6E6             		jmp (DeleteObject).l 
000146E0                            
000146E0                            ; ===========================================================================
000146E0                            ; ---------------------------------------------------------------------------
000146E0                            ; Object 08 - water splash (LZ)
000146E0                            ; ---------------------------------------------------------------------------
000146E0                            
000146E0                            Obj08:					; XREF: Obj_Index
000146E0 7000                       		moveq	#0,d0
000146E2 1028 0024                  		move.b	$24(a0),d0
000146E6 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000146EA 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000146EE                            ; ===========================================================================
000146EE 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000146F0 0000                       		dc.w Obj08_Display-Obj08_Index
000146F2 0000                       		dc.w Obj08_Delete-Obj08_Index
000146F4                            ; ===========================================================================
000146F4                            
000146F4                            Obj08_Main:				; XREF: Obj08_Index
000146F4 5428 0024                  		addq.b	#2,$24(a0)
000146F8 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014700 0028 0004 0001             		ori.b	#4,1(a0)
00014706 117C 0001 0018             		move.b	#1,$18(a0)
0001470C 117C 0010 0019             		move.b	#$10,$19(a0)
00014712 317C 4259 0002             		move.w	#$4259,2(a0)
00014718 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001471E                            
0001471E                            Obj08_Display:				; XREF: Obj08_Index
0001471E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014724 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001472A 4EB9 0000 A7A2             		jsr	AnimateSprite
00014730 4EFA 8F78                  		jmp	DisplaySprite
00014734                            ; ===========================================================================
00014734                            
00014734                            Obj08_Delete:				; XREF: Obj08_Index
00014734 4EFA 8FB0                  		jmp	DeleteObject	; delete when animation	is complete
00014738                            ; ===========================================================================
00014738                            Ani_obj38:
00014738                            	include "_anim\obj38.asm"
00014738                            ; ---------------------------------------------------------------------------
00014738                            ; Animation script - shield and invincibility stars
00014738                            ; ---------------------------------------------------------------------------
00014738 0000                       		dc.w byte_14356-Ani_obj38
0001473A 0000                       		dc.w byte_1435E-Ani_obj38
0001473C 0000                       		dc.w byte_14364-Ani_obj38
0001473E 0000                       		dc.w byte_1437E-Ani_obj38
00014740 0000                       		dc.w byte_14398-Ani_obj38
00014742 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001474A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014750 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014761 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001476A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001477B 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014784 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014795 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001479E                            		even
0001479E                            		even
0001479E                            
0001479E                            ; ---------------------------------------------------------------------------
0001479E                            ; Sprite mappings - shield and invincibility stars
0001479E                            ; ---------------------------------------------------------------------------
0001479E                            Map_obj38:
0001479E                            	include "_maps\obj38.asm"
0001479E                            ; ---------------------------------------------------------------------------
0001479E                            ; Sprite mappings - shield and invincibility stars
0001479E                            ; ---------------------------------------------------------------------------
0001479E 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000147A2 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000147A6 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000147AA 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000147AE 04                         byte_143C2:	dc.b 4
000147AF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000147B4 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000147B9 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000147BE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000147C3 04                         byte_143D7:	dc.b 4
000147C4 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000147C9 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000147CE 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000147D3 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000147D8 04                         byte_143EC:	dc.b 4
000147D9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000147DE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000147E3 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000147E8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000147ED 04                         byte_14401:	dc.b 4
000147EE E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000147F3 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000147F8 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000147FD 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014802 04                         byte_14416:	dc.b 4
00014803 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014808 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001480D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014812 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014817 04                         byte_1442B:	dc.b 4
00014818 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001481D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014822 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014827 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001482C 04                         byte_14440:	dc.b 4
0001482D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014832 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014837 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001483C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014842 00                         		even
00014842 00                         		even
00014842                            
00014842                            Ani_obj4A:
00014842                            	include "_anim\obj4A.asm"
00014842                            ; ---------------------------------------------------------------------------
00014842                            ; Animation script - special stage entry effect from beta
00014842                            ; ---------------------------------------------------------------------------
00014842 0000                       		dc.w byte_14458-Ani_obj4A
00014844 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014858                            		even
00014858                            		even
00014858                            
00014858                            ; ---------------------------------------------------------------------------
00014858                            ; Sprite mappings - special stage entry	from beta
00014858                            ; ---------------------------------------------------------------------------
00014858                            Map_obj4A:
00014858                            	include "_maps\obj4A.asm"
00014858                            ; ---------------------------------------------------------------------------
00014858                            ; Sprite mappings - special stage entry	from beta
00014858                            ; ---------------------------------------------------------------------------
00014858 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001485C 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014860 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014864 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014868 03                         byte_1447C:	dc.b 3
00014869 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001486E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014873 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014878 03                         byte_1448C:	dc.b 3
00014879 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001487E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014883 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014888 05                         byte_1449C:	dc.b 5
00014889 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001488E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014893 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014898 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001489D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000148A2 09                         byte_144B6:	dc.b 9
000148A3 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000148A8 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000148AD 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000148B2 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000148B7 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000148BC F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000148C1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000148C6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000148CB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000148D0 12                         byte_144E4:	dc.b $12
000148D1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000148D6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000148DB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000148E0 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000148E5 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000148EA 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000148EF 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000148F4 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000148F9 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000148FE 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014903 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014908 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001490D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014912 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014917 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001491C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014921 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014926 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001492B 11                         byte_1453F:	dc.b $11
0001492C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014931 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014936 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001493B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014940 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014945 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001494A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001494F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014954 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014959 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001495E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014963 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014968 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001496D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014972 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014977 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001497C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014981 09                         byte_14595:	dc.b 9
00014982 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014987 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001498C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014991 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014996 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001499B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000149A0 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000149A5 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000149AA 04                         		dc.b 4
000149AB 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000149B0                            		even
000149B0                            		even
000149B0                            
000149B0                            Ani_obj08:
000149B0                            	include "_anim\obj08.asm"
000149B0                            ; ---------------------------------------------------------------------------
000149B0                            ; Animation script - water splash (LZ)
000149B0                            ; ---------------------------------------------------------------------------
000149B0 0000                       		dc.w byte_145C6-Ani_obj08
000149B2 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000149B8                            		even
000149B8                            		even
000149B8                            
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            ; Sprite mappings - water splash (LZ)
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            Map_obj08:
000149B8                            	include "_maps\obj08.asm"
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            ; Sprite mappings - water splash (LZ)
000149B8                            ; ---------------------------------------------------------------------------
000149B8 0000                       		dc.w byte_145D2-Map_obj08
000149BA 0000                       		dc.w byte_145DD-Map_obj08
000149BC 0000                       		dc.w byte_145E8-Map_obj08
000149BE 02                         byte_145D2:	dc.b 2
000149BF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000149C4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000149C9 02                         byte_145DD:	dc.b 2
000149CA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000149CF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000149D4 01                         byte_145E8:	dc.b 1
000149D5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000149DA                            		even
000149DA                            		even
000149DA                            
000149DA                            ; ---------------------------------------------------------------------------
000149DA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000149DA                            ; ---------------------------------------------------------------------------
000149DA                            
000149DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149DA                            
000149DA                            
000149DA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000149DA 0828 0003 0022             		btst	#3,$22(a0)
000149E0 6700                       		beq.s	loc_14602
000149E2 7000                       		moveq	#0,d0
000149E4 11C0 F768                  		move.b	d0,($FFFFF768).w
000149E8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000149EC 4E75                       		rts	
000149EE                            ; ===========================================================================
000149EE                            
000149EE                            loc_14602:
000149EE 7003                       		moveq	#3,d0
000149F0 11C0 F768                  		move.b	d0,($FFFFF768).w
000149F4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000149F8 1028 0026                  		move.b	$26(a0),d0
000149FC 0600 0020                  		addi.b	#$20,d0
00014A00 6A00                       		bpl.s	loc_14624
00014A02 1028 0026                  		move.b	$26(a0),d0
00014A06 6A00                       		bpl.s	loc_1461E
00014A08 5300                       		subq.b	#1,d0
00014A0A                            
00014A0A                            loc_1461E:
00014A0A 0600 0020                  		addi.b	#$20,d0
00014A0E 6000                       		bra.s	loc_14630
00014A10                            ; ===========================================================================
00014A10                            
00014A10                            loc_14624:
00014A10 1028 0026                  		move.b	$26(a0),d0
00014A14 6A00                       		bpl.s	loc_1462C
00014A16 5200                       		addq.b	#1,d0
00014A18                            
00014A18                            loc_1462C:
00014A18 0600 001F                  		addi.b	#$1F,d0
00014A1C                            
00014A1C                            loc_14630:
00014A1C 0200 00C0                  		andi.b	#$C0,d0
00014A20 0C00 0040                  		cmpi.b	#$40,d0
00014A24 6700 0000                  		beq.w	Sonic_WalkVertL
00014A28 0C00 0080                  		cmpi.b	#$80,d0
00014A2C 6700 0000                  		beq.w	Sonic_WalkCeiling
00014A30 0C00 00C0                  		cmpi.b	#$C0,d0
00014A34 6700 0000                  		beq.w	Sonic_WalkVertR
00014A38 3428 000C                  		move.w	$C(a0),d2
00014A3C 3628 0008                  		move.w	8(a0),d3
00014A40 7000                       		moveq	#0,d0
00014A42 1028 0016                  		move.b	$16(a0),d0
00014A46 4880                       		ext.w	d0
00014A48 D440                       		add.w	d0,d2
00014A4A 1028 0017                  		move.b	$17(a0),d0
00014A4E 4880                       		ext.w	d0
00014A50 D640                       		add.w	d0,d3
00014A52 49F8 F768                  		lea	($FFFFF768).w,a4
00014A56 367C 0010                  		movea.w	#$10,a3
00014A5A 3C3C 0000                  		move.w	#0,d6
00014A5E 7A0D                       		moveq	#$D,d5
00014A60 6100 0000                  		bsr.w	FindFloor
00014A64 3F01                       		move.w	d1,-(sp)
00014A66 3428 000C                  		move.w	$C(a0),d2
00014A6A 3628 0008                  		move.w	8(a0),d3
00014A6E 7000                       		moveq	#0,d0
00014A70 1028 0016                  		move.b	$16(a0),d0
00014A74 4880                       		ext.w	d0
00014A76 D440                       		add.w	d0,d2
00014A78 1028 0017                  		move.b	$17(a0),d0
00014A7C 4880                       		ext.w	d0
00014A7E 4440                       		neg.w	d0
00014A80 D640                       		add.w	d0,d3
00014A82 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014A86 367C 0010                  		movea.w	#$10,a3
00014A8A 3C3C 0000                  		move.w	#0,d6
00014A8E 7A0D                       		moveq	#$D,d5
00014A90 6100 0000                  		bsr.w	FindFloor
00014A94 301F                       		move.w	(sp)+,d0
00014A96 6100 0000                  		bsr.w	Sonic_Angle
00014A9A 4A41                       		tst.w	d1
00014A9C 6700                       		beq.s	locret_146BE
00014A9E 6A00                       		bpl.s	loc_146C0
00014AA0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014AA4 6D00                       		blt.s	locret_146E6
00014AA6 D368 000C                  		add.w	d1,$C(a0)
00014AAA                            
00014AAA                            locret_146BE:
00014AAA 4E75                       		rts	
00014AAC                            ; ===========================================================================
00014AAC                            
00014AAC                            loc_146C0:
00014AAC 0C41 000E                  		cmpi.w	#$E,d1
00014AB0 6E00                       		bgt.s	loc_146CC
00014AB2                            
00014AB2                            loc_146C6:
00014AB2 D368 000C                  		add.w	d1,$C(a0)
00014AB6 4E75                       		rts	
00014AB8                            ; ===========================================================================
00014AB8                            
00014AB8                            loc_146CC:
00014AB8 4A28 0038                  		tst.b	$38(a0)
00014ABC 66F4                       		bne.s	loc_146C6
00014ABE 08E8 0001 0022             		bset	#1,$22(a0)
00014AC4 08A8 0005 0022             		bclr	#5,$22(a0)
00014ACA 117C 0001 001D             		move.b	#1,$1D(a0)
00014AD0 4E75                       		rts	
00014AD2                            ; ===========================================================================
00014AD2                            
00014AD2                            locret_146E6:
00014AD2 4E75                       		rts	
00014AD4                            ; End of function Sonic_AnglePos
00014AD4                            
00014AD4                            ; ===========================================================================
00014AD4 2428 0008                  		move.l	8(a0),d2
00014AD8 3028 0010                  		move.w	$10(a0),d0
00014ADC 48C0                       		ext.l	d0
00014ADE E180                       		asl.l	#8,d0
00014AE0 9480                       		sub.l	d0,d2
00014AE2 2142 0008                  		move.l	d2,8(a0)
00014AE6 303C 0038                  		move.w	#$38,d0
00014AEA 48C0                       		ext.l	d0
00014AEC E180                       		asl.l	#8,d0
00014AEE 9680                       		sub.l	d0,d3
00014AF0 2143 000C                  		move.l	d3,$C(a0)
00014AF4 4E75                       		rts	
00014AF6                            ; ===========================================================================
00014AF6                            
00014AF6                            locret_1470A:
00014AF6 4E75                       		rts	
00014AF8                            ; ===========================================================================
00014AF8 2628 000C                  		move.l	$C(a0),d3
00014AFC 3028 0012                  		move.w	$12(a0),d0
00014B00 0440 0038                  		subi.w	#$38,d0
00014B04 3140 0012                  		move.w	d0,$12(a0)
00014B08 48C0                       		ext.l	d0
00014B0A E180                       		asl.l	#8,d0
00014B0C 9680                       		sub.l	d0,d3
00014B0E 2143 000C                  		move.l	d3,$C(a0)
00014B12 4E75                       		rts	
00014B14 4E75                       		rts	
00014B16                            ; ===========================================================================
00014B16 2428 0008                  		move.l	8(a0),d2
00014B1A 2628 000C                  		move.l	$C(a0),d3
00014B1E 3028 0010                  		move.w	$10(a0),d0
00014B22 48C0                       		ext.l	d0
00014B24 E180                       		asl.l	#8,d0
00014B26 9480                       		sub.l	d0,d2
00014B28 3028 0012                  		move.w	$12(a0),d0
00014B2C 48C0                       		ext.l	d0
00014B2E E180                       		asl.l	#8,d0
00014B30 9680                       		sub.l	d0,d3
00014B32 2142 0008                  		move.l	d2,8(a0)
00014B36 2143 000C                  		move.l	d3,$C(a0)
00014B3A 4E75                       		rts	
00014B3C                            
00014B3C                            ; ---------------------------------------------------------------------------
00014B3C                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014B3C                            ; ---------------------------------------------------------------------------
00014B3C                            
00014B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B3C                            
00014B3C                            
00014B3C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014B3C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014B40 B240                       		cmp.w	d0,d1
00014B42 6F00                       		ble.s	loc_1475E
00014B44 1438 F768                  		move.b	($FFFFF768).w,d2
00014B48 3200                       		move.w	d0,d1
00014B4A                            
00014B4A                            loc_1475E:
00014B4A 0802 0000                  		btst	#0,d2
00014B4E 6600                       		bne.s	loc_1476A
00014B50 1142 0026                  		move.b	d2,$26(a0)
00014B54 4E75                       		rts	
00014B56                            ; ===========================================================================
00014B56                            
00014B56                            loc_1476A:
00014B56 1428 0026                  		move.b	$26(a0),d2
00014B5A 0602 0020                  		addi.b	#$20,d2
00014B5E 0202 00C0                  		andi.b	#$C0,d2
00014B62 1142 0026                  		move.b	d2,$26(a0)
00014B66 4E75                       		rts	
00014B68                            ; End of function Sonic_Angle
00014B68                            
00014B68                            ; ---------------------------------------------------------------------------
00014B68                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014B68                            ; ---------------------------------------------------------------------------
00014B68                            
00014B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B68                            
00014B68                            
00014B68                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014B68 3428 000C                  		move.w	$C(a0),d2
00014B6C 3628 0008                  		move.w	8(a0),d3
00014B70 7000                       		moveq	#0,d0
00014B72 1028 0017                  		move.b	$17(a0),d0
00014B76 4880                       		ext.w	d0
00014B78 4440                       		neg.w	d0
00014B7A D440                       		add.w	d0,d2
00014B7C 1028 0016                  		move.b	$16(a0),d0
00014B80 4880                       		ext.w	d0
00014B82 D640                       		add.w	d0,d3
00014B84 49F8 F768                  		lea	($FFFFF768).w,a4
00014B88 367C 0010                  		movea.w	#$10,a3
00014B8C 3C3C 0000                  		move.w	#0,d6
00014B90 7A0D                       		moveq	#$D,d5
00014B92 6100 0000                  		bsr.w	FindWall
00014B96 3F01                       		move.w	d1,-(sp)
00014B98 3428 000C                  		move.w	$C(a0),d2
00014B9C 3628 0008                  		move.w	8(a0),d3
00014BA0 7000                       		moveq	#0,d0
00014BA2 1028 0017                  		move.b	$17(a0),d0
00014BA6 4880                       		ext.w	d0
00014BA8 D440                       		add.w	d0,d2
00014BAA 1028 0016                  		move.b	$16(a0),d0
00014BAE 4880                       		ext.w	d0
00014BB0 D640                       		add.w	d0,d3
00014BB2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014BB6 367C 0010                  		movea.w	#$10,a3
00014BBA 3C3C 0000                  		move.w	#0,d6
00014BBE 7A0D                       		moveq	#$D,d5
00014BC0 6100 0000                  		bsr.w	FindWall
00014BC4 301F                       		move.w	(sp)+,d0
00014BC6 6100 FF74                  		bsr.w	Sonic_Angle
00014BCA 4A41                       		tst.w	d1
00014BCC 6700                       		beq.s	locret_147F0
00014BCE 6A00                       		bpl.s	loc_147F2
00014BD0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014BD4 6D00 FF20                  		blt.w	locret_1470A
00014BD8 D368 0008                  		add.w	d1,8(a0)
00014BDC                            
00014BDC                            locret_147F0:
00014BDC 4E75                       		rts	
00014BDE                            ; ===========================================================================
00014BDE                            
00014BDE                            loc_147F2:
00014BDE 0C41 000E                  		cmpi.w	#$E,d1
00014BE2 6E00                       		bgt.s	loc_147FE
00014BE4                            
00014BE4                            loc_147F8:
00014BE4 D368 0008                  		add.w	d1,8(a0)
00014BE8 4E75                       		rts	
00014BEA                            ; ===========================================================================
00014BEA                            
00014BEA                            loc_147FE:
00014BEA 4A28 0038                  		tst.b	$38(a0)
00014BEE 66F4                       		bne.s	loc_147F8
00014BF0 08E8 0001 0022             		bset	#1,$22(a0)
00014BF6 08A8 0005 0022             		bclr	#5,$22(a0)
00014BFC 117C 0001 001D             		move.b	#1,$1D(a0)
00014C02 4E75                       		rts	
00014C04                            ; End of function Sonic_WalkVertR
00014C04                            
00014C04                            ; ---------------------------------------------------------------------------
00014C04                            ; Subroutine allowing Sonic to walk upside-down
00014C04                            ; ---------------------------------------------------------------------------
00014C04                            
00014C04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C04                            
00014C04                            
00014C04                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014C04 3428 000C                  		move.w	$C(a0),d2
00014C08 3628 0008                  		move.w	8(a0),d3
00014C0C 7000                       		moveq	#0,d0
00014C0E 1028 0016                  		move.b	$16(a0),d0
00014C12 4880                       		ext.w	d0
00014C14 9440                       		sub.w	d0,d2
00014C16 0A42 000F                  		eori.w	#$F,d2
00014C1A 1028 0017                  		move.b	$17(a0),d0
00014C1E 4880                       		ext.w	d0
00014C20 D640                       		add.w	d0,d3
00014C22 49F8 F768                  		lea	($FFFFF768).w,a4
00014C26 367C FFF0                  		movea.w	#-$10,a3
00014C2A 3C3C 1000                  		move.w	#$1000,d6
00014C2E 7A0D                       		moveq	#$D,d5
00014C30 6100 0000                  		bsr.w	FindFloor
00014C34 3F01                       		move.w	d1,-(sp)
00014C36 3428 000C                  		move.w	$C(a0),d2
00014C3A 3628 0008                  		move.w	8(a0),d3
00014C3E 7000                       		moveq	#0,d0
00014C40 1028 0016                  		move.b	$16(a0),d0
00014C44 4880                       		ext.w	d0
00014C46 9440                       		sub.w	d0,d2
00014C48 0A42 000F                  		eori.w	#$F,d2
00014C4C 1028 0017                  		move.b	$17(a0),d0
00014C50 4880                       		ext.w	d0
00014C52 9640                       		sub.w	d0,d3
00014C54 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C58 367C FFF0                  		movea.w	#-$10,a3
00014C5C 3C3C 1000                  		move.w	#$1000,d6
00014C60 7A0D                       		moveq	#$D,d5
00014C62 6100 0000                  		bsr.w	FindFloor
00014C66 301F                       		move.w	(sp)+,d0
00014C68 6100 FED2                  		bsr.w	Sonic_Angle
00014C6C 4A41                       		tst.w	d1
00014C6E 6700                       		beq.s	locret_14892
00014C70 6A00                       		bpl.s	loc_14894
00014C72 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C76 6D00 FE5A                  		blt.w	locret_146E6
00014C7A 9368 000C                  		sub.w	d1,$C(a0)
00014C7E                            
00014C7E                            locret_14892:
00014C7E 4E75                       		rts	
00014C80                            ; ===========================================================================
00014C80                            
00014C80                            loc_14894:
00014C80 0C41 000E                  		cmpi.w	#$E,d1
00014C84 6E00                       		bgt.s	loc_148A0
00014C86                            
00014C86                            loc_1489A:
00014C86 9368 000C                  		sub.w	d1,$C(a0)
00014C8A 4E75                       		rts	
00014C8C                            ; ===========================================================================
00014C8C                            
00014C8C                            loc_148A0:
00014C8C 4A28 0038                  		tst.b	$38(a0)
00014C90 66F4                       		bne.s	loc_1489A
00014C92 08E8 0001 0022             		bset	#1,$22(a0)
00014C98 08A8 0005 0022             		bclr	#5,$22(a0)
00014C9E 117C 0001 001D             		move.b	#1,$1D(a0)
00014CA4 4E75                       		rts	
00014CA6                            ; End of function Sonic_WalkCeiling
00014CA6                            
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014CA6                            ; ---------------------------------------------------------------------------
00014CA6                            
00014CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CA6                            
00014CA6                            
00014CA6                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014CA6 3428 000C                  		move.w	$C(a0),d2
00014CAA 3628 0008                  		move.w	8(a0),d3
00014CAE 7000                       		moveq	#0,d0
00014CB0 1028 0017                  		move.b	$17(a0),d0
00014CB4 4880                       		ext.w	d0
00014CB6 9440                       		sub.w	d0,d2
00014CB8 1028 0016                  		move.b	$16(a0),d0
00014CBC 4880                       		ext.w	d0
00014CBE 9640                       		sub.w	d0,d3
00014CC0 0A43 000F                  		eori.w	#$F,d3
00014CC4 49F8 F768                  		lea	($FFFFF768).w,a4
00014CC8 367C FFF0                  		movea.w	#-$10,a3
00014CCC 3C3C 0800                  		move.w	#$800,d6
00014CD0 7A0D                       		moveq	#$D,d5
00014CD2 6100 0000                  		bsr.w	FindWall
00014CD6 3F01                       		move.w	d1,-(sp)
00014CD8 3428 000C                  		move.w	$C(a0),d2
00014CDC 3628 0008                  		move.w	8(a0),d3
00014CE0 7000                       		moveq	#0,d0
00014CE2 1028 0017                  		move.b	$17(a0),d0
00014CE6 4880                       		ext.w	d0
00014CE8 D440                       		add.w	d0,d2
00014CEA 1028 0016                  		move.b	$16(a0),d0
00014CEE 4880                       		ext.w	d0
00014CF0 9640                       		sub.w	d0,d3
00014CF2 0A43 000F                  		eori.w	#$F,d3
00014CF6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CFA 367C FFF0                  		movea.w	#-$10,a3
00014CFE 3C3C 0800                  		move.w	#$800,d6
00014D02 7A0D                       		moveq	#$D,d5
00014D04 6100 0000                  		bsr.w	FindWall
00014D08 301F                       		move.w	(sp)+,d0
00014D0A 6100 FE30                  		bsr.w	Sonic_Angle
00014D0E 4A41                       		tst.w	d1
00014D10 6700                       		beq.s	locret_14934
00014D12 6A00                       		bpl.s	loc_14936
00014D14 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D18 6D00 FDDC                  		blt.w	locret_1470A
00014D1C 9368 0008                  		sub.w	d1,8(a0)
00014D20                            
00014D20                            locret_14934:
00014D20 4E75                       		rts	
00014D22                            ; ===========================================================================
00014D22                            
00014D22                            loc_14936:
00014D22 0C41 000E                  		cmpi.w	#$E,d1
00014D26 6E00                       		bgt.s	loc_14942
00014D28                            
00014D28                            loc_1493C:
00014D28 9368 0008                  		sub.w	d1,8(a0)
00014D2C 4E75                       		rts	
00014D2E                            ; ===========================================================================
00014D2E                            
00014D2E                            loc_14942:
00014D2E 4A28 0038                  		tst.b	$38(a0)
00014D32 66F4                       		bne.s	loc_1493C
00014D34 08E8 0001 0022             		bset	#1,$22(a0)
00014D3A 08A8 0005 0022             		bclr	#5,$22(a0)
00014D40 117C 0001 001D             		move.b	#1,$1D(a0)
00014D46 4E75                       		rts	
00014D48                            ; End of function Sonic_WalkVertL
00014D48                            
00014D48                            ; ---------------------------------------------------------------------------
00014D48                            ; Subroutine to	find which tile	the object is standing on
00014D48                            ; ---------------------------------------------------------------------------
00014D48                            
00014D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D48                            
00014D48                            
00014D48                            Floor_ChkTile:				; XREF: FindFloor; et al
00014D48 3002                       		move.w	d2,d0
00014D4A E248                       		lsr.w	#1,d0
00014D4C 0240 0380                  		andi.w	#$380,d0
00014D50 3203                       		move.w	d3,d1
00014D52 E049                       		lsr.w	#8,d1
00014D54 0241 007F                  		andi.w	#$7F,d1
00014D58 D041                       		add.w	d1,d0
00014D5A 72FF                       		moveq	#-1,d1
00014D5C 43F8 A400                  		lea	($FFFFA400).w,a1
00014D60 1231 0000                  		move.b	(a1,d0.w),d1
00014D64 6700                       		beq.s	loc_14996
00014D66 6B00                       		bmi.s	loc_1499A
00014D68 5301                       		subq.b	#1,d1
00014D6A 4881                       		ext.w	d1
00014D6C EE59                       		ror.w	#7,d1
00014D6E 3002                       		move.w	d2,d0
00014D70 D040                       		add.w	d0,d0
00014D72 0240 01E0                  		andi.w	#$1E0,d0
00014D76 D240                       		add.w	d0,d1
00014D78 3003                       		move.w	d3,d0
00014D7A E648                       		lsr.w	#3,d0
00014D7C 0240 001E                  		andi.w	#$1E,d0
00014D80 D240                       		add.w	d0,d1
00014D82                            
00014D82                            loc_14996:
00014D82 2241                       		movea.l	d1,a1
00014D84 4E75                       		rts	
00014D86                            ; ===========================================================================
00014D86                            
00014D86                            loc_1499A:
00014D86 0241 007F                  		andi.w	#$7F,d1
00014D8A 0828 0006 0001             		btst	#6,1(a0)
00014D90 6700                       		beq.s	loc_149B2
00014D92 5241                       		addq.w	#1,d1
00014D94 0C41 0029                  		cmpi.w	#$29,d1
00014D98 6600                       		bne.s	loc_149B2
00014D9A 323C 0051                  		move.w	#$51,d1
00014D9E                            
00014D9E                            loc_149B2:
00014D9E 5301                       		subq.b	#1,d1
00014DA0 EE59                       		ror.w	#7,d1
00014DA2 3002                       		move.w	d2,d0
00014DA4 D040                       		add.w	d0,d0
00014DA6 0240 01E0                  		andi.w	#$1E0,d0
00014DAA D240                       		add.w	d0,d1
00014DAC 3003                       		move.w	d3,d0
00014DAE E648                       		lsr.w	#3,d0
00014DB0 0240 001E                  		andi.w	#$1E,d0
00014DB4 D240                       		add.w	d0,d1
00014DB6 2241                       		movea.l	d1,a1
00014DB8 4E75                       		rts	
00014DBA                            ; End of function Floor_ChkTile
00014DBA                            
00014DBA                            
00014DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DBA                            
00014DBA                            
00014DBA                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014DBA 618C                       		bsr.s	Floor_ChkTile
00014DBC 3011                       		move.w	(a1),d0
00014DBE 3800                       		move.w	d0,d4
00014DC0 0240 07FF                  		andi.w	#$7FF,d0
00014DC4 6700                       		beq.s	loc_149DE
00014DC6 0B04                       		btst	d5,d4
00014DC8 6600                       		bne.s	loc_149EC
00014DCA                            
00014DCA                            loc_149DE:
00014DCA D44B                       		add.w	a3,d2
00014DCC 6100 0000                  		bsr.w	FindFloor2
00014DD0 944B                       		sub.w	a3,d2
00014DD2 0641 0010                  		addi.w	#$10,d1
00014DD6 4E75                       		rts	
00014DD8                            ; ===========================================================================
00014DD8                            
00014DD8                            loc_149EC:
00014DD8 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014DDC 1032 0000                  		move.b	(a2,d0.w),d0
00014DE0 0240 00FF                  		andi.w	#$FF,d0
00014DE4 67E4                       		beq.s	loc_149DE
00014DE6 45F9 0000 0000             		lea	(AngleMap).l,a2
00014DEC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014DF0 E948                       		lsl.w	#4,d0
00014DF2 3203                       		move.w	d3,d1
00014DF4 0804 000B                  		btst	#$B,d4
00014DF8 6700                       		beq.s	loc_14A12
00014DFA 4641                       		not.w	d1
00014DFC 4414                       		neg.b	(a4)
00014DFE                            
00014DFE                            loc_14A12:
00014DFE 0804 000C                  		btst	#$C,d4
00014E02 6700                       		beq.s	loc_14A22
00014E04 0614 0040                  		addi.b	#$40,(a4)
00014E08 4414                       		neg.b	(a4)
00014E0A 0414 0040                  		subi.b	#$40,(a4)
00014E0E                            
00014E0E                            loc_14A22:
00014E0E 0241 000F                  		andi.w	#$F,d1
00014E12 D240                       		add.w	d0,d1
00014E14 45F9 0000 0000             		lea	(CollArray1).l,a2
00014E1A 1032 1000                  		move.b	(a2,d1.w),d0
00014E1E 4880                       		ext.w	d0
00014E20 BD44                       		eor.w	d6,d4
00014E22 0804 000C                  		btst	#$C,d4
00014E26 6700                       		beq.s	loc_14A3E
00014E28 4440                       		neg.w	d0
00014E2A                            
00014E2A                            loc_14A3E:
00014E2A 4A40                       		tst.w	d0
00014E2C 679C                       		beq.s	loc_149DE
00014E2E 6B00                       		bmi.s	loc_14A5A
00014E30 0C00 0010                  		cmpi.b	#$10,d0
00014E34 6700                       		beq.s	loc_14A66
00014E36 3202                       		move.w	d2,d1
00014E38 0241 000F                  		andi.w	#$F,d1
00014E3C D041                       		add.w	d1,d0
00014E3E 323C 000F                  		move.w	#$F,d1
00014E42 9240                       		sub.w	d0,d1
00014E44 4E75                       		rts	
00014E46                            ; ===========================================================================
00014E46                            
00014E46                            loc_14A5A:
00014E46 3202                       		move.w	d2,d1
00014E48 0241 000F                  		andi.w	#$F,d1
00014E4C D041                       		add.w	d1,d0
00014E4E 6A00 FF7A                  		bpl.w	loc_149DE
00014E52                            
00014E52                            loc_14A66:
00014E52 944B                       		sub.w	a3,d2
00014E54 6100 0000                  		bsr.w	FindFloor2
00014E58 D44B                       		add.w	a3,d2
00014E5A 0441 0010                  		subi.w	#$10,d1
00014E5E 4E75                       		rts	
00014E60                            ; End of function FindFloor
00014E60                            
00014E60                            
00014E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E60                            
00014E60                            
00014E60                            FindFloor2:				; XREF: FindFloor
00014E60 6100 FEE6                  		bsr.w	Floor_ChkTile
00014E64 3011                       		move.w	(a1),d0
00014E66 3800                       		move.w	d0,d4
00014E68 0240 07FF                  		andi.w	#$7FF,d0
00014E6C 6700                       		beq.s	loc_14A86
00014E6E 0B04                       		btst	d5,d4
00014E70 6600                       		bne.s	loc_14A94
00014E72                            
00014E72                            loc_14A86:
00014E72 323C 000F                  		move.w	#$F,d1
00014E76 3002                       		move.w	d2,d0
00014E78 0240 000F                  		andi.w	#$F,d0
00014E7C 9240                       		sub.w	d0,d1
00014E7E 4E75                       		rts	
00014E80                            ; ===========================================================================
00014E80                            
00014E80                            loc_14A94:
00014E80 2478 F796                  		movea.l	($FFFFF796).w,a2
00014E84 1032 0000                  		move.b	(a2,d0.w),d0
00014E88 0240 00FF                  		andi.w	#$FF,d0
00014E8C 67E4                       		beq.s	loc_14A86
00014E8E 45F9 0000 0000             		lea	(AngleMap).l,a2
00014E94 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014E98 E948                       		lsl.w	#4,d0
00014E9A 3203                       		move.w	d3,d1
00014E9C 0804 000B                  		btst	#$B,d4
00014EA0 6700                       		beq.s	loc_14ABA
00014EA2 4641                       		not.w	d1
00014EA4 4414                       		neg.b	(a4)
00014EA6                            
00014EA6                            loc_14ABA:
00014EA6 0804 000C                  		btst	#$C,d4
00014EAA 6700                       		beq.s	loc_14ACA
00014EAC 0614 0040                  		addi.b	#$40,(a4)
00014EB0 4414                       		neg.b	(a4)
00014EB2 0414 0040                  		subi.b	#$40,(a4)
00014EB6                            
00014EB6                            loc_14ACA:
00014EB6 0241 000F                  		andi.w	#$F,d1
00014EBA D240                       		add.w	d0,d1
00014EBC 45F9 0000 0000             		lea	(CollArray1).l,a2
00014EC2 1032 1000                  		move.b	(a2,d1.w),d0
00014EC6 4880                       		ext.w	d0
00014EC8 BD44                       		eor.w	d6,d4
00014ECA 0804 000C                  		btst	#$C,d4
00014ECE 6700                       		beq.s	loc_14AE6
00014ED0 4440                       		neg.w	d0
00014ED2                            
00014ED2                            loc_14AE6:
00014ED2 4A40                       		tst.w	d0
00014ED4 679C                       		beq.s	loc_14A86
00014ED6 6B00                       		bmi.s	loc_14AFC
00014ED8 3202                       		move.w	d2,d1
00014EDA 0241 000F                  		andi.w	#$F,d1
00014EDE D041                       		add.w	d1,d0
00014EE0 323C 000F                  		move.w	#$F,d1
00014EE4 9240                       		sub.w	d0,d1
00014EE6 4E75                       		rts	
00014EE8                            ; ===========================================================================
00014EE8                            
00014EE8                            loc_14AFC:
00014EE8 3202                       		move.w	d2,d1
00014EEA 0241 000F                  		andi.w	#$F,d1
00014EEE D041                       		add.w	d1,d0
00014EF0 6A00 FF80                  		bpl.w	loc_14A86
00014EF4 4641                       		not.w	d1
00014EF6 4E75                       		rts	
00014EF8                            ; End of function FindFloor2
00014EF8                            
00014EF8                            
00014EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EF8                            
00014EF8                            
00014EF8                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014EF8 6100 FE4E                  		bsr.w	Floor_ChkTile
00014EFC 3011                       		move.w	(a1),d0
00014EFE 3800                       		move.w	d0,d4
00014F00 0240 07FF                  		andi.w	#$7FF,d0
00014F04 6700                       		beq.s	loc_14B1E
00014F06 0B04                       		btst	d5,d4
00014F08 6600                       		bne.s	loc_14B2C
00014F0A                            
00014F0A                            loc_14B1E:
00014F0A D64B                       		add.w	a3,d3
00014F0C 6100 0000                  		bsr.w	FindWall2
00014F10 964B                       		sub.w	a3,d3
00014F12 0641 0010                  		addi.w	#$10,d1
00014F16 4E75                       		rts	
00014F18                            ; ===========================================================================
00014F18                            
00014F18                            loc_14B2C:
00014F18 2478 F796                  		movea.l	($FFFFF796).w,a2
00014F1C 1032 0000                  		move.b	(a2,d0.w),d0
00014F20 0240 00FF                  		andi.w	#$FF,d0
00014F24 67E4                       		beq.s	loc_14B1E
00014F26 45F9 0000 0000             		lea	(AngleMap).l,a2
00014F2C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014F30 E948                       		lsl.w	#4,d0
00014F32 3202                       		move.w	d2,d1
00014F34 0804 000C                  		btst	#$C,d4
00014F38 6700                       		beq.s	loc_14B5A
00014F3A 4641                       		not.w	d1
00014F3C 0614 0040                  		addi.b	#$40,(a4)
00014F40 4414                       		neg.b	(a4)
00014F42 0414 0040                  		subi.b	#$40,(a4)
00014F46                            
00014F46                            loc_14B5A:
00014F46 0804 000B                  		btst	#$B,d4
00014F4A 6700                       		beq.s	loc_14B62
00014F4C 4414                       		neg.b	(a4)
00014F4E                            
00014F4E                            loc_14B62:
00014F4E 0241 000F                  		andi.w	#$F,d1
00014F52 D240                       		add.w	d0,d1
00014F54 45F9 0000 0000             		lea	(CollArray2).l,a2
00014F5A 1032 1000                  		move.b	(a2,d1.w),d0
00014F5E 4880                       		ext.w	d0
00014F60 BD44                       		eor.w	d6,d4
00014F62 0804 000B                  		btst	#$B,d4
00014F66 6700                       		beq.s	loc_14B7E
00014F68 4440                       		neg.w	d0
00014F6A                            
00014F6A                            loc_14B7E:
00014F6A 4A40                       		tst.w	d0
00014F6C 679C                       		beq.s	loc_14B1E
00014F6E 6B00                       		bmi.s	loc_14B9A
00014F70 0C00 0010                  		cmpi.b	#$10,d0
00014F74 6700                       		beq.s	loc_14BA6
00014F76 3203                       		move.w	d3,d1
00014F78 0241 000F                  		andi.w	#$F,d1
00014F7C D041                       		add.w	d1,d0
00014F7E 323C 000F                  		move.w	#$F,d1
00014F82 9240                       		sub.w	d0,d1
00014F84 4E75                       		rts	
00014F86                            ; ===========================================================================
00014F86                            
00014F86                            loc_14B9A:
00014F86 3203                       		move.w	d3,d1
00014F88 0241 000F                  		andi.w	#$F,d1
00014F8C D041                       		add.w	d1,d0
00014F8E 6A00 FF7A                  		bpl.w	loc_14B1E
00014F92                            
00014F92                            loc_14BA6:
00014F92 964B                       		sub.w	a3,d3
00014F94 6100 0000                  		bsr.w	FindWall2
00014F98 D64B                       		add.w	a3,d3
00014F9A 0441 0010                  		subi.w	#$10,d1
00014F9E 4E75                       		rts	
00014FA0                            ; End of function FindWall
00014FA0                            
00014FA0                            
00014FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FA0                            
00014FA0                            
00014FA0                            FindWall2:				; XREF: FindWall
00014FA0 6100 FDA6                  		bsr.w	Floor_ChkTile
00014FA4 3011                       		move.w	(a1),d0
00014FA6 3800                       		move.w	d0,d4
00014FA8 0240 07FF                  		andi.w	#$7FF,d0
00014FAC 6700                       		beq.s	loc_14BC6
00014FAE 0B04                       		btst	d5,d4
00014FB0 6600                       		bne.s	loc_14BD4
00014FB2                            
00014FB2                            loc_14BC6:
00014FB2 323C 000F                  		move.w	#$F,d1
00014FB6 3003                       		move.w	d3,d0
00014FB8 0240 000F                  		andi.w	#$F,d0
00014FBC 9240                       		sub.w	d0,d1
00014FBE 4E75                       		rts	
00014FC0                            ; ===========================================================================
00014FC0                            
00014FC0                            loc_14BD4:
00014FC0 2478 F796                  		movea.l	($FFFFF796).w,a2
00014FC4 1032 0000                  		move.b	(a2,d0.w),d0
00014FC8 0240 00FF                  		andi.w	#$FF,d0
00014FCC 67E4                       		beq.s	loc_14BC6
00014FCE 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FD4 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FD8 E948                       		lsl.w	#4,d0
00014FDA 3202                       		move.w	d2,d1
00014FDC 0804 000C                  		btst	#$C,d4
00014FE0 6700                       		beq.s	loc_14C02
00014FE2 4641                       		not.w	d1
00014FE4 0614 0040                  		addi.b	#$40,(a4)
00014FE8 4414                       		neg.b	(a4)
00014FEA 0414 0040                  		subi.b	#$40,(a4)
00014FEE                            
00014FEE                            loc_14C02:
00014FEE 0804 000B                  		btst	#$B,d4
00014FF2 6700                       		beq.s	loc_14C0A
00014FF4 4414                       		neg.b	(a4)
00014FF6                            
00014FF6                            loc_14C0A:
00014FF6 0241 000F                  		andi.w	#$F,d1
00014FFA D240                       		add.w	d0,d1
00014FFC 45F9 0000 0000             		lea	(CollArray2).l,a2
00015002 1032 1000                  		move.b	(a2,d1.w),d0
00015006 4880                       		ext.w	d0
00015008 BD44                       		eor.w	d6,d4
0001500A 0804 000B                  		btst	#$B,d4
0001500E 6700                       		beq.s	loc_14C26
00015010 4440                       		neg.w	d0
00015012                            
00015012                            loc_14C26:
00015012 4A40                       		tst.w	d0
00015014 679C                       		beq.s	loc_14BC6
00015016 6B00                       		bmi.s	loc_14C3C
00015018 3203                       		move.w	d3,d1
0001501A 0241 000F                  		andi.w	#$F,d1
0001501E D041                       		add.w	d1,d0
00015020 323C 000F                  		move.w	#$F,d1
00015024 9240                       		sub.w	d0,d1
00015026 4E75                       		rts	
00015028                            ; ===========================================================================
00015028                            
00015028                            loc_14C3C:
00015028 3203                       		move.w	d3,d1
0001502A 0241 000F                  		andi.w	#$F,d1
0001502E D041                       		add.w	d1,d0
00015030 6A00 FF80                  		bpl.w	loc_14BC6
00015034 4641                       		not.w	d1
00015036 4E75                       		rts	
00015038                            ; End of function FindWall2
00015038                            
00015038                            ; ---------------------------------------------------------------------------
00015038                            ; Unused floor/wall subroutine - logs something	to do with collision
00015038                            ; ---------------------------------------------------------------------------
00015038                            
00015038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015038                            
00015038                            
00015038                            FloorLog_Unk:				; XREF: Level
00015038 4E75                       		rts	
0001503A                            
0001503A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015040 45F9 0000 0000             		lea	(CollArray1).l,a2
00015046 363C 00FF                  		move.w	#$FF,d3
0001504A                            
0001504A                            loc_14C5E:
0001504A 7A10                       		moveq	#$10,d5
0001504C 343C 000F                  		move.w	#$F,d2
00015050                            
00015050                            loc_14C64:
00015050 7800                       		moveq	#0,d4
00015052 323C 000F                  		move.w	#$F,d1
00015056                            
00015056                            loc_14C6A:
00015056 3019                       		move.w	(a1)+,d0
00015058 EAA8                       		lsr.l	d5,d0
0001505A D944                       		addx.w	d4,d4
0001505C 51C9 FFF8                  		dbf	d1,loc_14C6A
00015060                            
00015060 34C4                       		move.w	d4,(a2)+
00015062 92FC 0020                  		suba.w	#$20,a1
00015066 5345                       		subq.w	#1,d5
00015068 51CA FFE6                  		dbf	d2,loc_14C64
0001506C                            
0001506C D2FC 0020                  		adda.w	#$20,a1
00015070 51CB FFD8                  		dbf	d3,loc_14C5E
00015074                            
00015074 43F9 0000 0000             		lea	(CollArray1).l,a1
0001507A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015080 6100                       		bsr.s	FloorLog_Unk2
00015082 43F9 0000 0000             		lea	(CollArray1).l,a1
00015088 45F9 0000 0000             		lea	(CollArray1).l,a2
0001508E                            
0001508E                            ; End of function FloorLog_Unk
0001508E                            
0001508E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001508E                            
0001508E                            
0001508E                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001508E 363C 0FFF                  		move.w	#$FFF,d3
00015092                            
00015092                            loc_14CA6:
00015092 7400                       		moveq	#0,d2
00015094 323C 000F                  		move.w	#$F,d1
00015098 3019                       		move.w	(a1)+,d0
0001509A 6700                       		beq.s	loc_14CD4
0001509C 6B00                       		bmi.s	loc_14CBE
0001509E                            
0001509E                            loc_14CB2:
0001509E E248                       		lsr.w	#1,d0
000150A0 6400                       		bcc.s	loc_14CB8
000150A2 5202                       		addq.b	#1,d2
000150A4                            
000150A4                            loc_14CB8:
000150A4 51C9 FFF8                  		dbf	d1,loc_14CB2
000150A8                            
000150A8 6000                       		bra.s	loc_14CD6
000150AA                            ; ===========================================================================
000150AA                            
000150AA                            loc_14CBE:
000150AA 0C40 FFFF                  		cmpi.w	#-1,d0
000150AE 6700                       		beq.s	loc_14CD0
000150B0                            
000150B0                            loc_14CC4:
000150B0 E348                       		lsl.w	#1,d0
000150B2 6400                       		bcc.s	loc_14CCA
000150B4 5302                       		subq.b	#1,d2
000150B6                            
000150B6                            loc_14CCA:
000150B6 51C9 FFF8                  		dbf	d1,loc_14CC4
000150BA                            
000150BA 6000                       		bra.s	loc_14CD6
000150BC                            ; ===========================================================================
000150BC                            
000150BC                            loc_14CD0:
000150BC 303C 0010                  		move.w	#$10,d0
000150C0                            
000150C0                            loc_14CD4:
000150C0 3400                       		move.w	d0,d2
000150C2                            
000150C2                            loc_14CD6:
000150C2 14C2                       		move.b	d2,(a2)+
000150C4 51CB FFCC                  		dbf	d3,loc_14CA6
000150C8                            
000150C8 4E75                       		rts	
000150CA                            
000150CA                            ; End of function FloorLog_Unk2
000150CA                            
000150CA                            
000150CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150CA                            
000150CA                            
000150CA                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000150CA 2628 0008                  		move.l	8(a0),d3
000150CE 2428 000C                  		move.l	$C(a0),d2
000150D2 3228 0010                  		move.w	$10(a0),d1
000150D6 48C1                       		ext.l	d1
000150D8 E181                       		asl.l	#8,d1
000150DA D681                       		add.l	d1,d3
000150DC 3228 0012                  		move.w	$12(a0),d1
000150E0 48C1                       		ext.l	d1
000150E2 E181                       		asl.l	#8,d1
000150E4 D481                       		add.l	d1,d2
000150E6 4842                       		swap	d2
000150E8 4843                       		swap	d3
000150EA 11C0 F768                  		move.b	d0,($FFFFF768).w
000150EE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150F2 1200                       		move.b	d0,d1
000150F4 0600 0020                  		addi.b	#$20,d0
000150F8 6A00                       		bpl.s	loc_14D1A
000150FA 1001                       		move.b	d1,d0
000150FC 6A00                       		bpl.s	loc_14D14
000150FE 5300                       		subq.b	#1,d0
00015100                            
00015100                            loc_14D14:
00015100 0600 0020                  		addi.b	#$20,d0
00015104 6000                       		bra.s	loc_14D24
00015106                            ; ===========================================================================
00015106                            
00015106                            loc_14D1A:
00015106 1001                       		move.b	d1,d0
00015108 6A00                       		bpl.s	loc_14D20
0001510A 5200                       		addq.b	#1,d0
0001510C                            
0001510C                            loc_14D20:
0001510C 0600 001F                  		addi.b	#$1F,d0
00015110                            
00015110                            loc_14D24:
00015110 0200 00C0                  		andi.b	#$C0,d0
00015114 6700 0000                  		beq.w	loc_14DF0
00015118 0C00 0080                  		cmpi.b	#$80,d0
0001511C 6700 0000                  		beq.w	loc_14F7C
00015120 0201 0038                  		andi.b	#$38,d1
00015124 6600                       		bne.s	loc_14D3C
00015126 5042                       		addq.w	#8,d2
00015128                            
00015128                            loc_14D3C:
00015128 0C00 0040                  		cmpi.b	#$40,d0
0001512C 6700 0000                  		beq.w	loc_1504A
00015130 6000 0000                  		bra.w	loc_14EBC
00015134                            
00015134                            ; End of function Sonic_WalkSpeed
00015134                            
00015134                            
00015134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015134                            
00015134                            
00015134                            sub_14D48:				; XREF: Sonic_Jump
00015134 11C0 F768                  		move.b	d0,($FFFFF768).w
00015138 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001513C 0600 0020                  		addi.b	#$20,d0
00015140 0200 00C0                  		andi.b	#$C0,d0
00015144 0C00 0040                  		cmpi.b	#$40,d0
00015148 6700 0000                  		beq.w	loc_14FD6
0001514C 0C00 0080                  		cmpi.b	#$80,d0
00015150 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015154 0C00 00C0                  		cmpi.b	#$C0,d0
00015158 6700 0000                  		beq.w	sub_14E50
0001515C                            
0001515C                            ; End of function sub_14D48
0001515C                            
0001515C                            ; ---------------------------------------------------------------------------
0001515C                            ; Subroutine to	make Sonic land	on the floor after jumping
0001515C                            ; ---------------------------------------------------------------------------
0001515C                            
0001515C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001515C                            
0001515C                            
0001515C                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001515C 3428 000C                  		move.w	$C(a0),d2
00015160 3628 0008                  		move.w	8(a0),d3
00015164 7000                       		moveq	#0,d0
00015166 1028 0016                  		move.b	$16(a0),d0
0001516A 4880                       		ext.w	d0
0001516C D440                       		add.w	d0,d2
0001516E 1028 0017                  		move.b	$17(a0),d0
00015172 4880                       		ext.w	d0
00015174 D640                       		add.w	d0,d3
00015176 49F8 F768                  		lea	($FFFFF768).w,a4
0001517A 367C 0010                  		movea.w	#$10,a3
0001517E 3C3C 0000                  		move.w	#0,d6
00015182 7A0D                       		moveq	#$D,d5
00015184 6100 FC34                  		bsr.w	FindFloor
00015188 3F01                       		move.w	d1,-(sp)
0001518A 3428 000C                  		move.w	$C(a0),d2
0001518E 3628 0008                  		move.w	8(a0),d3
00015192 7000                       		moveq	#0,d0
00015194 1028 0016                  		move.b	$16(a0),d0
00015198 4880                       		ext.w	d0
0001519A D440                       		add.w	d0,d2
0001519C 1028 0017                  		move.b	$17(a0),d0
000151A0 4880                       		ext.w	d0
000151A2 9640                       		sub.w	d0,d3
000151A4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151A8 367C 0010                  		movea.w	#$10,a3
000151AC 3C3C 0000                  		move.w	#0,d6
000151B0 7A0D                       		moveq	#$D,d5
000151B2 6100 FC06                  		bsr.w	FindFloor
000151B6 301F                       		move.w	(sp)+,d0
000151B8 143C 0000                  		move.b	#0,d2
000151BC                            
000151BC                            loc_14DD0:
000151BC 1638 F76A                  		move.b	($FFFFF76A).w,d3
000151C0 B240                       		cmp.w	d0,d1
000151C2 6F00                       		ble.s	loc_14DDE
000151C4 1638 F768                  		move.b	($FFFFF768).w,d3
000151C8 C141                       		exg	d0,d1
000151CA                            
000151CA                            loc_14DDE:
000151CA 0803 0000                  		btst	#0,d3
000151CE 6700                       		beq.s	locret_14DE6
000151D0 1602                       		move.b	d2,d3
000151D2                            
000151D2                            locret_14DE6:
000151D2 4E75                       		rts	
000151D4                            
000151D4                            ; End of function Sonic_HitFloor
000151D4                            
000151D4                            ; ===========================================================================
000151D4 3428 000C                  		move.w	$C(a0),d2
000151D8 3628 0008                  		move.w	8(a0),d3
000151DC                            
000151DC                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000151DC 0642 000A                  		addi.w	#$A,d2
000151E0 49F8 F768                  		lea	($FFFFF768).w,a4
000151E4 367C 0010                  		movea.w	#$10,a3
000151E8 3C3C 0000                  		move.w	#0,d6
000151EC 7A0E                       		moveq	#$E,d5
000151EE 6100 FBCA                  		bsr.w	FindFloor
000151F2 143C 0000                  		move.b	#0,d2
000151F6                            
000151F6                            loc_14E0A:				; XREF: sub_14EB4
000151F6 1638 F768                  		move.b	($FFFFF768).w,d3
000151FA 0803 0000                  		btst	#0,d3
000151FE 6700                       		beq.s	locret_14E16
00015200 1602                       		move.b	d2,d3
00015202                            
00015202                            locret_14E16:
00015202 4E75                       		rts	
00015204                            
00015204                            ; ---------------------------------------------------------------------------
00015204                            ; Subroutine allowing objects to interact with the floor
00015204                            ; ---------------------------------------------------------------------------
00015204                            
00015204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015204                            
00015204                            
00015204                            ObjHitFloor:
00015204 3628 0008                  		move.w	8(a0),d3
00015208                            
00015208                            ; End of function ObjHitFloor
00015208                            
00015208                            
00015208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015208                            
00015208                            
00015208                            ObjHitFloor2:
00015208 3428 000C                  		move.w	$C(a0),d2
0001520C 7000                       		moveq	#0,d0
0001520E 1028 0016                  		move.b	$16(a0),d0
00015212 4880                       		ext.w	d0
00015214 D440                       		add.w	d0,d2
00015216 49F8 F768                  		lea	($FFFFF768).w,a4
0001521A 18BC 0000                  		move.b	#0,(a4)
0001521E 367C 0010                  		movea.w	#$10,a3
00015222 3C3C 0000                  		move.w	#0,d6
00015226 7A0D                       		moveq	#$D,d5
00015228 6100 FB90                  		bsr.w	FindFloor
0001522C 1638 F768                  		move.b	($FFFFF768).w,d3
00015230 0803 0000                  		btst	#0,d3
00015234 6700                       		beq.s	locret_14E4E
00015236 163C 0000                  		move.b	#0,d3
0001523A                            
0001523A                            locret_14E4E:
0001523A 4E75                       		rts	
0001523C                            ; End of function ObjHitFloor2
0001523C                            
0001523C                            
0001523C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001523C                            
0001523C                            
0001523C                            sub_14E50:				; XREF: sub_14D48
0001523C 3428 000C                  		move.w	$C(a0),d2
00015240 3628 0008                  		move.w	8(a0),d3
00015244 7000                       		moveq	#0,d0
00015246 1028 0017                  		move.b	$17(a0),d0
0001524A 4880                       		ext.w	d0
0001524C 9440                       		sub.w	d0,d2
0001524E 1028 0016                  		move.b	$16(a0),d0
00015252 4880                       		ext.w	d0
00015254 D640                       		add.w	d0,d3
00015256 49F8 F768                  		lea	($FFFFF768).w,a4
0001525A 367C 0010                  		movea.w	#$10,a3
0001525E 3C3C 0000                  		move.w	#0,d6
00015262 7A0E                       		moveq	#$E,d5
00015264 6100 FC92                  		bsr.w	FindWall
00015268 3F01                       		move.w	d1,-(sp)
0001526A 3428 000C                  		move.w	$C(a0),d2
0001526E 3628 0008                  		move.w	8(a0),d3
00015272 7000                       		moveq	#0,d0
00015274 1028 0017                  		move.b	$17(a0),d0
00015278 4880                       		ext.w	d0
0001527A D440                       		add.w	d0,d2
0001527C 1028 0016                  		move.b	$16(a0),d0
00015280 4880                       		ext.w	d0
00015282 D640                       		add.w	d0,d3
00015284 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015288 367C 0010                  		movea.w	#$10,a3
0001528C 3C3C 0000                  		move.w	#0,d6
00015290 7A0E                       		moveq	#$E,d5
00015292 6100 FC64                  		bsr.w	FindWall
00015296 301F                       		move.w	(sp)+,d0
00015298 143C 00C0                  		move.b	#-$40,d2
0001529C 6000 FF1E                  		bra.w	loc_14DD0
000152A0                            
000152A0                            ; End of function sub_14E50
000152A0                            
000152A0                            
000152A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A0                            
000152A0                            
000152A0                            sub_14EB4:				; XREF: Sonic_Floor
000152A0 3428 000C                  		move.w	$C(a0),d2
000152A4 3628 0008                  		move.w	8(a0),d3
000152A8                            
000152A8                            loc_14EBC:
000152A8 0643 000A                  		addi.w	#$A,d3
000152AC 49F8 F768                  		lea	($FFFFF768).w,a4
000152B0 367C 0010                  		movea.w	#$10,a3
000152B4 3C3C 0000                  		move.w	#0,d6
000152B8 7A0E                       		moveq	#$E,d5
000152BA 6100 FC3C                  		bsr.w	FindWall
000152BE 143C 00C0                  		move.b	#-$40,d2
000152C2 6000 FF32                  		bra.w	loc_14E0A
000152C6                            
000152C6                            ; End of function sub_14EB4
000152C6                            
000152C6                            ; ---------------------------------------------------------------------------
000152C6                            ; Subroutine to	detect when an object hits a wall to its right
000152C6                            ; ---------------------------------------------------------------------------
000152C6                            
000152C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C6                            
000152C6                            
000152C6                            ObjHitWallRight:
000152C6 D668 0008                  		add.w	8(a0),d3
000152CA 3428 000C                  		move.w	$C(a0),d2
000152CE 49F8 F768                  		lea	($FFFFF768).w,a4
000152D2 18BC 0000                  		move.b	#0,(a4)
000152D6 367C 0010                  		movea.w	#$10,a3
000152DA 3C3C 0000                  		move.w	#0,d6
000152DE 7A0E                       		moveq	#$E,d5
000152E0 6100 FC16                  		bsr.w	FindWall
000152E4 1638 F768                  		move.b	($FFFFF768).w,d3
000152E8 0803 0000                  		btst	#0,d3
000152EC 6700                       		beq.s	locret_14F06
000152EE 163C 00C0                  		move.b	#-$40,d3
000152F2                            
000152F2                            locret_14F06:
000152F2 4E75                       		rts	
000152F4                            
000152F4                            ; End of function ObjHitWallRight
000152F4                            
000152F4                            ; ---------------------------------------------------------------------------
000152F4                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000152F4                            ; touches them
000152F4                            ; ---------------------------------------------------------------------------
000152F4                            
000152F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152F4                            
000152F4                            
000152F4                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000152F4 3428 000C                  		move.w	$C(a0),d2
000152F8 3628 0008                  		move.w	8(a0),d3
000152FC 7000                       		moveq	#0,d0
000152FE 1028 0016                  		move.b	$16(a0),d0
00015302 4880                       		ext.w	d0
00015304 9440                       		sub.w	d0,d2
00015306 0A42 000F                  		eori.w	#$F,d2
0001530A 1028 0017                  		move.b	$17(a0),d0
0001530E 4880                       		ext.w	d0
00015310 D640                       		add.w	d0,d3
00015312 49F8 F768                  		lea	($FFFFF768).w,a4
00015316 367C FFF0                  		movea.w	#-$10,a3
0001531A 3C3C 1000                  		move.w	#$1000,d6
0001531E 7A0E                       		moveq	#$E,d5
00015320 6100 FA98                  		bsr.w	FindFloor
00015324 3F01                       		move.w	d1,-(sp)
00015326 3428 000C                  		move.w	$C(a0),d2
0001532A 3628 0008                  		move.w	8(a0),d3
0001532E 7000                       		moveq	#0,d0
00015330 1028 0016                  		move.b	$16(a0),d0
00015334 4880                       		ext.w	d0
00015336 9440                       		sub.w	d0,d2
00015338 0A42 000F                  		eori.w	#$F,d2
0001533C 1028 0017                  		move.b	$17(a0),d0
00015340 4880                       		ext.w	d0
00015342 9640                       		sub.w	d0,d3
00015344 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015348 367C FFF0                  		movea.w	#-$10,a3
0001534C 3C3C 1000                  		move.w	#$1000,d6
00015350 7A0E                       		moveq	#$E,d5
00015352 6100 FA66                  		bsr.w	FindFloor
00015356 301F                       		move.w	(sp)+,d0
00015358 143C 0080                  		move.b	#-$80,d2
0001535C 6000 FE5E                  		bra.w	loc_14DD0
00015360                            ; End of function Sonic_DontRunOnWalls
00015360                            
00015360                            ; ===========================================================================
00015360 3428 000C                  		move.w	$C(a0),d2
00015364 3628 0008                  		move.w	8(a0),d3
00015368                            
00015368                            loc_14F7C:
00015368 0442 000A                  		subi.w	#$A,d2
0001536C 0A42 000F                  		eori.w	#$F,d2
00015370 49F8 F768                  		lea	($FFFFF768).w,a4
00015374 367C FFF0                  		movea.w	#-$10,a3
00015378 3C3C 1000                  		move.w	#$1000,d6
0001537C 7A0E                       		moveq	#$E,d5
0001537E 6100 FA3A                  		bsr.w	FindFloor
00015382 143C 0080                  		move.b	#-$80,d2
00015386 6000 FE6E                  		bra.w	loc_14E0A
0001538A                            
0001538A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001538A                            
0001538A                            
0001538A                            ObjHitCeiling:
0001538A 3428 000C                  		move.w	$C(a0),d2
0001538E 3628 0008                  		move.w	8(a0),d3
00015392 7000                       		moveq	#0,d0
00015394 1028 0016                  		move.b	$16(a0),d0
00015398 4880                       		ext.w	d0
0001539A 9440                       		sub.w	d0,d2
0001539C 0A42 000F                  		eori.w	#$F,d2
000153A0 49F8 F768                  		lea	($FFFFF768).w,a4
000153A4 367C FFF0                  		movea.w	#-$10,a3
000153A8 3C3C 1000                  		move.w	#$1000,d6
000153AC 7A0E                       		moveq	#$E,d5
000153AE 6100 FA0A                  		bsr.w	FindFloor
000153B2 1638 F768                  		move.b	($FFFFF768).w,d3
000153B6 0803 0000                  		btst	#0,d3
000153BA 6700                       		beq.s	locret_14FD4
000153BC 163C 0080                  		move.b	#-$80,d3
000153C0                            
000153C0                            locret_14FD4:
000153C0 4E75                       		rts	
000153C2                            ; End of function ObjHitCeiling
000153C2                            
000153C2                            ; ===========================================================================
000153C2                            
000153C2                            loc_14FD6:				; XREF: sub_14D48
000153C2 3428 000C                  		move.w	$C(a0),d2
000153C6 3628 0008                  		move.w	8(a0),d3
000153CA 7000                       		moveq	#0,d0
000153CC 1028 0017                  		move.b	$17(a0),d0
000153D0 4880                       		ext.w	d0
000153D2 9440                       		sub.w	d0,d2
000153D4 1028 0016                  		move.b	$16(a0),d0
000153D8 4880                       		ext.w	d0
000153DA 9640                       		sub.w	d0,d3
000153DC 0A43 000F                  		eori.w	#$F,d3
000153E0 49F8 F768                  		lea	($FFFFF768).w,a4
000153E4 367C FFF0                  		movea.w	#-$10,a3
000153E8 3C3C 0800                  		move.w	#$800,d6
000153EC 7A0E                       		moveq	#$E,d5
000153EE 6100 FB08                  		bsr.w	FindWall
000153F2 3F01                       		move.w	d1,-(sp)
000153F4 3428 000C                  		move.w	$C(a0),d2
000153F8 3628 0008                  		move.w	8(a0),d3
000153FC 7000                       		moveq	#0,d0
000153FE 1028 0017                  		move.b	$17(a0),d0
00015402 4880                       		ext.w	d0
00015404 D440                       		add.w	d0,d2
00015406 1028 0016                  		move.b	$16(a0),d0
0001540A 4880                       		ext.w	d0
0001540C 9640                       		sub.w	d0,d3
0001540E 0A43 000F                  		eori.w	#$F,d3
00015412 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015416 367C FFF0                  		movea.w	#-$10,a3
0001541A 3C3C 0800                  		move.w	#$800,d6
0001541E 7A0E                       		moveq	#$E,d5
00015420 6100 FAD6                  		bsr.w	FindWall
00015424 301F                       		move.w	(sp)+,d0
00015426 143C 0040                  		move.b	#$40,d2
0001542A 6000 FD90                  		bra.w	loc_14DD0
0001542E                            
0001542E                            ; ---------------------------------------------------------------------------
0001542E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001542E                            ; ---------------------------------------------------------------------------
0001542E                            
0001542E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001542E                            
0001542E                            
0001542E                            Sonic_HitWall:				; XREF: Sonic_Floor
0001542E 3428 000C                  		move.w	$C(a0),d2
00015432 3628 0008                  		move.w	8(a0),d3
00015436                            
00015436                            loc_1504A:
00015436 0443 000A                  		subi.w	#$A,d3
0001543A 0A43 000F                  		eori.w	#$F,d3
0001543E 49F8 F768                  		lea	($FFFFF768).w,a4
00015442 367C FFF0                  		movea.w	#-$10,a3
00015446 3C3C 0800                  		move.w	#$800,d6
0001544A 7A0E                       		moveq	#$E,d5
0001544C 6100 FAAA                  		bsr.w	FindWall
00015450 143C 0040                  		move.b	#$40,d2
00015454 6000 FDA0                  		bra.w	loc_14E0A
00015458                            ; End of function Sonic_HitWall
00015458                            
00015458                            ; ---------------------------------------------------------------------------
00015458                            ; Subroutine to	detect when an object hits a wall to its left
00015458                            ; ---------------------------------------------------------------------------
00015458                            
00015458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015458                            
00015458                            
00015458                            ObjHitWallLeft:
00015458 D668 0008                  		add.w	8(a0),d3
0001545C 3428 000C                  		move.w	$C(a0),d2
00015460 49F8 F768                  		lea	($FFFFF768).w,a4
00015464 18BC 0000                  		move.b	#0,(a4)
00015468 367C FFF0                  		movea.w	#-$10,a3
0001546C 3C3C 0800                  		move.w	#$800,d6
00015470 7A0E                       		moveq	#$E,d5
00015472 6100 FA84                  		bsr.w	FindWall
00015476 1638 F768                  		move.b	($FFFFF768).w,d3
0001547A 0803 0000                  		btst	#0,d3
0001547E 6700                       		beq.s	locret_15098
00015480 163C 0040                  		move.b	#$40,d3
00015484                            
00015484                            locret_15098:
00015484 4E75                       		rts	
00015486                            ; End of function ObjHitWallLeft
00015486                            
00015486                            ; ===========================================================================
00015486                            ; ---------------------------------------------------------------------------
00015486                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015486                            ; ---------------------------------------------------------------------------
00015486                            
00015486                            Obj66:					; XREF: Obj_Index
00015486 7000                       		moveq	#0,d0
00015488 1028 0024                  		move.b	$24(a0),d0
0001548C 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015490 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015494                            ; ===========================================================================
00015494 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015496 0000                       		dc.w Obj66_Action-Obj66_Index
00015498 0000                       		dc.w Obj66_Display-Obj66_Index
0001549A 0000                       		dc.w Obj66_Release-Obj66_Index
0001549C                            ; ===========================================================================
0001549C                            
0001549C                            Obj66_Main:				; XREF: Obj66_Index
0001549C 5428 0024                  		addq.b	#2,$24(a0)
000154A0 323C 0001                  		move.w	#1,d1
000154A4 2248                       		movea.l	a0,a1
000154A6 6000                       		bra.s	Obj66_MakeItem
000154A8                            ; ===========================================================================
000154A8                            
000154A8                            Obj66_Loop:
000154A8 6100 868C                  		bsr.w	SingleObjLoad
000154AC 6600                       		bne.s	loc_150FE
000154AE 12BC 0066                  		move.b	#$66,0(a1)
000154B2 5829 0024                  		addq.b	#4,$24(a1)
000154B6 3368 0008 0008             		move.w	8(a0),8(a1)
000154BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000154C2 137C 0003 0018             		move.b	#3,$18(a1)
000154C8 137C 0010 001A             		move.b	#$10,$1A(a1)
000154CE                            
000154CE                            Obj66_MakeItem:				; XREF: Obj66_Main
000154CE 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000154D6 337C 4348 0002             		move.w	#$4348,2(a1)
000154DC 0029 0004 0001             		ori.b	#4,1(a1)
000154E2 137C 0038 0019             		move.b	#$38,$19(a1)
000154E8                            
000154E8                            loc_150FE:
000154E8 51C9 FFBE                  		dbf	d1,Obj66_Loop
000154EC                            
000154EC 117C 0030 0019             		move.b	#$30,$19(a0)
000154F2 117C 0004 0018             		move.b	#4,$18(a0)
000154F8 317C 003C 0030             		move.w	#$3C,$30(a0)
000154FE 117C 0001 0034             		move.b	#1,$34(a0)
00015504 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001550A                            
0001550A                            Obj66_Action:				; XREF: Obj66_Index
0001550A 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001550E 4A28 0001                  		tst.b	1(a0)
00015512 6A00 0000                  		bpl.w	Obj66_Display
00015516 323C 0030                  		move.w	#$30,d1
0001551A 3401                       		move.w	d1,d2
0001551C 3602                       		move.w	d2,d3
0001551E 5243                       		addq.w	#1,d3
00015520 3828 0008                  		move.w	8(a0),d4
00015524 6100 A556                  		bsr.w	SolidObject
00015528 0828 0005 0022             		btst	#5,$22(a0)
0001552E 6700 0000                  		beq.w	Obj66_Display
00015532 43F8 D000                  		lea	($FFFFD000).w,a1
00015536 720E                       		moveq	#$E,d1
00015538 3029 0008                  		move.w	8(a1),d0
0001553C B068 0008                  		cmp.w	8(a0),d0
00015540 6500                       		bcs.s	Obj66_GrabSonic
00015542 7207                       		moveq	#7,d1
00015544                            
00015544                            Obj66_GrabSonic:
00015544 B228 001A                  		cmp.b	$1A(a0),d1
00015548 6600                       		bne.s	Obj66_Display
0001554A 1141 0032                  		move.b	d1,$32(a0)
0001554E 5828 0024                  		addq.b	#4,$24(a0)
00015552 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015558 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001555E 337C 0800 0014             		move.w	#$800,$14(a1)
00015564 337C 0000 0010             		move.w	#0,$10(a1)
0001556A 337C 0000 0012             		move.w	#0,$12(a1)
00015570 08A8 0005 0022             		bclr	#5,$22(a0)
00015576 08A9 0005 0022             		bclr	#5,$22(a1)
0001557C 08E9 0001 0022             		bset	#1,$22(a1)
00015582 3429 0008                  		move.w	8(a1),d2
00015586 3629 000C                  		move.w	$C(a1),d3
0001558A 6100 0000                  		bsr.w	Obj66_ChgPos
0001558E D569 0008                  		add.w	d2,8(a1)
00015592 D769 000C                  		add.w	d3,$C(a1)
00015596 E0E9 0008                  		asr	8(a1)
0001559A E0E9 000C                  		asr	$C(a1)
0001559E                            
0001559E                            Obj66_Display:				; XREF: Obj66_Index
0001559E 6000 A1B4                  		bra.w	MarkObjGone
000155A2                            ; ===========================================================================
000155A2                            
000155A2                            Obj66_Release:				; XREF: Obj66_Index
000155A2 1028 001A                  		move.b	$1A(a0),d0
000155A6 0C00 0004                  		cmpi.b	#4,d0
000155AA 6700                       		beq.s	loc_151C8
000155AC 0C00 0007                  		cmpi.b	#7,d0
000155B0 6600                       		bne.s	loc_151F8
000155B2                            
000155B2                            loc_151C8:
000155B2 B028 0032                  		cmp.b	$32(a0),d0
000155B6 6700                       		beq.s	loc_151F8
000155B8 43F8 D000                  		lea	($FFFFD000).w,a1
000155BC 337C 0000 0010             		move.w	#0,$10(a1)
000155C2 337C 0800 0012             		move.w	#$800,$12(a1)
000155C8 0C00 0004                  		cmpi.b	#4,d0
000155CC 6700                       		beq.s	loc_151F0
000155CE 337C 0800 0010             		move.w	#$800,$10(a1)
000155D4 337C 0800 0012             		move.w	#$800,$12(a1)
000155DA                            
000155DA                            loc_151F0:
000155DA 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000155DE 5928 0024                  		subq.b	#4,$24(a0)
000155E2                            
000155E2                            loc_151F8:
000155E2 6100                       		bsr.s	Obj66_ChkSwitch
000155E4 6100                       		bsr.s	Obj66_ChgPos
000155E6 6000 A16C                  		bra.w	MarkObjGone
000155EA                            
000155EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155EA                            
000155EA                            
000155EA                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000155EA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000155EE 7000                       		moveq	#0,d0
000155F0 1028 0038                  		move.b	$38(a0),d0
000155F4 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000155FA 6700                       		beq.s	loc_15224	; if not, branch
000155FC 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015600 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015602 4428 0034                  		neg.b	$34(a0)
00015606 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001560C 6000                       		bra.s	Obj66_Animate
0001560E                            ; ===========================================================================
0001560E                            
0001560E                            loc_15224:
0001560E 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015612                            
00015612                            Obj66_Animate:
00015612 5328 001E                  		subq.b	#1,$1E(a0)
00015616 6A00                       		bpl.s	locret_15246
00015618 117C 0007 001E             		move.b	#7,$1E(a0)
0001561E 1228 0034                  		move.b	$34(a0),d1
00015622 1028 001A                  		move.b	$1A(a0),d0
00015626 D001                       		add.b	d1,d0
00015628 0200 000F                  		andi.b	#$F,d0
0001562C 1140 001A                  		move.b	d0,$1A(a0)
00015630                            
00015630                            locret_15246:
00015630 4E75                       		rts	
00015632                            ; End of function Obj66_ChkSwitch
00015632                            
00015632                            
00015632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015632                            
00015632                            
00015632                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015632 43F8 D000                  		lea	($FFFFD000).w,a1
00015636 7000                       		moveq	#0,d0
00015638 1028 001A                  		move.b	$1A(a0),d0
0001563C D040                       		add.w	d0,d0
0001563E 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015642 101A                       		move.b	(a2)+,d0
00015644 4880                       		ext.w	d0
00015646 D068 0008                  		add.w	8(a0),d0
0001564A 3340 0008                  		move.w	d0,8(a1)
0001564E 101A                       		move.b	(a2)+,d0
00015650 4880                       		ext.w	d0
00015652 D068 000C                  		add.w	$C(a0),d0
00015656 3340 000C                  		move.w	d0,$C(a1)
0001565A 4E75                       		rts	
0001565C                            ; End of function Obj66_ChgPos
0001565C                            
0001565C                            ; ===========================================================================
0001565C E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015660 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015664 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015668 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001566C 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015670 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015674 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015678 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            Map_obj66:
0001567C                            	include "_maps\obj66.asm"
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001567C                            ; ---------------------------------------------------------------------------
0001567C 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015680 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015684 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015688 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001568C 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015690 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015694 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015698 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001569C 0000                       		dc.w byte_154A4-Map_obj66
0001569E 06                         byte_152B4:	dc.b 6
0001569F E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000156A4 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000156A9 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000156AE E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000156B3 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000156B8 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000156BD 06                         byte_152D3:	dc.b 6
000156BE F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000156C3 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000156C8 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000156CD F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000156D2 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000156D7 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000156DC 06                         byte_152F2:	dc.b 6
000156DD 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000156E2 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000156E7 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000156EC 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000156F1 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000156F6 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000156FB 06                         byte_15311:	dc.b 6
000156FC 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015701 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015706 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001570B 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015710 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015715 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001571A 06                         byte_15330:	dc.b 6
0001571B 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015720 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015725 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001572A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001572F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015734 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015739 06                         byte_1534F:	dc.b 6
0001573A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001573F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015744 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015749 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001574E 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015753 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015758 06                         byte_1536E:	dc.b 6
00015759 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001575E 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015763 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015768 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001576D 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015772 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015777 06                         byte_1538D:	dc.b 6
00015778 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001577D F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015782 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015787 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001578C 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015791 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015796 06                         byte_153AC:	dc.b 6
00015797 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001579C 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000157A1 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000157A6 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000157AB 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000157B0 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000157B5 06                         byte_153CB:	dc.b 6
000157B6 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000157BB E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000157C0 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000157C5 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000157CA F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000157CF F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000157D4 06                         byte_153EA:	dc.b 6
000157D5 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000157DA E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000157DF D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000157E4 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000157E9 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000157EE E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000157F3 06                         byte_15409:	dc.b 6
000157F4 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000157F9 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000157FE CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015803 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015808 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001580D E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015812 06                         byte_15428:	dc.b 6
00015813 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015818 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001581D C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015822 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015827 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001582C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015831 06                         byte_15447:	dc.b 6
00015832 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015837 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001583C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015841 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015846 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001584B E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015850 06                         byte_15466:	dc.b 6
00015851 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015856 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001585B D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015860 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015865 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001586A E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001586F 06                         byte_15485:	dc.b 6
00015870 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015875 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001587A DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001587F DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015884 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015889 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001588E 0C                         byte_154A4:	dc.b $C
0001588F C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015894 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015899 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001589E C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000158A3 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000158A8 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000158AD 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000158B2 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000158B7 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000158BC 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000158C1 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000158C6 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000158CC 00                         		even
000158CC 00                         		even
000158CC                            
000158CC                            ; ===========================================================================
000158CC                            ; ---------------------------------------------------------------------------
000158CC                            ; Object 67 - disc that	you run	around (SBZ)
000158CC                            ; ---------------------------------------------------------------------------
000158CC                            
000158CC                            Obj67:					; XREF: Obj_Index
000158CC 7000                       		moveq	#0,d0
000158CE 1028 0024                  		move.b	$24(a0),d0
000158D2 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000158D6 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000158DA                            ; ===========================================================================
000158DA 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000158DC 0000                       		dc.w Obj67_Action-Obj67_Index
000158DE                            ; ===========================================================================
000158DE                            
000158DE                            Obj67_Main:				; XREF: Obj67_Index
000158DE 5428 0024                  		addq.b	#2,$24(a0)
000158E2 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000158EA 317C C344 0002             		move.w	#$C344,2(a0)
000158F0 117C 0004 0001             		move.b	#4,1(a0)
000158F6 117C 0004 0018             		move.b	#4,$18(a0)
000158FC 117C 0008 0019             		move.b	#8,$19(a0)
00015902 3168 0008 0032             		move.w	8(a0),$32(a0)
00015908 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001590E 117C 0018 0034             		move.b	#$18,$34(a0)
00015914 117C 0048 0038             		move.b	#$48,$38(a0)
0001591A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001591E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015922 6700                       		beq.s	loc_15546
00015924 117C 0010 0034             		move.b	#$10,$34(a0)
0001592A 117C 0038 0038             		move.b	#$38,$38(a0)
00015930                            
00015930                            loc_15546:
00015930 1228 0028                  		move.b	$28(a0),d1	; get object type
00015934 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015938 4881                       		ext.w	d1
0001593A E741                       		asl.w	#3,d1
0001593C 3141 0036                  		move.w	d1,$36(a0)
00015940 1028 0022                  		move.b	$22(a0),d0
00015944 E418                       		ror.b	#2,d0
00015946 0200 00C0                  		andi.b	#-$40,d0
0001594A 1140 0026                  		move.b	d0,$26(a0)
0001594E                            
0001594E                            Obj67_Action:				; XREF: Obj67_Index
0001594E 6100 0000                  		bsr.w	Obj67_MoveSonic
00015952 6100 0000                  		bsr.w	Obj67_MoveSpot
00015956 6000 0000                  		bra.w	Obj67_ChkDel
0001595A                            ; ===========================================================================
0001595A                            
0001595A                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001595A 7400                       		moveq	#0,d2
0001595C 1428 0038                  		move.b	$38(a0),d2
00015960 3602                       		move.w	d2,d3
00015962 D643                       		add.w	d3,d3
00015964 43F8 D000                  		lea	($FFFFD000).w,a1
00015968 3029 0008                  		move.w	8(a1),d0
0001596C 9068 0032                  		sub.w	$32(a0),d0
00015970 D042                       		add.w	d2,d0
00015972 B043                       		cmp.w	d3,d0
00015974 6400                       		bcc.s	loc_155A8
00015976 3229 000C                  		move.w	$C(a1),d1
0001597A 9268 0030                  		sub.w	$30(a0),d1
0001597E D242                       		add.w	d2,d1
00015980 B243                       		cmp.w	d3,d1
00015982 6400                       		bcc.s	loc_155A8
00015984 0829 0001 0022             		btst	#1,$22(a1)
0001598A 6700                       		beq.s	loc_155B8
0001598C 4228 003A                  		clr.b	$3A(a0)
00015990 4E75                       		rts	
00015992                            ; ===========================================================================
00015992                            
00015992                            loc_155A8:
00015992 4A28 003A                  		tst.b	$3A(a0)
00015996 6700                       		beq.s	locret_155B6
00015998 4229 0038                  		clr.b	$38(a1)
0001599C 4228 003A                  		clr.b	$3A(a0)
000159A0                            
000159A0                            locret_155B6:
000159A0 4E75                       		rts	
000159A2                            ; ===========================================================================
000159A2                            
000159A2                            loc_155B8:
000159A2 4A28 003A                  		tst.b	$3A(a0)
000159A6 6600                       		bne.s	loc_155E2
000159A8 117C 0001 003A             		move.b	#1,$3A(a0)
000159AE 0829 0002 0022             		btst	#2,$22(a1)
000159B4 6600                       		bne.s	loc_155D0
000159B6 4229 001C                  		clr.b	$1C(a1)
000159BA                            
000159BA                            loc_155D0:
000159BA 08A9 0005 0022             		bclr	#5,$22(a1)
000159C0 137C 0001 001D             		move.b	#1,$1D(a1)
000159C6 137C 0001 0038             		move.b	#1,$38(a1)
000159CC                            
000159CC                            loc_155E2:
000159CC 3029 0014                  		move.w	$14(a1),d0
000159D0 4A68 0036                  		tst.w	$36(a0)
000159D4 6A00                       		bpl.s	loc_15608
000159D6 0C40 FC00                  		cmpi.w	#-$400,d0
000159DA 6F00                       		ble.s	loc_155FA
000159DC 337C FC00 0014             		move.w	#-$400,$14(a1)
000159E2 4E75                       		rts	
000159E4                            ; ===========================================================================
000159E4                            
000159E4                            loc_155FA:
000159E4 0C40 F100                  		cmpi.w	#-$F00,d0
000159E8 6C00                       		bge.s	locret_15606
000159EA 337C F100 0014             		move.w	#-$F00,$14(a1)
000159F0                            
000159F0                            locret_15606:
000159F0 4E75                       		rts	
000159F2                            ; ===========================================================================
000159F2                            
000159F2                            loc_15608:
000159F2 0C40 0400                  		cmpi.w	#$400,d0
000159F6 6C00                       		bge.s	loc_15616
000159F8 337C 0400 0014             		move.w	#$400,$14(a1)
000159FE 4E75                       		rts	
00015A00                            ; ===========================================================================
00015A00                            
00015A00                            loc_15616:
00015A00 0C40 0F00                  		cmpi.w	#$F00,d0
00015A04 6F00                       		ble.s	locret_15622
00015A06 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015A0C                            
00015A0C                            locret_15622:
00015A0C 4E75                       		rts	
00015A0E                            ; ===========================================================================
00015A0E                            
00015A0E                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015A0E 3028 0036                  		move.w	$36(a0),d0
00015A12 D168 0026                  		add.w	d0,$26(a0)
00015A16 1028 0026                  		move.b	$26(a0),d0
00015A1A 4EB9 0000 28EC             		jsr	(CalcSine).l
00015A20 3428 0030                  		move.w	$30(a0),d2
00015A24 3628 0032                  		move.w	$32(a0),d3
00015A28 7800                       		moveq	#0,d4
00015A2A 1828 0034                  		move.b	$34(a0),d4
00015A2E E14C                       		lsl.w	#8,d4
00015A30 2A04                       		move.l	d4,d5
00015A32 C9C0                       		muls.w	d0,d4
00015A34 4844                       		swap	d4
00015A36 CBC1                       		muls.w	d1,d5
00015A38 4845                       		swap	d5
00015A3A D842                       		add.w	d2,d4
00015A3C DA43                       		add.w	d3,d5
00015A3E 3144 000C                  		move.w	d4,$C(a0)
00015A42 3145 0008                  		move.w	d5,8(a0)
00015A46 4E75                       		rts	
00015A48                            ; ===========================================================================
00015A48                            
00015A48                            Obj67_ChkDel:				; XREF: Obj67_Action
00015A48 3028 0032                  		move.w	$32(a0),d0
00015A4C 0240 FF80                  		andi.w	#-$80,d0
00015A50 3238 F700                  		move.w	($FFFFF700).w,d1
00015A54 0441 0080                  		subi.w	#$80,d1
00015A58 0241 FF80                  		andi.w	#-$80,d1
00015A5C 9041                       		sub.w	d1,d0
00015A5E 0C40 0280                  		cmpi.w	#$280,d0
00015A62 6200                       		bhi.s	Obj67_Delete
00015A64 4EF9 0000 D6AA             		jmp	DisplaySprite
00015A6A                            ; ===========================================================================
00015A6A                            
00015A6A                            Obj67_Delete:
00015A6A 4EF9 0000 D6E6             		jmp	DeleteObject
00015A70                            ; ===========================================================================
00015A70                            ; ---------------------------------------------------------------------------
00015A70                            ; Sprite mappings - disc that you run around (SBZ)
00015A70                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015A70                            ; part of the level tiles.)
00015A70                            ; ---------------------------------------------------------------------------
00015A70                            Map_obj67:
00015A70                            	include "_maps\obj67.asm"
00015A70                            ; ---------------------------------------------------------------------------
00015A70                            ; Sprite mappings - disc that you run around (SBZ)
00015A70                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015A70                            ; part of the level tiles.)
00015A70                            ; ---------------------------------------------------------------------------
00015A70 0000                       		dc.w byte_15688-Map_obj67
00015A72 01                         byte_15688:	dc.b 1
00015A73 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015A78                            		even
00015A78                            		even
00015A78                            
00015A78                            ; ===========================================================================
00015A78                            ; ---------------------------------------------------------------------------
00015A78                            ; Object 68 - conveyor belts (SBZ)
00015A78                            ; ---------------------------------------------------------------------------
00015A78                            
00015A78                            Obj68:					; XREF: Obj_Index
00015A78 7000                       		moveq	#0,d0
00015A7A 1028 0024                  		move.b	$24(a0),d0
00015A7E 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015A82 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015A86                            ; ===========================================================================
00015A86 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015A88 0000                       		dc.w Obj68_Action-Obj68_Index
00015A8A                            ; ===========================================================================
00015A8A                            
00015A8A                            Obj68_Main:				; XREF: Obj68_Index
00015A8A 5428 0024                  		addq.b	#2,$24(a0)
00015A8E 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015A94 1228 0028                  		move.b	$28(a0),d1	; get object type
00015A98 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015A9C 6700                       		beq.s	loc_156BA	; if zero, branch
00015A9E 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015AA4                            
00015AA4                            loc_156BA:
00015AA4 1228 0028                  		move.b	$28(a0),d1	; get object type
00015AA8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015AAC 4881                       		ext.w	d1
00015AAE E841                       		asr.w	#4,d1
00015AB0 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015AB4                            
00015AB4                            Obj68_Action:				; XREF: Obj68_Index
00015AB4 6100                       		bsr.s	Obj68_MoveSonic
00015AB6 3028 0008                  		move.w	8(a0),d0
00015ABA 0240 FF80                  		andi.w	#$FF80,d0
00015ABE 3238 F700                  		move.w	($FFFFF700).w,d1
00015AC2 0441 0080                  		subi.w	#$80,d1
00015AC6 0241 FF80                  		andi.w	#$FF80,d1
00015ACA 9041                       		sub.w	d1,d0
00015ACC 0C40 0280                  		cmpi.w	#$280,d0
00015AD0 6200                       		bhi.s	Obj68_Delete
00015AD2 4E75                       		rts	
00015AD4                            ; ===========================================================================
00015AD4                            
00015AD4                            Obj68_Delete:
00015AD4 4EF9 0000 D6E6             		jmp	DeleteObject
00015ADA                            ; ===========================================================================
00015ADA                            
00015ADA                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015ADA 7400                       		moveq	#0,d2
00015ADC 1428 0038                  		move.b	$38(a0),d2
00015AE0 3602                       		move.w	d2,d3
00015AE2 D643                       		add.w	d3,d3
00015AE4 43F8 D000                  		lea	($FFFFD000).w,a1
00015AE8 3029 0008                  		move.w	8(a1),d0
00015AEC 9068 0008                  		sub.w	8(a0),d0
00015AF0 D042                       		add.w	d2,d0
00015AF2 B043                       		cmp.w	d3,d0
00015AF4 6400                       		bcc.s	locret_1572E
00015AF6 3229 000C                  		move.w	$C(a1),d1
00015AFA 9268 000C                  		sub.w	$C(a0),d1
00015AFE 0641 0030                  		addi.w	#$30,d1
00015B02 0C41 0030                  		cmpi.w	#$30,d1
00015B06 6400                       		bcc.s	locret_1572E
00015B08 0829 0001 0022             		btst	#1,$22(a1)
00015B0E 6600                       		bne.s	locret_1572E
00015B10 3028 0036                  		move.w	$36(a0),d0
00015B14 D169 0008                  		add.w	d0,8(a1)
00015B18                            
00015B18                            locret_1572E:
00015B18 4E75                       		rts	
00015B1A                            
00015B1A                            ; ===========================================================================
00015B1A                            ; ---------------------------------------------------------------------------
00015B1A                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015B1A                            ; ---------------------------------------------------------------------------
00015B1A                            
00015B1A                            Obj69:					; XREF: Obj_Index
00015B1A 7000                       		moveq	#0,d0
00015B1C 1028 0024                  		move.b	$24(a0),d0
00015B20 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015B24 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015B28                            ; ===========================================================================
00015B28 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015B2A 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015B2C 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015B2E                            ; ===========================================================================
00015B2E                            
00015B2E                            Obj69_Main:				; XREF: Obj69_Index
00015B2E 5428 0024                  		addq.b	#2,$24(a0)
00015B32 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015B3A 317C 4492 0002             		move.w	#$4492,2(a0)
00015B40 0028 0004 0001             		ori.b	#4,1(a0)
00015B46 117C 0080 0019             		move.b	#$80,$19(a0)
00015B4C 7000                       		moveq	#0,d0
00015B4E 1028 0028                  		move.b	$28(a0),d0
00015B52 0240 000F                  		andi.w	#$F,d0
00015B56 C0FC 003C                  		mulu.w	#$3C,d0
00015B5A 3140 0032                  		move.w	d0,$32(a0)
00015B5E 4A28 0028                  		tst.b	$28(a0)
00015B62 6A00                       		bpl.s	Obj69_Trapdoor
00015B64 5428 0024                  		addq.b	#2,$24(a0)
00015B68 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015B70 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015B76 117C 0010 0019             		move.b	#$10,$19(a0)
00015B7C 117C 0002 001C             		move.b	#2,$1C(a0)
00015B82 7000                       		moveq	#0,d0
00015B84 1028 0028                  		move.b	$28(a0),d0	; get object type
00015B88 3200                       		move.w	d0,d1
00015B8A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015B8E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015B92 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015B96 3140 0032                  		move.w	d0,$32(a0)
00015B9A 0241 0070                  		andi.w	#$70,d1
00015B9E 0641 0010                  		addi.w	#$10,d1
00015BA2 E549                       		lsl.w	#2,d1
00015BA4 5341                       		subq.w	#1,d1
00015BA6 3141 0036                  		move.w	d1,$36(a0)
00015BAA 6000                       		bra.s	Obj69_Spinner
00015BAC                            ; ===========================================================================
00015BAC                            
00015BAC                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015BAC 5368 0030                  		subq.w	#1,$30(a0)
00015BB0 6A00                       		bpl.s	Obj69_Animate
00015BB2 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015BB8 0868 0000 001C             		bchg	#0,$1C(a0)
00015BBE 4A28 0001                  		tst.b	1(a0)
00015BC2 6A00                       		bpl.s	Obj69_Animate
00015BC4 303C 00BB                  		move.w	#$BB,d0
00015BC8 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play door sound
00015BCE                            
00015BCE                            Obj69_Animate:
00015BCE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015BD4 4EB9 0000 A7A2             		jsr	AnimateSprite
00015BDA 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015BDE 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015BE0 323C 004B                  		move.w	#$4B,d1
00015BE4 343C 000C                  		move.w	#$C,d2
00015BE8 3602                       		move.w	d2,d3
00015BEA 5243                       		addq.w	#1,d3
00015BEC 3828 0008                  		move.w	8(a0),d4
00015BF0 6100 9E8A                  		bsr.w	SolidObject
00015BF4 6000 9B5E                  		bra.w	MarkObjGone
00015BF8                            ; ===========================================================================
00015BF8                            
00015BF8                            Obj69_NotSolid:
00015BF8 0828 0003 0022             		btst	#3,$22(a0)
00015BFE 6700                       		beq.s	Obj69_Display
00015C00 43F8 D000                  		lea	($FFFFD000).w,a1
00015C04 08A9 0003 0022             		bclr	#3,$22(a1)
00015C0A 08A8 0003 0022             		bclr	#3,$22(a0)
00015C10 4228 0025                  		clr.b	$25(a0)
00015C14                            
00015C14                            Obj69_Display:
00015C14 6000 9B3E                  		bra.w	MarkObjGone
00015C18                            ; ===========================================================================
00015C18                            
00015C18                            Obj69_Spinner:				; XREF: Obj69_Index
00015C18 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015C1C C068 0036                  		and.w	$36(a0),d0
00015C20 6600                       		bne.s	Obj69_Delay
00015C22 117C 0001 0034             		move.b	#1,$34(a0)
00015C28                            
00015C28                            Obj69_Delay:
00015C28 4A28 0034                  		tst.b	$34(a0)
00015C2C 6700                       		beq.s	Obj69_Animate2
00015C2E 5368 0030                  		subq.w	#1,$30(a0)
00015C32 6A00                       		bpl.s	Obj69_Animate2
00015C34 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015C3A 4228 0034                  		clr.b	$34(a0)
00015C3E 0868 0000 001C             		bchg	#0,$1C(a0)
00015C44                            
00015C44                            Obj69_Animate2:
00015C44 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015C4A 4EB9 0000 A7A2             		jsr	AnimateSprite
00015C50 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015C54 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015C56 323C 001B                  		move.w	#$1B,d1
00015C5A 343C 0007                  		move.w	#7,d2
00015C5E 3602                       		move.w	d2,d3
00015C60 5243                       		addq.w	#1,d3
00015C62 3828 0008                  		move.w	8(a0),d4
00015C66 6100 9E14                  		bsr.w	SolidObject
00015C6A 6000 9AE8                  		bra.w	MarkObjGone
00015C6E                            ; ===========================================================================
00015C6E                            
00015C6E                            Obj69_NotSolid2:
00015C6E 0828 0003 0022             		btst	#3,$22(a0)
00015C74 6700                       		beq.s	Obj69_Display2
00015C76 43F8 D000                  		lea	($FFFFD000).w,a1
00015C7A 08A9 0003 0022             		bclr	#3,$22(a1)
00015C80 08A8 0003 0022             		bclr	#3,$22(a0)
00015C86 4228 0025                  		clr.b	$25(a0)
00015C8A                            
00015C8A                            Obj69_Display2:
00015C8A 6000 9AC8                  		bra.w	MarkObjGone
00015C8E                            ; ===========================================================================
00015C8E                            Ani_obj69:
00015C8E                            	include "_anim\obj69.asm"
00015C8E                            ; ---------------------------------------------------------------------------
00015C8E                            ; Animation script - trapdoor (SBZ)
00015C8E                            ; ---------------------------------------------------------------------------
00015C8E 0000                       		dc.w byte_158AC-Ani_obj69
00015C90 0000                       		dc.w byte_158B2-Ani_obj69
00015C92 0000                       		dc.w byte_158B8-Ani_obj69
00015C94 0000                       		dc.w byte_158CC-Ani_obj69
00015C96 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015C9C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015CA2 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015CAF 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015CB6 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015CC3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015CCA                            		even
00015CCA                            		even
00015CCA                            
00015CCA                            ; ---------------------------------------------------------------------------
00015CCA                            ; Sprite mappings - trapdoor (SBZ)
00015CCA                            ; ---------------------------------------------------------------------------
00015CCA                            Map_obj69:
00015CCA                            	include "_maps\obj69.asm"
00015CCA                            ; ---------------------------------------------------------------------------
00015CCA                            ; Sprite mappings - trapdoor (SBZ)
00015CCA                            ; ---------------------------------------------------------------------------
00015CCA 0000                       		dc.w byte_158E6-Map_obj69
00015CCC 0000                       		dc.w byte_158FB-Map_obj69
00015CCE 0000                       		dc.w byte_15924-Map_obj69
00015CD0 04                         byte_158E6:	dc.b 4
00015CD1 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015CD6 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015CDB F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015CE0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015CE5 08                         byte_158FB:	dc.b 8
00015CE6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015CEB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015CF0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015CF5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015CFA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015CFF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015D04 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015D09 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015D0E 04                         byte_15924:	dc.b 4
00015D0F 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015D14 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015D19 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015D1E 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015D24 00                         		even
00015D24 00                         		even
00015D24                            
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            ; Sprite mappings - spinning platforms (SBZ)
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            Map_obj69a:
00015D24                            	include "_maps\obj69a.asm"
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            ; Sprite mappings - spinning platforms (SBZ)
00015D24                            ; ---------------------------------------------------------------------------
00015D24 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015D28 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015D2C 0000                       		dc.w byte_15970-Map_obj69a
00015D2E 02                         byte_15944:	dc.b 2
00015D2F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015D34 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015D39 02                         byte_1594F:	dc.b 2
00015D3A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015D3F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015D44 02                         byte_1595A:	dc.b 2
00015D45 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015D4A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015D4F 02                         byte_15965:	dc.b 2
00015D50 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015D55 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015D5A 02                         byte_15970:	dc.b 2
00015D5B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015D60 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015D66 00                         		even
00015D66 00                         		even
00015D66                            
00015D66                            ; ===========================================================================
00015D66                            ; ---------------------------------------------------------------------------
00015D66                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015D66                            ; ---------------------------------------------------------------------------
00015D66                            
00015D66                            Obj6A:					; XREF: Obj_Index
00015D66 7000                       		moveq	#0,d0
00015D68 1028 0024                  		move.b	$24(a0),d0
00015D6C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015D70 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015D74                            ; ===========================================================================
00015D74 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015D76 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015D78                            ; ===========================================================================
00015D78                            
00015D78                            Obj6A_Main:				; XREF: Obj6A_Index
00015D78 5428 0024                  		addq.b	#2,$24(a0)
00015D7C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015D84 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015D8A 117C 0004 0001             		move.b	#4,1(a0)
00015D90 117C 0004 0018             		move.b	#4,$18(a0)
00015D96 117C 0020 0019             		move.b	#$20,$19(a0)
00015D9C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015DA2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015DA8 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015DAE 6400                       		bcc.s	Obj6A_Action
00015DB0 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015DB6                            
00015DB6                            Obj6A_Action:				; XREF: Obj6A_Index
00015DB6 7000                       		moveq	#0,d0
00015DB8 1028 0028                  		move.b	$28(a0),d0
00015DBC 0240 0007                  		andi.w	#7,d0
00015DC0 D040                       		add.w	d0,d0
00015DC2 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015DC6 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015DCA 3028 003A                  		move.w	$3A(a0),d0
00015DCE 0240 FF80                  		andi.w	#$FF80,d0
00015DD2 3238 F700                  		move.w	($FFFFF700).w,d1
00015DD6 0441 0080                  		subi.w	#$80,d1
00015DDA 0241 FF80                  		andi.w	#$FF80,d1
00015DDE 9041                       		sub.w	d1,d0
00015DE0 0C40 0280                  		cmpi.w	#$280,d0
00015DE4 6200                       		bhi.s	Obj6A_Delete
00015DE6 4EF9 0000 D6AA             		jmp	DisplaySprite
00015DEC                            ; ===========================================================================
00015DEC                            
00015DEC                            Obj6A_Delete:
00015DEC 4EF9 0000 D6E6             		jmp	DeleteObject
00015DF2                            ; ===========================================================================
00015DF2 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015DF6 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015DFA 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015DFC                            ; ===========================================================================
00015DFC                            
00015DFC                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015DFC 4E75                       		rts	
00015DFE                            ; ===========================================================================
00015DFE                            
00015DFE                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015DFE 323C 0060                  		move.w	#$60,d1
00015E02 7000                       		moveq	#0,d0
00015E04 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015E08 0828 0000 0022             		btst	#0,$22(a0)
00015E0E 6700                       		beq.s	Obj6A_Animate01
00015E10 4440                       		neg.w	d0
00015E12 D041                       		add.w	d1,d0
00015E14                            
00015E14                            Obj6A_Animate01:
00015E14 3228 003A                  		move.w	$3A(a0),d1
00015E18 9240                       		sub.w	d0,d1
00015E1A 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015E1E 5328 001E                  		subq.b	#1,$1E(a0)
00015E22 6A00                       		bpl.s	loc_15A46
00015E24 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015E2A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015E30                            
00015E30                            loc_15A46:
00015E30 4A28 0001                  		tst.b	1(a0)
00015E34 6A00                       		bpl.s	locret_15A60
00015E36 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E3A 0240 000F                  		andi.w	#$F,d0
00015E3E 6600                       		bne.s	locret_15A60
00015E40 303C 00B0                  		move.w	#$B0,d0
00015E44 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
00015E4A                            
00015E4A                            locret_15A60:
00015E4A 4E75                       		rts	
00015E4C                            ; ===========================================================================
00015E4C                            
00015E4C                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015E4C 323C 0030                  		move.w	#$30,d1
00015E50 7000                       		moveq	#0,d0
00015E52 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015E56 0828 0000 0022             		btst	#0,$22(a0)
00015E5C 6700                       		beq.s	Obj6A_Animate02
00015E5E 4440                       		neg.w	d0
00015E60 0640 0080                  		addi.w	#$80,d0
00015E64                            
00015E64                            Obj6A_Animate02:
00015E64 3228 0038                  		move.w	$38(a0),d1
00015E68 9240                       		sub.w	d0,d1
00015E6A 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015E6E 5328 001E                  		subq.b	#1,$1E(a0)
00015E72 6A00                       		bpl.s	loc_15A96
00015E74 117C 0002 001E             		move.b	#2,$1E(a0)
00015E7A 0868 0000 001A             		bchg	#0,$1A(a0)
00015E80                            
00015E80                            loc_15A96:
00015E80 4A28 0001                  		tst.b	1(a0)
00015E84 6A00                       		bpl.s	locret_15AB0
00015E86 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015E8A 0C00 0018                  		cmpi.b	#$18,d0
00015E8E 6600                       		bne.s	locret_15AB0
00015E90 303C 00B0                  		move.w	#$B0,d0
00015E94 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
00015E9A                            
00015E9A                            locret_15AB0:
00015E9A 4E75                       		rts	
00015E9C                            ; ===========================================================================
00015E9C                            
00015E9C                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015E9C 4A28 003D                  		tst.b	$3D(a0)
00015EA0 6600                       		bne.s	Obj6A_Animate03
00015EA2 3038 D008                  		move.w	($FFFFD008).w,d0
00015EA6 0440 00C0                  		subi.w	#$C0,d0
00015EAA 6500                       		bcs.s	loc_15B02
00015EAC 9068 0008                  		sub.w	8(a0),d0
00015EB0 6500                       		bcs.s	loc_15B02
00015EB2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015EB6 0440 0080                  		subi.w	#$80,d0
00015EBA B068 000C                  		cmp.w	$C(a0),d0
00015EBE 6400                       		bcc.s	locret_15B04
00015EC0 0640 0100                  		addi.w	#$100,d0
00015EC4 B068 000C                  		cmp.w	$C(a0),d0
00015EC8 6500                       		bcs.s	locret_15B04
00015ECA 117C 0001 003D             		move.b	#1,$3D(a0)
00015ED0 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015ED6 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015EDC 117C 0002 001A             		move.b	#2,$1A(a0)
00015EE2 303C 00B0                  		move.w	#$B0,d0
00015EE6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
00015EEC                            
00015EEC                            loc_15B02:
00015EEC 588F                       		addq.l	#4,sp
00015EEE                            
00015EEE                            locret_15B04:
00015EEE 4E75                       		rts	
00015EF0                            ; ===========================================================================
00015EF0                            
00015EF0                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015EF0 4EB9 0000 D684             		jsr	SpeedToPos
00015EF6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015EFC 5328 001E                  		subq.b	#1,$1E(a0)
00015F00 6A00                       		bpl.s	locret_15B24
00015F02 117C 0002 001E             		move.b	#2,$1E(a0)
00015F08 0868 0000 001A             		bchg	#0,$1A(a0)
00015F0E                            
00015F0E                            locret_15B24:
00015F0E 4E75                       		rts	
00015F10                            ; ===========================================================================
00015F10                            
00015F10                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015F10 4A28 003D                  		tst.b	$3D(a0)
00015F14 6600                       		bne.s	Obj6A_Animate04
00015F16 3038 D008                  		move.w	($FFFFD008).w,d0
00015F1A 0640 00E0                  		addi.w	#$E0,d0
00015F1E 9068 0008                  		sub.w	8(a0),d0
00015F22 6400                       		bcc.s	loc_15B74
00015F24 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015F28 0440 0080                  		subi.w	#$80,d0
00015F2C B068 000C                  		cmp.w	$C(a0),d0
00015F30 6400                       		bcc.s	locret_15B76
00015F32 0640 0100                  		addi.w	#$100,d0
00015F36 B068 000C                  		cmp.w	$C(a0),d0
00015F3A 6500                       		bcs.s	locret_15B76
00015F3C 117C 0001 003D             		move.b	#1,$3D(a0)
00015F42 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015F48 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F4E 117C 0002 001A             		move.b	#2,$1A(a0)
00015F54 303C 00B0                  		move.w	#$B0,d0
00015F58 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play saw sound
00015F5E                            
00015F5E                            loc_15B74:
00015F5E 588F                       		addq.l	#4,sp
00015F60                            
00015F60                            locret_15B76:
00015F60 4E75                       		rts	
00015F62                            ; ===========================================================================
00015F62                            
00015F62                            Obj6A_Animate04:
00015F62 4EB9 0000 D684             		jsr	SpeedToPos
00015F68 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F6E 5328 001E                  		subq.b	#1,$1E(a0)
00015F72 6A00                       		bpl.s	locret_15B96
00015F74 117C 0002 001E             		move.b	#2,$1E(a0)
00015F7A 0868 0000 001A             		bchg	#0,$1A(a0)
00015F80                            
00015F80                            locret_15B96:
00015F80 4E75                       		rts	
00015F82                            ; ===========================================================================
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            Map_obj6A:
00015F82                            	include "_maps\obj6A.asm"
00015F82                            ; ---------------------------------------------------------------------------
00015F82                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015F82                            ; ---------------------------------------------------------------------------
00015F82 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015F86 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015F8A 07                         byte_15BA0:	dc.b 7
00015F8B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015F90 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015F95 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015F9A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015F9F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015FA4 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015FA9 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015FAE 07                         byte_15BC4:	dc.b 7
00015FAF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015FB4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015FB9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015FBE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015FC3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015FC8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015FCD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015FD2 04                         byte_15BE8:	dc.b 4
00015FD3 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015FD8 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015FDD 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015FE2 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015FE7 04                         byte_15BFD:	dc.b 4
00015FE8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015FED E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015FF2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015FF7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015FFC                            		even
00015FFC                            		even
00015FFC                            
00015FFC                            ; ===========================================================================
00015FFC                            ; ---------------------------------------------------------------------------
00015FFC                            ; Object 6B - stomper (SBZ)
00015FFC                            ; ---------------------------------------------------------------------------
00015FFC                            
00015FFC                            Obj6B:					; XREF: Obj_Index
00015FFC 7000                       		moveq	#0,d0
00015FFE 1028 0024                  		move.b	$24(a0),d0
00016002 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016006 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001600A                            ; ===========================================================================
0001600A 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001600C 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001600E                            
0001600E 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016012 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016016 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001601A 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001601E 8040 0005                  		dc.b  $80, $40,	  0,   5
00016022                            ; ===========================================================================
00016022                            
00016022                            Obj6B_Main:				; XREF: Obj6B_Index
00016022 5428 0024                  		addq.b	#2,$24(a0)
00016026 7000                       		moveq	#0,d0
00016028 1028 0028                  		move.b	$28(a0),d0
0001602C E448                       		lsr.w	#2,d0
0001602E 0240 001C                  		andi.w	#$1C,d0
00016032 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016036 115B 0019                  		move.b	(a3)+,$19(a0)
0001603A 115B 0016                  		move.b	(a3)+,$16(a0)
0001603E E448                       		lsr.w	#2,d0
00016040 1140 001A                  		move.b	d0,$1A(a0)
00016044 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001604C 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016052 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016058 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001605A 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016060 6700                       		beq.s	Obj6B_SBZ3
00016062                            
00016062                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016062 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016066 7000                       		moveq	#0,d0
00016068 1028 0023                  		move.b	$23(a0),d0
0001606C 6700                       		beq.s	Obj6B_Delete
0001606E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016074                            
00016074                            Obj6B_Delete:
00016074 4EF9 0000 D6E6             		jmp	DeleteObject
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001607A 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016080 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016086 6600                       		bne.s	Obj6B_SBZ12
00016088 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001608C 7000                       		moveq	#0,d0
0001608E 1028 0023                  		move.b	$23(a0),d0
00016092 6700                       		beq.s	Obj6B_SBZ12
00016094 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001609A 6700                       		beq.s	Obj6B_SBZ12
0001609C 4238 F7CB                  		clr.b	($FFFFF7CB).w
000160A0 60C0                       		bra.s	Obj6B_ChkGone
000160A2                            ; ===========================================================================
000160A2                            
000160A2                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000160A2 0028 0004 0001             		ori.b	#4,1(a0)
000160A8 117C 0004 0018             		move.b	#4,$18(a0)
000160AE 3168 0008 0034             		move.w	8(a0),$34(a0)
000160B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000160BA 7000                       		moveq	#0,d0
000160BC 101B                       		move.b	(a3)+,d0
000160BE 3140 003C                  		move.w	d0,$3C(a0)
000160C2 7000                       		moveq	#0,d0
000160C4 1028 0028                  		move.b	$28(a0),d0
000160C8 6A00                       		bpl.s	Obj6B_Action
000160CA 0200 000F                  		andi.b	#$F,d0
000160CE 1140 003E                  		move.b	d0,$3E(a0)
000160D2 1153 0028                  		move.b	(a3),$28(a0)
000160D6 0C13 0005                  		cmpi.b	#5,(a3)
000160DA 6600                       		bne.s	Obj6B_ChkGone2
000160DC 08E8 0004 0001             		bset	#4,1(a0)
000160E2                            
000160E2                            Obj6B_ChkGone2:
000160E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000160E6 7000                       		moveq	#0,d0
000160E8 1028 0023                  		move.b	$23(a0),d0
000160EC 6700                       		beq.s	Obj6B_Action
000160EE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000160F4                            
000160F4                            Obj6B_Action:				; XREF: Obj6B_Index
000160F4 3F28 0008                  		move.w	8(a0),-(sp)
000160F8 7000                       		moveq	#0,d0
000160FA 1028 0028                  		move.b	$28(a0),d0
000160FE 0240 000F                  		andi.w	#$F,d0
00016102 D040                       		add.w	d0,d0
00016104 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016108 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001610C 381F                       		move.w	(sp)+,d4
0001610E 4A28 0001                  		tst.b	1(a0)
00016112 6A00                       		bpl.s	Obj6B_ChkDel
00016114 7200                       		moveq	#0,d1
00016116 1228 0019                  		move.b	$19(a0),d1
0001611A 0641 000B                  		addi.w	#$B,d1
0001611E 7400                       		moveq	#0,d2
00016120 1428 0016                  		move.b	$16(a0),d2
00016124 3602                       		move.w	d2,d3
00016126 5243                       		addq.w	#1,d3
00016128 6100 9952                  		bsr.w	SolidObject
0001612C                            
0001612C                            Obj6B_ChkDel:
0001612C 3028 0034                  		move.w	$34(a0),d0
00016130 0240 FF80                  		andi.w	#$FF80,d0
00016134 3238 F700                  		move.w	($FFFFF700).w,d1
00016138 0441 0080                  		subi.w	#$80,d1
0001613C 0241 FF80                  		andi.w	#$FF80,d1
00016140 9041                       		sub.w	d1,d0
00016142 0C40 0280                  		cmpi.w	#$280,d0
00016146 6200                       		bhi.s	loc_15D64
00016148 4EF9 0000 D6AA             		jmp	DisplaySprite
0001614E                            ; ===========================================================================
0001614E                            
0001614E                            loc_15D64:
0001614E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016154 6600                       		bne.s	Obj6B_Delete2
00016156 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001615A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001615E 7000                       		moveq	#0,d0
00016160 1028 0023                  		move.b	$23(a0),d0
00016164 6700                       		beq.s	Obj6B_Delete2
00016166 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001616C                            
0001616C                            Obj6B_Delete2:
0001616C 4EF9 0000 D6E6             		jmp	DeleteObject
00016172                            ; ===========================================================================
00016172 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016176 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001617A 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001617E                            ; ===========================================================================
0001617E                            
0001617E                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001617E 4E75                       		rts	
00016180                            ; ===========================================================================
00016180                            
00016180                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016180 4A28 0038                  		tst.b	$38(a0)
00016184 6600                       		bne.s	loc_15DB4
00016186 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001618A 7000                       		moveq	#0,d0
0001618C 1028 003E                  		move.b	$3E(a0),d0
00016190 0832 0000 0000             		btst	#0,(a2,d0.w)
00016196 6700                       		beq.s	loc_15DC2
00016198 117C 0001 0038             		move.b	#1,$38(a0)
0001619E                            
0001619E                            loc_15DB4:
0001619E 3028 003C                  		move.w	$3C(a0),d0
000161A2 B068 003A                  		cmp.w	$3A(a0),d0
000161A6 6700                       		beq.s	loc_15DE0
000161A8 5468 003A                  		addq.w	#2,$3A(a0)
000161AC                            
000161AC                            loc_15DC2:
000161AC 3028 003A                  		move.w	$3A(a0),d0
000161B0 0828 0000 0022             		btst	#0,$22(a0)
000161B6 6700                       		beq.s	loc_15DD4
000161B8 4440                       		neg.w	d0
000161BA 0640 0080                  		addi.w	#$80,d0
000161BE                            
000161BE                            loc_15DD4:
000161BE 3228 0034                  		move.w	$34(a0),d1
000161C2 9240                       		sub.w	d0,d1
000161C4 3141 0008                  		move.w	d1,8(a0)
000161C8 4E75                       		rts	
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            loc_15DE0:
000161CA 5228 0028                  		addq.b	#1,$28(a0)
000161CE 317C 00B4 0036             		move.w	#$B4,$36(a0)
000161D4 4228 0038                  		clr.b	$38(a0)
000161D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000161DC 7000                       		moveq	#0,d0
000161DE 1028 0023                  		move.b	$23(a0),d0
000161E2 67C8                       		beq.s	loc_15DC2
000161E4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000161EA 60C0                       		bra.s	loc_15DC2
000161EC                            ; ===========================================================================
000161EC                            
000161EC                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000161EC 4A28 0038                  		tst.b	$38(a0)
000161F0 6600                       		bne.s	loc_15E14
000161F2 5368 0036                  		subq.w	#1,$36(a0)
000161F6 6600                       		bne.s	loc_15E1E
000161F8 117C 0001 0038             		move.b	#1,$38(a0)
000161FE                            
000161FE                            loc_15E14:
000161FE 4A68 003A                  		tst.w	$3A(a0)
00016202 6700                       		beq.s	loc_15E3C
00016204 5568 003A                  		subq.w	#2,$3A(a0)
00016208                            
00016208                            loc_15E1E:
00016208 3028 003A                  		move.w	$3A(a0),d0
0001620C 0828 0000 0022             		btst	#0,$22(a0)
00016212 6700                       		beq.s	loc_15E30
00016214 4440                       		neg.w	d0
00016216 0640 0080                  		addi.w	#$80,d0
0001621A                            
0001621A                            loc_15E30:
0001621A 3228 0034                  		move.w	$34(a0),d1
0001621E 9240                       		sub.w	d0,d1
00016220 3141 0008                  		move.w	d1,8(a0)
00016224 4E75                       		rts	
00016226                            ; ===========================================================================
00016226                            
00016226                            loc_15E3C:
00016226 5328 0028                  		subq.b	#1,$28(a0)
0001622A 4228 0038                  		clr.b	$38(a0)
0001622E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016232 7000                       		moveq	#0,d0
00016234 1028 0023                  		move.b	$23(a0),d0
00016238 67CE                       		beq.s	loc_15E1E
0001623A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016240 60C6                       		bra.s	loc_15E1E
00016242                            ; ===========================================================================
00016242                            
00016242                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016242 4A28 0038                  		tst.b	$38(a0)
00016246 6600                       		bne.s	loc_15E7C
00016248 4A68 003A                  		tst.w	$3A(a0)
0001624C 6700                       		beq.s	loc_15E6A
0001624E 5368 003A                  		subq.w	#1,$3A(a0)
00016252 6000                       		bra.s	loc_15E8E
00016254                            ; ===========================================================================
00016254                            
00016254                            loc_15E6A:
00016254 5368 0036                  		subq.w	#1,$36(a0)
00016258 6A00                       		bpl.s	loc_15E8E
0001625A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016260 117C 0001 0038             		move.b	#1,$38(a0)
00016266                            
00016266                            loc_15E7C:
00016266 5068 003A                  		addq.w	#8,$3A(a0)
0001626A 3028 003A                  		move.w	$3A(a0),d0
0001626E B068 003C                  		cmp.w	$3C(a0),d0
00016272 6600                       		bne.s	loc_15E8E
00016274 4228 0038                  		clr.b	$38(a0)
00016278                            
00016278                            loc_15E8E:
00016278 3028 003A                  		move.w	$3A(a0),d0
0001627C 0828 0000 0022             		btst	#0,$22(a0)
00016282 6700                       		beq.s	loc_15EA0
00016284 4440                       		neg.w	d0
00016286 0640 0038                  		addi.w	#$38,d0
0001628A                            
0001628A                            loc_15EA0:
0001628A 3228 0030                  		move.w	$30(a0),d1
0001628E D240                       		add.w	d0,d1
00016290 3141 000C                  		move.w	d1,$C(a0)
00016294 4E75                       		rts	
00016296                            ; ===========================================================================
00016296                            
00016296                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016296 4A28 0038                  		tst.b	$38(a0)
0001629A 6600                       		bne.s	loc_15ED0
0001629C 4A68 003A                  		tst.w	$3A(a0)
000162A0 6700                       		beq.s	loc_15EBE
000162A2 5168 003A                  		subq.w	#8,$3A(a0)
000162A6 6000                       		bra.s	loc_15EF0
000162A8                            ; ===========================================================================
000162A8                            
000162A8                            loc_15EBE:
000162A8 5368 0036                  		subq.w	#1,$36(a0)
000162AC 6A00                       		bpl.s	loc_15EF0
000162AE 317C 003C 0036             		move.w	#$3C,$36(a0)
000162B4 117C 0001 0038             		move.b	#1,$38(a0)
000162BA                            
000162BA                            loc_15ED0:
000162BA 3028 003A                  		move.w	$3A(a0),d0
000162BE B068 003C                  		cmp.w	$3C(a0),d0
000162C2 6700                       		beq.s	loc_15EE0
000162C4 5068 003A                  		addq.w	#8,$3A(a0)
000162C8 6000                       		bra.s	loc_15EF0
000162CA                            ; ===========================================================================
000162CA                            
000162CA                            loc_15EE0:
000162CA 5368 0036                  		subq.w	#1,$36(a0)
000162CE 6A00                       		bpl.s	loc_15EF0
000162D0 317C 003C 0036             		move.w	#$3C,$36(a0)
000162D6 4228 0038                  		clr.b	$38(a0)
000162DA                            
000162DA                            loc_15EF0:
000162DA 3028 003A                  		move.w	$3A(a0),d0
000162DE 0828 0000 0022             		btst	#0,$22(a0)
000162E4 6700                       		beq.s	loc_15F02
000162E6 4440                       		neg.w	d0
000162E8 0640 0038                  		addi.w	#$38,d0
000162EC                            
000162EC                            loc_15F02:
000162EC 3228 0030                  		move.w	$30(a0),d1
000162F0 D240                       		add.w	d0,d1
000162F2 3141 000C                  		move.w	d1,$C(a0)
000162F6 4E75                       		rts	
000162F8                            ; ===========================================================================
000162F8                            
000162F8                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000162F8 4A28 0038                  		tst.b	$38(a0)
000162FC 6600                       		bne.s	loc_15F3E
000162FE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016302 7000                       		moveq	#0,d0
00016304 1028 003E                  		move.b	$3E(a0),d0
00016308 0832 0000 0000             		btst	#0,(a2,d0.w)
0001630E 6700                       		beq.s	locret_15F5C
00016310 117C 0001 0038             		move.b	#1,$38(a0)
00016316 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001631A 7000                       		moveq	#0,d0
0001631C 1028 0023                  		move.b	$23(a0),d0
00016320 6700                       		beq.s	loc_15F3E
00016322 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016328                            
00016328                            loc_15F3E:
00016328 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016330 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016338 3168 0008 0034             		move.w	8(a0),$34(a0)
0001633E 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016344 6700                       		beq.s	loc_15F5E
00016346                            
00016346                            locret_15F5C:
00016346 4E75                       		rts	
00016348                            ; ===========================================================================
00016348                            
00016348                            loc_15F5E:
00016348 4228 0028                  		clr.b	$28(a0)
0001634C 4228 0038                  		clr.b	$38(a0)
00016350 4E75                       		rts	
00016352                            ; ===========================================================================
00016352                            ; ---------------------------------------------------------------------------
00016352                            ; Sprite mappings - stomper and	platforms (SBZ)
00016352                            ; ---------------------------------------------------------------------------
00016352                            Map_obj6B:
00016352                            	include "_maps\obj6B.asm"
00016352                            ; ---------------------------------------------------------------------------
00016352                            ; Sprite mappings - stomper and	platforms (SBZ)
00016352                            ; ---------------------------------------------------------------------------
00016352 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016356 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001635A 0000                       		dc.w byte_15FB0-Map_obj6B
0001635C 04                         byte_15F72:	dc.b 4
0001635D F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016362 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016367 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001636C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016371 08                         byte_15F87:	dc.b 8
00016372 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016377 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001637C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016381 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016386 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001638B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016390 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016395 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001639A 0E                         byte_15FB0:	dc.b $E
0001639B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000163A0 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000163A5 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000163AA C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000163AF C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000163B4 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000163B9 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000163BE C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000163C3 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000163C8 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000163CD E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000163D2 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000163D7 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000163DC 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000163E2 00                         		even
000163E2 00                         		even
000163E2                            
000163E2                            ; ===========================================================================
000163E2                            ; ---------------------------------------------------------------------------
000163E2                            ; Object 6C - vanishing	platforms (SBZ)
000163E2                            ; ---------------------------------------------------------------------------
000163E2                            
000163E2                            Obj6C:					; XREF: Obj_Index
000163E2 7000                       		moveq	#0,d0
000163E4 1028 0024                  		move.b	$24(a0),d0
000163E8 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000163EC 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000163F0                            ; ===========================================================================
000163F0 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000163F2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000163F4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000163F6 0000                       		dc.w loc_16068-Obj6C_Index
000163F8                            ; ===========================================================================
000163F8                            
000163F8                            Obj6C_Main:				; XREF: Obj6C_Index
000163F8 5C28 0024                  		addq.b	#6,$24(a0)
000163FC 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016404 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001640A 0028 0004 0001             		ori.b	#4,1(a0)
00016410 117C 0010 0019             		move.b	#$10,$19(a0)
00016416 117C 0004 0018             		move.b	#4,$18(a0)
0001641C 7000                       		moveq	#0,d0
0001641E 1028 0028                  		move.b	$28(a0),d0	; get object type
00016422 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016426 5240                       		addq.w	#1,d0		; add 1
00016428 EF48                       		lsl.w	#7,d0		; multiply by $80
0001642A 3200                       		move.w	d0,d1
0001642C 5340                       		subq.w	#1,d0
0001642E 3140 0030                  		move.w	d0,$30(a0)
00016432 3140 0032                  		move.w	d0,$32(a0)
00016436 7000                       		moveq	#0,d0
00016438 1028 0028                  		move.b	$28(a0),d0	; get object type
0001643C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016440 0641 0080                  		addi.w	#$80,d1
00016444 C0C1                       		mulu.w	d1,d0
00016446 E088                       		lsr.l	#8,d0
00016448 3140 0036                  		move.w	d0,$36(a0)
0001644C 5341                       		subq.w	#1,d1
0001644E 3141 0038                  		move.w	d1,$38(a0)
00016452                            
00016452                            loc_16068:				; XREF: Obj6C_Index
00016452 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016456 9068 0036                  		sub.w	$36(a0),d0
0001645A C068 0038                  		and.w	$38(a0),d0
0001645E 6600                       		bne.s	Obj6C_Animate
00016460 5928 0024                  		subq.b	#4,$24(a0)
00016464 6000                       		bra.s	Obj6C_Vanish
00016466                            ; ===========================================================================
00016466                            
00016466                            Obj6C_Animate:
00016466 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001646C 4EB9 0000 A7A2             		jsr	AnimateSprite
00016472 6000 92E0                  		bra.w	MarkObjGone
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016476 5368 0030                  		subq.w	#1,$30(a0)
0001647A 6A00                       		bpl.s	loc_160AA
0001647C 317C 007F 0030             		move.w	#127,$30(a0)
00016482 4A28 001C                  		tst.b	$1C(a0)
00016486 6700                       		beq.s	loc_160A4
00016488 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001648E                            
0001648E                            loc_160A4:
0001648E 0868 0000 001C             		bchg	#0,$1C(a0)
00016494                            
00016494                            loc_160AA:
00016494 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001649A 4EB9 0000 A7A2             		jsr	AnimateSprite
000164A0 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000164A6 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000164A8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000164AE 6600                       		bne.s	loc_160D6
000164B0 7200                       		moveq	#0,d1
000164B2 1228 0019                  		move.b	$19(a0),d1
000164B6 4EB9 0000 7498             		jsr	(PlatformObject).l
000164BC 6000 9296                  		bra.w	MarkObjGone
000164C0                            ; ===========================================================================
000164C0                            
000164C0                            loc_160D6:
000164C0 7200                       		moveq	#0,d1
000164C2 1228 0019                  		move.b	$19(a0),d1
000164C6 4EB9 0000 760C             		jsr	(ExitPlatform).l
000164CC 3428 0008                  		move.w	8(a0),d2
000164D0 4EB9 0000 7B76             		jsr	(MvSonicOnPtfm2).l
000164D6 6000 927C                  		bra.w	MarkObjGone
000164DA                            ; ===========================================================================
000164DA                            
000164DA                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000164DA 0828 0003 0022             		btst	#3,$22(a0)
000164E0 6700                       		beq.s	Obj6C_Display
000164E2 43F8 D000                  		lea	($FFFFD000).w,a1
000164E6 08A9 0003 0022             		bclr	#3,$22(a1)
000164EC 08A8 0003 0022             		bclr	#3,$22(a0)
000164F2 117C 0002 0024             		move.b	#2,$24(a0)
000164F8 4228 0025                  		clr.b	$25(a0)
000164FC                            
000164FC                            Obj6C_Display:
000164FC 6000 9256                  		bra.w	MarkObjGone
00016500                            ; ===========================================================================
00016500                            Ani_obj6C:
00016500                            	include "_anim\obj6C.asm"
00016500                            ; ---------------------------------------------------------------------------
00016500                            ; Animation script - vanishing platforms (SBZ)
00016500                            ; ---------------------------------------------------------------------------
00016500 0000                       		dc.w byte_1611A-Ani_obj6C
00016502 0000                       		dc.w byte_16122-Ani_obj6C
00016504 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001650C 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016514                            		even
00016514                            		even
00016514                            
00016514                            ; ---------------------------------------------------------------------------
00016514                            ; Sprite mappings - vanishing platforms	(SBZ)
00016514                            ; ---------------------------------------------------------------------------
00016514                            Map_obj6C:
00016514                            	include "_maps\obj6C.asm"
00016514                            ; ---------------------------------------------------------------------------
00016514                            ; Sprite mappings - vanishing platforms	(SBZ)
00016514                            ; ---------------------------------------------------------------------------
00016514 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016518 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001651C 01                         byte_16132:	dc.b 1
0001651D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016522 01                         byte_16138:	dc.b 1
00016523 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016528 01                         byte_1613E:	dc.b 1
00016529 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001652E 00                         byte_16144:	dc.b 0
00016530 00                         		even
00016530 00                         		even
00016530                            
00016530                            ; ===========================================================================
00016530                            ; ---------------------------------------------------------------------------
00016530                            ; Object 6E - electrocution orbs (SBZ)
00016530                            ; ---------------------------------------------------------------------------
00016530                            
00016530                            Obj6E:					; XREF: Obj_Index
00016530 7000                       		moveq	#0,d0
00016532 1028 0024                  		move.b	$24(a0),d0
00016536 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001653A 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001653E                            ; ===========================================================================
0001653E 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016540 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016542                            ; ===========================================================================
00016542                            
00016542                            Obj6E_Main:				; XREF: Obj6E_Index
00016542 5428 0024                  		addq.b	#2,$24(a0)
00016546 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001654E 317C 047E 0002             		move.w	#$47E,2(a0)
00016554 0028 0004 0001             		ori.b	#4,1(a0)
0001655A 117C 0028 0019             		move.b	#$28,$19(a0)
00016560 7000                       		moveq	#0,d0
00016562 1028 0028                  		move.b	$28(a0),d0	; read object type
00016566 E948                       		lsl.w	#4,d0		; multiply by $10
00016568 5340                       		subq.w	#1,d0
0001656A 3140 0034                  		move.w	d0,$34(a0)
0001656E                            
0001656E                            Obj6E_Shock:				; XREF: Obj6E_Index
0001656E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016572 C068 0034                  		and.w	$34(a0),d0
00016576 6600                       		bne.s	Obj6E_Animate
00016578 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001657E 4A28 0001                  		tst.b	1(a0)
00016582 6A00                       		bpl.s	Obj6E_Animate
00016584 303C 00B1                  		move.w	#$B1,d0
00016588 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play electricity sound
0001658E                            
0001658E                            Obj6E_Animate:
0001658E 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016594 4EB9 0000 A7A2             		jsr	AnimateSprite
0001659A 117C 0000 0020             		move.b	#0,$20(a0)
000165A0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000165A6 6600                       		bne.s	Obj6E_Display	; if not, branch
000165A8 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000165AE                            
000165AE                            Obj6E_Display:
000165AE 6000 91A4                  		bra.w	MarkObjGone
000165B2                            ; ===========================================================================
000165B2                            Ani_obj6E:
000165B2                            	include "_anim\obj6E.asm"
000165B2                            ; ---------------------------------------------------------------------------
000165B2                            ; Animation script - electrocution orbs (SBZ)
000165B2                            ; ---------------------------------------------------------------------------
000165B2 0000                       		dc.w byte_161CC-Ani_obj6E
000165B4 0000                       		dc.w byte_161D0-Ani_obj6E
000165B6 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000165BA 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000165CA                            		even
000165CA                            		even
000165CA                            
000165CA                            ; ---------------------------------------------------------------------------
000165CA                            ; Sprite mappings - electrocution orbs (SBZ)
000165CA                            ; ---------------------------------------------------------------------------
000165CA                            Map_obj6E:
000165CA                            	include "_maps\obj6E.asm"
000165CA                            ; ---------------------------------------------------------------------------
000165CA                            ; Sprite mappings - electrocution orbs (SBZ)
000165CA                            ; ---------------------------------------------------------------------------
000165CA 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000165CE 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000165D2 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000165D6 02                         byte_161EC:	dc.b 2
000165D7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165DC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000165E1 03                         byte_161F7:	dc.b 3
000165E2 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000165E7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165EC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000165F1 05                         byte_16207:	dc.b 5
000165F2 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000165F7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000165FC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016601 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016606 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001660B 04                         byte_16221:	dc.b 4
0001660C F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016611 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016616 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001661B F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016620 06                         byte_16236:	dc.b 6
00016621 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016626 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001662B F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016630 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016635 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001663A F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001663F 04                         byte_16255:	dc.b 4
00016640 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016645 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001664A F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0001664F F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016654                            		even
00016654                            		even
00016654                            
00016654                            ; ===========================================================================
00016654                            ; ---------------------------------------------------------------------------
00016654                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016654                            ; ---------------------------------------------------------------------------
00016654                            
00016654                            Obj6F:					; XREF: Obj_Index
00016654 7000                       		moveq	#0,d0
00016656 1028 0024                  		move.b	$24(a0),d0
0001665A 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001665E 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016662 3028 0030                  		move.w	$30(a0),d0
00016666 0240 FF80                  		andi.w	#$FF80,d0
0001666A 3238 F700                  		move.w	($FFFFF700).w,d1
0001666E 0441 0080                  		subi.w	#$80,d1
00016672 0241 FF80                  		andi.w	#$FF80,d1
00016676 9041                       		sub.w	d1,d0
00016678 0C40 0280                  		cmpi.w	#$280,d0
0001667C 6200                       		bhi.s	loc_1629A
0001667E                            
0001667E                            Obj6F_Display:
0001667E 4EF9 0000 D6AA             		jmp	DisplaySprite
00016684                            ; ===========================================================================
00016684                            
00016684                            loc_1629A:
00016684 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001668A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001668C 0C40 FF80                  		cmpi.w	#-$80,d0
00016690 64EC                       		bcc.s	Obj6F_Display
00016692                            
00016692                            Obj6F_Act1or2:
00016692 1028 002F                  		move.b	$2F(a0),d0
00016696 6A00                       		bpl.s	Obj6F_Delete
00016698 0240 007F                  		andi.w	#$7F,d0
0001669C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000166A0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000166A6                            
000166A6                            Obj6F_Delete:
000166A6 4EF9 0000 D6E6             		jmp	DeleteObject
000166AC                            ; ===========================================================================
000166AC 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000166AE 0000                       		dc.w loc_163D8-Obj6F_Index
000166B0                            ; ===========================================================================
000166B0                            
000166B0                            Obj6F_Main:				; XREF: Obj6F_Index
000166B0 1028 0028                  		move.b	$28(a0),d0
000166B4 6B00 0000                  		bmi.w	loc_16380
000166B8 5428 0024                  		addq.b	#2,$24(a0)
000166BC 217C 0001 5D24 0004        		move.l	#Map_obj69a,4(a0)
000166C4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000166CA 117C 0010 0019             		move.b	#$10,$19(a0)
000166D0 0028 0004 0001             		ori.b	#4,1(a0)
000166D6 117C 0004 0018             		move.b	#4,$18(a0)
000166DC 7000                       		moveq	#0,d0
000166DE 1028 0028                  		move.b	$28(a0),d0
000166E2 3200                       		move.w	d0,d1
000166E4 E648                       		lsr.w	#3,d0
000166E6 0240 001E                  		andi.w	#$1E,d0
000166EA 45FA 0000                  		lea	off_164A6(pc),a2
000166EE D4F2 0000                  		adda.w	(a2,d0.w),a2
000166F2 315A 0038                  		move.w	(a2)+,$38(a0)
000166F6 315A 0030                  		move.w	(a2)+,$30(a0)
000166FA 214A 003C                  		move.l	a2,$3C(a0)
000166FE 0241 000F                  		andi.w	#$F,d1
00016702 E549                       		lsl.w	#2,d1
00016704 1141 0038                  		move.b	d1,$38(a0)
00016708 117C 0004 003A             		move.b	#4,$3A(a0)
0001670E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016712 6700                       		beq.s	loc_16356
00016714 117C 0001 003B             		move.b	#1,$3B(a0)
0001671A 4428 003A                  		neg.b	$3A(a0)
0001671E 7200                       		moveq	#0,d1
00016720 1228 0038                  		move.b	$38(a0),d1
00016724 D228 003A                  		add.b	$3A(a0),d1
00016728 B228 0039                  		cmp.b	$39(a0),d1
0001672C 6500                       		bcs.s	loc_16352
0001672E 1001                       		move.b	d1,d0
00016730 7200                       		moveq	#0,d1
00016732 4A00                       		tst.b	d0
00016734 6A00                       		bpl.s	loc_16352
00016736 1228 0039                  		move.b	$39(a0),d1
0001673A 5901                       		subq.b	#4,d1
0001673C                            
0001673C                            loc_16352:
0001673C 1141 0038                  		move.b	d1,$38(a0)
00016740                            
00016740                            loc_16356:
00016740 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016746 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001674C 4A41                       		tst.w	d1
0001674E 6600                       		bne.s	loc_1636C
00016750 117C 0001 001C             		move.b	#1,$1C(a0)
00016756                            
00016756                            loc_1636C:
00016756 0C41 0008                  		cmpi.w	#8,d1
0001675A 6600                       		bne.s	loc_16378
0001675C 117C 0000 001C             		move.b	#0,$1C(a0)
00016762                            
00016762                            loc_16378:
00016762 6100 BE9C                  		bsr.w	Obj63_ChangeDir
00016766 6000 0000                  		bra.w	loc_163D8
0001676A                            ; ===========================================================================
0001676A                            
0001676A                            loc_16380:				; XREF: Obj6F_Main
0001676A 1140 002F                  		move.b	d0,$2F(a0)
0001676E 0240 007F                  		andi.w	#$7F,d0
00016772 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016776 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001677C 6700                       		beq.s	loc_1639A
0001677E 4EF9 0000 D6E6             		jmp	DeleteObject
00016784                            ; ===========================================================================
00016784                            
00016784                            loc_1639A:
00016784 D040                       		add.w	d0,d0
00016786 0240 001E                  		andi.w	#$1E,d0
0001678A 0640 0080                  		addi.w	#$80,d0
0001678E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016794 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016798 321A                       		move.w	(a2)+,d1
0001679A 2248                       		movea.l	a0,a1
0001679C 6000                       		bra.s	Obj6F_LoadPform
0001679E                            ; ===========================================================================
0001679E                            
0001679E                            Obj6F_Loop:
0001679E 4EB9 0000 DB36             		jsr	SingleObjLoad
000167A4 6600                       		bne.s	loc_163D0
000167A6                            
000167A6                            Obj6F_LoadPform:			; XREF: loc_1639A
000167A6 12BC 006F                  		move.b	#$6F,0(a1)
000167AA 335A 0008                  		move.w	(a2)+,8(a1)
000167AE 335A 000C                  		move.w	(a2)+,$C(a1)
000167B2 301A                       		move.w	(a2)+,d0
000167B4 1340 0028                  		move.b	d0,$28(a1)
000167B8                            
000167B8                            loc_163D0:
000167B8 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000167BC                            
000167BC 588F                       		addq.l	#4,sp
000167BE 4E75                       		rts	
000167C0                            ; ===========================================================================
000167C0                            
000167C0                            loc_163D8:				; XREF: Obj6F_Index
000167C0 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000167C6 4EB9 0000 A7A2             		jsr	AnimateSprite
000167CC 4A28 001A                  		tst.b	$1A(a0)
000167D0 6600                       		bne.s	loc_16404
000167D2 3F28 0008                  		move.w	8(a0),-(sp)
000167D6 6100 0000                  		bsr.w	loc_16424
000167DA 323C 001B                  		move.w	#$1B,d1
000167DE 343C 0007                  		move.w	#7,d2
000167E2 3602                       		move.w	d2,d3
000167E4 5243                       		addq.w	#1,d3
000167E6 381F                       		move.w	(sp)+,d4
000167E8 6000 9292                  		bra.w	SolidObject
000167EC                            ; ===========================================================================
000167EC                            
000167EC                            loc_16404:
000167EC 0828 0003 0022             		btst	#3,$22(a0)
000167F2 6700                       		beq.s	loc_16420
000167F4 43F8 D000                  		lea	($FFFFD000).w,a1
000167F8 08A9 0003 0022             		bclr	#3,$22(a1)
000167FE 08A8 0003 0022             		bclr	#3,$22(a0)
00016804 4228 0025                  		clr.b	$25(a0)
00016808                            
00016808                            loc_16420:
00016808 6000 0002                  		bra.w	*+4
0001680C                            
0001680C                            loc_16424:
0001680C 3028 0008                  		move.w	8(a0),d0
00016810 B068 0034                  		cmp.w	$34(a0),d0
00016814 6600                       		bne.s	loc_16484
00016816 3028 000C                  		move.w	$C(a0),d0
0001681A B068 0036                  		cmp.w	$36(a0),d0
0001681E 6600                       		bne.s	loc_16484
00016820 7200                       		moveq	#0,d1
00016822 1228 0038                  		move.b	$38(a0),d1
00016826 D228 003A                  		add.b	$3A(a0),d1
0001682A B228 0039                  		cmp.b	$39(a0),d1
0001682E 6500                       		bcs.s	loc_16456
00016830 1001                       		move.b	d1,d0
00016832 7200                       		moveq	#0,d1
00016834 4A00                       		tst.b	d0
00016836 6A00                       		bpl.s	loc_16456
00016838 1228 0039                  		move.b	$39(a0),d1
0001683C 5901                       		subq.b	#4,d1
0001683E                            
0001683E                            loc_16456:
0001683E 1141 0038                  		move.b	d1,$38(a0)
00016842 2268 003C                  		movea.l	$3C(a0),a1
00016846 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001684C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016852 4A41                       		tst.w	d1
00016854 6600                       		bne.s	loc_16474
00016856 117C 0001 001C             		move.b	#1,$1C(a0)
0001685C                            
0001685C                            loc_16474:
0001685C 0C41 0008                  		cmpi.w	#8,d1
00016860 6600                       		bne.s	loc_16480
00016862 117C 0000 001C             		move.b	#0,$1C(a0)
00016868                            
00016868                            loc_16480:
00016868 6100 BD96                  		bsr.w	Obj63_ChangeDir
0001686C                            
0001686C                            loc_16484:
0001686C 4EF9 0000 D684             		jmp	SpeedToPos
00016872                            ; ===========================================================================
00016872                            Ani_obj6F:
00016872                            	include "_anim\obj6F.asm"
00016872                            ; ---------------------------------------------------------------------------
00016872                            ; Animation script - platform on conveyor belt (SBZ)
00016872                            ; ---------------------------------------------------------------------------
00016872 0000                       		dc.w byte_1648E-Ani_obj6F
00016874 0000                       		dc.w byte_164A2-Ani_obj6F
00016876 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016883 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001688A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001688E 00                         		even
0001688E 00                         		even
0001688E                            
0001688E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016894 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001689A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000168AE 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000168C2 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000168D6 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000168EA 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000168FE 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016912                            ; ===========================================================================
00016912                            ; ---------------------------------------------------------------------------
00016912                            ; Object 70 - large girder block (SBZ)
00016912                            ; ---------------------------------------------------------------------------
00016912                            
00016912                            Obj70:					; XREF: Obj_Index
00016912 7000                       		moveq	#0,d0
00016914 1028 0024                  		move.b	$24(a0),d0
00016918 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001691C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016920                            ; ===========================================================================
00016920 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016922 0000                       		dc.w Obj70_Action-Obj70_Index
00016924                            ; ===========================================================================
00016924                            
00016924                            Obj70_Main:				; XREF: Obj70_Index
00016924 5428 0024                  		addq.b	#2,$24(a0)
00016928 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016930 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016936 0028 0004 0001             		ori.b	#4,1(a0)
0001693C 117C 0004 0018             		move.b	#4,$18(a0)
00016942 117C 0060 0019             		move.b	#$60,$19(a0)
00016948 117C 0018 0016             		move.b	#$18,$16(a0)
0001694E 3168 0008 0032             		move.w	8(a0),$32(a0)
00016954 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001695A 6100 0000                  		bsr.w	Obj70_Move2
0001695E                            
0001695E                            Obj70_Action:				; XREF: Obj70_Index
0001695E 3F28 0008                  		move.w	8(a0),-(sp)
00016962 4A68 003A                  		tst.w	$3A(a0)
00016966 6700                       		beq.s	Obj70_Move
00016968 5368 003A                  		subq.w	#1,$3A(a0)
0001696C 6600                       		bne.s	Obj70_Solid
0001696E                            
0001696E                            Obj70_Move:
0001696E 4EB9 0000 D684             		jsr	SpeedToPos
00016974 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016978 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001697A 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
0001697E                            
0001697E                            Obj70_Solid:
0001697E 381F                       		move.w	(sp)+,d4
00016980 4A28 0001                  		tst.b	1(a0)
00016984 6A00                       		bpl.s	Obj70_ChkDel
00016986 7200                       		moveq	#0,d1
00016988 1228 0019                  		move.b	$19(a0),d1
0001698C 0641 000B                  		addi.w	#$B,d1
00016990 7400                       		moveq	#0,d2
00016992 1428 0016                  		move.b	$16(a0),d2
00016996 3602                       		move.w	d2,d3
00016998 5243                       		addq.w	#1,d3
0001699A 6100 90E0                  		bsr.w	SolidObject
0001699E                            
0001699E                            Obj70_ChkDel:
0001699E 3028 0032                  		move.w	$32(a0),d0
000169A2 0240 FF80                  		andi.w	#$FF80,d0
000169A6 3238 F700                  		move.w	($FFFFF700).w,d1
000169AA 0441 0080                  		subi.w	#$80,d1
000169AE 0241 FF80                  		andi.w	#$FF80,d1
000169B2 9041                       		sub.w	d1,d0
000169B4 0C40 0280                  		cmpi.w	#$280,d0
000169B8 6200                       		bhi.s	Obj70_Delete
000169BA 4EF9 0000 D6AA             		jmp	DisplaySprite
000169C0                            ; ===========================================================================
000169C0                            
000169C0                            Obj70_Delete:
000169C0 4EF9 0000 D6E6             		jmp	DeleteObject
000169C6                            ; ===========================================================================
000169C6                            
000169C6                            Obj70_Move2:				; XREF: Obj70_Main
000169C6 1028 0038                  		move.b	$38(a0),d0
000169CA 0240 0018                  		andi.w	#$18,d0
000169CE 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000169D4 43F1 0000                  		lea	(a1,d0.w),a1
000169D8 3159 0010                  		move.w	(a1)+,$10(a0)
000169DC 3159 0012                  		move.w	(a1)+,$12(a0)
000169E0 3159 0034                  		move.w	(a1)+,$34(a0)
000169E4 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000169E8 317C 0007 003A             		move.w	#7,$3A(a0)
000169EE 4E75                       		rts	
000169F0                            ; ===========================================================================
000169F0 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000169F8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016A00 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016A08 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016A10                            ; ---------------------------------------------------------------------------
00016A10                            ; Sprite mappings - large girder block (SBZ)
00016A10                            ; ---------------------------------------------------------------------------
00016A10                            Map_obj70:
00016A10                            	include "_maps\obj70.asm"
00016A10                            ; ---------------------------------------------------------------------------
00016A10                            ; Sprite mappings - large girder block (SBZ)
00016A10                            ; ---------------------------------------------------------------------------
00016A10 0000                       		dc.w byte_1662A-Map_obj70
00016A12 0C                         byte_1662A:	dc.b $C
00016A13 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016A18 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016A1D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016A22 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016A27 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016A2C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016A31 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016A36 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016A3B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016A40 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016A45 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016A4A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016A50 00                         		even
00016A50 00                         		even
00016A50                            
00016A50                            ; ===========================================================================
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            ; Object 72 - teleporter (SBZ)
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            
00016A50                            Obj72:					; XREF: Obj_Index
00016A50 7000                       		moveq	#0,d0
00016A52 1028 0024                  		move.b	$24(a0),d0
00016A56 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016A5A 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016A5E 3028 0008                  		move.w	8(a0),d0
00016A62 0240 FF80                  		andi.w	#$FF80,d0
00016A66 3238 F700                  		move.w	($FFFFF700).w,d1
00016A6A 0441 0080                  		subi.w	#$80,d1
00016A6E 0241 FF80                  		andi.w	#$FF80,d1
00016A72 9041                       		sub.w	d1,d0
00016A74 0C40 0280                  		cmpi.w	#$280,d0
00016A78 6200                       		bhi.s	Obj72_Delete
00016A7A 4E75                       		rts	
00016A7C                            ; ===========================================================================
00016A7C                            
00016A7C                            Obj72_Delete:
00016A7C 4EF9 0000 D6E6             		jmp	DeleteObject
00016A82                            ; ===========================================================================
00016A82 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016A84 0000                       		dc.w loc_166C8-Obj72_Index
00016A86 0000                       		dc.w loc_1675E-Obj72_Index
00016A88 0000                       		dc.w loc_16798-Obj72_Index
00016A8A                            ; ===========================================================================
00016A8A                            
00016A8A                            Obj72_Main:				; XREF: Obj72_Index
00016A8A 5428 0024                  		addq.b	#2,$24(a0)
00016A8E 1028 0028                  		move.b	$28(a0),d0
00016A92 D040                       		add.w	d0,d0
00016A94 0240 001E                  		andi.w	#$1E,d0
00016A98 45FA 0000                  		lea	Obj72_Data(pc),a2
00016A9C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016AA0 315A 003A                  		move.w	(a2)+,$3A(a0)
00016AA4 214A 003C                  		move.l	a2,$3C(a0)
00016AA8 315A 0036                  		move.w	(a2)+,$36(a0)
00016AAC 315A 0038                  		move.w	(a2)+,$38(a0)
00016AB0                            
00016AB0                            loc_166C8:				; XREF: Obj72_Index
00016AB0 43F8 D000                  		lea	($FFFFD000).w,a1
00016AB4 3029 0008                  		move.w	8(a1),d0
00016AB8 9068 0008                  		sub.w	8(a0),d0
00016ABC 0828 0000 0022             		btst	#0,$22(a0)
00016AC2 6700                       		beq.s	loc_166E0
00016AC4 0640 000F                  		addi.w	#$F,d0
00016AC8                            
00016AC8                            loc_166E0:
00016AC8 0C40 0010                  		cmpi.w	#$10,d0
00016ACC 6400                       		bcc.s	locret_1675C
00016ACE 3229 000C                  		move.w	$C(a1),d1
00016AD2 9268 000C                  		sub.w	$C(a0),d1
00016AD6 0641 0020                  		addi.w	#$20,d1
00016ADA 0C41 0040                  		cmpi.w	#$40,d1
00016ADE 6400                       		bcc.s	locret_1675C
00016AE0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016AE4 6600                       		bne.s	locret_1675C
00016AE6 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016AEC 6600                       		bne.s	loc_1670E
00016AEE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016AF4 6500                       		bcs.s	locret_1675C
00016AF6                            
00016AF6                            loc_1670E:
00016AF6 5428 0024                  		addq.b	#2,$24(a0)
00016AFA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016B00 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016B06 337C 0800 0014             		move.w	#$800,$14(a1)
00016B0C 337C 0000 0010             		move.w	#0,$10(a1)
00016B12 337C 0000 0012             		move.w	#0,$12(a1)
00016B18 08A8 0005 0022             		bclr	#5,$22(a0)
00016B1E 08A9 0005 0022             		bclr	#5,$22(a1)
00016B24 08E9 0001 0022             		bset	#1,$22(a1)
00016B2A 3368 0008 0008             		move.w	8(a0),8(a1)
00016B30 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016B36 4228 0032                  		clr.b	$32(a0)
00016B3A 303C 00BE                  		move.w	#$BE,d0
00016B3E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016B44                            
00016B44                            locret_1675C:
00016B44 4E75                       		rts	
00016B46                            ; ===========================================================================
00016B46                            
00016B46                            loc_1675E:				; XREF: Obj72_Index
00016B46 43F8 D000                  		lea	($FFFFD000).w,a1
00016B4A 1028 0032                  		move.b	$32(a0),d0
00016B4E 5428 0032                  		addq.b	#2,$32(a0)
00016B52 4EB9 0000 28EC             		jsr	(CalcSine).l
00016B58 EA40                       		asr.w	#5,d0
00016B5A 3428 000C                  		move.w	$C(a0),d2
00016B5E 9440                       		sub.w	d0,d2
00016B60 3342 000C                  		move.w	d2,$C(a1)
00016B64 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016B6A 6600                       		bne.s	locret_16796
00016B6C 6100 0000                  		bsr.w	sub_1681C
00016B70 5428 0024                  		addq.b	#2,$24(a0)
00016B74 303C 00BC                  		move.w	#$BC,d0
00016B78 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play teleport sound
00016B7E                            
00016B7E                            locret_16796:
00016B7E 4E75                       		rts	
00016B80                            ; ===========================================================================
00016B80                            
00016B80                            loc_16798:				; XREF: Obj72_Index
00016B80 588F                       		addq.l	#4,sp
00016B82 43F8 D000                  		lea	($FFFFD000).w,a1
00016B86 5328 002E                  		subq.b	#1,$2E(a0)
00016B8A 6A00                       		bpl.s	loc_167DA
00016B8C 3368 0036 0008             		move.w	$36(a0),8(a1)
00016B92 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016B98 7200                       		moveq	#0,d1
00016B9A 1228 003A                  		move.b	$3A(a0),d1
00016B9E 5801                       		addq.b	#4,d1
00016BA0 B228 003B                  		cmp.b	$3B(a0),d1
00016BA4 6500                       		bcs.s	loc_167C2
00016BA6 7200                       		moveq	#0,d1
00016BA8 6000                       		bra.s	loc_16800
00016BAA                            ; ===========================================================================
00016BAA                            
00016BAA                            loc_167C2:
00016BAA 1141 003A                  		move.b	d1,$3A(a0)
00016BAE 2468 003C                  		movea.l	$3C(a0),a2
00016BB2 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016BB8 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016BBE 6000 0000                  		bra.w	sub_1681C
00016BC2                            ; ===========================================================================
00016BC2                            
00016BC2                            loc_167DA:
00016BC2 2429 0008                  		move.l	8(a1),d2
00016BC6 2629 000C                  		move.l	$C(a1),d3
00016BCA 3029 0010                  		move.w	$10(a1),d0
00016BCE 48C0                       		ext.l	d0
00016BD0 E180                       		asl.l	#8,d0
00016BD2 D480                       		add.l	d0,d2
00016BD4 3029 0012                  		move.w	$12(a1),d0
00016BD8 48C0                       		ext.l	d0
00016BDA E180                       		asl.l	#8,d0
00016BDC D680                       		add.l	d0,d3
00016BDE 2342 0008                  		move.l	d2,8(a1)
00016BE2 2343 000C                  		move.l	d3,$C(a1)
00016BE6 4E75                       		rts	
00016BE8                            ; ===========================================================================
00016BE8                            
00016BE8                            loc_16800:
00016BE8 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016BEE 4228 0024                  		clr.b	$24(a0)
00016BF2 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016BF6 337C 0000 0010             		move.w	#0,$10(a1)
00016BFC 337C 0200 0012             		move.w	#$200,$12(a1)
00016C02 4E75                       		rts	
00016C04                            
00016C04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C04                            
00016C04                            
00016C04                            sub_1681C:
00016C04 7000                       		moveq	#0,d0
00016C06 343C 1000                  		move.w	#$1000,d2
00016C0A 3028 0036                  		move.w	$36(a0),d0
00016C0E 9069 0008                  		sub.w	8(a1),d0
00016C12 6C00                       		bge.s	loc_16830
00016C14 4440                       		neg.w	d0
00016C16 4442                       		neg.w	d2
00016C18                            
00016C18                            loc_16830:
00016C18 7200                       		moveq	#0,d1
00016C1A 363C 1000                  		move.w	#$1000,d3
00016C1E 3228 0038                  		move.w	$38(a0),d1
00016C22 9269 000C                  		sub.w	$C(a1),d1
00016C26 6C00                       		bge.s	loc_16844
00016C28 4441                       		neg.w	d1
00016C2A 4443                       		neg.w	d3
00016C2C                            
00016C2C                            loc_16844:
00016C2C B240                       		cmp.w	d0,d1
00016C2E 6500                       		bcs.s	loc_1687A
00016C30 7200                       		moveq	#0,d1
00016C32 3228 0038                  		move.w	$38(a0),d1
00016C36 9269 000C                  		sub.w	$C(a1),d1
00016C3A 4841                       		swap	d1
00016C3C 83C3                       		divs.w	d3,d1
00016C3E 7000                       		moveq	#0,d0
00016C40 3028 0036                  		move.w	$36(a0),d0
00016C44 9069 0008                  		sub.w	8(a1),d0
00016C48 6700                       		beq.s	loc_16866
00016C4A 4840                       		swap	d0
00016C4C 81C1                       		divs.w	d1,d0
00016C4E                            
00016C4E                            loc_16866:
00016C4E 3340 0010                  		move.w	d0,$10(a1)
00016C52 3343 0012                  		move.w	d3,$12(a1)
00016C56 4A41                       		tst.w	d1
00016C58 6A00                       		bpl.s	loc_16874
00016C5A 4441                       		neg.w	d1
00016C5C                            
00016C5C                            loc_16874:
00016C5C 3141 002E                  		move.w	d1,$2E(a0)
00016C60 4E75                       		rts	
00016C62                            ; ===========================================================================
00016C62                            
00016C62                            loc_1687A:
00016C62 7000                       		moveq	#0,d0
00016C64 3028 0036                  		move.w	$36(a0),d0
00016C68 9069 0008                  		sub.w	8(a1),d0
00016C6C 4840                       		swap	d0
00016C6E 81C2                       		divs.w	d2,d0
00016C70 7200                       		moveq	#0,d1
00016C72 3228 0038                  		move.w	$38(a0),d1
00016C76 9269 000C                  		sub.w	$C(a1),d1
00016C7A 6700                       		beq.s	loc_16898
00016C7C 4841                       		swap	d1
00016C7E 83C0                       		divs.w	d0,d1
00016C80                            
00016C80                            loc_16898:
00016C80 3341 0012                  		move.w	d1,$12(a1)
00016C84 3342 0010                  		move.w	d2,$10(a1)
00016C88 4A40                       		tst.w	d0
00016C8A 6A00                       		bpl.s	loc_168A6
00016C8C 4440                       		neg.w	d0
00016C8E                            
00016C8E                            loc_168A6:
00016C8E 3140 002E                  		move.w	d0,$2E(a0)
00016C92 4E75                       		rts	
00016C94                            ; End of function sub_1681C
00016C94                            
00016C94                            ; ===========================================================================
00016C94 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016C9A 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016CA0 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016CA4 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016CAA 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016CB0 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016CB6 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016CBC 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016CC2 0884 0298 0894             		dc.w $884, $298, $894
00016CC8 0270 0894 0190             		dc.w $270, $894, $190
00016CCE 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016CD4 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016CDA 1184 0498 1158             		dc.w $1184, $498, $1158
00016CE0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016CE6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016CEC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016CF2 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016CF8 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016CFE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016D04 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016D0A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016D10 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016D16 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016D1C                            ; ===========================================================================
00016D1C                            ; ---------------------------------------------------------------------------
00016D1C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016D1C                            ; ---------------------------------------------------------------------------
00016D1C                            
00016D1C                            Obj78:					; XREF: Obj_Index
00016D1C 7000                       		moveq	#0,d0
00016D1E 1028 0024                  		move.b	$24(a0),d0
00016D22 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016D26 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016D2A                            ; ===========================================================================
00016D2A 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016D2C 0000                       		dc.w Obj78_Action-Obj78_Index
00016D2E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016D30 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016D32 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016D34 0000                       		dc.w Obj78_Delete-Obj78_Index
00016D36 0000                       		dc.w loc_16CC0-Obj78_Index
00016D38                            ; ===========================================================================
00016D38                            
00016D38                            locret_16950:
00016D38 4E75                       		rts	
00016D3A                            ; ===========================================================================
00016D3A                            
00016D3A                            Obj78_Main:				; XREF: Obj78_Index
00016D3A 117C 0007 0016             		move.b	#7,$16(a0)
00016D40 117C 0008 0017             		move.b	#8,$17(a0)
00016D46 4EB9 0000 D658             		jsr	ObjectFall
00016D4C 4EBA E4B6                  		jsr	ObjHitFloor
00016D50 4A41                       		tst.w	d1
00016D52 6AE4                       		bpl.s	locret_16950
00016D54 D368 000C                  		add.w	d1,$C(a0)
00016D58 4268 0012                  		clr.w	$12(a0)
00016D5C 5428 0024                  		addq.b	#2,$24(a0)
00016D60 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016D68 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016D6E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016D74 6700                       		beq.s	loc_16996
00016D76 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016D7C                            
00016D7C                            loc_16996:
00016D7C 0228 0003 0001             		andi.b	#3,1(a0)
00016D82 0028 0004 0001             		ori.b	#4,1(a0)
00016D88 1168 0001 0022             		move.b	1(a0),$22(a0)
00016D8E 117C 0004 0018             		move.b	#4,$18(a0)
00016D94 117C 0008 0019             		move.b	#8,$19(a0)
00016D9A 117C 000B 0020             		move.b	#$B,$20(a0)
00016DA0 3428 0008                  		move.w	8(a0),d2
00016DA4 7A0C                       		moveq	#$C,d5
00016DA6 0828 0000 0022             		btst	#0,$22(a0)
00016DAC 6700                       		beq.s	loc_169CA
00016DAE 4445                       		neg.w	d5
00016DB0                            
00016DB0                            loc_169CA:
00016DB0 1C3C 0004                  		move.b	#4,d6
00016DB4 7600                       		moveq	#0,d3
00016DB6 7804                       		moveq	#4,d4
00016DB8 2448                       		movea.l	a0,a2
00016DBA 7202                       		moveq	#2,d1
00016DBC                            
00016DBC                            Obj78_LoadBody:
00016DBC 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00016DC2 6600                       		bne.s	Obj78_QuitLoad
00016DC4 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016DC8 1346 0024                  		move.b	d6,$24(a1)
00016DCC 5406                       		addq.b	#2,d6
00016DCE 2368 0004 0004             		move.l	4(a0),4(a1)
00016DD4 3368 0002 0002             		move.w	2(a0),2(a1)
00016DDA 137C 0005 0018             		move.b	#5,$18(a1)
00016DE0 137C 0008 0019             		move.b	#8,$19(a1)
00016DE6 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016DEC D445                       		add.w	d5,d2
00016DEE 3342 0008                  		move.w	d2,8(a1)
00016DF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016DF8 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016DFE 1368 0022 0001             		move.b	$22(a0),1(a1)
00016E04 137C 0008 001A             		move.b	#8,$1A(a1)
00016E0A 234A 003C                  		move.l	a2,$3C(a1)
00016E0E 1344 003C                  		move.b	d4,$3C(a1)
00016E12 5804                       		addq.b	#4,d4
00016E14 2449                       		movea.l	a1,a2
00016E16                            
00016E16                            Obj78_QuitLoad:
00016E16 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016E1A                            
00016E1A 117C 0007 002A             		move.b	#7,$2A(a0)
00016E20 4228 003C                  		clr.b	$3C(a0)
00016E24                            
00016E24                            Obj78_Action:				; XREF: Obj78_Index
00016E24 4A28 0022                  		tst.b	$22(a0)
00016E28 6B00 0000                  		bmi.w	loc_16C96
00016E2C 7000                       		moveq	#0,d0
00016E2E 1028 0025                  		move.b	$25(a0),d0
00016E32 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016E36 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016E3A 1228 002B                  		move.b	$2B(a0),d1
00016E3E 6A00                       		bpl.s	Obj78_Display
00016E40 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016E46 1028 0026                  		move.b	$26(a0),d0
00016E4A 0240 007F                  		andi.w	#$7F,d0
00016E4E 5828 0026                  		addq.b	#4,$26(a0)
00016E52 1031 0000                  		move.b	(a1,d0.w),d0
00016E56 6A00                       		bpl.s	Obj78_AniHead
00016E58 08A8 0007 002B             		bclr	#7,$2B(a0)
00016E5E 6000                       		bra.s	Obj78_Display
00016E60                            ; ===========================================================================
00016E60                            
00016E60                            Obj78_AniHead:
00016E60 0201 0010                  		andi.b	#$10,d1
00016E64 D001                       		add.b	d1,d0
00016E66 1140 001A                  		move.b	d0,$1A(a0)
00016E6A                            
00016E6A                            Obj78_Display:
00016E6A 3028 0008                  		move.w	8(a0),d0
00016E6E 0240 FF80                  		andi.w	#$FF80,d0
00016E72 3238 F700                  		move.w	($FFFFF700).w,d1
00016E76 0441 0080                  		subi.w	#$80,d1
00016E7A 0241 FF80                  		andi.w	#$FF80,d1
00016E7E 9041                       		sub.w	d1,d0
00016E80 0C40 0280                  		cmpi.w	#$280,d0
00016E84 6200 0000                  		bhi.w	Obj78_ChkGone
00016E88 4EF9 0000 D6AA             		jmp	DisplaySprite
00016E8E                            ; ===========================================================================
00016E8E                            
00016E8E                            Obj78_ChkGone:
00016E8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016E92 7000                       		moveq	#0,d0
00016E94 1028 0023                  		move.b	$23(a0),d0
00016E98 6700                       		beq.s	loc_16ABC
00016E9A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016EA0                            
00016EA0                            loc_16ABC:
00016EA0 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016EA6 4E75                       		rts	
00016EA8                            ; ===========================================================================
00016EA8                            
00016EA8                            Obj78_Delete:				; XREF: Obj78_Index
00016EA8 4EF9 0000 D6E6             		jmp	DeleteObject
00016EAE                            ; ===========================================================================
00016EAE 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016EB0 0000                       		dc.w loc_16B02-Obj78_Index2
00016EB2                            ; ===========================================================================
00016EB2                            
00016EB2                            Obj78_Move:				; XREF: Obj78_Index2
00016EB2 5328 002A                  		subq.b	#1,$2A(a0)
00016EB6 6B00                       		bmi.s	Obj78_Move2
00016EB8 4E75                       		rts	
00016EBA                            ; ===========================================================================
00016EBA                            
00016EBA                            Obj78_Move2:
00016EBA 5428 0025                  		addq.b	#2,$25(a0)
00016EBE 117C 0010 002A             		move.b	#$10,$2A(a0)
00016EC4 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016ECA 317C 0040 0014             		move.w	#$40,$14(a0)
00016ED0 0868 0004 002B             		bchg	#4,$2B(a0)
00016ED6 6600                       		bne.s	loc_16AFC
00016ED8 4268 0010                  		clr.w	$10(a0)
00016EDC 4468 0014                  		neg.w	$14(a0)
00016EE0                            
00016EE0                            loc_16AFC:
00016EE0 08E8 0007 002B             		bset	#7,$2B(a0)
00016EE6                            
00016EE6                            loc_16B02:				; XREF: Obj78_Index2
00016EE6 5328 002A                  		subq.b	#1,$2A(a0)
00016EEA 6B00                       		bmi.s	loc_16B5E
00016EEC 2F28 0008                  		move.l	8(a0),-(sp)
00016EF0 2428 0008                  		move.l	8(a0),d2
00016EF4 3028 0010                  		move.w	$10(a0),d0
00016EF8 0828 0000 0022             		btst	#0,$22(a0)
00016EFE 6700                       		beq.s	loc_16B1E
00016F00 4440                       		neg.w	d0
00016F02                            
00016F02                            loc_16B1E:
00016F02 48C0                       		ext.l	d0
00016F04 E180                       		asl.l	#8,d0
00016F06 D480                       		add.l	d0,d2
00016F08 2142 0008                  		move.l	d2,8(a0)
00016F0C 4EBA E2F6                  		jsr	ObjHitFloor
00016F10 241F                       		move.l	(sp)+,d2
00016F12 0C41 FFF8                  		cmpi.w	#-8,d1
00016F16 6D00                       		blt.s	loc_16B70
00016F18 0C41 000C                  		cmpi.w	#$C,d1
00016F1C 6C00                       		bge.s	loc_16B70
00016F1E D368 000C                  		add.w	d1,$C(a0)
00016F22 4842                       		swap	d2
00016F24 B468 0008                  		cmp.w	8(a0),d2
00016F28 6700                       		beq.s	locret_16B5C
00016F2A 7000                       		moveq	#0,d0
00016F2C 1028 003C                  		move.b	$3C(a0),d0
00016F30 5228 003C                  		addq.b	#1,$3C(a0)
00016F34 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016F3A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016F3E                            
00016F3E                            locret_16B5C:
00016F3E 4E75                       		rts	
00016F40                            ; ===========================================================================
00016F40                            
00016F40                            loc_16B5E:
00016F40 5528 0025                  		subq.b	#2,$25(a0)
00016F44 117C 0007 002A             		move.b	#7,$2A(a0)
00016F4A 317C 0000 0010             		move.w	#0,$10(a0)
00016F50 4E75                       		rts	
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            loc_16B70:
00016F52 2142 0008                  		move.l	d2,8(a0)
00016F56 0868 0000 0022             		bchg	#0,$22(a0)
00016F5C 1168 0022 0001             		move.b	$22(a0),1(a0)
00016F62 7000                       		moveq	#0,d0
00016F64 1028 003C                  		move.b	$3C(a0),d0
00016F68 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016F6E 5228 003C                  		addq.b	#1,$3C(a0)
00016F72 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016F78 4E75                       		rts	
00016F7A                            ; ===========================================================================
00016F7A                            
00016F7A                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016F7A 2268 003C                  		movea.l	$3C(a0),a1
00016F7E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016F84 6A00                       		bpl.s	Obj78_BodySeg1
00016F86 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016F8C 1028 0026                  		move.b	$26(a0),d0
00016F90 0240 007F                  		andi.w	#$7F,d0
00016F94 5828 0026                  		addq.b	#4,$26(a0)
00016F98 4A31 0004                  		tst.b	4(a1,d0.w)
00016F9C 6A00                       		bpl.s	Obj78_AniBody
00016F9E 5828 0026                  		addq.b	#4,$26(a0)
00016FA2                            
00016FA2                            Obj78_AniBody:
00016FA2 1031 0000                  		move.b	(a1,d0.w),d0
00016FA6 5000                       		addq.b	#8,d0
00016FA8 1140 001A                  		move.b	d0,$1A(a0)
00016FAC                            
00016FAC                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016FAC 2268 003C                  		movea.l	$3C(a0),a1
00016FB0 4A28 0022                  		tst.b	$22(a0)
00016FB4 6B00 0000                  		bmi.w	loc_16C90
00016FB8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016FBE 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016FC4 6700 0000                  		beq.w	loc_16C64
00016FC8 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016FCE 3029 0010                  		move.w	$10(a1),d0
00016FD2 D069 0014                  		add.w	$14(a1),d0
00016FD6 3140 0010                  		move.w	d0,$10(a0)
00016FDA 2428 0008                  		move.l	8(a0),d2
00016FDE 2602                       		move.l	d2,d3
00016FE0 3028 0010                  		move.w	$10(a0),d0
00016FE4 0828 0000 0022             		btst	#0,$22(a0)
00016FEA 6700                       		beq.s	loc_16C0C
00016FEC 4440                       		neg.w	d0
00016FEE                            
00016FEE                            loc_16C0C:
00016FEE 48C0                       		ext.l	d0
00016FF0 E180                       		asl.l	#8,d0
00016FF2 D480                       		add.l	d0,d2
00016FF4 2142 0008                  		move.l	d2,8(a0)
00016FF8 4843                       		swap	d3
00016FFA B668 0008                  		cmp.w	8(a0),d3
00016FFE 6700                       		beq.s	loc_16C64
00017000 7000                       		moveq	#0,d0
00017002 1028 003C                  		move.b	$3C(a0),d0
00017006 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001700A 0C01 0080                  		cmpi.b	#-$80,d1
0001700E 6600                       		bne.s	loc_16C50
00017010 4843                       		swap	d3
00017012 2143 0008                  		move.l	d3,8(a0)
00017016 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001701A 0868 0000 0022             		bchg	#0,$22(a0)
00017020 1168 0022 0001             		move.b	$22(a0),1(a0)
00017026 5228 003C                  		addq.b	#1,$3C(a0)
0001702A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017030 6000                       		bra.s	loc_16C64
00017032                            ; ===========================================================================
00017032                            
00017032                            loc_16C50:
00017032 4881                       		ext.w	d1
00017034 D368 000C                  		add.w	d1,$C(a0)
00017038 5228 003C                  		addq.b	#1,$3C(a0)
0001703C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017042 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017046                            
00017046                            loc_16C64:
00017046 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001704C 6700                       		beq.s	loc_16C90
0001704E 0C11 0027                  		cmpi.b	#$27,0(a1)
00017052 6700                       		beq.s	loc_16C7C
00017054 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001705A 6600                       		bne.s	loc_16C82
0001705C                            
0001705C                            loc_16C7C:
0001705C 117C 000A 0024             		move.b	#$A,$24(a0)
00017062                            
00017062                            loc_16C82:
00017062 4EF9 0000 D6AA             		jmp	DisplaySprite
00017068                            
00017068                            ; ===========================================================================
00017068 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017070                            ; ===========================================================================
00017070                            
00017070                            loc_16C90:
00017070 08E9 0007 0022             		bset	#7,$22(a1)
00017076                            
00017076                            loc_16C96:
00017076 7000                       		moveq	#0,d0
00017078 1028 0024                  		move.b	$24(a0),d0
0001707C 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017080 0828 0000 0022             		btst	#0,$22(a0)
00017086 6700                       		beq.s	loc_16CAA
00017088 4440                       		neg.w	d0
0001708A                            
0001708A                            loc_16CAA:
0001708A 3140 0010                  		move.w	d0,$10(a0)
0001708E 317C FC00 0012             		move.w	#-$400,$12(a0)
00017094 117C 000C 0024             		move.b	#$C,$24(a0)
0001709A 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000170A0                            
000170A0                            loc_16CC0:				; XREF: Obj78_Index
000170A0 4EB9 0000 D658             		jsr	ObjectFall
000170A6 4A68 0012                  		tst.w	$12(a0)
000170AA 6B00                       		bmi.s	loc_16CE0
000170AC 4EBA E156                  		jsr	ObjHitFloor
000170B0 4A41                       		tst.w	d1
000170B2 6A00                       		bpl.s	loc_16CE0
000170B4 D368 000C                  		add.w	d1,$C(a0)
000170B8 317C FC00 0012             		move.w	#-$400,$12(a0)
000170BE                            
000170BE                            loc_16CE0:
000170BE 4A28 0001                  		tst.b	1(a0)
000170C2 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000170C6 4EF9 0000 D6AA             		jmp	DisplaySprite
000170CC                            ; ===========================================================================
000170CC                            Ani_obj78:
000170CC                            	include "_anim\obj78.asm"
000170CC                            ; ---------------------------------------------------------------------------
000170CC                            ; Animation script - Caterkiller enemy (uses non-standard format)
000170CC                            ; ---------------------------------------------------------------------------
000170CC 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000170DC 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000170EC 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000170FC 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001710C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001711C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001712C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001713C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001714C                            	even
0001714C                            	even
0001714C                            
0001714C                            ; ---------------------------------------------------------------------------
0001714C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001714C                            ; ---------------------------------------------------------------------------
0001714C                            Map_obj78:
0001714C                            	include "_maps\obj78.asm"
0001714C                            ; ---------------------------------------------------------------------------
0001714C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001714C                            ; ---------------------------------------------------------------------------
0001714C 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017150 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017154 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017158 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001715C 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017160 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017164 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017168 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001716C 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017170 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017174 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017178 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001717C 01                         byte_16D9E:	dc.b 1
0001717D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017182 01                         byte_16DA4:	dc.b 1
00017183 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017188 01                         byte_16DAA:	dc.b 1
00017189 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001718E 01                         byte_16DB0:	dc.b 1
0001718F EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017194 01                         byte_16DB6:	dc.b 1
00017195 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001719A 01                         byte_16DBC:	dc.b 1
0001719B ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000171A0 01                         byte_16DC2:	dc.b 1
000171A1 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000171A6 01                         byte_16DC8:	dc.b 1
000171A7 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000171AC 01                         byte_16DCE:	dc.b 1
000171AD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000171B2 01                         byte_16DD4:	dc.b 1
000171B3 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000171B8 01                         byte_16DDA:	dc.b 1
000171B9 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000171BE 01                         byte_16DE0:	dc.b 1
000171BF F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000171C4 01                         byte_16DE6:	dc.b 1
000171C5 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000171CA 01                         byte_16DEC:	dc.b 1
000171CB F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000171D0 01                         byte_16DF2:	dc.b 1
000171D1 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000171D6 01                         byte_16DF8:	dc.b 1
000171D7 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000171DC 01                         byte_16DFE:	dc.b 1
000171DD F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000171E2 01                         byte_16E04:	dc.b 1
000171E3 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000171E8 01                         byte_16E0A:	dc.b 1
000171E9 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000171EE 01                         byte_16E10:	dc.b 1
000171EF EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000171F4 01                         byte_16E16:	dc.b 1
000171F5 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000171FA 01                         byte_16E1C:	dc.b 1
000171FB ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017200 01                         byte_16E22:	dc.b 1
00017201 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017206 01                         byte_16E28:	dc.b 1
00017207 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001720C                            		even
0001720C                            		even
0001720C                            
0001720C                            ; ===========================================================================
0001720C                            ; ---------------------------------------------------------------------------
0001720C                            ; Object 79 - lamppost
0001720C                            ; ---------------------------------------------------------------------------
0001720C                            
0001720C                            Obj79:					; XREF: Obj_Index
0001720C 7000                       		moveq	#0,d0
0001720E 1028 0024                  		move.b	$24(a0),d0
00017212 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017216 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001721A 4EFA 8538                  		jmp	MarkObjGone
0001721E                            ; ===========================================================================
0001721E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017220 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017222 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017224 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017226                            ; ===========================================================================
00017226                            
00017226                            Obj79_Main:				; XREF: Obj79_Index
00017226 5428 0024                  		addq.b	#2,$24(a0)
0001722A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017232 317C 0571 0002             		move.w	#lamppostart,2(a0)
00017238 117C 0004 0001             		move.b	#4,1(a0)
0001723E 117C 0008 0019             		move.b	#8,$19(a0)
00017244 117C 0005 0018             		move.b	#5,$18(a0)
0001724A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001724E 7000                       		moveq	#0,d0
00017250 1028 0023                  		move.b	$23(a0),d0
00017254 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001725A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017260 6600                       		bne.s	Obj79_RedLamp
00017262 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017266 0201 007F                  		andi.b	#$7F,d1
0001726A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001726E 0202 007F                  		andi.b	#$7F,d2
00017272 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017274 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017276                            
00017276                            Obj79_RedLamp:
00017276 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001727C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017282 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017288 4E75                       		rts	
0001728A                            ; ===========================================================================
0001728A                            
0001728A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001728A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001728E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017292 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017296 6B00 0000                  		bmi.w	locret_16F90
0001729A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001729E 0201 007F                  		andi.b	#$7F,d1
000172A2 1428 0028                  		move.b	$28(a0),d2
000172A6 0202 007F                  		andi.b	#$7F,d2
000172AA B202                       		cmp.b	d2,d1
000172AC 6500                       		bcs.s	Obj79_HitLamp
000172AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000172B2 7000                       		moveq	#0,d0
000172B4 1028 0023                  		move.b	$23(a0),d0
000172B8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000172BE 117C 0004 0024             		move.b	#4,$24(a0)
000172C4 117C 0003 001A             		move.b	#3,$1A(a0)
000172CA 6000 0000                  		bra.w	locret_16F90
000172CE                            ; ===========================================================================
000172CE                            
000172CE                            Obj79_HitLamp:
000172CE 3038 D008                  		move.w	($FFFFD008).w,d0
000172D2 9068 0008                  		sub.w	8(a0),d0
000172D6 5040                       		addq.w	#8,d0
000172D8 0C40 0010                  		cmpi.w	#$10,d0
000172DC 6400 0000                  		bcc.w	locret_16F90
000172E0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000172E4 9068 000C                  		sub.w	$C(a0),d0
000172E8 0640 0040                  		addi.w	#$40,d0
000172EC 0C40 0068                  		cmpi.w	#$68,d0
000172F0 6400                       		bcc.s	locret_16F90
000172F2 303C 00A1                  		move.w	#$A1,d0
000172F6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lamppost sound
000172FC 5428 0024                  		addq.b	#2,$24(a0)
00017300 4EB9 0000 DB36             		jsr	SingleObjLoad
00017306 6600                       		bne.s	loc_16F76
00017308 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001730C 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017312 3368 0008 0030             		move.w	8(a0),$30(a1)
00017318 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001731E 0469 0018 0032             		subi.w	#$18,$32(a1)
00017324 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001732C 337C 0571 0002             		move.w	#lamppostart,2(a1)
00017332 137C 0004 0001             		move.b	#4,1(a1)
00017338 137C 0008 0019             		move.b	#8,$19(a1)
0001733E 137C 0004 0018             		move.b	#4,$18(a1)
00017344 137C 0002 001A             		move.b	#2,$1A(a1)
0001734A 337C 0020 0036             		move.w	#$20,$36(a1)
00017350                            
00017350                            loc_16F76:
00017350 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017356 6100 0000                  		bsr.w	Obj79_StoreInfo
0001735A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001735E 7000                       		moveq	#0,d0
00017360 1028 0023                  		move.b	$23(a0),d0
00017364 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001736A                            
0001736A                            locret_16F90:
0001736A 4E75                       		rts	
0001736C                            ; ===========================================================================
0001736C                            
0001736C                            Obj79_AfterHit:				; XREF: Obj79_Index
0001736C 4E75                       		rts	
0001736E                            ; ===========================================================================
0001736E                            
0001736E                            Obj79_Twirl:				; XREF: Obj79_Index
0001736E 5368 0036                  		subq.w	#1,$36(a0)
00017372 6A00                       		bpl.s	loc_16FA0
00017374 117C 0004 0024             		move.b	#4,$24(a0)
0001737A                            
0001737A                            loc_16FA0:
0001737A 1028 0026                  		move.b	$26(a0),d0
0001737E 0428 0010 0026             		subi.b	#$10,$26(a0)
00017384 0400 0040                  		subi.b	#$40,d0
00017388 4EB9 0000 28EC             		jsr	(CalcSine).l
0001738E C3FC 0C00                  		muls.w	#$C00,d1
00017392 4841                       		swap	d1
00017394 D268 0030                  		add.w	$30(a0),d1
00017398 3141 0008                  		move.w	d1,8(a0)
0001739C C1FC 0C00                  		muls.w	#$C00,d0
000173A0 4840                       		swap	d0
000173A2 D068 0032                  		add.w	$32(a0),d0
000173A6 3140 000C                  		move.w	d0,$C(a0)
000173AA 4E75                       		rts	
000173AC                            ; ===========================================================================
000173AC                            ; ---------------------------------------------------------------------------
000173AC                            ; Subroutine to	store information when you hit a lamppost
000173AC                            ; ---------------------------------------------------------------------------
000173AC                            
000173AC                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000173AC 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000173B2 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000173B8 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000173BE 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000173C4 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000173CA 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000173D0 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000173D6 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000173DC 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000173E2 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000173E8 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000173EE 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000173F4 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000173FA 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017400 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017406 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001740C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017412 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017418 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001741E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017424 4E75                       		rts	
00017426                            
00017426                            ; ---------------------------------------------------------------------------
00017426                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017426                            ; ---------------------------------------------------------------------------
00017426                            
00017426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017426                            
00017426                            
00017426                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017426 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001742C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017432 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017438 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001743E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017444 4278 FE20                  		clr.w	($FFFFFE20).w
00017448 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001744C 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017452 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017458 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001745C 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017462 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017468 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001746E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017474 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001747A 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017480 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017486 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001748C 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017492 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017498 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001749E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000174A4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000174AA 6600                       		bne.s	loc_170E4
000174AC 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000174B2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000174B8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000174BE                            
000174BE                            loc_170E4:
000174BE 4A38 FE30                  		tst.b	($FFFFFE30).w
000174C2 6A00                       		bpl.s	locret_170F6
000174C4 3038 FE32                  		move.w	($FFFFFE32).w,d0
000174C8 0440 00A0                  		subi.w	#$A0,d0
000174CC 31C0 F728                  		move.w	d0,($FFFFF728).w
000174D0                            
000174D0                            locret_170F6:
000174D0 4E75                       		rts	
000174D2                            ; End of function Obj79_LoadInfo
000174D2                            
000174D2                            ; ===========================================================================
000174D2                            ; ---------------------------------------------------------------------------
000174D2                            ; Sprite mappings - lamppost
000174D2                            ; ---------------------------------------------------------------------------
000174D2                            Map_obj79:
000174D2                            	include "_maps\obj79.asm"
000174D2                            ; ---------------------------------------------------------------------------
000174D2                            ; Sprite mappings - lamppost
000174D2                            ; ---------------------------------------------------------------------------
000174D2 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000174D6 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000174DA 06                         byte_17100:	dc.b 6
000174DB E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000174E0 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000174E5 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000174EA F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000174EF D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000174F4 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000174F9 04                         byte_1711F:	dc.b 4
000174FA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000174FF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017504 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017509 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001750E 02                         byte_17134:	dc.b 2
0001750F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017514 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017519 06                         byte_1713F:	dc.b 6
0001751A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001751F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017524 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017529 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001752E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017533 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017538                            		even
00017538                            		even
00017538                            
00017538                            ; ===========================================================================
00017538                            ; ---------------------------------------------------------------------------
00017538                            ; Object 7D - hidden points at the end of a level
00017538                            ; ---------------------------------------------------------------------------
00017538                            
00017538                            Obj7D:					; XREF: Obj_Index
00017538 7000                       		moveq	#0,d0
0001753A 1028 0024                  		move.b	$24(a0),d0
0001753E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017542 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017546                            ; ===========================================================================
00017546 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017548 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001754A                            ; ===========================================================================
0001754A                            
0001754A                            Obj7D_Main:				; XREF: Obj7D_Index
0001754A 7410                       		moveq	#$10,d2
0001754C 3602                       		move.w	d2,d3
0001754E D643                       		add.w	d3,d3
00017550 43F8 D000                  		lea	($FFFFD000).w,a1
00017554 3029 0008                  		move.w	8(a1),d0
00017558 9068 0008                  		sub.w	8(a0),d0
0001755C D042                       		add.w	d2,d0
0001755E B043                       		cmp.w	d3,d0
00017560 6400                       		bcc.s	Obj7D_ChkDel
00017562 3229 000C                  		move.w	$C(a1),d1
00017566 9268 000C                  		sub.w	$C(a0),d1
0001756A D242                       		add.w	d2,d1
0001756C B243                       		cmp.w	d3,d1
0001756E 6400                       		bcc.s	Obj7D_ChkDel
00017570 4A78 FE08                  		tst.w	($FFFFFE08).w
00017574 6600                       		bne.s	Obj7D_ChkDel
00017576 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001757A 6600                       		bne.s	Obj7D_ChkDel
0001757C 5428 0024                  		addq.b	#2,$24(a0)
00017580 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017588 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001758E 0028 0004 0001             		ori.b	#4,1(a0)
00017594 117C 0000 0018             		move.b	#0,$18(a0)
0001759A 117C 0010 0019             		move.b	#$10,$19(a0)
000175A0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000175A6 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000175AC 303C 00C9                  		move.w	#$C9,d0
000175B0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play bonus sound
000175B6 7000                       		moveq	#0,d0
000175B8 1028 0028                  		move.b	$28(a0),d0
000175BC D040                       		add.w	d0,d0
000175BE 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000175C2 4EB9 0000 0000             		jsr	AddPoints
000175C8                            
000175C8                            Obj7D_ChkDel:
000175C8 3028 0008                  		move.w	8(a0),d0
000175CC 0240 FF80                  		andi.w	#$FF80,d0
000175D0 3238 F700                  		move.w	($FFFFF700).w,d1
000175D4 0441 0080                  		subi.w	#$80,d1
000175D8 0241 FF80                  		andi.w	#$FF80,d1
000175DC 9041                       		sub.w	d1,d0
000175DE 0C40 0280                  		cmpi.w	#$280,d0
000175E2 6200                       		bhi.s	Obj7D_Delete
000175E4 4E75                       		rts	
000175E6                            ; ===========================================================================
000175E6                            
000175E6                            Obj7D_Delete:
000175E6 4EF9 0000 D6E6             		jmp	DeleteObject
000175EC                            ; ===========================================================================
000175EC 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000175EE 03E8                       		dc.w 1000
000175F0 0064                       		dc.w 100
000175F2 0001                       		dc.w 1
000175F4                            ; ===========================================================================
000175F4                            
000175F4                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000175F4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000175F8 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000175FA 3028 0008                  		move.w	8(a0),d0
000175FE 0240 FF80                  		andi.w	#-$80,d0
00017602 3238 F700                  		move.w	($FFFFF700).w,d1
00017606 0441 0080                  		subi.w	#$80,d1
0001760A 0241 FF80                  		andi.w	#-$80,d1
0001760E 9041                       		sub.w	d1,d0
00017610 0C40 0280                  		cmpi.w	#$280,d0
00017614 6200                       		bhi.s	Obj7D_Delete2
00017616 4EF9 0000 D6AA             		jmp	DisplaySprite
0001761C                            ; ===========================================================================
0001761C                            
0001761C                            Obj7D_Delete2:
0001761C 4EF9 0000 D6E6             		jmp	DeleteObject
00017622                            ; ===========================================================================
00017622                            ; ---------------------------------------------------------------------------
00017622                            ; Sprite mappings - hidden points at the end of	a level
00017622                            ; ---------------------------------------------------------------------------
00017622                            Map_obj7D:
00017622                            	include "_maps\obj7D.asm"
00017622                            ; ---------------------------------------------------------------------------
00017622                            ; Sprite mappings - hidden points at the end of	a level
00017622                            ; ---------------------------------------------------------------------------
00017622 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017626 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001762A 00                         byte_17250:	dc.b 0
0001762B 01                         byte_17251:	dc.b 1
0001762C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017631 01                         byte_17257:	dc.b 1
00017632 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017637 01                         byte_1725D:	dc.b 1
00017638 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001763E 00                         		even
0001763E 00                         		even
0001763E                            
0001763E                            ; ===========================================================================
0001763E                            ; ---------------------------------------------------------------------------
0001763E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001763E                            ; ---------------------------------------------------------------------------
0001763E                            
0001763E                            Obj8A:					; XREF: Obj_Index
0001763E 7000                       		moveq	#0,d0
00017640 1028 0024                  		move.b	$24(a0),d0
00017644 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017648 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001764C                            ; ===========================================================================
0001764C 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001764E 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017650                            ; ===========================================================================
00017650                            
00017650                            Obj8A_Main:				; XREF: Obj8A_Index
00017650 5428 0024                  		addq.b	#2,$24(a0)
00017654 317C 0120 0008             		move.w	#$120,8(a0)
0001765A 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017660 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017668 317C 25A0 0002             		move.w	#$25A0,2(a0)
0001766E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017672 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017676 117C 0000 0001             		move.b	#0,1(a0)
0001767C 117C 0000 0018             		move.b	#0,$18(a0)
00017682 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017688 6600                       		bne.s	Obj8A_Display	; if not, branch
0001768A 317C 20A6 0002             		move.w	#$20A6,2(a0)
00017690 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017696 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001769A 6700                       		beq.s	Obj8A_Display	; if not, branch
0001769C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000176A2 6600                       		bne.s	Obj8A_Display	; if not, branch
000176A4 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000176AA 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000176B0 4EF9 0000 D6E6             		jmp	DeleteObject
000176B6                            ; ===========================================================================
000176B6                            
000176B6                            Obj8A_Display:				; XREF: Obj8A_Index
000176B6 4EF9 0000 D6AA             		jmp	DisplaySprite
000176BC                            ; ===========================================================================
000176BC                            ; ---------------------------------------------------------------------------
000176BC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000176BC                            ; ---------------------------------------------------------------------------
000176BC                            Map_obj8A:
000176BC                            	include "_maps\obj8A.asm"
000176BC                            ; ---------------------------------------------------------------------------
000176BC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000176BC                            ; ---------------------------------------------------------------------------
000176BC 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
000176C0 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
000176C4 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
000176C8 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
000176CC 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
000176D0 0000                       		dc.w byte_176A9-Map_obj8A
000176D2 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
000176D3 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
000176D8 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
000176DD F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
000176E2 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
000176E7 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
000176EC F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
000176F1 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
000176F6 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000176FB F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00017700 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017705 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001770A F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001770F F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017714 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00017719 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001771A D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001771F D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00017724 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00017729 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
0001772E D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00017733 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00017738 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001773D D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00017742 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00017747 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
0001774C 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00017751 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00017756 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001775B 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00017760 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00017765 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
0001776A 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
0001776B D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00017770 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00017775 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
0001777A D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
0001777F D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00017784 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00017789 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
0001778E 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00017793 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00017798 0805 0036 08               		dc.b 8,	5, 0, $36, 8
0001779D 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
0001779E D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000177A3 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000177A8 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000177AD D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000177B2 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000177B7 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
000177BC D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
000177C1 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
000177C6 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000177CB D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
000177D0 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
000177D5 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
000177DA D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
000177DF D805 0000 58               		dc.b $D8, 5, 0,	0, $58
000177E4 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
000177E9 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
000177EE 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
000177F3 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
000177F8 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
000177FD 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00017802 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00017807 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001780C 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00017811 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00017816 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00017817 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001781C D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00017821 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00017826 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001782B D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00017830 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00017835 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001783A 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
0001783F 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00017844 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00017849 0005 0004 24               		dc.b 0,	5, 0, 4, $24
0001784E 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00017853 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00017858 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
0001785D 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00017862 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00017867 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
0001786C 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00017871 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00017876 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
0001787B 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
0001787C D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00017881 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00017886 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
0001788B D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00017890 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00017895 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
0001789A D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001789F D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000178A4 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000178A9 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000178AE D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000178B3 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000178B8 0809 0008 88               		dc.b 8,	9, 0, 8, $88
000178BD 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
000178C2 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
000178C7 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
000178CC 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
000178D1 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
000178D6 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
000178DB 0805 0004 08               		dc.b 8,	5, 0, 4, 8
000178E0 0805 0058 18               		dc.b 8,	5, 0, $58, $18
000178E5 0805 0004 28               		dc.b 8,	5, 0, 4, $28
000178EA 0809 0008 38               		dc.b 8,	9, 0, 8, $38
000178EF 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
000178F4 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
000178F9 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
000178FE 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
000178FF D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00017904 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00017909 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001790E D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00017913 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00017918 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001791D D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00017922 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00017927 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001792C D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00017931 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00017936 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001793B 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017940 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017945 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001794A 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001794F 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00017954 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00017959 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001795E 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00017963 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00017968 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001796D 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00017972 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00017973 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00017978 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
0001797D D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00017982 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00017987 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
0001798C D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017991 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00017996 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
0001799B D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000179A0 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000179A5 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000179AA D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000179AF D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000179B4 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000179B9 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
000179BE 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000179C3 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000179C8 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
000179CD 0009 0008 00               		dc.b 0,	9, 0, 8, 0
000179D2 0001 0046 14               		dc.b 0,	1, 0, $46, $14
000179D7 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
000179DC 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
000179E1 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
000179E6 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
000179EB 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
000179F0 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
000179F5 0001 0046 74               		dc.b 0,	1, 0, $46, $74
000179FA 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
000179FF 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00017A04 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00017A09 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00017A0E 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00017A0F F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00017A14 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00017A19 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00017A1E F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00017A23 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00017A28 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00017A2D F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00017A32 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00017A37 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00017A3C F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00017A41 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00017A46 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00017A4B F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00017A50 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00017A55 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00017A5A 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00017A5B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00017A60 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00017A65 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00017A6A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00017A6F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00017A74 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00017A79 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00017A7E 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00017A83 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00017A84 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00017A89 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00017A8E E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00017A93 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00017A98 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00017A9D E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00017AA2 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00017AA7 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00017AAC E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00017AB1 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00017AB6 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00017ABB 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00017AC0 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00017AC5 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00017ACA 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00017ACF 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00017AD4 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00017ADA 00                         		even
00017ADA 00                         		even
00017ADA                            
00017ADA                            ; ===========================================================================
00017ADA                            ; ---------------------------------------------------------------------------
00017ADA                            ; Object 3D - Eggman (GHZ)
00017ADA                            ; ---------------------------------------------------------------------------
00017ADA                            
00017ADA                            Obj3D:					; XREF: Obj_Index
00017ADA 7000                       		moveq	#0,d0
00017ADC 1028 0024                  		move.b	$24(a0),d0
00017AE0 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017AE4 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017AE8                            ; ===========================================================================
00017AE8 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017AEA 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017AEC 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017AEE 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017AF0                            
00017AF0 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017AF2 0401                       		dc.b 4,	1
00017AF4 0607                       		dc.b 6,	7
00017AF6                            ; ===========================================================================
00017AF6                            
00017AF6                            Obj3D_Main:				; XREF: Obj3D_Index
00017AF6 45F9 0001 7AF0             		lea	(Obj3D_ObjData).l,a2
00017AFC 2248                       		movea.l	a0,a1
00017AFE 7202                       		moveq	#2,d1
00017B00 6000                       		bra.s	Obj3D_LoadBoss
00017B02                            ; ===========================================================================
00017B02                            
00017B02                            Obj3D_Loop:
00017B02 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00017B08 6600                       		bne.s	loc_17772
00017B0A                            
00017B0A                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017B0A 135A 0024                  		move.b	(a2)+,$24(a1)
00017B0E 12BC 003D                  		move.b	#$3D,0(a1)
00017B12 3368 0008 0008             		move.w	8(a0),8(a1)
00017B18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017B1E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017B26 337C 0400 0002             		move.w	#$400,2(a1)
00017B2C 137C 0004 0001             		move.b	#4,1(a1)
00017B32 137C 0020 0019             		move.b	#$20,$19(a1)
00017B38 137C 0003 0018             		move.b	#3,$18(a1)
00017B3E 135A 001C                  		move.b	(a2)+,$1C(a1)
00017B42 2348 0034                  		move.l	a0,$34(a1)
00017B46 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017B4A                            
00017B4A                            loc_17772:
00017B4A 3168 0008 0030             		move.w	8(a0),$30(a0)
00017B50 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017B56 117C 000F 0020             		move.b	#$F,$20(a0)
00017B5C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017B62                            
00017B62                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017B62 7000                       		moveq	#0,d0
00017B64 1028 0025                  		move.b	$25(a0),d0
00017B68 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017B6C 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017B70 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017B76 4EB9 0000 A7A2             		jsr	AnimateSprite
00017B7C 1028 0022                  		move.b	$22(a0),d0
00017B80 0200 0003                  		andi.b	#3,d0
00017B84 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017B8A 8128 0001                  		or.b	d0,1(a0)
00017B8E 4EF9 0000 D6AA             		jmp	DisplaySprite
00017B94                            ; ===========================================================================
00017B94 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017B96 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017B98 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017B9A 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017B9C 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017B9E 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017BA0 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017BA2                            ; ===========================================================================
00017BA2                            
00017BA2                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017BA2 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017BA8 6100 0000                  		bsr.w	BossMove
00017BAC 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017BB2 6600                       		bne.s	loc_177E6
00017BB4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017BBA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017BBE                            
00017BBE                            loc_177E6:
00017BBE 1028 003F                  		move.b	$3F(a0),d0
00017BC2 4EB9 0000 28EC             		jsr	(CalcSine).l
00017BC8 EC40                       		asr.w	#6,d0
00017BCA D068 0038                  		add.w	$38(a0),d0
00017BCE 3140 000C                  		move.w	d0,$C(a0)
00017BD2 3168 0030 0008             		move.w	$30(a0),8(a0)
00017BD8 5428 003F                  		addq.b	#2,$3F(a0)
00017BDC 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017BE2 6400                       		bcc.s	locret_1784A
00017BE4 4A28 0022                  		tst.b	$22(a0)
00017BE8 6B00                       		bmi.s	loc_1784C
00017BEA 4A28 0020                  		tst.b	$20(a0)
00017BEE 6600                       		bne.s	locret_1784A
00017BF0 4A28 003E                  		tst.b	$3E(a0)
00017BF4 6600                       		bne.s	Obj3D_ShipFlash
00017BF6 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017BFC 303C 00AC                  		move.w	#$AC,d0
00017C00 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017C06                            
00017C06                            Obj3D_ShipFlash:
00017C06 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017C0A 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017C0C 4A51                       		tst.w	(a1)
00017C0E 6600                       		bne.s	loc_1783C
00017C10 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017C14                            
00017C14                            loc_1783C:
00017C14 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017C16 5328 003E                  		subq.b	#1,$3E(a0)
00017C1A 6600                       		bne.s	locret_1784A
00017C1C 117C 000F 0020             		move.b	#$F,$20(a0)
00017C22                            
00017C22                            locret_1784A:
00017C22 4E75                       		rts	
00017C24                            ; ===========================================================================
00017C24                            
00017C24                            loc_1784C:				; XREF: loc_177E6
00017C24 7064                       		moveq	#100,d0
00017C26 6100 0000                  		bsr.w	AddPoints
00017C2A 117C 0008 0025             		move.b	#8,$25(a0)
00017C30 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017C36 4E75                       		rts	
00017C38                            
00017C38                            ; ---------------------------------------------------------------------------
00017C38                            ; Defeated boss	subroutine
00017C38                            ; ---------------------------------------------------------------------------
00017C38                            
00017C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C38                            
00017C38                            
00017C38                            BossDefeated:
00017C38 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00017C3E 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
00017C44 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017C48 0200 0007                  		andi.b	#7,d0
00017C4C 6600                       		bne.s	locret_178A2
00017C4E 4EB9 0000 DB36             		jsr	SingleObjLoad
00017C54 6600                       		bne.s	locret_178A2
00017C56 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017C5A 3368 0008 0008             		move.w	8(a0),8(a1)
00017C60 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017C66 4EB9 0000 28C6             		jsr	(RandomNumber).l
00017C6C 3200                       		move.w	d0,d1
00017C6E 7200                       		moveq	#0,d1
00017C70 1200                       		move.b	d0,d1
00017C72 E409                       		lsr.b	#2,d1
00017C74 0441 0020                  		subi.w	#$20,d1
00017C78 D369 0008                  		add.w	d1,8(a1)
00017C7C E048                       		lsr.w	#8,d0
00017C7E E608                       		lsr.b	#3,d0
00017C80 D169 000C                  		add.w	d0,$C(a1)
00017C84                            
00017C84                            locret_178A2:
00017C84 4E75                       		rts	
00017C86                            ; End of function BossDefeated
00017C86                            
00017C86                            ; ---------------------------------------------------------------------------
00017C86                            ; Subroutine to	move a boss
00017C86                            ; ---------------------------------------------------------------------------
00017C86                            
00017C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C86                            
00017C86                            
00017C86                            BossMove:
00017C86 2428 0030                  		move.l	$30(a0),d2
00017C8A 2628 0038                  		move.l	$38(a0),d3
00017C8E 3028 0010                  		move.w	$10(a0),d0
00017C92 48C0                       		ext.l	d0
00017C94 E180                       		asl.l	#8,d0
00017C96 D480                       		add.l	d0,d2
00017C98 3028 0012                  		move.w	$12(a0),d0
00017C9C 48C0                       		ext.l	d0
00017C9E E180                       		asl.l	#8,d0
00017CA0 D680                       		add.l	d0,d3
00017CA2 2142 0030                  		move.l	d2,$30(a0)
00017CA6 2143 0038                  		move.l	d3,$38(a0)
00017CAA 4E75                       		rts	
00017CAC                            ; End of function BossMove
00017CAC                            
00017CAC                            ; ===========================================================================
00017CAC                            
00017CAC                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017CAC 317C FF00 0010             		move.w	#-$100,$10(a0)
00017CB2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017CB8 6100 FFCC                  		bsr.w	BossMove
00017CBC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017CC2 6600                       		bne.s	loc_17916
00017CC4 317C 0000 0010             		move.w	#0,$10(a0)
00017CCA 317C 0000 0012             		move.w	#0,$12(a0)
00017CD0 5428 0025                  		addq.b	#2,$25(a0)
00017CD4 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00017CDA 6600                       		bne.s	loc_17910
00017CDC 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017CE0 3368 0030 0008             		move.w	$30(a0),8(a1)
00017CE6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017CEC 2348 0034                  		move.l	a0,$34(a1)
00017CF0                            
00017CF0                            loc_17910:
00017CF0 317C 0077 003C             		move.w	#$77,$3C(a0)
00017CF6                            
00017CF6                            loc_17916:
00017CF6 6000 FEC6                  		bra.w	loc_177E6
00017CFA                            ; ===========================================================================
00017CFA                            
00017CFA                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017CFA 5368 003C                  		subq.w	#1,$3C(a0)
00017CFE 6A00                       		bpl.s	Obj3D_Reverse
00017D00 5428 0025                  		addq.b	#2,$25(a0)
00017D04 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017D0A 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017D10 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017D16 6600                       		bne.s	Obj3D_Reverse
00017D18 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017D1E 317C 0040 0010             		move.w	#$40,$10(a0)
00017D24                            
00017D24                            Obj3D_Reverse:
00017D24 0828 0000 0022             		btst	#0,$22(a0)
00017D2A 6600                       		bne.s	loc_17950
00017D2C 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017D30                            
00017D30                            loc_17950:
00017D30 6000 FE8C                  		bra.w	loc_177E6
00017D34                            ; ===========================================================================
00017D34                            
00017D34                            loc_17954:				; XREF: Obj3D_ShipIndex
00017D34 5368 003C                  		subq.w	#1,$3C(a0)
00017D38 6B00                       		bmi.s	loc_17960
00017D3A 6100 FF4A                  		bsr.w	BossMove
00017D3E 6000                       		bra.s	loc_17976
00017D40                            ; ===========================================================================
00017D40                            
00017D40                            loc_17960:
00017D40 0868 0000 0022             		bchg	#0,$22(a0)
00017D46 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017D4C 5528 0025                  		subq.b	#2,$25(a0)
00017D50 317C 0000 0010             		move.w	#0,$10(a0)
00017D56                            
00017D56                            loc_17976:
00017D56 6000 FE66                  		bra.w	loc_177E6
00017D5A                            ; ===========================================================================
00017D5A                            
00017D5A                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017D5A 5368 003C                  		subq.w	#1,$3C(a0)
00017D5E 6B00                       		bmi.s	loc_17984
00017D60 6000 FED6                  		bra.w	BossDefeated
00017D64                            ; ===========================================================================
00017D64                            
00017D64                            loc_17984:
00017D64 08E8 0000 0022             		bset	#0,$22(a0)
00017D6A 08A8 0007 0022             		bclr	#7,$22(a0)
00017D70 4268 0010                  		clr.w	$10(a0)
00017D74 5428 0025                  		addq.b	#2,$25(a0)
00017D78 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017D7E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017D82 6600                       		bne.s	locret_179AA
00017D84 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017D8A                            
00017D8A                            locret_179AA:
00017D8A 4E75                       		rts	
00017D8C                            ; ===========================================================================
00017D8C                            
00017D8C                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017D8C 5268 003C                  		addq.w	#1,$3C(a0)
00017D90 6700                       		beq.s	loc_179BC
00017D92 6A00                       		bpl.s	loc_179C2
00017D94 0668 0018 0012             		addi.w	#$18,$12(a0)
00017D9A 6000                       		bra.s	loc_179EE
00017D9C                            ; ===========================================================================
00017D9C                            
00017D9C                            loc_179BC:
00017D9C 4268 0012                  		clr.w	$12(a0)
00017DA0 6000                       		bra.s	loc_179EE
00017DA2                            ; ===========================================================================
00017DA2                            
00017DA2                            loc_179C2:
00017DA2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017DA8 6500                       		bcs.s	loc_179DA
00017DAA 6700                       		beq.s	loc_179E0
00017DAC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017DB2 6500                       		bcs.s	loc_179EE
00017DB4 5428 0025                  		addq.b	#2,$25(a0)
00017DB8 6000                       		bra.s	loc_179EE
00017DBA                            ; ===========================================================================
00017DBA                            
00017DBA                            loc_179DA:
00017DBA 5168 0012                  		subq.w	#8,$12(a0)
00017DBE 6000                       		bra.s	loc_179EE
00017DC0                            ; ===========================================================================
00017DC0                            
00017DC0                            loc_179E0:
00017DC0 4268 0012                  		clr.w	$12(a0)
00017DC4 303C 0081                  		move.w	#$81,d0
00017DC8 4EB9 0000 125C             		jsr	(PlaySound).l	; play GHZ music
00017DCE                            
00017DCE                            loc_179EE:
00017DCE 6100 FEB6                  		bsr.w	BossMove
00017DD2 6000 FDEA                  		bra.w	loc_177E6
00017DD6                            ; ===========================================================================
00017DD6                            
00017DD6                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017DD6 317C 0400 0010             		move.w	#$400,$10(a0)
00017DDC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017DE2 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017DE8 6700                       		beq.s	loc_17A10
00017DEA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017DEE 6000                       		bra.s	loc_17A16
00017DF0                            ; ===========================================================================
00017DF0                            
00017DF0                            loc_17A10:
00017DF0 4A28 0001                  		tst.b	1(a0)
00017DF4 6A00                       		bpl.s	Obj3D_ShipDel
00017DF6                            
00017DF6                            loc_17A16:
00017DF6 6100 FE8E                  		bsr.w	BossMove
00017DFA 6000 FDC2                  		bra.w	loc_177E6
00017DFE                            ; ===========================================================================
00017DFE                            
00017DFE                            Obj3D_ShipDel:
00017DFE 4EF9 0000 D6E6             		jmp	DeleteObject
00017E04                            ; ===========================================================================
00017E04                            
00017E04                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017E04 7000                       		moveq	#0,d0
00017E06 7201                       		moveq	#1,d1
00017E08 2268 0034                  		movea.l	$34(a0),a1
00017E0C 1029 0025                  		move.b	$25(a1),d0
00017E10 5900                       		subq.b	#4,d0
00017E12 6600                       		bne.s	loc_17A3E
00017E14 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017E1A 6600                       		bne.s	loc_17A46
00017E1C 7204                       		moveq	#4,d1
00017E1E                            
00017E1E                            loc_17A3E:
00017E1E 5D00                       		subq.b	#6,d0
00017E20 6B00                       		bmi.s	loc_17A46
00017E22 720A                       		moveq	#$A,d1
00017E24 6000                       		bra.s	loc_17A5A
00017E26                            ; ===========================================================================
00017E26                            
00017E26                            loc_17A46:
00017E26 4A29 0020                  		tst.b	$20(a1)
00017E2A 6600                       		bne.s	loc_17A50
00017E2C 7205                       		moveq	#5,d1
00017E2E 6000                       		bra.s	loc_17A5A
00017E30                            ; ===========================================================================
00017E30                            
00017E30                            loc_17A50:
00017E30 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017E36 6500                       		bcs.s	loc_17A5A
00017E38 7204                       		moveq	#4,d1
00017E3A                            
00017E3A                            loc_17A5A:
00017E3A 1141 001C                  		move.b	d1,$1C(a0)
00017E3E 5500                       		subq.b	#2,d0
00017E40 6600                       		bne.s	Obj3D_FaceDisp
00017E42 117C 0006 001C             		move.b	#6,$1C(a0)
00017E48 4A28 0001                  		tst.b	1(a0)
00017E4C 6A00                       		bpl.s	Obj3D_FaceDel
00017E4E                            
00017E4E                            Obj3D_FaceDisp:
00017E4E 6000                       		bra.s	Obj3D_Display
00017E50                            ; ===========================================================================
00017E50                            
00017E50                            Obj3D_FaceDel:
00017E50 4EF9 0000 D6E6             		jmp	DeleteObject
00017E56                            ; ===========================================================================
00017E56                            
00017E56                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017E56 117C 0007 001C             		move.b	#7,$1C(a0)
00017E5C 2268 0034                  		movea.l	$34(a0),a1
00017E60 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017E66 6600                       		bne.s	loc_17A96
00017E68 117C 000B 001C             		move.b	#$B,$1C(a0)
00017E6E 4A28 0001                  		tst.b	1(a0)
00017E72 6A00                       		bpl.s	Obj3D_FlameDel
00017E74 6000                       		bra.s	Obj3D_FlameDisp
00017E76                            ; ===========================================================================
00017E76                            
00017E76                            loc_17A96:
00017E76 3029 0010                  		move.w	$10(a1),d0
00017E7A 6700                       		beq.s	Obj3D_FlameDisp
00017E7C 117C 0008 001C             		move.b	#8,$1C(a0)
00017E82                            
00017E82                            Obj3D_FlameDisp:
00017E82 6000                       		bra.s	Obj3D_Display
00017E84                            ; ===========================================================================
00017E84                            
00017E84                            Obj3D_FlameDel:
00017E84 4EF9 0000 D6E6             		jmp	DeleteObject
00017E8A                            ; ===========================================================================
00017E8A                            
00017E8A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017E8A 2268 0034                  		movea.l	$34(a0),a1
00017E8E 3169 0008 0008             		move.w	8(a1),8(a0)
00017E94 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017E9A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017EA0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017EA6 4EB9 0000 A7A2             		jsr	AnimateSprite
00017EAC 1028 0022                  		move.b	$22(a0),d0
00017EB0 0200 0003                  		andi.b	#3,d0
00017EB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017EBA 8128 0001                  		or.b	d0,1(a0)
00017EBE 4EF9 0000 D6AA             		jmp	DisplaySprite
00017EC4                            ; ===========================================================================
00017EC4                            ; ---------------------------------------------------------------------------
00017EC4                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017EC4                            ; ---------------------------------------------------------------------------
00017EC4                            
00017EC4                            Obj48:					; XREF: Obj_Index
00017EC4 7000                       		moveq	#0,d0
00017EC6 1028 0024                  		move.b	$24(a0),d0
00017ECA 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017ECE 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017ED2                            ; ===========================================================================
00017ED2 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017ED4 0000                       		dc.w Obj48_Base-Obj48_Index
00017ED6 0000                       		dc.w Obj48_Display2-Obj48_Index
00017ED8 0000                       		dc.w loc_17C68-Obj48_Index
00017EDA 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017EDC                            ; ===========================================================================
00017EDC                            
00017EDC                            Obj48_Main:				; XREF: Obj48_Index
00017EDC 5428 0024                  		addq.b	#2,$24(a0)
00017EE0 317C 4080 0026             		move.w	#$4080,$26(a0)
00017EE6 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017EEC 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017EF4 317C 046C 0002             		move.w	#$46C,2(a0)
00017EFA 45E8 0028                  		lea	$28(a0),a2
00017EFE 14FC 0000                  		move.b	#0,(a2)+
00017F02 7205                       		moveq	#5,d1
00017F04 2248                       		movea.l	a0,a1
00017F06 6000                       		bra.s	loc_17B60
00017F08                            ; ===========================================================================
00017F08                            
00017F08                            Obj48_MakeLinks:
00017F08 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00017F0E 6600                       		bne.s	Obj48_MakeBall
00017F10 3368 0008 0008             		move.w	8(a0),8(a1)
00017F16 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017F1C 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017F20 137C 0006 0024             		move.b	#6,$24(a1)
00017F26 237C 0000 7CD6 0004        		move.l	#Map_obj15,4(a1)
00017F2E 337C 0380 0002             		move.w	#$380,2(a1)
00017F34 137C 0001 001A             		move.b	#1,$1A(a1)
00017F3A 5228 0028                  		addq.b	#1,$28(a0)
00017F3E                            
00017F3E                            loc_17B60:				; XREF: Obj48_Main
00017F3E 3A09                       		move.w	a1,d5
00017F40 0445 D000                  		subi.w	#$D000,d5
00017F44 EC4D                       		lsr.w	#6,d5
00017F46 0245 007F                  		andi.w	#$7F,d5
00017F4A 14C5                       		move.b	d5,(a2)+
00017F4C 137C 0004 0001             		move.b	#4,1(a1)
00017F52 137C 0008 0019             		move.b	#8,$19(a1)
00017F58 137C 0006 0018             		move.b	#6,$18(a1)
00017F5E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017F64 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017F68                            
00017F68                            Obj48_MakeBall:
00017F68 137C 0008 0024             		move.b	#8,$24(a1)
00017F6E 237C 0000 8234 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017F76 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017F7C 137C 0001 001A             		move.b	#1,$1A(a1)
00017F82 137C 0005 0018             		move.b	#5,$18(a1)
00017F88 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017F8E 4E75                       		rts	
00017F90                            ; ===========================================================================
00017F90                            
00017F90 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017F96                            
00017F96                            ; ===========================================================================
00017F96                            
00017F96                            Obj48_Base:				; XREF: Obj48_Index
00017F96 47F9 0001 7F90             		lea	(Obj48_PosData).l,a3
00017F9C 45E8 0028                  		lea	$28(a0),a2
00017FA0 7C00                       		moveq	#0,d6
00017FA2 1C1A                       		move.b	(a2)+,d6
00017FA4                            
00017FA4                            loc_17BC6:
00017FA4 7800                       		moveq	#0,d4
00017FA6 181A                       		move.b	(a2)+,d4
00017FA8 ED4C                       		lsl.w	#6,d4
00017FAA 0684 00FF D000             		addi.l	#$FFD000,d4
00017FB0 2244                       		movea.l	d4,a1
00017FB2 101B                       		move.b	(a3)+,d0
00017FB4 B029 003C                  		cmp.b	$3C(a1),d0
00017FB8 6700                       		beq.s	loc_17BE0
00017FBA 5229 003C                  		addq.b	#1,$3C(a1)
00017FBE                            
00017FBE                            loc_17BE0:
00017FBE 51CE FFE4                  		dbf	d6,loc_17BC6
00017FC2                            
00017FC2 B029 003C                  		cmp.b	$3C(a1),d0
00017FC6 6600                       		bne.s	loc_17BFA
00017FC8 2268 0034                  		movea.l	$34(a0),a1
00017FCC 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017FD2 6600                       		bne.s	loc_17BFA
00017FD4 5428 0024                  		addq.b	#2,$24(a0)
00017FD8                            
00017FD8                            loc_17BFA:
00017FD8 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017FDE 6700                       		beq.s	Obj48_Display
00017FE0 5268 0032                  		addq.w	#1,$32(a0)
00017FE4                            
00017FE4                            Obj48_Display:
00017FE4 6100 0000                  		bsr.w	sub_17C2A
00017FE8 1028 0026                  		move.b	$26(a0),d0
00017FEC 4EB9 0000 7C48             		jsr	(Obj15_Move2).l
00017FF2 4EF9 0000 D6AA             		jmp	DisplaySprite
00017FF8                            ; ===========================================================================
00017FF8                            
00017FF8                            Obj48_Display2:				; XREF: Obj48_Index
00017FF8 6100 0000                  		bsr.w	sub_17C2A
00017FFC 4EB9 0000 7C08             		jsr	(Obj48_Move).l
00018002 4EF9 0000 D6AA             		jmp	DisplaySprite
00018008                            
00018008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018008                            
00018008                            
00018008                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018008 2268 0034                  		movea.l	$34(a0),a1
0001800C 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018012 6400                       		bcc.s	loc_17C3C
00018014 0868 0000 001A             		bchg	#0,$1A(a0)
0001801A                            
0001801A                            loc_17C3C:
0001801A 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018020 3029 000C                  		move.w	$C(a1),d0
00018024 D068 0032                  		add.w	$32(a0),d0
00018028 3140 0038                  		move.w	d0,$38(a0)
0001802C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018032 4A29 0022                  		tst.b	$22(a1)
00018036 6A00                       		bpl.s	locret_17C66
00018038 10BC 003F                  		move.b	#$3F,0(a0)
0001803C 117C 0000 0024             		move.b	#0,$24(a0)
00018042                            
00018042                            locret_17C66:
00018042 4E75                       		rts	
00018044                            ; End of function sub_17C2A
00018044                            
00018044                            ; ===========================================================================
00018044                            
00018044                            loc_17C68:				; XREF: Obj48_Index
00018044 2268 0034                  		movea.l	$34(a0),a1
00018048 4A29 0022                  		tst.b	$22(a1)
0001804C 6A00                       		bpl.s	Obj48_Display3
0001804E 10BC 003F                  		move.b	#$3F,0(a0)
00018052 117C 0000 0024             		move.b	#0,$24(a0)
00018058                            
00018058                            Obj48_Display3:
00018058 4EF9 0000 D6AA             		jmp	DisplaySprite
0001805E                            ; ===========================================================================
0001805E                            
0001805E                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001805E 7000                       		moveq	#0,d0
00018060 4A28 001A                  		tst.b	$1A(a0)
00018064 6600                       		bne.s	Obj48_Vanish
00018066 5200                       		addq.b	#1,d0
00018068                            
00018068                            Obj48_Vanish:
00018068 1140 001A                  		move.b	d0,$1A(a0)
0001806C 2268 0034                  		movea.l	$34(a0),a1
00018070 4A29 0022                  		tst.b	$22(a1)
00018074 6A00                       		bpl.s	Obj48_Display4
00018076 117C 0000 0020             		move.b	#0,$20(a0)
0001807C 6100 FBBA                  		bsr.w	BossDefeated
00018080 5328 003C                  		subq.b	#1,$3C(a0)
00018084 6A00                       		bpl.s	Obj48_Display4
00018086 10BC 003F                  		move.b	#$3F,(a0)
0001808A 117C 0000 0024             		move.b	#0,$24(a0)
00018090                            
00018090                            Obj48_Display4:
00018090 4EF9 0000 D6AA             		jmp	DisplaySprite
00018096                            ; ===========================================================================
00018096                            Ani_Eggman:
00018096                            	include "_anim\Eggman.asm"
00018096                            ; ---------------------------------------------------------------------------
00018096                            ; Animation script - Eggman (bosses)
00018096                            ; ---------------------------------------------------------------------------
00018096 0000                       		dc.w byte_17CD4-Ani_Eggman
00018098 0000                       		dc.w byte_17CD8-Ani_Eggman
0001809A 0000                       		dc.w byte_17CDC-Ani_Eggman
0001809C 0000                       		dc.w byte_17CE0-Ani_Eggman
0001809E 0000                       		dc.w byte_17CE4-Ani_Eggman
000180A0 0000                       		dc.w byte_17CE8-Ani_Eggman
000180A2 0000                       		dc.w byte_17CEC-Ani_Eggman
000180A4 0000                       		dc.w byte_17CF0-Ani_Eggman
000180A6 0000                       		dc.w byte_17CF4-Ani_Eggman
000180A8 0000                       		dc.w byte_17CF8-Ani_Eggman
000180AA 0000                       		dc.w byte_17CFC-Ani_Eggman
000180AC 0000                       		dc.w byte_17D00-Ani_Eggman
000180AE 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000180B2 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000180B6 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000180BA 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000180BE 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000180C2 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000180C6 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000180CA 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000180CE 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000180D2 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000180D6 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000180DA 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000180E6                            		even
000180E6                            		even
000180E6                            
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            ; Sprite mappings - Eggman (boss levels)
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            Map_Eggman:
000180E6                            	include "_maps\Eggman.asm"
000180E6                            ; ---------------------------------------------------------------------------
000180E6                            ; Sprite mappings - Eggman (boss levels)
000180E6                            ; ---------------------------------------------------------------------------
000180E6 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000180EA 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000180EE 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000180F2 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000180F6 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000180FA 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000180FE 0000                       		dc.w byte_17DC8-Map_Eggman
00018100 06                         byte_17D26:	dc.b 6
00018101 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00018106 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
0001810B FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00018110 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00018115 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
0001811A 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
0001811F 02                         byte_17D45:	dc.b 2
00018120 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018125 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001812A 02                         byte_17D50:	dc.b 2
0001812B E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018130 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00018135 03                         byte_17D5B:	dc.b 3
00018136 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001813B EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00018140 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00018145 03                         byte_17D6B:	dc.b 3
00018146 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001814B EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00018150 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00018155 03                         byte_17D7B:	dc.b 3
00018156 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001815B EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00018160 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00018165 03                         byte_17D8B:	dc.b 3
00018166 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001816B E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018170 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00018175 04                         byte_17D9B:	dc.b 4
00018176 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001817B E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00018180 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00018185 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001818A 01                         byte_17DB0:	dc.b 1
0001818B 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00018190 01                         byte_17DB6:	dc.b 1
00018191 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00018196 00                         byte_17DBC:	dc.b 0
00018197 02                         byte_17DBD:	dc.b 2
00018198 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001819D 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
000181A2 02                         byte_17DC8:	dc.b 2
000181A3 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
000181A8 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
000181AE 00                         		even
000181AE 00                         		even
000181AE                            
000181AE                            ; ---------------------------------------------------------------------------
000181AE                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000181AE                            ; ---------------------------------------------------------------------------
000181AE                            Map_BossItems:
000181AE                            	include "_maps\Boss items.asm"
000181AE                            ; ---------------------------------------------------------------------------
000181AE                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000181AE                            ; ---------------------------------------------------------------------------
000181AE 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000181B2 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000181B6 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000181BA 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000181BE 01                         byte_17DE4:	dc.b 1
000181BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000181C4 02                         byte_17DEA:	dc.b 2
000181C5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000181CA F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000181CF 00                         		dc.b 0
000181D0 01                         byte_17DF6:	dc.b 1
000181D1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000181D6 01                         byte_17DFC:	dc.b 1
000181D7 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000181DC 01                         byte_17E02:	dc.b 1
000181DD 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000181E2 04                         byte_17E08:	dc.b 4
000181E3 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000181E8 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000181ED F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000181F2 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000181F7 00                         		dc.b 0
000181F8 02                         byte_17E1E:	dc.b 2
000181F9 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000181FE 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018203 00                         		dc.b 0
00018204 02                         byte_17E2A:	dc.b 2
00018205 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001820A 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018210 00                         		even
00018210 00                         		even
00018210                            
00018210                            ; ===========================================================================
00018210                            ; ---------------------------------------------------------------------------
00018210                            ; Object 77 - Eggman (LZ)
00018210                            ; ---------------------------------------------------------------------------
00018210                            
00018210                            Obj77:					; XREF: Obj_Index
00018210 7000                       		moveq	#0,d0
00018212 1028 0024                  		move.b	$24(a0),d0
00018216 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001821A 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001821E                            ; ===========================================================================
0001821E 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018220 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018222 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018224 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018226                            
00018226 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018228 0401                       		dc.b 4,	1
0001822A 0607                       		dc.b 6,	7
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            Obj77_Main:				; XREF: Obj77_Index
0001822C 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018232 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018238 3168 0008 0030             		move.w	8(a0),$30(a0)
0001823E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018244 117C 000F 0020             		move.b	#$F,$20(a0)
0001824A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018250 117C 0004 0018             		move.b	#4,$18(a0)
00018256 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001825A 2248                       		movea.l	a0,a1
0001825C 7202                       		moveq	#2,d1
0001825E 6000                       		bra.s	Obj77_LoadBoss
00018260                            ; ===========================================================================
00018260                            
00018260                            Obj77_Loop:
00018260 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00018266 6600                       		bne.s	Obj77_ShipMain
00018268 12BC 0077                  		move.b	#$77,0(a1)
0001826C 3368 0008 0008             		move.w	8(a0),8(a1)
00018272 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018278                            
00018278                            Obj77_LoadBoss:				; XREF: Obj77_Main
00018278 08A8 0000 0022             		bclr	#0,$22(a0)
0001827E 4229 0025                  		clr.b	$25(a1)
00018282 135A 0024                  		move.b	(a2)+,$24(a1)
00018286 135A 001C                  		move.b	(a2)+,$1C(a1)
0001828A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018290 237C 0001 80E6 0004        		move.l	#Map_Eggman,4(a1)
00018298 337C 0400 0002             		move.w	#$400,2(a1)
0001829E 137C 0004 0001             		move.b	#4,1(a1)
000182A4 137C 0020 0019             		move.b	#$20,$19(a1)
000182AA 2348 0034                  		move.l	a0,$34(a1)
000182AE 51C9 FFB0                  		dbf	d1,Obj77_Loop
000182B2                            
000182B2                            Obj77_ShipMain:
000182B2 43F8 D000                  		lea	($FFFFD000).w,a1
000182B6 7000                       		moveq	#0,d0
000182B8 1028 0025                  		move.b	$25(a0),d0
000182BC 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000182C0 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000182C4 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
000182CA 4EB9 0000 A7A2             		jsr	AnimateSprite
000182D0 7003                       		moveq	#3,d0
000182D2 C028 0022                  		and.b	$22(a0),d0
000182D6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182DC 8128 0001                  		or.b	d0,1(a0)
000182E0 4EF9 0000 D6AA             		jmp	DisplaySprite
000182E6                            ; ===========================================================================
000182E6 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000182EA 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000182EE 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000182F2 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000182F6                            ; ===========================================================================
000182F6                            
000182F6                            loc_17F1E:				; XREF: Obj77_ShipIndex
000182F6 3029 0008                  		move.w	8(a1),d0
000182FA 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000182FE 6500                       		bcs.s	loc_17F38
00018300 317C FE80 0012             		move.w	#-$180,$12(a0)
00018306 317C 0060 0010             		move.w	#$60,$10(a0)
0001830C 5428 0025                  		addq.b	#2,$25(a0)
00018310                            
00018310                            loc_17F38:
00018310 6100 F974                  		bsr.w	BossMove
00018314 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001831A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018320                            
00018320                            loc_17F48:
00018320 4A28 003D                  		tst.b	$3D(a0)
00018324 6600                       		bne.s	loc_17F8E
00018326 4A28 0022                  		tst.b	$22(a0)
0001832A 6B00                       		bmi.s	loc_17F92
0001832C 4A28 0020                  		tst.b	$20(a0)
00018330 6600                       		bne.s	locret_17F8C
00018332 4A28 003E                  		tst.b	$3E(a0)
00018336 6600                       		bne.s	loc_17F70
00018338 117C 0020 003E             		move.b	#$20,$3E(a0)
0001833E 303C 00AC                  		move.w	#$AC,d0
00018342 4EB9 0000 1262             		jsr	(PlaySound_Special).l
00018348                            
00018348                            loc_17F70:
00018348 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001834C 7000                       		moveq	#0,d0
0001834E 4A51                       		tst.w	(a1)
00018350 6600                       		bne.s	loc_17F7E
00018352 303C 0EEE                  		move.w	#$EEE,d0
00018356                            
00018356                            loc_17F7E:
00018356 3280                       		move.w	d0,(a1)
00018358 5328 003E                  		subq.b	#1,$3E(a0)
0001835C 6600                       		bne.s	locret_17F8C
0001835E 117C 000F 0020             		move.b	#$F,$20(a0)
00018364                            
00018364                            locret_17F8C:
00018364 4E75                       		rts	
00018366                            ; ===========================================================================
00018366                            
00018366                            loc_17F8E:				; XREF: loc_17F48
00018366 6000 F8D0                  		bra.w	BossDefeated
0001836A                            ; ===========================================================================
0001836A                            
0001836A                            loc_17F92:				; XREF: loc_17F48
0001836A 7064                       		moveq	#100,d0
0001836C 6100 0000                  		bsr.w	AddPoints
00018370 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018376 4E75                       		rts	
00018378                            ; ===========================================================================
00018378                            
00018378                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018378 70FE                       		moveq	#-2,d0
0001837A 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018380 6500                       		bcs.s	loc_17FB6
00018382 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00018388 4268 0010                  		clr.w	$10(a0)
0001838C 5240                       		addq.w	#1,d0
0001838E                            
0001838E                            loc_17FB6:
0001838E 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018394 6E00                       		bgt.s	loc_17FCA
00018396 317C 0500 0038             		move.w	#$500,$38(a0)
0001839C 4268 0012                  		clr.w	$12(a0)
000183A0 5240                       		addq.w	#1,d0
000183A2                            
000183A2                            loc_17FCA:
000183A2 6600                       		bne.s	loc_17FDC
000183A4 317C 0140 0010             		move.w	#$140,$10(a0)
000183AA 317C FE00 0012             		move.w	#-$200,$12(a0)
000183B0 5428 0025                  		addq.b	#2,$25(a0)
000183B4                            
000183B4                            loc_17FDC:
000183B4 6000 FF5A                  		bra.w	loc_17F38
000183B8                            ; ===========================================================================
000183B8                            
000183B8                            loc_17FE0:				; XREF: Obj77_ShipIndex
000183B8 70FE                       		moveq	#-2,d0
000183BA 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000183C0 6500                       		bcs.s	loc_17FF6
000183C2 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000183C8 4268 0010                  		clr.w	$10(a0)
000183CC 5240                       		addq.w	#1,d0
000183CE                            
000183CE                            loc_17FF6:
000183CE 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000183D4 6E00                       		bgt.s	loc_1800A
000183D6 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000183DC 4268 0012                  		clr.w	$12(a0)
000183E0 5240                       		addq.w	#1,d0
000183E2                            
000183E2                            loc_1800A:
000183E2 6600                       		bne.s	loc_1801A
000183E4 317C FE80 0012             		move.w	#-$180,$12(a0)
000183EA 5428 0025                  		addq.b	#2,$25(a0)
000183EE 4228 003F                  		clr.b	$3F(a0)
000183F2                            
000183F2                            loc_1801A:
000183F2 6000 FF1C                  		bra.w	loc_17F38
000183F6                            ; ===========================================================================
000183F6                            
000183F6                            loc_1801E:				; XREF: Obj77_ShipIndex
000183F6 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000183FC 6E00                       		bgt.s	loc_1804E
000183FE 317C 0100 0038             		move.w	#$100,$38(a0)
00018404 317C 0140 0010             		move.w	#$140,$10(a0)
0001840A 317C FF80 0012             		move.w	#-$80,$12(a0)
00018410 4A28 003D                  		tst.b	$3D(a0)
00018414 6700                       		beq.s	loc_18046
00018416 E1E8 0010                  		asl	$10(a0)
0001841A E1E8 0012                  		asl	$12(a0)
0001841E                            
0001841E                            loc_18046:
0001841E 5428 0025                  		addq.b	#2,$25(a0)
00018422 6000 FEEC                  		bra.w	loc_17F38
00018426                            ; ===========================================================================
00018426                            
00018426                            loc_1804E:
00018426 08E8 0000 0022             		bset	#0,$22(a0)
0001842C 5428 003F                  		addq.b	#2,$3F(a0)
00018430 1028 003F                  		move.b	$3F(a0),d0
00018434 4EB9 0000 28EC             		jsr	(CalcSine).l
0001843A 4A41                       		tst.w	d1
0001843C 6A00                       		bpl.s	loc_1806C
0001843E 08A8 0000 0022             		bclr	#0,$22(a0)
00018444                            
00018444                            loc_1806C:
00018444 E840                       		asr.w	#4,d0
00018446 4840                       		swap	d0
00018448 4240                       		clr.w	d0
0001844A D0A8 0030                  		add.l	$30(a0),d0
0001844E 4840                       		swap	d0
00018450 3140 0008                  		move.w	d0,8(a0)
00018454 3028 0012                  		move.w	$12(a0),d0
00018458 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001845C 9268 000C                  		sub.w	$C(a0),d1
00018460 6500                       		bcs.s	loc_180A2
00018462 0441 0048                  		subi.w	#$48,d1
00018466 6500                       		bcs.s	loc_180A2
00018468 E240                       		asr.w	#1,d0
0001846A 0441 0028                  		subi.w	#$28,d1
0001846E 6500                       		bcs.s	loc_180A2
00018470 E240                       		asr.w	#1,d0
00018472 0441 0028                  		subi.w	#$28,d1
00018476 6500                       		bcs.s	loc_180A2
00018478 7000                       		moveq	#0,d0
0001847A                            
0001847A                            loc_180A2:
0001847A 48C0                       		ext.l	d0
0001847C E180                       		asl.l	#8,d0
0001847E 4A28 003D                  		tst.b	$3D(a0)
00018482 6700                       		beq.s	loc_180AE
00018484 D080                       		add.l	d0,d0
00018486                            
00018486                            loc_180AE:
00018486 D1A8 0038                  		add.l	d0,$38(a0)
0001848A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018490 6000 FE8E                  		bra.w	loc_17F48
00018494                            ; ===========================================================================
00018494                            
00018494                            loc_180BC:				; XREF: Obj77_ShipIndex
00018494 70FE                       		moveq	#-2,d0
00018496 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001849C 6500                       		bcs.s	loc_180D2
0001849E 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000184A4 4268 0010                  		clr.w	$10(a0)
000184A8 5240                       		addq.w	#1,d0
000184AA                            
000184AA                            loc_180D2:
000184AA 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000184B0 6E00                       		bgt.s	loc_180E6
000184B2 317C 00C0 0038             		move.w	#$C0,$38(a0)
000184B8 4268 0012                  		clr.w	$12(a0)
000184BC 5240                       		addq.w	#1,d0
000184BE                            
000184BE                            loc_180E6:
000184BE 6600                       		bne.s	loc_180F2
000184C0 5428 0025                  		addq.b	#2,$25(a0)
000184C4 08A8 0000 0022             		bclr	#0,$22(a0)
000184CA                            
000184CA                            loc_180F2:
000184CA 6000 FE44                  		bra.w	loc_17F38
000184CE                            ; ===========================================================================
000184CE                            
000184CE                            loc_180F6:				; XREF: Obj77_ShipIndex
000184CE 4A28 003D                  		tst.b	$3D(a0)
000184D2 6600                       		bne.s	loc_18112
000184D4 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000184DA 6D00                       		blt.s	loc_18126
000184DC 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000184E2 6E00                       		bgt.s	loc_18126
000184E4 117C 0032 003C             		move.b	#$32,$3C(a0)
000184EA                            
000184EA                            loc_18112:
000184EA 303C 0082                  		move.w	#$82,d0
000184EE 4EB9 0000 125C             		jsr	(PlaySound).l	; play LZ music
000184F4 08E8 0000 0022             		bset	#0,$22(a0)
000184FA 5428 0025                  		addq.b	#2,$25(a0)
000184FE                            
000184FE                            loc_18126:
000184FE 6000 FE10                  		bra.w	loc_17F38
00018502                            ; ===========================================================================
00018502                            
00018502                            loc_1812A:				; XREF: Obj77_ShipIndex
00018502 4A28 003D                  		tst.b	$3D(a0)
00018506 6600                       		bne.s	loc_18136
00018508 5328 003C                  		subq.b	#1,$3C(a0)
0001850C 6600                       		bne.s	loc_1814E
0001850E                            
0001850E                            loc_18136:
0001850E 4228 003C                  		clr.b	$3C(a0)
00018512 317C 0400 0010             		move.w	#$400,$10(a0)
00018518 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001851E 4228 003D                  		clr.b	$3D(a0)
00018522 5428 0025                  		addq.b	#2,$25(a0)
00018526                            
00018526                            loc_1814E:
00018526 6000 FDE8                  		bra.w	loc_17F38
0001852A                            ; ===========================================================================
0001852A                            
0001852A                            loc_18152:				; XREF: Obj77_ShipIndex
0001852A 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018530 6400                       		bcc.s	loc_18160
00018532 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018536 6000                       		bra.s	loc_18166
00018538                            ; ===========================================================================
00018538                            
00018538                            loc_18160:
00018538 4A28 0001                  		tst.b	1(a0)
0001853C 6A00                       		bpl.s	Obj77_ShipDel
0001853E                            
0001853E                            loc_18166:
0001853E 6000 FDD0                  		bra.w	loc_17F38
00018542                            ; ===========================================================================
00018542                            
00018542                            Obj77_ShipDel:
00018542 4EF9 0000 D6E6             		jmp	DeleteObject
00018548                            ; ===========================================================================
00018548                            
00018548                            Obj77_FaceMain:				; XREF: Obj77_Index
00018548 2268 0034                  		movea.l	$34(a0),a1
0001854C 1011                       		move.b	(a1),d0
0001854E B010                       		cmp.b	(a0),d0
00018550 6600                       		bne.s	Obj77_FaceDel
00018552 7000                       		moveq	#0,d0
00018554 1029 0025                  		move.b	$25(a1),d0
00018558 7201                       		moveq	#1,d1
0001855A 4A28 003D                  		tst.b	$3D(a0)
0001855E 6700                       		beq.s	loc_1818C
00018560 720A                       		moveq	#$A,d1
00018562 6000                       		bra.s	loc_181A0
00018564                            ; ===========================================================================
00018564                            
00018564                            loc_1818C:
00018564 4A29 0020                  		tst.b	$20(a1)
00018568 6600                       		bne.s	loc_18196
0001856A 7205                       		moveq	#5,d1
0001856C 6000                       		bra.s	loc_181A0
0001856E                            ; ===========================================================================
0001856E                            
0001856E                            loc_18196:
0001856E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018574 6500                       		bcs.s	loc_181A0
00018576 7204                       		moveq	#4,d1
00018578                            
00018578                            loc_181A0:
00018578 1141 001C                  		move.b	d1,$1C(a0)
0001857C 0C00 000E                  		cmpi.b	#$E,d0
00018580 6600                       		bne.s	loc_181B6
00018582 117C 0006 001C             		move.b	#6,$1C(a0)
00018588 4A28 0001                  		tst.b	1(a0)
0001858C 6A00                       		bpl.s	Obj77_FaceDel
0001858E                            
0001858E                            loc_181B6:
0001858E 6000                       		bra.s	Obj77_Display
00018590                            ; ===========================================================================
00018590                            
00018590                            Obj77_FaceDel:
00018590 4EF9 0000 D6E6             		jmp	DeleteObject
00018596                            ; ===========================================================================
00018596                            
00018596                            Obj77_FlameMain:			; XREF: Obj77_Index
00018596 117C 0007 001C             		move.b	#7,$1C(a0)
0001859C 2268 0034                  		movea.l	$34(a0),a1
000185A0 1011                       		move.b	(a1),d0
000185A2 B010                       		cmp.b	(a0),d0
000185A4 6600                       		bne.s	Obj77_FlameDel
000185A6 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000185AC 6600                       		bne.s	loc_181F0
000185AE 117C 000B 001C             		move.b	#$B,$1C(a0)
000185B4 4A28 0001                  		tst.b	1(a0)
000185B8 6A00                       		bpl.s	Obj77_FlameDel
000185BA 6000                       		bra.s	loc_181F0
000185BC                            ; ===========================================================================
000185BC 4A69 0010                  		tst.w	$10(a1)
000185C0 6700                       		beq.s	loc_181F0
000185C2 117C 0008 001C             		move.b	#8,$1C(a0)
000185C8                            
000185C8                            loc_181F0:
000185C8 6000                       		bra.s	Obj77_Display
000185CA                            ; ===========================================================================
000185CA                            
000185CA                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000185CA 4EF9 0000 D6E6             		jmp	DeleteObject
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            Obj77_Display:
000185D0 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
000185D6 4EB9 0000 A7A2             		jsr	AnimateSprite
000185DC 2268 0034                  		movea.l	$34(a0),a1
000185E0 3169 0008 0008             		move.w	8(a1),8(a0)
000185E6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000185EC 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185F2 7003                       		moveq	#3,d0
000185F4 C028 0022                  		and.b	$22(a0),d0
000185F8 0228 00FC 0001             		andi.b	#-4,1(a0)
000185FE 8128 0001                  		or.b	d0,1(a0)
00018602 4EF9 0000 D6AA             		jmp	DisplaySprite
00018608                            ; ===========================================================================
00018608                            ; ---------------------------------------------------------------------------
00018608                            ; Object 73 - Eggman (MZ)
00018608                            ; ---------------------------------------------------------------------------
00018608                            
00018608                            Obj73:					; XREF: Obj_Index
00018608 7000                       		moveq	#0,d0
0001860A 1028 0024                  		move.b	$24(a0),d0
0001860E 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018612 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018616                            ; ===========================================================================
00018616 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018618 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001861A 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001861C 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001861E 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018620                            
00018620 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018623 0401 04                    		dc.b 4,	1, 4
00018626 0607 04                    		dc.b 6,	7, 4
00018629 0800 03                    		dc.b 8,	0, 3
0001862C                            ; ===========================================================================
0001862C                            
0001862C                            Obj73_Main:				; XREF: Obj73_Index
0001862C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018632 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018638 117C 000F 0020             		move.b	#$F,$20(a0)
0001863E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018644 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018648 2248                       		movea.l	a0,a1
0001864A 7203                       		moveq	#3,d1
0001864C 6000                       		bra.s	Obj73_LoadBoss
0001864E                            ; ===========================================================================
0001864E                            
0001864E                            Obj73_Loop:
0001864E 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00018654 6600                       		bne.s	Obj73_ShipMain
00018656 12BC 0073                  		move.b	#$73,0(a1)
0001865A 3368 0008 0008             		move.w	8(a0),8(a1)
00018660 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018666                            
00018666                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018666 08A8 0000 0022             		bclr	#0,$22(a0)
0001866C 4229 0025                  		clr.b	$25(a1)
00018670 135A 0024                  		move.b	(a2)+,$24(a1)
00018674 135A 001C                  		move.b	(a2)+,$1C(a1)
00018678 135A 0018                  		move.b	(a2)+,$18(a1)
0001867C 237C 0001 80E6 0004        		move.l	#Map_Eggman,4(a1)
00018684 337C 0400 0002             		move.w	#$400,2(a1)
0001868A 137C 0004 0001             		move.b	#4,1(a1)
00018690 137C 0020 0019             		move.b	#$20,$19(a1)
00018696 2348 0034                  		move.l	a0,$34(a1)
0001869A 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001869E                            
0001869E                            Obj73_ShipMain:
0001869E 7000                       		moveq	#0,d0
000186A0 1028 0025                  		move.b	$25(a0),d0
000186A4 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000186A8 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000186AC 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
000186B2 4EB9 0000 A7A2             		jsr	AnimateSprite
000186B8 7003                       		moveq	#3,d0
000186BA C028 0022                  		and.b	$22(a0),d0
000186BE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000186C4 8128 0001                  		or.b	d0,1(a0)
000186C8 4EF9 0000 D6AA             		jmp	DisplaySprite
000186CE                            ; ===========================================================================
000186CE 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000186D0 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000186D2 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000186D4 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000186D6 0000                       		dc.w loc_18582-Obj73_ShipIndex
000186D8                            ; ===========================================================================
000186D8                            
000186D8                            loc_18302:				; XREF: Obj73_ShipIndex
000186D8 1028 003F                  		move.b	$3F(a0),d0
000186DC 5428 003F                  		addq.b	#2,$3F(a0)
000186E0 4EB9 0000 28EC             		jsr	(CalcSine).l
000186E6 E440                       		asr.w	#2,d0
000186E8 3140 0012                  		move.w	d0,$12(a0)
000186EC 317C FF00 0010             		move.w	#-$100,$10(a0)
000186F2 6100 F592                  		bsr.w	BossMove
000186F6 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000186FC 6600                       		bne.s	loc_18334
000186FE 5428 0025                  		addq.b	#2,$25(a0)
00018702 4228 0028                  		clr.b	$28(a0)
00018706 42A8 0010                  		clr.l	$10(a0)
0001870A                            
0001870A                            loc_18334:
0001870A 4EB9 0000 28C6             		jsr	(RandomNumber).l
00018710 1140 0034                  		move.b	d0,$34(a0)
00018714                            
00018714                            loc_1833E:
00018714 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001871A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018720 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018726 6400                       		bcc.s	locret_18390
00018728 4A28 0022                  		tst.b	$22(a0)
0001872C 6B00                       		bmi.s	loc_18392
0001872E 4A28 0020                  		tst.b	$20(a0)
00018732 6600                       		bne.s	locret_18390
00018734 4A28 003E                  		tst.b	$3E(a0)
00018738 6600                       		bne.s	loc_18374
0001873A 117C 0028 003E             		move.b	#$28,$3E(a0)
00018740 303C 00AC                  		move.w	#$AC,d0
00018744 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001874A                            
0001874A                            loc_18374:
0001874A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001874E 7000                       		moveq	#0,d0
00018750 4A51                       		tst.w	(a1)
00018752 6600                       		bne.s	loc_18382
00018754 303C 0EEE                  		move.w	#$EEE,d0
00018758                            
00018758                            loc_18382:
00018758 3280                       		move.w	d0,(a1)
0001875A 5328 003E                  		subq.b	#1,$3E(a0)
0001875E 6600                       		bne.s	locret_18390
00018760 117C 000F 0020             		move.b	#$F,$20(a0)
00018766                            
00018766                            locret_18390:
00018766 4E75                       		rts	
00018768                            ; ===========================================================================
00018768                            
00018768                            loc_18392:				; XREF: loc_1833E
00018768 7064                       		moveq	#100,d0
0001876A 6100 0000                  		bsr.w	AddPoints
0001876E 117C 0004 0025             		move.b	#4,$25(a0)
00018774 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001877A 4268 0010                  		clr.w	$10(a0)
0001877E 4E75                       		rts	
00018780                            ; ===========================================================================
00018780                            
00018780                            loc_183AA:				; XREF: Obj73_ShipIndex
00018780 7000                       		moveq	#0,d0
00018782 1028 0028                  		move.b	$28(a0),d0
00018786 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001878A 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001878E 0228 0006 0028             		andi.b	#6,$28(a0)
00018794 6000 FF7E                  		bra.w	loc_1833E
00018798                            ; ===========================================================================
00018798 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001879A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001879C 0000                       		dc.w loc_183CA-off_183C2
0001879E 0000                       		dc.w Obj73_MakeLava2-off_183C2
000187A0                            ; ===========================================================================
000187A0                            
000187A0                            loc_183CA:				; XREF: off_183C2
000187A0 4A68 0010                  		tst.w	$10(a0)
000187A4 6600                       		bne.s	loc_183FE
000187A6 7040                       		moveq	#$40,d0
000187A8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000187AE 6700                       		beq.s	loc_183E6
000187B0 6500                       		bcs.s	loc_183DE
000187B2 4440                       		neg.w	d0
000187B4                            
000187B4                            loc_183DE:
000187B4 3140 0012                  		move.w	d0,$12(a0)
000187B8 6000 F4CC                  		bra.w	BossMove
000187BC                            ; ===========================================================================
000187BC                            
000187BC                            loc_183E6:
000187BC 317C 0200 0010             		move.w	#$200,$10(a0)
000187C2 317C 0100 0012             		move.w	#$100,$12(a0)
000187C8 0828 0000 0022             		btst	#0,$22(a0)
000187CE 6600                       		bne.s	loc_183FE
000187D0 4468 0010                  		neg.w	$10(a0)
000187D4                            
000187D4                            loc_183FE:
000187D4 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000187DA 6400                       		bcc.s	Obj73_MakeLava
000187DC 6100 F4A8                  		bsr.w	BossMove
000187E0 5968 0012                  		subq.w	#4,$12(a0)
000187E4                            
000187E4                            Obj73_MakeLava:
000187E4 5328 0034                  		subq.b	#1,$34(a0)
000187E8 6400                       		bcc.s	loc_1845C
000187EA 4EB9 0000 DB36             		jsr	SingleObjLoad
000187F0 6600                       		bne.s	loc_1844A
000187F2 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000187F6 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000187FC 4EB9 0000 28C6             		jsr	(RandomNumber).l
00018802 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018808 80FC 0050                  		divu.w	#$50,d0
0001880C 4840                       		swap	d0
0001880E 0640 1878                  		addi.w	#$1878,d0
00018812 3340 0008                  		move.w	d0,8(a1)
00018816 EE09                       		lsr.b	#7,d1
00018818 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001881E                            
0001881E                            loc_1844A:
0001881E 4EB9 0000 28C6             		jsr	(RandomNumber).l
00018824 0200 001F                  		andi.b	#$1F,d0
00018828 0600 0040                  		addi.b	#$40,d0
0001882C 1140 0034                  		move.b	d0,$34(a0)
00018830                            
00018830                            loc_1845C:
00018830 0828 0000 0022             		btst	#0,$22(a0)
00018836 6700                       		beq.s	loc_18474
00018838 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001883E 6D00                       		blt.s	locret_1849C
00018840 317C 1910 0030             		move.w	#$1910,$30(a0)
00018846 6000                       		bra.s	loc_18482
00018848                            ; ===========================================================================
00018848                            
00018848                            loc_18474:
00018848 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001884E 6E00                       		bgt.s	locret_1849C
00018850 317C 1830 0030             		move.w	#$1830,$30(a0)
00018856                            
00018856                            loc_18482:
00018856 4268 0010                  		clr.w	$10(a0)
0001885A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018860 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018866 6400                       		bcc.s	loc_18498
00018868 4468 0012                  		neg.w	$12(a0)
0001886C                            
0001886C                            loc_18498:
0001886C 5428 0028                  		addq.b	#2,$28(a0)
00018870                            
00018870                            locret_1849C:
00018870 4E75                       		rts	
00018872                            ; ===========================================================================
00018872                            
00018872                            Obj73_MakeLava2:			; XREF: off_183C2
00018872 6100 F412                  		bsr.w	BossMove
00018876 3028 0038                  		move.w	$38(a0),d0
0001887A 0440 022C                  		subi.w	#$22C,d0
0001887E 6E00                       		bgt.s	locret_184F4
00018880 303C 022C                  		move.w	#$22C,d0
00018884 4A68 0012                  		tst.w	$12(a0)
00018888 6700                       		beq.s	loc_184EA
0001888A 4268 0012                  		clr.w	$12(a0)
0001888E 317C 0050 003C             		move.w	#$50,$3C(a0)
00018894 0868 0000 0022             		bchg	#0,$22(a0)
0001889A 4EB9 0000 DB36             		jsr	SingleObjLoad
000188A0 6600                       		bne.s	loc_184EA
000188A2 3368 0030 0008             		move.w	$30(a0),8(a1)
000188A8 3368 0038 000C             		move.w	$38(a0),$C(a1)
000188AE 0669 0018 000C             		addi.w	#$18,$C(a1)
000188B4 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000188B8 137C 0001 0028             		move.b	#1,$28(a1)
000188BE                            
000188BE                            loc_184EA:
000188BE 5368 003C                  		subq.w	#1,$3C(a0)
000188C2 6600                       		bne.s	locret_184F4
000188C4 5428 0028                  		addq.b	#2,$28(a0)
000188C8                            
000188C8                            locret_184F4:
000188C8 4E75                       		rts	
000188CA                            ; ===========================================================================
000188CA                            
000188CA                            loc_184F6:				; XREF: Obj73_ShipIndex
000188CA 5368 003C                  		subq.w	#1,$3C(a0)
000188CE 6B00                       		bmi.s	loc_18500
000188D0 6000 F366                  		bra.w	BossDefeated
000188D4                            ; ===========================================================================
000188D4                            
000188D4                            loc_18500:
000188D4 08E8 0000 0022             		bset	#0,$22(a0)
000188DA 08A8 0007 0022             		bclr	#7,$22(a0)
000188E0 4268 0010                  		clr.w	$10(a0)
000188E4 5428 0025                  		addq.b	#2,$25(a0)
000188E8 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000188EE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000188F2 6600                       		bne.s	locret_1852A
000188F4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000188FA 4268 0012                  		clr.w	$12(a0)
000188FE                            
000188FE                            locret_1852A:
000188FE 4E75                       		rts	
00018900                            ; ===========================================================================
00018900                            
00018900                            loc_1852C:				; XREF: Obj73_ShipIndex
00018900 5268 003C                  		addq.w	#1,$3C(a0)
00018904 6700                       		beq.s	loc_18544
00018906 6A00                       		bpl.s	loc_1854E
00018908 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001890E 6400                       		bcc.s	loc_18544
00018910 0668 0018 0012             		addi.w	#$18,$12(a0)
00018916 6000                       		bra.s	loc_1857A
00018918                            ; ===========================================================================
00018918                            
00018918                            loc_18544:
00018918 4268 0012                  		clr.w	$12(a0)
0001891C 4268 003C                  		clr.w	$3C(a0)
00018920 6000                       		bra.s	loc_1857A
00018922                            ; ===========================================================================
00018922                            
00018922                            loc_1854E:
00018922 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018928 6500                       		bcs.s	loc_18566
0001892A 6700                       		beq.s	loc_1856C
0001892C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018932 6500                       		bcs.s	loc_1857A
00018934 5428 0025                  		addq.b	#2,$25(a0)
00018938 6000                       		bra.s	loc_1857A
0001893A                            ; ===========================================================================
0001893A                            
0001893A                            loc_18566:
0001893A 5168 0012                  		subq.w	#8,$12(a0)
0001893E 6000                       		bra.s	loc_1857A
00018940                            ; ===========================================================================
00018940                            
00018940                            loc_1856C:
00018940 4268 0012                  		clr.w	$12(a0)
00018944 303C 0083                  		move.w	#$83,d0
00018948 4EB9 0000 125C             		jsr	(PlaySound).l	; play MZ music
0001894E                            
0001894E                            loc_1857A:
0001894E 6100 F336                  		bsr.w	BossMove
00018952 6000 FDC0                  		bra.w	loc_1833E
00018956                            ; ===========================================================================
00018956                            
00018956                            loc_18582:				; XREF: Obj73_ShipIndex
00018956 317C 0500 0010             		move.w	#$500,$10(a0)
0001895C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018962 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018968 6400                       		bcc.s	loc_1859C
0001896A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001896E 6000                       		bra.s	loc_185A2
00018970                            ; ===========================================================================
00018970                            
00018970                            loc_1859C:
00018970 4A28 0001                  		tst.b	1(a0)
00018974 6A00                       		bpl.s	Obj73_ShipDel
00018976                            
00018976                            loc_185A2:
00018976 6100 F30E                  		bsr.w	BossMove
0001897A 6000 FD98                  		bra.w	loc_1833E
0001897E                            ; ===========================================================================
0001897E                            
0001897E                            Obj73_ShipDel:
0001897E 4EF9 0000 D6E6             		jmp	DeleteObject
00018984                            ; ===========================================================================
00018984                            
00018984                            Obj73_FaceMain:				; XREF: Obj73_Index
00018984 7000                       		moveq	#0,d0
00018986 7201                       		moveq	#1,d1
00018988 2268 0034                  		movea.l	$34(a0),a1
0001898C 1029 0025                  		move.b	$25(a1),d0
00018990 5540                       		subq.w	#2,d0
00018992 6600                       		bne.s	loc_185D2
00018994 0829 0001 0028             		btst	#1,$28(a1)
0001899A 6700                       		beq.s	loc_185DA
0001899C 4A69 0012                  		tst.w	$12(a1)
000189A0 6600                       		bne.s	loc_185DA
000189A2 7204                       		moveq	#4,d1
000189A4 6000                       		bra.s	loc_185EE
000189A6                            ; ===========================================================================
000189A6                            
000189A6                            loc_185D2:
000189A6 5500                       		subq.b	#2,d0
000189A8 6B00                       		bmi.s	loc_185DA
000189AA 720A                       		moveq	#$A,d1
000189AC 6000                       		bra.s	loc_185EE
000189AE                            ; ===========================================================================
000189AE                            
000189AE                            loc_185DA:
000189AE 4A29 0020                  		tst.b	$20(a1)
000189B2 6600                       		bne.s	loc_185E4
000189B4 7205                       		moveq	#5,d1
000189B6 6000                       		bra.s	loc_185EE
000189B8                            ; ===========================================================================
000189B8                            
000189B8                            loc_185E4:
000189B8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000189BE 6500                       		bcs.s	loc_185EE
000189C0 7204                       		moveq	#4,d1
000189C2                            
000189C2                            loc_185EE:
000189C2 1141 001C                  		move.b	d1,$1C(a0)
000189C6 5900                       		subq.b	#4,d0
000189C8 6600                       		bne.s	loc_18602
000189CA 117C 0006 001C             		move.b	#6,$1C(a0)
000189D0 4A28 0001                  		tst.b	1(a0)
000189D4 6A00                       		bpl.s	Obj73_FaceDel
000189D6                            
000189D6                            loc_18602:
000189D6 6000                       		bra.s	Obj73_Display
000189D8                            ; ===========================================================================
000189D8                            
000189D8                            Obj73_FaceDel:
000189D8 4EF9 0000 D6E6             		jmp	DeleteObject
000189DE                            ; ===========================================================================
000189DE                            
000189DE                            Obj73_FlameMain:			; XREF: Obj73_Index
000189DE 117C 0007 001C             		move.b	#7,$1C(a0)
000189E4 2268 0034                  		movea.l	$34(a0),a1
000189E8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000189EE 6D00                       		blt.s	loc_1862A
000189F0 117C 000B 001C             		move.b	#$B,$1C(a0)
000189F6 4A28 0001                  		tst.b	1(a0)
000189FA 6A00                       		bpl.s	Obj73_FlameDel
000189FC 6000                       		bra.s	loc_18636
000189FE                            ; ===========================================================================
000189FE                            
000189FE                            loc_1862A:
000189FE 4A69 0010                  		tst.w	$10(a1)
00018A02 6700                       		beq.s	loc_18636
00018A04 117C 0008 001C             		move.b	#8,$1C(a0)
00018A0A                            
00018A0A                            loc_18636:
00018A0A 6000                       		bra.s	Obj73_Display
00018A0C                            ; ===========================================================================
00018A0C                            
00018A0C                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018A0C 4EF9 0000 D6E6             		jmp	DeleteObject
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            Obj73_Display:
00018A12 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
00018A18 4EB9 0000 A7A2             		jsr	AnimateSprite
00018A1E                            
00018A1E                            loc_1864A:
00018A1E 2268 0034                  		movea.l	$34(a0),a1
00018A22 3169 0008 0008             		move.w	8(a1),8(a0)
00018A28 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018A2E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018A34 7003                       		moveq	#3,d0
00018A36 C028 0022                  		and.b	$22(a0),d0
00018A3A 0228 00FC 0001             		andi.b	#-4,1(a0)
00018A40 8128 0001                  		or.b	d0,1(a0)
00018A44 4EF9 0000 D6AA             		jmp	DisplaySprite
00018A4A                            ; ===========================================================================
00018A4A                            
00018A4A                            Obj73_TubeMain:				; XREF: Obj73_Index
00018A4A 2268 0034                  		movea.l	$34(a0),a1
00018A4E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018A54 6600                       		bne.s	loc_18688
00018A56 4A28 0001                  		tst.b	1(a0)
00018A5A 6A00                       		bpl.s	Obj73_TubeDel
00018A5C                            
00018A5C                            loc_18688:
00018A5C 217C 0001 81AE 0004        		move.l	#Map_BossItems,4(a0)
00018A64 317C 246C 0002             		move.w	#$246C,2(a0)
00018A6A 117C 0004 001A             		move.b	#4,$1A(a0)
00018A70 60AC                       		bra.s	loc_1864A
00018A72                            ; ===========================================================================
00018A72                            
00018A72                            Obj73_TubeDel:
00018A72 4EF9 0000 D6E6             		jmp	DeleteObject
00018A78                            ; ===========================================================================
00018A78                            ; ---------------------------------------------------------------------------
00018A78                            ; Object 74 - lava that	Eggman drops (MZ)
00018A78                            ; ---------------------------------------------------------------------------
00018A78                            
00018A78                            Obj74:					; XREF: Obj_Index
00018A78 7000                       		moveq	#0,d0
00018A7A 1028 0024                  		move.b	$24(a0),d0
00018A7E 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018A82 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018A86 4EF9 0000 D6AA             		jmp	DisplaySprite
00018A8C                            ; ===========================================================================
00018A8C 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018A8E 0000                       		dc.w Obj74_Action-Obj74_Index
00018A90 0000                       		dc.w loc_18886-Obj74_Index
00018A92 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018A94                            ; ===========================================================================
00018A94                            
00018A94                            Obj74_Main:				; XREF: Obj74_Index
00018A94 117C 0008 0016             		move.b	#8,$16(a0)
00018A9A 117C 0008 0017             		move.b	#8,$17(a0)
00018AA0 217C 0000 B3F4 0004        		move.l	#Map_obj14,4(a0)
00018AA8 317C 0345 0002             		move.w	#$345,2(a0)
00018AAE 117C 0004 0001             		move.b	#4,1(a0)
00018AB4 117C 0005 0018             		move.b	#5,$18(a0)
00018ABA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AC0 117C 0008 0019             		move.b	#8,$19(a0)
00018AC6 5428 0024                  		addq.b	#2,$24(a0)
00018ACA 4A28 0028                  		tst.b	$28(a0)
00018ACE 6600                       		bne.s	loc_1870A
00018AD0 117C 008B 0020             		move.b	#$8B,$20(a0)
00018AD6 5428 0024                  		addq.b	#2,$24(a0)
00018ADA 6000 0000                  		bra.w	loc_18886
00018ADE                            ; ===========================================================================
00018ADE                            
00018ADE                            loc_1870A:
00018ADE 117C 001E 0029             		move.b	#$1E,$29(a0)
00018AE4 303C 00AE                  		move.w	#$AE,d0
00018AE8 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play lava sound
00018AEE                            
00018AEE                            Obj74_Action:				; XREF: Obj74_Index
00018AEE 7000                       		moveq	#0,d0
00018AF0 1028 0025                  		move.b	$25(a0),d0
00018AF4 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018AF8 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018AFC 4EB9 0000 D684             		jsr	SpeedToPos
00018B02 43F9 0000 E56A             		lea	(Ani_obj14).l,a1
00018B08 4EB9 0000 A7A2             		jsr	AnimateSprite
00018B0E 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018B14 6200                       		bhi.s	Obj74_Delete
00018B16 4E75                       		rts	
00018B18                            ; ===========================================================================
00018B18                            
00018B18                            Obj74_Delete:
00018B18 4EF9 0000 D6E6             		jmp	DeleteObject
00018B1E                            ; ===========================================================================
00018B1E 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018B20 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018B22 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018B24 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018B26                            ; ===========================================================================
00018B26                            
00018B26                            Obj74_Drop:				; XREF: Obj74_Index2
00018B26 08E8 0001 0022             		bset	#1,$22(a0)
00018B2C 5328 0029                  		subq.b	#1,$29(a0)
00018B30 6A00                       		bpl.s	locret_18780
00018B32 117C 008B 0020             		move.b	#$8B,$20(a0)
00018B38 4228 0028                  		clr.b	$28(a0)
00018B3C 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B42 08A8 0001 0022             		bclr	#1,$22(a0)
00018B48 6100 C6BA                  		bsr.w	ObjHitFloor
00018B4C 4A41                       		tst.w	d1
00018B4E 6A00                       		bpl.s	locret_18780
00018B50 5428 0025                  		addq.b	#2,$25(a0)
00018B54                            
00018B54                            locret_18780:
00018B54 4E75                       		rts	
00018B56                            ; ===========================================================================
00018B56                            
00018B56                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018B56 5568 000C                  		subq.w	#2,$C(a0)
00018B5A 08E8 0007 0002             		bset	#7,2(a0)
00018B60 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018B66 4268 0012                  		clr.w	$12(a0)
00018B6A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B70 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B76 117C 0003 0029             		move.b	#3,$29(a0)
00018B7C 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00018B82 6600                       		bne.s	loc_187CA
00018B84 47D1                       		lea	(a1),a3
00018B86 45D0                       		lea	(a0),a2
00018B88 7003                       		moveq	#3,d0
00018B8A                            
00018B8A                            Obj74_Loop:
00018B8A 26DA                       		move.l	(a2)+,(a3)+
00018B8C 26DA                       		move.l	(a2)+,(a3)+
00018B8E 26DA                       		move.l	(a2)+,(a3)+
00018B90 26DA                       		move.l	(a2)+,(a3)+
00018B92 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018B96                            
00018B96 4469 0010                  		neg.w	$10(a1)
00018B9A 5429 0025                  		addq.b	#2,$25(a1)
00018B9E                            
00018B9E                            loc_187CA:
00018B9E 5428 0025                  		addq.b	#2,$25(a0)
00018BA2 4E75                       		rts	
00018BA4                            
00018BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BA4                            
00018BA4                            
00018BA4                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018BA4 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00018BAA 6600                       		bne.s	locret_187EE
00018BAC 3368 0008 0008             		move.w	8(a0),8(a1)
00018BB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018BB8 12BC 0074                  		move.b	#$74,(a1)
00018BBC 337C 0067 0028             		move.w	#$67,$28(a1)
00018BC2                            
00018BC2                            locret_187EE:
00018BC2 4E75                       		rts	
00018BC4                            ; End of function Obj74_Duplicate2
00018BC4                            
00018BC4                            ; ===========================================================================
00018BC4                            
00018BC4                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018BC4 6100 C63E                  		bsr.w	ObjHitFloor
00018BC8 4A41                       		tst.w	d1
00018BCA 6A00                       		bpl.s	loc_18826
00018BCC 3028 0008                  		move.w	8(a0),d0
00018BD0 0C40 1940                  		cmpi.w	#$1940,d0
00018BD4 6E00                       		bgt.s	loc_1882C
00018BD6 3228 0030                  		move.w	$30(a0),d1
00018BDA B240                       		cmp.w	d0,d1
00018BDC 6700                       		beq.s	loc_1881E
00018BDE 0240 0010                  		andi.w	#$10,d0
00018BE2 0241 0010                  		andi.w	#$10,d1
00018BE6 B240                       		cmp.w	d0,d1
00018BE8 6700                       		beq.s	loc_1881E
00018BEA 61B8                       		bsr.s	Obj74_Duplicate2
00018BEC 3168 0008 0032             		move.w	8(a0),$32(a0)
00018BF2                            
00018BF2                            loc_1881E:
00018BF2 3168 0008 0030             		move.w	8(a0),$30(a0)
00018BF8 4E75                       		rts	
00018BFA                            ; ===========================================================================
00018BFA                            
00018BFA                            loc_18826:
00018BFA 5428 0025                  		addq.b	#2,$25(a0)
00018BFE 4E75                       		rts	
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            loc_1882C:
00018C00 5428 0024                  		addq.b	#2,$24(a0)
00018C04 4E75                       		rts	
00018C06                            ; ===========================================================================
00018C06                            
00018C06                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018C06 08A8 0001 0022             		bclr	#1,$22(a0)
00018C0C 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018C12 3028 0008                  		move.w	8(a0),d0
00018C16 9068 0032                  		sub.w	$32(a0),d0
00018C1A 6A00                       		bpl.s	loc_1884A
00018C1C 4440                       		neg.w	d0
00018C1E                            
00018C1E                            loc_1884A:
00018C1E 0C40 0012                  		cmpi.w	#$12,d0
00018C22 6600                       		bne.s	loc_18856
00018C24 08A8 0007 0002             		bclr	#7,2(a0)
00018C2A                            
00018C2A                            loc_18856:
00018C2A 6100 C5D8                  		bsr.w	ObjHitFloor
00018C2E 4A41                       		tst.w	d1
00018C30 6A00                       		bpl.s	locret_1887E
00018C32 5328 0029                  		subq.b	#1,$29(a0)
00018C36 6700                       		beq.s	Obj74_Delete2
00018C38 4268 0012                  		clr.w	$12(a0)
00018C3C 3168 0032 0008             		move.w	$32(a0),8(a0)
00018C42 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C48 08E8 0007 0002             		bset	#7,2(a0)
00018C4E 5528 0025                  		subq.b	#2,$25(a0)
00018C52                            
00018C52                            locret_1887E:
00018C52 4E75                       		rts	
00018C54                            ; ===========================================================================
00018C54                            
00018C54                            Obj74_Delete2:
00018C54 4EF9 0000 D6E6             		jmp	DeleteObject
00018C5A                            ; ===========================================================================
00018C5A                            
00018C5A                            loc_18886:				; XREF: Obj74_Index
00018C5A 08E8 0007 0002             		bset	#7,2(a0)
00018C60 5328 0029                  		subq.b	#1,$29(a0)
00018C64 6600                       		bne.s	Obj74_Animate
00018C66 117C 0001 001C             		move.b	#1,$1C(a0)
00018C6C 5968 000C                  		subq.w	#4,$C(a0)
00018C70 4228 0020                  		clr.b	$20(a0)
00018C74                            
00018C74                            Obj74_Animate:
00018C74 43F9 0000 E56A             		lea	(Ani_obj14).l,a1
00018C7A 4EF9 0000 A7A2             		jmp	AnimateSprite
00018C80                            ; ===========================================================================
00018C80                            
00018C80                            Obj74_Delete3:				; XREF: Obj74_Index
00018C80 4EF9 0000 D6E6             		jmp	DeleteObject
00018C86                            ; ===========================================================================
00018C86                            
00018C86                            Obj7A_Delete:
00018C86 4EF9 0000 D6E6             		jmp	DeleteObject
00018C8C                            ; ===========================================================================
00018C8C                            ; ---------------------------------------------------------------------------
00018C8C                            ; Object 7A - Eggman (SLZ)
00018C8C                            ; ---------------------------------------------------------------------------
00018C8C                            
00018C8C                            Obj7A:					; XREF: Obj_Index
00018C8C 7000                       		moveq	#0,d0
00018C8E 1028 0024                  		move.b	$24(a0),d0
00018C92 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018C96 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018C9A                            ; ===========================================================================
00018C9A 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018C9C 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018C9E 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018CA0 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018CA2 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018CA4                            
00018CA4 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018CA7 0401 04                    		dc.b 4,	1, 4
00018CAA 0607 04                    		dc.b 6,	7, 4
00018CAD 0800 03                    		dc.b 8,	0, 3
00018CB0                            ; ===========================================================================
00018CB0                            
00018CB0                            Obj7A_Main:				; XREF: Obj7A_Index
00018CB0 317C 2188 0008             		move.w	#$2188,8(a0)
00018CB6 317C 0228 000C             		move.w	#$228,$C(a0)
00018CBC 3168 0008 0030             		move.w	8(a0),$30(a0)
00018CC2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CC8 117C 000F 0020             		move.b	#$F,$20(a0)
00018CCE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018CD4 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018CD8 2248                       		movea.l	a0,a1
00018CDA 7203                       		moveq	#3,d1
00018CDC 6000                       		bra.s	Obj7A_LoadBoss
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            Obj7A_Loop:
00018CDE 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00018CE4 6600                       		bne.s	loc_1895C
00018CE6 12BC 007A                  		move.b	#$7A,0(a1)
00018CEA 3368 0008 0008             		move.w	8(a0),8(a1)
00018CF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018CF6                            
00018CF6                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018CF6 08A8 0000 0022             		bclr	#0,$22(a0)
00018CFC 4229 0025                  		clr.b	$25(a1)
00018D00 135A 0024                  		move.b	(a2)+,$24(a1)
00018D04 135A 001C                  		move.b	(a2)+,$1C(a1)
00018D08 135A 0018                  		move.b	(a2)+,$18(a1)
00018D0C 237C 0001 80E6 0004        		move.l	#Map_Eggman,4(a1)
00018D14 337C 0400 0002             		move.w	#$400,2(a1)
00018D1A 137C 0004 0001             		move.b	#4,1(a1)
00018D20 137C 0020 0019             		move.b	#$20,$19(a1)
00018D26 2348 0034                  		move.l	a0,$34(a1)
00018D2A 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018D2E                            
00018D2E                            loc_1895C:
00018D2E 43F8 D040                  		lea	($FFFFD040).w,a1
00018D32 45E8 002A                  		lea	$2A(a0),a2
00018D36 705E                       		moveq	#$5E,d0
00018D38 723E                       		moveq	#$3E,d1
00018D3A                            
00018D3A                            loc_18968:
00018D3A B011                       		cmp.b	(a1),d0
00018D3C 6600                       		bne.s	loc_18974
00018D3E 4A29 0028                  		tst.b	$28(a1)
00018D42 6700                       		beq.s	loc_18974
00018D44 34C9                       		move.w	a1,(a2)+
00018D46                            
00018D46                            loc_18974:
00018D46 D2FC 0040                  		adda.w	#$40,a1
00018D4A 51C9 FFEE                  		dbf	d1,loc_18968
00018D4E                            
00018D4E                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018D4E 7000                       		moveq	#0,d0
00018D50 1028 0025                  		move.b	$25(a0),d0
00018D54 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018D58 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018D5C 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
00018D62 4EB9 0000 A7A2             		jsr	AnimateSprite
00018D68 7003                       		moveq	#3,d0
00018D6A C028 0022                  		and.b	$22(a0),d0
00018D6E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018D74 8128 0001                  		or.b	d0,1(a0)
00018D78 4EF9 0000 D6AA             		jmp	DisplaySprite
00018D7E                            ; ===========================================================================
00018D7E 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018D80 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018D82 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018D84 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018D86 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018D88 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018D8A 317C FF00 0010             		move.w	#-$100,$10(a0)
00018D90 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018D96 6400                       		bcc.s	loc_189CA
00018D98 5428 0025                  		addq.b	#2,$25(a0)
00018D9C                            
00018D9C                            loc_189CA:
00018D9C 6100 EEE8                  		bsr.w	BossMove
00018DA0 1028 003F                  		move.b	$3F(a0),d0
00018DA4 5428 003F                  		addq.b	#2,$3F(a0)
00018DA8 4EB9 0000 28EC             		jsr	(CalcSine).l
00018DAE EC40                       		asr.w	#6,d0
00018DB0 D068 0038                  		add.w	$38(a0),d0
00018DB4 3140 000C                  		move.w	d0,$C(a0)
00018DB8 3168 0030 0008             		move.w	$30(a0),8(a0)
00018DBE 6000                       		bra.s	loc_189FE
00018DC0                            ; ===========================================================================
00018DC0                            
00018DC0                            loc_189EE:
00018DC0 6100 EEC4                  		bsr.w	BossMove
00018DC4 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018DCA 3168 0030 0008             		move.w	$30(a0),8(a0)
00018DD0                            
00018DD0                            loc_189FE:
00018DD0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018DD6 6400                       		bcc.s	locret_18A44
00018DD8 4A28 0022                  		tst.b	$22(a0)
00018DDC 6B00                       		bmi.s	loc_18A46
00018DDE 4A28 0020                  		tst.b	$20(a0)
00018DE2 6600                       		bne.s	locret_18A44
00018DE4 4A28 003E                  		tst.b	$3E(a0)
00018DE8 6600                       		bne.s	loc_18A28
00018DEA 117C 0020 003E             		move.b	#$20,$3E(a0)
00018DF0 303C 00AC                  		move.w	#$AC,d0
00018DF4 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018DFA                            
00018DFA                            loc_18A28:
00018DFA 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018DFE 7000                       		moveq	#0,d0
00018E00 4A51                       		tst.w	(a1)
00018E02 6600                       		bne.s	loc_18A36
00018E04 303C 0EEE                  		move.w	#$EEE,d0
00018E08                            
00018E08                            loc_18A36:
00018E08 3280                       		move.w	d0,(a1)
00018E0A 5328 003E                  		subq.b	#1,$3E(a0)
00018E0E 6600                       		bne.s	locret_18A44
00018E10 117C 000F 0020             		move.b	#$F,$20(a0)
00018E16                            
00018E16                            locret_18A44:
00018E16 4E75                       		rts	
00018E18                            ; ===========================================================================
00018E18                            
00018E18                            loc_18A46:
00018E18 7064                       		moveq	#100,d0
00018E1A 6100 0000                  		bsr.w	AddPoints
00018E1E 117C 0006 0025             		move.b	#6,$25(a0)
00018E24 117C 0078 003C             		move.b	#$78,$3C(a0)
00018E2A 4268 0010                  		clr.w	$10(a0)
00018E2E 4E75                       		rts	
00018E30                            ; ===========================================================================
00018E30                            
00018E30                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018E30 3028 0030                  		move.w	$30(a0),d0
00018E34 317C 0200 0010             		move.w	#$200,$10(a0)
00018E3A 0828 0000 0022             		btst	#0,$22(a0)
00018E40 6600                       		bne.s	loc_18A7C
00018E42 4468 0010                  		neg.w	$10(a0)
00018E46 0C40 2008                  		cmpi.w	#$2008,d0
00018E4A 6E00                       		bgt.s	loc_18A88
00018E4C 6000                       		bra.s	loc_18A82
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            loc_18A7C:
00018E4E 0C40 2138                  		cmpi.w	#$2138,d0
00018E52 6D00                       		blt.s	loc_18A88
00018E54                            
00018E54                            loc_18A82:
00018E54 0868 0000 0022             		bchg	#0,$22(a0)
00018E5A                            
00018E5A                            loc_18A88:
00018E5A 3028 0008                  		move.w	8(a0),d0
00018E5E 72FF                       		moveq	#-1,d1
00018E60 7402                       		moveq	#2,d2
00018E62 45E8 002A                  		lea	$2A(a0),a2
00018E66 7828                       		moveq	#$28,d4
00018E68 4A68 0010                  		tst.w	$10(a0)
00018E6C 6A00                       		bpl.s	loc_18A9E
00018E6E 4444                       		neg.w	d4
00018E70                            
00018E70                            loc_18A9E:
00018E70 321A                       		move.w	(a2)+,d1
00018E72 2641                       		movea.l	d1,a3
00018E74 082B 0003 0022             		btst	#3,$22(a3)
00018E7A 6600                       		bne.s	loc_18AB4
00018E7C 362B 0008                  		move.w	8(a3),d3
00018E80 D644                       		add.w	d4,d3
00018E82 9640                       		sub.w	d0,d3
00018E84 6700                       		beq.s	loc_18AC0
00018E86                            
00018E86                            loc_18AB4:
00018E86 51CA FFE8                  		dbf	d2,loc_18A9E
00018E8A                            
00018E8A 1142 0028                  		move.b	d2,$28(a0)
00018E8E 6000 FF0C                  		bra.w	loc_189CA
00018E92                            ; ===========================================================================
00018E92                            
00018E92                            loc_18AC0:
00018E92 1142 0028                  		move.b	d2,$28(a0)
00018E96 5428 0025                  		addq.b	#2,$25(a0)
00018E9A 117C 0028 003C             		move.b	#$28,$3C(a0)
00018EA0 6000 FEFA                  		bra.w	loc_189CA
00018EA4                            ; ===========================================================================
00018EA4                            
00018EA4                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018EA4 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018EAA 6600                       		bne.s	loc_18B36
00018EAC 70FF                       		moveq	#-1,d0
00018EAE 1028 0028                  		move.b	$28(a0),d0
00018EB2 4880                       		ext.w	d0
00018EB4 6B00                       		bmi.s	loc_18B40
00018EB6 5540                       		subq.w	#2,d0
00018EB8 4440                       		neg.w	d0
00018EBA D040                       		add.w	d0,d0
00018EBC 43E8 002A                  		lea	$2A(a0),a1
00018EC0 3031 0000                  		move.w	(a1,d0.w),d0
00018EC4 2440                       		movea.l	d0,a2
00018EC6 43F8 D040                  		lea	($FFFFD040).w,a1
00018ECA 723E                       		moveq	#$3E,d1
00018ECC                            
00018ECC                            loc_18AFA:
00018ECC B0A9 003C                  		cmp.l	$3C(a1),d0
00018ED0 6700                       		beq.s	loc_18B40
00018ED2 D2FC 0040                  		adda.w	#$40,a1
00018ED6 51C9 FFF4                  		dbf	d1,loc_18AFA
00018EDA                            
00018EDA 2F08                       		move.l	a0,-(sp)
00018EDC 41D2                       		lea	(a2),a0
00018EDE 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00018EE4 205F                       		movea.l	(sp)+,a0
00018EE6 6600                       		bne.s	loc_18B40
00018EE8 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018EEC 3368 0008 0008             		move.w	8(a0),8(a1)
00018EF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EF8 0669 0020 000C             		addi.w	#$20,$C(a1)
00018EFE 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018F04 234A 003C                  		move.l	a2,$3C(a1)
00018F08                            
00018F08                            loc_18B36:
00018F08 5328 003C                  		subq.b	#1,$3C(a0)
00018F0C 6700                       		beq.s	loc_18B40
00018F0E 6000 FEC0                  		bra.w	loc_189FE
00018F12                            ; ===========================================================================
00018F12                            
00018F12                            loc_18B40:
00018F12 5528 0025                  		subq.b	#2,$25(a0)
00018F16 6000 FE84                  		bra.w	loc_189CA
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018F1A 5328 003C                  		subq.b	#1,$3C(a0)
00018F1E 6B00                       		bmi.s	loc_18B52
00018F20 6000 ED16                  		bra.w	BossDefeated
00018F24                            ; ===========================================================================
00018F24                            
00018F24                            loc_18B52:
00018F24 5428 0025                  		addq.b	#2,$25(a0)
00018F28 4268 0012                  		clr.w	$12(a0)
00018F2C 08E8 0000 0022             		bset	#0,$22(a0)
00018F32 08A8 0007 0022             		bclr	#7,$22(a0)
00018F38 4268 0010                  		clr.w	$10(a0)
00018F3C 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018F42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018F46 6600                       		bne.s	loc_18B7C
00018F48 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018F4E                            
00018F4E                            loc_18B7C:
00018F4E 6000 FE80                  		bra.w	loc_189FE
00018F52                            ; ===========================================================================
00018F52                            
00018F52                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018F52 5228 003C                  		addq.b	#1,$3C(a0)
00018F56 6700                       		beq.s	loc_18B90
00018F58 6A00                       		bpl.s	loc_18B96
00018F5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F60 6000                       		bra.s	loc_18BC2
00018F62                            ; ===========================================================================
00018F62                            
00018F62                            loc_18B90:
00018F62 4268 0012                  		clr.w	$12(a0)
00018F66 6000                       		bra.s	loc_18BC2
00018F68                            ; ===========================================================================
00018F68                            
00018F68                            loc_18B96:
00018F68 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018F6E 6500                       		bcs.s	loc_18BAE
00018F70 6700                       		beq.s	loc_18BB4
00018F72 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018F78 6500                       		bcs.s	loc_18BC2
00018F7A 5428 0025                  		addq.b	#2,$25(a0)
00018F7E 6000                       		bra.s	loc_18BC2
00018F80                            ; ===========================================================================
00018F80                            
00018F80                            loc_18BAE:
00018F80 5168 0012                  		subq.w	#8,$12(a0)
00018F84 6000                       		bra.s	loc_18BC2
00018F86                            ; ===========================================================================
00018F86                            
00018F86                            loc_18BB4:
00018F86 4268 0012                  		clr.w	$12(a0)
00018F8A 303C 0084                  		move.w	#$84,d0
00018F8E 4EB9 0000 125C             		jsr	(PlaySound).l	; play SLZ music
00018F94                            
00018F94                            loc_18BC2:
00018F94 6000 FE2A                  		bra.w	loc_189EE
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018F98 317C 0400 0010             		move.w	#$400,$10(a0)
00018F9E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018FA4 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018FAA 6400                       		bcc.s	loc_18BE0
00018FAC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018FB0 6000                       		bra.s	loc_18BE8
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            loc_18BE0:
00018FB2 4A28 0001                  		tst.b	1(a0)
00018FB6 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018FBA                            
00018FBA                            loc_18BE8:
00018FBA 6100 ECCA                  		bsr.w	BossMove
00018FBE 6000 FDDC                  		bra.w	loc_189CA
00018FC2                            ; ===========================================================================
00018FC2                            
00018FC2                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018FC2 7000                       		moveq	#0,d0
00018FC4 7201                       		moveq	#1,d1
00018FC6 2268 0034                  		movea.l	$34(a0),a1
00018FCA 1029 0025                  		move.b	$25(a1),d0
00018FCE 0C00 0006                  		cmpi.b	#6,d0
00018FD2 6B00                       		bmi.s	loc_18C06
00018FD4 720A                       		moveq	#$A,d1
00018FD6 6000                       		bra.s	loc_18C1A
00018FD8                            ; ===========================================================================
00018FD8                            
00018FD8                            loc_18C06:
00018FD8 4A29 0020                  		tst.b	$20(a1)
00018FDC 6600                       		bne.s	loc_18C10
00018FDE 7205                       		moveq	#5,d1
00018FE0 6000                       		bra.s	loc_18C1A
00018FE2                            ; ===========================================================================
00018FE2                            
00018FE2                            loc_18C10:
00018FE2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018FE8 6500                       		bcs.s	loc_18C1A
00018FEA 7204                       		moveq	#4,d1
00018FEC                            
00018FEC                            loc_18C1A:
00018FEC 1141 001C                  		move.b	d1,$1C(a0)
00018FF0 0C00 000A                  		cmpi.b	#$A,d0
00018FF4 6600                       		bne.s	loc_18C32
00018FF6 117C 0006 001C             		move.b	#6,$1C(a0)
00018FFC 4A28 0001                  		tst.b	1(a0)
00019000 6A00 FC84                  		bpl.w	Obj7A_Delete
00019004                            
00019004                            loc_18C32:
00019004 6000                       		bra.s	loc_18C6C
00019006                            ; ===========================================================================
00019006                            
00019006                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019006 117C 0008 001C             		move.b	#8,$1C(a0)
0001900C 2268 0034                  		movea.l	$34(a0),a1
00019010 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019016 6600                       		bne.s	loc_18C56
00019018 4A28 0001                  		tst.b	1(a0)
0001901C 6A00 FC68                  		bpl.w	Obj7A_Delete
00019020 117C 000B 001C             		move.b	#$B,$1C(a0)
00019026 6000                       		bra.s	loc_18C6C
00019028                            ; ===========================================================================
00019028                            
00019028                            loc_18C56:
00019028 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001902E 6E00                       		bgt.s	loc_18C6C
00019030 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019036 6D00                       		blt.s	loc_18C6C
00019038 117C 0007 001C             		move.b	#7,$1C(a0)
0001903E                            
0001903E                            loc_18C6C:
0001903E 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
00019044 4EB9 0000 A7A2             		jsr	AnimateSprite
0001904A                            
0001904A                            loc_18C78:
0001904A 2268 0034                  		movea.l	$34(a0),a1
0001904E 3169 0008 0008             		move.w	8(a1),8(a0)
00019054 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001905A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019060 7003                       		moveq	#3,d0
00019062 C028 0022                  		and.b	$22(a0),d0
00019066 0228 00FC 0001             		andi.b	#-4,1(a0)
0001906C 8128 0001                  		or.b	d0,1(a0)
00019070 4EF9 0000 D6AA             		jmp	DisplaySprite
00019076                            ; ===========================================================================
00019076                            
00019076                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019076 2268 0034                  		movea.l	$34(a0),a1
0001907A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019080 6600                       		bne.s	loc_18CB8
00019082 4A28 0001                  		tst.b	1(a0)
00019086 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001908A                            
0001908A                            loc_18CB8:
0001908A 217C 0001 81AE 0004        		move.l	#Map_BossItems,4(a0)
00019092 317C 246C 0002             		move.w	#$246C,2(a0)
00019098 117C 0003 001A             		move.b	#3,$1A(a0)
0001909E 60AA                       		bra.s	loc_18C78
000190A0                            ; ===========================================================================
000190A0                            ; ---------------------------------------------------------------------------
000190A0                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000190A0                            ; ---------------------------------------------------------------------------
000190A0                            
000190A0                            Obj7B:					; XREF: Obj_Index
000190A0 7000                       		moveq	#0,d0
000190A2 1028 0024                  		move.b	$24(a0),d0
000190A6 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000190AA 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000190AE 3028 0030                  		move.w	$30(a0),d0
000190B2 0240 FF80                  		andi.w	#$FF80,d0
000190B6 3238 F700                  		move.w	($FFFFF700).w,d1
000190BA 0441 0080                  		subi.w	#$80,d1
000190BE 0241 FF80                  		andi.w	#$FF80,d1
000190C2 9041                       		sub.w	d1,d0
000190C4 6B00 FBC0                  		bmi.w	Obj7A_Delete
000190C8 0C40 0280                  		cmpi.w	#$280,d0
000190CC 6200 FBB8                  		bhi.w	Obj7A_Delete
000190D0 4EF9 0000 D6AA             		jmp	DisplaySprite
000190D6                            ; ===========================================================================
000190D6 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000190D8 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000190DA 0000                       		dc.w loc_18DC6-Obj7B_Index
000190DC 0000                       		dc.w loc_18EAA-Obj7B_Index
000190DE 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000190E0 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000190E2                            ; ===========================================================================
000190E2                            
000190E2                            Obj7B_Main:				; XREF: Obj7B_Index
000190E2 217C 0001 1A86 0004        		move.l	#Map_obj5Ea,4(a0)
000190EA 317C 0518 0002             		move.w	#$518,2(a0)
000190F0 117C 0001 001A             		move.b	#1,$1A(a0)
000190F6 0028 0004 0001             		ori.b	#4,1(a0)
000190FC 117C 0004 0018             		move.b	#4,$18(a0)
00019102 117C 008B 0020             		move.b	#$8B,$20(a0)
00019108 117C 000C 0019             		move.b	#$C,$19(a0)
0001910E 2268 003C                  		movea.l	$3C(a0),a1
00019112 3169 0008 0030             		move.w	8(a1),$30(a0)
00019118 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001911E 08E8 0000 0022             		bset	#0,$22(a0)
00019124 3028 0008                  		move.w	8(a0),d0
00019128 B069 0008                  		cmp.w	8(a1),d0
0001912C 6E00                       		bgt.s	loc_18D68
0001912E 08A8 0000 0022             		bclr	#0,$22(a0)
00019134 117C 0002 003A             		move.b	#2,$3A(a0)
0001913A                            
0001913A                            loc_18D68:
0001913A 5428 0024                  		addq.b	#2,$24(a0)
0001913E                            
0001913E                            Obj7B_Fall:				; XREF: Obj7B_Index
0001913E 4EB9 0000 D658             		jsr	ObjectFall
00019144 2268 003C                  		movea.l	$3C(a0),a1
00019148 45F9 0000 0000             		lea	(word_19018).l,a2
0001914E 7000                       		moveq	#0,d0
00019150 1029 001A                  		move.b	$1A(a1),d0
00019154 3228 0008                  		move.w	8(a0),d1
00019158 9268 0030                  		sub.w	$30(a0),d1
0001915C 6400                       		bcc.s	loc_18D8E
0001915E 5440                       		addq.w	#2,d0
00019160                            
00019160                            loc_18D8E:
00019160 D040                       		add.w	d0,d0
00019162 3228 0034                  		move.w	$34(a0),d1
00019166 D272 0000                  		add.w	(a2,d0.w),d1
0001916A B268 000C                  		cmp.w	$C(a0),d1
0001916E 6E00                       		bgt.s	locret_18DC4
00019170 2268 003C                  		movea.l	$3C(a0),a1
00019174 7202                       		moveq	#2,d1
00019176 0828 0000 0022             		btst	#0,$22(a0)
0001917C 6700                       		beq.s	loc_18DAE
0001917E 7200                       		moveq	#0,d1
00019180                            
00019180                            loc_18DAE:
00019180 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019186 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001918C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019192 6000 0000                  		bra.w	loc_18FA2
00019196                            ; ===========================================================================
00019196                            
00019196                            locret_18DC4:
00019196 4E75                       		rts	
00019198                            ; ===========================================================================
00019198                            
00019198                            loc_18DC6:				; XREF: Obj7B_Index
00019198 2268 003C                  		movea.l	$3C(a0),a1
0001919C 7000                       		moveq	#0,d0
0001919E 1028 003A                  		move.b	$3A(a0),d0
000191A2 9029 003A                  		sub.b	$3A(a1),d0
000191A6 6700                       		beq.s	loc_18E2A
000191A8 6400                       		bcc.s	loc_18DDA
000191AA 4400                       		neg.b	d0
000191AC                            
000191AC                            loc_18DDA:
000191AC 323C F7E8                  		move.w	#-$818,d1
000191B0 343C FEEC                  		move.w	#-$114,d2
000191B4 0C00 0001                  		cmpi.b	#1,d0
000191B8 6700                       		beq.s	loc_18E00
000191BA 323C F6A0                  		move.w	#-$960,d1
000191BE 343C FF0C                  		move.w	#-$F4,d2
000191C2 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000191C8 6D00                       		blt.s	loc_18E00
000191CA 323C F5E0                  		move.w	#-$A20,d1
000191CE 343C FF80                  		move.w	#-$80,d2
000191D2                            
000191D2                            loc_18E00:
000191D2 3141 0012                  		move.w	d1,$12(a0)
000191D6 3142 0010                  		move.w	d2,$10(a0)
000191DA 3028 0008                  		move.w	8(a0),d0
000191DE 9068 0030                  		sub.w	$30(a0),d0
000191E2 6400                       		bcc.s	loc_18E16
000191E4 4468 0010                  		neg.w	$10(a0)
000191E8                            
000191E8                            loc_18E16:
000191E8 117C 0001 001A             		move.b	#1,$1A(a0)
000191EE 317C 0020 0028             		move.w	#$20,$28(a0)
000191F4 5428 0024                  		addq.b	#2,$24(a0)
000191F8 6000 0000                  		bra.w	loc_18EAA
000191FC                            ; ===========================================================================
000191FC                            
000191FC                            loc_18E2A:				; XREF: loc_18DC6
000191FC 45F9 0000 0000             		lea	(word_19018).l,a2
00019202 7000                       		moveq	#0,d0
00019204 1029 001A                  		move.b	$1A(a1),d0
00019208 343C 0028                  		move.w	#$28,d2
0001920C 3228 0008                  		move.w	8(a0),d1
00019210 9268 0030                  		sub.w	$30(a0),d1
00019214 6400                       		bcc.s	loc_18E48
00019216 4442                       		neg.w	d2
00019218 5440                       		addq.w	#2,d0
0001921A                            
0001921A                            loc_18E48:
0001921A D040                       		add.w	d0,d0
0001921C 3228 0034                  		move.w	$34(a0),d1
00019220 D272 0000                  		add.w	(a2,d0.w),d1
00019224 3141 000C                  		move.w	d1,$C(a0)
00019228 D468 0030                  		add.w	$30(a0),d2
0001922C 3142 0008                  		move.w	d2,8(a0)
00019230 4268 000E                  		clr.w	$E(a0)
00019234 4268 000A                  		clr.w	$A(a0)
00019238 5368 0028                  		subq.w	#1,$28(a0)
0001923C 6600                       		bne.s	loc_18E7A
0001923E 317C 0020 0028             		move.w	#$20,$28(a0)
00019244 117C 0008 0024             		move.b	#8,$24(a0)
0001924A 4E75                       		rts	
0001924C                            ; ===========================================================================
0001924C                            
0001924C                            loc_18E7A:
0001924C 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019252 6600                       		bne.s	loc_18E88
00019254 117C 0005 001F             		move.b	#5,$1F(a0)
0001925A                            
0001925A                            loc_18E88:
0001925A 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019260 6600                       		bne.s	loc_18E96
00019262 117C 0002 001F             		move.b	#2,$1F(a0)
00019268                            
00019268                            loc_18E96:
00019268 5328 001E                  		subq.b	#1,$1E(a0)
0001926C 6E00                       		bgt.s	locret_18EA8
0001926E 0868 0000 001A             		bchg	#0,$1A(a0)
00019274 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001927A                            
0001927A                            locret_18EA8:
0001927A 4E75                       		rts	
0001927C                            ; ===========================================================================
0001927C                            
0001927C                            loc_18EAA:				; XREF: Obj7B_Index
0001927C 43F8 D040                  		lea	($FFFFD040).w,a1
00019280 707A                       		moveq	#$7A,d0
00019282 7240                       		moveq	#$40,d1
00019284 743E                       		moveq	#$3E,d2
00019286                            
00019286                            loc_18EB4:
00019286 B011                       		cmp.b	(a1),d0
00019288 6700                       		beq.s	loc_18EC0
0001928A D2C1                       		adda.w	d1,a1
0001928C 51CA FFF8                  		dbf	d2,loc_18EB4
00019290                            
00019290 6000                       		bra.s	loc_18F38
00019292                            ; ===========================================================================
00019292                            
00019292                            loc_18EC0:
00019292 3029 0008                  		move.w	8(a1),d0
00019296 3229 000C                  		move.w	$C(a1),d1
0001929A 3428 0008                  		move.w	8(a0),d2
0001929E 3628 000C                  		move.w	$C(a0),d3
000192A2 45FA 0000                  		lea	byte_19022(pc),a2
000192A6 47FA 0000                  		lea	byte_19026(pc),a3
000192AA 181A                       		move.b	(a2)+,d4
000192AC 4884                       		ext.w	d4
000192AE D044                       		add.w	d4,d0
000192B0 181B                       		move.b	(a3)+,d4
000192B2 4884                       		ext.w	d4
000192B4 D444                       		add.w	d4,d2
000192B6 B440                       		cmp.w	d0,d2
000192B8 6500                       		bcs.s	loc_18F38
000192BA 181A                       		move.b	(a2)+,d4
000192BC 4884                       		ext.w	d4
000192BE D044                       		add.w	d4,d0
000192C0 181B                       		move.b	(a3)+,d4
000192C2 4884                       		ext.w	d4
000192C4 D444                       		add.w	d4,d2
000192C6 B042                       		cmp.w	d2,d0
000192C8 6500                       		bcs.s	loc_18F38
000192CA 181A                       		move.b	(a2)+,d4
000192CC 4884                       		ext.w	d4
000192CE D244                       		add.w	d4,d1
000192D0 181B                       		move.b	(a3)+,d4
000192D2 4884                       		ext.w	d4
000192D4 D644                       		add.w	d4,d3
000192D6 B641                       		cmp.w	d1,d3
000192D8 6500                       		bcs.s	loc_18F38
000192DA 181A                       		move.b	(a2)+,d4
000192DC 4884                       		ext.w	d4
000192DE D244                       		add.w	d4,d1
000192E0 181B                       		move.b	(a3)+,d4
000192E2 4884                       		ext.w	d4
000192E4 D644                       		add.w	d4,d3
000192E6 B243                       		cmp.w	d3,d1
000192E8 6500                       		bcs.s	loc_18F38
000192EA 5428 0024                  		addq.b	#2,$24(a0)
000192EE 4268 0028                  		clr.w	$28(a0)
000192F2 4229 0020                  		clr.b	$20(a1)
000192F6 5329 0021                  		subq.b	#1,$21(a1)
000192FA 6600                       		bne.s	loc_18F38
000192FC 08E9 0007 0022             		bset	#7,$22(a1)
00019302 4268 0010                  		clr.w	$10(a0)
00019306 4268 0012                  		clr.w	$12(a0)
0001930A                            
0001930A                            loc_18F38:
0001930A 4A68 0012                  		tst.w	$12(a0)
0001930E 6A00                       		bpl.s	loc_18F5C
00019310 4EB9 0000 D658             		jsr	ObjectFall
00019316 3028 0034                  		move.w	$34(a0),d0
0001931A 0440 002F                  		subi.w	#$2F,d0
0001931E B068 000C                  		cmp.w	$C(a0),d0
00019322 6E00                       		bgt.s	loc_18F58
00019324 4EB9 0000 D658             		jsr	ObjectFall
0001932A                            
0001932A                            loc_18F58:
0001932A 6000 FF20                  		bra.w	loc_18E7A
0001932E                            ; ===========================================================================
0001932E                            
0001932E                            loc_18F5C:
0001932E 4EB9 0000 D658             		jsr	ObjectFall
00019334 2268 003C                  		movea.l	$3C(a0),a1
00019338 45F9 0000 0000             		lea	(word_19018).l,a2
0001933E 7000                       		moveq	#0,d0
00019340 1029 001A                  		move.b	$1A(a1),d0
00019344 3228 0008                  		move.w	8(a0),d1
00019348 9268 0030                  		sub.w	$30(a0),d1
0001934C 6400                       		bcc.s	loc_18F7E
0001934E 5440                       		addq.w	#2,d0
00019350                            
00019350                            loc_18F7E:
00019350 D040                       		add.w	d0,d0
00019352 3228 0034                  		move.w	$34(a0),d1
00019356 D272 0000                  		add.w	(a2,d0.w),d1
0001935A B268 000C                  		cmp.w	$C(a0),d1
0001935E 6ECA                       		bgt.s	loc_18F58
00019360 2268 003C                  		movea.l	$3C(a0),a1
00019364 7202                       		moveq	#2,d1
00019366 4A68 0010                  		tst.w	$10(a0)
0001936A 6B00                       		bmi.s	loc_18F9C
0001936C 7200                       		moveq	#0,d1
0001936E                            
0001936E                            loc_18F9C:
0001936E 317C 0000 0028             		move.w	#0,$28(a0)
00019374                            
00019374                            loc_18FA2:
00019374 1341 003A                  		move.b	d1,$3A(a1)
00019378 1141 003A                  		move.b	d1,$3A(a0)
0001937C B229 001A                  		cmp.b	$1A(a1),d1
00019380 6700                       		beq.s	loc_19008
00019382 08A9 0003 0022             		bclr	#3,$22(a1)
00019388 6700                       		beq.s	loc_19008
0001938A 4229 0025                  		clr.b	$25(a1)
0001938E 137C 0002 0024             		move.b	#2,$24(a1)
00019394 45F8 D000                  		lea	($FFFFD000).w,a2
00019398 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001939E 446A 0012                  		neg.w	$12(a2)
000193A2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000193A8 6600                       		bne.s	loc_18FDC
000193AA E0EA 0012                  		asr	$12(a2)
000193AE                            
000193AE                            loc_18FDC:
000193AE 08EA 0001 0022             		bset	#1,$22(a2)
000193B4 08AA 0003 0022             		bclr	#3,$22(a2)
000193BA 422A 003C                  		clr.b	$3C(a2)
000193BE 2F08                       		move.l	a0,-(sp)
000193C0 41D2                       		lea	(a2),a0
000193C2 4EBA A0DA                  		jsr	Obj01_ChkRoll
000193C6 205F                       		movea.l	(sp)+,a0
000193C8 157C 0002 0024             		move.b	#2,$24(a2)
000193CE 303C 00CC                  		move.w	#$CC,d0
000193D2 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "spring" sound
000193D8                            
000193D8                            loc_19008:
000193D8 4268 0010                  		clr.w	$10(a0)
000193DC 4268 0012                  		clr.w	$12(a0)
000193E0 5428 0024                  		addq.b	#2,$24(a0)
000193E4 6000 FE66                  		bra.w	loc_18E7A
000193E8                            ; ===========================================================================
000193E8 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000193F2                            		even
000193F2 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000193F6                            		even
000193F6 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000193FA                            		even
000193FA                            ; ===========================================================================
000193FA                            
000193FA                            Obj7B_Explode:				; XREF: Obj7B_Index
000193FA 10BC 003F                  		move.b	#$3F,(a0)
000193FE 4228 0024                  		clr.b	$24(a0)
00019402 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019408 6700                       		beq.s	Obj7B_MakeFrag
0001940A 4E75                       		rts	
0001940C                            ; ===========================================================================
0001940C                            
0001940C                            Obj7B_MakeFrag:
0001940C 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019412 7203                       		moveq	#3,d1
00019414 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019418                            
00019418                            Obj7B_Loop:
00019418 4EB9 0000 DB36             		jsr	SingleObjLoad
0001941E 6600                       		bne.s	loc_1909A
00019420 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019424 137C 000A 0024             		move.b	#$A,$24(a1)
0001942A 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019432 137C 0003 0018             		move.b	#3,$18(a1)
00019438 337C 0518 0002             		move.w	#$518,2(a1)
0001943E 3368 0008 0008             		move.w	8(a0),8(a1)
00019444 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001944A 335A 0010                  		move.w	(a2)+,$10(a1)
0001944E 335A 0012                  		move.w	(a2)+,$12(a1)
00019452 137C 0098 0020             		move.b	#$98,$20(a1)
00019458 0029 0004 0001             		ori.b	#4,1(a1)
0001945E 08E9 0007 0001             		bset	#7,1(a1)
00019464 137C 000C 0019             		move.b	#$C,$19(a1)
0001946A                            
0001946A                            loc_1909A:
0001946A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001946E                            
0001946E 4E75                       		rts	
00019470                            ; ===========================================================================
00019470 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019474 FF60 FDC0                  		dc.w $FF60, $FDC0
00019478 0100 FCC0                  		dc.w $100, $FCC0
0001947C 00A0 FDC0                  		dc.w $A0, $FDC0
00019480                            ; ===========================================================================
00019480                            
00019480                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019480 4EB9 0000 D684             		jsr	SpeedToPos
00019486 3168 0008 0030             		move.w	8(a0),$30(a0)
0001948C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019492 0668 0018 0012             		addi.w	#$18,$12(a0)
00019498 7004                       		moveq	#4,d0
0001949A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001949E E448                       		lsr.w	#2,d0
000194A0 1140 001A                  		move.b	d0,$1A(a0)
000194A4 4A28 0001                  		tst.b	1(a0)
000194A8 6A00 F7DC                  		bpl.w	Obj7A_Delete
000194AC 4E75                       		rts	
000194AE                            ; ===========================================================================
000194AE                            ; ---------------------------------------------------------------------------
000194AE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000194AE                            ; ---------------------------------------------------------------------------
000194AE                            Map_obj7B:
000194AE                            	include "_maps\obj7B.asm"
000194AE                            ; ---------------------------------------------------------------------------
000194AE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000194AE                            ; ---------------------------------------------------------------------------
000194AE 0000                       		dc.w byte_190E2-Map_obj7B
000194B0 0000                       		dc.w byte_190E8-Map_obj7B
000194B2 01                         byte_190E2:	dc.b 1
000194B3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000194B8 01                         byte_190E8:	dc.b 1
000194B9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000194BE                            		even
000194BE                            		even
000194BE                            
000194BE                            ; ===========================================================================
000194BE                            ; ---------------------------------------------------------------------------
000194BE                            ; Object 75 - Eggman (SYZ)
000194BE                            ; ---------------------------------------------------------------------------
000194BE                            
000194BE                            Obj75:					; XREF: Obj_Index
000194BE 7000                       		moveq	#0,d0
000194C0 1028 0024                  		move.b	$24(a0),d0
000194C4 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000194C8 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000194CC                            ; ===========================================================================
000194CC 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000194CE 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000194D0 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000194D2 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000194D4 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000194D6                            
000194D6 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000194D9 0401 05                    		dc.b 4,	1, 5
000194DC 0607 05                    		dc.b 6,	7, 5
000194DF 0800 05                    		dc.b 8,	0, 5
000194E2                            ; ===========================================================================
000194E2                            
000194E2                            Obj75_Main:				; XREF: Obj75_Index
000194E2 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000194E8 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000194EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000194F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194FA 117C 000F 0020             		move.b	#$F,$20(a0)
00019500 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019506 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001950A 2248                       		movea.l	a0,a1
0001950C 7203                       		moveq	#3,d1
0001950E 6000                       		bra.s	Obj75_LoadBoss
00019510                            ; ===========================================================================
00019510                            
00019510                            Obj75_Loop:
00019510 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00019516 6600                       		bne.s	Obj75_ShipMain
00019518 12BC 0075                  		move.b	#$75,(a1)
0001951C 3368 0008 0008             		move.w	8(a0),8(a1)
00019522 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019528                            
00019528                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019528 08A8 0000 0022             		bclr	#0,$22(a0)
0001952E 4229 0025                  		clr.b	$25(a1)
00019532 135A 0024                  		move.b	(a2)+,$24(a1)
00019536 135A 001C                  		move.b	(a2)+,$1C(a1)
0001953A 135A 0018                  		move.b	(a2)+,$18(a1)
0001953E 237C 0001 80E6 0004        		move.l	#Map_Eggman,4(a1)
00019546 337C 0400 0002             		move.w	#$400,2(a1)
0001954C 137C 0004 0001             		move.b	#4,1(a1)
00019552 137C 0020 0019             		move.b	#$20,$19(a1)
00019558 2348 0034                  		move.l	a0,$34(a1)
0001955C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019560                            
00019560                            Obj75_ShipMain:				; XREF: Obj75_Index
00019560 7000                       		moveq	#0,d0
00019562 1028 0025                  		move.b	$25(a0),d0
00019566 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001956A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001956E 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
00019574 4EB9 0000 A7A2             		jsr	AnimateSprite
0001957A 7003                       		moveq	#3,d0
0001957C C028 0022                  		and.b	$22(a0),d0
00019580 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019586 8128 0001                  		or.b	d0,1(a0)
0001958A 4EF9 0000 D6AA             		jmp	DisplaySprite
00019590                            ; ===========================================================================
00019590 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019594 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019598 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001959C                            ; ===========================================================================
0001959C                            
0001959C                            loc_191CC:				; XREF: Obj75_ShipIndex
0001959C 317C FF00 0010             		move.w	#-$100,$10(a0)
000195A2 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000195A8 6400                       		bcc.s	loc_191DE
000195AA 5428 0025                  		addq.b	#2,$25(a0)
000195AE                            
000195AE                            loc_191DE:
000195AE 1028 003F                  		move.b	$3F(a0),d0
000195B2 5428 003F                  		addq.b	#2,$3F(a0)
000195B6 4EB9 0000 28EC             		jsr	(CalcSine).l
000195BC E440                       		asr.w	#2,d0
000195BE 3140 0012                  		move.w	d0,$12(a0)
000195C2                            
000195C2                            loc_191F2:
000195C2 6100 E6C2                  		bsr.w	BossMove
000195C6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000195CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000195D2                            
000195D2                            loc_19202:
000195D2 3028 0008                  		move.w	8(a0),d0
000195D6 0440 2C00                  		subi.w	#$2C00,d0
000195DA EA48                       		lsr.w	#5,d0
000195DC 1140 0034                  		move.b	d0,$34(a0)
000195E0 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000195E6 6400                       		bcc.s	locret_19256
000195E8 4A28 0022                  		tst.b	$22(a0)
000195EC 6B00                       		bmi.s	loc_19258
000195EE 4A28 0020                  		tst.b	$20(a0)
000195F2 6600                       		bne.s	locret_19256
000195F4 4A28 003E                  		tst.b	$3E(a0)
000195F8 6600                       		bne.s	loc_1923A
000195FA 117C 0020 003E             		move.b	#$20,$3E(a0)
00019600 303C 00AC                  		move.w	#$AC,d0
00019604 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001960A                            
0001960A                            loc_1923A:
0001960A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001960E 7000                       		moveq	#0,d0
00019610 4A51                       		tst.w	(a1)
00019612 6600                       		bne.s	loc_19248
00019614 303C 0EEE                  		move.w	#$EEE,d0
00019618                            
00019618                            loc_19248:
00019618 3280                       		move.w	d0,(a1)
0001961A 5328 003E                  		subq.b	#1,$3E(a0)
0001961E 6600                       		bne.s	locret_19256
00019620 117C 000F 0020             		move.b	#$F,$20(a0)
00019626                            
00019626                            locret_19256:
00019626 4E75                       		rts	
00019628                            ; ===========================================================================
00019628                            
00019628                            loc_19258:				; XREF: loc_19202
00019628 7064                       		moveq	#100,d0
0001962A 6100 0000                  		bsr.w	AddPoints
0001962E 117C 0006 0025             		move.b	#6,$25(a0)
00019634 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001963A 4268 0010                  		clr.w	$10(a0)
0001963E 4E75                       		rts	
00019640                            ; ===========================================================================
00019640                            
00019640                            loc_19270:				; XREF: Obj75_ShipIndex
00019640 3028 0030                  		move.w	$30(a0),d0
00019644 317C 0140 0010             		move.w	#$140,$10(a0)
0001964A 0828 0000 0022             		btst	#0,$22(a0)
00019650 6600                       		bne.s	loc_1928E
00019652 4468 0010                  		neg.w	$10(a0)
00019656 0C40 2C08                  		cmpi.w	#$2C08,d0
0001965A 6E00                       		bgt.s	loc_1929E
0001965C 6000                       		bra.s	loc_19294
0001965E                            ; ===========================================================================
0001965E                            
0001965E                            loc_1928E:
0001965E 0C40 2D38                  		cmpi.w	#$2D38,d0
00019662 6D00                       		blt.s	loc_1929E
00019664                            
00019664                            loc_19294:
00019664 0868 0000 0022             		bchg	#0,$22(a0)
0001966A 4228 003D                  		clr.b	$3D(a0)
0001966E                            
0001966E                            loc_1929E:
0001966E 0440 2C10                  		subi.w	#$2C10,d0
00019672 0240 001F                  		andi.w	#$1F,d0
00019676 0440 001F                  		subi.w	#$1F,d0
0001967A 6A00                       		bpl.s	loc_192AE
0001967C 4440                       		neg.w	d0
0001967E                            
0001967E                            loc_192AE:
0001967E 5340                       		subq.w	#1,d0
00019680 6E00                       		bgt.s	loc_192E8
00019682 4A28 003D                  		tst.b	$3D(a0)
00019686 6600                       		bne.s	loc_192E8
00019688 3238 D008                  		move.w	($FFFFD008).w,d1
0001968C 0441 2C00                  		subi.w	#$2C00,d1
00019690 EA41                       		asr.w	#5,d1
00019692 B228 0034                  		cmp.b	$34(a0),d1
00019696 6600                       		bne.s	loc_192E8
00019698 7000                       		moveq	#0,d0
0001969A 1028 0034                  		move.b	$34(a0),d0
0001969E EB40                       		asl.w	#5,d0
000196A0 0640 2C10                  		addi.w	#$2C10,d0
000196A4 3140 0030                  		move.w	d0,$30(a0)
000196A8 6100 0000                  		bsr.w	Obj75_FindBlocks
000196AC 5428 0025                  		addq.b	#2,$25(a0)
000196B0 4268 0028                  		clr.w	$28(a0)
000196B4 4268 0010                  		clr.w	$10(a0)
000196B8                            
000196B8                            loc_192E8:
000196B8 6000 FEF4                  		bra.w	loc_191DE
000196BC                            ; ===========================================================================
000196BC                            
000196BC                            loc_192EC:				; XREF: Obj75_ShipIndex
000196BC 7000                       		moveq	#0,d0
000196BE 1028 0028                  		move.b	$28(a0),d0
000196C2 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000196C6 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000196CA                            ; ===========================================================================
000196CA 0000                       off_192FA:	dc.w loc_19302-off_192FA
000196CC 0000                       		dc.w loc_19348-off_192FA
000196CE 0000                       		dc.w loc_1938E-off_192FA
000196D0 0000                       		dc.w loc_193D0-off_192FA
000196D2                            ; ===========================================================================
000196D2                            
000196D2                            loc_19302:				; XREF: off_192FA
000196D2 317C 0180 0012             		move.w	#$180,$12(a0)
000196D8 3028 0038                  		move.w	$38(a0),d0
000196DC 0C40 0556                  		cmpi.w	#$556,d0
000196E0 6500                       		bcs.s	loc_19344
000196E2 317C 0556 0038             		move.w	#$556,$38(a0)
000196E8 4268 003C                  		clr.w	$3C(a0)
000196EC 70FF                       		moveq	#-1,d0
000196EE 3028 0036                  		move.w	$36(a0),d0
000196F2 6700                       		beq.s	loc_1933C
000196F4 2240                       		movea.l	d0,a1
000196F6 137C 00FF 0029             		move.b	#-1,$29(a1)
000196FC 117C 00FF 0029             		move.b	#-1,$29(a0)
00019702 2348 0034                  		move.l	a0,$34(a1)
00019706 317C 0032 003C             		move.w	#$32,$3C(a0)
0001970C                            
0001970C                            loc_1933C:
0001970C 4268 0012                  		clr.w	$12(a0)
00019710 5428 0028                  		addq.b	#2,$28(a0)
00019714                            
00019714                            loc_19344:
00019714 6000 FEAC                  		bra.w	loc_191F2
00019718                            ; ===========================================================================
00019718                            
00019718                            loc_19348:				; XREF: off_192FA
00019718 5368 003C                  		subq.w	#1,$3C(a0)
0001971C 6A00                       		bpl.s	loc_19366
0001971E 5428 0028                  		addq.b	#2,$28(a0)
00019722 317C F800 0012             		move.w	#-$800,$12(a0)
00019728 4A68 0036                  		tst.w	$36(a0)
0001972C 6600                       		bne.s	loc_19362
0001972E E0E8 0012                  		asr	$12(a0)
00019732                            
00019732                            loc_19362:
00019732 7000                       		moveq	#0,d0
00019734 6000                       		bra.s	loc_1937C
00019736                            ; ===========================================================================
00019736                            
00019736                            loc_19366:
00019736 7000                       		moveq	#0,d0
00019738 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001973E 6E00                       		bgt.s	loc_1937C
00019740 7002                       		moveq	#2,d0
00019742 0828 0001 003D             		btst	#1,$3D(a0)
00019748 6700                       		beq.s	loc_1937C
0001974A 4440                       		neg.w	d0
0001974C                            
0001974C                            loc_1937C:
0001974C D068 0038                  		add.w	$38(a0),d0
00019750 3140 000C                  		move.w	d0,$C(a0)
00019754 3168 0030 0008             		move.w	$30(a0),8(a0)
0001975A 6000 FE76                  		bra.w	loc_19202
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            loc_1938E:				; XREF: off_192FA
0001975E 303C 04DA                  		move.w	#$4DA,d0
00019762 4A68 0036                  		tst.w	$36(a0)
00019766 6700                       		beq.s	loc_1939C
00019768 0440 0018                  		subi.w	#$18,d0
0001976C                            
0001976C                            loc_1939C:
0001976C B068 0038                  		cmp.w	$38(a0),d0
00019770 6D00                       		blt.s	loc_193BE
00019772 317C 0008 003C             		move.w	#8,$3C(a0)
00019778 4A68 0036                  		tst.w	$36(a0)
0001977C 6700                       		beq.s	loc_193B4
0001977E 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019784                            
00019784                            loc_193B4:
00019784 5428 0028                  		addq.b	#2,$28(a0)
00019788 4268 0012                  		clr.w	$12(a0)
0001978C 6000                       		bra.s	loc_193CC
0001978E                            ; ===========================================================================
0001978E                            
0001978E                            loc_193BE:
0001978E 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019794 6C00                       		bge.s	loc_193CC
00019796 0668 000C 0012             		addi.w	#$C,$12(a0)
0001979C                            
0001979C                            loc_193CC:
0001979C 6000 FE24                  		bra.w	loc_191F2
000197A0                            ; ===========================================================================
000197A0                            
000197A0                            loc_193D0:				; XREF: off_192FA
000197A0 5368 003C                  		subq.w	#1,$3C(a0)
000197A4 6E00                       		bgt.s	loc_19406
000197A6 6B00                       		bmi.s	loc_193EE
000197A8 70FF                       		moveq	#-1,d0
000197AA 3028 0036                  		move.w	$36(a0),d0
000197AE 6700                       		beq.s	loc_193E8
000197B0 2240                       		movea.l	d0,a1
000197B2 137C 000A 0029             		move.b	#$A,$29(a1)
000197B8                            
000197B8                            loc_193E8:
000197B8 4268 0036                  		clr.w	$36(a0)
000197BC 6000                       		bra.s	loc_19406
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            loc_193EE:
000197BE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000197C4 6600                       		bne.s	loc_19406
000197C6 4228 0029                  		clr.b	$29(a0)
000197CA 5528 0025                  		subq.b	#2,$25(a0)
000197CE 117C 00FF 003D             		move.b	#-1,$3D(a0)
000197D4 6000                       		bra.s	loc_19446
000197D6                            ; ===========================================================================
000197D6                            
000197D6                            loc_19406:
000197D6 7001                       		moveq	#1,d0
000197D8 4A68 0036                  		tst.w	$36(a0)
000197DC 6700                       		beq.s	loc_19410
000197DE 7002                       		moveq	#2,d0
000197E0                            
000197E0                            loc_19410:
000197E0 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000197E6 6700                       		beq.s	loc_19424
000197E8 6D00                       		blt.s	loc_1941C
000197EA 4440                       		neg.w	d0
000197EC                            
000197EC                            loc_1941C:
000197EC 4A68 0036                  		tst.w	$36(a0)
000197F0 D168 0038                  		add.w	d0,$38(a0)
000197F4                            
000197F4                            loc_19424:
000197F4 7000                       		moveq	#0,d0
000197F6 4A68 0036                  		tst.w	$36(a0)
000197FA 6700                       		beq.s	loc_19438
000197FC 7002                       		moveq	#2,d0
000197FE 0828 0000 003D             		btst	#0,$3D(a0)
00019804 6700                       		beq.s	loc_19438
00019806 4440                       		neg.w	d0
00019808                            
00019808                            loc_19438:
00019808 D068 0038                  		add.w	$38(a0),d0
0001980C 3140 000C                  		move.w	d0,$C(a0)
00019810 3168 0030 0008             		move.w	$30(a0),8(a0)
00019816                            
00019816                            loc_19446:
00019816 6000 FDBA                  		bra.w	loc_19202
0001981A                            
0001981A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001981A                            
0001981A                            
0001981A                            Obj75_FindBlocks:			; XREF: loc_192AE
0001981A 4268 0036                  		clr.w	$36(a0)
0001981E 43F8 D040                  		lea	($FFFFD040).w,a1
00019822 703E                       		moveq	#$3E,d0
00019824 7276                       		moveq	#$76,d1
00019826 1428 0034                  		move.b	$34(a0),d2
0001982A                            
0001982A                            Obj75_FindLoop:
0001982A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001982C 6600                       		bne.s	loc_1946A	; if not, branch
0001982E B429 0028                  		cmp.b	$28(a1),d2
00019832 6600                       		bne.s	loc_1946A
00019834 3149 0036                  		move.w	a1,$36(a0)
00019838 6000                       		bra.s	locret_19472
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            loc_1946A:
0001983A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001983E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019842                            
00019842                            locret_19472:
00019842 4E75                       		rts	
00019844                            ; End of function Obj75_FindBlocks
00019844                            
00019844                            ; ===========================================================================
00019844                            
00019844                            loc_19474:				; XREF: Obj75_ShipIndex
00019844 5368 003C                  		subq.w	#1,$3C(a0)
00019848 6B00                       		bmi.s	loc_1947E
0001984A 6000 E3EC                  		bra.w	BossDefeated
0001984E                            ; ===========================================================================
0001984E                            
0001984E                            loc_1947E:
0001984E 5428 0025                  		addq.b	#2,$25(a0)
00019852 4268 0012                  		clr.w	$12(a0)
00019856 08E8 0000 0022             		bset	#0,$22(a0)
0001985C 08A8 0007 0022             		bclr	#7,$22(a0)
00019862 4268 0010                  		clr.w	$10(a0)
00019866 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001986C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019870 6600                       		bne.s	loc_194A8
00019872 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019878                            
00019878                            loc_194A8:
00019878 6000 FD58                  		bra.w	loc_19202
0001987C                            ; ===========================================================================
0001987C                            
0001987C                            loc_194AC:				; XREF: Obj75_ShipIndex
0001987C 5268 003C                  		addq.w	#1,$3C(a0)
00019880 6700                       		beq.s	loc_194BC
00019882 6A00                       		bpl.s	loc_194C2
00019884 0668 0018 0012             		addi.w	#$18,$12(a0)
0001988A 6000                       		bra.s	loc_194EE
0001988C                            ; ===========================================================================
0001988C                            
0001988C                            loc_194BC:
0001988C 4268 0012                  		clr.w	$12(a0)
00019890 6000                       		bra.s	loc_194EE
00019892                            ; ===========================================================================
00019892                            
00019892                            loc_194C2:
00019892 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019898 6500                       		bcs.s	loc_194DA
0001989A 6700                       		beq.s	loc_194E0
0001989C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
000198A2 6500                       		bcs.s	loc_194EE
000198A4 5428 0025                  		addq.b	#2,$25(a0)
000198A8 6000                       		bra.s	loc_194EE
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_194DA:
000198AA 5168 0012                  		subq.w	#8,$12(a0)
000198AE 6000                       		bra.s	loc_194EE
000198B0                            ; ===========================================================================
000198B0                            
000198B0                            loc_194E0:
000198B0 4268 0012                  		clr.w	$12(a0)
000198B4 303C 0085                  		move.w	#$85,d0
000198B8 4EB9 0000 125C             		jsr	(PlaySound).l	; play SYZ music
000198BE                            
000198BE                            loc_194EE:
000198BE 6000 FD02                  		bra.w	loc_191F2
000198C2                            ; ===========================================================================
000198C2                            
000198C2                            loc_194F2:				; XREF: Obj75_ShipIndex
000198C2 317C 0400 0010             		move.w	#$400,$10(a0)
000198C8 317C FFC0 0012             		move.w	#-$40,$12(a0)
000198CE 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
000198D4 6400                       		bcc.s	loc_1950C
000198D6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000198DA 6000                       		bra.s	loc_19512
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            loc_1950C:
000198DC 4A28 0001                  		tst.b	1(a0)
000198E0 6A00                       		bpl.s	Obj75_ShipDelete
000198E2                            
000198E2                            loc_19512:
000198E2 6100 E3A2                  		bsr.w	BossMove
000198E6 6000 FCC6                  		bra.w	loc_191DE
000198EA                            ; ===========================================================================
000198EA                            
000198EA                            Obj75_ShipDelete:
000198EA 4EF9 0000 D6E6             		jmp	DeleteObject
000198F0                            ; ===========================================================================
000198F0                            
000198F0                            Obj75_FaceMain:				; XREF: Obj75_Index
000198F0 7201                       		moveq	#1,d1
000198F2 2268 0034                  		movea.l	$34(a0),a1
000198F6 7000                       		moveq	#0,d0
000198F8 1029 0025                  		move.b	$25(a1),d0
000198FC 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019900 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019904 1141 001C                  		move.b	d1,$1C(a0)
00019908 1010                       		move.b	(a0),d0
0001990A B011                       		cmp.b	(a1),d0
0001990C 6600                       		bne.s	Obj75_FaceDelete
0001990E 6000                       		bra.s	loc_195BE
00019910                            ; ===========================================================================
00019910                            
00019910                            Obj75_FaceDelete:
00019910 4EF9 0000 D6E6             		jmp	DeleteObject
00019916                            ; ===========================================================================
00019916 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001991A 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001991E 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019922                            ; ===========================================================================
00019922                            
00019922                            loc_19552:				; XREF: off_19546
00019922 720A                       		moveq	#$A,d1
00019924 4E75                       		rts	
00019926                            ; ===========================================================================
00019926                            
00019926                            loc_19556:				; XREF: off_19546
00019926 7206                       		moveq	#6,d1
00019928 4E75                       		rts	
0001992A                            ; ===========================================================================
0001992A                            
0001992A                            loc_1955A:				; XREF: off_19546
0001992A 7000                       		moveq	#0,d0
0001992C 1029 0028                  		move.b	$28(a1),d0
00019930 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019934 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019938                            ; ===========================================================================
00019938 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001993C 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019940                            ; ===========================================================================
00019940                            
00019940                            loc_19570:				; XREF: off_19568
00019940 6000                       		bra.s	loc_19574
00019942                            ; ===========================================================================
00019942                            
00019942                            loc_19572:				; XREF: off_19568
00019942 7206                       		moveq	#6,d1
00019944                            
00019944                            loc_19574:				; XREF: off_19546
00019944 4A29 0020                  		tst.b	$20(a1)
00019948 6600                       		bne.s	loc_1957E
0001994A 7205                       		moveq	#5,d1
0001994C 4E75                       		rts	
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            loc_1957E:
0001994E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019954 6500                       		bcs.s	locret_19588
00019956 7204                       		moveq	#4,d1
00019958                            
00019958                            locret_19588:
00019958 4E75                       		rts	
0001995A                            ; ===========================================================================
0001995A                            
0001995A                            Obj75_FlameMain:			; XREF: Obj75_Index
0001995A 117C 0007 001C             		move.b	#7,$1C(a0)
00019960 2268 0034                  		movea.l	$34(a0),a1
00019964 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001996A 6600                       		bne.s	loc_195AA
0001996C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019972 4A28 0001                  		tst.b	1(a0)
00019976 6A00                       		bpl.s	Obj75_FlameDelete
00019978 6000                       		bra.s	loc_195B6
0001997A                            ; ===========================================================================
0001997A                            
0001997A                            loc_195AA:
0001997A 4A69 0010                  		tst.w	$10(a1)
0001997E 6700                       		beq.s	loc_195B6
00019980 117C 0008 001C             		move.b	#8,$1C(a0)
00019986                            
00019986                            loc_195B6:
00019986 6000                       		bra.s	loc_195BE
00019988                            ; ===========================================================================
00019988                            
00019988                            Obj75_FlameDelete:
00019988 4EF9 0000 D6E6             		jmp	DeleteObject
0001998E                            ; ===========================================================================
0001998E                            
0001998E                            loc_195BE:
0001998E 43F9 0001 8096             		lea	(Ani_Eggman).l,a1
00019994 4EB9 0000 A7A2             		jsr	AnimateSprite
0001999A 2268 0034                  		movea.l	$34(a0),a1
0001999E 3169 0008 0008             		move.w	8(a1),8(a0)
000199A4 3169 000C 000C             		move.w	$C(a1),$C(a0)
000199AA                            
000199AA                            loc_195DA:
000199AA 1169 0022 0022             		move.b	$22(a1),$22(a0)
000199B0 7003                       		moveq	#3,d0
000199B2 C028 0022                  		and.b	$22(a0),d0
000199B6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000199BC 8128 0001                  		or.b	d0,1(a0)
000199C0 4EF9 0000 D6AA             		jmp	DisplaySprite
000199C6                            ; ===========================================================================
000199C6                            
000199C6                            Obj75_SpikeMain:			; XREF: Obj75_Index
000199C6 217C 0001 81AE 0004        		move.l	#Map_BossItems,4(a0)
000199CE 317C 246C 0002             		move.w	#$246C,2(a0)
000199D4 117C 0005 001A             		move.b	#5,$1A(a0)
000199DA 2268 0034                  		movea.l	$34(a0),a1
000199DE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000199E4 6600                       		bne.s	loc_1961C
000199E6 4A28 0001                  		tst.b	1(a0)
000199EA 6A00                       		bpl.s	Obj75_SpikeDelete
000199EC                            
000199EC                            loc_1961C:
000199EC 3169 0008 0008             		move.w	8(a1),8(a0)
000199F2 3169 000C 000C             		move.w	$C(a1),$C(a0)
000199F8 3028 003C                  		move.w	$3C(a0),d0
000199FC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019A02 6600                       		bne.s	loc_19652
00019A04 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019A0A 6700                       		beq.s	loc_1964C
00019A0C 4A29 0028                  		tst.b	$28(a1)
00019A10 6600                       		bne.s	loc_19658
00019A12 0C40 0094                  		cmpi.w	#$94,d0
00019A16 6C00                       		bge.s	loc_19658
00019A18 5E40                       		addq.w	#7,d0
00019A1A 6000                       		bra.s	loc_19658
00019A1C                            ; ===========================================================================
00019A1C                            
00019A1C                            loc_1964C:
00019A1C 4A69 003C                  		tst.w	$3C(a1)
00019A20 6A00                       		bpl.s	loc_19658
00019A22                            
00019A22                            loc_19652:
00019A22 4A40                       		tst.w	d0
00019A24 6F00                       		ble.s	loc_19658
00019A26 5B40                       		subq.w	#5,d0
00019A28                            
00019A28                            loc_19658:
00019A28 3140 003C                  		move.w	d0,$3C(a0)
00019A2C E440                       		asr.w	#2,d0
00019A2E D168 000C                  		add.w	d0,$C(a0)
00019A32 117C 0008 0019             		move.b	#8,$19(a0)
00019A38 117C 000C 0016             		move.b	#$C,$16(a0)
00019A3E 4228 0020                  		clr.b	$20(a0)
00019A42 2268 0034                  		movea.l	$34(a0),a1
00019A46 4A29 0020                  		tst.b	$20(a1)
00019A4A 6700                       		beq.s	loc_19688
00019A4C 4A29 0029                  		tst.b	$29(a1)
00019A50 6600                       		bne.s	loc_19688
00019A52 117C 0084 0020             		move.b	#$84,$20(a0)
00019A58                            
00019A58                            loc_19688:
00019A58 6000 FF50                  		bra.w	loc_195DA
00019A5C                            ; ===========================================================================
00019A5C                            
00019A5C                            Obj75_SpikeDelete:
00019A5C 4EF9 0000 D6E6             		jmp	DeleteObject
00019A62                            ; ===========================================================================
00019A62                            ; ---------------------------------------------------------------------------
00019A62                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019A62                            ; ---------------------------------------------------------------------------
00019A62                            
00019A62                            Obj76:					; XREF: Obj_Index
00019A62 7000                       		moveq	#0,d0
00019A64 1028 0024                  		move.b	$24(a0),d0
00019A68 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019A6C 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019A70                            ; ===========================================================================
00019A70 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019A72 0000                       		dc.w Obj76_Action-Obj76_Index
00019A74 0000                       		dc.w loc_19762-Obj76_Index
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            Obj76_Main:				; XREF: Obj76_Index
00019A76 7800                       		moveq	#0,d4
00019A78 3A3C 2C10                  		move.w	#$2C10,d5
00019A7C 7C09                       		moveq	#9,d6
00019A7E 43D0                       		lea	(a0),a1
00019A80 6000                       		bra.s	Obj76_MakeBlock
00019A82                            ; ===========================================================================
00019A82                            
00019A82                            Obj76_Loop:
00019A82 4EB9 0000 DB36             		jsr	SingleObjLoad
00019A88 6600                       		bne.s	Obj76_ExitLoop
00019A8A                            
00019A8A                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019A8A 12BC 0076                  		move.b	#$76,(a1)
00019A8E 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019A96 337C 4000 0002             		move.w	#$4000,2(a1)
00019A9C 137C 0004 0001             		move.b	#4,1(a1)
00019AA2 137C 0010 0019             		move.b	#$10,$19(a1)
00019AA8 137C 0010 0016             		move.b	#$10,$16(a1)
00019AAE 137C 0003 0018             		move.b	#3,$18(a1)
00019AB4 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019AB8 337C 0582 000C             		move.w	#$582,$C(a1)
00019ABE 3344 0028                  		move.w	d4,$28(a1)
00019AC2 0644 0101                  		addi.w	#$101,d4
00019AC6 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019ACA 5429 0024                  		addq.b	#2,$24(a1)
00019ACE 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019AD2                            
00019AD2                            Obj76_ExitLoop:
00019AD2 4E75                       		rts	
00019AD4                            ; ===========================================================================
00019AD4                            
00019AD4                            Obj76_Action:				; XREF: Obj76_Index
00019AD4 1028 0029                  		move.b	$29(a0),d0
00019AD8 B028 0028                  		cmp.b	$28(a0),d0
00019ADC 6700                       		beq.s	Obj76_Solid
00019ADE 4A00                       		tst.b	d0
00019AE0 6B00                       		bmi.s	loc_19718
00019AE2                            
00019AE2                            loc_19712:
00019AE2 6100 0000                  		bsr.w	Obj76_Break
00019AE6 6000                       		bra.s	Obj76_Display
00019AE8                            ; ===========================================================================
00019AE8                            
00019AE8                            loc_19718:
00019AE8 2268 0034                  		movea.l	$34(a0),a1
00019AEC 4A29 0021                  		tst.b	$21(a1)
00019AF0 67F0                       		beq.s	loc_19712
00019AF2 3169 0008 0008             		move.w	8(a1),8(a0)
00019AF8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019AFE 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019B04 B2C8                       		cmpa.w	a0,a1
00019B06 6500                       		bcs.s	Obj76_Display
00019B08 3029 0012                  		move.w	$12(a1),d0
00019B0C 48C0                       		ext.l	d0
00019B0E E080                       		asr.l	#8,d0
00019B10 D168 000C                  		add.w	d0,$C(a0)
00019B14 6000                       		bra.s	Obj76_Display
00019B16                            ; ===========================================================================
00019B16                            
00019B16                            Obj76_Solid:				; XREF: Obj76_Action
00019B16 323C 001B                  		move.w	#$1B,d1
00019B1A 343C 0010                  		move.w	#$10,d2
00019B1E 363C 0011                  		move.w	#$11,d3
00019B22 3828 0008                  		move.w	8(a0),d4
00019B26 4EB9 0000 FA7C             		jsr	SolidObject
00019B2C                            
00019B2C                            Obj76_Display:				; XREF: Obj76_Action
00019B2C 4EF9 0000 D6AA             		jmp	DisplaySprite
00019B32                            ; ===========================================================================
00019B32                            
00019B32                            loc_19762:				; XREF: Obj76_Index
00019B32 4A28 0001                  		tst.b	1(a0)
00019B36 6A00                       		bpl.s	Obj76_Delete
00019B38 4EB9 0000 D658             		jsr	ObjectFall
00019B3E 4EF9 0000 D6AA             		jmp	DisplaySprite
00019B44                            ; ===========================================================================
00019B44                            
00019B44                            Obj76_Delete:
00019B44 4EF9 0000 D6E6             		jmp	DeleteObject
00019B4A                            
00019B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B4A                            
00019B4A                            
00019B4A                            Obj76_Break:				; XREF: Obj76_Action
00019B4A 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019B4E 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019B52 7801                       		moveq	#1,d4
00019B54 7203                       		moveq	#3,d1
00019B56 7438                       		moveq	#$38,d2
00019B58 5428 0024                  		addq.b	#2,$24(a0)
00019B5C 117C 0008 0019             		move.b	#8,$19(a0)
00019B62 117C 0008 0016             		move.b	#8,$16(a0)
00019B68 43D0                       		lea	(a0),a1
00019B6A 6000                       		bra.s	Obj76_MakeFrag
00019B6C                            ; ===========================================================================
00019B6C                            
00019B6C                            Obj76_LoopFrag:
00019B6C 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00019B72 6600                       		bne.s	loc_197D4
00019B74                            
00019B74                            Obj76_MakeFrag:
00019B74 45D0                       		lea	(a0),a2
00019B76 47D1                       		lea	(a1),a3
00019B78 7603                       		moveq	#3,d3
00019B7A                            
00019B7A                            loc_197AA:
00019B7A 26DA                       		move.l	(a2)+,(a3)+
00019B7C 26DA                       		move.l	(a2)+,(a3)+
00019B7E 26DA                       		move.l	(a2)+,(a3)+
00019B80 26DA                       		move.l	(a2)+,(a3)+
00019B82 51CB FFF6                  		dbf	d3,loc_197AA
00019B86                            
00019B86 335C 0010                  		move.w	(a4)+,$10(a1)
00019B8A 335C 0012                  		move.w	(a4)+,$12(a1)
00019B8E 361D                       		move.w	(a5)+,d3
00019B90 D769 0008                  		add.w	d3,8(a1)
00019B94 361D                       		move.w	(a5)+,d3
00019B96 D769 000C                  		add.w	d3,$C(a1)
00019B9A 1344 001A                  		move.b	d4,$1A(a1)
00019B9E 5244                       		addq.w	#1,d4
00019BA0 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019BA4                            
00019BA4                            loc_197D4:
00019BA4 303C 00CB                  		move.w	#$CB,d0
00019BA8 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play smashing sound
00019BAE                            ; End of function Obj76_Break
00019BAE                            
00019BAE                            ; ===========================================================================
00019BAE FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019BB2 0180 FE00                  		dc.w $180, $FE00
00019BB6 FF00 FF00                  		dc.w $FF00, $FF00
00019BBA 0100 FF00                  		dc.w $100, $FF00
00019BBE FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019BC2 0010 0000                  		dc.w $10, 0
00019BC6 0000 0010                  		dc.w 0,	$10
00019BCA 0010 0010                  		dc.w $10, $10
00019BCE                            ; ---------------------------------------------------------------------------
00019BCE                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019BCE                            ; ---------------------------------------------------------------------------
00019BCE                            Map_obj76:
00019BCE                            	include "_maps\obj76.asm"
00019BCE                            ; ---------------------------------------------------------------------------
00019BCE                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019BCE                            ; ---------------------------------------------------------------------------
00019BCE 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019BD2 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019BD6 0000                       		dc.w byte_19826-Map_obj76
00019BD8 02                         byte_19808:	dc.b 2
00019BD9 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019BDE 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019BE3 00                         		dc.b 0
00019BE4 01                         byte_19814:	dc.b 1
00019BE5 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019BEA 01                         byte_1981A:	dc.b 1
00019BEB F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019BF0 01                         byte_19820:	dc.b 1
00019BF1 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019BF6 01                         byte_19826:	dc.b 1
00019BF7 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019BFC                            		even
00019BFC                            		even
00019BFC                            
00019BFC                            ; ===========================================================================
00019BFC                            
00019BFC                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019BFC 4EF9 0000 D6E6             		jmp	DeleteObject
00019C02                            ; ===========================================================================
00019C02                            ; ---------------------------------------------------------------------------
00019C02                            ; Object 82 - Eggman (SBZ2)
00019C02                            ; ---------------------------------------------------------------------------
00019C02                            
00019C02                            Obj82:					; XREF: Obj_Index
00019C02 7000                       		moveq	#0,d0
00019C04 1028 0024                  		move.b	$24(a0),d0
00019C08 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019C0C 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019C10                            ; ===========================================================================
00019C10 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019C12 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019C14 0000                       		dc.w Obj82_Switch-Obj82_Index
00019C16                            
00019C16 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019C19 0400 03                    		dc.b 4,	0, 3
00019C1C                            ; ===========================================================================
00019C1C                            
00019C1C                            Obj82_Main:				; XREF: Obj82_Index
00019C1C 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019C20 317C 2160 0008             		move.w	#$2160,8(a0)
00019C26 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019C2C 117C 000F 0020             		move.b	#$F,$20(a0)
00019C32 117C 0010 0021             		move.b	#$10,$21(a0)
00019C38 08A8 0000 0022             		bclr	#0,$22(a0)
00019C3E 4228 0025                  		clr.b	$25(a0)
00019C42 115A 0024                  		move.b	(a2)+,$24(a0)
00019C46 115A 001C                  		move.b	(a2)+,$1C(a0)
00019C4A 115A 0018                  		move.b	(a2)+,$18(a0)
00019C4E 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019C56 317C 0400 0002             		move.w	#$400,2(a0)
00019C5C 117C 0004 0001             		move.b	#4,1(a0)
00019C62 08E8 0007 0001             		bset	#7,1(a0)
00019C68 117C 0020 0019             		move.b	#$20,$19(a0)
00019C6E 4EB9 0000 DB4C             		jsr	SingleObjLoad2
00019C74 6600                       		bne.s	Obj82_Eggman
00019C76 2348 0034                  		move.l	a0,$34(a1)
00019C7A 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019C7E 337C 2130 0008             		move.w	#$2130,8(a1)
00019C84 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019C8A 4228 0025                  		clr.b	$25(a0)
00019C8E 135A 0024                  		move.b	(a2)+,$24(a1)
00019C92 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C96 135A 0018                  		move.b	(a2)+,$18(a1)
00019C9A 237C 0000 BF30 0004        		move.l	#Map_obj32,4(a1)
00019CA2 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019CA8 137C 0004 0001             		move.b	#4,1(a1)
00019CAE 08E9 0007 0001             		bset	#7,1(a1)
00019CB4 137C 0010 0019             		move.b	#$10,$19(a1)
00019CBA 137C 0000 001A             		move.b	#0,$1A(a1)
00019CC0                            
00019CC0                            Obj82_Eggman:				; XREF: Obj82_Index
00019CC0 7000                       		moveq	#0,d0
00019CC2 1028 0025                  		move.b	$25(a0),d0
00019CC6 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019CCA 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019CCE 43FA 0000                  		lea	Ani_obj82(pc),a1
00019CD2 4EB9 0000 A7A2             		jsr	AnimateSprite
00019CD8 4EF9 0000 D6AA             		jmp	DisplaySprite
00019CDE                            ; ===========================================================================
00019CDE 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019CE0 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019CE2 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019CE4 0000                       		dc.w loc_19934-Obj82_EggIndex
00019CE6                            ; ===========================================================================
00019CE6                            
00019CE6                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019CE6 3028 0008                  		move.w	8(a0),d0
00019CEA 9078 D008                  		sub.w	($FFFFD008).w,d0
00019CEE 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019CF2 6400                       		bcc.s	loc_19934	; if not, branch
00019CF4 5428 0025                  		addq.b	#2,$25(a0)
00019CF8 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019CFE 117C 0001 001C             		move.b	#1,$1C(a0)
00019D04                            
00019D04                            loc_19934:				; XREF: Obj82_EggIndex
00019D04 4EF9 0000 D684             		jmp	SpeedToPos
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019D0A 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019D0E 6600                       		bne.s	loc_19954	; if time remains, branch
00019D10 5428 0025                  		addq.b	#2,$25(a0)
00019D14 117C 0002 001C             		move.b	#2,$1C(a0)
00019D1A 5868 000C                  		addq.w	#4,$C(a0)
00019D1E 317C 000F 003C             		move.w	#15,$3C(a0)
00019D24                            
00019D24                            loc_19954:
00019D24 60DE                       		bra.s	loc_19934
00019D26                            ; ===========================================================================
00019D26                            
00019D26                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019D26 5368 003C                  		subq.w	#1,$3C(a0)
00019D2A 6E00                       		bgt.s	loc_199D0
00019D2C 6600                       		bne.s	loc_1996A
00019D2E 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019D34 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019D3A                            
00019D3A                            loc_1996A:
00019D3A 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019D40 6E00                       		bgt.s	loc_19976
00019D42 4268 0010                  		clr.w	$10(a0)
00019D46                            
00019D46                            loc_19976:
00019D46 0668 0024 0012             		addi.w	#$24,$12(a0)
00019D4C 4A68 0012                  		tst.w	$12(a0)
00019D50 6B00                       		bmi.s	Obj82_FindBlocks
00019D52 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019D58 6500                       		bcs.s	Obj82_FindBlocks
00019D5A 317C 5357 0028             		move.w	#$5357,$28(a0)
00019D60 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019D66 6500                       		bcs.s	Obj82_FindBlocks
00019D68 317C 059B 000C             		move.w	#$59B,$C(a0)
00019D6E 4268 0012                  		clr.w	$12(a0)
00019D72                            
00019D72                            Obj82_FindBlocks:
00019D72 3028 0010                  		move.w	$10(a0),d0
00019D76 8068 0012                  		or.w	$12(a0),d0
00019D7A 6600                       		bne.s	loc_199D0
00019D7C 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019D80 703E                       		moveq	#$3E,d0
00019D82 7240                       		moveq	#$40,d1
00019D84                            
00019D84                            Obj82_FindLoop:	
00019D84 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019D86 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019D8A 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019D8E                            
00019D8E 6600                       		bne.s	loc_199D0
00019D90 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019D96 5428 0025                  		addq.b	#2,$25(a0)
00019D9A 117C 0001 001C             		move.b	#1,$1C(a0)
00019DA0                            
00019DA0                            loc_199D0:
00019DA0 6000 FF62                  		bra.w	loc_19934
00019DA4                            ; ===========================================================================
00019DA4                            
00019DA4                            Obj82_Switch:				; XREF: Obj82_Index
00019DA4 7000                       		moveq	#0,d0
00019DA6 1028 0025                  		move.b	$25(a0),d0
00019DAA 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019DAE 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019DB2                            ; ===========================================================================
00019DB2 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019DB4 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_199E6:				; XREF: Obj82_SwIndex
00019DB6 2268 0034                  		movea.l	$34(a0),a1
00019DBA 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019DC0 6600                       		bne.s	Obj82_SwDisplay
00019DC2 117C 0001 001A             		move.b	#1,$1A(a0)
00019DC8 5428 0025                  		addq.b	#2,$25(a0)
00019DCC                            
00019DCC                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019DCC 4EF9 0000 D6AA             		jmp	DisplaySprite
00019DD2                            ; ===========================================================================
00019DD2                            Ani_obj82:
00019DD2                            	include "_anim\obj82.asm"
00019DD2                            ; ---------------------------------------------------------------------------
00019DD2                            ; Animation script - Eggman (SBZ2)
00019DD2                            ; ---------------------------------------------------------------------------
00019DD2 0000                       		dc.w byte_19A10-Ani_obj82
00019DD4 0000                       		dc.w byte_19A14-Ani_obj82
00019DD6 0000                       		dc.w byte_19A18-Ani_obj82
00019DD8 0000                       		dc.w byte_19A20-Ani_obj82
00019DDA 0000                       		dc.w byte_19A24-Ani_obj82
00019DDC 0000                       		dc.w byte_19A2A-Ani_obj82
00019DDE 0000                       		dc.w byte_19A30-Ani_obj82
00019DE0 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019DE4 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019DE8 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019DF0 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019DF4 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019DFA 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019E00 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019E04                            		even
00019E04                            		even
00019E04                            
00019E04                            ; ---------------------------------------------------------------------------
00019E04                            ; Sprite mappings - Eggman (SBZ2)
00019E04                            ; ---------------------------------------------------------------------------
00019E04                            Map_obj82:
00019E04                            	include "_maps\obj82.asm"
00019E04                            ; ---------------------------------------------------------------------------
00019E04                            ; Sprite mappings - Eggman (SBZ2)
00019E04                            ; ---------------------------------------------------------------------------
00019E04 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019E08 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019E0C 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019E10 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019E14 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019E18 0000                       		dc.w byte_19B4F-Map_obj82
00019E1A 03                         byte_19A4A:	dc.b 3
00019E1B FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019E20 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E25 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019E2A 04                         byte_19A5A:	dc.b 4
00019E2B E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019E30 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E35 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019E3A FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019E3F 00                         		dc.b 0
00019E40 04                         byte_19A70:	dc.b 4
00019E41 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019E46 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019E4B 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019E50 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019E55 00                         		dc.b 0
00019E56 04                         byte_19A86:	dc.b 4
00019E57 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019E5C F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019E61 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019E66 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019E6B 00                         		dc.b 0
00019E6C 04                         byte_19A9C:	dc.b 4
00019E6D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019E72 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019E77 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019E7C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E81 00                         		dc.b 0
00019E82 04                         byte_19AB2:	dc.b 4
00019E83 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019E88 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019E8D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E92 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019E97 00                         		dc.b 0
00019E98 07                         byte_19AC8:	dc.b 7
00019E99 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019E9E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019EA3 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019EA8 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019EAD F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019EB2 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019EB7 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019EBC 05                         byte_19AEC:	dc.b 5
00019EBD F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019EC2 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019EC7 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019ECC 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019ED1 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019ED6 06                         byte_19B06:	dc.b 6
00019ED7 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019EDC EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019EE1 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019EE6 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019EEB 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019EF0 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019EF5 00                         		dc.b 0
00019EF6 08                         byte_19B26:	dc.b 8
00019EF7 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019EFC E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019F01 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019F06 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019F0B E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019F10 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019F15 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019F1A 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019F1F 03                         byte_19B4F:	dc.b 3
00019F20 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019F25 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019F2A EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019F30 00                         		even
00019F30 00                         		even
00019F30                            
00019F30                            ; ===========================================================================
00019F30                            ; ---------------------------------------------------------------------------
00019F30                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019F30                            ; ---------------------------------------------------------------------------
00019F30                            
00019F30                            Obj83:					; XREF: Obj_Index
00019F30 7000                       		moveq	#0,d0
00019F32 1028 0024                  		move.b	$24(a0),d0
00019F36 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019F3A 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019F3E                            ; ===========================================================================
00019F3E 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019F40 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019F42 0000                       		dc.w loc_19C36-Obj83_Index
00019F44 0000                       		dc.w loc_19C62-Obj83_Index
00019F46 0000                       		dc.w loc_19C72-Obj83_Index
00019F48 0000                       		dc.w loc_19C80-Obj83_Index
00019F4A                            ; ===========================================================================
00019F4A                            
00019F4A                            Obj83_Main:				; XREF: Obj83_Index
00019F4A 317C 2080 0008             		move.w	#$2080,8(a0)
00019F50 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019F56 117C 0080 0019             		move.b	#$80,$19(a0)
00019F5C 117C 0010 0016             		move.b	#$10,$16(a0)
00019F62 117C 0004 0001             		move.b	#4,1(a0)
00019F68 08E8 0007 0001             		bset	#7,1(a0)
00019F6E 7800                       		moveq	#0,d4
00019F70 3A3C 2010                  		move.w	#$2010,d5
00019F74 7C07                       		moveq	#7,d6
00019F76 45E8 0030                  		lea	$30(a0),a2
00019F7A                            
00019F7A                            Obj83_MakeBlock:
00019F7A 4EB9 0000 DB36             		jsr	SingleObjLoad
00019F80 6600                       		bne.s	Obj83_ExitMake
00019F82 34C9                       		move.w	a1,(a2)+
00019F84 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019F88 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019F90 337C 4518 0002             		move.w	#$4518,2(a1)
00019F96 137C 0004 0001             		move.b	#4,1(a1)
00019F9C 137C 0010 0019             		move.b	#$10,$19(a1)
00019FA2 137C 0010 0016             		move.b	#$10,$16(a1)
00019FA8 137C 0003 0018             		move.b	#3,$18(a1)
00019FAE 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019FB2 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019FB8 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019FBC 137C 0008 0024             		move.b	#8,$24(a1)
00019FC2 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019FC6                            
00019FC6                            Obj83_ExitMake:
00019FC6 5428 0024                  		addq.b	#2,$24(a0)
00019FCA 4E75                       		rts	
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019FCC 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019FD2 6600                       		bne.s	Obj83_Solid	; if not, branch
00019FD4 4228 001A                  		clr.b	$1A(a0)
00019FD8 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019FDC                            
00019FDC                            Obj83_Solid:
00019FDC 7000                       		moveq	#0,d0
00019FDE 1028 001A                  		move.b	$1A(a0),d0
00019FE2 4400                       		neg.b	d0
00019FE4 4880                       		ext.w	d0
00019FE6 5040                       		addq.w	#8,d0
00019FE8 E940                       		asl.w	#4,d0
00019FEA 383C 2100                  		move.w	#$2100,d4
00019FEE 9840                       		sub.w	d0,d4
00019FF0 1140 0019                  		move.b	d0,$19(a0)
00019FF4 3144 0008                  		move.w	d4,8(a0)
00019FF8 720B                       		moveq	#$B,d1
00019FFA D240                       		add.w	d0,d1
00019FFC 7410                       		moveq	#$10,d2
00019FFE 7611                       		moveq	#$11,d3
0001A000 4EF9 0000 FA7C             		jmp	SolidObject
0001A006                            ; ===========================================================================
0001A006                            
0001A006                            loc_19C36:				; XREF: Obj83_Index
0001A006 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A00C 6400                       		bcc.s	Obj83_Solid2
0001A00E 70FF                       		moveq	#-1,d0
0001A010 1028 001A                  		move.b	$1A(a0),d0
0001A014 4880                       		ext.w	d0
0001A016 D040                       		add.w	d0,d0
0001A018 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A01C 2240                       		movea.l	d0,a1
0001A01E 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A024 5228 001A                  		addq.b	#1,$1A(a0)
0001A028 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A02E 6700                       		beq.s	loc_19C62
0001A030                            
0001A030                            Obj83_Solid2:
0001A030 60AA                       		bra.s	Obj83_Solid
0001A032                            ; ===========================================================================
0001A032                            
0001A032                            loc_19C62:				; XREF: Obj83_Index
0001A032 08A8 0003 0022             		bclr	#3,$22(a0)
0001A038 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A03E 6000 FBBC                  		bra.w	loc_1982C
0001A042                            ; ===========================================================================
0001A042                            
0001A042                            loc_19C72:				; XREF: Obj83_Index
0001A042 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A048 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A04A 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            loc_19C80:				; XREF: Obj83_Index
0001A050 4A28 0001                  		tst.b	1(a0)
0001A054 6A00 FBA6                  		bpl.w	loc_1982C
0001A058 4EB9 0000 D658             		jsr	ObjectFall
0001A05E 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A064                            ; ===========================================================================
0001A064                            
0001A064                            Obj83_Break:				; XREF: loc_19C72
0001A064 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A068 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A06C 7801                       		moveq	#1,d4
0001A06E 7203                       		moveq	#3,d1
0001A070 7438                       		moveq	#$38,d2
0001A072 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001A078 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001A07E 5428 0024                  		addq.b	#2,$24(a0)
0001A082 117C 0008 0019             		move.b	#8,$19(a0)
0001A088 117C 0008 0016             		move.b	#8,$16(a0)
0001A08E 43D0                       		lea	(a0),a1
0001A090 6000                       		bra.s	Obj83_MakeFrag
0001A092                            ; ===========================================================================
0001A092                            
0001A092                            Obj83_LoopFrag:
0001A092 4EB9 0000 DB4C             		jsr	SingleObjLoad2
0001A098 6600                       		bne.s	Obj83_BreakSnd
0001A09A                            
0001A09A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A09A 45D0                       		lea	(a0),a2
0001A09C 47D1                       		lea	(a1),a3
0001A09E 7603                       		moveq	#3,d3
0001A0A0                            
0001A0A0                            loc_19CC4:
0001A0A0 26DA                       		move.l	(a2)+,(a3)+
0001A0A2 26DA                       		move.l	(a2)+,(a3)+
0001A0A4 26DA                       		move.l	(a2)+,(a3)+
0001A0A6 26DA                       		move.l	(a2)+,(a3)+
0001A0A8 51CB FFF6                  		dbf	d3,loc_19CC4
0001A0AC                            
0001A0AC 335C 0012                  		move.w	(a4)+,$12(a1)
0001A0B0 361D                       		move.w	(a5)+,d3
0001A0B2 D769 0008                  		add.w	d3,8(a1)
0001A0B6 361D                       		move.w	(a5)+,d3
0001A0B8 D769 000C                  		add.w	d3,$C(a1)
0001A0BC 1344 001A                  		move.b	d4,$1A(a1)
0001A0C0 5244                       		addq.w	#1,d4
0001A0C2 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A0C6                            
0001A0C6                            Obj83_BreakSnd:
0001A0C6 303C 00CB                  		move.w	#$CB,d0
0001A0CA 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A0D0 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A0D6                            ; ===========================================================================
0001A0D6 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A0DA 0120 00C0                  		dc.w $120, $C0
0001A0DE FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A0E2 0010 0000                  		dc.w $10, 0
0001A0E6 0000 0010                  		dc.w 0,	$10
0001A0EA 0010 0010                  		dc.w $10, $10
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            Map_obj83:
0001A0EE                            	include "_maps\obj83.asm"
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A0F2 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A0F6 0000                       		dc.w byte_19D46-Map_obj83
0001A0F8 01                         byte_19D1C:	dc.b 1
0001A0F9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A0FE 02                         byte_19D22:	dc.b 2
0001A0FF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A104 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A109 00                         		dc.b 0
0001A10A 02                         byte_19D2E:	dc.b 2
0001A10B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A110 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A115 00                         		dc.b 0
0001A116 02                         byte_19D3A:	dc.b 2
0001A117 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A11C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A121 00                         		dc.b 0
0001A122 02                         byte_19D46:	dc.b 2
0001A123 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A128 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A12E 00                         		even
0001A12E 00                         		even
0001A12E                            
0001A12E                            ; ===========================================================================
0001A12E                            ; ---------------------------------------------------------------------------
0001A12E                            ; Object 85 - Eggman (FZ)
0001A12E                            ; ---------------------------------------------------------------------------
0001A12E                            
0001A12E                            Obj85_Delete:
0001A12E 4EF9 0000 D6E6             		jmp	DeleteObject
0001A134                            ; ===========================================================================
0001A134                            
0001A134                            Obj85:					; XREF: Obj_Index
0001A134 7000                       		moveq	#0,d0
0001A136 1028 0024                  		move.b	$24(a0),d0
0001A13A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A13E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A142                            ; ===========================================================================
0001A142 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A144 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A146 0000                       		dc.w loc_1A38E-Obj85_Index
0001A148 0000                       		dc.w loc_1A346-Obj85_Index
0001A14A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A14C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A14E 0000                       		dc.w loc_1A264-Obj85_Index
0001A150                            
0001A150 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A156 0001 9E04                  		dc.l Map_obj82		; mappings pointer
0001A15A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A160 0000 0000                  		dc.l Map_obj84
0001A164 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A16A 0000 0000                  		dc.l Map_FZBoss
0001A16E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A174 0001 9E04                  		dc.l Map_obj82
0001A178 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A17E 0001 80E6                  		dc.l Map_Eggman
0001A182 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A188 0001 80E6                  		dc.l Map_Eggman
0001A18C                            
0001A18C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A191 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A196 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A19B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A1A0 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A1A5 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A1AA                            ; ===========================================================================
0001A1AA                            
0001A1AA                            Obj85_Main:				; XREF: Obj85_Index
0001A1AA 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A1AE 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A1B2 2248                       		movea.l	a0,a1
0001A1B4 7205                       		moveq	#5,d1
0001A1B6 6000                       		bra.s	Obj85_LoadBoss
0001A1B8                            ; ===========================================================================
0001A1B8                            
0001A1B8                            Obj85_Loop:
0001A1B8 4EB9 0000 DB4C             		jsr	SingleObjLoad2
0001A1BE 6600                       		bne.s	loc_19E20
0001A1C0                            
0001A1C0                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A1C0 12BC 0085                  		move.b	#$85,(a1)
0001A1C4 335A 0008                  		move.w	(a2)+,8(a1)
0001A1C8 335A 000C                  		move.w	(a2)+,$C(a1)
0001A1CC 335A 0002                  		move.w	(a2)+,2(a1)
0001A1D0 235A 0004                  		move.l	(a2)+,4(a1)
0001A1D4 135B 0024                  		move.b	(a3)+,$24(a1)
0001A1D8 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A1DC 135B 0018                  		move.b	(a3)+,$18(a1)
0001A1E0 135B 0017                  		move.b	(a3)+,$17(a1)
0001A1E4 135B 0016                  		move.b	(a3)+,$16(a1)
0001A1E8 137C 0004 0001             		move.b	#4,1(a1)
0001A1EE 08E8 0007 0001             		bset	#7,1(a0)
0001A1F4 2348 0034                  		move.l	a0,$34(a1)
0001A1F8 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A1FC                            
0001A1FC                            loc_19E20:
0001A1FC 45E8 0036                  		lea	$36(a0),a2
0001A200 4EB9 0000 DB36             		jsr	SingleObjLoad
0001A206 6600                       		bne.s	loc_19E5A
0001A208 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A20C 3489                       		move.w	a1,(a2)
0001A20E 2348 0034                  		move.l	a0,$34(a1)
0001A212 45E8 0038                  		lea	$38(a0),a2
0001A216 7400                       		moveq	#0,d2
0001A218 7203                       		moveq	#3,d1
0001A21A                            
0001A21A                            loc_19E3E:
0001A21A 4EB9 0000 DB4C             		jsr	SingleObjLoad2
0001A220 6600                       		bne.s	loc_19E5A
0001A222 34C9                       		move.w	a1,(a2)+
0001A224 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A228 2348 0034                  		move.l	a0,$34(a1)
0001A22C 1342 0028                  		move.b	d2,$28(a1)
0001A230 5442                       		addq.w	#2,d2
0001A232 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A236                            
0001A236                            loc_19E5A:
0001A236 317C 0000 0034             		move.w	#0,$34(a0)
0001A23C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A242 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A248                            
0001A248                            Obj85_Eggman:				; XREF: Obj85_Index
0001A248 7000                       		moveq	#0,d0
0001A24A 1028 0034                  		move.b	$34(a0),d0
0001A24E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A252 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A256 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A25C                            ; ===========================================================================
0001A25C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A260 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A264 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A268 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A26C                            ; ===========================================================================
0001A26C                            
0001A26C                            loc_19E90:				; XREF: off_19E80
0001A26C 4AB8 F680                  		tst.l	($FFFFF680).w
0001A270 6600                       		bne.s	loc_19EA2
0001A272 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A278 6500                       		bcs.s	loc_19EA2
0001A27A 5428 0034                  		addq.b	#2,$34(a0)
0001A27E                            
0001A27E                            loc_19EA2:
0001A27E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A282 4E75                       		rts	
0001A284                            ; ===========================================================================
0001A284                            
0001A284                            loc_19EA8:				; XREF: off_19E80
0001A284 4A68 0030                  		tst.w	$30(a0)
0001A288 6A00                       		bpl.s	loc_19F10
0001A28A 4268 0030                  		clr.w	$30(a0)
0001A28E 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001A294 0240 000C                  		andi.w	#$C,d0
0001A298 3200                       		move.w	d0,d1
0001A29A 5441                       		addq.w	#2,d1
0001A29C 4A80                       		tst.l	d0
0001A29E 6A00                       		bpl.s	loc_19EC6
0001A2A0 C141                       		exg	d1,d0
0001A2A2                            
0001A2A2                            loc_19EC6:
0001A2A2 43FA 0000                  		lea	word_19FD6(pc),a1
0001A2A6 3031 0000                  		move.w	(a1,d0.w),d0
0001A2AA 3231 1000                  		move.w	(a1,d1.w),d1
0001A2AE 3140 0030                  		move.w	d0,$30(a0)
0001A2B2 74FF                       		moveq	#-1,d2
0001A2B4 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A2B8 2242                       		movea.l	d2,a1
0001A2BA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A2C0 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A2C6 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A2CA 2242                       		movea.l	d2,a1
0001A2CC 137C 0001 0029             		move.b	#1,$29(a1)
0001A2D2 337C 0000 0030             		move.w	#0,$30(a1)
0001A2D8 317C 0001 0032             		move.w	#1,$32(a0)
0001A2DE 4228 0035                  		clr.b	$35(a0)
0001A2E2 303C 00B7                  		move.w	#$B7,d0
0001A2E6 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A2EC                            
0001A2EC                            loc_19F10:
0001A2EC 4A68 0032                  		tst.w	$32(a0)
0001A2F0 6B00 0000                  		bmi.w	loc_19FA6
0001A2F4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2FA 3038 D008                  		move.w	($FFFFD008).w,d0
0001A2FE 9068 0008                  		sub.w	8(a0),d0
0001A302 6500                       		bcs.s	loc_19F2E
0001A304 08E8 0000 0022             		bset	#0,$22(a0)
0001A30A                            
0001A30A                            loc_19F2E:
0001A30A 323C 002B                  		move.w	#$2B,d1
0001A30E 343C 0014                  		move.w	#$14,d2
0001A312 363C 0014                  		move.w	#$14,d3
0001A316 3828 0008                  		move.w	8(a0),d4
0001A31A 4EB9 0000 FA7C             		jsr	SolidObject
0001A320 4A44                       		tst.w	d4
0001A322 6E00                       		bgt.s	loc_19F50
0001A324                            
0001A324                            loc_19F48:
0001A324 4A28 0035                  		tst.b	$35(a0)
0001A328 6600                       		bne.s	loc_19F88
0001A32A 6000                       		bra.s	loc_19F96
0001A32C                            ; ===========================================================================
0001A32C                            
0001A32C                            loc_19F50:
0001A32C 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A330 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A336 66EC                       		bne.s	loc_19F48
0001A338 303C 0300                  		move.w	#$300,d0
0001A33C 0828 0000 0022             		btst	#0,$22(a0)
0001A342 6600                       		bne.s	loc_19F6A
0001A344 4440                       		neg.w	d0
0001A346                            
0001A346                            loc_19F6A:
0001A346 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A34A 4A28 0035                  		tst.b	$35(a0)
0001A34E 6600                       		bne.s	loc_19F88
0001A350 5328 0021                  		subq.b	#1,$21(a0)
0001A354 117C 0064 0035             		move.b	#$64,$35(a0)
0001A35A 303C 00AC                  		move.w	#$AC,d0
0001A35E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A364                            
0001A364                            loc_19F88:
0001A364 5328 0035                  		subq.b	#1,$35(a0)
0001A368 6700                       		beq.s	loc_19F96
0001A36A 117C 0003 001C             		move.b	#3,$1C(a0)
0001A370 6000                       		bra.s	loc_19F9C
0001A372                            ; ===========================================================================
0001A372                            
0001A372                            loc_19F96:
0001A372 117C 0001 001C             		move.b	#1,$1C(a0)
0001A378                            
0001A378                            loc_19F9C:
0001A378 43FA FA58                  		lea	Ani_obj82(pc),a1
0001A37C 4EF9 0000 A7A2             		jmp	AnimateSprite
0001A382                            ; ===========================================================================
0001A382                            
0001A382                            loc_19FA6:
0001A382 4A28 0021                  		tst.b	$21(a0)
0001A386 6700                       		beq.s	loc_19FBC
0001A388 5428 0034                  		addq.b	#2,$34(a0)
0001A38C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A392 4268 0032                  		clr.w	$32(a0)
0001A396 4E75                       		rts	
0001A398                            ; ===========================================================================
0001A398                            
0001A398                            loc_19FBC:
0001A398 117C 0006 0034             		move.b	#6,$34(a0)
0001A39E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A3A4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A3AA 117C 0014 0016             		move.b	#$14,$16(a0)
0001A3B0 4E75                       		rts	
0001A3B2                            ; ===========================================================================
0001A3B2 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A3C2                            ; ===========================================================================
0001A3C2                            
0001A3C2                            loc_19FE6:				; XREF: off_19E80
0001A3C2 70FF                       		moveq	#-1,d0
0001A3C4 3028 0036                  		move.w	$36(a0),d0
0001A3C8 2240                       		movea.l	d0,a1
0001A3CA 4A68 0030                  		tst.w	$30(a0)
0001A3CE 6A00                       		bpl.s	loc_1A000
0001A3D0 4268 0030                  		clr.w	$30(a0)
0001A3D4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A3DA 6100                       		bsr.s	loc_1A020
0001A3DC                            
0001A3DC                            loc_1A000:
0001A3DC 700F                       		moveq	#$F,d0
0001A3DE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A3E2 6600                       		bne.s	loc_1A00A
0001A3E4 6100                       		bsr.s	loc_1A020
0001A3E6                            
0001A3E6                            loc_1A00A:
0001A3E6 4A68 0032                  		tst.w	$32(a0)
0001A3EA 6700                       		beq.s	locret_1A01E
0001A3EC 5528 0034                  		subq.b	#2,$34(a0)
0001A3F0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A3F6 4268 0032                  		clr.w	$32(a0)
0001A3FA                            
0001A3FA                            locret_1A01E:
0001A3FA 4E75                       		rts	
0001A3FC                            ; ===========================================================================
0001A3FC                            
0001A3FC                            loc_1A020:
0001A3FC 303C 00B1                  		move.w	#$B1,d0
0001A400 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A406                            ; ===========================================================================
0001A406                            
0001A406                            loc_1A02A:				; XREF: off_19E80
0001A406 117C 0030 0017             		move.b	#$30,$17(a0)
0001A40C 08E8 0000 0022             		bset	#0,$22(a0)
0001A412 4EB9 0000 D684             		jsr	SpeedToPos
0001A418 117C 0006 001A             		move.b	#6,$1A(a0)
0001A41E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A424 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A42A 6500                       		bcs.s	loc_1A070
0001A42C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A432 5428 0034                  		addq.b	#2,$34(a0)
0001A436 117C 0020 0017             		move.b	#$20,$17(a0)
0001A43C 317C 0100 0010             		move.w	#$100,$10(a0)
0001A442 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A448 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A44C                            
0001A44C                            loc_1A070:
0001A44C 6000 0000                  		bra.w	loc_1A166
0001A450                            ; ===========================================================================
0001A450                            
0001A450                            loc_1A074:				; XREF: off_19E80
0001A450 08E8 0000 0022             		bset	#0,$22(a0)
0001A456 117C 0004 001C             		move.b	#4,$1C(a0)
0001A45C 4EB9 0000 D684             		jsr	SpeedToPos
0001A462 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A468 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A46E 6500                       		bcs.s	loc_1A09A
0001A470 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A476                            
0001A476                            loc_1A09A:
0001A476 317C 0400 0010             		move.w	#$400,$10(a0)
0001A47C 3028 0008                  		move.w	8(a0),d0
0001A480 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A484 6A00                       		bpl.s	loc_1A0B4
0001A486 317C 0500 0010             		move.w	#$500,$10(a0)
0001A48C 6000 0000                  		bra.w	loc_1A0F2
0001A490                            ; ===========================================================================
0001A490                            
0001A490                            loc_1A0B4:
0001A490 0440 0070                  		subi.w	#$70,d0
0001A494 6500                       		bcs.s	loc_1A0F2
0001A496 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A49C 5140                       		subq.w	#8,d0
0001A49E 6500                       		bcs.s	loc_1A0F2
0001A4A0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A4A6 5140                       		subq.w	#8,d0
0001A4A8 6500                       		bcs.s	loc_1A0F2
0001A4AA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A4B0 5140                       		subq.w	#8,d0
0001A4B2 6500                       		bcs.s	loc_1A0F2
0001A4B4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A4BA 5140                       		subq.w	#8,d0
0001A4BC 6500                       		bcs.s	loc_1A0F2
0001A4BE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A4C4 0440 0038                  		subi.w	#$38,d0
0001A4C8 6500                       		bcs.s	loc_1A0F2
0001A4CA 4268 0010                  		clr.w	$10(a0)
0001A4CE                            
0001A4CE                            loc_1A0F2:
0001A4CE 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A4D4 6500                       		bcs.s	loc_1A110
0001A4D6 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A4DC 317C 0240 0010             		move.w	#$240,$10(a0)
0001A4E2 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A4E8 5428 0034                  		addq.b	#2,$34(a0)
0001A4EC                            
0001A4EC                            loc_1A110:
0001A4EC 6000                       		bra.s	loc_1A15C
0001A4EE                            ; ===========================================================================
0001A4EE                            
0001A4EE                            loc_1A112:				; XREF: off_19E80
0001A4EE 4EB9 0000 D684             		jsr	SpeedToPos
0001A4F4 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A4FA 6500                       		bcs.s	loc_1A124
0001A4FC 4268 0010                  		clr.w	$10(a0)
0001A500                            
0001A500                            loc_1A124:
0001A500 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A506 4A68 0012                  		tst.w	$12(a0)
0001A50A 6B00                       		bmi.s	loc_1A142
0001A50C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A512 6500                       		bcs.s	loc_1A142
0001A514 317C 0592 000C             		move.w	#$592,$C(a0)
0001A51A 4268 0012                  		clr.w	$12(a0)
0001A51E                            
0001A51E                            loc_1A142:
0001A51E 3028 0010                  		move.w	$10(a0),d0
0001A522 8068 0012                  		or.w	$12(a0),d0
0001A526 6600                       		bne.s	loc_1A15C
0001A528 5428 0034                  		addq.b	#2,$34(a0)
0001A52C 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A532 117C 0001 0021             		move.b	#1,$21(a0)
0001A538                            
0001A538                            loc_1A15C:
0001A538 43FA F898                  		lea	Ani_obj82(pc),a1
0001A53C 4EB9 0000 A7A2             		jsr	AnimateSprite
0001A542                            
0001A542                            loc_1A166:
0001A542 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A548 6C00                       		bge.s	loc_1A172
0001A54A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A54E                            
0001A54E                            loc_1A172:
0001A54E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A554 6C00                       		bge.s	locret_1A190
0001A556 323C 001B                  		move.w	#$1B,d1
0001A55A 343C 0070                  		move.w	#$70,d2
0001A55E 363C 0071                  		move.w	#$71,d3
0001A562 3828 0008                  		move.w	8(a0),d4
0001A566 4EF9 0000 FA7C             		jmp	SolidObject
0001A56C                            ; ===========================================================================
0001A56C                            
0001A56C                            locret_1A190:
0001A56C 4E75                       		rts	
0001A56E                            ; ===========================================================================
0001A56E                            
0001A56E                            loc_1A192:				; XREF: off_19E80
0001A56E 217C 0001 80E6 0004        		move.l	#Map_Eggman,4(a0)
0001A576 317C 0400 0002             		move.w	#$400,2(a0)
0001A57C 117C 0000 001C             		move.b	#0,$1C(a0)
0001A582 08E8 0000 0022             		bset	#0,$22(a0)
0001A588 4EB9 0000 D684             		jsr	SpeedToPos
0001A58E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A594 6400                       		bcc.s	loc_1A1D0
0001A596 317C 0180 0010             		move.w	#$180,$10(a0)
0001A59C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A5A2 117C 000F 0020             		move.b	#$F,$20(a0)
0001A5A8 5428 0034                  		addq.b	#2,$34(a0)
0001A5AC                            
0001A5AC                            loc_1A1D0:
0001A5AC 6000 FF8A                  		bra.w	loc_1A15C
0001A5B0                            ; ===========================================================================
0001A5B0                            
0001A5B0                            loc_1A1D4:				; XREF: off_19E80
0001A5B0 08E8 0000 0022             		bset	#0,$22(a0)
0001A5B6 4EB9 0000 D684             		jsr	SpeedToPos
0001A5BC 4A68 0030                  		tst.w	$30(a0)
0001A5C0 6600                       		bne.s	loc_1A1FC
0001A5C2 4A28 0020                  		tst.b	$20(a0)
0001A5C6 6600                       		bne.s	loc_1A216
0001A5C8 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A5CE 303C 00AC                  		move.w	#$AC,d0
0001A5D2 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A5D8                            
0001A5D8                            loc_1A1FC:
0001A5D8 5368 0030                  		subq.w	#1,$30(a0)
0001A5DC 6600                       		bne.s	loc_1A216
0001A5DE 4A28 0022                  		tst.b	$22(a0)
0001A5E2 6A00                       		bpl.s	loc_1A210
0001A5E4 317C 0060 0012             		move.w	#$60,$12(a0)
0001A5EA 6000                       		bra.s	loc_1A216
0001A5EC                            ; ===========================================================================
0001A5EC                            
0001A5EC                            loc_1A210:
0001A5EC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A5F2                            
0001A5F2                            loc_1A216:
0001A5F2 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A5F8 6D00                       		blt.s	loc_1A23A
0001A5FA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A600 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A606 4278 D014                  		clr.w	($FFFFD014).w
0001A60A 4A68 0012                  		tst.w	$12(a0)
0001A60E 6A00                       		bpl.s	loc_1A248
0001A610 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A616                            
0001A616                            loc_1A23A:
0001A616 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A61C 6D00                       		blt.s	loc_1A248
0001A61E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A624                            
0001A624                            loc_1A248:
0001A624 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A62A 6500                       		bcs.s	loc_1A260
0001A62C 4A28 0001                  		tst.b	1(a0)
0001A630 6B00                       		bmi.s	loc_1A260
0001A632 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A638 6000 FAF4                  		bra.w	Obj85_Delete
0001A63C                            ; ===========================================================================
0001A63C                            
0001A63C                            loc_1A260:
0001A63C 6000 FEFA                  		bra.w	loc_1A15C
0001A640                            ; ===========================================================================
0001A640                            
0001A640                            loc_1A264:				; XREF: Obj85_Index
0001A640 2268 0034                  		movea.l	$34(a0),a1
0001A644 1011                       		move.b	(a1),d0
0001A646 B010                       		cmp.b	(a0),d0
0001A648 6600 FAE4                  		bne.w	Obj85_Delete
0001A64C 117C 0007 001C             		move.b	#7,$1C(a0)
0001A652 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A658 6C00                       		bge.s	loc_1A280
0001A65A 6000                       		bra.s	loc_1A2A6
0001A65C                            ; ===========================================================================
0001A65C                            
0001A65C                            loc_1A280:
0001A65C 4A69 0010                  		tst.w	$10(a1)
0001A660 6700                       		beq.s	loc_1A28C
0001A662 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A668                            
0001A668                            loc_1A28C:
0001A668 43FA DA2C                  		lea	Ani_Eggman(pc),a1
0001A66C 4EB9 0000 A7A2             		jsr	AnimateSprite
0001A672                            
0001A672                            loc_1A296:
0001A672 2268 0034                  		movea.l	$34(a0),a1
0001A676 3169 0008 0008             		move.w	8(a1),8(a0)
0001A67C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A682                            
0001A682                            loc_1A2A6:
0001A682 2268 0034                  		movea.l	$34(a0),a1
0001A686 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A68C 7003                       		moveq	#3,d0
0001A68E C028 0022                  		and.b	$22(a0),d0
0001A692 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A698 8128 0001                  		or.b	d0,1(a0)
0001A69C 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            loc_1A2C6:				; XREF: Obj85_Index
0001A6A2 2268 0034                  		movea.l	$34(a0),a1
0001A6A6 1011                       		move.b	(a1),d0
0001A6A8 B010                       		cmp.b	(a0),d0
0001A6AA 6600 FA82                  		bne.w	Obj85_Delete
0001A6AE 0CA9 0001 80E6 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A6B6 6700                       		beq.s	loc_1A2E4
0001A6B8 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A6BE 60C2                       		bra.s	loc_1A2A6
0001A6C0                            ; ===========================================================================
0001A6C0                            
0001A6C0                            loc_1A2E4:
0001A6C0 117C 0001 001C             		move.b	#1,$1C(a0)
0001A6C6 4A29 0021                  		tst.b	$21(a1)
0001A6CA 6F00                       		ble.s	loc_1A312
0001A6CC 117C 0006 001C             		move.b	#6,$1C(a0)
0001A6D2 217C 0001 80E6 0004        		move.l	#Map_Eggman,4(a0)
0001A6DA 317C 0400 0002             		move.w	#$400,2(a0)
0001A6E0 43FA D9B4                  		lea	Ani_Eggman(pc),a1
0001A6E4 4EB9 0000 A7A2             		jsr	AnimateSprite
0001A6EA 6000 FF86                  		bra.w	loc_1A296
0001A6EE                            ; ===========================================================================
0001A6EE                            
0001A6EE                            loc_1A312:
0001A6EE 4A28 0001                  		tst.b	1(a0)
0001A6F2 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A6F6 6100 D540                  		bsr.w	BossDefeated
0001A6FA 117C 0002 0018             		move.b	#2,$18(a0)
0001A700 117C 0000 001C             		move.b	#0,$1C(a0)
0001A706 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A70E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A714 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A718 4EB9 0000 A7A2             		jsr	AnimateSprite
0001A71E 6000 FF52                  		bra.w	loc_1A296
0001A722                            ; ===========================================================================
0001A722                            
0001A722                            loc_1A346:				; XREF: Obj85_Index
0001A722 08E8 0000 0022             		bset	#0,$22(a0)
0001A728 2268 0034                  		movea.l	$34(a0),a1
0001A72C 0CA9 0001 80E6 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A734 6700                       		beq.s	loc_1A35E
0001A736 6000 FF4A                  		bra.w	loc_1A2A6
0001A73A                            ; ===========================================================================
0001A73A                            
0001A73A                            loc_1A35E:
0001A73A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A740 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A746 4A28 001E                  		tst.b	$1E(a0)
0001A74A 6600                       		bne.s	loc_1A376
0001A74C 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A752                            
0001A752                            loc_1A376:
0001A752 5328 001E                  		subq.b	#1,$1E(a0)
0001A756 6E00                       		bgt.s	loc_1A38A
0001A758 5228 001A                  		addq.b	#1,$1A(a0)
0001A75C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A762 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A766                            
0001A766                            loc_1A38A:
0001A766 6000 FF0A                  		bra.w	loc_1A296
0001A76A                            ; ===========================================================================
0001A76A                            
0001A76A                            loc_1A38E:				; XREF: Obj85_Index
0001A76A 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A770 3038 D008                  		move.w	($FFFFD008).w,d0
0001A774 9068 0008                  		sub.w	8(a0),d0
0001A778 6500                       		bcs.s	loc_1A3A6
0001A77A 4A28 0001                  		tst.b	1(a0)
0001A77E 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A782                            
0001A782                            loc_1A3A6:
0001A782 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A788                            ; ===========================================================================
0001A788                            
0001A788                            loc_1A3AC:				; XREF: Obj85_Index
0001A788 117C 0000 001A             		move.b	#0,$1A(a0)
0001A78E 08E8 0000 0022             		bset	#0,$22(a0)
0001A794 2268 0034                  		movea.l	$34(a0),a1
0001A798 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A79E 6600                       		bne.s	loc_1A3D0
0001A7A0 0CA9 0001 80E6 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A7A8 6700 F984                  		beq.w	Obj85_Delete
0001A7AC                            
0001A7AC                            loc_1A3D0:
0001A7AC 6000 FED4                  		bra.w	loc_1A2A6
0001A7B0                            ; ===========================================================================
0001A7B0                            Ani_obj85:
0001A7B0                            	include "_anim\obj85.asm"
0001A7B0                            ; ---------------------------------------------------------------------------
0001A7B0                            ; Animation script - Eggman (FZ)
0001A7B0                            ; ---------------------------------------------------------------------------
0001A7B0 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A7B2 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A7B6                            		even
0001A7B6                            		even
0001A7B6                            
0001A7B6                            Map_Eggman2:
0001A7B6                            	include "_maps\Eggman2.asm"
0001A7B6                            ; ---------------------------------------------------------------------------
0001A7B6                            ; Sprite mappings - Eggman (FZ)
0001A7B6                            ; ---------------------------------------------------------------------------
0001A7B6 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A7B8 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A7BA 06                         byte_1A3DE:	dc.b 6
0001A7BB E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A7C0 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A7C5 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A7CA FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A7CF FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A7D4 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A7D9 06                         byte_1A3FD:	dc.b 6
0001A7DA E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A7DF EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A7E4 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A7E9 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A7EE FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A7F3 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A7F8                            		even
0001A7F8                            		even
0001A7F8                            
0001A7F8                            Map_FZBoss:
0001A7F8                            	include "_maps\FZ boss.asm"
0001A7F8                            ; ---------------------------------------------------------------------------
0001A7F8                            ; Sprite mappings - boss (FZ)
0001A7F8                            ; ---------------------------------------------------------------------------
0001A7F8 0000                       		dc.w byte_1A422-Map_FZBoss
0001A7FA 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A7FC 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A7FE 02                         byte_1A422:	dc.b 2
0001A7FF 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A804 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A809 03                         byte_1A42D:	dc.b 3
0001A80A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A80F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A814 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A819 02                         byte_1A43D:	dc.b 2
0001A81A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A81F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A824                            		even
0001A824                            		even
0001A824                            
0001A824                            ; ===========================================================================
0001A824                            
0001A824                            Obj84_Delete:
0001A824 4EF9 0000 D6E6             		jmp	DeleteObject
0001A82A                            ; ===========================================================================
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            
0001A82A                            Obj84:					; XREF: Obj_Index
0001A82A 7000                       		moveq	#0,d0
0001A82C 1028 0024                  		move.b	$24(a0),d0
0001A830 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A834 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A838                            ; ===========================================================================
0001A838 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A83A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A83C 0000                       		dc.w loc_1A57E-Obj84_Index
0001A83E                            
0001A83E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A842 2550 0620                  		dc.w $2550, $620
0001A846 2490 04C0                  		dc.w $2490, $4C0
0001A84A 2510 04C0                  		dc.w $2510, $4C0
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            Obj84_Main:				; XREF: Obj84_Index
0001A84E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A852 7000                       		moveq	#0,d0
0001A854 1028 0028                  		move.b	$28(a0),d0
0001A858 D040                       		add.w	d0,d0
0001A85A D2C0                       		adda.w	d0,a1
0001A85C 117C 0004 0001             		move.b	#4,1(a0)
0001A862 08E8 0007 0001             		bset	#7,1(a0)
0001A868 08E8 0004 0001             		bset	#4,1(a0)
0001A86E 317C 0300 0002             		move.w	#$300,2(a0)
0001A874 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A87C 3159 0008                  		move.w	(a1)+,8(a0)
0001A880 3151 000C                  		move.w	(a1),$C(a0)
0001A884 3159 0038                  		move.w	(a1)+,$38(a0)
0001A888 117C 0020 0016             		move.b	#$20,$16(a0)
0001A88E 117C 0060 0017             		move.b	#$60,$17(a0)
0001A894 117C 0020 0019             		move.b	#$20,$19(a0)
0001A89A 117C 0060 0016             		move.b	#$60,$16(a0)
0001A8A0 117C 0003 0018             		move.b	#3,$18(a0)
0001A8A6 5428 0024                  		addq.b	#2,$24(a0)
0001A8AA                            
0001A8AA                            loc_1A4CE:				; XREF: Obj84_Index
0001A8AA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A8B0 6F00                       		ble.s	loc_1A4DC
0001A8B2 08E8 0001 0001             		bset	#1,1(a0)
0001A8B8                            
0001A8B8                            loc_1A4DC:
0001A8B8 42A8 003C                  		clr.l	$3C(a0)
0001A8BC 4A28 0029                  		tst.b	$29(a0)
0001A8C0 6700                       		beq.s	loc_1A4EA
0001A8C2 5428 0024                  		addq.b	#2,$24(a0)
0001A8C6                            
0001A8C6                            loc_1A4EA:
0001A8C6 2028 003C                  		move.l	$3C(a0),d0
0001A8CA 2228 0038                  		move.l	$38(a0),d1
0001A8CE D280                       		add.l	d0,d1
0001A8D0 4841                       		swap	d1
0001A8D2 3141 000C                  		move.w	d1,$C(a0)
0001A8D6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A8DC 6600                       		bne.s	loc_1A524
0001A8DE 4A68 0030                  		tst.w	$30(a0)
0001A8E2 6A00                       		bpl.s	loc_1A524
0001A8E4 70F6                       		moveq	#-$A,d0
0001A8E6 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A8EC 6F00                       		ble.s	loc_1A514
0001A8EE 700E                       		moveq	#$E,d0
0001A8F0                            
0001A8F0                            loc_1A514:
0001A8F0 D240                       		add.w	d0,d1
0001A8F2 2268 0034                  		movea.l	$34(a0),a1
0001A8F6 3341 000C                  		move.w	d1,$C(a1)
0001A8FA 3368 0008 0008             		move.w	8(a0),8(a1)
0001A900                            
0001A900                            loc_1A524:
0001A900 323C 002B                  		move.w	#$2B,d1
0001A904 343C 0060                  		move.w	#$60,d2
0001A908 363C 0061                  		move.w	#$61,d3
0001A90C 3828 0008                  		move.w	8(a0),d4
0001A910 4EB9 0000 FA7C             		jsr	SolidObject
0001A916 7000                       		moveq	#0,d0
0001A918 3228 003C                  		move.w	$3C(a0),d1
0001A91C 6A00                       		bpl.s	loc_1A550
0001A91E 4441                       		neg.w	d1
0001A920 5141                       		subq.w	#8,d1
0001A922 6500                       		bcs.s	loc_1A55C
0001A924 5200                       		addq.b	#1,d0
0001A926 E841                       		asr.w	#4,d1
0001A928 D041                       		add.w	d1,d0
0001A92A 6000                       		bra.s	loc_1A55C
0001A92C                            ; ===========================================================================
0001A92C                            
0001A92C                            loc_1A550:
0001A92C 0441 0027                  		subi.w	#$27,d1
0001A930 6500                       		bcs.s	loc_1A55C
0001A932 5200                       		addq.b	#1,d0
0001A934 E841                       		asr.w	#4,d1
0001A936 D041                       		add.w	d1,d0
0001A938                            
0001A938                            loc_1A55C:
0001A938 1140 001A                  		move.b	d0,$1A(a0)
0001A93C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A940 9068 0008                  		sub.w	8(a0),d0
0001A944 6B00                       		bmi.s	loc_1A578
0001A946 0440 0140                  		subi.w	#$140,d0
0001A94A 6B00                       		bmi.s	loc_1A578
0001A94C 4A28 0001                  		tst.b	1(a0)
0001A950 6A00 FED2                  		bpl.w	Obj84_Delete
0001A954                            
0001A954                            loc_1A578:
0001A954 4EF9 0000 D6AA             		jmp	DisplaySprite
0001A95A                            ; ===========================================================================
0001A95A                            
0001A95A                            loc_1A57E:				; XREF: Obj84_Index
0001A95A 7000                       		moveq	#0,d0
0001A95C 1028 0028                  		move.b	$28(a0),d0
0001A960 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A964 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A968 6000 FF5C                  		bra.w	loc_1A4EA
0001A96C                            ; ===========================================================================
0001A96C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A96E 0000                       		dc.w loc_1A598-off_1A590
0001A970 0000                       		dc.w loc_1A604-off_1A590
0001A972 0000                       		dc.w loc_1A604-off_1A590
0001A974                            ; ===========================================================================
0001A974                            
0001A974                            loc_1A598:				; XREF: off_1A590
0001A974 4A28 0029                  		tst.b	$29(a0)
0001A978 6600                       		bne.s	loc_1A5D4
0001A97A 2268 0034                  		movea.l	$34(a0),a1
0001A97E 4A29 0021                  		tst.b	$21(a1)
0001A982 6600                       		bne.s	loc_1A5B4
0001A984 6100 D2B2                  		bsr.w	BossDefeated
0001A988 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A990                            
0001A990                            loc_1A5B4:
0001A990 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A998 6400                       		bcc.s	locret_1A602
0001A99A 42A8 003C                  		clr.l	$3C(a0)
0001A99E 2268 0034                  		movea.l	$34(a0),a1
0001A9A2 5369 0032                  		subq.w	#1,$32(a1)
0001A9A6 4269 0030                  		clr.w	$30(a1)
0001A9AA 5528 0024                  		subq.b	#2,$24(a0)
0001A9AE 4E75                       		rts	
0001A9B0                            ; ===========================================================================
0001A9B0                            
0001A9B0                            loc_1A5D4:
0001A9B0 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A9B6 6C00                       		bge.s	loc_1A5E4
0001A9B8 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A9C0                            
0001A9C0                            loc_1A5E4:
0001A9C0 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A9C8 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A9CE 6E00                       		bgt.s	locret_1A602
0001A9D0 4268 003E                  		clr.w	$3E(a0)
0001A9D4 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A9DA 4228 0029                  		clr.b	$29(a0)
0001A9DE                            
0001A9DE                            locret_1A602:
0001A9DE 4E75                       		rts	
0001A9E0                            ; ===========================================================================
0001A9E0                            
0001A9E0                            loc_1A604:				; XREF: off_1A590
0001A9E0 08E8 0001 0001             		bset	#1,1(a0)
0001A9E6 4A28 0029                  		tst.b	$29(a0)
0001A9EA 6600                       		bne.s	loc_1A646
0001A9EC 2268 0034                  		movea.l	$34(a0),a1
0001A9F0 4A29 0021                  		tst.b	$21(a1)
0001A9F4 6600                       		bne.s	loc_1A626
0001A9F6 6100 D240                  		bsr.w	BossDefeated
0001A9FA 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AA02                            
0001AA02                            loc_1A626:
0001AA02 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AA0A 6400                       		bcc.s	locret_1A674
0001AA0C 42A8 003C                  		clr.l	$3C(a0)
0001AA10 2268 0034                  		movea.l	$34(a0),a1
0001AA14 5369 0032                  		subq.w	#1,$32(a1)
0001AA18 4269 0030                  		clr.w	$30(a1)
0001AA1C 5528 0024                  		subq.b	#2,$24(a0)
0001AA20 4E75                       		rts	
0001AA22                            ; ===========================================================================
0001AA22                            
0001AA22                            loc_1A646:
0001AA22 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AA28 6D00                       		blt.s	loc_1A656
0001AA2A 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AA32                            
0001AA32                            loc_1A656:
0001AA32 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AA3A 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AA40 6D00                       		blt.s	locret_1A674
0001AA42 4268 003E                  		clr.w	$3E(a0)
0001AA46 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AA4C 4228 0029                  		clr.b	$29(a0)
0001AA50                            
0001AA50                            locret_1A674:
0001AA50 4E75                       		rts	
0001AA52                            ; ===========================================================================
0001AA52                            ; ---------------------------------------------------------------------------
0001AA52                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AA52                            ; ---------------------------------------------------------------------------
0001AA52                            Map_obj84:
0001AA52                            	include "_maps\obj84.asm"
0001AA52                            ; ---------------------------------------------------------------------------
0001AA52                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AA52                            ; ---------------------------------------------------------------------------
0001AA52 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AA56 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AA5A 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AA5E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AA62 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AA66 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AA6A 06                         byte_1A68E:	dc.b 6
0001AA6B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AA70 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AA75 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AA7A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AA7F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AA84 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AA89 08                         byte_1A6AD:	dc.b 8
0001AA8A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AA8F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AA94 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AA99 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AA9E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AAA3 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AAA8 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AAAD D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AAB2 0A                         byte_1A6D6:	dc.b $A
0001AAB3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AAB8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AABD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AAC2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AAC7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AACC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AAD1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AAD6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AADB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AAE0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AAE5 0C                         byte_1A709:	dc.b $C
0001AAE6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AAEB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AAF0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AAF5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AAFA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AAFF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB04 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB09 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB0E F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB13 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB18 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AB1D 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AB22 0D                         byte_1A746:	dc.b $D
0001AB23 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB28 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB2D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB32 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB37 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB3C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB41 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB46 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB4B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB50 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB55 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AB5A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AB5F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AB64 0E                         byte_1A788:	dc.b $E
0001AB65 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB6A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB6F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB74 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB79 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB7E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB83 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB88 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB8D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB92 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB97 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AB9C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ABA1 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ABA6 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ABAB 02                         byte_1A7CF:	dc.b 2
0001ABAC F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ABB1 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ABB6                            		even
0001ABB6                            		even
0001ABB6                            
0001ABB6                            ; ===========================================================================
0001ABB6                            ; ---------------------------------------------------------------------------
0001ABB6                            ; Object 86 - energy balls (FZ)
0001ABB6                            ; ---------------------------------------------------------------------------
0001ABB6                            
0001ABB6                            Obj86:					; XREF: Obj_Index
0001ABB6 7000                       		moveq	#0,d0
0001ABB8 1028 0024                  		move.b	$24(a0),d0
0001ABBC 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ABC0 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ABC4                            ; ===========================================================================
0001ABC4 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ABC6 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ABC8 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ABCA 0000                       		dc.w loc_1A962-Obj86_Index
0001ABCC 0000                       		dc.w loc_1A982-Obj86_Index
0001ABCE                            ; ===========================================================================
0001ABCE                            
0001ABCE                            Obj86_Main:				; XREF: Obj86_Index
0001ABCE 317C 2588 0008             		move.w	#$2588,8(a0)
0001ABD4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ABDA 317C 0300 0002             		move.w	#$300,2(a0)
0001ABE0 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ABE8 117C 0000 001C             		move.b	#0,$1C(a0)
0001ABEE 117C 0003 0018             		move.b	#3,$18(a0)
0001ABF4 117C 0008 0017             		move.b	#8,$17(a0)
0001ABFA 117C 0008 0016             		move.b	#8,$16(a0)
0001AC00 117C 0004 0001             		move.b	#4,1(a0)
0001AC06 08E8 0007 0001             		bset	#7,1(a0)
0001AC0C 5428 0024                  		addq.b	#2,$24(a0)
0001AC10                            
0001AC10                            Obj86_Generator:			; XREF: Obj86_Index
0001AC10 2268 0034                  		movea.l	$34(a0),a1
0001AC14 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AC1A 6600                       		bne.s	loc_1A850
0001AC1C 10BC 003F                  		move.b	#$3F,(a0)
0001AC20 117C 0000 0024             		move.b	#0,$24(a0)
0001AC26 4EF9 0000 D6AA             		jmp	DisplaySprite
0001AC2C                            ; ===========================================================================
0001AC2C                            
0001AC2C                            loc_1A850:
0001AC2C 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC32 4A28 0029                  		tst.b	$29(a0)
0001AC36 6700                       		beq.s	loc_1A86C
0001AC38 5428 0024                  		addq.b	#2,$24(a0)
0001AC3C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC42 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AC48                            
0001AC48                            loc_1A86C:
0001AC48 323C 0013                  		move.w	#$13,d1
0001AC4C 343C 0008                  		move.w	#8,d2
0001AC50 363C 0011                  		move.w	#$11,d3
0001AC54 3828 0008                  		move.w	8(a0),d4
0001AC58 4EB9 0000 FA7C             		jsr	SolidObject
0001AC5E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC62 9068 0008                  		sub.w	8(a0),d0
0001AC66 6B00                       		bmi.s	loc_1A89A
0001AC68 0440 0140                  		subi.w	#$140,d0
0001AC6C 6B00                       		bmi.s	loc_1A89A
0001AC6E 4A28 0001                  		tst.b	1(a0)
0001AC72 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AC76                            
0001AC76                            loc_1A89A:
0001AC76 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AC7A 4EB9 0000 A7A2             		jsr	AnimateSprite
0001AC80 4EF9 0000 D6AA             		jmp	DisplaySprite
0001AC86                            ; ===========================================================================
0001AC86                            
0001AC86                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AC86 4A28 0029                  		tst.b	$29(a0)
0001AC8A 6700 0000                  		beq.w	loc_1A954
0001AC8E 4228 0029                  		clr.b	$29(a0)
0001AC92 D068 0030                  		add.w	$30(a0),d0
0001AC96 0240 001E                  		andi.w	#$1E,d0
0001AC9A D4C0                       		adda.w	d0,a2
0001AC9C 5868 0030                  		addq.w	#4,$30(a0)
0001ACA0 4268 0032                  		clr.w	$32(a0)
0001ACA4 7403                       		moveq	#3,d2
0001ACA6                            
0001ACA6                            Obj86_Loop:
0001ACA6 4EB9 0000 DB4C             		jsr	SingleObjLoad2
0001ACAC 6600 0000                  		bne.w	loc_1A954
0001ACB0 12BC 0086                  		move.b	#$86,(a1)
0001ACB4 3368 0008 0008             		move.w	8(a0),8(a1)
0001ACBA 337C 053C 000C             		move.w	#$53C,$C(a1)
0001ACC0 137C 0008 0024             		move.b	#8,$24(a1)
0001ACC6 337C 2300 0002             		move.w	#$2300,2(a1)
0001ACCC 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001ACD4 137C 000C 0016             		move.b	#$C,$16(a1)
0001ACDA 137C 000C 0017             		move.b	#$C,$17(a1)
0001ACE0 137C 0000 0020             		move.b	#0,$20(a1)
0001ACE6 137C 0003 0018             		move.b	#3,$18(a1)
0001ACEC 337C 003E 0028             		move.w	#$3E,$28(a1)
0001ACF2 137C 0004 0001             		move.b	#4,1(a1)
0001ACF8 08E9 0007 0001             		bset	#7,1(a1)
0001ACFE 2348 0034                  		move.l	a0,$34(a1)
0001AD02 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001AD08 3228 0032                  		move.w	$32(a0),d1
0001AD0C C3FC FFB1                  		muls.w	#-$4F,d1
0001AD10 0641 2578                  		addi.w	#$2578,d1
0001AD14 0240 001F                  		andi.w	#$1F,d0
0001AD18 0440 0010                  		subi.w	#$10,d0
0001AD1C D041                       		add.w	d1,d0
0001AD1E 3340 0030                  		move.w	d0,$30(a1)
0001AD22 5268 0032                  		addq.w	#1,$32(a0)
0001AD26 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AD2C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AD30                            
0001AD30                            loc_1A954:
0001AD30 4A68 0032                  		tst.w	$32(a0)
0001AD34 6600                       		bne.s	loc_1A95E
0001AD36 5428 0024                  		addq.b	#2,$24(a0)
0001AD3A                            
0001AD3A                            loc_1A95E:
0001AD3A 6000 FF0C                  		bra.w	loc_1A86C
0001AD3E                            ; ===========================================================================
0001AD3E                            
0001AD3E                            loc_1A962:				; XREF: Obj86_Index
0001AD3E 117C 0002 001C             		move.b	#2,$1C(a0)
0001AD44 4A68 0038                  		tst.w	$38(a0)
0001AD48 6600                       		bne.s	loc_1A97E
0001AD4A 117C 0002 0024             		move.b	#2,$24(a0)
0001AD50 2268 0034                  		movea.l	$34(a0),a1
0001AD54 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AD5A                            
0001AD5A                            loc_1A97E:
0001AD5A 6000 FEEC                  		bra.w	loc_1A86C
0001AD5E                            ; ===========================================================================
0001AD5E                            
0001AD5E                            loc_1A982:				; XREF: Obj86_Index
0001AD5E 7000                       		moveq	#0,d0
0001AD60 1028 0025                  		move.b	$25(a0),d0
0001AD64 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AD68 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AD6C 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AD70 4EB9 0000 A7A2             		jsr	AnimateSprite
0001AD76 4EF9 0000 D6AA             		jmp	DisplaySprite
0001AD7C                            ; ===========================================================================
0001AD7C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AD7E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AD80 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AD82                            ; ===========================================================================
0001AD82                            
0001AD82                            loc_1A9A6:				; XREF: Obj86_Index2
0001AD82 3028 0030                  		move.w	$30(a0),d0
0001AD86 9068 0008                  		sub.w	8(a0),d0
0001AD8A E940                       		asl.w	#4,d0
0001AD8C 3140 0010                  		move.w	d0,$10(a0)
0001AD90 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AD96 5428 0025                  		addq.b	#2,$25(a0)
0001AD9A 4E75                       		rts	
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            loc_1A9C0:				; XREF: Obj86_Index2
0001AD9C 4A68 0010                  		tst.w	$10(a0)
0001ADA0 6700                       		beq.s	loc_1A9E6
0001ADA2 4EB9 0000 D684             		jsr	SpeedToPos
0001ADA8 3028 0008                  		move.w	8(a0),d0
0001ADAC 9068 0030                  		sub.w	$30(a0),d0
0001ADB0 6400                       		bcc.s	loc_1A9E6
0001ADB2 4268 0010                  		clr.w	$10(a0)
0001ADB6 D168 0008                  		add.w	d0,8(a0)
0001ADBA 2268 0034                  		movea.l	$34(a0),a1
0001ADBE 5369 0032                  		subq.w	#1,$32(a1)
0001ADC2                            
0001ADC2                            loc_1A9E6:
0001ADC2 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADC8 5368 0028                  		subq.w	#1,$28(a0)
0001ADCC 6600                       		bne.s	locret_1AA1C
0001ADCE 5428 0025                  		addq.b	#2,$25(a0)
0001ADD2 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADD8 117C 009A 0020             		move.b	#$9A,$20(a0)
0001ADDE 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001ADE4 7000                       		moveq	#0,d0
0001ADE6 3038 D008                  		move.w	($FFFFD008).w,d0
0001ADEA 9068 0008                  		sub.w	8(a0),d0
0001ADEE 3140 0010                  		move.w	d0,$10(a0)
0001ADF2 317C 0140 0012             		move.w	#$140,$12(a0)
0001ADF8                            
0001ADF8                            locret_1AA1C:
0001ADF8 4E75                       		rts	
0001ADFA                            ; ===========================================================================
0001ADFA                            
0001ADFA                            loc_1AA1E:				; XREF: Obj86_Index2
0001ADFA 4EB9 0000 D684             		jsr	SpeedToPos
0001AE00 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AE06 6400                       		bcc.s	loc_1AA34
0001AE08 5368 0028                  		subq.w	#1,$28(a0)
0001AE0C 6700                       		beq.s	loc_1AA34
0001AE0E 4E75                       		rts	
0001AE10                            ; ===========================================================================
0001AE10                            
0001AE10                            loc_1AA34:
0001AE10 2268 0034                  		movea.l	$34(a0),a1
0001AE14 5369 0038                  		subq.w	#1,$38(a1)
0001AE18 6000 FA0A                  		bra.w	Obj84_Delete
0001AE1C                            ; ===========================================================================
0001AE1C                            Ani_obj86:
0001AE1C                            	include "_anim\obj86.asm"
0001AE1C                            ; ---------------------------------------------------------------------------
0001AE1C                            ; Animation script - energy ball launcher (FZ)
0001AE1C                            ; ---------------------------------------------------------------------------
0001AE1C 0000                       		dc.w byte_1AA46-Ani_obj86
0001AE1E 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AE20 0000                       		dc.w byte_1AA50-Ani_obj86
0001AE22 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AE26 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AE2C 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AE32                            		even
0001AE32                            		even
0001AE32                            
0001AE32                            ; ---------------------------------------------------------------------------
0001AE32                            ; Sprite mappings - energy ball	launcher (FZ)
0001AE32                            ; ---------------------------------------------------------------------------
0001AE32                            Map_obj86:
0001AE32                            	include "_maps\obj86.asm"
0001AE32                            ; ---------------------------------------------------------------------------
0001AE32                            ; Sprite mappings - energy ball	launcher (FZ)
0001AE32                            ; ---------------------------------------------------------------------------
0001AE32 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AE36 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AE3A 01                         byte_1AA5E:	dc.b 1
0001AE3B F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AE40 01                         byte_1AA64:	dc.b 1
0001AE41 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AE46 01                         byte_1AA6A:	dc.b 1
0001AE47 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AE4C 01                         byte_1AA70:	dc.b 1
0001AE4D F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AE52                            		even
0001AE52                            		even
0001AE52                            
0001AE52                            Ani_obj86a:
0001AE52                            	include "_anim\obj86a.asm"
0001AE52                            ; ---------------------------------------------------------------------------
0001AE52                            ; Animation script - energy balls (FZ)
0001AE52                            ; ---------------------------------------------------------------------------
0001AE52 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AE54 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AE56 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AE65 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AE74 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AE78 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AE82                            		even
0001AE82                            		even
0001AE82                            
0001AE82                            ; ---------------------------------------------------------------------------
0001AE82                            ; Sprite mappings - energy balls (FZ)
0001AE82                            ; ---------------------------------------------------------------------------
0001AE82                            Map_obj86a:
0001AE82                            	include "_maps\obj86a.asm"
0001AE82                            ; ---------------------------------------------------------------------------
0001AE82                            ; Sprite mappings - energy balls (FZ)
0001AE82                            ; ---------------------------------------------------------------------------
0001AE82 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AE86 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AE8A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AE8E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AE92 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AE96 0000                       		dc.w byte_1AB20-Map_obj86a
0001AE98 02                         byte_1AABC:	dc.b 2
0001AE99 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AE9E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AEA3 02                         byte_1AAC7:	dc.b 2
0001AEA4 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AEA9 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AEAE 02                         byte_1AAD2:	dc.b 2
0001AEAF F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AEB4 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AEB9 02                         byte_1AADD:	dc.b 2
0001AEBA F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AEBF 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AEC4 02                         byte_1AAE8:	dc.b 2
0001AEC5 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AECA 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AECF 02                         byte_1AAF3:	dc.b 2
0001AED0 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AED5 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AEDA 01                         byte_1AAFE:	dc.b 1
0001AEDB F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AEE0 01                         byte_1AB04:	dc.b 1
0001AEE1 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AEE6 02                         byte_1AB0A:	dc.b 2
0001AEE7 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AEEC 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AEF1 02                         byte_1AB15:	dc.b 2
0001AEF2 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AEF7 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AEFC 00                         byte_1AB20:	dc.b 0
0001AEFE 00                         		even
0001AEFE 00                         		even
0001AEFE                            
0001AEFE                            ; ===========================================================================
0001AEFE                            ; ---------------------------------------------------------------------------
0001AEFE                            ; Object 3E - prison capsule
0001AEFE                            ; ---------------------------------------------------------------------------
0001AEFE                            
0001AEFE                            Obj3E:					; XREF: Obj_Index
0001AEFE 7000                       		moveq	#0,d0
0001AF00 1028 0024                  		move.b	$24(a0),d0
0001AF04 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AF08 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AF0C 3028 0008                  		move.w	8(a0),d0
0001AF10 0240 FF80                  		andi.w	#$FF80,d0
0001AF14 3238 F700                  		move.w	($FFFFF700).w,d1
0001AF18 0441 0080                  		subi.w	#$80,d1
0001AF1C 0241 FF80                  		andi.w	#$FF80,d1
0001AF20 9041                       		sub.w	d1,d0
0001AF22 0C40 0280                  		cmpi.w	#$280,d0
0001AF26 6200                       		bhi.s	Obj3E_Delete
0001AF28 4EF9 0000 D6AA             		jmp	DisplaySprite
0001AF2E                            ; ===========================================================================
0001AF2E                            
0001AF2E                            Obj3E_Delete:
0001AF2E 4EF9 0000 D6E6             		jmp	DeleteObject
0001AF34                            ; ===========================================================================
0001AF34 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AF36 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AF38 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AF3A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF3C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF3E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF40 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AF42 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AF44                            
0001AF44 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AF48 040C 0501                  		dc.b 4,	$C, 5, 1
0001AF4C 0610 0403                  		dc.b 6,	$10, 4,	3
0001AF50 0810 0305                  		dc.b 8,	$10, 3,	5
0001AF54                            ; ===========================================================================
0001AF54                            
0001AF54                            Obj3E_Main:				; XREF: Obj3E_Index
0001AF54 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AF5C 317C 049D 0002             		move.w	#$49D,2(a0)
0001AF62 117C 0004 0001             		move.b	#4,1(a0)
0001AF68 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AF6E 7000                       		moveq	#0,d0
0001AF70 1028 0028                  		move.b	$28(a0),d0
0001AF74 E548                       		lsl.w	#2,d0
0001AF76 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AF7A 1159 0024                  		move.b	(a1)+,$24(a0)
0001AF7E 1159 0019                  		move.b	(a1)+,$19(a0)
0001AF82 1159 0018                  		move.b	(a1)+,$18(a0)
0001AF86 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AF8A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AF8E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AF90 117C 0006 0020             		move.b	#6,$20(a0)
0001AF96 117C 0008 0021             		move.b	#8,$21(a0)
0001AF9C                            
0001AF9C                            Obj3E_Not02:
0001AF9C 4E75                       		rts	
0001AF9E                            ; ===========================================================================
0001AF9E                            
0001AF9E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AF9E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AFA4 6700                       		beq.s	Obj3E_ChkOpened
0001AFA6 323C 002B                  		move.w	#$2B,d1
0001AFAA 343C 0018                  		move.w	#$18,d2
0001AFAE 363C 0018                  		move.w	#$18,d3
0001AFB2 3828 0008                  		move.w	8(a0),d4
0001AFB6 4EF9 0000 FA7C             		jmp	SolidObject
0001AFBC                            ; ===========================================================================
0001AFBC                            
0001AFBC                            Obj3E_ChkOpened:
0001AFBC 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AFC0 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AFC2 4228 0025                  		clr.b	$25(a0)
0001AFC6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AFCC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AFD2                            
0001AFD2                            Obj3E_DoOpen:
0001AFD2 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AFD8 4E75                       		rts	
0001AFDA                            ; ===========================================================================
0001AFDA                            
0001AFDA                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AFDA 323C 0017                  		move.w	#$17,d1
0001AFDE 343C 0008                  		move.w	#8,d2
0001AFE2 363C 0008                  		move.w	#8,d3
0001AFE6 3828 0008                  		move.w	8(a0),d4
0001AFEA 4EB9 0000 FA7C             		jsr	SolidObject
0001AFF0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AFF6 4EB9 0000 A7A2             		jsr	AnimateSprite
0001AFFC 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B002 4A28 0025                  		tst.b	$25(a0)
0001B006 6700                       		beq.s	locret_1AC60
0001B008 5068 000C                  		addq.w	#8,$C(a0)
0001B00C 117C 000A 0024             		move.b	#$A,$24(a0)
0001B012 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B018 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B01C 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B020 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B026 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B02C 4228 0025                  		clr.b	$25(a0)
0001B030 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B036 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B03C                            
0001B03C                            locret_1AC60:
0001B03C 4E75                       		rts	
0001B03E                            ; ===========================================================================
0001B03E                            
0001B03E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B03E 7007                       		moveq	#7,d0
0001B040 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B044 6600                       		bne.s	loc_1ACA0
0001B046 4EB9 0000 DB36             		jsr	SingleObjLoad
0001B04C 6600                       		bne.s	loc_1ACA0
0001B04E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B052 3368 0008 0008             		move.w	8(a0),8(a1)
0001B058 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B05E 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001B064 7200                       		moveq	#0,d1
0001B066 1200                       		move.b	d0,d1
0001B068 E409                       		lsr.b	#2,d1
0001B06A 0441 0020                  		subi.w	#$20,d1
0001B06E D369 0008                  		add.w	d1,8(a1)
0001B072 E048                       		lsr.w	#8,d0
0001B074 E608                       		lsr.b	#3,d0
0001B076 D169 000C                  		add.w	d0,$C(a1)
0001B07A                            
0001B07A                            loc_1ACA0:
0001B07A 5368 001E                  		subq.w	#1,$1E(a0)
0001B07E 6700                       		beq.s	Obj3E_MakeAnimal
0001B080 4E75                       		rts	
0001B082                            ; ===========================================================================
0001B082                            
0001B082                            Obj3E_MakeAnimal:
0001B082 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B088 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B08E 117C 0006 001A             		move.b	#6,$1A(a0)
0001B094 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B09A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B0A0 7C07                       		moveq	#7,d6
0001B0A2 3A3C 009A                  		move.w	#$9A,d5
0001B0A6 78E4                       		moveq	#-$1C,d4
0001B0A8                            
0001B0A8                            Obj3E_Loop:
0001B0A8 4EB9 0000 DB36             		jsr	SingleObjLoad
0001B0AE 6600                       		bne.s	locret_1ACF8
0001B0B0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B0B4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0C0 D969 0008                  		add.w	d4,8(a1)
0001B0C4 5E44                       		addq.w	#7,d4
0001B0C6 3345 0036                  		move.w	d5,$36(a1)
0001B0CA 5145                       		subq.w	#8,d5
0001B0CC 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B0D0                            
0001B0D0                            locret_1ACF8:
0001B0D0 4E75                       		rts	
0001B0D2                            ; ===========================================================================
0001B0D2                            
0001B0D2                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B0D2 7007                       		moveq	#7,d0
0001B0D4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B0D8 6600                       		bne.s	loc_1AD38
0001B0DA 4EB9 0000 DB36             		jsr	SingleObjLoad
0001B0E0 6600                       		bne.s	loc_1AD38
0001B0E2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B0E6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0F2 4EB9 0000 28C6             		jsr	(RandomNumber).l
0001B0F8 0240 001F                  		andi.w	#$1F,d0
0001B0FC 5D40                       		subq.w	#6,d0
0001B0FE 4A41                       		tst.w	d1
0001B100 6A00                       		bpl.s	loc_1AD2E
0001B102 4440                       		neg.w	d0
0001B104                            
0001B104                            loc_1AD2E:
0001B104 D169 0008                  		add.w	d0,8(a1)
0001B108 337C 000C 0036             		move.w	#$C,$36(a1)
0001B10E                            
0001B10E                            loc_1AD38:
0001B10E 5368 001E                  		subq.w	#1,$1E(a0)
0001B112 6600                       		bne.s	locret_1AD48
0001B114 5428 0024                  		addq.b	#2,$24(a0)
0001B118 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B11E                            
0001B11E                            locret_1AD48:
0001B11E 4E75                       		rts	
0001B120                            ; ===========================================================================
0001B120                            
0001B120                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B120 703E                       		moveq	#$3E,d0
0001B122 7228                       		moveq	#$28,d1
0001B124 7440                       		moveq	#$40,d2
0001B126 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B12A                            
0001B12A                            Obj3E_FindObj28:
0001B12A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B12C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B12E D2C2                       		adda.w	d2,a1		; next object RAM
0001B130 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B134                            
0001B134 4EB9 0000 ED38             		jsr	GotThroughAct
0001B13A 4EF9 0000 D6E6             		jmp	DeleteObject
0001B140                            ; ===========================================================================
0001B140                            
0001B140                            Obj3E_Obj28Found:
0001B140 4E75                       		rts	
0001B142                            ; ===========================================================================
0001B142                            Ani_obj3E:
0001B142                            	include "_anim\obj3E.asm"
0001B142                            ; ---------------------------------------------------------------------------
0001B142                            ; Animation script - prison capsule
0001B142                            ; ---------------------------------------------------------------------------
0001B142 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B144 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B146 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B14A                            		even
0001B14A                            		even
0001B14A                            
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A                            ; Sprite mappings - prison capsule
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A                            Map_obj3E:
0001B14A                            	include "_maps\obj3E.asm"
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A                            ; Sprite mappings - prison capsule
0001B14A                            ; ---------------------------------------------------------------------------
0001B14A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B14E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B152 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B156 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B158 07                         byte_1AD82:	dc.b 7
0001B159 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B15E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B163 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B168 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B16D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B172 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B177 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B17C 01                         byte_1ADA6:	dc.b 1
0001B17D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B182 06                         byte_1ADAC:	dc.b 6
0001B183 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B188 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B18D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B192 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B197 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B19C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B1A1 01                         byte_1ADCB:	dc.b 1
0001B1A2 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B1A7 02                         byte_1ADD1:	dc.b 2
0001B1A8 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B1AD 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B1B2 01                         byte_1ADDC:	dc.b 1
0001B1B3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B1B8 00                         byte_1ADE2:	dc.b 0
0001B1BA 00                         		even
0001B1BA 00                         		even
0001B1BA                            
0001B1BA                            ; ---------------------------------------------------------------------------
0001B1BA                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B1BA                            ; ---------------------------------------------------------------------------
0001B1BA                            
0001B1BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B1BA                            
0001B1BA                            
0001B1BA                            TouchResponse:				; XREF: Obj01
0001B1BA 4E71                       		nop	
0001B1BC 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B1C0 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B1C4 5142                       		subq.w	#8,d2
0001B1C6 7A00                       		moveq	#0,d5
0001B1C8 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B1CC 5705                       		subq.b	#3,d5
0001B1CE 9645                       		sub.w	d5,d3
0001B1D0 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B1D6 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B1D8 0643 000C                  		addi.w	#$C,d3
0001B1DC 7A0A                       		moveq	#$A,d5
0001B1DE                            
0001B1DE                            Touch_NoDuck:
0001B1DE 383C 0010                  		move.w	#$10,d4
0001B1E2 DA45                       		add.w	d5,d5
0001B1E4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B1E8 3C3C 005F                  		move.w	#$5F,d6
0001B1EC                            
0001B1EC                            Touch_Loop:
0001B1EC 4A29 0001                  		tst.b	1(a1)
0001B1F0 6A00                       		bpl.s	Touch_NextObj
0001B1F2 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B1F6 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B1F8                            
0001B1F8                            Touch_NextObj:
0001B1F8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B1FC 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B200                            
0001B200 7000                       		moveq	#0,d0
0001B202 4E75                       		rts	
0001B204                            ; ===========================================================================
0001B204 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B206 0C14                       		dc.b   $C, $14
0001B208 140C                       		dc.b  $14,  $C
0001B20A 0410                       		dc.b	4, $10
0001B20C 0C12                       		dc.b   $C, $12
0001B20E 1010                       		dc.b  $10, $10
0001B210 0606                       		dc.b	6,   6
0001B212 180C                       		dc.b  $18,  $C
0001B214 0C10                       		dc.b   $C, $10
0001B216 100C                       		dc.b  $10,  $C
0001B218 0808                       		dc.b	8,   8
0001B21A 1410                       		dc.b  $14, $10
0001B21C 1408                       		dc.b  $14,   8
0001B21E 0E0E                       		dc.b   $E,  $E
0001B220 1818                       		dc.b  $18, $18
0001B222 2810                       		dc.b  $28, $10
0001B224 1018                       		dc.b  $10, $18
0001B226 0810                       		dc.b	8, $10
0001B228 2070                       		dc.b  $20, $70
0001B22A 4020                       		dc.b  $40, $20
0001B22C 8020                       		dc.b  $80, $20
0001B22E 2020                       		dc.b  $20, $20
0001B230 0808                       		dc.b	8,   8
0001B232 0404                       		dc.b	4,   4
0001B234 2008                       		dc.b  $20,   8
0001B236 0C0C                       		dc.b   $C,  $C
0001B238 0804                       		dc.b	8,   4
0001B23A 1804                       		dc.b  $18,   4
0001B23C 2804                       		dc.b  $28,   4
0001B23E 0408                       		dc.b	4,   8
0001B240 0418                       		dc.b	4, $18
0001B242 0428                       		dc.b	4, $28
0001B244 0420                       		dc.b	4, $20
0001B246 1818                       		dc.b  $18, $18
0001B248 0C18                       		dc.b   $C, $18
0001B24A 4808                       		dc.b  $48,   8
0001B24C                            ; ===========================================================================
0001B24C                            
0001B24C                            Touch_Height:				; XREF: TouchResponse
0001B24C 0240 003F                  		andi.w	#$3F,d0
0001B250 D040                       		add.w	d0,d0
0001B252 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B256 7200                       		moveq	#0,d1
0001B258 121A                       		move.b	(a2)+,d1
0001B25A 3029 0008                  		move.w	8(a1),d0
0001B25E 9041                       		sub.w	d1,d0
0001B260 9042                       		sub.w	d2,d0
0001B262 6400                       		bcc.s	loc_1AE98
0001B264 D241                       		add.w	d1,d1
0001B266 D041                       		add.w	d1,d0
0001B268 6500                       		bcs.s	Touch_Width
0001B26A 6000 FF8C                  		bra.w	Touch_NextObj
0001B26E                            ; ===========================================================================
0001B26E                            
0001B26E                            loc_1AE98:
0001B26E B044                       		cmp.w	d4,d0
0001B270 6200 FF86                  		bhi.w	Touch_NextObj
0001B274                            
0001B274                            Touch_Width:
0001B274 7200                       		moveq	#0,d1
0001B276 121A                       		move.b	(a2)+,d1
0001B278 3029 000C                  		move.w	$C(a1),d0
0001B27C 9041                       		sub.w	d1,d0
0001B27E 9043                       		sub.w	d3,d0
0001B280 6400                       		bcc.s	loc_1AEB6
0001B282 D241                       		add.w	d1,d1
0001B284 D240                       		add.w	d0,d1
0001B286 6500                       		bcs.s	Touch_ChkValue
0001B288 6000 FF6E                  		bra.w	Touch_NextObj
0001B28C                            ; ===========================================================================
0001B28C                            
0001B28C                            loc_1AEB6:
0001B28C B045                       		cmp.w	d5,d0
0001B28E 6200 FF68                  		bhi.w	Touch_NextObj
0001B292                            
0001B292                            Touch_ChkValue:
0001B292 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B296 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B29A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B29E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B2A2 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B2A6 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B2A8 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B2AC                            
0001B2AC                            ; touch	response is $40-$7F
0001B2AC                            
0001B2AC 1029 0020                  		move.b	$20(a1),d0
0001B2B0 0200 003F                  		andi.b	#$3F,d0
0001B2B4 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B2B8 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B2BA 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B2C0 6400 0000                  		bcc.w	locret_1AEF2
0001B2C4 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B2C8                            
0001B2C8                            locret_1AEF2:
0001B2C8 4E75                       		rts	
0001B2CA                            ; ===========================================================================
0001B2CA                            
0001B2CA                            Touch_Monitor:
0001B2CA 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B2CE 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B2D0 3028 000C                  		move.w	$C(a0),d0
0001B2D4 0440 0010                  		subi.w	#$10,d0
0001B2D8 B069 000C                  		cmp.w	$C(a1),d0
0001B2DC 6500                       		bcs.s	locret_1AF2E
0001B2DE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B2E2 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001B2E6 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B2EC 4A29 0025                  		tst.b	$25(a1)
0001B2F0 6600                       		bne.s	locret_1AF2E
0001B2F2 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B2F6 4E75                       		rts	
0001B2F8                            ; ===========================================================================
0001B2F8                            
0001B2F8                            loc_1AF1E:
0001B2F8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B2FE 6600                       		bne.s	locret_1AF2E
0001B300 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B304 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B308 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001B30E 6E00                       		bgt.s	@happy
0001B310 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001B316 6D00                       		blt.s	@happy
0001B318 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001B31E 6E00                       		bgt.s	@happy
0001B320 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001B326 6C00                       		bge.s	locret_1AF2E
0001B328                            
0001B328                            	@happy:
0001B328 0828 0001 0022             		btst	#1,$22(a0)
0001B32E 6700                       		beq.s	locret_1AF2E
0001B330 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001B336 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001B33C                            
0001B33C                            locret_1AF2E:
0001B33C 4E75                       		rts	
0001B33E                            ; ===========================================================================
0001B33E                            
0001B33E                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B33E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B342 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B344 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B34A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B34E                            
0001B34E                            loc_1AF40:
0001B34E 4A29 0021                  		tst.b	$21(a1)
0001B352 6700                       		beq.s	Touch_KillEnemy
0001B354 4468 0010                  		neg.w	$10(a0)
0001B358 4468 0012                  		neg.w	$12(a0)
0001B35C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001B360 E0E8 0010                  		asr	$10(a0)
0001B364 E0E8 0012                  		asr	$12(a0)
0001B368 137C 0000 0020             		move.b	#0,$20(a1)
0001B36E 5329 0021                  		subq.b	#1,$21(a1)
0001B372 6600                       		bne.s	locret_1AF68
0001B374 08E9 0007 0022             		bset	#7,$22(a1)
0001B37A                            
0001B37A                            locret_1AF68:
0001B37A 4E75                       		rts	
0001B37C                            ; ===========================================================================
0001B37C                            
0001B37C                            Touch_KillEnemy:
0001B37C 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001B382 6E00                       		bgt.s	@happy
0001B384 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001B38A 6D00                       		blt.s	@happy
0001B38C 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001B392 6E00                       		bgt.s	@happy
0001B394 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001B39A 6C00                       		bge.s	@nothappy
0001B39C                            
0001B39C                            	@happy:
0001B39C 0828 0001 0022             		btst	#1,$22(a0)
0001B3A2 6700                       		beq.s	@nothappy
0001B3A4 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001B3AA 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001B3B0                            
0001B3B0                            	@nothappy:
0001B3B0 08E9 0007 0022             		bset	#7,$22(a1)
0001B3B6 7000                       		moveq	#0,d0
0001B3B8 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B3BC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B3C0 0C40 0006                  		cmpi.w	#6,d0
0001B3C4 6500                       		bcs.s	loc_1AF82
0001B3C6 7006                       		moveq	#6,d0
0001B3C8                            
0001B3C8                            loc_1AF82:
0001B3C8 3340 003E                  		move.w	d0,$3E(a1)
0001B3CC 4A40                       		tst.w	d0
0001B3CE 6700                       		beq.s	@nocombo
0001B3D0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001B3D6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001B3DC                            
0001B3DC                            	@nocombo:
0001B3DC 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B3E0 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B3E6 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B3E8 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B3EC 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B3F2                            
0001B3F2                            loc_1AF9C:
0001B3F2 6100 0000                  		bsr.w	AddPoints
0001B3F6 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B3FA 137C 0000 0024             		move.b	#0,$24(a1)
0001B400 4A68 0012                  		tst.w	$12(a0)
0001B404 6B00                       		bmi.s	loc_1AFC2
0001B406 3028 000C                  		move.w	$C(a0),d0
0001B40A B069 000C                  		cmp.w	$C(a1),d0
0001B40E 6400                       		bcc.s	loc_1AFCA
0001B410 4468 0012                  		neg.w	$12(a0)
0001B414 4E75                       		rts	
0001B416                            ; ===========================================================================
0001B416                            
0001B416                            loc_1AFC2:
0001B416 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B41C 4E75                       		rts	
0001B41E                            ; ===========================================================================
0001B41E                            
0001B41E                            loc_1AFCA:
0001B41E 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B42E                            ; ===========================================================================
0001B42E                            
0001B42E                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B42E 08E9 0007 0022             		bset	#7,$22(a1)
0001B434                            
0001B434                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B434 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B438 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B43A                            
0001B43A                            loc_1AFE6:				; XREF: Touch_Hurt
0001B43A 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001B440 6E00                       		bgt.s	locret_1AFE6
0001B442                            
0001B442                            loc2_1AFE6:				; XREF: Touch_Hurt
0001B442 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001B448 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001B44E                            
0001B44E                            locret_1AFE6:
0001B44E 70FF                       		moveq	#-1,d0
0001B450 4E75                       		rts	
0001B452                            ; ===========================================================================
0001B452                            
0001B452                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B452 4E71                       		nop	
0001B454 4A68 0030                  		tst.w	$30(a0)
0001B458 66E8                       		bne.s	loc2_1AFE6
0001B45A 2449                       		movea.l	a1,a2
0001B45C                            
0001B45C                            ; End of function TouchResponse
0001B45C                            ; continue straight to HurtSonic
0001B45C                            
0001B45C                            ; ---------------------------------------------------------------------------
0001B45C                            ; Hurting Sonic	subroutine
0001B45C                            ; ---------------------------------------------------------------------------
0001B45C                            
0001B45C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B45C                            
0001B45C                            
0001B45C                            HurtSonic:
0001B45C 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001B462 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001B468 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B46C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B46E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B472 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B476 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001B47C 6500                       		bcs.s	@notbad
0001B47E 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001B484                            
0001B484                            	@notbad:
0001B484 4EB9 0000 DB36             		jsr	SingleObjLoad
0001B48A 6600                       		bne.s	Hurt_Shield
0001B48C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B490 3368 0008 0008             		move.w	8(a0),8(a1)
0001B496 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B49C                            
0001B49C                            Hurt_Shield:
0001B49C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B4A2 117C 0004 0024             		move.b	#4,$24(a0)
0001B4A8 6100 83FC                  		bsr.w	Sonic_ResetOnFloor
0001B4AC 08E8 0001 0022             		bset	#1,$22(a0)
0001B4B2 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B4B8 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B4BE 0828 0006 0022             		btst	#6,$22(a0)
0001B4C4 6700                       		beq.s	Hurt_Reverse
0001B4C6 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B4CC 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B4D2                            
0001B4D2                            Hurt_Reverse:
0001B4D2 3028 0008                  		move.w	8(a0),d0
0001B4D6 B06A 0008                  		cmp.w	8(a2),d0
0001B4DA 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B4DC 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B4E0                            
0001B4E0                            Hurt_ChkSpikes:
0001B4E0 317C 0000 0014             		move.w	#0,$14(a0)
0001B4E6 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B4EC 317C 0078 0030             		move.w	#$78,$30(a0)
0001B4F2 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B4F6 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B4FA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B4FC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B500 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B502 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B506                            
0001B506                            Hurt_Sound:
0001B506 4EB9 0000 1262             		jsr	(PlaySound_Special).l
0001B50C 70FF                       		moveq	#-1,d0
0001B50E 4E75                       		rts	
0001B510                            ; ===========================================================================
0001B510                            
0001B510                            Hurt_NoRings:
0001B510 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B514 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B518                            ; End of function HurtSonic
0001B518                            
0001B518                            ; ---------------------------------------------------------------------------
0001B518                            ; Subroutine to	kill Sonic
0001B518                            ; ---------------------------------------------------------------------------
0001B518                            
0001B518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B518                            
0001B518                            
0001B518                            KillSonic:
0001B518 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B51C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B51E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B524 117C 0006 0024             		move.b	#6,$24(a0)
0001B52A 6100 837A                  		bsr.w	Sonic_ResetOnFloor
0001B52E 08E8 0001 0022             		bset	#1,$22(a0)
0001B534 317C F900 0012             		move.w	#-$700,$12(a0)
0001B53A 317C 0000 0010             		move.w	#0,$10(a0)
0001B540 317C 0000 0014             		move.w	#0,$14(a0)
0001B546 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B54C 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B552 08E8 0007 0002             		bset	#7,2(a0)
0001B558 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B55C 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B560 6600                       		bne.s	Kill_Sound
0001B562 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B566                            
0001B566                            Kill_Sound:
0001B566 4EB9 0000 1262             		jsr	(PlaySound_Special).l
0001B56C                            
0001B56C                            Kill_NoDeath:
0001B56C 70FF                       		moveq	#-1,d0
0001B56E 4E75                       		rts	
0001B570                            ; End of function KillSonic
0001B570                            
0001B570                            
0001B570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B570                            
0001B570                            
0001B570                            Touch_Special:				; XREF: Touch_ChkValue
0001B570 1229 0020                  		move.b	$20(a1),d1
0001B574 0201 003F                  		andi.b	#$3F,d1
0001B578 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B57C 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B57E 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B582 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B584 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B588 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B58A 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B58E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B590 4E75                       		rts	
0001B592                            ; ===========================================================================
0001B592                            
0001B592                            Touch_CatKiller:			; XREF: Touch_Special
0001B592 6000 FE9A                  		bra.w	loc_1AFDA
0001B596                            ; ===========================================================================
0001B596                            
0001B596                            Touch_Yadrin:				; XREF: Touch_Special
0001B596 9A40                       		sub.w	d0,d5
0001B598 0C45 0008                  		cmpi.w	#8,d5
0001B59C 6400                       		bcc.s	loc_1B144
0001B59E 3029 0008                  		move.w	8(a1),d0
0001B5A2 5940                       		subq.w	#4,d0
0001B5A4 0829 0000 0022             		btst	#0,$22(a1)
0001B5AA 6700                       		beq.s	loc_1B130
0001B5AC 0440 0010                  		subi.w	#$10,d0
0001B5B0                            
0001B5B0                            loc_1B130:
0001B5B0 9042                       		sub.w	d2,d0
0001B5B2 6400                       		bcc.s	loc_1B13C
0001B5B4 0640 0018                  		addi.w	#$18,d0
0001B5B8 6500                       		bcs.s	loc_1B140
0001B5BA 6000                       		bra.s	loc_1B144
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_1B13C:
0001B5BC B044                       		cmp.w	d4,d0
0001B5BE 6200                       		bhi.s	loc_1B144
0001B5C0                            
0001B5C0                            loc_1B140:
0001B5C0 6000 FE72                  		bra.w	Touch_ChkHurt
0001B5C4                            ; ===========================================================================
0001B5C4                            
0001B5C4                            loc_1B144:
0001B5C4 6000 FD78                  		bra.w	Touch_Enemy
0001B5C8                            ; ===========================================================================
0001B5C8                            
0001B5C8                            Touch_D7orE1:				; XREF: Touch_Special
0001B5C8 5229 0021                  		addq.b	#1,$21(a1)
0001B5CC 4E75                       		rts	
0001B5CE                            ; End of function Touch_Special
0001B5CE                            
0001B5CE                            ; ---------------------------------------------------------------------------
0001B5CE                            ; Subroutine to	show the special stage layout
0001B5CE                            ; ---------------------------------------------------------------------------
0001B5CE                            
0001B5CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5CE                            
0001B5CE                            
0001B5CE                            SS_ShowLayout:				; XREF: SpecialStage
0001B5CE 4A78 F63A                  		tst.w	($FFFFF63A).w
0001B5D2 6600                       		bne.s	@noanimate
0001B5D4 6100 0000                  		bsr.w	SS_AniWallsRings
0001B5D8 6100 0000                  		bsr.w	SS_AniItems
0001B5DC                            
0001B5DC                            	@noanimate:
0001B5DC 3F05                       		move.w	d5,-(sp)
0001B5DE 43F8 8000                  		lea	($FFFF8000).w,a1
0001B5E2 1038 F780                  		move.b	($FFFFF780).w,d0
0001B5E6 0200 00FC                  		andi.b	#$FC,d0
0001B5EA 4EB9 0000 28EC             		jsr	(CalcSine).l
0001B5F0 3800                       		move.w	d0,d4
0001B5F2 3A01                       		move.w	d1,d5
0001B5F4 C9FC 0018                  		muls.w	#$18,d4
0001B5F8 CBFC 0018                  		muls.w	#$18,d5
0001B5FC 7400                       		moveq	#0,d2
0001B5FE 3438 F700                  		move.w	($FFFFF700).w,d2
0001B602 84FC 0018                  		divu.w	#$18,d2
0001B606 4842                       		swap	d2
0001B608 4442                       		neg.w	d2
0001B60A 0642 FF4C                  		addi.w	#-$B4,d2
0001B60E 7600                       		moveq	#0,d3
0001B610 3638 F704                  		move.w	($FFFFF704).w,d3
0001B614 86FC 0018                  		divu.w	#$18,d3
0001B618 4843                       		swap	d3
0001B61A 4443                       		neg.w	d3
0001B61C 0643 FF4C                  		addi.w	#-$B4,d3
0001B620 3E3C 000F                  		move.w	#$F,d7
0001B624                            
0001B624                            loc_1B19E:
0001B624 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B628 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B62C 4440                       		neg.w	d0
0001B62E C3C2                       		muls.w	d2,d1
0001B630 C1C3                       		muls.w	d3,d0
0001B632 2C00                       		move.l	d0,d6
0001B634 DC81                       		add.l	d1,d6
0001B636 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B63A C1C2                       		muls.w	d2,d0
0001B63C C3C3                       		muls.w	d3,d1
0001B63E D280                       		add.l	d0,d1
0001B640 2406                       		move.l	d6,d2
0001B642 3C3C 000F                  		move.w	#$F,d6
0001B646                            
0001B646                            loc_1B1C0:
0001B646 2002                       		move.l	d2,d0
0001B648 E080                       		asr.l	#8,d0
0001B64A 32C0                       		move.w	d0,(a1)+
0001B64C 2001                       		move.l	d1,d0
0001B64E E080                       		asr.l	#8,d0
0001B650 32C0                       		move.w	d0,(a1)+
0001B652 D485                       		add.l	d5,d2
0001B654 D284                       		add.l	d4,d1
0001B656 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B65A                            
0001B65A 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B65E 0643 0018                  		addi.w	#$18,d3
0001B662 51CF FFC0                  		dbf	d7,loc_1B19E
0001B666                            
0001B666 3A1F                       		move.w	(sp)+,d5
0001B668 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B66E 7000                       		moveq	#0,d0
0001B670 3038 F704                  		move.w	($FFFFF704).w,d0
0001B674 80FC 0018                  		divu.w	#$18,d0
0001B678 C0FC 0080                  		mulu.w	#$80,d0
0001B67C D1C0                       		adda.l	d0,a0
0001B67E 7000                       		moveq	#0,d0
0001B680 3038 F700                  		move.w	($FFFFF700).w,d0
0001B684 80FC 0018                  		divu.w	#$18,d0
0001B688 D0C0                       		adda.w	d0,a0
0001B68A 49F8 8000                  		lea	($FFFF8000).w,a4
0001B68E 3E3C 000F                  		move.w	#$F,d7
0001B692                            
0001B692                            loc_1B20C:
0001B692 3C3C 000F                  		move.w	#$F,d6
0001B696                            
0001B696                            loc_1B210:
0001B696 7000                       		moveq	#0,d0
0001B698 1018                       		move.b	(a0)+,d0
0001B69A 6700                       		beq.s	loc_1B268
0001B69C 0C00 004E                  		cmpi.b	#$4E,d0
0001B6A0 6200                       		bhi.s	loc_1B268
0001B6A2 3614                       		move.w	(a4),d3
0001B6A4 0643 0120                  		addi.w	#$120,d3
0001B6A8 0C43 0070                  		cmpi.w	#$70,d3
0001B6AC 6500                       		bcs.s	loc_1B268
0001B6AE 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B6B2 6400                       		bcc.s	loc_1B268
0001B6B4 342C 0002                  		move.w	2(a4),d2
0001B6B8 0642 00F0                  		addi.w	#$F0,d2
0001B6BC 0C42 0070                  		cmpi.w	#$70,d2
0001B6C0 6500                       		bcs.s	loc_1B268
0001B6C2 0C42 0170                  		cmpi.w	#$170,d2
0001B6C6 6400                       		bcc.s	loc_1B268
0001B6C8 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B6CE E748                       		lsl.w	#3,d0
0001B6D0 4BF5 0000                  		lea	(a5,d0.w),a5
0001B6D4 225D                       		movea.l	(a5)+,a1
0001B6D6 321D                       		move.w	(a5)+,d1
0001B6D8 D241                       		add.w	d1,d1
0001B6DA D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B6DE 365D                       		movea.w	(a5)+,a3
0001B6E0 7200                       		moveq	#0,d1
0001B6E2 1219                       		move.b	(a1)+,d1
0001B6E4 5301                       		subq.b	#1,d1
0001B6E6 6B00                       		bmi.s	loc_1B268
0001B6E8 4EB9 0000 D80E             		jsr	sub_D762
0001B6EE                            
0001B6EE                            loc_1B268:
0001B6EE 584C                       		addq.w	#4,a4
0001B6F0 51CE FFA4                  		dbf	d6,loc_1B210
0001B6F4                            
0001B6F4 41E8 0070                  		lea	$70(a0),a0
0001B6F8 51CF FF98                  		dbf	d7,loc_1B20C
0001B6FC                            
0001B6FC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B700 0C05 0050                  		cmpi.b	#$50,d5
0001B704 6700                       		beq.s	loc_1B288
0001B706 24BC 0000 0000             		move.l	#0,(a2)
0001B70C 4E75                       		rts	
0001B70E                            ; ===========================================================================
0001B70E                            
0001B70E                            loc_1B288:
0001B70E 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B714 4E75                       		rts	
0001B716                            ; End of function SS_ShowLayout
0001B716                            
0001B716                            ; ---------------------------------------------------------------------------
0001B716                            ; Subroutine to	animate	walls and rings	in the special stage
0001B716                            ; ---------------------------------------------------------------------------
0001B716                            
0001B716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B716                            
0001B716                            
0001B716                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B716 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B71C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B720 6A00                       		bpl.s	loc_1B2C8
0001B722 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B728 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B72C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B732                            
0001B732                            loc_1B2C8:
0001B732 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B738 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B73C 6A00                       		bpl.s	loc_1B2E4
0001B73E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B744 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B748 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B74E                            
0001B74E                            loc_1B2E4:
0001B74E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B752 1340 0138                  		move.b	d0,$138(a1)
0001B756 1340 0160                  		move.b	d0,$160(a1)
0001B75A 1340 0148                  		move.b	d0,$148(a1)
0001B75E 1340 0150                  		move.b	d0,$150(a1)
0001B762 1340 01D8                  		move.b	d0,$1D8(a1)
0001B766 1340 01E0                  		move.b	d0,$1E0(a1)
0001B76A 1340 01E8                  		move.b	d0,$1E8(a1)
0001B76E 1340 01F0                  		move.b	d0,$1F0(a1)
0001B772 1340 01F8                  		move.b	d0,$1F8(a1)
0001B776 1340 0200                  		move.b	d0,$200(a1)
0001B77A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B77E 6A00                       		bpl.s	loc_1B326
0001B780 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B786 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B78A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B790                            
0001B790                            loc_1B326:
0001B790 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B794 1340 0168                  		move.b	d0,$168(a1)
0001B798 1340 0170                  		move.b	d0,$170(a1)
0001B79C 1340 0178                  		move.b	d0,$178(a1)
0001B7A0 1340 0180                  		move.b	d0,$180(a1)
0001B7A4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B7A8 6A00                       		bpl.s	loc_1B350
0001B7AA 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B7B0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B7B4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B7BA                            
0001B7BA                            loc_1B350:
0001B7BA 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B7C0 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B7C6 7000                       		moveq	#0,d0
0001B7C8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B7CC D040                       		add.w	d0,d0
0001B7CE 41F0 0000                  		lea	(a0,d0.w),a0
0001B7D2 3290                       		move.w	(a0),(a1)
0001B7D4 3368 0002 0008             		move.w	2(a0),8(a1)
0001B7DA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B7E0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B7E6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B7EC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B7F2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B7F8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B7FE D0FC 0020                  		adda.w	#$20,a0
0001B802 D2FC 0048                  		adda.w	#$48,a1
0001B806 3290                       		move.w	(a0),(a1)
0001B808 3368 0002 0008             		move.w	2(a0),8(a1)
0001B80E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B814 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B81A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B820 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B826 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B82C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B832 D0FC 0020                  		adda.w	#$20,a0
0001B836 D2FC 0048                  		adda.w	#$48,a1
0001B83A 3290                       		move.w	(a0),(a1)
0001B83C 3368 0002 0008             		move.w	2(a0),8(a1)
0001B842 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B848 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B84E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B854 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B85A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B860 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B866 D0FC 0020                  		adda.w	#$20,a0
0001B86A D2FC 0048                  		adda.w	#$48,a1
0001B86E 3290                       		move.w	(a0),(a1)
0001B870 3368 0002 0008             		move.w	2(a0),8(a1)
0001B876 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B87C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B882 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B888 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B88E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B894 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B89A D0FC 0020                  		adda.w	#$20,a0
0001B89E D2FC 0048                  		adda.w	#$48,a1
0001B8A2 4E75                       		rts	
0001B8A4                            ; End of function SS_AniWallsRings
0001B8A4                            
0001B8A4                            SS_LoadWalls:
0001B8A4 7000                       		moveq	#0,d0
0001B8A6 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001B8AA E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001B8AC 0240 000F                  		andi.w	#$F,d0
0001B8B0 B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001B8B4 6700                       		beq.s	@return			; if so, branch
0001B8B6                            
0001B8B6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001B8BC 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001B8C2 3200                       		move.w	d0,d1
0001B8C4 E149                       		lsl.w	#8,d1
0001B8C6 D241                       		add.w	d1,d1
0001B8C8 D2C1                       		add.w	d1,a1
0001B8CA                            
0001B8D4                            
0001B8D4 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001B8D8 4EB9 0000 0000             		jsr	LoadTiles
0001B8DE 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001B8E2                            
0001B8E2                            	@return:
0001B8E2 4E75                       		rts
0001B8E4                            
0001B8E4                            ; ===========================================================================
0001B8E4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B8F4 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B904 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B914 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B924 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B934 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B944 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B954 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B964                            ; ---------------------------------------------------------------------------
0001B964                            ; Subroutine to	remove items when you collect them in the special stage
0001B964                            ; ---------------------------------------------------------------------------
0001B964                            
0001B964                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B964                            
0001B964                            
0001B964                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B964 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B96A 303C 001F                  		move.w	#$1F,d0
0001B96E                            
0001B96E                            loc_1B4C4:
0001B96E 4A12                       		tst.b	(a2)
0001B970 6700                       		beq.s	locret_1B4CE
0001B972 504A                       		addq.w	#8,a2
0001B974 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B978                            
0001B978                            locret_1B4CE:
0001B978 4E75                       		rts	
0001B97A                            ; End of function SS_RemoveCollectedItem
0001B97A                            
0001B97A                            ; ---------------------------------------------------------------------------
0001B97A                            ; Subroutine to	animate	special	stage items when you touch them
0001B97A                            ; ---------------------------------------------------------------------------
0001B97A                            
0001B97A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B97A                            
0001B97A                            
0001B97A                            SS_AniItems:				; XREF: SS_ShowLayout
0001B97A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B980 3E3C 001F                  		move.w	#$1F,d7
0001B984                            
0001B984                            loc_1B4DA:
0001B984 7000                       		moveq	#0,d0
0001B986 1010                       		move.b	(a0),d0
0001B988 6700                       		beq.s	loc_1B4E8
0001B98A E548                       		lsl.w	#2,d0
0001B98C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B990 4E91                       		jsr	(a1)
0001B992                            
0001B992                            loc_1B4E8:
0001B992 5048                       		addq.w	#8,a0
0001B994                            
0001B994                            loc_1B4EA:
0001B994 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B998                            
0001B998 4E75                       		rts	
0001B99A                            ; End of function SS_AniItems
0001B99A                            
0001B99A                            ; ===========================================================================
0001B99A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B99E 0000 0000                  		dc.l SS_AniBumper
0001B9A2 0000 0000                  		dc.l SS_Ani1Up
0001B9A6 0000 0000                  		dc.l SS_AniReverse
0001B9AA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B9AE 0000 0000                  		dc.l SS_AniGlassBlock
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B9B2 5328 0002                  		subq.b	#1,2(a0)
0001B9B6 6A00                       		bpl.s	locret_1B530
0001B9B8 117C 0005 0002             		move.b	#5,2(a0)
0001B9BE 7000                       		moveq	#0,d0
0001B9C0 1028 0003                  		move.b	3(a0),d0
0001B9C4 5228 0003                  		addq.b	#1,3(a0)
0001B9C8 2268 0004                  		movea.l	4(a0),a1
0001B9CC 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B9D0 1280                       		move.b	d0,(a1)
0001B9D2 6600                       		bne.s	locret_1B530
0001B9D4 4290                       		clr.l	(a0)
0001B9D6 42A8 0004                  		clr.l	4(a0)
0001B9DA                            
0001B9DA                            locret_1B530:
0001B9DA 4E75                       		rts	
0001B9DC                            ; ===========================================================================
0001B9DC 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B9E2                            ; ===========================================================================
0001B9E2                            
0001B9E2                            SS_AniBumper:				; XREF: SS_AniIndex
0001B9E2 5328 0002                  		subq.b	#1,2(a0)
0001B9E6 6A00                       		bpl.s	locret_1B566
0001B9E8 117C 0007 0002             		move.b	#7,2(a0)
0001B9EE 7000                       		moveq	#0,d0
0001B9F0 1028 0003                  		move.b	3(a0),d0
0001B9F4 5228 0003                  		addq.b	#1,3(a0)
0001B9F8 2268 0004                  		movea.l	4(a0),a1
0001B9FC 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BA00 6600                       		bne.s	loc_1B564
0001BA02 4290                       		clr.l	(a0)
0001BA04 42A8 0004                  		clr.l	4(a0)
0001BA08 12BC 0025                  		move.b	#$25,(a1)
0001BA0C 4E75                       		rts	
0001BA0E                            ; ===========================================================================
0001BA0E                            
0001BA0E                            loc_1B564:
0001BA0E 1280                       		move.b	d0,(a1)
0001BA10                            
0001BA10                            locret_1B566:
0001BA10 4E75                       		rts	
0001BA12                            ; ===========================================================================
0001BA12 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BA18                            ; ===========================================================================
0001BA18                            
0001BA18                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BA18 5328 0002                  		subq.b	#1,2(a0)
0001BA1C 6A00                       		bpl.s	locret_1B596
0001BA1E 117C 0005 0002             		move.b	#5,2(a0)
0001BA24 7000                       		moveq	#0,d0
0001BA26 1028 0003                  		move.b	3(a0),d0
0001BA2A 5228 0003                  		addq.b	#1,3(a0)
0001BA2E 2268 0004                  		movea.l	4(a0),a1
0001BA32 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BA36 1280                       		move.b	d0,(a1)
0001BA38 6600                       		bne.s	locret_1B596
0001BA3A 4290                       		clr.l	(a0)
0001BA3C 42A8 0004                  		clr.l	4(a0)
0001BA40                            
0001BA40                            locret_1B596:
0001BA40 4E75                       		rts	
0001BA42                            ; ===========================================================================
0001BA42 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BA48                            ; ===========================================================================
0001BA48                            
0001BA48                            SS_AniReverse:				; XREF: SS_AniIndex
0001BA48 5328 0002                  		subq.b	#1,2(a0)
0001BA4C 6A00                       		bpl.s	locret_1B5CC
0001BA4E 117C 0007 0002             		move.b	#7,2(a0)
0001BA54 7000                       		moveq	#0,d0
0001BA56 1028 0003                  		move.b	3(a0),d0
0001BA5A 5228 0003                  		addq.b	#1,3(a0)
0001BA5E 2268 0004                  		movea.l	4(a0),a1
0001BA62 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BA66 6600                       		bne.s	loc_1B5CA
0001BA68 4290                       		clr.l	(a0)
0001BA6A 42A8 0004                  		clr.l	4(a0)
0001BA6E 12BC 002B                  		move.b	#$2B,(a1)
0001BA72 4E75                       		rts	
0001BA74                            ; ===========================================================================
0001BA74                            
0001BA74                            loc_1B5CA:
0001BA74 1280                       		move.b	d0,(a1)
0001BA76                            
0001BA76                            locret_1B5CC:
0001BA76 4E75                       		rts	
0001BA78                            ; ===========================================================================
0001BA78 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BA7E                            ; ===========================================================================
0001BA7E                            
0001BA7E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BA7E 5328 0002                  		subq.b	#1,2(a0)
0001BA82 6A00                       		bpl.s	locret_1B60C
0001BA84 117C 0005 0002             		move.b	#5,2(a0)
0001BA8A 7000                       		moveq	#0,d0
0001BA8C 1028 0003                  		move.b	3(a0),d0
0001BA90 5228 0003                  		addq.b	#1,3(a0)
0001BA94 2268 0004                  		movea.l	4(a0),a1
0001BA98 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BA9C 1280                       		move.b	d0,(a1)
0001BA9E 6600                       		bne.s	locret_1B60C
0001BAA0 4290                       		clr.l	(a0)
0001BAA2 42A8 0004                  		clr.l	4(a0)
0001BAA6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BAAC 303C 00A8                  		move.w	#$A8,d0
0001BAB0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BAB6                            
0001BAB6                            locret_1B60C:
0001BAB6 4E75                       		rts	
0001BAB8                            ; ===========================================================================
0001BAB8 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BABE                            ; ===========================================================================
0001BABE                            
0001BABE                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BABE 5328 0002                  		subq.b	#1,2(a0)
0001BAC2 6A00                       		bpl.s	locret_1B640
0001BAC4 117C 0001 0002             		move.b	#1,2(a0)
0001BACA 7000                       		moveq	#0,d0
0001BACC 1028 0003                  		move.b	3(a0),d0
0001BAD0 5228 0003                  		addq.b	#1,3(a0)
0001BAD4 2268 0004                  		movea.l	4(a0),a1
0001BAD8 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BADC 1280                       		move.b	d0,(a1)
0001BADE 6600                       		bne.s	locret_1B640
0001BAE0 12A8 0004                  		move.b	4(a0),(a1)
0001BAE4 4290                       		clr.l	(a0)
0001BAE6 42A8 0004                  		clr.l	4(a0)
0001BAEA                            
0001BAEA                            locret_1B640:
0001BAEA 4E75                       		rts	
0001BAEC                            ; ===========================================================================
0001BAEC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BAF6                            ; ---------------------------------------------------------------------------
0001BAF6                            ; Special stage	layout pointers
0001BAF6                            ; ---------------------------------------------------------------------------
0001BAF6                            SS_LayoutIndex:
0001BAF6                            	include "_inc\Special stage layout pointers.asm"
0001BAF6                            ; ---------------------------------------------------------------------------
0001BAF6                            ; Special stage	layout pointers
0001BAF6                            ; ---------------------------------------------------------------------------
0001BAF6 0000 0000                  	dc.l SS_1
0001BAFA 0000 0000                  	dc.l SS_2
0001BAFE 0000 0000                  	dc.l SS_3
0001BB02 0000 0000                  	dc.l SS_4
0001BB06 0000 0000                  	dc.l SS_5
0001BB0A 0000 0000                  	dc.l SS_6
0001BB0E                            	even
0001BB0E                            	even
0001BB0E                            
0001BB0E                            ; ---------------------------------------------------------------------------
0001BB0E                            ; Special stage	start locations
0001BB0E                            ; ---------------------------------------------------------------------------
0001BB0E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BB26                            		even
0001BB26                            
0001BB26                            ; ---------------------------------------------------------------------------
0001BB26                            ; Subroutine to	load special stage layout
0001BB26                            ; ---------------------------------------------------------------------------
0001BB26                            
0001BB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB26                            
0001BB26                            
0001BB26                            SS_Load:				; XREF: SpecialStage
0001BB26 7000                       		moveq	#0,d0
0001BB28 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BB2C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BB30 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BB36 6500                       		bcs.s	SS_ChkEmldNum
0001BB38 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BB3E                            
0001BB3E                            SS_ChkEmldNum:
0001BB3E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BB44 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BB46 7200                       		moveq	#0,d1
0001BB48 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BB4C 5301                       		subq.b	#1,d1
0001BB4E 6500                       		bcs.s	SS_LoadData
0001BB50 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BB54                            
0001BB54                            SS_ChkEmldLoop:	
0001BB54 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BB58 6600                       		bne.s	SS_ChkEmldRepeat
0001BB5A 60CA                       		bra.s	SS_Load
0001BB5C                            ; ===========================================================================
0001BB5C                            
0001BB5C                            SS_ChkEmldRepeat:
0001BB5C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BB60                            
0001BB60                            SS_LoadData:
0001BB60 E548                       		lsl.w	#2,d0
0001BB62 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BB66 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BB6A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BB6E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BB72 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BB78 303C 0000                  		move.w	#0,d0
0001BB7C 4EB9 0000 1628             		jsr	(EniDec).l
0001BB82 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BB88 303C 0FFF                  		move.w	#$FFF,d0
0001BB8C                            
0001BB8C                            SS_ClrRAM3:
0001BB8C 4299                       		clr.l	(a1)+
0001BB8E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BB92                            
0001BB92 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BB98 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BB9E 723F                       		moveq	#$3F,d1
0001BBA0                            
0001BBA0                            loc_1B6F6:
0001BBA0 743F                       		moveq	#$3F,d2
0001BBA2                            
0001BBA2                            loc_1B6F8:
0001BBA2 12D8                       		move.b	(a0)+,(a1)+
0001BBA4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BBA8                            
0001BBA8 43E9 0040                  		lea	$40(a1),a1
0001BBAC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BBB0                            
0001BBB0 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BBB6 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BBBC 724D                       		moveq	#$4D,d1
0001BBBE                            
0001BBBE                            loc_1B714:
0001BBBE 22D8                       		move.l	(a0)+,(a1)+
0001BBC0 32FC 0000                  		move.w	#0,(a1)+
0001BBC4 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BBCA 32D8                       		move.w	(a0)+,(a1)+
0001BBCC 51C9 FFF0                  		dbf	d1,loc_1B714
0001BBD0                            
0001BBD0 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BBD6 323C 003F                  		move.w	#$3F,d1
0001BBDA                            
0001BBDA                            loc_1B730:
0001BBDA                            
0001BBDA 4299                       		clr.l	(a1)+
0001BBDC 51C9 FFFC                  		dbf	d1,loc_1B730
0001BBE0                            
0001BBE0 4E75                       		rts	
0001BBE2                            ; End of function SS_Load
0001BBE2                            
0001BBE2                            ; ===========================================================================
0001BBE2                            ; ---------------------------------------------------------------------------
0001BBE2                            ; Special stage	mappings and VRAM pointers
0001BBE2                            ; ---------------------------------------------------------------------------
0001BBE2                            SS_MapIndex:
0001BBE2                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BBE2                            ; ---------------------------------------------------------------------------
0001BBE2                            ; Special stage	mappings and VRAM pointers
0001BBE2                            ; ---------------------------------------------------------------------------
0001BBE2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BBE6 0142                       	dc.w $142		; VRAM setting
0001BBE8 0000 0000                  	dc.l Map_SSWalls
0001BBEC 0142                       	dc.w $142
0001BBEE 0000 0000                  	dc.l Map_SSWalls
0001BBF2 0142                       	dc.w $142
0001BBF4 0000 0000                  	dc.l Map_SSWalls
0001BBF8 0142                       	dc.w $142
0001BBFA 0000 0000                  	dc.l Map_SSWalls
0001BBFE 0142                       	dc.w $142
0001BC00 0000 0000                  	dc.l Map_SSWalls
0001BC04 0142                       	dc.w $142
0001BC06 0000 0000                  	dc.l Map_SSWalls
0001BC0A 0142                       	dc.w $142
0001BC0C 0000 0000                  	dc.l Map_SSWalls
0001BC10 0142                       	dc.w $142
0001BC12 0000 0000                  	dc.l Map_SSWalls
0001BC16 0142                       	dc.w $142
0001BC18 0000 0000                  	dc.l Map_SSWalls
0001BC1C 2142                       	dc.w $2142
0001BC1E 0000 0000                  	dc.l Map_SSWalls
0001BC22 2142                       	dc.w $2142
0001BC24 0000 0000                  	dc.l Map_SSWalls
0001BC28 2142                       	dc.w $2142
0001BC2A 0000 0000                  	dc.l Map_SSWalls
0001BC2E 2142                       	dc.w $2142
0001BC30 0000 0000                  	dc.l Map_SSWalls
0001BC34 2142                       	dc.w $2142
0001BC36 0000 0000                  	dc.l Map_SSWalls
0001BC3A 2142                       	dc.w $2142
0001BC3C 0000 0000                  	dc.l Map_SSWalls
0001BC40 2142                       	dc.w $2142
0001BC42 0000 0000                  	dc.l Map_SSWalls
0001BC46 2142                       	dc.w $2142
0001BC48 0000 0000                  	dc.l Map_SSWalls
0001BC4C 2142                       	dc.w $2142
0001BC4E 0000 0000                  	dc.l Map_SSWalls
0001BC52 4142                       	dc.w $4142
0001BC54 0000 0000                  	dc.l Map_SSWalls
0001BC58 4142                       	dc.w $4142
0001BC5A 0000 0000                  	dc.l Map_SSWalls
0001BC5E 4142                       	dc.w $4142
0001BC60 0000 0000                  	dc.l Map_SSWalls
0001BC64 4142                       	dc.w $4142
0001BC66 0000 0000                  	dc.l Map_SSWalls
0001BC6A 4142                       	dc.w $4142
0001BC6C 0000 0000                  	dc.l Map_SSWalls
0001BC70 4142                       	dc.w $4142
0001BC72 0000 0000                  	dc.l Map_SSWalls
0001BC76 4142                       	dc.w $4142
0001BC78 0000 0000                  	dc.l Map_SSWalls
0001BC7C 4142                       	dc.w $4142
0001BC7E 0000 0000                  	dc.l Map_SSWalls
0001BC82 4142                       	dc.w $4142
0001BC84 0000 0000                  	dc.l Map_SSWalls
0001BC88 6142                       	dc.w $6142
0001BC8A 0000 0000                  	dc.l Map_SSWalls
0001BC8E 6142                       	dc.w $6142
0001BC90 0000 0000                  	dc.l Map_SSWalls
0001BC94 6142                       	dc.w $6142
0001BC96 0000 0000                  	dc.l Map_SSWalls
0001BC9A 6142                       	dc.w $6142
0001BC9C 0000 0000                  	dc.l Map_SSWalls
0001BCA0 6142                       	dc.w $6142
0001BCA2 0000 0000                  	dc.l Map_SSWalls
0001BCA6 6142                       	dc.w $6142
0001BCA8 0000 0000                  	dc.l Map_SSWalls
0001BCAC 6142                       	dc.w $6142
0001BCAE 0000 0000                  	dc.l Map_SSWalls
0001BCB2 6142                       	dc.w $6142
0001BCB4 0000 0000                  	dc.l Map_SSWalls
0001BCB8 6142                       	dc.w $6142
0001BCBA 0000 EBB0                  	dc.l Map_obj47
0001BCBE 023B                       	dc.w $23B
0001BCC0 0000 0000                  	dc.l Map_SS_R
0001BCC4 0570                       	dc.w $570
0001BCC6 0000 0000                  	dc.l Map_SS_R
0001BCCA 0251                       	dc.w $251
0001BCCC 0000 0000                  	dc.l Map_SS_R
0001BCD0 0370                       	dc.w $370
0001BCD2 0000 0000                  	dc.l Map_SS_Up
0001BCD6 0263                       	dc.w $263
0001BCD8 0000 0000                  	dc.l Map_SS_Down
0001BCDC 0263                       	dc.w $263
0001BCDE 0000 0000                  	dc.l Map_SS_R
0001BCE2 22F0                       	dc.w $22F0
0001BCE4 0000 0000                  	dc.l Map_SS_Glass
0001BCE8 0470                       	dc.w $470
0001BCEA 0000 0000                  	dc.l Map_SS_Glass
0001BCEE 05F0                       	dc.w $5F0
0001BCF0 0000 0000                  	dc.l Map_SS_Glass
0001BCF4 65F0                       	dc.w $65F0
0001BCF6 0000 0000                  	dc.l Map_SS_Glass
0001BCFA 25F0                       	dc.w $25F0
0001BCFC 0000 0000                  	dc.l Map_SS_Glass
0001BD00 45F0                       	dc.w $45F0
0001BD02 0000 0000                  	dc.l Map_SS_R
0001BD06 02F0                       	dc.w $2F0
0001BD08 0100 EBB0                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BD0C 023B                       	dc.w $23B
0001BD0E 0200 EBB0                  	dc.l Map_obj47+$2000000
0001BD12 023B                       	dc.w $23B
0001BD14 0000 0000                  	dc.l Map_SS_R
0001BD18 0797                       	dc.w $797
0001BD1A 0000 0000                  	dc.l Map_SS_R
0001BD1E 07A0                       	dc.w $7A0
0001BD20 0000 0000                  	dc.l Map_SS_R
0001BD24 07A9                       	dc.w $7A9
0001BD26 0000 0000                  	dc.l Map_SS_R
0001BD2A 0797                       	dc.w $797
0001BD2C 0000 0000                  	dc.l Map_SS_R
0001BD30 07A0                       	dc.w $7A0
0001BD32 0000 0000                  	dc.l Map_SS_R
0001BD36 07A9                       	dc.w $7A9
0001BD38 0000 A00A                  	dc.l Map_obj25
0001BD3C 222D                       	dc.w $2000+ssringart
0001BD3E 0000 0000                  	dc.l Map_SS_Chaos3
0001BD42 0770                       	dc.w $770
0001BD44 0000 0000                  	dc.l Map_SS_Chaos3
0001BD48 2770                       	dc.w $2770
0001BD4A 0000 0000                  	dc.l Map_SS_Chaos3
0001BD4E 4770                       	dc.w $4770
0001BD50 0000 0000                  	dc.l Map_SS_Chaos3
0001BD54 6770                       	dc.w $6770
0001BD56 0000 0000                  	dc.l Map_SS_Chaos1
0001BD5A 0770                       	dc.w $770
0001BD5C 0000 0000                  	dc.l Map_SS_Chaos2
0001BD60 0770                       	dc.w $770
0001BD62 0000 0000                  	dc.l Map_SS_R
0001BD66 04F0                       	dc.w $4F0
0001BD68 0400 A00A                  	dc.l Map_obj25+$4000000
0001BD6C 222D                       	dc.w $2000+ssringart
0001BD6E 0500 A00A                  	dc.l Map_obj25+$5000000
0001BD72 222D                       	dc.w $2000+ssringart
0001BD74 0600 A00A                  	dc.l Map_obj25+$6000000
0001BD78 222D                       	dc.w $2000+ssringart
0001BD7A 0700 A00A                  	dc.l Map_obj25+$7000000
0001BD7E 222D                       	dc.w $2000+ssringart
0001BD80 0000 0000                  	dc.l Map_SS_Glass
0001BD84 23F0                       	dc.w $23F0
0001BD86 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BD8A 23F0                       	dc.w $23F0
0001BD8C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BD90 23F0                       	dc.w $23F0
0001BD92 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BD96 23F0                       	dc.w $23F0
0001BD98 0000 0000                  	dc.l Map_SS_R+$2000000
0001BD9C 04F0                       	dc.w $4F0
0001BD9E 0000 0000                  	dc.l Map_SS_Glass
0001BDA2 05F0                       	dc.w $5F0
0001BDA4 0000 0000                  	dc.l Map_SS_Glass
0001BDA8 65F0                       	dc.w $65F0
0001BDAA 0000 0000                  	dc.l Map_SS_Glass
0001BDAE 25F0                       	dc.w $25F0
0001BDB0 0000 0000                  	dc.l Map_SS_Glass
0001BDB4 45F0                       	dc.w $45F0
0001BDB4 45F0                       	dc.w $45F0
0001BDB6                            
0001BDB6                            ; ---------------------------------------------------------------------------
0001BDB6                            ; Sprite mappings - special stage "R" block
0001BDB6                            ; ---------------------------------------------------------------------------
0001BDB6                            Map_SS_R:
0001BDB6                            	include "_maps\SSRblock.asm"
0001BDB6                            ; ---------------------------------------------------------------------------
0001BDB6                            ; Sprite mappings - special stage "R" block
0001BDB6                            ; ---------------------------------------------------------------------------
0001BDB6 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BDBA 0000                       		dc.w byte_1B91E-Map_SS_R
0001BDBC 01                         byte_1B912:	dc.b 1
0001BDBD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BDC2 01                         byte_1B918:	dc.b 1
0001BDC3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BDC8 00                         byte_1B91E:	dc.b 0
0001BDCA 00                         		even
0001BDCA 00                         		even
0001BDCA                            
0001BDCA                            ; ---------------------------------------------------------------------------
0001BDCA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BDCA                            ; ---------------------------------------------------------------------------
0001BDCA                            Map_SS_Glass:
0001BDCA                            	include "_maps\SSglassblock.asm"
0001BDCA                            ; ---------------------------------------------------------------------------
0001BDCA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BDCA                            ; ---------------------------------------------------------------------------
0001BDCA 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BDCE 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BDD2 01                         byte_1B928:	dc.b 1
0001BDD3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BDD8 01                         byte_1B92E:	dc.b 1
0001BDD9 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BDDE 01                         byte_1B934:	dc.b 1
0001BDDF F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BDE4 01                         byte_1B93A:	dc.b 1
0001BDE5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BDEA                            		even
0001BDEA                            		even
0001BDEA                            
0001BDEA                            ; ---------------------------------------------------------------------------
0001BDEA                            ; Sprite mappings - special stage "UP" block
0001BDEA                            ; ---------------------------------------------------------------------------
0001BDEA                            Map_SS_Up:
0001BDEA                            	include "_maps\SSUPblock.asm"
0001BDEA                            ; ---------------------------------------------------------------------------
0001BDEA                            ; Sprite mappings - special stage "UP" block
0001BDEA                            ; ---------------------------------------------------------------------------
0001BDEA 0000                       		dc.w byte_1B944-Map_SS_Up
0001BDEC 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BDEE 01                         byte_1B944:	dc.b 1
0001BDEF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BDF4 01                         byte_1B94A:	dc.b 1
0001BDF5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BDFA                            		even
0001BDFA                            		even
0001BDFA                            
0001BDFA                            ; ---------------------------------------------------------------------------
0001BDFA                            ; Sprite mappings - special stage "DOWN" block
0001BDFA                            ; ---------------------------------------------------------------------------
0001BDFA                            Map_SS_Down:
0001BDFA                            	include "_maps\SSDOWNblock.asm"
0001BDFA                            ; ---------------------------------------------------------------------------
0001BDFA                            ; Sprite mappings - special stage "DOWN" block
0001BDFA                            ; ---------------------------------------------------------------------------
0001BDFA 0000                       		dc.w byte_1B954-Map_SS_Down
0001BDFC 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BDFE 01                         byte_1B954:	dc.b 1
0001BDFF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BE04 01                         byte_1B95A:	dc.b 1
0001BE05 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BE0A                            		even
0001BE0A                            		even
0001BE0A                            
0001BE0A                            ; ---------------------------------------------------------------------------
0001BE0A                            ; Sprite mappings - special stage chaos	emeralds
0001BE0A                            ; ---------------------------------------------------------------------------
0001BE0A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BE0C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BE0E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BE10 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BE12 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BE14 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BE16 01                         byte_1B96C:	dc.b 1
0001BE17 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BE1C 01                         byte_1B972:	dc.b 1
0001BE1D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BE22 01                         byte_1B978:	dc.b 1
0001BE23 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BE28 01                         byte_1B97E:	dc.b 1
0001BE29 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BE2E                            		even
0001BE2E                            ; ===========================================================================
0001BE2E                            ; ---------------------------------------------------------------------------
0001BE2E                            ; Object 09 - Sonic (special stage)
0001BE2E                            ; ---------------------------------------------------------------------------
0001BE2E                            
0001BE2E                            Obj09:					; XREF: Obj_Index
0001BE2E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BE32 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BE34 6100 0000                  		bsr.w	SS_FixCamera
0001BE38 6000 0000                  		bra.w	DebugMode
0001BE3C                            ; ===========================================================================
0001BE3C                            
0001BE3C                            Obj09_Normal:
0001BE3C 7000                       		moveq	#0,d0
0001BE3E 1028 0024                  		move.b	$24(a0),d0
0001BE42 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BE46 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BE4A                            ; ===========================================================================
0001BE4A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BE4C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BE4E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BE50 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BE52                            ; ===========================================================================
0001BE52                            
0001BE52                            Obj09_Main:				; XREF: Obj09_Index
0001BE52 5428 0024                  		addq.b	#2,$24(a0)
0001BE56 117C 000E 0016             		move.b	#$E,$16(a0)
0001BE5C 117C 0007 0017             		move.b	#7,$17(a0)
0001BE62 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BE6A 317C 0780 0002             		move.w	#$780,2(a0)
0001BE70 117C 0004 0001             		move.b	#4,1(a0)
0001BE76 117C 0000 0018             		move.b	#0,$18(a0)
0001BE7C 117C 0002 001C             		move.b	#2,$1C(a0)
0001BE82 08E8 0002 0022             		bset	#2,$22(a0)
0001BE88 08E8 0001 0022             		bset	#1,$22(a0)
0001BE8E                            
0001BE8E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BE8E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BE92 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BE94 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BE9A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BE9C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BEA2                            
0001BEA2                            Obj09_NoDebug:
0001BEA2 117C 0000 0030             		move.b	#0,$30(a0)
0001BEA8 7000                       		moveq	#0,d0
0001BEAA 1028 0022                  		move.b	$22(a0),d0
0001BEAE 0240 0002                  		andi.w	#2,d0
0001BEB2 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BEB6 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BEBA 4EB9 0001 3D4C             		jsr	LoadSonicDynPLC
0001BEC0 4EF9 0000 D6AA             		jmp	DisplaySprite
0001BEC6                            ; ===========================================================================
0001BEC6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BEC8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BECA                            ; ===========================================================================
0001BECA                            
0001BECA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BECA 6100 0000                  		bsr.w	Obj09_Jump
0001BECE 6100 0000                  		bsr.w	Obj09_Move
0001BED2 6100 0000                  		bsr.w	Obj09_Fall
0001BED6 6000                       		bra.s	Obj09_Display
0001BED8                            ; ===========================================================================
0001BED8                            
0001BED8                            Obj09_InAir:				; XREF: Obj09_Modes
0001BED8 6100 0000                  		bsr.w	nullsub_2
0001BEDC 6100 0000                  		bsr.w	Obj09_Move
0001BEE0 6100 0000                  		bsr.w	Obj09_Fall
0001BEE4                            
0001BEE4                            Obj09_Display:				; XREF: Obj09_OnWall
0001BEE4 6100 0000                  		bsr.w	Obj09_ChkItems
0001BEE8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BEEC 4EB9 0000 D684             		jsr	SpeedToPos
0001BEF2 6100 0000                  		bsr.w	SS_FixCamera
0001BEF6 3038 F780                  		move.w	($FFFFF780).w,d0
0001BEFA D078 F782                  		add.w	($FFFFF782).w,d0
0001BEFE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BF02 4EB9 0001 3AD2             		jsr	Sonic_Animate
0001BF08 4E75                       		rts	
0001BF0A                            
0001BF0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF0A                            
0001BF0A                            
0001BF0A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BF0A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BF10 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BF12 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BF16                            
0001BF16                            Obj09_ChkRight:
0001BF16 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BF1C 6700                       		beq.s	loc_1BA78	; if not, branch
0001BF1E 6100 0000                  		bsr.w	Obj09_MoveRight
0001BF22                            
0001BF22                            loc_1BA78:
0001BF22 1038 F602                  		move.b	($FFFFF602).w,d0
0001BF26 0200 000C                  		andi.b	#$C,d0
0001BF2A 6600                       		bne.s	loc_1BAA8
0001BF2C 3028 0014                  		move.w	$14(a0),d0
0001BF30 6700                       		beq.s	loc_1BAA8
0001BF32 6B00                       		bmi.s	loc_1BA9A
0001BF34 0440 000C                  		subi.w	#$C,d0
0001BF38 6400                       		bcc.s	loc_1BA94
0001BF3A 303C 0000                  		move.w	#0,d0
0001BF3E                            
0001BF3E                            loc_1BA94:
0001BF3E 3140 0014                  		move.w	d0,$14(a0)
0001BF42 6000                       		bra.s	loc_1BAA8
0001BF44                            ; ===========================================================================
0001BF44                            
0001BF44                            loc_1BA9A:
0001BF44 0640 000C                  		addi.w	#$C,d0
0001BF48 6400                       		bcc.s	loc_1BAA4
0001BF4A 303C 0000                  		move.w	#0,d0
0001BF4E                            
0001BF4E                            loc_1BAA4:
0001BF4E 3140 0014                  		move.w	d0,$14(a0)
0001BF52                            
0001BF52                            loc_1BAA8:
0001BF52 1038 F780                  		move.b	($FFFFF780).w,d0
0001BF56 0600 0020                  		addi.b	#$20,d0
0001BF5A 0200 00C0                  		andi.b	#$C0,d0
0001BF5E 4400                       		neg.b	d0
0001BF60 4EB9 0000 28EC             		jsr	(CalcSine).l
0001BF66 C3E8 0014                  		muls.w	$14(a0),d1
0001BF6A D3A8 0008                  		add.l	d1,8(a0)
0001BF6E C1E8 0014                  		muls.w	$14(a0),d0
0001BF72 D1A8 000C                  		add.l	d0,$C(a0)
0001BF76 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BF7A 2428 000C                  		move.l	$C(a0),d2
0001BF7E 2628 0008                  		move.l	8(a0),d3
0001BF82 6100 0000                  		bsr.w	sub_1BCE8
0001BF86 6700                       		beq.s	loc_1BAF2
0001BF88 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BF8C 93A8 0008                  		sub.l	d1,8(a0)
0001BF90 91A8 000C                  		sub.l	d0,$C(a0)
0001BF94 317C 0000 0014             		move.w	#0,$14(a0)
0001BF9A 4E75                       		rts	
0001BF9C                            ; ===========================================================================
0001BF9C                            
0001BF9C                            loc_1BAF2:
0001BF9C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BFA0 4E75                       		rts	
0001BFA2                            ; End of function Obj09_Move
0001BFA2                            
0001BFA2                            
0001BFA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFA2                            
0001BFA2                            
0001BFA2                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BFA2 08E8 0000 0022             		bset	#0,$22(a0)
0001BFA8 3028 0014                  		move.w	$14(a0),d0
0001BFAC 6700                       		beq.s	loc_1BB06
0001BFAE 6A00                       		bpl.s	loc_1BB1A
0001BFB0                            
0001BFB0                            loc_1BB06:
0001BFB0 0440 000C                  		subi.w	#$C,d0
0001BFB4 0C40 F800                  		cmpi.w	#-$800,d0
0001BFB8 6E00                       		bgt.s	loc_1BB14
0001BFBA 303C F800                  		move.w	#-$800,d0
0001BFBE                            
0001BFBE                            loc_1BB14:
0001BFBE 3140 0014                  		move.w	d0,$14(a0)
0001BFC2 4E75                       		rts	
0001BFC4                            ; ===========================================================================
0001BFC4                            
0001BFC4                            loc_1BB1A:
0001BFC4 0440 0040                  		subi.w	#$40,d0
0001BFC8 6400                       		bcc.s	loc_1BB22
0001BFCA 4E71                       		nop	
0001BFCC                            
0001BFCC                            loc_1BB22:
0001BFCC 3140 0014                  		move.w	d0,$14(a0)
0001BFD0 4E75                       		rts	
0001BFD2                            ; End of function Obj09_MoveLeft
0001BFD2                            
0001BFD2                            
0001BFD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFD2                            
0001BFD2                            
0001BFD2                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BFD2 08A8 0000 0022             		bclr	#0,$22(a0)
0001BFD8 3028 0014                  		move.w	$14(a0),d0
0001BFDC 6B00                       		bmi.s	loc_1BB48
0001BFDE 0640 000C                  		addi.w	#$C,d0
0001BFE2 0C40 0800                  		cmpi.w	#$800,d0
0001BFE6 6D00                       		blt.s	loc_1BB42
0001BFE8 303C 0800                  		move.w	#$800,d0
0001BFEC                            
0001BFEC                            loc_1BB42:
0001BFEC 3140 0014                  		move.w	d0,$14(a0)
0001BFF0 6000                       		bra.s	locret_1BB54
0001BFF2                            ; ===========================================================================
0001BFF2                            
0001BFF2                            loc_1BB48:
0001BFF2 0640 0040                  		addi.w	#$40,d0
0001BFF6 6400                       		bcc.s	loc_1BB50
0001BFF8 4E71                       		nop	
0001BFFA                            
0001BFFA                            loc_1BB50:
0001BFFA 3140 0014                  		move.w	d0,$14(a0)
0001BFFE                            
0001BFFE                            locret_1BB54:
0001BFFE 4E75                       		rts	
0001C000                            ; End of function Obj09_MoveRight
0001C000                            
0001C000                            
0001C000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C000                            
0001C000                            
0001C000                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C000 1038 F603                  		move.b	($FFFFF603).w,d0
0001C004 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C008 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C00A 1038 F780                  		move.b	($FFFFF780).w,d0
0001C00E 0200 00FC                  		andi.b	#$FC,d0
0001C012 4400                       		neg.b	d0
0001C014 0400 0040                  		subi.b	#$40,d0
0001C018 4EB9 0000 28EC             		jsr	(CalcSine).l
0001C01E C3FC 0680                  		muls.w	#$680,d1
0001C022 E081                       		asr.l	#8,d1
0001C024 3141 0010                  		move.w	d1,$10(a0)
0001C028 C1FC 0680                  		muls.w	#$680,d0
0001C02C E080                       		asr.l	#8,d0
0001C02E 3140 0012                  		move.w	d0,$12(a0)
0001C032 08E8 0001 0022             		bset	#1,$22(a0)
0001C038 303C 00A0                  		move.w	#$A0,d0
0001C03C 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C042                            
0001C042                            Obj09_NoJump:
0001C042 4E75                       		rts	
0001C044                            ; End of function Obj09_Jump
0001C044                            
0001C044                            
0001C044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C044                            
0001C044                            
0001C044                            nullsub_2:				; XREF: Obj09_InAir
0001C044 4E75                       		rts	
0001C046                            ; End of function nullsub_2
0001C046                            
0001C046                            ; ===========================================================================
0001C046                            ; ---------------------------------------------------------------------------
0001C046                            ; unused subroutine to limit Sonic's upward vertical speed
0001C046                            ; ---------------------------------------------------------------------------
0001C046 323C FC00                  		move.w	#-$400,d1
0001C04A B268 0012                  		cmp.w	$12(a0),d1
0001C04E 6F00                       		ble.s	locret_1BBB4
0001C050 1038 F602                  		move.b	($FFFFF602).w,d0
0001C054 0200 0070                  		andi.b	#$70,d0
0001C058 6600                       		bne.s	locret_1BBB4
0001C05A 3141 0012                  		move.w	d1,$12(a0)
0001C05E                            
0001C05E                            locret_1BBB4:
0001C05E 4E75                       		rts	
0001C060                            ; ---------------------------------------------------------------------------
0001C060                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C060                            ; ---------------------------------------------------------------------------
0001C060                            
0001C060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C060                            
0001C060                            
0001C060                            SS_FixCamera:				; XREF: Obj09
0001C060 3428 000C                  		move.w	$C(a0),d2
0001C064 3628 0008                  		move.w	8(a0),d3
0001C068 3038 F700                  		move.w	($FFFFF700).w,d0
0001C06C 0443 00A0                  		subi.w	#$A0,d3
0001C070 6500                       		bcs.s	loc_1BBCE
0001C072 9043                       		sub.w	d3,d0
0001C074 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C078                            
0001C078                            loc_1BBCE:
0001C078 3038 F704                  		move.w	($FFFFF704).w,d0
0001C07C 0442 0070                  		subi.w	#$70,d2
0001C080 6500                       		bcs.s	locret_1BBDE
0001C082 9042                       		sub.w	d2,d0
0001C084 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C088                            
0001C088                            locret_1BBDE:
0001C088 4E75                       		rts	
0001C08A                            ; End of function SS_FixCamera
0001C08A                            
0001C08A                            ; ===========================================================================
0001C08A                            
0001C08A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C08A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C090 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C096 6600                       		bne.s	loc_1BBF4
0001C098 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C09E                            
0001C09E                            loc_1BBF4:
0001C09E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C0A4 6D00                       		blt.s	loc_1BC12
0001C0A6 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C0AC 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C0B2 5428 0024                  		addq.b	#2,$24(a0)
0001C0B6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C0BC                            
0001C0BC                            loc_1BC12:
0001C0BC 3038 F780                  		move.w	($FFFFF780).w,d0
0001C0C0 D078 F782                  		add.w	($FFFFF782).w,d0
0001C0C4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C0C8 4EB9 0001 3AD2             		jsr	Sonic_Animate
0001C0CE 4EB9 0001 3D4C             		jsr	LoadSonicDynPLC
0001C0D4 6100 FF8A                  		bsr.w	SS_FixCamera
0001C0D8 4EF9 0000 D6AA             		jmp	DisplaySprite
0001C0DE                            ; ===========================================================================
0001C0DE                            
0001C0DE                            Obj09_Exit2:				; XREF: Obj09_Index
0001C0DE 5368 0038                  		subq.w	#1,$38(a0)
0001C0E2 6600                       		bne.s	loc_1BC40
0001C0E4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C0EA                            
0001C0EA                            loc_1BC40:
0001C0EA 4EB9 0001 3AD2             		jsr	Sonic_Animate
0001C0F0 4EB9 0001 3D4C             		jsr	LoadSonicDynPLC
0001C0F6 6100 FF68                  		bsr.w	SS_FixCamera
0001C0FA 4EF9 0000 D6AA             		jmp	DisplaySprite
0001C100                            
0001C100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C100                            
0001C100                            
0001C100                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C100 2428 000C                  		move.l	$C(a0),d2
0001C104 2628 0008                  		move.l	8(a0),d3
0001C108 1038 F780                  		move.b	($FFFFF780).w,d0
0001C10C 0200 00FC                  		andi.b	#$FC,d0
0001C110 4EB9 0000 28EC             		jsr	(CalcSine).l
0001C116 3828 0010                  		move.w	$10(a0),d4
0001C11A 48C4                       		ext.l	d4
0001C11C E184                       		asl.l	#8,d4
0001C11E C1FC 002A                  		muls.w	#$2A,d0
0001C122 D084                       		add.l	d4,d0
0001C124 3828 0012                  		move.w	$12(a0),d4
0001C128 48C4                       		ext.l	d4
0001C12A E184                       		asl.l	#8,d4
0001C12C C3FC 002A                  		muls.w	#$2A,d1
0001C130 D284                       		add.l	d4,d1
0001C132 D680                       		add.l	d0,d3
0001C134 6100 0000                  		bsr.w	sub_1BCE8
0001C138 6700                       		beq.s	loc_1BCB0
0001C13A 9680                       		sub.l	d0,d3
0001C13C 7000                       		moveq	#0,d0
0001C13E 3140 0010                  		move.w	d0,$10(a0)
0001C142 08A8 0001 0022             		bclr	#1,$22(a0)
0001C148 D481                       		add.l	d1,d2
0001C14A 6100 0000                  		bsr.w	sub_1BCE8
0001C14E 6700                       		beq.s	loc_1BCC6
0001C150 9481                       		sub.l	d1,d2
0001C152 7200                       		moveq	#0,d1
0001C154 3141 0012                  		move.w	d1,$12(a0)
0001C158 4E75                       		rts	
0001C15A                            ; ===========================================================================
0001C15A                            
0001C15A                            loc_1BCB0:
0001C15A D481                       		add.l	d1,d2
0001C15C 6100 0000                  		bsr.w	sub_1BCE8
0001C160 6700                       		beq.s	loc_1BCD4
0001C162 9481                       		sub.l	d1,d2
0001C164 7200                       		moveq	#0,d1
0001C166 3141 0012                  		move.w	d1,$12(a0)
0001C16A 08A8 0001 0022             		bclr	#1,$22(a0)
0001C170                            
0001C170                            loc_1BCC6:
0001C170 E080                       		asr.l	#8,d0
0001C172 E081                       		asr.l	#8,d1
0001C174 3140 0010                  		move.w	d0,$10(a0)
0001C178 3141 0012                  		move.w	d1,$12(a0)
0001C17C 4E75                       		rts	
0001C17E                            ; ===========================================================================
0001C17E                            
0001C17E                            loc_1BCD4:
0001C17E E080                       		asr.l	#8,d0
0001C180 E081                       		asr.l	#8,d1
0001C182 3140 0010                  		move.w	d0,$10(a0)
0001C186 3141 0012                  		move.w	d1,$12(a0)
0001C18A 08E8 0001 0022             		bset	#1,$22(a0)
0001C190 4E75                       		rts	
0001C192                            ; End of function Obj09_Fall
0001C192                            
0001C192                            
0001C192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C192                            
0001C192                            
0001C192                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C192 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C198 7800                       		moveq	#0,d4
0001C19A 4842                       		swap	d2
0001C19C 3802                       		move.w	d2,d4
0001C19E 4842                       		swap	d2
0001C1A0 0644 0044                  		addi.w	#$44,d4
0001C1A4 88FC 0018                  		divu.w	#$18,d4
0001C1A8 C8FC 0080                  		mulu.w	#$80,d4
0001C1AC D3C4                       		adda.l	d4,a1
0001C1AE 7800                       		moveq	#0,d4
0001C1B0 4843                       		swap	d3
0001C1B2 3803                       		move.w	d3,d4
0001C1B4 4843                       		swap	d3
0001C1B6 0644 0014                  		addi.w	#$14,d4
0001C1BA 88FC 0018                  		divu.w	#$18,d4
0001C1BE D2C4                       		adda.w	d4,a1
0001C1C0 7A00                       		moveq	#0,d5
0001C1C2 1819                       		move.b	(a1)+,d4
0001C1C4 6100                       		bsr.s	sub_1BD30
0001C1C6 1819                       		move.b	(a1)+,d4
0001C1C8 6100                       		bsr.s	sub_1BD30
0001C1CA D2FC 007E                  		adda.w	#$7E,a1
0001C1CE 1819                       		move.b	(a1)+,d4
0001C1D0 6100                       		bsr.s	sub_1BD30
0001C1D2 1819                       		move.b	(a1)+,d4
0001C1D4 6100                       		bsr.s	sub_1BD30
0001C1D6 4A05                       		tst.b	d5
0001C1D8 4E75                       		rts	
0001C1DA                            ; End of function sub_1BCE8
0001C1DA                            
0001C1DA                            
0001C1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1DA                            
0001C1DA                            
0001C1DA                            sub_1BD30:				; XREF: sub_1BCE8
0001C1DA 6700                       		beq.s	locret_1BD44
0001C1DC 0C04 0028                  		cmpi.b	#$28,d4
0001C1E0 6700                       		beq.s	locret_1BD44
0001C1E2 0C04 003A                  		cmpi.b	#$3A,d4
0001C1E6 6500                       		bcs.s	loc_1BD46
0001C1E8 0C04 004B                  		cmpi.b	#$4B,d4
0001C1EC 6400                       		bcc.s	loc_1BD46
0001C1EE                            
0001C1EE                            locret_1BD44:
0001C1EE 4E75                       		rts	
0001C1F0                            ; ===========================================================================
0001C1F0                            
0001C1F0                            loc_1BD46:
0001C1F0 1144 0030                  		move.b	d4,$30(a0)
0001C1F4 2149 0032                  		move.l	a1,$32(a0)
0001C1F8 7AFF                       		moveq	#-1,d5
0001C1FA 4E75                       		rts	
0001C1FC                            ; End of function sub_1BD30
0001C1FC                            
0001C1FC                            
0001C1FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1FC                            
0001C1FC                            
0001C1FC                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C1FC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C202 7800                       		moveq	#0,d4
0001C204 3828 000C                  		move.w	$C(a0),d4
0001C208 0644 0050                  		addi.w	#$50,d4
0001C20C 88FC 0018                  		divu.w	#$18,d4
0001C210 C8FC 0080                  		mulu.w	#$80,d4
0001C214 D3C4                       		adda.l	d4,a1
0001C216 7800                       		moveq	#0,d4
0001C218 3828 0008                  		move.w	8(a0),d4
0001C21C 0644 0020                  		addi.w	#$20,d4
0001C220 88FC 0018                  		divu.w	#$18,d4
0001C224 D2C4                       		adda.w	d4,a1
0001C226 1811                       		move.b	(a1),d4
0001C228 6600                       		bne.s	Obj09_ChkCont
0001C22A 4A28 003A                  		tst.b	$3A(a0)
0001C22E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C232 7800                       		moveq	#0,d4
0001C234 4E75                       		rts	
0001C236                            ; ===========================================================================
0001C236                            
0001C236                            Obj09_ChkCont:
0001C236 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C23A 6600                       		bne.s	Obj09_Chk1Up
0001C23C 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001C240 6600                       		bne.s	Obj09_GetCont
0001C242 14BC 0001                  		move.b	#1,(a2)
0001C246 2549 0004                  		move.l	a1,4(a2)
0001C24A                            
0001C24A                            Obj09_GetCont:
0001C24A 4EB9 0000 9CE6             		jsr	CollectRing
0001C250 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C256 6500                       		bcs.s	Obj09_NoCont
0001C258 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C25E 6600                       		bne.s	Obj09_NoCont
0001C260 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001C266 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001C26C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C270 303C 00BF                  		move.w	#$BF,d0
0001C274 4EB9 0000 125C             		jsr	(PlaySound).l	; play extra continue sound
0001C27A                            
0001C27A                            Obj09_NoCont:
0001C27A 7800                       		moveq	#0,d4
0001C27C 4E75                       		rts	
0001C27E                            ; ===========================================================================
0001C27E                            
0001C27E                            Obj09_Chk1Up:
0001C27E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C282 6600                       		bne.s	Obj09_ChkEmer
0001C284 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C288 6600                       		bne.s	Obj09_Get1Up
0001C28A 14BC 0003                  		move.b	#3,(a2)
0001C28E 2549 0004                  		move.l	a1,4(a2)
0001C292                            
0001C292                            Obj09_Get1Up:
0001C292 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C296 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C29A 303C 0088                  		move.w	#$88,d0
0001C29E 4EB9 0000 125C             		jsr	(PlaySound).l	; play extra life music
0001C2A4 7800                       		moveq	#0,d4
0001C2A6 4E75                       		rts	
0001C2A8                            ; ===========================================================================
0001C2A8                            
0001C2A8                            Obj09_ChkEmer:
0001C2A8 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C2AC 6500                       		bcs.s	Obj09_ChkGhost
0001C2AE 0C04 0040                  		cmpi.b	#$40,d4
0001C2B2 6200                       		bhi.s	Obj09_ChkGhost
0001C2B4 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001C2B8 6600                       		bne.s	Obj09_GetEmer
0001C2BA 14BC 0005                  		move.b	#5,(a2)
0001C2BE 2549 0004                  		move.l	a1,4(a2)
0001C2C2                            
0001C2C2                            Obj09_GetEmer:
0001C2C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C2C8 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C2CA 0404 003B                  		subi.b	#$3B,d4
0001C2CE 7000                       		moveq	#0,d0
0001C2D0 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C2D4 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C2D8 1584 0000                  		move.b	d4,(a2,d0.w)
0001C2DC 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C2E0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001C2E6 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001C2EC                            
0001C2EC                            Obj09_NoEmer:
0001C2EC 303C 0093                  		move.w	#$93,d0
0001C2F0 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play emerald music
0001C2F6 7800                       		moveq	#0,d4
0001C2F8 4E75                       		rts	
0001C2FA                            ; ===========================================================================
0001C2FA                            
0001C2FA                            Obj09_ChkGhost:
0001C2FA 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C2FE 6600                       		bne.s	Obj09_ChkGhostTag
0001C300 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C306                            
0001C306                            Obj09_ChkGhostTag:
0001C306 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C30A 6600                       		bne.s	Obj09_NoGhost
0001C30C 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C312 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C314 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C31A                            
0001C31A                            Obj09_NoGhost:
0001C31A 78FF                       		moveq	#-1,d4
0001C31C 4E75                       		rts	
0001C31E                            ; ===========================================================================
0001C31E                            
0001C31E                            Obj09_MakeGhostSolid:
0001C31E 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C324 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C326 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C32C 723F                       		moveq	#$3F,d1
0001C32E                            
0001C32E                            Obj09_GhostLoop2:
0001C32E 743F                       		moveq	#$3F,d2
0001C330                            
0001C330                            Obj09_GhostLoop:
0001C330 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C334 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C336 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C33A                            
0001C33A                            Obj09_NoReplace:
0001C33A 5249                       		addq.w	#1,a1
0001C33C 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C340 43E9 0040                  		lea	$40(a1),a1
0001C344 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C348                            
0001C348                            Obj09_GhostNotSolid:
0001C348 4228 003A                  		clr.b	$3A(a0)
0001C34C 7800                       		moveq	#0,d4
0001C34E 4E75                       		rts	
0001C350                            ; End of function Obj09_ChkItems
0001C350                            
0001C350                            
0001C350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C350                            
0001C350                            
0001C350                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C350 1028 0030                  		move.b	$30(a0),d0
0001C354 6600                       		bne.s	Obj09_ChkBumper
0001C356 5328 0036                  		subq.b	#1,$36(a0)
0001C35A 6A00                       		bpl.s	loc_1BEA0
0001C35C 117C 0000 0036             		move.b	#0,$36(a0)
0001C362                            
0001C362                            loc_1BEA0:
0001C362 5328 0037                  		subq.b	#1,$37(a0)
0001C366 6A00                       		bpl.s	locret_1BEAC
0001C368 117C 0000 0037             		move.b	#0,$37(a0)
0001C36E                            
0001C36E                            locret_1BEAC:
0001C36E 4E75                       		rts	
0001C370                            ; ===========================================================================
0001C370                            
0001C370                            Obj09_ChkBumper:
0001C370 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C374 6600                       		bne.s	Obj09_GOAL	
0001C376 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001C37C 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001C382 2228 0032                  		move.l	$32(a0),d1
0001C386 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C38C 3401                       		move.w	d1,d2
0001C38E 0241 007F                  		andi.w	#$7F,d1
0001C392 C2FC 0018                  		mulu.w	#$18,d1
0001C396 0441 0014                  		subi.w	#$14,d1
0001C39A EE4A                       		lsr.w	#7,d2
0001C39C 0242 007F                  		andi.w	#$7F,d2
0001C3A0 C4FC 0018                  		mulu.w	#$18,d2
0001C3A4 0442 0044                  		subi.w	#$44,d2
0001C3A8 9268 0008                  		sub.w	8(a0),d1
0001C3AC 9468 000C                  		sub.w	$C(a0),d2
0001C3B0 4EB9 0000 2BBA             		jsr	(CalcAngle).l
0001C3B6 4EB9 0000 28EC             		jsr	(CalcSine).l
0001C3BC C3FC F900                  		muls.w	#-$700,d1
0001C3C0 E081                       		asr.l	#8,d1
0001C3C2 3141 0010                  		move.w	d1,$10(a0)
0001C3C6 C1FC F900                  		muls.w	#-$700,d0
0001C3CA E080                       		asr.l	#8,d0
0001C3CC 3140 0012                  		move.w	d0,$12(a0)
0001C3D0 08E8 0001 0022             		bset	#1,$22(a0)
0001C3D6 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001C3DA 6600                       		bne.s	Obj09_BumpSnd
0001C3DC 14BC 0002                  		move.b	#2,(a2)
0001C3E0 2028 0032                  		move.l	$32(a0),d0
0001C3E4 5380                       		subq.l	#1,d0
0001C3E6 2540 0004                  		move.l	d0,4(a2)
0001C3EA                            
0001C3EA                            Obj09_BumpSnd:
0001C3EA 303C 00B4                  		move.w	#$B4,d0
0001C3EE 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C3F4                            ; ===========================================================================
0001C3F4                            
0001C3F4                            Obj09_GOAL:
0001C3F4 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C3F8 6600                       		bne.s	Obj09_UPblock
0001C3FA 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C3FE 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001C404 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001C40A 303C 00A8                  		move.w	#$A8,d0		; change item
0001C40E 4EB9 0000 1262             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C414 4E75                       		rts	
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            Obj09_UPblock:
0001C416 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C41A 6600                       		bne.s	Obj09_DOWNblock
0001C41C 4A28 0036                  		tst.b	$36(a0)
0001C420 6600 0000                  		bne.w	Obj09_NoGlass
0001C424 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C42A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C430 6700                       		beq.s	Obj09_UPsnd
0001C432 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C436 2268 0032                  		movea.l	$32(a0),a1
0001C43A 5389                       		subq.l	#1,a1
0001C43C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C440                            
0001C440                            Obj09_UPsnd:
0001C440 303C 00A9                  		move.w	#$A9,d0
0001C444 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            Obj09_DOWNblock:
0001C44A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C44E 6600                       		bne.s	Obj09_Rblock
0001C450 4A28 0036                  		tst.b	$36(a0)
0001C454 6600 0000                  		bne.w	Obj09_NoGlass
0001C458 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C45E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C464 6600                       		bne.s	Obj09_DOWNsnd
0001C466 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C46A 2268 0032                  		movea.l	$32(a0),a1
0001C46E 5389                       		subq.l	#1,a1
0001C470 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C474                            
0001C474                            Obj09_DOWNsnd:
0001C474 303C 00A9                  		move.w	#$A9,d0
0001C478 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C47E                            ; ===========================================================================
0001C47E                            
0001C47E                            Obj09_Rblock:
0001C47E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C482 6600                       		bne.s	Obj09_ChkGlass
0001C484 4A28 0037                  		tst.b	$37(a0)
0001C488 6600 0000                  		bne.w	Obj09_NoGlass
0001C48C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C492 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001C496 6600                       		bne.s	Obj09_RevStage
0001C498 14BC 0004                  		move.b	#4,(a2)
0001C49C 2028 0032                  		move.l	$32(a0),d0
0001C4A0 5380                       		subq.l	#1,d0
0001C4A2 2540 0004                  		move.l	d0,4(a2)
0001C4A6                            
0001C4A6                            Obj09_RevStage:
0001C4A6 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C4AA 303C 00A9                  		move.w	#$A9,d0
0001C4AE 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play sound
0001C4B4                            ; ===========================================================================
0001C4B4                            
0001C4B4                            Obj09_ChkGlass:
0001C4B4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C4B8 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C4BA 0C00 002E                  		cmpi.b	#$2E,d0
0001C4BE 6700                       		beq.s	Obj09_Glass
0001C4C0 0C00 002F                  		cmpi.b	#$2F,d0
0001C4C4 6700                       		beq.s	Obj09_Glass
0001C4C6 0C00 0030                  		cmpi.b	#$30,d0
0001C4CA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C4CC                            
0001C4CC                            Obj09_Glass:
0001C4CC 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001C4D2 6700                       		beq.s	@happy
0001C4D4 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001C4DA 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001C4E0                            
0001C4E0                            	@happy:
0001C4E0 6100 F482                  		bsr.w	SS_RemoveCollectedItem
0001C4E4 6600                       		bne.s	Obj09_GlassSnd
0001C4E6 14BC 0006                  		move.b	#6,(a2)
0001C4EA 2268 0032                  		movea.l	$32(a0),a1
0001C4EE 5389                       		subq.l	#1,a1
0001C4F0 2549 0004                  		move.l	a1,4(a2)
0001C4F4 1011                       		move.b	(a1),d0
0001C4F6 5200                       		addq.b	#1,d0		; change glass type when touched
0001C4F8 0C00 0030                  		cmpi.b	#$30,d0
0001C4FC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C4FE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C500                            
0001C500                            Obj09_GlassUpdate:
0001C500 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C504                            
0001C504                            Obj09_GlassSnd:
0001C504 303C 00BA                  		move.w	#$BA,d0
0001C508 4EF9 0000 1262             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C50E                            ; ===========================================================================
0001C50E                            
0001C50E                            Obj09_NoGlass:
0001C50E 4E75                       		rts	
0001C510                            ; End of function Obj09_ChkItems2
0001C510                            
0001C510                            ; ===========================================================================
0001C510                            ; ---------------------------------------------------------------------------
0001C510                            ; Object 10 - blank
0001C510                            ; ---------------------------------------------------------------------------
0001C510                            
0001C510                            Obj10:					; XREF: Obj_Index
0001C510 4E75                       		rts	
0001C512                            ; ---------------------------------------------------------------------------
0001C512                            ; Subroutine to	animate	level graphics
0001C512                            ; ---------------------------------------------------------------------------
0001C512                            
0001C512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C512                            
0001C512                            
0001C512                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C512 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C516 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C518 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C51E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C522 7000                       		moveq	#0,d0
0001C524 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C528 D040                       		add.w	d0,d0
0001C52A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C52E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C532                            ; ===========================================================================
0001C532                            
0001C532                            AniArt_Pause:
0001C532 4E75                       		rts	
0001C534                            ; End of function AniArt_Load
0001C534                            
0001C534                            ; ===========================================================================
0001C534 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C538 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C53C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C540 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C542                            ; ===========================================================================
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            ; Animated pattern routine - Green Hill
0001C542                            ; ---------------------------------------------------------------------------
0001C542                            
0001C542                            AniArt_GHZ:				; XREF: AniArt_Index
0001C542 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C546 6A00                       		bpl.s	loc_1C08A
0001C548 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C54E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C554 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C558 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C55C 0240 0001                  		andi.w	#1,d0
0001C560 6700                       		beq.s	loc_1C078
0001C562 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C566                            
0001C566                            loc_1C078:
0001C566 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C570 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C574 6000 0000                  		bra.w	LoadTiles
0001C578                            ; ===========================================================================
0001C578                            
0001C578                            loc_1C08A:
0001C578 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C57C 6A00                       		bpl.s	loc_1C0C0
0001C57E 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C584 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C58A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C58E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C592 0240 0001                  		andi.w	#1,d0
0001C596 6700                       		beq.s	loc_1C0AE
0001C598 43E9 0200                  		lea	$200(a1),a1
0001C59C                            
0001C59C                            loc_1C0AE:
0001C59C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C5A6 323C 000F                  		move.w	#$F,d1
0001C5AA 6000 0000                  		bra.w	LoadTiles
0001C5AE                            ; ===========================================================================
0001C5AE                            
0001C5AE                            loc_1C0C0:
0001C5AE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C5B2 6A00                       		bpl.s	locret_1C10C
0001C5B4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C5BA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C5BE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C5C2 0240 0003                  		andi.w	#3,d0
0001C5C6 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C5CA 0800 0000                  		btst	#0,d0
0001C5CE 6600                       		bne.s	loc_1C0E8
0001C5D0 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C5D6                            
0001C5D6                            loc_1C0E8:
0001C5D6 EF48                       		lsl.w	#7,d0
0001C5D8 3200                       		move.w	d0,d1
0001C5DA D040                       		add.w	d0,d0
0001C5DC D041                       		add.w	d1,d0
0001C5DE 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C5E8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C5EE 43F1 0000                  		lea	(a1,d0.w),a1
0001C5F2 323C 000B                  		move.w	#$B,d1
0001C5F6 6100 0000                  		bsr.w	LoadTiles
0001C5FA                            
0001C5FA                            locret_1C10C:
0001C5FA 4E75                       		rts	
0001C5FC                            ; ===========================================================================
0001C5FC 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C600                            ; ===========================================================================
0001C600                            ; ---------------------------------------------------------------------------
0001C600                            ; Animated pattern routine - Marble
0001C600                            ; ---------------------------------------------------------------------------
0001C600                            
0001C600                            AniArt_MZ:				; XREF: AniArt_Index
0001C600 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C604 6A00                       		bpl.s	loc_1C150
0001C606 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C60C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C612 7000                       		moveq	#0,d0
0001C614 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C618 5200                       		addq.b	#1,d0
0001C61A 0C00 0003                  		cmpi.b	#3,d0
0001C61E 6600                       		bne.s	loc_1C134
0001C620 7000                       		moveq	#0,d0
0001C622                            
0001C622                            loc_1C134:
0001C622 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C626 C0FC 0100                  		mulu.w	#$100,d0
0001C62A D2C0                       		adda.w	d0,a1
0001C62C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C636 323C 0007                  		move.w	#7,d1
0001C63A 6100 0000                  		bsr.w	LoadTiles
0001C63E                            
0001C63E                            loc_1C150:
0001C63E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C642 6A00                       		bpl.s	loc_1C1AE
0001C644 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C64A 7000                       		moveq	#0,d0
0001C64C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C650 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C656 EE58                       		ror.w	#7,d0
0001C658 D8C0                       		adda.w	d0,a4
0001C65A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C664 7600                       		moveq	#0,d3
0001C666 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C66A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C66E 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C672 343C 0003                  		move.w	#3,d2
0001C676                            
0001C676                            loc_1C188:
0001C676 3003                       		move.w	d3,d0
0001C678 D040                       		add.w	d0,d0
0001C67A 0240 001E                  		andi.w	#$1E,d0
0001C67E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C684 3033 0000                  		move.w	(a3,d0.w),d0
0001C688 47F3 0000                  		lea	(a3,d0.w),a3
0001C68C 224C                       		movea.l	a4,a1
0001C68E 323C 001F                  		move.w	#$1F,d1
0001C692 4E93                       		jsr	(a3)
0001C694 5843                       		addq.w	#4,d3
0001C696 51CA FFDE                  		dbf	d2,loc_1C188
0001C69A 4E75                       		rts	
0001C69C                            ; ===========================================================================
0001C69C                            
0001C69C                            loc_1C1AE:
0001C69C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6A0 6A00 0000                  		bpl.w	locret_1C1EA
0001C6A4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6AA 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C6B0 7000                       		moveq	#0,d0
0001C6B2 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C6B6 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C6BA 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C6C0 C0FC 00C0                  		mulu.w	#$C0,d0
0001C6C4 D2C0                       		adda.w	d0,a1
0001C6C6 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C6D0 323C 0005                  		move.w	#5,d1
0001C6D4 6000 0000                  		bra.w	LoadTiles
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            locret_1C1EA:
0001C6D8 4E75                       		rts	
0001C6DA                            ; ===========================================================================
0001C6DA                            ; ---------------------------------------------------------------------------
0001C6DA                            ; Animated pattern routine - Scrap Brain
0001C6DA                            ; ---------------------------------------------------------------------------
0001C6DA                            
0001C6DA                            AniArt_SBZ:				; XREF: AniArt_Index
0001C6DA 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C6DE 6700                       		beq.s	loc_1C1F8
0001C6E0 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C6E4 6000                       		bra.s	loc_1C250
0001C6E6                            ; ===========================================================================
0001C6E6                            
0001C6E6                            loc_1C1F8:
0001C6E6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C6EA 6A00                       		bpl.s	loc_1C250
0001C6EC 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C6F2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C6F8 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C702 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C706 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C70A 0240 0007                  		andi.w	#7,d0
0001C70E 6700                       		beq.s	loc_1C234
0001C710 5340                       		subq.w	#1,d0
0001C712 C0FC 0180                  		mulu.w	#$180,d0
0001C716 43F1 0000                  		lea	(a1,d0.w),a1
0001C71A 323C 000B                  		move.w	#$B,d1
0001C71E 6000 0000                  		bra.w	LoadTiles
0001C722                            ; ===========================================================================
0001C722                            
0001C722                            loc_1C234:
0001C722 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C728                            
0001C728                            loc_1C23A:
0001C728 323C 0005                  		move.w	#5,d1
0001C72C 6100 0000                  		bsr.w	LoadTiles
0001C730 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C736 323C 0005                  		move.w	#5,d1
0001C73A 6000 0000                  		bra.w	LoadTiles
0001C73E                            ; ===========================================================================
0001C73E                            
0001C73E                            loc_1C250:
0001C73E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C742 6700                       		beq.s	loc_1C25C
0001C744 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C748 6000                       		bra.s	locret_1C2A0
0001C74A                            ; ===========================================================================
0001C74A                            
0001C74A                            loc_1C25C:
0001C74A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C74E 6A00                       		bpl.s	locret_1C2A0
0001C750 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C756 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C75C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C766 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C76A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C76E 0240 0007                  		andi.w	#7,d0
0001C772 6700                       		beq.s	loc_1C298
0001C774 5340                       		subq.w	#1,d0
0001C776 C0FC 0180                  		mulu.w	#$180,d0
0001C77A 43F1 0000                  		lea	(a1,d0.w),a1
0001C77E 323C 000B                  		move.w	#$B,d1
0001C782 6000 0000                  		bra.w	LoadTiles
0001C786                            ; ===========================================================================
0001C786                            
0001C786                            loc_1C298:
0001C786 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C78C 609A                       		bra.s	loc_1C23A
0001C78E                            ; ===========================================================================
0001C78E                            
0001C78E                            locret_1C2A0:
0001C78E 4E75                       		rts	
0001C790                            ; ===========================================================================
0001C790                            ; ---------------------------------------------------------------------------
0001C790                            ; Animated pattern routine - ending sequence
0001C790                            ; ---------------------------------------------------------------------------
0001C790                            
0001C790                            AniArt_Ending:				; XREF: AniArt_Index
0001C790 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C794 6A00                       		bpl.s	loc_1C2F4
0001C796 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C79C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C7A2 45F8 9400                  		lea	($FFFF9400).w,a2
0001C7A6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C7AA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C7AE 0240 0001                  		andi.w	#1,d0
0001C7B2 6700                       		beq.s	loc_1C2CE
0001C7B4 43E9 0200                  		lea	$200(a1),a1
0001C7B8 45EA 0200                  		lea	$200(a2),a2
0001C7BC                            
0001C7BC                            loc_1C2CE:
0001C7BC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C7C6 323C 000F                  		move.w	#$F,d1
0001C7CA 6100 0000                  		bsr.w	LoadTiles
0001C7CE 224A                       		movea.l	a2,a1
0001C7D0 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C7DA 323C 000F                  		move.w	#$F,d1
0001C7DE 6000 0000                  		bra.w	LoadTiles
0001C7E2                            ; ===========================================================================
0001C7E2                            
0001C7E2                            loc_1C2F4:
0001C7E2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7E6 6A00                       		bpl.s	loc_1C33C
0001C7E8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7EE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C7F2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C7F6 0240 0007                  		andi.w	#7,d0
0001C7FA 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C7FE EF48                       		lsl.w	#7,d0
0001C800 3200                       		move.w	d0,d1
0001C802 D040                       		add.w	d0,d0
0001C804 D041                       		add.w	d1,d0
0001C806 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C810 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C816 43F1 0000                  		lea	(a1,d0.w),a1
0001C81A 323C 000B                  		move.w	#$B,d1
0001C81E 6000 0000                  		bra.w	LoadTiles
0001C822                            ; ===========================================================================
0001C822 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C82A                            ; ===========================================================================
0001C82A                            
0001C82A                            loc_1C33C:
0001C82A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C82E 6A00                       		bpl.s	loc_1C37A
0001C830 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C836 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C83A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C83E 0240 0003                  		andi.w	#3,d0
0001C842 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C846 E148                       		lsl.w	#8,d0
0001C848 D040                       		add.w	d0,d0
0001C84A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C854 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C858 43F1 0000                  		lea	(a1,d0.w),a1
0001C85C 323C 000F                  		move.w	#$F,d1
0001C860 6000 0000                  		bra.w	LoadTiles
0001C864                            ; ===========================================================================
0001C864 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            loc_1C37A:
0001C868 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C86C 6A00                       		bpl.s	locret_1C3B4
0001C86E 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C874 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C878 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C87C 0240 0003                  		andi.w	#3,d0
0001C880 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C884 E148                       		lsl.w	#8,d0
0001C886 D040                       		add.w	d0,d0
0001C888 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C892 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C896 43F1 0000                  		lea	(a1,d0.w),a1
0001C89A 323C 000F                  		move.w	#$F,d1
0001C89E 6000 0000                  		bra.w	LoadTiles
0001C8A2                            ; ===========================================================================
0001C8A2                            
0001C8A2                            locret_1C3B4:
0001C8A2 4E75                       		rts	
0001C8A4                            ; ===========================================================================
0001C8A4                            
0001C8A4                            AniArt_none:				; XREF: AniArt_Index
0001C8A4 4E75                       		rts	
0001C8A6                            
0001C8A6                            ; ---------------------------------------------------------------------------
0001C8A6                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C8A6                            ; ---------------------------------------------------------------------------
0001C8A6                            
0001C8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8A6                            
0001C8A6                            
0001C8A6                            LoadTiles:
0001C8A6 2C99                       		move.l	(a1)+,(a6)
0001C8A8 2C99                       		move.l	(a1)+,(a6)
0001C8AA 2C99                       		move.l	(a1)+,(a6)
0001C8AC 2C99                       		move.l	(a1)+,(a6)
0001C8AE 2C99                       		move.l	(a1)+,(a6)
0001C8B0 2C99                       		move.l	(a1)+,(a6)
0001C8B2 2C99                       		move.l	(a1)+,(a6)
0001C8B4 2C99                       		move.l	(a1)+,(a6)
0001C8B6 51C9 FFEE                  		dbf	d1,LoadTiles
0001C8BA 4E75                       		rts	
0001C8BC                            ; End of function LoadTiles
0001C8BC                            
0001C8BC                            ; ===========================================================================
0001C8BC                            ; ---------------------------------------------------------------------------
0001C8BC                            ; Animated pattern routine - more Marble Zone
0001C8BC                            ; ---------------------------------------------------------------------------
0001C8BC 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C8C0 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C8C4 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C8C8 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C8CC 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C8D0 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C8D4 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C8D8 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C8DC                            ; ===========================================================================
0001C8DC                            
0001C8DC                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C8DC 2C91                       		move.l	(a1),(a6)
0001C8DE 43E9 0010                  		lea	$10(a1),a1
0001C8E2 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C8E6 4E75                       		rts	
0001C8E8                            ; ===========================================================================
0001C8E8                            
0001C8E8                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C8E8 2029 0002                  		move.l	2(a1),d0
0001C8EC 1029 0001                  		move.b	1(a1),d0
0001C8F0 E098                       		ror.l	#8,d0
0001C8F2 2C80                       		move.l	d0,(a6)
0001C8F4 43E9 0010                  		lea	$10(a1),a1
0001C8F8 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C8FC 4E75                       		rts	
0001C8FE                            ; ===========================================================================
0001C8FE                            
0001C8FE                            loc_1C410:				; XREF: AniArt_MZextra
0001C8FE 2CA9 0002                  		move.l	2(a1),(a6)
0001C902 43E9 0010                  		lea	$10(a1),a1
0001C906 51C9 FFF6                  		dbf	d1,loc_1C410
0001C90A 4E75                       		rts	
0001C90C                            ; ===========================================================================
0001C90C                            
0001C90C                            loc_1C41E:				; XREF: AniArt_MZextra
0001C90C 2029 0004                  		move.l	4(a1),d0
0001C910 1029 0003                  		move.b	3(a1),d0
0001C914 E098                       		ror.l	#8,d0
0001C916 2C80                       		move.l	d0,(a6)
0001C918 43E9 0010                  		lea	$10(a1),a1
0001C91C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C920 4E75                       		rts	
0001C922                            ; ===========================================================================
0001C922                            
0001C922                            loc_1C434:				; XREF: AniArt_MZextra
0001C922 2CA9 0004                  		move.l	4(a1),(a6)
0001C926 43E9 0010                  		lea	$10(a1),a1
0001C92A 51C9 FFF6                  		dbf	d1,loc_1C434
0001C92E 4E75                       		rts	
0001C930                            ; ===========================================================================
0001C930                            
0001C930                            loc_1C442:				; XREF: AniArt_MZextra
0001C930 2029 0006                  		move.l	6(a1),d0
0001C934 1029 0005                  		move.b	5(a1),d0
0001C938 E098                       		ror.l	#8,d0
0001C93A 2C80                       		move.l	d0,(a6)
0001C93C 43E9 0010                  		lea	$10(a1),a1
0001C940 51C9 FFEE                  		dbf	d1,loc_1C442
0001C944 4E75                       		rts	
0001C946                            ; ===========================================================================
0001C946                            
0001C946                            loc_1C458:				; XREF: AniArt_MZextra
0001C946 2CA9 0006                  		move.l	6(a1),(a6)
0001C94A 43E9 0010                  		lea	$10(a1),a1
0001C94E 51C9 FFF6                  		dbf	d1,loc_1C458
0001C952 4E75                       		rts	
0001C954                            ; ===========================================================================
0001C954                            
0001C954                            loc_1C466:				; XREF: AniArt_MZextra
0001C954 2029 0008                  		move.l	8(a1),d0
0001C958 1029 0007                  		move.b	7(a1),d0
0001C95C E098                       		ror.l	#8,d0
0001C95E 2C80                       		move.l	d0,(a6)
0001C960 43E9 0010                  		lea	$10(a1),a1
0001C964 51C9 FFEE                  		dbf	d1,loc_1C466
0001C968 4E75                       		rts	
0001C96A                            ; ===========================================================================
0001C96A                            
0001C96A                            loc_1C47C:				; XREF: AniArt_MZextra
0001C96A 2CA9 0008                  		move.l	8(a1),(a6)
0001C96E 43E9 0010                  		lea	$10(a1),a1
0001C972 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C976 4E75                       		rts	
0001C978                            ; ===========================================================================
0001C978                            
0001C978                            loc_1C48A:				; XREF: AniArt_MZextra
0001C978 2029 000A                  		move.l	$A(a1),d0
0001C97C 1029 0009                  		move.b	9(a1),d0
0001C980 E098                       		ror.l	#8,d0
0001C982 2C80                       		move.l	d0,(a6)
0001C984 43E9 0010                  		lea	$10(a1),a1
0001C988 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C98C 4E75                       		rts	
0001C98E                            ; ===========================================================================
0001C98E                            
0001C98E                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C98E 2CA9 000A                  		move.l	$A(a1),(a6)
0001C992 43E9 0010                  		lea	$10(a1),a1
0001C996 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C99A 4E75                       		rts	
0001C99C                            ; ===========================================================================
0001C99C                            
0001C99C                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C99C 2029 000C                  		move.l	$C(a1),d0
0001C9A0 1029 000B                  		move.b	$B(a1),d0
0001C9A4 E098                       		ror.l	#8,d0
0001C9A6 2C80                       		move.l	d0,(a6)
0001C9A8 43E9 0010                  		lea	$10(a1),a1
0001C9AC 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C9B0 4E75                       		rts	
0001C9B2                            ; ===========================================================================
0001C9B2                            
0001C9B2                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C9B2 2CA9 000C                  		move.l	$C(a1),(a6)
0001C9B6 43E9 0010                  		lea	$10(a1),a1
0001C9BA 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C9BE 4E75                       		rts	
0001C9C0                            ; ===========================================================================
0001C9C0                            
0001C9C0                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C9C0 2029 000C                  		move.l	$C(a1),d0
0001C9C4 E198                       		rol.l	#8,d0
0001C9C6 1011                       		move.b	0(a1),d0
0001C9C8 2C80                       		move.l	d0,(a6)
0001C9CA 43E9 0010                  		lea	$10(a1),a1
0001C9CE 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C9D2 4E75                       		rts	
0001C9D4                            ; ===========================================================================
0001C9D4                            
0001C9D4                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C9D4 3CA9 000E                  		move.w	$E(a1),(a6)
0001C9D8 3C91                       		move.w	0(a1),(a6)
0001C9DA 43E9 0010                  		lea	$10(a1),a1
0001C9DE 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C9E2 4E75                       		rts	
0001C9E4                            ; ===========================================================================
0001C9E4                            
0001C9E4                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C9E4 2011                       		move.l	0(a1),d0
0001C9E6 1029 000F                  		move.b	$F(a1),d0
0001C9EA E098                       		ror.l	#8,d0
0001C9EC 2C80                       		move.l	d0,(a6)
0001C9EE 43E9 0010                  		lea	$10(a1),a1
0001C9F2 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C9F6 4E75                       		rts	
0001C9F8                            
0001C9F8                            ; ---------------------------------------------------------------------------
0001C9F8                            ; Animated pattern routine - giant ring
0001C9F8                            ; ---------------------------------------------------------------------------
0001C9F8                            
0001C9F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9F8                            
0001C9F8                            
0001C9F8                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C9F8 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C9FC 6600                       		bne.s	loc_1C518
0001C9FE 4E75                       		rts	
0001CA00                            ; ===========================================================================
0001CA00                            
0001CA00                            loc_1C518:
0001CA00 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CA06 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CA0C 7000                       		moveq	#0,d0
0001CA0E 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CA12 43F1 0000                  		lea	(a1,d0.w),a1
0001CA16 0640 8000                  		addi.w	#$8000,d0
0001CA1A E588                       		lsl.l	#2,d0
0001CA1C E448                       		lsr.w	#2,d0
0001CA1E 0040 4000                  		ori.w	#$4000,d0
0001CA22 4840                       		swap	d0
0001CA24 2D40 0004                  		move.l	d0,4(a6)
0001CA28 323C 000D                  		move.w	#$D,d1
0001CA2C 6000 FE78                  		bra.w	LoadTiles
0001CA30                            ; End of function AniArt_GiantRing
0001CA30                            
0001CA30                            ; ===========================================================================
0001CA30                            ; ---------------------------------------------------------------------------
0001CA30                            ; Object 21 - SCORE, TIME, RINGS
0001CA30                            ; ---------------------------------------------------------------------------
0001CA30                            
0001CA30                            Obj21:					; XREF: Obj_Index
0001CA30 7000                       		moveq	#0,d0
0001CA32 1028 0024                  		move.b	$24(a0),d0
0001CA36 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CA3A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CA3E                            ; ===========================================================================
0001CA3E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CA40 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CA42                            ; ===========================================================================
0001CA42                            
0001CA42                            Obj21_Main:				; XREF: Obj21_Main
0001CA42 5428 0024                  		addq.b	#2,$24(a0)
0001CA46 317C 0090 0008             		move.w	#$90,8(a0)
0001CA4C 317C 0108 000A             		move.w	#$108,$A(a0)
0001CA52 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CA5A 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CA60 117C 0000 0001             		move.b	#0,1(a0)
0001CA66 117C 0000 0018             		move.b	#0,$18(a0)
0001CA6C                            
0001CA6C                            Obj21_Flash:				; XREF: Obj21_Main
0001CA6C 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CA70 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CA72 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CA76 4EF9 0000 D6AA             		jmp	DisplaySprite
0001CA7C                            ; ===========================================================================
0001CA7C                            
0001CA7C                            Obj21_Flash2:
0001CA7C 7000                       		moveq	#0,d0
0001CA7E 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CA84 6600                       		bne.s	Obj21_Display
0001CA86 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CA88 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CA8E 6600                       		bne.s	Obj21_Display	; if not, branch
0001CA90 5440                       		addq.w	#2,d0		; make time counter flash red
0001CA92                            
0001CA92                            Obj21_Display:
0001CA92 1140 001A                  		move.b	d0,$1A(a0)
0001CA96 4EF9 0000 D6AA             		jmp	DisplaySprite
0001CA9C                            ; ===========================================================================
0001CA9C                            ; ---------------------------------------------------------------------------
0001CA9C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CA9C                            ; ---------------------------------------------------------------------------
0001CA9C                            Map_obj21:
0001CA9C                            	include "_maps\obj21.asm"
0001CA9C                            ; ---------------------------------------------------------------------------
0001CA9C                            ; Sprite mappings - SCORE, TIME, RINGS
0001CA9C                            ; ---------------------------------------------------------------------------
0001CA9C 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CAA0 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CAA4 0A                         byte_1C5BC:	dc.b $A
0001CAA5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CAAA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CAAF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CAB4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CAB9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CABE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CAC3 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CAC8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CACD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CAD2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CAD7 00                         		dc.b 0
0001CAD8 0A                         byte_1C5F0:	dc.b $A
0001CAD9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CADE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CAE3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CAE8 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CAED 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CAF2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CAF7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CAFC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CB01 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CB06 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CB0B 00                         		dc.b 0
0001CB0C 0A                         byte_1C624:	dc.b $A
0001CB0D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CB12 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CB17 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CB1C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CB21 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CB26 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CB2B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CB30 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CB35 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CB3A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CB3F 00                         		dc.b 0
0001CB40 0A                         byte_1C658:	dc.b $A
0001CB41 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CB46 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CB4B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CB50 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CB55 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CB5A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CB5F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CB64 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CB69 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CB6E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CB74 00                         		even
0001CB74 00                         		even
0001CB74                            
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            ; Add points subroutine
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            
0001CB74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB74                            
0001CB74                            
0001CB74                            AddPoints:
0001CB74 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CB7A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CB7E 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CB82 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CB84 223C 000F 423F             		move.l	#999999,d1
0001CB8A B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CB8C 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CB90 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CB92 2481                       		move.l	d1,(a2)
0001CB94                            
0001CB94                            loc_1C6AC:
0001CB94 2013                       		move.l	(a3),d0
0001CB96 B092                       		cmp.l	(a2),d0
0001CB98 6500 0000                  		bcs.w	locret_1C6B6
0001CB9C 2480                       		move.l	d0,(a2)
0001CB9E                            
0001CB9E                            locret_1C6B6:
0001CB9E 4E75                       		rts	
0001CBA0                            ; End of function AddPoints
0001CBA0                            
0001CBA0                            ; ---------------------------------------------------------------------------
0001CBA0                            ; Subroutine to	update the HUD
0001CBA0                            ; ---------------------------------------------------------------------------
0001CBA0                            
0001CBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBA0                            
0001CBA0                            
0001CBA0                            HudUpdate:
0001CBA0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CBA4 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CBA8 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CBAC 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CBAE 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CBB2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CBB8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CBBC 6100 0000                  		bsr.w	Hud_Score
0001CBC0                            
0001CBC0                            Hud_ChkRings:
0001CBC0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CBC4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CBC6 6A00                       		bpl.s	loc_1C6E4
0001CBC8 6100 0000                  		bsr.w	Hud_LoadZero
0001CBCC                            
0001CBCC                            loc_1C6E4:
0001CBCC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CBD0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CBD6 7200                       		moveq	#0,d1
0001CBD8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CBDC 6100 0000                  		bsr.w	Hud_Rings
0001CBE0                            
0001CBE0                            Hud_ChkTime:
0001CBE0 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CBE4 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CBE6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CBEA 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CBEC 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CBF0 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CBF6 6700                       		beq.s	TimeOver	; if yes, branch
0001CBF8 5221                       		addq.b	#1,-(a1)
0001CBFA 0C11 003C                  		cmpi.b	#60,(a1)
0001CBFE 6500                       		bcs.s	Hud_ChkLives
0001CC00 12BC 0000                  		move.b	#0,(a1)
0001CC04 5221                       		addq.b	#1,-(a1)
0001CC06 0C11 003C                  		cmpi.b	#60,(a1)
0001CC0A 6500                       		bcs.s	loc_1C734
0001CC0C 12BC 0000                  		move.b	#0,(a1)
0001CC10 5221                       		addq.b	#1,-(a1)
0001CC12 0C11 0009                  		cmpi.b	#9,(a1)
0001CC16 6500                       		bcs.s	loc_1C734
0001CC18 12BC 0009                  		move.b	#9,(a1)
0001CC1C                            
0001CC1C                            loc_1C734:
0001CC1C 203C 5E40 0003             		move.l	#$5E400003,d0
0001CC22 7200                       		moveq	#0,d1
0001CC24 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CC28 6100 0000                  		bsr.w	Hud_Mins
0001CC2C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CC32 7200                       		moveq	#0,d1
0001CC34 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CC38 6100 0000                  		bsr.w	Hud_Secs
0001CC3C                            
0001CC3C                            Hud_ChkLives:
0001CC3C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CC40 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CC42 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CC46 6100 0000                  		bsr.w	Hud_Lives
0001CC4A                            
0001CC4A                            Hud_ChkBonus:
0001CC4A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CC4E 6700                       		beq.s	Hud_End		; if not, branch
0001CC50 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CC54 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CC5E 7200                       		moveq	#0,d1
0001CC60 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CC64 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC68 7200                       		moveq	#0,d1
0001CC6A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CC6E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC72                            
0001CC72                            Hud_End:
0001CC72 4E75                       		rts	
0001CC74                            ; ===========================================================================
0001CC74                            
0001CC74                            TimeOver:				; XREF: Hud_ChkTime
0001CC74 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CC78 41F8 D000                  		lea	($FFFFD000).w,a0
0001CC7C 2448                       		movea.l	a0,a2
0001CC7E 6100 E898                  		bsr.w	KillSonic
0001CC82 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001CC88 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001CC8E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CC94 4E75                       		rts	
0001CC96                            ; ===========================================================================
0001CC96                            
0001CC96                            HudDebug:				; XREF: HudUpdate
0001CC96 6100 0000                  		bsr.w	HudDb_XY
0001CC9A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CC9E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CCA0 6A00                       		bpl.s	HudDb_Rings
0001CCA2 6100 0000                  		bsr.w	Hud_LoadZero
0001CCA6                            
0001CCA6                            HudDb_Rings:
0001CCA6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCAA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CCB0 7200                       		moveq	#0,d1
0001CCB2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CCB6 6100 0000                  		bsr.w	Hud_Rings
0001CCBA                            
0001CCBA                            HudDb_ObjCount:
0001CCBA 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CCC0 7200                       		moveq	#0,d1
0001CCC2 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CCC6 6100 0000                  		bsr.w	Hud_Secs
0001CCCA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CCCE 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CCD0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CCD4 6100 0000                  		bsr.w	Hud_Lives
0001CCD8                            
0001CCD8                            HudDb_ChkBonus:
0001CCD8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CCDC 6700                       		beq.s	HudDb_End	; if not, branch
0001CCDE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CCE2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CCEC 7200                       		moveq	#0,d1
0001CCEE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CCF2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CCF6 7200                       		moveq	#0,d1
0001CCF8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CCFC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD00                            
0001CD00                            HudDb_End:
0001CD00 4E75                       		rts	
0001CD02                            ; End of function HudUpdate
0001CD02                            
0001CD02                            ; ---------------------------------------------------------------------------
0001CD02                            ; Subroutine to	load "0" on the	HUD
0001CD02                            ; ---------------------------------------------------------------------------
0001CD02                            
0001CD02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD02                            
0001CD02                            
0001CD02                            Hud_LoadZero:				; XREF: HudUpdate
0001CD02 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CD0C 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CD10 343C 0002                  		move.w	#2,d2
0001CD14 6000                       		bra.s	loc_1C83E
0001CD16                            ; End of function Hud_LoadZero
0001CD16                            
0001CD16                            ; ---------------------------------------------------------------------------
0001CD16                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CD16                            ; ---------------------------------------------------------------------------
0001CD16                            
0001CD16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD16                            
0001CD16                            
0001CD16                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CD16 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CD1C 6100 0000                  		bsr.w	Hud_Lives
0001CD20 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CD2A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CD2E 343C 000E                  		move.w	#$E,d2
0001CD32                            
0001CD32                            loc_1C83E:				; XREF: Hud_LoadZero
0001CD32 43FA 0000                  		lea	Art_Hud(pc),a1
0001CD36                            
0001CD36                            loc_1C842:
0001CD36 323C 000F                  		move.w	#$F,d1
0001CD3A 101A                       		move.b	(a2)+,d0
0001CD3C 6B00                       		bmi.s	loc_1C85E
0001CD3E 4880                       		ext.w	d0
0001CD40 EB48                       		lsl.w	#5,d0
0001CD42 47F1 0000                  		lea	(a1,d0.w),a3
0001CD46                            
0001CD46                            loc_1C852:
0001CD46 2C9B                       		move.l	(a3)+,(a6)
0001CD48 51C9 FFFC                  		dbf	d1,loc_1C852
0001CD4C                            
0001CD4C                            loc_1C858:
0001CD4C 51CA FFE8                  		dbf	d2,loc_1C842
0001CD50                            
0001CD50 4E75                       		rts	
0001CD52                            ; ===========================================================================
0001CD52                            
0001CD52                            loc_1C85E:
0001CD52 2CBC 0000 0000             		move.l	#0,(a6)
0001CD58 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CD5C                            
0001CD5C 60EE                       		bra.s	loc_1C858
0001CD5E                            ; End of function Hud_Base
0001CD5E                            
0001CD5E                            ; ===========================================================================
0001CD5E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CD6A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CD6E                            ; ---------------------------------------------------------------------------
0001CD6E                            ; Subroutine to	load debug mode	numbers	patterns
0001CD6E                            ; ---------------------------------------------------------------------------
0001CD6E                            
0001CD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD6E                            
0001CD6E                            
0001CD6E                            HudDb_XY:				; XREF: HudDebug
0001CD6E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CD78 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CD7C 4841                       		swap	d1
0001CD7E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CD82 6100                       		bsr.s	HudDb_XY2
0001CD84 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CD88 4841                       		swap	d1
0001CD8A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CD8E                            ; End of function HudDb_XY
0001CD8E                            
0001CD8E                            
0001CD8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD8E                            
0001CD8E                            
0001CD8E                            HudDb_XY2:
0001CD8E 7C07                       		moveq	#7,d6
0001CD90 43F9 0000 0534             		lea	(Art_Text).l,a1
0001CD96                            
0001CD96                            HudDb_XYLoop:
0001CD96 E959                       		rol.w	#4,d1
0001CD98 3401                       		move.w	d1,d2
0001CD9A 0242 000F                  		andi.w	#$F,d2
0001CD9E 0C42 000A                  		cmpi.w	#$A,d2
0001CDA2 6500                       		bcs.s	loc_1C8B2
0001CDA4 5E42                       		addq.w	#7,d2
0001CDA6                            
0001CDA6                            loc_1C8B2:
0001CDA6 EB4A                       		lsl.w	#5,d2
0001CDA8 47F1 2000                  		lea	(a1,d2.w),a3
0001CDAC 2C9B                       		move.l	(a3)+,(a6)
0001CDAE 2C9B                       		move.l	(a3)+,(a6)
0001CDB0 2C9B                       		move.l	(a3)+,(a6)
0001CDB2 2C9B                       		move.l	(a3)+,(a6)
0001CDB4 2C9B                       		move.l	(a3)+,(a6)
0001CDB6 2C9B                       		move.l	(a3)+,(a6)
0001CDB8 2C9B                       		move.l	(a3)+,(a6)
0001CDBA 2C9B                       		move.l	(a3)+,(a6)
0001CDBC 4841                       		swap	d1
0001CDBE 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CDC2                            
0001CDC2 4E75                       		rts	
0001CDC4                            ; End of function HudDb_XY2
0001CDC4                            
0001CDC4                            ; ---------------------------------------------------------------------------
0001CDC4                            ; Subroutine to	load rings numbers patterns
0001CDC4                            ; ---------------------------------------------------------------------------
0001CDC4                            
0001CDC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDC4                            
0001CDC4                            
0001CDC4                            Hud_Rings:				; XREF: HudUpdate
0001CDC4 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CDCA 7C02                       		moveq	#2,d6
0001CDCC 6000                       		bra.s	Hud_LoadArt
0001CDCE                            ; End of function Hud_Rings
0001CDCE                            
0001CDCE                            ; ---------------------------------------------------------------------------
0001CDCE                            ; Subroutine to	load score numbers patterns
0001CDCE                            ; ---------------------------------------------------------------------------
0001CDCE                            
0001CDCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDCE                            
0001CDCE                            
0001CDCE                            Hud_Score:				; XREF: HudUpdate
0001CDCE 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CDD4 7C05                       		moveq	#5,d6
0001CDD6                            
0001CDD6                            Hud_LoadArt:
0001CDD6 7800                       		moveq	#0,d4
0001CDD8 43FA 0000                  		lea	Art_Hud(pc),a1
0001CDDC                            
0001CDDC                            Hud_ScoreLoop:
0001CDDC 7400                       		moveq	#0,d2
0001CDDE 261A                       		move.l	(a2)+,d3
0001CDE0                            
0001CDE0                            loc_1C8EC:
0001CDE0 9283                       		sub.l	d3,d1
0001CDE2 6500                       		bcs.s	loc_1C8F4
0001CDE4 5242                       		addq.w	#1,d2
0001CDE6 60F8                       		bra.s	loc_1C8EC
0001CDE8                            ; ===========================================================================
0001CDE8                            
0001CDE8                            loc_1C8F4:
0001CDE8 D283                       		add.l	d3,d1
0001CDEA 4A42                       		tst.w	d2
0001CDEC 6700                       		beq.s	loc_1C8FE
0001CDEE 383C 0001                  		move.w	#1,d4
0001CDF2                            
0001CDF2                            loc_1C8FE:
0001CDF2 4A44                       		tst.w	d4
0001CDF4 6700                       		beq.s	loc_1C92C
0001CDF6 ED4A                       		lsl.w	#6,d2
0001CDF8 2D40 0004                  		move.l	d0,4(a6)
0001CDFC 47F1 2000                  		lea	(a1,d2.w),a3
0001CE00 2C9B                       		move.l	(a3)+,(a6)
0001CE02 2C9B                       		move.l	(a3)+,(a6)
0001CE04 2C9B                       		move.l	(a3)+,(a6)
0001CE06 2C9B                       		move.l	(a3)+,(a6)
0001CE08 2C9B                       		move.l	(a3)+,(a6)
0001CE0A 2C9B                       		move.l	(a3)+,(a6)
0001CE0C 2C9B                       		move.l	(a3)+,(a6)
0001CE0E 2C9B                       		move.l	(a3)+,(a6)
0001CE10 2C9B                       		move.l	(a3)+,(a6)
0001CE12 2C9B                       		move.l	(a3)+,(a6)
0001CE14 2C9B                       		move.l	(a3)+,(a6)
0001CE16 2C9B                       		move.l	(a3)+,(a6)
0001CE18 2C9B                       		move.l	(a3)+,(a6)
0001CE1A 2C9B                       		move.l	(a3)+,(a6)
0001CE1C 2C9B                       		move.l	(a3)+,(a6)
0001CE1E 2C9B                       		move.l	(a3)+,(a6)
0001CE20                            
0001CE20                            loc_1C92C:
0001CE20 0680 0040 0000             		addi.l	#$400000,d0
0001CE26 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CE2A                            
0001CE2A 4E75                       		rts	
0001CE2C                            ; End of function Hud_Score
0001CE2C                            
0001CE2C                            ; ---------------------------------------------------------------------------
0001CE2C                            ; Subroutine to	load countdown numbers on the continue screen
0001CE2C                            ; ---------------------------------------------------------------------------
0001CE2C                            
0001CE2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE2C                            
0001CE2C                            
0001CE2C                            ContScrCounter:				; XREF: ContinueScreen
0001CE2C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CE36 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE3C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CE42 7C01                       		moveq	#1,d6
0001CE44 7800                       		moveq	#0,d4
0001CE46 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CE4A                            
0001CE4A                            ContScr_Loop:
0001CE4A 7400                       		moveq	#0,d2
0001CE4C 261A                       		move.l	(a2)+,d3
0001CE4E                            
0001CE4E                            loc_1C95A:
0001CE4E 9283                       		sub.l	d3,d1
0001CE50 6500                       		bcs.s	loc_1C962
0001CE52 5242                       		addq.w	#1,d2
0001CE54 60F8                       		bra.s	loc_1C95A
0001CE56                            ; ===========================================================================
0001CE56                            
0001CE56                            loc_1C962:
0001CE56 D283                       		add.l	d3,d1
0001CE58 ED4A                       		lsl.w	#6,d2
0001CE5A 47F1 2000                  		lea	(a1,d2.w),a3
0001CE5E 2C9B                       		move.l	(a3)+,(a6)
0001CE60 2C9B                       		move.l	(a3)+,(a6)
0001CE62 2C9B                       		move.l	(a3)+,(a6)
0001CE64 2C9B                       		move.l	(a3)+,(a6)
0001CE66 2C9B                       		move.l	(a3)+,(a6)
0001CE68 2C9B                       		move.l	(a3)+,(a6)
0001CE6A 2C9B                       		move.l	(a3)+,(a6)
0001CE6C 2C9B                       		move.l	(a3)+,(a6)
0001CE6E 2C9B                       		move.l	(a3)+,(a6)
0001CE70 2C9B                       		move.l	(a3)+,(a6)
0001CE72 2C9B                       		move.l	(a3)+,(a6)
0001CE74 2C9B                       		move.l	(a3)+,(a6)
0001CE76 2C9B                       		move.l	(a3)+,(a6)
0001CE78 2C9B                       		move.l	(a3)+,(a6)
0001CE7A 2C9B                       		move.l	(a3)+,(a6)
0001CE7C 2C9B                       		move.l	(a3)+,(a6)
0001CE7E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CE82                            
0001CE82 4E75                       		rts	
0001CE84                            ; End of function ContScrCounter
0001CE84                            
0001CE84                            ; ===========================================================================
0001CE84                            ; ---------------------------------------------------------------------------
0001CE84                            ; HUD counter sizes
0001CE84                            ; ---------------------------------------------------------------------------
0001CE84 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CE88 0000 2710                  Hud_10000:	dc.l 10000
0001CE8C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CE90 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CE94 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CE98 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CE9C                            
0001CE9C                            ; ---------------------------------------------------------------------------
0001CE9C                            ; Subroutine to	load time numbers patterns
0001CE9C                            ; ---------------------------------------------------------------------------
0001CE9C                            
0001CE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE9C                            
0001CE9C                            
0001CE9C                            Hud_Mins:				; XREF: Hud_ChkTime
0001CE9C 45F9 0001 CE98             		lea	(Hud_1).l,a2
0001CEA2 7C00                       		moveq	#0,d6
0001CEA4 6000                       		bra.s	loc_1C9BA
0001CEA6                            ; End of function Hud_Mins
0001CEA6                            
0001CEA6                            
0001CEA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA6                            
0001CEA6                            
0001CEA6                            Hud_Secs:				; XREF: Hud_ChkTime
0001CEA6 45F9 0001 CE94             		lea	(Hud_10).l,a2
0001CEAC 7C01                       		moveq	#1,d6
0001CEAE                            
0001CEAE                            loc_1C9BA:
0001CEAE 7800                       		moveq	#0,d4
0001CEB0 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEB4                            
0001CEB4                            Hud_TimeLoop:
0001CEB4 7400                       		moveq	#0,d2
0001CEB6 261A                       		move.l	(a2)+,d3
0001CEB8                            
0001CEB8                            loc_1C9C4:
0001CEB8 9283                       		sub.l	d3,d1
0001CEBA 6500                       		bcs.s	loc_1C9CC
0001CEBC 5242                       		addq.w	#1,d2
0001CEBE 60F8                       		bra.s	loc_1C9C4
0001CEC0                            ; ===========================================================================
0001CEC0                            
0001CEC0                            loc_1C9CC:
0001CEC0 D283                       		add.l	d3,d1
0001CEC2 4A42                       		tst.w	d2
0001CEC4 6700                       		beq.s	loc_1C9D6
0001CEC6 383C 0001                  		move.w	#1,d4
0001CECA                            
0001CECA                            loc_1C9D6:
0001CECA ED4A                       		lsl.w	#6,d2
0001CECC 2D40 0004                  		move.l	d0,4(a6)
0001CED0 47F1 2000                  		lea	(a1,d2.w),a3
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 2C9B                       		move.l	(a3)+,(a6)
0001CEDC 2C9B                       		move.l	(a3)+,(a6)
0001CEDE 2C9B                       		move.l	(a3)+,(a6)
0001CEE0 2C9B                       		move.l	(a3)+,(a6)
0001CEE2 2C9B                       		move.l	(a3)+,(a6)
0001CEE4 2C9B                       		move.l	(a3)+,(a6)
0001CEE6 2C9B                       		move.l	(a3)+,(a6)
0001CEE8 2C9B                       		move.l	(a3)+,(a6)
0001CEEA 2C9B                       		move.l	(a3)+,(a6)
0001CEEC 2C9B                       		move.l	(a3)+,(a6)
0001CEEE 2C9B                       		move.l	(a3)+,(a6)
0001CEF0 2C9B                       		move.l	(a3)+,(a6)
0001CEF2 2C9B                       		move.l	(a3)+,(a6)
0001CEF4 0680 0040 0000             		addi.l	#$400000,d0
0001CEFA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CEFE                            
0001CEFE 4E75                       		rts	
0001CF00                            ; End of function Hud_Secs
0001CF00                            
0001CF00                            ; ---------------------------------------------------------------------------
0001CF00                            ; Subroutine to	load time/ring bonus numbers patterns
0001CF00                            ; ---------------------------------------------------------------------------
0001CF00                            
0001CF00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF00                            
0001CF00                            
0001CF00                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CF00 45F9 0001 CE8C             		lea	(Hud_1000).l,a2
0001CF06 7C03                       		moveq	#3,d6
0001CF08 7800                       		moveq	#0,d4
0001CF0A 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF0E                            
0001CF0E                            Hud_BonusLoop:
0001CF0E 7400                       		moveq	#0,d2
0001CF10 261A                       		move.l	(a2)+,d3
0001CF12                            
0001CF12                            loc_1CA1E:
0001CF12 9283                       		sub.l	d3,d1
0001CF14 6500                       		bcs.s	loc_1CA26
0001CF16 5242                       		addq.w	#1,d2
0001CF18 60F8                       		bra.s	loc_1CA1E
0001CF1A                            ; ===========================================================================
0001CF1A                            
0001CF1A                            loc_1CA26:
0001CF1A D283                       		add.l	d3,d1
0001CF1C 4A42                       		tst.w	d2
0001CF1E 6700                       		beq.s	loc_1CA30
0001CF20 383C 0001                  		move.w	#1,d4
0001CF24                            
0001CF24                            loc_1CA30:
0001CF24 4A44                       		tst.w	d4
0001CF26 6700                       		beq.s	Hud_ClrBonus
0001CF28 ED4A                       		lsl.w	#6,d2
0001CF2A 47F1 2000                  		lea	(a1,d2.w),a3
0001CF2E 2C9B                       		move.l	(a3)+,(a6)
0001CF30 2C9B                       		move.l	(a3)+,(a6)
0001CF32 2C9B                       		move.l	(a3)+,(a6)
0001CF34 2C9B                       		move.l	(a3)+,(a6)
0001CF36 2C9B                       		move.l	(a3)+,(a6)
0001CF38 2C9B                       		move.l	(a3)+,(a6)
0001CF3A 2C9B                       		move.l	(a3)+,(a6)
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E 2C9B                       		move.l	(a3)+,(a6)
0001CF40 2C9B                       		move.l	(a3)+,(a6)
0001CF42 2C9B                       		move.l	(a3)+,(a6)
0001CF44 2C9B                       		move.l	(a3)+,(a6)
0001CF46 2C9B                       		move.l	(a3)+,(a6)
0001CF48 2C9B                       		move.l	(a3)+,(a6)
0001CF4A 2C9B                       		move.l	(a3)+,(a6)
0001CF4C 2C9B                       		move.l	(a3)+,(a6)
0001CF4E                            
0001CF4E                            loc_1CA5A:
0001CF4E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CF52                            
0001CF52 4E75                       		rts	
0001CF54                            ; ===========================================================================
0001CF54                            
0001CF54                            Hud_ClrBonus:
0001CF54 7A0F                       		moveq	#$F,d5
0001CF56                            
0001CF56                            Hud_ClrBonusLoop:
0001CF56 2CBC 0000 0000             		move.l	#0,(a6)
0001CF5C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CF60                            
0001CF60 60EC                       		bra.s	loc_1CA5A
0001CF62                            ; End of function Hud_TimeRingBonus
0001CF62                            
0001CF62                            ; ---------------------------------------------------------------------------
0001CF62                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CF62                            ; ---------------------------------------------------------------------------
0001CF62                            
0001CF62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF62                            
0001CF62                            
0001CF62                            Hud_Lives:				; XREF: Hud_ChkLives
0001CF62 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CF68 7200                       		moveq	#0,d1
0001CF6A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CF6E 45F9 0001 CE94             		lea	(Hud_10).l,a2
0001CF74 7C01                       		moveq	#1,d6
0001CF76 7800                       		moveq	#0,d4
0001CF78 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CF7C                            
0001CF7C                            Hud_LivesLoop:
0001CF7C 2D40 0004                  		move.l	d0,4(a6)
0001CF80 7400                       		moveq	#0,d2
0001CF82 261A                       		move.l	(a2)+,d3
0001CF84                            
0001CF84                            loc_1CA90:
0001CF84 9283                       		sub.l	d3,d1
0001CF86 6500                       		bcs.s	loc_1CA98
0001CF88 5242                       		addq.w	#1,d2
0001CF8A 60F8                       		bra.s	loc_1CA90
0001CF8C                            ; ===========================================================================
0001CF8C                            
0001CF8C                            loc_1CA98:
0001CF8C D283                       		add.l	d3,d1
0001CF8E 4A42                       		tst.w	d2
0001CF90 6700                       		beq.s	loc_1CAA2
0001CF92 383C 0001                  		move.w	#1,d4
0001CF96                            
0001CF96                            loc_1CAA2:
0001CF96 4A44                       		tst.w	d4
0001CF98 6700                       		beq.s	Hud_ClrLives
0001CF9A                            
0001CF9A                            loc_1CAA6:
0001CF9A EB4A                       		lsl.w	#5,d2
0001CF9C 47F1 2000                  		lea	(a1,d2.w),a3
0001CFA0 2C9B                       		move.l	(a3)+,(a6)
0001CFA2 2C9B                       		move.l	(a3)+,(a6)
0001CFA4 2C9B                       		move.l	(a3)+,(a6)
0001CFA6 2C9B                       		move.l	(a3)+,(a6)
0001CFA8 2C9B                       		move.l	(a3)+,(a6)
0001CFAA 2C9B                       		move.l	(a3)+,(a6)
0001CFAC 2C9B                       		move.l	(a3)+,(a6)
0001CFAE 2C9B                       		move.l	(a3)+,(a6)
0001CFB0                            
0001CFB0                            loc_1CABC:
0001CFB0 0680 0040 0000             		addi.l	#$400000,d0
0001CFB6 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CFBA                            
0001CFBA 4E75                       		rts	
0001CFBC                            ; ===========================================================================
0001CFBC                            
0001CFBC                            Hud_ClrLives:
0001CFBC 4A46                       		tst.w	d6
0001CFBE 67DA                       		beq.s	loc_1CAA6
0001CFC0 7A07                       		moveq	#7,d5
0001CFC2                            
0001CFC2                            Hud_ClrLivesLoop:
0001CFC2 2CBC 0000 0000             		move.l	#0,(a6)
0001CFC8 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CFCC 60E2                       		bra.s	loc_1CABC
0001CFCE                            ; End of function Hud_Lives
0001CFCE                            
0001CFCE                            ; ===========================================================================
0001CFCE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D2CE                            		even
0001D2CE                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D40E                            		even
0001D40E                            ; ===========================================================================
0001D40E                            ; ---------------------------------------------------------------------------
0001D40E                            ; When debug mode is currently in use
0001D40E                            ; ---------------------------------------------------------------------------
0001D40E                            
0001D40E                            DebugMode:				; XREF: Obj01; Obj09
0001D40E 7000                       		moveq	#0,d0
0001D410 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D414 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D418 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D41C                            ; ===========================================================================
0001D41C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D41E 0000                       		dc.w Debug_Skip-Debug_Index
0001D420                            ; ===========================================================================
0001D420                            
0001D420                            Debug_Main:				; XREF: Debug_Index
0001D420 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D424 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D42A 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D430 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D436 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D43C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D442 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D448 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D44E 117C 0000 001A             		move.b	#0,$1A(a0)
0001D454 117C 0000 001C             		move.b	#0,$1C(a0)
0001D45A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D460 6600                       		bne.s	Debug_Zone	; if not, branch
0001D462 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D468 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D46E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D470 6000                       		bra.s	Debug_UseList
0001D472                            ; ===========================================================================
0001D472                            
0001D472                            Debug_Zone:
0001D472 7000                       		moveq	#0,d0
0001D474 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D478                            
0001D478                            Debug_UseList:
0001D478 45F9 0000 0000             		lea	(DebugList).l,a2
0001D47E D040                       		add.w	d0,d0
0001D480 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D484 3C1A                       		move.w	(a2)+,d6
0001D486 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D48A 6200                       		bhi.s	loc_1CF9E
0001D48C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D492                            
0001D492                            loc_1CF9E:
0001D492 6100 0000                  		bsr.w	Debug_ShowItem
0001D496 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D49C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D4A2                            
0001D4A2                            Debug_Skip:				; XREF: Debug_Index
0001D4A2 7006                       		moveq	#6,d0
0001D4A4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D4AA 6700                       		beq.s	loc_1CFBE
0001D4AC 7000                       		moveq	#0,d0
0001D4AE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D4B2                            
0001D4B2                            loc_1CFBE:
0001D4B2 45F9 0000 0000             		lea	(DebugList).l,a2
0001D4B8 D040                       		add.w	d0,d0
0001D4BA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D4BE 3C1A                       		move.w	(a2)+,d6
0001D4C0 6100 0000                  		bsr.w	Debug_Control
0001D4C4 4EF9 0000 D6AA             		jmp	DisplaySprite
0001D4CA                            
0001D4CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4CA                            
0001D4CA                            
0001D4CA                            Debug_Control:
0001D4CA 7800                       		moveq	#0,d4
0001D4CC 323C 0001                  		move.w	#1,d1
0001D4D0 1838 F605                  		move.b	($FFFFF605).w,d4
0001D4D4 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D4D8 6600                       		bne.s	loc_1D018	; if yes, branch
0001D4DA 1038 F604                  		move.b	($FFFFF604).w,d0
0001D4DE 0240 000F                  		andi.w	#$F,d0
0001D4E2 6600                       		bne.s	loc_1D000
0001D4E4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D4EA 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D4F0 6000 0000                  		bra.w	Debug_BackItem
0001D4F4                            ; ===========================================================================
0001D4F4                            
0001D4F4                            loc_1D000:
0001D4F4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D4F8 6600                       		bne.s	loc_1D01C
0001D4FA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D500 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D504 6600                       		bne.s	loc_1D018
0001D506 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D50C                            
0001D50C                            loc_1D018:
0001D50C 1838 F604                  		move.b	($FFFFF604).w,d4
0001D510                            
0001D510                            loc_1D01C:
0001D510 7200                       		moveq	#0,d1
0001D512 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D516 5241                       		addq.w	#1,d1
0001D518 4841                       		swap	d1
0001D51A E881                       		asr.l	#4,d1
0001D51C 2428 000C                  		move.l	$C(a0),d2
0001D520 2628 0008                  		move.l	8(a0),d3
0001D524 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D528 6700                       		beq.s	loc_1D03C	; if not, branch
0001D52A 9481                       		sub.l	d1,d2
0001D52C 6400                       		bcc.s	loc_1D03C
0001D52E 7400                       		moveq	#0,d2
0001D530                            
0001D530                            loc_1D03C:
0001D530 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D534 6700                       		beq.s	loc_1D052	; if not, branch
0001D536 D481                       		add.l	d1,d2
0001D538 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D53E 6500                       		bcs.s	loc_1D052
0001D540 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D546                            
0001D546                            loc_1D052:
0001D546 0804 0002                  		btst	#2,d4
0001D54A 6700                       		beq.s	loc_1D05E
0001D54C 9681                       		sub.l	d1,d3
0001D54E 6400                       		bcc.s	loc_1D05E
0001D550 7600                       		moveq	#0,d3
0001D552                            
0001D552                            loc_1D05E:
0001D552 0804 0003                  		btst	#3,d4
0001D556 6700                       		beq.s	loc_1D066
0001D558 D681                       		add.l	d1,d3
0001D55A                            
0001D55A                            loc_1D066:
0001D55A 2142 000C                  		move.l	d2,$C(a0)
0001D55E 2143 0008                  		move.l	d3,8(a0)
0001D562                            
0001D562                            Debug_BackItem:
0001D562 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D568 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D56A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D570 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D572 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D576 6400                       		bcc.s	Debug_NoLoop
0001D578 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D57C 6000                       		bra.s	Debug_NoLoop
0001D57E                            ; ===========================================================================
0001D57E                            
0001D57E                            Debug_NextItem:
0001D57E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D584 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D586 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D58A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D58E 6200                       		bhi.s	Debug_NoLoop
0001D590 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D596                            
0001D596                            Debug_NoLoop:
0001D596 6000 0000                  		bra.w	Debug_ShowItem
0001D59A                            ; ===========================================================================
0001D59A                            
0001D59A                            Debug_MakeItem:
0001D59A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D5A0 6700                       		beq.s	Debug_Exit	; if not, branch
0001D5A2 4EB9 0000 DB36             		jsr	SingleObjLoad
0001D5A8 6600                       		bne.s	Debug_Exit
0001D5AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001D5B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D5B6 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D5BA 1368 0001 0001             		move.b	1(a0),1(a1)
0001D5C0 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D5C6 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D5CC 7000                       		moveq	#0,d0
0001D5CE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D5D2 E748                       		lsl.w	#3,d0
0001D5D4 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D5DA 4E75                       		rts	
0001D5DC                            ; ===========================================================================
0001D5DC                            
0001D5DC                            Debug_Exit:
0001D5DC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D5E2 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D5E4 7000                       		moveq	#0,d0
0001D5E6 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D5EA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D5F2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D5F8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D5FC 3140 000A                  		move.w	d0,$A(a0)
0001D600 3140 000E                  		move.w	d0,$E(a0)
0001D604 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D60A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D610 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D616 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D618 4278 F780                  		clr.w	($FFFFF780).w
0001D61C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D622 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D62A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D630 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D636 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D63C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D642                            
0001D642                            Debug_DoNothing:
0001D642 4E75                       		rts	
0001D644                            ; End of function Debug_Control
0001D644                            
0001D644                            
0001D644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D644                            
0001D644                            
0001D644                            Debug_ShowItem:				; XREF: Debug_Main
0001D644 7000                       		moveq	#0,d0
0001D646 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D64A E748                       		lsl.w	#3,d0
0001D64C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D652 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D658 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D65E 4E75                       		rts	
0001D660                            ; End of function Debug_ShowItem
0001D660                            
0001D660                            ; ===========================================================================
0001D660                            ; ---------------------------------------------------------------------------
0001D660                            ; Debug	list pointers
0001D660                            ; ---------------------------------------------------------------------------
0001D660                            DebugList:
0001D660                            	include "_inc\Debug list pointers.asm"
0001D660                            ; ---------------------------------------------------------------------------
0001D660                            ; Debug	list pointers
0001D660                            ; ---------------------------------------------------------------------------
0001D660 0000                       	dc.w Debug_GHZ-DebugList
0001D662 0000                       	dc.w Debug_LZ-DebugList
0001D664 0000                       	dc.w Debug_MZ-DebugList
0001D666 0000                       	dc.w Debug_SLZ-DebugList
0001D668 0000                       	dc.w Debug_SYZ-DebugList
0001D66A 0000                       	dc.w Debug_SBZ-DebugList
0001D66C 0000                       	dc.w Debug_Ending-DebugList
0001D66C 0000                       	dc.w Debug_Ending-DebugList
0001D66E                            
0001D66E                            ; ---------------------------------------------------------------------------
0001D66E                            ; Debug	list - Green Hill
0001D66E                            ; ---------------------------------------------------------------------------
0001D66E                            Debug_GHZ:
0001D66E                            	include "_inc\Debug list - GHZ.asm"
0001D66E                            ; ---------------------------------------------------------------------------
0001D66E                            ; Debug	list - Green Hill
0001D66E                            ; ---------------------------------------------------------------------------
0001D66E 0010                       	dc.w $10			; number of items in list
0001D670 2500 A00A                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D674 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001D678 2600 A632                  	dc.l Map_obj26+$26000000
0001D67C 0000 0680                  	dc.b 0,	0, 6, $80
0001D680 1F00 97C8                  	dc.l Map_obj1F+$1F000000
0001D684 0000 0400                  	dc.b 0,	0, 4, 0
0001D688 2200 9AA8                  	dc.l Map_obj22+$22000000
0001D68C 0000 0444                  	dc.b 0,	0, 4, $44
0001D690 2B00 AC54                  	dc.l Map_obj2B+$2B000000
0001D694 0000 047B                  	dc.b 0,	0, 4, $7B
0001D698 3600 D092                  	dc.l Map_obj36+$36000000
0001D69C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D6A0 1800 81C6                  	dc.l Map_obj18+$18000000
0001D6A4 0000 4000                  	dc.b 0,	0, $40,	0
0001D6A8 3B00 D1B8                  	dc.l Map_obj3B+$3B000000
0001D6AC 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D6B0 4000 F846                  	dc.l Map_obj40+$40000000
0001D6B4 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D6B8 4100 DDC4                  	dc.l Map_obj41+$41000000
0001D6BC 0000 0523                  	dc.b 0,	0, 5, $23
0001D6C0 4200 DFEA                  	dc.l Map_obj42+$42000000
0001D6C4 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D6C8 4400 E2F8                  	dc.l Map_obj44+$44000000
0001D6CC 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D6D0 1900 8234                  	dc.l Map_obj48+$19000000
0001D6D4 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D6D8 7901 74D2                  	dc.l Map_obj79+$79000000
0001D6DC 0100 0571                  	dc.w $100, lamppostart
0001D6E0 4B00 A04A                  	dc.l Map_obj4B+$4B000000
0001D6E4 0000 222D                  	dc.w 0, ssringart+$2000
0001D6E8 7D01 7622                  	dc.l Map_obj7D+$7D000000
0001D6EC 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D6F0                            	even
0001D6F0                            	even
0001D6F0                            
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            ; Debug	list - Labyrinth
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            Debug_LZ:
0001D6F0                            	include "_inc\Debug list - LZ.asm"
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            ; Debug	list - Labyrinth
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0 0019                       	dc.w $19
0001D6F2 2500 A00A                  	dc.l Map_obj25+$25000000
0001D6F6 0000 26BA                  	dc.w 0, ringart+$2000
0001D6FA 2600 A632                  	dc.l Map_obj26+$26000000
0001D6FE 0000 0680                  	dc.b 0,	0, 6, $80
0001D702 4100 DDC4                  	dc.l Map_obj41+$41000000
0001D706 0000 0523                  	dc.b 0,	0, 5, $23
0001D70A 2C00 ACFA                  	dc.l Map_obj2C+$2C000000
0001D70E 0800 2486                  	dc.b 8,	0, $24,	$86
0001D712 2D00 AEE6                  	dc.l Map_obj2D+$2D000000
0001D716 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D71A 1601 202E                  	dc.l Map_obj16+$16000000
0001D71E 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D722 1601 202E                  	dc.l Map_obj16+$16000000
0001D726 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D72A 3300 C370                  	dc.l Map_obj33+$33000000
0001D72E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D732 3200 BF30                  	dc.l Map_obj32+$32000000
0001D736 0000 0513                  	dc.b 0,	0, 5, $13
0001D73A 3600 D092                  	dc.l Map_obj36+$36000000
0001D73E 0000 051B                  	dc.b 0,	0, 5, $1B
0001D742 5201 0150                  	dc.l Map_obj52a+$52000000
0001D746 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D74A 6101 2256                  	dc.l Map_obj61+$61000000
0001D74E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D752 6101 2256                  	dc.l Map_obj61+$61000000
0001D756 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D75A 6101 2256                  	dc.l Map_obj61+$61000000
0001D75E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D762 6201 23AA                  	dc.l Map_obj62+$62000000
0001D766 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D76A 6101 2256                  	dc.l Map_obj61+$61000000
0001D76E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D772 6101 2256                  	dc.l Map_obj61+$61000000
0001D776 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D77A 6301 270C                  	dc.l Map_obj63+$63000000
0001D77E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D782 6001 1F78                  	dc.l Map_obj60+$60000000
0001D786 0000 0467                  	dc.b 0,	0, 4, $67
0001D78A 6401 2A52                  	dc.l Map_obj64+$64000000
0001D78E 8413 8348                  	dc.b $84, $13, $83, $48
0001D792 6501 2BDA                  	dc.l Map_obj65+$65000000
0001D796 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D79A 6501 2BDA                  	dc.l Map_obj65+$65000000
0001D79E 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D7A2 0B01 13C8                  	dc.l Map_obj0B+$B000000
0001D7A6 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D7AA 0C01 1498                  	dc.l Map_obj0C+$C000000
0001D7AE 0200 4328                  	dc.b 2,	0, $43,	$28
0001D7B2 7901 74D2                  	dc.l Map_obj79+$79000000
0001D7B6 0100 0571                  	dc.w $100, lamppostart
0001D7BA                            	even
0001D7BA                            	even
0001D7BA                            
0001D7BA                            ; ---------------------------------------------------------------------------
0001D7BA                            ; Debug	list - Marble
0001D7BA                            ; ---------------------------------------------------------------------------
0001D7BA                            Debug_MZ:
0001D7BA                            	include "_inc\Debug list - MZ.asm"
0001D7BA                            ; ---------------------------------------------------------------------------
0001D7BA                            ; Debug	list - Marble
0001D7BA                            ; ---------------------------------------------------------------------------
0001D7BA 0012                       	dc.w $12
0001D7BC 2500 A00A                  	dc.l Map_obj25+$25000000
0001D7C0 0000 26BA                  	dc.w 0, ringart+$2000
0001D7C4 2600 A632                  	dc.l Map_obj26+$26000000
0001D7C8 0000 0680                  	dc.b 0,	0, 6, $80
0001D7CC 2200 9AA8                  	dc.l Map_obj22+$22000000
0001D7D0 0000 0444                  	dc.b 0,	0, 4, $44
0001D7D4 3600 D092                  	dc.l Map_obj36+$36000000
0001D7D8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7DC 4100 DDC4                  	dc.l Map_obj41+$41000000
0001D7E0 0000 0523                  	dc.b 0,	0, 5, $23
0001D7E4 1300 B3F4                  	dc.l Map_obj14+$13000000
0001D7E8 0000 0345                  	dc.b 0,	0, 3, $45
0001D7EC 4600 E9AA                  	dc.l Map_obj46+$46000000
0001D7F0 0000 4000                  	dc.b 0,	0, $40,	0
0001D7F4 4C00 F2F2                  	dc.l Map_obj4C+$4C000000
0001D7F8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D7FC 4E00 F5D6                  	dc.l Map_obj4E+$4E000000
0001D800 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D804 3300 C370                  	dc.l Map_obj33+$33000000
0001D808 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D80C 5000 F9D4                  	dc.l Map_obj50+$50000000
0001D810 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D814 5100 FE84                  	dc.l Map_obj51+$51000000
0001D818 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D81C 5201 00FA                  	dc.l Map_obj52+$52000000
0001D820 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D824 5300 87CC                  	dc.l Map_obj53+$53000000
0001D828 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D82C 5400 F2B8                  	dc.l Map_obj54+$54000000
0001D830 0000 8680                  	dc.b 0,	0, $86,	$80
0001D834 5501 02EE                  	dc.l Map_obj55+$55000000
0001D838 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D83C 7801 714C                  	dc.l Map_obj78+$78000000
0001D840 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D844 7901 74D2                  	dc.l Map_obj79+$79000000
0001D848 0100 0571                  	dc.w $100, lamppostart
0001D84C                            	even
0001D84C                            	even
0001D84C                            
0001D84C                            ; ---------------------------------------------------------------------------
0001D84C                            ; Debug	list - Star Light
0001D84C                            ; ---------------------------------------------------------------------------
0001D84C                            Debug_SLZ:
0001D84C                            	include "_inc\Debug list - SLZ.asm"
0001D84C                            ; ---------------------------------------------------------------------------
0001D84C                            ; Debug	list - Star Light
0001D84C                            ; ---------------------------------------------------------------------------
0001D84C 000F                       	dc.w $F
0001D84E 2500 A00A                  	dc.l Map_obj25+$25000000
0001D852 0000 26BA                  	dc.w 0, ringart+$2000
0001D856 2600 A632                  	dc.l Map_obj26+$26000000
0001D85A 0000 0680                  	dc.b 0,	0, 6, $80
0001D85E 5901 0DF0                  	dc.l Map_obj59+$59000000
0001D862 0000 4000                  	dc.b 0,	0, $40,	0
0001D866 5300 87CC                  	dc.l Map_obj53+$53000000
0001D86A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D86E 1800 8224                  	dc.l Map_obj18b+$18000000
0001D872 0000 4000                  	dc.b 0,	0, $40,	0
0001D876 5A01 0F2A                  	dc.l Map_obj5A+$5A000000
0001D87A 0000 4000                  	dc.b 0,	0, $40,	0
0001D87E 5B01 10E2                  	dc.l Map_obj5B+$5B000000
0001D882 0000 4000                  	dc.b 0,	0, $40,	0
0001D886 5D01 16B2                  	dc.l Map_obj5D+$5D000000
0001D88A 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D88E 5E01 1A44                  	dc.l Map_obj5E+$5E000000
0001D892 0000 0374                  	dc.b 0,	0, 3, $74
0001D896 4100 DDC4                  	dc.l Map_obj41+$41000000
0001D89A 0000 0523                  	dc.b 0,	0, 5, $23
0001D89E 1300 B3F4                  	dc.l Map_obj14+$13000000
0001D8A2 0000 0480                  	dc.b 0,	0, 4, $80
0001D8A6 1C00 88DC                  	dc.l Map_obj1C+$1C000000
0001D8AA 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D8AE 5F01 1CC2                  	dc.l Map_obj5F+$5F000000
0001D8B2 0000 0400                  	dc.b 0,	0, 4, 0
0001D8B6 6001 1F78                  	dc.l Map_obj60+$60000000
0001D8BA 0000 2429                  	dc.b 0,	0, $24,	$29
0001D8BE 7901 74D2                  	dc.l Map_obj79+$79000000
0001D8C2 0100 0571                  	dc.w $100, lamppostart
0001D8C6                            	even
0001D8C6                            	even
0001D8C6                            
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6                            ; Debug	list - Spring Yard
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6                            Debug_SYZ:
0001D8C6                            	include "_inc\Debug list - SYZ.asm"
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6                            ; Debug	list - Spring Yard
0001D8C6                            ; ---------------------------------------------------------------------------
0001D8C6 000F                       	dc.w $F
0001D8C8 2500 A00A                  	dc.l Map_obj25+$25000000
0001D8CC 0000 26BA                  	dc.w 0, ringart+$2000
0001D8D0 2600 A632                  	dc.l Map_obj26+$26000000
0001D8D4 0000 0680                  	dc.b 0,	0, 6, $80
0001D8D8 3600 D092                  	dc.l Map_obj36+$36000000
0001D8DC 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8E0 4100 DDC4                  	dc.l Map_obj41+$41000000
0001D8E4 0000 0523                  	dc.b 0,	0, 5, $23
0001D8E8 4300 E24A                  	dc.l Map_obj43+$43000000
0001D8EC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D8F0 1200 EA28                  	dc.l Map_obj12+$12000000
0001D8F4 0000 0000                  	dc.b 0,	0, 0, 0
0001D8F8 4700 EBB0                  	dc.l Map_obj47+$47000000
0001D8FC 0000 0380                  	dc.b 0,	0, 3, $80
0001D900 1F00 97C8                  	dc.l Map_obj1F+$1F000000
0001D904 0000 0400                  	dc.b 0,	0, 4, 0
0001D908 2200 9AA8                  	dc.l Map_obj22+$22000000
0001D90C 0000 0444                  	dc.b 0,	0, 4, $44
0001D910 5000 F9D4                  	dc.l Map_obj50+$50000000
0001D914 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D918 1800 8212                  	dc.l Map_obj18a+$18000000
0001D91C 0000 4000                  	dc.b 0,	0, $40,	0
0001D920 5601 07B0                  	dc.l Map_obj56+$56000000
0001D924 0000 4000                  	dc.b 0,	0, $40,	0
0001D928 3200 BF30                  	dc.l Map_obj32+$32000000
0001D92C 0000 0513                  	dc.b 0,	0, 5, $13
0001D930 7801 714C                  	dc.l Map_obj78+$78000000
0001D934 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D938 7901 74D2                  	dc.l Map_obj79+$79000000
0001D93C 0100 0571                  	dc.w $100, lamppostart
0001D940                            	even
0001D940                            	even
0001D940                            
0001D940                            ; ---------------------------------------------------------------------------
0001D940                            ; Debug	list - Scrap Brain
0001D940                            ; ---------------------------------------------------------------------------
0001D940                            Debug_SBZ:
0001D940                            	include "_inc\Debug list - SBZ.asm"
0001D940                            ; ---------------------------------------------------------------------------
0001D940                            ; Debug	list - Scrap Brain
0001D940                            ; ---------------------------------------------------------------------------
0001D940 001D                       	dc.w $1D
0001D942 2500 A00A                  	dc.l Map_obj25+$25000000
0001D946 0000 26BA                  	dc.w 0, ringart+$2000
0001D94A 2600 A632                  	dc.l Map_obj26+$26000000
0001D94E 0000 0680                  	dc.b 0,	0, 6, $80
0001D952 5F01 1CC2                  	dc.l Map_obj5F+$5F000000
0001D956 0000 0400                  	dc.b 0,	0, 4, 0
0001D95A 6001 1F78                  	dc.l Map_obj60+$60000000
0001D95E 0000 0429                  	dc.b 0,	0, 4, $29
0001D962 7801 714C                  	dc.l Map_obj78+$78000000
0001D966 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D96A 1501 0B4C                  	dc.l Map_obj15b+$15000000
0001D96E 0702 4391                  	dc.b 7,	2, $43,	$91
0001D972 6701 5A70                  	dc.l Map_obj67+$67000000
0001D976 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D97A 5201 00FA                  	dc.l Map_obj52+$52000000
0001D97E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D982 3200 BF30                  	dc.l Map_obj32+$32000000
0001D986 0000 0513                  	dc.b 0,	0, 5, $13
0001D98A 6901 5CCA                  	dc.l Map_obj69+$69000000
0001D98E 0300 4492                  	dc.b 3,	0, $44,	$92
0001D992 6901 5D24                  	dc.l Map_obj69a+$69000000
0001D996 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D99A 6A01 5F82                  	dc.l Map_obj6A+$6A000000
0001D99E 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D9A2 5300 87CC                  	dc.l Map_obj53+$53000000
0001D9A6 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D9AA 5201 00FA                  	dc.l Map_obj52+$52000000
0001D9AE 3903 4460                  	dc.b $39, 3, $44, $60
0001D9B2 6B01 6352                  	dc.l Map_obj6B+$6B000000
0001D9B6 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D9BA 2A00 8A72                  	dc.l Map_obj2A+$2A000000
0001D9BE 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D9C2 6B01 6352                  	dc.l Map_obj6B+$6B000000
0001D9C6 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D9CA 6A01 5F82                  	dc.l Map_obj6A+$6A000000
0001D9CE 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D9D2 6B01 6352                  	dc.l Map_obj6B+$6B000000
0001D9D6 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D9DA 6A01 5F82                  	dc.l Map_obj6A+$6A000000
0001D9DE 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D9E2 6B01 6352                  	dc.l Map_obj6B+$6B000000
0001D9E6 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D9EA 6C01 6514                  	dc.l Map_obj6C+$6C000000
0001D9EE 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D9F2 6D00 E69A                  	dc.l Map_obj6D+$6D000000
0001D9F6 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D9FA 6D00 E69A                  	dc.l Map_obj6D+$6D000000
0001D9FE 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DA02 6E01 65CA                  	dc.l Map_obj6E+$6E000000
0001DA06 0400 047E                  	dc.b 4,	0, 4, $7E
0001DA0A 7001 6A10                  	dc.l Map_obj70+$70000000
0001DA0E 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DA12 7101 1558                  	dc.l Map_obj71+$71000000
0001DA16 1100 8680                  	dc.b $11, 0, $86, $80
0001DA1A 1E00 8EE0                  	dc.l Map_obj1E+$1E000000
0001DA1E 0400 2302                  	dc.b 4,	0, $23,	2
0001DA22 7901 74D2                  	dc.l Map_obj79+$79000000
0001DA26 0100 0571                  	dc.w $100, lamppostart
0001DA2A                            	even
0001DA2A                            	even
0001DA2A                            
0001DA2A                            ; ---------------------------------------------------------------------------
0001DA2A                            ; Debug	list - ending sequence / special stage
0001DA2A                            ; ---------------------------------------------------------------------------
0001DA2A                            Debug_Ending:
0001DA2A                            	include "_inc\Debug list - Ending and SS.asm"
0001DA2A                            ; ---------------------------------------------------------------------------
0001DA2A                            ; Debug	list - ending sequence / special stage
0001DA2A                            ; ---------------------------------------------------------------------------
0001DA2A 000D                       	dc.w $D
0001DA2C 2500 A00A                  	dc.l Map_obj25+$25000000
0001DA30 0000 26BA                  	dc.w 0, ringart+$2000
0001DA34 4700 EBB0                  	dc.l Map_obj47+$47000000
0001DA38 0000 0380                  	dc.b 0,	0, 3, $80
0001DA3C 2800 94FA                  	dc.l Map_obj28a+$28000000
0001DA40 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DA44 2800 94FA                  	dc.l Map_obj28a+$28000000
0001DA48 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DA4C 2800 94FA                  	dc.l Map_obj28a+$28000000
0001DA50 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DA54 2800 94E2                  	dc.l Map_obj28+$28000000
0001DA58 0D00 0553                  	dc.b $D, 0, 5, $53
0001DA5C 2800 94E2                  	dc.l Map_obj28+$28000000
0001DA60 0E00 0553                  	dc.b $E, 0, 5, $53
0001DA64 2800 94E2                  	dc.l Map_obj28+$28000000
0001DA68 0F00 0573                  	dc.b $F, 0, 5, $73
0001DA6C 2800 94E2                  	dc.l Map_obj28+$28000000
0001DA70 1000 0573                  	dc.b $10, 0, 5,	$73
0001DA74 2800 94FA                  	dc.l Map_obj28a+$28000000
0001DA78 1100 0585                  	dc.b $11, 0, 5,	$85
0001DA7C 2800 9512                  	dc.l Map_obj28b+$28000000
0001DA80 1200 0593                  	dc.b $12, 0, 5,	$93
0001DA84 2800 94FA                  	dc.l Map_obj28a+$28000000
0001DA88 1300 0565                  	dc.b $13, 0, 5,	$65
0001DA8C 2800 9512                  	dc.l Map_obj28b+$28000000
0001DA90 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DA94                            	even
0001DA94                            	even
0001DA94                            
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Main level load blocks
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            MainLoadBlocks:
0001DA94                            	include "_inc\Main level load blocks.asm"
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Main level load blocks
0001DA94                            ;
0001DA94                            ; ===FORMAT===
0001DA94                            ; level	patterns + (1st	PLC num	* 10^6)
0001DA94                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DA94                            ; 256x256 mappings
0001DA94                            ; blank, music (unused), pal index (unused), pal index
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DA98 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DA9C 0000 0000                  	dc.l Blk256_GHZ
0001DAA0 0081 0404                  	dc.b 0,	$81, 4,	4
0001DAA4 0000 0000                  	dc.l Nem_LZ+$6000000
0001DAA8 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DAAC 0000 0000                  	dc.l Blk256_LZ
0001DAB0 0082 0505                  	dc.b 0,	$82, 5,	5
0001DAB4 0000 0000                  	dc.l Nem_MZ+$8000000
0001DAB8 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DABC 0000 0000                  	dc.l Blk256_MZ
0001DAC0 0083 0606                  	dc.b 0,	$83, 6,	6
0001DAC4 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DAC8 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DACC 0000 0000                  	dc.l Blk256_SLZ
0001DAD0 0084 0707                  	dc.b 0,	$84, 7,	7
0001DAD4 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DAD8 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DADC 0000 0000                  	dc.l Blk256_SYZ
0001DAE0 0085 0808                  	dc.b 0,	$85, 8,	8
0001DAE4 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DAE8 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DAEC 0000 0000                  	dc.l Blk256_SBZ
0001DAF0 0086 0909                  	dc.b 0,	$86, 9,	9
0001DAF4 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DAF8 0000 0000                  	dc.l Blk16_GHZ
0001DAFC 0000 0000                  	dc.l Blk256_GHZ
0001DB00 0086 1313                  	dc.b 0,	$86, $13, $13
0001DB04                            	even
0001DB04                            	even
0001DB04                            
0001DB04                            ; ---------------------------------------------------------------------------
0001DB04                            ; Pattern load cues
0001DB04                            ; ---------------------------------------------------------------------------
0001DB04                            ArtLoadCues:
0001DB04                            	include "_inc\Pattern load cues.asm"
0001DB04                            ; ---------------------------------------------------------------------------
0001DB04                            ; Pattern load cues - index
0001DB04                            ; ---------------------------------------------------------------------------
0001DB04 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DB08 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DB0C 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DB10 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DB14 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DB18 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DB1C 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DB20 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DB24 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DB28 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DB2C 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DB30 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DB34 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DB38 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DB3C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DB40 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DB44                            ; ---------------------------------------------------------------------------
0001DB44                            ; Pattern load cues - standard block 1
0001DB44                            ; ---------------------------------------------------------------------------
0001DB44 0002                       PLC_Main:	dc.w 2
0001DB46 0000 0000                  		dc.l Nem_Hud		; HUD
0001DB4A D940                       		dc.w $D940
0001DB4C 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DB50 FA80                       		dc.w $FA80
0001DB52 0000 0000                  		dc.l Nem_Ring		; rings
0001DB56 D740                       		dc.w ringart*$20
0001DB58                            ; ---------------------------------------------------------------------------
0001DB58                            ; Pattern load cues - standard block 2
0001DB58                            ; ---------------------------------------------------------------------------
0001DB58 0002                       PLC_Main2:	dc.w 2
0001DB5A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DB5E AE20                       		dc.w lamppostart*$20
0001DB60 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DB64 AD00                       		dc.w pointsart*$20
0001DB66 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DB6A D000                       		dc.w $D000
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C                            ; Pattern load cues - explosion
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C 0000                       PLC_Explode:	dc.w 0
0001DB6E 0000 0000                  		dc.l Nem_Explode	; explosion
0001DB72 B400                       		dc.w $B400
0001DB74                            ; ---------------------------------------------------------------------------
0001DB74                            ; Pattern load cues - game/time	over
0001DB74                            ; ---------------------------------------------------------------------------
0001DB74 0000                       PLC_GameOver:	dc.w 0
0001DB76 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DB7A ABC0                       		dc.w $ABC0
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C                            ; Pattern load cues - Green Hill
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C 000B                       PLC_GHZ:	dc.w $B
0001DB7E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DB82 0000                       		dc.w 0
0001DB84 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DB88 39A0                       		dc.w $39A0
0001DB8A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DB8E 6B00                       		dc.w $6B00
0001DB90 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DB94 7A00                       		dc.w $7A00
0001DB96 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DB9A 8000                       		dc.w $8000
0001DB9C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DBA0 8880                       		dc.w $8880
0001DBA2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DBA6 8F60                       		dc.w $8F60
0001DBA8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DBAC 9360                       		dc.w $9360
0001DBAE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DBB2 9E00                       		dc.w $9E00
0001DBB4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DBB8 A360                       		dc.w $A360
0001DBBA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DBBE A460                       		dc.w $A460
0001DBC0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DBC4 A660                       		dc.w $A660
0001DBC6 0005                       PLC_GHZ2:	dc.w 5
0001DBC8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DBCC 7000                       		dc.w $7000
0001DBCE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DBD2 71C0                       		dc.w $71C0
0001DBD4 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DBD8 7300                       		dc.w $7300
0001DBDA 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DBDE 7540                       		dc.w $7540
0001DBE0 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DBE4 A1E0                       		dc.w $A1E0
0001DBE6 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DBEA 6980                       		dc.w $6980
0001DBEC                            ; ---------------------------------------------------------------------------
0001DBEC                            ; Pattern load cues - Labyrinth
0001DBEC                            ; ---------------------------------------------------------------------------
0001DBEC 000B                       PLC_LZ:		dc.w $B
0001DBEE 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DBF2 0000                       		dc.w 0
0001DBF4 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DBF8 3C00                       		dc.w $3C00
0001DBFA 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DBFE 3E00                       		dc.w $3E00
0001DC00 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DC04 4B20                       		dc.w $4B20
0001DC06 0000 0000                  		dc.l Nem_Water		; water	surface
0001DC0A 6000                       		dc.w $6000
0001DC0C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DC10 6200                       		dc.w $6200
0001DC12 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DC16 6500                       		dc.w $6500
0001DC18 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DC1C 6900                       		dc.w $6900
0001DC1E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DC22 7780                       		dc.w $7780
0001DC24 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DC28 7880                       		dc.w $7880
0001DC2A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DC2E 7980                       		dc.w $7980
0001DC30 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DC34 94C0                       		dc.w $94C0
0001DC36 000C                       PLC_LZ2:	dc.w $C
0001DC38 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DC3C 7BC0                       		dc.w $7BC0
0001DC3E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DC42 7CC0                       		dc.w $7CC0
0001DC44 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DC48 7EC0                       		dc.w $7EC0
0001DC4A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DC4E 5D20                       		dc.w $5D20
0001DC50 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DC54 8800                       		dc.w $8800
0001DC56 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DC5A 89E0                       		dc.w $89E0
0001DC5C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DC60 8CE0                       		dc.w $8CE0
0001DC62 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DC66 90C0                       		dc.w $90C0
0001DC68 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DC6C A1E0                       		dc.w $A1E0
0001DC6E 0000 0000                  		dc.l Nem_Cork		; cork block
0001DC72 A000                       		dc.w $A000
0001DC74 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DC78 A360                       		dc.w $A360
0001DC7A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DC7E A460                       		dc.w $A460
0001DC80 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DC84 A660                       		dc.w $A660
0001DC86                            ; ---------------------------------------------------------------------------
0001DC86                            ; Pattern load cues - Marble
0001DC86                            ; ---------------------------------------------------------------------------
0001DC86 0009                       PLC_MZ:		dc.w 9
0001DC88 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DC8C 0000                       		dc.w 0
0001DC8E 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DC92 6000                       		dc.w $6000
0001DC94 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DC98 68A0                       		dc.w $68A0
0001DC9A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DC9E 7000                       		dc.w $7000
0001DCA0 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DCA4 71C0                       		dc.w $71C0
0001DCA6 0000 0000                  		dc.l Nem_Lava		; lava
0001DCAA 7500                       		dc.w $7500
0001DCAC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCB0 8880                       		dc.w $8880
0001DCB2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DCB6 8F60                       		dc.w $8F60
0001DCB8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DCBC 9700                       		dc.w $9700
0001DCBE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DCC2 9FE0                       		dc.w $9FE0
0001DCC4 0004                       PLC_MZ2:	dc.w 4
0001DCC6 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DCCA A260                       		dc.w $A260
0001DCCC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCD0 A360                       		dc.w $A360
0001DCD2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCD6 A460                       		dc.w $A460
0001DCD8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCDC A660                       		dc.w $A660
0001DCDE 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DCE2 5700                       		dc.w $5700
0001DCE4                            ; ---------------------------------------------------------------------------
0001DCE4                            ; Pattern load cues - Star Light
0001DCE4                            ; ---------------------------------------------------------------------------
0001DCE4 0008                       PLC_SLZ:	dc.w 8
0001DCE6 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DCEA 0000                       		dc.w 0
0001DCEC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DCF0 8000                       		dc.w $8000
0001DCF2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DCF6 8520                       		dc.w $8520
0001DCF8 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DCFC 9000                       		dc.w $9000
0001DCFE 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DD02 9C00                       		dc.w $9C00
0001DD04 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DD08 A260                       		dc.w $A260
0001DD0A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD0E A360                       		dc.w $A360
0001DD10 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD14 A460                       		dc.w $A460
0001DD16 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD1A A660                       		dc.w $A660
0001DD1C 0005                       PLC_SLZ2:	dc.w 5
0001DD1E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DD22 6E80                       		dc.w $6E80
0001DD24 0000 0000                  		dc.l Nem_Fan		; fan
0001DD28 7400                       		dc.w $7400
0001DD2A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DD2E 7980                       		dc.w $7980
0001DD30 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DD34 7B80                       		dc.w $7B80
0001DD36 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DD3A 9B00                       		dc.w $9B00
0001DD3C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DD40 9E00                       		dc.w $9E00
0001DD42                            ; ---------------------------------------------------------------------------
0001DD42                            ; Pattern load cues - Spring Yard
0001DD42                            ; ---------------------------------------------------------------------------
0001DD42 0004                       PLC_SYZ:	dc.w 4
0001DD44 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DD48 0000                       		dc.w 0
0001DD4A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DD4E 8000                       		dc.w $8000
0001DD50 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DD54 8880                       		dc.w $8880
0001DD56 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DD5A 8F60                       		dc.w $8F60
0001DD5C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DD60 9700                       		dc.w $9700
0001DD62 0007                       PLC_SYZ2:	dc.w 7
0001DD64 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DD68 7000                       		dc.w $7000
0001DD6A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DD6E 72C0                       		dc.w $72C0
0001DD70 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DD74 7740                       		dc.w $7740
0001DD76 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DD7A 9FE0                       		dc.w $9FE0
0001DD7C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD80 A1E0                       		dc.w $A1E0
0001DD82 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD86 A360                       		dc.w $A360
0001DD88 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD8C A460                       		dc.w $A460
0001DD8E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD92 A660                       		dc.w $A660
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94                            ; Pattern load cues - Scrap Brain
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94 000B                       PLC_SBZ:	dc.w $B
0001DD96 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DD9A 0000                       		dc.w 0
0001DD9C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DDA0 5800                       		dc.w $5800
0001DDA2 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DDA6 5D00                       		dc.w $5D00
0001DDA8 0000 0000                  		dc.l Nem_Girder		; girder
0001DDAC 5E00                       		dc.w $5E00
0001DDAE 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DDB2 6040                       		dc.w $6040
0001DDB4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DDB8 6880                       		dc.w $6880
0001DDBA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DDBE 6900                       		dc.w $6900
0001DDC0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DDC4 7220                       		dc.w $7220
0001DDC6 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DDCA 76A0                       		dc.w $76A0
0001DDCC 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DDD0 7B20                       		dc.w $7B20
0001DDD2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DDD6 7EA0                       		dc.w $7EA0
0001DDD8 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DDDC 9860                       		dc.w $9860
0001DDDE 000C                       PLC_SBZ2:	dc.w $C
0001DDE0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDE4 5600                       		dc.w $5600
0001DDE6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DDEA 8000                       		dc.w $8000
0001DDEC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DDF0 8520                       		dc.w $8520
0001DDF2 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DDF6 8C00                       		dc.w $8C00
0001DDF8 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DDFC 8DE0                       		dc.w $8DE0
0001DDFE 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DE02 8FC0                       		dc.w $8FC0
0001DE04 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DE08 9240                       		dc.w $9240
0001DE0A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DE0E 7F20                       		dc.w $7F20
0001DE10 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DE14 9BE0                       		dc.w $9BE0
0001DE16 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE1A A1E0                       		dc.w $A1E0
0001DE1C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE20 A360                       		dc.w $A360
0001DE22 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE26 A460                       		dc.w $A460
0001DE28 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE2C A660                       		dc.w $A660
0001DE2E                            ; ---------------------------------------------------------------------------
0001DE2E                            ; Pattern load cues - title card
0001DE2E                            ; ---------------------------------------------------------------------------
0001DE2E 0000                       PLC_TitleCard:	dc.w 0
0001DE30 0000 0000                  		dc.l Nem_TitleCard
0001DE34 B000                       		dc.w $B000
0001DE36                            ; ---------------------------------------------------------------------------
0001DE36                            ; Pattern load cues - act 3 boss
0001DE36                            ; ---------------------------------------------------------------------------
0001DE36 0005                       PLC_Boss:	dc.w 5
0001DE38 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DE3C 8000                       		dc.w $8000
0001DE3E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DE42 8D80                       		dc.w $8D80
0001DE44 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DE48 93A0                       		dc.w $93A0
0001DE4A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DE4E A300                       		dc.w $A300
0001DE50 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DE54 A300                       		dc.w $A300
0001DE56 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DE5A A540                       		dc.w $A540
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C                            ; Pattern load cues - act 1/2 signpost
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C 0002                       PLC_Signpost:	dc.w 2
0001DE5E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DE62 D000                       		dc.w $D000
0001DE64 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DE68 96C0                       		dc.w $96C0
0001DE6A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DE6E 8C40                       		dc.w $8C40
0001DE70                            ; ---------------------------------------------------------------------------
0001DE70                            ; Pattern load cues - beta special stage warp effect
0001DE70                            ; ---------------------------------------------------------------------------
0001DE70 0000                       PLC_Warp:	dc.w 0
0001DE72 0000 0000                  		dc.l Nem_Warp
0001DE76 A820                       		dc.w $A820
0001DE78                            ; ---------------------------------------------------------------------------
0001DE78                            ; Pattern load cues - special stage
0001DE78                            ; ---------------------------------------------------------------------------
0001DE78 000C                       PLC_SpeStage:	dc.w $C
0001DE7A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DE7E 0000                       		dc.w 0
0001DE80 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DE84 0A20                       		dc.w $A20
0001DE86 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE8A 4760                       		dc.w $4760
0001DE8C 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DE90 4A20                       		dc.w $4A20
0001DE92 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DE96 4C60                       		dc.w $4C60
0001DE98 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DE9C 5E00                       		dc.w $5E00
0001DE9E 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DEA2 6E00                       		dc.w $6E00
0001DEA4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DEA8 7E00                       		dc.w $7E00
0001DEAA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DEAE 8E00                       		dc.w $8E00
0001DEB0 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DEB4 9E00                       		dc.w $9E00
0001DEB6 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DEBA BE00                       		dc.w $BE00
0001DEBC 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DEC0 EE00                       		dc.w $EE00
0001DEC2 0000 0000                  		dc.l Nem_Ring		; rings
0001DEC6 45A0                       		dc.w ssringart*$20
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8                            ; Pattern load cues - GHZ animals
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8 0001                       PLC_GHZAnimals:	dc.w 1
0001DECA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DECE B000                       		dc.w $B000
0001DED0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DED4 B240                       		dc.w $B240
0001DED6                            ; ---------------------------------------------------------------------------
0001DED6                            ; Pattern load cues - LZ animals
0001DED6                            ; ---------------------------------------------------------------------------
0001DED6 0001                       PLC_LZAnimals:	dc.w 1
0001DED8 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DEDC B000                       		dc.w $B000
0001DEDE 0000 0000                  		dc.l Nem_Seal		; seal
0001DEE2 B240                       		dc.w $B240
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4                            ; Pattern load cues - MZ animals
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4 0001                       PLC_MZAnimals:	dc.w 1
0001DEE6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DEEA B000                       		dc.w $B000
0001DEEC 0000 0000                  		dc.l Nem_Seal		; seal
0001DEF0 B240                       		dc.w $B240
0001DEF2                            ; ---------------------------------------------------------------------------
0001DEF2                            ; Pattern load cues - SLZ animals
0001DEF2                            ; ---------------------------------------------------------------------------
0001DEF2 0001                       PLC_SLZAnimals:	dc.w 1
0001DEF4 0000 0000                  		dc.l Nem_Pig		; pig
0001DEF8 B000                       		dc.w $B000
0001DEFA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DEFE B240                       		dc.w $B240
0001DF00                            ; ---------------------------------------------------------------------------
0001DF00                            ; Pattern load cues - SYZ animals
0001DF00                            ; ---------------------------------------------------------------------------
0001DF00 0001                       PLC_SYZAnimals:	dc.w 1
0001DF02 0000 0000                  		dc.l Nem_Pig		; pig
0001DF06 B000                       		dc.w $B000
0001DF08 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DF0C B240                       		dc.w $B240
0001DF0E                            ; ---------------------------------------------------------------------------
0001DF0E                            ; Pattern load cues - SBZ animals
0001DF0E                            ; ---------------------------------------------------------------------------
0001DF0E 0001                       PLC_SBZAnimals:	dc.w 1
0001DF10 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DF14 B000                       		dc.w $B000
0001DF16 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DF1A B240                       		dc.w $B240
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C                            ; Pattern load cues - special stage results screen
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C 0001                       PLC_SpeStResult:dc.w 1
0001DF1E 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DF22 A820                       		dc.w $A820
0001DF24 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DF28 AA20                       		dc.w $AA20
0001DF2A                            ; ---------------------------------------------------------------------------
0001DF2A                            ; Pattern load cues - ending sequence
0001DF2A                            ; ---------------------------------------------------------------------------
0001DF2A 000E                       PLC_Ending:	dc.w $E
0001DF2C 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF30 0000                       		dc.w 0
0001DF32 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF36 39A0                       		dc.w $39A0
0001DF38 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF3C 6B00                       		dc.w $6B00
0001DF3E 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DF42 7400                       		dc.w $7400
0001DF44 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DF48 78A0                       		dc.w $78A0
0001DF4A 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DF4E 7C20                       		dc.w $7C20
0001DF50 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DF54 A480                       		dc.w $A480
0001DF56 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DF5A AA60                       		dc.w $AA60
0001DF5C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DF60 ACA0                       		dc.w $ACA0
0001DF62 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DF66 AE60                       		dc.w $AE60
0001DF68 0000 0000                  		dc.l Nem_Seal		; seal
0001DF6C B0A0                       		dc.w $B0A0
0001DF6E 0000 0000                  		dc.l Nem_Pig		; pig
0001DF72 B260                       		dc.w $B260
0001DF74 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DF78 B4A0                       		dc.w $B4A0
0001DF7A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DF7E B660                       		dc.w $B660
0001DF80 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DF84 B8A0                       		dc.w $B8A0
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86 0002                       PLC_TryAgain:	dc.w 2
0001DF88 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DF8C 78A0                       		dc.w $78A0
0001DF8E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DF92 7C20                       		dc.w $7C20
0001DF94 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DF98 B400                       		dc.w $B400
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A                            ; Pattern load cues - Eggman on SBZ 2
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DF9C 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DFA0 A300                       		dc.w $A300
0001DFA2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DFA6 8000                       		dc.w $8000
0001DFA8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFAC 9400                       		dc.w $9400
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE                            ; Pattern load cues - final boss
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE 0004                       PLC_FZBoss:	dc.w 4
0001DFB0 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DFB4 7400                       		dc.w $7400
0001DFB6 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DFBA 6000                       		dc.w $6000
0001DFBC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DFC0 8000                       		dc.w $8000
0001DFC2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DFC6 8E00                       		dc.w $8E00
0001DFC8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DFCC A540                       		dc.w $A540
0001DFCE                            		even
0001DFCE                            		even
0001DFCE                            
0001DFCE                            		incbin	misc\padding.bin
0001E0BC                            		even
0001E0BC                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E51E                            		even
0001E51E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E616                            		even
0001E616                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E710                            		even
0001E710                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F6DC                            		even
0001F6DC                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00021086 00                         		even
00021086                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000210C8                            		even
000210C8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00021186                            		even
00021186                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002162E                            		even
0002162E                            ; ---------------------------------------------------------------------------
0002162E                            ; Sprite mappings - Sonic
0002162E                            ; ---------------------------------------------------------------------------
0002162E                            Map_Sonic:
0002162E                            	include "_maps\Sonic.asm"
0002162E                            ; ---------------------------------------------------------------------------
0002162E                            ; Sprite mappings - Sonic
0002162E                            ; ---------------------------------------------------------------------------
0002162E 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
00021632 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
00021636 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
0002163A 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
0002163E 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
00021642 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
00021646 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
0002164A 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
0002164E 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
00021652 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
00021656 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
0002165A 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
0002165E 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
00021662 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
00021666 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
0002166A 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
0002166E 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
00021672 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
00021676 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
0002167A 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
0002167E 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00021682 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00021686 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
0002168A 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
0002168E 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00021692 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00021696 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
0002169A 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
0002169E 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
000216A2 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
000216A6 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
000216AA 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
000216AE 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
000216B2 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
000216B6 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
000216BA 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
000216BE 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
000216C2 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
000216C6 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
000216CA 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
000216CE 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
000216D2 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
000216D6 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
000216DA 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
000216DE 00                         byte_21292:	dc.b 0
000216DF 04                         byte_21293:	dc.b 4			; standing
000216E0 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
000216E5 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
000216EA 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
000216EF 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
000216F4 03                         byte_212A8:	dc.b 3			; waiting 1
000216F5 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000216FA FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000216FF 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021704 03                         byte_212B8:	dc.b 3			; waiting 2
00021705 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002170A FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002170F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021714 03                         byte_212C8:	dc.b 3			; waiting 3
00021715 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002171A FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
0002171F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021724 03                         byte_212D8:	dc.b 3			; looking up
00021725 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0002172A 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
0002172F 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021734 04                         byte_212E8:	dc.b 4			; walking 1-1
00021735 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
0002173A FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
0002173F FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00021744 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00021749 02                         byte_212FD:	dc.b 2			; walking 1-2
0002174A EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
0002174F FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
00021754 02                         byte_21308:	dc.b 2			; walking 1-3
00021755 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
0002175A FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
0002175F 04                         byte_21313:	dc.b 4			; walking 1-4
00021760 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00021765 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
0002176A FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
0002176F 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
00021774 02                         byte_21328:	dc.b 2			; walking 1-5
00021775 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
0002177A FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
0002177F 03                         byte_21333:	dc.b 3			; walking 1-6
00021780 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00021785 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
0002178A 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
0002178F 05                         byte_21343:	dc.b 5			; walking 2-1
00021790 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021795 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
0002179A FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
0002179F 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
000217A4 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
000217A9 06                         byte_2135D:	dc.b 6			; walking 2-2
000217AA EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000217AF EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
000217B4 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
000217B9 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
000217BE FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
000217C3 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
000217C8 04                         byte_2137C:	dc.b 4			; walking 2-3
000217C9 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
000217CE ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
000217D3 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
000217D8 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
000217DD 05                         byte_21391:	dc.b 5			; walking 2-4
000217DE EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
000217E3 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
000217E8 FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
000217ED 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
000217F2 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
000217F7 04                         byte_213AB:	dc.b 4			; walking 2-5
000217F8 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
000217FD EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021802 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00021807 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
0002180C 05                         byte_213C0:	dc.b 5			; walking 2-6
0002180D ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021812 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021817 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
0002181C FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00021821 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00021826 04                         byte_213DA:	dc.b 4			; walking 3-1
00021827 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
0002182C EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00021831 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00021836 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
0002183B 02                         byte_213EF:	dc.b 2			; walking 3-2
0002183C F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00021841 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00021846 02                         byte_213FA:	dc.b 2			; walking 3-3
00021847 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
0002184C F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00021851 04                         byte_21405:	dc.b 4			; walking 3-4
00021852 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00021857 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
0002185C FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00021861 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00021866 02                         byte_2141A:	dc.b 2			; walking 3-5
00021867 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
0002186C F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00021871 03                         byte_21425:	dc.b 3			; walking 3-6
00021872 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00021877 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
0002187C F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00021881 06                         byte_21435:	dc.b 6			; walking 4-1
00021882 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00021887 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
0002188C F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00021891 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00021896 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
0002189B FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
000218A0 06                         byte_21454:	dc.b 6			; walking 4-2
000218A1 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000218A6 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
000218AB EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
000218B0 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
000218B5 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
000218BA 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
000218BF 04                         byte_21473:	dc.b 4			; walking 4-3
000218C0 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
000218C5 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
000218CA EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
000218CF 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
000218D4 05                         byte_21488:	dc.b 5			; walking 4-4
000218D5 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
000218DA ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
000218DF F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
000218E4 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
000218E9 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
000218EE 04                         byte_214A2:	dc.b 4			; walking 4-5
000218EF FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
000218F4 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
000218F9 EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
000218FE 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00021903 05                         byte_214B7:	dc.b 5			; walking 4-6
00021904 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00021909 EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
0002190E F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00021913 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00021918 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
0002191D 02                         byte_214D1:	dc.b 2			; running 1-1
0002191E EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00021923 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00021928 02                         byte_214DC:	dc.b 2			; running 1-2
00021929 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002192E FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00021933 02                         byte_214E7:	dc.b 2			; running 1-3
00021934 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00021939 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002193E 02                         byte_214F2:	dc.b 2			; running 1-4
0002193F EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00021944 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00021949 04                         byte_214FD:	dc.b 4			; running 2-1
0002194A EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002194F EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00021954 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00021959 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
0002195E 03                         byte_21512:	dc.b 3			; running 2-2
0002195F EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00021964 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00021969 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002196E 04                         byte_21522:	dc.b 4			; running 2-3
0002196F EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00021974 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00021979 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002197E FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00021983 03                         byte_21537:	dc.b 3			; running 2-4
00021984 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00021989 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002198E FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00021993 02                         byte_21547:	dc.b 2			; running 3-1
00021994 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00021999 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002199E 02                         byte_21552:	dc.b 2			; running 3-2
0002199F F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000219A4 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000219A9 02                         byte_2155D:	dc.b 2			; running 3-3
000219AA F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000219AF F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000219B4 02                         byte_21568:	dc.b 2			; running 3-4
000219B5 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
000219BA F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
000219BF 04                         byte_21573:	dc.b 4			; running 4-1
000219C0 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
000219C5 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000219CA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000219CF 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000219D4 02                         byte_21588:	dc.b 2			; running 4-2
000219D5 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000219DA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000219DF 04                         byte_21593:	dc.b 4			; running 4-3
000219E0 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
000219E5 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000219EA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000219EF 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000219F4 02                         byte_215A8:	dc.b 2			; running 4-4
000219F5 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000219FA EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000219FF 01                         byte_215B3:	dc.b 1			; rolling 1
00021A00 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A05 01                         byte_215B9:	dc.b 1			; rolling 2
00021A06 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A0B 01                         byte_215BF:	dc.b 1			; rolling 3
00021A0C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A11 01                         byte_215C5:	dc.b 1			; rolling 4
00021A12 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A17 01                         byte_215CB:	dc.b 1			; rolling 5
00021A18 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A1D 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
00021A1E F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
00021A23 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
00021A28 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
00021A29 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A2E 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
00021A2F EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
00021A34 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
00021A39 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
00021A3A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00021A3F 02                         byte_215F3:	dc.b 2			; stopping 1
00021A40 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00021A45 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00021A4A 04                         byte_215FE:	dc.b 4			; stopping 2
00021A4B ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00021A50 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
00021A55 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00021A5A 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00021A5F 04                         byte_21613:	dc.b 4			; ducking
00021A60 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
00021A65 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00021A6A 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00021A6F 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
00021A74 03                         byte_21628:	dc.b 3			; balancing 1
00021A75 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00021A7A F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00021A7F F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00021A84 03                         byte_21638:	dc.b 3			; balancing 2
00021A85 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00021A8A 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00021A8F 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00021A94 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00021A95 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00021A9A FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00021A9F 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00021AA4 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00021AA5 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00021AAA F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00021AAF 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00021AB0 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00021AB5 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00021ABA 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00021ABF 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00021AC0 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00021AC5 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00021ACA 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00021ACF 03                         byte_21683:	dc.b 3			; bouncing
00021AD0 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00021AD5 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
00021ADA 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00021ADF 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00021AE0 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00021AE5 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00021AEA F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00021AEF F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00021AF4 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00021AF5 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00021AFA 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00021AFF F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00021B04 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00021B09 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
00021B0A E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00021B0F F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00021B14 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00021B19 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00021B1E 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00021B23 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
00021B24 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00021B29 E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
00021B2E 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
00021B33 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
00021B38 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00021B3D 02                         byte_216F1:	dc.b 2			; pushing 1
00021B3E ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00021B43 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00021B48 03                         byte_216FC:	dc.b 3			; pushing 2
00021B49 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00021B4E 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00021B53 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00021B58 02                         byte_2170C:	dc.b 2			; pushing 3
00021B59 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00021B5E 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00021B63 03                         byte_21717:	dc.b 3			; pushing 4
00021B64 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00021B69 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00021B6E 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00021B73 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
00021B74 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021B79 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00021B7E 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00021B7F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00021B84 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
00021B89 E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00021B8E 03                         byte_21742:	dc.b 3			; death	1
00021B8F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00021B94 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00021B99 F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00021B9E 05                         byte_21752:	dc.b 5			; drowning
00021B9F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00021BA4 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00021BA9 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00021BAE 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00021BB3 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00021BB8 05                         byte_2176C:	dc.b 5			; death	2
00021BB9 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00021BBE E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00021BC3 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00021BC8 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00021BCD 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00021BD2 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00021BD3 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00021BD8 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
00021BDD 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00021BDE EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00021BE3 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
00021BE8 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
00021BED 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00021BEE F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00021BF3 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00021BF4 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00021BF9 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
00021BFA F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00021BFF 03                         byte_217B3:	dc.b 3			; injury
00021C00 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00021C05 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
00021C0A 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00021C0F 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00021C10 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00021C15 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
00021C1A 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
00021C1F 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
00021C20 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
00021C25 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00021C2A 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
00021C2F 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
00021C30 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00021C35 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00021C3A 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00021C3F 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
00021C40 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
00021C45 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00021C4A                            		even
00021C4A                            		even
00021C4A                            
00021C4A                            ; ---------------------------------------------------------------------------
00021C4A                            ; Uncompressed graphics	loading	array for Sonic
00021C4A                            ; ---------------------------------------------------------------------------
00021C4A                            SonicDynPLC:
00021C4A                            	include "_inc\Sonic dynamic pattern load cues.asm"
00021C4A                            ; ---------------------------------------------------------------------------
00021C4A                            ; Uncompressed graphics	loading	array for Sonic
00021C4A                            ; ---------------------------------------------------------------------------
00021C4A 0000                       		dc.w SonPLC_Blank-SonicDynPLC
00021C4C 0000                       		dc.w SonPLC_Stand-SonicDynPLC
00021C4E 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
00021C50 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
00021C52 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
00021C54 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
00021C56 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
00021C58 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
00021C5A 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
00021C5C 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
00021C5E 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
00021C60 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
00021C62 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
00021C64 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
00021C66 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
00021C68 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
00021C6A 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
00021C6C 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
00021C6E 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
00021C70 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
00021C72 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
00021C74 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
00021C76 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
00021C78 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
00021C7A 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
00021C7C 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00021C7E 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00021C80 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00021C82 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00021C84 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00021C86 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00021C88 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00021C8A 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00021C8C 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00021C8E 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00021C90 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00021C92 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00021C94 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00021C96 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00021C98 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00021C9A 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00021C9C 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00021C9E 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00021CA0 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00021CA2 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00021CA4 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00021CA6 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00021CA8 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00021CAA 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00021CAC 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00021CAE 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00021CB0 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00021CB2 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00021CB4 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00021CB6 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00021CB8 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00021CBA 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00021CBC 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00021CBE 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00021CC0 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00021CC2 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00021CC4 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00021CC6 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00021CC8 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00021CCA 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00021CCC 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00021CCE 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00021CD0 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00021CD2 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00021CD4 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00021CD6 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00021CD8 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00021CDA 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00021CDC 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00021CDE 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00021CE0 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00021CE2 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00021CE4 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00021CE6 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00021CE8 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00021CEA 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00021CEC 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00021CEE 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00021CF0 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00021CF2 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00021CF4 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00021CF6 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00021CF8 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00021CFA 00                         SonPLC_Blank:	dc.b 0
00021CFB 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00021D04 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00021D0B 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00021D12 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00021D19 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00021D20 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00021D29 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00021D2E 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00021D33 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00021D3C 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00021D41 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00021D48 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00021D53 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00021D60 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00021D69 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00021D74 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00021D7D 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00021D88 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00021D91 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00021D96 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00021D9B 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00021DA4 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00021DA9 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00021DB0 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00021DBD 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00021DCA 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00021DD3 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00021DDE 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00021DE7 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00021DF2 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00021DF7 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00021DFC 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00021E01 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00021E06 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00021E0F 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00021E16 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00021E1F 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00021E26 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00021E2B 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00021E30 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00021E35 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00021E3A 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00021E43 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00021E48 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00021E51 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00021E56 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00021E59 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00021E5C 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00021E5F 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00021E62 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00021E65 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00021E6A 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00021E6D 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00021E72 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00021E75 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00021E7A 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00021E83 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00021E8C 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00021E93 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00021E9A 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00021EA1 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00021EA4 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00021EAB 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00021EB2 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00021EB9 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00021EC2 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00021ECB 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00021ED6 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00021EE1 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00021EE6 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00021EED 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00021EF2 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00021EF9 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00021EFE 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00021F05 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00021F0C 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00021F17 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00021F22 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00021F27 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00021F2E 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00021F31 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00021F34 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00021F37 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00021F3E 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00021F45 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00021F4A                            		even
00021F4A                            		even
00021F4A                            
00021F4A                            ; ---------------------------------------------------------------------------
00021F4A                            ; Uncompressed graphics	- Sonic
00021F4A                            ; ---------------------------------------------------------------------------
00021F4A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002C06A                            		even
0002C06A                            
0002C06A                            ; ---------------------------------------------------------------------------
0002C06A                            ; Uncompressed graphics	- Sonime
0002C06A                            ; ---------------------------------------------------------------------------
0002C06A                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002C1EA                            		even
0002C1EA                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002C46A                            		even
0002C46A                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002C56A                            		even
0002C56A                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002CE6A                            		even
0002CE6A                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002CEAA                            		even
0002CEAA                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002CF2A                            		even
0002CF2A                            
0002CF2A                            ; ---------------------------------------------------------------------------
0002CF2A                            ; Compressed graphics - various
0002CF2A                            ; ---------------------------------------------------------------------------
0002CF2A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002D02E                            		even
0002D02E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002D068                            		even
0002D068                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002D3C8                            		even
0002D3C8                            UnC_Stars:	incbin	artunc\invstars.bin	; invincibility stars
0002D848                            		even
0002D848                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002D952                            		even
0002D952                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002D9A4                            		even
0002D9A4                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002DBEC                            		even
0002DBEC                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002DD72                            		even
0002DD72                            ; ---------------------------------------------------------------------------
0002DD72                            ; Sprite mappings - walls of the special stage
0002DD72                            ; ---------------------------------------------------------------------------
0002DD72                            Map_SSWalls:
0002DD72                            	include "_maps\SSwalls.asm"
0002DD72                            ; ---------------------------------------------------------------------------
0002DD72                            ; Sprite mappings - walls of the special stage
0002DD72                            ; ---------------------------------------------------------------------------
0002DD72 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002DD74 01                         byte_2C584:	dc.b 1
0002DD75 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002DD7A                            		even
0002DD7A                            		even
0002DD7A                            ; ---------------------------------------------------------------------------
0002DD7A                            ; Compressed graphics - special stage
0002DD7A                            ; ---------------------------------------------------------------------------
0002DD7A                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
0002FD7A                            		even
0002FD7A                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002FEAE                            		even
0002FEAE                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00030B3E                            		even
00030B3E                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00030E3E                            		even
00030E3E                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00031332                            		even
00031332                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031420                            		even
00031420                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000314F0                            		even
000314F0                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000315E6                            		even
000315E6                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031644                            		even
00031644                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000316D6                            		even
000316D6                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031798                            		even
00031798                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031866                            		even
00031866                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00031932                            		even
00031932                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000319FA                            		even
000319FA                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00031AC4                            		even
00031AC4                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00031B94                            		even
00031B94                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00031D88                            		even
00031D88                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00031EF0                            		even
00031EF0                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00031FA0                            		even
00031FA0                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003207A                            		even
0003207A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000320FE                            		even
000320FE                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003227C                            		even
0003227C                            ; ---------------------------------------------------------------------------
0003227C                            ; Compressed graphics - GHZ stuff
0003227C                            ; ---------------------------------------------------------------------------
0003227C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000322C6                            		even
000322C6                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000323E0                            		even
000323E0                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000324CC                            		even
000324CC                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032514                            		even
00032514                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000326B2                            		even
000326B2                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003272E                            		even
0003272E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032942                            		even
00032942                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00032A6E                            		even
00032A6E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00032B9C                            		even
00032B9C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00032C3A                            		even
00032C3A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00032C9A                            		even
00032C9A                            ; ---------------------------------------------------------------------------
00032C9A                            ; Compressed graphics - LZ stuff
00032C9A                            ; ---------------------------------------------------------------------------
00032C9A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00032DBE                            		even
00032DBE                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000335B2                            		even
000335B2                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033732                            		even
00033732                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003389C                            		even
0003389C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00033EF2                            		even
00033EF2                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00033FA8                            		even
00033FA8                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003404A                            		even
0003404A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000341A6                            		even
000341A6                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003420A                            		even
0003420A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003435C                            		even
0003435C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003483E                            		even
0003483E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
000349AE                            		even
000349AE                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00034C66                            		even
00034C66                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00034D9E                            		even
00034D9E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00034EC8                            		even
00034EC8                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00034FD8                            		even
00034FD8                            ; ---------------------------------------------------------------------------
00034FD8                            ; Compressed graphics - MZ stuff
00034FD8                            ; ---------------------------------------------------------------------------
00034FD8                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00035266                            		even
00035266                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00035324                            		even
00035324                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000353DC                            		even
000353DC                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035430                            		even
00035430                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003570E                            		even
0003570E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00036024                            		even
00036024                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00036188                            		even
00036188                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00036210                            		even
00036210                            ; ---------------------------------------------------------------------------
00036210                            ; Compressed graphics - SLZ stuff
00036210                            ; ---------------------------------------------------------------------------
00036210                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003644C                            		even
0003644C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036592                            		even
00036592                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000367D6                            		even
000367D6                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036838                            		even
00036838                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003691A                            		even
0003691A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00036AFC                            		even
00036AFC                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00036C08                            		even
00036C08                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00036CAC                            		even
00036CAC                            ; ---------------------------------------------------------------------------
00036CAC                            ; Compressed graphics - SYZ stuff
00036CAC                            ; ---------------------------------------------------------------------------
00036CAC                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00036E16                            		even
00036E16                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00036E78                            		even
00036E78                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00036F5A                            		even
00036F5A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000371E8                            		even
000371E8                            ; ---------------------------------------------------------------------------
000371E8                            ; Compressed graphics - SBZ stuff
000371E8                            ; ---------------------------------------------------------------------------
000371E8                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003723C                            		even
0003723C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000374D8                            		even
000374D8                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000376DC                            		even
000376DC                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003787A                            		even
0003787A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00037BAA                            		even
00037BAA                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00037D88                            		even
00037D88                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00037DE0                            		even
00037DE0                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00037F60                            		even
00037F60                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003805E                            		even
0003805E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000381EA                            		even
000381EA                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003823A                            		even
0003823A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00038292                            		even
00038292                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003838E                            		even
0003838E                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000384A4                            		even
000384A4                            ; ---------------------------------------------------------------------------
000384A4                            ; Compressed graphics - enemies
000384A4                            ; ---------------------------------------------------------------------------
000384A4                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038864                            		even
00038864                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00038D52                            		even
00038D52                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000390F8                            		even
000390F8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
000392E0                            		even
000392E0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000399CA                            		even
000399CA                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039C32                            		even
00039C32                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039EBC                            		even
00039EBC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A3E0                            		even
0003A3E0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A66A                            		even
0003A66A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003AC88                            		even
0003AC88                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003B070                            		even
0003B070                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B36C                            		even
0003B36C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B5B4                            		even
0003B5B4                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003B84C                            		even
0003B84C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003BA2A                            		even
0003BA2A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003BBB8                            		even
0003BBB8                            ; ---------------------------------------------------------------------------
0003BBB8                            ; Compressed graphics - various
0003BBB8                            ; ---------------------------------------------------------------------------
0003BBB8                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C1C6                            		even
0003C1C6                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C2BC                            		even
0003C2BC                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C3C2                            		even
0003C3C2                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C4B6                            		even
0003C4B6                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003C868 00                         		even
0003C868                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003CECE                            		even
0003CECE                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003CF7E                            		even
0003CF7E                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D110                            		even
0003D110                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D212                            		even
0003D212                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D2EE                            		even
0003D2EE                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003D76A                            		even
0003D76A                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003D82A                            		even
0003D82A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003D99E                            		even
0003D99E                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003DCA0                            		even
0003DCA0                            ; ---------------------------------------------------------------------------
0003DCA0                            ; Compressed graphics - continue screen
0003DCA0                            ; ---------------------------------------------------------------------------
0003DCA0                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003DF50                            		even
0003DF50                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E18A                            		even
0003E18A                            ; ---------------------------------------------------------------------------
0003E18A                            ; Compressed graphics - animals
0003E18A                            ; ---------------------------------------------------------------------------
0003E18A                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E2E2                            		even
0003E2E2                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E43E                            		even
0003E43E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E5BA                            		even
0003E5BA                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003E6D6                            		even
0003E6D6                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003E80C                            		even
0003E80C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003E946                            		even
0003E946                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003EAA2                            		even
0003EAA2                            ; ---------------------------------------------------------------------------
0003EAA2                            ; Compressed graphics - primary patterns and block mappings
0003EAA2                            ; ---------------------------------------------------------------------------
0003EAA2                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F442                            		even
0003F442                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00040AA2                            		even
00040AA2                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00041E4A                            		even
00041E4A                            Blk256_GHZ:	incbin	map256\ghz.bin
00043F5A                            		even
00043F5A                            Blk16_LZ:	incbin	map16\lz.bin
00044284                            		even
00044284                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00045DCC                            		even
00045DCC                            Blk256_LZ:	incbin	map256\lz.bin
000485BC                            		even
000485BC                            Blk16_MZ:	incbin	map16\mz.bin
00048DC6                            		even
00048DC6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004B60A                            		even
0004B60A                            Blk256_MZ:	incbin	map256\mz.bin
0004CDCA                            		even
0004CDCA                            Blk16_SLZ:	incbin	map16\slz.bin
0004D5AE                            		even
0004D5AE                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051102                            		even
00051102                            Blk256_SLZ:	incbin	map256\slz.bin
00053532                            		even
00053532                            Blk16_SYZ:	incbin	map16\syz.bin
00053EA0                            		even
00053EA0                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000575CC                            		even
000575CC                            Blk256_SYZ:	incbin	map256\syz.bin
0005997C                            		even
0005997C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A816                            		even
0005A816                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005CFC2                            		even
0005CFC2                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FA12                            		even
0005FA12                            ; ---------------------------------------------------------------------------
0005FA12                            ; Compressed graphics - bosses and ending sequence
0005FA12                            ; ---------------------------------------------------------------------------
0005FA12                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060276                            		even
00060276                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060560                            		even
00060560                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060DE4                            		even
00060DE4                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061610                            		even
00061610                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00061D78                            		even
00061D78                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000622F8                            		even
000622F8                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062418                            		even
00062418                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062616                            		even
00062616                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000637F4                            		even
000637F4                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064138                            		even
00064138                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006450E                            		even
0006450E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00064A9E                            		even
00064A9E                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00064D26                            		even
00064D26                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00065324                            		even
00065324                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000655AC                            		even
000655AC                            		incbin	misc\padding2.bin
000656B0                            		even
000656B0                            ; ---------------------------------------------------------------------------
000656B0                            ; Collision data
000656B0                            ; ---------------------------------------------------------------------------
000656B0                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000657B0                            		even
000657B0                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000667B0                            		even
000667B0                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000677B0                            		even
000677B0                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006794A                            		even
0006794A                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00067A12                            		even
00067A12                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00067BA2                            		even
00067BA2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00067D96                            		even
00067D96                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00067F8A                            		even
00067F8A                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000681E2                            		even
000681E2                            ; ---------------------------------------------------------------------------
000681E2                            ; Special layouts
000681E2                            ; ---------------------------------------------------------------------------
000681E2                            SS_1:		incbin	sslayout\1.bin
0006845C                            		even
0006845C                            SS_2:		incbin	sslayout\2.bin
0006886E                            		even
0006886E                            SS_3:		incbin	sslayout\3.bin
00068BCA                            		even
00068BCA                            SS_4:		incbin	sslayout\4.bin
000690A4                            		even
000690A4                            SS_5:		incbin	sslayout\5.bin
00069576                            		even
00069576                            SS_6:		incbin	sslayout\6.bin
00069886                            		even
00069886                            ; ---------------------------------------------------------------------------
00069886                            ; Animated uncompressed graphics
00069886                            ; ---------------------------------------------------------------------------
00069886                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00069A86                            		even
00069A86                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00069E86                            		even
00069E86                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006A306                            		even
0006A306                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006A606                            		even
0006A606                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006AC06                            		even
0006AC06                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006AF06                            		even
0006AF06                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006B986                            		even
0006B986                            
0006B986                            ; ---------------------------------------------------------------------------
0006B986                            ; Level	layout index
0006B986                            ; ---------------------------------------------------------------------------
0006B986 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006B98C 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006B992 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006B998 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006B99E 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006B9A4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006B9AA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006B9B0 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006B9B6 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006B9BC 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006B9C2 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006B9C8 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006B9CE 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B9D4 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B9DA 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B9E0 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006B9E6 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006B9EC 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006B9F2 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006B9F8 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006B9FE 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006BA04 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006BA0A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006BA10 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006BA16 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006BA1C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006BA22 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006BA28 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006BA2E                            
0006BA2E                            Level_GHZ1:	incbin	levels\ghz1.bin
0006BB20                            		even
0006BB20 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006BB24                            Level_GHZ2:	incbin	levels\ghz2.bin
0006BBEC                            		even
0006BBEC 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006BBF0                            Level_GHZ3:	incbin	levels\ghz3.bin
0006BD12                            		even
0006BD12                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006BD34                            		even
0006BD34 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006BD38 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006BD3C                            
0006BD3C                            Level_LZ1:	incbin	levels\lz1.bin
0006BE3E                            		even
0006BE3E                            Level_LZbg:	incbin	levels\lzbg.bin
0006BF40                            		even
0006BF40 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006BF44                            Level_LZ2:	incbin	levels\lz2.bin
0006BFDE                            		even
0006BFDE 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006BFE2                            Level_LZ3:	incbin	levels\lz3.bin
0006C0FC                            		even
0006C0FC 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C100                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C1BA                            		even
0006C1BA 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C1BE                            
0006C1BE                            Level_MZ1:	incbin	levels\mz1.bin
0006C25C                            		even
0006C25C                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006C2D6                            		even
0006C2D6                            Level_MZ2:	incbin	levels\mz2.bin
0006C37A                            		even
0006C37A                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006C40C                            		even
0006C40C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006C410                            Level_MZ3:	incbin	levels\mz3.bin
0006C4F2                            		even
0006C4F2                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006C596                            		even
0006C596 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006C59A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006C59E                            
0006C59E                            Level_SLZ1:	incbin	levels\slz1.bin
0006C6B0                            		even
0006C6B0                            Level_SLZbg:	incbin	levels\slzbg.bin
0006C72A                            		even
0006C72A                            Level_SLZ2:	incbin	levels\slz2.bin
0006C81A                            		even
0006C81A                            Level_SLZ3:	incbin	levels\slz3.bin
0006C934                            		even
0006C934 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006C938                            
0006C938                            Level_SYZ1:	incbin	levels\syz1.bin
0006C9F4                            		even
0006C9F4                            Level_SYZbg:	incbin	levels\syzbg.bin
0006CA2E                            		even
0006CA2E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006CA32                            Level_SYZ2:	incbin	levels\syz2.bin
0006CB36                            		even
0006CB36 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006CB3A                            Level_SYZ3:	incbin	levels\syz3.bin
0006CC94                            		even
0006CC94 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006CC98 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006CC9C                            
0006CC9C                            Level_SBZ1:	incbin	levels\sbz1.bin
0006CDBE                            		even
0006CDBE                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006CDFC                            		even
0006CDFC                            Level_SBZ2:	incbin	levels\sbz2.bin
0006CF3E                            		even
0006CF3E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D0A8                            		even
0006D0A8 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D0AC 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D0B0                            Level_End:	incbin	levels\ending.bin
0006D0D0                            		even
0006D0D0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D0D4                            
0006D0D4                            ; ---------------------------------------------------------------------------
0006D0D4                            ; Animated uncompressed giant ring graphics
0006D0D4                            ; ---------------------------------------------------------------------------
0006D0D4                            Art_BigRing:	incbin	artunc\bigring.bin
0006DD14                            		even
0006DD14                            
0006DD14                            		incbin	misc\padding3.bin
0006DDB0                            		even
0006DDB0                            
0006DDB0                            ; ---------------------------------------------------------------------------
0006DDB0                            ; Sprite locations index
0006DDB0                            ; ---------------------------------------------------------------------------
0006DDB0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDB4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDB8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDBC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDC0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDC4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDC8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDCC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDD0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDD4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDD8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDDC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDE0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDE4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDE8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDEC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDF0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDF4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDF8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DDFC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE00 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE04 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE08 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE0C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE10 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE14 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE18 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE1C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DE20 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006DE24 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006DE28 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006DE2C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006DE30 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006DE34 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006DE38 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006DE3C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006DE40 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006DE46                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006E350                            		even
0006E350                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006E90E                            		even
0006E90E                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006EFC8                            		even
0006EFC8                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006F436                            		even
0006F436                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006F778                            		even
0006F778                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006FD5A                            		even
0006FD5A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000701F2                            		even
000701F2                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00070224                            		even
00070224                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00070256                            		even
00070256                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070288                            		even
00070288                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000702BA                            		even
000702BA                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00070304                            		even
00070304                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00070342                            		even
00070342                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000706AE                            		even
000706AE                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00070B58                            		even
00070B58                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000710CE                            		even
000710CE                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007160E                            		even
0007160E                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071A76                            		even
00071A76                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072058                            		even
00072058                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000724E4                            		even
000724E4                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00072A4E                            		even
00072A4E                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073054                            		even
00073054                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073792                            		even
00073792                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00073E70                            		even
00073E70                            ObjPos_FZ:	incbin	objpos\fz.bin
00073E82                            		even
00073E82                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00073EB4                            		even
00073EB4                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00073EE6                            		even
00073EE6                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00073F18                            		even
00073F18                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00073F4A                            		even
00073F4A                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00073F7C                            		even
00073F7C                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00073FB4                            		even
00073FB4                            ObjPos_End:	incbin	objpos\ending.bin
00074110                            		even
00074110 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074116                            ; ---------------------------------------------------------------------------
00074116                            		incbin	misc\padding4.bin
00074740                            		even
00074740                            
00074740 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00074744 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00074748 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007474C 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00074750 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074754 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074758                            ; ---------------------------------------------------------------------------
00074758                            ; PSG instruments used in music
00074758                            ; ---------------------------------------------------------------------------
00074758 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074764 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074770 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007477C                            PSG1:		incbin	sound\psg1.bin
00074793                            PSG2:		incbin	sound\psg2.bin
0007479A                            PSG3:		incbin	sound\psg3.bin
000747AB                            PSG4:		incbin	sound\psg4.bin
000747B6                            PSG6:		incbin	sound\psg6.bin
000747C5                            PSG5:		incbin	sound\psg5.bin
000747EF                            PSG7:		incbin	sound\psg7.bin
0007480B                            PSG8:		incbin	sound\psg8.bin
00074833                            PSG9:		incbin	sound\psg9.bin
00074844                            
00074844 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007484C                            ; ---------------------------------------------------------------------------
0007484C                            ; Music	Pointers
0007484C                            ; ---------------------------------------------------------------------------
0007484C 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074854 0000 0000 0000 0000        		dc.l Music83, Music84
0007485C 0000 0000 0000 0000        		dc.l Music85, Music86
00074864 0000 0000 0000 0000        		dc.l Music87, Music88
0007486C 0000 0000 0000 0000        		dc.l Music89, Music8A
00074874 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007487C 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074884 0000 0000 0000 0000        		dc.l Music8F, Music90
0007488C 0000 0000 0000 0000        		dc.l Music91, Music92
00074894 0000 0000                  		dc.l Music93
00074898                            ; ---------------------------------------------------------------------------
00074898                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074898                            ; ---------------------------------------------------------------------------
00074898 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000748A8 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000748B8 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000748C8 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000748D8 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000748E8 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000748F8 9090 9090                  		dc.b $90, $90, $90, $90
000748FC                            
000748FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000748FC                            
000748FC                            
000748FC                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000748FC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00074904 4E71                       		nop	
00074906 4E71                       		nop	
00074908 4E71                       		nop	
0007490A                            
0007490A                            loc_71B5A:
0007490A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00074912 66F6                       		bne.s	loc_71B5A
00074914                            
00074914 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007491C 6700                       		beq.s	loc_71B82
0007491E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074926 4E71                       		nop	
00074928 4E71                       		nop	
0007492A 4E71                       		nop	
0007492C 4E71                       		nop	
0007492E 4E71                       		nop	
00074930 60CA                       		bra.s	sub_71B4C
00074932                            ; ===========================================================================
00074932                            
00074932                            loc_71B82:
00074932 4DF9 00FF F000             		lea	($FFF000).l,a6
00074938 422E 000E                  		clr.b	$E(a6)
0007493C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00074940 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00074944 532E 0001                  		subq.b	#1,1(a6)
00074948 6600                       		bne.s	loc_71B9E
0007494A 4EBA 0000                  		jsr	sub_7260C(pc)
0007494E                            
0007494E                            loc_71B9E:
0007494E 102E 0004                  		move.b	4(a6),d0
00074952 6700                       		beq.s	loc_71BA8
00074954 4EBA 0000                  		jsr	sub_72504(pc)
00074958                            
00074958                            loc_71BA8:
00074958 4A2E 0024                  		tst.b	$24(a6)
0007495C 6700                       		beq.s	loc_71BB2
0007495E 4EBA 0000                  		jsr	sub_7267C(pc)
00074962                            
00074962                            loc_71BB2:
00074962 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074966 6700                       		beq.s	loc_71BBC	; if not, branch
00074968 4EBA 0000                  		jsr	Sound_Play(pc)
0007496C                            
0007496C                            loc_71BBC:
0007496C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074972 6700                       		beq.s	loc_71BC8
00074974 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074978                            
00074978                            loc_71BC8:
00074978 4BEE 0040                  		lea	$40(a6),a5
0007497C 4A15                       		tst.b	(a5)
0007497E 6A00                       		bpl.s	loc_71BD4
00074980 4EBA 0000                  		jsr	sub_71C4E(pc)
00074984                            
00074984                            loc_71BD4:
00074984 422E 0008                  		clr.b	8(a6)
00074988 7E05                       		moveq	#5,d7
0007498A                            
0007498A                            loc_71BDA:
0007498A DAFC 0030                  		adda.w	#$30,a5
0007498E 4A15                       		tst.b	(a5)
00074990 6A00                       		bpl.s	loc_71BE6
00074992 4EBA 0000                  		jsr	sub_71CCA(pc)
00074996                            
00074996                            loc_71BE6:
00074996 51CF FFF2                  		dbf	d7,loc_71BDA
0007499A                            
0007499A 7E02                       		moveq	#2,d7
0007499C                            
0007499C                            loc_71BEC:
0007499C DAFC 0030                  		adda.w	#$30,a5
000749A0 4A15                       		tst.b	(a5)
000749A2 6A00                       		bpl.s	loc_71BF8
000749A4 4EBA 0000                  		jsr	sub_72850(pc)
000749A8                            
000749A8                            loc_71BF8:
000749A8 51CF FFF2                  		dbf	d7,loc_71BEC
000749AC                            
000749AC 1D7C 0080 000E             		move.b	#$80,$E(a6)
000749B2 7E02                       		moveq	#2,d7
000749B4                            
000749B4                            loc_71C04:
000749B4 DAFC 0030                  		adda.w	#$30,a5
000749B8 4A15                       		tst.b	(a5)
000749BA 6A00                       		bpl.s	loc_71C10
000749BC 4EBA 0000                  		jsr	sub_71CCA(pc)
000749C0                            
000749C0                            loc_71C10:
000749C0 51CF FFF2                  		dbf	d7,loc_71C04
000749C4                            
000749C4 7E02                       		moveq	#2,d7
000749C6                            
000749C6                            loc_71C16:
000749C6 DAFC 0030                  		adda.w	#$30,a5
000749CA 4A15                       		tst.b	(a5)
000749CC 6A00                       		bpl.s	loc_71C22
000749CE 4EBA 0000                  		jsr	sub_72850(pc)
000749D2                            
000749D2                            loc_71C22:
000749D2 51CF FFF2                  		dbf	d7,loc_71C16
000749D6 1D7C 0040 000E             		move.b	#$40,$E(a6)
000749DC DAFC 0030                  		adda.w	#$30,a5
000749E0 4A15                       		tst.b	(a5)
000749E2 6A00                       		bpl.s	loc_71C38
000749E4 4EBA 0000                  		jsr	sub_71CCA(pc)
000749E8                            
000749E8                            loc_71C38:
000749E8 DAFC 0030                  		adda.w	#$30,a5
000749EC 4A15                       		tst.b	(a5)
000749EE 6A00                       		bpl.s	loc_71C44
000749F0 4EBA 0000                  		jsr	sub_72850(pc)
000749F4                            
000749F4                            loc_71C44:
000749F4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000749FC 4E75                       		rts	
000749FE                            ; End of function sub_71B4C
000749FE                            
000749FE                            
000749FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000749FE                            
000749FE                            
000749FE                            sub_71C4E:				; XREF: sub_71B4C
000749FE 532D 000E                  		subq.b	#1,$E(a5)
00074A02 6600                       		bne.s	locret_71CAA
00074A04 1D7C 0080 0008             		move.b	#$80,8(a6)
00074A0A 286D 0004                  		movea.l	4(a5),a4
00074A0E                            
00074A0E                            loc_71C5E:
00074A0E 7A00                       		moveq	#0,d5
00074A10 1A1C                       		move.b	(a4)+,d5
00074A12 0C05 00E0                  		cmpi.b	#-$20,d5
00074A16 6500                       		bcs.s	loc_71C6E
00074A18 4EBA 0000                  		jsr	sub_72A5A(pc)
00074A1C 60F0                       		bra.s	loc_71C5E
00074A1E                            ; ===========================================================================
00074A1E                            
00074A1E                            loc_71C6E:
00074A1E 4A05                       		tst.b	d5
00074A20 6A00                       		bpl.s	loc_71C84
00074A22 1B45 0010                  		move.b	d5,$10(a5)
00074A26 1A1C                       		move.b	(a4)+,d5
00074A28 6A00                       		bpl.s	loc_71C84
00074A2A 534C                       		subq.w	#1,a4
00074A2C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074A32 6000                       		bra.s	loc_71C88
00074A34                            ; ===========================================================================
00074A34                            
00074A34                            loc_71C84:
00074A34 4EBA 0000                  		jsr	sub_71D40(pc)
00074A38                            
00074A38                            loc_71C88:
00074A38 2B4C 0004                  		move.l	a4,4(a5)
00074A3C 0815 0002                  		btst	#2,(a5)
00074A40 6600                       		bne.s	locret_71CAA
00074A42 7000                       		moveq	#0,d0
00074A44 102D 0010                  		move.b	$10(a5),d0
00074A48 0C00 0080                  		cmpi.b	#$80,d0
00074A4C 6700                       		beq.s	locret_71CAA
00074A4E 0800 0003                  		btst	#3,d0
00074A52 6600                       		bne.s	loc_71CAC
00074A54 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00074A5A                            
00074A5A                            locret_71CAA:
00074A5A 4E75                       		rts	
00074A5C                            ; ===========================================================================
00074A5C                            
00074A5C                            loc_71CAC:
00074A5C 0400 0088                  		subi.b	#$88,d0
00074A60 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074A64 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074A6A 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074A72 4E75                       		rts	
00074A74                            ; End of function sub_71C4E
00074A74                            
00074A74                            ; ===========================================================================
00074A74 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074A7A                            
00074A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074A7A                            
00074A7A                            
00074A7A                            sub_71CCA:				; XREF: sub_71B4C
00074A7A 532D 000E                  		subq.b	#1,$E(a5)
00074A7E 6600                       		bne.s	loc_71CE0
00074A80 0895 0004                  		bclr	#4,(a5)
00074A84 4EBA 0000                  		jsr	sub_71CEC(pc)
00074A88 4EBA 0000                  		jsr	sub_71E18(pc)
00074A8C 6000 0000                  		bra.w	loc_726E2
00074A90                            ; ===========================================================================
00074A90                            
00074A90                            loc_71CE0:
00074A90 4EBA 0000                  		jsr	sub_71D9E(pc)
00074A94 4EBA 0000                  		jsr	sub_71DC6(pc)
00074A98 6000 0000                  		bra.w	loc_71E24
00074A9C                            ; End of function sub_71CCA
00074A9C                            
00074A9C                            
00074A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074A9C                            
00074A9C                            
00074A9C                            sub_71CEC:				; XREF: sub_71CCA
00074A9C 286D 0004                  		movea.l	4(a5),a4
00074AA0 0895 0001                  		bclr	#1,(a5)
00074AA4                            
00074AA4                            loc_71CF4:
00074AA4 7A00                       		moveq	#0,d5
00074AA6 1A1C                       		move.b	(a4)+,d5
00074AA8 0C05 00E0                  		cmpi.b	#-$20,d5
00074AAC 6500                       		bcs.s	loc_71D04
00074AAE 4EBA 0000                  		jsr	sub_72A5A(pc)
00074AB2 60F0                       		bra.s	loc_71CF4
00074AB4                            ; ===========================================================================
00074AB4                            
00074AB4                            loc_71D04:
00074AB4 4EBA 0000                  		jsr	sub_726FE(pc)
00074AB8 4A05                       		tst.b	d5
00074ABA 6A00                       		bpl.s	loc_71D1A
00074ABC 4EBA 0000                  		jsr	sub_71D22(pc)
00074AC0 1A1C                       		move.b	(a4)+,d5
00074AC2 6A00                       		bpl.s	loc_71D1A
00074AC4 534C                       		subq.w	#1,a4
00074AC6 6000 0000                  		bra.w	sub_71D60
00074ACA                            ; ===========================================================================
00074ACA                            
00074ACA                            loc_71D1A:
00074ACA 4EBA 0000                  		jsr	sub_71D40(pc)
00074ACE 6000 0000                  		bra.w	sub_71D60
00074AD2                            ; End of function sub_71CEC
00074AD2                            
00074AD2                            
00074AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074AD2                            
00074AD2                            
00074AD2                            sub_71D22:				; XREF: sub_71CEC
00074AD2 0405 0080                  		subi.b	#$80,d5
00074AD6 6700                       		beq.s	loc_71D58
00074AD8 DA2D 0008                  		add.b	8(a5),d5
00074ADC 0245 007F                  		andi.w	#$7F,d5
00074AE0 E34D                       		lsl.w	#1,d5
00074AE2 41FA 0000                  		lea	word_72790(pc),a0
00074AE6 3C30 5000                  		move.w	(a0,d5.w),d6
00074AEA 3B46 0010                  		move.w	d6,$10(a5)
00074AEE 4E75                       		rts	
00074AF0                            ; End of function sub_71D22
00074AF0                            
00074AF0                            
00074AF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074AF0                            
00074AF0                            
00074AF0                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074AF0 1005                       		move.b	d5,d0
00074AF2 122D 0002                  		move.b	2(a5),d1
00074AF6                            
00074AF6                            loc_71D46:
00074AF6 5301                       		subq.b	#1,d1
00074AF8 6700                       		beq.s	loc_71D4E
00074AFA D005                       		add.b	d5,d0
00074AFC 60F8                       		bra.s	loc_71D46
00074AFE                            ; ===========================================================================
00074AFE                            
00074AFE                            loc_71D4E:
00074AFE 1B40 000F                  		move.b	d0,$F(a5)
00074B02 1B40 000E                  		move.b	d0,$E(a5)
00074B06 4E75                       		rts	
00074B08                            ; End of function sub_71D40
00074B08                            
00074B08                            ; ===========================================================================
00074B08                            
00074B08                            loc_71D58:				; XREF: sub_71D22
00074B08 08D5 0001                  		bset	#1,(a5)
00074B0C 426D 0010                  		clr.w	$10(a5)
00074B10                            
00074B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074B10                            
00074B10                            
00074B10                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00074B10 2B4C 0004                  		move.l	a4,4(a5)
00074B14 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074B1A 0815 0004                  		btst	#4,(a5)
00074B1E 6600                       		bne.s	locret_71D9C
00074B20 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00074B26 422D 000C                  		clr.b	$C(a5)
00074B2A 0815 0003                  		btst	#3,(a5)
00074B2E 6700                       		beq.s	locret_71D9C
00074B30 206D 0014                  		movea.l	$14(a5),a0
00074B34 1B58 0018                  		move.b	(a0)+,$18(a5)
00074B38 1B58 0019                  		move.b	(a0)+,$19(a5)
00074B3C 1B58 001A                  		move.b	(a0)+,$1A(a5)
00074B40 1018                       		move.b	(a0)+,d0
00074B42 E208                       		lsr.b	#1,d0
00074B44 1B40 001B                  		move.b	d0,$1B(a5)
00074B48 426D 001C                  		clr.w	$1C(a5)
00074B4C                            
00074B4C                            locret_71D9C:
00074B4C 4E75                       		rts	
00074B4E                            ; End of function sub_71D60
00074B4E                            
00074B4E                            
00074B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074B4E                            
00074B4E                            
00074B4E                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00074B4E 4A2D 0012                  		tst.b	$12(a5)
00074B52 6700                       		beq.s	locret_71DC4
00074B54 532D 0012                  		subq.b	#1,$12(a5)
00074B58 6600                       		bne.s	locret_71DC4
00074B5A 08D5 0001                  		bset	#1,(a5)
00074B5E 4A2D 0001                  		tst.b	1(a5)
00074B62 6B00 0000                  		bmi.w	loc_71DBE
00074B66 4EBA 0000                  		jsr	sub_726FE(pc)
00074B6A 584F                       		addq.w	#4,sp
00074B6C 4E75                       		rts	
00074B6E                            ; ===========================================================================
00074B6E                            
00074B6E                            loc_71DBE:
00074B6E 4EBA 0000                  		jsr	sub_729A0(pc)
00074B72 584F                       		addq.w	#4,sp
00074B74                            
00074B74                            locret_71DC4:
00074B74 4E75                       		rts	
00074B76                            ; End of function sub_71D9E
00074B76                            
00074B76                            
00074B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074B76                            
00074B76                            
00074B76                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00074B76 584F                       		addq.w	#4,sp
00074B78 0815 0003                  		btst	#3,(a5)
00074B7C 6700                       		beq.s	locret_71E16
00074B7E 4A2D 0018                  		tst.b	$18(a5)
00074B82 6700                       		beq.s	loc_71DDA
00074B84 532D 0018                  		subq.b	#1,$18(a5)
00074B88 4E75                       		rts	
00074B8A                            ; ===========================================================================
00074B8A                            
00074B8A                            loc_71DDA:
00074B8A 532D 0019                  		subq.b	#1,$19(a5)
00074B8E 6700                       		beq.s	loc_71DE2
00074B90 4E75                       		rts	
00074B92                            ; ===========================================================================
00074B92                            
00074B92                            loc_71DE2:
00074B92 206D 0014                  		movea.l	$14(a5),a0
00074B96 1B68 0001 0019             		move.b	1(a0),$19(a5)
00074B9C 4A2D 001B                  		tst.b	$1B(a5)
00074BA0 6600                       		bne.s	loc_71DFE
00074BA2 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00074BA8 442D 001A                  		neg.b	$1A(a5)
00074BAC 4E75                       		rts	
00074BAE                            ; ===========================================================================
00074BAE                            
00074BAE                            loc_71DFE:
00074BAE 532D 001B                  		subq.b	#1,$1B(a5)
00074BB2 1C2D 001A                  		move.b	$1A(a5),d6
00074BB6 4886                       		ext.w	d6
00074BB8 DC6D 001C                  		add.w	$1C(a5),d6
00074BBC 3B46 001C                  		move.w	d6,$1C(a5)
00074BC0 DC6D 0010                  		add.w	$10(a5),d6
00074BC4 594F                       		subq.w	#4,sp
00074BC6                            
00074BC6                            locret_71E16:
00074BC6 4E75                       		rts	
00074BC8                            ; End of function sub_71DC6
00074BC8                            
00074BC8                            
00074BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074BC8                            
00074BC8                            
00074BC8                            sub_71E18:				; XREF: sub_71CCA
00074BC8 0815 0001                  		btst	#1,(a5)
00074BCC 6600                       		bne.s	locret_71E48
00074BCE 3C2D 0010                  		move.w	$10(a5),d6
00074BD2 6700                       		beq.s	loc_71E4A
00074BD4                            
00074BD4                            loc_71E24:				; XREF: sub_71CCA
00074BD4 102D 001E                  		move.b	$1E(a5),d0
00074BD8 4880                       		ext.w	d0
00074BDA DC40                       		add.w	d0,d6
00074BDC 0815 0002                  		btst	#2,(a5)
00074BE0 6600                       		bne.s	locret_71E48
00074BE2 3206                       		move.w	d6,d1
00074BE4 E049                       		lsr.w	#8,d1
00074BE6 103C 00A4                  		move.b	#-$5C,d0
00074BEA 4EBA 0000                  		jsr	sub_72722(pc)
00074BEE 1206                       		move.b	d6,d1
00074BF0 103C 00A0                  		move.b	#-$60,d0
00074BF4 4EBA 0000                  		jsr	sub_72722(pc)
00074BF8                            
00074BF8                            locret_71E48:
00074BF8 4E75                       		rts	
00074BFA                            ; ===========================================================================
00074BFA                            
00074BFA                            loc_71E4A:
00074BFA 08D5 0001                  		bset	#1,(a5)
00074BFE 4E75                       		rts	
00074C00                            ; End of function sub_71E18
00074C00                            
00074C00                            ; ===========================================================================
00074C00                            
00074C00                            loc_71E50:				; XREF: sub_71B4C
00074C00 6B00                       		bmi.s	loc_71E94
00074C02 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00074C08 6700 0000                  		beq.w	loc_71EFE
00074C0C 1D7C 0002 0003             		move.b	#2,3(a6)
00074C12 7602                       		moveq	#2,d3
00074C14 103C 00B4                  		move.b	#-$4C,d0
00074C18 7200                       		moveq	#0,d1
00074C1A                            
00074C1A                            loc_71E6A:
00074C1A 4EBA 0000                  		jsr	sub_7272E(pc)
00074C1E 4EBA 0000                  		jsr	sub_72764(pc)
00074C22 5200                       		addq.b	#1,d0
00074C24 51CB FFF4                  		dbf	d3,loc_71E6A
00074C28                            
00074C28 7602                       		moveq	#2,d3
00074C2A 7028                       		moveq	#$28,d0
00074C2C                            
00074C2C                            loc_71E7C:
00074C2C 1203                       		move.b	d3,d1
00074C2E 4EBA 0000                  		jsr	sub_7272E(pc)
00074C32 5801                       		addq.b	#4,d1
00074C34 4EBA 0000                  		jsr	sub_7272E(pc)
00074C38 51CB FFF2                  		dbf	d3,loc_71E7C
00074C3C                            
00074C3C 4EBA 0000                  		jsr	sub_729B6(pc)
00074C40 6000 FDB2                  		bra.w	loc_71C44
00074C44                            ; ===========================================================================
00074C44                            
00074C44                            loc_71E94:				; XREF: loc_71E50
00074C44 422E 0003                  		clr.b	3(a6)
00074C48 7630                       		moveq	#$30,d3
00074C4A 4BEE 0040                  		lea	$40(a6),a5
00074C4E 7806                       		moveq	#6,d4
00074C50                            
00074C50                            loc_71EA0:
00074C50 0815 0007                  		btst	#7,(a5)
00074C54 6700                       		beq.s	loc_71EB8
00074C56 0815 0002                  		btst	#2,(a5)
00074C5A 6600                       		bne.s	loc_71EB8
00074C5C 103C 00B4                  		move.b	#-$4C,d0
00074C60 122D 000A                  		move.b	$A(a5),d1
00074C64 4EBA 0000                  		jsr	sub_72722(pc)
00074C68                            
00074C68                            loc_71EB8:
00074C68 DAC3                       		adda.w	d3,a5
00074C6A 51CC FFE4                  		dbf	d4,loc_71EA0
00074C6E                            
00074C6E 4BEE 0220                  		lea	$220(a6),a5
00074C72 7802                       		moveq	#2,d4
00074C74                            
00074C74                            loc_71EC4:
00074C74 0815 0007                  		btst	#7,(a5)
00074C78 6700                       		beq.s	loc_71EDC
00074C7A 0815 0002                  		btst	#2,(a5)
00074C7E 6600                       		bne.s	loc_71EDC
00074C80 103C 00B4                  		move.b	#-$4C,d0
00074C84 122D 000A                  		move.b	$A(a5),d1
00074C88 4EBA 0000                  		jsr	sub_72722(pc)
00074C8C                            
00074C8C                            loc_71EDC:
00074C8C DAC3                       		adda.w	d3,a5
00074C8E 51CC FFE4                  		dbf	d4,loc_71EC4
00074C92                            
00074C92 4BEE 0340                  		lea	$340(a6),a5
00074C96 0815 0007                  		btst	#7,(a5)
00074C9A 6700                       		beq.s	loc_71EFE
00074C9C 0815 0002                  		btst	#2,(a5)
00074CA0 6600                       		bne.s	loc_71EFE
00074CA2 103C 00B4                  		move.b	#-$4C,d0
00074CA6 122D 000A                  		move.b	$A(a5),d1
00074CAA 4EBA 0000                  		jsr	sub_72722(pc)
00074CAE                            
00074CAE                            loc_71EFE:
00074CAE 6000 FD44                  		bra.w	loc_71C44
00074CB2                            
00074CB2                            ; ---------------------------------------------------------------------------
00074CB2                            ; Subroutine to	play a sound or	music track
00074CB2                            ; ---------------------------------------------------------------------------
00074CB2                            
00074CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074CB2                            
00074CB2                            
00074CB2                            Sound_Play:				; XREF: sub_71B4C
00074CB2 2079 0007 4740             		movea.l	(Go_SoundTypes).l,a0
00074CB8 43EE 000A                  		lea	$A(a6),a1	; load music track number
00074CBC 1616                       		move.b	0(a6),d3
00074CBE 7802                       		moveq	#2,d4
00074CC0                            
00074CC0                            loc_71F12:
00074CC0 1011                       		move.b	(a1),d0		; move track number to d0
00074CC2 1200                       		move.b	d0,d1
00074CC4 4219                       		clr.b	(a1)+
00074CC6 0400 0081                  		subi.b	#$81,d0
00074CCA 6500                       		bcs.s	loc_71F3E
00074CCC 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074CD2 6700                       		beq.s	loc_71F2C
00074CD4 1D41 000A                  		move.b	d1,$A(a6)
00074CD8 6000                       		bra.s	loc_71F3E
00074CDA                            ; ===========================================================================
00074CDA                            
00074CDA                            loc_71F2C:
00074CDA 0240 007F                  		andi.w	#$7F,d0
00074CDE 1430 0000                  		move.b	(a0,d0.w),d2
00074CE2 B403                       		cmp.b	d3,d2
00074CE4 6500                       		bcs.s	loc_71F3E
00074CE6 1602                       		move.b	d2,d3
00074CE8 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00074CEC                            
00074CEC                            loc_71F3E:
00074CEC 51CC FFD2                  		dbf	d4,loc_71F12
00074CF0                            
00074CF0 4A03                       		tst.b	d3
00074CF2 6B00                       		bmi.s	locret_71F4A
00074CF4 1C83                       		move.b	d3,0(a6)
00074CF6                            
00074CF6                            locret_71F4A:
00074CF6 4E75                       		rts	
00074CF8                            ; End of function Sound_Play
00074CF8                            
00074CF8                            
00074CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074CF8                            
00074CF8                            
00074CF8                            Sound_ChkValue:				; XREF: sub_71B4C
00074CF8 7E00                       		moveq	#0,d7
00074CFA 1E2E 0009                  		move.b	9(a6),d7
00074CFE 6700 0000                  		beq.w	Sound_E4
00074D02 6A00                       		bpl.s	locret_71F8C
00074D04 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00074D0A 0C07 009F                  		cmpi.b	#$9F,d7
00074D0E 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00074D12 0C07 00A0                  		cmpi.b	#$A0,d7
00074D16 6500 0000                  		bcs.w	locret_71F8C
00074D1A 0C07 00CF                  		cmpi.b	#$CF,d7
00074D1E 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00074D22 0C07 00D0                  		cmpi.b	#$D0,d7
00074D26 6500 0000                  		bcs.w	locret_71F8C
00074D2A 0C07 00E0                  		cmpi.b	#$E0,d7
00074D2E 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00074D32 0C07 00E4                  		cmpi.b	#$E4,d7
00074D36 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00074D38                            
00074D38                            locret_71F8C:
00074D38 4E75                       		rts	
00074D3A                            ; ===========================================================================
00074D3A                            
00074D3A                            Sound_E0toE4:				; XREF: Sound_ChkValue
00074D3A 0407 00E0                  		subi.b	#$E0,d7
00074D3E E54F                       		lsl.w	#2,d7
00074D40 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00074D44                            ; ===========================================================================
00074D44                            
00074D44                            Sound_ExIndex:
00074D44 6000 0000                  		bra.w	Sound_E0
00074D48                            ; ===========================================================================
00074D48 6000 0000                  		bra.w	Sound_E1
00074D4C                            ; ===========================================================================
00074D4C 6000 0000                  		bra.w	Sound_E2
00074D50                            ; ===========================================================================
00074D50 6000 0000                  		bra.w	Sound_E3
00074D54                            ; ===========================================================================
00074D54 6000 0000                  		bra.w	Sound_E4
00074D58                            ; ===========================================================================
00074D58                            ; ---------------------------------------------------------------------------
00074D58                            ; Play "Say-gaa" PCM sound
00074D58                            ; ---------------------------------------------------------------------------
00074D58                            
00074D58                            Sound_E1:				  
00074D58 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00074D5E 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00074D64 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00074D6C                            PlayPCM_Loop:	  
00074D6C 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00074D72 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00074D76 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00074D7A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00074D7C 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00074D7E 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00074D82 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00074D88 4EB8 10BA                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00074D8C 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00074D92 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00074D94 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00074D96                            return_PlayPCM: 
00074D96 584F                       		addq.w	#4,sp 
00074D98 4E75                       		rts
00074D9A                            ; ===========================================================================
00074D9A                            ; ---------------------------------------------------------------------------
00074D9A                            ; Play music track $81-$9F
00074D9A                            ; ---------------------------------------------------------------------------
00074D9A                            
00074D9A                            Sound_81to9F:				; XREF: Sound_ChkValue
00074D9A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00074D9E 6600                       		bne.s	loc_72024	; if not, branch
00074DA0 4A2E 0027                  		tst.b	$27(a6)
00074DA4 6600 0000                  		bne.w	loc_721B6
00074DA8 4BEE 0040                  		lea	$40(a6),a5
00074DAC 7009                       		moveq	#9,d0
00074DAE                            
00074DAE                            loc_71FE6:
00074DAE 0895 0002                  		bclr	#2,(a5)
00074DB2 DAFC 0030                  		adda.w	#$30,a5
00074DB6 51C8 FFF6                  		dbf	d0,loc_71FE6
00074DBA                            
00074DBA 4BEE 0220                  		lea	$220(a6),a5
00074DBE 7005                       		moveq	#5,d0
00074DC0                            
00074DC0                            loc_71FF8:
00074DC0 0895 0007                  		bclr	#7,(a5)
00074DC4 DAFC 0030                  		adda.w	#$30,a5
00074DC8 51C8 FFF6                  		dbf	d0,loc_71FF8
00074DCC 4216                       		clr.b	0(a6)
00074DCE 204E                       		movea.l	a6,a0
00074DD0 43EE 03A0                  		lea	$3A0(a6),a1
00074DD4 303C 0087                  		move.w	#$87,d0
00074DD8                            
00074DD8                            loc_72012:
00074DD8 22D8                       		move.l	(a0)+,(a1)+
00074DDA 51C8 FFFC                  		dbf	d0,loc_72012
00074DDE                            
00074DDE 1D7C 0080 0027             		move.b	#$80,$27(a6)
00074DE4 4216                       		clr.b	0(a6)
00074DE6 6000                       		bra.s	loc_7202C
00074DE8                            ; ===========================================================================
00074DE8                            
00074DE8                            loc_72024:
00074DE8 422E 0027                  		clr.b	$27(a6)
00074DEC 422E 0026                  		clr.b	$26(a6)
00074DF0                            
00074DF0                            loc_7202C:
00074DF0 4EBA 0000                  		jsr	sub_725CA(pc)
00074DF4 2879 0007 4750             		movea.l	(off_719A0).l,a4
00074DFA 0407 0081                  		subi.b	#$81,d7
00074DFE 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00074E04 2879 0007 4748             		movea.l	(Go_MusicIndex).l,a4
00074E0A E54F                       		lsl.w	#2,d7
00074E0C 2874 7000                  		movea.l	(a4,d7.w),a4
00074E10 7000                       		moveq	#0,d0
00074E12 3014                       		move.w	(a4),d0
00074E14 D08C                       		add.l	a4,d0
00074E16 2D40 0018                  		move.l	d0,$18(a6)
00074E1A 102C 0005                  		move.b	5(a4),d0
00074E1E 1D40 0028                  		move.b	d0,$28(a6)
00074E22 4A2E 002A                  		tst.b	$2A(a6)
00074E26 6700                       		beq.s	loc_72068
00074E28 102E 0029                  		move.b	$29(a6),d0
00074E2C                            
00074E2C                            loc_72068:
00074E2C 1D40 0002                  		move.b	d0,2(a6)
00074E30 1D40 0001                  		move.b	d0,1(a6)
00074E34 7200                       		moveq	#0,d1
00074E36 264C                       		movea.l	a4,a3
00074E38 5C4C                       		addq.w	#6,a4
00074E3A 7E00                       		moveq	#0,d7
00074E3C 1E2B 0002                  		move.b	2(a3),d7
00074E40 6700 0000                  		beq.w	loc_72114
00074E44 5307                       		subq.b	#1,d7
00074E46 123C 00C0                  		move.b	#-$40,d1
00074E4A 182B 0004                  		move.b	4(a3),d4
00074E4E 7C30                       		moveq	#$30,d6
00074E50 1A3C 0001                  		move.b	#1,d5
00074E54 43EE 0040                  		lea	$40(a6),a1
00074E58 45FA 0000                  		lea	byte_721BA(pc),a2
00074E5C                            
00074E5C                            loc_72098:
00074E5C 08D1 0007                  		bset	#7,(a1)
00074E60 135A 0001                  		move.b	(a2)+,1(a1)
00074E64 1344 0002                  		move.b	d4,2(a1)
00074E68 1346 000D                  		move.b	d6,$D(a1)
00074E6C 1341 000A                  		move.b	d1,$A(a1)
00074E70 1345 000E                  		move.b	d5,$E(a1)
00074E74 7000                       		moveq	#0,d0
00074E76 301C                       		move.w	(a4)+,d0
00074E78 D08B                       		add.l	a3,d0
00074E7A 2340 0004                  		move.l	d0,4(a1)
00074E7E 335C 0008                  		move.w	(a4)+,8(a1)
00074E82 D2C6                       		adda.w	d6,a1
00074E84 51CF FFD6                  		dbf	d7,loc_72098
00074E88 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00074E8E 6600                       		bne.s	loc_720D8
00074E90 702B                       		moveq	#$2B,d0
00074E92 7200                       		moveq	#0,d1
00074E94 4EBA 0000                  		jsr	sub_7272E(pc)
00074E98 6000 0000                  		bra.w	loc_72114
00074E9C                            ; ===========================================================================
00074E9C                            
00074E9C                            loc_720D8:
00074E9C 7028                       		moveq	#$28,d0
00074E9E 7206                       		moveq	#6,d1
00074EA0 4EBA 0000                  		jsr	sub_7272E(pc)
00074EA4 103C 0042                  		move.b	#$42,d0
00074EA8 727F                       		moveq	#$7F,d1
00074EAA 4EBA 0000                  		jsr	sub_72764(pc)
00074EAE 103C 004A                  		move.b	#$4A,d0
00074EB2 727F                       		moveq	#$7F,d1
00074EB4 4EBA 0000                  		jsr	sub_72764(pc)
00074EB8 103C 0046                  		move.b	#$46,d0
00074EBC 727F                       		moveq	#$7F,d1
00074EBE 4EBA 0000                  		jsr	sub_72764(pc)
00074EC2 103C 004E                  		move.b	#$4E,d0
00074EC6 727F                       		moveq	#$7F,d1
00074EC8 4EBA 0000                  		jsr	sub_72764(pc)
00074ECC 103C 00B6                  		move.b	#-$4A,d0
00074ED0 123C 00C0                  		move.b	#-$40,d1
00074ED4 4EBA 0000                  		jsr	sub_72764(pc)
00074ED8                            
00074ED8                            loc_72114:
00074ED8 7E00                       		moveq	#0,d7
00074EDA 1E2B 0003                  		move.b	3(a3),d7
00074EDE 6700                       		beq.s	loc_72154
00074EE0 5307                       		subq.b	#1,d7
00074EE2 43EE 0190                  		lea	$190(a6),a1
00074EE6 45FA 0000                  		lea	byte_721C2(pc),a2
00074EEA                            
00074EEA                            loc_72126:
00074EEA 08D1 0007                  		bset	#7,(a1)
00074EEE 135A 0001                  		move.b	(a2)+,1(a1)
00074EF2 1344 0002                  		move.b	d4,2(a1)
00074EF6 1346 000D                  		move.b	d6,$D(a1)
00074EFA 1345 000E                  		move.b	d5,$E(a1)
00074EFE 7000                       		moveq	#0,d0
00074F00 301C                       		move.w	(a4)+,d0
00074F02 D08B                       		add.l	a3,d0
00074F04 2340 0004                  		move.l	d0,4(a1)
00074F08 335C 0008                  		move.w	(a4)+,8(a1)
00074F0C 101C                       		move.b	(a4)+,d0
00074F0E 135C 000B                  		move.b	(a4)+,$B(a1)
00074F12 D2C6                       		adda.w	d6,a1
00074F14 51CF FFD4                  		dbf	d7,loc_72126
00074F18                            
00074F18                            loc_72154:
00074F18 43EE 0220                  		lea	$220(a6),a1
00074F1C 7E05                       		moveq	#5,d7
00074F1E                            
00074F1E                            loc_7215A:
00074F1E 4A11                       		tst.b	(a1)
00074F20 6A00 0000                  		bpl.w	loc_7217C
00074F24 7000                       		moveq	#0,d0
00074F26 1029 0001                  		move.b	1(a1),d0
00074F2A 6B00                       		bmi.s	loc_7216E
00074F2C 5500                       		subq.b	#2,d0
00074F2E E508                       		lsl.b	#2,d0
00074F30 6000                       		bra.s	loc_72170
00074F32                            ; ===========================================================================
00074F32                            
00074F32                            loc_7216E:
00074F32 E608                       		lsr.b	#3,d0
00074F34                            
00074F34                            loc_72170:
00074F34 41FA 0000                  		lea	dword_722CC(pc),a0
00074F38 2070 0000                  		movea.l	(a0,d0.w),a0
00074F3C 08D0 0002                  		bset	#2,(a0)
00074F40                            
00074F40                            loc_7217C:
00074F40 D2C6                       		adda.w	d6,a1
00074F42 51CF FFDA                  		dbf	d7,loc_7215A
00074F46                            
00074F46 4A6E 0340                  		tst.w	$340(a6)
00074F4A 6A00                       		bpl.s	loc_7218E
00074F4C 08EE 0002 0100             		bset	#2,$100(a6)
00074F52                            
00074F52                            loc_7218E:
00074F52 4A6E 0370                  		tst.w	$370(a6)
00074F56 6A00                       		bpl.s	loc_7219A
00074F58 08EE 0002 01F0             		bset	#2,$1F0(a6)
00074F5E                            
00074F5E                            loc_7219A:
00074F5E 4BEE 0070                  		lea	$70(a6),a5
00074F62 7805                       		moveq	#5,d4
00074F64                            
00074F64                            loc_721A0:
00074F64 4EBA 0000                  		jsr	sub_726FE(pc)
00074F68 DAC6                       		adda.w	d6,a5
00074F6A 51CC FFF8                  		dbf	d4,loc_721A0
00074F6E 7802                       		moveq	#2,d4
00074F70                            
00074F70                            loc_721AC:
00074F70 4EBA 0000                  		jsr	sub_729A0(pc)
00074F74 DAC6                       		adda.w	d6,a5
00074F76 51CC FFF8                  		dbf	d4,loc_721AC
00074F7A                            
00074F7A                            loc_721B6:
00074F7A 584F                       		addq.w	#4,sp
00074F7C 4E75                       		rts	
00074F7E                            ; ===========================================================================
00074F7E 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00074F86                            		even
00074F86 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00074F8A                            		even
00074F8A                            ; ===========================================================================
00074F8A                            ; ---------------------------------------------------------------------------
00074F8A                            ; Play normal sound effect
00074F8A                            ; ---------------------------------------------------------------------------
00074F8A                            
00074F8A                            Sound_A0toCF:				; XREF: Sound_ChkValue
00074F8A 4A2E 0027                  		tst.b	$27(a6)
00074F8E 6600 0000                  		bne.w	loc_722C6
00074F92 4A2E 0004                  		tst.b	4(a6)
00074F96 6600 0000                  		bne.w	loc_722C6
00074F9A 4A2E 0024                  		tst.b	$24(a6)
00074F9E 6600 0000                  		bne.w	loc_722C6
00074FA2 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00074FA6 6600                       		bne.s	Sound_notB5	; if not, branch
00074FA8 4A2E 002B                  		tst.b	$2B(a6)
00074FAC 6600                       		bne.s	loc_721EE
00074FAE 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00074FB2                            
00074FB2                            loc_721EE:
00074FB2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00074FB8                            
00074FB8                            Sound_notB5:
00074FB8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00074FBC 6600                       		bne.s	Sound_notA7	; if not, branch
00074FBE 4A2E 002C                  		tst.b	$2C(a6)
00074FC2 6600 0000                  		bne.w	locret_722C4
00074FC6 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00074FCC                            
00074FCC                            Sound_notA7:
00074FCC 2079 0007 474C             		movea.l	(Go_SoundIndex).l,a0
00074FD2 0407 00A0                  		subi.b	#$A0,d7
00074FD6 E54F                       		lsl.w	#2,d7
00074FD8 2670 7000                  		movea.l	(a0,d7.w),a3
00074FDC 224B                       		movea.l	a3,a1
00074FDE 7200                       		moveq	#0,d1
00074FE0 3219                       		move.w	(a1)+,d1
00074FE2 D28B                       		add.l	a3,d1
00074FE4 1A19                       		move.b	(a1)+,d5
00074FE6 1E19                       		move.b	(a1)+,d7
00074FE8 5307                       		subq.b	#1,d7
00074FEA 7C30                       		moveq	#$30,d6
00074FEC                            
00074FEC                            loc_72228:
00074FEC 7600                       		moveq	#0,d3
00074FEE 1629 0001                  		move.b	1(a1),d3
00074FF2 1803                       		move.b	d3,d4
00074FF4 6B00                       		bmi.s	loc_72244
00074FF6 5543                       		subq.w	#2,d3
00074FF8 E54B                       		lsl.w	#2,d3
00074FFA 4BFA 0000                  		lea	dword_722CC(pc),a5
00074FFE 2A75 3000                  		movea.l	(a5,d3.w),a5
00075002 08D5 0002                  		bset	#2,(a5)
00075006 6000                       		bra.s	loc_7226E
00075008                            ; ===========================================================================
00075008                            
00075008                            loc_72244:
00075008 E64B                       		lsr.w	#3,d3
0007500A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007500E 2A75 3000                  		movea.l	(a5,d3.w),a5
00075012 08D5 0002                  		bset	#2,(a5)
00075016 0C04 00C0                  		cmpi.b	#$C0,d4
0007501A 6600                       		bne.s	loc_7226E
0007501C 1004                       		move.b	d4,d0
0007501E 0000 001F                  		ori.b	#$1F,d0
00075022 13C0 00C0 0011             		move.b	d0,($C00011).l
00075028 0840 0005                  		bchg	#5,d0
0007502C 13C0 00C0 0011             		move.b	d0,($C00011).l
00075032                            
00075032                            loc_7226E:
00075032 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075036 244D                       		movea.l	a5,a2
00075038 700B                       		moveq	#$B,d0
0007503A                            
0007503A                            loc_72276:
0007503A 429A                       		clr.l	(a2)+
0007503C 51C8 FFFC                  		dbf	d0,loc_72276
00075040                            
00075040 3A99                       		move.w	(a1)+,(a5)
00075042 1B45 0002                  		move.b	d5,2(a5)
00075046 7000                       		moveq	#0,d0
00075048 3019                       		move.w	(a1)+,d0
0007504A D08B                       		add.l	a3,d0
0007504C 2B40 0004                  		move.l	d0,4(a5)
00075050 3B59 0008                  		move.w	(a1)+,8(a5)
00075054 1B7C 0001 000E             		move.b	#1,$E(a5)
0007505A 1B46 000D                  		move.b	d6,$D(a5)
0007505E 4A04                       		tst.b	d4
00075060 6B00                       		bmi.s	loc_722A8
00075062 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075068 2B41 0020                  		move.l	d1,$20(a5)
0007506C                            
0007506C                            loc_722A8:
0007506C 51CF FF7E                  		dbf	d7,loc_72228
00075070                            
00075070 4A2E 0250                  		tst.b	$250(a6)
00075074 6A00                       		bpl.s	loc_722B8
00075076 08EE 0002 0340             		bset	#2,$340(a6)
0007507C                            
0007507C                            loc_722B8:
0007507C 4A2E 0310                  		tst.b	$310(a6)
00075080 6A00                       		bpl.s	locret_722C4
00075082 08EE 0002 0370             		bset	#2,$370(a6)
00075088                            
00075088                            locret_722C4:
00075088 4E75                       		rts	
0007508A                            ; ===========================================================================
0007508A                            
0007508A                            loc_722C6:
0007508A 4216                       		clr.b	0(a6)
0007508C 4E75                       		rts	
0007508E                            ; ===========================================================================
0007508E 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075092 0000 0000                  		dc.l 0
00075096 00FF F100                  		dc.l $FFF100
0007509A 00FF F130                  		dc.l $FFF130
0007509E 00FF F190                  		dc.l $FFF190
000750A2 00FF F1C0                  		dc.l $FFF1C0
000750A6 00FF F1F0                  		dc.l $FFF1F0
000750AA 00FF F1F0                  		dc.l $FFF1F0
000750AE 00FF F220                  dword_722EC:	dc.l $FFF220
000750B2 0000 0000                  		dc.l 0
000750B6 00FF F250                  		dc.l $FFF250
000750BA 00FF F280                  		dc.l $FFF280
000750BE 00FF F2B0                  		dc.l $FFF2B0
000750C2 00FF F2E0                  		dc.l $FFF2E0
000750C6 00FF F310                  		dc.l $FFF310
000750CA 00FF F310                  		dc.l $FFF310
000750CE                            ; ===========================================================================
000750CE                            ; ---------------------------------------------------------------------------
000750CE                            ; Play GHZ waterfall sound
000750CE                            ; ---------------------------------------------------------------------------
000750CE                            
000750CE                            Sound_D0toDF:				; XREF: Sound_ChkValue
000750CE 4A2E 0027                  		tst.b	$27(a6)
000750D2 6600 0000                  		bne.w	locret_723C6
000750D6 4A2E 0004                  		tst.b	4(a6)
000750DA 6600 0000                  		bne.w	locret_723C6
000750DE 4A2E 0024                  		tst.b	$24(a6)
000750E2 6600 0000                  		bne.w	locret_723C6
000750E6 2079 0007 4744             		movea.l	(Go_SoundD0).l,a0
000750EC 0407 00D0                  		subi.b	#$D0,d7
000750F0 E54F                       		lsl.w	#2,d7
000750F2 2670 7000                  		movea.l	(a0,d7.w),a3
000750F6 224B                       		movea.l	a3,a1
000750F8 7000                       		moveq	#0,d0
000750FA 3019                       		move.w	(a1)+,d0
000750FC D08B                       		add.l	a3,d0
000750FE 2D40 0020                  		move.l	d0,$20(a6)
00075102 1A19                       		move.b	(a1)+,d5
00075104 1E19                       		move.b	(a1)+,d7
00075106 5307                       		subq.b	#1,d7
00075108 7C30                       		moveq	#$30,d6
0007510A                            
0007510A                            loc_72348:
0007510A 1829 0001                  		move.b	1(a1),d4
0007510E 6B00                       		bmi.s	loc_7235A
00075110 08EE 0002 0100             		bset	#2,$100(a6)
00075116 4BEE 0340                  		lea	$340(a6),a5
0007511A 6000                       		bra.s	loc_72364
0007511C                            ; ===========================================================================
0007511C                            
0007511C                            loc_7235A:
0007511C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075122 4BEE 0370                  		lea	$370(a6),a5
00075126                            
00075126                            loc_72364:
00075126 244D                       		movea.l	a5,a2
00075128 700B                       		moveq	#$B,d0
0007512A                            
0007512A                            loc_72368:
0007512A 429A                       		clr.l	(a2)+
0007512C 51C8 FFFC                  		dbf	d0,loc_72368
00075130                            
00075130 3A99                       		move.w	(a1)+,(a5)
00075132 1B45 0002                  		move.b	d5,2(a5)
00075136 7000                       		moveq	#0,d0
00075138 3019                       		move.w	(a1)+,d0
0007513A D08B                       		add.l	a3,d0
0007513C 2B40 0004                  		move.l	d0,4(a5)
00075140 3B59 0008                  		move.w	(a1)+,8(a5)
00075144 1B7C 0001 000E             		move.b	#1,$E(a5)
0007514A 1B46 000D                  		move.b	d6,$D(a5)
0007514E 4A04                       		tst.b	d4
00075150 6B00                       		bmi.s	loc_72396
00075152 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075158                            
00075158                            loc_72396:
00075158 51CF FFB0                  		dbf	d7,loc_72348
0007515C                            
0007515C 4A2E 0250                  		tst.b	$250(a6)
00075160 6A00                       		bpl.s	loc_723A6
00075162 08EE 0002 0340             		bset	#2,$340(a6)
00075168                            
00075168                            loc_723A6:
00075168 4A2E 0310                  		tst.b	$310(a6)
0007516C 6A00                       		bpl.s	locret_723C6
0007516E 08EE 0002 0370             		bset	#2,$370(a6)
00075174 0004 001F                  		ori.b	#$1F,d4
00075178 13C4 00C0 0011             		move.b	d4,($C00011).l
0007517E 0844 0005                  		bchg	#5,d4
00075182 13C4 00C0 0011             		move.b	d4,($C00011).l
00075188                            
00075188                            locret_723C6:
00075188 4E75                       		rts	
0007518A                            ; End of function Sound_ChkValue
0007518A                            
0007518A                            ; ===========================================================================
0007518A 00FF F100                  		dc.l $FFF100
0007518E 00FF F1F0                  		dc.l $FFF1F0
00075192 00FF F250                  		dc.l $FFF250
00075196 00FF F310                  		dc.l $FFF310
0007519A 00FF F340                  		dc.l $FFF340
0007519E 00FF F370                  		dc.l $FFF370
000751A2                            
000751A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000751A2                            
000751A2                            
000751A2                            Snd_FadeOut1:				; XREF: Sound_E0
000751A2 4216                       		clr.b	0(a6)
000751A4 4BEE 0220                  		lea	$220(a6),a5
000751A8 7E05                       		moveq	#5,d7
000751AA                            
000751AA                            loc_723EA:
000751AA 4A15                       		tst.b	(a5)
000751AC 6A00 0000                  		bpl.w	loc_72472
000751B0 0895 0007                  		bclr	#7,(a5)
000751B4 7600                       		moveq	#0,d3
000751B6 162D 0001                  		move.b	1(a5),d3
000751BA 6B00                       		bmi.s	loc_7243C
000751BC 4EBA 0000                  		jsr	sub_726FE(pc)
000751C0 0C03 0004                  		cmpi.b	#4,d3
000751C4 6600                       		bne.s	loc_72416
000751C6 4A2E 0340                  		tst.b	$340(a6)
000751CA 6A00                       		bpl.s	loc_72416
000751CC 4BEE 0340                  		lea	$340(a6),a5
000751D0 226E 0020                  		movea.l	$20(a6),a1
000751D4 6000                       		bra.s	loc_72428
000751D6                            ; ===========================================================================
000751D6                            
000751D6                            loc_72416:
000751D6 5503                       		subq.b	#2,d3
000751D8 E50B                       		lsl.b	#2,d3
000751DA 41FA FEB2                  		lea	dword_722CC(pc),a0
000751DE 264D                       		movea.l	a5,a3
000751E0 2A70 3000                  		movea.l	(a0,d3.w),a5
000751E4 226E 0018                  		movea.l	$18(a6),a1
000751E8                            
000751E8                            loc_72428:
000751E8 0895 0002                  		bclr	#2,(a5)
000751EC 08D5 0001                  		bset	#1,(a5)
000751F0 102D 000B                  		move.b	$B(a5),d0
000751F4 4EBA 0000                  		jsr	sub_72C4E(pc)
000751F8 2A4B                       		movea.l	a3,a5
000751FA 6000                       		bra.s	loc_72472
000751FC                            ; ===========================================================================
000751FC                            
000751FC                            loc_7243C:
000751FC 4EBA 0000                  		jsr	sub_729A0(pc)
00075200 41EE 0370                  		lea	$370(a6),a0
00075204 0C03 00E0                  		cmpi.b	#$E0,d3
00075208 6700                       		beq.s	loc_7245A
0007520A 0C03 00C0                  		cmpi.b	#$C0,d3
0007520E 6700                       		beq.s	loc_7245A
00075210 E60B                       		lsr.b	#3,d3
00075212 41FA FE7A                  		lea	dword_722CC(pc),a0
00075216 2070 3000                  		movea.l	(a0,d3.w),a0
0007521A                            
0007521A                            loc_7245A:
0007521A 0890 0002                  		bclr	#2,(a0)
0007521E 08D0 0001                  		bset	#1,(a0)
00075222 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075228 6600                       		bne.s	loc_72472
0007522A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075232                            
00075232                            loc_72472:
00075232 DAFC 0030                  		adda.w	#$30,a5
00075236 51CF FF72                  		dbf	d7,loc_723EA
0007523A                            
0007523A 4E75                       		rts	
0007523C                            ; End of function Snd_FadeOut1
0007523C                            
0007523C                            
0007523C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007523C                            
0007523C                            
0007523C                            Snd_FadeOut2:				; XREF: Sound_E0
0007523C 4BEE 0340                  		lea	$340(a6),a5
00075240 4A15                       		tst.b	(a5)
00075242 6A00                       		bpl.s	loc_724AE
00075244 0895 0007                  		bclr	#7,(a5)
00075248 0815 0002                  		btst	#2,(a5)
0007524C 6600                       		bne.s	loc_724AE
0007524E 4EBA 0000                  		jsr	loc_7270A(pc)
00075252 4BEE 0100                  		lea	$100(a6),a5
00075256 0895 0002                  		bclr	#2,(a5)
0007525A 08D5 0001                  		bset	#1,(a5)
0007525E 4A15                       		tst.b	(a5)
00075260 6A00                       		bpl.s	loc_724AE
00075262 226E 0018                  		movea.l	$18(a6),a1
00075266 102D 000B                  		move.b	$B(a5),d0
0007526A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007526E                            
0007526E                            loc_724AE:
0007526E 4BEE 0370                  		lea	$370(a6),a5
00075272 4A15                       		tst.b	(a5)
00075274 6A00                       		bpl.s	locret_724E4
00075276 0895 0007                  		bclr	#7,(a5)
0007527A 0815 0002                  		btst	#2,(a5)
0007527E 6600                       		bne.s	locret_724E4
00075280 4EBA 0000                  		jsr	loc_729A6(pc)
00075284 4BEE 01F0                  		lea	$1F0(a6),a5
00075288 0895 0002                  		bclr	#2,(a5)
0007528C 08D5 0001                  		bset	#1,(a5)
00075290 4A15                       		tst.b	(a5)
00075292 6A00                       		bpl.s	locret_724E4
00075294 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007529A 6600                       		bne.s	locret_724E4
0007529C 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000752A4                            
000752A4                            locret_724E4:
000752A4 4E75                       		rts	
000752A6                            ; End of function Snd_FadeOut2
000752A6                            
000752A6                            ; ===========================================================================
000752A6                            ; ---------------------------------------------------------------------------
000752A6                            ; Fade out music
000752A6                            ; ---------------------------------------------------------------------------
000752A6                            
000752A6                            Sound_E0:				; XREF: Sound_ExIndex
000752A6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000752AA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000752AE 1D7C 0003 0006             		move.b	#3,6(a6)
000752B4 1D7C 0028 0004             		move.b	#$28,4(a6)
000752BA 422E 0040                  		clr.b	$40(a6)
000752BE 422E 002A                  		clr.b	$2A(a6)
000752C2 4E75                       		rts	
000752C4                            
000752C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752C4                            
000752C4                            
000752C4                            sub_72504:				; XREF: sub_71B4C
000752C4 102E 0006                  		move.b	6(a6),d0
000752C8 6700                       		beq.s	loc_72510
000752CA 532E 0006                  		subq.b	#1,6(a6)
000752CE 4E75                       		rts	
000752D0                            ; ===========================================================================
000752D0                            
000752D0                            loc_72510:
000752D0 532E 0004                  		subq.b	#1,4(a6)
000752D4 6700 0000                  		beq.w	Sound_E4
000752D8 1D7C 0003 0006             		move.b	#3,6(a6)
000752DE 4BEE 0070                  		lea	$70(a6),a5
000752E2 7E05                       		moveq	#5,d7
000752E4                            
000752E4                            loc_72524:
000752E4 4A15                       		tst.b	(a5)
000752E6 6A00                       		bpl.s	loc_72538
000752E8 522D 0009                  		addq.b	#1,9(a5)
000752EC 6A00                       		bpl.s	loc_72534
000752EE 0895 0007                  		bclr	#7,(a5)
000752F2 6000                       		bra.s	loc_72538
000752F4                            ; ===========================================================================
000752F4                            
000752F4                            loc_72534:
000752F4 4EBA 0000                  		jsr	sub_72CB4(pc)
000752F8                            
000752F8                            loc_72538:
000752F8 DAFC 0030                  		adda.w	#$30,a5
000752FC 51CF FFE6                  		dbf	d7,loc_72524
00075300                            
00075300 7E02                       		moveq	#2,d7
00075302                            
00075302                            loc_72542:
00075302 4A15                       		tst.b	(a5)
00075304 6A00                       		bpl.s	loc_72560
00075306 522D 0009                  		addq.b	#1,9(a5)
0007530A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075310 6500                       		bcs.s	loc_72558
00075312 0895 0007                  		bclr	#7,(a5)
00075316 6000                       		bra.s	loc_72560
00075318                            ; ===========================================================================
00075318                            
00075318                            loc_72558:
00075318 1C2D 0009                  		move.b	9(a5),d6
0007531C 4EBA 0000                  		jsr	sub_7296A(pc)
00075320                            
00075320                            loc_72560:
00075320 DAFC 0030                  		adda.w	#$30,a5
00075324 51CF FFDC                  		dbf	d7,loc_72542
00075328                            
00075328 4E75                       		rts	
0007532A                            ; End of function sub_72504
0007532A                            
0007532A                            
0007532A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007532A                            
0007532A                            
0007532A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007532A 7602                       		moveq	#2,d3
0007532C 7028                       		moveq	#$28,d0
0007532E                            
0007532E                            loc_7256E:
0007532E 1203                       		move.b	d3,d1
00075330 4EBA 0000                  		jsr	sub_7272E(pc)
00075334 5801                       		addq.b	#4,d1
00075336 4EBA 0000                  		jsr	sub_7272E(pc)
0007533A 51CB FFF2                  		dbf	d3,loc_7256E
0007533E                            
0007533E 7040                       		moveq	#$40,d0
00075340 727F                       		moveq	#$7F,d1
00075342 7802                       		moveq	#2,d4
00075344                            
00075344                            loc_72584:
00075344 7603                       		moveq	#3,d3
00075346                            
00075346                            loc_72586:
00075346 4EBA 0000                  		jsr	sub_7272E(pc)
0007534A 4EBA 0000                  		jsr	sub_72764(pc)
0007534E 5840                       		addq.w	#4,d0
00075350 51CB FFF4                  		dbf	d3,loc_72586
00075354                            
00075354 0400 000F                  		subi.b	#$F,d0
00075358 51CC FFEA                  		dbf	d4,loc_72584
0007535C                            
0007535C 4E75                       		rts	
0007535E                            ; End of function sub_7256A
0007535E                            
0007535E                            ; ===========================================================================
0007535E                            ; ---------------------------------------------------------------------------
0007535E                            ; Stop music
0007535E                            ; ---------------------------------------------------------------------------
0007535E                            
0007535E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007535E 702B                       		moveq	#$2B,d0
00075360 123C 0080                  		move.b	#$80,d1
00075364 4EBA 0000                  		jsr	sub_7272E(pc)
00075368 7027                       		moveq	#$27,d0
0007536A 7200                       		moveq	#0,d1
0007536C 4EBA 0000                  		jsr	sub_7272E(pc)
00075370 204E                       		movea.l	a6,a0
00075372 303C 00E3                  		move.w	#$E3,d0
00075376                            
00075376                            loc_725B6:
00075376 4298                       		clr.l	(a0)+
00075378 51C8 FFFC                  		dbf	d0,loc_725B6
0007537C                            
0007537C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00075382 4EBA FFA6                  		jsr	sub_7256A(pc)
00075386 6000 0000                  		bra.w	sub_729B6
0007538A                            
0007538A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007538A                            
0007538A                            
0007538A                            sub_725CA:				; XREF: Sound_ChkValue
0007538A 204E                       		movea.l	a6,a0
0007538C 1216                       		move.b	0(a6),d1
0007538E 142E 0027                  		move.b	$27(a6),d2
00075392 162E 002A                  		move.b	$2A(a6),d3
00075396 182E 0026                  		move.b	$26(a6),d4
0007539A 3A2E 000A                  		move.w	$A(a6),d5
0007539E 303C 0087                  		move.w	#$87,d0
000753A2                            
000753A2                            loc_725E4:
000753A2 4298                       		clr.l	(a0)+
000753A4 51C8 FFFC                  		dbf	d0,loc_725E4
000753A8                            
000753A8 1C81                       		move.b	d1,0(a6)
000753AA 1D42 0027                  		move.b	d2,$27(a6)
000753AE 1D43 002A                  		move.b	d3,$2A(a6)
000753B2 1D44 0026                  		move.b	d4,$26(a6)
000753B6 3D45 000A                  		move.w	d5,$A(a6)
000753BA 1D7C 0080 0009             		move.b	#$80,9(a6)
000753C0 4EBA FF68                  		jsr	sub_7256A(pc)
000753C4 6000 0000                  		bra.w	sub_729B6
000753C8                            ; End of function sub_725CA
000753C8                            
000753C8                            
000753C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000753C8                            
000753C8                            
000753C8                            sub_7260C:				; XREF: sub_71B4C
000753C8 1D6E 0002 0001             		move.b	2(a6),1(a6)
000753CE 41EE 004E                  		lea	$4E(a6),a0
000753D2 7030                       		moveq	#$30,d0
000753D4 7209                       		moveq	#9,d1
000753D6                            
000753D6                            loc_7261A:
000753D6 5210                       		addq.b	#1,(a0)
000753D8 D0C0                       		adda.w	d0,a0
000753DA 51C9 FFFA                  		dbf	d1,loc_7261A
000753DE                            
000753DE 4E75                       		rts	
000753E0                            ; End of function sub_7260C
000753E0                            
000753E0                            ; ===========================================================================
000753E0                            ; ---------------------------------------------------------------------------
000753E0                            ; Speed	up music
000753E0                            ; ---------------------------------------------------------------------------
000753E0                            
000753E0                            Sound_E2:				; XREF: Sound_ExIndex
000753E0 4A2E 0027                  		tst.b	$27(a6)
000753E4 6600                       		bne.s	loc_7263E
000753E6 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000753EC 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000753F2 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000753F8 4E75                       		rts	
000753FA                            ; ===========================================================================
000753FA                            
000753FA                            loc_7263E:
000753FA 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00075400 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00075406 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007540C 4E75                       		rts	
0007540E                            ; ===========================================================================
0007540E                            ; ---------------------------------------------------------------------------
0007540E                            ; Change music back to normal speed
0007540E                            ; ---------------------------------------------------------------------------
0007540E                            
0007540E                            Sound_E3:				; XREF: Sound_ExIndex
0007540E 4A2E 0027                  		tst.b	$27(a6)
00075412 6600                       		bne.s	loc_7266A
00075414 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007541A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00075420 422E 002A                  		clr.b	$2A(a6)
00075424 4E75                       		rts	
00075426                            ; ===========================================================================
00075426                            
00075426                            loc_7266A:
00075426 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007542C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00075432 422E 03CA                  		clr.b	$3CA(a6)
00075436 4E75                       		rts	
00075438                            
00075438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075438                            
00075438                            
00075438                            sub_7267C:				; XREF: sub_71B4C
00075438 4A2E 0025                  		tst.b	$25(a6)
0007543C 6700                       		beq.s	loc_72688
0007543E 532E 0025                  		subq.b	#1,$25(a6)
00075442 4E75                       		rts	
00075444                            ; ===========================================================================
00075444                            
00075444                            loc_72688:
00075444 4A2E 0026                  		tst.b	$26(a6)
00075448 6700                       		beq.s	loc_726D6
0007544A 532E 0026                  		subq.b	#1,$26(a6)
0007544E 1D7C 0002 0025             		move.b	#2,$25(a6)
00075454 4BEE 0070                  		lea	$70(a6),a5
00075458 7E05                       		moveq	#5,d7
0007545A                            
0007545A                            loc_7269E:
0007545A 4A15                       		tst.b	(a5)
0007545C 6A00                       		bpl.s	loc_726AA
0007545E 532D 0009                  		subq.b	#1,9(a5)
00075462 4EBA 0000                  		jsr	sub_72CB4(pc)
00075466                            
00075466                            loc_726AA:
00075466 DAFC 0030                  		adda.w	#$30,a5
0007546A 51CF FFEE                  		dbf	d7,loc_7269E
0007546E 7E02                       		moveq	#2,d7
00075470                            
00075470                            loc_726B4:
00075470 4A15                       		tst.b	(a5)
00075472 6A00                       		bpl.s	loc_726CC
00075474 532D 0009                  		subq.b	#1,9(a5)
00075478 1C2D 0009                  		move.b	9(a5),d6
0007547C 0C06 0010                  		cmpi.b	#$10,d6
00075480 6500                       		bcs.s	loc_726C8
00075482 7C0F                       		moveq	#$F,d6
00075484                            
00075484                            loc_726C8:
00075484 4EBA 0000                  		jsr	sub_7296A(pc)
00075488                            
00075488                            loc_726CC:
00075488 DAFC 0030                  		adda.w	#$30,a5
0007548C 51CF FFE2                  		dbf	d7,loc_726B4
00075490 4E75                       		rts	
00075492                            ; ===========================================================================
00075492                            
00075492                            loc_726D6:
00075492 08AE 0002 0040             		bclr	#2,$40(a6)
00075498 422E 0024                  		clr.b	$24(a6)
0007549C 4E75                       		rts	
0007549E                            ; End of function sub_7267C
0007549E                            
0007549E                            ; ===========================================================================
0007549E                            
0007549E                            loc_726E2:				; XREF: sub_71CCA
0007549E 0815 0001                  		btst	#1,(a5)
000754A2 6600                       		bne.s	locret_726FC
000754A4 0815 0002                  		btst	#2,(a5)
000754A8 6600                       		bne.s	locret_726FC
000754AA 7028                       		moveq	#$28,d0
000754AC 122D 0001                  		move.b	1(a5),d1
000754B0 0001 00F0                  		ori.b	#-$10,d1
000754B4 6000 0000                  		bra.w	sub_7272E
000754B8                            ; ===========================================================================
000754B8                            
000754B8                            locret_726FC:
000754B8 4E75                       		rts	
000754BA                            
000754BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000754BA                            
000754BA                            
000754BA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000754BA 0815 0004                  		btst	#4,(a5)
000754BE 6600                       		bne.s	locret_72714
000754C0 0815 0002                  		btst	#2,(a5)
000754C4 6600                       		bne.s	locret_72714
000754C6                            
000754C6                            loc_7270A:				; XREF: Snd_FadeOut2
000754C6 7028                       		moveq	#$28,d0
000754C8 122D 0001                  		move.b	1(a5),d1
000754CC 6000 0000                  		bra.w	sub_7272E
000754D0                            ; ===========================================================================
000754D0                            
000754D0                            locret_72714:
000754D0 4E75                       		rts	
000754D2                            ; End of function sub_726FE
000754D2                            
000754D2                            ; ===========================================================================
000754D2                            
000754D2                            loc_72716:				; XREF: sub_72A5A
000754D2 0815 0002                  		btst	#2,(a5)
000754D6 6600                       		bne.s	locret_72720
000754D8 6000 0000                  		bra.w	sub_72722
000754DC                            ; ===========================================================================
000754DC                            
000754DC                            locret_72720:
000754DC 4E75                       		rts	
000754DE                            
000754DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000754DE                            
000754DE                            
000754DE                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000754DE 082D 0002 0001             		btst	#2,1(a5)
000754E4 6600                       		bne.s	loc_7275A
000754E6 D02D 0001                  		add.b	1(a5),d0
000754EA                            ; End of function sub_72722
000754EA                            
000754EA                            
000754EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000754EA                            
000754EA                            
000754EA                            sub_7272E:				; XREF: loc_71E6A
000754EA 1439 00A0 4000             		move.b	($A04000).l,d2
000754F0 0802 0007                  		btst	#7,d2
000754F4 66F4                       		bne.s	sub_7272E
000754F6 13C0 00A0 4000             		move.b	d0,($A04000).l
000754FC 4E71                       		nop	
000754FE 4E71                       		nop	
00075500 4E71                       		nop	
00075502                            
00075502                            loc_72746:
00075502 1439 00A0 4000             		move.b	($A04000).l,d2
00075508 0802 0007                  		btst	#7,d2
0007550C 66F4                       		bne.s	loc_72746
0007550E                            
0007550E 13C1 00A0 4001             		move.b	d1,($A04001).l
00075514 4E75                       		rts	
00075516                            ; End of function sub_7272E
00075516                            
00075516                            ; ===========================================================================
00075516                            
00075516                            loc_7275A:				; XREF: sub_72722
00075516 142D 0001                  		move.b	1(a5),d2
0007551A 0882 0002                  		bclr	#2,d2
0007551E D002                       		add.b	d2,d0
00075520                            
00075520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075520                            
00075520                            
00075520                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075520 1439 00A0 4000             		move.b	($A04000).l,d2
00075526 0802 0007                  		btst	#7,d2
0007552A 66F4                       		bne.s	sub_72764
0007552C 13C0 00A0 4002             		move.b	d0,($A04002).l
00075532 4E71                       		nop	
00075534 4E71                       		nop	
00075536 4E71                       		nop	
00075538                            
00075538                            loc_7277C:
00075538 1439 00A0 4000             		move.b	($A04000).l,d2
0007553E 0802 0007                  		btst	#7,d2
00075542 66F4                       		bne.s	loc_7277C
00075544                            
00075544 13C1 00A0 4003             		move.b	d1,($A04003).l
0007554A 4E75                       		rts	
0007554C                            ; End of function sub_72764
0007554C                            
0007554C                            ; ===========================================================================
0007554C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007555E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075570 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075580 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00075590 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000755A0 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000755B0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000755C0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000755D0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000755E0 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000755F0 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075600 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007560C                            
0007560C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007560C                            
0007560C                            
0007560C                            sub_72850:				; XREF: sub_71B4C
0007560C 532D 000E                  		subq.b	#1,$E(a5)
00075610 6600                       		bne.s	loc_72866
00075612 0895 0004                  		bclr	#4,(a5)
00075616 4EBA 0000                  		jsr	sub_72878(pc)
0007561A 4EBA 0000                  		jsr	sub_728DC(pc)
0007561E 6000 0000                  		bra.w	loc_7292E
00075622                            ; ===========================================================================
00075622                            
00075622                            loc_72866:
00075622 4EBA F52A                  		jsr	sub_71D9E(pc)
00075626 4EBA 0000                  		jsr	sub_72926(pc)
0007562A 4EBA F54A                  		jsr	sub_71DC6(pc)
0007562E 4EBA 0000                  		jsr	sub_728E2(pc)
00075632 4E75                       		rts	
00075634                            ; End of function sub_72850
00075634                            
00075634                            
00075634                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075634                            
00075634                            
00075634                            sub_72878:				; XREF: sub_72850
00075634 0895 0001                  		bclr	#1,(a5)
00075638 286D 0004                  		movea.l	4(a5),a4
0007563C                            
0007563C                            loc_72880:
0007563C 7A00                       		moveq	#0,d5
0007563E 1A1C                       		move.b	(a4)+,d5
00075640 0C05 00E0                  		cmpi.b	#$E0,d5
00075644 6500                       		bcs.s	loc_72890
00075646 4EBA 0000                  		jsr	sub_72A5A(pc)
0007564A 60F0                       		bra.s	loc_72880
0007564C                            ; ===========================================================================
0007564C                            
0007564C                            loc_72890:
0007564C 4A05                       		tst.b	d5
0007564E 6A00                       		bpl.s	loc_728A4
00075650 4EBA 0000                  		jsr	sub_728AC(pc)
00075654 1A1C                       		move.b	(a4)+,d5
00075656 4A05                       		tst.b	d5
00075658 6A00                       		bpl.s	loc_728A4
0007565A 534C                       		subq.w	#1,a4
0007565C 6000 F4B2                  		bra.w	sub_71D60
00075660                            ; ===========================================================================
00075660                            
00075660                            loc_728A4:
00075660 4EBA F48E                  		jsr	sub_71D40(pc)
00075664 6000 F4AA                  		bra.w	sub_71D60
00075668                            ; End of function sub_72878
00075668                            
00075668                            
00075668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075668                            
00075668                            
00075668                            sub_728AC:				; XREF: sub_72878
00075668 0405 0081                  		subi.b	#$81,d5
0007566C 6500                       		bcs.s	loc_728CA
0007566E DA2D 0008                  		add.b	8(a5),d5
00075672 0245 007F                  		andi.w	#$7F,d5
00075676 E34D                       		lsl.w	#1,d5
00075678 41FA 0000                  		lea	word_729CE(pc),a0
0007567C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075682 6000 F48C                  		bra.w	sub_71D60
00075686                            ; ===========================================================================
00075686                            
00075686                            loc_728CA:
00075686 08D5 0001                  		bset	#1,(a5)
0007568A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075690 4EBA F47E                  		jsr	sub_71D60(pc)
00075694 6000 0000                  		bra.w	sub_729A0
00075698                            ; End of function sub_728AC
00075698                            
00075698                            
00075698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075698                            
00075698                            
00075698                            sub_728DC:				; XREF: sub_72850
00075698 3C2D 0010                  		move.w	$10(a5),d6
0007569C 6B00                       		bmi.s	loc_72920
0007569E                            ; End of function sub_728DC
0007569E                            
0007569E                            
0007569E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007569E                            
0007569E                            
0007569E                            sub_728E2:				; XREF: sub_72850
0007569E 102D 001E                  		move.b	$1E(a5),d0
000756A2 4880                       		ext.w	d0
000756A4 DC40                       		add.w	d0,d6
000756A6 0815 0002                  		btst	#2,(a5)
000756AA 6600                       		bne.s	locret_7291E
000756AC 0815 0001                  		btst	#1,(a5)
000756B0 6600                       		bne.s	locret_7291E
000756B2 102D 0001                  		move.b	1(a5),d0
000756B6 0C00 00E0                  		cmpi.b	#$E0,d0
000756BA 6600                       		bne.s	loc_72904
000756BC 103C 00C0                  		move.b	#$C0,d0
000756C0                            
000756C0                            loc_72904:
000756C0 3206                       		move.w	d6,d1
000756C2 0201 000F                  		andi.b	#$F,d1
000756C6 8001                       		or.b	d1,d0
000756C8 E84E                       		lsr.w	#4,d6
000756CA 0206 003F                  		andi.b	#$3F,d6
000756CE 13C0 00C0 0011             		move.b	d0,($C00011).l
000756D4 13C6 00C0 0011             		move.b	d6,($C00011).l
000756DA                            
000756DA                            locret_7291E:
000756DA 4E75                       		rts	
000756DC                            ; End of function sub_728E2
000756DC                            
000756DC                            ; ===========================================================================
000756DC                            
000756DC                            loc_72920:				; XREF: sub_728DC
000756DC 08D5 0001                  		bset	#1,(a5)
000756E0 4E75                       		rts	
000756E2                            
000756E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756E2                            
000756E2                            
000756E2                            sub_72926:				; XREF: sub_72850
000756E2 4A2D 000B                  		tst.b	$B(a5)
000756E6 6700 0000                  		beq.w	locret_7298A
000756EA                            
000756EA                            loc_7292E:				; XREF: sub_72850
000756EA 1C2D 0009                  		move.b	9(a5),d6
000756EE 7000                       		moveq	#0,d0
000756F0 102D 000B                  		move.b	$B(a5),d0
000756F4 6700                       		beq.s	sub_7296A
000756F6 2079 0007 4754             		movea.l	(Go_PSGIndex).l,a0
000756FC 5340                       		subq.w	#1,d0
000756FE E548                       		lsl.w	#2,d0
00075700 2070 0000                  		movea.l	(a0,d0.w),a0
00075704 102D 000C                  		move.b	$C(a5),d0
00075708 1030 0000                  		move.b	(a0,d0.w),d0
0007570C 522D 000C                  		addq.b	#1,$C(a5)
00075710 0800 0007                  		btst	#7,d0
00075714 6700                       		beq.s	loc_72960
00075716 0C00 0080                  		cmpi.b	#$80,d0
0007571A 6700                       		beq.s	loc_7299A
0007571C                            
0007571C                            loc_72960:
0007571C DC40                       		add.w	d0,d6
0007571E 0C06 0010                  		cmpi.b	#$10,d6
00075722 6500                       		bcs.s	sub_7296A
00075724 7C0F                       		moveq	#$F,d6
00075726                            ; End of function sub_72926
00075726                            
00075726                            
00075726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075726                            
00075726                            
00075726                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075726 0815 0001                  		btst	#1,(a5)
0007572A 6600                       		bne.s	locret_7298A
0007572C 0815 0002                  		btst	#2,(a5)
00075730 6600                       		bne.s	locret_7298A
00075732 0815 0004                  		btst	#4,(a5)
00075736 6600                       		bne.s	loc_7298C
00075738                            
00075738                            loc_7297C:
00075738 8C2D 0001                  		or.b	1(a5),d6
0007573C 0606 0010                  		addi.b	#$10,d6
00075740 13C6 00C0 0011             		move.b	d6,($C00011).l
00075746                            
00075746                            locret_7298A:
00075746 4E75                       		rts	
00075748                            ; ===========================================================================
00075748                            
00075748                            loc_7298C:
00075748 4A2D 0013                  		tst.b	$13(a5)
0007574C 67EA                       		beq.s	loc_7297C
0007574E 4A2D 0012                  		tst.b	$12(a5)
00075752 66E4                       		bne.s	loc_7297C
00075754 4E75                       		rts	
00075756                            ; End of function sub_7296A
00075756                            
00075756                            ; ===========================================================================
00075756                            
00075756                            loc_7299A:				; XREF: sub_72926
00075756 532D 000C                  		subq.b	#1,$C(a5)
0007575A 4E75                       		rts	
0007575C                            
0007575C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007575C                            
0007575C                            
0007575C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007575C 0815 0002                  		btst	#2,(a5)
00075760 6600                       		bne.s	locret_729B4
00075762                            
00075762                            loc_729A6:				; XREF: Snd_FadeOut2
00075762 102D 0001                  		move.b	1(a5),d0
00075766 0000 001F                  		ori.b	#$1F,d0
0007576A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075770                            
00075770                            locret_729B4:
00075770 4E75                       		rts	
00075772                            ; End of function sub_729A0
00075772                            
00075772                            
00075772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075772                            
00075772                            
00075772                            sub_729B6:				; XREF: loc_71E7C
00075772 41F9 00C0 0011             		lea	($C00011).l,a0
00075778 10BC 009F                  		move.b	#$9F,(a0)
0007577C 10BC 00BF                  		move.b	#$BF,(a0)
00075780 10BC 00DF                  		move.b	#$DF,(a0)
00075784 10BC 00FF                  		move.b	#$FF,(a0)
00075788 4E75                       		rts	
0007578A                            ; End of function sub_729B6
0007578A                            
0007578A                            ; ===========================================================================
0007578A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007579C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000757AE 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000757C2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000757D6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000757EA 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000757FE 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075812 0011 0000                  		dc.w $11, 0
00075816                            
00075816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075816                            
00075816                            
00075816                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075816 0445 00E0                  		subi.w	#$E0,d5
0007581A E54D                       		lsl.w	#2,d5
0007581C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075820                            ; End of function sub_72A5A
00075820                            
00075820                            ; ===========================================================================
00075820                            
00075820                            loc_72A64:
00075820 6000 0000                  		bra.w	loc_72ACC
00075824                            ; ===========================================================================
00075824 6000 0000                  		bra.w	loc_72AEC
00075828                            ; ===========================================================================
00075828 6000 0000                  		bra.w	loc_72AF2
0007582C                            ; ===========================================================================
0007582C 6000 0000                  		bra.w	loc_72AF8
00075830                            ; ===========================================================================
00075830 6000 0000                  		bra.w	loc_72B14
00075834                            ; ===========================================================================
00075834 6000 0000                  		bra.w	loc_72B9E
00075838                            ; ===========================================================================
00075838 6000 0000                  		bra.w	loc_72BA4
0007583C                            ; ===========================================================================
0007583C 6000 0000                  		bra.w	loc_72BAE
00075840                            ; ===========================================================================
00075840 6000 0000                  		bra.w	loc_72BB4
00075844                            ; ===========================================================================
00075844 6000 0000                  		bra.w	loc_72BBE
00075848                            ; ===========================================================================
00075848 6000 0000                  		bra.w	loc_72BC6
0007584C                            ; ===========================================================================
0007584C 6000 0000                  		bra.w	loc_72BD0
00075850                            ; ===========================================================================
00075850 6000 0000                  		bra.w	loc_72BE6
00075854                            ; ===========================================================================
00075854 6000 0000                  		bra.w	loc_72BEE
00075858                            ; ===========================================================================
00075858 6000 0000                  		bra.w	loc_72BF4
0007585C                            ; ===========================================================================
0007585C 6000 0000                  		bra.w	loc_72C26
00075860                            ; ===========================================================================
00075860 6000 0000                  		bra.w	loc_72D30
00075864                            ; ===========================================================================
00075864 6000 0000                  		bra.w	loc_72D52
00075868                            ; ===========================================================================
00075868 6000 0000                  		bra.w	loc_72D58
0007586C                            ; ===========================================================================
0007586C 6000 0000                  		bra.w	loc_72E06
00075870                            ; ===========================================================================
00075870 6000 0000                  		bra.w	loc_72E20
00075874                            ; ===========================================================================
00075874 6000 0000                  		bra.w	loc_72E26
00075878                            ; ===========================================================================
00075878 6000 0000                  		bra.w	loc_72E2C
0007587C                            ; ===========================================================================
0007587C 6000 0000                  		bra.w	loc_72E38
00075880                            ; ===========================================================================
00075880 6000 0000                  		bra.w	loc_72E52
00075884                            ; ===========================================================================
00075884 6000 0000                  		bra.w	loc_72E64
00075888                            ; ===========================================================================
00075888                            
00075888                            loc_72ACC:				; XREF: loc_72A64
00075888 121C                       		move.b	(a4)+,d1
0007588A 4A2D 0001                  		tst.b	1(a5)
0007588E 6B00                       		bmi.s	locret_72AEA
00075890 102D 000A                  		move.b	$A(a5),d0
00075894 0200 0037                  		andi.b	#$37,d0
00075898 8200                       		or.b	d0,d1
0007589A 1B41 000A                  		move.b	d1,$A(a5)
0007589E 103C 00B4                  		move.b	#$B4,d0
000758A2 6000 FC2E                  		bra.w	loc_72716
000758A6                            ; ===========================================================================
000758A6                            
000758A6                            locret_72AEA:
000758A6 4E75                       		rts	
000758A8                            ; ===========================================================================
000758A8                            
000758A8                            loc_72AEC:				; XREF: loc_72A64
000758A8 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000758AC 4E75                       		rts	
000758AE                            ; ===========================================================================
000758AE                            
000758AE                            loc_72AF2:				; XREF: loc_72A64
000758AE 1D5C 0007                  		move.b	(a4)+,7(a6)
000758B2 4E75                       		rts	
000758B4                            ; ===========================================================================
000758B4                            
000758B4                            loc_72AF8:				; XREF: loc_72A64
000758B4 7000                       		moveq	#0,d0
000758B6 102D 000D                  		move.b	$D(a5),d0
000758BA 2875 0000                  		movea.l	(a5,d0.w),a4
000758BE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000758C6 544C                       		addq.w	#2,a4
000758C8 5800                       		addq.b	#4,d0
000758CA 1B40 000D                  		move.b	d0,$D(a5)
000758CE 4E75                       		rts	
000758D0                            ; ===========================================================================
000758D0                            
000758D0                            loc_72B14:				; XREF: loc_72A64
000758D0 204E                       		movea.l	a6,a0
000758D2 43EE 03A0                  		lea	$3A0(a6),a1
000758D6 303C 0087                  		move.w	#$87,d0
000758DA                            
000758DA                            loc_72B1E:
000758DA 20D9                       		move.l	(a1)+,(a0)+
000758DC 51C8 FFFC                  		dbf	d0,loc_72B1E
000758E0                            
000758E0 08EE 0002 0040             		bset	#2,$40(a6)
000758E6 264D                       		movea.l	a5,a3
000758E8 1C3C 0028                  		move.b	#$28,d6
000758EC 9C2E 0026                  		sub.b	$26(a6),d6
000758F0 7E05                       		moveq	#5,d7
000758F2 4BEE 0070                  		lea	$70(a6),a5
000758F6                            
000758F6                            loc_72B3A:
000758F6 0815 0007                  		btst	#7,(a5)
000758FA 6700                       		beq.s	loc_72B5C
000758FC 08D5 0001                  		bset	#1,(a5)
00075900 DD2D 0009                  		add.b	d6,9(a5)
00075904 0815 0002                  		btst	#2,(a5)
00075908 6600                       		bne.s	loc_72B5C
0007590A 7000                       		moveq	#0,d0
0007590C 102D 000B                  		move.b	$B(a5),d0
00075910 226E 0018                  		movea.l	$18(a6),a1
00075914 4EBA 0000                  		jsr	sub_72C4E(pc)
00075918                            
00075918                            loc_72B5C:
00075918 DAFC 0030                  		adda.w	#$30,a5
0007591C 51CF FFD8                  		dbf	d7,loc_72B3A
00075920                            
00075920 7E02                       		moveq	#2,d7
00075922                            
00075922                            loc_72B66:
00075922 0815 0007                  		btst	#7,(a5)
00075926 6700                       		beq.s	loc_72B78
00075928 08D5 0001                  		bset	#1,(a5)
0007592C 4EBA FE2E                  		jsr	sub_729A0(pc)
00075930 DD2D 0009                  		add.b	d6,9(a5)
00075934                            
00075934                            loc_72B78:
00075934 DAFC 0030                  		adda.w	#$30,a5
00075938 51CF FFE8                  		dbf	d7,loc_72B66
0007593C 2A4B                       		movea.l	a3,a5
0007593E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075944 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007594A 422E 0027                  		clr.b	$27(a6)
0007594E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075956 504F                       		addq.w	#8,sp
00075958 4E75                       		rts	
0007595A                            ; ===========================================================================
0007595A                            
0007595A                            loc_72B9E:				; XREF: loc_72A64
0007595A 1B5C 0002                  		move.b	(a4)+,2(a5)
0007595E 4E75                       		rts	
00075960                            ; ===========================================================================
00075960                            
00075960                            loc_72BA4:				; XREF: loc_72A64
00075960 101C                       		move.b	(a4)+,d0
00075962 D12D 0009                  		add.b	d0,9(a5)
00075966 6000 0000                  		bra.w	sub_72CB4
0007596A                            ; ===========================================================================
0007596A                            
0007596A                            loc_72BAE:				; XREF: loc_72A64
0007596A 08D5 0004                  		bset	#4,(a5)
0007596E 4E75                       		rts	
00075970                            ; ===========================================================================
00075970                            
00075970                            loc_72BB4:				; XREF: loc_72A64
00075970 1B54 0012                  		move.b	(a4),$12(a5)
00075974 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075978 4E75                       		rts	
0007597A                            ; ===========================================================================
0007597A                            
0007597A                            loc_72BBE:				; XREF: loc_72A64
0007597A 101C                       		move.b	(a4)+,d0
0007597C D12D 0008                  		add.b	d0,8(a5)
00075980 4E75                       		rts	
00075982                            ; ===========================================================================
00075982                            
00075982                            loc_72BC6:				; XREF: loc_72A64
00075982 1D54 0002                  		move.b	(a4),2(a6)
00075986 1D5C 0001                  		move.b	(a4)+,1(a6)
0007598A 4E75                       		rts	
0007598C                            ; ===========================================================================
0007598C                            
0007598C                            loc_72BD0:				; XREF: loc_72A64
0007598C 41EE 0040                  		lea	$40(a6),a0
00075990 101C                       		move.b	(a4)+,d0
00075992 7230                       		moveq	#$30,d1
00075994 7409                       		moveq	#9,d2
00075996                            
00075996                            loc_72BDA:
00075996 1140 0002                  		move.b	d0,2(a0)
0007599A D0C1                       		adda.w	d1,a0
0007599C 51CA FFF8                  		dbf	d2,loc_72BDA
000759A0                            
000759A0 4E75                       		rts	
000759A2                            ; ===========================================================================
000759A2                            
000759A2                            loc_72BE6:				; XREF: loc_72A64
000759A2 101C                       		move.b	(a4)+,d0
000759A4 D12D 0009                  		add.b	d0,9(a5)
000759A8 4E75                       		rts	
000759AA                            ; ===========================================================================
000759AA                            
000759AA                            loc_72BEE:				; XREF: loc_72A64
000759AA 422E 002C                  		clr.b	$2C(a6)
000759AE 4E75                       		rts	
000759B0                            ; ===========================================================================
000759B0                            
000759B0                            loc_72BF4:				; XREF: loc_72A64
000759B0 0895 0007                  		bclr	#7,(a5)
000759B4 0895 0004                  		bclr	#4,(a5)
000759B8 4EBA FB00                  		jsr	sub_726FE(pc)
000759BC 4A2E 0250                  		tst.b	$250(a6)
000759C0 6B00                       		bmi.s	loc_72C22
000759C2 264D                       		movea.l	a5,a3
000759C4 4BEE 0100                  		lea	$100(a6),a5
000759C8 226E 0018                  		movea.l	$18(a6),a1
000759CC 0895 0002                  		bclr	#2,(a5)
000759D0 08D5 0001                  		bset	#1,(a5)
000759D4 102D 000B                  		move.b	$B(a5),d0
000759D8 4EBA 0000                  		jsr	sub_72C4E(pc)
000759DC 2A4B                       		movea.l	a3,a5
000759DE                            
000759DE                            loc_72C22:
000759DE 504F                       		addq.w	#8,sp
000759E0 4E75                       		rts	
000759E2                            ; ===========================================================================
000759E2                            
000759E2                            loc_72C26:				; XREF: loc_72A64
000759E2 7000                       		moveq	#0,d0
000759E4 101C                       		move.b	(a4)+,d0
000759E6 1B40 000B                  		move.b	d0,$B(a5)
000759EA 0815 0002                  		btst	#2,(a5)
000759EE 6600 0000                  		bne.w	locret_72CAA
000759F2 226E 0018                  		movea.l	$18(a6),a1
000759F6 4A2E 000E                  		tst.b	$E(a6)
000759FA 6700                       		beq.s	sub_72C4E
000759FC 226D 0020                  		movea.l	$20(a5),a1
00075A00 4A2E 000E                  		tst.b	$E(a6)
00075A04 6B00                       		bmi.s	sub_72C4E
00075A06 226E 0020                  		movea.l	$20(a6),a1
00075A0A                            
00075A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A0A                            
00075A0A                            
00075A0A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075A0A 5340                       		subq.w	#1,d0
00075A0C 6B00                       		bmi.s	loc_72C5C
00075A0E 323C 0019                  		move.w	#$19,d1
00075A12                            
00075A12                            loc_72C56:
00075A12 D2C1                       		adda.w	d1,a1
00075A14 51C8 FFFC                  		dbf	d0,loc_72C56
00075A18                            
00075A18                            loc_72C5C:
00075A18 1219                       		move.b	(a1)+,d1
00075A1A 1B41 001F                  		move.b	d1,$1F(a5)
00075A1E 1801                       		move.b	d1,d4
00075A20 103C 00B0                  		move.b	#$B0,d0
00075A24 4EBA FAB8                  		jsr	sub_72722(pc)
00075A28 45FA 0000                  		lea	byte_72D18(pc),a2
00075A2C 7613                       		moveq	#$13,d3
00075A2E                            
00075A2E                            loc_72C72:
00075A2E 101A                       		move.b	(a2)+,d0
00075A30 1219                       		move.b	(a1)+,d1
00075A32 4EBA FAAA                  		jsr	sub_72722(pc)
00075A36 51CB FFF6                  		dbf	d3,loc_72C72
00075A3A 7A03                       		moveq	#3,d5
00075A3C 0244 0007                  		andi.w	#7,d4
00075A40 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075A44 162D 0009                  		move.b	9(a5),d3
00075A48                            
00075A48                            loc_72C8C:
00075A48 101A                       		move.b	(a2)+,d0
00075A4A 1219                       		move.b	(a1)+,d1
00075A4C E20C                       		lsr.b	#1,d4
00075A4E 6400                       		bcc.s	loc_72C96
00075A50 D203                       		add.b	d3,d1
00075A52                            
00075A52                            loc_72C96:
00075A52 4EBA FA8A                  		jsr	sub_72722(pc)
00075A56 51CD FFF0                  		dbf	d5,loc_72C8C
00075A5A 103C 00B4                  		move.b	#$B4,d0
00075A5E 122D 000A                  		move.b	$A(a5),d1
00075A62 4EBA FA7A                  		jsr	sub_72722(pc)
00075A66                            
00075A66                            locret_72CAA:
00075A66 4E75                       		rts	
00075A68                            ; End of function sub_72C4E
00075A68                            
00075A68                            ; ===========================================================================
00075A68 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075A70                            
00075A70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A70                            
00075A70                            
00075A70                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075A70 0815 0002                  		btst	#2,(a5)
00075A74 6600                       		bne.s	locret_72D16
00075A76 7000                       		moveq	#0,d0
00075A78 102D 000B                  		move.b	$B(a5),d0
00075A7C 226E 0018                  		movea.l	$18(a6),a1
00075A80 4A2E 000E                  		tst.b	$E(a6)
00075A84 6700                       		beq.s	loc_72CD8
00075A86 226E 0020                  		movea.l	$20(a6),a1
00075A8A 4A2E 000E                  		tst.b	$E(a6)
00075A8E 6B00                       		bmi.s	loc_72CD8
00075A90 226E 0020                  		movea.l	$20(a6),a1
00075A94                            
00075A94                            loc_72CD8:
00075A94 5340                       		subq.w	#1,d0
00075A96 6B00                       		bmi.s	loc_72CE6
00075A98 323C 0019                  		move.w	#$19,d1
00075A9C                            
00075A9C                            loc_72CE0:
00075A9C D2C1                       		adda.w	d1,a1
00075A9E 51C8 FFFC                  		dbf	d0,loc_72CE0
00075AA2                            
00075AA2                            loc_72CE6:
00075AA2 D2FC 0015                  		adda.w	#$15,a1
00075AA6 45FA 0000                  		lea	byte_72D2C(pc),a2
00075AAA 102D 001F                  		move.b	$1F(a5),d0
00075AAE 0240 0007                  		andi.w	#7,d0
00075AB2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00075AB6 162D 0009                  		move.b	9(a5),d3
00075ABA 6B00                       		bmi.s	locret_72D16
00075ABC 7A03                       		moveq	#3,d5
00075ABE                            
00075ABE                            loc_72D02:
00075ABE 101A                       		move.b	(a2)+,d0
00075AC0 1219                       		move.b	(a1)+,d1
00075AC2 E20C                       		lsr.b	#1,d4
00075AC4 6400                       		bcc.s	loc_72D12
00075AC6 D203                       		add.b	d3,d1
00075AC8 6500                       		bcs.s	loc_72D12
00075ACA 4EBA FA12                  		jsr	sub_72722(pc)
00075ACE                            
00075ACE                            loc_72D12:
00075ACE 51CD FFEE                  		dbf	d5,loc_72D02
00075AD2                            
00075AD2                            locret_72D16:
00075AD2 4E75                       		rts	
00075AD4                            ; End of function sub_72CB4
00075AD4                            
00075AD4                            ; ===========================================================================
00075AD4 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00075ADE 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00075AE8 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00075AEC                            ; ===========================================================================
00075AEC                            
00075AEC                            loc_72D30:				; XREF: loc_72A64
00075AEC 08D5 0003                  		bset	#3,(a5)
00075AF0 2B4C 0014                  		move.l	a4,$14(a5)
00075AF4 1B5C 0018                  		move.b	(a4)+,$18(a5)
00075AF8 1B5C 0019                  		move.b	(a4)+,$19(a5)
00075AFC 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00075B00 101C                       		move.b	(a4)+,d0
00075B02 E208                       		lsr.b	#1,d0
00075B04 1B40 001B                  		move.b	d0,$1B(a5)
00075B08 426D 001C                  		clr.w	$1C(a5)
00075B0C 4E75                       		rts	
00075B0E                            ; ===========================================================================
00075B0E                            
00075B0E                            loc_72D52:				; XREF: loc_72A64
00075B0E 08D5 0003                  		bset	#3,(a5)
00075B12 4E75                       		rts	
00075B14                            ; ===========================================================================
00075B14                            
00075B14                            loc_72D58:				; XREF: loc_72A64
00075B14 0895 0007                  		bclr	#7,(a5)
00075B18 0895 0004                  		bclr	#4,(a5)
00075B1C 4A2D 0001                  		tst.b	1(a5)
00075B20 6B00                       		bmi.s	loc_72D74
00075B22 4A2E 0008                  		tst.b	8(a6)
00075B26 6B00 0000                  		bmi.w	loc_72E02
00075B2A 4EBA F98E                  		jsr	sub_726FE(pc)
00075B2E 6000                       		bra.s	loc_72D78
00075B30                            ; ===========================================================================
00075B30                            
00075B30                            loc_72D74:
00075B30 4EBA FC2A                  		jsr	sub_729A0(pc)
00075B34                            
00075B34                            loc_72D78:
00075B34 4A2E 000E                  		tst.b	$E(a6)
00075B38 6A00 0000                  		bpl.w	loc_72E02
00075B3C 4216                       		clr.b	0(a6)
00075B3E 7000                       		moveq	#0,d0
00075B40 102D 0001                  		move.b	1(a5),d0
00075B44 6B00                       		bmi.s	loc_72DCC
00075B46 41FA F546                  		lea	dword_722CC(pc),a0
00075B4A 264D                       		movea.l	a5,a3
00075B4C 0C00 0004                  		cmpi.b	#4,d0
00075B50 6600                       		bne.s	loc_72DA8
00075B52 4A2E 0340                  		tst.b	$340(a6)
00075B56 6A00                       		bpl.s	loc_72DA8
00075B58 4BEE 0340                  		lea	$340(a6),a5
00075B5C 226E 0020                  		movea.l	$20(a6),a1
00075B60 6000                       		bra.s	loc_72DB8
00075B62                            ; ===========================================================================
00075B62                            
00075B62                            loc_72DA8:
00075B62 5500                       		subq.b	#2,d0
00075B64 E508                       		lsl.b	#2,d0
00075B66 2A70 0000                  		movea.l	(a0,d0.w),a5
00075B6A 4A15                       		tst.b	(a5)
00075B6C 6A00                       		bpl.s	loc_72DC8
00075B6E 226E 0018                  		movea.l	$18(a6),a1
00075B72                            
00075B72                            loc_72DB8:
00075B72 0895 0002                  		bclr	#2,(a5)
00075B76 08D5 0001                  		bset	#1,(a5)
00075B7A 102D 000B                  		move.b	$B(a5),d0
00075B7E 4EBA FE8A                  		jsr	sub_72C4E(pc)
00075B82                            
00075B82                            loc_72DC8:
00075B82 2A4B                       		movea.l	a3,a5
00075B84 6000                       		bra.s	loc_72E02
00075B86                            ; ===========================================================================
00075B86                            
00075B86                            loc_72DCC:
00075B86 41EE 0370                  		lea	$370(a6),a0
00075B8A 4A10                       		tst.b	(a0)
00075B8C 6A00                       		bpl.s	loc_72DE0
00075B8E 0C00 00E0                  		cmpi.b	#$E0,d0
00075B92 6700                       		beq.s	loc_72DEA
00075B94 0C00 00C0                  		cmpi.b	#$C0,d0
00075B98 6700                       		beq.s	loc_72DEA
00075B9A                            
00075B9A                            loc_72DE0:
00075B9A 41FA F4F2                  		lea	dword_722CC(pc),a0
00075B9E E608                       		lsr.b	#3,d0
00075BA0 2070 0000                  		movea.l	(a0,d0.w),a0
00075BA4                            
00075BA4                            loc_72DEA:
00075BA4 0890 0002                  		bclr	#2,(a0)
00075BA8 08D0 0001                  		bset	#1,(a0)
00075BAC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075BB2 6600                       		bne.s	loc_72E02
00075BB4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075BBC                            
00075BBC                            loc_72E02:
00075BBC 504F                       		addq.w	#8,sp
00075BBE 4E75                       		rts	
00075BC0                            ; ===========================================================================
00075BC0                            
00075BC0                            loc_72E06:				; XREF: loc_72A64
00075BC0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00075BC6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00075BCA 0815 0002                  		btst	#2,(a5)
00075BCE 6600                       		bne.s	locret_72E1E
00075BD0 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00075BD8                            
00075BD8                            locret_72E1E:
00075BD8 4E75                       		rts	
00075BDA                            ; ===========================================================================
00075BDA                            
00075BDA                            loc_72E20:				; XREF: loc_72A64
00075BDA 0895 0003                  		bclr	#3,(a5)
00075BDE 4E75                       		rts	
00075BE0                            ; ===========================================================================
00075BE0                            
00075BE0                            loc_72E26:				; XREF: loc_72A64
00075BE0 1B5C 000B                  		move.b	(a4)+,$B(a5)
00075BE4 4E75                       		rts	
00075BE6                            ; ===========================================================================
00075BE6                            
00075BE6                            loc_72E2C:				; XREF: loc_72A64
00075BE6 101C                       		move.b	(a4)+,d0
00075BE8 E148                       		lsl.w	#8,d0
00075BEA 101C                       		move.b	(a4)+,d0
00075BEC D8C0                       		adda.w	d0,a4
00075BEE 534C                       		subq.w	#1,a4
00075BF0 4E75                       		rts	
00075BF2                            ; ===========================================================================
00075BF2                            
00075BF2                            loc_72E38:				; XREF: loc_72A64
00075BF2 7000                       		moveq	#0,d0
00075BF4 101C                       		move.b	(a4)+,d0
00075BF6 121C                       		move.b	(a4)+,d1
00075BF8 4A35 0024                  		tst.b	$24(a5,d0.w)
00075BFC 6600                       		bne.s	loc_72E48
00075BFE 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00075C02                            
00075C02                            loc_72E48:
00075C02 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00075C06 66DE                       		bne.s	loc_72E2C
00075C08 544C                       		addq.w	#2,a4
00075C0A 4E75                       		rts	
00075C0C                            ; ===========================================================================
00075C0C                            
00075C0C                            loc_72E52:				; XREF: loc_72A64
00075C0C 7000                       		moveq	#0,d0
00075C0E 102D 000D                  		move.b	$D(a5),d0
00075C12 5900                       		subq.b	#4,d0
00075C14 2B8C 0000                  		move.l	a4,(a5,d0.w)
00075C18 1B40 000D                  		move.b	d0,$D(a5)
00075C1C 60C8                       		bra.s	loc_72E2C
00075C1E                            ; ===========================================================================
00075C1E                            
00075C1E                            loc_72E64:				; XREF: loc_72A64
00075C1E 103C 0088                  		move.b	#$88,d0
00075C22 123C 000F                  		move.b	#$F,d1
00075C26 4EBA F8C2                  		jsr	sub_7272E(pc)
00075C2A 103C 008C                  		move.b	#$8C,d0
00075C2E 123C 000F                  		move.b	#$F,d1
00075C32 6000 F8B6                  		bra.w	sub_7272E
00075C36                            ; ===========================================================================
00075C36                            Kos_Z80:	incbin	sound\z80_1.bin
00075CE6 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00075CE8 21                         		dc.b $21
00075CE9 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00075CEB                            		incbin	sound\z80_2.bin
00077396                            		even
00077396                            Music81:	incbin	sound\music81.bin
00077AFE                            		even
00077AFE                            Music82:	incbin	sound\music82.bin
00077F4E                            		even
00077F4E                            Music83:	incbin	sound\music83.bin
000783AC                            		even
000783AC                            Music84:	incbin	sound\music84.bin
0007881A                            		even
0007881A                            Music85:	incbin	sound\music85.bin
00078C66                            		even
00078C66                            Music86:	incbin	sound\music86.bin
000791B6                            		even
000791B6                            Music87:	incbin	sound\music87.bin
0007939C                            		even
0007939C                            Music88:	incbin	sound\music88.bin
0007948A                            		even
0007948A                            Music89:	incbin	sound\music89.bin
000797B6                            		even
000797B6                            Music8A:	incbin	sound\music8A.bin
00079962                            		even
00079962                            Music8B:	incbin	sound\music8B.bin
00079BFC                            		even
00079BFC                            Music8C:	incbin	sound\music8C.bin
00079E18                            		even
00079E18                            Music8D:	incbin	sound\music8D.bin
0007A034                            		even
0007A034                            Music8E:	incbin	sound\music8E.bin
0007A18A                            		even
0007A18A                            Music8F:	incbin	sound\music8F.bin
0007A2DA                            		even
0007A2DA                            Music90:	incbin	sound\music90.bin
0007A438                            		even
0007A438                            Music91:	incbin	sound\music91.bin
0007B706                            		even
0007B706                            Music92:	incbin	sound\music92.bin
0007B830                            		even
0007B830                            Music93:	incbin	sound\music93.bin
0007B8FE                            		even
0007B8FE                            ; ---------------------------------------------------------------------------
0007B8FE                            ; Sound	effect pointers
0007B8FE                            ; ---------------------------------------------------------------------------
0007B8FE 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0007B90A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0007B916 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0007B922 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0007B92E 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0007B93A 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0007B946 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0007B952 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0007B95E 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0007B96A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0007B976 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0007B982 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0007B98E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0007B99A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0007B9A6 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0007B9B2 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0007B9BE 0000 0000                  SoundD0Index:	dc.l SoundD0
0007B9C2                            SoundA0:	incbin	sound\soundA0.bin
0007B9D8                            		even
0007B9D8                            SoundA1:	incbin	sound\soundA1.bin
0007BA02                            		even
0007BA02                            SoundA2:	incbin	sound\soundA2.bin
0007BA22                            		even
0007BA22                            SoundA3:	incbin	sound\soundA3.bin
0007BA54                            		even
0007BA54                            SoundA4:	incbin	sound\soundA4.bin
0007BA8A                            		even
0007BA8A                            SoundA5:	incbin	sound\soundA5.bin
0007BAB6                            		even
0007BAB6                            SoundA6:	incbin	sound\soundA6.bin
0007BAE6                            		even
0007BAE6                            SoundA7:	incbin	sound\soundA7.bin
0007BB16                            		even
0007BB16                            SoundA8:	incbin	sound\soundA8.bin
0007BB4A                            		even
0007BB4A                            SoundA9:	incbin	sound\soundA9.bin
0007BB5C                            		even
0007BB5C                            SoundAA:	incbin	sound\soundAA.bin
0007BB9E                            		even
0007BB9E                            SoundAB:	incbin	sound\soundAB.bin
0007BBBE                            		even
0007BBBE                            SoundAC:	incbin	sound\soundAC.bin
0007BBF2                            		even
0007BBF2                            SoundAD:	incbin	sound\soundAD.bin
0007BC28                            		even
0007BC28                            SoundAE:	incbin	sound\soundAE.bin
0007BC72                            		even
0007BC72                            SoundAF:	incbin	sound\soundAF.bin
0007BCA0                            		even
0007BCA0                            SoundB0:	incbin	sound\soundB0.bin
0007BCD2                            		even
0007BCD2                            SoundB1:	incbin	sound\soundB1.bin
0007BCFE                            		even
0007BCFE                            SoundB2:	incbin	sound\soundB2.bin
0007BD4E                            		even
0007BD4E                            SoundB3:	incbin	sound\soundB3.bin
0007BD98                            		even
0007BD98                            SoundB4:	incbin	sound\soundB4.bin
0007BDF4                            		even
0007BDF4                            SoundB5:	incbin	sound\soundB5.bin
0007BE22                            		even
0007BE22                            SoundB6:	incbin	sound\soundB6.bin
0007BE40                            		even
0007BE40                            SoundB7:	incbin	sound\soundB7.bin
0007BE7C                            		even
0007BE7C                            SoundB8:	incbin	sound\soundB8.bin
0007BE9A                            		even
0007BE9A                            SoundB9:	incbin	sound\soundB9.bin
0007BEFE                            		even
0007BEFE                            SoundBA:	incbin	sound\soundBA.bin
0007BF26                            		even
0007BF26                            SoundBB:	incbin	sound\soundBB.bin
0007BF52                            		even
0007BF52                            SoundBC:	incbin	sound\soundBC.bin
0007BF94                            		even
0007BF94                            SoundBD:	incbin	sound\soundBD.bin
0007BFE8                            		even
0007BFE8                            SoundBE:	incbin	sound\soundBE.bin
0007C022                            		even
0007C022                            SoundBF:	incbin	sound\soundBF.bin
0007C094                            		even
0007C094                            SoundC0:	incbin	sound\soundC0.bin
0007C0C2                            		even
0007C0C2                            SoundC1:	incbin	sound\soundC1.bin
0007C0FC                            		even
0007C0FC                            SoundC2:	incbin	sound\soundC2.bin
0007C126                            		even
0007C126                            SoundC3:	incbin	sound\soundC3.bin
0007C1A0                            		even
0007C1A0                            SoundC4:	incbin	sound\soundC4.bin
0007C1C8                            		even
0007C1C8                            SoundC5:	incbin	sound\soundC5.bin
0007C230                            		even
0007C230                            SoundC6:	incbin	sound\soundC6.bin
0007C272                            		even
0007C272                            SoundC7:	incbin	sound\soundC7.bin
0007C2A0                            		even
0007C2A0                            SoundC8:	incbin	sound\soundC8.bin
0007C2B2                            		even
0007C2B2                            SoundC9:	incbin	sound\soundC9.bin
0007C2E0                            		even
0007C2E0                            SoundCA:	incbin	sound\soundCA.bin
0007C30E                            		even
0007C30E                            SoundCB:	incbin	sound\soundCB.bin
0007C35A                            		even
0007C35A                            SoundCC:	incbin	sound\soundCC.bin
0007C394                            		even
0007C394                            SoundCD:	incbin	sound\soundCD.bin
0007C3A2                            		even
0007C3A2                            SoundCE:	incbin	sound\soundCE.bin
0007C3D0                            		even
0007C3D0                            SoundCF:	incbin	sound\soundCF.bin
0007C408                            		even
0007C408                            SoundD0:	incbin	sound\soundD0.bin
0007C442                            		even
0007C442                            SegaPCM:	incbin	sound\segapcm.bin
000818BC 00                         SegaPCM_end:	even
000818BC                            
000818BC                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
00087B20                                        even
00087B20                            
00087B20                            ; ===============================================================
00087B20                            ; ---------------------------------------------------------------
00087B20                            ; Error handling module
00087B20                            ; ---------------------------------------------------------------
00087B20                            
00087B20 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
00087B24 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
00087B2E 01                         		dc.b	1				; extended stack frame
00087B30 00                         		even
00087B30                            
00087B30 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
00087B34 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
00087B42 01                         		dc.b	1				; extended stack frame
00087B44 00                         		even
00087B44                            
00087B44 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
00087B48 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
00087B5C 00                         		dc.b	0				; extended stack frame
00087B5E 00                         		even
00087B5E                            
00087B5E 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
00087B62 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
00087B6E 00                         		dc.b	0				; extended stack frame
00087B70 00                         		even
00087B70                            
00087B70 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
00087B74 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
00087B84 00                         		dc.b	0				; extended stack frame
00087B86 00                         		even
00087B86                            
00087B86 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
00087B8A 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
00087B9C 00                         		dc.b	0				; extended stack frame
00087B9E 00                         		even
00087B9E                            
00087B9E 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
00087BA2 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
00087BB6 00                         		dc.b	0				; extended stack frame
00087BB8 00                         		even
00087BB8                            
00087BB8 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
00087BBC 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
00087BC2 00                         		dc.b	0				; extended stack frame
00087BC4 00                         		even
00087BC4                            
00087BC4 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
00087BC8 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
00087BDB 00                         		dc.b	0				; extended stack frame
00087BDC                            		even
00087BDC                            
00087BDC 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
00087BE0 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
00087BF3 00                         		dc.b	0				; extended stack frame
00087BF4                            		even
00087BF4                            
00087BF4 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
00087BF8 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
00087C08 00                         		dc.b	0				; extended stack frame
00087C0A 00                         		even
00087C0A                            
00087C0A                            ErrorHandler:	incbin	"ErrorHandler.bin"
0008961E                            
0008961E                            ; end of 'ROM'
0008961E                            EndOfRom:
0008961E                            
0008961E                            
