00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            		include	"Equates.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Equates
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =FFFFFF90                  HBlankRAM	=	$FFFFFF90		; word	; jmp $00000000
00000000 =FFFFFF92                  HBlankRout	=	HBlankRAM+$02		; long	; ''
00000000 =FFFFFF96                  VBlankRAM	=	HBlankRout+$04		; word	; jmp $00000000
00000000 =FFFFFF98                  VBlankRout	=	VBlankRAM+$02		; long	; ''
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000018                  Z80E_Read = $18 
00000000 =000000DD                  x = $DD 
00000000 =000000FD                  y = $FD 
00000000 =00000000                  ldin = $0 
00000000 =00000000                  deci = $0 
00000000 =00000000                  inci = $0 
00000000 =00000000                  M_Read = $0 
00000000 =00000000                  M_CapPCM = $0 
00000000 =00000000                  M_Flush01 = $0 
00000000 =00000000                  M_Flush02 = $0 
00000000 =00000000                  M_Revert01 = $0 
00000000 =00000000                  M_Revert02 = $0 
00000000 =00000000                  M_Wrap = $0 
00000000 =00000000                  M_WrapCondition = $0 
00000000 =00000000                  Z80_Start = $0 
00000000 =00000010                  Z80_Stack = $10 
00000000 =00000010                  BreakLate = $10 
00000000 =00000028                  PCM1_ResetJmp = $28 
00000000 =00000030                  PCM2_ResetJmp = $30 
00000000 =00000038                  BreakVBlank = $38 
00000000 =00000040                  BVB_Check = $40 
00000000 =00000046                  BreakPrep = $46 
00000000 =00000063                  BreakDMA = $63 
00000000 =00000074                  BDMA_NoExchange = $74 
00000000 =00000082                  BDMA_NoFixVolume = $82 
00000000 =00000083                  BDMA_NoFixFlush = $83 
00000000 =00000084                  BDMA_ReadSet = $84 
00000000 =00000084                  BreakBank = $84 
00000000 =00000090                  BDMA_NoMax = $90 
00000000 =0000009A                  BDMA_FlushLoop = $9A 
00000000 =0000009A                  Z80_VBlank2 = $9A 
00000000 =0000009E                  BDMA_Flush02 = $9E 
00000000 =000000B3                  Z80_VBlank1 = $B3 
00000000 =000000B7                  BDMA_Flush01 = $B7 
00000000 =00000107                  BDMA_NoRestore = $107 
00000000 =00000107                  YM_FlushTimer = $107 
00000000 =00000116                  YMF_Buff1 = $116 
00000000 =00000120                  YM_Flush = $120 
00000000 =00000123                  YMF_NextByte = $123 
00000000 =00000142                  Z80_DelayYM1 = $142 
00000000 =00000169                  Z80_DelayYM2 = $169 
00000000 =00000189                  YMF_Finish02 = $189 
00000000 =0000018E                  Z80_DelayYM3 = $18E 
00000000 =00000192                  YMF_Finish01 = $192 
00000000 =00000197                  Z80_DelayYM4 = $197 
00000000 =0000019B                  PCM_Flush_exx = $19B 
00000000 =0000019C                  PCM_Flush = $19C 
00000000 =0000019F                  PCM_NextByte = $19F 
00000000 =000001B3                  Z80_DelayEnd1 = $1B3 
00000000 =000001B5                  YMF_Enter02 = $1B5 
00000000 =000001CC                  Z80_DelayEnd2 = $1CC 
00000000 =000001CE                  YMF_Enter01 = $1CE 
00000000 =000001F6                  YMF_SetBuff1 = $1F6 
00000000 =00000202                  VB_PCM1_VolOK = $202 
00000000 =0000020C                  VB_PCM2_VolOK = $20C 
00000000 =0000020D                  PCM_VolChangeDel = $20D 
00000000 =00000218                  PCM1_VolumeNext = $218 
00000000 =0000021D                  PCM2_VolumeNext = $21D 
00000000 =00000222                  PCM_VolChangeNo = $222 
00000000 =00000229                  Z80_Int1 = $229 
00000000 =0000022D                  Z80_Init = $22D 
00000000 =00000291                  CatchUp = $291 
00000000 =00000292                  CatchUp_Exx = $292 
00000000 =000002A6                  Z80_Int2 = $2A6 
00000000 =000002A7                  PCM1_MuteRet = $2A7 
00000000 =000002AC                  Int1_nop = $2AC 
00000000 =000002AD                  PCM1_Switch = $2AD 
00000000 =000002B8                  PCM1_OverflwCur = $2B8 
00000000 =000002C1                  PCM1_OverflwDiv = $2C1 
00000000 =000002DF                  Int1_lda = $2DF 
00000000 =000002E4                  PCM1_PrepRet = $2E4 
00000000 =000002E4                  PCM1_SampCur = $2E4 
00000000 =000002E7                  PCM1_Buffer = $2E7 
00000000 =000002EA                  PCM1_PitchQuo = $2EA 
00000000 =000002ED                  PCM1_PitchDiv = $2ED 
00000000 =000002F0                  PCM1_PitchCur = $2F0 
00000000 =000002F2                  PCM1_PreInst01 = $2F2 
00000000 =000002F7                  PCM1_PreInst02 = $2F7 
00000000 =000002FC                  PCM1_PreInst03 = $2FC 
00000000 =00000318                  PCM1_PreInst04 = $318 
00000000 =0000031D                  PCM1_PreInst05 = $31D 
00000000 =00000322                  PCM1_PreInst06 = $322 
00000000 =00000327                  PCM1_PreInst07 = $327 
00000000 =00000343                  PCM1_PreInst08 = $343 
00000000 =00000348                  PCM1_PreInst09 = $348 
00000000 =0000034D                  PCM1_PreInst0A = $34D 
00000000 =00000352                  PCM1_PreInst0B = $352 
00000000 =00000357                  PCM1_PreInst0C = $357 
00000000 =00000373                  PCM1_PreInst0D = $373 
00000000 =00000378                  PCM1_PreInst0E = $378 
00000000 =0000037D                  PCM1_PreInst0F = $37D 
00000000 =00000382                  PCM1_PreInst10 = $382 
00000000 =0000039E                  PCM1_PreInst11 = $39E 
00000000 =000003A3                  PCM1_PreInst12 = $3A3 
00000000 =000003A8                  PCM1_PreInst13 = $3A8 
00000000 =000003AD                  PCM1_PreInst14 = $3AD 
00000000 =000003B2                  PCM1_PreInst15 = $3B2 
00000000 =000003CE                  PCM1_PreInst16 = $3CE 
00000000 =000003D3                  PCM1_PreInst17 = $3D3 
00000000 =000003D8                  PCM1_PreInst18 = $3D8 
00000000 =00000403                  PCM2_MuteRet = $403 
00000000 =00000408                  Int2_nop = $408 
00000000 =00000409                  PCM2_Switch = $409 
00000000 =00000414                  PCM2_OverflwCur = $414 
00000000 =00000432                  PCM2_OverflwDiv = $432 
00000000 =0000043B                  Int2_lda = $43B 
00000000 =00000440                  PCM2_PrepRet = $440 
00000000 =00000440                  PCM2_SampCur = $440 
00000000 =00000443                  PCM2_Buffer = $443 
00000000 =00000446                  PCM2_PitchQuo = $446 
00000000 =00000449                  PCM2_PitchDiv = $449 
00000000 =0000044C                  PCM2_PitchCur = $44C 
00000000 =0000044E                  PCM2_PreInst01 = $44E 
00000000 =0000046A                  PCM2_PreInst02 = $46A 
00000000 =0000046F                  PCM2_PreInst03 = $46F 
00000000 =00000474                  PCM2_PreInst04 = $474 
00000000 =00000479                  PCM2_PreInst05 = $479 
00000000 =0000047E                  PCM2_PreInst06 = $47E 
00000000 =0000049A                  PCM2_PreInst07 = $49A 
00000000 =0000049F                  PCM2_PreInst08 = $49F 
00000000 =000004A4                  PCM2_PreInst09 = $4A4 
00000000 =000004A9                  PCM2_PreInst0A = $4A9 
00000000 =000004C5                  PCM2_PreInst0B = $4C5 
00000000 =000004CA                  PCM2_PreInst0C = $4CA 
00000000 =000004CF                  PCM2_PreInst0D = $4CF 
00000000 =000004D4                  PCM2_PreInst0E = $4D4 
00000000 =000004D9                  PCM2_PreInst0F = $4D9 
00000000 =000004F5                  PCM2_PreInst10 = $4F5 
00000000 =000004FA                  PCM2_PreInst11 = $4FA 
00000000 =000004FF                  PCM2_PreInst12 = $4FF 
00000000 =00000504                  PCM2_PreInst13 = $504 
00000000 =00000520                  PCM2_PreInst14 = $520 
00000000 =00000525                  PCM2_PreInst15 = $525 
00000000 =0000052A                  PCM2_PreInst16 = $52A 
00000000 =0000052F                  PCM2_PreInst17 = $52F 
00000000 =00000534                  PCM2_PreInst18 = $534 
00000000 =0000055F                  UPD1_Buffer = $55F 
00000000 =00000565                  UPD1_SampCur = $565 
00000000 =0000056B                  UPD1_PitchCur = $56B 
00000000 =000005A3                  PCM_BuffNoReset = $5A3 
00000000 =000005A4                  PCM1_ChangeBank = $5A4 
00000000 =000005BB                  PCM1_IgnoreBank = $5BB 
00000000 =000005BB                  PCM2_ChangeBank = $5BB 
00000000 =000005D2                  PCM2_IgnoreBank = $5D2 
00000000 =000005D2                  PCM1_ChangePitch = $5D2 
00000000 =000005DC                  PCM1_PitchHigh = $5DC 
00000000 =000005E7                  PCM1_PitchLow = $5E7 
00000000 =00000603                  PCM1_IgnorePitch = $603 
00000000 =00000603                  PCM2_ChangePitch = $603 
00000000 =0000060D                  PCM2_PitchHigh = $60D 
00000000 =00000618                  PCM2_PitchLow = $618 
00000000 =00000634                  PCM2_IgnorePitch = $634 
00000000 =00000634                  PCM_ChangeVolume = $634 
00000000 =00000641                  PCM1_Volume = $641 
00000000 =00000646                  PCM2_Volume = $646 
00000000 =0000064B                  PCM_VolumeAlter = $64B 
00000000 =0000064E                  PCM_VolumeRet = $64E 
00000000 =0000064E                  PCM1_NewRET = $64E 
00000000 =00000651                  PCM2_NewRET = $651 
00000000 =00000654                  PCM_NoUpdate = $654 
00000000 =0000066A                  CU_ValidDist = $66A 
00000000 =0000066F                  CU_Flush = $66F 
00000000 =00000673                  FL_NextByte = $673 
00000000 =00000687                  Z80_Flush1 = $687 
00000000 =000006A1                  Z80_Flush2 = $6A1 
00000000 =000006BC                  PCM1_Mute = $6BC 
00000000 =000006CE                  PCM1_Normal = $6CE 
00000000 =000006D4                  PCM1_Reverse = $6D4 
00000000 =000006ED                  PCM1_PrepReset = $6ED 
00000000 =000006FC                  PCM1_PrepCount = $6FC 
00000000 =0000070A                  PCM1_PrepLoc = $70A 
00000000 =0000072E                  Int1_jp = $72E 
00000000 =00000731                  PCM1_Reset = $731 
00000000 =00000745                  PCM1_ValueAdd = $745 
00000000 =00000770                  Int1_ldhl = $770 
00000000 =00000782                  PCM1_ResInst = $782 
00000000 =00000787                  PCM1_ResSamp = $787 
00000000 =0000078A                  PCM1_ResBuff = $78A 
00000000 =0000078D                  PCM1_ResDiv = $78D 
00000000 =00000790                  PCM1_ResPitCur = $790 
00000000 =00000794                  PCM1_ResQuo = $794 
00000000 =00000797                  PCM1_ResJump = $797 
00000000 =0000079A                  PCM1_NewSample = $79A 
00000000 =000007AA                  PCM1_NewNormal = $7AA 
00000000 =000007B0                  PCM1_NewReverse = $7B0 
00000000 =000007C7                  PCM2_Mute = $7C7 
00000000 =000007D9                  PCM2_Normal = $7D9 
00000000 =000007DF                  PCM2_Reverse = $7DF 
00000000 =000007F8                  PCM2_PrepReset = $7F8 
00000000 =00000807                  PCM2_PrepCount = $807 
00000000 =00000815                  PCM2_PrepLoc = $815 
00000000 =00000824                  Int2_jp = $824 
00000000 =00000827                  PCM2_Reset = $827 
00000000 =0000083B                  PCM2_ValueAdd = $83B 
00000000 =00000866                  Int2_ldhl = $866 
00000000 =00000878                  PCM2_ResInst = $878 
00000000 =0000087D                  PCM2_ResSamp = $87D 
00000000 =00000880                  PCM2_ResBuff = $880 
00000000 =00000883                  PCM2_ResDiv = $883 
00000000 =00000886                  PCM2_ResPitCur = $886 
00000000 =0000088A                  PCM2_ResQuo = $88A 
00000000 =0000088D                  PCM2_ResJump = $88D 
00000000 =00000890                  PCM2_NewSample = $890 
00000000 =000008A0                  PCM2_NewNormal = $8A0 
00000000 =000008A6                  PCM2_NewReverse = $8A6 
00000000 =00000A00                  PCM_Volume1 = $A00 
00000000 =00000B00                  PCM_Volume2 = $B00 
00000000 =00000C00                  PCM1_PrepTable = $C00 
00000000 =00000C30                  PCM2_PrepTable = $C30 
00000000 =00000C60                  PCM1_BankCur = $C60 
00000000 =00000C61                  PCM2_BankCur = $C61 
00000000 =00000C62                  MuteSample = $C62 
00000000 =00000C64                  MuteBank = $C64 
00000000 =00000C65                  MuteSample_Rev = $C65 
00000000 =00000C67                  MuteBank_Rev = $C67 
00000000 =00000C68                  YM_Buffer = $C68 
00000000 =00000C69                  PCM1_Sample = $C69 
00000000 =00000C6B                  PCM1_Bank = $C6B 
00000000 =00000C6C                  PCM1_Sample_Rev = $C6C 
00000000 =00000C6E                  PCM1_Bank_Rev = $C6E 
00000000 =00000C6F                  PCM1_SampleNext = $C6F 
00000000 =00000C71                  PCM1_BankNext = $C71 
00000000 =00000C72                  PCM1_SampleNext_Rev = $C72 
00000000 =00000C74                  PCM1_BankNext_Rev = $C74 
00000000 =00000C75                  PCM2_Sample = $C75 
00000000 =00000C77                  PCM2_Bank = $C77 
00000000 =00000C78                  PCM2_Sample_Rev = $C78 
00000000 =00000C7A                  PCM2_Bank_Rev = $C7A 
00000000 =00000C7B                  PCM2_SampleNext = $C7B 
00000000 =00000C7D                  PCM2_BankNext = $C7D 
00000000 =00000C7E                  PCM2_SampleNext_Rev = $C7E 
00000000 =00000C80                  PCM2_BankNext_Rev = $C80 
00000000 =00000CB0                  PCM_Buffer1 = $CB0 
00000000 =00000EB0                  PCM_Buffer2 = $EB0 
00000000 =00001000                  YM_Buffer1 = $1000 
00000000 =00001400                  YM_Buffer2 = $1400 
00000000 =00001800                  PCM_OverflwCalc = $1800 
00000000 =00001A00                  PCM_VolumeControl = $1A00 
00000000 =00001A06                  PCM1_VolumeNew = $1A06 
00000000 =00001A08                  PCM1_VolumeCur = $1A08 
00000000 =00001A13                  PCM1_VolTimer = $1A13 
00000000 =00001A1B                  PCM1_NoVolume = $1A1B 
00000000 =00001A1B                  PCM2_VolumeNew = $1A1B 
00000000 =00001A1D                  PCM2_VolumeCur = $1A1D 
00000000 =00001A28                  PCM2_VolTimer = $1A28 
00000000 =00001A30                  PCM2_NoVolume = $1A30 
00000000 =00001A35                  SwitchVolume = $1A35 
00000000 =00001A38                  SV_VolumeBank = $1A38 
00000000 =00001A55                  SV_NoMute = $1A55 
00000000 =00001A5A                  SV_LoadVolume = $1A5A 
00000000 =00001A6E                  SV_Flush = $1A6E 
00000000 =00001A91                  SVF_NoMute = $1A91 
00000000 =00001A96                  SVF_LoadVolume = $1A96 
00000000 =00001AAB                  SVF_StartVolume = $1AAB 
00000000 =00001AFC                  SwitchBank = $1AFC 
00000000 =00001B03                  SetBank = $1B03 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000 =000007A0                  torsoart = $7A0 ($C tiles)
00000000 =000007AC                  headart = $7AC ($14 tiles)
00000000 =00000798                  hairart = $798 (8 tiles)
00000000 =000006BA                  ringart = $6BA ($E tiles)
00000000 =00000568                  pointsart = $568 (9 tiles)
00000000 =00000571                  lamppostart = $571 ($A tiles)
00000000                            
00000000 =0000022D                  ssringart = $22D ($E tiles)
00000000                            
00000000 =FFFFF5C0                  SonimeSST = $FFFFF5C0
00000000 =FFFFFFF9                  v_ssangleprev = $FFFFFFF9
00000000 =FFFFF601                  FromSEGA = $FFFFF601
00000000                            
00000000 =00000000                  sonime_headtimer = 0
00000000 =00000002                  sonime_headx = 2
00000000 =00000003                  sonime_heady = 3
00000000 =00000004                  sonime_routine = 4
00000000 =00000005                  sonime_routine2 = 5
00000000 =00000006                  sonime_headx2 = 6
00000000 =00000007                  sonime_headx3 = 7
00000000 =00000009                  sonime_hairx = 9
00000000 =0000000A                  sonime_heady2 = $A
00000000 =0000000B                  sonime_heady3 = $B
00000000 =0000000D                  sonime_hairy = $D
00000000 =0000000E                  sonime_face = $E
00000000 =0000000F                  sonime_faceold = $F
00000000 =00000010                  sonime_facetimer = $10
00000000 =00000012                  sonime_ear = $12
00000000 =00000013                  sonime_earold = $13
00000000 =00000014                  sonime_eartimer = $14
00000000 =00000016                  sonime_torsox = $16
00000000 =00000017                  sonime_movein = $17
00000000 =00000018                  sonime_waittimer = $18
00000000 =00000019                  sonime_waittimer2 = $19
00000000 =00000020                  sonime_pausetimer = $20
00000000 =00000022                  sonime_airtimer = $22
00000000                            
00000000 =00000000                  face_neutrall = 0
00000000 =00000001                  face_blink = 1
00000000 =00000002                  face_neutrallm = 2
00000000 =00000003                  face_neutralm = 3
00000000 =00000004                  face_neutralr = 4
00000000 =00000005                  face_frustrated = 5
00000000 =00000006                  face_surprised = 6
00000000 =00000007                  face_happy = 7
00000000 =00000008                  face_confused = 8
00000000 =00000009                  face_meltdown = 9
00000000 =0000000A                  face_panic = $A
00000000 =0000000B                  face_impatient = $B
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            ResetZ80	macro
00000000                            		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00000000                            		endm
00000000                            
00000000                            NeglectZ80	macro
00000000                            		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- DMA to (a6) containing C00004 ---
00000000                            
00000000                            DMA:		macro	Size, Source, Destination
00000000                            		move.l	#(((((Size/$02)<<$08)&$FF0000)+((Size/$02)&$FF))+$94009300),(a6)
00000000                            		move.l	#((((((Source&$FFFFFF)/$02)<<$08)&$FF0000)+(((Source&$FFFFFF)/$02)&$FF))+$96009500),(a6)
00000000                            		move.l	#(((((Source&$FFFFFF)/$02)&$7F0000)+$97000000)+((Destination>>$10)&$FFFF)),(a6)
00000000                            		move.w	#((Destination&$FF7F)|$80),(a6)
00000000                            		endm
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample, SampleRev, SampleLoop, SampleLoopRev
00000000                            		dc.b	((Sample)&$FF)
00000000                            		dc.b	((((Sample)>>$08)&$7F)|$80)
00000000                            		dc.b	(((Sample)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleRev)-1)&$FF)
00000000                            		dc.b	(((((SampleRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleRev)-1)&$7F8000)>>$0F)
00000000                            		dc.b	((SampleLoop)&$FF)
00000000                            		dc.b	((((SampleLoop)>>$08)&$7F)|$80)
00000000                            		dc.b	(((SampleLoop)&$7F8000)>>$0F)
00000000                            		dc.b	(((SampleLoopRev)-1)&$FF)
00000000                            		dc.b	(((((SampleLoopRev)-1)>>$08)&$7F)|$80)
00000000                            		dc.b	((((SampleLoopRev)-1)&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            	; --- End marker for PCM samples ---
00000000                            
00000000                            EndMarker	macro
00000000                            		dcb.b	Z80E_Read*(($1000+$100)/$100),$00
00000000                            		endm
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            PlayPCM2	macro	Sample
00000000                            		move.l	a0,-(sp)
00000000                            		move.l	a1,-(sp)
00000000                            		lea (Sample).l,a0 ; load sample pointers
00000000                            		lea ($A00C75).l,a1 ; load PCM2 pointers
00000000                            		move.w #$0100,($A11100).l ; request Z80 stop (ON)
00000000                            		btst.b #$00,($A11100).l ; has the Z80 stopped yet?
00000000                            		bne.s *-$08 ; if not, branch
00000000                            		move.b #0,($A00647).l ; set volume
00000000                            		move.b (a0)+,(a1)+ ; set address of sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; set address of loop reverse sample
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b (a0)+,(a1)+ ; ''
00000000                            		move.b #%11011010,($A00651).l ; set request
00000000                            		move.w #$0000,($A11100).l ; request Z80 stop (OFF)
00000000                            		move.l	(sp)+,a1
00000000                            		move.l	(sp)+,a0
00000000                            		endm
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            
00000000 =FFFF8000                  Object_Respawn_Table = $FFFF8000
00000000 =FFFFFE2A                  Camera_X_pos_last = $FFFFFE2A
00000000 =FFFFF76E                  Camera_Y_pos_last = $FFFFF76E
00000000                            
00000000 =FFFF8300                  Ring_Positions = $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM = Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM = Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM = Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left = Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine = Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  Level_started_flag = Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table = Ring_Positions+Rings_Space+$E
00000000 =00000014                  respawn_index = $14	
00000000                            
00000000 =FFFFF60E                  v_pocketbottom = $FFFFF60E
00000000 =FFFFF610                  v_pocketx = $FFFFF610
00000000 =FFFFF612                  f_insidepocket = $FFFFF612
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6	
00000000                            	
00000000 =00000001                  Yes		=	1
00000000 =00000000                  No		=	0
00000000                            
00000000 =00000000                  MUTEDAC		=	No
00000000 =00000000                  MUTEFM		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000 =00000000                  MUTEPSG		=	No
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 5654 5542 4552 2049 4E20+  Title_Local:	dc.b 'VTUBER IN SONIC 1                               ' ; Domestic name
00000150 5654 5542 4552 2049 4E20+  Title_Int:	dc.b 'VTUBER IN SONIC 1                               ' ; International name
00000180 474D 2030 3030 3034 3034+  Serial:					dc.b "GM 00004049-01" ; Serial/version number (Rev01)
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E                            
0000030E                            loc_348:
0000030E 2CC7                       		move.l	d7,(a6)+
00000310 51CE FFFC                  		dbf	d6,loc_348
00000314 1039 00A1 0001             		move.b	($A10001).l,d0
0000031A 0200 00C0                  		andi.b	#$C0,d0
0000031E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000322 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000032A                            
0000032A                            GameInit:
0000032A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000330 7E00                       		moveq	#0,d7
00000332 3C3C 3F7F                  		move.w	#$3F7F,d6
00000336                            
00000336                            GameClrRAM:
00000336 2CC7                       		move.l	d7,(a6)+
00000338 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000033C 6100 0000                  		bsr.w	VDPSetupGame
00000340 6100 0000                  		bsr.w	SoundDriverLoad
00000344 6100 0000                  		bsr.w	JoypadInit
00000348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000034E                            
0000034E 41FA 0000                  		lea	GML_Int(pc),a0				; load interrupt list
00000352 3258                       		movea.w	(a0)+,a1				; load dump address
00000354 22D8                       		move.l	(a0)+,(a1)+				; jmp $0000
00000356 22D8                       		move.l	(a0)+,(a1)+				; $0000 jmp
00000358 22D8                       		move.l	(a0)+,(a1)+				; $00000000
0000035A                            
0000035A                            MainGameLoop:
0000035A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000035E 0240 001C                  		andi.w	#$1C,d0
00000362 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000366 60F2                       		bra.s	MainGameLoop
00000368                            
00000368 FF90                       GML_Int:	dc.w	HBlankRAM&$FFFF
0000036A 4EF9 0000 0000             		jmp	PalToCRAM
00000370 4EF9 0000 0000             		jmp	loc_B10
00000376                            
00000376 4E73                       NullBlank:	rte
00000378                            
00000378                            ; ===========================================================================
00000378                            ; ---------------------------------------------------------------------------
00000378                            ; Main game mode array
00000378                            ; ---------------------------------------------------------------------------
00000378                            
00000378                            GameModeArray:
00000378 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000037C                            ; ===========================================================================
0000037C 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000380                            ; ===========================================================================
00000380 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000384                            ; ===========================================================================
00000384 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	Credits		; Credits ($1C)
00000398                            ; ===========================================================================
00000398 4E75                       		rts	
0000039A                            ; ===========================================================================
0000039A                            
0000039A                            loc_43A:
0000039A 46FC 2700                  		move	#$2700,sr
0000039E 544F                       		addq.w	#2,sp
000003A0 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003A4 544F                       		addq.w	#2,sp
000003A6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003AC 6100 0000                  		bsr.w	ShowErrorMsg
000003B0 202F 0002                  		move.l	2(sp),d0
000003B4 6100 0000                  		bsr.w	sub_5BA
000003B8 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003BC 6100 0000                  		bsr.w	sub_5BA
000003C0 6000                       		bra.s	loc_478
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            loc_462:
000003C2 46FC 2700                  		move	#$2700,sr
000003C6 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003CC 6100 0000                  		bsr.w	ShowErrorMsg
000003D0 202F 0002                  		move.l	2(sp),d0
000003D4 6100 0000                  		bsr.w	sub_5BA
000003D8                            
000003D8                            loc_478:
000003D8 6100 0000                  		bsr.w	ErrorWaitForC
000003DC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000003E2 46FC 2300                  		move	#$2300,sr
000003E6 4E73                       		rte	
000003E8                            
000003E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000003E8                            
000003E8                            
000003E8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000003E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000003EE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000003F8 41F9 0000 0000             		lea	(Art_Text).l,a0
000003FE 323C 027F                  		move.w	#$27F,d1
00000402                            
00000402                            Error_LoadGfx:
00000402 3C98                       		move.w	(a0)+,(a6)
00000404 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000408 7000                       		moveq	#0,d0		; clear	d0
0000040A 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000040E 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000412 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000416 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000420 7212                       		moveq	#$12,d1		; number of characters
00000422                            
00000422                            Error_LoopChars:
00000422 7000                       		moveq	#0,d0
00000424 1018                       		move.b	(a0)+,d0
00000426 0640 0790                  		addi.w	#$790,d0
0000042A 3C80                       		move.w	d0,(a6)
0000042C 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000430 4E75                       		rts	
00000432                            ; End of function ShowErrorMsg
00000432                            
00000432                            ; ===========================================================================
00000432 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000436 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000043A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000043E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000442 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000446 0000                       		dc.w asc_5A6-ErrorText
00000448 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000045B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000046E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000481 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000494 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004A7 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004BA 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000004CD 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000004E0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000004F3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000506 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
0000051A 00                         		even
0000051A                            
0000051A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000051A                            
0000051A                            
0000051A                            sub_5BA:				; XREF: loc_43A; loc_462
0000051A 3CBC 07CA                  		move.w	#$7CA,(a6)
0000051E 7407                       		moveq	#7,d2
00000520                            
00000520                            loc_5C0:
00000520 E998                       		rol.l	#4,d0
00000522 6100                       		bsr.s	sub_5CA
00000524 51CA FFFA                  		dbf	d2,loc_5C0
00000528 4E75                       		rts	
0000052A                            ; End of function sub_5BA
0000052A                            
0000052A                            
0000052A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000052A                            
0000052A                            
0000052A                            sub_5CA:				; XREF: sub_5BA
0000052A 3200                       		move.w	d0,d1
0000052C 0241 000F                  		andi.w	#$F,d1
00000530 0C41 000A                  		cmpi.w	#$A,d1
00000534 6500                       		bcs.s	loc_5D8
00000536 5E41                       		addq.w	#7,d1
00000538                            
00000538                            loc_5D8:
00000538 0641 07C0                  		addi.w	#$7C0,d1
0000053C 3C81                       		move.w	d1,(a6)
0000053E 4E75                       		rts	
00000540                            ; End of function sub_5CA
00000540                            
00000540                            
00000540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000540                            
00000540                            
00000540                            ErrorWaitForC:				; XREF: loc_478
00000540 6100 0000                  		bsr.w	ReadJoypads
00000544 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000054A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000054E 4E75                       		rts	
00000550                            ; End of function ErrorWaitForC
00000550                            
00000550                            ; ===========================================================================
00000550                            
00000550                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000A70                            		even
00000A70                            
00000A70                            ; ===========================================================================
00000A70                            
00000A70                            loc_B10:				; XREF: Vectors
00000A70 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000A74 4A38 F62A                  		tst.b	($FFFFF62A).w
00000A78 6700                       		beq.s	loc_B88
00000A7A 3039 00C0 0004             		move.w	($C00004).l,d0
00000A80 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000A8A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000A92 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000A98 6700                       		beq.s	loc_B42
00000A9A 303C 0700                  		move.w	#$700,d0
00000A9E                            
00000A9E                            loc_B3E:
00000A9E 51C8 FFFE                  		dbf	d0,loc_B3E
00000AA2                            
00000AA2                            loc_B42:
00000AA2 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AA6 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AB2 0240 003E                  		andi.w	#$3E,d0
00000AB6 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000ABA 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000ABE                            
00000ABE                            loc_B5E:				; XREF: loc_B88
00000ABE 4EB9 0000 0000             		jsr	sub_71B4C
00000AC4                            
00000AC4                            loc_B64:				; XREF: loc_D50
00000AC4 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000AC8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000ACC 4E73                       		rte	
00000ACE                            ; ===========================================================================
00000ACE 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000AD2 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000AD6 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000ADA 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000ADE 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000AE2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000AE6 0000                       		dc.w loc_E72-off_B6E
00000AE8                            ; ===========================================================================
00000AE8                            
00000AE8                            loc_B88:				; XREF: loc_B10; off_B6E
00000AE8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000AEE 6700                       		beq.s	loc_B9A
00000AF0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000AF6 6600 FFC6                  		bne.w	loc_B5E
00000AFA                            
00000AFA                            loc_B9A:
00000AFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B00 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B04 3039 00C0 0004             		move.w	($C00004).l,d0
00000B0A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B10 6700                       		beq.s	loc_BBA
00000B12 303C 0700                  		move.w	#$700,d0
00000B16                            
00000B16                            loc_BB6:
00000B16 51C8 FFFE                  		dbf	d0,loc_BB6
00000B1A                            
00000B1A                            loc_BBA:
00000B1A 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B20 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B24 6600                       		bne.s	loc_BFE
00000B26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B2C 3ABC 8C81                  		move.w	#$8C81,(a5)
00000B30 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B36 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B3C 3ABC 977F                  		move.w	#$977F,(a5)
00000B40 3ABC C000                  		move.w	#$C000,(a5)
00000B44 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B4E 6000                       		bra.s	loc_C22
00000B50                            ; ===========================================================================
00000B50                            
00000B50                            loc_BFE:				; XREF: loc_BC8
00000B50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B56 3ABC 8C89                  		move.w	#$8C89,(a5)
00000B5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B66 3ABC 977F                  		move.w	#$977F,(a5)
00000B6A 3ABC C000                  		move.w	#$C000,(a5)
00000B6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B78                            
00000B78                            loc_C22:				; XREF: loc_BC8
00000B78 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000B7C 6000 FF40                  		bra.w	loc_B5E
00000B80                            ; ===========================================================================
00000B80                            
00000B80                            loc_C32:				; XREF: off_B6E
00000B80 6100 0000                  		bsr.w	sub_106E
00000B84                            
00000B84                            loc_C36:				; XREF: off_B6E
00000B84 4A78 F614                  		tst.w	($FFFFF614).w
00000B88 6700 0000                  		beq.w	locret_C42
00000B8C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000B90                            
00000B90                            locret_C42:
00000B90 4E75                       		rts	
00000B92                            ; ===========================================================================
00000B92                            
00000B92                            loc_C44:				; XREF: off_B6E
00000B92 6100 0000                  		bsr.w	sub_106E
00000B96 6100 0000                  		bsr.w	sub_6886
00000B9A 6100 0000                  		bsr.w	sub_1642
00000B9E 4A78 F614                  		tst.w	($FFFFF614).w
00000BA2 6700 0000                  		beq.w	locret_C5C
00000BA6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000BAA                            
00000BAA                            locret_C5C:
00000BAA 4E75                       		rts	
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            loc_C5E:				; XREF: off_B6E
00000BAC 6100 0000                  		bsr.w	sub_106E
00000BB0 4E75                       		rts
00000BB2                            
00000BB2                            ; Return:
00000BB2 6100 0000                  		bsr.w	ReadJoypads
00000BB6 4E75                       		rts	
00000BB8                            ; ===========================================================================
00000BB8                            
00000BB8                            loc_C64:				; XREF: off_B6E
00000BB8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000BBE 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000BC2                            
00000BC2                            loc_C6E:				; XREF: off_B6E
00000BC2 6100 0000                  		bsr.w	ReadJoypads
00000BC6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BCA 6600                       		bne.s	loc_CB0
00000BCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD2 3ABC 8C81                  		move.w	#$8C81,(a5)
00000BD6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BDC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BE2 3ABC 977F                  		move.w	#$977F,(a5)
00000BE6 3ABC C000                  		move.w	#$C000,(a5)
00000BEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF4 6000                       		bra.s	loc_CD4
00000BF6                            ; ===========================================================================
00000BF6                            
00000BF6                            loc_CB0:				; XREF: loc_C76
00000BF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BFC 3ABC 8C89                  		move.w	#$8C89,(a5)
00000C00 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C06 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C0C 3ABC 977F                  		move.w	#$977F,(a5)
00000C10 3ABC C000                  		move.w	#$C000,(a5)
00000C14 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C1E                            
00000C1E                            loc_CD4:				; XREF: loc_C76
00000C1E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C28 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C2E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C34 3ABC 977F                  		move.w	#$977F,(a5)
00000C38 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C4C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C52 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000C58 3ABC 977F                  		move.w	#$977F,(a5)
00000C5C 3ABC 7800                  		move.w	#$7800,(a5)
00000C60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C6A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C70                            
00000C70                            loc_D50:
00000C70 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C76 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C7C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C82 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C88 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000C8E 6400                       		bcc.s	Demo_Time
00000C90 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000C96 588F                       		addq.l	#4,sp
00000C98 6000 FE2A                  		bra.w	loc_B64
00000C9C                            
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            ; Subroutine to	run a demo for an amount of time
00000C9C                            ; ---------------------------------------------------------------------------
00000C9C                            
00000C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C9C                            
00000C9C                            
00000C9C                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000C9C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000CA0 4EB9 0000 0000             		jsr	AniArt_Load
00000CA6 4EB9 0000 0000             		jsr	HudUpdate
00000CAC 6100 0000                  		bsr.w	sub_165E
00000CB0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000CB4 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000CB8 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000CBC                            
00000CBC                            Demo_TimeEnd:
00000CBC 4E75                       		rts	
00000CBE                            ; End of function Demo_Time
00000CBE                            
00000CBE                            ; ===========================================================================
00000CBE                            
00000CBE                            loc_DA6:				; XREF: off_B6E
00000CBE 6100 0000                  		bsr.w	ReadJoypads
00000CC2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CC8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CCE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CD4 3ABC 977F                  		move.w	#$977F,(a5)
00000CD8 3ABC C000                  		move.w	#$C000,(a5)
00000CDC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CE2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CEC 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CF2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CF8 3ABC 977F                  		move.w	#$977F,(a5)
00000CFC 3ABC 7800                  		move.w	#$7800,(a5)
00000D00 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D0A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D10 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D16 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D1C 3ABC 977F                  		move.w	#$977F,(a5)
00000D20 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D24 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D2E 6100 0000                  		bsr.w	PalCycle_SS
00000D32 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D38                            
00000D38                            loc_E64:
00000D38 0C38 0060 F625             		cmpi.b	#96,($FFFFF625).w
00000D3E 6400                       		bcc.s	@update
00000D40 6000 0000                  		bra.w	locret_E70
00000D44                            
00000D44                            	@update:
00000D44 4EB9 0000 0000             		jsr	SS_LoadWalls
00000D4A 4A78 F614                  		tst.w	($FFFFF614).w
00000D4E 6700 0000                  		beq.w	locret_E70
00000D52 5378 F614                  		subq.w	#1,($FFFFF614).w
00000D56                            
00000D56                            locret_E70:
00000D56 4E75                       		rts	
00000D58                            ; ===========================================================================
00000D58                            
00000D58                            loc_E72:				; XREF: off_B6E
00000D58 6100 0000                  		bsr.w	ReadJoypads
00000D5C 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D60 6600                       		bne.s	loc_EB4
00000D62 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D68 3ABC 8C81                  		move.w	#$8C81,(a5)
00000D6C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D72 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D78 3ABC 977F                  		move.w	#$977F,(a5)
00000D7C 3ABC C000                  		move.w	#$C000,(a5)
00000D80 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8A 6000                       		bra.s	loc_ED8
00000D8C                            ; ===========================================================================
00000D8C                            
00000D8C                            loc_EB4:				; XREF: loc_E7A
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 3ABC 8C89                  		move.w	#$8C89,(a5)
00000D96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DA2 3ABC 977F                  		move.w	#$977F,(a5)
00000DA6 3ABC C000                  		move.w	#$C000,(a5)
00000DAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB4                            
00000DB4                            loc_ED8:				; XREF: loc_E7A
00000DB4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DBE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DC4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DCA                            
00000DCA                            loc_EEE:
00000DCA 3ABC 977F                  		move.w	#$977F,(a5)
00000DCE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE2 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DE8 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DEE 3ABC 977F                  		move.w	#$977F,(a5)
00000DF2 3ABC 7800                  		move.w	#$7800,(a5)
00000DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E06                            
00000E06                            loc_F54:
00000E06 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000E0C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000E12 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000E18 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000E1E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E22 4EB9 0000 0000             		jsr	AniArt_Load
00000E28 4EB9 0000 0000             		jsr	HudUpdate
00000E2E 6100 0000                  		bsr.w	sub_1642
00000E32 4E75                       		rts	
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_F8A:				; XREF: off_B6E
00000E34 6100 0000                  		bsr.w	sub_106E
00000E38 5238 F628                  		addq.b	#1,($FFFFF628).w
00000E3C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000E42 4E75                       		rts	
00000E44                            ; ===========================================================================
00000E44                            
00000E44                            loc_F9A:				; XREF: off_B6E
00000E44 6100 0000                  		bsr.w	sub_106E
00000E48 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4C 6000 0000                  		bra.w	sub_1642
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_FA6:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	ReadJoypads
00000E54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E60 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E66 3ABC 977F                  		move.w	#$977F,(a5)
00000E6A 3ABC C000                  		move.w	#$C000,(a5)
00000E6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E78 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E7E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E84 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E8A 3ABC 977F                  		move.w	#$977F,(a5)
00000E8E 3ABC 7800                  		move.w	#$7800,(a5)
00000E92 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E98 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EA8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EAE 3ABC 977F                  		move.w	#$977F,(a5)
00000EB2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EB6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC0 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EC6                            
00000EC6                            loc_1060:
00000EC6 4A78 F614                  		tst.w	($FFFFF614).w
00000ECA 6700 0000                  		beq.w	locret_106C
00000ECE 5378 F614                  		subq.w	#1,($FFFFF614).w
00000ED2                            
00000ED2                            locret_106C:
00000ED2 4E75                       		rts	
00000ED4                            
00000ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000ED4                            
00000ED4                            
00000ED4                            sub_106E:				; XREF: loc_C32; et al
00000ED4 6100 0000                  		bsr.w	ReadJoypads
00000ED8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EDC 6600                       		bne.s	loc_10B0
00000EDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE4 3ABC 8C81                  		move.w	#$8C81,(a5)
00000EE8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EEE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EF4 3ABC 977F                  		move.w	#$977F,(a5)
00000EF8 3ABC C000                  		move.w	#$C000,(a5)
00000EFC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F02 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F06                            
00000F06                            PAL1_LOAD:
00000F06 6000                       		bra.s	loc_10D4
00000F08                            ; ===========================================================================
00000F08                            
00000F08                            loc_10B0:
00000F08 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F0E 3ABC 8C89                  		move.w	#$8C89,(a5)
00000F12 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F18 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F1E 3ABC 977F                  		move.w	#$977F,(a5)
00000F22 3ABC C000                  		move.w	#$C000,(a5)
00000F26 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F2C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F30                            loc_10D4:
00000F30 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F36 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F42 3ABC 977F                  		move.w	#$977F,(a5)
00000F46 3ABC 7800                  		move.w	#$7800,(a5)
00000F4A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F50 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F5A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F60 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F66 3ABC 977F                  		move.w	#$977F,(a5)
00000F6A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F6E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F7E 4E75                       		rts	
00000F80                            ; End of function sub_106E
00000F80                            
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            ; Subroutine to	move pallets from the RAM to CRAM
00000F80                            ; ---------------------------------------------------------------------------
00000F80                            
00000F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F80                            
00000F80                            
00000F80                            PalToCRAM:
00000F80 46FC 2700                  		move	#$2700,sr
00000F84 4A78 F644                  		tst.w	($FFFFF644).w
00000F88 6700                       		beq.s	locret_119C
00000F8A 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000F90 2F08                       		move.l	a0,-(sp)
00000F92 41F9 00C0 0004             		lea	($C00004).l,a0
00000F98 30BC 8C89                  		move.w	#$8C89,(a0)
00000F9C 30BC 8ADF                  		move.w	#$8ADF,(a0)
00000FA0 205F                       		move.l	(sp)+,a0
00000FA2 4A38 F64F                  		tst.b	($FFFFF64F).w
00000FA6 6600                       		bne.s	loc_119E
00000FA8                            
00000FA8                            locret_119C:
00000FA8 4E73                       		rte	
00000FAA                            ; ===========================================================================
00000FAA                            
00000FAA                            loc_119E:				; XREF: PalToCRAM
00000FAA 4238 F64F                  		clr.b	($FFFFF64F).w
00000FAE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000FB2 6100 FCE8                  		bsr.w	Demo_Time
00000FB6 4EB9 0000 0000             		jsr	sub_71B4C
00000FBC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000FC0 4E73                       		rte	
00000FC2                            ; End of function PalToCRAM
00000FC2                            
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            ; Subroutine to	initialise joypads
00000FC2                            ; ---------------------------------------------------------------------------
00000FC2                            
00000FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC2                            
00000FC2                            
00000FC2                            JoypadInit:				; XREF: GameClrRAM
00000FC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCA                            
00000FCA                            Joypad_WaitZ80:
00000FCA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000FD2 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000FD4 7040                       		moveq	#$40,d0
00000FD6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000FDC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000FE2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000FE8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FF0 4E75                       		rts	
00000FF2                            ; End of function JoypadInit
00000FF2                            
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            ; Subroutine to	read joypad input, and send it to the RAM
00000FF2                            ; ---------------------------------------------------------------------------
00000FF2                            
00000FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FF2                            
00000FF2                            
00000FF2                            ReadJoypads:
00000FF2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000FF6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000FFC 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000FFE 5449                       		addq.w	#2,a1		; do the second	joypad
00001000                            
00001000                            Joypad_Read:
00001000 12BC 0000                  		move.b	#0,(a1)
00001004 4E71                       		nop	
00001006 4E71                       		nop	
00001008 1011                       		move.b	(a1),d0
0000100A E508                       		lsl.b	#2,d0
0000100C 0200 00C0                  		andi.b	#$C0,d0
00001010 12BC 0040                  		move.b	#$40,(a1)
00001014 4E71                       		nop	
00001016 4E71                       		nop	
00001018 1211                       		move.b	(a1),d1
0000101A 0201 003F                  		andi.b	#$3F,d1
0000101E 8001                       		or.b	d1,d0
00001020 4600                       		not.b	d0
00001022 1210                       		move.b	(a0),d1
00001024 B101                       		eor.b	d0,d1
00001026 10C0                       		move.b	d0,(a0)+
00001028 C200                       		and.b	d0,d1
0000102A 10C1                       		move.b	d1,(a0)+
0000102C 4E75                       		rts	
0000102E                            ; End of function ReadJoypads
0000102E                            
0000102E                            
0000102E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000102E                            
0000102E                            
0000102E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000102E 41F9 00C0 0004             		lea	($C00004).l,a0
00001034 43F9 00C0 0000             		lea	($C00000).l,a1
0000103A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001040 7E12                       		moveq	#$12,d7
00001042                            
00001042                            VDP_Loop:
00001042 309A                       		move.w	(a2)+,(a0)
00001044 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001048                            
00001048 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000104E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001052 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001058 7000                       		moveq	#0,d0
0000105A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001064 3E3C 003F                  		move.w	#$3F,d7
00001068                            
00001068                            VDP_ClrCRAM:
00001068 3280                       		move.w	d0,(a1)
0000106A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000106E                            
0000106E 42B8 F616                  		clr.l	($FFFFF616).w
00001072 42B8 F61A                  		clr.l	($FFFFF61A).w
00001076 2F01                       		move.l	d1,-(sp)
00001078 4BF9 00C0 0004             		lea	($C00004).l,a5
0000107E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001082 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001088 3ABC 9780                  		move.w	#$9780,(a5)
0000108C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001092 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000109A                            
0000109A                            loc_128E:
0000109A 3215                       		move.w	(a5),d1
0000109C 0801 0001                  		btst	#1,d1
000010A0 66F8                       		bne.s	loc_128E
000010A2                            
000010A2 3ABC 8F02                  		move.w	#$8F02,(a5)
000010A6 221F                       		move.l	(sp)+,d1
000010A8 4E75                       		rts	
000010AA                            ; End of function VDPSetupGame
000010AA                            
000010AA                            ; ===========================================================================
000010AA 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000010B2 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000010BA 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000010C2 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000010CA 9001 9100 9200             		dc.w $9001, $9100, $9200
000010D0                            
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            ; Subroutine to	clear the screen
000010D0                            ; ---------------------------------------------------------------------------
000010D0                            
000010D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010D0                            
000010D0                            
000010D0                            ClearScreen:
000010D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D6 3ABC 8F01                  		move.w	#$8F01,(a5)
000010DA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000010E0 3ABC 9780                  		move.w	#$9780,(a5)
000010E4 2ABC 4000 0083             		move.l	#$40000083,(a5)
000010EA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000010F2                            
000010F2                            loc_12E6:
000010F2 3215                       		move.w	(a5),d1
000010F4 0801 0001                  		btst	#1,d1
000010F8 66F8                       		bne.s	loc_12E6
000010FA                            
000010FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000010FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001104 3ABC 8F01                  		move.w	#$8F01,(a5)
00001108 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000110E 3ABC 9780                  		move.w	#$9780,(a5)
00001112 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001118 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001120                            
00001120                            loc_1314:
00001120 3215                       		move.w	(a5),d1
00001122 0801 0001                  		btst	#1,d1
00001126 66F8                       		bne.s	loc_1314
00001128                            
00001128 3ABC 8F02                  		move.w	#$8F02,(a5)
0000112C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001134 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000113C 43F8 F838                  		lea	($FFFFF838).w,a1
00001140 7000                       		moveq	#0,d0
00001142 323C 0092                  		move.w	#$92,d1
00001146                            
00001146                            loc_133A:
00001146 22C0                       		move.l	d0,(a1)+
00001148 51C9 FFFC                  		dbf	d1,loc_133A
0000114C                            
0000114C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001150 7000                       		moveq	#0,d0
00001152 323C 0100                  		move.w	#$100,d1
00001156                            
00001156                            loc_134A:
00001156 22C0                       		move.l	d0,(a1)+
00001158 51C9 FFFC                  		dbf	d1,loc_134A
0000115C 4E75                       		rts	
0000115E                            ; End of function ClearScreen
0000115E                            
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            ; Subroutine to	load the sound driver
0000115E                            ; ---------------------------------------------------------------------------
0000115E                            
0000115E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000115E                            
0000115E                            
0000115E                            SoundDriverLoad:
0000115E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001164 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000116A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000116E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001176 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000117E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001186 66F6                       		bne.s	*-$08					; if not, branch
00001188                            
00001188                            SM_LoadZ80:
00001188 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000118A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000118E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001194 43F9 00A0 0C62             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000119A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000119C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000119E 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A0 12D8                       		move.b	(a0)+,(a1)+				; CHG: copy "reverse" pointer over into Z80
000011A2 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A4 12D8                       		move.b	(a0)+,(a1)+				; ''
000011A6 43F9 00A0 1A38             		lea	($A00000+SV_VolumeBank).l,a1		; load volume bank address write routine
000011AC 12FC 0000                  		move.b 	#$74|((PCM_Volumes>>$0F)&1),(a1)+	; write "ld  (hl),?" instructions
000011B0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$10)&1),(a1)+	; ''
000011B4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$11)&1),(a1)+	; ''
000011B8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$12)&1),(a1)+	; ''
000011BC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$13)&1),(a1)+	; ''
000011C0 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$14)&1),(a1)+	; ''
000011C4 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$15)&1),(a1)+	; ''
000011C8 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$16)&1),(a1)+	; ''
000011CC 12FC 0000                  		move.b	#$74|((PCM_Volumes>>$17)&1),(a1)+	; ''
000011D0 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
000011D8 727F                       		moveq	#$7F,d1					; set repeat times
000011DA 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
000011DE 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
000011E6 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
000011EE 4E75                       		rts						; return
000011F0                            ; End of function SoundDriverLoad
000011F0                            
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            ; Subroutine to	play a sound or	music track
000011F0                            ; ---------------------------------------------------------------------------
000011F0                            
000011F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F0                            
000011F0                            
000011F0                            PlaySound:
000011F0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000011F4 4E75                       		rts	
000011F6                            ; End of function PlaySound
000011F6                            
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            ; Subroutine to	play a special sound/music (E0-E4)
000011F6                            ;
000011F6                            ; E0 - Fade out
000011F6                            ; E1 - Sega
000011F6                            ; E2 - Speed up
000011F6                            ; E3 - Normal speed
000011F6                            ; E4 - Stop
000011F6                            ; ---------------------------------------------------------------------------
000011F6                            
000011F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F6                            
000011F6                            
000011F6                            PlaySound_Special:
000011F6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000011FA 4E75                       		rts	
000011FC                            ; End of function PlaySound_Special
000011FC                            
000011FC                            ; ===========================================================================
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            ; Unused sound/music subroutine
000011FC                            ; ---------------------------------------------------------------------------
000011FC                            
000011FC                            PlaySound_Unk:
000011FC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001200 4E75                       		rts	
00001202                            
00001202                            ; ---------------------------------------------------------------------------
00001202                            ; Subroutine to	pause the game
00001202                            ; ---------------------------------------------------------------------------
00001202                            
00001202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001202                            
00001202                            
00001202                            PauseGame:				; XREF: Level_MainLoop; et al
00001202 4E71                       		nop	
00001204 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001208 6700 0000                  		beq.w	Unpause		; if not, branch
0000120C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001210 6600                       		bne.s	loc_13BE	; if yes, branch
00001212 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001218 6700 0000                  		beq.w	Pause_DoNothing	; if not, branch
0000121C                            
0000121C                            loc_13BE:
0000121C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001222 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001228                            
00001228                            loc_13CA:
00001228 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000122E 6100 0000                  		bsr.w	DelayProgram
00001232 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001236 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001238 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000123E 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001240 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001246 4E71                       		nop	
00001248 6000                       		bra.s	loc_1404
0000124A                            ; ===========================================================================
0000124A                            
0000124A                            Pause_ChkBC:				; XREF: PauseGame
0000124A 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001250 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001252 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001258 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000125A                            
0000125A                            Pause_ChkStart:				; XREF: PauseGame
0000125A 4A78 F5E0                  		tst.w	(SonimeSST+sonime_pausetimer).w
0000125E 6600                       		bne.s	@waitlonger
00001260 11FC 0001 F5CE             		move.b	#face_blink,(SonimeSST+sonime_face).w
00001266 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000126C 6000                       		bra.s	@cont
0000126E                            
0000126E                            	@waitlonger:
0000126E 5378 F5E0                  		subi.w	#1,(SonimeSST+sonime_pausetimer).w
00001272                            
00001272                            	@cont:
00001272 41F8 D000                  		lea	($FFFFD000).w,a0 ; a0=object
00001276 7000                       		moveq	#0,d0
00001278 7E7F                       		moveq	#$7F,d7 ; run the first $80 objects out of levels
0000127A 4EB9 0000 0000             		jsr		loc_D368
00001280 4EB9 0000 0000             		jsr		BuildSprites
00001286 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000128C 6600                       		bne.s	@notss
0000128E 4EB9 0000 0000             		jsr	SS_ShowLayout
00001294                            
00001294                            	@notss:
00001294 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000129A 678C                       		beq.s	loc_13CA	; if not, branch
0000129C 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
000012A2                            
000012A2                            loc_1404:				; XREF: PauseGame
000012A2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012A8                            
000012A8                            Unpause:				; XREF: PauseGame
000012A8 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000012AE                            
000012AE                            Pause_DoNothing:			; XREF: PauseGame
000012AE 4E75                       		rts	
000012B0                            ; ===========================================================================
000012B0                            
000012B0                            Pause_SlowMo:				; XREF: PauseGame
000012B0 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000012B6 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000012BC 4E75                       		rts	
000012BE                            ; End of function PauseGame
000012BE                            
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            ; Subroutine to	display	patterns via the VDP
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            
000012BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012BE                            
000012BE                            
000012BE                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000012BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000012C4 283C 0080 0000             		move.l	#$800000,d4
000012CA                            
000012CA                            loc_142C:
000012CA 2D40 0004                  		move.l	d0,4(a6)
000012CE 3601                       		move.w	d1,d3
000012D0                            
000012D0                            loc_1432:
000012D0 3C99                       		move.w	(a1)+,(a6)
000012D2 51CB FFFC                  		dbf	d3,loc_1432
000012D6 D084                       		add.l	d4,d0
000012D8 51CA FFF0                  		dbf	d2,loc_142C
000012DC 4E75                       		rts	
000012DE                            ; End of function ShowVDPGraphics
000012DE                            
000012DE                            ; ==============================================================================
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Nemesis decompression routine
000012DE                            ; ------------------------------------------------------------------------------
000012DE                            ; Optimized by vladikcomper
000012DE                            ; ------------------------------------------------------------------------------
000012DE                             
000012DE                            NemDec_RAM:
000012DE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012E2 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012E6 6000                           bra.s   NemDec_Main
000012E8                             
000012E8                            ; ------------------------------------------------------------------------------
000012E8                            NemDec:
000012E8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012EC 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
000012F2 47FA 0000                      lea NemDec_WriteRowToVDP(pc),a3
000012F6                             
000012F6                            NemDec_Main:
000012F6 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
000012FA 3418                           move.w  (a0)+,d2        ; get number of patterns
000012FC 6A00                           bpl.s   @0          ; are we in Mode 0?
000012FE 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001302 E74A                       @0  lsl.w   #3,d2
00001304 3A42                           movea.w d2,a5
00001306 7607                           moveq   #7,d3
00001308 7400                           moveq   #0,d2
0000130A 7800                           moveq   #0,d4
0000130C 6100 0000                      bsr.w   NemDec4
00001310 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001312 E145                           asl.w   #8,d5           ; shift up by a byte
00001314 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001316 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
0000131A 6100                           bsr.s   NemDec2
0000131C 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001320 4E75                           rts
00001322                             
00001322                            ; ---------------------------------------------------------------------------
00001322                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001322                            ; ---------------------------------------------------------------------------
00001322                             
00001322                            NemDec2:
00001322 3E06                           move.w  d6,d7
00001324 5147                           subq.w  #8,d7           ; get shift value
00001326 3205                           move.w  d5,d1
00001328 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
0000132A 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
0000132E 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001330 0241 00FF                      andi.w  #$FF,d1
00001334 D241                           add.w   d1,d1
00001336 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
0000133A 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
0000133E 6400                           bcc.s   @0          ; if not, branch
00001340 5046                           addq.w  #8,d6
00001342 E145                           asl.w   #8,d5
00001344 1A18                           move.b  (a0)+,d5        ; read next byte
00001346 1231 1001                  @0  move.b  1(a1,d1.w),d1
0000134A 3001                           move.w  d1,d0
0000134C 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001350 0240 00F0                      andi.w  #$F0,d0
00001354                             
00001354                            NemDec_GetRepeatCount:
00001354 E848                           lsr.w   #4,d0           ; get repeat count
00001356                             
00001356                            NemDec_WritePixel:
00001356 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001358 8801                           or.b    d1,d4           ; write pixel
0000135A 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
0000135E 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001360                            ; ---------------------------------------------------------------------------
00001360                             
00001360                            NemDec3:
00001360 7800                           moveq   #0,d4           ; reset row
00001362 7607                           moveq   #7,d3           ; reset nybble counter
00001364                             
00001364                            NemDec_WritePixelLoop:
00001364 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001368 60B8                           bra.s   NemDec2
0000136A                            ; ---------------------------------------------------------------------------
0000136A                             
0000136A                            NemDec_InlineData:
0000136A 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
0000136C 0C46 0009                      cmpi.w  #9,d6
00001370 6400                           bcc.s   @0
00001372 5046                           addq.w  #8,d6
00001374 E145                           asl.w   #8,d5
00001376 1A18                           move.b  (a0)+,d5
00001378 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000137A 3205                           move.w  d5,d1
0000137C EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
0000137E 3001                           move.w  d1,d0
00001380 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001384 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
00001388 0C46 0009                      cmpi.w  #9,d6
0000138C 64C6                           bcc.s   NemDec_GetRepeatCount
0000138E 5046                           addq.w  #8,d6
00001390 E145                           asl.w   #8,d5
00001392 1A18                           move.b  (a0)+,d5
00001394 60BE                           bra.s   NemDec_GetRepeatCount
00001396                             
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutines to output decompressed entry
00001396                            ; Selected depending on current decompression mode
00001396                            ; ---------------------------------------------------------------------------
00001396                             
00001396                            NemDec_WriteRowToVDP:
00001396                            loc_1502:
00001396 2884                           move.l  d4,(a4)         ; write 8-pixel row
00001398 534D                           subq.w  #1,a5
0000139A 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000139C 66C2                           bne.s   NemDec3         ; if not, branch
0000139E 4E75                           rts
000013A0                            ; ---------------------------------------------------------------------------
000013A0                             
000013A0                            NemDec_WriteRowToVDP_XOR:
000013A0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013A2 2882                           move.l  d2,(a4)         ; and write the result
000013A4 534D                           subq.w  #1,a5
000013A6 380D                           move.w  a5,d4
000013A8 66B6                           bne.s   NemDec3
000013AA 4E75                           rts
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemDec_WriteRowToRAM:
000013AC 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66AC                           bne.s   NemDec3         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemDec_WriteRowToRAM_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 28C2                           move.l  d2,(a4)+        ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66A0                           bne.s   NemDec3
000013C0 4E75                           rts
000013C2                             
000013C2                            ; ---------------------------------------------------------------------------
000013C2                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec4:
000013C2 1018                           move.b  (a0)+,d0        ; read first byte
000013C4                             
000013C4                            @ChkEnd:
000013C4 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013C8 6600                           bne.s   @NewPalIndex        ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            @NewPalIndex:
000013CC 3E00                           move.w  d0,d7
000013CE                             
000013CE                            @ItemLoop:
000013CE 1018                           move.b  (a0)+,d0        ; read next byte
000013D0 6BF2                           bmi.s   @ChkEnd         ; ~~
000013D2 1200                           move.b  d0,d1
000013D4 0247 000F                      andi.w  #$F,d7          ; get palette index
000013D8 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013DC 8E41                           or.w    d1,d7           ; combine the two
000013DE 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013E2 1200                           move.b  d0,d1
000013E4 E149                           lsl.w   #8,d1
000013E6 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013E8 7208                           moveq   #8,d1
000013EA 9240                           sub.w   d0,d1           ; is the code 8 bits long?
000013EC 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
000013EE 1018                           move.b  (a0)+,d0        ; get code
000013F0 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
000013F2 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
000013F6 60D6                           bra.s   @ItemLoop       ; repeat
000013F8                            ; ---------------------------------------------------------------------------
000013F8                             
000013F8                            @ItemShortCode:
000013F8 1018                           move.b  (a0)+,d0        ; get code
000013FA E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
000013FC D040                           add.w   d0,d0           ; get index into code table
000013FE 7A01                           moveq   #1,d5
00001400 E36D                           lsl.w   d1,d5
00001402 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001404 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001408                             
00001408                            @ItemShortCodeLoop:
00001408 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000140A 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
0000140E 60BE                           bra.s   @ItemLoop
00001410                            
00001410                            ; ===============================================================
00001410                            ; ---------------------------------------------------------------
00001410                            ; uncompressed art to VRAM loader
00001410                            ; ---------------------------------------------------------------
00001410                            ; INPUT:
00001410                            ;       a0      - Source Offset
00001410                            ;   d0  - length in tiles
00001410                            ; ---------------------------------------------------------------
00001410                            LoadUncArt:
00001410 46FC 2700                          move    #$2700,sr   ; disable interrupts
00001414 4DF9 00C0 0000                     lea $C00000.l,a6    ; get VDP data port
0000141A                             
0000141A                            LoadArt_Loop:
0000141A 2C98                               move.l  (a0)+,(a6)  ; transfer 4 bytes
0000141C 2C98                               move.l  (a0)+,(a6)  ; transfer 4 more bytes
0000141E 2C98                               move.l  (a0)+,(a6)  ; and so on and so forth
00001420 2C98                               move.l  (a0)+,(a6)  ;
00001422 2C98                               move.l  (a0)+,(a6)  ;
00001424 2C98                               move.l  (a0)+,(a6)  ;
00001426 2C98                               move.l  (a0)+,(a6)  ; in total transfer 32 bytes
00001428 2C98                               move.l  (a0)+,(a6)  ; which is 1 full tile
0000142A                             
0000142A 51C8 FFEE                          dbf d0, LoadArt_Loop; loop until d0 = 0
0000142E 46FC 2300                          move    #$2300,sr   ; enable interrupts
00001432 4E75                               rts	
00001434                            
00001434                            ; ---------------------------------------------------------------------------
00001434                            ; Subroutine to	load pattern load cues
00001434                            ; ---------------------------------------------------------------------------
00001434                            
00001434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001434                            
00001434                            
00001434                            LoadPLC:
00001434 48E7 0060                  		movem.l	a1-a2,-(sp)
00001438 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000143E D040                       		add.w	d0,d0
00001440 3031 0000                  		move.w	(a1,d0.w),d0
00001444 43F1 0000                  		lea	(a1,d0.w),a1
00001448 45F8 F680                  		lea	($FFFFF680).w,a2
0000144C                            
0000144C                            loc_1598:
0000144C 4A92                       		tst.l	(a2)
0000144E 6700                       		beq.s	loc_15A0
00001450 5C4A                       		addq.w	#6,a2
00001452 60F8                       		bra.s	loc_1598
00001454                            ; ===========================================================================
00001454                            
00001454                            loc_15A0:				; XREF: LoadPLC
00001454 3019                       		move.w	(a1)+,d0
00001456 6B00                       		bmi.s	loc_15AC
00001458                            
00001458                            loc_15A4:
00001458 24D9                       		move.l	(a1)+,(a2)+
0000145A 34D9                       		move.w	(a1)+,(a2)+
0000145C 51C8 FFFA                  		dbf	d0,loc_15A4
00001460                            
00001460                            loc_15AC:
00001460 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001464 4E75                       		rts	
00001466                            ; End of function LoadPLC
00001466                            
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            
00001466                            LoadPLC2:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1
0000147A 6100                       		bsr.s	ClearPLC
0000147C 45F8 F680                  		lea	($FFFFF680).w,a2
00001480 3019                       		move.w	(a1)+,d0
00001482 6B00                       		bmi.s	loc_15D8
00001484                            
00001484                            loc_15D0:
00001484 24D9                       		move.l	(a1)+,(a2)+
00001486 34D9                       		move.w	(a1)+,(a2)+
00001488 51C8 FFFA                  		dbf	d0,loc_15D0
0000148C                            
0000148C                            loc_15D8:
0000148C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001490 4E75                       		rts	
00001492                            ; End of function LoadPLC2
00001492                            
00001492                            ; ---------------------------------------------------------------------------
00001492                            ; Subroutine to	clear the pattern load cues
00001492                            ; ---------------------------------------------------------------------------
00001492                            
00001492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001492                            
00001492                            
00001492                            ClearPLC:				; XREF: LoadPLC2
00001492 45F8 F680                  		lea	($FFFFF680).w,a2
00001496 701F                       		moveq	#$1F,d0
00001498                            
00001498                            ClearPLC_Loop:
00001498 429A                       		clr.l	(a2)+
0000149A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000149E 4E75                       		rts	
000014A0                            ; End of function ClearPLC
000014A0                            
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            ; Subroutine to	use graphics listed in a pattern load cue
000014A0                            ; ---------------------------------------------------------------------------
000014A0                            
000014A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014A0                            
000014A0                            
000014A0                            RunPLC_RAM:				; XREF: Pal_FadeTo
000014A0 4AB8 F680                  		tst.l	($FFFFF680).w
000014A4 6700                       		beq.s	locret_1640
000014A6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014AA 6600                       		bne.s	locret_1640
000014AC 2078 F680                  		movea.l	($FFFFF680).w,a0
000014B0 47F9 0000 1396             		lea	(loc_1502).l,a3
000014B6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014BA 3418                       		move.w	(a0)+,d2
000014BC 6A00                       		bpl.s	loc_160E
000014BE D6FC 000A                  		adda.w	#$A,a3
000014C2                            
000014C2                            loc_160E:
000014C2 0242 7FFF                  		andi.w	#$7FFF,d2
000014C6 6100 FEFA                  		bsr.w	NemDec4
000014CA 1A18                       		move.b	(a0)+,d5
000014CC E145                       		asl.w	#8,d5
000014CE 1A18                       		move.b	(a0)+,d5
000014D0 7C10                       		moveq	#$10,d6
000014D2 7000                       		moveq	#0,d0
000014D4 21C8 F680                  		move.l	a0,($FFFFF680).w
000014D8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000014DC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000014E0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000014E4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000014E8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000014EC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000014F0 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000014F4                            		
000014F4                            locret_1640:
000014F4 4E75                       		rts	
000014F6                            ; End of function RunPLC_RAM
000014F6                            
000014F6                            
000014F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014F6                            
000014F6                            
000014F6                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000014F6 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000014FA 6700 0000                  		beq.w	locret_16DA
000014FE 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001504 7000                       		moveq	#0,d0
00001506 3038 F684                  		move.w	($FFFFF684).w,d0
0000150A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001510 6000                       		bra.s	loc_1676
00001512                            ; End of function sub_1642
00001512                            
00001512                            
00001512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001512                            
00001512                            
00001512                            sub_165E:				; XREF: Demo_Time
00001512 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001516 6700                       		beq.s	locret_16DA
00001518 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000151E 7000                       		moveq	#0,d0
00001520 3038 F684                  		move.w	($FFFFF684).w,d0
00001524 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000152A                            
0000152A                            loc_1676:				; XREF: sub_1642
0000152A 49F9 00C0 0004             		lea	($C00004).l,a4
00001530 E588                       		lsl.l	#2,d0
00001532 E448                       		lsr.w	#2,d0
00001534 0040 4000                  		ori.w	#$4000,d0
00001538 4840                       		swap	d0
0000153A 2880                       		move.l	d0,(a4)
0000153C 594C                       		subq.w	#4,a4
0000153E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001542 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001546 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000154A 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000154E 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001552 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001556 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000155A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000155E                            
0000155E                            loc_16AA:				; XREF: sub_165E
0000155E 3A7C 0008                  		movea.w	#8,a5
00001562 6100 FDFC                  		bsr.w	NemDec3
00001566 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000156A 6700                       		beq.s	loc_16DC
0000156C 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001570 66EC                       		bne.s	loc_16AA
00001572 21C8 F680                  		move.l	a0,($FFFFF680).w
00001576 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000157A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000157E 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001582 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001586 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000158A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000158E                            
0000158E                            locret_16DA:				; XREF: sub_1642
0000158E 4E75                       		rts	
00001590                            ; ===========================================================================
00001590                            
00001590                            loc_16DC:				; XREF: sub_165E
00001590 41F8 F680                  		lea	($FFFFF680).w,a0
00001594 7015                       		moveq	#$15,d0
00001596                            
00001596                            loc_16E2:				; XREF: sub_165E
00001596 20E8 0006                  		move.l	6(a0),(a0)+
0000159A 51C8 FFFA                  		dbf	d0,loc_16E2
0000159E 4E75                       		rts	
000015A0                            ; End of function sub_165E
000015A0                            
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Subroutine to	execute	the pattern load cue
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A0                            
000015A0                            
000015A0                            RunPLC_ROM:
000015A0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015A6 D040                       		add.w	d0,d0
000015A8 3031 0000                  		move.w	(a1,d0.w),d0
000015AC 43F1 0000                  		lea	(a1,d0.w),a1
000015B0 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000015B2                            
000015B2                            RunPLC_Loop:
000015B2 2059                       		movea.l	(a1)+,a0	; get art pointer
000015B4 7000                       		moveq	#0,d0
000015B6 3019                       		move.w	(a1)+,d0	; get VRAM address
000015B8 E588                       		lsl.l	#2,d0		; divide address by $20
000015BA E448                       		lsr.w	#2,d0
000015BC 0040 4000                  		ori.w	#$4000,d0
000015C0 4840                       		swap	d0
000015C2 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000015C8 6100 FD1E                  		bsr.w	NemDec		; decompress
000015CC 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000015D0 4E75                       		rts	
000015D2                            ; End of function RunPLC_ROM
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Enigma decompression algorithm
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            EniDec:
000015D2 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000015D6 3640                       		movea.w	d0,a3
000015D8 1018                       		move.b	(a0)+,d0
000015DA 4880                       		ext.w	d0
000015DC 3A40                       		movea.w	d0,a5
000015DE 1818                       		move.b	(a0)+,d4
000015E0 E70C                       		lsl.b	#3,d4
000015E2 3458                       		movea.w	(a0)+,a2
000015E4 D4CB                       		adda.w	a3,a2
000015E6 3858                       		movea.w	(a0)+,a4
000015E8 D8CB                       		adda.w	a3,a4
000015EA 1A18                       		move.b	(a0)+,d5
000015EC E145                       		asl.w	#8,d5
000015EE 1A18                       		move.b	(a0)+,d5
000015F0 7C10                       		moveq	#$10,d6
000015F2                            
000015F2                            loc_173E:				; XREF: loc_1768
000015F2 7007                       		moveq	#7,d0
000015F4 3E06                       		move.w	d6,d7
000015F6 9E40                       		sub.w	d0,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0241 007F                  		andi.w	#$7F,d1
00001600 3401                       		move.w	d1,d2
00001602 0C41 0040                  		cmpi.w	#$40,d1
00001606 6400                       		bcc.s	loc_1758
00001608 7006                       		moveq	#6,d0
0000160A E24A                       		lsr.w	#1,d2
0000160C                            
0000160C                            loc_1758:
0000160C 6100 0000                  		bsr.w	sub_188C
00001610 0242 000F                  		andi.w	#$F,d2
00001614 E849                       		lsr.w	#4,d1
00001616 D241                       		add.w	d1,d1
00001618 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000161C                            ; End of function EniDec
0000161C                            
0000161C                            ; ===========================================================================
0000161C                            
0000161C                            loc_1768:				; XREF: loc_17B4
0000161C 32CA                       		move.w	a2,(a1)+
0000161E 524A                       		addq.w	#1,a2
00001620 51CA FFFA                  		dbf	d2,loc_1768
00001624 60CC                       		bra.s	loc_173E
00001626                            ; ===========================================================================
00001626                            
00001626                            loc_1772:				; XREF: loc_17B4
00001626 32CC                       		move.w	a4,(a1)+
00001628 51CA FFFC                  		dbf	d2,loc_1772
0000162C 60C4                       		bra.s	loc_173E
0000162E                            ; ===========================================================================
0000162E                            
0000162E                            loc_177A:				; XREF: loc_17B4
0000162E 6100 0000                  		bsr.w	loc_17DC
00001632                            
00001632                            loc_177E:
00001632 32C1                       		move.w	d1,(a1)+
00001634 51CA FFFC                  		dbf	d2,loc_177E
00001638 60B8                       		bra.s	loc_173E
0000163A                            ; ===========================================================================
0000163A                            
0000163A                            loc_1786:				; XREF: loc_17B4
0000163A 6100 0000                  		bsr.w	loc_17DC
0000163E                            
0000163E                            loc_178A:
0000163E 32C1                       		move.w	d1,(a1)+
00001640 5241                       		addq.w	#1,d1
00001642 51CA FFFA                  		dbf	d2,loc_178A
00001646 60AA                       		bra.s	loc_173E
00001648                            ; ===========================================================================
00001648                            
00001648                            loc_1794:				; XREF: loc_17B4
00001648 6100 0000                  		bsr.w	loc_17DC
0000164C                            
0000164C                            loc_1798:
0000164C 32C1                       		move.w	d1,(a1)+
0000164E 5341                       		subq.w	#1,d1
00001650 51CA FFFA                  		dbf	d2,loc_1798
00001654 609C                       		bra.s	loc_173E
00001656                            ; ===========================================================================
00001656                            
00001656                            loc_17A2:				; XREF: loc_17B4
00001656 0C42 000F                  		cmpi.w	#$F,d2
0000165A 6700                       		beq.s	loc_17C4
0000165C                            
0000165C                            loc_17A8:
0000165C 6100 0000                  		bsr.w	loc_17DC
00001660 32C1                       		move.w	d1,(a1)+
00001662 51CA FFF8                  		dbf	d2,loc_17A8
00001666 608A                       		bra.s	loc_173E
00001668                            ; ===========================================================================
00001668                            
00001668                            loc_17B4:				; XREF: EniDec
00001668 60B2                       		bra.s	loc_1768
0000166A                            ; ===========================================================================
0000166A 60B0                       		bra.s	loc_1768
0000166C                            ; ===========================================================================
0000166C 60B8                       		bra.s	loc_1772
0000166E                            ; ===========================================================================
0000166E 60B6                       		bra.s	loc_1772
00001670                            ; ===========================================================================
00001670 60BC                       		bra.s	loc_177A
00001672                            ; ===========================================================================
00001672 60C6                       		bra.s	loc_1786
00001674                            ; ===========================================================================
00001674 60D2                       		bra.s	loc_1794
00001676                            ; ===========================================================================
00001676 60DE                       		bra.s	loc_17A2
00001678                            ; ===========================================================================
00001678                            
00001678                            loc_17C4:				; XREF: loc_17A2
00001678 5348                       		subq.w	#1,a0
0000167A 0C46 0010                  		cmpi.w	#$10,d6
0000167E 6600                       		bne.s	loc_17CE
00001680 5348                       		subq.w	#1,a0
00001682                            
00001682                            loc_17CE:
00001682 3008                       		move.w	a0,d0
00001684 E248                       		lsr.w	#1,d0
00001686 6400                       		bcc.s	loc_17D6
00001688 5248                       		addq.w	#1,a0
0000168A                            
0000168A                            loc_17D6:
0000168A 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000168E 4E75                       		rts	
00001690                            ; ===========================================================================
00001690                            
00001690                            loc_17DC:				; XREF: loc_17A2
00001690 360B                       		move.w	a3,d3
00001692 1204                       		move.b	d4,d1
00001694 D201                       		add.b	d1,d1
00001696 6400                       		bcc.s	loc_17EE
00001698 5346                       		subq.w	#1,d6
0000169A 0D05                       		btst	d6,d5
0000169C 6700                       		beq.s	loc_17EE
0000169E 0043 8000                  		ori.w	#-$8000,d3
000016A2                            
000016A2                            loc_17EE:
000016A2 D201                       		add.b	d1,d1
000016A4 6400                       		bcc.s	loc_17FC
000016A6 5346                       		subq.w	#1,d6
000016A8 0D05                       		btst	d6,d5
000016AA 6700                       		beq.s	loc_17FC
000016AC 0643 4000                  		addi.w	#$4000,d3
000016B0                            
000016B0                            loc_17FC:
000016B0 D201                       		add.b	d1,d1
000016B2 6400                       		bcc.s	loc_180A
000016B4 5346                       		subq.w	#1,d6
000016B6 0D05                       		btst	d6,d5
000016B8 6700                       		beq.s	loc_180A
000016BA 0643 2000                  		addi.w	#$2000,d3
000016BE                            
000016BE                            loc_180A:
000016BE D201                       		add.b	d1,d1
000016C0 6400                       		bcc.s	loc_1818
000016C2 5346                       		subq.w	#1,d6
000016C4 0D05                       		btst	d6,d5
000016C6 6700                       		beq.s	loc_1818
000016C8 0043 1000                  		ori.w	#$1000,d3
000016CC                            
000016CC                            loc_1818:
000016CC D201                       		add.b	d1,d1
000016CE 6400                       		bcc.s	loc_1826
000016D0 5346                       		subq.w	#1,d6
000016D2 0D05                       		btst	d6,d5
000016D4 6700                       		beq.s	loc_1826
000016D6 0043 0800                  		ori.w	#$800,d3
000016DA                            
000016DA                            loc_1826:
000016DA 3205                       		move.w	d5,d1
000016DC 3E06                       		move.w	d6,d7
000016DE 9E4D                       		sub.w	a5,d7
000016E0 6400                       		bcc.s	loc_1856
000016E2 3C07                       		move.w	d7,d6
000016E4 0646 0010                  		addi.w	#$10,d6
000016E8 4447                       		neg.w	d7
000016EA EF69                       		lsl.w	d7,d1
000016EC 1A10                       		move.b	(a0),d5
000016EE EF3D                       		rol.b	d7,d5
000016F0 DE47                       		add.w	d7,d7
000016F2 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000016F6 D245                       		add.w	d5,d1
000016F8                            
000016F8                            loc_1844:				; XREF: loc_1868
000016F8 300D                       		move.w	a5,d0
000016FA D040                       		add.w	d0,d0
000016FC C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001700 D243                       		add.w	d3,d1
00001702 1A18                       		move.b	(a0)+,d5
00001704 E14D                       		lsl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_1856:				; XREF: loc_1826
0000170A 6700                       		beq.s	loc_1868
0000170C EE69                       		lsr.w	d7,d1
0000170E 300D                       		move.w	a5,d0
00001710 D040                       		add.w	d0,d0
00001712 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001716 D243                       		add.w	d3,d1
00001718 300D                       		move.w	a5,d0
0000171A 6000                       		bra.s	sub_188C
0000171C                            ; ===========================================================================
0000171C                            
0000171C                            loc_1868:				; XREF: loc_1856
0000171C 7C10                       		moveq	#$10,d6
0000171E                            
0000171E                            loc_186A:
0000171E 60D8                       		bra.s	loc_1844
00001720                            ; ===========================================================================
00001720 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001736 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001740                            
00001740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001740                            
00001740                            
00001740                            sub_188C:				; XREF: EniDec
00001740 9C40                       		sub.w	d0,d6
00001742 0C46 0009                  		cmpi.w	#9,d6
00001746 6400                       		bcc.s	locret_189A
00001748 5046                       		addq.w	#8,d6
0000174A E145                       		asl.w	#8,d5
0000174C 1A18                       		move.b	(a0)+,d5
0000174E                            
0000174E                            locret_189A:
0000174E 4E75                       		rts	
00001750                            ; End of function sub_188C
00001750                            
00001750                            ; ===========================================================================
00001750                            ; ---------------------------------------------------------------------------
00001750                            ; Kosinski decompression routine
00001750                            ;
00001750                            ; Created by vladikcomper
00001750                            ; Special thanks to flamewing and MarkeyJester
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            _Kos_RunBitStream macro
00001750                                dbf d2,@skip\@
00001750                                moveq   #7,d2
00001750                                move.b  d1,d0
00001750                                swap    d3
00001750                                bpl.s   @skip\@
00001750                                move.b  (a0)+,d0            ; get desc. bitfield
00001750                                move.b  (a0)+,d1            ;
00001750                                move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001750                                move.b  (a4,d1.w),d1            ;
00001750                            @skip\@
00001750                                endm
00001750                            ; ---------------------------------------------------------------------------
00001750                             
00001750                            KosDec:
00001750 7E07                           moveq   #7,d7
00001752 7000                           moveq   #0,d0
00001754 7200                           moveq   #0,d1
00001756 49FA 0000                      lea KosDec_ByteMap(pc),a4
0000175A 1018                           move.b  (a0)+,d0            ; get desc field low-byte
0000175C 1218                           move.b  (a0)+,d1            ; get desc field hi-byte
0000175E 1034 0000                      move.b  (a4,d0.w),d0            ; reload converted desc. bitfield from a LUT
00001762 1234 1000                      move.b  (a4,d1.w),d1            ;
00001766 7407                           moveq   #7,d2               ; set repeat count to 8
00001768 76FF                           moveq   #-1,d3              ; d3 will be desc field switcher
0000176A 4243                           clr.w   d3              ;
0000176C 6000                           bra.s   KosDec_FetchNewCode
0000176E                             
0000176E                            KosDec_FetchCodeLoop:
0000176E                                ; code 1 (Uncompressed byte)
0000176E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001786 12D8                           move.b  (a0)+,(a1)+
00001788                             
00001788                            KosDec_FetchNewCode:
00001788 D000                           add.b   d0,d0               ; get a bit from the bitstream
0000178A 65E2                           bcs.s   KosDec_FetchCodeLoop        ; if code = 0, branch
0000178C                             
0000178C                                ; codes 00 and 01
0000178C 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017A4 7800                           moveq   #0,d4               ; d4 will contain copy count
000017A6 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017A8 6500                           bcs.s   KosDec_Code_01
000017AA                             
000017AA                                ; code 00 (Dictionary ref. short)
000017AA 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017C2 D000                           add.b   d0,d0               ; get a bit from the bitstream
000017C4 D944                           addx.w  d4,d4
000017C6 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017DE D000                           add.b   d0,d0               ; get a bit from the bitstream
000017E0 D944                           addx.w  d4,d4
000017E2 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
000017FA 7AFF                           moveq   #-1,d5
000017FC 1A18                           move.b  (a0)+,d5            ; d5 = displacement
000017FE                             
000017FE                            KosDec_StreamCopy:
000017FE 47F1 5000                      lea (a1,d5),a3
00001802 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001804                             
00001804                            KosDec_copy:
00001804 12DB                           move.b  (a3)+,(a1)+
00001806 51CC FFFC                      dbf d4,KosDec_copy
0000180A 6000 FF7C                      bra.w   KosDec_FetchNewCode
0000180E                            ; ---------------------------------------------------------------------------
0000180E                            KosDec_Code_01:
0000180E                                ; code 01 (Dictionary ref. long / special)
0000180E 51CA 0000 7407 1001 4843+      _Kos_RunBitStream
00001826 1C18                           move.b  (a0)+,d6            ; d6 = %LLLLLLLL
00001828 1818                           move.b  (a0)+,d4            ; d4 = %HHHHHCCC
0000182A 7AFF                           moveq   #-1,d5
0000182C 1A04                           move.b  d4,d5               ; d5 = %11111111 HHHHHCCC
0000182E EB4D                           lsl.w   #5,d5               ; d5 = %111HHHHH CCC00000
00001830 1A06                           move.b  d6,d5               ; d5 = %111HHHHH LLLLLLLL
00001832 C847                           and.w   d7,d4               ; d4 = %00000CCC
00001834 66C8                           bne.s   KosDec_StreamCopy       ; if CCC=0, branch
00001836                             
00001836                                ; special mode (extended counter)
00001836 1818                           move.b  (a0)+,d4            ; read cnt
00001838 6700                           beq.s   KosDec_Quit         ; if cnt=0, quit decompression
0000183A 5304                           subq.b  #1,d4
0000183C 6700 FF4A                      beq.w   KosDec_FetchNewCode     ; if cnt=1, fetch a new code
00001840                             
00001840 47F1 5000                      lea (a1,d5),a3
00001844 12DB                           move.b  (a3)+,(a1)+         ; do 1 extra copy (to compensate for +1 to copy counter)
00001846 3C04                           move.w  d4,d6
00001848 4646                           not.w   d6
0000184A CC47                           and.w   d7,d6
0000184C DC46                           add.w   d6,d6
0000184E E64C                           lsr.w   #3,d4
00001850 4EFB 6000                      jmp KosDec_largecopy(pc,d6.w)
00001854                             
00001854                            KosDec_largecopy:
00001854                                rept 8
00001854                                move.b  (a3)+,(a1)+
00001854 12DB 12DB 12DB 12DB 12DB+      endr
00001864 51CC FFEE                      dbf d4,KosDec_largecopy
00001868 6000 FF1E                      bra.w   KosDec_FetchNewCode
0000186C                             
0000186C                            KosDec_Quit:
0000186C 4E75                           rts
0000186E                             
0000186E                            ; ---------------------------------------------------------------------------
0000186E                            ; A look-up table to invert bits order in desc. field bytes
0000186E                            ; ---------------------------------------------------------------------------
0000186E                             
0000186E                            KosDec_ByteMap:
0000186E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000187E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000188E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000189E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000018AE 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000018BE 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000018CE 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000018DE 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000018EE 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000018FE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
0000190E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
0000191E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
0000192E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
0000193E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
0000194E 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
0000195E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
0000196E                             
0000196E                            ; ===========================================================================
0000196E                            
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            ; Pallet cycling routine loading subroutine
0000196E                            ; ---------------------------------------------------------------------------
0000196E                            
0000196E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000196E                            
0000196E                            
0000196E                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000196E 7400                       		moveq	#0,d2
00001970 7000                       		moveq	#0,d0
00001972 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001976 D040                       		add.w	d0,d0		; multiply by 2
00001978 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000197C 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001980                            ; End of function PalCycle_Load
00001980                            
00001980                            ; ===========================================================================
00001980                            ; ---------------------------------------------------------------------------
00001980                            ; Pallet cycling routines
00001980                            ; ---------------------------------------------------------------------------
00001980 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001982 0000                       		dc.w PalCycle_LZ-PalCycle
00001984 0000                       		dc.w PalCycle_MZ-PalCycle
00001986 0000                       		dc.w PalCycle_SLZ-PalCycle
00001988 0000                       		dc.w PalCycle_SYZ-PalCycle
0000198A 0000                       		dc.w PalCycle_SBZ-PalCycle
0000198C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000198E                            
0000198E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000198E                            
0000198E                            
0000198E                            PalCycle_Title:				; XREF: TitleScreen
0000198E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001994 6000                       		bra.s	loc_196A
00001996                            ; ===========================================================================
00001996                            
00001996                            PalCycle_GHZ:				; XREF: PalCycle
00001996 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000199C                            
0000199C                            loc_196A:				; XREF: PalCycle_Title
0000199C 5378 F634                  		subq.w	#1,($FFFFF634).w
000019A0 6A00                       		bpl.s	locret_1990
000019A2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
000019A8 3038 F632                  		move.w	($FFFFF632).w,d0
000019AC 5278 F632                  		addq.w	#1,($FFFFF632).w
000019B0 0240 0003                  		andi.w	#3,d0
000019B4 E748                       		lsl.w	#3,d0
000019B6 43F8 FB50                  		lea	($FFFFFB50).w,a1
000019BA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019BE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019C2                            
000019C2                            locret_1990:
000019C2 4E75                       		rts	
000019C4                            ; End of function PalCycle_Title
000019C4                            
000019C4                            
000019C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019C4                            
000019C4                            
000019C4                            PalCycle_LZ:				; XREF: PalCycle
000019C4 5378 F634                  		subq.w	#1,($FFFFF634).w
000019C8 6A00                       		bpl.s	loc_19D8
000019CA 31FC 0002 F634             		move.w	#2,($FFFFF634).w
000019D0 3038 F632                  		move.w	($FFFFF632).w,d0
000019D4 5278 F632                  		addq.w	#1,($FFFFF632).w
000019D8 0240 0003                  		andi.w	#3,d0
000019DC E748                       		lsl.w	#3,d0
000019DE 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019EA 6600                       		bne.s	loc_19C0
000019EC 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019F2                            
000019F2                            loc_19C0:
000019F2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019F6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019FA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019FE 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001A02 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A06 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A0A                            
00001A0A                            loc_19D8:
00001A0A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001A0E 0240 0007                  		andi.w	#7,d0
00001A12 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001A16 6700                       		beq.s	locret_1A3A
00001A18 7201                       		moveq	#1,d1
00001A1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001A1E 6700                       		beq.s	loc_19F0
00001A20 4441                       		neg.w	d1
00001A22                            
00001A22                            loc_19F0:
00001A22 3038 F650                  		move.w	($FFFFF650).w,d0
00001A26 0240 0003                  		andi.w	#3,d0
00001A2A D041                       		add.w	d1,d0
00001A2C 0C40 0003                  		cmpi.w	#3,d0
00001A30 6500                       		bcs.s	loc_1A0A
00001A32 3200                       		move.w	d0,d1
00001A34 7000                       		moveq	#0,d0
00001A36 4A41                       		tst.w	d1
00001A38 6A00                       		bpl.s	loc_1A0A
00001A3A 7002                       		moveq	#2,d0
00001A3C                            
00001A3C                            loc_1A0A:
00001A3C 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A40 D040                       		add.w	d0,d0
00001A42 3200                       		move.w	d0,d1
00001A44 D040                       		add.w	d0,d0
00001A46 D041                       		add.w	d1,d0
00001A48 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A4E 43F8 FB78                  		lea	($FFFFFB78).w,a1
00001A52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A5A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A60 43F8 FAF8                  		lea	($FFFFFAF8).w,a1
00001A64 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A68 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A6C                            
00001A6C                            locret_1A3A:
00001A6C 4E75                       		rts	
00001A6E                            ; End of function PalCycle_LZ
00001A6E                            
00001A6E                            ; ===========================================================================
00001A6E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            PalCycle_MZ:				; XREF: PalCycle
00001A76 4E75                       		rts	
00001A78                            
00001A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A78                            
00001A78                            
00001A78                            PalCycle_SLZ:				; XREF: PalCycle
00001A78 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A7C 6A00                       		bpl.s	locret_1A80
00001A7E 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A84 3038 F632                  		move.w	($FFFFF632).w,d0
00001A88 5240                       		addq.w	#1,d0
00001A8A 0C40 0006                  		cmpi.w	#6,d0
00001A8E 6500                       		bcs.s	loc_1A60
00001A90 7000                       		moveq	#0,d0
00001A92                            
00001A92                            loc_1A60:
00001A92 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A96 3200                       		move.w	d0,d1
00001A98 D241                       		add.w	d1,d1
00001A9A D041                       		add.w	d1,d0
00001A9C D040                       		add.w	d0,d0
00001A9E 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001AA4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AA8 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001AAC 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001AB2                            
00001AB2                            locret_1A80:
00001AB2 4E75                       		rts	
00001AB4                            ; End of function PalCycle_SLZ
00001AB4                            
00001AB4                            
00001AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB4                            
00001AB4                            
00001AB4                            PalCycle_SYZ:				; XREF: PalCycle
00001AB4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AB8 6A00                       		bpl.s	locret_1AC6
00001ABA 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AC0 3038 F632                  		move.w	($FFFFF632).w,d0
00001AC4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AC8 0240 0003                  		andi.w	#3,d0
00001ACC E548                       		lsl.w	#2,d0
00001ACE 3200                       		move.w	d0,d1
00001AD0 D040                       		add.w	d0,d0
00001AD2 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AD8 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001ADC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE4 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AEA 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001AEE 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AF2 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AF8                            
00001AF8                            locret_1AC6:
00001AF8 4E75                       		rts	
00001AFA                            ; End of function PalCycle_SYZ
00001AFA                            
00001AFA                            
00001AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AFA                            
00001AFA                            
00001AFA                            PalCycle_SBZ:				; XREF: PalCycle
00001AFA 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001B00 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B04 6700                       		beq.s	loc_1ADA
00001B06 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B0C                            
00001B0C                            loc_1ADA:
00001B0C 43F8 F650                  		lea	($FFFFF650).w,a1
00001B10 321A                       		move.w	(a2)+,d1
00001B12                            
00001B12                            loc_1AE0:
00001B12 5311                       		subq.b	#1,(a1)
00001B14 6B00                       		bmi.s	loc_1AEA
00001B16 5489                       		addq.l	#2,a1
00001B18 5C8A                       		addq.l	#6,a2
00001B1A 6000                       		bra.s	loc_1B06
00001B1C                            ; ===========================================================================
00001B1C                            
00001B1C                            loc_1AEA:				; XREF: PalCycle_SBZ
00001B1C 12DA                       		move.b	(a2)+,(a1)+
00001B1E 1011                       		move.b	(a1),d0
00001B20 5200                       		addq.b	#1,d0
00001B22 B01A                       		cmp.b	(a2)+,d0
00001B24 6500                       		bcs.s	loc_1AF6
00001B26 7000                       		moveq	#0,d0
00001B28                            
00001B28                            loc_1AF6:
00001B28 12C0                       		move.b	d0,(a1)+
00001B2A 0240 000F                  		andi.w	#$F,d0
00001B2E D040                       		add.w	d0,d0
00001B30 305A                       		movea.w	(a2)+,a0
00001B32 365A                       		movea.w	(a2)+,a3
00001B34 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B38                            
00001B38                            loc_1B06:				; XREF: PalCycle_SBZ
00001B38 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B3C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B40 6A00                       		bpl.s	locret_1B64
00001B42 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B48 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B4E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B52 6700                       		beq.s	loc_1B2E
00001B54 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B5A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B60                            
00001B60                            loc_1B2E:
00001B60 72FF                       		moveq	#-1,d1
00001B62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B66 6700                       		beq.s	loc_1B38
00001B68 4441                       		neg.w	d1
00001B6A                            
00001B6A                            loc_1B38:
00001B6A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B6E 0240 0003                  		andi.w	#3,d0
00001B72 D041                       		add.w	d1,d0
00001B74 0C40 0003                  		cmpi.w	#3,d0
00001B78 6500                       		bcs.s	loc_1B52
00001B7A 3200                       		move.w	d0,d1
00001B7C 7000                       		moveq	#0,d0
00001B7E 4A41                       		tst.w	d1
00001B80 6A00                       		bpl.s	loc_1B52
00001B82 7002                       		moveq	#2,d0
00001B84                            
00001B84                            loc_1B52:
00001B84 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B88 D040                       		add.w	d0,d0
00001B8A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B8E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B92 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B96                            
00001B96                            locret_1B64:
00001B96 4E75                       		rts	
00001B98                            ; End of function PalCycle_SBZ
00001B98                            
00001B98                            ; ===========================================================================
00001B98                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001BB8                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BD8                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BF8                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001C0A                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001C1C                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C84                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001CA8                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001CC8                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CD8                            
00001CD8                            Pal_SBZCycList:
00001CD8                            	include "_inc\SBZ pallet script 1.asm"
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8                            ; Scrap Brain Zone 1 pallet cycling script
00001CD8                            ; ---------------------------------------------------------------------------
00001CD8 0008                       	dc.w 8			; number of entries - 1
00001CDA 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CDC 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CDE FB50                       	dc.w $FB50		; RAM address
00001CE0 0D08                       	dc.b $D, 8
00001CE2 0000                       	dc.w Pal_SBZCyc2
00001CE4 FB52                       	dc.w $FB52
00001CE6 0E08                       	dc.b $E, 8
00001CE8 0000                       	dc.w Pal_SBZCyc3
00001CEA FB6E                       	dc.w $FB6E
00001CEC 0B08                       	dc.b $B, 8
00001CEE 0000                       	dc.w Pal_SBZCyc5
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 1C10                       	dc.b $1C, $10
00001CFA 0000                       	dc.w Pal_SBZCyc7
00001CFC FB7E                       	dc.w $FB7E
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8
00001D02 FB78                       	dc.w $FB78
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+2
00001D08 FB7A                       	dc.w $FB7A
00001D0A 0303                       	dc.b 3,	3
00001D0C 0000                       	dc.w Pal_SBZCyc8+4
00001D0E FB7C                       	dc.w $FB7C
00001D10                            	even
00001D10                            	even
00001D10                            
00001D10                            Pal_SBZCycList2:
00001D10                            	include "_inc\SBZ pallet script 2.asm"
00001D10                            ; ---------------------------------------------------------------------------
00001D10                            ; Scrap Brain Zone 2 pallet cycling script
00001D10                            ; ---------------------------------------------------------------------------
00001D10 0006                       	dc.w 6
00001D12 0708                       	dc.b 7,	8
00001D14 0000                       	dc.w Pal_SBZCyc1
00001D16 FB50                       	dc.w $FB50
00001D18 0D08                       	dc.b $D, 8
00001D1A 0000                       	dc.w Pal_SBZCyc2
00001D1C FB52                       	dc.w $FB52
00001D1E 0908                       	dc.b 9,	8
00001D20 0000                       	dc.w Pal_SBZCyc9
00001D22 FB70                       	dc.w $FB70
00001D24 0708                       	dc.b 7,	8
00001D26 0000                       	dc.w Pal_SBZCyc6
00001D28 FB72                       	dc.w $FB72
00001D2A 0303                       	dc.b 3,	3
00001D2C 0000                       	dc.w Pal_SBZCyc8
00001D2E FB78                       	dc.w $FB78
00001D30 0303                       	dc.b 3,	3
00001D32 0000                       	dc.w Pal_SBZCyc8+2
00001D34 FB7A                       	dc.w $FB7A
00001D36 0303                       	dc.b 3,	3
00001D38 0000                       	dc.w Pal_SBZCyc8+4
00001D3A FB7C                       	dc.w $FB7C
00001D3C                            	even
00001D3C                            	even
00001D3C                            
00001D3C                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D4C                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D5C                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D6C                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D78                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D88                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D98                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001DB8                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001DC2                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DD2                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            ; Subroutine to	fade out and fade in
00001DDE                            ; ---------------------------------------------------------------------------
00001DDE                            
00001DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DDE                            
00001DDE                            
00001DDE                            Pal_FadeTo:
00001DDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001DE4                            
00001DE4                            Pal_FadeTo2:
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001DEE D0C0                       		adda.w	d0,a0
00001DF0 7200                       		moveq	#0,d1
00001DF2 1038 F627                  		move.b	($FFFFF627).w,d0
00001DF6                            
00001DF6                            Pal_ToBlack:
00001DF6 30C1                       		move.w	d1,(a0)+
00001DF8 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DFC                            
00001DFC 383C 0015                  		move.w	#$15,d4
00001E00                            
00001E00                            loc_1DCE:
00001E00 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E06 6100 0000                  		bsr.w	DelayProgram
00001E0A 6100                       		bsr.s	Pal_FadeIn
00001E0C 6100 F692                  		bsr.w	RunPLC_RAM
00001E10 51CC FFEE                  		dbf	d4,loc_1DCE
00001E14 4E75                       		rts	
00001E16                            ; End of function Pal_FadeTo
00001E16                            
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            ; Pallet fade-in subroutine
00001E16                            ; ---------------------------------------------------------------------------
00001E16                            
00001E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E16                            
00001E16                            
00001E16                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001E16 7000                       		moveq	#0,d0
00001E18 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E1C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001E20 1038 F626                  		move.b	($FFFFF626).w,d0
00001E24 D0C0                       		adda.w	d0,a0
00001E26 D2C0                       		adda.w	d0,a1
00001E28 1038 F627                  		move.b	($FFFFF627).w,d0
00001E2C                            
00001E2C                            loc_1DFA:
00001E2C 6100                       		bsr.s	Pal_AddColor
00001E2E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E32                            
00001E32                            locret_1E24:
00001E32 4E75                       		rts	
00001E34                            ; End of function Pal_FadeIn
00001E34                            
00001E34                            
00001E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E34                            
00001E34                            
00001E34                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E34 3419                       		move.w	(a1)+,d2
00001E36 3610                       		move.w	(a0),d3
00001E38 B642                       		cmp.w	d2,d3
00001E3A 6700                       		beq.s	loc_1E4E
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E42 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E44 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E4A 3203                       		move.w	d3,d1
00001E4C 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E50 B242                       		cmp.w	d2,d1
00001E52 6200                       		bhi.s	Pal_AddRed
00001E54 30C1                       		move.w	d1,(a0)+	; update pallet
00001E56 4E75                       		rts	
00001E58                            ; ===========================================================================
00001E58                            
00001E58                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E58 5458                       		addq.w	#2,(a0)+	; increase red value
00001E5A 4E75                       		rts	
00001E5C                            ; ===========================================================================
00001E5C                            
00001E5C                            loc_1E4E:				; XREF: Pal_AddColor
00001E5C 5448                       		addq.w	#2,a0
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_AddColor
00001E60                            
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_FadeFrom:
00001E60 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001E66                            
00001E66                            Pal_FadeFrom2:
00001E66 383C 0015                  		move.w	#$15,d4
00001E6A                            
00001E6A                            loc_1E5C:
00001E6A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E70 6100 0000                  		bsr.w	DelayProgram
00001E74 6100                       		bsr.s	Pal_FadeOut
00001E76 6100 F628                  		bsr.w	RunPLC_RAM
00001E7A 51CC FFEE                  		dbf	d4,loc_1E5C
00001E7E 4E75                       		rts	
00001E80                            ; End of function Pal_FadeFrom
00001E80                            
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            ; Pallet fade-out subroutine
00001E80                            ; ---------------------------------------------------------------------------
00001E80                            
00001E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E80                            
00001E80                            
00001E80                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E80 7000                       		moveq	#0,d0
00001E82 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E86 1038 F626                  		move.b	($FFFFF626).w,d0
00001E8A D0C0                       		adda.w	d0,a0
00001E8C 1038 F627                  		move.b	($FFFFF627).w,d0
00001E90                            
00001E90                            loc_1E82:
00001E90 6100                       		bsr.s	Pal_DecColor
00001E92 51C8 FFFC                  		dbf	d0,loc_1E82
00001E96                            
00001E96 7000                       		moveq	#0,d0
00001E98 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E9C 1038 F626                  		move.b	($FFFFF626).w,d0
00001EA0 D0C0                       		adda.w	d0,a0
00001EA2 1038 F627                  		move.b	($FFFFF627).w,d0
00001EA6                            
00001EA6                            loc_1E98:
00001EA6 6100                       		bsr.s	Pal_DecColor
00001EA8 51C8 FFFC                  		dbf	d0,loc_1E98
00001EAC 4E75                       		rts	
00001EAE                            ; End of function Pal_FadeOut
00001EAE                            
00001EAE                            
00001EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EAE                            
00001EAE                            
00001EAE                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EAE 3410                       		move.w	(a0),d2
00001EB0 6700                       		beq.s	loc_1ECC
00001EB2 3202                       		move.w	d2,d1
00001EB4 0241 000E                  		andi.w	#$E,d1
00001EB8 6700                       		beq.s	Pal_DecGreen
00001EBA 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 00E0                  		andi.w	#$E0,d1
00001EC4 6700                       		beq.s	Pal_DecBlue
00001EC6 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001ECC 3202                       		move.w	d2,d1
00001ECE 0241 0E00                  		andi.w	#$E00,d1
00001ED2 6700                       		beq.s	loc_1ECC
00001ED4 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ED8 4E75                       		rts	
00001EDA                            ; ===========================================================================
00001EDA                            
00001EDA                            loc_1ECC:				; XREF: Pal_DecColor
00001EDA 5448                       		addq.w	#2,a0
00001EDC 4E75                       		rts	
00001EDE                            ; End of function Pal_DecColor
00001EDE                            
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            ; Subroutine to	fill the pallet	with white (special stage)
00001EDE                            ; ---------------------------------------------------------------------------
00001EDE                            
00001EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EDE                            
00001EDE                            
00001EDE                            Pal_MakeWhite:				; XREF: SpecialStage
00001EDE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001EE4 7000                       		moveq	#0,d0
00001EE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001EEE D0C0                       		adda.w	d0,a0
00001EF0 323C 0EEE                  		move.w	#$EEE,d1
00001EF4 1038 F627                  		move.b	($FFFFF627).w,d0
00001EF8                            
00001EF8                            PalWhite_Loop:
00001EF8 30C1                       		move.w	d1,(a0)+
00001EFA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EFE 383C 0015                  		move.w	#$15,d4
00001F02                            
00001F02                            loc_1EF4:
00001F02 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F08 6100 0000                  		bsr.w	DelayProgram
00001F0C 6100                       		bsr.s	Pal_WhiteToBlack
00001F0E 6100 F590                  		bsr.w	RunPLC_RAM
00001F12 51CC FFEE                  		dbf	d4,loc_1EF4
00001F16 4E75                       		rts	
00001F18                            ; End of function Pal_MakeWhite
00001F18                            
00001F18                            
00001F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F18                            
00001F18                            
00001F18                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F18 7000                       		moveq	#0,d0
00001F1A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F1E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F22 1038 F626                  		move.b	($FFFFF626).w,d0
00001F26 D0C0                       		adda.w	d0,a0
00001F28 D2C0                       		adda.w	d0,a1
00001F2A 1038 F627                  		move.b	($FFFFF627).w,d0
00001F2E                            
00001F2E                            loc_1F20:
00001F2E 6100                       		bsr.s	Pal_DecColor2
00001F30 51C8 FFFC                  		dbf	d0,loc_1F20
00001F34                            
00001F34                            locret_1F4A:
00001F34 4E75                       		rts	
00001F36                            ; End of function Pal_WhiteToBlack
00001F36                            
00001F36                            
00001F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F36                            
00001F36                            
00001F36                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F36 3419                       		move.w	(a1)+,d2
00001F38 3610                       		move.w	(a0),d3
00001F3A B642                       		cmp.w	d2,d3
00001F3C 6700                       		beq.s	loc_1F78
00001F3E 3203                       		move.w	d3,d1
00001F40 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F44 6500                       		bcs.s	loc_1F64
00001F46 B242                       		cmp.w	d2,d1
00001F48 6500                       		bcs.s	loc_1F64
00001F4A 30C1                       		move.w	d1,(a0)+
00001F4C 4E75                       		rts	
00001F4E                            ; ===========================================================================
00001F4E                            
00001F4E                            loc_1F64:				; XREF: Pal_DecColor2
00001F4E 3203                       		move.w	d3,d1
00001F50 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F54 6500                       		bcs.s	loc_1F74
00001F56 B242                       		cmp.w	d2,d1
00001F58 6500                       		bcs.s	loc_1F74
00001F5A 30C1                       		move.w	d1,(a0)+
00001F5C 4E75                       		rts	
00001F5E                            ; ===========================================================================
00001F5E                            
00001F5E                            loc_1F74:				; XREF: loc_1F64
00001F5E 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F60 4E75                       		rts	
00001F62                            ; ===========================================================================
00001F62                            
00001F62                            loc_1F78:				; XREF: Pal_DecColor2
00001F62 5448                       		addq.w	#2,a0
00001F64 4E75                       		rts	
00001F66                            ; End of function Pal_DecColor2
00001F66                            
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            ; Subroutine to	make a white flash when	you enter a special stage
00001F66                            ; ---------------------------------------------------------------------------
00001F66                            
00001F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F66                            
00001F66                            
00001F66                            Pal_MakeFlash:				; XREF: SpecialStage
00001F66 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00001F6C 383C 0015                  		move.w	#$15,d4
00001F70                            
00001F70                            loc_1F86:
00001F70 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F76 6100 0000                  		bsr.w	DelayProgram
00001F7A 6100                       		bsr.s	Pal_ToWhite
00001F7C 6100 F522                  		bsr.w	RunPLC_RAM
00001F80 51CC FFEE                  		dbf	d4,loc_1F86
00001F84 4E75                       		rts	
00001F86                            ; End of function Pal_MakeFlash
00001F86                            
00001F86                            
00001F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F86                            
00001F86                            
00001F86                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F86 7000                       		moveq	#0,d0
00001F88 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F8C 1038 F626                  		move.b	($FFFFF626).w,d0
00001F90 D0C0                       		adda.w	d0,a0
00001F92 1038 F627                  		move.b	($FFFFF627).w,d0
00001F96                            
00001F96                            loc_1FAC:
00001F96 6100                       		bsr.s	Pal_AddColor2
00001F98 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FC2:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FB2 4E75                       		rts	
00001FB4                            ; End of function Pal_ToWhite
00001FB4                            
00001FB4                            
00001FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB4                            
00001FB4                            
00001FB4                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FB4 3410                       		move.w	(a0),d2
00001FB6 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FBA 6700                       		beq.s	loc_2006
00001FBC 3202                       		move.w	d2,d1
00001FBE 0241 000E                  		andi.w	#$E,d1
00001FC2 0C41 000E                  		cmpi.w	#$E,d1
00001FC6 6700                       		beq.s	loc_1FE2
00001FC8 5458                       		addq.w	#2,(a0)+	; increase red value
00001FCA 4E75                       		rts	
00001FCC                            ; ===========================================================================
00001FCC                            
00001FCC                            loc_1FE2:				; XREF: Pal_AddColor2
00001FCC 3202                       		move.w	d2,d1
00001FCE 0241 00E0                  		andi.w	#$E0,d1
00001FD2 0C41 00E0                  		cmpi.w	#$E0,d1
00001FD6 6700                       		beq.s	loc_1FF4
00001FD8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FDC 4E75                       		rts	
00001FDE                            ; ===========================================================================
00001FDE                            
00001FDE                            loc_1FF4:				; XREF: loc_1FE2
00001FDE 3202                       		move.w	d2,d1
00001FE0 0241 0E00                  		andi.w	#$E00,d1
00001FE4 0C41 0E00                  		cmpi.w	#$E00,d1
00001FE8 6700                       		beq.s	loc_2006
00001FEA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FEE 4E75                       		rts	
00001FF0                            ; ===========================================================================
00001FF0                            
00001FF0                            loc_2006:				; XREF: Pal_AddColor2
00001FF0 5448                       		addq.w	#2,a0
00001FF2 4E75                       		rts	
00001FF4                            ; End of function Pal_AddColor2
00001FF4                            
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            ; Pallet cycling routine - Sega	logo
00001FF4                            ; ---------------------------------------------------------------------------
00001FF4                            
00001FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF4                            
00001FF4                            
00001FF4                            PalCycle_Sega:				; XREF: SegaScreen
00001FF4 4A38 F635                  		tst.b	($FFFFF635).w
00001FF8 6600                       		bne.s	loc_206A
00001FFA 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FFE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002004 7205                       		moveq	#5,d1
00002006 3038 F632                  		move.w	($FFFFF632).w,d0
0000200A                            
0000200A                            loc_2020:
0000200A 6A00                       		bpl.s	loc_202A
0000200C 5448                       		addq.w	#2,a0
0000200E 5341                       		subq.w	#1,d1
00002010 5440                       		addq.w	#2,d0
00002012 60F6                       		bra.s	loc_2020
00002014                            ; ===========================================================================
00002014                            
00002014                            loc_202A:				; XREF: PalCycle_Sega
00002014 3400                       		move.w	d0,d2
00002016 0242 001E                  		andi.w	#$1E,d2
0000201A 6600                       		bne.s	loc_2034
0000201C 5440                       		addq.w	#2,d0
0000201E                            
0000201E                            loc_2034:
0000201E 0C40 0060                  		cmpi.w	#$60,d0
00002022 6400                       		bcc.s	loc_203E
00002024 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002028                            
00002028                            loc_203E:
00002028 5440                       		addq.w	#2,d0
0000202A 51C9 FFE8                  		dbf	d1,loc_202A
0000202E 3038 F632                  		move.w	($FFFFF632).w,d0
00002032 5440                       		addq.w	#2,d0
00002034 3400                       		move.w	d0,d2
00002036 0242 001E                  		andi.w	#$1E,d2
0000203A 6600                       		bne.s	loc_2054
0000203C 5440                       		addq.w	#2,d0
0000203E                            
0000203E                            loc_2054:
0000203E 0C40 0064                  		cmpi.w	#$64,d0
00002042 6D00                       		blt.s	loc_2062
00002044 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000204A 70F4                       		moveq	#-$C,d0
0000204C                            
0000204C                            loc_2062:
0000204C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002050 7001                       		moveq	#1,d0
00002052 4E75                       		rts	
00002054                            ; ===========================================================================
00002054                            
00002054                            loc_206A:				; XREF: loc_202A
00002054 5338 F634                  		subq.b	#1,($FFFFF634).w
00002058 6A00                       		bpl.s	loc_20BC
0000205A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002060 3038 F632                  		move.w	($FFFFF632).w,d0
00002064 0640 000C                  		addi.w	#$C,d0
00002068 0C40 0030                  		cmpi.w	#$30,d0
0000206C 6500                       		bcs.s	loc_2088
0000206E 7000                       		moveq	#0,d0
00002070 4E75                       		rts	
00002072                            ; ===========================================================================
00002072                            
00002072                            loc_2088:				; XREF: loc_206A
00002072 31C0 F632                  		move.w	d0,($FFFFF632).w
00002076 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000207C 41F0 0000                  		lea	(a0,d0.w),a0
00002080 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002084 22D8                       		move.l	(a0)+,(a1)+
00002086 22D8                       		move.l	(a0)+,(a1)+
00002088 3298                       		move.w	(a0)+,(a1)
0000208A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000208E 7000                       		moveq	#0,d0
00002090 722C                       		moveq	#$2C,d1
00002092                            
00002092                            loc_20A8:
00002092 3400                       		move.w	d0,d2
00002094 0242 001E                  		andi.w	#$1E,d2
00002098 6600                       		bne.s	loc_20B2
0000209A 5440                       		addq.w	#2,d0
0000209C                            
0000209C                            loc_20B2:
0000209C 3390 0000                  		move.w	(a0),(a1,d0.w)
000020A0 5440                       		addq.w	#2,d0
000020A2 51C9 FFEE                  		dbf	d1,loc_20A8
000020A6                            
000020A6                            loc_20BC:
000020A6 7001                       		moveq	#1,d0
000020A8 4E75                       		rts	
000020AA                            ; End of function PalCycle_Sega
000020AA                            
000020AA                            ; ===========================================================================
000020AA                            
000020AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000020B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000020E6                            
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            ; Subroutines to load pallets
000020E6                            ; ---------------------------------------------------------------------------
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            PalLoad1:
000020E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000020EC E748                       		lsl.w	#3,d0
000020EE D2C0                       		adda.w	d0,a1
000020F0 2459                       		movea.l	(a1)+,a2
000020F2 3659                       		movea.w	(a1)+,a3
000020F4 D6FC 0080                  		adda.w	#$80,a3
000020F8 3E19                       		move.w	(a1)+,d7
000020FA                            
000020FA                            loc_2110:
000020FA 26DA                       		move.l	(a2)+,(a3)+
000020FC 51CF FFFC                  		dbf	d7,loc_2110
00002100 4E75                       		rts	
00002102                            ; End of function PalLoad1
00002102                            
00002102                            
00002102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002102                            
00002102                            
00002102                            PalLoad2:
00002102 43F9 0000 0000             		lea	(PalPointers).l,a1
00002108 E748                       		lsl.w	#3,d0
0000210A D2C0                       		adda.w	d0,a1
0000210C 2459                       		movea.l	(a1)+,a2
0000210E 3659                       		movea.w	(a1)+,a3
00002110 3E19                       		move.w	(a1)+,d7
00002112                            
00002112                            loc_2128:
00002112 26DA                       		move.l	(a2)+,(a3)+
00002114 51CF FFFC                  		dbf	d7,loc_2128
00002118 4E75                       		rts	
0000211A                            ; End of function PalLoad2
0000211A                            
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            ; Underwater pallet loading subroutine
0000211A                            ; ---------------------------------------------------------------------------
0000211A                            
0000211A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211A                            
0000211A                            
0000211A                            PalLoad3_Water:
0000211A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002120 E748                       		lsl.w	#3,d0
00002122 D2C0                       		adda.w	d0,a1
00002124 2459                       		movea.l	(a1)+,a2
00002126 3659                       		movea.w	(a1)+,a3
00002128 96FC 0080                  		suba.w	#$80,a3
0000212C 3E19                       		move.w	(a1)+,d7
0000212E                            
0000212E                            loc_2144:
0000212E 26DA                       		move.l	(a2)+,(a3)+
00002130 51CF FFFC                  		dbf	d7,loc_2144
00002134 4E75                       		rts	
00002136                            ; End of function PalLoad3_Water
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            PalLoad4_Water:
00002136 43F9 0000 0000             		lea	(PalPointers).l,a1
0000213C E748                       		lsl.w	#3,d0
0000213E D2C0                       		adda.w	d0,a1
00002140 2459                       		movea.l	(a1)+,a2
00002142 3659                       		movea.w	(a1)+,a3
00002144 96FC 0100                  		suba.w	#$100,a3
00002148 3E19                       		move.w	(a1)+,d7
0000214A                            
0000214A                            loc_2160:
0000214A 26DA                       		move.l	(a2)+,(a3)+
0000214C 51CF FFFC                  		dbf	d7,loc_2160
00002150 4E75                       		rts	
00002152                            ; End of function PalLoad4_Water
00002152                            
00002152                            ; ===========================================================================
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152                            PalPointers:
00002152                            	include "_inc\Pallet pointers.asm"
00002152                            ; ---------------------------------------------------------------------------
00002152                            ; Pallet pointers
00002152                            ; ---------------------------------------------------------------------------
00002152 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002156 FB00                       	dc.w $FB00		; RAM address
00002158 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000215A 0000 0000                  	dc.l Pal_Title
0000215E FB00                       	dc.w $FB00
00002160 001F                       	dc.w $1F
00002162 0000 0000                  	dc.l Pal_LevelSel
00002166 FB00                       	dc.w $FB00
00002168 001F                       	dc.w $1F
0000216A 0000 0000                  	dc.l Pal_Sonic
0000216E FB00                       	dc.w $FB00
00002170 0007                       	dc.w 7
00002172 0000 0000                  	dc.l Pal_GHZ
00002176 FB20                       	dc.w $FB20
00002178 0017                       	dc.w $17
0000217A 0000 0000                  	dc.l Pal_LZ
0000217E FB20                       	dc.w $FB20
00002180 0017                       	dc.w $17
00002182 0000 0000                  	dc.l Pal_MZ
00002186 FB20                       	dc.w $FB20
00002188 0017                       	dc.w $17
0000218A 0000 0000                  	dc.l Pal_SLZ
0000218E FB20                       	dc.w $FB20
00002190 0017                       	dc.w $17
00002192 0000 0000                  	dc.l Pal_SYZ
00002196 FB20                       	dc.w $FB20
00002198 0017                       	dc.w $17
0000219A 0000 0000                  	dc.l Pal_SBZ1
0000219E FB20                       	dc.w $FB20
000021A0 0017                       	dc.w $17
000021A2 0000 0000                  	dc.l Pal_Special
000021A6 FB00                       	dc.w $FB00
000021A8 001F                       	dc.w $1F
000021AA 0000 0000                  	dc.l Pal_LZWater
000021AE FB00                       	dc.w $FB00
000021B0 001F                       	dc.w $1F
000021B2 0000 0000                  	dc.l Pal_SBZ3
000021B6 FB20                       	dc.w $FB20
000021B8 0017                       	dc.w $17
000021BA 0000 0000                  	dc.l Pal_SBZ3Water
000021BE FB00                       	dc.w $FB00
000021C0 001F                       	dc.w $1F
000021C2 0000 0000                  	dc.l Pal_SBZ2
000021C6 FB20                       	dc.w $FB20
000021C8 0017                       	dc.w $17
000021CA 0000 0000                  	dc.l Pal_LZSonWater
000021CE FB00                       	dc.w $FB00
000021D0 0007                       	dc.w 7
000021D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000021D6 FB00                       	dc.w $FB00
000021D8 0007                       	dc.w 7
000021DA 0000 0000                  	dc.l Pal_SpeResult
000021DE FB00                       	dc.w $FB00
000021E0 001F                       	dc.w $1F
000021E2 0000 0000                  	dc.l Pal_SpeContinue
000021E6 FB00                       	dc.w $FB00
000021E8 000F                       	dc.w $F
000021EA 0000 0000                  	dc.l Pal_Ending
000021EE FB00                       	dc.w $FB00
000021F0 001F                       	dc.w $1F
000021F2 0000 0000                  	dc.l Pal_Sonic
000021F6 FB20                       	dc.w $FB20
000021F8 0007                       	dc.w 7
000021F8 0007                       	dc.w 7
000021FA                            
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            ; Pallet data
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
0000227A                            Pal_Title:	incbin	pallet\title.bin
000022FA                            Pal_LevelSel:	incbin	pallet\levelsel.bin
0000237A                            Pal_Sonic:	incbin	pallet\sonic.bin
0000239A                            Pal_GHZ:	incbin	pallet\ghz.bin
000023FA                            Pal_LZ:		incbin	pallet\lz.bin
0000245A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024DA                            Pal_MZ:		incbin	pallet\mz.bin
0000253A                            Pal_SLZ:	incbin	pallet\slz.bin
0000259A                            Pal_SYZ:	incbin	pallet\syz.bin
000025FA                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000265A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026BA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000273A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
0000279A                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
0000281A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
0000283A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
0000285A                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028DA                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
0000291A                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
0000299A                            
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
0000299A                            ; ---------------------------------------------------------------------------
0000299A                            
0000299A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000299A                            
0000299A                            WaitVBlank:
0000299A                            DelayProgram:				; XREF: PauseGame
0000299A 46FC 2300                  		move	#$2300,sr
0000299E                            
0000299E                            loc_29AC:
0000299E 4A38 F62A                  		tst.b	($FFFFF62A).w
000029A2 66FA                       		bne.s	loc_29AC
000029A4 4E75                       		rts	
000029A6                            ; End of function DelayProgram
000029A6                            
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            ; Subroutine to	generate a pseudo-random number	in d0
000029A6                            ; ---------------------------------------------------------------------------
000029A6                            
000029A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A6                            
000029A6                            
000029A6                            RandomNumber:
000029A6 2238 F636                  		move.l	($FFFFF636).w,d1
000029AA 6600                       		bne.s	loc_29C0
000029AC 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029B2                            
000029B2                            loc_29C0:
000029B2 2001                       		move.l	d1,d0
000029B4 E581                       		asl.l	#2,d1
000029B6 D280                       		add.l	d0,d1
000029B8 E781                       		asl.l	#3,d1
000029BA D280                       		add.l	d0,d1
000029BC 3001                       		move.w	d1,d0
000029BE 4841                       		swap	d1
000029C0 D041                       		add.w	d1,d0
000029C2 3200                       		move.w	d0,d1
000029C4 4841                       		swap	d1
000029C6 21C1 F636                  		move.l	d1,($FFFFF636).w
000029CA 4E75                       		rts	
000029CC                            ; End of function RandomNumber
000029CC                            
000029CC                            
000029CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029CC                            
000029CC                            
000029CC                            CalcSine:
000029CC 0240 00FF                          andi.w  #$FF,d0
000029D0 5040                               addq.w  #8,d0
000029D2 D040                               add.w   d0,d0
000029D4 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000029D8 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000029DC 4E75                               rts
000029DE                            ; End of function CalcSine
000029DE                            
000029DE                            ; ===========================================================================
000029DE                            
000029DE                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C5E                            
00002C5E                            ; ===========================================================================
00002C5E 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C62 3200                       		move.w	d0,d1
00002C64 4841                       		swap	d1
00002C66 7000                       		moveq	#0,d0
00002C68 3200                       		move.w	d0,d1
00002C6A 7407                       		moveq	#7,d2
00002C6C                            
00002C6C                            loc_2C80:
00002C6C E599                       		rol.l	#2,d1
00002C6E D040                       		add.w	d0,d0
00002C70 5240                       		addq.w	#1,d0
00002C72 9240                       		sub.w	d0,d1
00002C74 6400                       		bcc.s	loc_2C9A
00002C76 D240                       		add.w	d0,d1
00002C78 5340                       		subq.w	#1,d0
00002C7A 51CA FFF0                  		dbf	d2,loc_2C80
00002C7E E248                       		lsr.w	#1,d0
00002C80 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C84 4E75                       		rts	
00002C86                            ; ===========================================================================
00002C86                            
00002C86                            loc_2C9A:
00002C86 5240                       		addq.w	#1,d0
00002C88 51CA FFE2                  		dbf	d2,loc_2C80
00002C8C E248                       		lsr.w	#1,d0
00002C8E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C92 4E75                       		rts	
00002C94                            
00002C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C94                            
00002C94                            
00002C94                            CalcAngle:
00002C94 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C98 7600                       		moveq	#0,d3
00002C9A 7800                       		moveq	#0,d4
00002C9C 3601                       		move.w	d1,d3
00002C9E 3802                       		move.w	d2,d4
00002CA0 8843                       		or.w	d3,d4
00002CA2 6700                       		beq.s	loc_2D04
00002CA4 3802                       		move.w	d2,d4
00002CA6 4A43                       		tst.w	d3
00002CA8 6A00 0000                  		bpl.w	loc_2CC2
00002CAC 4443                       		neg.w	d3
00002CAE                            
00002CAE                            loc_2CC2:
00002CAE 4A44                       		tst.w	d4
00002CB0 6A00 0000                  		bpl.w	loc_2CCA
00002CB4 4444                       		neg.w	d4
00002CB6                            
00002CB6                            loc_2CCA:
00002CB6 B843                       		cmp.w	d3,d4
00002CB8 6400 0000                  		bcc.w	loc_2CDC
00002CBC E18C                       		lsl.l	#8,d4
00002CBE 88C3                       		divu.w	d3,d4
00002CC0 7000                       		moveq	#0,d0
00002CC2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CC6 6000                       		bra.s	loc_2CE6
00002CC8                            ; ===========================================================================
00002CC8                            
00002CC8                            loc_2CDC:				; XREF: CalcAngle
00002CC8 E18B                       		lsl.l	#8,d3
00002CCA 86C4                       		divu.w	d4,d3
00002CCC 7040                       		moveq	#$40,d0
00002CCE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CD2                            
00002CD2                            loc_2CE6:
00002CD2 4A41                       		tst.w	d1
00002CD4 6A00 0000                  		bpl.w	loc_2CF2
00002CD8 4440                       		neg.w	d0
00002CDA 0640 0080                  		addi.w	#$80,d0
00002CDE                            
00002CDE                            loc_2CF2:
00002CDE 4A42                       		tst.w	d2
00002CE0 6A00 0000                  		bpl.w	loc_2CFE
00002CE4 4440                       		neg.w	d0
00002CE6 0640 0100                  		addi.w	#$100,d0
00002CEA                            
00002CEA                            loc_2CFE:
00002CEA 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CEE 4E75                       		rts	
00002CF0                            ; ===========================================================================
00002CF0                            
00002CF0                            loc_2D04:				; XREF: CalcAngle
00002CF0 303C 0040                  		move.w	#$40,d0
00002CF4 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CF8 4E75                       		rts	
00002CFA                            ; End of function CalcAngle
00002CFA                            
00002CFA                            ; ===========================================================================
00002CFA                            
00002CFA                            Angle_Data:	incbin	misc\angles.bin
00002DFC                            
00002DFC                            ; ===========================================================================
00002DFC                            
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            ; Sega screen
00002DFC                            ; ---------------------------------------------------------------------------
00002DFC                            
00002DFC                            SegaScreen:				; XREF: GameModeArray
00002DFC 103C 00E4                  		move.b	#$E4,d0
00002E00 6100 E3F4                  		bsr.w	PlaySound_Special ; stop music
00002E04 6100 E68C                  		bsr.w	ClearPLC
00002E08 6100 F056                  		bsr.w	Pal_FadeFrom
00002E0C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E12 3CBC 8004                  		move.w	#$8004,(a6)
00002E16 3CBC 8230                  		move.w	#$8230,(a6)
00002E1A 3CBC 8407                  		move.w	#$8407,(a6)
00002E1E 3CBC 8700                  		move.w	#$8700,(a6)
00002E22 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E26 4238 F64E                  		clr.b	($FFFFF64E).w
00002E2A 46FC 2700                  		move	#$2700,sr
00002E2E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E32 0200 00BF                  		andi.b	#$BF,d0
00002E36 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E3C 6100 E292                  		bsr.w	ClearScreen
00002E40 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E4A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E50 6100 E496                  		bsr.w	NemDec
00002E54 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E5A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E60 303C 0000                  		move.w	#0,d0
00002E64 6100 E76C                  		bsr.w	EniDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 203C 6510 0003             		move.l	#$65100003,d0
00002E74 7217                       		moveq	#$17,d1
00002E76 7407                       		moveq	#7,d2
00002E78 6100 E444                  		bsr.w	ShowVDPGraphics
00002E7C 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E82 203C 4000 0003             		move.l	#$40000003,d0
00002E88 7227                       		moveq	#$27,d1
00002E8A 741B                       		moveq	#$1B,d2
00002E8C 6100 E430                  		bsr.w	ShowVDPGraphics
00002E90 7000                       		moveq	#0,d0
00002E92 6100 F26E                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E96 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E9C 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EA2 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EA8 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EAE 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00002EB4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EB8 0000 0040                  		ori.b	#$40,d0
00002EBC 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EC2                            
00002EC2                            Sega_WaitPallet:
00002EC2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EC8 6100 FAD0                  		bsr.w	DelayProgram
00002ECC 6100 F126                  		bsr.w	PalCycle_Sega
00002ED0 66F0                       		bne.s	Sega_WaitPallet
00002ED2                            
00002ED2 103C 00E1                  		move.b	#$E1,d0
00002ED6 6100 E31E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EDA 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EE0 6100 FAB8                  		bsr.w	DelayProgram
00002EE4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EEA                            
00002EEA                            Sega_WaitEnd:
00002EEA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EF0 6100 FAA8                  		bsr.w	DelayProgram
00002EF4 4A78 F614                  		tst.w	($FFFFF614).w
00002EF8 6700                       		beq.s	Sega_GotoTitle
00002EFA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F00 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F02                            
00002F02                            Sega_GotoTitle:
00002F02 11FC 0001 F601             		move.b	#1,(FromSEGA).w
00002F08 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F0E 103C 00E4                  		move.b	#$E4,d0
00002F12 6100 E2E2                  		bsr.w	PlaySound_Special ; stop music
00002F16 6100 E57A                  		bsr.w	ClearPLC
00002F1A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002F20 6100 EF44                  		bsr.w	Pal_FadeFrom2
00002F24 46FC 2700                  		move	#$2700,sr
00002F28 6100 E234                  		bsr.w	SoundDriverLoad
00002F2C 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F32 3CBC 8004                  		move.w	#$8004,(a6)
00002F36 3CBC 8230                  		move.w	#$8230,(a6)
00002F3A 3CBC 8407                  		move.w	#$8407,(a6)
00002F3E 3CBC 9001                  		move.w	#$9001,(a6)
00002F42 3CBC 9200                  		move.w	#$9200,(a6)
00002F46 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4A 3CBC 8720                  		move.w	#$8720,(a6)
00002F4E 4238 F64E                  		clr.b	($FFFFF64E).w
00002F52 6100 E17C                  		bsr.w	ClearScreen
00002F56 4EB9 0000 0000             		jsr SHC2021
00002F5C 6000                       		bra.s	TitleSkip
00002F5E                            ; ===========================================================================
00002F5E                            
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            ; Title	screen
00002F5E                            ; ---------------------------------------------------------------------------
00002F5E                            
00002F5E                            TitleScreen:				; XREF: GameModeArray
00002F5E 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00002F64 103C 00E4                  		move.b	#$E4,d0
00002F68 6100 E28C                  		bsr.w	PlaySound_Special ; stop music
00002F6C 6100 E524                  		bsr.w	ClearPLC
00002F70 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00002F76 6100 EEEE                  		bsr.w	Pal_FadeFrom2
00002F7A 46FC 2700                  		move	#$2700,sr
00002F7E 6100 E1DE                  		bsr.w	SoundDriverLoad
00002F82 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F88 3CBC 8004                  		move.w	#$8004,(a6)
00002F8C 3CBC 8230                  		move.w	#$8230,(a6)
00002F90 3CBC 8407                  		move.w	#$8407,(a6)
00002F94 3CBC 9001                  		move.w	#$9001,(a6)
00002F98 3CBC 9200                  		move.w	#$9200,(a6)
00002F9C 3CBC 8B03                  		move.w	#$8B03,(a6)
00002FA0 3CBC 8720                  		move.w	#$8720,(a6)
00002FA4 4238 F64E                  		clr.b	($FFFFF64E).w
00002FA8 6100 E126                  		bsr.w	ClearScreen
00002FAC                            
00002FAC                            TitleSkip:
00002FAC 43F8 D000                  		lea	($FFFFD000).w,a1
00002FB0 7000                       		moveq	#0,d0
00002FB2 323C 07FF                  		move.w	#$7FF,d1
00002FB6                            
00002FB6                            Title_ClrObjRam:
00002FB6 22C0                       		move.l	d0,(a1)+
00002FB8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002FBC                            
00002FBC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002FC6 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002FCC 6100 E31A                  		bsr.w	NemDec
00002FD0 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002FDA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002FE0 6100 E306                  		bsr.w	NemDec
00002FE4 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FEA 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002FF0 303C 0000                  		move.w	#0,d0
00002FF4 6100 E5DC                  		bsr.w	EniDec
00002FF8 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FFE 203C 4000 0003             		move.l	#$40000003,d0
00003004 7227                       		moveq	#$27,d1
00003006 741B                       		moveq	#$1B,d2
00003008 6100 E2B4                  		bsr.w	ShowVDPGraphics
0000300C                            
0000300C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003010 7000                       		moveq	#0,d0
00003012 323C 001F                  		move.w	#$1F,d1
00003016                            
00003016                            Title_ClrPallet:
00003016 22C0                       		move.l	d0,(a1)+
00003018 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000301C                            
0000301C 7014                       		moveq	#$14,d0		; load Sonic's pallet
0000301E 6100 F0C6                  		bsr.w	PalLoad1
00003022 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003028 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
0000302E 4EB9 0000 0000             		jsr	ObjectsLoad
00003034 4EB9 0000 0000             		jsr	BuildSprites
0000303A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003040 4A38 F601                  		tst.b	(FromSEGA).w
00003044 6700 0000                  		beq.w	@skip
00003048 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000304E                            
0000304E                            	@skip:
0000304E 6100 ED94                  		bsr.w	Pal_FadeTo2
00003052 46FC 2700                  		move	#$2700,sr
00003056 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003060 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003066 6100 E280                  		bsr.w	NemDec
0000306A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003074 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000307A 6100 E26C                  		bsr.w	NemDec
0000307E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003088 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000308E 6100 E258                  		bsr.w	NemDec
00003092 4DF9 00C0 0000             		lea	($C00000).l,a6
00003098 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000030A0 4BF9 0000 0550             		lea	(Art_Text).l,a5
000030A6 323C 028F                  		move.w	#$28F,d1
000030AA                            
000030AA                            Title_LoadText:
000030AA 3C9D                       		move.w	(a5)+,(a6)
000030AC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000030B0                            
000030B0 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000030B6 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000030BC 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000030C2 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000030C8 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000030CE 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000030D4 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
000030DA 6100 0000                  		bsr.w	LevelSizeLoad
000030DE 6100 0000                  		bsr.w	DeformBgLayer
000030E2 43F8 B000                  		lea	($FFFFB000).w,a1
000030E6 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000030EC 303C 0000                  		move.w	#0,d0
000030F0 6100 E4E0                  		bsr.w	EniDec
000030F4 6100 0000                  		bsr.w	LevelLayoutLoad
000030F8 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000030FE 4A38 F601                  		tst.b	(FromSEGA).w
00003102 6700                       		beq.s	@notSEGA
00003104 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000310A                            
0000310A                            	@notSEGA:
0000310A 6100 ED5A                  		bsr.w	Pal_FadeFrom2
0000310E 46FC 2700                  		move	#$2700,sr
00003112 6100 DFBC                  		bsr.w	ClearScreen
00003116 4BF9 00C0 0004             		lea	($C00004).l,a5
0000311C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003122 47F8 F708                  		lea	($FFFFF708).w,a3
00003126 49F8 A440                  		lea	($FFFFA440).w,a4
0000312A 343C 6000                  		move.w	#$6000,d2
0000312E 6100 0000                  		bsr.w	LoadTilesFromStart2
00003132 43F9 00FF 0000             		lea	($FF0000).l,a1
00003138 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000313E 303C 0000                  		move.w	#0,d0
00003142 6100 E48E                  		bsr.w	EniDec
00003146 43F9 00FF 0000             		lea	($FF0000).l,a1
0000314C 203C 4206 0003             		move.l	#$42060003,d0
00003152 7221                       		moveq	#$21,d1
00003154 7415                       		moveq	#$15,d2
00003156 6100 E166                  		bsr.w	ShowVDPGraphics
0000315A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003164 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000316A 6100 E17C                  		bsr.w	NemDec
0000316E 7001                       		moveq	#1,d0		; load title screen pallet
00003170 6100 EF74                  		bsr.w	PalLoad1
00003174 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003178 6100 E07C                  		bsr.w	PlaySound_Special
0000317C 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003182                            		;move.b	#1,($FFFFFFE1).w ; enable slow-mo mode
00003182 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003188 43F8 D080                  		lea	($FFFFD080).w,a1
0000318C 7000                       		moveq	#0,d0
0000318E 323C 0007                  		move.w	#7,d1
00003192                            
00003192                            Title_ClrObjRam2:
00003192 22C0                       		move.l	d0,(a1)+
00003194 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003198                            
00003198 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000319E 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000031A4 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000031AA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000031B0 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000031B6 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000031BC 4EB9 0000 0000             		jsr	ObjectsLoad
000031C2 6100 0000                  		bsr.w	DeformBgLayer
000031C6 4EB9 0000 0000             		jsr	BuildSprites
000031CC 7000                       		moveq	#0,d0
000031CE 6100 E296                  		bsr.w	LoadPLC2
000031D2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000031D8 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000031DE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031E2 0000 0040                  		ori.b	#$40,d0
000031E6 33C0 00C0 0004             		move.w	d0,($C00004).l
000031EC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000031F2 4A38 F601                  		tst.b	(FromSEGA).w
000031F6 6700                       		beq.s	@notSEGA
000031F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000031FE 11FC 0000 F5C4             		move.b	#0,(SonimeSST+sonime_routine).w
00003204 11FC 0000 F601             		move.b	#0,(FromSEGA).w
0000320A                            
0000320A                            	@notSEGA:
0000320A 6100 EBD8                  		bsr.w	Pal_FadeTo2
0000320E                            
0000320E                            loc_317C:
0000320E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003214 6100 F784                  		bsr.w	DelayProgram
00003218 4EB9 0000 0000             		jsr	ObjectsLoad
0000321E 6100 0000                  		bsr.w	DeformBgLayer
00003222 4EB9 0000 0000             		jsr	BuildSprites
00003228 6100 E764                  		bsr.w	PalCycle_Title
0000322C 6100 E272                  		bsr.w	RunPLC_RAM
00003230 3038 D008                  		move.w	($FFFFD008).w,d0
00003234 5440                       		addq.w	#2,d0
00003236 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000323A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000323E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003240 6000 FD1C                  		bra.w	TitleScreen
00003244                            ; ===========================================================================
00003244                            
00003244                            Title_ChkRegion:
00003244 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003248 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000324A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003250 6000                       		bra.s	Title_EnterCheat
00003252                            ; ===========================================================================
00003252                            
00003252                            Title_RegionJ:				; XREF: Title_ChkRegion
00003252 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003258                            
00003258                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003258 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000325C D0C0                       		adda.w	d0,a0
0000325E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003262 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003266 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003268 6600                       		bne.s	loc_3210	; if not, branch
0000326A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
0000326E 4A00                       		tst.b	d0
00003270 6600                       		bne.s	Title_CountC
00003272 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003276 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000327A E249                       		lsr.w	#1,d1
0000327C 0241 0003                  		andi.w	#3,d1
00003280 6700                       		beq.s	Title_PlayRing
00003282 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003286 6A00                       		bpl.s	Title_PlayRing
00003288 7201                       		moveq	#1,d1
0000328A 1181 1001                  		move.b	d1,1(a0,d1.w)
0000328E                            
0000328E                            Title_PlayRing:
0000328E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003294 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003298 6100 DF5C                  		bsr.w	PlaySound_Special
0000329C 6000                       		bra.s	Title_CountC
0000329E                            ; ===========================================================================
0000329E                            
0000329E                            loc_3210:				; XREF: Title_EnterCheat
0000329E 4A00                       		tst.b	d0
000032A0 6700                       		beq.s	Title_CountC
000032A2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000032A8 6700                       		beq.s	Title_CountC
000032AA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000032B0                            
000032B0                            Title_CountC:
000032B0 1038 F605                  		move.b	($FFFFF605).w,d0
000032B4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000032B8 6700                       		beq.s	loc_3230	; if not, branch
000032BA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000032BE                            
000032BE                            loc_3230:
000032BE 4A78 F614                  		tst.w	($FFFFF614).w
000032C2 6700 0000                  		beq.w	Demo
000032C6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000032CC 6700 FF40                  		beq.w	loc_317C	; if not, branch
000032D0                            
000032D0                            Title_ChkLevSel:
000032D0 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000032D4 6700 0000                  		beq.w	PlayLevel	; if not, play level
000032D8 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000032DE 6700 0000                  		beq.w	PlayLevel	; if not, play level
000032E2 7002                       		moveq	#2,d0
000032E4 6100 EE1C                  		bsr.w	PalLoad2	; load level select pallet
000032E8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000032EC 7000                       		moveq	#0,d0
000032EE 323C 00DF                  		move.w	#$DF,d1
000032F2                            
000032F2                            Title_ClrScroll:
000032F2 22C0                       		move.l	d0,(a1)+
000032F4 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000032F8                            
000032F8 21C0 F616                  		move.l	d0,($FFFFF616).w
000032FC 46FC 2700                  		move	#$2700,sr
00003300 4DF9 00C0 0000             		lea	($C00000).l,a6
00003306 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003310 323C 03FF                  		move.w	#$3FF,d1
00003314                            
00003314                            Title_ClrVram:
00003314 2C80                       		move.l	d0,(a6)
00003316 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000331A                            
0000331A 6100 0000                  		bsr.w	LevSelTextLoad
0000331E                            
0000331E                            ; ---------------------------------------------------------------------------
0000331E                            ; Level	Select
0000331E                            ; ---------------------------------------------------------------------------
0000331E                            
0000331E                            LevelSelect:
0000331E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003324 6100 F674                  		bsr.w	DelayProgram
00003328 4EB9 0000 0000             		jsr		BuildSprites
0000332E 6100 0000                  		bsr.w	LevSelControls
00003332 6100 E16C                  		bsr.w	RunPLC_RAM
00003336 4AB8 F680                  		tst.l	($FFFFF680).w
0000333A 66E2                       		bne.s	LevelSelect
0000333C 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003342 67DA                       		beq.s	LevelSelect	; if not, branch
00003344 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003348 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000334C 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000334E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003352 0640 0080                  		addi.w	#$80,d0
00003356 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
0000335A 6700                       		beq.s	LevSel_NoCheat	; if not, branch
0000335C 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003360 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003362 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003366 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003368                            
00003368                            LevSel_NoCheat:
00003368 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
0000336C 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
0000336E 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003372 65AA                       		bcs.s	LevelSelect	; if yes, branch
00003374                            
00003374                            LevSel_PlaySnd:
00003374 6100 DE80                  		bsr.w	PlaySound_Special
00003378 60A4                       		bra.s	LevelSelect
0000337A                            ; ===========================================================================
0000337A                            
0000337A                            LevSel_Ending:				; XREF: LevelSelect
0000337A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003380 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003386                            	;	move.b	#0,($FFFFFE57).w ; clear emeralds
00003386 4E75                       		rts	
00003388                            ; ===========================================================================
00003388                            
00003388                            LevSel_Credits:				; XREF: LevelSelect
00003388 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000338E 103C 0091                  		move.b	#$91,d0
00003392 6100 DE62                  		bsr.w	PlaySound_Special ; play credits music
00003396 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000339C 4E75                       		rts	
0000339E                            ; ===========================================================================
0000339E                            
0000339E                            LevSel_Level_SS:			; XREF: LevelSelect
0000339E D040                       		add.w	d0,d0
000033A0 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000033A4 6B00 FF78                  		bmi.w	LevelSelect
000033A8 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000033AC 6600                       		bne.s	LevSel_Level	; if not, branch
000033AE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000033B4 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000033B8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000033BE 7000                       		moveq	#0,d0
000033C0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000033C4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000033C8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000033CC 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000033D0                            	;	move.l	#$00010203,($FFFFFE58).w ; clear emeralds
000033D0                            	;	move.l	#$04050000,($FFFFFE5C).w ; clear emeralds
000033D0 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)	
000033D8 4E75                       		rts	
000033DA                            ; ===========================================================================
000033DA                            ; ---------------------------------------------------------------------------
000033DA                            ; Level	select - level pointers
000033DA                            ; ---------------------------------------------------------------------------
000033DA                            LSelectPointers:
000033DA                            		incbin	misc\ls_point.bin
00003404                            		even
00003404                            
00003404                            LevSel_Level:				; XREF: LevSel_Level_SS
00003404 0240 3FFF                  		andi.w	#$3FFF,d0
00003408 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000340C                            
0000340C                            PlayLevel:				; XREF: ROM:00003246j ...
0000340C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003412 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003418 7000                       		moveq	#0,d0
0000341A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000341E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003422 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003426 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000342A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000342E                            	;	move.l	#$01020304,($FFFFFE58).w ; clear emeralds
0000342E                            	;	move.l	#$05000000,($FFFFFE5C).w ; clear emeralds
0000342E 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003432 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
0000343A 103C 00E0                  		move.b	#$E0,d0
0000343E 6100 DDB6                  		bsr.w	PlaySound_Special ; fade out music
00003442 4E75                       		rts	
00003444                            ; ===========================================================================
00003444                            ; ---------------------------------------------------------------------------
00003444                            ; Level	select codes
00003444                            ; ---------------------------------------------------------------------------
00003444                            LevelSelectCode_J:
00003444                            		incbin	misc\ls_jcode.bin
0000344A                            		even
0000344A                            
0000344A                            LevelSelectCode_US:
0000344A                            		incbin	misc\ls_ucode.bin
00003450                            		even
00003450                            ; ===========================================================================
00003450                            
00003450                            ; ---------------------------------------------------------------------------
00003450                            ; Demo mode
00003450                            ; ---------------------------------------------------------------------------
00003450                            
00003450                            Demo:					; XREF: TitleScreen
00003450 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003456                            
00003456                            loc_33B6:				; XREF: loc_33E4
00003456 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000345C 6100 F53C                  		bsr.w	DelayProgram
00003460 6100 0000                  		bsr.w	DeformBgLayer
00003464 6100 E508                  		bsr.w	PalCycle_Load
00003468 6100 E036                  		bsr.w	RunPLC_RAM
0000346C 3038 D008                  		move.w	($FFFFD008).w,d0
00003470 5440                       		addq.w	#2,d0
00003472 31C0 D008                  		move.w	d0,($FFFFD008).w
00003476 0C40 1C00                  		cmpi.w	#$1C00,d0
0000347A 6500                       		bcs.s	loc_33E4
0000347C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 0
00003482 4E75                       		rts	
00003484                            ; ===========================================================================
00003484                            
00003484                            loc_33E4:				; XREF: Demo
00003484 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000348A 6600 FE44                  		bne.w	Title_ChkLevSel	; if yes, branch
0000348E 4A78 F614                  		tst.w	($FFFFF614).w
00003492 6600 FFC2                  		bne.w	loc_33B6
00003496 103C 00E0                  		move.b	#$E0,d0
0000349A 6100 DD5A                  		bsr.w	PlaySound_Special ; fade out music
0000349E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000034A2 0240 0007                  		andi.w	#7,d0
000034A6 D040                       		add.w	d0,d0
000034A8 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000034AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000034B0 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000034B4 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000034BA 6500                       		bcs.s	loc_3422	; if yes, branch
000034BC 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000034C2                            
000034C2                            loc_3422:
000034C2 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000034C8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000034CE 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000034D2 6600                       		bne.s	Demo_Level	; if not, branch
000034D4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000034DA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000034DE 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000034E2                            
000034E2                            Demo_Level:
000034E2 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000034E8 7000                       		moveq	#0,d0
000034EA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000034EE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000034F2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000034F6 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)		
000034FE 4E75                       		rts	
00003500                            ; ===========================================================================
00003500                            ; ---------------------------------------------------------------------------
00003500                            ; Levels used in demos
00003500                            ; ---------------------------------------------------------------------------
00003500                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003508                            		even
00003508                            
00003508                            ; ---------------------------------------------------------------------------
00003508                            ; Subroutine to	change what you're selecting in the level select
00003508                            ; ---------------------------------------------------------------------------
00003508                            
00003508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003508                            
00003508                            
00003508                            LevSelControls:				; XREF: LevelSelect
00003508 1238 F605                  		move.b	($FFFFF605).w,d1
0000350C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003510 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003512 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003516 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003518                            
00003518                            LevSel_UpDown:
00003518 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000351E 1238 F604                  		move.b	($FFFFF604).w,d1
00003522 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003526 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003528 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000352C 0801 0000                  		btst	#0,d1		; is up	pressed?
00003530 6700                       		beq.s	LevSel_Down	; if not, branch
00003532 5340                       		subq.w	#1,d0		; move up 1 selection
00003534 6400                       		bcc.s	LevSel_Down
00003536 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003538                            
00003538                            LevSel_Down:
00003538 0801 0001                  		btst	#1,d1		; is down pressed?
0000353C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000353E 5240                       		addq.w	#1,d0		; move down 1 selection
00003540 0C40 0015                  		cmpi.w	#$15,d0
00003544 6500                       		bcs.s	LevSel_Refresh
00003546 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003548                            
00003548                            LevSel_Refresh:
00003548 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
0000354C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003550 4E75                       		rts	
00003552                            ; ===========================================================================
00003552                            
00003552                            LevSel_SndTest:				; XREF: LevSelControls
00003552 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003558 6600                       		bne.s	LevSel_NoMove	; if not, branch
0000355A 1238 F605                  		move.b	($FFFFF605).w,d1
0000355E 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003562 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003564 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003568 0801 0002                  		btst	#2,d1		; is left pressed?
0000356C 6700                       		beq.s	LevSel_Right	; if not, branch
0000356E 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003570 6400                       		bcc.s	LevSel_Right
00003572 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003574                            
00003574                            LevSel_Right:
00003574 0801 0003                  		btst	#3,d1		; is right pressed?
00003578 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000357A 5240                       		addq.w	#1,d0		; add 1	to sound test
0000357C 0C40 0050                  		cmpi.w	#$50,d0
00003580 6500                       		bcs.s	LevSel_Refresh2
00003582 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003584                            
00003584                            LevSel_Refresh2:
00003584 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003588 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000358C                            
0000358C                            LevSel_NoMove:
0000358C 4E75                       		rts	
0000358E                            ; End of function LevSelControls
0000358E                            
0000358E                            ; ---------------------------------------------------------------------------
0000358E                            ; Subroutine to load level select text
0000358E                            ; ---------------------------------------------------------------------------
0000358E                            
0000358E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000358E                            
0000358E                            
0000358E                            LevSelTextLoad:				; XREF: TitleScreen
0000358E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003594 4DF9 00C0 0000             		lea	($C00000).l,a6
0000359A 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000035A0 363C E680                  		move.w	#$E680,d3	; VRAM setting
000035A4 7214                       		moveq	#$14,d1		; number of lines of text
000035A6                            
000035A6                            loc_34FE:				; XREF: LevSelTextLoad+26j
000035A6 2D44 0004                  		move.l	d4,4(a6)
000035AA 6100 0000                  		bsr.w	LevSel_ChgLine
000035AE 0684 0080 0000             		addi.l	#$800000,d4
000035B4 51C9 FFF0                  		dbf	d1,loc_34FE
000035B8 7000                       		moveq	#0,d0
000035BA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035BE 3200                       		move.w	d0,d1
000035C0 283C 6210 0003             		move.l	#$62100003,d4
000035C6 EF48                       		lsl.w	#7,d0
000035C8 4840                       		swap	d0
000035CA D880                       		add.l	d0,d4
000035CC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000035D2 E749                       		lsl.w	#3,d1
000035D4 3001                       		move.w	d1,d0
000035D6 D241                       		add.w	d1,d1
000035D8 D240                       		add.w	d0,d1
000035DA D2C1                       		adda.w	d1,a1
000035DC 363C C680                  		move.w	#$C680,d3
000035E0 2D44 0004                  		move.l	d4,4(a6)
000035E4 6100 0000                  		bsr.w	LevSel_ChgLine
000035E8 363C E680                  		move.w	#$E680,d3
000035EC 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035F2 6600                       		bne.s	loc_3550
000035F4 363C C680                  		move.w	#$C680,d3
000035F8                            
000035F8                            loc_3550:
000035F8 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003602 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003606 0640 0080                  		addi.w	#$80,d0
0000360A                            
0000360A                            DRAWNUMBER:
0000360A 1400                       		move.b	d0,d2
0000360C E808                       		lsr.b	#4,d0
0000360E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003612 1002                       		move.b	d2,d0
00003614 6100 0000                  		bsr.w	LevSel_ChgSnd
00003618 4E75                       		rts	
0000361A                            ; End of function LevSelTextLoad
0000361A                            
0000361A                            
0000361A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000361A                            
0000361A                            
0000361A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000361A 0240 000F                  		andi.w	#$F,d0
0000361E 0C00 000A                  		cmpi.b	#$A,d0
00003622 6500                       		bcs.s	loc_3580
00003624 5E00                       		addi.b	#7,d0
00003626                            
00003626                            loc_3580:
00003626 D043                       		add.w	d3,d0
00003628 3C80                       		move.w	d0,(a6)
0000362A 4E75                       		rts	
0000362C                            ; End of function LevSel_ChgSnd
0000362C                            
0000362C                            
0000362C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000362C                            
0000362C                            
0000362C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000362C 7417                       		moveq	#$17,d2		; number of characters per line
0000362E                            
0000362E                            loc_3588:
0000362E 7000                       		moveq	#0,d0
00003630 1019                       		move.b	(a1)+,d0
00003632 6A00                       		bpl.s	loc_3598
00003634 3CBC 0000                  		move.w	#0,(a6)
00003638 51CA FFF4                  		dbf	d2,loc_3588
0000363C 4E75                       		rts	
0000363E                            ; ===========================================================================
0000363E                            
0000363E                            loc_3598:				; XREF: LevSel_ChgLine
0000363E D043                       		add.w	d3,d0
00003640 3C80                       		move.w	d0,(a6)
00003642 51CA FFEA                  		dbf	d2,loc_3588
00003646 4E75                       		rts	
00003648                            ; End of function LevSel_ChgLine
00003648                            
00003648                            ; ===========================================================================
00003648                            ; ---------------------------------------------------------------------------
00003648                            ; Level	select menu text
00003648                            ; ---------------------------------------------------------------------------
00003648                            LevelMenuText:	incbin	misc\menutext.bin
00003840                            		even
00003840                            ; ---------------------------------------------------------------------------
00003840                            ; Music	playlist
00003840                            ; ---------------------------------------------------------------------------
00003840                            MusicList:	incbin	misc\muslist1.bin
00003848                            		even
00003848                            ; ===========================================================================
00003848                            
00003848                            ; ---------------------------------------------------------------------------
00003848                            ; Level
00003848                            ; ---------------------------------------------------------------------------
00003848                            
00003848                            Level:					; XREF: GameModeArray
00003848 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000384E 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w		
00003854 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003858 6B00                       		bmi.s	loc_37B6
0000385A 103C 00E0                  		move.b	#$E0,d0
0000385E 6100 D996                  		bsr.w	PlaySound_Special ; fade out music
00003862                            
00003862                            loc_37B6:
00003862 6100 DC2E                  		bsr.w	ClearPLC
00003866 6100 E5F8                  		bsr.w	Pal_FadeFrom
0000386A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000386E 6B00                       		bmi.s	Level_ClrRam
00003870 46FC 2700                  		move	#$2700,sr
00003874 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
0000387E 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00003884 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0000388A 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
0000388E 46FC 2300                  		move	#$2300,sr
00003892 7000                       		moveq	#0,d0
00003894 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003898 E948                       		lsl.w	#4,d0
0000389A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000038A0 45F2 0000                  		lea	(a2,d0.w),a2
000038A4 7000                       		moveq	#0,d0
000038A6 1012                       		move.b	(a2),d0
000038A8 6700                       		beq.s	loc_37FC
000038AA 6100 DB88                  		bsr.w	LoadPLC		; load level patterns
000038AE                            
000038AE                            loc_37FC:
000038AE 7001                       		moveq	#1,d0
000038B0 6100 DB82                  		bsr.w	LoadPLC		; load standard	patterns
000038B4                            
000038B4                            Level_ClrRam:
000038B4 43F8 D000                  		lea	($FFFFD000).w,a1
000038B8 7000                       		moveq	#0,d0
000038BA 323C 07FF                  		move.w	#$7FF,d1
000038BE                            
000038BE                            Level_ClrObjRam:
000038BE 22C0                       		move.l	d0,(a1)+
000038C0 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000038C4                            
000038C4 43F8 F628                  		lea	($FFFFF628).w,a1
000038C8 7000                       		moveq	#0,d0
000038CA 323C 0015                  		move.w	#$15,d1
000038CE                            
000038CE                            Level_ClrVars:
000038CE 22C0                       		move.l	d0,(a1)+
000038D0 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
000038D4                            
000038D4 43F8 F700                  		lea	($FFFFF700).w,a1
000038D8 7000                       		moveq	#0,d0
000038DA 323C 003F                  		move.w	#$3F,d1
000038DE                            
000038DE                            Level_ClrVars2:
000038DE 22C0                       		move.l	d0,(a1)+
000038E0 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000038E4                            
000038E4 43F8 FE60                  		lea	($FFFFFE60).w,a1
000038E8 7000                       		moveq	#0,d0
000038EA 323C 0047                  		move.w	#$47,d1
000038EE                            
000038EE                            Level_ClrVars3:
000038EE 22C0                       		move.l	d0,(a1)+
000038F0 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000038F4 46FC 2700                  		move	#$2700,sr
000038F8 6100 D7D6                  		bsr.w	ClearScreen
000038FC 4DF9 00C0 0004             		lea	($C00004).l,a6
00003902 3CBC 8B03                  		move.w	#$8B03,(a6)
00003906 3CBC 8230                  		move.w	#$8230,(a6)
0000390A 3CBC 8407                  		move.w	#$8407,(a6)
0000390E 3CBC 857C                  		move.w	#$857C,(a6)
00003912 3CBC 9001                  		move.w	#$9001,(a6)
00003916 3CBC 8004                  		move.w	#$8004,(a6)
0000391A 3CBC 8720                  		move.w	#$8720,(a6)
0000391E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003924 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003928 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000392E 6600                       		bne.s	Level_LoadPal	; if not, branch
00003930 3CBC 8014                  		move.w	#$8014,(a6)
00003934 7000                       		moveq	#0,d0
00003936 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000393A D040                       		add.w	d0,d0
0000393C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003942 3031 0000                  		move.w	(a1,d0.w),d0
00003946 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000394A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000394E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003952 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003956 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000395A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003960                            
00003960                            Level_LoadPal:
00003960 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003966 46FC 2300                  		move	#$2300,sr
0000396A 7003                       		moveq	#3,d0
0000396C 6100 E794                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003970 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003976 6600                       		bne.s	Level_GetBgm	; if not, branch
00003978 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000397A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003980 6600                       		bne.s	Level_WaterPal	; if not, branch
00003982 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003984                            
00003984                            Level_WaterPal:
00003984 6100 E794                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003988 4A38 FE30                  		tst.b	($FFFFFE30).w
0000398C 6700                       		beq.s	Level_GetBgm
0000398E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003994                            
00003994                            Level_GetBgm:
00003994 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003998 6B00                       		bmi.s	loc_3946
0000399A 7000                       		moveq	#0,d0
0000399C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000039A0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000039A6 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000039A8 7005                       		moveq	#5,d0		; move 5 to d0
000039AA                            
000039AA                            Level_BgmNotLZ4:
000039AA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000039B0 6600                       		bne.s	Level_PlayBgm	; if not, branch
000039B2 7006                       		moveq	#6,d0		; move 6 to d0
000039B4                            
000039B4                            Level_PlayBgm:
000039B4 43F9 0000 3840             		lea	(MusicList).l,a1 ; load	music playlist
000039BA 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
000039BE 6100 D830                  		bsr.w	PlaySound	; play music
000039C2 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000039C8                            
000039C8                            Level_TtlCard:
000039C8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000039CE 6100 EFCA                  		bsr.w	DelayProgram
000039D2 4EB9 0000 0000             		jsr	ObjectsLoad
000039D8 4EB9 0000 0000             		jsr	BuildSprites
000039DE 6100 DAC0                  		bsr.w	RunPLC_RAM
000039E2 3038 D108                  		move.w	($FFFFD108).w,d0
000039E6 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000039EA 66DC                       		bne.s	Level_TtlCard	; if not, branch
000039EC 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000039F0 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000039F2 4EB9 0000 0000             		jsr	Hud_Base
000039F8                            
000039F8                            loc_3946:
000039F8 7003                       		moveq	#3,d0
000039FA 6100 E6EA                  		bsr.w	PalLoad1	; load Sonic's pallet line
000039FE 6100 0000                  		bsr.w	LevelSizeLoad
00003A02 6100 0000                  		bsr.w	DeformBgLayer
00003A06 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003A0C 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
00003A10 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003A14 6100 0000                  		bsr.w	LoadTilesFromStart
00003A18 4EB9 0000 0000             		jsr	FloorLog_Unk
00003A1E 6100 0000                  		bsr.w	ColIndexLoad
00003A22 6100 0000                  		bsr.w	LZWaterEffects
00003A26 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003A2C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A30 6B00                       		bmi.s	Level_ChkDebug
00003A32 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003A38 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
00003A3E                            		
00003A3E                            Level_ChkDebug:
00003A3E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003A42 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A44 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003A4A 6700                       		beq.s	Level_ChkWater	; if not, branch
00003A4C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003A52                            
00003A52                            Level_ChkWater:
00003A52 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003A58 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003A5E 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00003A64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003A6A 6600                       		bne.s	Level_LoadObj	; if not, branch
00003A6C 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003A72 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003A78 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003A7E 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003A84                            
00003A84                            Level_LoadObj:
00003A84 4EB9 0000 0000             		jsr	ObjPosLoad
00003A8A 11FC 0000 870C             		move.b	#0,(Rings_manager_routine).w
00003A90 4EB9 0000 0000             		jsr	RingsManager				
00003A96 4EB9 0000 0000             		jsr	ObjectsLoad
00003A9C 4EB9 0000 0000             		jsr	BuildSprites
00003AA2 7000                       		moveq	#0,d0
00003AA4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003AA8 6600                       		bne.s	loc_39E8	; if yes, branch
00003AAA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003AAE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003AB2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003AB6                            
00003AB6                            loc_39E8:
00003AB6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003ABA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003ABE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003AC2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003AC6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003ACA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003ACE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003AD2 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003AD6 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00003ADA 6100 0000                  		bsr.w	OscillateNumInit
00003ADE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003AE4 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003AEA 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003AF0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003AF6 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003AFC 7000                       		moveq	#0,d0
00003AFE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B02 E548                       		lsl.w	#2,d0
00003B04 2271 0000                  		movea.l	(a1,d0.w),a1
00003B08 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B0C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003B0E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003B14 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003B18 5340                       		subq.w	#1,d0
00003B1A E548                       		lsl.w	#2,d0
00003B1C 2271 0000                  		movea.l	(a1,d0.w),a1
00003B20                            
00003B20                            Level_Demo:
00003B20 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003B26 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003B2A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003B30 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B34 6A00                       		bpl.s	Level_ChkWaterPal
00003B36 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003B3C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003B42 6600                       		bne.s	Level_ChkWaterPal
00003B44 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003B4A                            
00003B4A                            Level_ChkWaterPal:
00003B4A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003B50 6600                       		bne.s	Level_Delay	; if not, branch
00003B52 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003B54 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003B5A 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003B5C 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003B5E                            
00003B5E                            Level_WaterPal2:
00003B5E 6100 E5D6                  		bsr.w	PalLoad4_Water
00003B62                            
00003B62                            Level_Delay:
00003B62 323C 0003                  		move.w	#3,d1
00003B66                            
00003B66                            Level_DelayLoop:
00003B66 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B6C 6100 EE2C                  		bsr.w	DelayProgram
00003B70 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003B74                            
00003B74 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003B7A 6100 E268                  		bsr.w	Pal_FadeTo2
00003B7E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B82 6B00                       		bmi.s	Level_ClrCardArt
00003B84 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003B88 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003B8C 5838 D124                  		addq.b	#4,($FFFFD124).w
00003B90 5838 D164                  		addq.b	#4,($FFFFD164).w
00003B94 6000                       		bra.s	Level_StartGame
00003B96                            ; ===========================================================================
00003B96                            
00003B96                            Level_ClrCardArt:
00003B96 7002                       		moveq	#2,d0
00003B98 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
00003B9E 7000                       		moveq	#0,d0
00003BA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BA4 0640 0015                  		addi.w	#$15,d0
00003BA8 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003BAE                            
00003BAE                            Level_StartGame:
00003BAE 11FC 0001 870D             		move.b	#1,(Level_started_flag).w
00003BB4 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003BBA                            
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            ; Main level loop (when	all title card and loading sequences are finished)
00003BBA                            ; ---------------------------------------------------------------------------
00003BBA                            
00003BBA                            Level_MainLoop:
00003BBA 6100 D646                  		bsr.w	PauseGame
00003BBE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003BC4 6100 EDD4                  		bsr.w	DelayProgram
00003BC8 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003BCC 6100 0000                  		bsr.w	MoveSonicInDemo
00003BD0 6100 0000                  		bsr.w	LZWaterEffects
00003BD4 4EB9 0000 0000             		jsr	ObjectsLoad
00003BDA 4A78 FE08                  		tst.w	($FFFFFE08).w
00003BDE 6600                       		bne.s	loc_3B10
00003BE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BE6 6400                       		bcc.s	loc_3B14
00003BE8                            
00003BE8                            loc_3B10:
00003BE8 6100 0000                  		bsr.w	DeformBgLayer
00003BEC                            
00003BEC                            loc_3B14:
00003BEC 4EB9 0000 0000             		jsr	BuildSprites
00003BF2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BF8 4EB9 0000 0000             		jsr	RingsManager
00003BFE 6100 DD6E                  		bsr.w	PalCycle_Load
00003C02 6100 D89C                  		bsr.w	RunPLC_RAM
00003C06 6100 0000                  		bsr.w	OscillateNumDo
00003C0A 6100 0000                  		bsr.w	ChangeRingFrame
00003C0E 6100 0000                  		bsr.w	SignpostArtLoad
00003C12 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C18 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003C1A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003C1E 6600 FC28                  		bne.w	Level		; if yes, branch
00003C22 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003C28 6700 FF90                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003C2C 4E75                       		rts	
00003C2E                            ; ===========================================================================
00003C2E                            
00003C2E                            Level_ChkDemo:				; XREF: Level_MainLoop
00003C2E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003C32 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003C34 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003C38 6700                       		beq.s	Level_EndDemo	; if not, branch
00003C3A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003C40 6700 FF78                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003C44 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C4A 4E75                       		rts	
00003C4C                            ; ===========================================================================
00003C4C                            
00003C4C                            Level_EndDemo:				; XREF: Level_ChkDemo
00003C4C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003C52 6600                       		bne.s	loc_3B88	; if not, branch
00003C54 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00003C5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003C5E 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003C60 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003C66                            
00003C66                            loc_3B88:
00003C66 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003C6C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003C72 4278 F794                  		clr.w	($FFFFF794).w
00003C76                            
00003C76                            loc_3B98:
00003C76 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003C7C 6100 ED1C                  		bsr.w	DelayProgram
00003C80 6100 0000                  		bsr.w	MoveSonicInDemo
00003C84 4EB9 0000 0000             		jsr	ObjectsLoad
00003C8A 4EB9 0000 0000             		jsr	BuildSprites
00003C90 4EB9 0000 0000             		jsr	ObjPosLoad
00003C96 5378 F794                  		subq.w	#1,($FFFFF794).w
00003C9A 6A00                       		bpl.s	loc_3BC8
00003C9C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003CA2 6100 E1DC                  		bsr.w	Pal_FadeOut
00003CA6                            
00003CA6                            loc_3BC8:
00003CA6 4A78 F614                  		tst.w	($FFFFF614).w
00003CAA 66CA                       		bne.s	loc_3B98
00003CAC 4E75                       		rts	
00003CAE                            ; ===========================================================================
00003CAE                            ; ---------------------------------------------------------------------------
00003CAE                            ; Subroutine to	do special water effects in Labyrinth Zone
00003CAE                            ; ---------------------------------------------------------------------------
00003CAE                            
00003CAE                            LZWaterEffects:				; XREF: Level
00003CAE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003CB4 6600                       		bne.s	locret_3C28	; if not, branch
00003CB6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003CBC 6400                       		bcc.s	LZMoveWater
00003CBE 6100 0000                  		bsr.w	LZWindTunnels
00003CC2 6100 0000                  		bsr.w	LZWaterSlides
00003CC6 6100 0000                  		bsr.w	LZDynamicWater
00003CCA                            
00003CCA                            LZMoveWater:
00003CCA 4238 F64E                  		clr.b	($FFFFF64E).w
00003CCE 7000                       		moveq	#0,d0
00003CD0 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003CD4 E248                       		lsr.w	#1,d0
00003CD6 D078 F648                  		add.w	($FFFFF648).w,d0
00003CDA 31C0 F646                  		move.w	d0,($FFFFF646).w
00003CDE 3038 F646                  		move.w	($FFFFF646).w,d0
00003CE2 9078 F704                  		sub.w	($FFFFF704).w,d0
00003CE6 6400                       		bcc.s	loc_3C1A
00003CE8 4A40                       		tst.w	d0
00003CEA 6A00                       		bpl.s	loc_3C1A
00003CEC 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003CF2 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003CF8                            
00003CF8                            loc_3C1A:
00003CF8 0C40 00DF                  		cmpi.w	#$DF,d0
00003CFC 6500                       		bcs.s	loc_3C24
00003CFE 303C 00DF                  		move.w	#$DF,d0
00003D02                            
00003D02                            loc_3C24:
00003D02 11C0 F625                  		move.b	d0,($FFFFF625).w
00003D06                            
00003D06                            locret_3C28:
00003D06 4E75                       		rts	
00003D08                            ; ===========================================================================
00003D08                            ; ---------------------------------------------------------------------------
00003D08                            ; Labyrinth default water heights
00003D08                            ; ---------------------------------------------------------------------------
00003D08                            WaterHeight:	incbin	misc\lz_heigh.bin
00003D10                            		even
00003D10                            ; ===========================================================================
00003D10                            
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            ; Labyrinth dynamic water routines
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            
00003D10                            LZDynamicWater:				; XREF: LZWaterEffects
00003D10 7000                       		moveq	#0,d0
00003D12 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D16 D040                       		add.w	d0,d0
00003D18 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003D1C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003D20 7200                       		moveq	#0,d1
00003D22 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003D26 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003D2A 9078 F648                  		sub.w	($FFFFF648).w,d0
00003D2E 6700                       		beq.s	locret_3C5A
00003D30 6400                       		bcc.s	loc_3C56
00003D32 4441                       		neg.w	d1
00003D34                            
00003D34                            loc_3C56:
00003D34 D378 F648                  		add.w	d1,($FFFFF648).w
00003D38                            
00003D38                            locret_3C5A:
00003D38 4E75                       		rts	
00003D3A                            ; ===========================================================================
00003D3A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003D3C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003D3E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003D40 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003D42                            ; ===========================================================================
00003D42                            
00003D42                            DynWater_LZ1:				; XREF: DynWater_Index
00003D42 3038 F700                  		move.w	($FFFFF700).w,d0
00003D46 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D4A 6600                       		bne.s	loc_3CD0
00003D4C 323C 00B8                  		move.w	#$B8,d1
00003D50 0C40 0600                  		cmpi.w	#$600,d0
00003D54 6500                       		bcs.s	loc_3CB4
00003D56 323C 0108                  		move.w	#$108,d1
00003D5A 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003D60 6500                       		bcs.s	loc_3CBA
00003D62 0C40 0C00                  		cmpi.w	#$C00,d0
00003D66 6500                       		bcs.s	loc_3CB4
00003D68 323C 0318                  		move.w	#$318,d1
00003D6C 0C40 1080                  		cmpi.w	#$1080,d0
00003D70 6500                       		bcs.s	loc_3CB4
00003D72 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003D78 323C 05C8                  		move.w	#$5C8,d1
00003D7C 0C40 1380                  		cmpi.w	#$1380,d0
00003D80 6500                       		bcs.s	loc_3CB4
00003D82 323C 03A8                  		move.w	#$3A8,d1
00003D86 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003D8A 6600                       		bne.s	loc_3CB4
00003D8C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D92                            
00003D92                            loc_3CB4:
00003D92 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D96 4E75                       		rts	
00003D98                            ; ===========================================================================
00003D98                            
00003D98                            loc_3CBA:				; XREF: DynWater_LZ1
00003D98 0C40 0C80                  		cmpi.w	#$C80,d0
00003D9C 65F4                       		bcs.s	loc_3CB4
00003D9E 323C 00E8                  		move.w	#$E8,d1
00003DA2 0C40 1500                  		cmpi.w	#$1500,d0
00003DA6 65EA                       		bcs.s	loc_3CB4
00003DA8 323C 0108                  		move.w	#$108,d1
00003DAC 60E4                       		bra.s	loc_3CB4
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            loc_3CD0:				; XREF: DynWater_LZ1
00003DAE 5302                       		subq.b	#1,d2
00003DB0 6600                       		bne.s	locret_3CF4
00003DB2 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003DB8 6400                       		bcc.s	locret_3CF4
00003DBA 323C 03A8                  		move.w	#$3A8,d1
00003DBE 0C40 1300                  		cmpi.w	#$1300,d0
00003DC2 6500                       		bcs.s	loc_3CF0
00003DC4 323C 0108                  		move.w	#$108,d1
00003DC8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DCE                            
00003DCE                            loc_3CF0:
00003DCE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD2                            
00003DD2                            locret_3CF4:
00003DD2 4E75                       		rts	
00003DD4                            ; ===========================================================================
00003DD4                            
00003DD4                            DynWater_LZ2:				; XREF: DynWater_Index
00003DD4 3038 F700                  		move.w	($FFFFF700).w,d0
00003DD8 323C 0328                  		move.w	#$328,d1
00003DDC 0C40 0500                  		cmpi.w	#$500,d0
00003DE0 6500                       		bcs.s	loc_3D12
00003DE2 323C 03C8                  		move.w	#$3C8,d1
00003DE6 0C40 0B00                  		cmpi.w	#$B00,d0
00003DEA 6500                       		bcs.s	loc_3D12
00003DEC 323C 0428                  		move.w	#$428,d1
00003DF0                            
00003DF0                            loc_3D12:
00003DF0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DF4 4E75                       		rts	
00003DF6                            ; ===========================================================================
00003DF6                            
00003DF6                            DynWater_LZ3:				; XREF: DynWater_Index
00003DF6 3038 F700                  		move.w	($FFFFF700).w,d0
00003DFA 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003DFE 6600                       		bne.s	loc_3D5E
00003E00 323C 0900                  		move.w	#$900,d1
00003E04 0C40 0600                  		cmpi.w	#$600,d0
00003E08 6500                       		bcs.s	loc_3D54
00003E0A 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003E10 6500                       		bcs.s	loc_3D54
00003E12 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E18 6400                       		bcc.s	loc_3D54
00003E1A 323C 04C8                  		move.w	#$4C8,d1
00003E1E 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003E24 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003E2A 303C 00B7                  		move.w	#$B7,d0
00003E2E 6100 D3C6                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003E32                            
00003E32                            loc_3D54:
00003E32 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E36 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E3A 4E75                       		rts	
00003E3C                            ; ===========================================================================
00003E3C                            
00003E3C                            loc_3D5E:				; XREF: DynWater_LZ3
00003E3C 5302                       		subq.b	#1,d2
00003E3E 6600                       		bne.s	loc_3DA8
00003E40 323C 04C8                  		move.w	#$4C8,d1
00003E44 0C40 0770                  		cmpi.w	#$770,d0
00003E48 6500                       		bcs.s	loc_3DA2
00003E4A 323C 0308                  		move.w	#$308,d1
00003E4E 0C40 1400                  		cmpi.w	#$1400,d0
00003E52 6500                       		bcs.s	loc_3DA2
00003E54 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003E5A 6700                       		beq.s	loc_3D8E
00003E5C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003E62 6400                       		bcc.s	loc_3D8E
00003E64 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003E6A 6400                       		bcc.s	loc_3DA2
00003E6C                            
00003E6C                            loc_3D8E:
00003E6C 323C 0508                  		move.w	#$508,d1
00003E70 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E74 0C40 1770                  		cmpi.w	#$1770,d0
00003E78 6500                       		bcs.s	loc_3DA2
00003E7A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003E80                            
00003E80                            loc_3DA2:
00003E80 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E84 4E75                       		rts	
00003E86                            ; ===========================================================================
00003E86                            
00003E86                            loc_3DA8:
00003E86 5302                       		subq.b	#1,d2
00003E88 6600                       		bne.s	loc_3DD2
00003E8A 323C 0508                  		move.w	#$508,d1
00003E8E 0C40 1860                  		cmpi.w	#$1860,d0
00003E92 6500                       		bcs.s	loc_3DCC
00003E94 323C 0188                  		move.w	#$188,d1
00003E98 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003E9C 6400                       		bcc.s	loc_3DC6
00003E9E B278 F648                  		cmp.w	($FFFFF648).w,d1
00003EA2 6600                       		bne.s	loc_3DCC
00003EA4                            
00003EA4                            loc_3DC6:
00003EA4 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003EAA                            
00003EAA                            loc_3DCC:
00003EAA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EAE 4E75                       		rts	
00003EB0                            ; ===========================================================================
00003EB0                            
00003EB0                            loc_3DD2:
00003EB0 5302                       		subq.b	#1,d2
00003EB2 6600                       		bne.s	loc_3E0E
00003EB4 323C 0188                  		move.w	#$188,d1
00003EB8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003EBC 6500                       		bcs.s	loc_3E04
00003EBE 323C 0900                  		move.w	#$900,d1
00003EC2 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003EC6 6500                       		bcs.s	loc_3E04
00003EC8 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003ECE 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003ED4 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003EDA 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003EE0 4E75                       		rts	
00003EE2                            ; ===========================================================================
00003EE2                            
00003EE2                            loc_3E04:
00003EE2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003EE6 31C1 F648                  		move.w	d1,($FFFFF648).w
00003EEA 4E75                       		rts	
00003EEC                            ; ===========================================================================
00003EEC                            
00003EEC                            loc_3E0E:
00003EEC 0C40 1E00                  		cmpi.w	#$1E00,d0
00003EF0 6500                       		bcs.s	locret_3E1A
00003EF2 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003EF8                            
00003EF8                            locret_3E1A:
00003EF8 4E75                       		rts	
00003EFA                            ; ===========================================================================
00003EFA                            
00003EFA                            DynWater_SBZ3:				; XREF: DynWater_Index
00003EFA 323C 0228                  		move.w	#$228,d1
00003EFE 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003F04 6500                       		bcs.s	loc_3E2C
00003F06 323C 04C8                  		move.w	#$4C8,d1
00003F0A                            
00003F0A                            loc_3E2C:
00003F0A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003F0E 4E75                       		rts
00003F10                            
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            ; Labyrinth Zone "wind tunnels"	subroutine
00003F10                            ; ---------------------------------------------------------------------------
00003F10                            
00003F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F10                            
00003F10                            
00003F10                            LZWindTunnels:				; XREF: LZWaterEffects
00003F10 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003F14 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003F18 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003F1E 7000                       		moveq	#0,d0
00003F20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F24 E748                       		lsl.w	#3,d0
00003F26 D4C0                       		adda.w	d0,a2
00003F28 7200                       		moveq	#0,d1
00003F2A 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F2E 6600                       		bne.s	loc_3E56
00003F30 7201                       		moveq	#1,d1
00003F32 514A                       		subq.w	#8,a2
00003F34                            
00003F34                            loc_3E56:
00003F34 43F8 D000                  		lea	($FFFFD000).w,a1
00003F38                            
00003F38                            LZWind_Loop:
00003F38 3029 0008                  		move.w	8(a1),d0
00003F3C B052                       		cmp.w	(a2),d0
00003F3E 6500 0000                  		bcs.w	loc_3EF4
00003F42 B06A 0004                  		cmp.w	4(a2),d0
00003F46 6400 0000                  		bcc.w	loc_3EF4
00003F4A 3429 000C                  		move.w	$C(a1),d2
00003F4E B46A 0002                  		cmp.w	2(a2),d2
00003F52 6500                       		bcs.s	loc_3EF4
00003F54 B46A 0006                  		cmp.w	6(a2),d2
00003F58 6400                       		bcc.s	loc_3EF4
00003F5A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003F5E 0200 003F                  		andi.b	#$3F,d0
00003F62 6600                       		bne.s	loc_3E90
00003F64 303C 00D0                  		move.w	#$D0,d0
00003F68 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003F6E                            
00003F6E                            loc_3E90:
00003F6E 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003F72 6600 0000                  		bne.w	locret_3F0A
00003F76 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003F7C 6400                       		bcc.s	loc_3F06
00003F7E 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003F84 0440 0080                  		subi.w	#$80,d0
00003F88 B052                       		cmp.w	(a2),d0
00003F8A 6400                       		bcc.s	LZWind_Move
00003F8C 7002                       		moveq	#2,d0
00003F8E 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003F94 6600                       		bne.s	loc_3EBA
00003F96 4440                       		neg.w	d0
00003F98                            
00003F98                            loc_3EBA:
00003F98 D169 000C                  		add.w	d0,$C(a1)
00003F9C                            
00003F9C                            LZWind_Move:
00003F9C 5869 0008                  		addq.w	#4,8(a1)
00003FA0 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003FA6 337C 0000 0012             		move.w	#0,$12(a1)
00003FAC 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003FB2 08E9 0001 0022             		bset	#1,$22(a1)
00003FB8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003FBE 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003FC0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003FC4                            
00003FC4                            LZWind_MoveDown:
00003FC4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003FCA 6700                       		beq.s	locret_3EF2	; if not, branch
00003FCC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003FD0                            
00003FD0                            locret_3EF2:
00003FD0 4E75                       		rts	
00003FD2                            ; ===========================================================================
00003FD2                            
00003FD2                            loc_3EF4:				; XREF: LZWindTunnels
00003FD2 504A                       		addq.w	#8,a2
00003FD4 51C9 FF62                  		dbf	d1,LZWind_Loop
00003FD8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003FDC 6700                       		beq.s	locret_3F0A
00003FDE 137C 0000 001C             		move.b	#0,$1C(a1)
00003FE4                            
00003FE4                            loc_3F06:
00003FE4 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003FE8                            
00003FE8                            locret_3F0A:
00003FE8 4E75                       		rts	
00003FEA                            ; End of function LZWindTunnels
00003FEA                            
00003FEA                            ; ===========================================================================
00003FEA 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003FF2 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004004 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004012                            					; XREF: LZWindTunnels
00004012                            		even
00004012                            
00004012                            ; ---------------------------------------------------------------------------
00004012                            ; Labyrinth Zone water slide subroutine
00004012                            ; ---------------------------------------------------------------------------
00004012                            
00004012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004012                            
00004012                            
00004012                            LZWaterSlides:				; XREF: LZWaterEffects
00004012 43F8 D000                  		lea	($FFFFD000).w,a1
00004016 0829 0001 0022             		btst	#1,$22(a1)
0000401C 6600                       		bne.s	loc_3F6A
0000401E 3029 000C                  		move.w	$C(a1),d0
00004022 E248                       		lsr.w	#1,d0
00004024 0240 0380                  		andi.w	#$380,d0
00004028 1229 0008                  		move.b	8(a1),d1
0000402C 0241 007F                  		andi.w	#$7F,d1
00004030 D041                       		add.w	d1,d0
00004032 45F8 A400                  		lea	($FFFFA400).w,a2
00004036 1032 0000                  		move.b	(a2,d0.w),d0
0000403A 45FA 0000                  		lea	byte_3FCF(pc),a2
0000403E 7206                       		moveq	#6,d1
00004040                            
00004040                            loc_3F62:
00004040 B022                       		cmp.b	-(a2),d0
00004042 57C9 FFFC                  		dbeq	d1,loc_3F62
00004046 6700                       		beq.s	LZSlide_Move
00004048                            
00004048                            loc_3F6A:
00004048 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000404C 6700                       		beq.s	locret_3F7A
0000404E 337C 0005 003E             		move.w	#5,$3E(a1)
00004054 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004058                            
00004058                            locret_3F7A:
00004058 4E75                       		rts	
0000405A                            ; ===========================================================================
0000405A                            
0000405A                            LZSlide_Move:				; XREF: LZWaterSlides
0000405A 0C41 0003                  		cmpi.w	#3,d1
0000405E 6400                       		bcc.s	loc_3F84
00004060 4E71                       		nop	
00004062                            
00004062                            loc_3F84:
00004062 08A9 0000 0022             		bclr	#0,$22(a1)
00004068 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000406C 1340 0020                  		move.b	d0,$20(a1)
00004070 6A00                       		bpl.s	loc_3F9A
00004072 08E9 0000 0022             		bset	#0,$22(a1)
00004078                            
00004078                            loc_3F9A:
00004078 4229 0021                  		clr.b	$21(a1)
0000407C 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004082 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004088 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000408C 0200 001F                  		andi.b	#$1F,d0
00004090 6600                       		bne.s	locret_3FBE
00004092 303C 00D0                  		move.w	#$D0,d0
00004096 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play water sound
0000409C                            
0000409C                            locret_3FBE:
0000409C 4E75                       		rts	
0000409E                            ; End of function LZWaterSlides
0000409E                            
0000409E                            ; ===========================================================================
0000409E 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000040AD 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000040AE                            		even
000040AE                            
000040AE                            ; ---------------------------------------------------------------------------
000040AE                            ; Subroutine to	move Sonic in demo mode
000040AE                            ; ---------------------------------------------------------------------------
000040AE                            
000040AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040AE                            
000040AE                            
000040AE                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000040AE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040B2 6600                       		bne.s	MoveDemo_On	; if yes, branch
000040B4 4E75                       		rts	
000040B6                            ; ===========================================================================
000040B6                            
000040B6                            ; This is an unused subroutine for recording a demo
000040B6                            
000040B6                            MoveDemo_Record:
000040B6 43F9 0008 0000             		lea	($80000).l,a1
000040BC 3038 F790                  		move.w	($FFFFF790).w,d0
000040C0 D2C0                       		adda.w	d0,a1
000040C2 1038 F604                  		move.b	($FFFFF604).w,d0
000040C6 B011                       		cmp.b	(a1),d0
000040C8 6600                       		bne.s	loc_3FFA
000040CA 5229 0001                  		addq.b	#1,1(a1)
000040CE 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000040D4 6700                       		beq.s	loc_3FFA
000040D6 4E75                       		rts	
000040D8                            ; ===========================================================================
000040D8                            
000040D8                            loc_3FFA:				; XREF: MoveDemo_Record
000040D8 1340 0002                  		move.b	d0,2(a1)
000040DC 137C 0000 0003             		move.b	#0,3(a1)
000040E2 5478 F790                  		addq.w	#2,($FFFFF790).w
000040E6 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000040EC 4E75                       		rts	
000040EE                            ; ===========================================================================
000040EE                            
000040EE                            MoveDemo_On:				; XREF: MoveSonicInDemo
000040EE 4A38 F604                  		tst.b	($FFFFF604).w
000040F2 6A00                       		bpl.s	loc_4022
000040F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040F8 6B00                       		bmi.s	loc_4022
000040FA 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004100                            
00004100                            loc_4022:
00004100 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004106 7000                       		moveq	#0,d0
00004108 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000410C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004112 6600                       		bne.s	loc_4038
00004114 7006                       		moveq	#6,d0
00004116                            
00004116                            loc_4038:
00004116 E548                       		lsl.w	#2,d0
00004118 2271 0000                  		movea.l	(a1,d0.w),a1
0000411C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004120 6A00                       		bpl.s	loc_4056
00004122 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004128 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000412C 5340                       		subq.w	#1,d0
0000412E E548                       		lsl.w	#2,d0
00004130 2271 0000                  		movea.l	(a1,d0.w),a1
00004134                            
00004134                            loc_4056:
00004134 3038 F790                  		move.w	($FFFFF790).w,d0
00004138 D2C0                       		adda.w	d0,a1
0000413A 1011                       		move.b	(a1),d0
0000413C 41F8 F604                  		lea	($FFFFF604).w,a0
00004140 1200                       		move.b	d0,d1
00004142 1428 FFFE                  		move.b	-2(a0),d2
00004146 B500                       		eor.b	d2,d0
00004148 10C1                       		move.b	d1,(a0)+
0000414A C001                       		and.b	d1,d0
0000414C 10C0                       		move.b	d0,(a0)+
0000414E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004152 6400                       		bcc.s	locret_407E
00004154 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000415A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000415E                            
0000415E                            locret_407E:
0000415E 4E75                       		rts	
00004160                            ; End of function MoveSonicInDemo
00004160                            
00004160                            ; ===========================================================================
00004160                            ; ---------------------------------------------------------------------------
00004160                            ; Demo sequence	pointers
00004160                            ; ---------------------------------------------------------------------------
00004160                            Demo_Index:
00004160                            	include "_inc\Demo pointers for intro.asm"
00004160                            ; ---------------------------------------------------------------------------
00004160                            ; Demo sequence	pointers
00004160                            ; ---------------------------------------------------------------------------
00004160 0000 0000                  	dc.l Demo_GHZ
00004164 0000 0000                  	dc.l Demo_GHZ
00004168 0000 0000                  	dc.l Demo_MZ
0000416C 0000 0000                  	dc.l Demo_MZ
00004170 0000 0000                  	dc.l Demo_SYZ
00004174 0000 0000                  	dc.l Demo_SYZ
00004178 0000 0000                  	dc.l Demo_SS
0000417C 0000 0000                  	dc.l Demo_SS
0000417C 0000 0000                  	dc.l Demo_SS
00004180                            
00004180                            Demo_EndIndex:
00004180                            	include "_inc\Demo pointers for ending.asm"
00004180                            ; ---------------------------------------------------------------------------
00004180                            ; Demo (ending) sequence pointers
00004180                            ; ---------------------------------------------------------------------------
00004180 0000 0000                  	dc.l Demo_EndGHZ1
00004184 0000 0000                  	dc.l Demo_EndMZ
00004188 0000 0000                  	dc.l Demo_EndSYZ
0000418C 0000 0000                  	dc.l Demo_EndLZ
00004190 0000 0000                  	dc.l Demo_EndSLZ
00004194 0000 0000                  	dc.l Demo_EndSBZ1
00004198 0000 0000                  	dc.l Demo_EndSBZ2
0000419C 0000 0000                  	dc.l Demo_EndGHZ2
0000419C 0000 0000                  	dc.l Demo_EndGHZ2
000041A0                            
000041A0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000041B0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000041C0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000041D0                            		even
000041D0                            
000041D0                            ; ---------------------------------------------------------------------------
000041D0                            ; Collision index loading subroutine
000041D0                            ; ---------------------------------------------------------------------------
000041D0                            
000041D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041D0                            
000041D0                            
000041D0                            ColIndexLoad:				; XREF: Level
000041D0 7000                       		moveq	#0,d0
000041D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041D6 E548                       		lsl.w	#2,d0
000041D8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000041DE 4E75                       		rts	
000041E0                            ; End of function ColIndexLoad
000041E0                            
000041E0                            ; ===========================================================================
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ; Collision index pointers
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ColPointers:
000041E0                            	include "_inc\Collision index pointers.asm"
000041E0                            ; ---------------------------------------------------------------------------
000041E0                            ; Collision index pointers
000041E0                            ; ---------------------------------------------------------------------------
000041E0 0000 0000                  	dc.l Col_GHZ
000041E4 0000 0000                  	dc.l Col_LZ
000041E8 0000 0000                  	dc.l Col_MZ
000041EC 0000 0000                  	dc.l Col_SLZ
000041F0 0000 0000                  	dc.l Col_SYZ
000041F4 0000 0000                  	dc.l Col_SBZ
000041F4 0000 0000                  	dc.l Col_SBZ
000041F8                            
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            ; Oscillating number subroutine
000041F8                            ; ---------------------------------------------------------------------------
000041F8                            
000041F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041F8                            
000041F8                            
000041F8                            OscillateNumInit:			; XREF: Level
000041F8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000041FC 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004202 7220                       		moveq	#$20,d1
00004204                            
00004204                            Osc_Loop:
00004204 32DA                       		move.w	(a2)+,(a1)+
00004206 51C9 FFFC                  		dbf	d1,Osc_Loop
0000420A 4E75                       		rts	
0000420C                            ; End of function OscillateNumInit
0000420C                            
0000420C                            ; ===========================================================================
0000420C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004210 0000 0080                  		dc.w 0,	$80
00004214 0000 0080                  		dc.w 0,	$80
00004218 0000 0080                  		dc.w 0,	$80
0000421C 0000 0080                  		dc.w 0,	$80
00004220 0000 0080                  		dc.w 0,	$80
00004224 0000 0080                  		dc.w 0,	$80
00004228 0000 0080                  		dc.w 0,	$80
0000422C 0000 0080                  		dc.w 0,	$80
00004230 0000 50F0                  		dc.w 0,	$50F0
00004234 011E 2080                  		dc.w $11E, $2080
00004238 00B4 3080                  		dc.w $B4, $3080
0000423C 010E 5080                  		dc.w $10E, $5080
00004240 01C2 7080                  		dc.w $1C2, $7080
00004244 0276 0080                  		dc.w $276, $80
00004248 0000 0080                  		dc.w 0,	$80
0000424C 0000                       		dc.w 0
0000424E                            		even
0000424E                            
0000424E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000424E                            
0000424E                            
0000424E                            OscillateNumDo:				; XREF: Level
0000424E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004254 6400                       		bcc.s	locret_41C4
00004256 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000425A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004260 3619                       		move.w	(a1)+,d3
00004262 720F                       		moveq	#$F,d1
00004264                            
00004264                            loc_4184:
00004264 341A                       		move.w	(a2)+,d2
00004266 381A                       		move.w	(a2)+,d4
00004268 0303                       		btst	d1,d3
0000426A 6600                       		bne.s	loc_41A4
0000426C 3029 0002                  		move.w	2(a1),d0
00004270 D042                       		add.w	d2,d0
00004272 3340 0002                  		move.w	d0,2(a1)
00004276 D151                       		add.w	d0,0(a1)
00004278 B811                       		cmp.b	0(a1),d4
0000427A 6200                       		bhi.s	loc_41BA
0000427C 03C3                       		bset	d1,d3
0000427E 6000                       		bra.s	loc_41BA
00004280                            ; ===========================================================================
00004280                            
00004280                            loc_41A4:				; XREF: OscillateNumDo
00004280 3029 0002                  		move.w	2(a1),d0
00004284 9042                       		sub.w	d2,d0
00004286 3340 0002                  		move.w	d0,2(a1)
0000428A D151                       		add.w	d0,0(a1)
0000428C B811                       		cmp.b	0(a1),d4
0000428E 6300                       		bls.s	loc_41BA
00004290 0383                       		bclr	d1,d3
00004292                            
00004292                            loc_41BA:
00004292 5849                       		addq.w	#4,a1
00004294 51C9 FFCE                  		dbf	d1,loc_4184
00004298 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000429C                            
0000429C                            locret_41C4:
0000429C 4E75                       		rts	
0000429E                            ; End of function OscillateNumDo
0000429E                            
0000429E                            ; ===========================================================================
0000429E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000042A2 0002 0018                  		dc.w 2,	$18
000042A6 0002 0020                  		dc.w 2,	$20
000042AA 0002 0030                  		dc.w 2,	$30
000042AE 0004 0020                  		dc.w 4,	$20
000042B2 0008 0008                  		dc.w 8,	8
000042B6 0008 0040                  		dc.w 8,	$40
000042BA 0004 0040                  		dc.w 4,	$40
000042BE 0002 0050                  		dc.w 2,	$50
000042C2 0002 0050                  		dc.w 2,	$50
000042C6 0002 0020                  		dc.w 2,	$20
000042CA 0003 0030                  		dc.w 3,	$30
000042CE 0005 0050                  		dc.w 5,	$50
000042D2 0007 0070                  		dc.w 7,	$70
000042D6 0002 0010                  		dc.w 2,	$10
000042DA 0002 0010                  		dc.w 2,	$10
000042DE                            		even
000042DE                            
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000042DE                            ; ---------------------------------------------------------------------------
000042DE                            
000042DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042DE                            
000042DE                            
000042DE                            ChangeRingFrame:			; XREF: Level
000042DE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000042E2 6A00                       		bpl.s	loc_421C
000042E4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000042EA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000042EE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000042F4                            
000042F4                            loc_421C:
000042F4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000042F8 6A00                       		bpl.s	loc_4232
000042FA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004300 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004304 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000430A                            
0000430A                            loc_4232:
0000430A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000430E 6A00                       		bpl.s	loc_4250
00004310 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004316 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000431A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004320 6500                       		bcs.s	loc_4250
00004322 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004328                            
00004328                            loc_4250:
00004328 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000432C 6700                       		beq.s	locret_4272
0000432E 7000                       		moveq	#0,d0
00004330 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004334 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004338 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000433C EF58                       		rol.w	#7,d0
0000433E 0240 0003                  		andi.w	#3,d0
00004342 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004346 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000434A                            
0000434A                            locret_4272:
0000434A 4E75                       		rts	
0000434C                            ; End of function ChangeRingFrame
0000434C                            
0000434C                            ; ---------------------------------------------------------------------------
0000434C                            ; End-of-act signpost pattern loading subroutine
0000434C                            ; ---------------------------------------------------------------------------
0000434C                            
0000434C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000434C                            
0000434C                            
0000434C                            SignpostArtLoad:			; XREF: Level
0000434C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004350 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004354 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000435A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000435C 3038 F700                  		move.w	($FFFFF700).w,d0
00004360 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004364 0441 0100                  		subi.w	#$100,d1
00004368 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000436A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000436C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004370 6700                       		beq.s	Signpost_Exit
00004372 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004376 6700                       		beq.s	Signpost_Exit
00004378 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000437C 7012                       		moveq	#$12,d0
0000437E 6000 D0E6                  		bra.w	LoadPLC2	; load signpost	patterns
00004382                            ; ===========================================================================
00004382                            
00004382                            Signpost_Exit:
00004382 4E75                       		rts	
00004384                            ; End of function SignpostArtLoad
00004384                            
00004384                            ; ===========================================================================
00004384                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004404                            Demo_MZ:	incbin	demodata\i_mz.bin
00004534                            Demo_SYZ:	incbin	demodata\i_syz.bin
000045B4                            Demo_SS:	incbin	demodata\i_ss.bin
000046B4                            ; ===========================================================================
000046B4                            
000046B4                            ; ---------------------------------------------------------------------------
000046B4                            ; Special Stage
000046B4                            ; ---------------------------------------------------------------------------
000046B4                            
000046B4                            SpecialStage:				; XREF: GameModeArray
000046B4 303C 00CA                  		move.w	#$CA,d0
000046B8 6100 CB3C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000046BC 4EB9 0000 0000             		jsr	BuildSprites
000046C2 6100 D8A2                  		bsr.w	Pal_MakeFlash
000046C6 46FC 2700                  		move	#$2700,sr
000046CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000046D0 3CBC 8B03                  		move.w	#$8B03,(a6)
000046D4 3CBC 8004                  		move.w	#$8004,(a6)
000046D8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000046DE 3CBC 9011                  		move.w	#$9011,(a6)
000046E2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000046E6 0200 00BF                  		andi.b	#$BF,d0
000046EA 33C0 00C0 0004             		move.w	d0,($C00004).l
000046F0 6100 C9DE                  		bsr.w	ClearScreen
000046F4 46FC 2300                  		move	#$2300,sr
000046F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000046FE 3ABC 8F01                  		move.w	#$8F01,(a5)
00004702 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004708 3ABC 9780                  		move.w	#$9780,(a5)
0000470C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004712 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000471A                            
0000471A                            loc_463C:
0000471A 3215                       		move.w	(a5),d1
0000471C 0801 0001                  		btst	#1,d1
00004720 66F8                       		bne.s	loc_463C
00004722 3ABC 8F02                  		move.w	#$8F02,(a5)
00004726 6100 0000                  		bsr.w	SS_BGLoad
0000472A 7014                       		moveq	#$14,d0
0000472C 6100 CE72                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004730                            
00004730 43F8 D000                  		lea	($FFFFD000).w,a1
00004734 7000                       		moveq	#0,d0
00004736 323C 07FF                  		move.w	#$7FF,d1
0000473A                            
0000473A                            SS_ClrObjRam:
0000473A 22C0                       		move.l	d0,(a1)+
0000473C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004740                            
00004740 43F8 F700                  		lea	($FFFFF700).w,a1
00004744 7000                       		moveq	#0,d0
00004746 323C 003F                  		move.w	#$3F,d1
0000474A                            
0000474A                            SS_ClrRam:
0000474A 22C0                       		move.l	d0,(a1)+
0000474C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004750                            
00004750 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004754 7000                       		moveq	#0,d0
00004756 323C 0027                  		move.w	#$27,d1
0000475A                            
0000475A                            SS_ClrRam2:
0000475A 22C0                       		move.l	d0,(a1)+
0000475C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004760                            
00004760 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004764 7000                       		moveq	#0,d0
00004766 323C 007F                  		move.w	#$7F,d1
0000476A                            
0000476A                            SS_ClrNemRam:
0000476A 22C0                       		move.l	d0,(a1)+
0000476C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004770 4238 F64E                  		clr.b	($FFFFF64E).w
00004774 4278 FE02                  		clr.w	($FFFFFE02).w
00004778 700A                       		moveq	#$A,d0
0000477A 6100 D96A                  		bsr.w	PalLoad1	; load special stage pallet
0000477E 4EB9 0000 0000             		jsr	SS_Load
00004784 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
0000478A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004792 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000479A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000047A0 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
000047A6 6100 0000                  		bsr.w	PalCycle_SS
000047AA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000047AE 11FC 00FF FFF9             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
000047B4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000047BA 303C 0089                  		move.w	#$89,d0
000047BE 6100 CA30                  		bsr.w	PlaySound	; play special stage BG	music
000047C2 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000047C8 43F9 0000 4160             		lea	(Demo_Index).l,a1
000047CE 7006                       		moveq	#6,d0
000047D0 E548                       		lsl.w	#2,d0
000047D2 2271 0000                  		movea.l	(a1,d0.w),a1
000047D6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000047DC 5338 F792                  		subq.b	#1,($FFFFF792).w
000047E0 4278 FE20                  		clr.w	($FFFFFE20).w
000047E4 4238 FE1B                  		clr.b	($FFFFFE1B).w
000047E8 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000047EE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000047F4 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000047F8 6700                       		beq.s	SS_NoDebug	; if not, branch
000047FA 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004800 6700                       		beq.s	SS_NoDebug	; if not, branch
00004802 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004808                            
00004808                            SS_NoDebug:
00004808 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000480C 0000 0040                  		ori.b	#$40,d0
00004810 33C0 00C0 0004             		move.w	d0,($C00004).l
00004816 6100 D6C6                  		bsr.w	Pal_MakeWhite
0000481A                            
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            ; Main Special Stage loop
0000481A                            ; ---------------------------------------------------------------------------
0000481A                            
0000481A                            SS_MainLoop:
0000481A 6100 C9E6                  		bsr.w	PauseGame
0000481E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004824 6100 E174                  		bsr.w	DelayProgram
00004828 6100 F884                  		bsr.w	MoveSonicInDemo
0000482C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004832 4EB9 0000 0000             		jsr	ObjectsLoad
00004838 4EB9 0000 0000             		jsr	BuildSprites
0000483E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004844 6100 0000                  		bsr.w	SS_BGAnimate
00004848 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000484C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000484E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004852 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004856                            
00004856                            SS_ChkEnd:
00004856 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000485C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004860                            
00004860 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004864 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004868 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000486E 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004874 6500                       		bcs.s	SS_End		; if not, branch
00004876 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000487A                            
0000487A                            SS_End:
0000487A 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004880 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004886 4278 F794                  		clr.w	($FFFFF794).w
0000488A                            
0000488A                            SS_EndLoop:
0000488A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004890 6100 E108                  		bsr.w	DelayProgram
00004894 6100 F818                  		bsr.w	MoveSonicInDemo
00004898 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000489E 4EB9 0000 0000             		jsr	ObjectsLoad
000048A4 4EB9 0000 0000             		jsr	BuildSprites
000048AA 4EB9 0000 0000             		jsr	SS_ShowLayout
000048B0 6100 0000                  		bsr.w	SS_BGAnimate
000048B4 5378 F794                  		subq.w	#1,($FFFFF794).w
000048B8 6A00                       		bpl.s	loc_47D4
000048BA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000048C0 6100 D6C4                  		bsr.w	Pal_ToWhite
000048C4                            
000048C4                            loc_47D4:
000048C4 4A78 F614                  		tst.w	($FFFFF614).w
000048C8 66C0                       		bne.s	SS_EndLoop
000048CA                            
000048CA 46FC 2700                  		move	#$2700,sr
000048CE 4DF9 00C0 0004             		lea	($C00004).l,a6
000048D4 3CBC 8230                  		move.w	#$8230,(a6)
000048D8 3CBC 8407                  		move.w	#$8407,(a6)
000048DC 3CBC 9001                  		move.w	#$9001,(a6)
000048E0 6100 C7EE                  		bsr.w	ClearScreen
000048E4 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
000048EE 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
000048F4 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
000048FA 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
000048FE 4EB9 0000 0000             		jsr	Hud_Base
00004904 46FC 2300                  		move	#$2300,sr
00004908 7011                       		moveq	#$11,d0
0000490A 6100 D7F6                  		bsr.w	PalLoad2	; load results screen pallet
0000490E 7000                       		moveq	#0,d0
00004910 6100 CB54                  		bsr.w	LoadPLC2
00004914 701B                       		moveq	#$1B,d0
00004916 6100 CB1C                  		bsr.w	LoadPLC		; load results screen patterns
0000491A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004920 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004926 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000492A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000492E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004932 303C 008E                  		move.w	#$8E,d0
00004936 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000493C 43F8 D000                  		lea	($FFFFD000).w,a1
00004940 7000                       		moveq	#0,d0
00004942 323C 07FF                  		move.w	#$7FF,d1
00004946                            
00004946                            SS_EndClrObjRam:
00004946 22C0                       		move.l	d0,(a1)+
00004948 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000494C                            
0000494C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004952                            
00004952                            SS_NormalExit:
00004952 6100 C8AE                  		bsr.w	PauseGame
00004956 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000495C 6100 E03C                  		bsr.w	DelayProgram
00004960 4EB9 0000 0000             		jsr	ObjectsLoad
00004966 4EB9 0000 0000             		jsr	BuildSprites
0000496C 6100 CB32                  		bsr.w	RunPLC_RAM
00004970 4A78 FE02                  		tst.w	($FFFFFE02).w
00004974 67DC                       		beq.s	SS_NormalExit
00004976 4AB8 F680                  		tst.l	($FFFFF680).w
0000497A 66D6                       		bne.s	SS_NormalExit
0000497C 303C 00CA                  		move.w	#$CA,d0
00004980 6100 C874                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004984 6100 D5E0                  		bsr.w	Pal_MakeFlash
00004988 4E75                       		rts	
0000498A                            ; ===========================================================================
0000498A                            
0000498A                            SS_ToSegaScreen:
0000498A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004990 4E75                       		rts
00004992                            
00004992                            ; ---------------------------------------------------------------------------
00004992                            ; Special stage	background loading subroutine
00004992                            ; ---------------------------------------------------------------------------
00004992                            
00004992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004992                            
00004992                            
00004992                            SS_BGLoad:				; XREF: SpecialStage
00004992 43F9 00FF 0000             		lea	($FF0000).l,a1
00004998 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000499E 303C 4051                  		move.w	#$4051,d0
000049A2 6100 CC2E                  		bsr.w	EniDec
000049A6 263C 5000 0001             		move.l	#$50000001,d3
000049AC 45F9 00FF 0080             		lea	($FF0080).l,a2
000049B2 7E06                       		moveq	#6,d7
000049B4                            
000049B4                            loc_48BE:
000049B4 2003                       		move.l	d3,d0
000049B6 7C03                       		moveq	#3,d6
000049B8 7800                       		moveq	#0,d4
000049BA 0C47 0003                  		cmpi.w	#3,d7
000049BE 6400                       		bcc.s	loc_48CC
000049C0 7801                       		moveq	#1,d4
000049C2                            
000049C2                            loc_48CC:
000049C2 7A07                       		moveq	#7,d5
000049C4                            
000049C4                            loc_48CE:
000049C4 224A                       		movea.l	a2,a1
000049C6 0A04 0001                  		eori.b	#1,d4
000049CA 6600                       		bne.s	loc_48E2
000049CC 0C47 0006                  		cmpi.w	#6,d7
000049D0 6600                       		bne.s	loc_48F2
000049D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000049D8                            
000049D8                            loc_48E2:
000049D8 48E7 F800                  		movem.l	d0-d4,-(sp)
000049DC 7207                       		moveq	#7,d1
000049DE 7407                       		moveq	#7,d2
000049E0 6100 C8DC                  		bsr.w	ShowVDPGraphics
000049E4 4CDF 001F                  		movem.l	(sp)+,d0-d4
000049E8                            
000049E8                            loc_48F2:
000049E8 0680 0010 0000             		addi.l	#$100000,d0
000049EE 51CD FFD4                  		dbf	d5,loc_48CE
000049F2 0680 0380 0000             		addi.l	#$3800000,d0
000049F8 0A04 0001                  		eori.b	#1,d4
000049FC 51CE FFC4                  		dbf	d6,loc_48CC
00004A00 0683 1000 0000             		addi.l	#$10000000,d3
00004A06 6A00                       		bpl.s	loc_491C
00004A08 4843                       		swap	d3
00004A0A 0683 0000 C000             		addi.l	#$C000,d3
00004A10 4843                       		swap	d3
00004A12                            
00004A12                            loc_491C:
00004A12 D4FC 0080                  		adda.w	#$80,a2
00004A16 51CF FF9C                  		dbf	d7,loc_48BE
00004A1A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A20 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004A26 303C 4000                  		move.w	#$4000,d0
00004A2A 6100 CBA6                  		bsr.w	EniDec
00004A2E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A34 203C 4000 0003             		move.l	#$40000003,d0
00004A3A 723F                       		moveq	#$3F,d1
00004A3C 741F                       		moveq	#$1F,d2
00004A3E 6100 C87E                  		bsr.w	ShowVDPGraphics
00004A42 43F9 00FF 0000             		lea	($FF0000).l,a1
00004A48 203C 5000 0003             		move.l	#$50000003,d0
00004A4E 723F                       		moveq	#$3F,d1
00004A50 743F                       		moveq	#$3F,d2
00004A52 6100 C86A                  		bsr.w	ShowVDPGraphics
00004A56 4E75                       		rts	
00004A58                            ; End of function SS_BGLoad
00004A58                            
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00004A58                            ; to be issued the next time ProcessDMAQueue is called.
00004A58                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00004A58                            ; by issuing the commands (this subroutine DOES check for overflow)
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            ; In case you wish to use this queue system outside of the spin dash, this is the
00004A58                            ; registers in which it expects data in:
00004A58                            ; d1.l: Address to data (In 68k address space)
00004A58                            ; d2.w: Destination in VRAM
00004A58                            ; d3.w: Length of data
00004A58                            ; ---------------------------------------------------------------------------
00004A58                            
00004A58                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004A58                            
00004A58                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00004A58                            QueueDMATransfer:
00004A58 2278 C8FC                  		movea.l ($FFFFC8FC).w,a1
00004A5C B2FC C8FC                  		cmpa.w #$C8FC,a1
00004A60 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004A62                            
00004A62                            ; piece together some VDP commands and store them for later...
00004A62 303C 9300                  		move.w #$9300,d0 ; command to specify DMA transfer length & $00FF
00004A66 1003                       		move.b d3,d0
00004A68 32C0                       		move.w d0,(a1)+ ; store command
00004A6A                            
00004A6A 303C 9400                  		move.w #$9400,d0 ; command to specify DMA transfer length & $FF00
00004A6E E04B                       		lsr.w #8,d3
00004A70 1003                       		move.b d3,d0
00004A72 32C0                       		move.w d0,(a1)+ ; store command
00004A74                            
00004A74 303C 9500                  		move.w #$9500,d0 ; command to specify source address & $0001FE
00004A78 E289                       		lsr.l #1,d1
00004A7A 1001                       		move.b d1,d0
00004A7C 32C0                       		move.w d0,(a1)+ ; store command
00004A7E                            
00004A7E 303C 9600                  		move.w #$9600,d0 ; command to specify source address & $01FE00
00004A82 E089                       		lsr.l #8,d1
00004A84 1001                       		move.b d1,d0
00004A86 32C0                       		move.w d0,(a1)+ ; store command
00004A88                            
00004A88 303C 9700                  		move.w #$9700,d0 ; command to specify source address & $FE0000
00004A8C E089                       		lsr.l #8,d1
00004A8E 1001                       		move.b d1,d0
00004A90 32C0                       		move.w d0,(a1)+ ; store command
00004A92                            
00004A92 0282 0000 FFFF             		andi.l #$FFFF,d2 ; command to specify destination address and begin DMA
00004A98 E58A                       		lsl.l #2,d2
00004A9A E44A                       		lsr.w #2,d2
00004A9C 4842                       		swap d2
00004A9E 0082 4000 0080             		ori.l #$40000080,d2 ; set bits to specify VRAM transfer
00004AA4 22C2                       		move.l d2,(a1)+ ; store command
00004AA6                            
00004AA6 21C9 C8FC                  		move.l a1,($FFFFC8FC).w ; set the next free slot address
00004AAA B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AAE 6700                       		beq.s QueueDMATransfer_Done ; return if there's no more room in the buffer
00004AB0 32BC 0000                  		move.w #0,(a1) ; put a stop token at the end of the used part of the buffer
00004AB4                            ; return_14AA:
00004AB4                            QueueDMATransfer_Done:
00004AB4 4E75                       		rts
00004AB6                            ; End of function QueueDMATransfer
00004AB6                            
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            ; Subroutine for issuing all VDP commands that were queued
00004AB6                            ; (by earlier calls to QueueDMATransfer)
00004AB6                            ; Resets the queue when it's done
00004AB6                            ; ---------------------------------------------------------------------------
00004AB6                            
00004AB6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004AB6                            
00004AB6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00004AB6                            ProcessDMAQueue:
00004AB6 4BF9 00C0 0004             		lea ($C00004).l,a5
00004ABC 43F8 C800                  		lea ($FFFFC800).w,a1
00004AC0                            ; loc_14B6:
00004AC0                            ProcessDMAQueue_Loop:
00004AC0 3019                       		move.w (a1)+,d0
00004AC2 6700                       		beq.s ProcessDMAQueue_Done ; branch if we reached a stop token
00004AC4                            		; issue a set of VDP commands...
00004AC4 3A80                       		move.w d0,(a5) ; transfer length
00004AC6 3A99                       		move.w (a1)+,(a5) ; transfer length
00004AC8 3A99                       		move.w (a1)+,(a5) ; source address
00004ACA 3A99                       		move.w (a1)+,(a5) ; source address
00004ACC 3A99                       		move.w (a1)+,(a5) ; source address
00004ACE 3A99                       		move.w (a1)+,(a5) ; destination
00004AD0 3A99                       		move.w (a1)+,(a5) ; destination
00004AD2 B2FC C8FC                  		cmpa.w #$C8FC,a1
00004AD6 66E8                       		bne.s ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00004AD8                            ; loc_14CE:
00004AD8                            ProcessDMAQueue_Done:
00004AD8 31FC 0000 C800             		move.w #0,($FFFFC800).w
00004ADE 21FC FFFF C800 C8FC        		move.l #$FFFFC800,($FFFFC8FC).w
00004AE6 4E75                       		rts
00004AE8                            ; End of function ProcessDMAQueue
00004AE8                            
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            ; Pallet cycling routine - special stage
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            
00004AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AE8                            
00004AE8                            
00004AE8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004AE8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004AEC 6600                       		bne.s	locret_49E6
00004AEE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004AF2 6A00                       		bpl.s	locret_49E6
00004AF4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004AFA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004AFE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004B02 0240 001F                  		andi.w	#$1F,d0
00004B06 E548                       		lsl.w	#2,d0
00004B08 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004B0E D0C0                       		adda.w	d0,a0
00004B10 1018                       		move.b	(a0)+,d0
00004B12 6A00                       		bpl.s	loc_4992
00004B14 303C 01FF                  		move.w	#$1FF,d0
00004B18                            
00004B18                            loc_4992:
00004B18 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004B1C 7000                       		moveq	#0,d0
00004B1E 1018                       		move.b	(a0)+,d0
00004B20 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004B24 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004B2A 43F1 0000                  		lea	(a1,d0.w),a1
00004B2E 303C 8200                  		move.w	#-$7E00,d0
00004B32 1019                       		move.b	(a1)+,d0
00004B34 3C80                       		move.w	d0,(a6)
00004B36 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004B3A 303C 8400                  		move.w	#-$7C00,d0
00004B3E 1018                       		move.b	(a0)+,d0
00004B40 3C80                       		move.w	d0,(a6)
00004B42 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004B4C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004B54 7000                       		moveq	#0,d0
00004B56 1018                       		move.b	(a0)+,d0
00004B58 6B00                       		bmi.s	loc_49E8
00004B5A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004B60 D2C0                       		adda.w	d0,a1
00004B62 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004B66 24D9                       		move.l	(a1)+,(a2)+
00004B68 24D9                       		move.l	(a1)+,(a2)+
00004B6A 24D9                       		move.l	(a1)+,(a2)+
00004B6C                            
00004B6C                            locret_49E6:
00004B6C 4E75                       		rts	
00004B6E                            ; ===========================================================================
00004B6E                            
00004B6E                            loc_49E8:				; XREF: PalCycle_SS
00004B6E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004B72 0C40 008A                  		cmpi.w	#$8A,d0
00004B76 6500                       		bcs.s	loc_49F4
00004B78 5241                       		addq.w	#1,d1
00004B7A                            
00004B7A                            loc_49F4:
00004B7A C2FC 002A                  		mulu.w	#$2A,d1
00004B7E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004B84 D2C1                       		adda.w	d1,a1
00004B86 0240 007F                  		andi.w	#$7F,d0
00004B8A 0880 0000                  		bclr	#0,d0
00004B8E 6700                       		beq.s	loc_4A18
00004B90 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004B94 24D1                       		move.l	(a1),(a2)+
00004B96 24E9 0004                  		move.l	4(a1),(a2)+
00004B9A 24E9 0008                  		move.l	8(a1),(a2)+
00004B9E                            
00004B9E                            loc_4A18:
00004B9E D2FC 000C                  		adda.w	#$C,a1
00004BA2 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004BA6 0C40 000A                  		cmpi.w	#$A,d0
00004BAA 6500                       		bcs.s	loc_4A2E
00004BAC 0440 000A                  		subi.w	#$A,d0
00004BB0 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004BB4                            
00004BB4                            loc_4A2E:
00004BB4 3200                       		move.w	d0,d1
00004BB6 D040                       		add.w	d0,d0
00004BB8 D041                       		add.w	d1,d0
00004BBA D2C0                       		adda.w	d0,a1
00004BBC 24D9                       		move.l	(a1)+,(a2)+
00004BBE 34D9                       		move.w	(a1)+,(a2)+
00004BC0 4E75                       		rts	
00004BC2                            ; End of function PalCycle_SS
00004BC2                            
00004BC2                            ; ===========================================================================
00004BC2 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004BD2                            					; XREF: PalCycle_SS
00004BD2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004BE2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004BF2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004C02 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004C12 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004C22 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004C32 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004C42                            		even
00004C42 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004C50                            					; XREF: PalCycle_SS
00004C50                            		even
00004C50                            
00004C50                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004C98                            		even
00004C98                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004D6A                            		even
00004D6A                            
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            ; Subroutine to	make the special stage background animated
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            
00004D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D6A                            
00004D6A                            
00004D6A                            SS_BGAnimate:				; XREF: SpecialStage
00004D6A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004D6E 6600                       		bne.s	loc_4BF6
00004D70 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004D76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D7C                            
00004D7C                            loc_4BF6:
00004D7C 0C40 0008                  		cmpi.w	#8,d0
00004D80 6400                       		bcc.s	loc_4C4E
00004D82 0C40 0006                  		cmpi.w	#6,d0
00004D86 6600                       		bne.s	loc_4C10
00004D88 5278 F718                  		addq.w	#1,($FFFFF718).w
00004D8C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004D90 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004D96                            
00004D96                            loc_4C10:
00004D96 7000                       		moveq	#0,d0
00004D98 3038 F708                  		move.w	($FFFFF708).w,d0
00004D9C 4440                       		neg.w	d0
00004D9E 4840                       		swap	d0
00004DA0 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004DA6 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DAA 7609                       		moveq	#9,d3
00004DAC                            
00004DAC                            loc_4C26:
00004DAC 302B 0002                  		move.w	2(a3),d0
00004DB0 6100 DC1A                  		bsr.w	CalcSine
00004DB4 7400                       		moveq	#0,d2
00004DB6 1419                       		move.b	(a1)+,d2
00004DB8 C1C2                       		muls.w	d2,d0
00004DBA E080                       		asr.l	#8,d0
00004DBC 36C0                       		move.w	d0,(a3)+
00004DBE 1419                       		move.b	(a1)+,d2
00004DC0 4882                       		ext.w	d2
00004DC2 D55B                       		add.w	d2,(a3)+
00004DC4 51CB FFE6                  		dbf	d3,loc_4C26
00004DC8 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004DCC 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004DD2 6000                       		bra.s	loc_4C7E
00004DD4                            ; ===========================================================================
00004DD4                            
00004DD4                            loc_4C4E:				; XREF: SS_BGAnimate
00004DD4 0C40 000C                  		cmpi.w	#$C,d0
00004DD8 6600                       		bne.s	loc_4C74
00004DDA 5378 F718                  		subq.w	#1,($FFFFF718).w
00004DDE 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004DE2 243C 0001 8000             		move.l	#$18000,d2
00004DE8 7206                       		moveq	#6,d1
00004DEA                            
00004DEA                            loc_4C64:
00004DEA 2013                       		move.l	(a3),d0
00004DEC 9082                       		sub.l	d2,d0
00004DEE 26C0                       		move.l	d0,(a3)+
00004DF0 0482 0000 2000             		subi.l	#$2000,d2
00004DF6 51C9 FFF2                  		dbf	d1,loc_4C64
00004DFA                            
00004DFA                            loc_4C74:
00004DFA 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004DFE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004E04                            
00004E04                            loc_4C7E:
00004E04 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004E08 3038 F718                  		move.w	($FFFFF718).w,d0
00004E0C 4440                       		neg.w	d0
00004E0E 4840                       		swap	d0
00004E10 7600                       		moveq	#0,d3
00004E12 161A                       		move.b	(a2)+,d3
00004E14 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004E18 4442                       		neg.w	d2
00004E1A 0242 00FF                  		andi.w	#$FF,d2
00004E1E E54A                       		lsl.w	#2,d2
00004E20                            
00004E20                            loc_4C9A:
00004E20 301B                       		move.w	(a3)+,d0
00004E22 544B                       		addq.w	#2,a3
00004E24 7200                       		moveq	#0,d1
00004E26 121A                       		move.b	(a2)+,d1
00004E28 5341                       		subq.w	#1,d1
00004E2A                            
00004E2A                            loc_4CA4:
00004E2A 2380 2000                  		move.l	d0,(a1,d2.w)
00004E2E 5842                       		addq.w	#4,d2
00004E30 0242 03FC                  		andi.w	#$3FC,d2
00004E34 51C9 FFF4                  		dbf	d1,loc_4CA4
00004E38 51CB FFE6                  		dbf	d3,loc_4C9A
00004E3C 4E75                       		rts	
00004E3E                            ; End of function SS_BGAnimate
00004E3E                            
00004E3E                            ; ===========================================================================
00004E3E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004E4A                            		even
00004E4A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004E52                            		even
00004E52 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004E66                            		even
00004E66                            					; XREF: SS_BGAnimate
00004E66                            ; ===========================================================================
00004E66                            
00004E66                            ; ---------------------------------------------------------------------------
00004E66                            ; Continue screen
00004E66                            ; ---------------------------------------------------------------------------
00004E66                            
00004E66                            ContinueScreen:				; XREF: GameModeArray
00004E66 6100 CFF8                  		bsr.w	Pal_FadeFrom
00004E6A 46FC 2700                  		move	#$2700,sr
00004E6E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004E72 0200 00BF                  		andi.b	#$BF,d0
00004E76 33C0 00C0 0004             		move.w	d0,($C00004).l
00004E7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E82 3CBC 8004                  		move.w	#$8004,(a6)
00004E86 3CBC 8700                  		move.w	#$8700,(a6)
00004E8A 6100 C244                  		bsr.w	ClearScreen
00004E8E 43F8 D000                  		lea	($FFFFD000).w,a1
00004E92 7000                       		moveq	#0,d0
00004E94 323C 07FF                  		move.w	#$7FF,d1
00004E98                            
00004E98                            Cont_ClrObjRam:
00004E98 22C0                       		move.l	d0,(a1)+
00004E9A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004E9E                            
00004E9E 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00004EA8 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00004EAE 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
00004EB4 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00004EB8 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004EC2 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004EC8 6100 C41E                  		bsr.w	NemDec
00004ECC 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004ED6 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004EDC 6100 C40A                  		bsr.w	NemDec
00004EE0 720A                       		moveq	#10,d1
00004EE2 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004EE8 7012                       		moveq	#$12,d0
00004EEA 6100 D1FA                  		bsr.w	PalLoad1	; load continue	screen pallet
00004EEE 103C 0090                  		move.b	#$90,d0
00004EF2 6100 C2FC                  		bsr.w	PlaySound	; play continue	music
00004EF6 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004EFC 11FC 0000 870D             		move.b	#0,(Level_started_flag).w
00004F02 42B8 F700                  		clr.l	($FFFFF700).w
00004F06 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004F0E 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004F14 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004F1A 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004F20 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004F26 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004F2C 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004F32 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004F38 11FC 0000 FFD0             		move.b    #0,($FFFFFFD0).w
00004F3E 4EB9 0000 0000             		jsr	ObjectsLoad
00004F44 4EB9 0000 0000             		jsr	BuildSprites
00004F4A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004F4E 0000 0040                  		ori.b	#$40,d0
00004F52 33C0 00C0 0004             		move.w	d0,($C00004).l
00004F58 6100 CE84                  		bsr.w	Pal_FadeTo
00004F5C                            
00004F5C                            ; ---------------------------------------------------------------------------
00004F5C                            ; Continue screen main loop
00004F5C                            ; ---------------------------------------------------------------------------
00004F5C                            
00004F5C                            Cont_MainLoop:
00004F5C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004F62 6100 DA36                  		bsr.w	DelayProgram
00004F66 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F6C 6400                       		bcc.s	loc_4DF2
00004F6E 46FC 2700                  		move	#$2700,sr
00004F72 3238 F614                  		move.w	($FFFFF614).w,d1
00004F76 82FC 003C                  		divu.w	#$3C,d1
00004F7A 0281 0000 000F             		andi.l	#$F,d1
00004F80 4EB9 0000 0000             		jsr	ContScrCounter
00004F86 46FC 2300                  		move	#$2300,sr
00004F8A                            
00004F8A                            loc_4DF2:
00004F8A 4EB9 0000 0000             		jsr	ObjectsLoad
00004F90 4EB9 0000 0000             		jsr	BuildSprites
00004F96 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004F9C 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004F9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004FA4 64B6                       		bcc.s	Cont_MainLoop
00004FA6 0C78 0100 F614             		cmpi.w	#$100,($FFFFF614).w
00004FAC 6E00 FFAE                  		bgt.w	Cont_MainLoop
00004FB0 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00004FB6 0C78 0040 F614             		cmpi.w	#$40,($FFFFF614).w
00004FBC 6E00 FF9E                  		bgt.w	Cont_MainLoop
00004FC0 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
00004FC6 4A78 F614                  		tst.w	($FFFFF614).w
00004FCA 6600 FF90                  		bne.w	Cont_MainLoop
00004FCE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00004FD4 4E75                       		rts	
00004FD6                            ; ===========================================================================
00004FD6                            
00004FD6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004FD6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004FDC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004FE2 7000                       		moveq	#0,d0
00004FE4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004FE8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004FEC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004FF0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004FF4 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004FF8 21FC 0000 1388 FFC0                move.l  #$1388,($FFFFFFC0).w    ; Initialize score limit for 1-up (50000)			
00005000 4E75                       		rts	
00005002                            ; ===========================================================================
00005002                            
00005002                            ; ---------------------------------------------------------------------------
00005002                            ; Object 80 - Continue screen elements
00005002                            ; ---------------------------------------------------------------------------
00005002                            
00005002                            Obj80:					; XREF: Obj_Index
00005002 7000                       		moveq	#0,d0
00005004 1028 0024                  		move.b	$24(a0),d0
00005008 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000500C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005010                            ; ===========================================================================
00005010 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005012 0000                       		dc.w Obj80_Display-Obj80_Index
00005014 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005016 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005018                            ; ===========================================================================
00005018                            
00005018                            Obj80_Main:				; XREF: Obj80_Index
00005018 5428 0024                  		addq.b	#2,$24(a0)
0000501C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005024 317C 8500 0002             		move.w	#$8500,2(a0)
0000502A 117C 0000 0001             		move.b	#0,1(a0)
00005030 117C 003C 0019             		move.b	#$3C,$19(a0)
00005036 317C 0120 0008             		move.w	#$120,8(a0)
0000503C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005042 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005048                            
00005048                            Obj80_Display:				; XREF: Obj80_Index
00005048 4EF9 0000 0000             		jmp	DisplaySprite
0000504E                            ; ===========================================================================
0000504E                            Obj80_MiniSonicPos:
0000504E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005060 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000506C                            ; ===========================================================================
0000506C                            
0000506C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000506C 2248                       		movea.l	a0,a1
0000506E 45F9 0000 504E             		lea	(Obj80_MiniSonicPos).l,a2
00005074 7200                       		moveq	#0,d1
00005076 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000507A 5501                       		subq.b	#2,d1
0000507C 6400                       		bcc.s	loc_4EC4
0000507E 4EF9 0000 0000             		jmp	DeleteObject
00005084                            ; ===========================================================================
00005084                            
00005084                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005084 7601                       		moveq	#1,d3
00005086 0C01 000E                  		cmpi.b	#$E,d1
0000508A 6500                       		bcs.s	loc_4ED0
0000508C 7600                       		moveq	#0,d3
0000508E 720E                       		moveq	#$E,d1
00005090                            
00005090                            loc_4ED0:
00005090 1401                       		move.b	d1,d2
00005092 0202 0001                  		andi.b	#1,d2
00005096                            
00005096                            Obj80_MiniSonLoop:
00005096 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000509A 335A 0008                  		move.w	(a2)+,8(a1)
0000509E 4A02                       		tst.b	d2
000050A0 6700                       		beq.s	loc_4EEA
000050A2 0469 000A 0008             		subi.w	#$A,8(a1)
000050A8                            
000050A8                            loc_4EEA:
000050A8 337C 00D0 000A             		move.w	#$D0,$A(a1)
000050AE 137C 0006 001A             		move.b	#6,$1A(a1)
000050B4 137C 0006 0024             		move.b	#6,$24(a1)
000050BA 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000050C2 337C 8551 0002             		move.w	#$8551,2(a1)
000050C8 137C 0000 0001             		move.b	#0,1(a1)
000050CE 43E9 0040                  		lea	$40(a1),a1
000050D2 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000050D6 43E9 FFC0                  		lea	-$40(a1),a1
000050DA 1343 0028                  		move.b	d3,$28(a1)
000050DE                            
000050DE                            Obj80_ChkType:				; XREF: Obj80_Index
000050DE 4A28 0028                  		tst.b	$28(a0)
000050E2 6700                       		beq.s	loc_4F40
000050E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000050EA 6500                       		bcs.s	loc_4F40
000050EC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000050F0 0200 0001                  		andi.b	#1,d0
000050F4 6600                       		bne.s	loc_4F40
000050F6 4A78 D010                  		tst.w	($FFFFD010).w
000050FA 6600                       		bne.s	Obj80_Delete
000050FC 4E75                       		rts	
000050FE                            ; ===========================================================================
000050FE                            
000050FE                            loc_4F40:				; XREF: Obj80_ChkType
000050FE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005102 0200 000F                  		andi.b	#$F,d0
00005106 6600                       		bne.s	Obj80_Display2
00005108 0868 0000 001A             		bchg	#0,$1A(a0)
0000510E                            
0000510E                            Obj80_Display2:
0000510E 4EF9 0000 0000             		jmp	DisplaySprite
00005114                            ; ===========================================================================
00005114                            
00005114                            Obj80_Delete:				; XREF: Obj80_ChkType
00005114 4EF9 0000 0000             		jmp	DeleteObject
0000511A                            ; ===========================================================================
0000511A                            
0000511A                            ; ---------------------------------------------------------------------------
0000511A                            ; Object 81 - Sonic on the continue screen
0000511A                            ; ---------------------------------------------------------------------------
0000511A                            
0000511A                            Obj81:					; XREF: Obj_Index
0000511A 7000                       		moveq	#0,d0
0000511C 1028 0024                  		move.b	$24(a0),d0
00005120 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005124 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005128 4EF9 0000 0000             		jmp	DisplaySprite
0000512E                            ; ===========================================================================
0000512E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005130 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005132 0000                       		dc.w Obj81_Animate-Obj81_Index
00005134 0000                       		dc.w Obj81_Run-Obj81_Index
00005136                            ; ===========================================================================
00005136                            
00005136                            Obj81_Main:				; XREF: Obj81_Index
00005136 5428 0024                  		addq.b	#2,$24(a0)
0000513A 317C 00A0 0008             		move.w	#$A0,8(a0)
00005140 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005146 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000514E 317C 0780 0002             		move.w	#$780,2(a0)
00005154 117C 0004 0001             		move.b	#4,1(a0)
0000515A 117C 0002 0018             		move.b	#2,$18(a0)
00005160 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005166 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000516C                            
0000516C                            Obj81_ChkLand:				; XREF: Obj81_Index
0000516C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005172 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005174 5428 0024                  		addq.b	#2,$24(a0)
00005178 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000517C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005184 317C 8500 0002             		move.w	#$8500,2(a0)
0000518A 117C 0000 001C             		move.b	#0,$1C(a0)
00005190 6000                       		bra.s	Obj81_Animate
00005192                            ; ===========================================================================
00005192                            
00005192                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005192 4EB9 0000 0000             		jsr	SpeedToPos
00005198 4EB9 0000 0000             		jsr	Sonic_Animate
0000519E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000051A4                            ; ===========================================================================
000051A4                            
000051A4                            Obj81_Animate:				; XREF: Obj81_Index
000051A4 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000051A8 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000051AA 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000051B0 4EF9 0000 0000             		jmp	AnimateSprite
000051B6                            ; ===========================================================================
000051B6                            
000051B6                            Obj81_GetUp:				; XREF: Obj81_Animate
000051B6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000051BC 5428 0024                  		addq.b	#2,$24(a0)
000051C0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000051C8 317C 0780 0002             		move.w	#$780,2(a0)
000051CE 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000051D4 4268 0020                  		clr.w	$20(a0)
000051D8 5168 000C                  		subq.w	#8,$C(a0)
000051DC 103C 00E0                  		move.b	#$E0,d0
000051E0 6100 C014                  		bsr.w	PlaySound_Special ; fade out music
000051E4                            
000051E4                            Obj81_Run:				; XREF: Obj81_Index
000051E4 0C68 0800 0020             		cmpi.w	#$800,$20(a0)	; check	Sonic's "run speed" (not moving)
000051EA 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000051EC 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000051F2 6000                       		bra.s	Obj81_ShowRun
000051F4                            ; ===========================================================================
000051F4                            
000051F4                            Obj81_AddSpeed:				; XREF: Obj81_Run
000051F4 0668 0020 0020             		addi.w	#$20,$20(a0)	; increase "run	speed"
000051FA                            
000051FA                            Obj81_ShowRun:				; XREF: Obj81_Run
000051FA 4EB9 0000 0000             		jsr	SpeedToPos
00005200 4EB9 0000 0000             		jsr	Sonic_Animate
00005206 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000520C                            ; ===========================================================================
0000520C                            Ani_obj81:
0000520C                            	include "_anim\obj81.asm"
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Animation script - Sonic on the continue screen
0000520C                            ; ---------------------------------------------------------------------------
0000520C 0000                       		dc.w byte_504A-Ani_obj81
0000520E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000521A 00                         		even
0000521A 00                         		even
0000521A                            
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Sprite mappings - Continue screen
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            Map_obj80:
0000521A                            	include "_maps\obj80.asm"
0000521A                            ; ---------------------------------------------------------------------------
0000521A                            ; Sprite mappings - Continue screen
0000521A                            ; ---------------------------------------------------------------------------
0000521A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000521E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005222 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005226 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000522A 0B                         byte_5066:	dc.b $B
0000522B F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005230 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005235 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000523A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000523F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005244 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005249 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000524E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005253 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005258 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000525D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005262 03                         byte_509E:	dc.b 3
00005263 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005268 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000526D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005272 03                         byte_50AE:	dc.b 3
00005273 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005278 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000527D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005282 03                         byte_50BE:	dc.b 3
00005283 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005288 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000528D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005292 02                         byte_50CE:	dc.b 2
00005293 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005298 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000529D 01                         byte_50D9:	dc.b 1
0000529E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000052A3 01                         byte_50DF:	dc.b 1
000052A4 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000052AA 00                         		even
000052AA 00                         		even
000052AA                            
000052AA                            ; ===========================================================================
000052AA                            ; ---------------------------------------------------------------------------
000052AA                            ; Ending sequence in Green Hill	Zone
000052AA                            ; ---------------------------------------------------------------------------
000052AA                            
000052AA                            EndingSequence:				; XREF: GameModeArray
000052AA 103C 00E4                  		move.b	#$E4,d0
000052AE 6100 BF46                  		bsr.w	PlaySound_Special ; stop music
000052B2 6100 CBAC                  		bsr.w	Pal_FadeFrom
000052B6 43F8 D000                  		lea	($FFFFD000).w,a1
000052BA 7000                       		moveq	#0,d0
000052BC 323C 07FF                  		move.w	#$7FF,d1
000052C0                            
000052C0                            End_ClrObjRam:
000052C0 22C0                       		move.l	d0,(a1)+
000052C2 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000052C6                            
000052C6 43F8 F628                  		lea	($FFFFF628).w,a1
000052CA 7000                       		moveq	#0,d0
000052CC 323C 0015                  		move.w	#$15,d1
000052D0                            
000052D0                            End_ClrRam:
000052D0 22C0                       		move.l	d0,(a1)+
000052D2 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000052D6                            
000052D6 43F8 F700                  		lea	($FFFFF700).w,a1
000052DA 7000                       		moveq	#0,d0
000052DC 323C 003F                  		move.w	#$3F,d1
000052E0                            
000052E0                            End_ClrRam2:
000052E0 22C0                       		move.l	d0,(a1)+
000052E2 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000052E6                            
000052E6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000052EA 7000                       		moveq	#0,d0
000052EC 323C 0047                  		move.w	#$47,d1
000052F0                            
000052F0                            End_ClrRam3:
000052F0 22C0                       		move.l	d0,(a1)+
000052F2 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000052F6                            
000052F6 46FC 2700                  		move	#$2700,sr
000052FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005304 6100 BDCA                  		bsr.w	ClearScreen
00005308 4DF9 00C0 0004             		lea	($C00004).l,a6
0000530E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005312 3CBC 8230                  		move.w	#$8230,(a6)
00005316 3CBC 8407                  		move.w	#$8407,(a6)
0000531A 3CBC 857C                  		move.w	#$857C,(a6)
0000531E 3CBC 9001                  		move.w	#$9001,(a6)
00005322 3CBC 8004                  		move.w	#$8004,(a6)
00005326 3CBC 8720                  		move.w	#$8720,(a6)
0000532A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005330 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005334 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000533A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005340 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005346 6700                       		beq.s	End_LoadData	; if yes, branch
00005348 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000534E                            
0000534E                            End_LoadData:
0000534E 701C                       		moveq	#$1C,d0
00005350 6100 C24E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005354 4EB9 0000 0000             		jsr	Hud_Base
0000535A 6100 0000                  		bsr.w	LevelSizeLoad
0000535E 6100 0000                  		bsr.w	DeformBgLayer
00005362 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005368 6100 0000                  		bsr.w	LoadZoneTiles	; load level art			
0000536C 6100 0000                  		bsr.w	MainLoadBlockLoad
00005370 6100 0000                  		bsr.w	LoadTilesFromStart
00005374 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000537C 46FC 2300                  		move	#$2300,sr
00005380 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005386 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000538A 6100 C3C4                  		bsr.w	KosDec
0000538E 7003                       		moveq	#3,d0
00005390 6100 CD54                  		bsr.w	PalLoad1	; load Sonic's pallet
00005394 303C 008B                  		move.w	#$8B,d0
00005398 6100 BE56                  		bsr.w	PlaySound	; play ending sequence music
0000539C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000053A2 6700                       		beq.s	End_LoadSonic	; if not, branch
000053A4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000053AA                            
000053AA                            End_LoadSonic:
000053AA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000053B0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000053B6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000053BC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000053C2 31FC F800 D020             		move.w	#$F800,($FFFFD020).w ; set Sonic's speed
000053C8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000053CE 11FC 0001 FFD0                     move.b    #1,($FFFFFFD0).w
000053D4 4EB9 0000 0000             		jsr	ObjPosLoad
000053DA 4EB9 0000 0000             		jsr	ObjectsLoad
000053E0 4EB9 0000 0000             		jsr	BuildSprites
000053E6 7000                       		moveq	#0,d0
000053E8 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000053EC 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000053F0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000053F4 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000053F8 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000053FC 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005400 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005404 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005408 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000540C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005410 6100 EDE6                  		bsr.w	OscillateNumInit
00005414 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000541A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005420 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005426 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000542C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005432 6100 D566                  		bsr.w	DelayProgram
00005436 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000543A 0000 0040                  		ori.b	#$40,d0
0000543E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005444 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000544A 6100 C992                  		bsr.w	Pal_FadeTo
0000544E                            
0000544E                            ; ---------------------------------------------------------------------------
0000544E                            ; Main ending sequence loop
0000544E                            ; ---------------------------------------------------------------------------
0000544E                            
0000544E                            End_MainLoop:
0000544E 6100 BDB2                  		bsr.w	PauseGame
00005452 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005458 6100 D540                  		bsr.w	DelayProgram
0000545C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005460 6100 0000                  		bsr.w	End_MoveSonic
00005464 4EB9 0000 0000             		jsr	ObjectsLoad
0000546A 6100 0000                  		bsr.w	DeformBgLayer
0000546E 4EB9 0000 0000             		jsr	BuildSprites
00005474 4EB9 0000 0000             		jsr	ObjPosLoad
0000547A 6100 C4F2                  		bsr.w	PalCycle_Load
0000547E 6100 EDCE                  		bsr.w	OscillateNumDo
00005482 6100 EE5A                  		bsr.w	ChangeRingFrame
00005486 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000548C 6700                       		beq.s	loc_52DA	; if yes, branch
0000548E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005494 103C 0091                  		move.b	#$91,d0
00005498 6100 BD5C                  		bsr.w	PlaySound_Special ; play credits music
0000549C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            loc_52DA:
000054A4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000054A8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000054AC                            
000054AC 4278 FE02                  		clr.w	($FFFFFE02).w
000054B0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000054B6 4278 F794                  		clr.w	($FFFFF794).w
000054BA                            
000054BA                            End_AllEmlds:				; XREF: loc_5334
000054BA 6100 BD46                  		bsr.w	PauseGame
000054BE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000054C4 6100 D4D4                  		bsr.w	DelayProgram
000054C8 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000054CC 6100 0000                  		bsr.w	End_MoveSonic
000054D0 4EB9 0000 0000             		jsr	ObjectsLoad
000054D6 6100 0000                  		bsr.w	DeformBgLayer
000054DA 4EB9 0000 0000             		jsr	BuildSprites
000054E0 4EB9 0000 0000             		jsr	ObjPosLoad
000054E6 6100 ED66                  		bsr.w	OscillateNumDo
000054EA 6100 EDF2                  		bsr.w	ChangeRingFrame
000054EE 5378 F794                  		subq.w	#1,($FFFFF794).w
000054F2 6A00                       		bpl.s	loc_5334
000054F4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000054FA 6100 CA8A                  		bsr.w	Pal_ToWhite
000054FE                            
000054FE                            loc_5334:
000054FE 4A78 FE02                  		tst.w	($FFFFFE02).w
00005502 6700 FFB6                  		beq.w	End_AllEmlds
00005506 4278 FE02                  		clr.w	($FFFFFE02).w
0000550A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005510 4BF9 00C0 0004             		lea	($C00004).l,a5
00005516 4DF9 00C0 0000             		lea	($C00000).l,a6
0000551C 47F8 F700                  		lea	($FFFFF700).w,a3
00005520 49F8 A400                  		lea	($FFFFA400).w,a4
00005524 343C 4000                  		move.w	#$4000,d2
00005528 6100 0000                  		bsr.w	LoadTilesFromStart2
0000552C 7013                       		moveq	#$13,d0
0000552E 6100 CBB6                  		bsr.w	PalLoad1	; load ending pallet
00005532 6100 C9AA                  		bsr.w	Pal_MakeWhite
00005536 6000 FF16                  		bra.w	End_MainLoop
0000553A                            
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            ; Subroutine controlling Sonic on the ending sequence
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            
0000553A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000553A                            
0000553A                            
0000553A                            End_MoveSonic:				; XREF: End_MainLoop
0000553A 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000553E 6600                       		bne.s	End_MoveSonic2
00005540 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005546 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005548 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000554C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005552 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005558 4E75                       		rts	
0000555A                            ; ===========================================================================
0000555A                            
0000555A                            End_MoveSonic2:				; XREF: End_MoveSonic
0000555A 5500                       		subq.b	#2,d0
0000555C 6600                       		bne.s	End_MoveSonic3
0000555E 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005564 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005566 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000556A 7000                       		moveq	#0,d0
0000556C 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005570 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005574 31C0 D020                  		move.w	d0,($FFFFD020).w
00005578 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000557E 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005584 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000558A 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005590 4E75                       		rts	
00005592                            ; ===========================================================================
00005592                            
00005592                            End_MoveSonic3:				; XREF: End_MoveSonic
00005592 5500                       		subq.b	#2,d0
00005594 6600                       		bne.s	End_MoveSonExit
00005596 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000559A 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000055A0 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000055A6 4278 D024                  		clr.w	($FFFFD024).w
000055AA                            
000055AA                            End_MoveSonExit:
000055AA 4E75                       		rts	
000055AC                            ; End of function End_MoveSonic
000055AC                            
000055AC                            ; ===========================================================================
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            ; Object 87 - Sonic on ending sequence
000055AC                            ; ---------------------------------------------------------------------------
000055AC                            
000055AC                            Obj87:					; XREF: Obj_Index
000055AC 7000                       		moveq	#0,d0
000055AE 1028 0025                  		move.b	$25(a0),d0
000055B2 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000055B6 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000055BA 4EF9 0000 0000             		jmp	DisplaySprite
000055C0                            ; ===========================================================================
000055C0 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000055C4 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000055C8 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000055CC 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000055D0 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000055D4                            ; ===========================================================================
000055D4                            
000055D4                            Obj87_Main:				; XREF: Obj87_Index
000055D4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000055DA 6700                       		beq.s	Obj87_Main2	; if yes, branch
000055DC 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000055E2 317C 00D8 0030             		move.w	#$D8,$30(a0)
000055E8 4E75                       		rts	
000055EA                            ; ===========================================================================
000055EA                            
000055EA                            Obj87_Main2:				; XREF: Obj87_Main
000055EA 5428 0025                  		addq.b	#2,$25(a0)
000055EE 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000055F6 317C 03E1 0002             		move.w	#$3E1,2(a0)
000055FC 117C 0004 0001             		move.b	#4,1(a0)
00005602 4228 0022                  		clr.b	$22(a0)
00005606 117C 0002 0018             		move.b	#2,$18(a0)
0000560C 117C 0000 001A             		move.b	#0,$1A(a0)
00005612 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005618                            
00005618                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005618 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000561C 6600                       		bne.s	Obj87_Wait
0000561E 5428 0025                  		addq.b	#2,$25(a0)
00005622 317C 0001 001C             		move.w	#1,$1C(a0)
00005628 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000562E                            
0000562E                            Obj87_Wait:
0000562E 4E75                       		rts	
00005630                            ; ===========================================================================
00005630                            
00005630                            Obj87_LookUp:				; XREF: Obj87_Index
00005630 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005638 6600                       		bne.s	locret_5480
0000563A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005640 317C 005A 0030             		move.w	#$5A,$30(a0)
00005646 5428 0025                  		addq.b	#2,$25(a0)
0000564A                            
0000564A                            locret_5480:
0000564A 4E75                       		rts	
0000564C                            ; ===========================================================================
0000564C                            
0000564C                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000564C 5368 0030                  		subq.w	#1,$30(a0)
00005650 6600                       		bne.s	Obj87_Wait2
00005652 43F8 D400                  		lea	($FFFFD400).w,a1
00005656 323C 00FF                  		move.w	#$FF,d1
0000565A                            
0000565A                            Obj87_ClrLoop:
0000565A 4299                       		clr.l	(a1)+
0000565C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005660 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005666 5428 0025                  		addq.b	#2,$25(a0)
0000566A 117C 0001 001C             		move.b	#1,$1C(a0)
00005670 317C 003C 0030             		move.w	#$3C,$30(a0)
00005676                            
00005676                            Obj87_Wait2:
00005676 4E75                       		rts	
00005678                            ; ===========================================================================
00005678                            
00005678                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005678 5368 0030                  		subq.w	#1,$30(a0)
0000567C 6600                       		bne.s	Obj87_Wait3
0000567E 5428 0025                  		addq.b	#2,$25(a0)
00005682 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005688 117C 0002 001C             		move.b	#2,$1C(a0)
0000568E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005694                            
00005694                            Obj87_Wait3:
00005694 4E75                       		rts	
00005696                            ; ===========================================================================
00005696                            
00005696                            Obj87_Animate:				; XREF: Obj87_Index
00005696 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000569C 4EF9 0000 0000             		jmp	AnimateSprite
000056A2                            ; ===========================================================================
000056A2                            
000056A2                            Obj87_Leap:				; XREF: Obj87_Index
000056A2 5368 0030                  		subq.w	#1,$30(a0)
000056A6 6600                       		bne.s	Obj87_Wait4
000056A8 5428 0025                  		addq.b	#2,$25(a0)
000056AC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000056B4 317C 03E1 0002             		move.w	#$3E1,2(a0)
000056BA 117C 0004 0001             		move.b	#4,1(a0)
000056C0 4228 0022                  		clr.b	$22(a0)
000056C4 117C 0002 0018             		move.b	#2,$18(a0)
000056CA 117C 0005 001A             		move.b	#5,$1A(a0)
000056D0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000056D6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000056DC 60B8                       		bra.s	Obj87_Animate
000056DE                            ; ===========================================================================
000056DE                            
000056DE                            Obj87_Wait4:				; XREF: Obj87_Leap
000056DE 4E75                       		rts	
000056E0                            ; ===========================================================================
000056E0                            Ani_obj87:
000056E0                            	include "_anim\obj87.asm"
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            ; Animation script - Sonic on the ending sequence
000056E0                            ; ---------------------------------------------------------------------------
000056E0 0000                       		dc.w byte_551C-Ani_obj87
000056E2 0000                       		dc.w byte_552A-Ani_obj87
000056E4 0000                       		dc.w byte_5534-Ani_obj87
000056E6 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000056F4 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000056FE 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005706                            		even
00005706                            		even
00005706                            
00005706                            ; ===========================================================================
00005706                            ; ---------------------------------------------------------------------------
00005706                            ; Object 88 - chaos emeralds on	the ending sequence
00005706                            ; ---------------------------------------------------------------------------
00005706                            
00005706                            Obj88:					; XREF: Obj_Index
00005706 7000                       		moveq	#0,d0
00005708 1028 0024                  		move.b	$24(a0),d0
0000570C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005710 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005714 4EF9 0000 0000             		jmp	DisplaySprite
0000571A                            ; ===========================================================================
0000571A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000571C 0000                       		dc.w Obj88_Move-Obj88_Index
0000571E                            ; ===========================================================================
0000571E                            
0000571E                            Obj88_Main:				; XREF: Obj88_Index
0000571E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005724 6700                       		beq.s	Obj88_Main2
00005726 588F                       		addq.l	#4,sp
00005728 4E75                       		rts	
0000572A                            ; ===========================================================================
0000572A                            
0000572A                            Obj88_Main2:				; XREF: Obj88_Main
0000572A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005730 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005736 2248                       		movea.l	a0,a1
00005738 7600                       		moveq	#0,d3
0000573A 7401                       		moveq	#1,d2
0000573C 7205                       		moveq	#5,d1
0000573E                            
0000573E                            Obj88_MainLoop:
0000573E 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005742 5429 0024                  		addq.b	#2,$24(a1)
00005746 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000574E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005754 137C 0004 0001             		move.b	#4,1(a1)
0000575A 137C 0001 0018             		move.b	#1,$18(a1)
00005760 3368 0008 0038             		move.w	8(a0),$38(a1)
00005766 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000576C 1342 001C                  		move.b	d2,$1C(a1)
00005770 1342 001A                  		move.b	d2,$1A(a1)
00005774 5202                       		addq.b	#1,d2
00005776 1343 0026                  		move.b	d3,$26(a1)
0000577A 0603 002A                  		addi.b	#$2A,d3
0000577E 43E9 0040                  		lea	$40(a1),a1
00005782 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005786                            
00005786                            Obj88_Move:				; XREF: Obj88_Index
00005786 3028 003E                  		move.w	$3E(a0),d0
0000578A D168 0026                  		add.w	d0,$26(a0)
0000578E 1028 0026                  		move.b	$26(a0),d0
00005792 4EB9 0000 29CC             		jsr	(CalcSine).l
00005798 7800                       		moveq	#0,d4
0000579A 1828 003C                  		move.b	$3C(a0),d4
0000579E C3C4                       		muls.w	d4,d1
000057A0 E081                       		asr.l	#8,d1
000057A2 C1C4                       		muls.w	d4,d0
000057A4 E080                       		asr.l	#8,d0
000057A6 D268 0038                  		add.w	$38(a0),d1
000057AA D068 003A                  		add.w	$3A(a0),d0
000057AE 3141 0008                  		move.w	d1,8(a0)
000057B2 3140 000C                  		move.w	d0,$C(a0)
000057B6 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000057BC 6700                       		beq.s	loc_55FA
000057BE 0668 0020 003C             		addi.w	#$20,$3C(a0)
000057C4                            
000057C4                            loc_55FA:
000057C4 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000057CA 6700                       		beq.s	loc_5608
000057CC 0668 0020 003E             		addi.w	#$20,$3E(a0)
000057D2                            
000057D2                            loc_5608:
000057D2 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000057D8 6700                       		beq.s	locret_5614
000057DA 5368 003A                  		subq.w	#1,$3A(a0)
000057DE                            
000057DE                            locret_5614:
000057DE 4E75                       		rts	
000057E0                            ; ===========================================================================
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            
000057E0                            Obj89:					; XREF: Obj_Index
000057E0 7000                       		moveq	#0,d0
000057E2 1028 0024                  		move.b	$24(a0),d0
000057E6 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000057EA 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000057EE                            ; ===========================================================================
000057EE 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000057F0 0000                       		dc.w Obj89_Move-Obj89_Index
000057F2 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000057F4                            ; ===========================================================================
000057F4                            
000057F4                            Obj89_Main:				; XREF: Obj89_Index
000057F4 5428 0024                  		addq.b	#2,$24(a0)
000057F8 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000057FE 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005804 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000580C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005812 117C 0000 0001             		move.b	#0,1(a0)
00005818 117C 0000 0018             		move.b	#0,$18(a0)
0000581E                            
0000581E                            Obj89_Move:				; XREF: Obj89_Index
0000581E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005824 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005826 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000582C 4EF9 0000 0000             		jmp	DisplaySprite
00005832                            ; ===========================================================================
00005832                            
00005832                            Obj89_Delay:				; XREF: Obj89_Move
00005832 5428 0024                  		addq.b	#2,$24(a0)
00005836 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000583C                            
0000583C                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000583C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005840 6A00                       		bpl.s	Obj89_Display
00005842 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005848                            
00005848                            Obj89_Display:
00005848 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000584E                            ; ===========================================================================
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            ; Sprite mappings - Sonic on the ending	sequence
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            Map_obj87:
0000584E                            	include "_maps\obj87.asm"
0000584E                            ; ---------------------------------------------------------------------------
0000584E                            ; Sprite mappings - Sonic on the ending	sequence
0000584E                            ; ---------------------------------------------------------------------------
0000584E 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005852 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005856 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000585A 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000585E 02                         byte_5690:	dc.b 2
0000585F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005864 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005869 03                         byte_569B:	dc.b 3
0000586A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000586F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005874 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005879 02                         byte_56AB:	dc.b 2
0000587A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000587F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005884 02                         byte_56B6:	dc.b 2
00005885 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000588A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000588F 02                         byte_56C1:	dc.b 2
00005890 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005895 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000589A 03                         byte_56CC:	dc.b 3
0000589B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000058A0 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000058A5 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000058AA 07                         byte_56DC:	dc.b 7
000058AB B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000058B0 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000058B5 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000058BA CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000058BF DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000058C4 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000058C9 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000058CE 18                         byte_5700:	dc.b $18
000058CF 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000058D4 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000058D9 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000058DE 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000058E3 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000058E8 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000058ED 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000058F2 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000058F7 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000058FC B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005901 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005906 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000590B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005910 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005915 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000591A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000591F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005924 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005929 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000592E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005933 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005938 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000593D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005942 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005948 00                         		even
00005948 00                         		even
00005948                            
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; Sprite mappings - chaos emeralds on the ending sequence
00005948                            ; ---------------------------------------------------------------------------
00005948                            Map_obj88:
00005948                            	include "_maps\obj88.asm"
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; Sprite mappings - chaos emeralds on the ending sequence
00005948                            ; ---------------------------------------------------------------------------
00005948 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000594C 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005950 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005954 0000                       		dc.w byte_57AC-Map_obj88
00005956 01                         byte_5788:	dc.b 1
00005957 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000595C 01                         byte_578E:	dc.b 1
0000595D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005962 01                         byte_5794:	dc.b 1
00005963 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005968 01                         byte_579A:	dc.b 1
00005969 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000596E 01                         byte_57A0:	dc.b 1
0000596F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005974 01                         byte_57A6:	dc.b 1
00005975 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000597A 01                         byte_57AC:	dc.b 1
0000597B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005980                            		even
00005980                            		even
00005980                            
00005980                            ; ---------------------------------------------------------------------------
00005980                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005980                            ; ---------------------------------------------------------------------------
00005980                            Map_obj89:
00005980                            	include "_maps\obj89.asm"
00005980                            ; ---------------------------------------------------------------------------
00005980                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005980                            ; ---------------------------------------------------------------------------
00005980 0000                       		dc.w byte_57B4-Map_obj89
00005982 03                         byte_57B4:	dc.b 3
00005983 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005988 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000598D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005992                            		even
00005992                            		even
00005992                            
00005992                            ; ===========================================================================
00005992                            ; ---------------------------------------------------------------------------
00005992                            ; Credits ending sequence
00005992                            ; ---------------------------------------------------------------------------
00005992                            
00005992                            Credits:				; XREF: GameModeArray
00005992 6100 BAFE                  		bsr.w	ClearPLC
00005996 6100 C4C8                  		bsr.w	Pal_FadeFrom
0000599A 4DF9 00C0 0004             		lea	($C00004).l,a6
000059A0 3CBC 8004                  		move.w	#$8004,(a6)
000059A4 3CBC 8230                  		move.w	#$8230,(a6)
000059A8 3CBC 8407                  		move.w	#$8407,(a6)
000059AC 3CBC 9001                  		move.w	#$9001,(a6)
000059B0 3CBC 9200                  		move.w	#$9200,(a6)
000059B4 3CBC 8B03                  		move.w	#$8B03,(a6)
000059B8 3CBC 8720                  		move.w	#$8720,(a6)
000059BC 4238 F64E                  		clr.b	($FFFFF64E).w
000059C0 6100 B70E                  		bsr.w	ClearScreen
000059C4 43F8 D000                  		lea	($FFFFD000).w,a1
000059C8 7000                       		moveq	#0,d0
000059CA 323C 07FF                  		move.w	#$7FF,d1
000059CE                            
000059CE                            Cred_ClrObjRam:
000059CE 22C0                       		move.l	d0,(a1)+
000059D0 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000059D4                            
000059D4 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000059DE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
000059E4 6100 B902                  		bsr.w	NemDec
000059E8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000059EC 7000                       		moveq	#0,d0
000059EE 323C 001F                  		move.w	#$1F,d1
000059F2                            
000059F2                            Cred_ClrPallet:
000059F2 22C0                       		move.l	d0,(a1)+
000059F4 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
000059F8                            
000059F8 7014                       		moveq	#$14,d0
000059FA 6100 C6EA                  		bsr.w	PalLoad1	; load Sonic's pallet
000059FE 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005A04 11FC 0000 FFD0                     move.b    #0,($FFFFFFD0).w
00005A0A 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00005A10 4EB9 0000 0000             		jsr	ObjectsLoad
00005A16 4EB9 0000 0000             		jsr	BuildSprites
00005A1C 6100 0000                  		bsr.w	EndingDemoLoad
00005A20 7000                       		moveq	#0,d0
00005A22 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005A26 E948                       		lsl.w	#4,d0
00005A28 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005A2E 45F2 0000                  		lea	(a2,d0.w),a2
00005A32 7000                       		moveq	#0,d0
00005A34 1012                       		move.b	(a2),d0
00005A36 6700                       		beq.s	loc_5862
00005A38 6100 B9FA                  		bsr.w	LoadPLC		; load level patterns
00005A3C                            
00005A3C                            loc_5862:
00005A3C 7001                       		moveq	#1,d0
00005A3E 6100 B9F4                  		bsr.w	LoadPLC		; load standard	level patterns
00005A42 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005A48 6100 C394                  		bsr.w	Pal_FadeTo
00005A4C                            
00005A4C                            Cred_WaitLoop:
00005A4C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005A52 6100 CF46                  		bsr.w	DelayProgram
00005A56 6100 BA48                  		bsr.w	RunPLC_RAM
00005A5A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005A5E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005A60 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005A64 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005A66 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005A6C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005A70 4E75                       		rts	
00005A72                            
00005A72                            ; ---------------------------------------------------------------------------
00005A72                            ; Ending sequence demo loading subroutine
00005A72                            ; ---------------------------------------------------------------------------
00005A72                            
00005A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A72                            
00005A72                            
00005A72                            EndingDemoLoad:				; XREF: Credits
00005A72 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005A76 0240 000F                  		andi.w	#$F,d0
00005A7A D040                       		add.w	d0,d0
00005A7C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005A80 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005A84 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005A88 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005A8E 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005A90 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005A96 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005A9C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005AA2 7000                       		moveq	#0,d0
00005AA4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005AA8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005AAC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005AB0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005AB4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005ABA 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005ABC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005AC2 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005AC6 303C 0008                  		move.w	#8,d0
00005ACA                            
00005ACA                            EndDemo_LampLoad:
00005ACA 24D9                       		move.l	(a1)+,(a2)+
00005ACC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005AD0                            
00005AD0                            EndDemo_Exit:
00005AD0 4E75                       		rts	
00005AD2                            ; End of function EndingDemoLoad
00005AD2                            
00005AD2                            ; ===========================================================================
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            ; Levels used in the end sequence demos
00005AD2                            ; ---------------------------------------------------------------------------
00005AD2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005AE2                            
00005AE2                            ; ---------------------------------------------------------------------------
00005AE2                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005AE2                            ; ---------------------------------------------------------------------------
00005AE2                            EndDemo_LampVar:
00005AE2 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005AE4 0A00 062C 000D             		dc.w $A00, $62C, $D
00005AEA 0000 0000                  		dc.l 0
00005AEE 0000                       		dc.b 0,	0
00005AF0 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005B04 0101                       		dc.b 1,	1
00005B06                            ; ===========================================================================
00005B06                            ; ---------------------------------------------------------------------------
00005B06                            ; "TRY AGAIN" and "END"	screens
00005B06                            ; ---------------------------------------------------------------------------
00005B06                            
00005B06                            TryAgainEnd:				; XREF: Credits
00005B06 6100 B98A                  		bsr.w	ClearPLC
00005B0A 6100 C354                  		bsr.w	Pal_FadeFrom
00005B0E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B14 3CBC 8004                  		move.w	#$8004,(a6)
00005B18 3CBC 8230                  		move.w	#$8230,(a6)
00005B1C 3CBC 8407                  		move.w	#$8407,(a6)
00005B20 3CBC 9001                  		move.w	#$9001,(a6)
00005B24 3CBC 9200                  		move.w	#$9200,(a6)
00005B28 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B2C 3CBC 8720                  		move.w	#$8720,(a6)
00005B30 4238 F64E                  		clr.b	($FFFFF64E).w
00005B34 6100 B59A                  		bsr.w	ClearScreen
00005B38 43F8 D000                  		lea	($FFFFD000).w,a1
00005B3C 7000                       		moveq	#0,d0
00005B3E 323C 07FF                  		move.w	#$7FF,d1
00005B42                            
00005B42                            TryAg_ClrObjRam:
00005B42 22C0                       		move.l	d0,(a1)+
00005B44 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005B48                            
00005B48 701D                       		moveq	#$1D,d0
00005B4A 6100 BA54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005B4E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B52 7000                       		moveq	#0,d0
00005B54 323C 001F                  		move.w	#$1F,d1
00005B58                            
00005B58                            TryAg_ClrPallet:
00005B58 22C0                       		move.l	d0,(a1)+
00005B5A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005B5E                            
00005B5E 7013                       		moveq	#$13,d0
00005B60 6100 C584                  		bsr.w	PalLoad1	; load ending pallet
00005B64 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005B68 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005B6E 4EB9 0000 0000             		jsr	ObjectsLoad
00005B74 4EB9 0000 0000             		jsr	BuildSprites
00005B7A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005B80 6100 C25C                  		bsr.w	Pal_FadeTo
00005B84                            
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            ; "TRY AGAIN" and "END"	screen main loop
00005B84                            ; ---------------------------------------------------------------------------
00005B84                            TryAg_MainLoop:
00005B84 6100 B67C                  		bsr.w	PauseGame
00005B88 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005B8E 6100 CE0A                  		bsr.w	DelayProgram
00005B92 4EB9 0000 0000             		jsr	ObjectsLoad
00005B98 4EB9 0000 0000             		jsr	BuildSprites
00005B9E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005BA4 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005BA6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005BAA 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005BAC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005BB2 67D0                       		beq.s	TryAg_MainLoop
00005BB4                            
00005BB4                            TryAg_Exit:
00005BB4 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to Sega screen
00005BBA 4E75                       		rts	
00005BBC                            
00005BBC                            ; ===========================================================================
00005BBC                            ; ---------------------------------------------------------------------------
00005BBC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005BBC                            ; ---------------------------------------------------------------------------
00005BBC                            
00005BBC                            Obj8B:					; XREF: Obj_Index
00005BBC 7000                       		moveq	#0,d0
00005BBE 1028 0024                  		move.b	$24(a0),d0
00005BC2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005BC6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005BCA 4EF9 0000 0000             		jmp	DisplaySprite
00005BD0                            ; ===========================================================================
00005BD0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005BD2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005BD4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005BD6 0000                       		dc.w loc_5A8E-Obj8B_Index
00005BD8                            ; ===========================================================================
00005BD8                            
00005BD8                            Obj8B_Main:				; XREF: Obj8B_Index
00005BD8 5428 0024                  		addq.b	#2,$24(a0)
00005BDC 317C 0120 0008             		move.w	#$120,8(a0)
00005BE2 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005BE8 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005BF0 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005BF6 117C 0000 0001             		move.b	#0,1(a0)
00005BFC 117C 0002 0018             		move.b	#2,$18(a0)
00005C02 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005C08 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00005C0E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005C14 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005C16 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00005C1C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005C22 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005C28 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005C2E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005C34                            
00005C34                            Obj8B_Animate:				; XREF: Obj8B_Index
00005C34 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005C3A 4EF9 0000 0000             		jmp	AnimateSprite
00005C40                            ; ===========================================================================
00005C40                            
00005C40                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005C40 5428 0024                  		addq.b	#2,$24(a0)
00005C44 7002                       		moveq	#2,d0
00005C46 0828 0000 001C             		btst	#0,$1C(a0)
00005C4C 6700                       		beq.s	loc_5A6A
00005C4E 4440                       		neg.w	d0
00005C50                            
00005C50                            loc_5A6A:
00005C50 43F8 D800                  		lea	($FFFFD800).w,a1
00005C54 7205                       		moveq	#5,d1
00005C56                            
00005C56                            loc_5A70:
00005C56 1340 003E                  		move.b	d0,$3E(a1)
00005C5A 3400                       		move.w	d0,d2
00005C5C E742                       		asl.w	#3,d2
00005C5E D529 0026                  		add.b	d2,$26(a1)
00005C62 43E9 0040                  		lea	$40(a1),a1
00005C66 51C9 FFEE                  		dbf	d1,loc_5A70
00005C6A 5228 001A                  		addq.b	#1,$1A(a0)
00005C6E 317C 0070 0030             		move.w	#112,$30(a0)
00005C74                            
00005C74                            loc_5A8E:				; XREF: Obj8B_Index
00005C74 5368 0030                  		subq.w	#1,$30(a0)
00005C78 6A00                       		bpl.s	locret_5AA0
00005C7A 0868 0000 001C             		bchg	#0,$1C(a0)
00005C80 117C 0002 0024             		move.b	#2,$24(a0)
00005C86                            
00005C86                            locret_5AA0:
00005C86 4E75                       		rts	
00005C88                            ; ===========================================================================
00005C88                            Ani_obj8B:
00005C88                            	include "_anim\obj8B.asm"
00005C88                            ; ---------------------------------------------------------------------------
00005C88                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005C88                            ; ---------------------------------------------------------------------------
00005C88 0000                       		dc.w byte_5AA8-Ani_obj8B
00005C8A 0000                       		dc.w byte_5AAC-Ani_obj8B
00005C8C 0000                       		dc.w byte_5AB0-Ani_obj8B
00005C8E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005C92 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005C96 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005CA8                            		even
00005CA8                            		even
00005CA8                            
00005CA8                            ; ===========================================================================
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            
00005CA8                            Obj8C:					; XREF: Obj_Index
00005CA8 7000                       		moveq	#0,d0
00005CAA 1028 0024                  		move.b	$24(a0),d0
00005CAE 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005CB2 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005CB6 4EF9 0000 0000             		jmp	DisplaySprite
00005CBC                            ; ===========================================================================
00005CBC 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005CBE 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005CC0                            ; ===========================================================================
00005CC0                            
00005CC0                            Obj8C_Main:				; XREF: Obj8C_Index
00005CC0 2248                       		movea.l	a0,a1
00005CC2 7400                       		moveq	#0,d2
00005CC4 7600                       		moveq	#0,d3
00005CC6 7205                       		moveq	#5,d1
00005CC8 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005CCC                            
00005CCC                            Obj8C_MakeEms:				; XREF: loc_5B42
00005CCC 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005CD0 5429 0024                  		addq.b	#2,$24(a1)
00005CD4 237C 0000 5948 0004        		move.l	#Map_obj88,4(a1)
00005CDC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005CE2 137C 0000 0001             		move.b	#0,1(a1)
00005CE8 137C 0001 0018             		move.b	#1,$18(a1)
00005CEE 337C 0104 0008             		move.w	#$104,8(a1)
00005CF4 337C 0120 0038             		move.w	#$120,$38(a1)
00005CFA 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005D00 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005D06 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005D0C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005D10                            
00005D10                            Obj8C_ChkEms:
00005D10 7000                       		moveq	#0,d0
00005D12 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005D16 5340                       		subq.w	#1,d0
00005D18 6500                       		bcs.s	loc_5B42
00005D1A                            
00005D1A                            Obj8C_ChkEmLoop:
00005D1A B433 0000                  		cmp.b	(a3,d0.w),d2
00005D1E 6600                       		bne.s	loc_5B3E
00005D20 5202                       		addq.b	#1,d2
00005D22 60EC                       		bra.s	Obj8C_ChkEms
00005D24                            ; ===========================================================================
00005D24                            
00005D24                            loc_5B3E:
00005D24 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005D28                            
00005D28                            loc_5B42:
00005D28 1342 001A                  		move.b	d2,$1A(a1)
00005D2C 5229 001A                  		addq.b	#1,$1A(a1)
00005D30 5202                       		addq.b	#1,d2
00005D32 137C 0080 0026             		move.b	#$80,$26(a1)
00005D38 1343 001E                  		move.b	d3,$1E(a1)
00005D3C 1343 001F                  		move.b	d3,$1F(a1)
00005D40 0643 000A                  		addi.w	#$A,d3
00005D44 43E9 0040                  		lea	$40(a1),a1
00005D48 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005D4C                            
00005D4C                            Obj8C_Move:				; XREF: Obj8C_Index
00005D4C 4A68 003E                  		tst.w	$3E(a0)
00005D50 6700                       		beq.s	locret_5BBA
00005D52 4A28 001E                  		tst.b	$1E(a0)
00005D56 6700                       		beq.s	loc_5B78
00005D58 5328 001E                  		subq.b	#1,$1E(a0)
00005D5C 6600                       		bne.s	loc_5B80
00005D5E                            
00005D5E                            loc_5B78:
00005D5E 3028 003E                  		move.w	$3E(a0),d0
00005D62 D168 0026                  		add.w	d0,$26(a0)
00005D66                            
00005D66                            loc_5B80:
00005D66 1028 0026                  		move.b	$26(a0),d0
00005D6A 6700                       		beq.s	loc_5B8C
00005D6C 0C00 0080                  		cmpi.b	#$80,d0
00005D70 6600                       		bne.s	loc_5B96
00005D72                            
00005D72                            loc_5B8C:
00005D72 4268 003E                  		clr.w	$3E(a0)
00005D76 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005D7C                            
00005D7C                            loc_5B96:
00005D7C 4EB9 0000 29CC             		jsr	(CalcSine).l
00005D82 7800                       		moveq	#0,d4
00005D84 1828 003C                  		move.b	$3C(a0),d4
00005D88 C3C4                       		muls.w	d4,d1
00005D8A E081                       		asr.l	#8,d1
00005D8C C1C4                       		muls.w	d4,d0
00005D8E E080                       		asr.l	#8,d0
00005D90 D268 0038                  		add.w	$38(a0),d1
00005D94 D068 003A                  		add.w	$3A(a0),d0
00005D98 3141 0008                  		move.w	d1,8(a0)
00005D9C 3140 000A                  		move.w	d0,$A(a0)
00005DA0                            
00005DA0                            locret_5BBA:
00005DA0 4E75                       		rts	
00005DA2                            ; ===========================================================================
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            Map_obj8B:
00005DA2                            	include "_maps\obj8B.asm"
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005DA6 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005DAA 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005DAE 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005DB2 08                         byte_5BCC:	dc.b 8
00005DB3 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005DB8 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005DBD E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005DC2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005DC7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005DCC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005DD1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DD6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005DDB 08                         byte_5BF5:	dc.b 8
00005DDC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005DE1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005DE6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005DEB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005DF0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005DF5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005DFA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005DFF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E04 08                         byte_5C1E:	dc.b 8
00005E05 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005E0A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005E0F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005E14 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005E19 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005E1E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005E23 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E28 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E2D 08                         byte_5C47:	dc.b 8
00005E2E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005E33 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005E38 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005E3D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005E42 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005E47 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005E4C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005E51 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005E56 0C                         byte_5C70:	dc.b $C
00005E57 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005E5C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005E61 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005E66 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005E6B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005E70 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005E75 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005E7A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005E7F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005E84 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005E89 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005E8E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005E93 0A                         byte_5CAD:	dc.b $A
00005E94 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005E99 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005E9E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005EA3 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005EA8 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005EAD F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005EB2 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EB7 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EBC 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005EC1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005EC6 0A                         byte_5CE0:	dc.b $A
00005EC7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005ECC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005ED1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005ED6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005EDB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005EE0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005EE5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005EEA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005EEF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005EF4 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005EF9 0C                         byte_5D13:	dc.b $C
00005EFA F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005EFF FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005F04 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005F09 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005F0E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005F13 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005F18 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005F1D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005F22 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005F27 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005F2C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005F31 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005F36                            		even
00005F36                            		even
00005F36                            
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            ; Ending sequence demos
00005F36                            ; ---------------------------------------------------------------------------
00005F36                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005F64                            		even
00005F64                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005FA4                            		even
00005FA4                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005FD4                            		even
00005FD4                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006004                            		even
00006004                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006024                            		even
00006024                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006044                            		even
00006044                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006074                            		even
00006074                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000060A4                            		even
000060A4                            
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            ; Subroutine to	load level boundaries and start	locations
000060A4                            ; ---------------------------------------------------------------------------
000060A4                            
000060A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060A4                            
000060A4                            
000060A4                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000060A4 7000                       		moveq	#0,d0
000060A6 11C0 F740                  		move.b	d0,($FFFFF740).w
000060AA 11C0 F741                  		move.b	d0,($FFFFF741).w
000060AE 11C0 F746                  		move.b	d0,($FFFFF746).w
000060B2 11C0 F748                  		move.b	d0,($FFFFF748).w
000060B6 11C0 F742                  		move.b	d0,($FFFFF742).w
000060BA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060BE ED08                       		lsl.b	#6,d0
000060C0 E848                       		lsr.w	#4,d0
000060C2 3200                       		move.w	d0,d1
000060C4 D040                       		add.w	d0,d0
000060C6 D041                       		add.w	d1,d0
000060C8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000060CC 3018                       		move.w	(a0)+,d0
000060CE 31C0 F730                  		move.w	d0,($FFFFF730).w
000060D2 2018                       		move.l	(a0)+,d0
000060D4 21C0 F728                  		move.l	d0,($FFFFF728).w
000060D8 21C0 F720                  		move.l	d0,($FFFFF720).w
000060DC 2018                       		move.l	(a0)+,d0
000060DE 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000060E2 21C0 F724                  		move.l	d0,($FFFFF724).w
000060E6 3038 F728                  		move.w	($FFFFF728).w,d0
000060EA 0640 0240                  		addi.w	#$240,d0
000060EE 31C0 F732                  		move.w	d0,($FFFFF732).w
000060F2 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000060F8 3018                       		move.w	(a0)+,d0
000060FA 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000060FE 6000 0000                  		bra.w	LevSz_ChkLamp
00006102                            ; ===========================================================================
00006102                            ; ---------------------------------------------------------------------------
00006102                            ; Level size array and ending start location array
00006102                            ; ---------------------------------------------------------------------------
00006102                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006252                            		even
00006252                            
00006252                            EndingStLocArray:
00006252                            		incbin	misc\sloc_end.bin
00006272                            		even
00006272                            
00006272                            ; ===========================================================================
00006272                            
00006272                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006272 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006276 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006278 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000627E 3238 D008                  		move.w	($FFFFD008).w,d1
00006282 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006286 6000                       		bra.s	loc_60D0
00006288                            ; ===========================================================================
00006288                            
00006288                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006288 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000628C ED08                       		lsl.b	#6,d0
0000628E E848                       		lsr.w	#4,d0
00006290 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006294 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006298 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000629A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000629E 5340                       		subq.w	#1,d0
000062A0 E548                       		lsl.w	#2,d0
000062A2 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000062A6                            
000062A6                            LevSz_SonicPos:
000062A6 7200                       		moveq	#0,d1
000062A8 3219                       		move.w	(a1)+,d1
000062AA 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000062AE 7000                       		moveq	#0,d0
000062B0 3011                       		move.w	(a1),d0
000062B2 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000062B6                            
000062B6                            loc_60D0:				; XREF: LevSz_ChkLamp
000062B6 0441 00A0                  		subi.w	#$A0,d1
000062BA 6400                       		bcc.s	loc_60D8
000062BC 7200                       		moveq	#0,d1
000062BE                            
000062BE                            loc_60D8:
000062BE 3438 F72A                  		move.w	($FFFFF72A).w,d2
000062C2 B242                       		cmp.w	d2,d1
000062C4 6500                       		bcs.s	loc_60E2
000062C6 3202                       		move.w	d2,d1
000062C8                            
000062C8                            loc_60E2:
000062C8 31C1 F700                  		move.w	d1,($FFFFF700).w
000062CC 0440 0060                  		subi.w	#$60,d0
000062D0 6400                       		bcc.s	loc_60EE
000062D2 7000                       		moveq	#0,d0
000062D4                            
000062D4                            loc_60EE:
000062D4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000062D8 6D00                       		blt.s	loc_60F8
000062DA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000062DE                            
000062DE                            loc_60F8:
000062DE 31C0 F704                  		move.w	d0,($FFFFF704).w
000062E2 6100 0000                  		bsr.w	BgScrollSpeed
000062E6 7000                       		moveq	#0,d0
000062E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062EC E508                       		lsl.b	#2,d0
000062EE 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000062F4 6000 0000                  		bra.w	LevSz_Unk
000062F8                            ; ===========================================================================
000062F8                            ; ---------------------------------------------------------------------------
000062F8                            ; Sonic	start location array
000062F8                            ; ---------------------------------------------------------------------------
000062F8                            StartLocArray:	incbin	misc\sloc_lev.bin
00006368                            		even
00006368                            
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Which	256x256	tiles contain loops or roll-tunnels
00006368                            ; ---------------------------------------------------------------------------
00006368                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006368                            ; loop,	loop, tunnel, tunnel
00006368                            ; ---------------------------------------------------------------------------
00006368                            LoopTileNums:	incbin	misc\loopnums.bin
00006384                            		even
00006384                            
00006384                            ; ===========================================================================
00006384                            
00006384                            LevSz_Unk:				; XREF: LevelSizeLoad
00006384 7000                       		moveq	#0,d0
00006386 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000638A E748                       		lsl.w	#3,d0
0000638C 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006390 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006394 24D9                       		move.l	(a1)+,(a2)+
00006396 24D9                       		move.l	(a1)+,(a2)+
00006398 4E75                       		rts	
0000639A                            ; End of function LevelSizeLoad
0000639A                            
0000639A                            ; ===========================================================================
0000639A 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000063A2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063AA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063B2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063BA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063C2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000063CA 0070 0100 0100 0100        		dc.l $700100, $1000100
000063D2                            
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            ; Subroutine to	set scroll speed of some backgrounds
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            
000063D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D2                            
000063D2                            
000063D2                            BgScrollSpeed:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w
000063D6 6600                       		bne.s	loc_6206
000063D8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000063DC 31C0 F714                  		move.w	d0,($FFFFF714).w
000063E0 31C1 F708                  		move.w	d1,($FFFFF708).w
000063E4 31C1 F710                  		move.w	d1,($FFFFF710).w
000063E8 31C1 F718                  		move.w	d1,($FFFFF718).w
000063EC                            
000063EC                            loc_6206:
000063EC 7400                       		moveq	#0,d2
000063EE 1438 FE10                  		move.b	($FFFFFE10).w,d2
000063F2 D442                       		add.w	d2,d2
000063F4 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000063F8 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000063FC                            ; End of function BgScrollSpeed
000063FC                            
000063FC                            ; ===========================================================================
000063FC 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006400 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006404 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006408 0000                       		dc.w BgScroll_End-BgScroll_Index
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000640A 42B8 F708                  		clr.l	($FFFFF708).w
0000640E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006412 42B8 F714                  		clr.l	($FFFFF714).w
00006416 42B8 F71C                  		clr.l	($FFFFF71C).w
0000641A 45F8 A800                  		lea	($FFFFA800).w,a2
0000641E 429A                       		clr.l	(a2)+
00006420 429A                       		clr.l	(a2)+
00006422 429A                       		clr.l	(a2)+
00006424 4E75                       		rts 
00006426                            ; ===========================================================================
00006426                            
00006426                            BgScroll_LZ:				; XREF: BgScroll_Index
00006426 E280                       		asr.l	#1,d0
00006428 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000642C 4E75                       		rts	
0000642E                            ; ===========================================================================
0000642E                            
0000642E                            BgScroll_MZ:				; XREF: BgScroll_Index
0000642E 4E75                       		rts	
00006430                            ; ===========================================================================
00006430                            
00006430                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006430 E280                       		asr.l	#1,d0
00006432 0640 00C0                  		addi.w	#$C0,d0
00006436 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000643A 42B8 F708                  		clr.l	($FFFFF708).w
0000643E 4E75                       		rts	
00006440                            ; ===========================================================================
00006440                            
00006440                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006440 E980                       		asl.l	#4,d0
00006442 2400                       		move.l	d0,d2
00006444 E380                       		asl.l	#1,d0
00006446 D082                       		add.l	d2,d0
00006448 E080                       		asr.l	#8,d0
0000644A 5240                       		addq.w	#1,d0
0000644C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006450 42B8 F708                  		clr.l	($FFFFF708).w
00006454 4E75                       		rts	
00006456                            ; ===========================================================================
00006456                            
00006456                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006456 0240 07F8                  		andi.w	#$7F8,d0
0000645A E640                       		asr.w	#3,d0
0000645C 5240                       		addq.w	#1,d0
0000645E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006462 4E75                       		rts	
00006464                            ; ===========================================================================
00006464                            
00006464                            BgScroll_End:				; XREF: BgScroll_Index
00006464 3038 F700                  		move.w	($FFFFF700).w,d0
00006468 E240                       		asr.w	#1,d0
0000646A 31C0 F708                  		move.w	d0,($FFFFF708).w
0000646E 31C0 F710                  		move.w	d0,($FFFFF710).w
00006472 E440                       		asr.w	#2,d0
00006474 3200                       		move.w	d0,d1
00006476 D040                       		add.w	d0,d0
00006478 D041                       		add.w	d1,d0
0000647A 31C0 F718                  		move.w	d0,($FFFFF718).w
0000647E 42B8 F70C                  		clr.l	($FFFFF70C).w
00006482 42B8 F714                  		clr.l	($FFFFF714).w
00006486 42B8 F71C                  		clr.l	($FFFFF71C).w
0000648A 45F8 A800                  		lea	($FFFFA800).w,a2
0000648E 429A                       		clr.l	(a2)+
00006490 429A                       		clr.l	(a2)+
00006492 429A                       		clr.l	(a2)+
00006494 4E75                       		rts
00006496                            
00006496                            ; ---------------------------------------------------------------------------
00006496                            ; Background layer deformation subroutines
00006496                            ; ---------------------------------------------------------------------------
00006496                            
00006496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006496                            
00006496                            
00006496                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006496 4A38 F744                  		tst.b	($FFFFF744).w
0000649A 6700                       		beq.s	loc_628E
0000649C 4E75                       		rts	
0000649E                            ; ===========================================================================
0000649E                            
0000649E                            loc_628E:
0000649E 4278 F754                  		clr.w	($FFFFF754).w
000064A2 4278 F756                  		clr.w	($FFFFF756).w
000064A6 4278 F758                  		clr.w	($FFFFF758).w
000064AA 4278 F75A                  		clr.w	($FFFFF75A).w
000064AE 6100 0000                  		bsr.w	ScrollHoriz
000064B2 6100 0000                  		bsr.w	ScrollVertical
000064B6 6100 0000                  		bsr.w	DynScrResizeLoad
000064BA 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000064C0 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000064C6 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000064CC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000064D2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000064D8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000064DE 7000                       		moveq	#0,d0
000064E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064E4 D040                       		add.w	d0,d0
000064E6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000064EA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000064EE                            ; End of function DeformBgLayer
000064EE                            
000064EE                            ; ===========================================================================
000064EE                            ; ---------------------------------------------------------------------------
000064EE                            ; Offset index for background layer deformation	code
000064EE                            ; ---------------------------------------------------------------------------
000064EE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000064F2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000064F6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000064FA 0000                       		dc.w Deform_GHZ-Deform_Index
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            ; Green	Hill Zone background layer deformation code
000064FC                            ; ---------------------------------------------------------------------------
000064FC                            
000064FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FC                            
000064FC                            
000064FC                            Deform_GHZ:
000064FC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006500 48C4                       		ext.l	d4
00006502 EB84                       		asl.l	#5,d4
00006504 2204                       		move.l	d4,d1
00006506 E384                       		asl.l	#1,d4
00006508 D881                       		add.l	d1,d4
0000650A 7C00                       		moveq	#0,d6
0000650C 6100 0000                  		bsr.w	ScrollBlock6
00006510 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006514 48C4                       		ext.l	d4
00006516 EF84                       		asl.l	#7,d4
00006518 7C00                       		moveq	#0,d6
0000651A 6100 0000                  		bsr.w	ScrollBlock5
0000651E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006522 3038 F704                  		move.w	($FFFFF704).w,d0
00006526 0240 07FF                  		andi.w	#$7FF,d0
0000652A EA48                       		lsr.w	#5,d0
0000652C 4440                       		neg.w	d0
0000652E 0640 0020                  		addi.w	#$20,d0	; ' '
00006532 6A00                       		bpl.s	Deform_GHZ_1
00006534 7000                       		moveq	#0,d0
00006536                            
00006536                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006536 3800                       		move.w	d0,d4
00006538 31C0 F618                  		move.w	d0,($FFFFF618).w
0000653C 3038 F700                  		move.w	($FFFFF700).w,d0
00006540 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006546 6600                       		bne.s	Deform_GHZ_2
00006548 7000                       		moveq	#0,d0
0000654A                            
0000654A                            Deform_GHZ_2:				; XREF: Deform_GHZ
0000654A 4440                       		neg.w	d0
0000654C 4840                       		swap	d0
0000654E 45F8 A800                  		lea	($FFFFA800).w,a2
00006552 069A 0001 0000             		addi.l	#$10000,(a2)+
00006558 069A 0000 C000             		addi.l	#$C000,(a2)+
0000655E 069A 0000 8000             		addi.l	#$8000,(a2)+
00006564 3038 A800                  		move.w	($FFFFA800).w,d0
00006568 D078 F718                  		add.w	($FFFFF718).w,d0
0000656C 4440                       		neg.w	d0
0000656E 323C 001F                  		move.w	#$1F,d1
00006572 9244                       		sub.w	d4,d1
00006574 6500                       		bcs.s	Deform_GHZ_4
00006576                            
00006576                            Deform_GHZ_3:				; XREF: Deform_GHZ
00006576 22C0                       		move.l	d0,(a1)+
00006578 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
0000657C                            
0000657C                            Deform_GHZ_4:				; XREF: Deform_GHZ
0000657C 3038 A804                  		move.w	($FFFFA804).w,d0
00006580 D078 F718                  		add.w	($FFFFF718).w,d0
00006584 4440                       		neg.w	d0
00006586 323C 000F                  		move.w	#$F,d1
0000658A                            
0000658A                            Deform_GHZ_5:				; XREF: Deform_GHZ
0000658A 22C0                       		move.l	d0,(a1)+
0000658C 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
00006590 3038 A808                  		move.w	($FFFFA808).w,d0
00006594 D078 F718                  		add.w	($FFFFF718).w,d0
00006598 4440                       		neg.w	d0
0000659A 323C 000F                  		move.w	#$F,d1
0000659E                            
0000659E                            Deform_GHZ_6:				; XREF: Deform_GHZ
0000659E 22C0                       		move.l	d0,(a1)+
000065A0 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
000065A4 323C 002F                  		move.w	#$2F,d1	; '/'
000065A8 3038 F718                  		move.w	($FFFFF718).w,d0
000065AC 4440                       		neg.w	d0
000065AE                            
000065AE                            Deform_GHZ_7:				; XREF: Deform_GHZ
000065AE 22C0                       		move.l	d0,(a1)+
000065B0 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
000065B4 323C 0027                  		move.w	#$27,d1	; '''
000065B8 3038 F710                  		move.w	($FFFFF710).w,d0
000065BC 4440                       		neg.w	d0
000065BE                            
000065BE                            Deform_GHZ_8:				; XREF: Deform_GHZ
000065BE 22C0                       		move.l	d0,(a1)+
000065C0 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
000065C4 3038 F710                  		move.w	($FFFFF710).w,d0
000065C8 3438 F700                  		move.w	($FFFFF700).w,d2
000065CC 9440                       		sub.w	d0,d2
000065CE 48C2                       		ext.l	d2
000065D0 E182                       		asl.l	#8,d2
000065D2 85FC 0068                  		divs.w	#$68,d2	; 'h'
000065D6 48C2                       		ext.l	d2
000065D8 E182                       		asl.l	#8,d2
000065DA 7600                       		moveq	#0,d3
000065DC 3600                       		move.w	d0,d3
000065DE 323C 0047                  		move.w	#$47,d1	; 'G'
000065E2 D244                       		add.w	d4,d1
000065E4                            
000065E4                            Deform_GHZ_9:				; XREF: Deform_GHZ
000065E4 3003                       		move.w	d3,d0
000065E6 4440                       		neg.w	d0
000065E8 22C0                       		move.l	d0,(a1)+
000065EA 4843                       		swap	d3
000065EC D682                       		add.l	d2,d3
000065EE 4843                       		swap	d3
000065F0 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
000065F4 4E75                       		rts	
000065F6                            ; End of function Deform_GHZ
000065F6                            
000065F6                            ; ===========================================================================
000065F6                            ; ---------------------------------------------------------------------------
000065F6                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000065F6                            ; ---------------------------------------------------------------------------
000065F6                            
000065F6                            Deform_LZ:
000065F6 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000065F8 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
000065FC 48C4                       		ext.l	d4					; extend to long-word signed
000065FE E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00006600 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
00006604 48C5                       		ext.l	d5					; extend to long-word signed
00006606 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00006608 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000660C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
00006612 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
00006616 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000661A 4440                       		neg.w	d0					; reverse
0000661C 4840                       		swap	d0					; send to upper word
0000661E 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
00006622 4440                       		neg.w	d0					; reverse
00006624 7600                       		moveq	#$00,d3					; clear d3
00006626 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000662A 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
00006630 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00006634 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
00006638 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000663C 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000663E B242                       		cmp.w	d2,d1					; is the water line below the screen?
00006640 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00006642 3202                       		move.w	d2,d1					; set at maximum
00006644                            
00006644                            DLZ_NoWater:
00006644 9441                       		sub.w	d1,d2					; subtract from water-line count
00006646 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00006648 5301                       		subq.b	#$01,d1					; decrease above water count
0000664A 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000664C                            
0000664C                            DLZ_Above:
0000664C 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000664E 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00006652                            
00006652                            DLZ_Water:
00006652 5302                       		subq.b	#$01,d2					; decrease below water count
00006654 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00006656 3200                       		move.w	d0,d1					; copy BG position back to d1
00006658 4840                       		swap	d0					; move FG position back to lower word in d0
0000665A 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000665C D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
00006660 D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
00006664 D643                       		add.w	d3,d3					; multiply by word size (2)
00006666 D844                       		add.w	d4,d4					; ''
00006668 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000666E D6C4                       		adda.w	d4,a3					; advance to correct starting point
00006670 1813                       		move.b	(a3),d4					; get current position byte
00006672 E404                       		asr.b	#$02,d4					; get only the position bits
00006674 4884                       		ext.w	d4					; extend to word
00006676 D244                       		add.w	d4,d1					; adjust BG's current position
00006678 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000667C 1812                       		move.b	(a2),d4					; get current position byte
0000667E E404                       		asr.b	#$02,d4					; get only the position bits
00006680 4884                       		ext.w	d4					; extend to word
00006682 D044                       		add.w	d4,d0					; adjust FG's current position
00006684                            
00006684                            DLZ_Below:
00006684 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00006686 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00006688 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000668A 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000668C 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00006690                            
00006690                            DLZ_Finish:
00006690 4E75                       		rts						; return
00006692                            
00006692                            ; ---------------------------------------------------------------------------
00006692                            ; Scroll data for the FG
00006692                            ; ---------------------------------------------------------------------------
00006692                            
00006692                            DLZ_WaveFG:
00006692                            		rept	$02
00006692                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00006692 0001 0400 0401 0800 0801+  		endr
00006A92                            
00006A92                            ; ---------------------------------------------------------------------------
00006A92                            ; Scroll data for the BG
00006A92                            ; ---------------------------------------------------------------------------
00006A92                            
00006A92                            DLZ_WaveBG:	rept	$04
00006A92                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00006A92                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00006A92                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00006A92                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00006A92                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00006A92                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00006A92                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00006A92                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00006A92 FC01 0000 0000 0000 0000+  		endr
00006E92                            
00006E92                            ; ===========================================================================
00006E92                            
00006E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E92                            
00006E92                            
00006E92                            Deform_MZ:
00006E92 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E96 48C4                       		ext.l	d4
00006E98 ED84                       		asl.l	#6,d4
00006E9A 2204                       		move.l	d4,d1
00006E9C E384                       		asl.l	#1,d4
00006E9E D881                       		add.l	d1,d4
00006EA0 7C02                       		moveq	#2,d6
00006EA2 6100 0000                  		bsr.w	ScrollBlock4
00006EA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EAA 48C4                       		ext.l	d4
00006EAC ED84                       		asl.l	#6,d4
00006EAE 7C06                       		moveq	#6,d6
00006EB0 6100 0000                  		bsr.w	ScrollBlock6
00006EB4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EB8 48C4                       		ext.l	d4
00006EBA EF84                       		asl.l	#7,d4
00006EBC 7C04                       		moveq	#4,d6
00006EBE 6100 0000                  		bsr.w	ScrollBlock5
00006EC2 303C 0200                  		move.w	#$200,d0
00006EC6 3238 F704                  		move.w	($FFFFF704).w,d1
00006ECA 0441 01C8                  		subi.w	#$1C8,d1
00006ECE 6500                       		bcs.s	Deform_MZ_1
00006ED0 3401                       		move.w	d1,d2
00006ED2 D241                       		add.w	d1,d1
00006ED4 D242                       		add.w	d2,d1
00006ED6 E441                       		asr.w	#2,d1
00006ED8 D041                       		add.w	d1,d0
00006EDA                            
00006EDA                            Deform_MZ_1:				; XREF: Deform_MZ
00006EDA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006EDE 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006EE2 6100 0000                  		bsr.w	ScrollBlock3
00006EE6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006EEC 1038 F756                  		move.b	($FFFFF756).w,d0
00006EF0 8038 F758                  		or.b	($FFFFF758).w,d0
00006EF4 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006EF8 4238 F756                  		clr.b	($FFFFF756).w
00006EFC 4238 F758                  		clr.b	($FFFFF758).w
00006F00 43F8 A800                  		lea	($FFFFA800).w,a1
00006F04 3438 F700                  		move.w	($FFFFF700).w,d2
00006F08 4442                       		neg.w	d2
00006F0A 3002                       		move.w	d2,d0
00006F0C E440                       		asr.w	#2,d0
00006F0E 9042                       		sub.w	d2,d0
00006F10 48C0                       		ext.l	d0
00006F12 E780                       		asl.l	#3,d0
00006F14 81FC 0005                  		divs.w	#5,d0
00006F18 48C0                       		ext.l	d0
00006F1A E980                       		asl.l	#4,d0
00006F1C E180                       		asl.l	#8,d0
00006F1E 7600                       		moveq	#0,d3
00006F20 3602                       		move.w	d2,d3
00006F22 E243                       		asr.w	#1,d3
00006F24 323C 0004                  		move.w	#4,d1
00006F28                            
00006F28                            Deform_MZ_2:				; XREF: Deform_MZ
00006F28 32C3                       		move.w	d3,(a1)+
00006F2A 4843                       		swap	d3
00006F2C D680                       		add.l	d0,d3
00006F2E 4843                       		swap	d3
00006F30 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006F34 3038 F718                  		move.w	($FFFFF718).w,d0
00006F38 4440                       		neg.w	d0
00006F3A 323C 0001                  		move.w	#1,d1
00006F3E                            
00006F3E                            Deform_MZ_3:				; XREF: Deform_MZ
00006F3E 32C0                       		move.w	d0,(a1)+
00006F40 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006F44 3038 F710                  		move.w	($FFFFF710).w,d0
00006F48 4440                       		neg.w	d0
00006F4A 323C 0008                  		move.w	#8,d1
00006F4E                            
00006F4E                            Deform_MZ_4:				; XREF: Deform_MZ
00006F4E 32C0                       		move.w	d0,(a1)+
00006F50 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006F54 3038 F708                  		move.w	($FFFFF708).w,d0
00006F58 4440                       		neg.w	d0
00006F5A 323C 000F                  		move.w	#$F,d1
00006F5E                            
00006F5E                            Deform_MZ_5:				; XREF: Deform_MZ
00006F5E 32C0                       		move.w	d0,(a1)+
00006F60 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00006F64 45F8 A800                  		lea	($FFFFA800).w,a2
00006F68 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006F6C 0440 0200                  		subi.w	#$200,d0
00006F70 3400                       		move.w	d0,d2
00006F72 0C40 0100                  		cmpi.w	#$100,d0
00006F76 6500                       		bcs.s	Deform_MZ_6
00006F78 303C 0100                  		move.w	#$100,d0
00006F7C                            
00006F7C                            Deform_MZ_6:				; XREF: Deform_MZ
00006F7C 0240 01F0                  		andi.w	#$1F0,d0
00006F80 E648                       		lsr.w	#3,d0
00006F82 45F2 0000                  		lea	(a2,d0.w),a2
00006F86 6000 0000                  		bra.w	Deform_All
00006F8A                            ; ===========================================================================
00006F8A                            
00006F8A                            Deform_SLZ:
00006F8A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F8E 48C5                       		ext.l	d5
00006F90 EF85                       		asl.l	#7,d5
00006F92 6100 0000                  		bsr.w	ScrollBlock2
00006F96 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F9C 43F8 A800                  		lea	($FFFFA800).w,a1
00006FA0 3438 F700                  		move.w	($FFFFF700).w,d2
00006FA4 4442                       		neg.w	d2
00006FA6 3002                       		move.w	d2,d0
00006FA8 E640                       		asr.w	#3,d0
00006FAA 9042                       		sub.w	d2,d0
00006FAC 48C0                       		ext.l	d0
00006FAE E980                       		asl.l	#4,d0
00006FB0 81FC 001C                  		divs.w	#$1C,d0
00006FB4 48C0                       		ext.l	d0
00006FB6 E980                       		asl.l	#4,d0
00006FB8 E180                       		asl.l	#8,d0
00006FBA 7600                       		moveq	#0,d3
00006FBC 3602                       		move.w	d2,d3
00006FBE 323C 001B                  		move.w	#$1B,d1
00006FC2                            
00006FC2                            Deform_SLZ_1:				; XREF: Deform_MZ
00006FC2 32C3                       		move.w	d3,(a1)+
00006FC4 4843                       		swap	d3
00006FC6 D680                       		add.l	d0,d3
00006FC8 4843                       		swap	d3
00006FCA 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00006FCE 3002                       		move.w	d2,d0
00006FD0 E640                       		asr.w	#3,d0
00006FD2 3200                       		move.w	d0,d1
00006FD4 E241                       		asr.w	#1,d1
00006FD6 D041                       		add.w	d1,d0
00006FD8 323C 0004                  		move.w	#4,d1
00006FDC                            
00006FDC                            Deform_SLZ_2:				; XREF: Deform_MZ
00006FDC 32C0                       		move.w	d0,(a1)+
00006FDE 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
00006FE2 3002                       		move.w	d2,d0
00006FE4 E440                       		asr.w	#2,d0
00006FE6 323C 0004                  		move.w	#4,d1
00006FEA                            
00006FEA                            Deform_SLZ_3:				; XREF: Deform_MZ
00006FEA 32C0                       		move.w	d0,(a1)+
00006FEC 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00006FF0 3002                       		move.w	d2,d0
00006FF2 E240                       		asr.w	#1,d0
00006FF4 323C 001D                  		move.w	#$1D,d1
00006FF8                            
00006FF8                            Deform_SLZ_4:				; XREF: Deform_MZ
00006FF8 32C0                       		move.w	d0,(a1)+
00006FFA 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00006FFE 45F8 A800                  		lea	($FFFFA800).w,a2
00007002 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007006 3400                       		move.w	d0,d2
00007008 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000700C 0240 03F0                  		andi.w	#$3F0,d0
00007010 E648                       		lsr.w	#3,d0
00007012 45F2 0000                  		lea	(a2,d0.w),a2
00007016                            
00007016                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00007016 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000701A 323C 000E                  		move.w	#$E,d1
0000701E 3038 F700                  		move.w	($FFFFF700).w,d0
00007022 4440                       		neg.w	d0
00007024 4840                       		swap	d0
00007026 0242 000F                  		andi.w	#$F,d2
0000702A D442                       		add.w	d2,d2
0000702C 301A                       		move.w	(a2)+,d0
0000702E 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
00007032                            ; End of function Deform_MZ
00007032                            
00007032                            ; ===========================================================================
00007032                            
00007032                            Deform_All_1:				; XREF: Deform_All
00007032 301A                       		move.w	(a2)+,d0
00007034                            
00007034                            Deform_All_2:
00007034 22C0                       		move.l	d0,(a1)+
00007036 22C0                       		move.l	d0,(a1)+
00007038 22C0                       		move.l	d0,(a1)+
0000703A 22C0                       		move.l	d0,(a1)+
0000703C 22C0                       		move.l	d0,(a1)+
0000703E 22C0                       		move.l	d0,(a1)+
00007040 22C0                       		move.l	d0,(a1)+
00007042 22C0                       		move.l	d0,(a1)+
00007044 22C0                       		move.l	d0,(a1)+
00007046 22C0                       		move.l	d0,(a1)+
00007048 22C0                       		move.l	d0,(a1)+
0000704A 22C0                       		move.l	d0,(a1)+
0000704C 22C0                       		move.l	d0,(a1)+
0000704E 22C0                       		move.l	d0,(a1)+
00007050 22C0                       		move.l	d0,(a1)+
00007052 22C0                       		move.l	d0,(a1)+
00007054 51C9 FFDC                  		dbf	d1,Deform_All_1
00007058 4E75                       		rts	
0000705A                            
0000705A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705A                            
0000705A                            
0000705A                            Deform_SYZ:
0000705A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000705E 48C5                       		ext.l	d5
00007060 E985                       		asl.l	#4,d5
00007062 2205                       		move.l	d5,d1
00007064 E385                       		asl.l	#1,d5
00007066 DA81                       		add.l	d1,d5
00007068 6100 0000                  		bsr.w	ScrollBlock2
0000706C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007072 43F8 A800                  		lea	($FFFFA800).w,a1
00007076 3438 F700                  		move.w	($FFFFF700).w,d2
0000707A 4442                       		neg.w	d2
0000707C 3002                       		move.w	d2,d0
0000707E E640                       		asr.w	#3,d0
00007080 9042                       		sub.w	d2,d0
00007082 48C0                       		ext.l	d0
00007084 E780                       		asl.l	#3,d0
00007086 81FC 0008                  		divs.w	#8,d0
0000708A 48C0                       		ext.l	d0
0000708C E980                       		asl.l	#4,d0
0000708E E180                       		asl.l	#8,d0
00007090 7600                       		moveq	#0,d3
00007092 3602                       		move.w	d2,d3
00007094 E243                       		asr.w	#1,d3
00007096 323C 0007                  		move.w	#7,d1
0000709A                            
0000709A                            Deform_SYZ_1:				; XREF: Deform_SYZ
0000709A 32C3                       		move.w	d3,(a1)+
0000709C 4843                       		swap	d3
0000709E D680                       		add.l	d0,d3
000070A0 4843                       		swap	d3
000070A2 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
000070A6 3002                       		move.w	d2,d0
000070A8 E640                       		asr.w	#3,d0
000070AA 323C 0004                  		move.w	#4,d1
000070AE                            
000070AE                            Deform_SYZ_2:				; XREF: Deform_SYZ
000070AE 32C0                       		move.w	d0,(a1)+
000070B0 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
000070B4 3002                       		move.w	d2,d0
000070B6 E440                       		asr.w	#2,d0
000070B8 323C 0005                  		move.w	#5,d1
000070BC                            
000070BC                            Deform_SYZ_3:				; XREF: Deform_SYZ
000070BC 32C0                       		move.w	d0,(a1)+
000070BE 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
000070C2 3002                       		move.w	d2,d0
000070C4 3202                       		move.w	d2,d1
000070C6 E241                       		asr.w	#1,d1
000070C8 9041                       		sub.w	d1,d0
000070CA 48C0                       		ext.l	d0
000070CC E980                       		asl.l	#4,d0
000070CE 81FC 000E                  		divs.w	#$E,d0
000070D2 48C0                       		ext.l	d0
000070D4 E980                       		asl.l	#4,d0
000070D6 E180                       		asl.l	#8,d0
000070D8 7600                       		moveq	#0,d3
000070DA 3602                       		move.w	d2,d3
000070DC E243                       		asr.w	#1,d3
000070DE 323C 000D                  		move.w	#$D,d1
000070E2                            
000070E2                            Deform_SYZ_4:				; XREF: Deform_SYZ
000070E2 32C3                       		move.w	d3,(a1)+
000070E4 4843                       		swap	d3
000070E6 D680                       		add.l	d0,d3
000070E8 4843                       		swap	d3
000070EA 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
000070EE 45F8 A800                  		lea	($FFFFA800).w,a2
000070F2 3038 F70C                  		move.w	($FFFFF70C).w,d0
000070F6 3400                       		move.w	d0,d2
000070F8 0240 01F0                  		andi.w	#$1F0,d0
000070FC E648                       		lsr.w	#3,d0
000070FE 45F2 0000                  		lea	(a2,d0.w),a2
00007102 6000 FF12                  		bra.w	Deform_All
00007106                            ; End of function Deform_SYZ
00007106                            
00007106                            
00007106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007106                            
00007106                            
00007106                            Deform_SBZ:
00007106 4A38 FE11                  		tst.b	($FFFFFE11).w
0000710A 6600 0000                  		bne.w	Deform_SBZ_Act2
0000710E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007112 48C4                       		ext.l	d4
00007114 EF84                       		asl.l	#7,d4
00007116 7C02                       		moveq	#2,d6
00007118 6100 0000                  		bsr.w	ScrollBlock4
0000711C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007120 48C4                       		ext.l	d4
00007122 ED84                       		asl.l	#6,d4
00007124 7C06                       		moveq	#6,d6
00007126 6100 0000                  		bsr.w	ScrollBlock6
0000712A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000712E 48C4                       		ext.l	d4
00007130 EB84                       		asl.l	#5,d4
00007132 2204                       		move.l	d4,d1
00007134 E384                       		asl.l	#1,d4
00007136 D881                       		add.l	d1,d4
00007138 7C04                       		moveq	#4,d6
0000713A 6100 0000                  		bsr.w	ScrollBlock5
0000713E 7800                       		moveq	#0,d4
00007140 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007144 48C5                       		ext.l	d5
00007146 EB85                       		asl.l	#5,d5
00007148 6100 0000                  		bsr.w	ScrollBlock1_2
0000714C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007150 31C0 F714                  		move.w	d0,($FFFFF714).w
00007154 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00007158 31C0 F618                  		move.w	d0,($FFFFF618).w
0000715C 1038 F756                  		move.b	($FFFFF756).w,d0
00007160 8038 F75A                  		or.b	($FFFFF75A).w,d0
00007164 8138 F758                  		or.b	d0,($FFFFF758).w
00007168 4238 F756                  		clr.b	($FFFFF756).w
0000716C 4238 F75A                  		clr.b	($FFFFF75A).w
00007170 43F8 A800                  		lea	($FFFFA800).w,a1
00007174 3438 F700                  		move.w	($FFFFF700).w,d2
00007178 4442                       		neg.w	d2
0000717A E442                       		asr.w	#2,d2
0000717C 3002                       		move.w	d2,d0
0000717E E240                       		asr.w	#1,d0
00007180 9042                       		sub.w	d2,d0
00007182 48C0                       		ext.l	d0
00007184 E780                       		asl.l	#3,d0
00007186 81FC 0004                  		divs.w	#4,d0
0000718A 48C0                       		ext.l	d0
0000718C E980                       		asl.l	#4,d0
0000718E E180                       		asl.l	#8,d0
00007190 7600                       		moveq	#0,d3
00007192 3602                       		move.w	d2,d3
00007194 323C 0003                  		move.w	#3,d1
00007198                            
00007198                            Deform_SBZ_1:				; XREF: Deform_SBZ
00007198 32C3                       		move.w	d3,(a1)+
0000719A 4843                       		swap	d3
0000719C D680                       		add.l	d0,d3
0000719E 4843                       		swap	d3
000071A0 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000071A4 3038 F718                  		move.w	($FFFFF718).w,d0
000071A8 4440                       		neg.w	d0
000071AA 323C 0009                  		move.w	#9,d1
000071AE                            
000071AE                            Deform_SBZ_2:				; XREF: Deform_SBZ
000071AE 32C0                       		move.w	d0,(a1)+
000071B0 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
000071B4 3038 F710                  		move.w	($FFFFF710).w,d0
000071B8 4440                       		neg.w	d0
000071BA 323C 0006                  		move.w	#6,d1
000071BE                            
000071BE                            Deform_SBZ_3:				; XREF: Deform_SBZ
000071BE 32C0                       		move.w	d0,(a1)+
000071C0 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
000071C4 3038 F708                  		move.w	($FFFFF708).w,d0
000071C8 4440                       		neg.w	d0
000071CA 323C 000A                  		move.w	#$A,d1
000071CE                            
000071CE                            Deform_SBZ_4:				; XREF: Deform_SBZ
000071CE 32C0                       		move.w	d0,(a1)+
000071D0 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
000071D4 45F8 A800                  		lea	($FFFFA800).w,a2
000071D8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071DC 3400                       		move.w	d0,d2
000071DE 0240 01F0                  		andi.w	#$1F0,d0
000071E2 E648                       		lsr.w	#3,d0
000071E4 45F2 0000                  		lea	(a2,d0.w),a2
000071E8 6000 FE2C                  		bra.w	Deform_All
000071EC                            ; ===========================================================================
000071EC                            
000071EC                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
000071EC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071F0 48C4                       		ext.l	d4
000071F2 ED84                       		asl.l	#6,d4
000071F4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000071F8 48C5                       		ext.l	d5
000071FA EB85                       		asl.l	#5,d5
000071FC 6100 0000                  		bsr.w	ScrollBlock1
00007200 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007206 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000720A 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000720E 3038 F700                  		move.w	($FFFFF700).w,d0
00007212 4440                       		neg.w	d0
00007214 4840                       		swap	d0
00007216 3038 F708                  		move.w	($FFFFF708).w,d0
0000721A 4440                       		neg.w	d0
0000721C                            
0000721C                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000721C 22C0                       		move.l	d0,(a1)+
0000721E 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
00007222 4E75                       		rts	
00007224                            ; End of function Deform_SBZ
00007224                            
00007224                            ; ---------------------------------------------------------------------------
00007224                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007224                            ; ---------------------------------------------------------------------------
00007224                            
00007224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007224                            
00007224                            
00007224                            ScrollHoriz:				; XREF: DeformBgLayer
00007224 3838 F700                  		move.w	($FFFFF700).w,d4
00007228 6100                       		bsr.s	ScrollHoriz2
0000722A 3038 F700                  		move.w	($FFFFF700).w,d0
0000722E 0240 0010                  		andi.w	#$10,d0
00007232 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007236 B300                       		eor.b	d1,d0
00007238 6600                       		bne.s	locret_65B0
0000723A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007240 3038 F700                  		move.w	($FFFFF700).w,d0
00007244 9044                       		sub.w	d4,d0
00007246 6A00                       		bpl.s	loc_65AA
00007248 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000724E 4E75                       		rts	
00007250                            ; ===========================================================================
00007250                            
00007250                            loc_65AA:
00007250 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007256                            
00007256                            locret_65B0:
00007256 4E75                       		rts	
00007258                            ; End of function ScrollHoriz
00007258                            
00007258                            
00007258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007258                            
00007258                            
00007258                            ScrollHoriz2:				; XREF: ScrollHoriz
00007258 3038 D008                  		move.w	($FFFFD008).w,d0
0000725C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007260 0440 0090                  		subi.w	#$90,d0
00007264 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
00007266 0440 0010                  		subi.w	#$10,d0
0000726A 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
0000726C 4278 F73A                  		clr.w	($FFFFF73A).w
00007270 4E75                       		rts
00007272                            ; ===========================================================================
00007272                            
00007272                            loc_65CC:
00007272 0C40 0010                  		cmpi.w	#$10,d0
00007276 6500                       		bcs.s	loc_65D6
00007278 303C 0010                  		move.w	#$10,d0
0000727C                            
0000727C                            loc_65D6:
0000727C D078 F700                  		add.w	($FFFFF700).w,d0
00007280 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007284 6D00                       		blt.s	loc_65E4
00007286 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000728A                            
0000728A                            loc_65E4:
0000728A 3200                       		move.w	d0,d1
0000728C 9278 F700                  		sub.w	($FFFFF700).w,d1
00007290 E141                       		asl.w	#8,d1
00007292 31C0 F700                  		move.w	d0,($FFFFF700).w
00007296 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000729A 4E75                       		rts	
0000729C                            ; ===========================================================================
0000729C                            
0000729C                            loc_65F6:				; XREF: ScrollHoriz2
0000729C D078 F700                  		add.w	($FFFFF700).w,d0
000072A0 B078 F728                  		cmp.w	($FFFFF728).w,d0
000072A4 6EE4                       		bgt.s	loc_65E4
000072A6 3038 F728                  		move.w	($FFFFF728).w,d0
000072AA 60DE                       		bra.s	loc_65E4
000072AC                            ; End of function ScrollHoriz2
000072AC                            
000072AC                            ; ===========================================================================
000072AC 4A40                       		tst.w	d0
000072AE 6A00                       		bpl.s	loc_6610
000072B0 303C FFFE                  		move.w	#-2,d0
000072B4 60E6                       		bra.s	loc_65F6
000072B6                            ; ===========================================================================
000072B6                            
000072B6                            loc_6610:
000072B6 303C 0002                  		move.w	#2,d0
000072BA 60B6                       		bra.s	loc_65CC
000072BC                            
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            ; Subroutine to	scroll the level vertically as Sonic moves
000072BC                            ; ---------------------------------------------------------------------------
000072BC                            
000072BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072BC                            
000072BC                            
000072BC                            ScrollVertical:				; XREF: DeformBgLayer
000072BC 7200                       		moveq	#0,d1
000072BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000072C2 9078 F704                  		sub.w	($FFFFF704).w,d0
000072C6 0838 0002 D022             		btst	#2,($FFFFD022).w
000072CC 6700                       		beq.s	loc_662A
000072CE 5B40                       		subq.w	#5,d0
000072D0                            
000072D0                            loc_662A:
000072D0 0838 0001 D022             		btst	#1,($FFFFD022).w
000072D6 6700                       		beq.s	loc_664A
000072D8 0640 0020                  		addi.w	#$20,d0
000072DC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000072E0 6500                       		bcs.s	loc_6696
000072E2 0440 0040                  		subi.w	#$40,d0
000072E6 6400                       		bcc.s	loc_6696
000072E8 4A38 F75C                  		tst.b	($FFFFF75C).w
000072EC 6600                       		bne.s	loc_66A8
000072EE 6000                       		bra.s	loc_6656
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            loc_664A:
000072F0 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000072F4 6600                       		bne.s	loc_665C
000072F6 4A38 F75C                  		tst.b	($FFFFF75C).w
000072FA 6600                       		bne.s	loc_66A8
000072FC                            
000072FC                            loc_6656:
000072FC 4278 F73C                  		clr.w	($FFFFF73C).w
00007300 4E75                       		rts	
00007302                            ; ===========================================================================
00007302                            
00007302                            loc_665C:
00007302 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007308 6600                       		bne.s	loc_6684
0000730A 3238 D020                  		move.w	($FFFFD020).w,d1
0000730E 6A00                       		bpl.s	loc_666C
00007310 4441                       		neg.w	d1
00007312                            
00007312                            loc_666C:
00007312 0C41 0800                  		cmpi.w	#$800,d1
00007316 6400                       		bcc.s	loc_6696
00007318 323C 0600                  		move.w	#$600,d1
0000731C 0C40 0006                  		cmpi.w	#6,d0
00007320 6E00                       		bgt.s	loc_66F6
00007322 0C40 FFFA                  		cmpi.w	#-6,d0
00007326 6D00                       		blt.s	loc_66C0
00007328 6000                       		bra.s	loc_66AE
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            loc_6684:
0000732A 323C 0200                  		move.w	#$200,d1
0000732E 0C40 0002                  		cmpi.w	#2,d0
00007332 6E00                       		bgt.s	loc_66F6
00007334 0C40 FFFE                  		cmpi.w	#-2,d0
00007338 6D00                       		blt.s	loc_66C0
0000733A 6000                       		bra.s	loc_66AE
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_6696:
0000733C 323C 1000                  		move.w	#$1000,d1
00007340 0C40 0010                  		cmpi.w	#$10,d0
00007344 6E00                       		bgt.s	loc_66F6
00007346 0C40 FFF0                  		cmpi.w	#-$10,d0
0000734A 6D00                       		blt.s	loc_66C0
0000734C 6000                       		bra.s	loc_66AE
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            loc_66A8:
0000734E 7000                       		moveq	#0,d0
00007350 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007354                            
00007354                            loc_66AE:
00007354 7200                       		moveq	#0,d1
00007356 3200                       		move.w	d0,d1
00007358 D278 F704                  		add.w	($FFFFF704).w,d1
0000735C 4A40                       		tst.w	d0
0000735E 6A00 0000                  		bpl.w	loc_6700
00007362 6000 0000                  		bra.w	loc_66CC
00007366                            ; ===========================================================================
00007366                            
00007366                            loc_66C0:
00007366 4441                       		neg.w	d1
00007368 48C1                       		ext.l	d1
0000736A E181                       		asl.l	#8,d1
0000736C D2B8 F704                  		add.l	($FFFFF704).w,d1
00007370 4841                       		swap	d1
00007372                            
00007372                            loc_66CC:
00007372 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007376 6E00                       		bgt.s	loc_6724
00007378 0C41 FF00                  		cmpi.w	#-$100,d1
0000737C 6E00                       		bgt.s	loc_66F0
0000737E 0241 07FF                  		andi.w	#$7FF,d1
00007382 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007388 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000738E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007394 6000                       		bra.s	loc_6724
00007396                            ; ===========================================================================
00007396                            
00007396                            loc_66F0:
00007396 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000739A 6000                       		bra.s	loc_6724
0000739C                            ; ===========================================================================
0000739C                            
0000739C                            loc_66F6:
0000739C 48C1                       		ext.l	d1
0000739E E181                       		asl.l	#8,d1
000073A0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000073A4 4841                       		swap	d1
000073A6                            
000073A6                            loc_6700:
000073A6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000073AA 6D00                       		blt.s	loc_6724
000073AC 0441 0800                  		subi.w	#$800,d1
000073B0 6500                       		bcs.s	loc_6720
000073B2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000073B8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000073BE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000073C4 6000                       		bra.s	loc_6724
000073C6                            ; ===========================================================================
000073C6                            
000073C6                            loc_6720:
000073C6 3238 F72E                  		move.w	($FFFFF72E).w,d1
000073CA                            
000073CA                            loc_6724:
000073CA 3838 F704                  		move.w	($FFFFF704).w,d4
000073CE 4841                       		swap	d1
000073D0 2601                       		move.l	d1,d3
000073D2 96B8 F704                  		sub.l	($FFFFF704).w,d3
000073D6 E09B                       		ror.l	#8,d3
000073D8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000073DC 21C1 F704                  		move.l	d1,($FFFFF704).w
000073E0 3038 F704                  		move.w	($FFFFF704).w,d0
000073E4 0240 0010                  		andi.w	#$10,d0
000073E8 1238 F74B                  		move.b	($FFFFF74B).w,d1
000073EC B300                       		eor.b	d1,d0
000073EE 6600                       		bne.s	locret_6766
000073F0 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000073F6 3038 F704                  		move.w	($FFFFF704).w,d0
000073FA 9044                       		sub.w	d4,d0
000073FC 6A00                       		bpl.s	loc_6760
000073FE 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007404 4E75                       		rts	
00007406                            ; ===========================================================================
00007406                            
00007406                            loc_6760:
00007406 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000740C                            
0000740C                            locret_6766:
0000740C 4E75                       		rts	
0000740E                            ; End of function ScrollVertical
0000740E                            
0000740E                            
0000740E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000740E                            
0000740E                            
0000740E                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000740E 2438 F708                  		move.l	($FFFFF708).w,d2
00007412 2002                       		move.l	d2,d0
00007414 D084                       		add.l	d4,d0
00007416 21C0 F708                  		move.l	d0,($FFFFF708).w
0000741A 2200                       		move.l	d0,d1
0000741C 4841                       		swap	d1
0000741E 0241 0010                  		andi.w	#$10,d1
00007422 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007426 B701                       		eor.b	d3,d1
00007428 6600                       		bne.s	ScrollBlock1_2
0000742A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007430 9082                       		sub.l	d2,d0
00007432 6A00                       		bpl.s	ScrollBlock1_1
00007434 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000743A 6000                       		bra.s	ScrollBlock1_2
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000743C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007442                            
00007442                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
00007442 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007446 2003                       		move.l	d3,d0
00007448 D085                       		add.l	d5,d0
0000744A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000744E 2200                       		move.l	d0,d1
00007450 4841                       		swap	d1
00007452 0241 0010                  		andi.w	#$10,d1
00007456 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000745A B501                       		eor.b	d2,d1
0000745C 6600                       		bne.s	ScrollBlock1_End
0000745E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007464 9083                       		sub.l	d3,d0
00007466 6A00                       		bpl.s	ScrollBlock1_3
00007468 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000746E 4E75                       		rts	
00007470                            ; ===========================================================================
00007470                            
00007470                            ScrollBlock1_3:				; XREF: ScrollBlock1
00007470 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007476                            
00007476                            ScrollBlock1_End:			; XREF: ScrollBlock1
00007476 4E75                       		rts	
00007478                            ; End of function ScrollBlock1
00007478                            
00007478                            
00007478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007478                            
00007478                            
00007478                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
00007478 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000747C 2003                       		move.l	d3,d0
0000747E D085                       		add.l	d5,d0
00007480 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007484 2200                       		move.l	d0,d1
00007486 4841                       		swap	d1
00007488 0241 0010                  		andi.w	#$10,d1
0000748C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007490 B501                       		eor.b	d2,d1
00007492 6600                       		bne.s	ScrollBlock2_End
00007494 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000749A 9083                       		sub.l	d3,d0
0000749C 6A00                       		bpl.s	ScrollBlock2_1
0000749E 08F8 0004 F756             		bset	#4,($FFFFF756).w
000074A4 4E75                       		rts	
000074A6                            ; ===========================================================================
000074A6                            
000074A6                            ScrollBlock2_1:				; XREF: ScrollBlock2
000074A6 08F8 0005 F756             		bset	#5,($FFFFF756).w
000074AC                            
000074AC                            ScrollBlock2_End:			; XREF: ScrollBlock2
000074AC 4E75                       		rts	
000074AE                            ; End of function ScrollBlock2
000074AE                            
000074AE                            
000074AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074AE                            
000074AE                            
000074AE                            ScrollBlock3:				; XREF: Deform_MZ
000074AE 3638 F70C                  		move.w	($FFFFF70C).w,d3
000074B2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000074B6 3200                       		move.w	d0,d1
000074B8 0241 0010                  		andi.w	#$10,d1
000074BC 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074C0 B501                       		eor.b	d2,d1
000074C2 6600                       		bne.s	ScrollBlock3_End
000074C4 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000074CA 9043                       		sub.w	d3,d0
000074CC 6A00                       		bpl.s	ScrollBlock3_1
000074CE 08F8 0000 F756             		bset	#0,($FFFFF756).w
000074D4 4E75                       		rts	
000074D6                            ; ===========================================================================
000074D6                            
000074D6                            ScrollBlock3_1:				; XREF: ScrollBlock3
000074D6 08F8 0001 F756             		bset	#1,($FFFFF756).w
000074DC                            
000074DC                            ScrollBlock3_End:			; XREF: ScrollBlock3
000074DC 4E75                       		rts	
000074DE                            ; End of function ScrollBlock3
000074DE                            
000074DE                            
000074DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074DE                            
000074DE                            
000074DE                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
000074DE 2438 F708                  		move.l	($FFFFF708).w,d2
000074E2 2002                       		move.l	d2,d0
000074E4 D084                       		add.l	d4,d0
000074E6 21C0 F708                  		move.l	d0,($FFFFF708).w
000074EA 2200                       		move.l	d0,d1
000074EC 4841                       		swap	d1
000074EE 0241 0010                  		andi.w	#$10,d1
000074F2 1638 F74C                  		move.b	($FFFFF74C).w,d3
000074F6 B701                       		eor.b	d3,d1
000074F8 6600                       		bne.s	ScrollBlock4_End
000074FA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007500 9082                       		sub.l	d2,d0
00007502 6A00                       		bpl.s	ScrollBlock4_1
00007504 0DF8 F756                  		bset	d6,($FFFFF756).w
00007508 6000                       		bra.s	ScrollBlock4_End
0000750A                            ; ===========================================================================
0000750A                            
0000750A                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000750A 5206                       		addq.b	#1,d6
0000750C 0DF8 F756                  		bset	d6,($FFFFF756).w
00007510                            
00007510                            ScrollBlock4_End:			; XREF: ScrollBlock4
00007510 4E75                       		rts	
00007512                            ; End of function ScrollBlock4
00007512                            
00007512                            
00007512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007512                            
00007512                            
00007512                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
00007512 2438 F710                  		move.l	($FFFFF710).w,d2
00007516 2002                       		move.l	d2,d0
00007518 D084                       		add.l	d4,d0
0000751A 21C0 F710                  		move.l	d0,($FFFFF710).w
0000751E 2200                       		move.l	d0,d1
00007520 4841                       		swap	d1
00007522 0241 0010                  		andi.w	#$10,d1
00007526 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000752A B701                       		eor.b	d3,d1
0000752C 6600                       		bne.s	ScrollBlock5_End
0000752E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007534 9082                       		sub.l	d2,d0
00007536 6A00                       		bpl.s	ScrollBlock5_1
00007538 0DF8 F758                  		bset	d6,($FFFFF758).w
0000753C 6000                       		bra.s	ScrollBlock5_End
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000753E 5206                       		addq.b	#1,d6
00007540 0DF8 F758                  		bset	d6,($FFFFF758).w
00007544                            
00007544                            ScrollBlock5_End:			; XREF: ScrollBlock5
00007544 4E75                       		rts	
00007546                            ; End of function ScrollBlock5
00007546                            
00007546                            
00007546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007546                            
00007546                            
00007546                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00007546 2438 F718                  		move.l	($FFFFF718).w,d2
0000754A 2002                       		move.l	d2,d0
0000754C D084                       		add.l	d4,d0
0000754E 21C0 F718                  		move.l	d0,($FFFFF718).w
00007552 2200                       		move.l	d0,d1
00007554 4841                       		swap	d1
00007556 0241 0010                  		andi.w	#$10,d1
0000755A 1638 F750                  		move.b	($FFFFF750).w,d3
0000755E B701                       		eor.b	d3,d1
00007560 6600                       		bne.s	ScrollBlock6_End
00007562 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
00007568 9082                       		sub.l	d2,d0
0000756A 6A00                       		bpl.s	ScrollBlock6_1
0000756C 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007570 6000                       		bra.s	ScrollBlock6_End
00007572                            ; ===========================================================================
00007572                            
00007572                            ScrollBlock6_1:				; XREF: ScrollBlock6
00007572 5206                       		addq.b	#1,d6
00007574 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007578                            
00007578                            ScrollBlock6_End:			; XREF: ScrollBlock6
00007578 4E75                       		rts	
0000757A                            ; End of function ScrollBlock6
0000757A                            
0000757A                            
0000757A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000757A                            
0000757A                            
0000757A                            sub_6886:		
0000757A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007580 4DF9 00C0 0000             		lea	($C00000).l,a6
00007586 45F8 F756                  		lea	($FFFFF756).w,a2
0000758A 47F8 F708                  		lea	($FFFFF708).w,a3
0000758E 49F8 A440                  		lea	($FFFFA440).w,a4
00007592 343C 6000                  		move.w	#$6000,d2
00007596 6100 0000                  		bsr.w	sub_6D0A
0000759A 45F8 F758                  		lea	($FFFFF758).w,a2
0000759E 47F8 F710                  		lea	($FFFFF710).w,a3
000075A2 6000 0000                  		bra.w	sub_6DA6
000075A6                            ; End of function sub_6886
000075A6                            
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            ; Subroutine to	display	correct	tiles as you move
000075A6                            ; ---------------------------------------------------------------------------
000075A6                            
000075A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075A6                            
000075A6                            
000075A6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000075A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000075AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000075B2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000075B6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000075BA 49F8 A440                  		lea	($FFFFA440).w,a4
000075BE 343C 6000                  		move.w	#$6000,d2
000075C2 6100 0000                  		bsr.w	sub_6D0A
000075C6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000075CA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000075CE 6100 0000                  		bsr.w	sub_6DA6
000075D2 45F8 FF36                  		lea	($FFFFFF36).w,a2
000075D6 47F8 FF28                  		lea	($FFFFFF28).w,a3
000075DA 6100 0000                  		bsr.w	sub_6EA4
000075DE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000075E2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000075E6 49F8 A400                  		lea	($FFFFA400).w,a4
000075EA 343C 4000                  		move.w	#$4000,d2
000075EE 4A38 F745                  		tst.b	($FFFFF745).w
000075F2 6700                       		beq.s	Draw_FG
000075F4 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
000075FA 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
000075FC 7C0F                       		moveq	#$F,d6				;
000075FE                            
000075FE                            Draw_All:
000075FE 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
00007602 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
00007604 3204                       		move.w	d4,d1
00007606 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000760A 3801                       		move.w	d1,d4
0000760C 7AF0                       		moveq	#-$10,d5
0000760E 6100 0000                  		bsr.w	DrawTiles_LR
00007612 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007616 0644 0010                  		addi.w	#$10,d4
0000761A 51CE FFE2                  		dbf	d6,Draw_All
0000761E 4E75                       		rts	
00007620                            
00007620                            Draw_FG:
00007620 4A12                       		tst.b	(a2)
00007622 6700                       		beq.s	locret_6D08
00007624 0892 0000                  		bclr	#0,(a2)
00007628 6700                       		beq.s	loc_6CBE
0000762A 78F0                       		moveq	#-$10,d4
0000762C 7AF0                       		moveq	#-$10,d5
0000762E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007632 78F0                       		moveq	#-$10,d4
00007634 7AF0                       		moveq	#-$10,d5
00007636 6100 0000                  		bsr.w	DrawTiles_LR
0000763A                            
0000763A                            loc_6CBE:
0000763A 0892 0001                  		bclr	#1,(a2)
0000763E 6700                       		beq.s	loc_6CD8
00007640 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007644 7AF0                       		moveq	#-$10,d5
00007646 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000764A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000764E 7AF0                       		moveq	#-$10,d5
00007650 6100 0000                  		bsr.w	DrawTiles_LR
00007654                            
00007654                            loc_6CD8:
00007654 0892 0002                  		bclr	#2,(a2)
00007658 6700                       		beq.s	loc_6CEE
0000765A 78F0                       		moveq	#-$10,d4
0000765C 7AF0                       		moveq	#-$10,d5
0000765E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007662 78F0                       		moveq	#-$10,d4
00007664 7AF0                       		moveq	#-$10,d5
00007666 6100 0000                  		bsr.w	DrawTiles_TB
0000766A                            
0000766A                            loc_6CEE:
0000766A 0892 0003                  		bclr	#3,(a2)
0000766E 6700                       		beq.s	locret_6D08
00007670 78F0                       		moveq	#-$10,d4
00007672 3A3C 0140                  		move.w	#$140,d5
00007676 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000767A 78F0                       		moveq	#-$10,d4
0000767C 3A3C 0140                  		move.w	#$140,d5
00007680 6100 0000                  		bsr.w	DrawTiles_TB
00007684                            
00007684                            locret_6D08:
00007684 4E75                       		rts	
00007686                            
00007686                            ; End of function LoadTilesAsYouMove
00007686                            
00007686                            
00007686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007686                            
00007686                            
00007686                            sub_6D0A:
00007686 4A12                       		tst.b	(a2)
00007688 6700 0000                  		beq.w	locret_6DA4
0000768C 0892 0000                  		bclr	#0,(a2)
00007690 6700                       		beq.s	loc_6D26
00007692 78F0                       		moveq	#-$10,d4
00007694 7AF0                       		moveq	#-$10,d5
00007696 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000769A 78F0                       		moveq	#-$10,d4
0000769C 7AF0                       		moveq	#-$10,d5
0000769E 6100 0000                  		bsr.w	DrawTiles_LR
000076A2                            
000076A2                            loc_6D26:
000076A2 0892 0001                  		bclr	#1,(a2)
000076A6 6700                       		beq.s	loc_6D40
000076A8 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076AC 7AF0                       		moveq	#-$10,d5
000076AE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076B2 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076B6 7AF0                       		moveq	#-$10,d5
000076B8 6100 0000                  		bsr.w	DrawTiles_LR
000076BC                            
000076BC                            loc_6D40:
000076BC 0892 0002                  		bclr	#2,(a2)
000076C0 6700                       		beq.s	loc_6D56
000076C2 78F0                       		moveq	#-$10,d4
000076C4 7AF0                       		moveq	#-$10,d5
000076C6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076CA 78F0                       		moveq	#-$10,d4
000076CC 7AF0                       		moveq	#-$10,d5
000076CE 6100 0000                  		bsr.w	DrawTiles_TB
000076D2                            
000076D2                            loc_6D56:
000076D2 0892 0003                  		bclr	#3,(a2)
000076D6 6700                       		beq.s	loc_6D70
000076D8 78F0                       		moveq	#-$10,d4
000076DA 3A3C 0140                  		move.w	#$140,d5
000076DE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076E2 78F0                       		moveq	#-$10,d4
000076E4 3A3C 0140                  		move.w	#$140,d5
000076E8 6100 0000                  		bsr.w	DrawTiles_TB
000076EC                            
000076EC                            loc_6D70:
000076EC 0892 0004                  		bclr	#4,(a2)
000076F0 6700                       		beq.s	loc_6D88
000076F2 78F0                       		moveq	#-$10,d4
000076F4 7A00                       		moveq	#0,d5
000076F6 6100 0000                  		bsr.w	loc_7176
000076FA 78F0                       		moveq	#-$10,d4
000076FC 7A00                       		moveq	#0,d5
000076FE 7C1F                       		moveq	#$1F,d6
00007700 6100 0000                  		bsr.w	DrawTiles_LR3
00007704                            
00007704                            loc_6D88:
00007704 0892 0005                  		bclr	#5,(a2)
00007708 6700                       		beq.s	locret_6DA4
0000770A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000770E 7A00                       		moveq	#0,d5
00007710 6100 0000                  		bsr.w	loc_7176
00007714 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007718 7A00                       		moveq	#0,d5
0000771A 7C1F                       		moveq	#$1F,d6
0000771C 6100 0000                  		bsr.w	DrawTiles_LR3
00007720                            
00007720                            locret_6DA4:
00007720 4E75                       		rts	
00007722                            ; End of function sub_6D0A
00007722                            
00007722                            
00007722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007722                            
00007722                            
00007722                            sub_6DA6:
00007722 4A12                       		tst.b	(a2)
00007724 6700 0000                  		beq.w	locret_6DF2
00007728 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000772E 6700 0000                  		beq.w	loc_6E16
00007732 0892 0000                  		bclr	#0,(a2)
00007736 6700                       		beq.s	loc_6DD2
00007738 383C 0070                  		move.w	#$70,d4	; 'p'
0000773C 7AF0                       		moveq	#-$10,d5
0000773E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007742 383C 0070                  		move.w	#$70,d4	; 'p'
00007746 7AF0                       		moveq	#-$10,d5
00007748 7C02                       		moveq	#2,d6
0000774A 6100 0000                  		bsr.w	DrawTiles_TB2
0000774E                            
0000774E                            loc_6DD2:
0000774E 0892 0001                  		bclr	#1,(a2)
00007752 6700                       		beq.s	locret_6DF2
00007754 383C 0070                  		move.w	#$70,d4	; 'p'
00007758 3A3C 0140                  		move.w	#$140,d5
0000775C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007760 383C 0070                  		move.w	#$70,d4	; 'p'
00007764 3A3C 0140                  		move.w	#$140,d5
00007768 7C02                       		moveq	#2,d6
0000776A 6100 0000                  		bsr.w	DrawTiles_TB2
0000776E                            
0000776E                            locret_6DF2:
0000776E 4E75                       		rts	
00007770                            ; ===========================================================================
00007770 00                         unk_6DF4:	dc.b   0 ;	 
00007771 00                         unk_6DF5:	dc.b   0 ;	 
00007772 00                         		dc.b   0 ;  
00007773 00                         		dc.b   0 ;  
00007774 00                         		dc.b   0 ;  
00007775 06                         		dc.b   6 ;  
00007776 06                         		dc.b   6 ;  
00007777 06                         		dc.b   6 ;  
00007778 06                         		dc.b   6 ;  
00007779 06                         		dc.b   6 ;  
0000777A 06                         		dc.b   6 ;  
0000777B 06                         		dc.b   6 ;  
0000777C 06                         		dc.b   6 ;  
0000777D 06                         		dc.b   6 ;  
0000777E 06                         		dc.b   6 ;  
0000777F 04                         		dc.b   4 ;  
00007780 04                         		dc.b   4 ;  
00007781 04                         		dc.b   4 ;  
00007782 04                         		dc.b   4 ;  
00007783 04                         		dc.b   4 ;  
00007784 04                         		dc.b   4 ;  
00007785 04                         		dc.b   4 ;  
00007786 02                         		dc.b   2 ;  
00007787 02                         		dc.b   2 ;  
00007788 02                         		dc.b   2 ;  
00007789 02                         		dc.b   2 ;  
0000778A 02                         		dc.b   2 ;  
0000778B 02                         		dc.b   2 ;  
0000778C 02                         		dc.b   2 ;  
0000778D 02                         		dc.b   2 ;  
0000778E 02                         		dc.b   2 ;  
0000778F 02                         		dc.b   2 ;  
00007790 02                         		dc.b   2 ;  
00007791 00                         		dc.b   0 ;  
00007792                            ; ===========================================================================
00007792                            
00007792                            loc_6E16:
00007792 78F0                       		moveq	#-$10,d4
00007794 0892 0000                  		bclr	#0,(a2)
00007798 6600                       		bne.s	loc_6E28
0000779A 0892 0001                  		bclr	#1,(a2)
0000779E 6700                       		beq.s	loc_6E72
000077A0 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077A4                            
000077A4                            loc_6E28:
000077A4 41F9 0000 7771             		lea	(unk_6DF5).l,a0
000077AA 3038 F70C                  		move.w	($FFFFF70C).w,d0
000077AE D044                       		add.w	d4,d0
000077B0 0240 01F0                  		andi.w	#$1F0,d0
000077B4 E848                       		lsr.w	#4,d0
000077B6 1030 0000                  		move.b	(a0,d0.w),d0
000077BA 47F9 0000 0000             		lea	(unk_6FE4).l,a3
000077C0 3673 0000                  		movea.w	(a3,d0.w),a3
000077C4 6700                       		beq.s	loc_6E5E
000077C6 7AF0                       		moveq	#-$10,d5
000077C8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077CC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077D0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077D4 6100 0000                  		bsr.w	DrawTiles_LR
000077D8 6000                       		bra.s	loc_6E72
000077DA                            ; ===========================================================================
000077DA                            
000077DA                            loc_6E5E:
000077DA 7A00                       		moveq	#0,d5
000077DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000077E0 6100 0000                  		bsr.w	loc_7176
000077E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000077E8 7C1F                       		moveq	#$1F,d6
000077EA 6100 0000                  		bsr.w	DrawTiles_LR3
000077EE                            
000077EE                            loc_6E72:
000077EE 4A12                       		tst.b	(a2)
000077F0 6600                       		bne.s	loc_6E78
000077F2 4E75                       		rts	
000077F4                            ; ===========================================================================
000077F4                            
000077F4                            loc_6E78:
000077F4 78F0                       		moveq	#-$10,d4
000077F6 7AF0                       		moveq	#-$10,d5
000077F8 1012                       		move.b	(a2),d0
000077FA 0200 00A8                  		andi.b	#-$58,d0
000077FE 6700                       		beq.s	loc_6E8C
00007800 E208                       		lsr.b	#1,d0
00007802 1480                       		move.b	d0,(a2)
00007804 3A3C 0140                  		move.w	#$140,d5
00007808                            
00007808                            loc_6E8C:
00007808 41F9 0000 7770             		lea	(unk_6DF4).l,a0
0000780E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007812 0240 01F0                  		andi.w	#$1F0,d0
00007816 E848                       		lsr.w	#4,d0
00007818 41F0 0000                  		lea	(a0,d0.w),a0
0000781C 6000 0000                  		bra.w	loc_6FEC
00007820                            ; End of function sub_6DA6
00007820                            
00007820                            
00007820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007820                            
00007820                            
00007820                            sub_6EA4:
00007820 4A12                       		tst.b	(a2)
00007822 6700 0000                  		beq.w	locret_6EF0
00007826 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000782C 6700 0000                  		beq.w	loc_6F54
00007830 0892 0000                  		bclr	#0,(a2)
00007834 6700                       		beq.s	loc_6ED0_2
00007836 383C 0040                  		move.w	#$40,d4	; '@'
0000783A 7AF0                       		moveq	#-$10,d5
0000783C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007840 383C 0040                  		move.w	#$40,d4	; '@'
00007844 7AF0                       		moveq	#-$10,d5
00007846 7C02                       		moveq	#2,d6
00007848 6100 0000                  		bsr.w	DrawTiles_TB2
0000784C                            
0000784C                            loc_6ED0_2:
0000784C 0892 0001                  		bclr	#1,(a2)
00007850 6700                       		beq.s	locret_6EF0
00007852 383C 0040                  		move.w	#$40,d4	; '@'
00007856 3A3C 0140                  		move.w	#$140,d5
0000785A 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000785E 383C 0040                  		move.w	#$40,d4	; '@'
00007862 3A3C 0140                  		move.w	#$140,d5
00007866 7C02                       		moveq	#2,d6
00007868 6100 0000                  		bsr.w	DrawTiles_TB2
0000786C                            
0000786C                            locret_6EF0:
0000786C 4E75                       		rts	
0000786E                            ; ===========================================================================
0000786E 00                         unk_6EF2:	dc.b   0 ;	 
0000786F 00                         unk_6EF3:	dc.b   0 ;	 
00007870 00                         		dc.b   0 ;  
00007871 00                         		dc.b   0 ;  
00007872 00                         		dc.b   0 ;  
00007873 00                         		dc.b   0 ;  
00007874 06                         		dc.b   6 ;  
00007875 06                         		dc.b   6 ;  
00007876 04                         		dc.b   4 ;  
00007877 04                         		dc.b   4 ;  
00007878 04                         		dc.b   4 ;  
00007879 04                         		dc.b   4 ;  
0000787A 04                         		dc.b   4 ;  
0000787B 04                         		dc.b   4 ;  
0000787C 04                         		dc.b   4 ;  
0000787D 04                         		dc.b   4 ;  
0000787E 04                         		dc.b   4 ;  
0000787F 02                         		dc.b   2 ;  
00007880 02                         		dc.b   2 ;  
00007881 02                         		dc.b   2 ;  
00007882 02                         		dc.b   2 ;  
00007883 02                         		dc.b   2 ;  
00007884 02                         		dc.b   2 ;  
00007885 02                         		dc.b   2 ;  
00007886 02                         		dc.b   2 ;  
00007887 02                         		dc.b   2 ;  
00007888 02                         		dc.b   2 ;  
00007889 02                         		dc.b   2 ;  
0000788A 02                         		dc.b   2 ;  
0000788B 02                         		dc.b   2 ;  
0000788C 02                         		dc.b   2 ;  
0000788D 02                         		dc.b   2 ;  
0000788E 02                         		dc.b   2 ;  
0000788F 02                         		dc.b   2 ;  
00007890 02                         		dc.b   2 ;  
00007891 02                         		dc.b   2 ;  
00007892 02                         		dc.b   2 ;  
00007893 02                         		dc.b   2 ;  
00007894 02                         		dc.b   2 ;  
00007895 02                         		dc.b   2 ;  
00007896 02                         		dc.b   2 ;  
00007897 02                         		dc.b   2 ;  
00007898 02                         		dc.b   2 ;  
00007899 02                         		dc.b   2 ;  
0000789A 02                         		dc.b   2 ;  
0000789B 02                         		dc.b   2 ;  
0000789C 02                         		dc.b   2 ;  
0000789D 02                         		dc.b   2 ;  
0000789E 02                         		dc.b   2 ;  
0000789F 02                         		dc.b   2 ;  
000078A0 02                         		dc.b   2 ;  
000078A1 02                         		dc.b   2 ;  
000078A2 02                         		dc.b   2 ;  
000078A3 02                         		dc.b   2 ;  
000078A4 02                         		dc.b   2 ;  
000078A5 02                         		dc.b   2 ;  
000078A6 02                         		dc.b   2 ;  
000078A7 02                         		dc.b   2 ;  
000078A8 02                         		dc.b   2 ;  
000078A9 02                         		dc.b   2 ;  
000078AA 02                         		dc.b   2 ;  
000078AB 02                         		dc.b   2 ;  
000078AC 02                         		dc.b   2 ;  
000078AD 02                         		dc.b   2 ;  
000078AE 02                         		dc.b   2 ;  
000078AF 02                         		dc.b   2 ;  
000078B0 02                         		dc.b   2 ;  
000078B1 02                         		dc.b   2 ;  
000078B2 02                         		dc.b   2 ;  
000078B3 02                         		dc.b   2 ;  
000078B4 02                         		dc.b   2 ;  
000078B5 02                         		dc.b   2 ;  
000078B6 02                         		dc.b   2 ;  
000078B7 02                         		dc.b   2 ;  
000078B8 02                         		dc.b   2 ;  
000078B9 02                         		dc.b   2 ;  
000078BA 02                         		dc.b   2 ;  
000078BB 02                         		dc.b   2 ;  
000078BC 02                         		dc.b   2 ;  
000078BD 02                         		dc.b   2 ;  
000078BE 02                         		dc.b   2 ;  
000078BF 02                         		dc.b   2 ;  
000078C0 02                         		dc.b   2 ;  
000078C1 02                         		dc.b   2 ;  
000078C2 02                         		dc.b   2 ;  
000078C3 02                         		dc.b   2 ;  
000078C4 02                         		dc.b   2 ;  
000078C5 02                         		dc.b   2 ;  
000078C6 02                         		dc.b   2 ;  
000078C7 02                         		dc.b   2 ;  
000078C8 02                         		dc.b   2 ;  
000078C9 02                         		dc.b   2 ;  
000078CA 02                         		dc.b   2 ;  
000078CB 02                         		dc.b   2 ;  
000078CC 02                         		dc.b   2 ;  
000078CD 02                         		dc.b   2 ;  
000078CE 02                         		dc.b   2 ;  
000078CF 00                         		dc.b   0 ;  
000078D0                            ; ===========================================================================
000078D0                            
000078D0                            loc_6F54:
000078D0 78F0                       		moveq	#-$10,d4
000078D2 0892 0000                  		bclr	#0,(a2)
000078D6 6600                       		bne.s	loc_6F66
000078D8 0892 0001                  		bclr	#1,(a2)
000078DC 6700                       		beq.s	loc_6FAE
000078DE 383C 00E0                  		move.w	#$E0,d4	; 'à'
000078E2                            
000078E2                            loc_6F66:
000078E2 41F9 0000 786F             		lea	(unk_6EF3).l,a0
000078E8 3038 F70C                  		move.w	($FFFFF70C).w,d0
000078EC 0440 0200                  		subi.w	#$200,d0
000078F0 D044                       		add.w	d4,d0
000078F2 0240 07F0                  		andi.w	#$7F0,d0
000078F6 E848                       		lsr.w	#4,d0
000078F8 1030 0000                  		move.b	(a0,d0.w),d0
000078FC 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
00007900 6700                       		beq.s	loc_6F9A
00007902 7AF0                       		moveq	#-$10,d5
00007904 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007908 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000790C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007910 6100 0000                  		bsr.w	DrawTiles_LR
00007914 6000                       		bra.s	loc_6FAE
00007916                            ; ===========================================================================
00007916                            
00007916                            loc_6F9A:
00007916 7A00                       		moveq	#0,d5
00007918 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000791C 6100 0000                  		bsr.w	loc_7176
00007920 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007924 7C1F                       		moveq	#$1F,d6
00007926 6100 0000                  		bsr.w	DrawTiles_LR3
0000792A                            
0000792A                            loc_6FAE:
0000792A 4A12                       		tst.b	(a2)
0000792C 6600                       		bne.s	loc_6FB4
0000792E 4E75                       		rts	
00007930                            ; ===========================================================================
00007930                            
00007930                            loc_6FB4:
00007930 78F0                       		moveq	#-$10,d4
00007932 7AF0                       		moveq	#-$10,d5
00007934 1012                       		move.b	(a2),d0
00007936 0200 00A8                  		andi.b	#-$58,d0
0000793A 6700                       		beq.s	loc_6FC8
0000793C E208                       		lsr.b	#1,d0
0000793E 1480                       		move.b	d0,(a2)
00007940 3A3C 0140                  		move.w	#$140,d5
00007944                            
00007944                            loc_6FC8:
00007944 41F9 0000 786E             		lea	(unk_6EF2).l,a0
0000794A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000794E 0440 0200                  		subi.w	#$200,d0
00007952 0240 07F0                  		andi.w	#$7F0,d0
00007956 E848                       		lsr.w	#4,d0
00007958 41F0 0000                  		lea	(a0,d0.w),a0
0000795C 6000 0000                  		bra.w	loc_6FEC
00007960                            ; ===========================================================================
00007960 FF                         unk_6FE4:	dc.b $FF ;  
00007961 18                         		dc.b $18 ;  
00007962 FF                         		dc.b $FF ;  
00007963 18                         		dc.b $18 ;  
00007964 FF                         		dc.b $FF ;  
00007965 20                         		dc.b $20 ;  
00007966 FF                         		dc.b $FF ;  
00007967 28                         		dc.b $28 ; (
00007968                            ; ===========================================================================
00007968                            
00007968                            loc_6FEC:
00007968 7C0F                       		moveq	#$F,d6
0000796A 2E3C 0080 0000             		move.l	#$800000,d7
00007970                            
00007970                            loc_6FF4:
00007970 7000                       		moveq	#0,d0
00007972 1018                       		move.b	(a0)+,d0
00007974 0112                       		btst	d0,(a2)
00007976 6700                       		beq.s	loc_701C
00007978 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000797C 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
00007980 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007984 6100 0000                  		bsr.w	sub_712A
00007988 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000798C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007990 6100 0000                  		bsr.w	sub_70AC
00007994 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
00007998                            
00007998                            loc_701C:
00007998 0644 0010                  		addi.w	#$10,d4
0000799C 51CE FFD2                  		dbf	d6,loc_6FF4
000079A0 4212                       		clr.b	(a2)
000079A2 4E75                       		rts	
000079A4                            ; End of function sub_6EA4
000079A4                            
000079A4                            
000079A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A4                            
000079A4                            
000079A4                            DrawTiles_LR:
000079A4 7C15                       		moveq	#$15,d6
000079A6                            ; End of function DrawTiles_LR
000079A6                            
000079A6                            
000079A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079A6                            
000079A6                            
000079A6                            DrawTiles_LR2:
000079A6 2E3C 0080 0000             		move.l	#$800000,d7
000079AC 2200                       		move.l	d0,d1
000079AE                            
000079AE                            loc_7032:
000079AE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079B2 6100 0000                  		bsr.w	sub_712A
000079B6 2001                       		move.l	d1,d0
000079B8 6100 0000                  		bsr.w	sub_70AC
000079BC 5801                       		addq.b	#4,d1
000079BE 0201 007F                  		andi.b	#$7F,d1	; '?'
000079C2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079C6 0645 0010                  		addi.w	#$10,d5
000079CA 51CE FFE2                  		dbf	d6,loc_7032
000079CE 4E75                       		rts	
000079D0                            ; End of function DrawTiles_LR2
000079D0                            
000079D0                            
000079D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079D0                            
000079D0                            
000079D0                            DrawTiles_LR3:
000079D0 2E3C 0080 0000             		move.l	#$800000,d7
000079D6 2200                       		move.l	d0,d1
000079D8                            
000079D8                            loc_705C:
000079D8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079DC 6100 0000                  		bsr.w	loc_712C
000079E0 2001                       		move.l	d1,d0
000079E2 6100 0000                  		bsr.w	sub_70AC
000079E6 5801                       		addq.b	#4,d1
000079E8 0201 007F                  		andi.b	#$7F,d1	; '?'
000079EC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079F0 0645 0010                  		addi.w	#$10,d5
000079F4 51CE FFE2                  		dbf	d6,loc_705C
000079F8 4E75                       		rts	
000079FA                            ; End of function DrawTiles_LR3
000079FA                            
000079FA                            
000079FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FA                            
000079FA                            
000079FA                            DrawTiles_TB:
000079FA 7C0F                       		moveq	#$F,d6
000079FC                            ; End of function DrawTiles_TB
000079FC                            
000079FC                            
000079FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FC                            
000079FC                            
000079FC                            DrawTiles_TB2:
000079FC 2E3C 0080 0000             		move.l	#$800000,d7
00007A02 2200                       		move.l	d0,d1
00007A04                            
00007A04                            loc_7088:
00007A04 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A08 6100 0000                  		bsr.w	sub_712A
00007A0C 2001                       		move.l	d1,d0
00007A0E 6100 0000                  		bsr.w	sub_70AC
00007A12 0641 0100                  		addi.w	#$100,d1
00007A16 0241 0FFF                  		andi.w	#$FFF,d1
00007A1A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A1E 0644 0010                  		addi.w	#$10,d4
00007A22 51CE FFE0                  		dbf	d6,loc_7088
00007A26 4E75                       		rts	
00007A28                            ; End of function DrawTiles_TB2
00007A28                            
00007A28                            
00007A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A28                            
00007A28                            
00007A28                            sub_70AC:
00007A28 8042                       		or.w	d2,d0
00007A2A 4840                       		swap	d0
00007A2C 0810 0004                  		btst	#4,(a0)
00007A30 6600                       		bne.s	loc_70E8
00007A32 0810 0003                  		btst	#3,(a0)
00007A36 6600                       		bne.s	loc_70C8
00007A38 2A80                       		move.l	d0,(a5)
00007A3A 2C99                       		move.l	(a1)+,(a6)
00007A3C D087                       		add.l	d7,d0
00007A3E 2A80                       		move.l	d0,(a5)
00007A40 2C99                       		move.l	(a1)+,(a6)
00007A42 4E75                       		rts	
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            loc_70C8:
00007A44 2A80                       		move.l	d0,(a5)
00007A46 2819                       		move.l	(a1)+,d4
00007A48 0A84 0800 0800             		eori.l	#$8000800,d4
00007A4E 4844                       		swap	d4
00007A50 2C84                       		move.l	d4,(a6)
00007A52 D087                       		add.l	d7,d0
00007A54 2A80                       		move.l	d0,(a5)
00007A56 2819                       		move.l	(a1)+,d4
00007A58 0A84 0800 0800             		eori.l	#$8000800,d4
00007A5E 4844                       		swap	d4
00007A60 2C84                       		move.l	d4,(a6)
00007A62 4E75                       		rts	
00007A64                            ; ===========================================================================
00007A64                            
00007A64                            loc_70E8:
00007A64 0810 0003                  		btst	#3,(a0)
00007A68 6600                       		bne.s	loc_710A
00007A6A 2A80                       		move.l	d0,(a5)
00007A6C 2A19                       		move.l	(a1)+,d5
00007A6E 2819                       		move.l	(a1)+,d4
00007A70 0A84 1000 1000             		eori.l	#$10001000,d4
00007A76 2C84                       		move.l	d4,(a6)
00007A78 D087                       		add.l	d7,d0
00007A7A 2A80                       		move.l	d0,(a5)
00007A7C 0A85 1000 1000             		eori.l	#$10001000,d5
00007A82 2C85                       		move.l	d5,(a6)
00007A84 4E75                       		rts	
00007A86                            ; ===========================================================================
00007A86                            
00007A86                            loc_710A:
00007A86 2A80                       		move.l	d0,(a5)
00007A88 2A19                       		move.l	(a1)+,d5
00007A8A 2819                       		move.l	(a1)+,d4
00007A8C 0A84 1800 1800             		eori.l	#$18001800,d4
00007A92 4844                       		swap	d4
00007A94 2C84                       		move.l	d4,(a6)
00007A96 D087                       		add.l	d7,d0
00007A98 2A80                       		move.l	d0,(a5)
00007A9A 0A85 1800 1800             		eori.l	#$18001800,d5
00007AA0 4845                       		swap	d5
00007AA2 2C85                       		move.l	d5,(a6)
00007AA4 4E75                       		rts	
00007AA6                            ; End of function sub_70AC
00007AA6                            
00007AA6                            
00007AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AA6                            
00007AA6                            
00007AA6                            sub_712A:
00007AA6 DA53                       		add.w	(a3),d5
00007AA8                            
00007AA8                            loc_712C:
00007AA8 D86B 0004                  		add.w	4(a3),d4
00007AAC 43F8 B000                  		lea	($FFFFB000).w,a1
00007AB0 3604                       		move.w	d4,d3
00007AB2 E24B                       		lsr.w	#1,d3
00007AB4 0243 0380                  		andi.w	#$380,d3
00007AB8 E64D                       		lsr.w	#3,d5
00007ABA 3005                       		move.w	d5,d0
00007ABC EA48                       		lsr.w	#5,d0
00007ABE 0240 007F                  		andi.w	#$7F,d0	; '?'
00007AC2 D043                       		add.w	d3,d0
00007AC4 4A38 FE10                  		tst.b	($FFFFFE10).w	
00007AC8 6700                       		beq.s	@ghz		
00007ACA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
00007AD0 6700                       		beq.s	@lz		
00007AD2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
00007AD8 6700                       		beq.s	@mz		
00007ADA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
00007AE0 6700                       		beq.s	@slz		
00007AE2 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
00007AE8 6700                       		beq.s	@syz		
00007AEA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
00007AF0 6700                       		beq.s	@sbz				
00007AF2 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007AF8 6700                       		beq.s	@ghz		; if yes, branch
00007AFA 76FF                       		moveq	#-1,d3		; load chunks from RAM
00007AFC 6100                       		bsr.s	LocateBlock
00007AFE 6000                       		bra.s	@continue
00007B00                            
00007B00                            @ghz:
00007B00 7600                       		moveq	#0,d3
00007B02 6100                       		bsr.s	LocateBlock
00007B04 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00007B0A 6000 0000                  		bra.w	@continue
00007B0E                            	
00007B0E                            @lz:
00007B0E 7600                       		moveq	#0,d3
00007B10 6100                       		bsr.s	LocateBlock
00007B12 0683 0000 0000             		add.l	#Blk256_LZ,d3
00007B18 6000 0000                  		bra.w	@continue
00007B1C                            		
00007B1C                            @mz:
00007B1C 7600                       		moveq	#0,d3
00007B1E 6100                       		bsr.s	LocateBlock
00007B20 0683 0000 0000             		add.l	#Blk256_MZ,d3
00007B26 6000 0000                  		bra.w	@continue
00007B2A                            		
00007B2A                            @slz:
00007B2A 7600                       		moveq	#0,d3
00007B2C 6100                       		bsr.s	LocateBlock
00007B2E 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00007B34 6000 0000                  		bra.w	@continue
00007B38                            		
00007B38                            @syz:
00007B38 7600                       		moveq	#0,d3
00007B3A 6100                       		bsr.s	LocateBlock
00007B3C 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00007B42 6000 0000                  		bra.w	@continue
00007B46                            		
00007B46                            @sbz:
00007B46 7600                       		moveq	#0,d3
00007B48 6100                       		bsr.s	LocateBlock
00007B4A 0683 0000 0000             		add.l	#Blk256_SBZ,d3		
00007B50 6000 0000                  		bra.w	@continue
00007B54                            		
00007B54                            @continue:
00007B54 2043                       		movea.l	d3,a0
00007B56 3610                       		move.w	(a0),d3
00007B58 0243 03FF                  		andi.w	#$3FF,d3
00007B5C E74B                       		lsl.w	#3,d3
00007B5E D2C3                       		adda.w	d3,a1
00007B60 4E75                       		rts	
00007B62                            ; ---------------------------------------------------------------------------
00007B62                            
00007B62                            LocateBlock:
00007B62 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00007B66 6700                       		beq.s	LocateBlock_EmptyChunk
00007B68 5303                       		subq.b	#1,d3
00007B6A 0243 007F                  		andi.w	#$7F,d3	; '?'
00007B6E EE5B                       		ror.w	#7,d3
00007B70 D844                       		add.w	d4,d4
00007B72 0244 01E0                  		andi.w	#$1E0,d4
00007B76 0245 001E                  		andi.w	#$1E,d5
00007B7A D644                       		add.w	d4,d3
00007B7C D645                       		add.w	d5,d3
00007B7E 4E75                       		rts
00007B80                            ; ---------------------------------------------------------------------------
00007B80                            
00007B80                            LocateBlock_EmptyChunk:
00007B80 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00007B82 4E75                       		rts
00007B84                            ; End of function sub_712A
00007B84                            
00007B84                            
00007B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B84                            
00007B84                            
00007B84                            Calc_VRAM_Pos:
00007B84 DA53                       		add.w	(a3),d5
00007B86                            
00007B86                            loc_7176:
00007B86 D86B 0004                  		add.w	4(a3),d4
00007B8A 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007B8E 0245 01F0                  		andi.w	#$1F0,d5
00007B92 E94C                       		lsl.w	#4,d4
00007B94 E44D                       		lsr.w	#2,d5
00007B96 D845                       		add.w	d5,d4
00007B98 7003                       		moveq	#3,d0
00007B9A 4840                       		swap	d0
00007B9C 3004                       		move.w	d4,d0
00007B9E 4E75                       		rts	
00007BA0                            ; End of function Calc_VRAM_Pos
00007BA0                            
00007BA0                            ; ===========================================================================
00007BA0 D86B 0004                  		add.w	4(a3),d4
00007BA4 DA53                       		add.w	(a3),d5
00007BA6 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BAA 0245 01F0                  		andi.w	#$1F0,d5
00007BAE E94C                       		lsl.w	#4,d4
00007BB0 E44D                       		lsr.w	#2,d5
00007BB2 D845                       		add.w	d5,d4
00007BB4 7002                       		moveq	#2,d0
00007BB6 4840                       		swap	d0
00007BB8 3004                       		move.w	d4,d0
00007BBA 4E75                       		rts	
00007BBC                            
00007BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBC                            
00007BBC                            
00007BBC                            LoadTilesFromStart:
00007BBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BC2 4DF9 00C0 0000             		lea	($C00000).l,a6
00007BC8 47F8 F700                  		lea	($FFFFF700).w,a3
00007BCC 49F8 A400                  		lea	($FFFFA400).w,a4
00007BD0 343C 4000                  		move.w	#$4000,d2
00007BD4 6100                       		bsr.s	LoadTilesFromStart2
00007BD6 47F8 F708                  		lea	($FFFFF708).w,a3
00007BDA 49F8 A440                  		lea	($FFFFA440).w,a4
00007BDE 343C 6000                  		move.w	#$6000,d2
00007BE2 4A38 FE10                  		tst.b	($FFFFFE10).w
00007BE6 6700 0000                  		beq.w	loc_7220
00007BEA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007BF0 6700 0000                  		beq.w	loc_725A
00007BF4 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007BFA 6700 0000                  		beq.w	loc_7288
00007BFE 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C04 6700 0000                  		beq.w	loc_7220
00007C08                            ; End of function LoadTilesFromStart
00007C08                            
00007C08                            
00007C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C08                            
00007C08                            
00007C08                            LoadTilesFromStart2:
00007C08 78F0                       		moveq	#-$10,d4
00007C0A 7C0F                       		moveq	#$F,d6
00007C0C                            
00007C0C                            loc_71FC:
00007C0C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C10 7A00                       		moveq	#0,d5
00007C12 3204                       		move.w	d4,d1
00007C14 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C18 3801                       		move.w	d1,d4
00007C1A 7A00                       		moveq	#0,d5
00007C1C 7C1F                       		moveq	#$1F,d6
00007C1E 6100 FD86                  		bsr.w	DrawTiles_LR2
00007C22 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C26 0644 0010                  		addi.w	#$10,d4
00007C2A 51CE FFE0                  		dbf	d6,loc_71FC
00007C2E 4E75                       		rts	
00007C30                            ; End of function LoadTilesFromStart2
00007C30                            
00007C30                            ; ===========================================================================
00007C30                            
00007C30                            loc_7220:
00007C30 7800                       		moveq	#0,d4
00007C32 7C0F                       		moveq	#$F,d6
00007C34                            
00007C34                            loc_7224:
00007C34 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C38 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C3E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C42 D044                       		add.w	d4,d0
00007C44 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007C48 6100 0000                  		bsr.w	sub_72BA
00007C4C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C50 0644 0010                  		addi.w	#$10,d4
00007C54 51CE FFDE                  		dbf	d6,loc_7224
00007C58 4E75                       		rts	
00007C5A                            ; ===========================================================================
00007C5A 00                         unk_724A:	dc.b   0 ;	 
00007C5B 00                         		dc.b   0 ;  
00007C5C 00                         		dc.b   0 ;  
00007C5D 00                         		dc.b   0 ;  
00007C5E 06                         		dc.b   6 ;  
00007C5F 06                         		dc.b   6 ;  
00007C60 06                         		dc.b   6 ;  
00007C61 04                         		dc.b   4 ;  
00007C62 04                         		dc.b   4 ;  
00007C63 04                         		dc.b   4 ;  
00007C64 00                         		dc.b   0 ;  
00007C65 00                         		dc.b   0 ;  
00007C66 00                         		dc.b   0 ;  
00007C67 00                         		dc.b   0 ;  
00007C68 00                         		dc.b   0 ;  
00007C69 00                         		dc.b   0 ;  
00007C6A                            ; ===========================================================================
00007C6A                            
00007C6A                            loc_725A:
00007C6A 78F0                       		moveq	#-$10,d4
00007C6C 7C0F                       		moveq	#$F,d6
00007C6E                            
00007C6E                            loc_725E:
00007C6E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C72 41F9 0000 786F             		lea	(unk_6EF3).l,a0
00007C78 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C7C 0440 0200                  		subi.w	#$200,d0
00007C80 D044                       		add.w	d4,d0
00007C82 0240 07F0                  		andi.w	#$7F0,d0
00007C86 6100 0000                  		bsr.w	sub_72BA
00007C8A 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C8E 0644 0010                  		addi.w	#$10,d4
00007C92 51CE FFDA                  		dbf	d6,loc_725E
00007C96 4E75                       		rts	
00007C98                            ; ===========================================================================
00007C98                            
00007C98                            loc_7288:
00007C98 78F0                       		moveq	#-$10,d4
00007C9A 7C0F                       		moveq	#$F,d6
00007C9C                            
00007C9C                            loc_728C:
00007C9C 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CA0 41F9 0000 7771             		lea	(unk_6DF5).l,a0
00007CA6 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CAA D044                       		add.w	d4,d0
00007CAC 0240 01F0                  		andi.w	#$1F0,d0
00007CB0 6100 0000                  		bsr.w	sub_72BA
00007CB4 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CB8 0644 0010                  		addi.w	#$10,d4
00007CBC 51CE FFDE                  		dbf	d6,loc_728C
00007CC0 4E75                       		rts	
00007CC2                            ; ===========================================================================
00007CC2 F7                         unk_72B2:	dc.b $F7 ; ÷
00007CC3 08                         		dc.b   8 ;  
00007CC4 F7                         		dc.b $F7 ; ÷
00007CC5 08                         		dc.b   8 ;  
00007CC6 F7                         		dc.b $F7 ; ÷
00007CC7 10                         		dc.b $10 ;  
00007CC8 F7                         		dc.b $F7 ; ÷
00007CC9 18                         		dc.b $18 ;  
00007CCA                            
00007CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CCA                            
00007CCA                            
00007CCA                            sub_72BA:
00007CCA E848                       		lsr.w	#4,d0
00007CCC 1030 0000                  		move.b	(a0,d0.w),d0
00007CD0 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007CD4 6700                       		beq.s	loc_72DA
00007CD6 7AF0                       		moveq	#-$10,d5
00007CD8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CDC 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007CE0 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CE4 6100 FCBE                  		bsr.w	DrawTiles_LR
00007CE8 6000                       		bra.s	locret_72EE
00007CEA                            ; ===========================================================================
00007CEA                            
00007CEA                            loc_72DA:
00007CEA 7A00                       		moveq	#0,d5
00007CEC 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CF0 6100 FE94                  		bsr.w	loc_7176
00007CF4 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CF8 7C1F                       		moveq	#$1F,d6
00007CFA 6100 FCD4                  		bsr.w	DrawTiles_LR3
00007CFE                            
00007CFE                            locret_72EE:
00007CFE 4E75                       		rts	
00007D00                            ; End of function sub_72BA
00007D00                            
00007D00                            LoadZoneTiles:
00007D00 7000                       		moveq	#0,d0			; Clear d0
00007D02 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00007D06 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00007D08 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00007D0E 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00007D12 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00007D14                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00007D14 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00007D1A 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00007D1C 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00007D22 6100 9A2C                  		bsr.w	KosDec			; Decompress a0 to a1 (Kosinski compression)
00007D26                            
00007D26 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00007D28 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00007D2A                            
00007D2A 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00007D2E E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00007D30                            
00007D30 E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00007D32 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00007D36                            
00007D36 3407                       @loop:		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00007D38 EF4A                       		lsl.w	#7,d2
00007D3A EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00007D3C                            
00007D3C 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00007D42 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00007D44                            
00007D44 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00007D4A 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00007D4C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00007D52 6100 AC46                  		bsr.w	DelayProgram
00007D56 6100 9748                  		bsr.w	RunPLC_RAM
00007D5A 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00007D5C 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00007D60 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00007D64                            
00007D64 4E75                       		rts
00007D66                            ; End of function LoadZoneTiles
00007D66                            
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            ; Main Load Block loading subroutine
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007D66 7000                       		moveq	#0,d0
00007D68 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D6C E948                       		lsl.w	#4,d0
00007D6E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007D74 45F2 0000                  		lea	(a2,d0.w),a2
00007D78 2F0A                       		move.l	a2,-(sp)
00007D7A 588A                       		addq.l	#4,a2
00007D7C 205A                       		movea.l	(a2)+,a0
00007D7E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007D82 303C 0000                  		move.w	#0,d0
00007D86 6100 984A                  		bsr.w	EniDec
00007D8A 205A                       		movea.l	(a2)+,a0
00007D8C 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00007D90 6700                       		beq.s	@no_dec		; if yes, branch
00007D92 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00007D98 6700                       		beq.s	@no_dec		; if yes, branch
00007D9A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007DA0 6100 99AE                  		bsr.w	KosDec
00007DA4                            
00007DA4                            @no_dec:		
00007DA4 6100 0000                  		bsr.w	LevelLayoutLoad
00007DA8 301A                       		move.w	(a2)+,d0
00007DAA 3012                       		move.w	(a2),d0
00007DAC 0240 00FF                  		andi.w	#$FF,d0
00007DB0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007DB6 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007DB8 700C                       		moveq	#$C,d0		; use SB3 pallet
00007DBA                            
00007DBA                            MLB_ChkSBZPal:
00007DBA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007DC0 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007DC2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007DC8 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007DCA                            
00007DCA                            MLB_UsePal0E:
00007DCA 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007DCC                            
00007DCC                            MLB_NormalPal:
00007DCC 6100 A318                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007DD0 245F                       		movea.l	(sp)+,a2
00007DD2 584A                       		addq.w	#4,a2
00007DD4 7000                       		moveq	#0,d0
00007DD6 1012                       		move.b	(a2),d0
00007DD8 6700                       		beq.s	locret_6D10
00007DDA 6100 9658                  		bsr.w	LoadPLC		; load pattern load cues
00007DDE                            
00007DDE                            locret_6D10:
00007DDE 4E75                       		rts	
00007DE0                            ; End of function MainLoadBlockLoad
00007DE0                            
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            ; Level	layout loading subroutine
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            
00007DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE0                            
00007DE0                            
00007DE0                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007DE0 47F8 A400                  		lea	($FFFFA400).w,a3
00007DE4 323C 01FF                  		move.w	#$1FF,d1
00007DE8 7000                       		moveq	#0,d0
00007DEA                            
00007DEA                            LevLoad_ClrRam:
00007DEA 26C0                       		move.l	d0,(a3)+
00007DEC 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007DF0                            
00007DF0 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007DF4 7200                       		moveq	#0,d1
00007DF6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007DFA 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007DFE 7202                       		moveq	#2,d1
00007E00                            ; End of function LevelLayoutLoad
00007E00                            
00007E00                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007E00                            
00007E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E00                            
00007E00                            
00007E00                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007E00 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007E04 ED08                       		lsl.b	#6,d0
00007E06 EA48                       		lsr.w	#5,d0
00007E08 3400                       		move.w	d0,d2
00007E0A D040                       		add.w	d0,d0
00007E0C D042                       		add.w	d2,d0
00007E0E D041                       		add.w	d1,d0
00007E10 43F9 0000 0000             		lea	(Level_Index).l,a1
00007E16 3031 0000                  		move.w	(a1,d0.w),d0
00007E1A 43F1 0000                  		lea	(a1,d0.w),a1
00007E1E 7200                       		moveq	#0,d1
00007E20 3401                       		move.w	d1,d2
00007E22 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007E24 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007E26                            
00007E26                            LevLoad_NumRows:
00007E26 3001                       		move.w	d1,d0
00007E28 204B                       		movea.l	a3,a0
00007E2A                            
00007E2A                            LevLoad_Row:
00007E2A 10D9                       		move.b	(a1)+,(a0)+
00007E2C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007E30 47EB 0080                  		lea	$80(a3),a3	; do next row
00007E34 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007E38 4E75                       		rts	
00007E3A                            ; End of function LevelLayoutLoad2
00007E3A                            
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            ; Dynamic screen resize	loading	subroutine
00007E3A                            ; ---------------------------------------------------------------------------
00007E3A                            
00007E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E3A                            
00007E3A                            
00007E3A                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007E3A 7000                       		moveq	#0,d0
00007E3C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007E40 D040                       		add.w	d0,d0
00007E42 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007E46 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007E4A 7202                       		moveq	#2,d1
00007E4C 3038 F726                  		move.w	($FFFFF726).w,d0
00007E50 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007E54 6700                       		beq.s	locret_6DAA
00007E56 6400                       		bcc.s	loc_6DAC
00007E58 4441                       		neg.w	d1
00007E5A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E5E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007E62 6300                       		bls.s	loc_6DA0
00007E64 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007E68 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007E6E                            
00007E6E                            loc_6DA0:
00007E6E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E72 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E78                            
00007E78                            locret_6DAA:
00007E78 4E75                       		rts	
00007E7A                            ; ===========================================================================
00007E7A                            
00007E7A                            loc_6DAC:				; XREF: DynScrResizeLoad
00007E7A 3038 F704                  		move.w	($FFFFF704).w,d0
00007E7E 5040                       		addq.w	#8,d0
00007E80 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007E84 6500                       		bcs.s	loc_6DC4
00007E86 0838 0001 D022             		btst	#1,($FFFFD022).w
00007E8C 6700                       		beq.s	loc_6DC4
00007E8E D241                       		add.w	d1,d1
00007E90 D241                       		add.w	d1,d1
00007E92                            
00007E92                            loc_6DC4:
00007E92 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E96 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E9C 4E75                       		rts	
00007E9E                            ; End of function DynScrResizeLoad
00007E9E                            
00007E9E                            ; ===========================================================================
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            ; Offset index for dynamic screen resizing
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007EA2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007EA6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007EAA 0000                       		dc.w Resize_Ending-Resize_Index
00007EAC                            ; ===========================================================================
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            ; Green	Hill Zone dynamic screen resizing
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            
00007EAC                            Resize_GHZ:				; XREF: Resize_Index
00007EAC 7000                       		moveq	#0,d0
00007EAE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007EB2 D040                       		add.w	d0,d0
00007EB4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007EB8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007EBC                            ; ===========================================================================
00007EBC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007EBE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007EC0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007EC2                            ; ===========================================================================
00007EC2                            
00007EC2                            Resize_GHZ1:
00007EC2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007EC8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007ECE 6500                       		bcs.s	locret_6E08	; if not, branch
00007ED0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007ED6                            
00007ED6                            locret_6E08:
00007ED6 4E75                       		rts	
00007ED8                            ; ===========================================================================
00007ED8                            
00007ED8                            Resize_GHZ2:
00007ED8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007EDE 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007EE4 6500                       		bcs.s	locret_6E3A
00007EE6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007EEC 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007EF2 6500                       		bcs.s	locret_6E3A
00007EF4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007EFA 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007F00 6500                       		bcs.s	locret_6E3A
00007F02 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F08                            
00007F08                            locret_6E3A:
00007F08 4E75                       		rts	
00007F0A                            ; ===========================================================================
00007F0A                            
00007F0A                            Resize_GHZ3:
00007F0A 7000                       		moveq	#0,d0
00007F0C 1038 F742                  		move.b	($FFFFF742).w,d0
00007F10 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007F14 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007F18                            ; ===========================================================================
00007F18 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007F1A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007F1C 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007F1E                            ; ===========================================================================
00007F1E                            
00007F1E                            Resize_GHZ3main:
00007F1E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F24 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007F2A 6500                       		bcs.s	locret_6E96
00007F2C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007F32 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F38 6500                       		bcs.s	locret_6E96
00007F3A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007F40 6500                       		bcs.s	loc_6E98
00007F42 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007F48 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007F4E 6400                       		bcc.s	loc_6E8E
00007F50 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007F56 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007F5C                            
00007F5C                            loc_6E8E:
00007F5C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F62 6400                       		bcc.s	loc_6E98
00007F64                            
00007F64                            locret_6E96:
00007F64 4E75                       		rts	
00007F66                            ; ===========================================================================
00007F66                            
00007F66                            loc_6E98:
00007F66 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F6C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F70 4E75                       		rts	
00007F72                            ; ===========================================================================
00007F72                            
00007F72                            Resize_GHZ3boss:
00007F72 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F78 6400                       		bcc.s	loc_6EB0
00007F7A 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F7E                            
00007F7E                            loc_6EB0:
00007F7E 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007F84 6500                       		bcs.s	locret_6EE8
00007F86 6100 0000                  		bsr.w	SingleObjLoad
00007F8A 6600                       		bne.s	loc_6ED0
00007F8C 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007F90 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007F96 337C 0280 000C             		move.w	#$280,$C(a1)
00007F9C                            
00007F9C                            loc_6ED0:
00007F9C 303C 008C                  		move.w	#$8C,d0
00007FA0 6100 924E                  		bsr.w	PlaySound	; play boss music
00007FA4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FAA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FAE 7011                       		moveq	#$11,d0
00007FB0 6000 9482                  		bra.w	LoadPLC		; load boss patterns
00007FB4                            ; ===========================================================================
00007FB4                            
00007FB4                            locret_6EE8:
00007FB4 4E75                       		rts	
00007FB6                            ; ===========================================================================
00007FB6                            
00007FB6                            Resize_GHZ3end:
00007FB6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FBC 4E75                       		rts	
00007FBE                            ; ===========================================================================
00007FBE                            ; ---------------------------------------------------------------------------
00007FBE                            ; Labyrinth Zone dynamic screen	resizing
00007FBE                            ; ---------------------------------------------------------------------------
00007FBE                            
00007FBE                            Resize_LZ:				; XREF: Resize_Index
00007FBE 7000                       		moveq	#0,d0
00007FC0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007FC4 D040                       		add.w	d0,d0
00007FC6 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007FCA 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007FCE                            ; ===========================================================================
00007FCE 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007FD0 0000                       		dc.w Resize_LZ12-Resize_LZx
00007FD2 0000                       		dc.w Resize_LZ3-Resize_LZx
00007FD4 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007FD6                            ; ===========================================================================
00007FD6                            
00007FD6                            Resize_LZ12:
00007FD6 4E75                       		rts	
00007FD8                            ; ===========================================================================
00007FD8                            
00007FD8                            Resize_LZ3:
00007FD8 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007FDC 6700                       		beq.s	loc_6F28	; if not, branch
00007FDE 43F8 A506                  		lea	($FFFFA506).w,a1
00007FE2 0C11 0007                  		cmpi.b	#7,(a1)
00007FE6 6700                       		beq.s	loc_6F28
00007FE8 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007FEC 303C 00B7                  		move.w	#$B7,d0
00007FF0 6100 9204                  		bsr.w	PlaySound_Special ; play rumbling sound
00007FF4                            
00007FF4                            loc_6F28:
00007FF4 4A38 F742                  		tst.b	($FFFFF742).w
00007FF8 6600                       		bne.s	locret_6F64
00007FFA 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00008000 6500                       		bcs.s	locret_6F62
00008002 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00008008 6400                       		bcc.s	locret_6F62
0000800A 6100 0000                  		bsr.w	SingleObjLoad
0000800E 6600                       		bne.s	loc_6F4A
00008010 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00008014                            
00008014                            loc_6F4A:
00008014 303C 008C                  		move.w	#$8C,d0
00008018 6100 91D6                  		bsr.w	PlaySound	; play boss music
0000801C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008022 5438 F742                  		addq.b	#2,($FFFFF742).w
00008026 7011                       		moveq	#$11,d0
00008028 6000 940A                  		bra.w	LoadPLC		; load boss patterns
0000802C                            ; ===========================================================================
0000802C                            
0000802C                            locret_6F62:
0000802C 4E75                       		rts	
0000802E                            ; ===========================================================================
0000802E                            
0000802E                            locret_6F64:
0000802E 4E75                       		rts	
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_SBZ3:
00008030 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008036 6500                       		bcs.s	locret_6F8C
00008038 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000803E 6400                       		bcc.s	locret_6F8C	; if not, branch
00008040 4238 FE30                  		clr.b	($FFFFFE30).w
00008044 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000804A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008050 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008056                            
00008056                            locret_6F8C:
00008056 4E75                       		rts	
00008058                            ; ===========================================================================
00008058                            ; ---------------------------------------------------------------------------
00008058                            ; Marble Zone dynamic screen resizing
00008058                            ; ---------------------------------------------------------------------------
00008058                            
00008058                            Resize_MZ:				; XREF: Resize_Index
00008058 7000                       		moveq	#0,d0
0000805A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000805E D040                       		add.w	d0,d0
00008060 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008064 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00008068                            ; ===========================================================================
00008068 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000806A 0000                       		dc.w Resize_MZ2-Resize_MZx
0000806C 0000                       		dc.w Resize_MZ3-Resize_MZx
0000806E                            ; ===========================================================================
0000806E                            
0000806E                            Resize_MZ1:
0000806E 7000                       		moveq	#0,d0
00008070 1038 F742                  		move.b	($FFFFF742).w,d0
00008074 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00008078 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000807C                            ; ===========================================================================
0000807C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000807E 0000                       		dc.w loc_6FEA-off_6FB2
00008080 0000                       		dc.w loc_702E-off_6FB2
00008082 0000                       		dc.w loc_7050-off_6FB2
00008084                            ; ===========================================================================
00008084                            
00008084                            loc_6FBA:
00008084 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000808A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00008090 6500                       		bcs.s	locret_6FE8
00008092 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00008098 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000809E 6500                       		bcs.s	locret_6FE8
000080A0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080A6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080AC 6500                       		bcs.s	locret_6FE8
000080AE 5438 F742                  		addq.b	#2,($FFFFF742).w
000080B2                            
000080B2                            locret_6FE8:
000080B2 4E75                       		rts	
000080B4                            ; ===========================================================================
000080B4                            
000080B4                            loc_6FEA:
000080B4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000080BA 6400                       		bcc.s	loc_6FF8
000080BC 5538 F742                  		subq.b	#2,($FFFFF742).w
000080C0 4E75                       		rts	
000080C2                            ; ===========================================================================
000080C2                            
000080C2                            loc_6FF8:
000080C2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000080C8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000080CE 6400                       		bcc.s	locret_702C
000080D0 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000080D6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000080DC 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000080E2 6400                       		bcc.s	locret_702C
000080E4 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000080EA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080F0 6500                       		bcs.s	locret_702C
000080F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000080F6                            
000080F6                            locret_702C:
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            loc_702E:
000080F8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080FE 6400                       		bcc.s	loc_703C
00008100 5538 F742                  		subq.b	#2,($FFFFF742).w
00008104 4E75                       		rts	
00008106                            ; ===========================================================================
00008106                            
00008106                            loc_703C:
00008106 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000810C 6500                       		bcs.s	locret_704E
0000810E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00008114 5438 F742                  		addq.b	#2,($FFFFF742).w
00008118                            
00008118                            locret_704E:
00008118 4E75                       		rts	
0000811A                            ; ===========================================================================
0000811A                            
0000811A                            loc_7050:
0000811A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00008120 6500                       		bcs.s	locret_7072
00008122 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00008128 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000812E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00008134 6500                       		bcs.s	locret_7072
00008136 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000813C                            
0000813C                            locret_7072:
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            
0000813E                            Resize_MZ2:
0000813E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008144 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000814A 6500                       		bcs.s	locret_7088
0000814C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008152                            
00008152                            locret_7088:
00008152 4E75                       		rts	
00008154                            ; ===========================================================================
00008154                            
00008154                            Resize_MZ3:
00008154 7000                       		moveq	#0,d0
00008156 1038 F742                  		move.b	($FFFFF742).w,d0
0000815A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000815E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008162                            ; ===========================================================================
00008162 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008164 0000                       		dc.w Resize_MZ3end-off_7098
00008166                            ; ===========================================================================
00008166                            
00008166                            Resize_MZ3boss:
00008166 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000816C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008172 6500                       		bcs.s	locret_70E8
00008174 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000817A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008180 6500                       		bcs.s	locret_70E8
00008182 6100 0000                  		bsr.w	SingleObjLoad
00008186 6600                       		bne.s	loc_70D0
00008188 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000818C 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008192 337C 022C 000C             		move.w	#$22C,$C(a1)
00008198                            
00008198                            loc_70D0:
00008198 303C 008C                  		move.w	#$8C,d0
0000819C 6100 9052                  		bsr.w	PlaySound	; play boss music
000081A0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081A6 5438 F742                  		addq.b	#2,($FFFFF742).w
000081AA 7011                       		moveq	#$11,d0
000081AC 6000 9286                  		bra.w	LoadPLC		; load boss patterns
000081B0                            ; ===========================================================================
000081B0                            
000081B0                            locret_70E8:
000081B0 4E75                       		rts	
000081B2                            ; ===========================================================================
000081B2                            
000081B2                            Resize_MZ3end:
000081B2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081B8 4E75                       		rts	
000081BA                            ; ===========================================================================
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            ; Star Light Zone dynamic screen resizing
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            
000081BA                            Resize_SLZ:				; XREF: Resize_Index
000081BA 7000                       		moveq	#0,d0
000081BC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000081C0 D040                       		add.w	d0,d0
000081C2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000081C6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000081CA                            ; ===========================================================================
000081CA 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000081CC 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000081CE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000081D0                            ; ===========================================================================
000081D0                            
000081D0                            Resize_SLZ12:
000081D0 4E75                       		rts	
000081D2                            ; ===========================================================================
000081D2                            
000081D2                            Resize_SLZ3:
000081D2 7000                       		moveq	#0,d0
000081D4 1038 F742                  		move.b	($FFFFF742).w,d0
000081D8 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000081DC 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000081E0                            ; ===========================================================================
000081E0 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000081E2 0000                       		dc.w Resize_SLZ3boss-off_7118
000081E4 0000                       		dc.w Resize_SLZ3end-off_7118
000081E6                            ; ===========================================================================
000081E6                            
000081E6                            Resize_SLZ3main:
000081E6 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000081EC 6500                       		bcs.s	locret_7130
000081EE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000081F8                            
000081F8                            locret_7130:
000081F8 4E75                       		rts	
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            Resize_SLZ3boss:
000081FA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008200 6500                       		bcs.s	locret_715C
00008202 6100 0000                  		bsr.w	SingleObjLoad
00008206 6600                       		bne.s	loc_7144
00008208 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000820C                            
0000820C                            loc_7144:
0000820C 303C 008C                  		move.w	#$8C,d0
00008210 6100 8FDE                  		bsr.w	PlaySound	; play boss music
00008214 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000821A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000821E 7011                       		moveq	#$11,d0
00008220 6000 9212                  		bra.w	LoadPLC		; load boss patterns
00008224                            ; ===========================================================================
00008224                            
00008224                            locret_715C:
00008224 4E75                       		rts	
00008226                            ; ===========================================================================
00008226                            
00008226                            Resize_SLZ3end:
00008226 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000822C 4E75                       		rts
0000822E 4E75                       		rts
00008230                            ; ===========================================================================
00008230                            ; ---------------------------------------------------------------------------
00008230                            ; Spring Yard Zone dynamic screen resizing
00008230                            ; ---------------------------------------------------------------------------
00008230                            
00008230                            Resize_SYZ:				; XREF: Resize_Index
00008230 7000                       		moveq	#0,d0
00008232 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008236 D040                       		add.w	d0,d0
00008238 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000823C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008240                            ; ===========================================================================
00008240 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008242 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008244 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008246                            ; ===========================================================================
00008246                            
00008246                            Resize_SYZ1:
00008246 4E75                       		rts	
00008248                            ; ===========================================================================
00008248                            
00008248                            Resize_SYZ2:
00008248 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000824E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008254 6500                       		bcs.s	locret_71A2
00008256 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000825C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008262 6500                       		bcs.s	locret_71A2
00008264 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000826A                            
0000826A                            locret_71A2:
0000826A 4E75                       		rts	
0000826C                            ; ===========================================================================
0000826C                            
0000826C                            Resize_SYZ3:
0000826C 7000                       		moveq	#0,d0
0000826E 1038 F742                  		move.b	($FFFFF742).w,d0
00008272 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008276 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000827A                            ; ===========================================================================
0000827A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000827C 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000827E 0000                       		dc.w Resize_SYZ3end-off_71B2
00008280                            ; ===========================================================================
00008280                            
00008280                            Resize_SYZ3main:
00008280 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00008286 6500                       		bcs.s	locret_71CE
00008288 6100 0000                  		bsr.w	SingleObjLoad
0000828C 6600                       		bne.s	locret_71CE
0000828E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008292 5438 F742                  		addq.b	#2,($FFFFF742).w
00008296                            
00008296                            locret_71CE:
00008296 4E75                       		rts	
00008298                            ; ===========================================================================
00008298                            
00008298                            Resize_SYZ3boss:
00008298 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000829E 6500                       		bcs.s	locret_7200
000082A0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000082A6 6100 0000                  		bsr.w	SingleObjLoad
000082AA 6600                       		bne.s	loc_71EC
000082AC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000082B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000082B4                            
000082B4                            loc_71EC:
000082B4 303C 008C                  		move.w	#$8C,d0
000082B8 6100 8F36                  		bsr.w	PlaySound	; play boss music
000082BC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082C2 7011                       		moveq	#$11,d0
000082C4 6000 916E                  		bra.w	LoadPLC		; load boss patterns
000082C8                            ; ===========================================================================
000082C8                            
000082C8                            locret_7200:
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            
000082CA                            Resize_SYZ3end:
000082CA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000082D0 4E75                       		rts	
000082D2                            ; ===========================================================================
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            ; Scrap	Brain Zone dynamic screen resizing
000082D2                            ; ---------------------------------------------------------------------------
000082D2                            
000082D2                            Resize_SBZ:				; XREF: Resize_Index
000082D2 7000                       		moveq	#0,d0
000082D4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000082D8 D040                       		add.w	d0,d0
000082DA 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000082DE 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000082E2                            ; ===========================================================================
000082E2 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000082E4 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000082E6 0000                       		dc.w Resize_FZ-Resize_SBZx
000082E8                            ; ===========================================================================
000082E8                            
000082E8                            Resize_SBZ1:
000082E8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000082EE 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000082F4 6500                       		bcs.s	locret_7242
000082F6 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000082FC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00008302 6500                       		bcs.s	locret_7242
00008304 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000830A                            
0000830A                            locret_7242:
0000830A 4E75                       		rts	
0000830C                            ; ===========================================================================
0000830C                            
0000830C                            Resize_SBZ2:
0000830C 7000                       		moveq	#0,d0
0000830E 1038 F742                  		move.b	($FFFFF742).w,d0
00008312 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008316 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000831A                            ; ===========================================================================
0000831A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000831C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000831E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008320 0000                       		dc.w Resize_SBZ2end-off_7252
00008322                            ; ===========================================================================
00008322                            
00008322                            Resize_SBZ2main:
00008322 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008328 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000832E 6500                       		bcs.s	locret_727A
00008330 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008336 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000833C 6500                       		bcs.s	locret_727A
0000833E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008342                            
00008342                            locret_727A:
00008342 4E75                       		rts	
00008344                            ; ===========================================================================
00008344                            
00008344                            Resize_SBZ2boss:
00008344 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000834A 6500                       		bcs.s	locret_7298
0000834C 6100 0000                  		bsr.w	SingleObjLoad
00008350 6600                       		bne.s	locret_7298
00008352 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008356 5438 F742                  		addq.b	#2,($FFFFF742).w
0000835A 701E                       		moveq	#$1E,d0
0000835C 6000 90D6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008360                            ; ===========================================================================
00008360                            
00008360                            locret_7298:
00008360 4E75                       		rts	
00008362                            ; ===========================================================================
00008362                            
00008362                            Resize_SBZ2boss2:
00008362 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00008368 6500                       		bcs.s	loc_72B6
0000836A 6100 0000                  		bsr.w	SingleObjLoad
0000836E 6600                       		bne.s	loc_72B0
00008370 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008374 5438 F742                  		addq.b	#2,($FFFFF742).w
00008378                            
00008378                            loc_72B0:
00008378 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000837E                            
0000837E                            loc_72B6:
0000837E 6000                       		bra.s	loc_72C2
00008380                            ; ===========================================================================
00008380                            
00008380                            Resize_SBZ2end:
00008380 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00008386 6500                       		bcs.s	loc_72C2
00008388 4E75                       		rts	
0000838A                            ; ===========================================================================
0000838A                            
0000838A                            loc_72C2:
0000838A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008390 4E75                       		rts	
00008392                            ; ===========================================================================
00008392                            
00008392                            Resize_FZ:
00008392 7000                       		moveq	#0,d0
00008394 1038 F742                  		move.b	($FFFFF742).w,d0
00008398 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000839C 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000083A0                            ; ===========================================================================
000083A0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000083A4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000083A8 0000                       		dc.w Resize_FZend2-off_72D8
000083AA                            ; ===========================================================================
000083AA                            
000083AA                            Resize_FZmain:
000083AA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000083B0 6500                       		bcs.s	loc_72F4
000083B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000083B6 701F                       		moveq	#$1F,d0
000083B8 6100 907A                  		bsr.w	LoadPLC		; load FZ boss patterns
000083BC                            
000083BC                            loc_72F4:
000083BC 60CC                       		bra.s	loc_72C2
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Resize_FZboss:
000083BE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000083C4 6500                       		bcs.s	loc_7312
000083C6 6100 0000                  		bsr.w	SingleObjLoad
000083CA 6600                       		bne.s	loc_7312
000083CC 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000083D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000083D4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083DA                            
000083DA                            loc_7312:
000083DA 60AE                       		bra.s	loc_72C2
000083DC                            ; ===========================================================================
000083DC                            
000083DC                            Resize_FZend:
000083DC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000083E2 6500                       		bcs.s	loc_7320
000083E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000083E8                            
000083E8                            loc_7320:
000083E8 60A0                       		bra.s	loc_72C2
000083EA                            ; ===========================================================================
000083EA                            
000083EA                            locret_7322:
000083EA 4E75                       		rts	
000083EC                            ; ===========================================================================
000083EC                            
000083EC                            Resize_FZend2:
000083EC 609C                       		bra.s	loc_72C2
000083EE                            ; ===========================================================================
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            ; Ending sequence dynamic screen resizing (empty)
000083EE                            ; ---------------------------------------------------------------------------
000083EE                            
000083EE                            Resize_Ending:				; XREF: Resize_Index
000083EE 4E75                       		rts	
000083F0                            ; ===========================================================================
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            ; Object 11 - GHZ bridge
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            
000083F0                            Obj11:					; XREF: Obj_Index
000083F0 7000                       		moveq	#0,d0
000083F2 1028 0024                  		move.b	$24(a0),d0
000083F6 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000083FA 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000083FE                            ; ===========================================================================
000083FE 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00008402 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008406 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000840A                            ; ===========================================================================
0000840A                            
0000840A                            Obj11_Main:				; XREF: Obj11_Index
0000840A 5428 0024                  		addq.b	#2,$24(a0)
0000840E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008416 317C 438E 0002             		move.w	#$438E,2(a0)
0000841C 117C 0004 0001             		move.b	#4,1(a0)
00008422 117C 0003 0018             		move.b	#3,$18(a0)
00008428 117C 0080 0019             		move.b	#$80,$19(a0)
0000842E 3428 000C                  		move.w	$C(a0),d2
00008432 3628 0008                  		move.w	8(a0),d3
00008436 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008438 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000843C 7200                       		moveq	#0,d1
0000843E 1212                       		move.b	(a2),d1		; copy a2 to d1
00008440 14FC 0000                  		move.b	#0,(a2)+
00008444 3001                       		move.w	d1,d0
00008446 E248                       		lsr.w	#1,d0
00008448 E948                       		lsl.w	#4,d0
0000844A 9640                       		sub.w	d0,d3
0000844C 5501                       		subq.b	#2,d1
0000844E 6500                       		bcs.s	Obj11_Action
00008450                            
00008450                            Obj11_MakeBdg:
00008450 6100 0000                  		bsr.w	SingleObjLoad
00008454 6600                       		bne.s	Obj11_Action
00008456 5228 0028                  		addq.b	#1,$28(a0)
0000845A B668 0008                  		cmp.w	8(a0),d3
0000845E 6600                       		bne.s	loc_73B8
00008460 0643 0010                  		addi.w	#$10,d3
00008464 3142 000C                  		move.w	d2,$C(a0)
00008468 3142 003C                  		move.w	d2,$3C(a0)
0000846C 3A08                       		move.w	a0,d5
0000846E 0445 D000                  		subi.w	#-$3000,d5
00008472 EC4D                       		lsr.w	#6,d5
00008474 0245 007F                  		andi.w	#$7F,d5
00008478 14C5                       		move.b	d5,(a2)+
0000847A 5228 0028                  		addq.b	#1,$28(a0)
0000847E                            
0000847E                            loc_73B8:				; XREF: ROM:00007398j
0000847E 3A09                       		move.w	a1,d5
00008480 0445 D000                  		subi.w	#-$3000,d5
00008484 EC4D                       		lsr.w	#6,d5
00008486 0245 007F                  		andi.w	#$7F,d5
0000848A 14C5                       		move.b	d5,(a2)+
0000848C 137C 000A 0024             		move.b	#$A,$24(a1)
00008492 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008494 3342 000C                  		move.w	d2,$C(a1)
00008498 3342 003C                  		move.w	d2,$3C(a1)
0000849C 3343 0008                  		move.w	d3,8(a1)
000084A0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000084A8 337C 438E 0002             		move.w	#$438E,2(a1)
000084AE 137C 0004 0001             		move.b	#4,1(a1)
000084B4 137C 0003 0018             		move.b	#3,$18(a1)
000084BA 137C 0008 0019             		move.b	#8,$19(a1)
000084C0 0643 0010                  		addi.w	#$10,d3
000084C4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000084C8                            
000084C8                            Obj11_Action:				; XREF: Obj11_Index
000084C8 6100                       		bsr.s	Obj11_Solid
000084CA 4A28 003E                  		tst.b	$3E(a0)
000084CE 6700                       		beq.s	Obj11_Display
000084D0 5928 003E                  		subq.b	#4,$3E(a0)
000084D4 6100 0000                  		bsr.w	Obj11_Bend
000084D8                            
000084D8                            Obj11_Display:
000084D8 6100 0000                  		bsr.w	DisplaySprite
000084DC 6000 0000                  		bra.w	Obj11_ChkDel
000084E0                            
000084E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084E0                            
000084E0                            
000084E0                            Obj11_Solid:				; XREF: Obj11_Action
000084E0 7200                       		moveq	#0,d1
000084E2 1228 0028                  		move.b	$28(a0),d1
000084E6 E749                       		lsl.w	#3,d1
000084E8 3401                       		move.w	d1,d2
000084EA 5041                       		addq.w	#8,d1
000084EC D442                       		add.w	d2,d2
000084EE 43F8 D000                  		lea	($FFFFD000).w,a1
000084F2 4A69 0012                  		tst.w	$12(a1)
000084F6 6B00 0000                  		bmi.w	locret_751E
000084FA 3029 0008                  		move.w	8(a1),d0
000084FE 9068 0008                  		sub.w	8(a0),d0
00008502 D041                       		add.w	d1,d0
00008504 6B00 0000                  		bmi.w	locret_751E
00008508 B042                       		cmp.w	d2,d0
0000850A 6400 0000                  		bcc.w	locret_751E
0000850E 6000                       		bra.s	Platform2
00008510                            ; End of function Obj11_Solid
00008510                            
00008510                            ; ---------------------------------------------------------------------------
00008510                            ; Platform subroutine
00008510                            ; ---------------------------------------------------------------------------
00008510                            
00008510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008510                            
00008510                            
00008510                            PlatformObject:
00008510 43F8 D000                  		lea	($FFFFD000).w,a1
00008514 4A69 0012                  		tst.w	$12(a1)
00008518 6B00 0000                  		bmi.w	locret_751E
0000851C 3029 0008                  		move.w	8(a1),d0
00008520 9068 0008                  		sub.w	8(a0),d0
00008524 D041                       		add.w	d1,d0
00008526 6B00 0000                  		bmi.w	locret_751E
0000852A D241                       		add.w	d1,d1
0000852C B041                       		cmp.w	d1,d0
0000852E 6400 0000                  		bcc.w	locret_751E
00008532                            
00008532                            Platform2:
00008532 3028 000C                  		move.w	$C(a0),d0
00008536 5140                       		subq.w	#8,d0
00008538                            
00008538                            Platform3:
00008538 3429 000C                  		move.w	$C(a1),d2
0000853C 1229 0016                  		move.b	$16(a1),d1
00008540 4881                       		ext.w	d1
00008542 D242                       		add.w	d2,d1
00008544 5841                       		addq.w	#4,d1
00008546 9041                       		sub.w	d1,d0
00008548 6200 0000                  		bhi.w	locret_751E
0000854C 0C40 FFF0                  		cmpi.w	#-$10,d0
00008550 6500 0000                  		bcs.w	locret_751E
00008554 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008558 6B00 0000                  		bmi.w	locret_751E
0000855C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00008562 6400 0000                  		bcc.w	locret_751E
00008566 D440                       		add.w	d0,d2
00008568 5642                       		addq.w	#3,d2
0000856A 3342 000C                  		move.w	d2,$C(a1)
0000856E 5428 0024                  		addq.b	#2,$24(a0)
00008572                            
00008572                            loc_74AE:
00008572 0829 0003 0022             		btst	#3,$22(a1)
00008578 6700                       		beq.s	loc_74DC
0000857A 7000                       		moveq	#0,d0
0000857C 1029 003D                  		move.b	$3D(a1),d0
00008580 ED48                       		lsl.w	#6,d0
00008582 0680 00FF D000             		addi.l	#$FFD000,d0
00008588 2440                       		movea.l	d0,a2
0000858A 08AA 0003 0022             		bclr	#3,$22(a2)
00008590 422A 0025                  		clr.b	$25(a2)
00008594 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
0000859A 6600                       		bne.s	loc_74DC
0000859C 552A 0024                  		subq.b	#2,$24(a2)
000085A0                            
000085A0                            loc_74DC:
000085A0 3008                       		move.w	a0,d0
000085A2 0440 D000                  		subi.w	#-$3000,d0
000085A6 EC48                       		lsr.w	#6,d0
000085A8 0240 007F                  		andi.w	#$7F,d0
000085AC 1340 003D                  		move.b	d0,$3D(a1)
000085B0 137C 0000 0026             		move.b	#0,$26(a1)
000085B6 337C 0000 0012             		move.w	#0,$12(a1)
000085BC 3369 0010 0020             		move.w	$10(a1),$20(a1)
000085C2 0829 0001 0022             		btst	#1,$22(a1)
000085C8 6700                       		beq.s	loc_7512
000085CA 2F08                       		move.l	a0,-(sp)
000085CC 2049                       		movea.l	a1,a0
000085CE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000085D4 205F                       		movea.l	(sp)+,a0
000085D6                            
000085D6                            loc_7512:
000085D6 08E9 0003 0022             		bset	#3,$22(a1)
000085DC 08E8 0003 0022             		bset	#3,$22(a0)
000085E2                            
000085E2                            locret_751E:
000085E2 4E75                       		rts	
000085E4                            ; End of function PlatformObject
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            
000085E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E4                            
000085E4                            
000085E4                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000085E4 43F8 D000                  		lea	($FFFFD000).w,a1
000085E8 4A69 0012                  		tst.w	$12(a1)
000085EC 6B00 FFF4                  		bmi.w	locret_751E
000085F0 3029 0008                  		move.w	8(a1),d0
000085F4 9068 0008                  		sub.w	8(a0),d0
000085F8 D041                       		add.w	d1,d0
000085FA 6BE6                       		bmi.s	locret_751E
000085FC D241                       		add.w	d1,d1
000085FE B041                       		cmp.w	d1,d0
00008600 64E0                       		bcc.s	locret_751E
00008602 0828 0000 0001             		btst	#0,1(a0)
00008608 6700                       		beq.s	loc_754A
0000860A 4640                       		not.w	d0
0000860C D041                       		add.w	d1,d0
0000860E                            
0000860E                            loc_754A:
0000860E E248                       		lsr.w	#1,d0
00008610 7600                       		moveq	#0,d3
00008612 1632 0000                  		move.b	(a2,d0.w),d3
00008616 3028 000C                  		move.w	$C(a0),d0
0000861A 9043                       		sub.w	d3,d0
0000861C 6000 FF1A                  		bra.w	Platform3
00008620                            ; End of function SlopeObject
00008620                            
00008620                            
00008620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008620                            
00008620                            
00008620                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008620 43F8 D000                  		lea	($FFFFD000).w,a1
00008624 4A69 0012                  		tst.w	$12(a1)
00008628 6B00 FFB8                  		bmi.w	locret_751E
0000862C 3029 0008                  		move.w	8(a1),d0
00008630 9068 0008                  		sub.w	8(a0),d0
00008634 D041                       		add.w	d1,d0
00008636 6B00 FFAA                  		bmi.w	locret_751E
0000863A D241                       		add.w	d1,d1
0000863C B041                       		cmp.w	d1,d0
0000863E 6400 FFA2                  		bcc.w	locret_751E
00008642 3028 000C                  		move.w	$C(a0),d0
00008646 9043                       		sub.w	d3,d0
00008648 6000 FEEE                  		bra.w	Platform3
0000864C                            ; End of function Obj15_Solid
0000864C                            
0000864C                            ; ===========================================================================
0000864C                            
0000864C                            Obj11_Action2:				; XREF: Obj11_Index
0000864C 6100                       		bsr.s	Obj11_WalkOff
0000864E 6100 0000                  		bsr.w	DisplaySprite
00008652 6000 0000                  		bra.w	Obj11_ChkDel
00008656                            
00008656                            ; ---------------------------------------------------------------------------
00008656                            ; Subroutine allowing Sonic to walk off a bridge
00008656                            ; ---------------------------------------------------------------------------
00008656                            
00008656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008656                            
00008656                            
00008656                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008656 7200                       		moveq	#0,d1
00008658 1228 0028                  		move.b	$28(a0),d1
0000865C E749                       		lsl.w	#3,d1
0000865E 3401                       		move.w	d1,d2
00008660 5041                       		addq.w	#8,d1
00008662 6100                       		bsr.s	ExitPlatform2
00008664 6400                       		bcc.s	locret_75BE
00008666 E848                       		lsr.w	#4,d0
00008668 1140 003F                  		move.b	d0,$3F(a0)
0000866C 1028 003E                  		move.b	$3E(a0),d0
00008670 0C00 0040                  		cmpi.b	#$40,d0
00008674 6700                       		beq.s	loc_75B6
00008676 5828 003E                  		addq.b	#4,$3E(a0)
0000867A                            
0000867A                            loc_75B6:
0000867A 6100 0000                  		bsr.w	Obj11_Bend
0000867E 6100 0000                  		bsr.w	Obj11_MoveSonic
00008682                            
00008682                            locret_75BE:
00008682 4E75                       		rts	
00008684                            ; End of function Obj11_WalkOff
00008684                            
00008684                            ; ---------------------------------------------------------------------------
00008684                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008684                            ; ---------------------------------------------------------------------------
00008684                            
00008684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008684                            
00008684                            
00008684                            ExitPlatform:
00008684 3401                       		move.w	d1,d2
00008686                            
00008686                            ExitPlatform2:
00008686 D442                       		add.w	d2,d2
00008688 43F8 D000                  		lea	($FFFFD000).w,a1
0000868C 0829 0001 0022             		btst	#1,$22(a1)
00008692 6600                       		bne.s	loc_75E0
00008694 3029 0008                  		move.w	8(a1),d0
00008698 9068 0008                  		sub.w	8(a0),d0
0000869C D041                       		add.w	d1,d0
0000869E 6B00                       		bmi.s	loc_75E0
000086A0 B042                       		cmp.w	d2,d0
000086A2 6500                       		bcs.s	locret_75F2
000086A4                            
000086A4                            loc_75E0:
000086A4 08A9 0003 0022             		bclr	#3,$22(a1)
000086AA 117C 0002 0024             		move.b	#2,$24(a0)
000086B0 08A8 0003 0022             		bclr	#3,$22(a0)
000086B6                            
000086B6                            locret_75F2:
000086B6 4E75                       		rts	
000086B8                            ; End of function ExitPlatform
000086B8                            
000086B8                            
000086B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B8                            
000086B8                            
000086B8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000086B8 7000                       		moveq	#0,d0
000086BA 1028 003F                  		move.b	$3F(a0),d0
000086BE 1030 0029                  		move.b	$29(a0,d0.w),d0
000086C2 ED48                       		lsl.w	#6,d0
000086C4 0680 00FF D000             		addi.l	#$FFD000,d0
000086CA 2440                       		movea.l	d0,a2
000086CC 43F8 D000                  		lea	($FFFFD000).w,a1
000086D0 302A 000C                  		move.w	$C(a2),d0
000086D4 5140                       		subq.w	#8,d0
000086D6 7200                       		moveq	#0,d1
000086D8 1229 0016                  		move.b	$16(a1),d1
000086DC 9041                       		sub.w	d1,d0
000086DE 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000086E2 4E75                       		rts	
000086E4                            ; End of function Obj11_MoveSonic
000086E4                            
000086E4                            
000086E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E4                            
000086E4                            
000086E4                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000086E4 1028 003E                  		move.b	$3E(a0),d0
000086E8 6100 A2E2                  		bsr.w	CalcSine
000086EC 3800                       		move.w	d0,d4
000086EE 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000086F4 7000                       		moveq	#0,d0
000086F6 1028 0028                  		move.b	$28(a0),d0
000086FA E948                       		lsl.w	#4,d0
000086FC 7600                       		moveq	#0,d3
000086FE 1628 003F                  		move.b	$3F(a0),d3
00008702 3403                       		move.w	d3,d2
00008704 D640                       		add.w	d0,d3
00008706 7A00                       		moveq	#0,d5
00008708 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000870E 1A35 3000                  		move.b	(a5,d3.w),d5
00008712 0243 000F                  		andi.w	#$F,d3
00008716 E94B                       		lsl.w	#4,d3
00008718 47F4 3000                  		lea	(a4,d3.w),a3
0000871C 45E8 0029                  		lea	$29(a0),a2
00008720                            
00008720                            loc_765C:
00008720 7000                       		moveq	#0,d0
00008722 101A                       		move.b	(a2)+,d0
00008724 ED48                       		lsl.w	#6,d0
00008726 0680 00FF D000             		addi.l	#$FFD000,d0
0000872C 2240                       		movea.l	d0,a1
0000872E 7000                       		moveq	#0,d0
00008730 101B                       		move.b	(a3)+,d0
00008732 5240                       		addq.w	#1,d0
00008734 C0C5                       		mulu.w	d5,d0
00008736 C0C4                       		mulu.w	d4,d0
00008738 4840                       		swap	d0
0000873A D069 003C                  		add.w	$3C(a1),d0
0000873E 3340 000C                  		move.w	d0,$C(a1)
00008742 51CA FFDC                  		dbf	d2,loc_765C
00008746 7000                       		moveq	#0,d0
00008748 1028 0028                  		move.b	$28(a0),d0
0000874C 7600                       		moveq	#0,d3
0000874E 1628 003F                  		move.b	$3F(a0),d3
00008752 5203                       		addq.b	#1,d3
00008754 9600                       		sub.b	d0,d3
00008756 4403                       		neg.b	d3
00008758 6B00                       		bmi.s	locret_76CA
0000875A 3403                       		move.w	d3,d2
0000875C E94B                       		lsl.w	#4,d3
0000875E 47F4 3000                  		lea	(a4,d3.w),a3
00008762 D6C2                       		adda.w	d2,a3
00008764 5342                       		subq.w	#1,d2
00008766 6500                       		bcs.s	locret_76CA
00008768                            
00008768                            loc_76A4:
00008768 7000                       		moveq	#0,d0
0000876A 101A                       		move.b	(a2)+,d0
0000876C ED48                       		lsl.w	#6,d0
0000876E 0680 00FF D000             		addi.l	#$FFD000,d0
00008774 2240                       		movea.l	d0,a1
00008776 7000                       		moveq	#0,d0
00008778 1023                       		move.b	-(a3),d0
0000877A 5240                       		addq.w	#1,d0
0000877C C0C5                       		mulu.w	d5,d0
0000877E C0C4                       		mulu.w	d4,d0
00008780 4840                       		swap	d0
00008782 D069 003C                  		add.w	$3C(a1),d0
00008786 3340 000C                  		move.w	d0,$C(a1)
0000878A 51CA FFDC                  		dbf	d2,loc_76A4
0000878E                            
0000878E                            locret_76CA:
0000878E 4E75                       		rts	
00008790                            ; End of function Obj11_Bend
00008790                            
00008790                            ; ===========================================================================
00008790                            ; ---------------------------------------------------------------------------
00008790                            ; GHZ bridge-bending data
00008790                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008790                            ; ---------------------------------------------------------------------------
00008790                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000088A0                            		even
000088A0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000089A0                            		even
000089A0                            
000089A0                            ; ===========================================================================
000089A0                            
000089A0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000089A0 3028 0008                  		move.w	8(a0),d0
000089A4 0240 FF80                  		andi.w	#$FF80,d0
000089A8 3238 F700                  		move.w	($FFFFF700).w,d1
000089AC 0441 0080                  		subi.w	#$80,d1
000089B0 0241 FF80                  		andi.w	#$FF80,d1
000089B4 9041                       		sub.w	d1,d0
000089B6 0C40 0280                  		cmpi.w	#$280,d0
000089BA 6300                       		bls.s	Obj11_NoDel
000089BC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000089C0 6700                       		beq.s	Obj11_DelAll		; if it's zero, don't remember object
000089C2 3440                       		movea.w	d0,a2	; load address into a2
000089C4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000089C8 6000                       		bra.s	Obj11_DelAll	; and delete object
000089CA                            
000089CA                            Obj11_NoDel:
000089CA 4E75                       		rts	
000089CC                            ; ===========================================================================
000089CC                            
000089CC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000089CC 7400                       		moveq	#0,d2
000089CE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000089D2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000089D4 5302                       		subq.b	#1,d2		; subtract 1
000089D6 6500                       		bcs.s	Obj11_Delete
000089D8                            
000089D8                            Obj11_DelLoop:
000089D8 7000                       		moveq	#0,d0
000089DA 101A                       		move.b	(a2)+,d0
000089DC ED48                       		lsl.w	#6,d0
000089DE 0680 00FF D000             		addi.l	#$FFD000,d0
000089E4 2240                       		movea.l	d0,a1
000089E6 B048                       		cmp.w	a0,d0
000089E8 6700                       		beq.s	loc_791E
000089EA 6100 0000                  		bsr.w	DeleteObject2
000089EE                            
000089EE                            loc_791E:
000089EE 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000089F2                            
000089F2                            Obj11_Delete:
000089F2 6100 0000                  		bsr.w	DeleteObject
000089F6 4E75                       		rts	
000089F8                            ; ===========================================================================
000089F8                            
000089F8                            Obj11_Delete2:				; XREF: Obj11_Index
000089F8 6100 0000                  		bsr.w	DeleteObject
000089FC 4E75                       		rts	
000089FE                            ; ===========================================================================
000089FE                            
000089FE                            Obj11_Display2:				; XREF: Obj11_Index
000089FE 6100 0000                  		bsr.w	DisplaySprite
00008A02 4E75                       		rts	
00008A04                            ; ===========================================================================
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Sprite mappings - GHZ	bridge
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            Map_obj11:
00008A04                            	include "_maps\obj11.asm"
00008A04                            ; ---------------------------------------------------------------------------
00008A04                            ; Sprite mappings - GHZ	bridge
00008A04                            ; ---------------------------------------------------------------------------
00008A04 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008A08 0000                       		dc.w byte_794B-Map_obj11
00008A0A 01                         byte_793A:	dc.b 1
00008A0B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008A10 02                         byte_7940:	dc.b 2
00008A11 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A16 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A1B 01                         byte_794B:	dc.b 1
00008A1C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A22 00                         		even
00008A22 00                         		even
00008A22                            
00008A22                            ; ===========================================================================
00008A22                            ; ---------------------------------------------------------------------------
00008A22                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A22                            ;	    - spiked ball on a chain (SBZ)
00008A22                            ; ---------------------------------------------------------------------------
00008A22                            
00008A22                            Obj15:					; XREF: Obj_Index
00008A22 7000                       		moveq	#0,d0
00008A24 1028 0024                  		move.b	$24(a0),d0
00008A28 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A2C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A30                            ; ===========================================================================
00008A30 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A34 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A38 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A3C 0000                       		dc.w Obj15_Action-Obj15_Index
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            Obj15_Main:				; XREF: Obj15_Index
00008A3E 5428 0024                  		addq.b	#2,$24(a0)
00008A42 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008A4A 317C 4380 0002             		move.w	#$4380,2(a0)
00008A50 117C 0004 0001             		move.b	#4,1(a0)
00008A56 117C 0003 0018             		move.b	#3,$18(a0)
00008A5C 117C 0018 0019             		move.b	#$18,$19(a0)
00008A62 117C 0008 0016             		move.b	#8,$16(a0)
00008A68 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008A6E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008A74 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A7A 6600                       		bne.s	Obj15_NotSLZ
00008A7C 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008A84 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008A8A 117C 0020 0019             		move.b	#$20,$19(a0)
00008A90 117C 0010 0016             		move.b	#$10,$16(a0)
00008A96 117C 0099 0020             		move.b	#$99,$20(a0)
00008A9C                            
00008A9C                            Obj15_NotSLZ:
00008A9C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008AA2 6600                       		bne.s	Obj15_SetLength
00008AA4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008AAC 317C 0391 0002             		move.w	#$391,2(a0)
00008AB2 117C 0018 0019             		move.b	#$18,$19(a0)
00008AB8 117C 0018 0016             		move.b	#$18,$16(a0)
00008ABE 117C 0086 0020             		move.b	#$86,$20(a0)
00008AC4 117C 000C 0024             		move.b	#$C,$24(a0)
00008ACA                            
00008ACA                            Obj15_SetLength:
00008ACA 1810                       		move.b	0(a0),d4
00008ACC 7200                       		moveq	#0,d1
00008ACE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008AD2 1212                       		move.b	(a2),d1		; move a2 to d1
00008AD4 3F01                       		move.w	d1,-(sp)
00008AD6 0241 000F                  		andi.w	#$F,d1
00008ADA 14FC 0000                  		move.b	#0,(a2)+
00008ADE 3601                       		move.w	d1,d3
00008AE0 E94B                       		lsl.w	#4,d3
00008AE2 5003                       		addq.b	#8,d3
00008AE4 1143 003C                  		move.b	d3,$3C(a0)
00008AE8 5103                       		subq.b	#8,d3
00008AEA 4A28 001A                  		tst.b	$1A(a0)
00008AEE 6700                       		beq.s	Obj15_MakeChain
00008AF0 5003                       		addq.b	#8,d3
00008AF2 5341                       		subq.w	#1,d1
00008AF4                            
00008AF4                            Obj15_MakeChain:
00008AF4 6100 0000                  		bsr.w	SingleObjLoad
00008AF8 6600                       		bne.s	loc_7A92
00008AFA 5228 0028                  		addq.b	#1,$28(a0)
00008AFE 3A09                       		move.w	a1,d5
00008B00 0445 D000                  		subi.w	#-$3000,d5
00008B04 EC4D                       		lsr.w	#6,d5
00008B06 0245 007F                  		andi.w	#$7F,d5
00008B0A 14C5                       		move.b	d5,(a2)+
00008B0C 137C 000A 0024             		move.b	#$A,$24(a1)
00008B12 1284                       		move.b	d4,0(a1)	; load swinging	object
00008B14 2368 0004 0004             		move.l	4(a0),4(a1)
00008B1A 3368 0002 0002             		move.w	2(a0),2(a1)
00008B20 08A9 0006 0002             		bclr	#6,2(a1)
00008B26 137C 0004 0001             		move.b	#4,1(a1)
00008B2C 137C 0004 0018             		move.b	#4,$18(a1)
00008B32 137C 0008 0019             		move.b	#8,$19(a1)
00008B38 137C 0001 001A             		move.b	#1,$1A(a1)
00008B3E 1343 003C                  		move.b	d3,$3C(a1)
00008B42 0403 0010                  		subi.b	#$10,d3
00008B46 6400                       		bcc.s	loc_7A8E
00008B48 137C 0002 001A             		move.b	#2,$1A(a1)
00008B4E 137C 0003 0018             		move.b	#3,$18(a1)
00008B54 08E9 0006 0002             		bset	#6,2(a1)
00008B5A                            
00008B5A                            loc_7A8E:
00008B5A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008B5E                            
00008B5E                            loc_7A92:
00008B5E 3A08                       		move.w	a0,d5
00008B60 0445 D000                  		subi.w	#-$3000,d5
00008B64 EC4D                       		lsr.w	#6,d5
00008B66 0245 007F                  		andi.w	#$7F,d5
00008B6A 14C5                       		move.b	d5,(a2)+
00008B6C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008B72 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008B78 321F                       		move.w	(sp)+,d1
00008B7A 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008B7E 6700                       		beq.s	loc_7AD4	; if not, branch
00008B80 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008B88 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008B8E 117C 0001 001A             		move.b	#1,$1A(a0)
00008B94 117C 0002 0018             		move.b	#2,$18(a0)
00008B9A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008BA0                            
00008BA0                            loc_7AD4:
00008BA0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008BA6 6700                       		beq.s	Obj15_Action	; if yes, branch
00008BA8                            
00008BA8                            Obj15_SetSolid:				; XREF: Obj15_Index
00008BA8 7200                       		moveq	#0,d1
00008BAA 1228 0019                  		move.b	$19(a0),d1
00008BAE 7600                       		moveq	#0,d3
00008BB0 1628 0016                  		move.b	$16(a0),d3
00008BB4 6100 FA6A                  		bsr.w	Obj15_Solid
00008BB8                            
00008BB8                            Obj15_Action:				; XREF: Obj15_Index
00008BB8 6100 0000                  		bsr.w	Obj15_Move
00008BBC 6100 0000                  		bsr.w	DisplaySprite
00008BC0 6000 0000                  		bra.w	Obj15_ChkDel
00008BC4                            ; ===========================================================================
00008BC4                            
00008BC4                            Obj15_Action2:				; XREF: Obj15_Index
00008BC4 7200                       		moveq	#0,d1
00008BC6 1228 0019                  		move.b	$19(a0),d1
00008BCA 6100 FAB8                  		bsr.w	ExitPlatform
00008BCE 3F28 0008                  		move.w	8(a0),-(sp)
00008BD2 6100 0000                  		bsr.w	Obj15_Move
00008BD6 341F                       		move.w	(sp)+,d2
00008BD8 7600                       		moveq	#0,d3
00008BDA 1628 0016                  		move.b	$16(a0),d3
00008BDE 5203                       		addq.b	#1,d3
00008BE0 6100 0000                  		bsr.w	MvSonicOnPtfm
00008BE4 6100 0000                  		bsr.w	DisplaySprite
00008BE8 6000 0000                  		bra.w	Obj15_ChkDel
00008BEC                            
00008BEC 4E75                       		rts
00008BEE                            
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            ; Subroutine to	change Sonic's position with a platform
00008BEE                            ; ---------------------------------------------------------------------------
00008BEE                            
00008BEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BEE                            
00008BEE                            
00008BEE                            MvSonicOnPtfm:
00008BEE 43F8 D000                  		lea	($FFFFD000).w,a1
00008BF2 3028 000C                  		move.w	$C(a0),d0
00008BF6 9043                       		sub.w	d3,d0
00008BF8 6000                       		bra.s	MvSonic2
00008BFA                            ; End of function MvSonicOnPtfm
00008BFA                            
00008BFA                            ; ---------------------------------------------------------------------------
00008BFA                            ; Subroutine to	change Sonic's position with a platform
00008BFA                            ; ---------------------------------------------------------------------------
00008BFA                            
00008BFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BFA                            
00008BFA                            
00008BFA                            MvSonicOnPtfm2:
00008BFA 43F8 D000                  		lea	($FFFFD000).w,a1
00008BFE 3028 000C                  		move.w	$C(a0),d0
00008C02 0440 0009                  		subi.w	#9,d0
00008C06                            
00008C06                            MvSonic2:
00008C06 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0A 6B00                       		bmi.s	locret_7B62
00008C0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C12 6400                       		bcc.s	locret_7B62
00008C14 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C18 6600                       		bne.s	locret_7B62
00008C1A 9468 0008                  		sub.w	8(a0),d2
00008C1E 9569 0008                  		sub.w	d2,8(a1)
00008C22 7200                       		moveq	#0,d1
00008C24 1229 0016                  		move.b	$16(a1),d1
00008C28 9041                       		sub.w	d1,d0
00008C2A B069 000C                  		cmp.w	$C(a1),d0
00008C2E 6600                       		bne.s	@frustrated
00008C30 4A42                       		tst.w	d2
00008C32 6600                       		bne.s	@frustrated
00008C34 3340 000C                  		move.w	d0,$C(a1)	
00008C38 4A38 F5D9                  		tst.b	(SonimeSST+sonime_waittimer2).w
00008C3C 6700                       		beq.s	@resetwaittimer
00008C3E 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C42 6600                       		bne.s	locret_7B62
00008C44 5338 F5D9                  		subi.b	#1,(SonimeSST+sonime_waittimer2).w
00008C48 6000                       		bra.s	@frustrated2
00008C4A                            
00008C4A                            	@frustrated:
00008C4A 11FC 0020 F5D9             		move.b	#$20,(SonimeSST+sonime_waittimer2).w
00008C50 3340 000C                  		move.w	d0,$C(a1)
00008C54 4A38 F5D8                  		tst.b	(SonimeSST+sonime_waittimer).w
00008C58 6600                       		bne.s	@subtract
00008C5A                            
00008C5A                            	@frustrated2:
00008C5A 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
00008C60 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00008C66 4E75                       		rts
00008C68                            
00008C68                            	@subtract:
00008C68 5338 F5D8                  		subi.b	#1,(SonimeSST+sonime_waittimer).w
00008C6C 4E75                       		rts
00008C6E                            
00008C6E                            	@resetwaittimer:
00008C6E 11FC 0060 F5D8             		move.b	#$60,(SonimeSST+sonime_waittimer).w
00008C74                            
00008C74                            locret_7B62:
00008C74 4E75                       		rts	
00008C76                            ; End of function MvSonicOnPtfm2
00008C76                            
00008C76                            
00008C76                            CheckIfMoving:
00008C76                            
00008C76                            
00008C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C76                            
00008C76                            
00008C76                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008C76 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008C7A 323C 0080                  		move.w	#$80,d1
00008C7E 0828 0000 0022             		btst	#0,$22(a0)
00008C84 6700                       		beq.s	loc_7B78
00008C86 4440                       		neg.w	d0
00008C88 D041                       		add.w	d1,d0
00008C8A                            
00008C8A                            loc_7B78:
00008C8A 6000                       		bra.s	Obj15_Move2
00008C8C                            ; End of function Obj15_Move
00008C8C                            
00008C8C                            
00008C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C8C                            
00008C8C                            
00008C8C                            Obj48_Move:				; XREF: Obj48_Display2
00008C8C 4A28 003D                  		tst.b	$3D(a0)
00008C90 6600                       		bne.s	loc_7B9C
00008C92 3028 003E                  		move.w	$3E(a0),d0
00008C96 5040                       		addq.w	#8,d0
00008C98 3140 003E                  		move.w	d0,$3E(a0)
00008C9C D168 0026                  		add.w	d0,$26(a0)
00008CA0 0C40 0200                  		cmpi.w	#$200,d0
00008CA4 6600                       		bne.s	loc_7BB6
00008CA6 117C 0001 003D             		move.b	#1,$3D(a0)
00008CAC 6000                       		bra.s	loc_7BB6
00008CAE                            ; ===========================================================================
00008CAE                            
00008CAE                            loc_7B9C:
00008CAE 3028 003E                  		move.w	$3E(a0),d0
00008CB2 5140                       		subq.w	#8,d0
00008CB4 3140 003E                  		move.w	d0,$3E(a0)
00008CB8 D168 0026                  		add.w	d0,$26(a0)
00008CBC 0C40 FE00                  		cmpi.w	#-$200,d0
00008CC0 6600                       		bne.s	loc_7BB6
00008CC2 117C 0000 003D             		move.b	#0,$3D(a0)
00008CC8                            
00008CC8                            loc_7BB6:
00008CC8 1028 0026                  		move.b	$26(a0),d0
00008CCC                            ; End of function Obj48_Move
00008CCC                            
00008CCC                            
00008CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CCC                            
00008CCC                            
00008CCC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008CCC 6100 9CFE                  		bsr.w	CalcSine
00008CD0 3428 0038                  		move.w	$38(a0),d2
00008CD4 3628 003A                  		move.w	$3A(a0),d3
00008CD8 45E8 0028                  		lea	$28(a0),a2
00008CDC 7C00                       		moveq	#0,d6
00008CDE 1C1A                       		move.b	(a2)+,d6
00008CE0                            
00008CE0                            loc_7BCE:
00008CE0 7800                       		moveq	#0,d4
00008CE2 181A                       		move.b	(a2)+,d4
00008CE4 ED4C                       		lsl.w	#6,d4
00008CE6 0684 00FF D000             		addi.l	#$FFD000,d4
00008CEC 2244                       		movea.l	d4,a1
00008CEE 7800                       		moveq	#0,d4
00008CF0 1829 003C                  		move.b	$3C(a1),d4
00008CF4 2A04                       		move.l	d4,d5
00008CF6 C9C0                       		muls.w	d0,d4
00008CF8 E084                       		asr.l	#8,d4
00008CFA CBC1                       		muls.w	d1,d5
00008CFC E085                       		asr.l	#8,d5
00008CFE D842                       		add.w	d2,d4
00008D00 DA43                       		add.w	d3,d5
00008D02 3344 000C                  		move.w	d4,$C(a1)
00008D06 3345 0008                  		move.w	d5,8(a1)
00008D0A 51CE FFD4                  		dbf	d6,loc_7BCE
00008D0E 4E75                       		rts	
00008D10                            ; End of function Obj15_Move2
00008D10                            
00008D10                            ; ===========================================================================
00008D10                            
00008D10                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008D10 3028 003A                  		move.w	$3A(a0),d0
00008D14 0240 FF80                  		andi.w	#$FF80,d0
00008D18 3238 F700                  		move.w	($FFFFF700).w,d1
00008D1C 0441 0080                  		subi.w	#$80,d1
00008D20 0241 FF80                  		andi.w	#$FF80,d1
00008D24 9041                       		sub.w	d1,d0
00008D26 0C40 0280                  		cmpi.w	#$280,d0
00008D2A 6300                       		bls.s	Obj15_NoDel
00008D2C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008D30 6700                       		beq.s	Obj15_DelAll		; if it's zero, don't remember object
00008D32 3440                       		movea.w	d0,a2	; load address into a2
00008D34 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008D38 6000                       		bra.s	Obj15_DelAll	; and delete object
00008D3A                            
00008D3A                            Obj15_NoDel:
00008D3A 4E75                       		rts	
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008D3C 7400                       		moveq	#0,d2
00008D3E 45E8 0028                  		lea	$28(a0),a2
00008D42 141A                       		move.b	(a2)+,d2
00008D44                            
00008D44                            Obj15_DelLoop:
00008D44 7000                       		moveq	#0,d0
00008D46 101A                       		move.b	(a2)+,d0
00008D48 ED48                       		lsl.w	#6,d0
00008D4A 0680 00FF D000             		addi.l	#$FFD000,d0
00008D50 2240                       		movea.l	d0,a1
00008D52 6100 0000                  		bsr.w	DeleteObject2
00008D56 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008D5A 4E75                       		rts	
00008D5C                            ; ===========================================================================
00008D5C                            
00008D5C                            Obj15_Delete:				; XREF: Obj15_Index
00008D5C 6100 0000                  		bsr.w	DeleteObject
00008D60 4E75                       		rts	
00008D62                            ; ===========================================================================
00008D62                            
00008D62                            Obj15_Display:				; XREF: Obj15_Index
00008D62 6000 0000                  		bra.w	DisplaySprite
00008D66                            ; ===========================================================================
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            Map_obj15:
00008D66                            	include "_maps\obj15ghz.asm"
00008D66                            ; ---------------------------------------------------------------------------
00008D66                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D66                            ; ---------------------------------------------------------------------------
00008D66 0000                       		dc.w byte_7C4E-Map_obj15
00008D68 0000                       		dc.w byte_7C59-Map_obj15
00008D6A 0000                       		dc.w byte_7C5F-Map_obj15
00008D6C 02                         byte_7C4E:	dc.b 2
00008D6D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008D72 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008D77 01                         byte_7C59:	dc.b 1
00008D78 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008D7D 01                         byte_7C5F:	dc.b 1
00008D7E F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008D84 00                         		even
00008D84 00                         		even
00008D84                            
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            ; Sprite mappings - SLZ	swinging platforms
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            Map_obj15a:
00008D84                            	include "_maps\obj15slz.asm"
00008D84                            ; ---------------------------------------------------------------------------
00008D84                            ; Sprite mappings - SLZ	swinging platforms
00008D84                            ; ---------------------------------------------------------------------------
00008D84 0000                       		dc.w byte_7C6C-Map_obj15a
00008D86 0000                       		dc.w byte_7C95-Map_obj15a
00008D88 0000                       		dc.w byte_7C9B-Map_obj15a
00008D8A 08                         byte_7C6C:	dc.b 8
00008D8B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008D90 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008D95 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008D9A F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008D9F 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008DA4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008DA9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008DAE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008DB3 01                         byte_7C95:	dc.b 1
00008DB4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008DB9 01                         byte_7C9B:	dc.b 1
00008DBA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008DC0 00                         		even
00008DC0 00                         		even
00008DC0                            
00008DC0                            ; ===========================================================================
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008DC0                            ; ---------------------------------------------------------------------------
00008DC0                            
00008DC0                            Obj17:					; XREF: Obj_Index
00008DC0 7000                       		moveq	#0,d0
00008DC2 1028 0024                  		move.b	$24(a0),d0
00008DC6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008DCA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008DCE                            ; ===========================================================================
00008DCE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008DD0 0000                       		dc.w Obj17_Action-Obj17_Index
00008DD2 0000                       		dc.w Obj17_Action-Obj17_Index
00008DD4 0000                       		dc.w Obj17_Delete-Obj17_Index
00008DD6 0000                       		dc.w Obj17_Display-Obj17_Index
00008DD8                            ; ===========================================================================
00008DD8                            
00008DD8                            Obj17_Main:				; XREF: Obj17_Index
00008DD8 5428 0024                  		addq.b	#2,$24(a0)
00008DDC 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008DE4 317C 4398 0002             		move.w	#$4398,2(a0)
00008DEA 117C 0007 0022             		move.b	#7,$22(a0)
00008DF0 117C 0004 0001             		move.b	#4,1(a0)
00008DF6 117C 0003 0018             		move.b	#3,$18(a0)
00008DFC 117C 0008 0019             		move.b	#8,$19(a0)
00008E02 3428 000C                  		move.w	$C(a0),d2
00008E06 3628 0008                  		move.w	8(a0),d3
00008E0A 1810                       		move.b	0(a0),d4
00008E0C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E10 7200                       		moveq	#0,d1
00008E12 1212                       		move.b	(a2),d1		; move a2 to d1
00008E14 14FC 0000                  		move.b	#0,(a2)+
00008E18 3001                       		move.w	d1,d0
00008E1A E248                       		lsr.w	#1,d0
00008E1C E948                       		lsl.w	#4,d0
00008E1E 9640                       		sub.w	d0,d3
00008E20 5501                       		subq.b	#2,d1
00008E22 6500                       		bcs.s	Obj17_Action
00008E24 7C00                       		moveq	#0,d6
00008E26                            
00008E26                            Obj17_MakeHelix:
00008E26 6100 0000                  		bsr.w	SingleObjLoad
00008E2A 6600                       		bne.s	Obj17_Action
00008E2C 5228 0028                  		addq.b	#1,$28(a0)
00008E30 3A09                       		move.w	a1,d5
00008E32 0445 D000                  		subi.w	#$D000,d5
00008E36 EC4D                       		lsr.w	#6,d5
00008E38 0245 007F                  		andi.w	#$7F,d5
00008E3C 14C5                       		move.b	d5,(a2)+
00008E3E 137C 0008 0024             		move.b	#8,$24(a1)
00008E44 1284                       		move.b	d4,0(a1)
00008E46 3342 000C                  		move.w	d2,$C(a1)
00008E4A 3343 0008                  		move.w	d3,8(a1)
00008E4E 2368 0004 0004             		move.l	4(a0),4(a1)
00008E54 337C 4398 0002             		move.w	#$4398,2(a1)
00008E5A 137C 0004 0001             		move.b	#4,1(a1)
00008E60 137C 0003 0018             		move.b	#3,$18(a1)
00008E66 137C 0008 0019             		move.b	#8,$19(a1)
00008E6C 1346 003E                  		move.b	d6,$3E(a1)
00008E70 5206                       		addq.b	#1,d6
00008E72 0206 0007                  		andi.b	#7,d6
00008E76 0643 0010                  		addi.w	#$10,d3
00008E7A B668 0008                  		cmp.w	8(a0),d3
00008E7E 6600                       		bne.s	loc_7D78
00008E80 1146 003E                  		move.b	d6,$3E(a0)
00008E84 5206                       		addq.b	#1,d6
00008E86 0206 0007                  		andi.b	#7,d6
00008E8A 0643 0010                  		addi.w	#$10,d3
00008E8E 5228 0028                  		addq.b	#1,$28(a0)
00008E92                            
00008E92                            loc_7D78:
00008E92 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008E96                            
00008E96                            Obj17_Action:				; XREF: Obj17_Index
00008E96 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008E9A 6100 0000                  		bsr.w	DisplaySprite
00008E9E 6000 0000                  		bra.w	Obj17_ChkDel
00008EA2                            
00008EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA2                            
00008EA2                            
00008EA2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008EA2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008EA6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008EAC D028 003E                  		add.b	$3E(a0),d0
00008EB0 0200 0007                  		andi.b	#7,d0
00008EB4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008EB8 6600                       		bne.s	locret_7DA6
00008EBA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008EC0                            
00008EC0                            locret_7DA6:
00008EC0 4E75                       		rts	
00008EC2                            ; End of function Obj17_RotateSpikes
00008EC2                            
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            Obj17_ChkDel:				; XREF: Obj17_Action
00008EC2 3028 0008                  		move.w	8(a0),d0
00008EC6 0240 FF80                  		andi.w	#$FF80,d0
00008ECA 3238 F700                  		move.w	($FFFFF700).w,d1
00008ECE 0441 0080                  		subi.w	#$80,d1
00008ED2 0241 FF80                  		andi.w	#$FF80,d1
00008ED6 9041                       		sub.w	d1,d0
00008ED8 0C40 0280                  		cmpi.w	#$280,d0
00008EDC 6300                       		bls.s	Obj17_NoDel
00008EDE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00008EE2 6700                       		beq.s	Obj17_DelAll		; if it's zero, don't remember object
00008EE4 3440                       		movea.w	d0,a2	; load address into a2
00008EE6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00008EEA 6000                       		bra.s	Obj17_DelAll	; and delete object
00008EEC                            
00008EEC                            Obj17_NoDel:
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008EEE 7400                       		moveq	#0,d2
00008EF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008EF4 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008EF6 5502                       		subq.b	#2,d2
00008EF8 6500                       		bcs.s	Obj17_Delete
00008EFA                            
00008EFA                            Obj17_DelLoop:
00008EFA 7000                       		moveq	#0,d0
00008EFC 101A                       		move.b	(a2)+,d0
00008EFE ED48                       		lsl.w	#6,d0
00008F00 0680 00FF D000             		addi.l	#$FFD000,d0
00008F06 2240                       		movea.l	d0,a1
00008F08 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008F0C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008F10                            
00008F10                            Obj17_Delete:				; XREF: Obj17_Index
00008F10 6100 0000                  		bsr.w	DeleteObject
00008F14 4E75                       		rts	
00008F16                            ; ===========================================================================
00008F16                            
00008F16                            Obj17_Display:				; XREF: Obj17_Index
00008F16 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
00008F1A 6000 0000                  		bra.w	DisplaySprite
00008F1E                            ; ===========================================================================
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            Map_obj17:
00008F1E                            	include "_maps\obj17.asm"
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008F1E                            ; ---------------------------------------------------------------------------
00008F1E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008F22 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008F26 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008F2A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008F2E 01                         byte_7E08:	dc.b 1
00008F2F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008F34 01                         byte_7E0E:	dc.b 1
00008F35 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008F3A 01                         byte_7E14:	dc.b 1
00008F3B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008F40 01                         byte_7E1A:	dc.b 1
00008F41 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008F46 01                         byte_7E20:	dc.b 1
00008F47 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008F4C 01                         byte_7E26:	dc.b 1
00008F4D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008F52 01                         byte_7E2C:	dc.b 1
00008F53 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008F58                            		even
00008F58                            		even
00008F58                            
00008F58                            ; ===========================================================================
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008F58                            ; ---------------------------------------------------------------------------
00008F58                            
00008F58                            Obj18:					; XREF: Obj_Index
00008F58 7000                       		moveq	#0,d0
00008F5A 1028 0024                  		move.b	$24(a0),d0
00008F5E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008F62 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008F66                            ; ===========================================================================
00008F66 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008F68 0000                       		dc.w Obj18_Solid-Obj18_Index
00008F6A 0000                       		dc.w Obj18_Action2-Obj18_Index
00008F6C 0000                       		dc.w Obj18_Delete-Obj18_Index
00008F6E 0000                       		dc.w Obj18_Action-Obj18_Index
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            Obj18_Main:				; XREF: Obj18_Index
00008F70 5428 0024                  		addq.b	#2,$24(a0)
00008F74 317C 4000 0002             		move.w	#$4000,2(a0)
00008F7A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008F82 117C 0020 0019             		move.b	#$20,$19(a0)
00008F88 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008F8E 6600                       		bne.s	Obj18_NotSYZ
00008F90 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008F98 117C 0020 0019             		move.b	#$20,$19(a0)
00008F9E                            
00008F9E                            Obj18_NotSYZ:
00008F9E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008FA4 6600                       		bne.s	Obj18_NotSLZ
00008FA6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008FAE 117C 0020 0019             		move.b	#$20,$19(a0)
00008FB4 317C 4000 0002             		move.w	#$4000,2(a0)
00008FBA 117C 0003 0028             		move.b	#3,$28(a0)
00008FC0                            
00008FC0                            Obj18_NotSLZ:
00008FC0 117C 0004 0001             		move.b	#4,1(a0)
00008FC6 117C 0004 0018             		move.b	#4,$18(a0)
00008FCC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008FD2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008FD8 3168 0008 0032             		move.w	8(a0),$32(a0)
00008FDE 317C 0080 0026             		move.w	#$80,$26(a0)
00008FE4 7200                       		moveq	#0,d1
00008FE6 1028 0028                  		move.b	$28(a0),d0
00008FEA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008FEE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008FF0 5201                       		addq.b	#1,d1		; use frame #1
00008FF2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008FF8                            
00008FF8                            Obj18_SetFrame:
00008FF8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008FFC                            
00008FFC                            Obj18_Solid:				; XREF: Obj18_Index
00008FFC 4A28 0038                  		tst.b	$38(a0)
00009000 6700                       		beq.s	loc_7EE0
00009002 5928 0038                  		subq.b	#4,$38(a0)
00009006                            
00009006                            loc_7EE0:
00009006 7200                       		moveq	#0,d1
00009008 1228 0019                  		move.b	$19(a0),d1
0000900C 6100 F502                  		bsr.w	PlatformObject
00009010                            
00009010                            Obj18_Action:				; XREF: Obj18_Index
00009010 6100 0000                  		bsr.w	Obj18_Move
00009014 6100 0000                  		bsr.w	Obj18_Nudge
00009018 6100 0000                  		bsr.w	DisplaySprite
0000901C 6000 0000                  		bra.w	Obj18_ChkDel
00009020                            ; ===========================================================================
00009020                            
00009020                            Obj18_Action2:				; XREF: Obj18_Index
00009020 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009026 6700                       		beq.s	loc_7F06
00009028 5828 0038                  		addq.b	#4,$38(a0)
0000902C                            
0000902C                            loc_7F06:
0000902C 7200                       		moveq	#0,d1
0000902E 1228 0019                  		move.b	$19(a0),d1
00009032 6100 F650                  		bsr.w	ExitPlatform
00009036 3F28 0008                  		move.w	8(a0),-(sp)
0000903A 6100 0000                  		bsr.w	Obj18_Move
0000903E 6100 0000                  		bsr.w	Obj18_Nudge
00009042 341F                       		move.w	(sp)+,d2
00009044 6100 FBB4                  		bsr.w	MvSonicOnPtfm2
00009048 6100 0000                  		bsr.w	DisplaySprite
0000904C 6000 0000                  		bra.w	Obj18_ChkDel
00009050                            
00009050 4E75                       		rts
00009052                            
00009052                            ; ---------------------------------------------------------------------------
00009052                            ; Subroutine to	move platform slightly when you	stand on it
00009052                            ; ---------------------------------------------------------------------------
00009052                            
00009052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009052                            
00009052                            
00009052                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00009052 1028 0038                  		move.b	$38(a0),d0
00009056 6100 9974                  		bsr.w	CalcSine
0000905A 323C 0400                  		move.w	#$400,d1
0000905E C1C1                       		muls.w	d1,d0
00009060 4840                       		swap	d0
00009062 D068 002C                  		add.w	$2C(a0),d0
00009066 3140 000C                  		move.w	d0,$C(a0)
0000906A 4E75                       		rts	
0000906C                            ; End of function Obj18_Nudge
0000906C                            
0000906C                            ; ---------------------------------------------------------------------------
0000906C                            ; Subroutine to	move platforms
0000906C                            ; ---------------------------------------------------------------------------
0000906C                            
0000906C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000906C                            
0000906C                            
0000906C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000906C 7000                       		moveq	#0,d0
0000906E 1028 0028                  		move.b	$28(a0),d0
00009072 0240 000F                  		andi.w	#$F,d0
00009076 D040                       		add.w	d0,d0
00009078 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000907C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009080                            ; End of function Obj18_Move
00009080                            
00009080                            ; ===========================================================================
00009080 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00009084 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00009088 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000908C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009090 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00009094 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00009098 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000909A                            ; ===========================================================================
0000909A                            
0000909A                            Obj18_Type00:
0000909A 4E75                       		rts			; platform 00 doesn't move
0000909C                            ; ===========================================================================
0000909C                            
0000909C                            Obj18_Type05:
0000909C 3028 0032                  		move.w	$32(a0),d0
000090A0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090A4 4401                       		neg.b	d1		; reverse platform-motion
000090A6 0601 0040                  		addi.b	#$40,d1
000090AA 6000                       		bra.s	Obj18_01_Move
000090AC                            ; ===========================================================================
000090AC                            
000090AC                            Obj18_Type01:
000090AC 3028 0032                  		move.w	$32(a0),d0
000090B0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090B4 0401 0040                  		subi.b	#$40,d1
000090B8                            
000090B8                            Obj18_01_Move:
000090B8 4881                       		ext.w	d1
000090BA D041                       		add.w	d1,d0
000090BC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000090C0 6000 0000                  		bra.w	Obj18_ChgMotion
000090C4                            ; ===========================================================================
000090C4                            
000090C4                            Obj18_Type0C:
000090C4 3028 0034                  		move.w	$34(a0),d0
000090C8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090CC 4401                       		neg.b	d1		; reverse platform-motion
000090CE 0601 0030                  		addi.b	#$30,d1
000090D2 6000                       		bra.s	Obj18_02_Move
000090D4                            ; ===========================================================================
000090D4                            
000090D4                            Obj18_Type0B:
000090D4 3028 0034                  		move.w	$34(a0),d0
000090D8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000090DC 0401 0030                  		subi.b	#$30,d1
000090E0 6000                       		bra.s	Obj18_02_Move
000090E2                            ; ===========================================================================
000090E2                            
000090E2                            Obj18_Type06:
000090E2 3028 0034                  		move.w	$34(a0),d0
000090E6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090EA 4401                       		neg.b	d1		; reverse platform-motion
000090EC 0601 0040                  		addi.b	#$40,d1
000090F0 6000                       		bra.s	Obj18_02_Move
000090F2                            ; ===========================================================================
000090F2                            
000090F2                            Obj18_Type02:
000090F2 3028 0034                  		move.w	$34(a0),d0
000090F6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000090FA 0401 0040                  		subi.b	#$40,d1
000090FE                            
000090FE                            Obj18_02_Move:
000090FE 4881                       		ext.w	d1
00009100 D041                       		add.w	d1,d0
00009102 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009106 6000 0000                  		bra.w	Obj18_ChgMotion
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj18_Type03:
0000910A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000910E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00009110 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00009116 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00009118 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000911E                            
0000911E                            Obj18_03_NoMove:
0000911E 4E75                       		rts	
00009120                            ; ===========================================================================
00009120                            
00009120                            Obj18_03_Wait:
00009120 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009124 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00009126 317C 0020 003A             		move.w	#32,$3A(a0)
0000912C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            
00009132                            Obj18_Type04:
00009132 4A68 003A                  		tst.w	$3A(a0)
00009136 6700                       		beq.s	loc_8048
00009138 5368 003A                  		subq.w	#1,$3A(a0)
0000913C 6600                       		bne.s	loc_8048
0000913E 0828 0003 0022             		btst	#3,$22(a0)
00009144 6700                       		beq.s	loc_8042
00009146 08E9 0001 0022             		bset	#1,$22(a1)
0000914C 08A9 0003 0022             		bclr	#3,$22(a1)
00009152 137C 0002 0024             		move.b	#2,$24(a1)
00009158 08A8 0003 0022             		bclr	#3,$22(a0)
0000915E 4228 0025                  		clr.b	$25(a0)
00009162 3368 0012 0012             		move.w	$12(a0),$12(a1)
00009168                            
00009168                            loc_8042:
00009168 117C 0008 0024             		move.b	#8,$24(a0)
0000916E                            
0000916E                            loc_8048:
0000916E 2628 002C                  		move.l	$2C(a0),d3
00009172 3028 0012                  		move.w	$12(a0),d0
00009176 48C0                       		ext.l	d0
00009178 E180                       		asl.l	#8,d0
0000917A D680                       		add.l	d0,d3
0000917C 2143 002C                  		move.l	d3,$2C(a0)
00009180 0668 0038 0012             		addi.w	#$38,$12(a0)
00009186 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000918A 0640 00E0                  		addi.w	#$E0,d0
0000918E B068 002C                  		cmp.w	$2C(a0),d0
00009192 6400                       		bcc.s	locret_8074
00009194 117C 0006 0024             		move.b	#6,$24(a0)
0000919A                            
0000919A                            locret_8074:
0000919A 4E75                       		rts	
0000919C                            ; ===========================================================================
0000919C                            
0000919C                            Obj18_Type07:
0000919C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000091A0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000091A2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000091A6 7000                       		moveq	#0,d0
000091A8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000091AC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000091AE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000091B2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000091B4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000091BA                            
000091BA                            Obj18_07_NoMove:
000091BA 4E75                       		rts	
000091BC                            ; ===========================================================================
000091BC                            
000091BC                            Obj18_07_Wait:
000091BC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000091C0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000091C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000091C6 4E75                       		rts	
000091C8                            ; ===========================================================================
000091C8                            
000091C8                            Obj18_Type08:
000091C8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000091CC 3028 0034                  		move.w	$34(a0),d0
000091D0 0440 0200                  		subi.w	#$200,d0
000091D4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000091D8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000091DA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000091DE                            
000091DE                            Obj18_08_NoStop:
000091DE 4E75                       		rts	
000091E0                            ; ===========================================================================
000091E0                            
000091E0                            Obj18_Type0A:
000091E0 3028 0034                  		move.w	$34(a0),d0
000091E4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000091E8 0401 0040                  		subi.b	#$40,d1
000091EC 4881                       		ext.w	d1
000091EE E241                       		asr.w	#1,d1
000091F0 D041                       		add.w	d1,d0
000091F2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000091F6                            
000091F6                            Obj18_ChgMotion:
000091F6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000091FC 4E75                       		rts	
000091FE                            ; ===========================================================================
000091FE                            
000091FE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000091FE 3028 0032                  		move.w	$32(a0),d0
00009202 0240 FF80                  		andi.w	#$FF80,d0
00009206 3238 F700                  		move.w	($FFFFF700).w,d1
0000920A 0441 0080                  		subi.w	#$80,d1
0000920E 0241 FF80                  		andi.w	#$FF80,d1
00009212 9041                       		sub.w	d1,d0
00009214 0C40 0280                  		cmpi.w	#$280,d0
00009218 6300                       		bls.s	Obj18_NoDel
0000921A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000921E 6700                       		beq.s	Obj18_Delete		; if it's zero, don't remember object
00009220 3440                       		movea.w	d0,a2	; load address into a2
00009222 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009226 6000                       		bra.s	Obj18_Delete	; and delete object
00009228                            
00009228                            Obj18_NoDel:
00009228 4E75                       		rts	
0000922A                            ; ===========================================================================
0000922A                            
0000922A                            Obj18_Delete:				; XREF: Obj18_Index
0000922A 6000 0000                  		bra.w	DeleteObject
0000922E                            ; ===========================================================================
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - unused
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            Map_obj18x:
0000922E                            	include "_maps\obj18x.asm"
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Sprite mappings - unused
0000922E                            ; ---------------------------------------------------------------------------
0000922E 0000                       		dc.w byte_80FE-Map_obj18x
00009230 0000                       		dc.w byte_8109-Map_obj18x
00009232 02                         byte_80FE:	dc.b 2
00009233 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009238 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000923D 0A                         byte_8109:	dc.b $A
0000923E F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009243 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009248 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000924D 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009252 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009257 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000925C 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009261 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009266 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000926B 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009270                            		even
00009270                            		even
00009270                            
00009270                            ; ---------------------------------------------------------------------------
00009270                            ; Sprite mappings - GHZ	platforms
00009270                            ; ---------------------------------------------------------------------------
00009270                            Map_obj18:
00009270                            	include "_maps\obj18ghz.asm"
00009270                            ; ---------------------------------------------------------------------------
00009270                            ; Sprite mappings - GHZ	platforms
00009270                            ; ---------------------------------------------------------------------------
00009270 0000                       		dc.w byte_8140-Map_obj18
00009272 0000                       		dc.w byte_8155-Map_obj18
00009274 04                         byte_8140:	dc.b 4
00009275 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000927A F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000927F F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009284 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009289 0A                         byte_8155:	dc.b $A
0000928A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000928F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009294 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009299 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000929E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000092A3 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000092A8 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000092AD 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000092B2 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000092B7 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000092BC                            		even
000092BC                            		even
000092BC                            
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            ; Sprite mappings - SYZ	platforms
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            Map_obj18a:
000092BC                            	include "_maps\obj18syz.asm"
000092BC                            ; ---------------------------------------------------------------------------
000092BC                            ; Sprite mappings - SYZ	platforms
000092BC                            ; ---------------------------------------------------------------------------
000092BC 0000                       		dc.w byte_818A-Map_obj18a
000092BE 03                         byte_818A:	dc.b 3
000092BF F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000092C4 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000092C9 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000092CE                            		even
000092CE                            		even
000092CE                            
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	platforms
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            Map_obj18b:
000092CE                            	include "_maps\obj18slz.asm"
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	platforms
000092CE                            ; ---------------------------------------------------------------------------
000092CE 0000                       		dc.w byte_819C-Map_obj18b
000092D0 02                         byte_819C:	dc.b 2
000092D1 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000092D6 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000092DC 00                         		even
000092DC 00                         		even
000092DC                            
000092DC                            ; ===========================================================================
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Object 19 - blank
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            
000092DC                            Obj19:					; XREF: Obj_Index
000092DC 4E75                       		rts	
000092DE                            ; ===========================================================================
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            Map_obj48:
000092DE                            	include "_maps\obj48.asm"
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000092DE                            ; ---------------------------------------------------------------------------
000092DE 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000092E2 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000092E6 06                         byte_81B2:	dc.b 6
000092E7 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000092EC F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000092F1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000092F6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000092FB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009300 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009305 04                         byte_81D1:	dc.b 4
00009306 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000930B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009310 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009315 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000931A 04                         byte_81E6:	dc.b 4
0000931B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009320 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009325 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000932A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000932F 04                         byte_81FB:	dc.b 4
00009330 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009335 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000933A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000933F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009344                            		even
00009344                            		even
00009344                            
00009344                            ; ===========================================================================
00009344                            ; ---------------------------------------------------------------------------
00009344                            ; Object 1A - GHZ collapsing ledge
00009344                            ; ---------------------------------------------------------------------------
00009344                            
00009344                            Obj1A:					; XREF: Obj_Index
00009344 7000                       		moveq	#0,d0
00009346 1028 0024                  		move.b	$24(a0),d0
0000934A 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000934E 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00009352                            ; ===========================================================================
00009352 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00009356 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000935A 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000935E                            ; ===========================================================================
0000935E                            
0000935E                            Obj1A_Main:				; XREF: Obj1A_Index
0000935E 5428 0024                  		addq.b	#2,$24(a0)
00009362 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000936A 317C 4000 0002             		move.w	#$4000,2(a0)
00009370 0028 0004 0001             		ori.b	#4,1(a0)
00009376 117C 0004 0018             		move.b	#4,$18(a0)
0000937C 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00009382 117C 0064 0019             		move.b	#$64,$19(a0)
00009388 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000938E 117C 0038 0016             		move.b	#$38,$16(a0)
00009394 08E8 0004 0001             		bset	#4,1(a0)
0000939A                            
0000939A                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000939A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000939E 6700                       		beq.s	Obj1A_Slope	; if not, branch
000093A0 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000093A4 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000093A8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093AC                            
000093AC                            Obj1A_Slope:
000093AC 323C 0030                  		move.w	#$30,d1
000093B0 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093B6 6100 F22C                  		bsr.w	SlopeObject
000093BA 6000 0000                  		bra.w	MarkObjGone
000093BE                            ; ===========================================================================
000093BE                            
000093BE                            Obj1A_Touch:				; XREF: Obj1A_Index
000093BE 4A28 0038                  		tst.b	$38(a0)
000093C2 6700 0000                  		beq.w	loc_847A
000093C6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000093CC 5328 0038                  		subq.b	#1,$38(a0)
000093D0                            
000093D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093D0                            
000093D0                            
000093D0                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000093D0 323C 0030                  		move.w	#$30,d1
000093D4 6100 F2AE                  		bsr.w	ExitPlatform
000093D8 323C 0030                  		move.w	#$30,d1
000093DC 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000093E2 3428 0008                  		move.w	8(a0),d2
000093E6 6100 0000                  		bsr.w	SlopeObject2
000093EA 6000 0000                  		bra.w	MarkObjGone
000093EE                            ; End of function Obj1A_WalkOff
000093EE                            
000093EE                            ; ===========================================================================
000093EE                            
000093EE                            Obj1A_Display:				; XREF: Obj1A_Index
000093EE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000093F2 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000093F4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000093F8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000093FC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009400 6000 0000                  		bra.w	DisplaySprite
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_82D0:				; XREF: Obj1A_Display
00009404 5328 0038                  		subq.b	#1,$38(a0)
00009408 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000940C 43F8 D000                  		lea	($FFFFD000).w,a1
00009410 0829 0003 0022             		btst	#3,$22(a1)
00009416 6700                       		beq.s	loc_82FC
00009418 4A28 0038                  		tst.b	$38(a0)
0000941C 6600                       		bne.s	locret_8308
0000941E 08A9 0003 0022             		bclr	#3,$22(a1)
00009424 08A9 0005 0022             		bclr	#5,$22(a1)
0000942A 137C 0001 001D             		move.b	#1,$1D(a1)
00009430                            
00009430                            loc_82FC:
00009430 117C 0000 003A             		move.b	#0,$3A(a0)
00009436 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000943C                            
0000943C                            locret_8308:
0000943C 4E75                       		rts	
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000943E 6100 0000                  		bsr.w	ObjectFall
00009442 6100 0000                  		bsr.w	DisplaySprite
00009446 4A28 0001                  		tst.b	1(a0)
0000944A 6A00                       		bpl.s	Obj1A_Delete
0000944C 4E75                       		rts	
0000944E                            ; ===========================================================================
0000944E                            
0000944E                            Obj1A_Delete:				; XREF: Obj1A_Index
0000944E 6100 0000                  		bsr.w	DeleteObject
00009452 4E75                       		rts	
00009454                            ; ===========================================================================
00009454                            ; ---------------------------------------------------------------------------
00009454                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009454                            ; ---------------------------------------------------------------------------
00009454                            
00009454                            Obj53:					; XREF: Obj_Index
00009454 7000                       		moveq	#0,d0
00009456 1028 0024                  		move.b	$24(a0),d0
0000945A 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000945E 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00009462                            ; ===========================================================================
00009462 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00009466 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000946A 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000946E                            ; ===========================================================================
0000946E                            
0000946E                            Obj53_Main:				; XREF: Obj53_Index
0000946E 5428 0024                  		addq.b	#2,$24(a0)
00009472 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000947A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009480 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00009486 6600                       		bne.s	Obj53_NotSLZ
00009488 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000948E 5428 001A                  		addq.b	#2,$1A(a0)
00009492                            
00009492                            Obj53_NotSLZ:
00009492 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009498 6600                       		bne.s	Obj53_NotSBZ
0000949A 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000094A0                            
000094A0                            Obj53_NotSBZ:
000094A0 0028 0004 0001             		ori.b	#4,1(a0)
000094A6 117C 0004 0018             		move.b	#4,$18(a0)
000094AC 117C 0007 0038             		move.b	#7,$38(a0)
000094B2 117C 0044 0019             		move.b	#$44,$19(a0)
000094B8                            
000094B8                            Obj53_ChkTouch:				; XREF: Obj53_Index
000094B8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000094BC 6700                       		beq.s	Obj53_Solid	; if not, branch
000094BE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000094C2 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000094C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000094CA                            
000094CA                            Obj53_Solid:
000094CA 323C 0020                  		move.w	#$20,d1
000094CE 6100 F040                  		bsr.w	PlatformObject
000094D2 4A28 0028                  		tst.b	$28(a0)
000094D6 6A00                       		bpl.s	Obj53_MarkAsGone
000094D8 0829 0003 0022             		btst	#3,$22(a1)
000094DE 6700                       		beq.s	Obj53_MarkAsGone
000094E0 08A8 0000 0001             		bclr	#0,1(a0)
000094E6 3029 0008                  		move.w	8(a1),d0
000094EA 9068 0008                  		sub.w	8(a0),d0
000094EE 6400                       		bcc.s	Obj53_MarkAsGone
000094F0 08E8 0000 0001             		bset	#0,1(a0)
000094F6                            
000094F6                            Obj53_MarkAsGone:
000094F6 6000 0000                  		bra.w	MarkObjGone
000094FA                            ; ===========================================================================
000094FA                            
000094FA                            Obj53_Touch:				; XREF: Obj53_Index
000094FA 4A28 0038                  		tst.b	$38(a0)
000094FE 6700 0000                  		beq.w	loc_8458
00009502 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009508 5328 0038                  		subq.b	#1,$38(a0)
0000950C                            
0000950C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000950C                            
0000950C                            
0000950C                            Obj53_WalkOff:				; XREF: Obj53_Index
0000950C 323C 0020                  		move.w	#$20,d1
00009510 6100 F172                  		bsr.w	ExitPlatform
00009514 3428 0008                  		move.w	8(a0),d2
00009518 6100 F6E0                  		bsr.w	MvSonicOnPtfm2
0000951C 6000 0000                  		bra.w	MarkObjGone
00009520                            ; End of function Obj53_WalkOff
00009520                            
00009520                            ; ===========================================================================
00009520                            
00009520                            Obj53_Display:				; XREF: Obj53_Index
00009520 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009524 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00009526 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000952A 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000952E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009532 6000 0000                  		bra.w	DisplaySprite
00009536                            ; ===========================================================================
00009536                            
00009536                            loc_8402:
00009536 5328 0038                  		subq.b	#1,$38(a0)
0000953A 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000953E 43F8 D000                  		lea	($FFFFD000).w,a1
00009542 0829 0003 0022             		btst	#3,$22(a1)
00009548 6700                       		beq.s	loc_842E
0000954A 4A28 0038                  		tst.b	$38(a0)
0000954E 6600                       		bne.s	locret_843A
00009550 08A9 0003 0022             		bclr	#3,$22(a1)
00009556 08A9 0005 0022             		bclr	#5,$22(a1)
0000955C 137C 0001 001D             		move.b	#1,$1D(a1)
00009562                            
00009562                            loc_842E:
00009562 117C 0000 003A             		move.b	#0,$3A(a0)
00009568 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000956E                            
0000956E                            locret_843A:
0000956E 4E75                       		rts	
00009570                            ; ===========================================================================
00009570                            
00009570                            Obj53_TimeZero:				; XREF: Obj53_Display
00009570 6100 0000                  		bsr.w	ObjectFall
00009574 6100 0000                  		bsr.w	DisplaySprite
00009578 4A28 0001                  		tst.b	1(a0)
0000957C 6A00                       		bpl.s	Obj53_Delete
0000957E 4E75                       		rts	
00009580                            ; ===========================================================================
00009580                            
00009580                            Obj53_Delete:				; XREF: Obj53_Index
00009580 6100 0000                  		bsr.w	DeleteObject
00009584 4E75                       		rts	
00009586                            ; ===========================================================================
00009586                            
00009586                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00009586 117C 0000 003A             		move.b	#0,$3A(a0)
0000958C                            
0000958C                            loc_8458:				; XREF: Obj53_Touch
0000958C 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009592 0828 0000 0028             		btst	#0,$28(a0)
00009598 6700                       		beq.s	loc_846C
0000959A 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000095A0                            
000095A0                            loc_846C:
000095A0 7207                       		moveq	#7,d1
000095A2 5228 001A                  		addq.b	#1,$1A(a0)
000095A6 6000                       		bra.s	loc_8486
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000095A8 117C 0000 003A             		move.b	#0,$3A(a0)
000095AE                            
000095AE                            loc_847A:				; XREF: Obj1A_Touch
000095AE 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000095B4 7218                       		moveq	#$18,d1
000095B6 5428 001A                  		addq.b	#2,$1A(a0)
000095BA                            
000095BA                            loc_8486:				; XREF: Obj53_Collapse
000095BA 7000                       		moveq	#0,d0
000095BC 1028 001A                  		move.b	$1A(a0),d0
000095C0 D040                       		add.w	d0,d0
000095C2 2668 0004                  		movea.l	4(a0),a3
000095C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
000095CA 524B                       		addq.w	#1,a3
000095CC 08E8 0005 0001             		bset	#5,1(a0)
000095D2 1810                       		move.b	0(a0),d4
000095D4 1A28 0001                  		move.b	1(a0),d5
000095D8 2248                       		movea.l	a0,a1
000095DA 6000                       		bra.s	loc_84B2
000095DC                            ; ===========================================================================
000095DC                            
000095DC                            loc_84AA:
000095DC 6100 0000                  		bsr.w	SingleObjLoad
000095E0 6600                       		bne.s	loc_84F2
000095E2 5A4B                       		addq.w	#5,a3
000095E4                            
000095E4                            loc_84B2:
000095E4 137C 0006 0024             		move.b	#6,$24(a1)
000095EA 1284                       		move.b	d4,0(a1)
000095EC 234B 0004                  		move.l	a3,4(a1)
000095F0 1345 0001                  		move.b	d5,1(a1)
000095F4 3368 0008 0008             		move.w	8(a0),8(a1)
000095FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009600 3368 0002 0002             		move.w	2(a0),2(a1)
00009606 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000960C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009612 135C 0038                  		move.b	(a4)+,$38(a1)
00009616 B3C8                       		cmpa.l	a0,a1
00009618 6400                       		bcc.s	loc_84EE
0000961A 6100 0000                  		bsr.w	DisplaySprite2
0000961E                            
0000961E                            loc_84EE:
0000961E 51C9 FFBC                  		dbf	d1,loc_84AA
00009622                            
00009622                            loc_84F2:
00009622 6100 0000                  		bsr.w	DisplaySprite
00009626 303C 00B9                  		move.w	#$B9,d0
0000962A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009630                            ; ===========================================================================
00009630                            ; ---------------------------------------------------------------------------
00009630                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009630                            ; ---------------------------------------------------------------------------
00009630 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009640 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000964A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009652 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000965A                            
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            
0000965A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000965A                            
0000965A                            
0000965A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000965A 43F8 D000                  		lea	($FFFFD000).w,a1
0000965E 0829 0003 0022             		btst	#3,$22(a1)
00009664 6700                       		beq.s	locret_856E
00009666 3029 0008                  		move.w	8(a1),d0
0000966A 9068 0008                  		sub.w	8(a0),d0
0000966E D041                       		add.w	d1,d0
00009670 E248                       		lsr.w	#1,d0
00009672 0828 0000 0001             		btst	#0,1(a0)
00009678 6700                       		beq.s	loc_854E
0000967A 4640                       		not.w	d0
0000967C D041                       		add.w	d1,d0
0000967E                            
0000967E                            loc_854E:
0000967E 7200                       		moveq	#0,d1
00009680 1232 0000                  		move.b	(a2,d0.w),d1
00009684 3028 000C                  		move.w	$C(a0),d0
00009688 9041                       		sub.w	d1,d0
0000968A 7200                       		moveq	#0,d1
0000968C 1229 0016                  		move.b	$16(a1),d1
00009690 9041                       		sub.w	d1,d0
00009692 3340 000C                  		move.w	d0,$C(a1)
00009696 9468 0008                  		sub.w	8(a0),d2
0000969A 9569 0008                  		sub.w	d2,8(a1)
0000969E                            
0000969E                            locret_856E:
0000969E 4E75                       		rts	
000096A0                            ; End of function SlopeObject2
000096A0                            
000096A0                            ; ===========================================================================
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            ; Collision data for GHZ collapsing ledge
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            Obj1A_SlopeData:
000096A0                            		incbin	misc\ghzledge.bin
000096D0                            		even
000096D0                            
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            ; Sprite mappings - GHZ	collapsing ledge
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            Map_obj1A:
000096D0                            	include "_maps\obj1A.asm"
000096D0                            ; ---------------------------------------------------------------------------
000096D0                            ; Sprite mappings - GHZ	collapsing ledge
000096D0                            ; ---------------------------------------------------------------------------
000096D0 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000096D4 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000096D8 10                         byte_85A8:	dc.b $10
000096D9 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000096DE D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000096E3 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000096E8 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000096ED D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000096F2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000096F7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000096FC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009701 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009706 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000970B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009710 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009715 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000971A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000971F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009724 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009729 10                         byte_85F9:	dc.b $10
0000972A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000972F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009734 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009739 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000973E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009743 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009748 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000974D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009752 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009757 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000975C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009761 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009766 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000976B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009770 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009775 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000977A 19                         byte_864A:	dc.b $19
0000977B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009780 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009785 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000978A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000978F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009794 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009799 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000979E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097A3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000097A8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000097AD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000097B2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000097B7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000097BC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000097C1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097C6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000097CB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000097D0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000097D5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097DA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000097DF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000097E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000097E9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000097EE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000097F3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000097F8 19                         byte_86C8:	dc.b $19
000097F9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000097FE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009803 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009808 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000980D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009812 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009817 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000981C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009821 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009826 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000982B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009830 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009835 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000983A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000983F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009844 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009849 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000984E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009853 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009858 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000985D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009862 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009867 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000986C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009871 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009876                            		even
00009876                            		even
00009876                            
00009876                            ; ---------------------------------------------------------------------------
00009876                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009876                            ; ---------------------------------------------------------------------------
00009876                            Map_obj53:
00009876                            	include "_maps\obj53.asm"
00009876                            ; ---------------------------------------------------------------------------
00009876                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009876                            ; ---------------------------------------------------------------------------
00009876 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000987A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000987E 04                         byte_874E:	dc.b 4
0000987F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009884 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009889 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000988E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009893 08                         byte_8763:	dc.b 8
00009894 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009899 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000989E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098A3 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000098A8 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000098AD 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000098B2 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000098B7 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000098BC 04                         byte_878C:	dc.b 4
000098BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000098C2 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000098C7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000098CC 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000098D1 08                         byte_87A1:	dc.b 8
000098D2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000098D7 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000098DC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000098E1 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000098E6 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000098EB 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000098F0 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000098F5 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000098FA                            		even
000098FA                            		even
000098FA                            
000098FA                            ; ===========================================================================
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            
000098FA                            Obj1C:					; XREF: Obj_Index
000098FA 7000                       		moveq	#0,d0
000098FC 1028 0024                  		move.b	$24(a0),d0
00009900 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009904 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009908                            ; ===========================================================================
00009908 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000990A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000990C                            ; ===========================================================================
0000990C                            
0000990C                            Obj1C_Main:				; XREF: Obj1C_Index
0000990C 5428 0024                  		addq.b	#2,$24(a0)
00009910 7000                       		moveq	#0,d0
00009912 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009916 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000991A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000991E 2159 0004                  		move.l	(a1)+,4(a0)
00009922 3159 0002                  		move.w	(a1)+,2(a0)
00009926 0028 0004 0001             		ori.b	#4,1(a0)
0000992C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009930 1159 0019                  		move.b	(a1)+,$19(a0)
00009934 1159 0018                  		move.b	(a1)+,$18(a0)
00009938 1159 0020                  		move.b	(a1)+,$20(a0)
0000993C                            
0000993C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000993C 3028 0008                  		move.w	8(a0),d0
00009940 0240 FF80                  		andi.w	#$FF80,d0
00009944 3238 F700                  		move.w	($FFFFF700).w,d1
00009948 0441 0080                  		subi.w	#$80,d1
0000994C 0241 FF80                  		andi.w	#$FF80,d1
00009950 9041                       		sub.w	d1,d0
00009952 0C40 0280                  		cmpi.w	#$280,d0
00009956 6300 0000                  		bls.w	DisplaySprite
0000995A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000995E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009962 3440                       		movea.w	d0,a2	; load address into a2
00009964 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009968 6000 0000                  		bra.w	DeleteObject	; and delete object
0000996C                            ; ===========================================================================
0000996C                            ; ---------------------------------------------------------------------------
0000996C                            ; Variables for	object $1C are stored in an array
0000996C                            ; ---------------------------------------------------------------------------
0000996C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00009970 44D8                       		dc.w $44D8		; VRAM setting
00009972 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009976 0000 0000                  		dc.l Map_obj1C
0000997A 44D8                       		dc.w $44D8
0000997C 0008 0200                  		dc.b 0,	8, 2, 0
00009980 0000 0000                  		dc.l Map_obj1C
00009984 44D8                       		dc.w $44D8
00009986 0008 0200                  		dc.b 0,	8, 2, 0
0000998A 0000 8A04                  		dc.l Map_obj11
0000998E 438E                       		dc.w $438E
00009990 0110 0100                  		dc.b 1,	$10, 1,	0
00009994 0000 0000                  		dc.l Map_obj1C
00009998 4000                       		dc.w $4000
0000999A 0110 0000                  		dc.b 1,	$10, 0, 0
0000999E 0000 0000                  		dc.l Map_obj1C
000099A2 4000                       		dc.w $4000
000099A4 0210 0000                  		dc.b 2,	$10, 0, 0
000099A8 0000 0000                  		dc.l Map_obj1C
000099AC 4000                       		dc.w $4000
000099AE 0310 0000                  		dc.b 3,	$10, 0, 0
000099B2 0000 0000                  		dc.l Map_obj1C
000099B6 4000                       		dc.w $4000
000099B8 0460 0700                  		dc.b 4,	$60, 7, 0
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            ; Sprite mappings - SLZ	lava thrower
000099BC                            ; ---------------------------------------------------------------------------
000099BC                            Map_obj1C:
000099BC                            	include "_maps\obj1C.asm"
000099BC                            Mappings:
000099BC 0000                       Mappings_0: 	dc.w Mappings_A-Mappings
000099BE 0000                       Mappings_2: 	dc.w Mappings_10-Mappings
000099C0 0000                       Mappings_4: 	dc.w Mappings_16-Mappings
000099C2 0000                       Mappings_6: 	dc.w Mappings_1C-Mappings
000099C4 0000                       Mappings_8: 	dc.w Mappings_22-Mappings
000099C6 01                         Mappings_A: 	dc.b $1
000099C7 F007 0000 F8               	dc.b $F0, $7, $0, $0, $F8
000099CC 01                         Mappings_10: 	dc.b $1
000099CD F00F 0001 F0               	dc.b $F0, $F, $0, $1, $F0
000099D2 01                         Mappings_16: 	dc.b $1
000099D3 F00F 0011 F0               	dc.b $F0, $F, $0, $11, $F0
000099D8 01                         Mappings_1C: 	dc.b $1
000099D9 F00F 0042 F0               	dc.b $F0, $F, $0, $42, $F0
000099DE 18                         Mappings_22: 	dc.b $18
000099DF E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
000099E4 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
000099E9 E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
000099EE E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
000099F3 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
000099F8 E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
000099FD 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009A02 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009A07 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009A0C 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009A11 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009A16 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009A1B 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009A20 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009A25 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009A2A 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009A2F 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009A34 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009A39 C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009A3E C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009A43 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009A48 C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009A4D D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009A52 D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009A58 00                         	even
00009A58 00                         	even
00009A58                            
00009A58                            ; ===========================================================================
00009A58                            ; ---------------------------------------------------------------------------
00009A58                            ; Object 03 - LZ Air Pockets
00009A58                            ; ---------------------------------------------------------------------------
00009A58                            
00009A58                            Obj03:					; XREF: Obj_Index
00009A58 7000                       		moveq	#0,d0
00009A5A 1028 0024                  		move.b	$24(a0),d0
00009A5E 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
00009A62 4EFB 1000                  		jmp	Obj03_Index(pc,d1.w)
00009A66                            ; ===========================================================================
00009A66 0000                       Obj03_Index:	dc.w Obj03_Main-Obj03_Index
00009A68 0000                       		dc.w Obj03_ChkDel-Obj03_Index
00009A6A                            ; ===========================================================================
00009A6A                            
00009A6A                            Obj03_Main:				; XREF: Obj03_Index
00009A6A 5428 0024                  		addq.b	#2,$24(a0)
00009A6E 217C 0000 0000 0004        		move.l	#Map_Obj03,4(a0)
00009A76 317C 4000 0002             		move.w	#$4000,2(a0)
00009A7C 0028 0004 0001             		ori.b	#4,1(a0)
00009A82 117C 0060 0019             		move.b	#$60,$19(a0)
00009A88 117C 0007 0018             		move.b	#7,$18(a0)
00009A8E 117C 0000 001A             		move.b	#0,$1A(a0)
00009A94 3028 0008                  		move.w	8(a0),d0
00009A98 31C0 F610                  		move.w	d0,(v_pocketx).w
00009A9C 3028 000C                  		move.w	$C(a0),d0
00009AA0 0640 0040                  		addi.w	#$40,d0
00009AA4 31C0 F60E                  		move.w	d0,(v_pocketbottom).w
00009AA8                            
00009AA8                            Obj03_ChkDel:				; XREF: Obj03_Index
00009AA8 43F8 D000                  		lea	($FFFFD000).w,a1
00009AAC 3029 0008                  		move.w	8(a1),d0
00009AB0 9068 0008                  		sub.w	8(a0),d0
00009AB4 0640 0060                  		addi.w	#$60,d0
00009AB8 6B00                       		bmi.s	@outpocket
00009ABA 0C40 00C0                  		cmpi.w	#$C0,d0
00009ABE 6400                       		bcc.s	@outpocket
00009AC0 3028 000C                  		move.w	$C(a0),d0
00009AC4 9069 000C                  		sub.w	$C(a1),d0
00009AC8 0640 0040                  		addi.w	#$40,d0
00009ACC 6B00                       		bmi.s	@outpocket
00009ACE 0C40 0080                  		cmpi.w	#$80,d0
00009AD2 6400                       		bcc.s	@outpocket
00009AD4                            
00009AD4 50F8 F612                  		st		(f_insidepocket).w
00009AD8 6000                       		bra.s	@chkgone
00009ADA                            
00009ADA                            	@outpocket:
00009ADA 51F8 F612                  		sf		(f_insidepocket).w
00009ADE                            
00009ADE                            	@chkgone:
00009ADE 3028 0008                  		move.w	8(a0),d0
00009AE2 0240 FF80                  		andi.w	#$FF80,d0
00009AE6 3238 F700                  		move.w	($FFFFF700).w,d1
00009AEA 0441 0080                  		subi.w	#$80,d1
00009AEE 0241 FF80                  		andi.w	#$FF80,d1
00009AF2 9041                       		sub.w	d1,d0
00009AF4 0C40 0280                  		cmpi.w	#$280,d0
00009AF8 6300 0000                  		bls.w	DisplaySprite
00009AFC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009B00 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
00009B04 3440                       		movea.w	d0,a2	; load address into a2
00009B06 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009B0A 6000 0000                  		bra.w	DeleteObject	; and delete object
00009B0E                            ; ---------------------------------------------------------------------------
00009B0E                            ; Sprite mappings - LZ Air Pockets
00009B0E                            ; ---------------------------------------------------------------------------
00009B0E                            Map_Obj03:
00009B0E                            	include "_maps\obj03.asm"
00009B0E                            obj03map:
00009B0E 0000                       obj03map_0: 	dc.w obj03map_2-obj03map
00009B10 18                         obj03map_2: 	dc.b $18
00009B11 E00F 01C6 A0               	dc.b $E0, $F, $1, $C6, $A0
00009B16 E00F 01D6 C0               	dc.b $E0, $F, $1, $D6, $C0
00009B1B E00F 01E6 00               	dc.b $E0, $F, $1, $E6, $0
00009B20 E00F 01F6 40               	dc.b $E0, $F, $1, $F6, $40
00009B25 E00F 09D6 E0               	dc.b $E0, $F, $9, $D6, $E0
00009B2A E00F 09C6 20               	dc.b $E0, $F, $9, $C6, $20
00009B2F 000F 01C6 A0               	dc.b $0, $F, $1, $C6, $A0
00009B34 000F 01D6 C0               	dc.b $0, $F, $1, $D6, $C0
00009B39 000F 09D6 E0               	dc.b $0, $F, $9, $D6, $E0
00009B3E 000F 01E6 00               	dc.b $0, $F, $1, $E6, $0
00009B43 000F 09C6 20               	dc.b $0, $F, $9, $C6, $20
00009B48 000F 01F6 40               	dc.b $0, $F, $1, $F6, $40
00009B4D 200F 01C6 A0               	dc.b $20, $F, $1, $C6, $A0
00009B52 200F 01D6 C0               	dc.b $20, $F, $1, $D6, $C0
00009B57 200F 09D6 E0               	dc.b $20, $F, $9, $D6, $E0
00009B5C 200F 01E6 00               	dc.b $20, $F, $1, $E6, $0
00009B61 200F 09C6 20               	dc.b $20, $F, $9, $C6, $20
00009B66 200F 01F6 40               	dc.b $20, $F, $1, $F6, $40
00009B6B C00F 01D6 C0               	dc.b $C0, $F, $1, $D6, $C0
00009B70 C00F 09D6 E0               	dc.b $C0, $F, $9, $D6, $E0
00009B75 C00F 09CA 00               	dc.b $C0, $F, $9, $CA, $0
00009B7A C00F 01E6 20               	dc.b $C0, $F, $1, $E6, $20
00009B7F D00D 01C6 A1               	dc.b $D0, $D, $1, $C6, $A1
00009B84 D00D 01F6 40               	dc.b $D0, $D, $1, $F6, $40
00009B8A 00                         	even
00009B8A 00                         	even
00009B8A                            
00009B8A                            ; ===========================================================================
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            ; Object 1D - switch that activates when Sonic touches it
00009B8A                            ; (this	is not used anywhere in	the game)
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            
00009B8A                            Obj1D:					; XREF: Obj_Index
00009B8A 7000                       		moveq	#0,d0
00009B8C 1028 0024                  		move.b	$24(a0),d0
00009B90 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009B94 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009B98                            ; ===========================================================================
00009B98 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009B9A 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009B9C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1D_Main:				; XREF: Obj1D_Index
00009B9E 5428 0024                  		addq.b	#2,$24(a0)
00009BA2 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009BAA 317C 4000 0002             		move.w	#$4000,2(a0)
00009BB0 117C 0004 0001             		move.b	#4,1(a0)
00009BB6 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009BBC 117C 0010 0019             		move.b	#$10,$19(a0)
00009BC2 117C 0005 0018             		move.b	#5,$18(a0)
00009BC8                            
00009BC8                            Obj1D_Action:				; XREF: Obj1D_Index
00009BC8 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009BCE 323C 0010                  		move.w	#$10,d1
00009BD2 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009BD6 6700                       		beq.s	Obj1D_ChkDel
00009BD8 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009BDC 7001                       		moveq	#1,d0
00009BDE 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009BE2                            
00009BE2                            Obj1D_ChkDel:
00009BE2 6100 0000                  		bsr.w	DisplaySprite
00009BE6 3028 0008                  		move.w	8(a0),d0
00009BEA 0240 FF80                  		andi.w	#$FF80,d0
00009BEE 3238 F700                  		move.w	($FFFFF700).w,d1
00009BF2 0441 0080                  		subi.w	#$80,d1
00009BF6 0241 FF80                  		andi.w	#$FF80,d1
00009BFA 9041                       		sub.w	d1,d0
00009BFC 0C40 0280                  		cmpi.w	#$280,d0
00009C00 6300                       		bls.s	Obj1D_NoDel
00009C02 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00009C06 6700                       		beq.s	Obj1D_Delete		; if it's zero, don't remember object
00009C08 3440                       		movea.w	d0,a2	; load address into a2
00009C0A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00009C0E 6000                       		bra.s	Obj1D_Delete	; and delete object
00009C10                            
00009C10                            Obj1D_NoDel:
00009C10 4E75                       		rts	
00009C12                            ; ===========================================================================
00009C12                            
00009C12                            Obj1D_Delete:				; XREF: Obj1D_Index
00009C12 6100 0000                  		bsr.w	DeleteObject
00009C16 4E75                       		rts	
00009C18                            ; ---------------------------------------------------------------------------
00009C18                            ; Subroutine to	check if Sonic touches the object
00009C18                            ; ---------------------------------------------------------------------------
00009C18                            
00009C18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C18                            
00009C18                            
00009C18                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009C18 43F8 D000                  		lea	($FFFFD000).w,a1
00009C1C 3029 0008                  		move.w	8(a1),d0
00009C20 9068 0008                  		sub.w	8(a0),d0
00009C24 D041                       		add.w	d1,d0
00009C26 6B00                       		bmi.s	loc_8918
00009C28 D241                       		add.w	d1,d1
00009C2A B041                       		cmp.w	d1,d0
00009C2C 6400                       		bcc.s	loc_8918
00009C2E 3429 000C                  		move.w	$C(a1),d2
00009C32 1229 0016                  		move.b	$16(a1),d1
00009C36 4881                       		ext.w	d1
00009C38 D242                       		add.w	d2,d1
00009C3A 3028 000C                  		move.w	$C(a0),d0
00009C3E 0440 0010                  		subi.w	#$10,d0
00009C42 9041                       		sub.w	d1,d0
00009C44 6200                       		bhi.s	loc_8918
00009C46 0C40 FFF0                  		cmpi.w	#-$10,d0
00009C4A 6500                       		bcs.s	loc_8918
00009C4C 70FF                       		moveq	#-1,d0
00009C4E 4E75                       		rts	
00009C50                            ; ===========================================================================
00009C50                            
00009C50                            loc_8918:
00009C50 7000                       		moveq	#0,d0
00009C52 4E75                       		rts	
00009C54                            ; End of function Obj1D_ChkTouch
00009C54                            
00009C54                            ; ===========================================================================
00009C54                            ; ---------------------------------------------------------------------------
00009C54                            ; Sprite mappings - object 1D
00009C54                            ; ---------------------------------------------------------------------------
00009C54                            Map_obj1D:
00009C54                            	include "_maps\obj1D.asm"
00009C54                            ; ---------------------------------------------------------------------------
00009C54                            ; Sprite mappings - object 1D
00009C54                            ; ---------------------------------------------------------------------------
00009C54 0000                       		dc.w byte_891E-Map_obj1D
00009C56 04                         byte_891E:	dc.b 4
00009C57 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009C5C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009C61 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009C66 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009C6C 00                         		even
00009C6C 00                         		even
00009C6C                            
00009C6C                            ; ===========================================================================
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            ; Object 2A - doors (SBZ)
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            
00009C6C                            Obj2A:					; XREF: Obj_Index
00009C6C 7000                       		moveq	#0,d0
00009C6E 1028 0024                  		move.b	$24(a0),d0
00009C72 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009C76 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009C7A                            ; ===========================================================================
00009C7A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009C7C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009C7E                            ; ===========================================================================
00009C7E                            
00009C7E                            Obj2A_Main:				; XREF: Obj2A_Index
00009C7E 5428 0024                  		addq.b	#2,$24(a0)
00009C82 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009C8A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009C90 0028 0004 0001             		ori.b	#4,1(a0)
00009C96 117C 0008 0019             		move.b	#8,$19(a0)
00009C9C 117C 0004 0018             		move.b	#4,$18(a0)
00009CA2                            
00009CA2                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009CA2 323C 0040                  		move.w	#$40,d1
00009CA6 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009CAA 3038 D008                  		move.w	($FFFFD008).w,d0
00009CAE D041                       		add.w	d1,d0
00009CB0 B068 0008                  		cmp.w	8(a0),d0
00009CB4 6500                       		bcs.s	Obj2A_Animate
00009CB6 9041                       		sub.w	d1,d0
00009CB8 9041                       		sub.w	d1,d0
00009CBA B068 0008                  		cmp.w	8(a0),d0
00009CBE 6400                       		bcc.s	Obj2A_Animate
00009CC0 D041                       		add.w	d1,d0
00009CC2 B068 0008                  		cmp.w	8(a0),d0
00009CC6 6400                       		bcc.s	loc_899A
00009CC8 0828 0000 0022             		btst	#0,$22(a0)
00009CCE 6600                       		bne.s	Obj2A_Animate
00009CD0 6000                       		bra.s	Obj2A_Open
00009CD2                            ; ===========================================================================
00009CD2                            
00009CD2                            loc_899A:				; XREF: Obj2A_OpenShut
00009CD2 0828 0000 0022             		btst	#0,$22(a0)
00009CD8 6700                       		beq.s	Obj2A_Animate
00009CDA                            
00009CDA                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009CDA 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009CE0                            
00009CE0                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009CE0 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009CE6 6100 0000                  		bsr.w	AnimateSprite
00009CEA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009CEE 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009CF0 323C 0011                  		move.w	#$11,d1
00009CF4 343C 0020                  		move.w	#$20,d2
00009CF8 3602                       		move.w	d2,d3
00009CFA 5243                       		addq.w	#1,d3
00009CFC 3828 0008                  		move.w	8(a0),d4
00009D00 6100 0000                  		bsr.w	SolidObject
00009D04                            
00009D04                            Obj2A_MarkAsUsed:
00009D04 6000 0000                  		bra.w	MarkObjGone
00009D08                            ; ===========================================================================
00009D08                            Ani_obj2A:
00009D08                            	include "_anim\obj2A.asm"
00009D08                            ; ---------------------------------------------------------------------------
00009D08                            ; Animation script - doors (SBZ)
00009D08                            ; ---------------------------------------------------------------------------
00009D08 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009D0A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009D0C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009D18 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009D24                            		even
00009D24                            		even
00009D24                            
00009D24                            ; ---------------------------------------------------------------------------
00009D24                            ; Sprite mappings - doors (SBZ)
00009D24                            ; ---------------------------------------------------------------------------
00009D24                            Map_obj2A:
00009D24                            	include "_maps\obj2A.asm"
00009D24                            ; ---------------------------------------------------------------------------
00009D24                            ; Sprite mappings - doors (SBZ)
00009D24                            ; ---------------------------------------------------------------------------
00009D24 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009D28 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009D2C 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009D30 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009D34 0000                       		dc.w byte_8A56-Map_obj2A
00009D36 02                         byte_89FE:	dc.b 2
00009D37 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009D3C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009D41 02                         byte_8A09:	dc.b 2
00009D42 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009D47 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009D4C 02                         byte_8A14:	dc.b 2
00009D4D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009D52 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009D57 02                         byte_8A1F:	dc.b 2
00009D58 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009D5D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009D62 02                         byte_8A2A:	dc.b 2
00009D63 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009D68 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009D6D 02                         byte_8A35:	dc.b 2
00009D6E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009D73 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009D78 02                         byte_8A40:	dc.b 2
00009D79 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009D7E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009D83 02                         byte_8A4B:	dc.b 2
00009D84 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009D89 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009D8E 02                         byte_8A56:	dc.b 2
00009D8F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009D94 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009D9A 00                         		even
00009D9A 00                         		even
00009D9A                            
00009D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D9A                            
00009D9A                            
00009D9A                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009D9A 6100 0000                  		bsr.w	Obj44_SolidWall2
00009D9E 6700                       		beq.s	loc_8AA8
00009DA0 6B00 0000                  		bmi.w	loc_8AC4
00009DA4 4A40                       		tst.w	d0
00009DA6 6700 0000                  		beq.w	loc_8A92
00009DAA 6B00                       		bmi.s	loc_8A7C
00009DAC 4A69 0010                  		tst.w	$10(a1)
00009DB0 6B00                       		bmi.s	loc_8A92
00009DB2 6000                       		bra.s	loc_8A82
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            loc_8A7C:
00009DB4 4A69 0010                  		tst.w	$10(a1)
00009DB8 6A00                       		bpl.s	loc_8A92
00009DBA                            
00009DBA                            loc_8A82:
00009DBA 9169 0008                  		sub.w	d0,8(a1)
00009DBE 337C 0000 0020             		move.w	#0,$20(a1)
00009DC4 337C 0000 0010             		move.w	#0,$10(a1)
00009DCA                            
00009DCA                            loc_8A92:
00009DCA 0829 0001 0022             		btst	#1,$22(a1)
00009DD0 6600                       		bne.s	loc_8AB6
00009DD2 08E9 0005 0022             		bset	#5,$22(a1)
00009DD8 08E8 0005 0022             		bset	#5,$22(a0)
00009DDE 4E75                       		rts	
00009DE0                            ; ===========================================================================
00009DE0                            
00009DE0                            loc_8AA8:
00009DE0 0828 0005 0022             		btst	#5,$22(a0)
00009DE6 6700                       		beq.s	locret_8AC2
00009DE8 337C 0001 001C             		move.w	#1,$1C(a1)
00009DEE                            
00009DEE                            loc_8AB6:
00009DEE 08A8 0005 0022             		bclr	#5,$22(a0)
00009DF4 08A9 0005 0022             		bclr	#5,$22(a1)
00009DFA                            
00009DFA                            locret_8AC2:
00009DFA 4E75                       		rts	
00009DFC                            ; ===========================================================================
00009DFC                            
00009DFC                            loc_8AC4:
00009DFC 4A69 0012                  		tst.w	$12(a1)
00009E00 6A00                       		bpl.s	locret_8AD8
00009E02 4A43                       		tst.w	d3
00009E04 6A00                       		bpl.s	locret_8AD8
00009E06 9769 000C                  		sub.w	d3,$C(a1)
00009E0A 337C 0000 0012             		move.w	#0,$12(a1)
00009E10                            
00009E10                            locret_8AD8:
00009E10 4E75                       		rts	
00009E12                            ; End of function Obj44_SolidWall
00009E12                            
00009E12                            
00009E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E12                            
00009E12                            
00009E12                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009E12 43F8 D000                  		lea	($FFFFD000).w,a1
00009E16 3029 0008                  		move.w	8(a1),d0
00009E1A 9068 0008                  		sub.w	8(a0),d0
00009E1E D041                       		add.w	d1,d0
00009E20 6B00                       		bmi.s	loc_8B48
00009E22 3601                       		move.w	d1,d3
00009E24 D643                       		add.w	d3,d3
00009E26 B043                       		cmp.w	d3,d0
00009E28 6200                       		bhi.s	loc_8B48
00009E2A 1629 0016                  		move.b	$16(a1),d3
00009E2E 4883                       		ext.w	d3
00009E30 D443                       		add.w	d3,d2
00009E32 3629 000C                  		move.w	$C(a1),d3
00009E36 9668 000C                  		sub.w	$C(a0),d3
00009E3A D642                       		add.w	d2,d3
00009E3C 6B00                       		bmi.s	loc_8B48
00009E3E 3802                       		move.w	d2,d4
00009E40 D844                       		add.w	d4,d4
00009E42 B644                       		cmp.w	d4,d3
00009E44 6400                       		bcc.s	loc_8B48
00009E46 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009E4A 6B00                       		bmi.s	loc_8B48
00009E4C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009E52 6400                       		bcc.s	loc_8B48
00009E54 4A78 FE08                  		tst.w	($FFFFFE08).w
00009E58 6600                       		bne.s	loc_8B48
00009E5A 3A00                       		move.w	d0,d5
00009E5C B240                       		cmp.w	d0,d1
00009E5E 6400                       		bcc.s	loc_8B30
00009E60 D241                       		add.w	d1,d1
00009E62 9041                       		sub.w	d1,d0
00009E64 3A00                       		move.w	d0,d5
00009E66 4445                       		neg.w	d5
00009E68                            
00009E68                            loc_8B30:
00009E68 3203                       		move.w	d3,d1
00009E6A B443                       		cmp.w	d3,d2
00009E6C 6400                       		bcc.s	loc_8B3C
00009E6E 9644                       		sub.w	d4,d3
00009E70 3203                       		move.w	d3,d1
00009E72 4441                       		neg.w	d1
00009E74                            
00009E74                            loc_8B3C:
00009E74 BA41                       		cmp.w	d1,d5
00009E76 6200                       		bhi.s	loc_8B44
00009E78 7801                       		moveq	#1,d4
00009E7A 4E75                       		rts	
00009E7C                            ; ===========================================================================
00009E7C                            
00009E7C                            loc_8B44:
00009E7C 78FF                       		moveq	#-1,d4
00009E7E 4E75                       		rts	
00009E80                            ; ===========================================================================
00009E80                            
00009E80                            loc_8B48:
00009E80 7800                       		moveq	#0,d4
00009E82 4E75                       		rts	
00009E84                            ; End of function Obj44_SolidWall2
00009E84                            
00009E84                            ; ===========================================================================
00009E84                            ; ---------------------------------------------------------------------------
00009E84                            ; Object 1E - Ball Hog enemy (SBZ)
00009E84                            ; ---------------------------------------------------------------------------
00009E84                            
00009E84                            Obj1E:					; XREF: Obj_Index
00009E84 7000                       		moveq	#0,d0
00009E86 1028 0024                  		move.b	$24(a0),d0
00009E8A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009E8E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009E92                            ; ===========================================================================
00009E92 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009E94 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            Obj1E_Main:				; XREF: Obj1E_Index
00009E96 117C 0013 0016             		move.b	#$13,$16(a0)
00009E9C 117C 0008 0017             		move.b	#8,$17(a0)
00009EA2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009EAA 317C 2302 0002             		move.w	#$2302,2(a0)
00009EB0 117C 0004 0001             		move.b	#4,1(a0)
00009EB6 117C 0004 0018             		move.b	#4,$18(a0)
00009EBC 117C 0005 0020             		move.b	#5,$20(a0)
00009EC2 117C 000C 0019             		move.b	#$C,$19(a0)
00009EC8 6100 0000                  		bsr.w	ObjectFall
00009ECC 4EB9 0000 0000             		jsr	ObjHitFloor
00009ED2 4A41                       		tst.w	d1
00009ED4 6A00                       		bpl.s	locret_8BAC
00009ED6 D368 000C                  		add.w	d1,$C(a0)
00009EDA 317C 0000 0012             		move.w	#0,$12(a0)
00009EE0 5428 0024                  		addq.b	#2,$24(a0)
00009EE4                            
00009EE4                            locret_8BAC:
00009EE4 4E75                       		rts	
00009EE6                            ; ===========================================================================
00009EE6                            
00009EE6                            Obj1E_Action:				; XREF: Obj1E_Index
00009EE6 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009EEC 6100 0000                  		bsr.w	AnimateSprite
00009EF0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009EF6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009EF8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009EFC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009EFE 6000                       		bra.s	Obj1E_MarkAsGone
00009F00                            ; ===========================================================================
00009F00                            
00009F00                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009F00 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009F04                            
00009F04                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009F04 6000 0000                  		bra.w	MarkObjGone
00009F08                            ; ===========================================================================
00009F08                            
00009F08                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009F08 117C 0001 0032             		move.b	#1,$32(a0)
00009F0E 6100 0000                  		bsr.w	SingleObjLoad
00009F12 6600                       		bne.s	loc_8C1A
00009F14 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009F18 3368 0008 0008             		move.w	8(a0),8(a1)
00009F1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F24 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009F2A 337C 0000 0012             		move.w	#0,$12(a1)
00009F30 70FC                       		moveq	#-4,d0
00009F32 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009F38 6700                       		beq.s	loc_8C0A	; if not, branch
00009F3A 4440                       		neg.w	d0
00009F3C 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009F40                            
00009F40                            loc_8C0A:
00009F40 D169 0008                  		add.w	d0,8(a1)
00009F44 0669 000C 000C             		addi.w	#$C,$C(a1)
00009F4A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009F50                            
00009F50                            loc_8C1A:
00009F50 60B2                       		bra.s	Obj1E_MarkAsGone
00009F52                            ; ===========================================================================
00009F52                            ; ---------------------------------------------------------------------------
00009F52                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009F52                            ; ---------------------------------------------------------------------------
00009F52                            
00009F52                            Obj20:					; XREF: Obj_Index
00009F52 7000                       		moveq	#0,d0
00009F54 1028 0024                  		move.b	$24(a0),d0
00009F58 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009F5C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009F60                            ; ===========================================================================
00009F60 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009F62 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009F64                            ; ===========================================================================
00009F64                            
00009F64                            Obj20_Main:				; XREF: Obj20_Index
00009F64 5428 0024                  		addq.b	#2,$24(a0)
00009F68 117C 0007 0016             		move.b	#7,$16(a0)
00009F6E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009F76 317C 2302 0002             		move.w	#$2302,2(a0)
00009F7C 117C 0004 0001             		move.b	#4,1(a0)
00009F82 117C 0003 0018             		move.b	#3,$18(a0)
00009F88 117C 0087 0020             		move.b	#$87,$20(a0)
00009F8E 117C 0008 0019             		move.b	#8,$19(a0)
00009F94 7000                       		moveq	#0,d0
00009F96 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009F9A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009F9E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009FA2 117C 0004 001A             		move.b	#4,$1A(a0)
00009FA8                            
00009FA8                            Obj20_Bounce:				; XREF: Obj20_Index
00009FA8 4EB9 0000 0000             		jsr	ObjectFall
00009FAE 4A68 0012                  		tst.w	$12(a0)
00009FB2 6B00                       		bmi.s	Obj20_ChkExplode
00009FB4 4EB9 0000 0000             		jsr	ObjHitFloor
00009FBA 4A41                       		tst.w	d1
00009FBC 6A00                       		bpl.s	Obj20_ChkExplode
00009FBE D368 000C                  		add.w	d1,$C(a0)
00009FC2 317C FD00 0012             		move.w	#-$300,$12(a0)
00009FC8 4A03                       		tst.b	d3
00009FCA 6700                       		beq.s	Obj20_ChkExplode
00009FCC 6B00                       		bmi.s	loc_8CA4
00009FCE 4A68 0010                  		tst.w	$10(a0)
00009FD2 6A00                       		bpl.s	Obj20_ChkExplode
00009FD4 4468 0010                  		neg.w	$10(a0)
00009FD8 6000                       		bra.s	Obj20_ChkExplode
00009FDA                            ; ===========================================================================
00009FDA                            
00009FDA                            loc_8CA4:				; XREF: Obj20_Bounce
00009FDA 4A68 0010                  		tst.w	$10(a0)
00009FDE 6B00                       		bmi.s	Obj20_ChkExplode
00009FE0 4468 0010                  		neg.w	$10(a0)
00009FE4                            
00009FE4                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009FE4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009FE8 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009FEA 10BC 0024                  		move.b	#$24,0(a0)
00009FEE 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009FF2 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009FF8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009FFC                            ; ===========================================================================
00009FFC                            
00009FFC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009FFC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A000 6A00                       		bpl.s	Obj20_Display
0000A002 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000A008 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000A00E                            
0000A00E                            Obj20_Display:
0000A00E 6100 0000                  		bsr.w	DisplaySprite
0000A012 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A016 0640 00E0                  		addi.w	#$E0,d0
0000A01A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000A01E 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A022 4E75                       		rts	
0000A024                            ; ===========================================================================
0000A024                            ; ---------------------------------------------------------------------------
0000A024                            ; Object 24 - explosion	from a destroyed monitor
0000A024                            ; ---------------------------------------------------------------------------
0000A024                            
0000A024                            Obj24:					; XREF: Obj_Index
0000A024 7000                       		moveq	#0,d0
0000A026 1028 0024                  		move.b	$24(a0),d0
0000A02A 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000A02E 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000A032                            ; ===========================================================================
0000A032 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000A034 0000                       		dc.w Obj24_Animate-Obj24_Index
0000A036                            ; ===========================================================================
0000A036                            
0000A036                            Obj24_Main:				; XREF: Obj24_Index
0000A036 5428 0024                  		addq.b	#2,$24(a0)
0000A03A 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000A042 317C 041C 0002             		move.w	#$41C,2(a0)
0000A048 117C 0004 0001             		move.b	#4,1(a0)
0000A04E 117C 0001 0018             		move.b	#1,$18(a0)
0000A054 117C 0000 0020             		move.b	#0,$20(a0)
0000A05A 117C 000C 0019             		move.b	#$C,$19(a0)
0000A060 117C 0009 001E             		move.b	#9,$1E(a0)
0000A066 117C 0000 001A             		move.b	#0,$1A(a0)
0000A06C 303C 00A5                  		move.w	#$A5,d0
0000A070 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play explosion sound
0000A076                            
0000A076                            Obj24_Animate:				; XREF: Obj24_Index
0000A076 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A07A 6A00                       		bpl.s	Obj24_Display
0000A07C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000A082 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A086 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000A08C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A090                            
0000A090                            Obj24_Display:
0000A090 6000 0000                  		bra.w	DisplaySprite
0000A094                            ; ===========================================================================
0000A094                            ; ---------------------------------------------------------------------------
0000A094                            ; Object 27 - explosion	from a destroyed enemy
0000A094                            ; ---------------------------------------------------------------------------
0000A094                            
0000A094                            Obj27:					; XREF: Obj_Index
0000A094 7000                       		moveq	#0,d0
0000A096 1028 0024                  		move.b	$24(a0),d0
0000A09A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000A09E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000A0A2                            ; ===========================================================================
0000A0A2 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000A0A4 0000                       		dc.w Obj27_Main-Obj27_Index
0000A0A6 0000                       		dc.w Obj27_Animate-Obj27_Index
0000A0A8                            ; ===========================================================================
0000A0A8                            
0000A0A8                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000A0A8 5428 0024                  		addq.b	#2,$24(a0)
0000A0AC 6100 0000                  		bsr.w	SingleObjLoad
0000A0B0 6600                       		bne.s	Obj27_Main
0000A0B2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000A0B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0C2 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A0C8                            
0000A0C8                            Obj27_Main:				; XREF: Obj27_Index
0000A0C8 5428 0024                  		addq.b	#2,$24(a0)
0000A0CC 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000A0D4 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A0DA 117C 0004 0001             		move.b	#4,1(a0)
0000A0E0 117C 0001 0018             		move.b	#1,$18(a0)
0000A0E6 117C 0000 0020             		move.b	#0,$20(a0)
0000A0EC 117C 000C 0019             		move.b	#$C,$19(a0)
0000A0F2 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A0F8 117C 0000 001A             		move.b	#0,$1A(a0)
0000A0FE 303C 00C1                  		move.w	#$C1,d0
0000A102 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000A108                            
0000A108                            Obj27_Animate:				; XREF: Obj27_Index
0000A108 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A10C 6A00                       		bpl.s	Obj27_Display
0000A10E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000A114 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000A118 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000A11E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A122                            
0000A122                            Obj27_Display:
0000A122 6000 0000                  		bra.w	DisplaySprite
0000A126                            ; ===========================================================================
0000A126                            ; ---------------------------------------------------------------------------
0000A126                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A126                            ; ---------------------------------------------------------------------------
0000A126                            
0000A126                            Obj3F:					; XREF: Obj_Index
0000A126 7000                       		moveq	#0,d0
0000A128 1028 0024                  		move.b	$24(a0),d0
0000A12C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000A130 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000A134                            ; ===========================================================================
0000A134 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000A136 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000A138                            ; ===========================================================================
0000A138                            
0000A138                            Obj3F_Main:				; XREF: Obj3F_Index
0000A138 5428 0024                  		addq.b	#2,$24(a0)
0000A13C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000A144 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000A14A 117C 0004 0001             		move.b	#4,1(a0)
0000A150 117C 0001 0018             		move.b	#1,$18(a0)
0000A156 117C 0000 0020             		move.b	#0,$20(a0)
0000A15C 117C 000C 0019             		move.b	#$C,$19(a0)
0000A162 117C 0007 001E             		move.b	#7,$1E(a0)
0000A168 117C 0000 001A             		move.b	#0,$1A(a0)
0000A16E 303C 00C4                  		move.w	#$C4,d0
0000A172 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000A178                            ; ===========================================================================
0000A178                            Ani_obj1E:
0000A178                            	include "_anim\obj1E.asm"
0000A178                            ; ---------------------------------------------------------------------------
0000A178                            ; Animation script - doors (SBZ)
0000A178                            ; ---------------------------------------------------------------------------
0000A178 0000                       		dc.w byte_8E4A-Ani_obj1E
0000A17A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000A192 00                         		even
0000A192 00                         		even
0000A192                            
0000A192                            ; ---------------------------------------------------------------------------
0000A192                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A192                            ; ---------------------------------------------------------------------------
0000A192                            Map_obj1E:
0000A192                            	include "_maps\obj1E.asm"
0000A192                            ; ---------------------------------------------------------------------------
0000A192                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000A192                            ; ---------------------------------------------------------------------------
0000A192 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000A196 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000A19A 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000A19E 02                         byte_8E6E:	dc.b 2
0000A19F EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1A4 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000A1A9 02                         byte_8E79:	dc.b 2
0000A1AA EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000A1AF FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000A1B4 02                         byte_8E84:	dc.b 2
0000A1B5 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000A1BA 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000A1BF 02                         byte_8E8F:	dc.b 2
0000A1C0 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000A1C5 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000A1CA 01                         byte_8E9A:	dc.b 1
0000A1CB F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000A1D0 01                         byte_8EA0:	dc.b 1
0000A1D1 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000A1D6                            		even
0000A1D6                            		even
0000A1D6                            
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            ; Sprite mappings - explosion
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            Map_obj24:
0000A1D6                            	include "_maps\obj24.asm"
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6                            ; Sprite mappings - explosion
0000A1D6                            ; ---------------------------------------------------------------------------
0000A1D6 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000A1DA 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000A1DE 01                         byte_8EAE:	dc.b 1
0000A1DF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A1E4 01                         byte_8EB4:	dc.b 1
0000A1E5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A1EA 01                         byte_8EBA:	dc.b 1
0000A1EB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A1F0 01                         byte_8EC0:	dc.b 1
0000A1F1 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A1F6                            		even
0000A1F6                            		even
0000A1F6                            
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            ; Sprite mappings - explosion
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000A1FA 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000A1FE 0000                       		dc.w byte_8EF7-Map_obj27
0000A200 01                         byte_8ED0:	dc.b 1
0000A201 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A206 01                         byte_8ED6:	dc.b 1
0000A207 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A20C 01                         byte_8EDC:	dc.b 1
0000A20D F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A212 04                         byte_8EE2:	dc.b 4
0000A213 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A218 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A21D 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A222 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A227 04                         byte_8EF7:	dc.b 4
0000A228 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A22D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A232 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A237 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A23C                            		even
0000A23C                            ; ---------------------------------------------------------------------------
0000A23C                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A23C                            ; ---------------------------------------------------------------------------
0000A23C FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000A23E 0000                       		dc.w byte_8F16-Map_obj3F
0000A240 0000                       		dc.w byte_8F1C-Map_obj3F
0000A242 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000A244 FFEB                       		dc.w byte_8EF7-Map_obj3F
0000A246 01                         byte_8F16:	dc.b 1
0000A247 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A24C 01                         byte_8F1C:	dc.b 1
0000A24D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A252                            		even
0000A252                            ; ===========================================================================
0000A252                            ; ---------------------------------------------------------------------------
0000A252                            ; Object 28 - animals
0000A252                            ; ---------------------------------------------------------------------------
0000A252                            
0000A252                            Obj28:					; XREF: Obj_Index
0000A252 7000                       		moveq	#0,d0
0000A254 1028 0024                  		move.b	$24(a0),d0
0000A258 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000A25C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000A260                            ; ===========================================================================
0000A260 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000A264 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A268 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000A26C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000A270 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A274 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A278 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A27C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A280 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A284 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A288 0000                       		dc.w loc_92D6-Obj28_Index
0000A28A                            
0000A28A 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A296                            
0000A296 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A29A 0000 0000                  		dc.l Map_obj28
0000A29E FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A2A2 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A2A6 FE80 FD00                  		dc.w $FE80, $FD00
0000A2AA 0000 0000                  		dc.l Map_obj28
0000A2AE FEC0 FE80                  		dc.w $FEC0, $FE80
0000A2B2 0000 0000                  		dc.l Map_obj28a
0000A2B6 FE40 FD00                  		dc.w $FE40, $FD00
0000A2BA 0000 0000                  		dc.l Map_obj28b
0000A2BE FD00 FC00                  		dc.w $FD00, $FC00
0000A2C2 0000 0000                  		dc.l Map_obj28a
0000A2C6 FD80 FC80                  		dc.w $FD80, $FC80
0000A2CA 0000 0000                  		dc.l Map_obj28b
0000A2CE                            
0000A2CE FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A2DE FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A2EE FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A2FA                            
0000A2FA 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A30E 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A322 0000 0000                  		dc.l Map_obj28b
0000A326                            
0000A326 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A338 0565 05B3                  		dc.w $565, $5B3
0000A33C                            ; ===========================================================================
0000A33C                            
0000A33C                            Obj28_Ending:				; XREF: Obj28_Index
0000A33C 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A340 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A344 7000                       		moveq	#0,d0
0000A346 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A34A D040                       		add.w	d0,d0		; multiply d0 by 2
0000A34C 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A350 0440 0014                  		subi.w	#$14,d0
0000A354 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A35A D040                       		add.w	d0,d0
0000A35C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A362 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A366 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A36C 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A372 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A378 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A37E 117C 000C 0016             		move.b	#$C,$16(a0)
0000A384 117C 0004 0001             		move.b	#4,1(a0)
0000A38A 08E8 0000 0001             		bset	#0,1(a0)
0000A390 117C 0006 0018             		move.b	#6,$18(a0)
0000A396 117C 0008 0019             		move.b	#8,$19(a0)
0000A39C 117C 0007 001E             		move.b	#7,$1E(a0)
0000A3A2 6000 0000                  		bra.w	DisplaySprite
0000A3A6                            ; ===========================================================================
0000A3A6                            
0000A3A6                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A3A6 5428 0024                  		addq.b	#2,$24(a0)
0000A3AA 6100 85FA                  		bsr.w	RandomNumber
0000A3AE 0240 0001                  		andi.w	#1,d0
0000A3B2 7200                       		moveq	#0,d1
0000A3B4 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A3B8 D241                       		add.w	d1,d1
0000A3BA D240                       		add.w	d0,d1
0000A3BC 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A3C0 1031 1000                  		move.b	(a1,d1.w),d0
0000A3C4 1140 0030                  		move.b	d0,$30(a0)
0000A3C8 E748                       		lsl.w	#3,d0
0000A3CA 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A3CE D2C0                       		adda.w	d0,a1
0000A3D0 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A3D4 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A3D8 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A3DC 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A3E2 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A3E8 6700                       		beq.s	loc_90C0	; if yes, branch
0000A3EA 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A3F0                            
0000A3F0                            loc_90C0:
0000A3F0 117C 000C 0016             		move.b	#$C,$16(a0)
0000A3F6 117C 0004 0001             		move.b	#4,1(a0)
0000A3FC 08E8 0000 0001             		bset	#0,1(a0)
0000A402 117C 0006 0018             		move.b	#6,$18(a0)
0000A408 117C 0008 0019             		move.b	#8,$19(a0)
0000A40E 117C 0007 001E             		move.b	#7,$1E(a0)
0000A414 117C 0002 001A             		move.b	#2,$1A(a0)
0000A41A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A420 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A424 6600                       		bne.s	loc_911C
0000A426 6100 0000                  		bsr.w	SingleObjLoad
0000A42A 6600                       		bne.s	Obj28_Display
0000A42C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A430 3368 0008 0008             		move.w	8(a0),8(a1)
0000A436 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A43C 3028 003E                  		move.w	$3E(a0),d0
0000A440 E248                       		lsr.w	#1,d0
0000A442 1340 001A                  		move.b	d0,$1A(a1)
0000A446                            
0000A446                            Obj28_Display:
0000A446 6000 0000                  		bra.w	DisplaySprite
0000A44A                            ; ===========================================================================
0000A44A                            
0000A44A                            loc_911C:
0000A44A 117C 0012 0024             		move.b	#$12,$24(a0)
0000A450 4268 0010                  		clr.w	$10(a0)
0000A454 6000 0000                  		bra.w	DisplaySprite
0000A458                            ; ===========================================================================
0000A458                            
0000A458                            loc_912A:				; XREF: Obj28_Index
0000A458 4A28 0001                  		tst.b	1(a0)
0000A45C 6A00 0000                  		bpl.w	DeleteObject
0000A460 6100 0000                  		bsr.w	ObjectFall
0000A464 4A68 0012                  		tst.w	$12(a0)
0000A468 6B00                       		bmi.s	loc_9180
0000A46A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A470 4A41                       		tst.w	d1
0000A472 6A00                       		bpl.s	loc_9180
0000A474 D368 000C                  		add.w	d1,$C(a0)
0000A478 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A47E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A484 117C 0001 001A             		move.b	#1,$1A(a0)
0000A48A 1028 0030                  		move.b	$30(a0),d0
0000A48E D000                       		add.b	d0,d0
0000A490 5800                       		addq.b	#4,d0
0000A492 1140 0024                  		move.b	d0,$24(a0)
0000A496 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A49A 6700                       		beq.s	loc_9180
0000A49C 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A4A2 6700                       		beq.s	loc_9180
0000A4A4 4468 0010                  		neg.w	$10(a0)
0000A4A8 0868 0000 0001             		bchg	#0,1(a0)
0000A4AE                            
0000A4AE                            loc_9180:
0000A4AE 6000 0000                  		bra.w	DisplaySprite
0000A4B2                            ; ===========================================================================
0000A4B2                            
0000A4B2                            loc_9184:				; XREF: Obj28_Index
0000A4B2 6100 0000                  		bsr.w	ObjectFall
0000A4B6 117C 0001 001A             		move.b	#1,$1A(a0)
0000A4BC 4A68 0012                  		tst.w	$12(a0)
0000A4C0 6B00                       		bmi.s	loc_91AE
0000A4C2 117C 0000 001A             		move.b	#0,$1A(a0)
0000A4C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4CE 4A41                       		tst.w	d1
0000A4D0 6A00                       		bpl.s	loc_91AE
0000A4D2 D368 000C                  		add.w	d1,$C(a0)
0000A4D6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4DC                            
0000A4DC                            loc_91AE:
0000A4DC 4A28 0028                  		tst.b	$28(a0)
0000A4E0 6600                       		bne.s	loc_9224
0000A4E2 4A28 0001                  		tst.b	1(a0)
0000A4E6 6A00 0000                  		bpl.w	DeleteObject
0000A4EA 6000 0000                  		bra.w	DisplaySprite
0000A4EE                            ; ===========================================================================
0000A4EE                            
0000A4EE                            loc_91C0:				; XREF: Obj28_Index
0000A4EE 6100 0000                  		bsr.w	SpeedToPos
0000A4F2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A4F8 4A68 0012                  		tst.w	$12(a0)
0000A4FC 6B00                       		bmi.s	loc_91FC
0000A4FE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A504 4A41                       		tst.w	d1
0000A506 6A00                       		bpl.s	loc_91FC
0000A508 D368 000C                  		add.w	d1,$C(a0)
0000A50C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A512 4A28 0028                  		tst.b	$28(a0)
0000A516 6700                       		beq.s	loc_91FC
0000A518 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A51E 6700                       		beq.s	loc_91FC
0000A520 4468 0010                  		neg.w	$10(a0)
0000A524 0868 0000 0001             		bchg	#0,1(a0)
0000A52A                            
0000A52A                            loc_91FC:
0000A52A 5328 001E                  		subq.b	#1,$1E(a0)
0000A52E 6A00                       		bpl.s	loc_9212
0000A530 117C 0001 001E             		move.b	#1,$1E(a0)
0000A536 5228 001A                  		addq.b	#1,$1A(a0)
0000A53A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A540                            
0000A540                            loc_9212:
0000A540 4A28 0028                  		tst.b	$28(a0)
0000A544 6600                       		bne.s	loc_9224
0000A546 4A28 0001                  		tst.b	1(a0)
0000A54A 6A00 0000                  		bpl.w	DeleteObject
0000A54E 6000 0000                  		bra.w	DisplaySprite
0000A552                            ; ===========================================================================
0000A552                            
0000A552                            loc_9224:				; XREF: Obj28_Index
0000A552 3028 0008                  		move.w	8(a0),d0
0000A556 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A55A 6500                       		bcs.s	loc_923C
0000A55C 0440 0180                  		subi.w	#$180,d0
0000A560 6A00                       		bpl.s	loc_923C
0000A562 4A28 0001                  		tst.b	1(a0)
0000A566 6A00 0000                  		bpl.w	DeleteObject
0000A56A                            
0000A56A                            loc_923C:
0000A56A 6000 0000                  		bra.w	DisplaySprite
0000A56E                            ; ===========================================================================
0000A56E                            
0000A56E                            loc_9240:				; XREF: Obj28_Index
0000A56E 4A28 0001                  		tst.b	1(a0)
0000A572 6A00 0000                  		bpl.w	DeleteObject
0000A576 5368 0036                  		subq.w	#1,$36(a0)
0000A57A 6600 0000                  		bne.w	loc_925C
0000A57E 117C 0002 0024             		move.b	#2,$24(a0)
0000A584 117C 0003 0018             		move.b	#3,$18(a0)
0000A58A                            
0000A58A                            loc_925C:
0000A58A 6000 0000                  		bra.w	DisplaySprite
0000A58E                            ; ===========================================================================
0000A58E                            
0000A58E                            loc_9260:				; XREF: Obj28_Index
0000A58E 6100 0000                  		bsr.w	sub_9404
0000A592 6400                       		bcc.s	loc_927C
0000A594 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A59A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5A0 117C 000E 0024             		move.b	#$E,$24(a0)
0000A5A6 6000 FF46                  		bra.w	loc_91C0
0000A5AA                            ; ===========================================================================
0000A5AA                            
0000A5AA                            loc_927C:
0000A5AA 6000 FFA6                  		bra.w	loc_9224
0000A5AE                            ; ===========================================================================
0000A5AE                            
0000A5AE                            loc_9280:				; XREF: Obj28_Index
0000A5AE 6100 0000                  		bsr.w	sub_9404
0000A5B2 6A00                       		bpl.s	loc_92B6
0000A5B4 4268 0010                  		clr.w	$10(a0)
0000A5B8 4268 0032                  		clr.w	$32(a0)
0000A5BC 6100 0000                  		bsr.w	SpeedToPos
0000A5C0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A5C6 6100 0000                  		bsr.w	loc_93C4
0000A5CA 6100 0000                  		bsr.w	loc_93EC
0000A5CE 5328 001E                  		subq.b	#1,$1E(a0)
0000A5D2 6A00                       		bpl.s	loc_92B6
0000A5D4 117C 0001 001E             		move.b	#1,$1E(a0)
0000A5DA 5228 001A                  		addq.b	#1,$1A(a0)
0000A5DE 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A5E4                            
0000A5E4                            loc_92B6:
0000A5E4 6000 FF6C                  		bra.w	loc_9224
0000A5E8                            ; ===========================================================================
0000A5E8                            
0000A5E8                            loc_92BA:				; XREF: Obj28_Index
0000A5E8 6100 0000                  		bsr.w	sub_9404
0000A5EC 6A00                       		bpl.s	loc_9310
0000A5EE 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A5F4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A5FA 117C 0004 0024             		move.b	#4,$24(a0)
0000A600 6000 FEB0                  		bra.w	loc_9184
0000A604                            ; ===========================================================================
0000A604                            
0000A604                            loc_92D6:				; XREF: Obj28_Index
0000A604 6100 0000                  		bsr.w	ObjectFall
0000A608 117C 0001 001A             		move.b	#1,$1A(a0)
0000A60E 4A68 0012                  		tst.w	$12(a0)
0000A612 6B00                       		bmi.s	loc_9310
0000A614 117C 0000 001A             		move.b	#0,$1A(a0)
0000A61A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A620 4A41                       		tst.w	d1
0000A622 6A00                       		bpl.s	loc_9310
0000A624 4628 0029                  		not.b	$29(a0)
0000A628 6600                       		bne.s	loc_9306
0000A62A 4468 0010                  		neg.w	$10(a0)
0000A62E 0868 0000 0001             		bchg	#0,1(a0)
0000A634                            
0000A634                            loc_9306:
0000A634 D368 000C                  		add.w	d1,$C(a0)
0000A638 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A63E                            
0000A63E                            loc_9310:
0000A63E 6000 FF12                  		bra.w	loc_9224
0000A642                            ; ===========================================================================
0000A642                            
0000A642                            loc_9314:				; XREF: Obj28_Index
0000A642 6100 0000                  		bsr.w	sub_9404
0000A646 6A00                       		bpl.s	loc_932E
0000A648 4268 0010                  		clr.w	$10(a0)
0000A64C 4268 0032                  		clr.w	$32(a0)
0000A650 6100 0000                  		bsr.w	ObjectFall
0000A654 6100 0000                  		bsr.w	loc_93C4
0000A658 6100 0000                  		bsr.w	loc_93EC
0000A65C                            
0000A65C                            loc_932E:
0000A65C 6000 FEF4                  		bra.w	loc_9224
0000A660                            ; ===========================================================================
0000A660                            
0000A660                            loc_9332:				; XREF: Obj28_Index
0000A660 6100 0000                  		bsr.w	sub_9404
0000A664 6A00                       		bpl.s	loc_936C
0000A666 6100 0000                  		bsr.w	ObjectFall
0000A66A 117C 0001 001A             		move.b	#1,$1A(a0)
0000A670 4A68 0012                  		tst.w	$12(a0)
0000A674 6B00                       		bmi.s	loc_936C
0000A676 117C 0000 001A             		move.b	#0,$1A(a0)
0000A67C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A682 4A41                       		tst.w	d1
0000A684 6A00                       		bpl.s	loc_936C
0000A686 4468 0010                  		neg.w	$10(a0)
0000A68A 0868 0000 0001             		bchg	#0,1(a0)
0000A690 D368 000C                  		add.w	d1,$C(a0)
0000A694 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A69A                            
0000A69A                            loc_936C:
0000A69A 6000 FEB6                  		bra.w	loc_9224
0000A69E                            ; ===========================================================================
0000A69E                            
0000A69E                            loc_9370:				; XREF: Obj28_Index
0000A69E 6100 0000                  		bsr.w	sub_9404
0000A6A2 6A00                       		bpl.s	loc_93C0
0000A6A4 6100 0000                  		bsr.w	SpeedToPos
0000A6A8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A6AE 4A68 0012                  		tst.w	$12(a0)
0000A6B2 6B00                       		bmi.s	loc_93AA
0000A6B4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6BA 4A41                       		tst.w	d1
0000A6BC 6A00                       		bpl.s	loc_93AA
0000A6BE 4628 0029                  		not.b	$29(a0)
0000A6C2 6600                       		bne.s	loc_93A0
0000A6C4 4468 0010                  		neg.w	$10(a0)
0000A6C8 0868 0000 0001             		bchg	#0,1(a0)
0000A6CE                            
0000A6CE                            loc_93A0:
0000A6CE D368 000C                  		add.w	d1,$C(a0)
0000A6D2 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A6D8                            
0000A6D8                            loc_93AA:
0000A6D8 5328 001E                  		subq.b	#1,$1E(a0)
0000A6DC 6A00                       		bpl.s	loc_93C0
0000A6DE 117C 0001 001E             		move.b	#1,$1E(a0)
0000A6E4 5228 001A                  		addq.b	#1,$1A(a0)
0000A6E8 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A6EE                            
0000A6EE                            loc_93C0:
0000A6EE 6000 FE62                  		bra.w	loc_9224
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            loc_93C4:
0000A6F2 117C 0001 001A             		move.b	#1,$1A(a0)
0000A6F8 4A68 0012                  		tst.w	$12(a0)
0000A6FC 6B00                       		bmi.s	locret_93EA
0000A6FE 117C 0000 001A             		move.b	#0,$1A(a0)
0000A704 4EB9 0000 0000             		jsr	ObjHitFloor
0000A70A 4A41                       		tst.w	d1
0000A70C 6A00                       		bpl.s	locret_93EA
0000A70E D368 000C                  		add.w	d1,$C(a0)
0000A712 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A718                            
0000A718                            locret_93EA:
0000A718 4E75                       		rts	
0000A71A                            ; ===========================================================================
0000A71A                            
0000A71A                            loc_93EC:
0000A71A 08E8 0000 0001             		bset	#0,1(a0)
0000A720 3028 0008                  		move.w	8(a0),d0
0000A724 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A728 6400                       		bcc.s	locret_9402
0000A72A 08A8 0000 0001             		bclr	#0,1(a0)
0000A730                            
0000A730                            locret_9402:
0000A730 4E75                       		rts	
0000A732                            
0000A732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A732                            
0000A732                            
0000A732                            sub_9404:
0000A732 3038 D008                  		move.w	($FFFFD008).w,d0
0000A736 9068 0008                  		sub.w	8(a0),d0
0000A73A 0440 00B8                  		subi.w	#$B8,d0
0000A73E 4E75                       		rts	
0000A740                            ; End of function sub_9404
0000A740                            
0000A740                            ; ===========================================================================
0000A740                            ; ---------------------------------------------------------------------------
0000A740                            ; Object 29 - points that appear when you destroy something
0000A740                            ; ---------------------------------------------------------------------------
0000A740                            
0000A740                            Obj29:					; XREF: Obj_Index
0000A740 7000                       		moveq	#0,d0
0000A742 1028 0024                  		move.b	$24(a0),d0
0000A746 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A74A 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A74E 6000 0000                  		bra.w	DisplaySprite
0000A752                            ; ===========================================================================
0000A752 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A754 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A756                            ; ===========================================================================
0000A756                            
0000A756                            Obj29_Main:				; XREF: Obj29_Index
0000A756 5428 0024                  		addq.b	#2,$24(a0)
0000A75A 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A762 317C 2568 0002             		move.w	#($2000+pointsart),2(a0)
0000A768 117C 0004 0001             		move.b	#4,1(a0)
0000A76E 117C 0001 0018             		move.b	#1,$18(a0)
0000A774 117C 0008 0019             		move.b	#8,$19(a0)
0000A77A 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A780                            
0000A780                            Obj29_Slower:				; XREF: Obj29_Index
0000A780 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A784 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A788 6100 0000                  		bsr.w	SpeedToPos
0000A78C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A792 4E75                       		rts	
0000A794                            ; ===========================================================================
0000A794                            ; ---------------------------------------------------------------------------
0000A794                            ; Sprite mappings - animals
0000A794                            ; ---------------------------------------------------------------------------
0000A794                            Map_obj28:
0000A794                            	include "_maps\obj28.asm"
0000A794                            ; ---------------------------------------------------------------------------
0000A794                            ; Sprite mappings - animals
0000A794                            ; ---------------------------------------------------------------------------
0000A794 0000                       		dc.w byte_9472-Map_obj28
0000A796 0000                       		dc.w byte_9478-Map_obj28
0000A798 0000                       		dc.w byte_946C-Map_obj28
0000A79A 01                         byte_946C:	dc.b 1
0000A79B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7A0 01                         byte_9472:	dc.b 1
0000A7A1 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A7A6 01                         byte_9478:	dc.b 1
0000A7A7 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A7AC                            		even
0000A7AC                            		even
0000A7AC                            
0000A7AC                            Map_obj28a:
0000A7AC                            	include "_maps\obj28a.asm"
0000A7AC                            ; ---------------------------------------------------------------------------
0000A7AC                            ; Sprite mappings - animals
0000A7AC                            ; ---------------------------------------------------------------------------
0000A7AC 0000                       		dc.w byte_948A-Map_obj28a
0000A7AE 0000                       		dc.w byte_9490-Map_obj28a
0000A7B0 0000                       		dc.w byte_9484-Map_obj28a
0000A7B2 01                         byte_9484:	dc.b 1
0000A7B3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7B8 01                         byte_948A:	dc.b 1
0000A7B9 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A7BE 01                         byte_9490:	dc.b 1
0000A7BF FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A7C4                            		even
0000A7C4                            		even
0000A7C4                            
0000A7C4                            Map_obj28b:
0000A7C4                            	include "_maps\obj28b.asm"
0000A7C4                            ; ---------------------------------------------------------------------------
0000A7C4                            ; Sprite mappings - animals
0000A7C4                            ; ---------------------------------------------------------------------------
0000A7C4 0000                       		dc.w byte_94A2-Map_obj28b
0000A7C6 0000                       		dc.w byte_94A8-Map_obj28b
0000A7C8 0000                       		dc.w byte_949C-Map_obj28b
0000A7CA 01                         byte_949C:	dc.b 1
0000A7CB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A7D0 01                         byte_94A2:	dc.b 1
0000A7D1 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A7D6 01                         byte_94A8:	dc.b 1
0000A7D7 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A7DC                            		even
0000A7DC                            		even
0000A7DC                            
0000A7DC                            ; ---------------------------------------------------------------------------
0000A7DC                            ; Sprite mappings - points that	appear when you	destroy	something
0000A7DC                            ; ---------------------------------------------------------------------------
0000A7DC                            Map_obj29:
0000A7DC                            	include "_maps\obj29.asm"
0000A7DC                            ; ---------------------------------------------------------------------------
0000A7DC                            ; Sprite mappings - points that	appear when you	destroy	something
0000A7DC                            ; ---------------------------------------------------------------------------
0000A7DC 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A7E0 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A7E4 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A7E8 0000                       		dc.w byte_94E5-Map_obj29
0000A7EA 01                         byte_94BC:	dc.b 1
0000A7EB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A7F0 01                         byte_94C2:	dc.b 1
0000A7F1 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A7F6 01                         byte_94C8:	dc.b 1
0000A7F7 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A7FC 01                         byte_94CE:	dc.b 1
0000A7FD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A802 01                         byte_94D4:	dc.b 1
0000A803 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A808 02                         byte_94DA:	dc.b 2
0000A809 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A80E FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A813 02                         byte_94E5:	dc.b 2
0000A814 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A819 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A81E                            		even
0000A81E                            		even
0000A81E                            
0000A81E                            ; ===========================================================================
0000A81E                            ; ---------------------------------------------------------------------------
0000A81E                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A81E                            ; ---------------------------------------------------------------------------
0000A81E                            
0000A81E                            Obj1F:					; XREF: Obj_Index
0000A81E 7000                       		moveq	#0,d0
0000A820 1028 0024                  		move.b	$24(a0),d0
0000A824 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A828 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A82C                            ; ===========================================================================
0000A82C 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A82E 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A830 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A832 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A834 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A836                            ; ===========================================================================
0000A836                            
0000A836                            Obj1F_Main:				; XREF: Obj1F_Index
0000A836 117C 0010 0016             		move.b	#$10,$16(a0)
0000A83C 117C 0008 0017             		move.b	#8,$17(a0)
0000A842 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A84A 317C 0400 0002             		move.w	#$400,2(a0)
0000A850 117C 0004 0001             		move.b	#4,1(a0)
0000A856 117C 0003 0018             		move.b	#3,$18(a0)
0000A85C 117C 0006 0020             		move.b	#6,$20(a0)
0000A862 117C 0015 0019             		move.b	#$15,$19(a0)
0000A868 6100 0000                  		bsr.w	ObjectFall
0000A86C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A872 4A41                       		tst.w	d1
0000A874 6A00                       		bpl.s	locret_955A
0000A876 D368 000C                  		add.w	d1,$C(a0)
0000A87A 1143 0026                  		move.b	d3,$26(a0)
0000A87E 317C 0000 0012             		move.w	#0,$12(a0)
0000A884 5428 0024                  		addq.b	#2,$24(a0)
0000A888                            
0000A888                            locret_955A:
0000A888 4E75                       		rts	
0000A88A                            ; ===========================================================================
0000A88A                            
0000A88A                            Obj1F_Action:				; XREF: Obj1F_Index
0000A88A 7000                       		moveq	#0,d0
0000A88C 1028 0025                  		move.b	$25(a0),d0
0000A890 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A894 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A898 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A89E 6100 0000                  		bsr.w	AnimateSprite
0000A8A2 6000 0000                  		bra.w	MarkObjGone
0000A8A6                            ; ===========================================================================
0000A8A6 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A8A8 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A8AA                            ; ===========================================================================
0000A8AA                            
0000A8AA                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A8AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A8AE 6A00                       		bpl.s	locret_95B6
0000A8B0 4A28 0001                  		tst.b	1(a0)
0000A8B4 6A00                       		bpl.s	Obj1F_Move
0000A8B6 0868 0001 0032             		bchg	#1,$32(a0)
0000A8BC 6600                       		bne.s	Obj1F_MakeFire
0000A8BE                            
0000A8BE                            Obj1F_Move:
0000A8BE 5428 0025                  		addq.b	#2,$25(a0)
0000A8C2 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A8C8 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A8CE 6100 0000                  		bsr.w	Obj1F_SetAni
0000A8D2 5600                       		addq.b	#3,d0
0000A8D4 1140 001C                  		move.b	d0,$1C(a0)
0000A8D8 0868 0000 0022             		bchg	#0,$22(a0)
0000A8DE 6600                       		bne.s	locret_95B6
0000A8E0 4468 0010                  		neg.w	$10(a0)		; change direction
0000A8E4                            
0000A8E4                            locret_95B6:
0000A8E4 4E75                       		rts	
0000A8E6                            ; ===========================================================================
0000A8E6                            
0000A8E6                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A8E6 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A8EC 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A8F2 6100 0000                  		bsr.w	SingleObjLoad
0000A8F6 6600                       		bne.s	Obj1F_MakeFire2
0000A8F8 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A8FC 137C 0006 0024             		move.b	#6,$24(a1)
0000A902 3368 0008 0008             		move.w	8(a0),8(a1)
0000A908 0469 0010 0008             		subi.w	#$10,8(a1)
0000A90E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A914 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A91A                            
0000A91A                            Obj1F_MakeFire2:
0000A91A 6100 0000                  		bsr.w	SingleObjLoad
0000A91E 6600                       		bne.s	locret_9618
0000A920 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A924 137C 0006 0024             		move.b	#6,$24(a1)
0000A92A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A930 0669 0010 0008             		addi.w	#$10,8(a1)
0000A936 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A93C 337C 0100 0010             		move.w	#$100,$10(a1)
0000A942                            
0000A942                            locret_9618:
0000A942 4E75                       		rts	
0000A944                            ; ===========================================================================
0000A944                            
0000A944                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A944 5368 0030                  		subq.w	#1,$30(a0)
0000A948 6B00                       		bmi.s	loc_966E
0000A94A 6100 0000                  		bsr.w	SpeedToPos
0000A94E 0868 0000 0032             		bchg	#0,$32(a0)
0000A954 6600                       		bne.s	loc_9654
0000A956 3628 0008                  		move.w	8(a0),d3
0000A95A 0643 0010                  		addi.w	#$10,d3
0000A95E 0828 0000 0022             		btst	#0,$22(a0)
0000A964 6700                       		beq.s	loc_9640
0000A966 0443 0020                  		subi.w	#$20,d3
0000A96A                            
0000A96A                            loc_9640:
0000A96A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A970 0C41 FFF8                  		cmpi.w	#-8,d1
0000A974 6D00                       		blt.s	loc_966E
0000A976 0C41 000C                  		cmpi.w	#$C,d1
0000A97A 6C00                       		bge.s	loc_966E
0000A97C 4E75                       		rts	
0000A97E                            ; ===========================================================================
0000A97E                            
0000A97E                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A97E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A984 D368 000C                  		add.w	d1,$C(a0)
0000A988 1143 0026                  		move.b	d3,$26(a0)
0000A98C 6100 0000                  		bsr.w	Obj1F_SetAni
0000A990 5600                       		addq.b	#3,d0
0000A992 1140 001C                  		move.b	d0,$1C(a0)
0000A996 4E75                       		rts	
0000A998                            ; ===========================================================================
0000A998                            
0000A998                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A998 5528 0025                  		subq.b	#2,$25(a0)
0000A99C 317C 003B 0030             		move.w	#59,$30(a0)
0000A9A2 317C 0000 0010             		move.w	#0,$10(a0)
0000A9A8 6100 0000                  		bsr.w	Obj1F_SetAni
0000A9AC 1140 001C                  		move.b	d0,$1C(a0)
0000A9B0 4E75                       		rts	
0000A9B2                            ; ---------------------------------------------------------------------------
0000A9B2                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A9B2                            ; ---------------------------------------------------------------------------
0000A9B2                            
0000A9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9B2                            
0000A9B2                            
0000A9B2                            Obj1F_SetAni:				; XREF: loc_966E
0000A9B2 7000                       		moveq	#0,d0
0000A9B4 1628 0026                  		move.b	$26(a0),d3
0000A9B8 6B00                       		bmi.s	loc_96A4
0000A9BA 0C03 0006                  		cmpi.b	#6,d3
0000A9BE 6500                       		bcs.s	locret_96A2
0000A9C0 7001                       		moveq	#1,d0
0000A9C2 0828 0000 0022             		btst	#0,$22(a0)
0000A9C8 6600                       		bne.s	locret_96A2
0000A9CA 7002                       		moveq	#2,d0
0000A9CC                            
0000A9CC                            locret_96A2:
0000A9CC 4E75                       		rts	
0000A9CE                            ; ===========================================================================
0000A9CE                            
0000A9CE                            loc_96A4:				; XREF: Obj1F_SetAni
0000A9CE 0C03 00FA                  		cmpi.b	#-6,d3
0000A9D2 6200                       		bhi.s	locret_96B6
0000A9D4 7002                       		moveq	#2,d0
0000A9D6 0828 0000 0022             		btst	#0,$22(a0)
0000A9DC 6600                       		bne.s	locret_96B6
0000A9DE 7001                       		moveq	#1,d0
0000A9E0                            
0000A9E0                            locret_96B6:
0000A9E0 4E75                       		rts	
0000A9E2                            ; End of function Obj1F_SetAni
0000A9E2                            
0000A9E2                            ; ===========================================================================
0000A9E2                            
0000A9E2                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A9E2 6100 0000                  		bsr.w	DeleteObject
0000A9E6 4E75                       		rts	
0000A9E8                            ; ===========================================================================
0000A9E8                            ; ---------------------------------------------------------------------------
0000A9E8                            ; Sub-object - missile that the	Crabmeat throws
0000A9E8                            ; ---------------------------------------------------------------------------
0000A9E8                            
0000A9E8                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A9E8 5428 0024                  		addq.b	#2,$24(a0)
0000A9EC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A9F4 317C 0400 0002             		move.w	#$400,2(a0)
0000A9FA 117C 0004 0001             		move.b	#4,1(a0)
0000AA00 117C 0003 0018             		move.b	#3,$18(a0)
0000AA06 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA0C 117C 0008 0019             		move.b	#8,$19(a0)
0000AA12 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AA18 117C 0007 001C             		move.b	#7,$1C(a0)
0000AA1E                            
0000AA1E                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000AA1E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000AA24 6100 0000                  		bsr.w	AnimateSprite
0000AA28 6100 0000                  		bsr.w	ObjectFall
0000AA2C 6100 0000                  		bsr.w	DisplaySprite
0000AA30 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA34 0640 00E0                  		addi.w	#$E0,d0
0000AA38 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AA3C 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000AA3E 4E75                       		rts	
0000AA40                            ; ===========================================================================
0000AA40                            
0000AA40                            Obj1F_Delete2:
0000AA40 6000 0000                  		bra.w	DeleteObject
0000AA44                            ; ===========================================================================
0000AA44                            Ani_obj1F:
0000AA44                            	include "_anim\obj1F.asm"
0000AA44                            ; ---------------------------------------------------------------------------
0000AA44                            ; Animation script - Crabmeat enemy
0000AA44                            ; ---------------------------------------------------------------------------
0000AA44 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000AA4A 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000AA50 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000AA54 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000AA58 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000AA5C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000AA60 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000AA66 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000AA6C 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000AA72 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000AA76 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000AA7A                            		even
0000AA7A                            		even
0000AA7A                            
0000AA7A                            ; ---------------------------------------------------------------------------
0000AA7A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AA7A                            ; ---------------------------------------------------------------------------
0000AA7A                            Map_obj1F:
0000AA7A                            	include "_maps\obj1F.asm"
0000AA7A                            ; ---------------------------------------------------------------------------
0000AA7A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AA7A                            ; ---------------------------------------------------------------------------
0000AA7A 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000AA7E 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000AA82 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000AA86 0000                       		dc.w byte_97D7-Map_obj1F
0000AA88 04                         byte_975E:	dc.b 4
0000AA89 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000AA8E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AA93 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AA98 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AA9D 04                         byte_9773:	dc.b 4
0000AA9E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000AAA3 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AAA8 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AAAD 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AAB2 04                         byte_9788:	dc.b 4
0000AAB3 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000AAB8 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AABD FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AAC2 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AAC7 04                         byte_979D:	dc.b 4
0000AAC8 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000AACD EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AAD2 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AAD7 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AADC 06                         byte_97B2:	dc.b 6
0000AADD F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000AAE2 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AAE7 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AAEC F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AAF1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AAF6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AAFB 01                         byte_97D1:	dc.b 1
0000AAFC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000AB01 01                         byte_97D7:	dc.b 1
0000AB02 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000AB08 00                         		even
0000AB08 00                         		even
0000AB08                            
0000AB08                            ; ===========================================================================
0000AB08                            ; ---------------------------------------------------------------------------
0000AB08                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AB08                            ; ---------------------------------------------------------------------------
0000AB08                            
0000AB08                            Obj22:					; XREF: Obj_Index
0000AB08 7000                       		moveq	#0,d0
0000AB0A 1028 0024                  		move.b	$24(a0),d0
0000AB0E 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000AB12 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000AB16                            ; ===========================================================================
0000AB16 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000AB18 0000                       		dc.w Obj22_Action-Obj22_Index
0000AB1A 0000                       		dc.w Obj22_Delete-Obj22_Index
0000AB1C                            ; ===========================================================================
0000AB1C                            
0000AB1C                            Obj22_Main:				; XREF: Obj22_Index
0000AB1C 5428 0024                  		addq.b	#2,$24(a0)
0000AB20 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000AB28 317C 0444 0002             		move.w	#$444,2(a0)
0000AB2E 117C 0004 0001             		move.b	#4,1(a0)
0000AB34 117C 0003 0018             		move.b	#3,$18(a0)
0000AB3A 117C 0008 0020             		move.b	#8,$20(a0)
0000AB40 117C 0018 0019             		move.b	#$18,$19(a0)
0000AB46                            
0000AB46                            Obj22_Action:				; XREF: Obj22_Index
0000AB46 7000                       		moveq	#0,d0
0000AB48 1028 0025                  		move.b	$25(a0),d0
0000AB4C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000AB50 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000AB54 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000AB5A 6100 0000                  		bsr.w	AnimateSprite
0000AB5E 6000 0000                  		bra.w	MarkObjGone
0000AB62                            ; ===========================================================================
0000AB62 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000AB64 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000AB66                            ; ===========================================================================
0000AB66                            
0000AB66                            Obj22_Move:				; XREF: Obj22_Index2
0000AB66 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AB6A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AB6C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AB72 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000AB74 5428 0025                  		addq.b	#2,$25(a0)
0000AB78 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000AB7E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000AB84 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000AB8A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AB90 6600                       		bne.s	locret_986C	; if not, branch
0000AB92 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AB96                            
0000AB96                            locret_986C:
0000AB96 4E75                       		rts	
0000AB98                            ; ===========================================================================
0000AB98                            
0000AB98                            Obj22_Fire:				; XREF: Obj22_Move
0000AB98 6100 0000                  		bsr.w	SingleObjLoad
0000AB9C 6600                       		bne.s	locret_98D0
0000AB9E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000ABA2 3368 0008 0008             		move.w	8(a0),8(a1)
0000ABA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ABAE 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000ABB4 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000ABBA 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000ABC0 303C 0018                  		move.w	#$18,d0
0000ABC4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000ABCA 6600                       		bne.s	loc_98AA	; if not, branch
0000ABCC 4440                       		neg.w	d0
0000ABCE 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000ABD2                            
0000ABD2                            loc_98AA:
0000ABD2 D169 0008                  		add.w	d0,8(a1)
0000ABD6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000ABDC 337C 000E 0032             		move.w	#$E,$32(a1)
0000ABE2 2348 003C                  		move.l	a0,$3C(a1)
0000ABE6 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000ABEC 317C 003B 0032             		move.w	#$3B,$32(a0)
0000ABF2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000ABF8                            
0000ABF8                            locret_98D0:
0000ABF8 4E75                       		rts	
0000ABFA                            ; ===========================================================================
0000ABFA                            
0000ABFA                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000ABFA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ABFE 6B00                       		bmi.s	Obj22_ChgDir
0000AC00 6100 0000                  		bsr.w	SpeedToPos
0000AC04 4A28 0034                  		tst.b	$34(a0)
0000AC08 6600                       		bne.s	locret_992A
0000AC0A 3038 D008                  		move.w	($FFFFD008).w,d0
0000AC0E 9068 0008                  		sub.w	8(a0),d0
0000AC12 6A00                       		bpl.s	Obj22_SetNrSonic
0000AC14 4440                       		neg.w	d0
0000AC16                            
0000AC16                            Obj22_SetNrSonic:
0000AC16 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000AC1A 6400                       		bcc.s	locret_992A	; if not, branch
0000AC1C 4A28 0001                  		tst.b	1(a0)
0000AC20 6A00                       		bpl.s	locret_992A
0000AC22 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AC28 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AC2E 6000                       		bra.s	Obj22_Stop
0000AC30                            ; ===========================================================================
0000AC30                            
0000AC30                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000AC30 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AC36 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AC3C 317C 003B 0032             		move.w	#59,$32(a0)
0000AC42                            
0000AC42                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000AC42 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000AC46 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AC4C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AC52                            
0000AC52                            locret_992A:
0000AC52 4E75                       		rts	
0000AC54                            ; ===========================================================================
0000AC54                            
0000AC54                            Obj22_Delete:				; XREF: Obj22_Index
0000AC54 6100 0000                  		bsr.w	DeleteObject
0000AC58 4E75                       		rts	
0000AC5A                            ; ===========================================================================
0000AC5A                            ; ---------------------------------------------------------------------------
0000AC5A                            ; Object 23 - missile that Buzz	Bomber throws
0000AC5A                            ; ---------------------------------------------------------------------------
0000AC5A                            
0000AC5A                            Obj23:					; XREF: Obj_Index
0000AC5A 7000                       		moveq	#0,d0
0000AC5C 1028 0024                  		move.b	$24(a0),d0
0000AC60 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000AC64 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000AC68                            ; ===========================================================================
0000AC68 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000AC6A 0000                       		dc.w Obj23_Animate-Obj23_Index
0000AC6C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000AC6E 0000                       		dc.w Obj23_Delete-Obj23_Index
0000AC70 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000AC72                            ; ===========================================================================
0000AC72                            
0000AC72                            Obj23_Main:				; XREF: Obj23_Index
0000AC72 5368 0032                  		subq.w	#1,$32(a0)
0000AC76 6A00                       		bpl.s	Obj23_ChkCancel
0000AC78 5428 0024                  		addq.b	#2,$24(a0)
0000AC7C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000AC84 317C 2444 0002             		move.w	#$2444,2(a0)
0000AC8A 117C 0004 0001             		move.b	#4,1(a0)
0000AC90 117C 0003 0018             		move.b	#3,$18(a0)
0000AC96 117C 0008 0019             		move.b	#8,$19(a0)
0000AC9C 0228 0003 0022             		andi.b	#3,$22(a0)
0000ACA2 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000ACA6 6700                       		beq.s	Obj23_Animate	; if not, branch
0000ACA8 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000ACAE 117C 0087 0020             		move.b	#$87,$20(a0)
0000ACB4 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACBA 6000                       		bra.s	Obj23_Animate2
0000ACBC                            ; ===========================================================================
0000ACBC                            
0000ACBC                            Obj23_Animate:				; XREF: Obj23_Index
0000ACBC 6100                       		bsr.s	Obj23_ChkCancel
0000ACBE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ACC4 6100 0000                  		bsr.w	AnimateSprite
0000ACC8 6000 0000                  		bra.w	DisplaySprite
0000ACCC                            ; ---------------------------------------------------------------------------
0000ACCC                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000ACCC                            ; destroyed, and if it has, then cancel	the missile
0000ACCC                            ; ---------------------------------------------------------------------------
0000ACCC                            
0000ACCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACCC                            
0000ACCC                            
0000ACCC                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000ACCC 2268 003C                  		movea.l	$3C(a0),a1
0000ACD0 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000ACD4 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000ACD6 4E75                       		rts	
0000ACD8                            ; End of function Obj23_ChkCancel
0000ACD8                            
0000ACD8                            ; ===========================================================================
0000ACD8                            
0000ACD8                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000ACD8 0828 0007 0022             		btst	#7,$22(a0)
0000ACDE 6600                       		bne.s	Obj23_Explode
0000ACE0 117C 0087 0020             		move.b	#$87,$20(a0)
0000ACE6 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACEC 6100 0000                  		bsr.w	SpeedToPos
0000ACF0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000ACF6 6100 0000                  		bsr.w	AnimateSprite
0000ACFA 6100 0000                  		bsr.w	DisplaySprite
0000ACFE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD02 0640 00E0                  		addi.w	#$E0,d0
0000AD06 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AD0A 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AD0C 4E75                       		rts	
0000AD0E                            ; ===========================================================================
0000AD0E                            
0000AD0E                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AD0E 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AD12 117C 0000 0024             		move.b	#0,$24(a0)
0000AD18 6000 F30A                  		bra.w	Obj24
0000AD1C                            ; ===========================================================================
0000AD1C                            
0000AD1C                            Obj23_Delete:				; XREF: Obj23_Index
0000AD1C 6100 0000                  		bsr.w	DeleteObject
0000AD20 4E75                       		rts	
0000AD22                            ; ===========================================================================
0000AD22                            
0000AD22                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AD22 4A28 0001                  		tst.b	1(a0)
0000AD26 6AF4                       		bpl.s	Obj23_Delete
0000AD28 6100 0000                  		bsr.w	SpeedToPos
0000AD2C                            
0000AD2C                            Obj23_Animate2:				; XREF: Obj23_Main
0000AD2C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AD32 6100 0000                  		bsr.w	AnimateSprite
0000AD36 6100 0000                  		bsr.w	DisplaySprite
0000AD3A 4E75                       		rts	
0000AD3C                            ; ===========================================================================
0000AD3C                            Ani_obj22:
0000AD3C                            	include "_anim\obj22.asm"
0000AD3C                            ; ---------------------------------------------------------------------------
0000AD3C                            ; Animation script - Buzz Bomber enemy
0000AD3C                            ; ---------------------------------------------------------------------------
0000AD3C 0000                       		dc.w byte_9A1E-Ani_obj22
0000AD3E 0000                       		dc.w byte_9A22-Ani_obj22
0000AD40 0000                       		dc.w byte_9A26-Ani_obj22
0000AD42 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AD46 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AD4A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AD4E                            		even
0000AD4E                            		even
0000AD4E                            
0000AD4E                            Ani_obj23:
0000AD4E                            	include "_anim\obj23.asm"
0000AD4E                            ; ---------------------------------------------------------------------------
0000AD4E                            ; Animation script - missile that Buzz Bomber throws
0000AD4E                            ; ---------------------------------------------------------------------------
0000AD4E 0000                       		dc.w byte_9A2E-Ani_obj23
0000AD50 0000                       		dc.w byte_9A32-Ani_obj23
0000AD52 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AD56 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AD5A                            		even
0000AD5A                            		even
0000AD5A                            
0000AD5A                            ; ---------------------------------------------------------------------------
0000AD5A                            ; Sprite mappings - Buzz Bomber	enemy
0000AD5A                            ; ---------------------------------------------------------------------------
0000AD5A                            Map_obj22:
0000AD5A                            	include "_maps\obj22.asm"
0000AD5A                            ; ---------------------------------------------------------------------------
0000AD5A                            ; Sprite mappings - Buzz Bomber	enemy
0000AD5A                            ; ---------------------------------------------------------------------------
0000AD5A 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AD5E 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AD62 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000AD66 06                         byte_9A42:	dc.b 6
0000AD67 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AD6C F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AD71 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AD76 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AD7B F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AD80 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AD85 06                         byte_9A61:	dc.b 6
0000AD86 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AD8B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AD90 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AD95 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AD9A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AD9F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ADA4 07                         byte_9A80:	dc.b 7
0000ADA5 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000ADAA F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADAF F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADB4 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADB9 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADBE F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000ADC3 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ADC8 07                         byte_9AA4:	dc.b 7
0000ADC9 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000ADCE F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000ADD3 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000ADD8 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000ADDD 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000ADE2 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ADE7 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ADEC 06                         byte_9AC8:	dc.b 6
0000ADED F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000ADF2 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000ADF7 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000ADFC 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE01 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AE06 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AE0B 04                         byte_9AE7:	dc.b 4
0000AE0C F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AE11 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AE16 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AE1B 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AE20 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AE25 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AE2A                            		even
0000AE2A                            		even
0000AE2A                            
0000AE2A                            ; ---------------------------------------------------------------------------
0000AE2A                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE2A                            ; ---------------------------------------------------------------------------
0000AE2A                            Map_obj23:
0000AE2A                            	include "_maps\obj23.asm"
0000AE2A                            ; ---------------------------------------------------------------------------
0000AE2A                            ; Sprite mappings - missile that Buzz Bomber throws
0000AE2A                            ; ---------------------------------------------------------------------------
0000AE2A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AE2E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AE32 01                         byte_9B0E:	dc.b 1
0000AE33 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AE38 01                         byte_9B14:	dc.b 1
0000AE39 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AE3E 01                         byte_9B1A:	dc.b 1
0000AE3F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AE44 01                         byte_9B20:	dc.b 1
0000AE45 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AE4A                            		even
0000AE4A                            		even
0000AE4A                            
0000AE4A                            ; ===========================================================================
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            ; Object 25 - rings
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            
0000AE4A                            Obj25:					; XREF: Obj_Index
0000AE4A 7000                       		moveq	#0,d0
0000AE4C 1028 0024                  		move.b	$24(a0),d0
0000AE50 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AE54 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AE58                            ; ===========================================================================
0000AE58 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AE5A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AE5C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AE5E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AE60 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AE62                            ; ===========================================================================
0000AE62                            
0000AE62                            Obj25_Main:				; XREF: Obj25_Index		addq.b	#2,$24(a0)
0000AE62 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AE68 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0)
0000AE70 317C 26BA 0002             		move.w	#($2000+ringart),2(a0)
0000AE76 117C 0004 0001             		move.b	#4,1(a0)
0000AE7C 117C 0002 0018             		move.b	#2,$18(a0)
0000AE82 117C 0047 0020             		move.b	#$47,$20(a0)
0000AE88 117C 0008 0019             		move.b	#8,$19(a0)
0000AE8E                            
0000AE8E                            Obj25_Animate:				; XREF: Obj25_Index
0000AE8E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AE94 3028 0032                  		move.w	$32(a0),d0
0000AE98 6000 0000                  		bra.w	MarkObjGone
0000AE9C                            ; ===========================================================================
0000AE9C                            
0000AE9C                            Obj25_Collect:				; XREF: Obj25_Index
0000AE9C 5428 0024                  		addq.b	#2,$24(a0)
0000AEA0 117C 0000 0020             		move.b	#0,$20(a0)
0000AEA6 317C 0080 0018             		move.w	#$80,$18(a0)
0000AEAC 6100 0000                  		bsr.w	CollectRing
0000AEB0                            
0000AEB0                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AEB0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AEB6 6100 0000                  		bsr.w	AnimateSprite
0000AEBA 6000 0000                  		bra.w	DisplaySprite
0000AEBE                            ; ===========================================================================
0000AEBE                            
0000AEBE                            Obj25_Delete:				; XREF: Obj25_Index
0000AEBE 6000 0000                  		bra.w	DeleteObject
0000AEC2                            
0000AEC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEC2                            
0000AEC2                            
0000AEC2                            CollectRing:				; XREF: Obj25_Collect
0000AEC2 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AEC6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AECC 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AED0 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AED6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AED8 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AEDE 6700                       		beq.s	loc_9CA4
0000AEE0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AEE6 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AEE8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AEEE 6600                       		bne.s	Obj25_PlaySnd
0000AEF0                            
0000AEF0                            loc_9CA4:
0000AEF0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AEF4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AEF8 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AEFC                            
0000AEFC                            Obj25_PlaySnd:
0000AEFC 4EF9 0000 11F6             		jmp	(PlaySound_Special).l
0000AF02                            ; End of function CollectRing
0000AF02                            
0000AF02                            ; ===========================================================================
0000AF02                            ; ---------------------------------------------------------------------------
0000AF02                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AF02                            ; ---------------------------------------------------------------------------
0000AF02                            
0000AF02                            Obj37:					; XREF: Obj_Index
0000AF02 7000                       		moveq	#0,d0
0000AF04 1028 0024                  		move.b	$24(a0),d0
0000AF08 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AF0C 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AF10                            ; ===========================================================================
0000AF10 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AF12 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AF14 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AF16 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AF18 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AF1A                            ; ===========================================================================
0000AF1A                            
0000AF1A                            Obj37_CountRings:			; XREF: Obj37_Index
0000AF1A 2248                       		movea.l	a0,a1
0000AF1C 7A00                       		moveq	#0,d5
0000AF1E 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AF22 7020                       		moveq	#32,d0
0000AF24 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AF26 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AF28 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AF2A                            
0000AF2A                            loc_9CDE:
0000AF2A 5345                       		subq.w	#1,d5
0000AF2C 383C 0288                  		move.w	#$288,d4
0000AF30 6000                       		bra.s	Obj37_MakeRings
0000AF32                            ; ===========================================================================
0000AF32                            
0000AF32                            Obj37_Loop:
0000AF32 6100 0000                  		bsr.w	SingleObjLoad
0000AF36 6600 0000                  		bne.w	Obj37_ResetCounter
0000AF3A                            
0000AF3A                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AF3A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AF3E 5429 0024                  		addq.b	#2,$24(a1)
0000AF42 137C 0008 0016             		move.b	#8,$16(a1)
0000AF48 137C 0008 0017             		move.b	#8,$17(a1)
0000AF4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AF54 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AF5A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AF62 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
0000AF68 137C 0004 0001             		move.b	#4,1(a1)
0000AF6E 137C 0003 0018             		move.b	#3,$18(a1)
0000AF74 137C 0047 0020             		move.b	#$47,$20(a1)
0000AF7A 137C 0008 0019             		move.b	#8,$19(a1)
0000AF80 4A44                       		tst.w	d4
0000AF82 6B00                       		bmi.s	loc_9D62
0000AF84 3004                       		move.w	d4,d0
0000AF86 4EB9 0000 29CC             		jsr	(CalcSine).l
0000AF8C 3404                       		move.w	d4,d2
0000AF8E E04A                       		lsr.w	#8,d2
0000AF90 E560                       		asl.w	d2,d0
0000AF92 E561                       		asl.w	d2,d1
0000AF94 3400                       		move.w	d0,d2
0000AF96 3601                       		move.w	d1,d3
0000AF98 0604 0010                  		addi.b	#$10,d4
0000AF9C 6400                       		bcc.s	loc_9D62
0000AF9E 0444 0080                  		subi.w	#$80,d4
0000AFA2 6400                       		bcc.s	loc_9D62
0000AFA4 383C 0288                  		move.w	#$288,d4
0000AFA8                            
0000AFA8                            loc_9D62:
0000AFA8 3342 0010                  		move.w	d2,$10(a1)
0000AFAC 3343 0012                  		move.w	d3,$12(a1)
0000AFB0 4442                       		neg.w	d2
0000AFB2 4444                       		neg.w	d4
0000AFB4 51CD FF7C                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AFB8                            
0000AFB8                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AFB8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AFBE 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AFC4 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AFCA 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000AFCC 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000AFD0 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)		
0000AFD4 303C 00C6                  		move.w	#$C6,d0
0000AFD8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AFDE                            
0000AFDE                            Obj37_Bounce:				; XREF: Obj37_Index
0000AFDE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AFE4 6100 0000                  		bsr.w	SpeedToPos
0000AFE8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AFEE 6B00                       		bmi.s	Obj37_ChkDel
0000AFF0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AFF4 D007                       		add.b	d7,d0
0000AFF6 0200 0003                  		andi.b	#3,d0
0000AFFA 6600                       		bne.s	Obj37_ChkDel
0000AFFC 4EB9 0000 0000             		jsr	ObjHitFloor
0000B002 4A41                       		tst.w	d1
0000B004 6A00                       		bpl.s	Obj37_ChkDel
0000B006 D368 000C                  		add.w	d1,$C(a0)
0000B00A 3028 0012                  		move.w	$12(a0),d0
0000B00E E440                       		asr.w	#2,d0
0000B010 9168 0012                  		sub.w	d0,$12(a0)
0000B014 4468 0012                  		neg.w	$12(a0)
0000B018                            
0000B018                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000B018 5328 001F                  		subq.b	#1,$1F(a0)	; Subtract 1
0000B01C 6700 0000                  		beq.w	DeleteObject		; If 0, delete
0000B020 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000B026 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000B02A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B02E 0640 00E0                  		addi.w	#$E0,d0
0000B032 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000B036 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000B038 6000 0000                  		bra.w	DisplaySprite
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            Obj37_Collect:				; XREF: Obj37_Index
0000B03C 5428 0024                  		addq.b	#2,$24(a0)
0000B040 117C 0000 0020             		move.b	#0,$20(a0)
0000B046 117C 0001 0018             		move.b	#1,$18(a0)
0000B04C 6100 FE74                  		bsr.w	CollectRing
0000B050                            
0000B050                            Obj37_Sparkle:				; XREF: Obj37_Index
0000B050 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000B056 6100 0000                  		bsr.w	AnimateSprite
0000B05A 6000 0000                  		bra.w	DisplaySprite
0000B05E                            ; ===========================================================================
0000B05E                            
0000B05E                            Obj37_Delete:				; XREF: Obj37_Index
0000B05E 6000 0000                  		bra.w	DeleteObject
0000B062                            ; ===========================================================================
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            ; Object 4B - giant ring for entry to special stage
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            
0000B062                            Obj4B:					; XREF: Obj_Index
0000B062 7000                       		moveq	#0,d0
0000B064 1028 0024                  		move.b	$24(a0),d0
0000B068 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000B06C 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000B070                            ; ===========================================================================
0000B070 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000B072 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000B074 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000B076 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000B078                            ; ===========================================================================
0000B078                            
0000B078                            Obj4B_Main:				; XREF: Obj4B_Index
0000B078 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000B080 317C 2400 0002             		move.w	#$2400,2(a0)
0000B086 0028 0004 0001             		ori.b	#4,1(a0)
0000B08C 117C 0040 0019             		move.b	#$40,$19(a0)
0000B092 4A28 0001                  		tst.b	1(a0)
0000B096 6A00                       		bpl.s	Obj4B_Animate
0000B098 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000B09E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000B0A2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000B0A8 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000B0AA 4EF9 0000 0000             		jmp	(DeleteObject).l
0000B0B0                            
0000B0B0                            ; ===========================================================================
0000B0B0                            
0000B0B0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000B0B0 5428 0024                  		addq.b	#2,$24(a0)
0000B0B4 117C 0002 0018             		move.b	#2,$18(a0)
0000B0BA 117C 0052 0020             		move.b	#$52,$20(a0)
0000B0C0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000B0C6                            
0000B0C6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000B0C6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000B0CC 3028 0008                  		move.w	8(a0),d0
0000B0D0 0240 FF80                  		andi.w	#$FF80,d0
0000B0D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000B0D8 0441 0080                  		subi.w	#$80,d1
0000B0DC 0241 FF80                  		andi.w	#$FF80,d1
0000B0E0 9041                       		sub.w	d1,d0
0000B0E2 0C40 0280                  		cmpi.w	#$280,d0
0000B0E6 6300 0000                  		bls.w	DisplaySprite
0000B0EA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B0EE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B0F2 3440                       		movea.w	d0,a2	; load address into a2
0000B0F4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B0F8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B0FC                            ; ===========================================================================
0000B0FC                            
0000B0FC                            Obj4B_Collect:				; XREF: Obj4B_Index
0000B0FC 5528 0024                  		subq.b	#2,$24(a0)
0000B100 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B106 11FC 0040 F5D0             		move.b	#$40,(SonimeSST+sonime_facetimer).w
0000B10C 117C 0000 0020             		move.b	#0,$20(a0)
0000B112 6100 0000                  		bsr.w	SingleObjLoad
0000B116 6600 0000                  		bne.w	Obj4B_PlaySnd
0000B11A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000B11E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B124 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B12A 2348 003C                  		move.l	a0,$3C(a1)
0000B12E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B132 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000B136 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000B138 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000B13E                            
0000B13E                            Obj4B_PlaySnd:
0000B13E 303C 00C3                  		move.w	#$C3,d0
0000B142 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000B148 6000 FF7C                  		bra.w	Obj4B_Animate
0000B14C                            ; ===========================================================================
0000B14C                            
0000B14C                            Obj4B_Delete:				; XREF: Obj4B_Index
0000B14C 6000 0000                  		bra.w	DeleteObject
0000B150                            ; ===========================================================================
0000B150                            ; ---------------------------------------------------------------------------
0000B150                            ; Object 7C - flash effect when	you collect the	giant ring
0000B150                            ; ---------------------------------------------------------------------------
0000B150                            
0000B150                            Obj7C:					; XREF: Obj_Index
0000B150 7000                       		moveq	#0,d0
0000B152 1028 0024                  		move.b	$24(a0),d0
0000B156 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000B15A 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000B15E                            ; ===========================================================================
0000B15E 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000B160 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000B162 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000B164                            ; ===========================================================================
0000B164                            
0000B164                            Obj7C_Main:				; XREF: Obj7C_Index
0000B164 5428 0024                  		addq.b	#2,$24(a0)
0000B168 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000B170 317C 2462 0002             		move.w	#$2462,2(a0)
0000B176 0028 0004 0001             		ori.b	#4,1(a0)
0000B17C 117C 0000 0018             		move.b	#0,$18(a0)
0000B182 117C 0020 0019             		move.b	#$20,$19(a0)
0000B188 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000B18E                            
0000B18E                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000B18E 6100                       		bsr.s	Obj7C_Collect
0000B190 3028 0008                  		move.w	8(a0),d0
0000B194 0240 FF80                  		andi.w	#$FF80,d0
0000B198 3238 F700                  		move.w	($FFFFF700).w,d1
0000B19C 0441 0080                  		subi.w	#$80,d1
0000B1A0 0241 FF80                  		andi.w	#$FF80,d1
0000B1A4 9041                       		sub.w	d1,d0
0000B1A6 0C40 0280                  		cmpi.w	#$280,d0
0000B1AA 6300 0000                  		bls.w	DisplaySprite
0000B1AE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B1B2 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000B1B6 3440                       		movea.w	d0,a2	; load address into a2
0000B1B8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000B1BC 6000 0000                  		bra.w	DeleteObject	; and delete object
0000B1C0                            
0000B1C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1C0                            
0000B1C0                            
0000B1C0                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B1C0 5328 001E                  		subq.b	#1,$1E(a0)
0000B1C4 6A00                       		bpl.s	locret_9F76
0000B1C6 117C 0001 001E             		move.b	#1,$1E(a0)
0000B1CC 5228 001A                  		addq.b	#1,$1A(a0)
0000B1D0 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B1D6 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B1D8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B1DE 6600                       		bne.s	locret_9F76	; if not, branch
0000B1E0 2268 003C                  		movea.l	$3C(a0),a1
0000B1E4 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B1EA 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B1F0 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B1F6 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B1FA 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B1FE                            
0000B1FE                            locret_9F76:
0000B1FE 4E75                       		rts	
0000B200                            ; ===========================================================================
0000B200                            
0000B200                            Obj7C_End:				; XREF: Obj7C_Collect
0000B200 5428 0024                  		addq.b	#2,$24(a0)
0000B204 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B20A 588F                       		addq.l	#4,sp
0000B20C 4E75                       		rts	
0000B20E                            ; End of function Obj7C_Collect
0000B20E                            
0000B20E                            ; ===========================================================================
0000B20E                            
0000B20E                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B20E 6000 0000                  		bra.w	DeleteObject
0000B212                            ; ===========================================================================
0000B212                            Ani_obj25:
0000B212                            	include "_anim\obj25.asm"
0000B212                            ; ---------------------------------------------------------------------------
0000B212                            ; Animation script - ring
0000B212                            ; ---------------------------------------------------------------------------
0000B212 0000                       		dc.w byte_9F8C-Ani_obj25
0000B214 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B21A                            		even
0000B21A                            		even
0000B21A                            
0000B21A                            ; ---------------------------------------------------------------------------
0000B21A                            ; Sprite mappings - rings
0000B21A                            ; ---------------------------------------------------------------------------
0000B21A                            Map_obj25:
0000B21A                            	include "_maps\obj25.asm"
0000B21A                            ; ---------------------------------------------------------------------------
0000B21A                            ; Sprite mappings - rings
0000B21A                            ; ---------------------------------------------------------------------------
0000B21A 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B21E 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B222 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B226 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B22A 01                         byte_9FA2:	dc.b 1
0000B22B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B230 01                         byte_9FA8:	dc.b 1
0000B231 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B236 01                         byte_9FAE:	dc.b 1
0000B237 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B23C 01                         byte_9FB4:	dc.b 1
0000B23D F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B242 01                         byte_9FBA:	dc.b 1
0000B243 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B248 01                         byte_9FC0:	dc.b 1
0000B249 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B24E 01                         byte_9FC6:	dc.b 1
0000B24F F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B254 01                         byte_9FCC:	dc.b 1
0000B255 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B25A                            		even
0000B25A                            		even
0000B25A                            
0000B25A                            ; ---------------------------------------------------------------------------
0000B25A                            ; Sprite mappings - giant ring
0000B25A                            ; ---------------------------------------------------------------------------
0000B25A                            Map_obj4B:
0000B25A                            	include "_maps\obj4B.asm"
0000B25A                            ; ---------------------------------------------------------------------------
0000B25A                            ; Sprite mappings - giant ring
0000B25A                            ; ---------------------------------------------------------------------------
0000B25A 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B25E 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B262 0A                         byte_9FDA:	dc.b $A
0000B263 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B268 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B26D E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B272 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B277 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B27C F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B281 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B286 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B28B 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B290 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B295 08                         byte_A00D:	dc.b 8
0000B296 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B29B E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B2A0 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B2A5 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B2AA F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B2AF 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B2B4 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B2B9 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B2BE 04                         byte_A036:	dc.b 4
0000B2BF E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B2C4 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B2C9 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B2CE 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B2D3 08                         byte_A04B:	dc.b 8
0000B2D4 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B2D9 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B2DE E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B2E3 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B2E8 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B2ED 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B2F2 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B2F7 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B2FC                            		even
0000B2FC                            		even
0000B2FC                            
0000B2FC                            ; ---------------------------------------------------------------------------
0000B2FC                            ; Sprite mappings - flash effect when you collect the giant ring
0000B2FC                            ; ---------------------------------------------------------------------------
0000B2FC                            Map_obj7C:
0000B2FC                            	include "_maps\obj7C.asm"
0000B2FC                            ; ---------------------------------------------------------------------------
0000B2FC                            ; Sprite mappings - flash effect when you collect the giant ring
0000B2FC                            ; ---------------------------------------------------------------------------
0000B2FC 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B300 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B304 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B308 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B30C 02                         byte_A084:	dc.b 2
0000B30D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B312 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B317 04                         byte_A08F:	dc.b 4
0000B318 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B31D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B322 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B327 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B32C 04                         byte_A0A4:	dc.b 4
0000B32D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B332 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B337 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B33C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B341 04                         byte_A0B9:	dc.b 4
0000B342 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B347 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B34C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B351 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B356 04                         byte_A0CE:	dc.b 4
0000B357 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B35C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B361 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B366 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B36B 04                         byte_A0E3:	dc.b 4
0000B36C E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B371 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B376 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B37B 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B380 02                         byte_A0F8:	dc.b 2
0000B381 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B386 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B38B 04                         byte_A103:	dc.b 4
0000B38C E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B391 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B396 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B39B 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B3A0                            		even
0000B3A0                            		even
0000B3A0                            
0000B3A0                            ; ===========================================================================
0000B3A0                            ; ---------------------------------------------------------------------------
0000B3A0                            ; Object 26 - monitors
0000B3A0                            ; ---------------------------------------------------------------------------
0000B3A0                            
0000B3A0                            Obj26:					; XREF: Obj_Index
0000B3A0 7000                       		moveq	#0,d0
0000B3A2 1028 0024                  		move.b	$24(a0),d0
0000B3A6 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B3AA 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B3AE                            ; ===========================================================================
0000B3AE 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B3B0 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B3B2 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B3B4 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B3B6 0000                       		dc.w Obj26_Display-Obj26_Index
0000B3B8                            ; ===========================================================================
0000B3B8                            
0000B3B8                            Obj26_Main:				; XREF: Obj26_Index
0000B3B8 5428 0024                  		addq.b	#2,$24(a0)
0000B3BC 117C 000E 0016             		move.b	#$E,$16(a0)
0000B3C2 117C 000E 0017             		move.b	#$E,$17(a0)
0000B3C8 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B3D0 317C 0680 0002             		move.w	#$680,2(a0)
0000B3D6 117C 0004 0001             		move.b	#4,1(a0)
0000B3DC 117C 0003 0018             		move.b	#3,$18(a0)
0000B3E2 117C 000F 0019             		move.b	#$F,$19(a0)
0000B3E8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B3EC 3440                       		movea.w	d0,a2	; load address into a2
0000B3EE 0812 0000                  		btst	#0,(a2)	; has monitor been broken?
0000B3F2 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B3F4 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B3FA 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B400 4E75                       		rts	
0000B402                            ; ===========================================================================
0000B402                            
0000B402                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B402 117C 0046 0020             		move.b	#$46,$20(a0)
0000B408 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B40E                            
0000B40E                            Obj26_Solid:				; XREF: Obj26_Index
0000B40E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B412 6700                       		beq.s	loc_A1EC	; if not, branch
0000B414 5500                       		subq.b	#2,d0
0000B416 6600                       		bne.s	Obj26_Fall
0000B418 7200                       		moveq	#0,d1
0000B41A 1228 0019                  		move.b	$19(a0),d1
0000B41E 0641 000B                  		addi.w	#$B,d1
0000B422 6100 D260                  		bsr.w	ExitPlatform
0000B426 0829 0003 0022             		btst	#3,$22(a1)
0000B42C 6600 0000                  		bne.w	loc_A1BC
0000B430 4228 0025                  		clr.b	$25(a0)
0000B434 6000 0000                  		bra.w	Obj26_Animate
0000B438                            ; ===========================================================================
0000B438                            
0000B438                            loc_A1BC:				; XREF: Obj26_Solid
0000B438 363C 0010                  		move.w	#$10,d3
0000B43C 3428 0008                  		move.w	8(a0),d2
0000B440 6100 D7AC                  		bsr.w	MvSonicOnPtfm
0000B444 6000 0000                  		bra.w	Obj26_Animate
0000B448                            ; ===========================================================================
0000B448                            
0000B448                            Obj26_Fall:				; XREF: Obj26_Solid
0000B448 6100 0000                  		bsr.w	ObjectFall
0000B44C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B452 4A41                       		tst.w	d1
0000B454 6A00 0000                  		bpl.w	Obj26_Animate
0000B458 D368 000C                  		add.w	d1,$C(a0)
0000B45C 4268 0012                  		clr.w	$12(a0)
0000B460 4228 0025                  		clr.b	$25(a0)
0000B464 6000 0000                  		bra.w	Obj26_Animate
0000B468                            ; ===========================================================================
0000B468                            
0000B468                            loc_A1EC:				; XREF: Obj26_Solid
0000B468 323C 001A                  		move.w	#$1A,d1
0000B46C 343C 000F                  		move.w	#$F,d2
0000B470 6100 0000                  		bsr.w	Obj26_SolidSides
0000B474 6700 0000                  		beq.w	loc_A25C
0000B478 4A69 0012                  		tst.w	$12(a1)
0000B47C 6B00                       		bmi.s	loc_A20A
0000B47E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B484 6700                       		beq.s	loc_A25C	; if yes, branch
0000B486                            
0000B486                            loc_A20A:
0000B486 4A41                       		tst.w	d1
0000B488 6A00                       		bpl.s	loc_A220
0000B48A 9769 000C                  		sub.w	d3,$C(a1)
0000B48E 6100 D0E2                  		bsr.w	loc_74AE
0000B492 117C 0002 0025             		move.b	#2,$25(a0)
0000B498 6000 0000                  		bra.w	Obj26_Animate
0000B49C                            ; ===========================================================================
0000B49C                            
0000B49C                            loc_A220:
0000B49C 4A40                       		tst.w	d0
0000B49E 6700 0000                  		beq.w	loc_A246
0000B4A2 6B00                       		bmi.s	loc_A230
0000B4A4 4A69 0010                  		tst.w	$10(a1)
0000B4A8 6B00                       		bmi.s	loc_A246
0000B4AA 6000                       		bra.s	loc_A236
0000B4AC                            ; ===========================================================================
0000B4AC                            
0000B4AC                            loc_A230:
0000B4AC 4A69 0010                  		tst.w	$10(a1)
0000B4B0 6A00                       		bpl.s	loc_A246
0000B4B2                            
0000B4B2                            loc_A236:
0000B4B2 9169 0008                  		sub.w	d0,8(a1)
0000B4B6 337C 0000 0020             		move.w	#0,$20(a1)
0000B4BC 337C 0000 0010             		move.w	#0,$10(a1)
0000B4C2                            
0000B4C2                            loc_A246:
0000B4C2 0829 0001 0022             		btst	#1,$22(a1)
0000B4C8 6600                       		bne.s	loc_A26A
0000B4CA 08E9 0005 0022             		bset	#5,$22(a1)
0000B4D0 08E8 0005 0022             		bset	#5,$22(a0)
0000B4D6 6000                       		bra.s	Obj26_Animate
0000B4D8                            ; ===========================================================================
0000B4D8                            
0000B4D8                            loc_A25C:
0000B4D8 0828 0005 0022             		btst	#5,$22(a0)
0000B4DE 6700                       		beq.s	Obj26_Animate
0000B4E0 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B4E6 6700                       		beq.s	loc_A26A
0000B4E8 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B4EE 6700                       		beq.s	loc_A26A
0000B4F0 337C 0001 001C             		move.w	#1,$1C(a1)
0000B4F6                            
0000B4F6                            loc_A26A:
0000B4F6 08A8 0005 0022             		bclr	#5,$22(a0)
0000B4FC 08A9 0005 0022             		bclr	#5,$22(a1)
0000B502                            
0000B502                            Obj26_Animate:				; XREF: Obj26_Index
0000B502 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B508 6100 0000                  		bsr.w	AnimateSprite
0000B50C                            
0000B50C                            Obj26_Display:				; XREF: Obj26_Index
0000B50C 6000 0000                  		bra.w	MarkObjGone
0000B510                            ; ===========================================================================
0000B510                            
0000B510                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B510 5428 0024                  		addq.b	#2,$24(a0)
0000B514 117C 0000 0020             		move.b	#0,$20(a0)
0000B51A 6100 0000                  		bsr.w	SingleObjLoad
0000B51E 6600                       		bne.s	Obj26_Explode
0000B520 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B524 3368 0008 0008             		move.w	8(a0),8(a1)
0000B52A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B530 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B536                            
0000B536                            Obj26_Explode:
0000B536 6100 0000                  		bsr.w	SingleObjLoad
0000B53A 6600                       		bne.s	Obj26_SetBroken
0000B53C 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000B540 5429 0024                  		addq.b	#2,$24(a1)
0000B544 3368 0008 0008             		move.w	8(a0),8(a1)
0000B54A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B550                            
0000B550                            Obj26_SetBroken:
0000B550 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000B554 6700                       		beq.s	@notremembered			; If it's zero, it isn't remembered
0000B556 3440                       		movea.w	d0,a2	; load address into a2
0000B558 08D2 0000                  		bset	#0,(a2)
0000B55C                            
0000B55C                            	@notremembered:
0000B55C 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B562 6000 0000                  		bra.w	DisplaySprite
0000B566                            ; ===========================================================================
0000B566                            ; ---------------------------------------------------------------------------
0000B566                            ; Object 2E - contents of monitors
0000B566                            ; ---------------------------------------------------------------------------
0000B566                            
0000B566                            Obj2E:					; XREF: Obj_Index
0000B566 7000                       		moveq	#0,d0
0000B568 1028 0024                  		move.b	$24(a0),d0
0000B56C 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B570 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B574 6000 0000                  		bra.w	DisplaySprite
0000B578                            ; ===========================================================================
0000B578 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B57A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B57C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B57E                            ; ===========================================================================
0000B57E                            
0000B57E                            Obj2E_Main:				; XREF: Obj2E_Index
0000B57E 5428 0024                  		addq.b	#2,$24(a0)
0000B582 317C 0680 0002             		move.w	#$680,2(a0)
0000B588 117C 0024 0001             		move.b	#$24,1(a0)
0000B58E 117C 0003 0018             		move.b	#3,$18(a0)
0000B594 117C 0008 0019             		move.b	#8,$19(a0)
0000B59A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B5A0 7000                       		moveq	#0,d0
0000B5A2 1028 001C                  		move.b	$1C(a0),d0
0000B5A6 5400                       		addq.b	#2,d0
0000B5A8 1140 001A                  		move.b	d0,$1A(a0)
0000B5AC 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B5B2 D000                       		add.b	d0,d0
0000B5B4 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B5B8 5249                       		addq.w	#1,a1
0000B5BA 2149 0004                  		move.l	a1,4(a0)
0000B5BE                            
0000B5BE                            Obj2E_Move:				; XREF: Obj2E_Index
0000B5BE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B5C2 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B5C6 6100 0000                  		bsr.w	SpeedToPos
0000B5CA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B5D0 4E75                       		rts	
0000B5D2                            ; ===========================================================================
0000B5D2                            
0000B5D2                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B5D2 5428 0024                  		addq.b	#2,$24(a0)
0000B5D6 317C 001D 001E             		move.w	#29,$1E(a0)
0000B5DC 1028 001C                  		move.b	$1C(a0),d0
0000B5E0 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B5E4 6600                       		bne.s	Obj2E_ChkSonic
0000B5E6 4E75                       		rts			; Eggman monitor does nothing
0000B5E8                            ; ===========================================================================
0000B5E8                            
0000B5E8                            Obj2E_ChkSonic:
0000B5E8 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B5EC 6600                       		bne.s	Obj2E_ChkShoes
0000B5EE                            
0000B5EE                            ExtraLife:
0000B5EE 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B5F4 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B5FA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B5FE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B602 303C 0088                  		move.w	#$88,d0
0000B606 4EF9 0000 11F0             		jmp	(PlaySound).l	; play extra life music
0000B60C                            ; ===========================================================================
0000B60C                            
0000B60C                            Obj2E_ChkShoes:
0000B60C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B610 6600                       		bne.s	Obj2E_ChkShield
0000B612 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B618 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B61E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B624 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B62A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B630 303C 00E2                  		move.w	#$E2,d0
0000B634 4EF9 0000 11F0             		jmp	(PlaySound).l	; Speed	up the music
0000B63A                            ; ===========================================================================
0000B63A                            
0000B63A                            Obj2E_ChkShield:
0000B63A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B63E 6600                       		bne.s	Obj2E_ChkInvinc
0000B640 4A38 FE2C                  		tst.b	($FFFFFE2C).w
0000B644 6600                       		bne.s	@alreadyshield
0000B646 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B64C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B652 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B658 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B65E                            
0000B65E                            	@alreadyshield:
0000B65E 303C 00AF                  		move.w	#$AF,d0
0000B662 4EF9 0000 11F0             		jmp	(PlaySound).l	; play shield sound
0000B668                            ; ===========================================================================
0000B668                            
0000B668                            Obj2E_ChkInvinc:
0000B668 0C00 0005                  		cmpi.b #5,d0 ; does monitor contain invincibility?
0000B66C 6600 0000                  		bne.w Obj2E_ChkRings
0000B670 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0000B676 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000B67C 11FC 0001 FE2D             		move.b #1,($FFFFFE2D).w ; Set Invisibility to 1
0000B682 31FC 04B0 D032             		move.w #$4B0,($FFFFD032).w ; Set Invisibility timer to 4B0
0000B688 11FC 004A D200             		move.b #$4A,($FFFFD200).w ; load stars object ($3801)
0000B68E 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B694 4A38 F7AA                  		tst.b ($FFFFF7AA).w ; is boss mode on?
0000B698 6600                       		bne.s DontPlayMusic ; If so, don't play music
0000B69A 0C78 000C FE14             		cmpi.w #$C,($FFFFFE14).w ; Check if Sonic has air left
0000B6A0 6300                       		bls.s DontPlayMusic ; If so, don't play music
0000B6A2 303C 0087                  		move.w #$87,d0 ; Load Invisibility music
0000B6A6 4EF9 0000 11F0             		jmp (PlaySound).l
0000B6AC                            
0000B6AC                            DontPlayMusic:
0000B6AC 4E75                       		rts
0000B6AE                            ; ===========================================================================
0000B6AE                            
0000B6AE                            Obj2E_NoMusic:
0000B6AE 4E75                       		rts	
0000B6B0                            ; ===========================================================================
0000B6B0                            
0000B6B0                            Obj2E_ChkRings:
0000B6B0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B6B4 6600                       		bne.s	Obj2E_ChkS
0000B6B6 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B6BC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B6C2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B6C8 6500                       		bcs.s	Obj2E_RingSound
0000B6CA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B6D0 6700 FF1C                  		beq.w	ExtraLife
0000B6D4 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B6DA 6500                       		bcs.s	Obj2E_RingSound
0000B6DC 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B6E2 6700 FF0A                  		beq.w	ExtraLife
0000B6E6                            
0000B6E6                            Obj2E_RingSound:
0000B6E6 303C 00B5                  		move.w	#$B5,d0
0000B6EA 4EF9 0000 11F0             		jmp	(PlaySound).l	; play ring sound
0000B6F0                            ; ===========================================================================
0000B6F0                            
0000B6F0                            Obj2E_ChkS:
0000B6F0 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B6F4 6600                       		bne.s	Obj2E_ChkEnd
0000B6F6 4E71                       		nop	
0000B6F8                            
0000B6F8                            Obj2E_ChkEnd:
0000B6F8 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B6FA                            ; ===========================================================================
0000B6FA                            
0000B6FA                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B6FA 5368 001E                  		subq.w	#1,$1E(a0)
0000B6FE 6B00 0000                  		bmi.w	DeleteObject
0000B702 4E75                       		rts	
0000B704                            ; ---------------------------------------------------------------------------
0000B704                            ; Subroutine to	make the sides of a monitor solid
0000B704                            ; ---------------------------------------------------------------------------
0000B704                            
0000B704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B704                            
0000B704                            
0000B704                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B704 43F8 D000                  		lea	($FFFFD000).w,a1
0000B708 3029 0008                  		move.w	8(a1),d0
0000B70C 9068 0008                  		sub.w	8(a0),d0
0000B710 D041                       		add.w	d1,d0
0000B712 6B00                       		bmi.s	loc_A4E6
0000B714 3601                       		move.w	d1,d3
0000B716 D643                       		add.w	d3,d3
0000B718 B043                       		cmp.w	d3,d0
0000B71A 6200                       		bhi.s	loc_A4E6
0000B71C 1629 0016                  		move.b	$16(a1),d3
0000B720 4883                       		ext.w	d3
0000B722 D443                       		add.w	d3,d2
0000B724 3629 000C                  		move.w	$C(a1),d3
0000B728 9668 000C                  		sub.w	$C(a0),d3
0000B72C D642                       		add.w	d2,d3
0000B72E 6B00                       		bmi.s	loc_A4E6
0000B730 D442                       		add.w	d2,d2
0000B732 B642                       		cmp.w	d2,d3
0000B734 6400                       		bcc.s	loc_A4E6
0000B736 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B73A 6B00                       		bmi.s	loc_A4E6
0000B73C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B742 6400                       		bcc.s	loc_A4E6
0000B744 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B748 6600                       		bne.s	loc_A4E6
0000B74A B240                       		cmp.w	d0,d1
0000B74C 6400                       		bcc.s	loc_A4DC
0000B74E D241                       		add.w	d1,d1
0000B750 9041                       		sub.w	d1,d0
0000B752                            
0000B752                            loc_A4DC:
0000B752 0C43 0010                  		cmpi.w	#$10,d3
0000B756 6500                       		bcs.s	loc_A4EA
0000B758                            
0000B758                            loc_A4E2:
0000B758 7201                       		moveq	#1,d1
0000B75A 4E75                       		rts	
0000B75C                            ; ===========================================================================
0000B75C                            
0000B75C                            loc_A4E6:
0000B75C 7200                       		moveq	#0,d1
0000B75E 4E75                       		rts	
0000B760                            ; ===========================================================================
0000B760                            
0000B760                            loc_A4EA:
0000B760 7200                       		moveq	#0,d1
0000B762 1228 0019                  		move.b	$19(a0),d1
0000B766 5841                       		addq.w	#4,d1
0000B768 3401                       		move.w	d1,d2
0000B76A D442                       		add.w	d2,d2
0000B76C D269 0008                  		add.w	8(a1),d1
0000B770 9268 0008                  		sub.w	8(a0),d1
0000B774 6BE2                       		bmi.s	loc_A4E2
0000B776 B242                       		cmp.w	d2,d1
0000B778 64DE                       		bcc.s	loc_A4E2
0000B77A 72FF                       		moveq	#-1,d1
0000B77C 4E75                       		rts	
0000B77E                            ; End of function Obj26_SolidSides
0000B77E                            
0000B77E                            ; ===========================================================================
0000B77E                            Ani_obj26:
0000B77E                            	include "_anim\obj26.asm"
0000B77E                            ; ---------------------------------------------------------------------------
0000B77E                            ; Animation script - monitors
0000B77E                            ; ---------------------------------------------------------------------------
0000B77E 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B784 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B78A 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B790 0000                       		dc.w byte_A582-Ani_obj26
0000B792 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B798 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B7A4 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B7B0 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B7BC 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B7C8 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B7D4 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B7E0 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B7EC 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B7F8 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B800                            		even
0000B800                            		even
0000B800                            
0000B800                            ; ---------------------------------------------------------------------------
0000B800                            ; Sprite mappings - monitors
0000B800                            ; ---------------------------------------------------------------------------
0000B800                            Map_obj26:
0000B800                            	include "_maps\obj26.asm"
0000B800                            ; --------------------------------------------------------------------------------
0000B800                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B800                            ; --------------------------------------------------------------------------------
0000B800                            
0000B800                            SME_XK1AB:	
0000B800 0000 0000                  		dc.w SME_XK1AB_18-SME_XK1AB, SME_XK1AB_1E-SME_XK1AB	
0000B804 0000 0000                  		dc.w SME_XK1AB_29-SME_XK1AB, SME_XK1AB_34-SME_XK1AB	
0000B808 0000 0000                  		dc.w SME_XK1AB_35-SME_XK1AB, SME_XK1AB_40-SME_XK1AB	
0000B80C 0000 0000                  		dc.w SME_XK1AB_4B-SME_XK1AB, SME_XK1AB_56-SME_XK1AB	
0000B810 0000 0000                  		dc.w SME_XK1AB_61-SME_XK1AB, SME_XK1AB_6C-SME_XK1AB	
0000B814 0000 0000                  		dc.w SME_XK1AB_6D-SME_XK1AB, SME_XK1AB_6E-SME_XK1AB	
0000B818 01                         SME_XK1AB_18:	dc.b 1	
0000B819 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B81E 02                         SME_XK1AB_1E:	dc.b 2	
0000B81F F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000B824 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B829 02                         SME_XK1AB_29:	dc.b 2	
0000B82A F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000B82F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B834 00                         SME_XK1AB_34:	dc.b 0	
0000B835 02                         SME_XK1AB_35:	dc.b 2	
0000B836 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000B83B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B840 02                         SME_XK1AB_40:	dc.b 2	
0000B841 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000B846 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B84B 02                         SME_XK1AB_4B:	dc.b 2	
0000B84C F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000B851 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B856 02                         SME_XK1AB_56:	dc.b 2	
0000B857 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000B85C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B861 02                         SME_XK1AB_61:	dc.b 2	
0000B862 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0000B867 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0	
0000B86C 00                         SME_XK1AB_6C:	dc.b 0	
0000B86D 00                         SME_XK1AB_6D:	dc.b 0	
0000B86E 01                         SME_XK1AB_6E:	dc.b 1	
0000B86F FF0D 002C F0               		dc.b $FF, $D, 0, $2C, $F0	
0000B874                            		even
0000B874                            		even
0000B874                            
0000B874                            ; ===========================================================================
0000B874                            ; ---------------------------------------------------------------------------
0000B874                            ; Object 0E - Sonic on the title screen
0000B874                            ; ---------------------------------------------------------------------------
0000B874                            
0000B874                            Obj0E:					; XREF: Obj_Index
0000B874 7000                       		moveq	#0,d0
0000B876 1028 0024                  		move.b	$24(a0),d0
0000B87A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B87E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B882                            ; ===========================================================================
0000B882 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B884 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B886 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B888 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B88A                            ; ===========================================================================
0000B88A                            
0000B88A                            Obj0E_Main:				; XREF: Obj0E_Index
0000B88A 5428 0024                  		addq.b	#2,$24(a0)
0000B88E 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B894 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B89A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B8A2 317C 0300 0002             		move.w	#$300,2(a0)
0000B8A8 117C 0001 0018             		move.b	#1,$18(a0)
0000B8AE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B8B4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B8BA 6100 0000                  		bsr.w	AnimateSprite
0000B8BE                            
0000B8BE                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B8BE 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B8C2 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B8C4 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B8C8 6000 0000                  		bra.w	DisplaySprite
0000B8CC                            ; ===========================================================================
0000B8CC                            
0000B8CC                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B8CC 4E75                       		rts	
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            Obj0E_Move:				; XREF: Obj0E_Index
0000B8CE 5168 000A                  		subq.w	#8,$A(a0)
0000B8D2 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B8D8 6600                       		bne.s	Obj0E_Display
0000B8DA 5428 0024                  		addq.b	#2,$24(a0)
0000B8DE                            
0000B8DE                            Obj0E_Display:
0000B8DE 6000 0000                  		bra.w	DisplaySprite
0000B8E2                            ; ===========================================================================
0000B8E2 4E75                       		rts	
0000B8E4                            ; ===========================================================================
0000B8E4                            
0000B8E4                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B8E4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B8EA 6100 0000                  		bsr.w	AnimateSprite
0000B8EE 6000 0000                  		bra.w	DisplaySprite
0000B8F2                            ; ===========================================================================
0000B8F2 4E75                       		rts	
0000B8F4                            ; ===========================================================================
0000B8F4                            ; ---------------------------------------------------------------------------
0000B8F4                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B8F4                            ; ---------------------------------------------------------------------------
0000B8F4                            
0000B8F4                            Obj0F:					; XREF: Obj_Index
0000B8F4 7000                       		moveq	#0,d0
0000B8F6 1028 0024                  		move.b	$24(a0),d0
0000B8FA 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B8FE 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B902 6000 0000                  		bra.w	DisplaySprite
0000B906                            ; ===========================================================================
0000B906 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B908 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B90A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B90C                            ; ===========================================================================
0000B90C                            
0000B90C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B90C 5428 0024                  		addq.b	#2,$24(a0)
0000B910 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B916 317C 0130 000A             		move.w	#$130,$A(a0)
0000B91C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B924 317C 2200 0002             		move.w	#$2200,2(a0)
0000B92A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B930 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B932 5428 0024                  		addq.b	#2,$24(a0)
0000B936 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B93C 6600                       		bne.s	locret_A6F8	; if not, branch
0000B93E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B944 317C 0170 0008             		move.w	#$170,8(a0)
0000B94A 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B950                            
0000B950                            locret_A6F8:				; XREF: Obj0F_Index
0000B950 4E75                       		rts	
0000B952                            ; ===========================================================================
0000B952                            
0000B952                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B952 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B958 6000 0000                  		bra.w	AnimateSprite
0000B95C                            ; ===========================================================================
0000B95C                            Ani_obj0E:
0000B95C                            	include "_anim\obj0E.asm"
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            ; Animation script - Sonic on the title screen
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C 0000                       		dc.w byte_A706-Ani_obj0E
0000B95E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B96A                            		even
0000B96A                            		even
0000B96A                            
0000B96A                            Ani_obj0F:
0000B96A                            	include "_anim\obj0F.asm"
0000B96A                            ; ---------------------------------------------------------------------------
0000B96A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B96A                            ; ---------------------------------------------------------------------------
0000B96A 0000                       		dc.w byte_A714-Ani_obj0F
0000B96C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B970                            		even
0000B970                            		even
0000B970                            
0000B970                            ; ---------------------------------------------------------------------------
0000B970                            ; Subroutine to	animate	a sprite using an animation script
0000B970                            ; ---------------------------------------------------------------------------
0000B970                            
0000B970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B970                            
0000B970                            
0000B970                            AnimateSprite:
0000B970 7000                       		moveq	#0,d0
0000B972 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B976 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B97A 6700                       		beq.s	Anim_Run	; if not, branch
0000B97C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B980 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B986 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B98C                            
0000B98C                            Anim_Run:
0000B98C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B990 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B992 D040                       		add.w	d0,d0
0000B994 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B998 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B99C 7200                       		moveq	#0,d1
0000B99E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B9A2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B9A6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B9A8                            
0000B9A8                            Anim_Next:
0000B9A8 1200                       		move.b	d0,d1
0000B9AA 0200 001F                  		andi.b	#$1F,d0
0000B9AE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B9B2 1028 0022                  		move.b	$22(a0),d0
0000B9B6 E719                       		rol.b	#3,d1
0000B9B8 B101                       		eor.b	d0,d1
0000B9BA 0201 0003                  		andi.b	#3,d1
0000B9BE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B9C4 8328 0001                  		or.b	d1,1(a0)
0000B9C8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B9CC                            
0000B9CC                            Anim_Wait:
0000B9CC 4E75                       		rts	
0000B9CE                            ; ===========================================================================
0000B9CE                            
0000B9CE                            Anim_End_FF:
0000B9CE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B9D0 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B9D2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B9D8 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B9DC 60CA                       		bra.s	Anim_Next
0000B9DE                            ; ===========================================================================
0000B9DE                            
0000B9DE                            Anim_End_FE:
0000B9DE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B9E0 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B9E2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B9E6 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B9EA 9200                       		sub.b	d0,d1
0000B9EC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B9F0 60B6                       		bra.s	Anim_Next
0000B9F2                            ; ===========================================================================
0000B9F2                            
0000B9F2                            Anim_End_FD:
0000B9F2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B9F4 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B9F6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B9FC                            
0000B9FC                            Anim_End_FC:
0000B9FC 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B9FE 6600                       		bne.s	Anim_End_FB	; if not, branch
0000BA00 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000BA04                            
0000BA04                            Anim_End_FB:
0000BA04 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000BA06 6600                       		bne.s	Anim_End_FA	; if not, branch
0000BA08 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000BA0E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000BA12                            
0000BA12                            Anim_End_FA:
0000BA12 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000BA14 6600                       		bne.s	Anim_End	; if not, branch
0000BA16 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000BA1A                            
0000BA1A                            Anim_End:
0000BA1A 4E75                       		rts	
0000BA1C                            ; End of function AnimateSprite
0000BA1C                            
0000BA1C                            ; ===========================================================================
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            Map_obj0F:
0000BA1C                            	include "_maps\obj0F.asm"
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C 0000                       		dc.w byte_A7CD-Map_obj0F
0000BA1E 0000                       		dc.w byte_A7CC-Map_obj0F
0000BA20 0000                       		dc.w byte_A7EB-Map_obj0F
0000BA22 0000                       		dc.w byte_A882-Map_obj0F
0000BA24 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000BA25 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000BA2A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000BA2F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000BA34 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000BA39 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000BA3E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000BA43 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000BA44 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA49 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA4E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA53 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA58 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA5D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA62 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA67 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA6C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA71 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000BA76 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA7B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA80 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA85 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA8A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA8F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA94 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA99 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BA9E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAA3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000BAA8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAAD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAB2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAB7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BABC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAC1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAC6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BACB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAD0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BAD5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000BADA 01                         byte_A882:	dc.b 1			; "TM"
0000BADB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000BAE0                            		even
0000BAE0                            		even
0000BAE0                            
0000BAE0                            ; ---------------------------------------------------------------------------
0000BAE0                            ; Sprite mappings - Sonic on the title screen
0000BAE0                            ; ---------------------------------------------------------------------------
0000BAE0                            Map_obj0E:
0000BAE0                            	include "_maps\obj0E.asm"
0000BAE0                            ; ---------------------------------------------------------------------------
0000BAE0                            ; Sprite mappings - Sonic on the title screen
0000BAE0                            ; ---------------------------------------------------------------------------
0000BAE0 0000                       		dc.w byte_A898-Map_obj0E
0000BAE2 0000                       		dc.w byte_A8CB-Map_obj0E
0000BAE4 0000                       		dc.w byte_A917-Map_obj0E
0000BAE6 0000                       		dc.w byte_A96D-Map_obj0E
0000BAE8 0000                       		dc.w byte_A9AF-Map_obj0E
0000BAEA 0000                       		dc.w byte_A9E7-Map_obj0E
0000BAEC 0000                       		dc.w byte_AA47-Map_obj0E
0000BAEE 0000                       		dc.w byte_AAB1-Map_obj0E
0000BAF0 0A                         byte_A898:	dc.b $A
0000BAF1 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000BAF6 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000BAFB 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000BB00 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000BB05 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000BB0A 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000BB0F 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BB14 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BB19 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BB1E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BB23 0F                         byte_A8CB:	dc.b $F
0000BB24 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BB29 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BB2E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BB33 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BB38 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BB3D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB42 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BB47 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BB4C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BB51 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BB56 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BB5B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BB60 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BB65 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BB6A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BB6F 11                         byte_A917:	dc.b $11
0000BB70 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BB75 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BB7A 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BB7F 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BB84 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BB89 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BB8E 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BB93 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BB98 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BB9D 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BBA2 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BBA7 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BBAC 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BBB1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BBB6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BBBB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BBC0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BBC5 0D                         byte_A96D:	dc.b $D
0000BBC6 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BBCB 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BBD0 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BBD5 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BBDA 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BBDF 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BBE4 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BBE9 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BBEE 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BBF3 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BBF8 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BBFD 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BC02 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BC07 0B                         byte_A9AF:	dc.b $B
0000BC08 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BC0D 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BC12 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BC17 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BC1C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BC21 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BC26 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BC2B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BC30 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BC35 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BC3A 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BC3F 13                         byte_A9E7:	dc.b $13
0000BC40 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BC45 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BC4A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BC4F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BC54 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BC59 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BC5E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BC63 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BC68 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BC6D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BC72 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BC77 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BC7C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BC81 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BC86 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BC8B 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BC90 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BC95 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BC9A 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BC9F 15                         byte_AA47:	dc.b $15
0000BCA0 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BCA5 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BCAA 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BCAF 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BCB4 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BCB9 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BCBE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BCC3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BCC8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BCCD 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BCD2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BCD7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BCDC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BCE1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BCE6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BCEB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BCF0 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BCF5 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BCFA 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BCFF 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD04 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD09 16                         byte_AAB1:	dc.b $16
0000BD0A 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BD0F 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BD14 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BD19 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BD1E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BD23 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BD28 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BD2D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BD32 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BD37 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BD3C 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BD41 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BD46 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BD4B 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BD50 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BD55 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BD5A 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BD5F 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BD64 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BD69 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BD6E 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BD73 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BD78                            		even
0000BD78                            		even
0000BD78                            
0000BD78                            ; ===========================================================================
0000BD78                            ; ---------------------------------------------------------------------------
0000BD78                            ; Object 2B - Chopper enemy (GHZ)
0000BD78                            ; ---------------------------------------------------------------------------
0000BD78                            
0000BD78                            Obj2B:					; XREF: Obj_Index
0000BD78 7000                       		moveq	#0,d0
0000BD7A 1028 0024                  		move.b	$24(a0),d0
0000BD7E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BD82 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BD86 6000 0000                  		bra.w	MarkObjGone
0000BD8A                            ; ===========================================================================
0000BD8A 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BD8C 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BD8E                            ; ===========================================================================
0000BD8E                            
0000BD8E                            Obj2B_Main:				; XREF: Obj2B_Index
0000BD8E 5428 0024                  		addq.b	#2,$24(a0)
0000BD92 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BD9A 317C 047B 0002             		move.w	#$47B,2(a0)
0000BDA0 117C 0004 0001             		move.b	#4,1(a0)
0000BDA6 117C 0004 0018             		move.b	#4,$18(a0)
0000BDAC 117C 0009 0020             		move.b	#9,$20(a0)
0000BDB2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BDB8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BDBE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BDC4                            
0000BDC4                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BDC4 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BDCA 6100 FBA4                  		bsr.w	AnimateSprite
0000BDCE 6100 0000                  		bsr.w	SpeedToPos
0000BDD2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BDD8 3028 0030                  		move.w	$30(a0),d0
0000BDDC B068 000C                  		cmp.w	$C(a0),d0
0000BDE0 6400                       		bcc.s	Obj2B_ChgAni
0000BDE2 3140 000C                  		move.w	d0,$C(a0)
0000BDE6 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BDEC                            
0000BDEC                            Obj2B_ChgAni:
0000BDEC 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BDF2 0440 00C0                  		subi.w	#$C0,d0
0000BDF6 B068 000C                  		cmp.w	$C(a0),d0
0000BDFA 6400                       		bcc.s	locret_ABB6
0000BDFC 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BE02 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BE06 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BE08 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BE0E                            
0000BE0E                            locret_ABB6:
0000BE0E 4E75                       		rts	
0000BE10                            ; ===========================================================================
0000BE10                            Ani_obj2B:
0000BE10                            	include "_anim\obj2B.asm"
0000BE10                            ; ---------------------------------------------------------------------------
0000BE10                            ; Animation script - Chopper enemy
0000BE10                            ; ---------------------------------------------------------------------------
0000BE10 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BE12 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BE14 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BE16 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BE1A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BE1E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BE22 00                         		even
0000BE22 00                         		even
0000BE22                            
0000BE22                            ; ---------------------------------------------------------------------------
0000BE22                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE22                            ; ---------------------------------------------------------------------------
0000BE22                            Map_obj2B:
0000BE22                            	include "_maps\obj2B.asm"
0000BE22                            ; ---------------------------------------------------------------------------
0000BE22                            ; Sprite mappings - Chopper enemy (GHZ)
0000BE22                            ; ---------------------------------------------------------------------------
0000BE22 0000                       		dc.w byte_ABCE-Map_obj2B
0000BE24 0000                       		dc.w byte_ABD4-Map_obj2B
0000BE26 01                         byte_ABCE:	dc.b 1
0000BE27 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BE2C 01                         byte_ABD4:	dc.b 1
0000BE2D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BE32                            		even
0000BE32                            		even
0000BE32                            
0000BE32                            ; ===========================================================================
0000BE32                            ; ---------------------------------------------------------------------------
0000BE32                            ; Object 2C - Jaws enemy (LZ)
0000BE32                            ; ---------------------------------------------------------------------------
0000BE32                            
0000BE32                            Obj2C:					; XREF: Obj_Index
0000BE32 7000                       		moveq	#0,d0
0000BE34 1028 0024                  		move.b	$24(a0),d0
0000BE38 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BE3C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BE40                            ; ===========================================================================
0000BE40 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BE42 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BE44                            ; ===========================================================================
0000BE44                            
0000BE44                            Obj2C_Main:				; XREF: Obj2C_Index
0000BE44 5428 0024                  		addq.b	#2,$24(a0)
0000BE48 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BE50 317C 2486 0002             		move.w	#$2486,2(a0)
0000BE56 0028 0004 0001             		ori.b	#4,1(a0)
0000BE5C 117C 000A 0020             		move.b	#$A,$20(a0)
0000BE62 117C 0004 0018             		move.b	#4,$18(a0)
0000BE68 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE6E 7000                       		moveq	#0,d0
0000BE70 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BE74 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BE76 5340                       		subq.w	#1,d0
0000BE78 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BE7C 3140 0032                  		move.w	d0,$32(a0)
0000BE80 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BE86 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BE8C 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BE8E 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BE92                            
0000BE92                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BE92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BE96 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BE98 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BE9E 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BEA2 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BEA8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BEAE                            
0000BEAE                            Obj2C_Animate:
0000BEAE 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BEB4 6100 FABA                  		bsr.w	AnimateSprite
0000BEB8 6100 0000                  		bsr.w	SpeedToPos
0000BEBC 6000 0000                  		bra.w	MarkObjGone
0000BEC0                            ; ===========================================================================
0000BEC0                            Ani_obj2C:
0000BEC0                            	include "_anim\obj2C.asm"
0000BEC0                            ; ---------------------------------------------------------------------------
0000BEC0                            ; Animation script - Jaws enemy
0000BEC0                            ; ---------------------------------------------------------------------------
0000BEC0 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BEC2 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BEC8                            		even
0000BEC8                            		even
0000BEC8                            
0000BEC8                            ; ---------------------------------------------------------------------------
0000BEC8                            ; Sprite mappings - Jaws enemy (LZ)
0000BEC8                            ; ---------------------------------------------------------------------------
0000BEC8                            Map_obj2C:
0000BEC8                            	include "_maps\obj2C.asm"
0000BEC8                            mapjaws:
0000BEC8 0000                       mapjaws_0: 	dc.w mapjaws_8-mapjaws
0000BECA 0000                       mapjaws_2: 	dc.w mapjaws_13-mapjaws
0000BECC 0000                       mapjaws_4: 	dc.w mapjaws_1E-mapjaws
0000BECE 0000                       mapjaws_6: 	dc.w mapjaws_29-mapjaws
0000BED0 02                         mapjaws_8: 	dc.b $2
0000BED1 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BED6 F505 4018 10               	dc.b $F5, $5, $40, $18, $10
0000BEDB 02                         mapjaws_13: 	dc.b $2
0000BEDC F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BEE1 F505 401C 10               	dc.b $F5, $5, $40, $1C, $10
0000BEE6 02                         mapjaws_1E: 	dc.b $2
0000BEE7 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
0000BEEC F505 5018 10               	dc.b $F5, $5, $50, $18, $10
0000BEF1 02                         mapjaws_29: 	dc.b $2
0000BEF2 F40E 000C F0               	dc.b $F4, $E, $0, $C, $F0
0000BEF7 F505 501C 10               	dc.b $F5, $5, $50, $1C, $10
0000BEFC                            	even
0000BEFC                            	even
0000BEFC                            
0000BEFC                            ; ===========================================================================
0000BEFC                            ; ---------------------------------------------------------------------------
0000BEFC                            ; Object 2D - Burrobot enemy (LZ)
0000BEFC                            ; ---------------------------------------------------------------------------
0000BEFC                            
0000BEFC                            Obj2D:					; XREF: Obj_Index
0000BEFC 7000                       		moveq	#0,d0
0000BEFE 1028 0024                  		move.b	$24(a0),d0
0000BF02 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BF06 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BF0A                            ; ===========================================================================
0000BF0A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BF0C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BF0E                            ; ===========================================================================
0000BF0E                            
0000BF0E                            Obj2D_Main:				; XREF: Obj2D_Index
0000BF0E 5428 0024                  		addq.b	#2,$24(a0)
0000BF12 117C 0013 0016             		move.b	#$13,$16(a0)
0000BF18 117C 0008 0017             		move.b	#8,$17(a0)
0000BF1E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BF26 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BF2C 0028 0004 0001             		ori.b	#4,1(a0)
0000BF32 117C 0004 0018             		move.b	#4,$18(a0)
0000BF38 117C 0005 0020             		move.b	#5,$20(a0)
0000BF3E 117C 000C 0019             		move.b	#$C,$19(a0)
0000BF44 5028 0025                  		addq.b	#8,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BF48 117C 0004 001C             		move.b	#4,$1C(a0)
0000BF4E                            
0000BF4E                            Obj2D_Action:				; XREF: Obj2D_Index
0000BF4E 7000                       		moveq	#0,d0
0000BF50 1028 0025                  		move.b	$25(a0),d0
0000BF54 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BF58 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BF5C 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BF62 6100 FA0C                  		bsr.w	AnimateSprite
0000BF66 6000 0000                  		bra.w	MarkObjGone
0000BF6A                            ; ===========================================================================
0000BF6A 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BF6C 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BF6E 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BF70 0000                       		dc.w Obj2D_Jump2-Obj2D_Index2
0000BF72 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BF74                            ; ===========================================================================
0000BF74                            
0000BF74                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BF74 5368 0030                  		subq.w	#1,$30(a0)
0000BF78 6A00                       		bpl.s	locret_AD42
0000BF7A 5428 0025                  		addq.b	#2,$25(a0)
0000BF7E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BF84 317C 0080 0010             		move.w	#$80,$10(a0)
0000BF8A 117C 0001 001C             		move.b	#1,$1C(a0)
0000BF90 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BF96 6700                       		beq.s	locret_AD42
0000BF98 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BF9C                            
0000BF9C                            locret_AD42:
0000BF9C 4E75                       		rts	
0000BF9E                            ; ===========================================================================
0000BF9E                            
0000BF9E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BF9E 5368 0030                  		subq.w	#1,$30(a0)
0000BFA2 6B00                       		bmi.s	loc_AD84
0000BFA4 6100 0000                  		bsr.w	SpeedToPos
0000BFA8 0868 0000 0032             		bchg	#0,$32(a0)
0000BFAE 6600                       		bne.s	loc_AD78
0000BFB0 3628 0008                  		move.w	8(a0),d3
0000BFB4 0643 000C                  		addi.w	#$C,d3
0000BFB8 0828 0000 0022             		btst	#0,$22(a0)
0000BFBE 6600                       		bne.s	loc_AD6A
0000BFC0 0443 0018                  		subi.w	#$18,d3
0000BFC4                            
0000BFC4                            loc_AD6A:
0000BFC4 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BFCA 0C41 000C                  		cmpi.w	#$C,d1
0000BFCE 6C00                       		bge.s	loc_AD84
0000BFD0 4E75                       		rts	
0000BFD2                            ; ===========================================================================
0000BFD2                            
0000BFD2                            loc_AD78:				; XREF: Obj2D_Move
0000BFD2 4EB9 0000 0000             		jsr	ObjHitFloor
0000BFD8 D368 000C                  		add.w	d1,$C(a0)
0000BFDC 4E75                       		rts	
0000BFDE                            ; ===========================================================================
0000BFDE                            
0000BFDE                            loc_AD84:				; XREF: Obj2D_Move
0000BFDE 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BFE4 6700                       		beq.s	loc_ADA4
0000BFE6 5528 0025                  		subq.b	#2,$25(a0)
0000BFEA 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BFF0 317C 0000 0010             		move.w	#0,$10(a0)
0000BFF6 117C 0000 001C             		move.b	#0,$1C(a0)
0000BFFC 4E75                       		rts	
0000BFFE                            ; ===========================================================================
0000BFFE                            
0000BFFE                            loc_ADA4:
0000BFFE 5428 0025                  		addq.b	#2,$25(a0)
0000C002 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C008 117C 0002 001C             		move.b	#2,$1C(a0)
0000C00E 4E75                       		rts	
0000C010                            ; ===========================================================================
0000C010                            
0000C010                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000C010 6100 0000                  		bsr.w	SpeedToPos
0000C014 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C01A 6B00                       		bmi.s	locret_ADF0
0000C01C 117C 0003 001C             		move.b	#3,$1C(a0)
0000C022 4EB9 0000 0000             		jsr	ObjHitFloor
0000C028 4A41                       		tst.w	d1
0000C02A 6A00                       		bpl.s	locret_ADF0
0000C02C D368 000C                  		add.w	d1,$C(a0)
0000C030 317C 0000 0012             		move.w	#0,$12(a0)
0000C036 117C 0001 001C             		move.b	#1,$1C(a0)
0000C03C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000C042 5528 0025                  		subq.b	#2,$25(a0)
0000C046 6000 0000                  		bra.w	Obj2D_ChkSonic2
0000C04A                            ; ===========================================================================
0000C04A                            
0000C04A                            Obj2D_Jump2:				; XREF: Obj2D_Index2
0000C04A 6100 0000                  		bsr.w	SpeedToPos
0000C04E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C054 5368 0030                  		subq.w	#1,$30(a0)
0000C058 6A00                       		bpl.s	locret_ADF0
0000C05A 117C 0002 001C             		move.b	#2,$1C(a0)
0000C060 5528 0025                  		subq.b	#2,$25(a0)
0000C064                            
0000C064                            locret_ADF0:
0000C064 4E75                       		rts	
0000C066                            ; ===========================================================================
0000C066                            
0000C066                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000C066 343C 0060                  		move.w	#$60,d2
0000C06A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000C06E 6400                       		bcc.s	locret_AE20
0000C070 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000C074 9068 000C                  		sub.w	$C(a0),d0
0000C078 6400                       		bcc.s	locret_AE20
0000C07A 0C40 FF80                  		cmpi.w	#-$80,d0
0000C07E 6500                       		bcs.s	locret_AE20
0000C080 4A78 FE08                  		tst.w	($FFFFFE08).w
0000C084 6600                       		bne.s	locret_AE20
0000C086 5528 0025                  		subq.b	#2,$25(a0)
0000C08A 317C 0004 0030             		move.w	#4,$30(a0)
0000C090 3141 0010                  		move.w	d1,$10(a0)
0000C094 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C09A                            
0000C09A                            locret_AE20:
0000C09A 4E75                       		rts	
0000C09C                            
0000C09C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C09C                            
0000C09C                            
0000C09C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000C09C 323C 0080                  		move.w	#$80,d1
0000C0A0 08E8 0000 0022             		bset	#0,$22(a0)
0000C0A6 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0AA 9068 0008                  		sub.w	8(a0),d0
0000C0AE 6400                       		bcc.s	loc_AE40
0000C0B0 4440                       		neg.w	d0
0000C0B2 4441                       		neg.w	d1
0000C0B4 08A8 0000 0022             		bclr	#0,$22(a0)
0000C0BA                            
0000C0BA                            loc_AE40:
0000C0BA B042                       		cmp.w	d2,d0
0000C0BC 4E75                       		rts	
0000C0BE                            ; End of function Obj2D_ChkSonic2
0000C0BE                            
0000C0BE                            ; ===========================================================================
0000C0BE                            Ani_obj2D:
0000C0BE                            	include "_anim\obj2D.asm"
0000C0BE                            ; ---------------------------------------------------------------------------
0000C0BE                            ; Animation script - Burrobot enemy
0000C0BE                            ; ---------------------------------------------------------------------------
0000C0BE 0000                       		dc.w byte_AE4C-Ani_obj2D
0000C0C0 0000                       		dc.w byte_AE50-Ani_obj2D
0000C0C2 0000                       		dc.w byte_AE54-Ani_obj2D
0000C0C4 0000                       		dc.w byte_AE58-Ani_obj2D
0000C0C6 0000                       		dc.w byte_AE542-Ani_obj2D
0000C0C8 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000C0CC 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000C0D0 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000C0D4 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000C0D7 0307 08FF                  byte_AE542:	dc.b 3,	7, 8, $FF
0000C0DC 00                         		even
0000C0DC 00                         		even
0000C0DC                            
0000C0DC                            ; ---------------------------------------------------------------------------
0000C0DC                            ; Sprite mappings - Burrobot enemy (LZ)
0000C0DC                            ; ---------------------------------------------------------------------------
0000C0DC                            Map_obj2D:
0000C0DC                            	include "_maps\obj2D.asm"
0000C0DC                            burromap:
0000C0DC 0000                       burromap_0: 	dc.w burromap_12-burromap
0000C0DE 0000                       burromap_2: 	dc.w burromap_1D-burromap
0000C0E0 0000                       burromap_4: 	dc.w burromap_28-burromap
0000C0E2 0000                       burromap_6: 	dc.w burromap_33-burromap
0000C0E4 0000                       burromap_8: 	dc.w burromap_3E-burromap
0000C0E6 0000                       burromap_A: 	dc.w burromap_49-burromap
0000C0E8 0000                       burromap_C: 	dc.w burromap_54-burromap
0000C0EA 0000                       burromap_E: 	dc.w burromap_5F-burromap
0000C0EC 0000                       burromap_10: 	dc.w burromap_65-burromap
0000C0EE 02                         burromap_12: 	dc.b $2
0000C0EF EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0000C0F4 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C0F9 02                         burromap_1D: 	dc.b $2
0000C0FA EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C0FF 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
0000C104 02                         burromap_28: 	dc.b $2
0000C105 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C10A 000A 0027 F4               	dc.b $0, $A, $0, $27, $F4
0000C10F 02                         burromap_33: 	dc.b $2
0000C110 E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C115 000A 0039 F4               	dc.b $0, $A, $0, $39, $F4
0000C11A 02                         burromap_3E: 	dc.b $2
0000C11B E80A 000F F0               	dc.b $E8, $A, $0, $F, $F0
0000C120 000A 0042 F4               	dc.b $0, $A, $0, $42, $F4
0000C125 02                         burromap_49: 	dc.b $2
0000C126 F406 004B E8               	dc.b $F4, $6, $0, $4B, $E8
0000C12B F40A 0051 F8               	dc.b $F4, $A, $0, $51, $F8
0000C130 02                         burromap_54: 	dc.b $2
0000C131 EC0A 000F F0               	dc.b $EC, $A, $0, $F, $F0
0000C136 0409 0009 F4               	dc.b $4, $9, $0, $9, $F4
0000C13B 01                         burromap_5F: 	dc.b $1
0000C13C E80A 0030 F4               	dc.b $E8, $A, $0, $30, $F4
0000C141 01                         burromap_65: 	dc.b $1
0000C142 E80A 001E F4               	dc.b $E8, $A, $0, $1E, $F4
0000C148 00                         	even
0000C148 00                         	even
0000C148                            
0000C148                            ; ===========================================================================
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            ; Object 2F - large moving platforms (MZ)
0000C148                            ; ---------------------------------------------------------------------------
0000C148                            
0000C148                            Obj2F:					; XREF: Obj_Index
0000C148 7000                       		moveq	#0,d0
0000C14A 1028 0024                  		move.b	$24(a0),d0
0000C14E 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C152 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C156                            ; ===========================================================================
0000C156 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C158 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C15A                            
0000C15A 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C15C 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C15E 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C160 0140                       		dc.b 1,	$40
0000C162 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C164 0220                       		dc.b 2,	$20
0000C166                            ; ===========================================================================
0000C166                            
0000C166                            Obj2F_Main:				; XREF: Obj2F_Index
0000C166 5428 0024                  		addq.b	#2,$24(a0)
0000C16A 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C172 317C C000 0002             		move.w	#$C000,2(a0)
0000C178 117C 0004 0001             		move.b	#4,1(a0)
0000C17E 117C 0005 0018             		move.b	#5,$18(a0)
0000C184 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C18A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C190 7000                       		moveq	#0,d0
0000C192 1028 0028                  		move.b	$28(a0),d0
0000C196 E448                       		lsr.w	#2,d0
0000C198 0240 001C                  		andi.w	#$1C,d0
0000C19C 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C1A0 3019                       		move.w	(a1)+,d0
0000C1A2 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C1A6 214A 0030                  		move.l	a2,$30(a0)
0000C1AA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C1AE 1151 0019                  		move.b	(a1),$19(a0)
0000C1B2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C1B8 117C 0040 0016             		move.b	#$40,$16(a0)
0000C1BE 08E8 0004 0001             		bset	#4,1(a0)
0000C1C4                            
0000C1C4                            Obj2F_Action:				; XREF: Obj2F_Index
0000C1C4 6100 0000                  		bsr.w	Obj2F_Types
0000C1C8 4A28 0025                  		tst.b	$25(a0)
0000C1CC 6700                       		beq.s	Obj2F_Solid
0000C1CE 7200                       		moveq	#0,d1
0000C1D0 1228 0019                  		move.b	$19(a0),d1
0000C1D4 0641 000B                  		addi.w	#$B,d1
0000C1D8 6100 C4AA                  		bsr.w	ExitPlatform
0000C1DC 0829 0003 0022             		btst	#3,$22(a1)
0000C1E2 6600 0000                  		bne.w	Obj2F_Slope
0000C1E6 4228 0025                  		clr.b	$25(a0)
0000C1EA 6000                       		bra.s	Obj2F_Display
0000C1EC                            ; ===========================================================================
0000C1EC                            
0000C1EC                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C1EC 7200                       		moveq	#0,d1
0000C1EE 1228 0019                  		move.b	$19(a0),d1
0000C1F2 0641 000B                  		addi.w	#$B,d1
0000C1F6 2468 0030                  		movea.l	$30(a0),a2
0000C1FA 3428 0008                  		move.w	8(a0),d2
0000C1FE 6100 D45A                  		bsr.w	SlopeObject2
0000C202 6000                       		bra.s	Obj2F_Display
0000C204                            ; ===========================================================================
0000C204                            
0000C204                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C204 7200                       		moveq	#0,d1
0000C206 1228 0019                  		move.b	$19(a0),d1
0000C20A 0641 000B                  		addi.w	#$B,d1
0000C20E 343C 0020                  		move.w	#$20,d2
0000C212 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C218 6600                       		bne.s	loc_AF8E
0000C21A 343C 0030                  		move.w	#$30,d2
0000C21E                            
0000C21E                            loc_AF8E:
0000C21E 2468 0030                  		movea.l	$30(a0),a2
0000C222 6100 0000                  		bsr.w	SolidObject2F
0000C226                            
0000C226                            Obj2F_Display:				; XREF: Obj2F_Action
0000C226 6100 0000                  		bsr.w	DisplaySprite
0000C22A 6000 0000                  		bra.w	Obj2F_ChkDel
0000C22E                            
0000C22E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C22E                            
0000C22E                            
0000C22E                            Obj2F_Types:				; XREF: Obj2F_Action
0000C22E 7000                       		moveq	#0,d0
0000C230 1028 0028                  		move.b	$28(a0),d0
0000C234 0240 0007                  		andi.w	#7,d0
0000C238 D040                       		add.w	d0,d0
0000C23A 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C23E 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C242                            ; End of function Obj2F_Types
0000C242                            
0000C242                            ; ===========================================================================
0000C242 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C244 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C246 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C248 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C24A 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C24C 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C24E                            ; ===========================================================================
0000C24E                            
0000C24E                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C24E 4E75                       		rts			; type 00 platform doesn't move
0000C250                            ; ===========================================================================
0000C250                            
0000C250                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C250 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C254 323C 0020                  		move.w	#$20,d1
0000C258 6000                       		bra.s	Obj2F_Move
0000C25A                            ; ===========================================================================
0000C25A                            
0000C25A                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C25A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C25E 323C 0030                  		move.w	#$30,d1
0000C262 6000                       		bra.s	Obj2F_Move
0000C264                            ; ===========================================================================
0000C264                            
0000C264                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C264 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C268 323C 0040                  		move.w	#$40,d1
0000C26C 6000                       		bra.s	Obj2F_Move
0000C26E                            ; ===========================================================================
0000C26E                            
0000C26E                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C26E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C272 323C 0060                  		move.w	#$60,d1
0000C276                            
0000C276                            Obj2F_Move:
0000C276 0828 0003 0028             		btst	#3,$28(a0)
0000C27C 6700                       		beq.s	loc_AFF2
0000C27E 4440                       		neg.w	d0
0000C280 D041                       		add.w	d1,d0
0000C282                            
0000C282                            loc_AFF2:
0000C282 3228 002C                  		move.w	$2C(a0),d1
0000C286 9240                       		sub.w	d0,d1
0000C288 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C28C 4E75                       		rts	
0000C28E                            ; ===========================================================================
0000C28E                            
0000C28E                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C28E 1028 0034                  		move.b	$34(a0),d0
0000C292 4A28 0025                  		tst.b	$25(a0)
0000C296 6600                       		bne.s	loc_B010
0000C298 5500                       		subq.b	#2,d0
0000C29A 6400                       		bcc.s	loc_B01C
0000C29C 7000                       		moveq	#0,d0
0000C29E 6000                       		bra.s	loc_B01C
0000C2A0                            ; ===========================================================================
0000C2A0                            
0000C2A0                            loc_B010:
0000C2A0 5800                       		addq.b	#4,d0
0000C2A2 0C00 0040                  		cmpi.b	#$40,d0
0000C2A6 6500                       		bcs.s	loc_B01C
0000C2A8 103C 0040                  		move.b	#$40,d0
0000C2AC                            
0000C2AC                            loc_B01C:
0000C2AC 1140 0034                  		move.b	d0,$34(a0)
0000C2B0 4EB9 0000 29CC             		jsr	(CalcSine).l
0000C2B6 E848                       		lsr.w	#4,d0
0000C2B8 3200                       		move.w	d0,d1
0000C2BA D068 002C                  		add.w	$2C(a0),d0
0000C2BE 3140 000C                  		move.w	d0,$C(a0)
0000C2C2 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C2C8 6600                       		bne.s	loc_B07A
0000C2CA 4A28 0035                  		tst.b	$35(a0)
0000C2CE 6600                       		bne.s	loc_B07A
0000C2D0 117C 0001 0035             		move.b	#1,$35(a0)
0000C2D6 6100 0000                  		bsr.w	SingleObjLoad2
0000C2DA 6600                       		bne.s	loc_B07A
0000C2DC 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C2E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000C2E6 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C2EC 5069 002C                  		addq.w	#8,$2C(a1)
0000C2F0 5769 002C                  		subq.w	#3,$2C(a1)
0000C2F4 0469 0040 0008             		subi.w	#$40,8(a1)
0000C2FA 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C300 2348 0038                  		move.l	a0,$38(a1)
0000C304 2448                       		movea.l	a0,a2
0000C306 6100                       		bsr.s	sub_B09C
0000C308                            
0000C308                            loc_B07A:
0000C308 7400                       		moveq	#0,d2
0000C30A 45E8 0036                  		lea	$36(a0),a2
0000C30E 141A                       		move.b	(a2)+,d2
0000C310 5302                       		subq.b	#1,d2
0000C312 6500                       		bcs.s	locret_B09A
0000C314                            
0000C314                            loc_B086:
0000C314 7000                       		moveq	#0,d0
0000C316 101A                       		move.b	(a2)+,d0
0000C318 ED48                       		lsl.w	#6,d0
0000C31A 0640 D000                  		addi.w	#-$3000,d0
0000C31E 3240                       		movea.w	d0,a1
0000C320 3341 003C                  		move.w	d1,$3C(a1)
0000C324 51CA FFEE                  		dbf	d2,loc_B086
0000C328                            
0000C328                            locret_B09A:
0000C328 4E75                       		rts	
0000C32A                            
0000C32A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C32A                            
0000C32A                            
0000C32A                            sub_B09C:
0000C32A 45EA 0036                  		lea	$36(a2),a2
0000C32E 7000                       		moveq	#0,d0
0000C330 1012                       		move.b	(a2),d0
0000C332 5212                       		addq.b	#1,(a2)
0000C334 45F2 0001                  		lea	1(a2,d0.w),a2
0000C338 3009                       		move.w	a1,d0
0000C33A 0440 D000                  		subi.w	#-$3000,d0
0000C33E EC48                       		lsr.w	#6,d0
0000C340 0240 007F                  		andi.w	#$7F,d0
0000C344 1480                       		move.b	d0,(a2)
0000C346 4E75                       		rts	
0000C348                            ; End of function sub_B09C
0000C348                            
0000C348                            ; ===========================================================================
0000C348                            
0000C348                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C348 4A28 0035                  		tst.b	$35(a0)
0000C34C 6700                       		beq.s	loc_B0C6
0000C34E 4A28 0001                  		tst.b	1(a0)
0000C352 6A00                       		bpl.s	Obj2F_DelFlames
0000C354                            
0000C354                            loc_B0C6:
0000C354 3028 002A                  		move.w	$2A(a0),d0
0000C358 0240 FF80                  		andi.w	#$FF80,d0
0000C35C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C360 0441 0080                  		subi.w	#$80,d1
0000C364 0241 FF80                  		andi.w	#$FF80,d1
0000C368 9041                       		sub.w	d1,d0
0000C36A 0C40 0280                  		cmpi.w	#$280,d0
0000C36E 6300                       		bls.s	Obj2F_NoDel
0000C370 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C374 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000C378 3440                       		movea.w	d0,a2	; load address into a2
0000C37A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C37E 6000 0000                  		bra.w	DeleteObject	; and delete object
0000C382                            
0000C382                            Obj2F_NoDel:
0000C382 4E75                       		rts	
0000C384                            ; ===========================================================================
0000C384                            
0000C384                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C384 7400                       		moveq	#0,d2
0000C386                            
0000C386                            loc_B0E8:
0000C386 45E8 0036                  		lea	$36(a0),a2
0000C38A 1412                       		move.b	(a2),d2
0000C38C 421A                       		clr.b	(a2)+
0000C38E 5302                       		subq.b	#1,d2
0000C390 6500                       		bcs.s	locret_B116
0000C392                            
0000C392                            loc_B0F4:
0000C392 7000                       		moveq	#0,d0
0000C394 1012                       		move.b	(a2),d0
0000C396 421A                       		clr.b	(a2)+
0000C398 ED48                       		lsl.w	#6,d0
0000C39A 0640 D000                  		addi.w	#-$3000,d0
0000C39E 3240                       		movea.w	d0,a1
0000C3A0 6100 0000                  		bsr.w	DeleteObject2
0000C3A4 51CA FFEC                  		dbf	d2,loc_B0F4
0000C3A8 117C 0000 0035             		move.b	#0,$35(a0)
0000C3AE 117C 0000 0034             		move.b	#0,$34(a0)
0000C3B4                            
0000C3B4                            locret_B116:
0000C3B4 4E75                       		rts	
0000C3B6                            ; ===========================================================================
0000C3B6                            ; ---------------------------------------------------------------------------
0000C3B6                            ; Collision data for large moving platforms (MZ)
0000C3B6                            ; ---------------------------------------------------------------------------
0000C3B6                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C402                            		even
0000C402                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C42E                            		even
0000C42E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C47A                            		even
0000C47A                            ; ===========================================================================
0000C47A                            ; ---------------------------------------------------------------------------
0000C47A                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C47A                            ; (appears when	you walk on sinking platforms)
0000C47A                            ; ---------------------------------------------------------------------------
0000C47A                            
0000C47A                            Obj35:					; XREF: Obj_Index
0000C47A 7000                       		moveq	#0,d0
0000C47C 1028 0024                  		move.b	$24(a0),d0
0000C480 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C484 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C488                            ; ===========================================================================
0000C488 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C48A 0000                       		dc.w loc_B238-Obj35_Index
0000C48C 0000                       		dc.w Obj35_Move-Obj35_Index
0000C48E                            ; ===========================================================================
0000C48E                            
0000C48E                            Obj35_Main:				; XREF: Obj35_Index
0000C48E 5428 0024                  		addq.b	#2,$24(a0)
0000C492 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C49A 317C 0345 0002             		move.w	#$345,2(a0)
0000C4A0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C4A6 117C 0004 0001             		move.b	#4,1(a0)
0000C4AC 117C 0001 0018             		move.b	#1,$18(a0)
0000C4B2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C4B8 117C 0008 0019             		move.b	#8,$19(a0)
0000C4BE 303C 00C8                  		move.w	#$C8,d0
0000C4C2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000C4C8 4A28 0028                  		tst.b	$28(a0)
0000C4CC 6700                       		beq.s	loc_B238
0000C4CE 5428 0024                  		addq.b	#2,$24(a0)
0000C4D2 6000 0000                  		bra.w	Obj35_Move
0000C4D6                            ; ===========================================================================
0000C4D6                            
0000C4D6                            loc_B238:				; XREF: Obj35_Index
0000C4D6 2268 0030                  		movea.l	$30(a0),a1
0000C4DA 3228 0008                  		move.w	8(a0),d1
0000C4DE 9268 002A                  		sub.w	$2A(a0),d1
0000C4E2 0641 000C                  		addi.w	#$C,d1
0000C4E6 3001                       		move.w	d1,d0
0000C4E8 E248                       		lsr.w	#1,d0
0000C4EA 1031 0000                  		move.b	(a1,d0.w),d0
0000C4EE 4440                       		neg.w	d0
0000C4F0 D068 002C                  		add.w	$2C(a0),d0
0000C4F4 3400                       		move.w	d0,d2
0000C4F6 D068 003C                  		add.w	$3C(a0),d0
0000C4FA 3140 000C                  		move.w	d0,$C(a0)
0000C4FE 0C41 0084                  		cmpi.w	#$84,d1
0000C502 6400                       		bcc.s	loc_B2B0
0000C504 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C50C 0C41 0080                  		cmpi.w	#$80,d1
0000C510 6400                       		bcc.s	loc_B2B0
0000C512 2028 0008                  		move.l	8(a0),d0
0000C516 0680 0008 0000             		addi.l	#$80000,d0
0000C51C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C522 6600                       		bne.s	loc_B2B0
0000C524 6100 0000                  		bsr.w	SingleObjLoad2
0000C528 6600                       		bne.s	loc_B2B0
0000C52A 12BC 0035                  		move.b	#$35,0(a1)
0000C52E 3368 0008 0008             		move.w	8(a0),8(a1)
0000C534 3342 002C                  		move.w	d2,$2C(a1)
0000C538 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C53E 137C 0001 0028             		move.b	#1,$28(a1)
0000C544 2468 0038                  		movea.l	$38(a0),a2
0000C548 6100 FDE0                  		bsr.w	sub_B09C
0000C54C                            
0000C54C                            loc_B2B0:
0000C54C 6000                       		bra.s	Obj35_Animate
0000C54E                            ; ===========================================================================
0000C54E                            
0000C54E                            Obj35_Move:				; XREF: Obj35_Index
0000C54E 3028 002C                  		move.w	$2C(a0),d0
0000C552 D068 003C                  		add.w	$3C(a0),d0
0000C556 3140 000C                  		move.w	d0,$C(a0)
0000C55A                            
0000C55A                            Obj35_Animate:				; XREF: loc_B238
0000C55A 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C560 6100 F40E                  		bsr.w	AnimateSprite
0000C564 6000 0000                  		bra.w	DisplaySprite
0000C568                            ; ===========================================================================
0000C568                            Ani_obj35:
0000C568                            	include "_anim\obj35.asm"
0000C568                            ; ---------------------------------------------------------------------------
0000C568                            ; Animation script - fireball that sits on the	floor (MZ)
0000C568                            ; ---------------------------------------------------------------------------
0000C568 0000                       		dc.w byte_B2CE-Ani_obj35
0000C56A 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C570                            		even
0000C570                            		even
0000C570                            
0000C570                            ; ---------------------------------------------------------------------------
0000C570                            ; Sprite mappings - large moving platforms (MZ)
0000C570                            ; ---------------------------------------------------------------------------
0000C570                            Map_obj2F:
0000C570                            	include "_maps\obj2F.asm"
0000C570                            ; ---------------------------------------------------------------------------
0000C570                            ; Sprite mappings - large moving platforms (MZ)
0000C570                            ; ---------------------------------------------------------------------------
0000C570 0000                       		dc.w byte_B2DA-Map_obj2F
0000C572 0000                       		dc.w byte_B31C-Map_obj2F
0000C574 0000                       		dc.w byte_B34F-Map_obj2F
0000C576 0D                         byte_B2DA:	dc.b $D
0000C577 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C57C F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C581 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C586 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C58B F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C590 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C595 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C59A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C59F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C5A4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C5A9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C5AE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C5B3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C5B8 0A                         byte_B31C:	dc.b $A
0000C5B9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C5BE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C5C3 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C5C8 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C5CD E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C5D2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5D7 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C5DC E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C5E1 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C5E6 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C5EB 06                         byte_B34F:	dc.b 6
0000C5EC D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C5F1 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C5F6 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C5FB D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C600 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C605 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C60A                            		even
0000C60A                            		even
0000C60A                            
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            Map_obj14:
0000C60A                            	include "_maps\obj14.asm"
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C60A                            ; ---------------------------------------------------------------------------
0000C60A 0000                       		dc.w byte_B37A-Map_obj14
0000C60C 0000                       		dc.w byte_B380-Map_obj14
0000C60E 0000                       		dc.w byte_B386-Map_obj14
0000C610 0000                       		dc.w byte_B38C-Map_obj14
0000C612 0000                       		dc.w byte_B392-Map_obj14
0000C614 0000                       		dc.w byte_B398-Map_obj14
0000C616 01                         byte_B37A:	dc.b 1
0000C617 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C61C 01                         byte_B380:	dc.b 1
0000C61D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C622 01                         byte_B386:	dc.b 1
0000C623 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C628 01                         byte_B38C:	dc.b 1
0000C629 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C62E 01                         byte_B392:	dc.b 1
0000C62F F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C634 01                         byte_B398:	dc.b 1
0000C635 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C63A                            		even
0000C63A                            		even
0000C63A                            
0000C63A                            ; ===========================================================================
0000C63A                            ; ---------------------------------------------------------------------------
0000C63A                            ; Object 30 - large green glassy blocks	(MZ)
0000C63A                            ; ---------------------------------------------------------------------------
0000C63A                            
0000C63A                            Obj30:					; XREF: Obj_Index
0000C63A 7000                       		moveq	#0,d0
0000C63C 1028 0024                  		move.b	$24(a0),d0
0000C640 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C644 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C648 3028 0008                  		move.w	8(a0),d0
0000C64C 0240 FF80                  		andi.w	#$FF80,d0
0000C650 3238 F700                  		move.w	($FFFFF700).w,d1
0000C654 0441 0080                  		subi.w	#$80,d1
0000C658 0241 FF80                  		andi.w	#$FF80,d1
0000C65C 9041                       		sub.w	d1,d0
0000C65E 0C40 0280                  		cmpi.w	#$280,d0
0000C662 6300 0000                  		bls.w	DisplaySprite
0000C666 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000C66A 6700                       		beq.s	Obj30_Delete		; if it's zero, don't remember object
0000C66C 3440                       		movea.w	d0,a2	; load address into a2
0000C66E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000C672                            
0000C672                            Obj30_Delete:
0000C672 6000 0000                  		bra.w	DeleteObject
0000C676                            ; ===========================================================================
0000C676 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C678 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C67A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C67C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C67E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C680                            
0000C680 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C683 0400 01                    		dc.b 4,	0, 1
0000C686 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C689 0800 01                    		dc.b 8,	0, 1
0000C68C                            ; ===========================================================================
0000C68C                            
0000C68C                            Obj30_Main:				; XREF: Obj30_Index
0000C68C 45F9 0000 C680             		lea	(Obj30_Vars1).l,a2
0000C692 7201                       		moveq	#1,d1
0000C694 117C 0048 0016             		move.b	#$48,$16(a0)
0000C69A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C6A0 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C6A2 45F9 0000 C686             		lea	(Obj30_Vars2).l,a2
0000C6A8 7201                       		moveq	#1,d1
0000C6AA 117C 0038 0016             		move.b	#$38,$16(a0)
0000C6B0                            
0000C6B0                            loc_B40C:
0000C6B0 2248                       		movea.l	a0,a1
0000C6B2 6000                       		bra.s	Obj30_Load	; load main object
0000C6B4                            ; ===========================================================================
0000C6B4                            
0000C6B4                            Obj30_Loop:
0000C6B4 6100 0000                  		bsr.w	SingleObjLoad2
0000C6B8 6600                       		bne.s	loc_B480
0000C6BA                            
0000C6BA                            Obj30_Load:				; XREF: Obj30_Main
0000C6BA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C6BE 12BC 0030                  		move.b	#$30,0(a1)
0000C6C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6C8 101A                       		move.b	(a2)+,d0
0000C6CA 4880                       		ext.w	d0
0000C6CC D068 000C                  		add.w	$C(a0),d0
0000C6D0 3340 000C                  		move.w	d0,$C(a1)
0000C6D4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C6DC 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C6E2 137C 0004 0001             		move.b	#4,1(a1)
0000C6E8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C6EE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C6F4 137C 0020 0019             		move.b	#$20,$19(a1)
0000C6FA 137C 0004 0018             		move.b	#4,$18(a1)
0000C700 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C704 2348 003C                  		move.l	a0,$3C(a1)
0000C708 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C70C                            
0000C70C 137C 0010 0019             		move.b	#$10,$19(a1)
0000C712 137C 0003 0018             		move.b	#3,$18(a1)
0000C718 5029 0028                  		addq.b	#8,$28(a1)
0000C71C 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C722                            
0000C722                            loc_B480:
0000C722 317C 0090 0032             		move.w	#$90,$32(a0)
0000C728 08E8 0004 0001             		bset	#4,1(a0)
0000C72E                            
0000C72E                            Obj30_Block012:				; XREF: Obj30_Index
0000C72E 6100 0000                  		bsr.w	Obj30_Types
0000C732 323C 002B                  		move.w	#$2B,d1
0000C736 343C 0048                  		move.w	#$48,d2
0000C73A 363C 0049                  		move.w	#$49,d3
0000C73E 3828 0008                  		move.w	8(a0),d4
0000C742 6000 0000                  		bra.w	SolidObject
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C746 2268 003C                  		movea.l	$3C(a0),a1
0000C74A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C750 6000 0000                  		bra.w	Obj30_Types
0000C754                            ; ===========================================================================
0000C754                            
0000C754                            Obj30_Block34:				; XREF: Obj30_Index
0000C754 6100 0000                  		bsr.w	Obj30_Types
0000C758 323C 002B                  		move.w	#$2B,d1
0000C75C 343C 0038                  		move.w	#$38,d2
0000C760 363C 0039                  		move.w	#$39,d3
0000C764 3828 0008                  		move.w	8(a0),d4
0000C768 6000 0000                  		bra.w	SolidObject
0000C76C                            ; ===========================================================================
0000C76C                            
0000C76C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C76C 2268 003C                  		movea.l	$3C(a0),a1
0000C770 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C776 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C77C 6000 0002                  		bra.w	*+4
0000C780                            
0000C780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C780                            
0000C780                            
0000C780                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C780 7000                       		moveq	#0,d0
0000C782 1028 0028                  		move.b	$28(a0),d0
0000C786 0240 0007                  		andi.w	#7,d0
0000C78A D040                       		add.w	d0,d0
0000C78C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C790 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C794                            ; End of function Obj30_Types
0000C794                            
0000C794                            ; ===========================================================================
0000C794 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C796 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C798 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C79A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C79C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C79E 4E75                       		rts	
0000C7A0                            ; ===========================================================================
0000C7A0                            
0000C7A0                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C7A0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7A4 323C 0040                  		move.w	#$40,d1
0000C7A8 6000                       		bra.s	loc_B514
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C7AA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7AE 323C 0040                  		move.w	#$40,d1
0000C7B2 4440                       		neg.w	d0
0000C7B4 D041                       		add.w	d1,d0
0000C7B6                            
0000C7B6                            loc_B514:				; XREF: Obj30_Type01
0000C7B6 0828 0003 0028             		btst	#3,$28(a0)
0000C7BC 6700                       		beq.s	loc_B526
0000C7BE 4440                       		neg.w	d0
0000C7C0 D041                       		add.w	d1,d0
0000C7C2 E208                       		lsr.b	#1,d0
0000C7C4 0640 0020                  		addi.w	#$20,d0
0000C7C8                            
0000C7C8                            loc_B526:
0000C7C8 6000 0000                  		bra.w	loc_B5EE
0000C7CC                            ; ===========================================================================
0000C7CC                            
0000C7CC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C7CC 0828 0003 0028             		btst	#3,$28(a0)
0000C7D2 6700                       		beq.s	loc_B53E
0000C7D4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C7D8 0440 0010                  		subi.w	#$10,d0
0000C7DC 6000 0000                  		bra.w	loc_B5EE
0000C7E0                            ; ===========================================================================
0000C7E0                            
0000C7E0                            loc_B53E:
0000C7E0 0828 0003 0022             		btst	#3,$22(a0)
0000C7E6 6600                       		bne.s	loc_B54E
0000C7E8 08A8 0000 0034             		bclr	#0,$34(a0)
0000C7EE 6000                       		bra.s	loc_B582
0000C7F0                            ; ===========================================================================
0000C7F0                            
0000C7F0                            loc_B54E:
0000C7F0 4A28 0034                  		tst.b	$34(a0)
0000C7F4 6600                       		bne.s	loc_B582
0000C7F6 117C 0001 0034             		move.b	#1,$34(a0)
0000C7FC 08E8 0000 0035             		bset	#0,$35(a0)
0000C802 6700                       		beq.s	loc_B582
0000C804 08E8 0007 0034             		bset	#7,$34(a0)
0000C80A 317C 0010 0036             		move.w	#$10,$36(a0)
0000C810 117C 000A 0038             		move.b	#$A,$38(a0)
0000C816 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C81C 6600                       		bne.s	loc_B582
0000C81E 317C 0040 0036             		move.w	#$40,$36(a0)
0000C824                            
0000C824                            loc_B582:
0000C824 4A28 0034                  		tst.b	$34(a0)
0000C828 6A00                       		bpl.s	loc_B5AA
0000C82A 4A28 0038                  		tst.b	$38(a0)
0000C82E 6700                       		beq.s	loc_B594
0000C830 5328 0038                  		subq.b	#1,$38(a0)
0000C834 6600                       		bne.s	loc_B5AA
0000C836                            
0000C836                            loc_B594:
0000C836 4A68 0032                  		tst.w	$32(a0)
0000C83A 6700                       		beq.s	loc_B5A4
0000C83C 5368 0032                  		subq.w	#1,$32(a0)
0000C840 5368 0036                  		subq.w	#1,$36(a0)
0000C844 6600                       		bne.s	loc_B5AA
0000C846                            
0000C846                            loc_B5A4:
0000C846 08A8 0007 0034             		bclr	#7,$34(a0)
0000C84C                            
0000C84C                            loc_B5AA:
0000C84C 3028 0032                  		move.w	$32(a0),d0
0000C850 6000                       		bra.s	loc_B5EE
0000C852                            ; ===========================================================================
0000C852                            
0000C852                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C852 0828 0003 0028             		btst	#3,$28(a0)
0000C858 6700                       		beq.s	Obj30_ChkSwitch
0000C85A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C85E 0440 0010                  		subi.w	#$10,d0
0000C862 6000                       		bra.s	loc_B5EE
0000C864                            ; ===========================================================================
0000C864                            
0000C864                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C864 4A28 0034                  		tst.b	$34(a0)
0000C868 6600                       		bne.s	loc_B5E0
0000C86A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C86E 7000                       		moveq	#0,d0
0000C870 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C874 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C876 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C87A 6700                       		beq.s	loc_B5EA	; if not, branch
0000C87C 117C 0001 0034             		move.b	#1,$34(a0)
0000C882                            
0000C882                            loc_B5E0:
0000C882 4A68 0032                  		tst.w	$32(a0)
0000C886 6700                       		beq.s	loc_B5EA
0000C888 5568 0032                  		subq.w	#2,$32(a0)
0000C88C                            
0000C88C                            loc_B5EA:
0000C88C 3028 0032                  		move.w	$32(a0),d0
0000C890                            
0000C890                            loc_B5EE:
0000C890 3228 0030                  		move.w	$30(a0),d1
0000C894 9240                       		sub.w	d0,d1
0000C896 3141 000C                  		move.w	d1,$C(a0)
0000C89A 4E75                       		rts	
0000C89C                            ; ===========================================================================
0000C89C                            ; ---------------------------------------------------------------------------
0000C89C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C89C                            ; ---------------------------------------------------------------------------
0000C89C                            Map_obj30:
0000C89C                            	include "_maps\obj30.asm"
0000C89C                            ; ---------------------------------------------------------------------------
0000C89C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C89C                            ; ---------------------------------------------------------------------------
0000C89C 0000                       		dc.w byte_B600-Map_obj30
0000C89E 0000                       		dc.w byte_B63D-Map_obj30
0000C8A0 0000                       		dc.w byte_B648-Map_obj30
0000C8A2 0C                         byte_B600:	dc.b $C
0000C8A3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C8A8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C8AD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C8B2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C8B7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C8BC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C8C1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C8C6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C8CB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C8D0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C8D5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C8DA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C8DF 02                         byte_B63D:	dc.b 2
0000C8E0 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C8E5 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C8EA 0A                         byte_B648:	dc.b $A
0000C8EB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C8F0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C8F5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C8FA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C8FF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C904 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C909 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C90E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C913 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C918 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C91E 00                         		even
0000C91E 00                         		even
0000C91E                            
0000C91E                            ; ===========================================================================
0000C91E                            ; ---------------------------------------------------------------------------
0000C91E                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C91E                            ; ---------------------------------------------------------------------------
0000C91E                            
0000C91E                            Obj31:					; XREF: Obj_Index
0000C91E 7000                       		moveq	#0,d0
0000C920 1028 0024                  		move.b	$24(a0),d0
0000C924 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C928 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C92C                            ; ===========================================================================
0000C92C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C92E 0000                       		dc.w loc_B798-Obj31_Index
0000C930 0000                       		dc.w loc_B7FE-Obj31_Index
0000C932 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C934 0000                       		dc.w loc_B7E2-Obj31_Index
0000C936                            
0000C936 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C938 0100                       		dc.b 1,	0
0000C93A                            
0000C93A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C93D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C940 08CC 03                    		dc.b 8,	$CC, 3
0000C943 06F0 02                    		dc.b 6,	$F0, 2
0000C946                            
0000C946 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C94A 5000 7800                  		dc.w $5000, $7800
0000C94E 3800 5800                  		dc.w $3800, $5800
0000C952 B800                       		dc.w $B800
0000C954                            ; ===========================================================================
0000C954                            
0000C954                            Obj31_Main:				; XREF: Obj31_Index
0000C954 7000                       		moveq	#0,d0
0000C956 1028 0028                  		move.b	$28(a0),d0
0000C95A 6A00                       		bpl.s	loc_B6CE
0000C95C 0240 007F                  		andi.w	#$7F,d0
0000C960 D040                       		add.w	d0,d0
0000C962 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C966 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C96A 101A                       		move.b	(a2)+,d0
0000C96C 1140 0028                  		move.b	d0,$28(a0)
0000C970                            
0000C970                            loc_B6CE:
0000C970 0200 000F                  		andi.b	#$F,d0
0000C974 D040                       		add.w	d0,d0
0000C976 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C97A 4A40                       		tst.w	d0
0000C97C 6600                       		bne.s	loc_B6E0
0000C97E 3142 0032                  		move.w	d2,$32(a0)
0000C982                            
0000C982                            loc_B6E0:
0000C982 45F9 0000 C93A             		lea	(Obj31_Var).l,a2
0000C988 2248                       		movea.l	a0,a1
0000C98A 7203                       		moveq	#3,d1
0000C98C 6000                       		bra.s	Obj31_MakeStomper
0000C98E                            ; ===========================================================================
0000C98E                            
0000C98E                            Obj31_Loop:
0000C98E 6100 0000                  		bsr.w	SingleObjLoad2
0000C992 6600 0000                  		bne.w	Obj31_SetSize
0000C996                            
0000C996                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C996 135A 0024                  		move.b	(a2)+,$24(a1)
0000C99A 12BC 0031                  		move.b	#$31,0(a1)
0000C99E 3368 0008 0008             		move.w	8(a0),8(a1)
0000C9A4 101A                       		move.b	(a2)+,d0
0000C9A6 4880                       		ext.w	d0
0000C9A8 D068 000C                  		add.w	$C(a0),d0
0000C9AC 3340 000C                  		move.w	d0,$C(a1)
0000C9B0 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C9B8 337C 0300 0002             		move.w	#$300,2(a1)
0000C9BE 137C 0004 0001             		move.b	#4,1(a1)
0000C9C4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C9CA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C9D0 137C 0010 0019             		move.b	#$10,$19(a1)
0000C9D6 3342 0034                  		move.w	d2,$34(a1)
0000C9DA 137C 0004 0018             		move.b	#4,$18(a1)
0000C9E0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C9E4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C9EA 6600                       		bne.s	loc_B76A
0000C9EC 5341                       		subq.w	#1,d1
0000C9EE 1028 0028                  		move.b	$28(a0),d0
0000C9F2 0240 00F0                  		andi.w	#$F0,d0
0000C9F6 0C40 0020                  		cmpi.w	#$20,d0
0000C9FA 679A                       		beq.s	Obj31_MakeStomper
0000C9FC 137C 0038 0019             		move.b	#$38,$19(a1)
0000CA02 137C 0090 0020             		move.b	#$90,$20(a1)
0000CA08 5241                       		addq.w	#1,d1
0000CA0A                            
0000CA0A                            loc_B76A:
0000CA0A 2348 003C                  		move.l	a0,$3C(a1)
0000CA0E 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000CA12                            
0000CA12 137C 0003 0018             		move.b	#3,$18(a1)
0000CA18                            
0000CA18                            Obj31_SetSize:
0000CA18 7000                       		moveq	#0,d0
0000CA1A 1028 0028                  		move.b	$28(a0),d0
0000CA1E E648                       		lsr.w	#3,d0
0000CA20 0200 000E                  		andi.b	#$E,d0
0000CA24 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000CA28 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA2C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA30 6000                       		bra.s	loc_B798
0000CA32                            ; ===========================================================================
0000CA32 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000CA34 3009                       		dc.b $30, 9
0000CA36 100A                       		dc.b $10, $A
0000CA38                            ; ===========================================================================
0000CA38                            
0000CA38                            loc_B798:				; XREF: Obj31_Index
0000CA38 6100 0000                  		bsr.w	Obj31_Types
0000CA3C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000CA42 7200                       		moveq	#0,d1
0000CA44 1228 0019                  		move.b	$19(a0),d1
0000CA48 0641 000B                  		addi.w	#$B,d1
0000CA4C 343C 000C                  		move.w	#$C,d2
0000CA50 363C 000D                  		move.w	#$D,d3
0000CA54 3828 0008                  		move.w	8(a0),d4
0000CA58 6100 0000                  		bsr.w	SolidObject
0000CA5C 0828 0003 0022             		btst	#3,$22(a0)
0000CA62 6700                       		beq.s	Obj31_Display
0000CA64 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CA6A 6400                       		bcc.s	Obj31_Display
0000CA6C 2448                       		movea.l	a0,a2
0000CA6E 41F8 D000                  		lea	($FFFFD000).w,a0
0000CA72 4EB9 0000 0000             		jsr	KillSonic
0000CA78 204A                       		movea.l	a2,a0
0000CA7A 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000CA80 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0000CA86                            
0000CA86                            Obj31_Display:
0000CA86 6100 0000                  		bsr.w	DisplaySprite
0000CA8A 6000 0000                  		bra.w	Obj31_ChkDel
0000CA8E                            ; ===========================================================================
0000CA8E                            
0000CA8E                            loc_B7E2:				; XREF: Obj31_Index
0000CA8E 117C 0080 0016             		move.b	#$80,$16(a0)
0000CA94 08E8 0004 0001             		bset	#4,1(a0)
0000CA9A 2268 003C                  		movea.l	$3C(a0),a1
0000CA9E 1029 0032                  		move.b	$32(a1),d0
0000CAA2 EA08                       		lsr.b	#5,d0
0000CAA4 5600                       		addq.b	#3,d0
0000CAA6 1140 001A                  		move.b	d0,$1A(a0)
0000CAAA                            
0000CAAA                            loc_B7FE:				; XREF: Obj31_Index
0000CAAA 2268 003C                  		movea.l	$3C(a0),a1
0000CAAE 7000                       		moveq	#0,d0
0000CAB0 1029 0032                  		move.b	$32(a1),d0
0000CAB4 D068 0030                  		add.w	$30(a0),d0
0000CAB8 3140 000C                  		move.w	d0,$C(a0)
0000CABC                            
0000CABC                            Obj31_Display2:				; XREF: Obj31_Index
0000CABC 6100 0000                  		bsr.w	DisplaySprite
0000CAC0                            
0000CAC0                            Obj31_ChkDel:				; XREF: Obj31_Display
0000CAC0 3028 0008                  		move.w	8(a0),d0
0000CAC4 0240 FF80                  		andi.w	#$FF80,d0
0000CAC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CACC 0441 0080                  		subi.w	#$80,d1
0000CAD0 0241 FF80                  		andi.w	#$FF80,d1
0000CAD4 9041                       		sub.w	d1,d0
0000CAD6 0C40 0280                  		cmpi.w	#$280,d0
0000CADA 6300                       		bls.s	Obj31_NoDel
0000CADC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CAE0 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CAE4 3640                       		movea.w	d0,a3	; load address into a2
0000CAE6 0893 0007                  		bclr	#7,(a3)	; clear respawn table entry, so object can be loaded again
0000CAEA 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CAEE                            
0000CAEE                            Obj31_NoDel:
0000CAEE 4E75                       		rts	
0000CAF0                            ; ===========================================================================
0000CAF0                            
0000CAF0                            Obj31_Types:				; XREF: loc_B798
0000CAF0 1028 0028                  		move.b	$28(a0),d0
0000CAF4 0240 000F                  		andi.w	#$F,d0
0000CAF8 D040                       		add.w	d0,d0
0000CAFA 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000CAFE 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000CB02                            ; ===========================================================================
0000CB02 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000CB04 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB06 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB08 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB0A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB0C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000CB0E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000CB10                            ; ===========================================================================
0000CB10                            
0000CB10                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000CB10 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000CB14 7000                       		moveq	#0,d0
0000CB16 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000CB1A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000CB1E 6700                       		beq.s	loc_B8A8	; if not, branch
0000CB20 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000CB24 6A00                       		bpl.s	loc_B872
0000CB26 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000CB2C 6700                       		beq.s	loc_B8A0
0000CB2E                            
0000CB2E                            loc_B872:
0000CB2E 4A68 0032                  		tst.w	$32(a0)
0000CB32 6700                       		beq.s	loc_B8A0
0000CB34 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB38 0200 000F                  		andi.b	#$F,d0
0000CB3C 6600                       		bne.s	loc_B892
0000CB3E 4A28 0001                  		tst.b	1(a0)
0000CB42 6A00                       		bpl.s	loc_B892
0000CB44 303C 00C7                  		move.w	#$C7,d0
0000CB48 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CB4E                            
0000CB4E                            loc_B892:
0000CB4E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB54 6400                       		bcc.s	Obj31_Restart
0000CB56 317C 0000 0032             		move.w	#0,$32(a0)
0000CB5C                            
0000CB5C                            loc_B8A0:
0000CB5C 317C 0000 0012             		move.w	#0,$12(a0)
0000CB62 6000                       		bra.s	Obj31_Restart
0000CB64                            ; ===========================================================================
0000CB64                            
0000CB64                            loc_B8A8:				; XREF: Obj31_Type00
0000CB64 3228 0034                  		move.w	$34(a0),d1
0000CB68 B268 0032                  		cmp.w	$32(a0),d1
0000CB6C 6700                       		beq.s	Obj31_Restart
0000CB6E 3028 0012                  		move.w	$12(a0),d0
0000CB72 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CB78 D168 0032                  		add.w	d0,$32(a0)
0000CB7C B268 0032                  		cmp.w	$32(a0),d1
0000CB80 6200                       		bhi.s	Obj31_Restart
0000CB82 3141 0032                  		move.w	d1,$32(a0)
0000CB86 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CB8C 4A28 0001                  		tst.b	1(a0)
0000CB90 6A00                       		bpl.s	Obj31_Restart
0000CB92 303C 00BD                  		move.w	#$BD,d0
0000CB96 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CB9C                            
0000CB9C                            Obj31_Restart:
0000CB9C 7000                       		moveq	#0,d0
0000CB9E 1028 0032                  		move.b	$32(a0),d0
0000CBA2 D068 0030                  		add.w	$30(a0),d0
0000CBA6 3140 000C                  		move.w	d0,$C(a0)
0000CBAA 4E75                       		rts	
0000CBAC                            ; ===========================================================================
0000CBAC                            
0000CBAC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CBAC 4A68 0036                  		tst.w	$36(a0)
0000CBB0 6700                       		beq.s	loc_B938
0000CBB2 4A68 0038                  		tst.w	$38(a0)
0000CBB6 6700                       		beq.s	loc_B902
0000CBB8 5368 0038                  		subq.w	#1,$38(a0)
0000CBBC 6000                       		bra.s	loc_B97C
0000CBBE                            ; ===========================================================================
0000CBBE                            
0000CBBE                            loc_B902:
0000CBBE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBC2 0200 000F                  		andi.b	#$F,d0
0000CBC6 6600                       		bne.s	loc_B91C
0000CBC8 4A28 0001                  		tst.b	1(a0)
0000CBCC 6A00                       		bpl.s	loc_B91C
0000CBCE 303C 00C7                  		move.w	#$C7,d0
0000CBD2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CBD8                            
0000CBD8                            loc_B91C:
0000CBD8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CBDE 6400                       		bcc.s	loc_B97C
0000CBE0 317C 0000 0032             		move.w	#0,$32(a0)
0000CBE6 317C 0000 0012             		move.w	#0,$12(a0)
0000CBEC 317C 0000 0036             		move.w	#0,$36(a0)
0000CBF2 6000                       		bra.s	loc_B97C
0000CBF4                            ; ===========================================================================
0000CBF4                            
0000CBF4                            loc_B938:				; XREF: Obj31_Type01
0000CBF4 3228 0034                  		move.w	$34(a0),d1
0000CBF8 B268 0032                  		cmp.w	$32(a0),d1
0000CBFC 6700                       		beq.s	loc_B97C
0000CBFE 3028 0012                  		move.w	$12(a0),d0
0000CC02 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CC08 D168 0032                  		add.w	d0,$32(a0)
0000CC0C B268 0032                  		cmp.w	$32(a0),d1
0000CC10 6200                       		bhi.s	loc_B97C
0000CC12 3141 0032                  		move.w	d1,$32(a0)
0000CC16 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CC1C 317C 0001 0036             		move.w	#1,$36(a0)
0000CC22 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CC28 4A28 0001                  		tst.b	1(a0)
0000CC2C 6A00                       		bpl.s	loc_B97C
0000CC2E 303C 00BD                  		move.w	#$BD,d0
0000CC32 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CC38                            
0000CC38                            loc_B97C:
0000CC38 6000 FF62                  		bra.w	Obj31_Restart
0000CC3C                            ; ===========================================================================
0000CC3C                            
0000CC3C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CC3C 3038 D008                  		move.w	($FFFFD008).w,d0
0000CC40 9068 0008                  		sub.w	8(a0),d0
0000CC44 6400                       		bcc.s	loc_B98C
0000CC46 4440                       		neg.w	d0
0000CC48                            
0000CC48                            loc_B98C:
0000CC48 0C40 0090                  		cmpi.w	#$90,d0
0000CC4C 6400                       		bcc.s	loc_B996
0000CC4E 5228 0028                  		addq.b	#1,$28(a0)
0000CC52                            
0000CC52                            loc_B996:
0000CC52 6000 FF48                  		bra.w	Obj31_Restart
0000CC56                            ; ===========================================================================
0000CC56                            ; ---------------------------------------------------------------------------
0000CC56                            ; Object 45 - spiked metal block from beta version (MZ)
0000CC56                            ; ---------------------------------------------------------------------------
0000CC56                            
0000CC56                            Obj45:					; XREF: Obj_Index
0000CC56 7000                       		moveq	#0,d0
0000CC58 1028 0024                  		move.b	$24(a0),d0
0000CC5C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CC60 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CC64                            ; ===========================================================================
0000CC64 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CC66 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CC68 0000                       		dc.w loc_BA8E-Obj45_Index
0000CC6A 0000                       		dc.w Obj45_Display-Obj45_Index
0000CC6C 0000                       		dc.w loc_BA7A-Obj45_Index
0000CC6E                            
0000CC6E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CC71 04E4 01                    		dc.b	4, $E4,	  1
0000CC74 0834 03                    		dc.b	8, $34,	  3
0000CC77 0628 02                    		dc.b	6, $28,	  2
0000CC7A                            
0000CC7A 3800                       word_B9BE:	dc.w $3800
0000CC7C A000                       		dc.w -$6000
0000CC7E 5000                       		dc.w $5000
0000CC80                            ; ===========================================================================
0000CC80                            
0000CC80                            Obj45_Main:				; XREF: Obj45_Index
0000CC80 7000                       		moveq	#0,d0
0000CC82 1028 0028                  		move.b	$28(a0),d0
0000CC86 D040                       		add.w	d0,d0
0000CC88 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CC8C 45F9 0000 CC6E             		lea	(Obj45_Var).l,a2
0000CC92 2248                       		movea.l	a0,a1
0000CC94 7203                       		moveq	#3,d1
0000CC96 6000                       		bra.s	Obj45_Load
0000CC98                            ; ===========================================================================
0000CC98                            
0000CC98                            Obj45_Loop:
0000CC98 6100 0000                  		bsr.w	SingleObjLoad2
0000CC9C 6600                       		bne.s	loc_BA52
0000CC9E                            
0000CC9E                            Obj45_Load:				; XREF: Obj45_Main
0000CC9E 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCA2 12BC 0045                  		move.b	#$45,0(a1)
0000CCA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CCAC 101A                       		move.b	(a2)+,d0
0000CCAE 4880                       		ext.w	d0
0000CCB0 D068 0008                  		add.w	8(a0),d0
0000CCB4 3340 0008                  		move.w	d0,8(a1)
0000CCB8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CCC0 337C 0300 0002             		move.w	#$300,2(a1)
0000CCC6 137C 0004 0001             		move.b	#4,1(a1)
0000CCCC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CCD2 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CCD8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CCDE 137C 0020 0019             		move.b	#$20,$19(a1)
0000CCE4 3342 0034                  		move.w	d2,$34(a1)
0000CCE8 137C 0004 0018             		move.b	#4,$18(a1)
0000CCEE 0C12 0001                  		cmpi.b	#1,(a2)
0000CCF2 6600                       		bne.s	loc_BA40
0000CCF4 137C 0091 0020             		move.b	#$91,$20(a1)
0000CCFA                            
0000CCFA                            loc_BA40:
0000CCFA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCFE 2348 003C                  		move.l	a0,$3C(a1)
0000CD02 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CD06                            
0000CD06 137C 0003 0018             		move.b	#3,$18(a1)
0000CD0C                            
0000CD0C                            loc_BA52:
0000CD0C 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD12                            
0000CD12                            Obj45_Solid:				; XREF: Obj45_Index
0000CD12 3F28 0008                  		move.w	8(a0),-(sp)
0000CD16 6100 0000                  		bsr.w	Obj45_Move
0000CD1A 323C 0017                  		move.w	#$17,d1
0000CD1E 343C 0020                  		move.w	#$20,d2
0000CD22 363C 0020                  		move.w	#$20,d3
0000CD26 381F                       		move.w	(sp)+,d4
0000CD28 6100 0000                  		bsr.w	SolidObject
0000CD2C 6100 0000                  		bsr.w	DisplaySprite
0000CD30 6000 0000                  		bra.w	Obj45_ChkDel
0000CD34                            ; ===========================================================================
0000CD34                            
0000CD34                            loc_BA7A:				; XREF: Obj45_Index
0000CD34 2268 003C                  		movea.l	$3C(a0),a1
0000CD38 1029 0032                  		move.b	$32(a1),d0
0000CD3C 0600 0010                  		addi.b	#$10,d0
0000CD40 EA08                       		lsr.b	#5,d0
0000CD42 5600                       		addq.b	#3,d0
0000CD44 1140 001A                  		move.b	d0,$1A(a0)
0000CD48                            
0000CD48                            loc_BA8E:				; XREF: Obj45_Index
0000CD48 2268 003C                  		movea.l	$3C(a0),a1
0000CD4C 7000                       		moveq	#0,d0
0000CD4E 1029 0032                  		move.b	$32(a1),d0
0000CD52 4440                       		neg.w	d0
0000CD54 D068 0030                  		add.w	$30(a0),d0
0000CD58 3140 0008                  		move.w	d0,8(a0)
0000CD5C                            
0000CD5C                            Obj45_Display:				; XREF: Obj45_Index
0000CD5C 6100 0000                  		bsr.w	DisplaySprite
0000CD60                            
0000CD60                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CD60 3028 003A                  		move.w	$3A(a0),d0
0000CD64 0240 FF80                  		andi.w	#$FF80,d0
0000CD68 3238 F700                  		move.w	($FFFFF700).w,d1
0000CD6C 0441 0080                  		subi.w	#$80,d1
0000CD70 0241 FF80                  		andi.w	#$FF80,d1
0000CD74 9041                       		sub.w	d1,d0
0000CD76 0C40 0280                  		cmpi.w	#$280,d0
0000CD7A 6300                       		bls.s	Obj45_NoDel
0000CD7C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000CD80 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000CD84 3440                       		movea.w	d0,a2	; load address into a2
0000CD86 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000CD8A 6000 0000                  		bra.w	DeleteObject	; and delete object
0000CD8E                            
0000CD8E                            Obj45_NoDel:
0000CD8E 4E75                       		rts	
0000CD90                            
0000CD90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD90                            
0000CD90                            
0000CD90                            Obj45_Move:				; XREF: Obj45_Solid
0000CD90 7000                       		moveq	#0,d0
0000CD92 1028 0028                  		move.b	$28(a0),d0
0000CD96 D040                       		add.w	d0,d0
0000CD98 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CD9C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CDA0                            ; End of function Obj45_Move
0000CDA0                            
0000CDA0                            ; ===========================================================================
0000CDA0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CDA2 0000                       		dc.w loc_BADA-off_BAD6
0000CDA4                            ; ===========================================================================
0000CDA4                            
0000CDA4                            loc_BADA:				; XREF: off_BAD6
0000CDA4 4A68 0036                  		tst.w	$36(a0)
0000CDA8 6700                       		beq.s	loc_BB08
0000CDAA 4A68 0038                  		tst.w	$38(a0)
0000CDAE 6700                       		beq.s	loc_BAEC
0000CDB0 5368 0038                  		subq.w	#1,$38(a0)
0000CDB4 6000                       		bra.s	loc_BB3C
0000CDB6                            ; ===========================================================================
0000CDB6                            
0000CDB6                            loc_BAEC:
0000CDB6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CDBC 6400                       		bcc.s	loc_BB3C
0000CDBE 317C 0000 0032             		move.w	#0,$32(a0)
0000CDC4 317C 0000 0010             		move.w	#0,$10(a0)
0000CDCA 317C 0000 0036             		move.w	#0,$36(a0)
0000CDD0 6000                       		bra.s	loc_BB3C
0000CDD2                            ; ===========================================================================
0000CDD2                            
0000CDD2                            loc_BB08:				; XREF: loc_BADA
0000CDD2 3228 0034                  		move.w	$34(a0),d1
0000CDD6 B268 0032                  		cmp.w	$32(a0),d1
0000CDDA 6700                       		beq.s	loc_BB3C
0000CDDC 3028 0010                  		move.w	$10(a0),d0
0000CDE0 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CDE6 D168 0032                  		add.w	d0,$32(a0)
0000CDEA B268 0032                  		cmp.w	$32(a0),d1
0000CDEE 6200                       		bhi.s	loc_BB3C
0000CDF0 3141 0032                  		move.w	d1,$32(a0)
0000CDF4 317C 0000 0010             		move.w	#0,$10(a0)
0000CDFA 317C 0001 0036             		move.w	#1,$36(a0)
0000CE00 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CE06                            
0000CE06                            loc_BB3C:
0000CE06 7000                       		moveq	#0,d0
0000CE08 1028 0032                  		move.b	$32(a0),d0
0000CE0C 4440                       		neg.w	d0
0000CE0E D068 0030                  		add.w	$30(a0),d0
0000CE12 3140 0008                  		move.w	d0,8(a0)
0000CE16 4E75                       		rts	
0000CE18                            ; ===========================================================================
0000CE18                            ; ---------------------------------------------------------------------------
0000CE18                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE18                            ; ---------------------------------------------------------------------------
0000CE18                            Map_obj31:
0000CE18                            	include "_maps\obj31.asm"
0000CE18                            ; ---------------------------------------------------------------------------
0000CE18                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CE18                            ; ---------------------------------------------------------------------------
0000CE18 0000                       		dc.w byte_BB64-Map_obj31
0000CE1A 0000                       		dc.w byte_BB7E-Map_obj31
0000CE1C 0000                       		dc.w byte_BB98-Map_obj31
0000CE1E 0000                       		dc.w byte_BB9E-Map_obj31
0000CE20 0000                       		dc.w byte_BBA9-Map_obj31
0000CE22 0000                       		dc.w byte_BBBE-Map_obj31
0000CE24 0000                       		dc.w byte_BBDD-Map_obj31
0000CE26 0000                       		dc.w byte_BC06-Map_obj31
0000CE28 0000                       		dc.w byte_BC06-Map_obj31
0000CE2A 0000                       		dc.w byte_BC39-Map_obj31
0000CE2C 0000                       		dc.w byte_BC53-Map_obj31
0000CE2E 05                         byte_BB64:	dc.b 5
0000CE2F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CE34 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CE39 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CE3E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CE43 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CE48 05                         byte_BB7E:	dc.b 5
0000CE49 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CE4E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CE53 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CE58 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CE5D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CE62 01                         byte_BB98:	dc.b 1
0000CE63 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CE68 02                         byte_BB9E:	dc.b 2
0000CE69 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CE6E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CE73 04                         byte_BBA9:	dc.b 4
0000CE74 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CE79 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CE7E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CE83 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CE88 06                         byte_BBBE:	dc.b 6
0000CE89 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CE8E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CE93 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CE98 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CE9D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEA2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CEA7 08                         byte_BBDD:	dc.b 8
0000CEA8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CEAD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CEB2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEB7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEBC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEC1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEC6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CECB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CED0 0A                         byte_BC06:	dc.b $A
0000CED1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CED6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CEDB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CEE0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CEE5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CEEA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CEEF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CEF4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CEF9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CEFE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CF03 05                         byte_BC39:	dc.b 5
0000CF04 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CF09 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CF0E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CF13 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CF18 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CF1D 01                         byte_BC53:	dc.b 1
0000CF1E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CF24 00                         		even
0000CF24 00                         		even
0000CF24                            
0000CF24                            ; ---------------------------------------------------------------------------
0000CF24                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF24                            ; ---------------------------------------------------------------------------
0000CF24                            Map_obj45:
0000CF24                            	include "_maps\obj45.asm"
0000CF24                            ; ---------------------------------------------------------------------------
0000CF24                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CF24                            ; ---------------------------------------------------------------------------
0000CF24 0000                       		dc.w byte_BC6C-Map_obj45
0000CF26 0000                       		dc.w byte_BC7C-Map_obj45
0000CF28 0000                       		dc.w byte_BC8C-Map_obj45
0000CF2A 0000                       		dc.w byte_BC92-Map_obj45
0000CF2C 0000                       		dc.w byte_BC9D-Map_obj45
0000CF2E 0000                       		dc.w byte_BCB2-Map_obj45
0000CF30 0000                       		dc.w byte_BCD1-Map_obj45
0000CF32 0000                       		dc.w byte_BCFA-Map_obj45
0000CF34 0000                       		dc.w byte_BCFA-Map_obj45
0000CF36 03                         byte_BC6C:	dc.b 3
0000CF37 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CF3C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CF41 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CF46 03                         byte_BC7C:	dc.b 3
0000CF47 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CF4C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CF51 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CF56 01                         byte_BC8C:	dc.b 1
0000CF57 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CF5C 02                         byte_BC92:	dc.b 2
0000CF5D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF62 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF67 04                         byte_BC9D:	dc.b 4
0000CF68 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF6D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF72 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CF77 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CF7C 06                         byte_BCB2:	dc.b 6
0000CF7D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CF82 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CF87 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CF8C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CF91 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CF96 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CF9B 08                         byte_BCD1:	dc.b 8
0000CF9C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFA1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFA6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFAB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFB0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFB5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFBA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CFBF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CFC4 08                         byte_BCFA:	dc.b 8
0000CFC5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CFCA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CFCF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CFD4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CFD9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CFDE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CFE3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CFE8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CFED F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CFF2 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CFF8 00                         		even
0000CFF8 00                         		even
0000CFF8                            
0000CFF8                            ; ===========================================================================
0000CFF8                            ; ---------------------------------------------------------------------------
0000CFF8                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CFF8                            ; ---------------------------------------------------------------------------
0000CFF8                            
0000CFF8                            Obj32:					; XREF: Obj_Index
0000CFF8 7000                       		moveq	#0,d0
0000CFFA 1028 0024                  		move.b	$24(a0),d0
0000CFFE 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000D002 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000D006                            ; ===========================================================================
0000D006 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000D008 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000D00A                            ; ===========================================================================
0000D00A                            
0000D00A                            Obj32_Main:				; XREF: Obj32_Index
0000D00A 5428 0024                  		addq.b	#2,$24(a0)
0000D00E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000D016 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000D01C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000D022 6700                       		beq.s	loc_BD60
0000D024 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000D02A                            
0000D02A                            loc_BD60:
0000D02A 117C 0004 0001             		move.b	#4,1(a0)
0000D030 117C 0010 0019             		move.b	#$10,$19(a0)
0000D036 117C 0004 0018             		move.b	#4,$18(a0)
0000D03C 5668 000C                  		addq.w	#3,$C(a0)
0000D040                            
0000D040                            Obj32_Pressed:				; XREF: Obj32_Index
0000D040 4A28 0001                  		tst.b	1(a0)
0000D044 6A00                       		bpl.s	Obj32_Display
0000D046 323C 001B                  		move.w	#$1B,d1
0000D04A 343C 0005                  		move.w	#5,d2
0000D04E 363C 0005                  		move.w	#5,d3
0000D052 3828 0008                  		move.w	8(a0),d4
0000D056 6100 0000                  		bsr.w	SolidObject
0000D05A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000D060 1028 0028                  		move.b	$28(a0),d0
0000D064 0240 000F                  		andi.w	#$F,d0
0000D068 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000D06C 47F3 0000                  		lea	(a3,d0.w),a3
0000D070 7600                       		moveq	#0,d3
0000D072 0828 0006 0028             		btst	#6,$28(a0)
0000D078 6700                       		beq.s	loc_BDB2
0000D07A 7607                       		moveq	#7,d3
0000D07C                            
0000D07C                            loc_BDB2:
0000D07C 4A28 0028                  		tst.b	$28(a0)
0000D080 6A00                       		bpl.s	loc_BDBE
0000D082 6100 0000                  		bsr.w	Obj32_MZBlock
0000D086 6600                       		bne.s	loc_BDC8
0000D088                            
0000D088                            loc_BDBE:
0000D088 4A28 0025                  		tst.b	$25(a0)
0000D08C 6600                       		bne.s	loc_BDC8
0000D08E 0793                       		bclr	d3,(a3)
0000D090 6000                       		bra.s	loc_BDDE
0000D092                            ; ===========================================================================
0000D092                            
0000D092                            loc_BDC8:
0000D092 4A13                       		tst.b	(a3)
0000D094 6600                       		bne.s	loc_BDD6
0000D096 303C 00CD                  		move.w	#$CD,d0
0000D09A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play switch sound
0000D0A0                            
0000D0A0                            loc_BDD6:
0000D0A0 07D3                       		bset	d3,(a3)
0000D0A2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000D0A8                            
0000D0A8                            loc_BDDE:
0000D0A8 0828 0005 0028             		btst	#5,$28(a0)
0000D0AE 6700                       		beq.s	Obj32_Display
0000D0B0 5328 001E                  		subq.b	#1,$1E(a0)
0000D0B4 6A00                       		bpl.s	Obj32_Display
0000D0B6 117C 0007 001E             		move.b	#7,$1E(a0)
0000D0BC 0868 0001 001A             		bchg	#1,$1A(a0)
0000D0C2                            
0000D0C2                            Obj32_Display:
0000D0C2 6100 0000                  		bsr.w	DisplaySprite
0000D0C6 3028 0008                  		move.w	8(a0),d0
0000D0CA 0240 FF80                  		andi.w	#$FF80,d0
0000D0CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0D2 0441 0080                  		subi.w	#$80,d1
0000D0D6 0241 FF80                  		andi.w	#$FF80,d1
0000D0DA 9041                       		sub.w	d1,d0
0000D0DC 0C40 0280                  		cmpi.w	#$280,d0
0000D0E0 6300                       		bls.s	Obj32_NoDel
0000D0E2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D0E6 6700                       		beq.s	Obj32_Delete		; if it's zero, don't remember object
0000D0E8 3440                       		movea.w	d0,a2	; load address into a2
0000D0EA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D0EE 6000                       		bra.s	Obj32_Delete	; and delete object
0000D0F0                            
0000D0F0                            Obj32_NoDel:
0000D0F0 4E75                       		rts	
0000D0F2                            ; ===========================================================================
0000D0F2                            
0000D0F2                            Obj32_Delete:
0000D0F2 6100 0000                  		bsr.w	DeleteObject
0000D0F6 4E75                       		rts	
0000D0F8                            
0000D0F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D0F8                            
0000D0F8                            
0000D0F8                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000D0F8 3F03                       		move.w	d3,-(sp)
0000D0FA 3428 0008                  		move.w	8(a0),d2
0000D0FE 3628 000C                  		move.w	$C(a0),d3
0000D102 0442 0010                  		subi.w	#$10,d2
0000D106 5143                       		subq.w	#8,d3
0000D108 383C 0020                  		move.w	#$20,d4
0000D10C 3A3C 0010                  		move.w	#$10,d5
0000D110 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000D114 3C3C 005F                  		move.w	#$5F,d6
0000D118                            
0000D118                            Obj32_MZLoop:
0000D118 4A29 0001                  		tst.b	1(a1)
0000D11C 6A00                       		bpl.s	loc_BE4E
0000D11E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000D122 6700                       		beq.s	loc_BE5E	; if yes, branch
0000D124                            
0000D124                            loc_BE4E:
0000D124 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000D128 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000D12C                            
0000D12C 361F                       		move.w	(sp)+,d3
0000D12E 7000                       		moveq	#0,d0
0000D130                            
0000D130                            locret_BE5A:
0000D130 4E75                       		rts	
0000D132                            ; ===========================================================================
0000D132 1010                       Obj32_MZData:	dc.b $10, $10
0000D134                            ; ===========================================================================
0000D134                            
0000D134                            loc_BE5E:				; XREF: Obj32_MZBlock
0000D134 7001                       		moveq	#1,d0
0000D136 0240 003F                  		andi.w	#$3F,d0
0000D13A D040                       		add.w	d0,d0
0000D13C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000D140 121A                       		move.b	(a2)+,d1
0000D142 4881                       		ext.w	d1
0000D144 3029 0008                  		move.w	8(a1),d0
0000D148 9041                       		sub.w	d1,d0
0000D14A 9042                       		sub.w	d2,d0
0000D14C 6400                       		bcc.s	loc_BE80
0000D14E D241                       		add.w	d1,d1
0000D150 D041                       		add.w	d1,d0
0000D152 6500                       		bcs.s	loc_BE84
0000D154 60CE                       		bra.s	loc_BE4E
0000D156                            ; ===========================================================================
0000D156                            
0000D156                            loc_BE80:
0000D156 B044                       		cmp.w	d4,d0
0000D158 62CA                       		bhi.s	loc_BE4E
0000D15A                            
0000D15A                            loc_BE84:
0000D15A 121A                       		move.b	(a2)+,d1
0000D15C 4881                       		ext.w	d1
0000D15E 3029 000C                  		move.w	$C(a1),d0
0000D162 9041                       		sub.w	d1,d0
0000D164 9043                       		sub.w	d3,d0
0000D166 6400                       		bcc.s	loc_BE9A
0000D168 D241                       		add.w	d1,d1
0000D16A D041                       		add.w	d1,d0
0000D16C 6500                       		bcs.s	loc_BE9E
0000D16E 60B4                       		bra.s	loc_BE4E
0000D170                            ; ===========================================================================
0000D170                            
0000D170                            loc_BE9A:
0000D170 B045                       		cmp.w	d5,d0
0000D172 62B0                       		bhi.s	loc_BE4E
0000D174                            
0000D174                            loc_BE9E:
0000D174 361F                       		move.w	(sp)+,d3
0000D176 7001                       		moveq	#1,d0
0000D178 4E75                       		rts	
0000D17A                            ; End of function Obj32_MZBlock
0000D17A                            
0000D17A                            ; ===========================================================================
0000D17A                            ; ---------------------------------------------------------------------------
0000D17A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D17A                            ; ---------------------------------------------------------------------------
0000D17A                            Map_obj32:
0000D17A                            	include "_maps\obj32.asm"
0000D17A                            ; ---------------------------------------------------------------------------
0000D17A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000D17A                            ; ---------------------------------------------------------------------------
0000D17A 0000                       		dc.w byte_BEAC-Map_obj32
0000D17C 0000                       		dc.w byte_BEB7-Map_obj32
0000D17E 0000                       		dc.w byte_BEC2-Map_obj32
0000D180 0000                       		dc.w byte_BEB7-Map_obj32
0000D182 02                         byte_BEAC:	dc.b 2
0000D183 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000D188 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000D18D 02                         byte_BEB7:	dc.b 2
0000D18E F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D193 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D198 02                         byte_BEC2:	dc.b 2
0000D199 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D19E F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D1A3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D1A8                            		even
0000D1A8                            		even
0000D1A8                            
0000D1A8                            ; ===========================================================================
0000D1A8                            ; ---------------------------------------------------------------------------
0000D1A8                            ; Object 33 - pushable blocks (MZ, LZ)
0000D1A8                            ; ---------------------------------------------------------------------------
0000D1A8                            
0000D1A8                            Obj33:					; XREF: Obj_Index
0000D1A8 7000                       		moveq	#0,d0
0000D1AA 1028 0024                  		move.b	$24(a0),d0
0000D1AE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D1B2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D1B6                            ; ===========================================================================
0000D1B6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D1B8 0000                       		dc.w loc_BF6E-Obj33_Index
0000D1BA 0000                       		dc.w loc_C02C-Obj33_Index
0000D1BC                            
0000D1BC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D1BE 4001                       		dc.b $40, 1
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            Obj33_Main:				; XREF: Obj33_Index
0000D1C0 5428 0024                  		addq.b	#2,$24(a0)
0000D1C4 117C 000F 0016             		move.b	#$F,$16(a0)
0000D1CA 117C 000F 0017             		move.b	#$F,$17(a0)
0000D1D0 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D1D8 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D1DE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D1E4 6600                       		bne.s	loc_BF16
0000D1E6 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D1EC                            
0000D1EC                            loc_BF16:
0000D1EC 117C 0004 0001             		move.b	#4,1(a0)
0000D1F2 117C 0003 0018             		move.b	#3,$18(a0)
0000D1F8 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D1FE 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D204 7000                       		moveq	#0,d0
0000D206 1028 0028                  		move.b	$28(a0),d0
0000D20A D040                       		add.w	d0,d0
0000D20C 0240 000E                  		andi.w	#$E,d0
0000D210 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D214 115A 0019                  		move.b	(a2)+,$19(a0)
0000D218 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D21C 4A28 0028                  		tst.b	$28(a0)
0000D220 6700                       		beq.s	Obj33_ChkGone
0000D222 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D228                            
0000D228                            Obj33_ChkGone:
0000D228 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D22C 6700                       		beq.s	loc_BF6E		; if it's zero, don't remember object
0000D22E 3440                       		movea.w	d0,a2	; load address into a2
0000D230 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D234 08D2 0000                  		bset	#0,(a2)
0000D238 6600 0000                  		bne.w	DeleteObject
0000D23C                            
0000D23C                            loc_BF6E:				; XREF: Obj33_Index
0000D23C 4A28 0032                  		tst.b	$32(a0)
0000D240 6600 0000                  		bne.w	loc_C046
0000D244 7200                       		moveq	#0,d1
0000D246 1228 0019                  		move.b	$19(a0),d1
0000D24A 0641 000B                  		addi.w	#$B,d1
0000D24E 343C 0010                  		move.w	#$10,d2
0000D252 363C 0011                  		move.w	#$11,d3
0000D256 3828 0008                  		move.w	8(a0),d4
0000D25A 6100 0000                  		bsr.w	loc_C186
0000D25E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D264 6600                       		bne.s	loc_BFC6	; if not, branch
0000D266 08A8 0007 0028             		bclr	#7,$28(a0)
0000D26C 3028 0008                  		move.w	8(a0),d0
0000D270 0C40 0A20                  		cmpi.w	#$A20,d0
0000D274 6500                       		bcs.s	loc_BFC6
0000D276 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D27A 6400                       		bcc.s	loc_BFC6
0000D27C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D280 0440 001C                  		subi.w	#$1C,d0
0000D284 3140 000C                  		move.w	d0,$C(a0)
0000D288 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D28E 08E8 0007 0028             		bset	#7,$28(a0)
0000D294                            
0000D294                            loc_BFC6:
0000D294 3028 0008                  		move.w	8(a0),d0
0000D298 0240 FF80                  		andi.w	#$FF80,d0
0000D29C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2A0 0441 0080                  		subi.w	#$80,d1
0000D2A4 0241 FF80                  		andi.w	#$FF80,d1
0000D2A8 9041                       		sub.w	d1,d0
0000D2AA 0C40 0280                  		cmpi.w	#$280,d0
0000D2AE 6300 0000                  		bls.w	DisplaySprite
0000D2B2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D2B6 6700                       		beq.s	loc_BFE6	; if it's zero, don't remember object
0000D2B8 3440                       		movea.w	d0,a2	; load address into a2
0000D2BA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000D2BE                            
0000D2BE                            loc_BFE6:
0000D2BE 3028 0034                  		move.w	$34(a0),d0
0000D2C2 0240 FF80                  		andi.w	#$FF80,d0
0000D2C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2CA 0441 0080                  		subi.w	#$80,d1
0000D2CE 0241 FF80                  		andi.w	#$FF80,d1
0000D2D2 9041                       		sub.w	d1,d0
0000D2D4 0C40 0280                  		cmpi.w	#$280,d0
0000D2D8 6200                       		bhi.s	loc_C016
0000D2DA 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D2E0 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D2E6 117C 0004 0024             		move.b	#4,$24(a0)
0000D2EC 6000                       		bra.s	loc_C02C
0000D2EE                            ; ===========================================================================
0000D2EE                            
0000D2EE                            loc_C016:
0000D2EE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000D2F2 6700                       		beq.s	loc_C028		; if it's zero, don't remember object
0000D2F4 3440                       		movea.w	d0,a2	; load address into a2
0000D2F6 0892 0000                  		bclr	#0,(a2)
0000D2FA                            
0000D2FA                            loc_C028:
0000D2FA 6000 0000                  		bra.w	DeleteObject
0000D2FE                            ; ===========================================================================
0000D2FE                            
0000D2FE                            loc_C02C:				; XREF: Obj33_Index
0000D2FE 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D302 6700                       		beq.s	locret_C044
0000D304 117C 0002 0024             		move.b	#2,$24(a0)
0000D30A 4228 0032                  		clr.b	$32(a0)
0000D30E 4268 0010                  		clr.w	$10(a0)
0000D312 4268 0012                  		clr.w	$12(a0)
0000D316                            
0000D316                            locret_C044:
0000D316 4E75                       		rts	
0000D318                            ; ===========================================================================
0000D318                            
0000D318                            loc_C046:				; XREF: loc_BF6E
0000D318 3F28 0008                  		move.w	8(a0),-(sp)
0000D31C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D322 6400                       		bcc.s	loc_C056
0000D324 6100 0000                  		bsr.w	SpeedToPos
0000D328                            
0000D328                            loc_C056:
0000D328 0828 0001 0022             		btst	#1,$22(a0)
0000D32E 6700                       		beq.s	loc_C0A0
0000D330 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D336 4EB9 0000 0000             		jsr	ObjHitFloor
0000D33C 4A41                       		tst.w	d1
0000D33E 6A00 0000                  		bpl.w	loc_C09E
0000D342 D368 000C                  		add.w	d1,$C(a0)
0000D346 4268 0012                  		clr.w	$12(a0)
0000D34A 08A8 0001 0022             		bclr	#1,$22(a0)
0000D350 3011                       		move.w	(a1),d0
0000D352 0240 03FF                  		andi.w	#$3FF,d0
0000D356 0C40 016A                  		cmpi.w	#$16A,d0
0000D35A 6500                       		bcs.s	loc_C09E
0000D35C 3028 0030                  		move.w	$30(a0),d0
0000D360 E640                       		asr.w	#3,d0
0000D362 3140 0010                  		move.w	d0,$10(a0)
0000D366 117C 0001 0032             		move.b	#1,$32(a0)
0000D36C 4268 000E                  		clr.w	$E(a0)
0000D370                            
0000D370                            loc_C09E:
0000D370 6000                       		bra.s	loc_C0E6
0000D372                            ; ===========================================================================
0000D372                            
0000D372                            loc_C0A0:
0000D372 4A68 0010                  		tst.w	$10(a0)
0000D376 6700 0000                  		beq.w	loc_C0D6
0000D37A 6B00                       		bmi.s	loc_C0BC
0000D37C 7600                       		moveq	#0,d3
0000D37E 1628 0019                  		move.b	$19(a0),d3
0000D382 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D388 4A41                       		tst.w	d1		; has block touched a wall?
0000D38A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D38C 6000                       		bra.s	loc_C0E6
0000D38E                            ; ===========================================================================
0000D38E                            
0000D38E                            loc_C0BC:
0000D38E 7600                       		moveq	#0,d3
0000D390 1628 0019                  		move.b	$19(a0),d3
0000D394 4643                       		not.w	d3
0000D396 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D39C 4A41                       		tst.w	d1		; has block touched a wall?
0000D39E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D3A0 6000                       		bra.s	loc_C0E6
0000D3A2                            ; ===========================================================================
0000D3A2                            
0000D3A2                            Obj33_StopPush:
0000D3A2 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D3A6 6000                       		bra.s	loc_C0E6
0000D3A8                            ; ===========================================================================
0000D3A8                            
0000D3A8                            loc_C0D6:
0000D3A8 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D3B0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D3B6 6400                       		bcc.s	loc_C104
0000D3B8                            
0000D3B8                            loc_C0E6:
0000D3B8 7200                       		moveq	#0,d1
0000D3BA 1228 0019                  		move.b	$19(a0),d1
0000D3BE 0641 000B                  		addi.w	#$B,d1
0000D3C2 343C 0010                  		move.w	#$10,d2
0000D3C6 363C 0011                  		move.w	#$11,d3
0000D3CA 381F                       		move.w	(sp)+,d4
0000D3CC 6100 0000                  		bsr.w	loc_C186
0000D3D0 6100                       		bsr.s	Obj33_ChkLava
0000D3D2 6000 FEC0                  		bra.w	loc_BFC6
0000D3D6                            ; ===========================================================================
0000D3D6                            
0000D3D6                            loc_C104:
0000D3D6 381F                       		move.w	(sp)+,d4
0000D3D8 43F8 D000                  		lea	($FFFFD000).w,a1
0000D3DC 08A9 0003 0022             		bclr	#3,$22(a1)
0000D3E2 08A8 0003 0022             		bclr	#3,$22(a0)
0000D3E8 6000 FED4                  		bra.w	loc_BFE6
0000D3EC                            ; ===========================================================================
0000D3EC                            
0000D3EC                            Obj33_ChkLava:
0000D3EC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D3F2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D3F4 343C FFE0                  		move.w	#-$20,d2
0000D3F8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D3FE 6700                       		beq.s	Obj33_LoadLava
0000D400 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D406 6700                       		beq.s	Obj33_LoadLava
0000D408 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D40E 6700                       		beq.s	Obj33_LoadLava
0000D410 4E75                       		rts	
0000D412                            ; ===========================================================================
0000D412                            
0000D412                            Obj33_ChkLava2:
0000D412 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D418 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D41A 343C 0020                  		move.w	#$20,d2
0000D41E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D424 6700                       		beq.s	Obj33_LoadLava
0000D426 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D42C 6700                       		beq.s	Obj33_LoadLava
0000D42E                            
0000D42E                            Obj33_NoLava:
0000D42E 4E75                       		rts	
0000D430                            ; ===========================================================================
0000D430                            
0000D430                            Obj33_LoadLava:
0000D430 6100 0000                  		bsr.w	SingleObjLoad
0000D434 6600                       		bne.s	locret_C184
0000D436 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D43A 3368 0008 0008             		move.w	8(a0),8(a1)
0000D440 D569 0008                  		add.w	d2,8(a1)
0000D444 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D44A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D450 2348 003C                  		move.l	a0,$3C(a1)
0000D454                            
0000D454                            locret_C184:
0000D454 4E75                       		rts	
0000D456                            ; ===========================================================================
0000D456                            
0000D456                            loc_C186:				; XREF: loc_BF6E
0000D456 1028 0025                  		move.b	$25(a0),d0
0000D45A 6700 0000                  		beq.w	loc_C218
0000D45E 5500                       		subq.b	#2,d0
0000D460 6600                       		bne.s	loc_C1AA
0000D462 6100 B220                  		bsr.w	ExitPlatform
0000D466 0829 0003 0022             		btst	#3,$22(a1)
0000D46C 6600                       		bne.s	loc_C1A4
0000D46E 4228 0025                  		clr.b	$25(a0)
0000D472 4E75                       		rts	
0000D474                            ; ===========================================================================
0000D474                            
0000D474                            loc_C1A4:
0000D474 3404                       		move.w	d4,d2
0000D476 6000 B776                  		bra.w	MvSonicOnPtfm
0000D47A                            ; ===========================================================================
0000D47A                            
0000D47A                            loc_C1AA:
0000D47A 5500                       		subq.b	#2,d0
0000D47C 6600                       		bne.s	loc_C1F2
0000D47E 6100 0000                  		bsr.w	SpeedToPos
0000D482 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D488 4EB9 0000 0000             		jsr	ObjHitFloor
0000D48E 4A41                       		tst.w	d1
0000D490 6A00 0000                  		bpl.w	locret_C1F0
0000D494 D368 000C                  		add.w	d1,$C(a0)
0000D498 4268 0012                  		clr.w	$12(a0)
0000D49C 4228 0025                  		clr.b	$25(a0)
0000D4A0 3011                       		move.w	(a1),d0
0000D4A2 0240 03FF                  		andi.w	#$3FF,d0
0000D4A6 0C40 016A                  		cmpi.w	#$16A,d0
0000D4AA 6500                       		bcs.s	locret_C1F0
0000D4AC 3028 0030                  		move.w	$30(a0),d0
0000D4B0 E640                       		asr.w	#3,d0
0000D4B2 3140 0010                  		move.w	d0,$10(a0)
0000D4B6 117C 0001 0032             		move.b	#1,$32(a0)
0000D4BC 4268 000E                  		clr.w	$E(a0)
0000D4C0                            
0000D4C0                            locret_C1F0:
0000D4C0 4E75                       		rts	
0000D4C2                            ; ===========================================================================
0000D4C2                            
0000D4C2                            loc_C1F2:
0000D4C2 6100 0000                  		bsr.w	SpeedToPos
0000D4C6 3028 0008                  		move.w	8(a0),d0
0000D4CA 0240 000C                  		andi.w	#$C,d0
0000D4CE 6600 0000                  		bne.w	locret_C2E4
0000D4D2 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D4D8 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D4DE 4268 0010                  		clr.w	$10(a0)
0000D4E2 5528 0025                  		subq.b	#2,$25(a0)
0000D4E6 4E75                       		rts	
0000D4E8                            ; ===========================================================================
0000D4E8                            
0000D4E8                            loc_C218:
0000D4E8 6100 0000                  		bsr.w	loc_FAC8
0000D4EC 4A44                       		tst.w	d4
0000D4EE 6700 0000                  		beq.w	locret_C2E4
0000D4F2 6B00 0000                  		bmi.w	locret_C2E4
0000D4F6 4A28 0032                  		tst.b	$32(a0)
0000D4FA 6700                       		beq.s	loc_C230
0000D4FC 6000 0000                  		bra.w	locret_C2E4
0000D500                            ; ===========================================================================
0000D500                            
0000D500                            loc_C230:
0000D500 4A40                       		tst.w	d0
0000D502 6700 0000                  		beq.w	locret_C2E4
0000D506 6B00                       		bmi.s	loc_C268
0000D508 0829 0000 0022             		btst	#0,$22(a1)
0000D50E 6600 0000                  		bne.w	locret_C2E4
0000D512 3F00                       		move.w	d0,-(sp)
0000D514 7600                       		moveq	#0,d3
0000D516 1628 0019                  		move.b	$19(a0),d3
0000D51A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D520 301F                       		move.w	(sp)+,d0
0000D522 4A41                       		tst.w	d1
0000D524 6B00 0000                  		bmi.w	locret_C2E4
0000D528 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D530 7001                       		moveq	#1,d0
0000D532 323C 0040                  		move.w	#$40,d1
0000D536 6000                       		bra.s	loc_C294
0000D538                            ; ===========================================================================
0000D538                            
0000D538                            loc_C268:
0000D538 0829 0000 0022             		btst	#0,$22(a1)
0000D53E 6700                       		beq.s	locret_C2E4
0000D540 3F00                       		move.w	d0,-(sp)
0000D542 7600                       		moveq	#0,d3
0000D544 1628 0019                  		move.b	$19(a0),d3
0000D548 4643                       		not.w	d3
0000D54A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D550 301F                       		move.w	(sp)+,d0
0000D552 4A41                       		tst.w	d1
0000D554 6B00                       		bmi.s	locret_C2E4
0000D556 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D55E 70FF                       		moveq	#-1,d0
0000D560 323C FFC0                  		move.w	#-$40,d1
0000D564                            
0000D564                            loc_C294:
0000D564 43F8 D000                  		lea	($FFFFD000).w,a1
0000D568 D169 0008                  		add.w	d0,8(a1)
0000D56C 3341 0020                  		move.w	d1,$20(a1)
0000D570 337C 0000 0010             		move.w	#0,$10(a1)
0000D576 3F00                       		move.w	d0,-(sp)
0000D578 303C 00A7                  		move.w	#$A7,d0
0000D57C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D582 301F                       		move.w	(sp)+,d0
0000D584 4A28 0028                  		tst.b	$28(a0)
0000D588 6B00                       		bmi.s	locret_C2E4
0000D58A 3F00                       		move.w	d0,-(sp)
0000D58C 4EB9 0000 0000             		jsr	ObjHitFloor
0000D592 301F                       		move.w	(sp)+,d0
0000D594 0C41 0004                  		cmpi.w	#4,d1
0000D598 6F00                       		ble.s	loc_C2E0
0000D59A 317C 0400 0010             		move.w	#$400,$10(a0)
0000D5A0 4A40                       		tst.w	d0
0000D5A2 6A00                       		bpl.s	loc_C2D8
0000D5A4 4468 0010                  		neg.w	$10(a0)
0000D5A8                            
0000D5A8                            loc_C2D8:
0000D5A8 117C 0006 0025             		move.b	#6,$25(a0)
0000D5AE 6000                       		bra.s	locret_C2E4
0000D5B0                            ; ===========================================================================
0000D5B0                            
0000D5B0                            loc_C2E0:
0000D5B0 D368 000C                  		add.w	d1,$C(a0)
0000D5B4                            
0000D5B4                            locret_C2E4:
0000D5B4 4E75                       		rts	
0000D5B6                            ; ===========================================================================
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            Map_obj33:
0000D5B6                            	include "_maps\obj33.asm"
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6 0000                       		dc.w byte_C2EA-Map_obj33
0000D5B8 0000                       		dc.w byte_C2F0-Map_obj33
0000D5BA 01                         byte_C2EA:	dc.b 1
0000D5BB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D5C0 04                         byte_C2F0:	dc.b 4
0000D5C1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D5C6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D5CB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D5D0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D5D6 00                         		even
0000D5D6 00                         		even
0000D5D6                            
0000D5D6                            ; ===========================================================================
0000D5D6                            ; ---------------------------------------------------------------------------
0000D5D6                            ; Object 34 - zone title cards
0000D5D6                            ; ---------------------------------------------------------------------------
0000D5D6                            
0000D5D6                            Obj34:					; XREF: Obj_Index
0000D5D6 7000                       		moveq	#0,d0
0000D5D8 1028 0024                  		move.b	$24(a0),d0
0000D5DC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D5E0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D5E4                            ; ===========================================================================
0000D5E4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D5E6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D5E8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D5EA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D5EC                            ; ===========================================================================
0000D5EC                            
0000D5EC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D5EC 2248                       		movea.l	a0,a1
0000D5EE 7000                       		moveq	#0,d0
0000D5F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D5F4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D5FA 6600                       		bne.s	Obj34_CheckFZ
0000D5FC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D5FE                            
0000D5FE                            Obj34_CheckFZ:
0000D5FE 3400                       		move.w	d0,d2
0000D600 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D606 6600                       		bne.s	Obj34_LoadConfig
0000D608 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D60A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D60C                            
0000D60C                            Obj34_LoadConfig:
0000D60C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D612 E948                       		lsl.w	#4,d0
0000D614 D6C0                       		adda.w	d0,a3
0000D616 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D61C 7203                       		moveq	#3,d1
0000D61E                            
0000D61E                            Obj34_Loop:
0000D61E 12BC 0034                  		move.b	#$34,0(a1)
0000D622 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D626 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D62A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D62E 335A 000A                  		move.w	(a2)+,$A(a1)
0000D632 135A 0024                  		move.b	(a2)+,$24(a1)
0000D636 101A                       		move.b	(a2)+,d0
0000D638 6600                       		bne.s	Obj34_ActNumber
0000D63A 1002                       		move.b	d2,d0
0000D63C                            
0000D63C                            Obj34_ActNumber:
0000D63C 0C00 0007                  		cmpi.b	#7,d0
0000D640 6600                       		bne.s	Obj34_MakeSprite
0000D642 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D646 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D64C 6600                       		bne.s	Obj34_MakeSprite
0000D64E 5300                       		subq.b	#1,d0
0000D650                            
0000D650                            Obj34_MakeSprite:
0000D650 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D654 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D65C 337C 8580 0002             		move.w	#$8580,2(a1)
0000D662 137C 0078 0019             		move.b	#$78,$19(a1)
0000D668 137C 0000 0001             		move.b	#0,1(a1)
0000D66E 137C 0000 0018             		move.b	#0,$18(a1)
0000D674 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D67A 43E9 0040                  		lea	$40(a1),a1	; next object
0000D67E 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D682                            
0000D682                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D682 7210                       		moveq	#$10,d1		; set horizontal speed
0000D684 3028 0030                  		move.w	$30(a0),d0
0000D688 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D68C 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D68E 6C00                       		bge.s	Obj34_Move
0000D690 4441                       		neg.w	d1
0000D692                            
0000D692                            Obj34_Move:
0000D692 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D696                            
0000D696                            loc_C3C8:
0000D696 3028 0008                  		move.w	8(a0),d0
0000D69A 6B00                       		bmi.s	locret_C3D8
0000D69C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6A0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D6A2 6000 0000                  		bra.w	DisplaySprite
0000D6A6                            ; ===========================================================================
0000D6A6                            
0000D6A6                            locret_C3D8:
0000D6A6 4E75                       		rts	
0000D6A8                            ; ===========================================================================
0000D6A8                            
0000D6A8                            Obj34_Wait:				; XREF: Obj34_Index
0000D6A8 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D6AC 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D6AE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D6B2 6000 0000                  		bra.w	DisplaySprite
0000D6B6                            ; ===========================================================================
0000D6B6                            
0000D6B6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D6B6 4A28 0001                  		tst.b	1(a0)
0000D6BA 6A00                       		bpl.s	Obj34_ChangeArt
0000D6BC 7220                       		moveq	#$20,d1
0000D6BE 3028 0032                  		move.w	$32(a0),d0
0000D6C2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D6C6 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D6C8 6C00                       		bge.s	Obj34_Move2
0000D6CA 4441                       		neg.w	d1
0000D6CC                            
0000D6CC                            Obj34_Move2:
0000D6CC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D6D0 3028 0008                  		move.w	8(a0),d0
0000D6D4 6B00                       		bmi.s	locret_C412
0000D6D6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D6DA 6400                       		bcc.s	locret_C412	; if yes, branch
0000D6DC 6000 0000                  		bra.w	DisplaySprite
0000D6E0                            ; ===========================================================================
0000D6E0                            
0000D6E0                            locret_C412:
0000D6E0 4E75                       		rts	
0000D6E2                            ; ===========================================================================
0000D6E2                            
0000D6E2                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D6E2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D6E8 6600                       		bne.s	Obj34_Delete
0000D6EA 7002                       		moveq	#2,d0
0000D6EC 4EB9 0000 1434             		jsr	(LoadPLC).l	; load explosion patterns
0000D6F2 7000                       		moveq	#0,d0
0000D6F4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D6F8 0640 0015                  		addi.w	#$15,d0
0000D6FC 4EB9 0000 1434             		jsr	(LoadPLC).l	; load animal patterns
0000D702                            
0000D702                            Obj34_Delete:
0000D702 6000 0000                  		bra.w	DeleteObject
0000D706                            ; ===========================================================================
0000D706 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D708 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D70A 00E4                       		dc.w $E4
0000D70C 0206                       		dc.b 2,	6
0000D70E 00EA                       		dc.w $EA
0000D710 0207                       		dc.b 2,	7
0000D712 00E0                       		dc.w $E0
0000D714 020A                       		dc.b 2,	$A
0000D716                            ; ---------------------------------------------------------------------------
0000D716                            ; Title	card configuration data
0000D716                            ; Format:
0000D716                            ; 4 bytes per item (YYYY XXXX)
0000D716                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D716                            ; ---------------------------------------------------------------------------
0000D716 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D726 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D736 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D746 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D756 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D766 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D776 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D786                            ; ===========================================================================
0000D786                            ; ---------------------------------------------------------------------------
0000D786                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D786                            ; ---------------------------------------------------------------------------
0000D786                            
0000D786                            Obj39:					; XREF: Obj_Index
0000D786 7000                       		moveq	#0,d0
0000D788 1028 0024                  		move.b	$24(a0),d0
0000D78C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D790 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D794                            ; ===========================================================================
0000D794 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D796 0000                       		dc.w loc_C50C-Obj39_Index
0000D798 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D79A                            ; ===========================================================================
0000D79A                            
0000D79A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D79A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D79E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D7A0 4E75                       		rts	
0000D7A2                            ; ===========================================================================
0000D7A2                            
0000D7A2                            Obj39_Main:
0000D7A2 5428 0024                  		addq.b	#2,$24(a0)
0000D7A6 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D7AC 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D7B2 6700                       		beq.s	loc_C4EC	; if not, branch
0000D7B4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D7BA                            
0000D7BA                            loc_C4EC:
0000D7BA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D7C0 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D7C8 317C 855E 0002             		move.w	#$855E,2(a0)
0000D7CE 117C 0000 0001             		move.b	#0,1(a0)
0000D7D4 117C 0000 0018             		move.b	#0,$18(a0)
0000D7DA                            
0000D7DA                            loc_C50C:				; XREF: Obj39_Index
0000D7DA 7210                       		moveq	#$10,d1		; set horizontal speed
0000D7DC 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D7E2 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D7E4 6500                       		bcs.s	Obj39_Move
0000D7E6 4441                       		neg.w	d1
0000D7E8                            
0000D7E8                            Obj39_Move:
0000D7E8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D7EC 6000 0000                  		bra.w	DisplaySprite
0000D7F0                            ; ===========================================================================
0000D7F0                            
0000D7F0                            Obj39_SetWait:				; XREF: Obj39_Main
0000D7F0 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D7F6 5428 0024                  		addq.b	#2,$24(a0)
0000D7FA 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0000D800 4A38 FE18                  		tst.b	($FFFFFE18).w
0000D804 6600                       		bne.s	@nocontinues
0000D806 11FC 0009 F5CE             		move.b	#face_meltdown,(SonimeSST+sonime_face).w
0000D80C                            
0000D80C                            	@nocontinues:
0000D80C 4E75                       		rts	
0000D80E                            ; ===========================================================================
0000D80E                            
0000D80E                            Obj39_Wait:				; XREF: Obj39_Index
0000D80E 1038 F605                  		move.b	($FFFFF605).w,d0
0000D812 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D816 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D818 0828 0000 001A             		btst	#0,$1A(a0)
0000D81E 6600                       		bne.s	Obj39_Display
0000D820 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D824 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D826 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D82A 6000 0000                  		bra.w	DisplaySprite
0000D82E                            ; ===========================================================================
0000D82E                            
0000D82E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D82E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D832 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D834 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D83A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D83E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D840 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D846 6000                       		bra.s	Obj39_Display
0000D848                            ; ===========================================================================
0000D848                            
0000D848                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D848 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D84E                            
0000D84E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D84E 6000 0000                  		bra.w	DisplaySprite
0000D852                            ; ===========================================================================
0000D852                            ; ---------------------------------------------------------------------------
0000D852                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D852                            ; ---------------------------------------------------------------------------
0000D852                            
0000D852                            Obj3A:					; XREF: Obj_Index
0000D852 7000                       		moveq	#0,d0
0000D854 1028 0024                  		move.b	$24(a0),d0
0000D858 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D85C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D860                            ; ===========================================================================
0000D860 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D862 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D864 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D866 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D868 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D86A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D86C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D86E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D870 0000                       		dc.w loc_C766-Obj3A_Index
0000D872                            ; ===========================================================================
0000D872                            
0000D872                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D872 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D876 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D878 4E75                       		rts	
0000D87A                            ; ===========================================================================
0000D87A                            
0000D87A                            Obj3A_Main:
0000D87A 2248                       		movea.l	a0,a1
0000D87C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D882 7206                       		moveq	#6,d1
0000D884                            
0000D884                            Obj3A_Loop:
0000D884 12BC 003A                  		move.b	#$3A,0(a1)
0000D888 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D88C 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D890 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D894 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D898 135A 0024                  		move.b	(a2)+,$24(a1)
0000D89C 101A                       		move.b	(a2)+,d0
0000D89E 0C00 0006                  		cmpi.b	#6,d0
0000D8A2 6600                       		bne.s	loc_C5CA
0000D8A4 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D8A8                            
0000D8A8                            loc_C5CA:
0000D8A8 1340 001A                  		move.b	d0,$1A(a1)
0000D8AC 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D8B4 337C 8580 0002             		move.w	#$8580,2(a1)
0000D8BA 137C 0000 0001             		move.b	#0,1(a1)
0000D8C0 43E9 0040                  		lea	$40(a1),a1
0000D8C4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D8C8                            
0000D8C8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D8C8 7210                       		moveq	#$10,d1		; set horizontal speed
0000D8CA 3028 0030                  		move.w	$30(a0),d0
0000D8CE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D8D2 6700                       		beq.s	loc_C61A	; if yes, branch
0000D8D4 6C00                       		bge.s	Obj3A_Move
0000D8D6 4441                       		neg.w	d1
0000D8D8                            
0000D8D8                            Obj3A_Move:
0000D8D8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8DC                            
0000D8DC                            loc_C5FE:				; XREF: loc_C61A
0000D8DC 3028 0008                  		move.w	8(a0),d0
0000D8E0 6B00                       		bmi.s	locret_C60E
0000D8E2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8E6 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D8E8 6000 0000                  		bra.w	DisplaySprite
0000D8EC                            ; ===========================================================================
0000D8EC                            
0000D8EC                            locret_C60E:
0000D8EC 4E75                       		rts	
0000D8EE                            ; ===========================================================================
0000D8EE                            
0000D8EE                            loc_C610:				; XREF: loc_C61A
0000D8EE 117C 000E 0024             		move.b	#$E,$24(a0)
0000D8F4 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D8F8                            ; ===========================================================================
0000D8F8                            
0000D8F8                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D8F8 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D8FE 67EE                       		beq.s	loc_C610
0000D900 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D906 66D4                       		bne.s	loc_C5FE
0000D908 5428 0024                  		addq.b	#2,$24(a0)
0000D90C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D912                            
0000D912                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D912 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D916 6600                       		bne.s	Obj3A_Display
0000D918 5428 0024                  		addq.b	#2,$24(a0)
0000D91C                            
0000D91C                            Obj3A_Display:
0000D91C 6000 0000                  		bra.w	DisplaySprite
0000D920                            ; ===========================================================================
0000D920                            
0000D920                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D920 6100 0000                  		bsr.w	DisplaySprite
0000D924 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D92A 7000                       		moveq	#0,d0
0000D92C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D930 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D932 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D936 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D93C                            
0000D93C                            Obj3A_RingBonus:
0000D93C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D940 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D942 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D946 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D94C                            
0000D94C                            Obj3A_ChkBonus:
0000D94C 4A40                       		tst.w	d0		; is there any bonus?
0000D94E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D950 303C 00C5                  		move.w	#$C5,d0
0000D954 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D95A 5428 0024                  		addq.b	#2,$24(a0)
0000D95E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D964 6600                       		bne.s	Obj3A_SetDelay
0000D966 5828 0024                  		addq.b	#4,$24(a0)
0000D96A                            
0000D96A                            Obj3A_SetDelay:
0000D96A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D970                            
0000D970                            locret_C692:
0000D970 4E75                       		rts	
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D972 4EB9 0000 0000             		jsr	AddPoints
0000D978 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D97C 0200 0003                  		andi.b	#3,d0
0000D980 66EE                       		bne.s	locret_C692
0000D982 303C 00CD                  		move.w	#$CD,d0
0000D986 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D98C                            ; ===========================================================================
0000D98C                            
0000D98C                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D98C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D990 0240 0007                  		andi.w	#7,d0
0000D994 E748                       		lsl.w	#3,d0
0000D996 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D99A 0241 0003                  		andi.w	#3,d1
0000D99E D241                       		add.w	d1,d1
0000D9A0 D041                       		add.w	d1,d0
0000D9A2 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D9A6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D9AA 4A40                       		tst.w	d0
0000D9AC 6600                       		bne.s	Obj3A_ChkSS
0000D9AE 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to level (00)
0000D9B4 6000                       		bra.s	Obj3A_Display2
0000D9B6                            ; ===========================================================================
0000D9B6                            
0000D9B6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D9B6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D9BA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D9BE 6700                       		beq.s	loc_C6EA	; if not, branch
0000D9C0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D9C6 6000                       		bra.s	Obj3A_Display2
0000D9C8                            ; ===========================================================================
0000D9C8                            
0000D9C8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D9C8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D9CE                            
0000D9CE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D9CE 6000 0000                  		bra.w	DisplaySprite
0000D9D2                            ; ===========================================================================
0000D9D2                            ; ---------------------------------------------------------------------------
0000D9D2                            ; Level	order array
0000D9D2                            ; ---------------------------------------------------------------------------
0000D9D2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000DA02                            		even
0000DA02                            ; ===========================================================================
0000DA02                            
0000DA02                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000DA02 7220                       		moveq	#$20,d1		; set horizontal speed
0000DA04 3028 0032                  		move.w	$32(a0),d0
0000DA08 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000DA0C 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000DA0E 6C00                       		bge.s	Obj3A_Move2
0000DA10 4441                       		neg.w	d1
0000DA12                            
0000DA12                            Obj3A_Move2:
0000DA12 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DA16 3028 0008                  		move.w	8(a0),d0
0000DA1A 6B00                       		bmi.s	locret_C748
0000DA1C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DA20 6400                       		bcc.s	locret_C748	; if yes, branch
0000DA22 6000 0000                  		bra.w	DisplaySprite
0000DA26                            ; ===========================================================================
0000DA26                            
0000DA26                            locret_C748:
0000DA26 4E75                       		rts	
0000DA28                            ; ===========================================================================
0000DA28                            
0000DA28                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000DA28 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000DA2E 6600 0000                  		bne.w	DeleteObject
0000DA32 5428 0024                  		addq.b	#2,$24(a0)
0000DA36 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000DA3A 303C 008D                  		move.w	#$8D,d0
0000DA3E 4EF9 0000 11F0             		jmp	(PlaySound).l	; play FZ music
0000DA44                            ; ===========================================================================
0000DA44                            
0000DA44                            loc_C766:				; XREF: Obj3A_Index
0000DA44 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000DA48 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000DA4E 6700 0000                  		beq.w	DeleteObject
0000DA52 4E75                       		rts	
0000DA54                            ; ===========================================================================
0000DA54 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000DA5A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000DA5C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000DA62 0201                       		dc.b 2,	1
0000DA64 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000DA6A 0206                       		dc.b 2,	6
0000DA6C 0520 0120 00EC             		dc.w $520, $120, $EC
0000DA72 0202                       		dc.b 2,	2
0000DA74 0540 0120 00FC             		dc.w $540, $120, $FC
0000DA7A 0203                       		dc.b 2,	3
0000DA7C 0560 0120 010C             		dc.w $560, $120, $10C
0000DA82 0204                       		dc.b 2,	4
0000DA84 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000DA8A 0205                       		dc.b 2,	5
0000DA8C                            ; ===========================================================================
0000DA8C                            ; ---------------------------------------------------------------------------
0000DA8C                            ; Object 7E - special stage results screen
0000DA8C                            ; ---------------------------------------------------------------------------
0000DA8C                            
0000DA8C                            Obj7E:					; XREF: Obj_Index
0000DA8C 7000                       		moveq	#0,d0
0000DA8E 1028 0024                  		move.b	$24(a0),d0
0000DA92 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000DA96 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000DA9A                            ; ===========================================================================
0000DA9A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000DA9C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000DA9E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAA0 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000DAA2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAA4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DAA6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAA8 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000DAAA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000DAAC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000DAAE 0000                       		dc.w loc_C91A-Obj7E_Index
0000DAB0                            ; ===========================================================================
0000DAB0                            
0000DAB0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000DAB0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000DAB4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000DAB6 4E75                       		rts	
0000DAB8                            ; ===========================================================================
0000DAB8                            
0000DAB8                            Obj7E_Main:
0000DAB8 2248                       		movea.l	a0,a1
0000DABA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000DAC0 7203                       		moveq	#3,d1
0000DAC2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000DAC8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000DACA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000DACC                            
0000DACC                            Obj7E_Loop:
0000DACC 12BC 007E                  		move.b	#$7E,0(a1)
0000DAD0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000DAD4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000DAD8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000DADC 135A 0024                  		move.b	(a2)+,$24(a1)
0000DAE0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000DAE4 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000DAEC 337C A580 0002             		move.w	#$A580,2(a1)
0000DAF2 137C 0000 0001             		move.b	#0,1(a1)
0000DAF8 43E9 0040                  		lea	$40(a1),a1
0000DAFC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000DB00                            
0000DB00 7007                       		moveq	#7,d0
0000DB02 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000DB06 6700                       		beq.s	loc_C842
0000DB08 7000                       		moveq	#0,d0
0000DB0A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000DB0E 6600                       		bne.s	loc_C842	; if not, branch
0000DB10 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000DB12 317C 0018 0008             		move.w	#$18,8(a0)
0000DB18 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000DB1E                            
0000DB1E                            loc_C842:
0000DB1E 1140 001A                  		move.b	d0,$1A(a0)
0000DB22                            
0000DB22                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000DB22 7210                       		moveq	#$10,d1		; set horizontal speed
0000DB24 3028 0030                  		move.w	$30(a0),d0
0000DB28 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000DB2C 6700                       		beq.s	loc_C86C	; if yes, branch
0000DB2E 6C00                       		bge.s	Obj7E_Move
0000DB30 4441                       		neg.w	d1
0000DB32                            
0000DB32                            Obj7E_Move:
0000DB32 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000DB36                            
0000DB36                            loc_C85A:				; XREF: loc_C86C
0000DB36 3028 0008                  		move.w	8(a0),d0
0000DB3A 6B00                       		bmi.s	locret_C86A
0000DB3C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000DB40 6400                       		bcc.s	locret_C86A	; if yes, branch
0000DB42 6000 0000                  		bra.w	DisplaySprite
0000DB46                            ; ===========================================================================
0000DB46                            
0000DB46                            locret_C86A:
0000DB46 4E75                       		rts	
0000DB48                            ; ===========================================================================
0000DB48                            
0000DB48                            loc_C86C:				; XREF: Obj7E_ChkPos
0000DB48 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DB4E 66E6                       		bne.s	loc_C85A
0000DB50 5428 0024                  		addq.b	#2,$24(a0)
0000DB54 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DB5A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000DB60                            
0000DB60                            Obj7E_Wait:				; XREF: Obj7E_Index
0000DB60 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000DB64 6600                       		bne.s	Obj7E_Display
0000DB66 5428 0024                  		addq.b	#2,$24(a0)
0000DB6A                            
0000DB6A                            Obj7E_Display:
0000DB6A 6000 0000                  		bra.w	DisplaySprite
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000DB6E 6100 0000                  		bsr.w	DisplaySprite
0000DB72 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000DB78 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000DB7C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000DB7E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000DB84 700A                       		moveq	#10,d0		; add 10 to score
0000DB86 4EB9 0000 0000             		jsr	AddPoints
0000DB8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DB90 0200 0003                  		andi.b	#3,d0
0000DB94 6600                       		bne.s	locret_C8EA
0000DB96 303C 00CD                  		move.w	#$CD,d0
0000DB9A 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DBA0                            ; ===========================================================================
0000DBA0                            
0000DBA0                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DBA0 303C 00C5                  		move.w	#$C5,d0
0000DBA4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DBAA 5428 0024                  		addq.b	#2,$24(a0)
0000DBAE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DBB4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DBBA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DBBC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DBC2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DBC6                            
0000DBC6                            locret_C8EA:
0000DBC6 4E75                       		rts	
0000DBC8                            ; ===========================================================================
0000DBC8                            
0000DBC8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DBC8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DBCE 6000 0000                  		bra.w	DisplaySprite
0000DBD2                            ; ===========================================================================
0000DBD2                            
0000DBD2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DBD2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DBD8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DBDE 303C 00BF                  		move.w	#$BF,d0
0000DBE2 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play continues music
0000DBE8 5428 0024                  		addq.b	#2,$24(a0)
0000DBEC 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DBF2 6000 0000                  		bra.w	DisplaySprite
0000DBF6                            ; ===========================================================================
0000DBF6                            
0000DBF6                            loc_C91A:				; XREF: Obj7E_Index
0000DBF6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBFA 0200 000F                  		andi.b	#$F,d0
0000DBFE 6600                       		bne.s	Obj7E_Display2
0000DC00 0868 0000 001A             		bchg	#0,$1A(a0)
0000DC06                            
0000DC06                            Obj7E_Display2:
0000DC06 6000 0000                  		bra.w	DisplaySprite
0000DC0A                            ; ===========================================================================
0000DC0A 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DC10 0200                       		dc.b 2,	0		; rountine number, frame number
0000DC12 0320 0120 0118             		dc.w $320, $120, $118
0000DC18 0201                       		dc.b 2,	1
0000DC1A 0360 0120 0128             		dc.w $360, $120, $128
0000DC20 0202                       		dc.b 2,	2
0000DC22 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DC28 0203                       		dc.b 2,	3
0000DC2A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DC30 0206                       		dc.b 2,	6
0000DC32                            ; ===========================================================================
0000DC32                            ; ---------------------------------------------------------------------------
0000DC32                            ; Object 7F - chaos emeralds from the special stage results screen
0000DC32                            ; ---------------------------------------------------------------------------
0000DC32                            
0000DC32                            Obj7F:					; XREF: Obj_Index
0000DC32 7000                       		moveq	#0,d0
0000DC34 1028 0024                  		move.b	$24(a0),d0
0000DC38 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DC3C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DC40                            ; ===========================================================================
0000DC40 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DC42 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DC44                            
0000DC44                            ; ---------------------------------------------------------------------------
0000DC44                            ; X-axis positions for chaos emeralds
0000DC44                            ; ---------------------------------------------------------------------------
0000DC44 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DC50                            ; ===========================================================================
0000DC50                            
0000DC50                            Obj7F_Main:				; XREF: Obj7F_Index
0000DC50 2248                       		movea.l	a0,a1
0000DC52 45F9 0000 DC44             		lea	(Obj7F_PosData).l,a2
0000DC58 7400                       		moveq	#0,d2
0000DC5A 7200                       		moveq	#0,d1
0000DC5C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DC60 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DC62 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DC66                            
0000DC66                            Obj7F_Loop:
0000DC66 12BC 007F                  		move.b	#$7F,0(a1)
0000DC6A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DC6E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DC74 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DC78 1633 2000                  		move.b	(a3,d2.w),d3
0000DC7C 1343 001A                  		move.b	d3,$1A(a1)
0000DC80 1343 001C                  		move.b	d3,$1C(a1)
0000DC84 5202                       		addq.b	#1,d2
0000DC86 5429 0024                  		addq.b	#2,$24(a1)
0000DC8A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DC92 337C 8541 0002             		move.w	#$8541,2(a1)
0000DC98 137C 0000 0001             		move.b	#0,1(a1)
0000DC9E 43E9 0040                  		lea	$40(a1),a1	; next object
0000DCA2 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DCA6                            
0000DCA6                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DCA6 1028 001A                  		move.b	$1A(a0),d0
0000DCAA 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DCB0 0C00 0006                  		cmpi.b	#6,d0
0000DCB4 6600                       		bne.s	Obj7F_Display
0000DCB6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DCBC                            
0000DCBC                            Obj7F_Display:
0000DCBC 6000 0000                  		bra.w	DisplaySprite
0000DCC0                            ; ===========================================================================
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0                            ; Sprite mappings - zone title cards
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000DCC2 0000                       		dc.w byte_CA2C-Map_obj34
0000DCC4 0000                       		dc.w byte_CA5A-Map_obj34
0000DCC6 0000                       		dc.w byte_CA7A-Map_obj34
0000DCC8 0000                       		dc.w byte_CAA8-Map_obj34
0000DCCA 0000                       		dc.w byte_CADC-Map_obj34
0000DCCC 0000                       		dc.w byte_CB10-Map_obj34
0000DCCE 0000                       		dc.w byte_CB26-Map_obj34
0000DCD0 0000                       		dc.w byte_CB31-Map_obj34
0000DCD2 0000                       		dc.w byte_CB3C-Map_obj34
0000DCD4 0000                       		dc.w byte_CB47-Map_obj34
0000DCD6 0000                       		dc.w byte_CB8A-Map_obj34
0000DCD8 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000DCD9 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000DCDE F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000DCE3 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000DCE8 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000DCED F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DCF2 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000DCF7 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000DCFC F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000DD01 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000DD06 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DD07 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DD0C F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DD11 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DD16 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DD1B F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DD20 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DD25 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DD2A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DD2F F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DD34 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DD35 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DD3A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD3F F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DD44 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DD49 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DD4E F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DD53 00                         		dc.b 0
0000DD54 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DD55 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DD5A F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DD5F F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DD64 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DD69 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DD6E F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DD73 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DD78 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DD7D F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DD82 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DD83 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DD88 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DD8D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DD92 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DD97 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DD9C F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DDA1 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DDA6 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DDAB F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DDB0 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DDB5 00                         		dc.b 0
0000DDB6 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DDB7 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DDBC F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DDC1 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DDC6 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DDCB F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DDD0 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DDD5 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DDDA F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DDDF F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DDE4 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DDE9 00                         		dc.b 0
0000DDEA 04                         byte_CB10:	dc.b 4			; ZONE
0000DDEB F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DDF0 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DDF5 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DDFA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDFF 00                         		dc.b 0
0000DE00 02                         byte_CB26:	dc.b 2			; ACT 1
0000DE01 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE06 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DE0B 02                         byte_CB31:	dc.b 2			; ACT 2
0000DE0C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE11 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DE16 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DE17 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DE1C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DE21 0D                         byte_CB47:	dc.b $D			; Oval
0000DE22 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DE27 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DE2C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DE31 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DE36 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DE3B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DE40 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DE45 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DE4A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DE4F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DE54 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DE59 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DE5E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DE63 00                         		dc.b 0
0000DE64 05                         byte_CB8A:	dc.b 5			; FINAL
0000DE65 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DE6A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DE6F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DE74 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DE79 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DE7E                            		even
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            Map_obj39:
0000DE7E                            	include "_maps\obj39.asm"
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E 0000                       		dc.w byte_CBAC-Map_obj39
0000DE80 0000                       		dc.w byte_CBB7-Map_obj39
0000DE82 0000                       		dc.w byte_CBC2-Map_obj39
0000DE84 0000                       		dc.w byte_CBCD-Map_obj39
0000DE86 02                         byte_CBAC:	dc.b 2
0000DE87 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DE8C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DE91 02                         byte_CBB7:	dc.b 2
0000DE92 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DE97 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DE9C 02                         byte_CBC2:	dc.b 2
0000DE9D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DEA2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DEA7 02                         byte_CBCD:	dc.b 2
0000DEA8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DEAD F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DEB2                            		even
0000DEB2                            		even
0000DEB2                            
0000DEB2                            ; ---------------------------------------------------------------------------
0000DEB2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DEB2                            ; ---------------------------------------------------------------------------
0000DEB2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DEB4 0000                       		dc.w byte_CC13-Map_obj3A
0000DEB6 0000                       		dc.w byte_CC32-Map_obj3A
0000DEB8 0000                       		dc.w byte_CC51-Map_obj3A
0000DEBA 0000                       		dc.w byte_CC75-Map_obj3A
0000DEBC FF6F                       		dc.w byte_CB47-Map_obj3A
0000DEBE FF4E                       		dc.w byte_CB26-Map_obj3A
0000DEC0 FF59                       		dc.w byte_CB31-Map_obj3A
0000DEC2 FF64                       		dc.w byte_CB3C-Map_obj3A
0000DEC4 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DEC5 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DECA F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DECF F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DED4 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DED9 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DEDE F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DEE3 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DEE8 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DEED 06                         byte_CC13:	dc.b 6			; PASSED
0000DEEE F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DEF3 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DEF8 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DEFD F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DF02 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DF07 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DF0C 06                         byte_CC32:	dc.b 6			; SCORE
0000DF0D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DF12 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DF17 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DF1C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DF21 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DF26 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DF2B 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DF2C F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DF31 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF36 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF3B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF40 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF45 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DF4A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF4F 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DF50 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DF55 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DF5A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DF5F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DF64 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DF69 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DF6E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DF74 00                         		even
0000DF74                            ; ---------------------------------------------------------------------------
0000DF74                            ; Sprite mappings - special stage results screen
0000DF74                            ; ---------------------------------------------------------------------------
0000DF74 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DF76 0000                       		dc.w byte_CCEE-Map_obj7E
0000DF78 0000                       		dc.w byte_CD0D-Map_obj7E
0000DF7A FEAD                       		dc.w byte_CB47-Map_obj7E
0000DF7C 0000                       		dc.w byte_CD31-Map_obj7E
0000DF7E 0000                       		dc.w byte_CD46-Map_obj7E
0000DF80 0000                       		dc.w byte_CD5B-Map_obj7E
0000DF82 0000                       		dc.w byte_CD6B-Map_obj7E
0000DF84 0000                       		dc.w byte_CDA8-Map_obj7E
0000DF86 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DF87 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DF8C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DF91 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DF96 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DF9B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DFA0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DFA5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DFAA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DFAF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DFB4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DFB9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DFBE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DFC3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DFC8 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DFC9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DFCE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DFD3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DFD8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DFDD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DFE2 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DFE7 07                         byte_CD0D:	dc.b 7
0000DFE8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DFED F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DFF2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DFF7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DFFC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000E001 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000E006 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000E00B 04                         byte_CD31:	dc.b 4
0000E00C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E011 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E016 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E01B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000E020 04                         byte_CD46:	dc.b 4
0000E021 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E026 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E02B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E030 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000E035 03                         byte_CD5B:	dc.b 3
0000E036 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000E03B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000E040 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000E045 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000E046 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000E04B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000E050 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000E055 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000E05A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000E05F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000E064 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000E069 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000E06E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000E073 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000E078 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000E07D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000E082 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000E083 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000E088 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000E08D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000E092 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000E097 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000E09C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000E0A1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000E0A6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000E0AB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000E0B0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000E0B5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000E0BA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000E0BF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000E0C4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000E0C9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000E0CE                            		even
0000E0CE                            ; ---------------------------------------------------------------------------
0000E0CE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E0CE                            ; ---------------------------------------------------------------------------
0000E0CE                            Map_obj7F:
0000E0CE                            	include "_maps\obj7F.asm"
0000E0CE                            ; ---------------------------------------------------------------------------
0000E0CE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000E0CE                            ; ---------------------------------------------------------------------------
0000E0CE 0000                       		dc.w byte_CE02-Map_obj7F
0000E0D0 0000                       		dc.w byte_CE08-Map_obj7F
0000E0D2 0000                       		dc.w byte_CE0E-Map_obj7F
0000E0D4 0000                       		dc.w byte_CE14-Map_obj7F
0000E0D6 0000                       		dc.w byte_CE1A-Map_obj7F
0000E0D8 0000                       		dc.w byte_CE20-Map_obj7F
0000E0DA 0000                       		dc.w byte_CE26-Map_obj7F
0000E0DC 01                         byte_CE02:	dc.b 1
0000E0DD F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8
0000E0E2 01                         byte_CE08:	dc.b 1
0000E0E3 F805 2000 F8               		dc.b $F8, 5, $20,	0, $F8
0000E0E8 01                         byte_CE0E:	dc.b 1
0000E0E9 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000E0EE 01                         byte_CE14:	dc.b 1
0000E0EF F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000E0F4 01                         byte_CE1A:	dc.b 1
0000E0F5 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8
0000E0FA 01                         byte_CE20:	dc.b 1
0000E0FB F805 000C F8               		dc.b $F8, 5, 0, $C, $F8
0000E100 00                         byte_CE26:	dc.b 0			; Blank frame
0000E102 00                         		even
0000E102 00                         		even
0000E102                            
0000E102                            ; ===========================================================================
0000E102                            ; ---------------------------------------------------------------------------
0000E102                            ; Object 36 - spikes
0000E102                            ; ---------------------------------------------------------------------------
0000E102                            
0000E102                            Obj36:					; XREF: Obj_Index
0000E102 7000                       		moveq	#0,d0
0000E104 1028 0024                  		move.b	$24(a0),d0
0000E108 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000E10C 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000E110                            ; ===========================================================================
0000E110 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000E112 0000                       		dc.w Obj36_Solid-Obj36_Index
0000E114                            
0000E114 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000E116 0110                       		dc.b 1,	$10
0000E118 0204                       		dc.b 2,	4
0000E11A 031C                       		dc.b 3,	$1C
0000E11C 0440                       		dc.b 4,	$40
0000E11E 0510                       		dc.b 5,	$10
0000E120                            ; ===========================================================================
0000E120                            
0000E120                            Obj36_Main:				; XREF: Obj36_Index
0000E120 5428 0024                  		addq.b	#2,$24(a0)
0000E124 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000E12C 317C 051B 0002             		move.w	#$51B,2(a0)
0000E132 0028 0004 0001             		ori.b	#4,1(a0)
0000E138 117C 0004 0018             		move.b	#4,$18(a0)
0000E13E 1028 0028                  		move.b	$28(a0),d0
0000E142 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E148 0240 00F0                  		andi.w	#$F0,d0
0000E14C 43F9 0000 E114             		lea	(Obj36_Var).l,a1
0000E152 E648                       		lsr.w	#3,d0
0000E154 D2C0                       		adda.w	d0,a1
0000E156 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E15A 1159 0019                  		move.b	(a1)+,$19(a0)
0000E15E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000E164 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000E16A                            
0000E16A                            Obj36_Solid:				; XREF: Obj36_Index
0000E16A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000E16E 343C 0004                  		move.w	#4,d2
0000E172 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000E178 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000E17A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000E180 6600                       		bne.s	Obj36_Upright	; if not, branch
0000E182 343C 0014                  		move.w	#$14,d2
0000E186                            
0000E186                            ; Spikes types $1x and $5x face	sideways
0000E186                            
0000E186                            Obj36_SideWays:				; XREF: Obj36_Solid
0000E186 323C 001B                  		move.w	#$1B,d1
0000E18A 3602                       		move.w	d2,d3
0000E18C 5243                       		addq.w	#1,d3
0000E18E 3828 0008                  		move.w	8(a0),d4
0000E192 6100 0000                  		bsr.w	SolidObject
0000E196 0828 0003 0022             		btst	#3,$22(a0)
0000E19C 6600                       		bne.s	Obj36_Display
0000E19E 0C44 0001                  		cmpi.w	#1,d4
0000E1A2 6700                       		beq.s	Obj36_Hurt
0000E1A4 6000                       		bra.s	Obj36_Display
0000E1A6                            ; ===========================================================================
0000E1A6                            
0000E1A6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E1A6                            
0000E1A6                            Obj36_Upright:				; XREF: Obj36_Solid
0000E1A6 7200                       		moveq	#0,d1
0000E1A8 1228 0019                  		move.b	$19(a0),d1
0000E1AC 0641 000B                  		addi.w	#$B,d1
0000E1B0 343C 0010                  		move.w	#$10,d2
0000E1B4 363C 0011                  		move.w	#$11,d3
0000E1B8 3828 0008                  		move.w	8(a0),d4
0000E1BC 6100 0000                  		bsr.w	SolidObject
0000E1C0 0828 0003 0022             		btst	#3,$22(a0)
0000E1C6 6600                       		bne.s	Obj36_Hurt
0000E1C8 4A44                       		tst.w	d4
0000E1CA 6A00                       		bpl.s	Obj36_Display
0000E1CC                            
0000E1CC                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E1CC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E1D0 6600                       		bne.s	Obj36_PreDisplay	; if yes, branch
0000E1D2 2F08                       		move.l	a0,-(sp)
0000E1D4 2448                       		movea.l	a0,a2
0000E1D6 41F8 D000                  		lea	($FFFFD000).w,a0
0000E1DA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E1E0 6400                       		bcc.s	loc_CF20
0000E1E2 2628 000C                  		move.l	$C(a0),d3
0000E1E6 3028 0012                  		move.w	$12(a0),d0
0000E1EA 48C0                       		ext.l	d0
0000E1EC E180                       		asl.l	#8,d0
0000E1EE 9680                       		sub.l	d0,d3
0000E1F0 2143 000C                  		move.l	d3,$C(a0)
0000E1F4 4EB9 0000 0000             		jsr	HurtSonic
0000E1FA                            
0000E1FA                            loc_CF20:
0000E1FA 205F                       		movea.l	(sp)+,a0
0000E1FC 6000                       		bra.s	Obj36_Display
0000E1FE                            
0000E1FE                            Obj36_PreDisplay:
0000E1FE 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0000E204 6E00                       		bgt.s	Obj36_Display
0000E206 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0000E20C 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0000E212                            
0000E212                            Obj36_Display:
0000E212 6100 0000                  		bsr.w	DisplaySprite
0000E216 3028 0030                  		move.w	$30(a0),d0
0000E21A 0240 FF80                  		andi.w	#$FF80,d0
0000E21E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E222 0441 0080                  		subi.w	#$80,d1
0000E226 0241 FF80                  		andi.w	#$FF80,d1
0000E22A 9041                       		sub.w	d1,d0
0000E22C 0C40 0280                  		cmpi.w	#$280,d0
0000E230 6300                       		bls.s	Obj36_NoDel
0000E232 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E236 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E23A 3440                       		movea.w	d0,a2	; load address into a2
0000E23C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E240 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E244                            
0000E244                            Obj36_NoDel:
0000E244 4E75                       		rts	
0000E246                            ; ===========================================================================
0000E246                            
0000E246                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E246 7000                       		moveq	#0,d0
0000E248 1028 0028                  		move.b	$28(a0),d0
0000E24C D040                       		add.w	d0,d0
0000E24E 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E252 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E256                            ; ===========================================================================
0000E256 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E258 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E25A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E25C                            ; ===========================================================================
0000E25C                            
0000E25C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E25C 4E75                       		rts			; don't move the object
0000E25E                            ; ===========================================================================
0000E25E                            
0000E25E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E25E 6100 0000                  		bsr.w	Obj36_Wait
0000E262 7000                       		moveq	#0,d0
0000E264 1028 0034                  		move.b	$34(a0),d0
0000E268 D068 0032                  		add.w	$32(a0),d0
0000E26C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E270 4E75                       		rts	
0000E272                            ; ===========================================================================
0000E272                            
0000E272                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E272 6100 0000                  		bsr.w	Obj36_Wait
0000E276 7000                       		moveq	#0,d0
0000E278 1028 0034                  		move.b	$34(a0),d0
0000E27C D068 0030                  		add.w	$30(a0),d0
0000E280 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E284 4E75                       		rts	
0000E286                            ; ===========================================================================
0000E286                            
0000E286                            Obj36_Wait:
0000E286 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E28A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E28C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E290 6600                       		bne.s	locret_CFE6
0000E292 4A28 0001                  		tst.b	1(a0)
0000E296 6A00                       		bpl.s	locret_CFE6
0000E298 303C 00B6                  		move.w	#$B6,d0
0000E29C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E2A2 6000                       		bra.s	locret_CFE6
0000E2A4                            ; ===========================================================================
0000E2A4                            
0000E2A4                            loc_CFA4:
0000E2A4 4A68 0036                  		tst.w	$36(a0)
0000E2A8 6700                       		beq.s	loc_CFC6
0000E2AA 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E2B0 6400                       		bcc.s	locret_CFE6
0000E2B2 317C 0000 0034             		move.w	#0,$34(a0)
0000E2B8 317C 0000 0036             		move.w	#0,$36(a0)
0000E2BE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E2C4 6000                       		bra.s	locret_CFE6
0000E2C6                            ; ===========================================================================
0000E2C6                            
0000E2C6                            loc_CFC6:
0000E2C6 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E2CC 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E2D2 6500                       		bcs.s	locret_CFE6
0000E2D4 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E2DA 317C 0001 0036             		move.w	#1,$36(a0)
0000E2E0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E2E6                            
0000E2E6                            locret_CFE6:
0000E2E6 4E75                       		rts	
0000E2E8                            ; ===========================================================================
0000E2E8                            ; ---------------------------------------------------------------------------
0000E2E8                            ; Sprite mappings - spikes
0000E2E8                            ; ---------------------------------------------------------------------------
0000E2E8                            Map_obj36:
0000E2E8                            	include "_maps\obj36.asm"
0000E2E8                            ; ---------------------------------------------------------------------------
0000E2E8                            ; Sprite mappings - spikes
0000E2E8                            ; ---------------------------------------------------------------------------
0000E2E8 0000                       		dc.w byte_CFF4-Map_obj36
0000E2EA 0000                       		dc.w byte_D004-Map_obj36
0000E2EC 0000                       		dc.w byte_D014-Map_obj36
0000E2EE 0000                       		dc.w byte_D01A-Map_obj36
0000E2F0 0000                       		dc.w byte_D02A-Map_obj36
0000E2F2 0000                       		dc.w byte_D049-Map_obj36
0000E2F4 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E2F5 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E2FA F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E2FF F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E304 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E305 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E30A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E30F 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E314 01                         byte_D014:	dc.b 1			; 1 spike
0000E315 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E31A 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E31B F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E320 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E325 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E32A 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E32B F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E330 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E335 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E33A F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E33F F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E344 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E349 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E34A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E350 00                         		even
0000E350 00                         		even
0000E350                            
0000E350                            ; ===========================================================================
0000E350                            ; ---------------------------------------------------------------------------
0000E350                            ; Object 3B - purple rock (GHZ)
0000E350                            ; ---------------------------------------------------------------------------
0000E350                            
0000E350                            Obj3B:					; XREF: Obj_Index
0000E350 7000                       		moveq	#0,d0
0000E352 1028 0024                  		move.b	$24(a0),d0
0000E356 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E35A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E35E                            ; ===========================================================================
0000E35E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E360 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E362                            ; ===========================================================================
0000E362                            
0000E362                            Obj3B_Main:				; XREF: Obj3B_Index
0000E362 5428 0024                  		addq.b	#2,$24(a0)
0000E366 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E36E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E374 117C 0004 0001             		move.b	#4,1(a0)
0000E37A 117C 0013 0019             		move.b	#$13,$19(a0)
0000E380 117C 0004 0018             		move.b	#4,$18(a0)
0000E386                            
0000E386                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E386 323C 001B                  		move.w	#$1B,d1
0000E38A 343C 0010                  		move.w	#$10,d2
0000E38E 363C 0010                  		move.w	#$10,d3
0000E392 3828 0008                  		move.w	8(a0),d4
0000E396 6100 0000                  		bsr.w	SolidObject
0000E39A 6100 0000                  		bsr.w	DisplaySprite
0000E39E 3028 0008                  		move.w	8(a0),d0
0000E3A2 0240 FF80                  		andi.w	#$FF80,d0
0000E3A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3AA 0441 0080                  		subi.w	#$80,d1
0000E3AE 0241 FF80                  		andi.w	#$FF80,d1
0000E3B2 9041                       		sub.w	d1,d0
0000E3B4 0C40 0280                  		cmpi.w	#$280,d0
0000E3B8 6300                       		bls.s	Obj3B_NoDel
0000E3BA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E3BE 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E3C2 3440                       		movea.w	d0,a2	; load address into a2
0000E3C4 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E3C8 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E3CC                            
0000E3CC                            Obj3B_NoDel:
0000E3CC 4E75                       		rts	
0000E3CE                            ; ===========================================================================
0000E3CE                            ; ---------------------------------------------------------------------------
0000E3CE                            ; Object 49 - waterfall	sound effect (GHZ)
0000E3CE                            ; ---------------------------------------------------------------------------
0000E3CE                            
0000E3CE                            Obj49:					; XREF: Obj_Index
0000E3CE 7000                       		moveq	#0,d0
0000E3D0 1028 0024                  		move.b	$24(a0),d0
0000E3D4 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E3D8 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E3DC                            ; ===========================================================================
0000E3DC 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E3DE 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            Obj49_Main:				; XREF: Obj49_Index
0000E3E0 5428 0024                  		addq.b	#2,$24(a0)
0000E3E4 117C 0004 0001             		move.b	#4,1(a0)
0000E3EA                            
0000E3EA                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E3EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E3EE 0200 003F                  		andi.b	#$3F,d0
0000E3F2 6600                       		bne.s	Obj49_ChkDel
0000E3F4 303C 00D0                  		move.w	#$D0,d0
0000E3F8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E3FE                            
0000E3FE                            Obj49_ChkDel:
0000E3FE 3028 0008                  		move.w	8(a0),d0
0000E402 0240 FF80                  		andi.w	#$FF80,d0
0000E406 3238 F700                  		move.w	($FFFFF700).w,d1
0000E40A 0441 0080                  		subi.w	#$80,d1
0000E40E 0241 FF80                  		andi.w	#$FF80,d1
0000E412 9041                       		sub.w	d1,d0
0000E414 0C40 0280                  		cmpi.w	#$280,d0
0000E418 6300                       		bls.s	Obj49_NoDel
0000E41A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000E41E 6700 0000                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000E422 3440                       		movea.w	d0,a2	; load address into a2
0000E424 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000E428 6000 0000                  		bra.w	DeleteObject	; and delete object
0000E42C                            
0000E42C                            Obj49_NoDel:
0000E42C 4E75                       		rts	
0000E42E                            ; ===========================================================================
0000E42E                            ; ---------------------------------------------------------------------------
0000E42E                            ; Sprite mappings - purple rock	(GHZ)
0000E42E                            ; ---------------------------------------------------------------------------
0000E42E                            Map_obj3B:
0000E42E                            	include "_maps\obj3B.asm"
0000E42E                            ; ---------------------------------------------------------------------------
0000E42E                            ; Sprite mappings - purple rock	(GHZ)
0000E42E                            ; ---------------------------------------------------------------------------
0000E42E 0000                       		dc.w byte_D110-Map_obj3B
0000E430 02                         byte_D110:	dc.b 2
0000E431 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E436 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E43C 00                         		even
0000E43C 00                         		even
0000E43C                            
0000E43C                            ; ===========================================================================
0000E43C                            ; ---------------------------------------------------------------------------
0000E43C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E43C                            ; ---------------------------------------------------------------------------
0000E43C                            
0000E43C                            Obj3C:					; XREF: Obj_Index
0000E43C 7000                       		moveq	#0,d0
0000E43E 1028 0024                  		move.b	$24(a0),d0
0000E442 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E446 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E44A 6000 0000                  		bra.w	MarkObjGone
0000E44E                            ; ===========================================================================
0000E44E 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E450 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E452 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E454                            ; ===========================================================================
0000E454                            
0000E454                            Obj3C_Main:				; XREF: Obj3C_Index
0000E454 5428 0024                  		addq.b	#2,$24(a0)
0000E458 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E460 317C 450F 0002             		move.w	#$450F,2(a0)
0000E466 117C 0004 0001             		move.b	#4,1(a0)
0000E46C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E472 117C 0004 0018             		move.b	#4,$18(a0)
0000E478 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E47E                            
0000E47E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E47E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E484 323C 001B                  		move.w	#$1B,d1
0000E488 343C 0020                  		move.w	#$20,d2
0000E48C 363C 0020                  		move.w	#$20,d3
0000E490 3828 0008                  		move.w	8(a0),d4
0000E494 6100 0000                  		bsr.w	SolidObject
0000E498 0828 0005 0022             		btst	#5,$22(a0)
0000E49E 6600                       		bne.s	Obj3C_ChkRoll
0000E4A0                            
0000E4A0                            locret_D180:
0000E4A0 4E75                       		rts	
0000E4A2                            ; ===========================================================================
0000E4A2                            
0000E4A2                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E4A2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E4A8 66F6                       		bne.s	locret_D180	; if not, branch
0000E4AA 3028 0030                  		move.w	$30(a0),d0
0000E4AE 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E4B0 4440                       		neg.w	d0
0000E4B2                            
0000E4B2                            Obj3C_ChkSpeed:
0000E4B2 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E4B6 65E8                       		bcs.s	locret_D180	; if not, branch
0000E4B8 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E4BE 5869 0008                  		addq.w	#4,8(a1)
0000E4C2 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E4C8 3028 0008                  		move.w	8(a0),d0
0000E4CC B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E4D0 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E4D2 5169 0008                  		subq.w	#8,8(a1)
0000E4D6 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E4DC                            
0000E4DC                            Obj3C_Smash:
0000E4DC 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000E4E2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4E8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E4EE 7207                       		moveq	#7,d1		; load 8 fragments
0000E4F0 343C 0070                  		move.w	#$70,d2
0000E4F4 6100                       		bsr.s	SmashObject
0000E4F6                            
0000E4F6                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E4F6 6100 0000                  		bsr.w	SpeedToPos
0000E4FA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E500 6100 0000                  		bsr.w	DisplaySprite
0000E504 4A28 0001                  		tst.b	1(a0)
0000E508 6A00 0000                  		bpl.w	DeleteObject
0000E50C 4E75                       		rts	
0000E50E                            
0000E50E                            ; ---------------------------------------------------------------------------
0000E50E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E50E                            ; ---------------------------------------------------------------------------
0000E50E                            
0000E50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E50E                            
0000E50E                            
0000E50E                            SmashObject:				; XREF: Obj3C_Smash
0000E50E 7000                       		moveq	#0,d0
0000E510 1028 001A                  		move.b	$1A(a0),d0
0000E514 D040                       		add.w	d0,d0
0000E516 2668 0004                  		movea.l	4(a0),a3
0000E51A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E51E 524B                       		addq.w	#1,a3
0000E520 08E8 0005 0001             		bset	#5,1(a0)
0000E526 1810                       		move.b	0(a0),d4
0000E528 1A28 0001                  		move.b	1(a0),d5
0000E52C 2248                       		movea.l	a0,a1
0000E52E 6000                       		bra.s	Smash_LoadFrag
0000E530                            ; ===========================================================================
0000E530                            
0000E530                            Smash_Loop:
0000E530 6100 0000                  		bsr.w	SingleObjLoad
0000E534 6600                       		bne.s	Smash_PlaySnd
0000E536 5A4B                       		addq.w	#5,a3
0000E538                            
0000E538                            Smash_LoadFrag:				; XREF: SmashObject
0000E538 137C 0004 0024             		move.b	#4,$24(a1)
0000E53E 1284                       		move.b	d4,0(a1)
0000E540 234B 0004                  		move.l	a3,4(a1)
0000E544 1345 0001                  		move.b	d5,1(a1)
0000E548 3368 0008 0008             		move.w	8(a0),8(a1)
0000E54E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E554 3368 0002 0002             		move.w	2(a0),2(a1)
0000E55A 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E560 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E566 335C 0010                  		move.w	(a4)+,$10(a1)
0000E56A 335C 0012                  		move.w	(a4)+,$12(a1)
0000E56E B3C8                       		cmpa.l	a0,a1
0000E570 6400                       		bcc.s	loc_D268
0000E572 2F08                       		move.l	a0,-(sp)
0000E574 2049                       		movea.l	a1,a0
0000E576 6100 0000                  		bsr.w	SpeedToPos
0000E57A D568 0012                  		add.w	d2,$12(a0)
0000E57E 205F                       		movea.l	(sp)+,a0
0000E580 6100 0000                  		bsr.w	DisplaySprite2
0000E584                            
0000E584                            loc_D268:
0000E584 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E588                            
0000E588                            Smash_PlaySnd:
0000E588 303C 00CB                  		move.w	#$CB,d0
0000E58C 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E592                            ; End of function SmashObject
0000E592                            
0000E592                            ; ===========================================================================
0000E592                            ; Smashed block	fragment speeds
0000E592                            ;
0000E592 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E596 0600 FF00                  		dc.w $600, $FF00
0000E59A 0600 0100                  		dc.w $600, $100
0000E59E 0400 0500                  		dc.w $400, $500
0000E5A2 0600 FA00                  		dc.w $600, $FA00
0000E5A6 0800 FE00                  		dc.w $800, $FE00
0000E5AA 0800 0200                  		dc.w $800, $200
0000E5AE 0600 0600                  		dc.w $600, $600
0000E5B2                            
0000E5B2 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E5B6 F800 FE00                  		dc.w $F800, $FE00
0000E5BA F800 0200                  		dc.w $F800, $200
0000E5BE FA00 0600                  		dc.w $FA00, $600
0000E5C2 FC00 FB00                  		dc.w $FC00, $FB00
0000E5C6 FA00 FF00                  		dc.w $FA00, $FF00
0000E5CA FA00 0100                  		dc.w $FA00, $100
0000E5CE FC00 0500                  		dc.w $FC00, $500
0000E5D2                            ; ---------------------------------------------------------------------------
0000E5D2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E5D2                            ; ---------------------------------------------------------------------------
0000E5D2                            Map_obj3C:
0000E5D2                            	include "_maps\obj3C.asm"
0000E5D2                            ; ---------------------------------------------------------------------------
0000E5D2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E5D2                            ; ---------------------------------------------------------------------------
0000E5D2 0000                       		dc.w byte_D2BC-Map_obj3C
0000E5D4 0000                       		dc.w byte_D2E5-Map_obj3C
0000E5D6 0000                       		dc.w byte_D30E-Map_obj3C
0000E5D8 08                         byte_D2BC:	dc.b 8
0000E5D9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E5DE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E5E3 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E5E8 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E5ED E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E5F2 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E5F7 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E5FC 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E601 08                         byte_D2E5:	dc.b 8
0000E602 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E607 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E60C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E611 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E616 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E61B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E620 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E625 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E62A 08                         byte_D30E:	dc.b 8
0000E62B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E630 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E635 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E63A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E63F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E644 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E649 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E64E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E654 00                         		even
0000E654 00                         		even
0000E654                            
0000E654                            ; ---------------------------------------------------------------------------
0000E654                            ; Object code loading subroutine
0000E654                            ; ---------------------------------------------------------------------------
0000E654                            
0000E654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E654                            
0000E654                            
0000E654                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E654 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E658 7E7F                       		moveq	#$7F,d7
0000E65A 7000                       		moveq	#0,d0
0000E65C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E662 6400                       		bcc.s	loc_D362
0000E664                            
0000E664                            loc_D348:
0000E664 1010                       		move.b	(a0),d0		; load object number from RAM
0000E666 6700                       		beq.s	loc_D358
0000E668 D040                       		add.w	d0,d0
0000E66A D040                       		add.w	d0,d0
0000E66C 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E670 4E91                       		jsr	(a1)		; run the object's code
0000E672 7000                       		moveq	#0,d0
0000E674                            
0000E674                            loc_D358:
0000E674 41E8 0040                  		lea	$40(a0),a0	; next object
0000E678 51CF FFEA                  		dbf	d7,loc_D348
0000E67C 4E75                       		rts
0000E67E                            ; ===========================================================================
0000E67E                            
0000E67E                            loc_D362:
0000E67E 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000E684 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000E686 7E1F                       		moveq	#$1F,d7
0000E688 61DA                       		bsr.s	loc_D348
0000E68A 7E5F                       		moveq	#$5F,d7
0000E68C                            
0000E68C                            loc_D368:
0000E68C 7000                       		moveq	#0,d0
0000E68E 1010                       		move.b	(a0),d0
0000E690 6700                       		beq.s	loc_D378
0000E692 4A28 0001                  		tst.b	1(a0)
0000E696 6A00                       		bpl.s	loc_D378
0000E698 6100 0000                  		bsr.w	DisplaySprite
0000E69C                            
0000E69C                            loc_D378:
0000E69C 41E8 0040                  		lea	$40(a0),a0
0000E6A0                            
0000E6A0                            loc_D37C:
0000E6A0 51CF FFEA                  		dbf	d7,loc_D368
0000E6A4 4E75                       		rts
0000E6A6                            ; End of function ObjectsLoad
0000E6A6                            
0000E6A6                            ; ===========================================================================
0000E6A6                            ; ---------------------------------------------------------------------------
0000E6A6                            ; Object pointers
0000E6A6                            ; ---------------------------------------------------------------------------
0000E6A6                            Obj_Index:
0000E6A6                            	include "_inc\Object pointers.asm"
0000E6A6                            ; ---------------------------------------------------------------------------
0000E6A6                            ; Object pointers
0000E6A6                            ; ---------------------------------------------------------------------------
0000E6A6 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, ObjectFall
0000E6B6 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E6C6 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E6D6 0000 0000 0000 B874 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E6E6 0000 83F0 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E6F6 0000 8A22 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E706 0000 92DC 0000 9344 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E716 0000 9B8A 0000 9E84 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E726 0000 0000 0000 AB08 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E736 0000 AE4A 0000 B3A0 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E746 0000 A740 0000 9C6C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E756 0000 BEFC 0000 B566 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E766 0000 C91E 0000 CFF8 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E776 0000 C47A 0000 E102 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E786 0000 D786 0000 D852 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E796 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E7A6 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E7B6 0000 CC56 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E7C6 0000 E3CE 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E7D6 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E7E6 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E7F6 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E806 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E816 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E826 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E836 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E846 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E856 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E866 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E876 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E886 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E896 0000 0000 0000 DA8C 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E8A6 0000 511A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E8B6 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E8C6 0000 57E0 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E8C6 0000 57E0 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E8D6                            
0000E8D6                            ; ---------------------------------------------------------------------------
0000E8D6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E8D6                            ; ---------------------------------------------------------------------------
0000E8D6                            
0000E8D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8D6                            
0000E8D6                            
0000E8D6                            ObjectFall:
0000E8D6 3028 0010                  		move.w	$10(a0),d0
0000E8DA 48C0                       		ext.l	d0
0000E8DC E188                       		lsl.l	#8,d0
0000E8DE D1A8 0008                  		add.l	d0,8(a0)
0000E8E2 3028 0012                  		move.w	$12(a0),d0
0000E8E6 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E8EC 48C0                       		ext.l	d0
0000E8EE E188                       		lsl.l	#8,d0
0000E8F0 D1A8 000C                  		add.l	d0,$C(a0)
0000E8F4 4E75                       		rts	
0000E8F6                            
0000E8F6                            ; End of function ObjectFall
0000E8F6                            
0000E8F6                            ; ---------------------------------------------------------------------------
0000E8F6                            ; Subroutine translating object	speed to update	object position
0000E8F6                            ; ---------------------------------------------------------------------------
0000E8F6                            
0000E8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8F6                            
0000E8F6                            
0000E8F6                            SpeedToPos:
0000E8F6 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E8FA 48C0                       		ext.l	d0
0000E8FC E188                       		lsl.l	#8,d0		; multiply speed by $100
0000E8FE D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
0000E902 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E906 48C0                       		ext.l	d0
0000E908 E188                       		lsl.l	#8,d0		; multiply by $100
0000E90A D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
0000E90E 4E75                       		rts	
0000E910                            
0000E910                            ; End of function SpeedToPos
0000E910                            
0000E910                            ; ---------------------------------------------------------------------------
0000E910                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E910                            ; ---------------------------------------------------------------------------
0000E910                            
0000E910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E910                            
0000E910                            
0000E910                            DisplaySprite:
0000E910 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E914 3028 0018                  		move.w	$18(a0),d0
0000E918 E248                       		lsr.w	#1,d0
0000E91A 0240 0380                  		andi.w	#$380,d0
0000E91E D2C0                       		adda.w	d0,a1
0000E920 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E924 6400                       		bcc.s	locret_D620
0000E926 5451                       		addq.w	#2,(a1)
0000E928 D2D1                       		adda.w	(a1),a1
0000E92A 3288                       		move.w	a0,(a1)
0000E92C                            
0000E92C                            locret_D620:
0000E92C 4E75                       		rts	
0000E92E                            ; End of function DisplaySprite
0000E92E                            
0000E92E                            ; ---------------------------------------------------------------------------
0000E92E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E92E                            ; ---------------------------------------------------------------------------
0000E92E                            
0000E92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E92E                            
0000E92E                            
0000E92E                            DisplaySprite2:
0000E92E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E932 3029 0018                  		move.w	$18(a1),d0
0000E936 E248                       		lsr.w	#1,d0
0000E938 0240 0380                  		andi.w	#$380,d0
0000E93C D4C0                       		adda.w	d0,a2
0000E93E 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E942 6400                       		bcc.s	locret_D63E
0000E944 5452                       		addq.w	#2,(a2)
0000E946 D4D2                       		adda.w	(a2),a2
0000E948 3489                       		move.w	a1,(a2)
0000E94A                            
0000E94A                            locret_D63E:
0000E94A 4E75                       		rts	
0000E94C                            ; End of function DisplaySprite2
0000E94C                            
0000E94C                            
0000E94C                            DisplaySprite3:
0000E94C 43F8 AC00                      lea    ($FFFFAC00).w,a1
0000E950 D2C0                           adda.w    d0,a1
0000E952 0C51 007E                      cmpi.w    #$7E,(a1)
0000E956 6400                           bhs.s    return_16542
0000E958 5451                           addq.w    #2,(a1)
0000E95A D2D1                           adda.w    (a1),a1
0000E95C 3288                           move.w    a0,(a1)
0000E95E                            
0000E95E                            return_16542:
0000E95E 4E75                           rts
0000E960                            ; ---------------------------------------------------------------------------
0000E960                            ; Subroutine to	delete an object
0000E960                            ; ---------------------------------------------------------------------------
0000E960                            
0000E960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E960                            
0000E960                            
0000E960                            DeleteObject:
0000E960 2248                       		movea.l	a0,a1
0000E962                            
0000E962                            DeleteObject2:
0000E962 7200                       		moveq	#0,d1
0000E964 700F                       		moveq	#$F,d0
0000E966                            
0000E966                            loc_D646:
0000E966 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E968 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E96C 4E75                       		rts	
0000E96E                            ; End of function DeleteObject
0000E96E                            
0000E96E                            ; ===========================================================================
0000E96E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E972 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E976 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E97A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            
0000E97E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E97E                            
0000E97E                            
0000E97E                            BuildSprites:                ; XREF: TitleScreen; et al
0000E97E 45F8 F800                          lea    ($FFFFF800).w,a2 ; set address for sprite table
0000E982 4EB9 0000 0000                     jsr		Obj02
0000E988 4A38 FFD0                          tst.b    ($FFFFFFD0).w ; this was level_started_flag
0000E98C 6700                               beq.s    BuildSprites_2
0000E98E 4EB9 0000 0000                     jsr    loc_40804
0000E994                            
0000E994                            BuildSprites_2:
0000E994 49F8 AC00                          lea    ($FFFFAC00).w,a4
0000E998 7E07                               moveq    #7,d7
0000E99A                            
0000E99A                            loc_D66A:
0000E99A 0C47 0005                  		cmpi.w	#$07-$02,d7
0000E99E 6600                       		bne.s	BuildSpritesCont
0000E9A0 4A38 870D                  		tst.b	(Level_started_flag).w
0000E9A4 6700                       		beq.s	BuildSpritesCont
0000E9A6 48E7 0108                  		movem.l	d7/a4,-(sp)
0000E9AA 6100 0000                  		bsr.w	BuildRings
0000E9AE 4CDF 1080                  		movem.l	(sp)+,d7/a4
0000E9B2                            
0000E9B2                            BuildSpritesCont:
0000E9B2 4A54                       		tst.w	(a4)
0000E9B4 6700 0000                  		beq.w	loc_D72E
0000E9B8 7C02                       		moveq	#2,d6
0000E9BA                            
0000E9BA                            loc_D672:
0000E9BA 3074 6000                          movea.w    (a4,d6.w),a0
0000E9BE 4A10                               tst.b    (a0)
0000E9C0 6700 0000                          beq.w    loc_D726
0000E9C4 08A8 0007 0001                     bclr    #7,1(a0)
0000E9CA 1028 0001                          move.b    1(a0),d0
0000E9CE 1800                               move.b    d0,d4
0000E9D0 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000E9D4 6700                               beq.s    @skip    ; if it is, branch
0000E9D6 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000E9DA 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000E9DE                               @skip:
0000E9DE 0240 000C                  		andi.w	#$C,d0
0000E9E2 6700                       		beq.s	loc_D6DE
0000E9E4 227B 0088                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E9E8 7000                       		moveq	#0,d0
0000E9EA 1028 0019                  		move.b	$19(a0),d0
0000E9EE 3628 0008                  		move.w	8(a0),d3
0000E9F2 9651                       		sub.w	(a1),d3
0000E9F4 3203                       		move.w	d3,d1
0000E9F6 D240                       		add.w	d0,d1
0000E9F8 6B00 0000                  		bmi.w	loc_D726
0000E9FC 3203                       		move.w	d3,d1
0000E9FE 9240                       		sub.w	d0,d1
0000EA00 0C41 0140                  		cmpi.w	#$140,d1
0000EA04 6C00                       		bge.s	loc_D726
0000EA06 0643 0080                  		addi.w	#$80,d3
0000EA0A 0804 0004                  		btst	#4,d4
0000EA0E 6700                       		beq.s	loc_D6E8
0000EA10 7000                       		moveq	#0,d0
0000EA12 1028 0016                  		move.b	$16(a0),d0
0000EA16 3428 000C                  		move.w	$C(a0),d2
0000EA1A 9469 0004                  		sub.w	4(a1),d2
0000EA1E 3202                       		move.w	d2,d1
0000EA20 D240                       		add.w	d0,d1
0000EA22 6B00                       		bmi.s	loc_D726
0000EA24 3202                       		move.w	d2,d1
0000EA26 9240                       		sub.w	d0,d1
0000EA28 0C41 00E0                  		cmpi.w	#$E0,d1
0000EA2C 6C00                       		bge.s	loc_D726
0000EA2E 0642 0080                  		addi.w	#$80,d2
0000EA32 6000                       		bra.s	loc_D700
0000EA34                            ; ===========================================================================
0000EA34                            
0000EA34                            loc_D6DE:
0000EA34 3428 000A                  		move.w	$A(a0),d2
0000EA38 3628 0008                  		move.w	8(a0),d3
0000EA3C 6000                       		bra.s	loc_D700
0000EA3E                            ; ===========================================================================
0000EA3E                            
0000EA3E                            loc_D6E8:
0000EA3E 3428 000C                  		move.w	$C(a0),d2
0000EA42 9469 0004                  		sub.w	4(a1),d2
0000EA46 0642 0080                  		addi.w	#$80,d2
0000EA4A 0C42 0060                  		cmpi.w	#$60,d2
0000EA4E 6500                       		bcs.s	loc_D726
0000EA50 0C42 0180                  		cmpi.w	#$180,d2
0000EA54 6400                       		bcc.s	loc_D726
0000EA56                            
0000EA56                            loc_D700:
0000EA56 2268 0004                  		movea.l	4(a0),a1
0000EA5A 7200                       		moveq	#0,d1
0000EA5C 0804 0005                  		btst	#5,d4
0000EA60 6600                       		bne.s	loc_D71C
0000EA62 1228 001A                  		move.b	$1A(a0),d1
0000EA66 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000EA68 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000EA6C 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000EA6E 1219                       		move.b	(a1)+,d1
0000EA70 5301                       		subq.b	#1,d1
0000EA72 6B00                       		bmi.s	loc_D720
0000EA74                            
0000EA74                            loc_D71C:
0000EA74 4EB9 0000 0000             		jsr	sub_D750
0000EA7A                            
0000EA7A                            loc_D720:
0000EA7A 08E8 0007 0001             		bset	#7,1(a0)
0000EA80                            
0000EA80                            loc_D726:
0000EA80 5446                       		addq.w	#2,d6
0000EA82 5554                       		subq.w	#2,(a4)
0000EA84 6600 FF34                  		bne.w	loc_D672
0000EA88                            
0000EA88                            loc_D72E:
0000EA88 49EC 0080                  		lea	$80(a4),a4
0000EA8C 51CF FF0C                  		dbf	d7,loc_D66A
0000EA90 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000EA94 0C05 0050                  		cmpi.b	#$50,d5
0000EA98 6700                       		beq.s	loc_D748
0000EA9A 24BC 0000 0000             		move.l	#0,(a2)
0000EAA0 4E75                       		rts	
0000EAA2                            ; ===========================================================================
0000EAA2                            
0000EAA2                            loc_D748:
0000EAA2 157C 0000 FFFB             		move.b	#0,-5(a2)
0000EAA8 4E75                       		rts	
0000EAAA                            ; End of function BuildSprites
0000EAAA                            
0000EAAA                            BuildSprites_MultiDraw:
0000EAAA 2F0C                       	move.l	a4,-(sp)
0000EAAC 49F8 F700                  	lea	($FFFFF700).w,a4
0000EAB0 3668 0002                  	movea.w	2(a0),a3
0000EAB4 2A68 0004                  	movea.l	4(a0),a5
0000EAB8 7000                       	moveq	#0,d0
0000EABA                            
0000EABA                            	; check if object is within X bounds
0000EABA 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000EABE 3628 0008                  	move.w	8(a0),d3
0000EAC2 9654                       	sub.w	(a4),d3
0000EAC4 3203                       	move.w	d3,d1                            
0000EAC6 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000EAC8 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EACC 3203                       	move.w	d3,d1
0000EACE 9240                       	sub.w	d0,d1
0000EAD0 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000EAD4 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000EAD8 0643 0080                  	addi.w	#128,d3
0000EADC                            
0000EADC                            	; check if object is within Y bounds
0000EADC 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000EAE0 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000EAE2 7000                       	moveq	#0,d0
0000EAE4 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000EAE8 3428 000C                  	move.w	$C(a0),d2
0000EAEC 946C 0004                  	sub.w	4(a4),d2
0000EAF0 3202                       	move.w	d2,d1
0000EAF2 D240                       	add.w	d0,d1
0000EAF4 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000EAF8 3202                       	move.w	d2,d1
0000EAFA 9240                       	sub.w	d0,d1
0000EAFC 0C41 00E0                  	cmpi.w	#224,d1
0000EB00 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000EB04 0642 0080                  	addi.w	#128,d2
0000EB08 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000EB0A                            BuildSpritesMulti_ApproxYCheck:
0000EB0A 3428 000C                  	move.w	$C(a0),d2
0000EB0E 946C 0004                  	sub.w	4(a4),d2
0000EB12 0642 0080                  	addi.w	#128,d2
0000EB16 0242 07FF                  	andi.w	#$7FF,d2
0000EB1A 0C42 0060                  	cmpi.w	#-32+128,d2
0000EB1E 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000EB20 0C42 0180                  	cmpi.w	#32+128+224,d2
0000EB24 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000EB26                            BuildSpritesMulti_DrawSprite:
0000EB26 7200                       	moveq	#0,d1
0000EB28 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000EB2C 6700                       	beq.s	@noparenttodraw
0000EB2E D241                       	add.w	d1,d1
0000EB30 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000EB32 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB36 7200                       	moveq	#0,d1
0000EB38 1219                       	move.b	(a1)+,d1
0000EB3A 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB3C 6B00                       	bmi.s	@noparenttodraw                  ; if there are 0 pieces, branch
0000EB3E 3F04                       	move.w	d4,-(sp)
0000EB40 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000EB46 381F                       	move.w	(sp)+,d4
0000EB48                            @noparenttodraw:
0000EB48 0028 0080 0001             	ori.b	#$80,1(a0)	         ; set onscreen flag
0000EB4E 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000EB52 7000                       	moveq	#0,d0
0000EB54 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000EB58 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000EB5A 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000EB5C                            
0000EB5C                            @drawchildloop:
0000EB5C 4840                       	swap	d0
0000EB5E 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000EB60 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000EB62 0643 0080                  	addi.w	#128,d3
0000EB66 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000EB68 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000EB6C 0642 0080                  	addi.w	#128,d2
0000EB70 0242 07FF                  	andi.w	#$7FF,d2
0000EB74 524E                       	addq.w	#1,a6
0000EB76 7200                       	moveq	#0,d1
0000EB78 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000EB7A D241                       	add.w	d1,d1
0000EB7C 224D                       	movea.l	a5,a1
0000EB7E D2F1 1000                  	adda.w	(a1,d1.w),a1
0000EB82 7200                       	moveq	#0,d1
0000EB84 1219                       	move.b	(a1)+,d1
0000EB86 5301                       	subq.b	#1,d1                            ; get number of pieces
0000EB88 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000EB8A 3F04                       	move.w	d4,-(sp)
0000EB8C 4EB9 0000 0000             	jsr	ChkDrawSprite
0000EB92 381F                       	move.w	(sp)+,d4
0000EB94                            @nochildleft:
0000EB94 4840                       	swap	d0
0000EB96 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000EB9A                            ; loc_16804:
0000EB9A                            BuildSprites_MultiDraw_NextObj:
0000EB9A 285F                       	movea.l	(sp)+,a4
0000EB9C 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000EBA0                            
0000EBA0                            
0000EBA0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EBA0                            
0000EBA0                            ; sub_1680A:
0000EBA0                            ChkDrawSprite:
0000EBA0 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000EBA4 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000EBA6 4E75                       	rts	; otherwise, return
0000EBA8                            
0000EBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBA8                            
0000EBA8                            
0000EBA8                            sub_D750:				; XREF: BuildSprites
0000EBA8 3668 0002                  		movea.w	2(a0),a3
0000EBAC                            loc_1681C:
0000EBAC 0804 0000                  		btst	#0,d4
0000EBB0 6600                       		bne.s	loc_D796
0000EBB2 0804 0001                  		btst	#1,d4
0000EBB6 6600 0000                  		bne.w	loc_D7E4
0000EBBA                            ; End of function sub_D750
0000EBBA                            
0000EBBA                            
0000EBBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBBA                            
0000EBBA                            
0000EBBA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000EBBA 0C05 0050                  		cmpi.b	#$50,d5
0000EBBE 6700                       		beq.s	locret_D794
0000EBC0                            DrawSprite_Loop:				; XREF: sub_D762; SS_ShowLayout	
0000EBC0 1019                       		move.b	(a1)+,d0
0000EBC2 4880                       		ext.w	d0
0000EBC4 D042                       		add.w	d2,d0
0000EBC6 34C0                       		move.w	d0,(a2)+
0000EBC8 14D9                       		move.b	(a1)+,(a2)+
0000EBCA 5205                       		addq.b	#1,d5
0000EBCC 14C5                       		move.b	d5,(a2)+
0000EBCE 1019                       		move.b	(a1)+,d0
0000EBD0 E148                       		lsl.w	#8,d0
0000EBD2 1019                       		move.b	(a1)+,d0
0000EBD4 D04B                       		add.w	a3,d0
0000EBD6 34C0                       		move.w	d0,(a2)+
0000EBD8 1019                       		move.b	(a1)+,d0
0000EBDA 4880                       		ext.w	d0
0000EBDC D043                       		add.w	d3,d0
0000EBDE 0240 01FF                  		andi.w	#$1FF,d0
0000EBE2 6600                       		bne.s	loc_D78E
0000EBE4 5240                       		addq.w	#1,d0
0000EBE6                            
0000EBE6                            loc_D78E:
0000EBE6 34C0                       		move.w	d0,(a2)+
0000EBE8 51C9 FFD0                  		dbf	d1,sub_D762
0000EBEC                            
0000EBEC                            locret_D794:
0000EBEC 4E75                       		rts	
0000EBEE                            ; End of function sub_D762
0000EBEE                            
0000EBEE                            ; ===========================================================================
0000EBEE                            
0000EBEE                            loc_D796:
0000EBEE 0804 0001                  		btst	#1,d4
0000EBF2 6600 0000                  		bne.w	loc_D82A
0000EBF6                            
0000EBF6                            loc_D79E:
0000EBF6 0C05 0050                  		cmpi.b	#$50,d5
0000EBFA 6700                       		beq.s	locret_D7E2
0000EBFC 1019                       		move.b	(a1)+,d0
0000EBFE 4880                       		ext.w	d0
0000EC00 D042                       		add.w	d2,d0
0000EC02 34C0                       		move.w	d0,(a2)+
0000EC04 1819                       		move.b	(a1)+,d4
0000EC06 14C4                       		move.b	d4,(a2)+
0000EC08 5205                       		addq.b	#1,d5
0000EC0A 14C5                       		move.b	d5,(a2)+
0000EC0C 1019                       		move.b	(a1)+,d0
0000EC0E E148                       		lsl.w	#8,d0
0000EC10 1019                       		move.b	(a1)+,d0
0000EC12 D04B                       		add.w	a3,d0
0000EC14 0A40 0800                  		eori.w	#$800,d0
0000EC18 34C0                       		move.w	d0,(a2)+
0000EC1A 1019                       		move.b	(a1)+,d0
0000EC1C 4880                       		ext.w	d0
0000EC1E 4440                       		neg.w	d0
0000EC20 D804                       		add.b	d4,d4
0000EC22 0244 0018                  		andi.w	#$18,d4
0000EC26 5044                       		addq.w	#8,d4
0000EC28 9044                       		sub.w	d4,d0
0000EC2A D043                       		add.w	d3,d0
0000EC2C 0240 01FF                  		andi.w	#$1FF,d0
0000EC30 6600                       		bne.s	loc_D7DC
0000EC32 5240                       		addq.w	#1,d0
0000EC34                            
0000EC34                            loc_D7DC:
0000EC34 34C0                       		move.w	d0,(a2)+
0000EC36 51C9 FFBE                  		dbf	d1,loc_D79E
0000EC3A                            
0000EC3A                            locret_D7E2:
0000EC3A 4E75                       		rts	
0000EC3C                            ; ===========================================================================
0000EC3C                            
0000EC3C                            loc_D7E4:				; XREF: sub_D750
0000EC3C 0C05 0050                  		cmpi.b	#$50,d5
0000EC40 6700                       		beq.s	locret_D828
0000EC42 1019                       		move.b	(a1)+,d0
0000EC44 1811                       		move.b	(a1),d4
0000EC46 4880                       		ext.w	d0
0000EC48 4440                       		neg.w	d0
0000EC4A E70C                       		lsl.b	#3,d4
0000EC4C 0244 0018                  		andi.w	#$18,d4
0000EC50 5044                       		addq.w	#8,d4
0000EC52 9044                       		sub.w	d4,d0
0000EC54 D042                       		add.w	d2,d0
0000EC56 34C0                       		move.w	d0,(a2)+
0000EC58 14D9                       		move.b	(a1)+,(a2)+
0000EC5A 5205                       		addq.b	#1,d5
0000EC5C 14C5                       		move.b	d5,(a2)+
0000EC5E 1019                       		move.b	(a1)+,d0
0000EC60 E148                       		lsl.w	#8,d0
0000EC62 1019                       		move.b	(a1)+,d0
0000EC64 D04B                       		add.w	a3,d0
0000EC66 0A40 1000                  		eori.w	#$1000,d0
0000EC6A 34C0                       		move.w	d0,(a2)+
0000EC6C 1019                       		move.b	(a1)+,d0
0000EC6E 4880                       		ext.w	d0
0000EC70 D043                       		add.w	d3,d0
0000EC72 0240 01FF                  		andi.w	#$1FF,d0
0000EC76 6600                       		bne.s	loc_D822
0000EC78 5240                       		addq.w	#1,d0
0000EC7A                            
0000EC7A                            loc_D822:
0000EC7A 34C0                       		move.w	d0,(a2)+
0000EC7C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000EC80                            
0000EC80                            locret_D828:
0000EC80 4E75                       		rts	
0000EC82                            ; ===========================================================================
0000EC82                            
0000EC82                            loc_D82A:
0000EC82 0C05 0050                  		cmpi.b	#$50,d5
0000EC86 6700                       		beq.s	locret_D87C
0000EC88 1019                       		move.b	(a1)+,d0
0000EC8A 1811                       		move.b	(a1),d4
0000EC8C 4880                       		ext.w	d0
0000EC8E 4440                       		neg.w	d0
0000EC90 E70C                       		lsl.b	#3,d4
0000EC92 0244 0018                  		andi.w	#$18,d4
0000EC96 5044                       		addq.w	#8,d4
0000EC98 9044                       		sub.w	d4,d0
0000EC9A D042                       		add.w	d2,d0
0000EC9C 34C0                       		move.w	d0,(a2)+
0000EC9E 1819                       		move.b	(a1)+,d4
0000ECA0 14C4                       		move.b	d4,(a2)+
0000ECA2 5205                       		addq.b	#1,d5
0000ECA4 14C5                       		move.b	d5,(a2)+
0000ECA6 1019                       		move.b	(a1)+,d0
0000ECA8 E148                       		lsl.w	#8,d0
0000ECAA 1019                       		move.b	(a1)+,d0
0000ECAC D04B                       		add.w	a3,d0
0000ECAE 0A40 1800                  		eori.w	#$1800,d0
0000ECB2 34C0                       		move.w	d0,(a2)+
0000ECB4 1019                       		move.b	(a1)+,d0
0000ECB6 4880                       		ext.w	d0
0000ECB8 4440                       		neg.w	d0
0000ECBA D804                       		add.b	d4,d4
0000ECBC 0244 0018                  		andi.w	#$18,d4
0000ECC0 5044                       		addq.w	#8,d4
0000ECC2 9044                       		sub.w	d4,d0
0000ECC4 D043                       		add.w	d3,d0
0000ECC6 0240 01FF                  		andi.w	#$1FF,d0
0000ECCA 6600                       		bne.s	loc_D876
0000ECCC 5240                       		addq.w	#1,d0
0000ECCE                            
0000ECCE                            loc_D876:
0000ECCE 34C0                       		move.w	d0,(a2)+
0000ECD0 51C9 FFB0                  		dbf	d1,loc_D82A
0000ECD4                            
0000ECD4                            locret_D87C:
0000ECD4 4E75                       		rts	
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ; Subroutine to	check if an object is on the screen
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            
0000ECD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECD6                            
0000ECD6                            
0000ECD6                            ChkObjOnScreen:
0000ECD6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000ECDA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000ECDE 6B00                       		bmi.s	NotOnScreen
0000ECE0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000ECE4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ECE6                            
0000ECE6 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000ECEA 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000ECEE 6B00                       		bmi.s	NotOnScreen
0000ECF0 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000ECF4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000ECF6                            
0000ECF6 7000                       		moveq	#0,d0		; set flag to 0
0000ECF8 4E75                       		rts	
0000ECFA                            ; ===========================================================================
0000ECFA                            
0000ECFA                            NotOnScreen:				; XREF: ChkObjOnScreen
0000ECFA 7001                       		moveq	#1,d0		; set flag to 1
0000ECFC 4E75                       		rts	
0000ECFE                            ; End of function ChkObjOnScreen
0000ECFE                            
0000ECFE                            
0000ECFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECFE                            
0000ECFE                            
0000ECFE                            ChkObjOnScreen2:
0000ECFE 7200                       		moveq	#0,d1
0000ED00 1228 0019                  		move.b	$19(a0),d1
0000ED04 3028 0008                  		move.w	8(a0),d0
0000ED08 9078 F700                  		sub.w	($FFFFF700).w,d0
0000ED0C D041                       		add.w	d1,d0
0000ED0E 6B00                       		bmi.s	NotOnScreen2
0000ED10 D241                       		add.w	d1,d1
0000ED12 9041                       		sub.w	d1,d0
0000ED14 0C40 0140                  		cmpi.w	#320,d0
0000ED18 6C00                       		bge.s	NotOnScreen2
0000ED1A                            
0000ED1A 3228 000C                  		move.w	$C(a0),d1
0000ED1E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000ED22 6B00                       		bmi.s	NotOnScreen2
0000ED24 0C41 00E0                  		cmpi.w	#224,d1
0000ED28 6C00                       		bge.s	NotOnScreen2
0000ED2A                            
0000ED2A 7000                       		moveq	#0,d0
0000ED2C 4E75                       		rts	
0000ED2E                            ; ===========================================================================
0000ED2E                            
0000ED2E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000ED2E 7001                       		moveq	#1,d0
0000ED30 4E75                       		rts	
0000ED32                            ; End of function ChkObjOnScreen2
0000ED32                            
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            ; Subroutine to	load a level's objects
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            
0000ED32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED32                            
0000ED32                            
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                            ; Objects Manager
0000ED32                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
0000ED32                            ; normal s2, in this version every object gets an entry in the respawn table.
0000ED32                            ; This is necessary to get the additional y-range checks to work.
0000ED32                            ;
0000ED32                            ; input variables:
0000ED32                            ;  -none-
0000ED32                            ;
0000ED32                            ; writes:
0000ED32                            ;  d0, d1, d2
0000ED32                            ;  d3 = upper boundary to load object
0000ED32                            ;  d4 = lower boundary to load object
0000ED32                            ;  d5 = #$FFF, used to filter out object's y position
0000ED32                            ;  d6 = camera position
0000ED32                            ;
0000ED32                            ;  a0 = address in object placement list
0000ED32                            ;  a3 = address in object respawn table
0000ED32                            ;  a6 = object loading routine
0000ED32                            ; ---------------------------------------------------------------------------
0000ED32                             
0000ED32                            ; loc_17AA4
0000ED32                            ObjPosLoad:
0000ED32 7000                       	moveq	#0,d0
0000ED34 1038 F76C                  	move.b	($FFFFF76C).w,d0
0000ED38 4EFB 0000                  	jmp	ObjPosLoad_States(pc,d0.w)
0000ED3C                             
0000ED3C                            ; ============== JUMP TABLE	=============================================
0000ED3C                            ObjPosLoad_States:
0000ED3C 6000 0000                  	bra.w	ObjPosLoad_Init		; 0
0000ED40 6000 0000                  	bra.w	ObjPosLoad_Main		; 2
0000ED44                            ; ============== END JUMP TABLE	=============================================
0000ED44                             
0000ED44                            ObjPosLoad_Init:
0000ED44 5838 F76C                  	addq.b	#4,($FFFFF76C).w
0000ED48                             
0000ED48 41F8 8000                  	lea     (Object_Respawn_Table).w,a0
0000ED4C 7000                       	moveq   #0,d0
0000ED4E 323C 00BF                  	move.w  #$BF,d1 ; set loop counter
0000ED52                            OPLBack1:
0000ED52 20C0                       	move.l  d0,(a0)+
0000ED54 51C9 FFFC                  	dbf     d1,OPLBack1
0000ED58                             
0000ED58 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000ED5C                            ;
0000ED5C                            ;	ror.b	#1,d0			; this is from s3k
0000ED5C                            ;	lsr.w	#5,d0
0000ED5C                            ;	lea	(Off_Objects).l,a0
0000ED5C                            ;	movea.l	(a0,d0.w),a0
0000ED5C                            ;
0000ED5C ED08                       	lsl.b	#6,d0
0000ED5E E848                       	lsr.w	#4,d0
0000ED60 41F9 0000 0000             	lea	(ObjPos_Index).l,a0	; load the first pointer in the object layout list pointer index,
0000ED66 D0F0 0000                  	adda.w	(a0,d0.w),a0		; load the pointer to the current object layout
0000ED6A                             
0000ED6A                            	; initialize each object load address with the first object in the layout
0000ED6A 21C8 F770                  	move.l	a0,($FFFFF770).w
0000ED6E 21C8 F774                  	move.l	a0,($FFFFF774).w
0000ED72 47F8 8000                  	lea	(Object_Respawn_Table).w,a3
0000ED76                             
0000ED76 3C38 F700                  	move.w	($FFFFF700).w,d6
0000ED7A 0446 0080                  	subi.w	#$80,d6	; look one chunk to the left
0000ED7E 6400                       	bcc.s	OPL1	; if the result was negative,
0000ED80 7C00                       	moveq	#0,d6	; cap at zero
0000ED82                            	OPL1:	
0000ED82 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0000ED86                             
0000ED86 2078 F770                  	movea.l	($FFFFF770).w,a0	; get first object in layout
0000ED8A                             
0000ED8A                            OPLBack2:	; at the beginning of a level this gives respawn table entries to any object that is one chunk
0000ED8A                            	; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
0000ED8A BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000ED8C 6300                       	bls.s	OPL2		; if yes, branch
0000ED8E 5C48                       	addq.w	#6,a0	; next object
0000ED90 524B                       	addq.w	#1,a3	; respawn index of next object going right
0000ED92 60F6                       	bra.s	OPLBack2
0000ED94                            ; ---------------------------------------------------------------------------
0000ED94                             
0000ED94                            OPL2:	
0000ED94 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember rightmost object that has been processed, so far (we still need to look forward)
0000ED98 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000ED9C                             
0000ED9C 47F8 8000                  	lea	(Object_Respawn_Table).w,a3	; reset a3
0000EDA0 2078 F774                  	movea.l	($FFFFF774).w,a0	; reset a0
0000EDA4 0446 0080                  	subi.w	#$80,d6		; look even farther left (any object behind this is out of range)
0000EDA8 6500                       	bcs.s	OPL3		; branch, if camera position would be behind level's left boundary
0000EDAA                             
0000EDAA                             OPLBack3:	; count how many objects are behind the screen that are not in range and need to remember their state
0000EDAA BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
0000EDAC 6300                       	bls.s	OPL3		; if yes, branch
0000EDAE 5C48                       	addq.w	#6,a0
0000EDB0 524B                       	addq.w	#1,a3	; respawn index of next object going left
0000EDB2 60F6                       	bra.s	OPLBack3	; continue with next object
0000EDB4                            ; ---------------------------------------------------------------------------
0000EDB4                             
0000EDB4                            OPL3:	
0000EDB4 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EDB8 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EDBC                             
0000EDBC 31FC FFFF FE2A             	move.w	#-1,(Camera_X_Pos_last).w	; make sure ObjPosLoad_GoingForward is run
0000EDC2                             
0000EDC2 3038 F704                  	move.w	($FFFFF704).w,d0
0000EDC6 0240 FF80                  	andi.w	#$FF80,d0
0000EDCA 31C0 F76E                  	move.w	d0,(Camera_Y_pos_last).w	; make sure the Y check isn't run unnecessarily during initialization
0000EDCE                            ; ---------------------------------------------------------------------------
0000EDCE                             
0000EDCE                            ObjPosLoad_Main:
0000EDCE                            	; get coarse camera position
0000EDCE                            ;	move.w	($FFFFF704).w,d1
0000EDCE                            ;	subi.w	#$80,d1
0000EDCE                            ;	andi.w	#$FF80,d1
0000EDCE                            ;	move.w	d1,(Camera_Y_pos_coarse).w
0000EDCE                             
0000EDCE                            ;	move.w	($FFFFF700).w,d1
0000EDCE                            ;	subi.w	#$80,d1
0000EDCE                            ;	andi.w	#$FF80,d1
0000EDCE                            ;	move.w	d1,(Camera_X_pos_coarse).w
0000EDCE                             
0000EDCE 4A78 F726                  	tst.w	($FFFFF726).w	; does this level y-wrap?
0000EDD2 6A00                       	bpl.s	ObjMan_Main_NoYWrap	; if not, branch
0000EDD4 4DF9 0000 0000             	lea	(ChkLoadObj_YWrap).l,a6	; set object loading routine
0000EDDA 3638 F704                  	move.w	($FFFFF704).w,d3
0000EDDE 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EDE2 3803                       	move.w	d3,d4
0000EDE4 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EDE8 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EDEC 6A00                       	bpl.s	OPL4		; branch, if upper boundary > 0
0000EDEE 0243 07FF                  	andi.w	#$7FF,d3	; wrap value
0000EDF2 6000                       	bra.s	ObjMan_Main_Cont
0000EDF4                            ; ---------------------------------------------------------------------------
0000EDF4                             
0000EDF4                            OPL4:	
0000EDF4 303C 07FF                  	move.w	#$7FF,d0
0000EDF8 5240                       	addq.w	#1,d0
0000EDFA B840                       	cmp.w	d0,d4
0000EDFC 6300                       	bls.s	OPL5		; branch, if lower boundary < $7FF
0000EDFE 0244 07FF                  	andi.w	#$7FF,d4	; wrap value
0000EE02 6000                       	bra.s	ObjMan_Main_Cont
0000EE04                            ; ---------------------------------------------------------------------------
0000EE04                             
0000EE04                            ObjMan_Main_NoYWrap:
0000EE04 3638 F704                  	move.w	($FFFFF704).w,d3
0000EE08 0243 FF80                  	andi.w	#$FF80,d3	; get coarse value
0000EE0C 3803                       	move.w	d3,d4
0000EE0E 0644 0200                  	addi.w	#$200,d4	; set lower boundary
0000EE12 0443 0080                  	subi.w	#$80,d3		; set upper boundary
0000EE16 6A00                       	bpl.s	OPL5
0000EE18 7600                       	moveq	#0,d3	; no negative values allowed
0000EE1A                             
0000EE1A                            OPL5:	
0000EE1A 4DF9 0000 0000             	lea	(ChkLoadObj).l,a6	; set object loading routine
0000EE20                             
0000EE20                            ObjMan_Main_Cont:
0000EE20 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EE24 3C38 F700                  	move.w	($FFFFF700).w,d6
0000EE28 0246 FF80                  	andi.w	#$FF80,d6
0000EE2C BC78 FE2A                  	cmp.w	(Camera_X_Pos_last).w,d6	; is the X range the same as last time?
0000EE30 6700 0000                  	beq.w	ObjPosLoad_SameXRange	; if yes, branch
0000EE34 6C00                       	bge.s	ObjPosLoad_GoingForward	; if new pos is greater than old pos, branch
0000EE36                             
0000EE36                            	; if the player is moving back
0000EE36 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w	; remember current position for next time
0000EE3A                             
0000EE3A 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object going left
0000EE3E 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EE42                             
0000EE42 0446 0080                  	subi.w	#$80,d6			; look one chunk to the left
0000EE46 6500                       	bcs.s	ObjMan_GoingBack_Part2	; branch, if camera position would be behind level's left boundary
0000EE48                             
0000EE48 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EE4E 6600                       	bne.s	ObjMan_GoingBack_Part2		; branch, if there are none
0000EE50                            OPLBack4:	; load all objects left of the screen that are now in range
0000EE50 BC68 FFFA                  	cmp.w	-6(a0),d6		; is the previous object's X pos less than d6?
0000EE54 6C00                       	bge.s	ObjMan_GoingBack_Part2	; if it is, branch
0000EE56 5D48                       	subq.w	#6,a0		; get object's address
0000EE58 534B                       	subq.w	#1,a3		; and respawn table index
0000EE5A 4E96                       	jsr	(a6)		; load object
0000EE5C 6600                       	bne.s	OPL6		; branch, if SST is full
0000EE5E 5D48                       	subq.w	#6,a0
0000EE60 60EE                       	bra.s	OPLBack4	; continue with previous object
0000EE62                            ; ---------------------------------------------------------------------------
0000EE62                             
0000EE62                            OPL6:	
0000EE62                            	; undo a few things, if the object couldn't load
0000EE62 5C48                       	addq.w	#6,a0	; go back to last object
0000EE64 524B                       	addq.w	#1,a3	; since we didn't load the object, undo last change
0000EE66                             
0000EE66                            ObjMan_GoingBack_Part2:
0000EE66 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object going left
0000EE6A 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EE6E 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object going right
0000EE72 3678 F778                  	movea.w	($FFFFF778).w,a3	; and its respawn table index
0000EE76 0646 0300                  	addi.w	#$300,d6	; look two chunks beyond the right edge of the screen
0000EE7A                             
0000EE7A                            OPLBack5:	; subtract number of objects that have been moved out of range (from the right side)
0000EE7A BC68 FFFA                  	cmp.w	-6(a0),d6	; is the previous object's X pos less than d6?
0000EE7E 6E00                       	bgt.s	OPL7		; if it is, branch
0000EE80 5D48                       	subq.w	#6,a0		; get object's address
0000EE82 534B                       	subq.w	#1,a3		; and respawn table index
0000EE84 60F4                       	bra.s	OPLBack5	; continue with previous object
0000EE86                            ; ---------------------------------------------------------------------------
0000EE86                             
0000EE86                            OPL7:	
0000EE86 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object going right
0000EE8A 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EE8E 6000                       	bra.s	ObjPosLoad_SameXRange
0000EE90                            ; ---------------------------------------------------------------------------
0000EE90                             
0000EE90                            ObjPosLoad_GoingForward:
0000EE90 31C6 FE2A                  	move.w	d6,(Camera_X_Pos_last).w
0000EE94                             
0000EE94 2078 F770                  	movea.l	($FFFFF770).w,a0	; get next object from the right
0000EE98 3678 F778                  	movea.w ($FFFFF778).w,a3	; and its respawn table index
0000EE9C 0646 0280                  	addi.w	#$280,d6	; look two chunks forward
0000EEA0 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; find an empty object slot
0000EEA6 6600                       	bne.s	ObjMan_GoingForward_Part2	; branch, if there are none
0000EEA8                             
0000EEA8                            OPLBack6:	; load all objects right of the screen that are now in range
0000EEA8 BC50                       	cmp.w	(a0),d6				; is object's x position >= d6?
0000EEAA 6300                       	bls.s	ObjMan_GoingForward_Part2	; if yes, branch
0000EEAC 4E96                       	jsr	(a6)		; load object (and get address of next object)
0000EEAE 524B                       	addq.w	#1,a3		; respawn index of next object to the right
0000EEB0 67F6                       	beq.s	OPLBack6	; continue loading objects, if the SST isn't full
0000EEB2                             
0000EEB2                            ObjMan_GoingForward_Part2:
0000EEB2 21C8 F770                  	move.l	a0,($FFFFF770).w	; remember next object from the right
0000EEB6 31CB F778                  	move.w	a3,($FFFFF778).w	; and its respawn table index
0000EEBA 2078 F774                  	movea.l	($FFFFF774).w,a0	; get current object from the left
0000EEBE 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EEC2 0446 0300                  	subi.w	#$300,d6		; look one chunk behind the left edge of the screen
0000EEC6 6500                       	bcs.s	ObjMan_GoingForward_End	; branch, if camera position would be behind level's left boundary
0000EEC8                             
0000EEC8                            OPLBack7:	; subtract number of objects that have been moved out of range (from the left)
0000EEC8 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
0000EECA 6300                       	bls.s	ObjMan_GoingForward_End	; if yes, branch
0000EECC 5C48                       	addq.w	#6,a0	; next object
0000EECE 524B                       	addq.w	#1,a3	; respawn index of next object to the left
0000EED0 60F6                       	bra.s	OPLBack7	; continue with next object
0000EED2                            ; ---------------------------------------------------------------------------
0000EED2                             
0000EED2                            ObjMan_GoingForward_End:
0000EED2 21C8 F774                  	move.l	a0,($FFFFF774).w	; remember current object from the left
0000EED6 31CB F77C                  	move.w	a3,($FFFFF77C).w	; and its respawn table index
0000EEDA                             
0000EEDA                            ObjPosLoad_SameXRange:
0000EEDA 3C38 F704                  	move.w	($FFFFF704).w,d6
0000EEDE 0246 FF80                  	andi.w	#$FF80,d6
0000EEE2 3606                       	move.w	d6,d3
0000EEE4 BC78 F76E                  	cmp.w	(Camera_Y_pos_last).w,d6	; is the y range the same as last time?
0000EEE8 6700 0000                  	beq.w	ObjPosLoad_SameYRange	; if yes, branch
0000EEEC 6C00                       	bge.s	ObjPosLoad_GoingDown	; if the player is moving down
0000EEEE                             
0000EEEE                            	; if the player is moving up
0000EEEE 4A78 F72C                  	tst.w	($FFFFF72C).w	; does the level y-wrap?
0000EEF2 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap	; if not, branch
0000EEF4 4A46                       	tst.w	d6
0000EEF6 6600                       	bne.s	ObjMan_GoingUp_YWrap
0000EEF8 0C78 0080 F76E             	cmpi.w	#$80,(Camera_Y_pos_last).w
0000EEFE 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF00                             
0000EF00                            ObjMan_GoingUp_YWrap:
0000EF00 0443 0080                  	subi.w	#$80,d3			; look one chunk up
0000EF04 6A00                       	bpl.s	ObjPosLoad_YCheck	; go to y check, if camera y position >= $80
0000EF06 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF0A 6000                       	bra.s	ObjPosLoad_YCheck
0000EF0C                             
0000EF0C                            ; ---------------------------------------------------------------------------
0000EF0C                             
0000EF0C                            ObjMan_GoingUp_NoYWrap:
0000EF0C 0443 0080                  	subi.w	#$80,d3				; look one chunk up
0000EF10 6B00 0000                  	bmi.w	ObjPosLoad_SameYRange	; don't do anything if camera y position is < $80
0000EF14 6000                       	bra.s	ObjPosLoad_YCheck
0000EF16                            ; ---------------------------------------------------------------------------
0000EF16                             
0000EF16                            ObjPosLoad_GoingDown:
0000EF16 4A78 F72C                  	tst.w	($FFFFF72C).w		; does the level y-wrap?
0000EF1A 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap	; if not, branch
0000EF1C 4A78 F76E                  	tst.w	(Camera_Y_pos_last).w
0000EF20 6600                       	bne.s	ObjMan_GoingDown_YWrap
0000EF22 0C46 0080                  	cmpi.w	#$80,d6
0000EF26 66D8                       	bne.s	ObjMan_GoingUp_YWrap
0000EF28                             
0000EF28                            ObjMan_GoingDown_YWrap:
0000EF28 0643 0180                  	addi.w	#$180,d3		; look one chunk down
0000EF2C 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF30 6500                       	bcs.s	ObjPosLoad_YCheck	; go to  check, if camera y position < $7FF
0000EF32 0243 07FF                  	andi.w	#$7FF,d3		; else, wrap value
0000EF36 6000                       	bra.s	ObjPosLoad_YCheck
0000EF38                            ; ---------------------------------------------------------------------------
0000EF38                             
0000EF38                            ObjMan_GoingDown_NoYWrap:
0000EF38 0643 0180                  	addi.w	#$180,d3			; look one chunk down
0000EF3C 0C43 07FF                  	cmpi.w	#$7FF,d3
0000EF40 6200                       	bhi.s	ObjPosLoad_SameYRange	; don't do anything, if camera is too close to bottom
0000EF42                             
0000EF42                            ObjPosLoad_YCheck:
0000EF42 4EB9 0000 0000             	jsr	(SingleObjLoad).l		; get an empty object slot
0000EF48 6600                       	bne.s	ObjPosLoad_SameYRange	; branch, if there are none
0000EF4A 3803                       	move.w	d3,d4
0000EF4C 0644 0080                  	addi.w	#$80,d4
0000EF50 3A3C 0FFF                  	move.w	#$FFF,d5	; this will be used later when we load objects
0000EF54 2078 F774                  	movea.l	($FFFFF774).w,a0	; get next object going left
0000EF58 3678 F77C                  	movea.w	($FFFFF77C).w,a3	; and its respawn table index
0000EF5C 2E38 F770                  	move.l	($FFFFF770).w,d7	; get next object going right
0000EF60 9E88                       	sub.l	a0,d7	; d7 = number of objects between the left and right boundaries * 6
0000EF62 6700                       	beq.s	ObjPosLoad_SameYRange	; branch if there are no objects inbetween
0000EF64 5448                       	addq.w	#2,a0	; align to object's y position
0000EF66                             
0000EF66                            OPLBack8:	; check, if current object needs to be loaded
0000EF66 4A13                       	tst.b	(a3)	; is object already loaded?
0000EF68 6B00                       	bmi.s	OPL8	; if yes, branch
0000EF6A 3210                       	move.w	(a0),d1
0000EF6C C245                       	and.w	d5,d1	; get object's y position
0000EF6E B243                       	cmp.w	d3,d1
0000EF70 6500                       	bcs.s	OPL8	; branch, if object is out of range from the top
0000EF72 B244                       	cmp.w	d4,d1
0000EF74 6200                       	bhi.s	OPL8	; branch, if object is out of range from the bottom
0000EF76 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EF7A                            	; load object
0000EF7A 3368 FFFE 0008             	move.w	-2(a0),8(a1)
0000EF80 3210                       	move.w	(a0),d1
0000EF82 3401                       	move.w	d1,d2
0000EF84 C245                       	and.w	d5,d1	; get object's y position
0000EF86 3341 000C                  	move.w	d1,$C(a1)
0000EF8A E75A                       	rol.w	#3,d2
0000EF8C 0242 0003                  	andi.w	#3,d2	; get object's render flags and status
0000EF90 1342 0001                  	move.b	d2,1(a1)
0000EF94 1342 0022                  	move.b	d2,$22(a1)
0000EF98 7000                           moveq	#0,d0
0000EF9A 1028 0002                  	move.b	2(a0),d0
0000EF9E 0200 007F                  	andi.b	#$7F,d0
0000EFA2 1280                       	move.b	d0,0(a1)
0000EFA4 1368 0003 0028             	move.b	3(a0),$28(a1)
0000EFAA 334B 0014                  	move.w	a3,respawn_index(a1)
0000EFAE 4EB9 0000 0000             	jsr	(SingleObjLoad).l	; find new object slot
0000EFB4 6600                       	bne.s	ObjPosLoad_SameYRange	; brach, if there are none left
0000EFB6                            OPL8:
0000EFB6 5C48                       	addq.w	#6,a0	; address of next object
0000EFB8 524B                       	addq.w	#1,a3	; and its respawn index
0000EFBA 5D47                       	subq.w	#6,d7	; subtract from size of remaining objects
0000EFBC 66A8                       	bne.s	OPLBack8	; branch, if there are more
0000EFBE                             
0000EFBE                            ObjPosLoad_SameYRange:
0000EFBE 31C6 F76E                  	move.w	d6,(Camera_Y_pos_last).w
0000EFC2 4E75                       	rts		
0000EFC4                            ; ===========================================================================
0000EFC4                            ; ---------------------------------------------------------------------------
0000EFC4                            ; Subroutines to check if an object needs to be loaded,
0000EFC4                            ; with and without y-wrapping enabled.
0000EFC4                            ;
0000EFC4                            ; input variables:
0000EFC4                            ;  d3 = upper boundary to load object
0000EFC4                            ;  d4 = lower boundary to load object
0000EFC4                            ;  d5 = #$FFF, used to filter out object's y position
0000EFC4                            ;
0000EFC4                            ;  a0 = address in object placement list
0000EFC4                            ;  a1 = object
0000EFC4                            ;  a3 = address in object respawn table
0000EFC4                            ;
0000EFC4                            ; writes:
0000EFC4                            ;  d1, d2, d7
0000EFC4                            ; ---------------------------------------------------------------------------
0000EFC4                            ChkLoadObj_YWrap:
0000EFC4 4A13                       	tst.b	(a3)	; is object already loaded?
0000EFC6 6A00                       	bpl.s	OPL9	; if not, branch
0000EFC8 5C48                       	addq.w	#6,a0	; address of next object
0000EFCA 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EFCC 4E75                       	rts	
0000EFCE                            ; ---------------------------------------------------------------------------
0000EFCE                             
0000EFCE                            OPL9:	
0000EFCE 3E18                       	move.w	(a0)+,d7	; x_pos
0000EFD0 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000EFD2 3401                       	move.w	d1,d2	; does this object skip y-Checks?
0000EFD4 6B00                       	bmi.s	OPL10	; if yes, branch
0000EFD6 C245                       	and.w	d5,d1	; y_pos
0000EFD8 B243                       	cmp.w	d3,d1
0000EFDA 6400                       	bcc.s	LoadObj_YWrap
0000EFDC B244                       	cmp.w	d4,d1
0000EFDE 6300                       	bls.s	LoadObj_YWrap
0000EFE0 5448                       	addq.w	#2,a0	; address of next object
0000EFE2 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000EFE4 4E75                       	rts	
0000EFE6                            ; ---------------------------------------------------------------------------
0000EFE6                             
0000EFE6                            OPL10:	
0000EFE6 C245                       	and.w	d5,d1	; y_pos
0000EFE8                             
0000EFE8                            LoadObj_YWrap:
0000EFE8 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000EFEC 3347 0008                  	move.w	d7,8(a1)
0000EFF0 3341 000C                  	move.w	d1,$C(a1)
0000EFF4 E75A                       	rol.w	#3,d2	; adjust bits
0000EFF6 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000EFFA 1342 0001                  	move.b	d2,1(a1)
0000EFFE 1342 0022                  	move.b	d2,$22(a1)
0000F002 7000                           moveq	#0,d0
0000F004 1018                       	move.b	(a0)+,d0
0000F006 0200 007F                  	andi.b	#$7F,d0
0000F00A 1280                       	move.b	d0,0(a1)
0000F00C 1358 0028                  	move.b	(a0)+,$28(a1)
0000F010 334B 0014                  	move.w	a3,respawn_index(a1)
0000F014 6000                       	bra.s	SingleObjLoad	; find new object slot
0000F016                             
0000F016                            ;loc_17F36
0000F016                            ChkLoadObj:
0000F016 4A13                       	tst.b	(a3)	; is object already loaded?
0000F018 6A00                       	bpl.s	OPL11	; if not, branch
0000F01A 5C48                       	addq.w	#6,a0	; address of next object
0000F01C 7200                       	moveq	#0,d1	; let the objects manager know that it can keep going
0000F01E 4E75                       	rts
0000F020                            ; ---------------------------------------------------------------------------
0000F020                             
0000F020                            OPL11:	
0000F020 3E18                       	move.w	(a0)+,d7	; x_pos
0000F022 3218                       	move.w	(a0)+,d1	; there are three things stored in this word
0000F024 3401                       	move.w	d1,d2	; does this object skip y-Checks?	;*6
0000F026 6B00                       	bmi.s	OPL13	; if yes, branch
0000F028 C245                       	and.w	d5,d1	; y_pos
0000F02A B243                       	cmp.w	d3,d1
0000F02C 6500                       	bcs.s	OPL12	; branch, if object is out of range from the top
0000F02E B244                       	cmp.w	d4,d1
0000F030 6300                       	bls.s	LoadObj	; branch, if object is in range from the bottom
0000F032                            OPL12:
0000F032 5448                       	addq.w	#2,a0	; address of next object
0000F034 7200                       	moveq	#0,d1
0000F036 4E75                       	rts		
0000F038                            ; ---------------------------------------------------------------------------
0000F038                             
0000F038                            OPL13:	
0000F038 C245                       	and.w	d5,d1	; y_pos
0000F03A                             
0000F03A                            LoadObj:
0000F03A 08D3 0007                  	bset	#7,(a3)	; mark object as loaded
0000F03E 3347 0008                  	move.w	d7,8(a1)
0000F042 3341 000C                  	move.w	d1,$C(a1)
0000F046 E75A                       	rol.w	#3,d2	; adjust bits
0000F048 0242 0003                  	andi.w	#3,d2	; get render flags and status
0000F04C 1342 0001                  	move.b	d2,1(a1)
0000F050 1342 0022                  	move.b	d2,$22(a1)
0000F054 7000                           moveq	#0,d0
0000F056 1018                           move.b	(a0)+,d0
0000F058 0200 007F                  	andi.b	#$7F,d0
0000F05C 1280                       	move.b	d0,0(a1)
0000F05E 1358 0028                  	move.b	(a0)+,$28(a1)
0000F062 334B 0014                  	move.w	a3,respawn_index(a1)
0000F066                            	; continue straight to SingleObjLoad
0000F066                            ; End of function ChkLoadObj
0000F066                            ; ===========================================================================
0000F066                            
0000F066                            ; ---------------------------------------------------------------------------
0000F066                            ; Single object	loading	subroutine
0000F066                            ; ---------------------------------------------------------------------------
0000F066                            
0000F066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F066                            
0000F066                            
0000F066                            SingleObjLoad:
0000F066 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000F06A 303C 005F                  		move.w	#$5F,d0
0000F06E                            
0000F06E                            loc_DA94:
0000F06E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F070 6700                       		beq.s	locret_DAA0	; if yes, branch
0000F072 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F076 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000F07A                            
0000F07A                            locret_DAA0:
0000F07A 4E75                       		rts	
0000F07C                            ; End of function SingleObjLoad
0000F07C                            
0000F07C                            
0000F07C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F07C                            
0000F07C                            
0000F07C                            SingleObjLoad2:
0000F07C 2248                       		movea.l	a0,a1
0000F07E 303C F000                  		move.w	#-$1000,d0
0000F082 9048                       		sub.w	a0,d0
0000F084 EC48                       		lsr.w	#6,d0
0000F086 5340                       		subq.w	#1,d0
0000F088 6500                       		bcs.s	locret_DABC
0000F08A                            
0000F08A                            loc_DAB0:
0000F08A 4A11                       		tst.b	(a1)
0000F08C 6700                       		beq.s	locret_DABC
0000F08E 43E9 0040                  		lea	$40(a1),a1
0000F092 51C8 FFF6                  		dbf	d0,loc_DAB0
0000F096                            
0000F096                            locret_DABC:
0000F096 4E75                       		rts	
0000F098                            ; End of function SingleObjLoad2
0000F098                            
0000F098                            ; ===========================================================================
0000F098                            RingsManager:
0000F098 7000                       	moveq	#0,d0
0000F09A 1038 870C                  	move.b	(Rings_manager_routine).w,d0
0000F09E 303B 0000                  	move.w	RingsManager_States(pc,d0.w),d0
0000F0A2 4EFB 0000                  	jmp	RingsManager_States(pc,d0.w)
0000F0A6                            ; ===========================================================================
0000F0A6                            ; off_16F96:
0000F0A6                            RingsManager_States:
0000F0A6 0000                       	dc.w RingsManager_Init-RingsManager_States
0000F0A8 0000                       	dc.w RingsManager_Main-RingsManager_States
0000F0AA                            ; ===========================================================================
0000F0AA                            ; loc_16F9A:
0000F0AA                            RingsManager_Init:
0000F0AA 5438 870C                  	addq.b	#2,(Rings_manager_routine).w ; => RingsManager_Main
0000F0AE 6100 0000                  	bsr.w	RingsManager_Setup
0000F0B2 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F0B6 45F8 8300                  	lea	(Ring_Positions).w,a2
0000F0BA 3838 F700                  	move.w	($FFFFF700).w,d4
0000F0BE 5144                       	subq.w	#8,d4
0000F0C0 6200                       	bhi.s	loc_16FB6
0000F0C2 7801                       	moveq	#1,d4
0000F0C4 6000                       	bra.s	loc_16FB6
0000F0C6                            ; ===========================================================================
0000F0C6                            
0000F0C6                            loc_16FB2:
0000F0C6 5849                       	addq.w	#4,a1
0000F0C8 544A                       	addq.w	#2,a2
0000F0CA                            
0000F0CA                            loc_16FB6:
0000F0CA B851                       	cmp.w	(a1),d4
0000F0CC 62F8                       	bhi.s	loc_16FB2
0000F0CE 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F0D2 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F0D6 0644 0150                  	addi.w	#$150,d4
0000F0DA 6000                       	bra.s	loc_16FCE
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            loc_16FCA:
0000F0DC 5849                       	addq.w	#4,a1
0000F0DE                            
0000F0DE                            loc_16FCE:
0000F0DE B851                       	cmp.w	(a1),d4
0000F0E0 62FA                       	bhi.s	loc_16FCA
0000F0E2 21C9 8704                  	move.l	a1,(Ring_end_addr_ROM).w
0000F0E6 4E75                       	rts
0000F0E8                            ; ===========================================================================
0000F0E8                            ; loc_16FDE:
0000F0E8                            RingsManager_Main:
0000F0E8 45F8 870E                  	lea	(Ring_consumption_table).w,a2
0000F0EC 321A                       	move.w	(a2)+,d1
0000F0EE 5341                       	subq.w	#1,d1
0000F0F0 6500                       	bcs.s	loc_17014
0000F0F2                            
0000F0F2                            loc_16FE8:
0000F0F2 301A                       	move.w	(a2)+,d0
0000F0F4 67FC                       	beq.s	loc_16FE8
0000F0F6 3240                       	movea.w	d0,a1
0000F0F8 5311                       	subq.b	#1,(a1)
0000F0FA 6600                       	bne.s	loc_17010
0000F0FC 12BC 0006                  	move.b	#6,(a1)
0000F100 5229 0001                  	addq.b	#1,1(a1)
0000F104 0C29 0008 0001             	cmpi.b	#8,1(a1)
0000F10A 6600                       	bne.s	loc_17010
0000F10C 32BC FFFF                  	move.w	#-1,(a1)
0000F110 357C 0000 FFFE             	move.w	#0,-2(a2)
0000F116 5378 870E                  	subq.w	#1,(Ring_consumption_table).w
0000F11A                            
0000F11A                            loc_17010:
0000F11A 51C9 FFD6                  	dbf	d1,loc_16FE8
0000F11E                            
0000F11E                            loc_17014:
0000F11E 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F122 3478 8708                  	movea.w	(Ring_start_addr_RAM).w,a2
0000F126 3838 F700                  	move.w	($FFFFF700).w,d4
0000F12A 5144                       	subq.w	#8,d4
0000F12C 6200                       	bhi.s	loc_17028
0000F12E 7801                       	moveq	#1,d4
0000F130 6000                       	bra.s	loc_17028
0000F132                            ; ===========================================================================
0000F132                            
0000F132                            loc_17024:
0000F132 5849                       	addq.w	#4,a1
0000F134 544A                       	addq.w	#2,a2
0000F136                            
0000F136                            loc_17028:
0000F136 B851                       	cmp.w	(a1),d4
0000F138 62F8                       	bhi.s	loc_17024
0000F13A 6000                       	bra.s	loc_17032
0000F13C                            ; ===========================================================================
0000F13C                            
0000F13C                            loc_17030:
0000F13C 5949                       	subq.w	#4,a1
0000F13E 554A                       	subq.w	#2,a2
0000F140                            
0000F140                            loc_17032:
0000F140 B869 FFFC                  	cmp.w	-4(a1),d4
0000F144 63F6                       	bls.s	loc_17030
0000F146 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F14A 31CA 8708                  	move.w	a2,(Ring_start_addr_RAM).w
0000F14E 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F152 0644 0150                  	addi.w	#$150,d4
0000F156 6000                       	bra.s	loc_1704A
0000F158                            ; ===========================================================================
0000F158                            
0000F158                            loc_17046:
0000F158 584A                       	addq.w	#4,a2
0000F15A                            
0000F15A                            loc_1704A:
0000F15A B852                       	cmp.w	(a2),d4
0000F15C 62FA                       	bhi.s	loc_17046
0000F15E 6000                       	bra.s	loc_17054
0000F160                            ; ===========================================================================
0000F160                            
0000F160                            loc_17052:
0000F160 594A                       	subq.w	#4,a2
0000F162                            
0000F162                            loc_17054:
0000F162 B86A FFFC                  	cmp.w	-4(a2),d4
0000F166 63F8                       	bls.s	loc_17052
0000F168 21CA 8704                  	move.l	a2,(Ring_end_addr_ROM).w
0000F16C 4E75                       	rts
0000F16E                            
0000F16E                            ; ===========================================================================
0000F16E                            
0000F16E                            Touch_Rings:
0000F16E 2278 8700                  	movea.l	(Ring_start_addr_ROM).w,a1
0000F172 2478 8704                  	movea.l	(Ring_end_addr_ROM).w,a2
0000F176                            
0000F176                            loc_170D0:
0000F176 B5C9                       	cmpa.l	a1,a2
0000F178 6700 0000                  	beq.w	return_17166
0000F17C 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F180 0C68 005A 0030             	cmpi.w	#$5A,$30(a0)
0000F186 6400 0000                  	bcc.w	return_17166
0000F18A                            	
0000F18A                            Touch_Rings_NoAttraction:
0000F18A 3428 0008                  	move.w	8(a0),d2
0000F18E 3628 000C                  	move.w	$C(a0),d3
0000F192 5142                       	subi.w	#8,d2
0000F194 7A00                       	moveq	#0,d5
0000F196 1A28 0016                  	move.b	$16(a0),d5
0000F19A 5705                       	subq.b	#3,d5
0000F19C 9645                       	sub.w	d5,d3
0000F19E 0C28 004D 0004             	cmpi.b	#$4D,4(a0)
0000F1A4 6600                       	bne.s	RM1
0000F1A6 0643 000C                  	addi.w	#$C,d3
0000F1AA 7A0A                       	moveq	#$A,d5
0000F1AC                            RM1:
0000F1AC 323C 0006                  	move.w	#6,d1
0000F1B0 3C3C 000C                  	move.w	#$C,d6
0000F1B4 383C 0010                  	move.w	#$10,d4
0000F1B8 DA45                       	add.w	d5,d5
0000F1BA                            
0000F1BA                            loc_17112:
0000F1BA 4A54                       	tst.w	(a4)
0000F1BC 6600 0000                  	bne.w	loc_1715C
0000F1C0 3011                       	move.w	(a1),d0
0000F1C2 9041                       	sub.w	d1,d0
0000F1C4 9042                       	sub.w	d2,d0
0000F1C6 6400                       	bcc.s	loc_1712A
0000F1C8 D046                       	add.w	d6,d0
0000F1CA 6500                       	bcs.s	loc_17130
0000F1CC 6000 0000                  	bra.w	loc_1715C
0000F1D0                            ; ===========================================================================
0000F1D0                            
0000F1D0                            loc_1712A:
0000F1D0 B044                       	cmp.w	d4,d0
0000F1D2 6200 0000                  	bhi.w	loc_1715C
0000F1D6                            
0000F1D6                            loc_17130:
0000F1D6 3029 0002                  	move.w	2(a1),d0
0000F1DA 9041                       	sub.w	d1,d0
0000F1DC 9043                       	sub.w	d3,d0
0000F1DE 6400                       	bcc.s	loc_17142
0000F1E0 D046                       	add.w	d6,d0
0000F1E2 6500                       	bcs.s	loc_17148
0000F1E4 6000 0000                  	bra.w	loc_1715C
0000F1E8                            ; ===========================================================================
0000F1E8                            
0000F1E8                            loc_17142:
0000F1E8 B045                       	cmp.w	d5,d0
0000F1EA 6200 0000                  	bhi.w	loc_1715C
0000F1EE                            
0000F1EE                            loc_17148:
0000F1EE 38BC 0604                  	move.w	#$604,(a4)
0000F1F2 6100                       	bsr.s	loc_17168
0000F1F4 47F8 8710                  	lea	(Ring_consumption_table+2).w,a3
0000F1F8                            
0000F1F8                            loc_17152:
0000F1F8 4A5B                       	tst.w	(a3)+
0000F1FA 66FC                       	bne.s	loc_17152
0000F1FC 370C                       	move.w	a4,-(a3)
0000F1FE 5278 870E                  	addq.w	#1,(Ring_consumption_table).w
0000F202                            
0000F202                            loc_1715C:
0000F202 5849                       	addq.w	#4,a1
0000F204 544C                       	addq.w	#2,a4
0000F206 B5C9                       	cmpa.l	a1,a2
0000F208 6600 FFB0                  	bne.w	loc_17112
0000F20C                            
0000F20C                            return_17166:
0000F20C 4E75                       	rts
0000F20E                            ; ===========================================================================
0000F20E                            
0000F20E                            loc_17168:
0000F20E 5378 870A                  	subq.w	#1,(Perfect_rings_left).w
0000F212 6000 BCAE                  	bra.w	CollectRing
0000F216                            ; ===========================================================================
0000F216                            
0000F216                            BuildRings:
0000F216 2078 8700                  	movea.l	(Ring_start_addr_ROM).w,a0
0000F21A 2E38 8704                  	move.l	(Ring_end_addr_ROM).w,d7
0000F21E 9E88                       	sub.l	a0,d7
0000F220 6600                       	bne.s	loc_17186
0000F222 4E75                       	rts
0000F224                            ; ===========================================================================
0000F224                            
0000F224                            loc_17186:
0000F224 3878 8708                  	movea.w	(Ring_start_addr_RAM).w,a4
0000F228 47F8 F700                  	lea	($FFFFF700).w,a3
0000F22C                            
0000F22C                            loc_1718A:
0000F22C 4A5C                       	tst.w	(a4)+
0000F22E 6B00 0000                  	bmi.w	loc_171EC
0000F232 3610                       	move.w	(a0),d3
0000F234 9653                       	sub.w	(a3),d3
0000F236 0643 0080                  	addi.w	#$80,d3
0000F23A 3428 0002                  	move.w	2(a0),d2
0000F23E 946B 0004                  	sub.w	4(a3),d2
0000F242 0242 07FF                  	andi.w	#$7FF,d2
0000F246 5042                       	addi.w	#8,d2
0000F248 6B00                       	bmi.s	loc_171EC
0000F24A 0C42 00F0                  	cmpi.w	#$F0,d2
0000F24E 6C00                       	bge.s	loc_171EC
0000F250 0642 0078                  	addi.w	#$78,d2
0000F254 43F9 0000 B21A             	lea	(Map_Obj25).l,a1
0000F25A 7200                       	moveq	#0,d1
0000F25C 122C FFFF                  	move.b	-1(a4),d1
0000F260 6600                       	bne.s	loc_171C8
0000F262 1238 FEC3                  	move.b	($FFFFFEC3).w,d1
0000F266                            
0000F266                            loc_171C8:
0000F266 D241                       	add.w	d1,d1
0000F268 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F26C 7200                       	moveq	#$00,d1
0000F26E 1219                       	move.b	(a1)+,d1
0000F270 5301                       	subq.b	#1,d1
0000F272 6B00                       	bmi.s	loc_171EC
0000F274 1019                       	move.b	(a1)+,d0
0000F276 4880                       	ext.w	d0
0000F278 D042                       	add.w	d2,d0
0000F27A 34C0                       	move.w	d0,(a2)+
0000F27C 14D9                       	move.b	(a1)+,(a2)+
0000F27E 5205                       	addq.b	#1,d5
0000F280 14C5                       	move.b	d5,(a2)+
0000F282 1019                       	move.b	(a1)+,d0
0000F284 E148                       	lsl.w	#8,d0
0000F286 1019                       	move.b	(a1)+,d0
0000F288 0640 26BA                  	addi.w	#($2000+ringart),d0
0000F28C 34C0                       	move.w	d0,(a2)+
0000F28E 1019                       	move.b	(a1)+,d0
0000F290 4880                       	ext.w	d0
0000F292 D043                       	add.w	d3,d0
0000F294 34C0                       	move.w	d0,(a2)+
0000F296                            
0000F296                            loc_171EC:
0000F296 5848                       	addq.w	#4,a0
0000F298 5947                       	subq.w	#4,d7
0000F29A 6600 FF90                  	bne.w	loc_1718A
0000F29E 4E75                       	rts
0000F2A0                            ; ===========================================================================
0000F2A0                            
0000F2A0                            RingsManager_Setup:
0000F2A0 43F8 8300                  	lea	(Ring_Positions).w,a1
0000F2A4 7000                       	moveq	#0,d0
0000F2A6 323C 00FF                  	move.w	#Rings_Space/4-1,d1
0000F2AA                            
0000F2AA                            loc_172AE:				; CODE XREF: h+33Cj
0000F2AA 22C0                       	move.l	d0,(a1)+
0000F2AC 51C9 FFFC                  	dbf	d1,loc_172AE
0000F2B0                            
0000F2B0                            	; d0 = 0
0000F2B0 43F8 870E                  	lea	(Ring_consumption_table).w,a1
0000F2B4 323C 001F                  	move.w	#$1F,d1
0000F2B8                            RMBack1:
0000F2B8 22C0                       	move.l	d0,(a1)+
0000F2BA 51C9 FFFC                  	dbf	d1,RMBack1
0000F2BE                            
0000F2BE 7A00                       	moveq	#0,d5
0000F2C0 7000                       	moveq	#0,d0
0000F2C2 3038 FE10                  	move.w	($FFFFFE10).w,d0
0000F2C6 ED08                       	lsl.b	#6,d0
0000F2C8 E848                       	lsr.w	#4,d0
0000F2CA 43F9 0000 0000             	lea	(RingPos_Index).l,a1
0000F2D0 3031 0000                  	move.w	(a1,d0.w),d0
0000F2D4 43F1 0000                  	lea	(a1,d0.w),a1
0000F2D8 21C9 8700                  	move.l	a1,(Ring_start_addr_ROM).w
0000F2DC 5849                       	addq.w	#4,a1
0000F2DE 7A00                       	moveq	#0,d5
0000F2E0 303C 01FE                  	move.w	#(Max_Rings-1),d0	
0000F2E4                            	
0000F2E4                            RMBack2:
0000F2E4 4A99                       	tst.l	(a1)+
0000F2E6 6B00                       	bmi.s	RM2
0000F2E8 5245                       	addq.w	#1,d5
0000F2EA 51C8 FFF8                  	dbf	d0,RMBack2
0000F2EE                            RM2:
0000F2EE 31C5 870A                  	move.w	d5,(Perfect_rings_left).w
0000F2F2 4E75                       	rts
0000F2F4                            ; ===========================================================================
0000F2F4                            
0000F2F4                            ; ===========================================================================
0000F2F4                            ; ---------------------------------------------------------------------------
0000F2F4                            ; Object 41 - springs
0000F2F4                            ; ---------------------------------------------------------------------------
0000F2F4                            
0000F2F4                            Obj41:					; XREF: Obj_Index
0000F2F4 7000                       		moveq	#0,d0
0000F2F6 1028 0024                  		move.b	$24(a0),d0
0000F2FA 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000F2FE 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000F302 6100 F60C                  		bsr.w	DisplaySprite
0000F306 3028 0008                  		move.w	8(a0),d0
0000F30A 0240 FF80                  		andi.w	#$FF80,d0
0000F30E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F312 0441 0080                  		subi.w	#$80,d1
0000F316 0241 FF80                  		andi.w	#$FF80,d1
0000F31A 9041                       		sub.w	d1,d0
0000F31C 0C40 0280                  		cmpi.w	#$280,d0
0000F320 6300                       		bls.s	Obj41_NoDel
0000F322 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F326 6700 F638                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000F32A 3440                       		movea.w	d0,a2	; load address into a2
0000F32C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F330 6000 F62E                  		bra.w	DeleteObject	; and delete object
0000F334                            
0000F334                            Obj41_NoDel:
0000F334 4E75                       		rts	
0000F336                            ; ===========================================================================
0000F336 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000F338 0000                       		dc.w Obj41_Up-Obj41_Index
0000F33A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000F33C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000F33E 0000                       		dc.w Obj41_LR-Obj41_Index
0000F340 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000F342 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000F344 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000F346 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000F348 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000F34A                            
0000F34A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000F34C F600                       		dc.w -$A00		; power	of yellow spring
0000F34E                            ; ===========================================================================
0000F34E                            
0000F34E                            Obj41_Main:				; XREF: Obj41_Index
0000F34E 5428 0024                  		addq.b	#2,$24(a0)
0000F352 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000F35A 317C 0523 0002             		move.w	#$523,2(a0)
0000F360 0028 0004 0001             		ori.b	#4,1(a0)
0000F366 117C 0010 0019             		move.b	#$10,$19(a0)
0000F36C 117C 0004 0018             		move.b	#4,$18(a0)
0000F372 1028 0028                  		move.b	$28(a0),d0
0000F376 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000F37A 6700                       		beq.s	loc_DB54	; if not, branch
0000F37C 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000F382 117C 0001 001C             		move.b	#1,$1C(a0)
0000F388 117C 0003 001A             		move.b	#3,$1A(a0)
0000F38E 317C 0533 0002             		move.w	#$533,2(a0)
0000F394 117C 0008 0019             		move.b	#8,$19(a0)
0000F39A                            
0000F39A                            loc_DB54:
0000F39A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000F39E 6700                       		beq.s	loc_DB66	; if not, branch
0000F3A0 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000F3A6 08E8 0001 0022             		bset	#1,$22(a0)
0000F3AC                            
0000F3AC                            loc_DB66:
0000F3AC 0800 0001                  		btst	#1,d0
0000F3B0 6700                       		beq.s	loc_DB72
0000F3B2 08E8 0005 0002             		bset	#5,2(a0)
0000F3B8                            
0000F3B8                            loc_DB72:
0000F3B8 0240 000F                  		andi.w	#$F,d0
0000F3BC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000F3C2 4E75                       		rts	
0000F3C4                            ; ===========================================================================
0000F3C4                            
0000F3C4                            Obj41_Up:				; XREF: Obj41_Index
0000F3C4 323C 001B                  		move.w	#$1B,d1
0000F3C8 343C 0008                  		move.w	#8,d2
0000F3CC 363C 0010                  		move.w	#$10,d3
0000F3D0 3828 0008                  		move.w	8(a0),d4
0000F3D4 6100 0000                  		bsr.w	SolidObject
0000F3D8 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000F3DC 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000F3DE 4E75                       		rts	
0000F3E0                            ; ===========================================================================
0000F3E0                            
0000F3E0                            Obj41_BounceUp:				; XREF: Obj41_Up
0000F3E0 5428 0024                  		addq.b	#2,$24(a0)
0000F3E4 5069 000C                  		addq.w	#8,$C(a1)
0000F3E8 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000F3EE 08E9 0001 0022             		bset	#1,$22(a1)
0000F3F4 08A9 0003 0022             		bclr	#3,$22(a1)
0000F3FA 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000F400 137C 0002 0024             		move.b	#2,$24(a1)
0000F406 08A8 0003 0022             		bclr	#3,$22(a0)
0000F40C 4228 0025                  		clr.b	$25(a0)
0000F410 303C 00CC                  		move.w	#$CC,d0
0000F414 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F41A                            
0000F41A                            Obj41_AniUp:				; XREF: Obj41_Index
0000F41A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F420 6000 C54E                  		bra.w	AnimateSprite
0000F424                            ; ===========================================================================
0000F424                            
0000F424                            Obj41_ResetUp:				; XREF: Obj41_Index
0000F424 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F42A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000F42E 4E75                       		rts	
0000F430                            ; ===========================================================================
0000F430                            
0000F430                            Obj41_LR:				; XREF: Obj41_Index
0000F430 323C 0013                  		move.w	#$13,d1
0000F434 343C 000E                  		move.w	#$E,d2
0000F438 363C 000F                  		move.w	#$F,d3
0000F43C 3828 0008                  		move.w	8(a0),d4
0000F440 6100 0000                  		bsr.w	SolidObject
0000F444 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F44A 6600                       		bne.s	loc_DC0C
0000F44C 117C 0008 0024             		move.b	#8,$24(a0)
0000F452                            
0000F452                            loc_DC0C:
0000F452 0828 0005 0022             		btst	#5,$22(a0)
0000F458 6600                       		bne.s	Obj41_BounceLR
0000F45A 4E75                       		rts	
0000F45C                            ; ===========================================================================
0000F45C                            
0000F45C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000F45C 5428 0024                  		addq.b	#2,$24(a0)
0000F460 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000F466 5069 0008                  		addq.w	#8,8(a1)
0000F46A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000F470 6600                       		bne.s	loc_DC36	; if yes, branch
0000F472 0469 0010 0008             		subi.w	#$10,8(a1)
0000F478 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000F47C                            
0000F47C                            loc_DC36:
0000F47C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000F482 3369 0010 0020             		move.w	$10(a1),$20(a1)
0000F488 0869 0000 0022             		bchg	#0,$22(a1)
0000F48E 0829 0002 0022             		btst	#2,$22(a1)
0000F494 6600                       		bne.s	loc_DC56
0000F496 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000F49C                            
0000F49C                            loc_DC56:
0000F49C 08A8 0005 0022             		bclr	#5,$22(a0)
0000F4A2 08A9 0005 0022             		bclr	#5,$22(a1)
0000F4A8 303C 00CC                  		move.w	#$CC,d0
0000F4AC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F4B2                            
0000F4B2                            Obj41_AniLR:				; XREF: Obj41_Index
0000F4B2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F4B8 6000 C4B6                  		bra.w	AnimateSprite
0000F4BC                            ; ===========================================================================
0000F4BC                            
0000F4BC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000F4BC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000F4C2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000F4C6 4E75                       		rts	
0000F4C8                            ; ===========================================================================
0000F4C8                            
0000F4C8                            Obj41_Dwn:				; XREF: Obj41_Index
0000F4C8 323C 001B                  		move.w	#$1B,d1
0000F4CC 343C 0008                  		move.w	#8,d2
0000F4D0 363C 0010                  		move.w	#$10,d3
0000F4D4 3828 0008                  		move.w	8(a0),d4
0000F4D8 6100 0000                  		bsr.w	SolidObject
0000F4DC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000F4E2 6600                       		bne.s	loc_DCA4
0000F4E4 117C 000E 0024             		move.b	#$E,$24(a0)
0000F4EA                            
0000F4EA                            loc_DCA4:
0000F4EA 4A28 0025                  		tst.b	$25(a0)
0000F4EE 6600                       		bne.s	locret_DCAE
0000F4F0 4A44                       		tst.w	d4
0000F4F2 6B00                       		bmi.s	Obj41_BounceDwn
0000F4F4                            
0000F4F4                            locret_DCAE:
0000F4F4 4E75                       		rts	
0000F4F6                            ; ===========================================================================
0000F4F6                            
0000F4F6                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000F4F6 5428 0024                  		addq.b	#2,$24(a0)
0000F4FA 5169 000C                  		subq.w	#8,$C(a1)
0000F4FE 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000F504 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000F508 08E9 0001 0022             		bset	#1,$22(a1)
0000F50E 08A9 0003 0022             		bclr	#3,$22(a1)
0000F514 137C 0002 0024             		move.b	#2,$24(a1)
0000F51A 08A8 0003 0022             		bclr	#3,$22(a0)
0000F520 4228 0025                  		clr.b	$25(a0)
0000F524 303C 00CC                  		move.w	#$CC,d0
0000F528 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
0000F52E                            
0000F52E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000F52E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000F534 6000 C43A                  		bra.w	AnimateSprite
0000F538                            ; ===========================================================================
0000F538                            
0000F538                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000F538 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000F53E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000F542 4E75                       		rts	
0000F544                            ; ===========================================================================
0000F544                            Ani_obj41:
0000F544                            	include "_anim\obj41.asm"
0000F544                            ; ---------------------------------------------------------------------------
0000F544                            ; Animation script - springs
0000F544                            ; ---------------------------------------------------------------------------
0000F544 0000                       		dc.w byte_DD02-Ani_obj41
0000F546 0000                       		dc.w byte_DD0E-Ani_obj41
0000F548 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000F554 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000F560                            		even
0000F560                            		even
0000F560                            
0000F560                            ; ---------------------------------------------------------------------------
0000F560                            ; Sprite mappings - springs
0000F560                            ; ---------------------------------------------------------------------------
0000F560                            Map_obj41:
0000F560                            	include "_maps\obj41.asm"
0000F560                            ; ---------------------------------------------------------------------------
0000F560                            ; Sprite mappings - springs
0000F560                            ; ---------------------------------------------------------------------------
0000F560 0000                       		dc.w byte_DD26-Map_obj41
0000F562 0000                       		dc.w byte_DD31-Map_obj41
0000F564 0000                       		dc.w byte_DD37-Map_obj41
0000F566 0000                       		dc.w byte_DD47-Map_obj41
0000F568 0000                       		dc.w byte_DD4D-Map_obj41
0000F56A 0000                       		dc.w byte_DD53-Map_obj41
0000F56C 02                         byte_DD26:	dc.b 2
0000F56D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000F572 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000F577 01                         byte_DD31:	dc.b 1
0000F578 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000F57D 03                         byte_DD37:	dc.b 3
0000F57E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000F583 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F588 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000F58D 01                         byte_DD47:	dc.b 1
0000F58E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000F593 01                         byte_DD4D:	dc.b 1
0000F594 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000F599 04                         byte_DD53:	dc.b 4
0000F59A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000F59F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000F5A4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000F5A9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000F5AE                            		even
0000F5AE                            		even
0000F5AE                            
0000F5AE                            ; ===========================================================================
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            ; Object 42 - Newtron enemy (GHZ)
0000F5AE                            ; ---------------------------------------------------------------------------
0000F5AE                            
0000F5AE                            Obj42:					; XREF: Obj_Index
0000F5AE 7000                       		moveq	#0,d0
0000F5B0 1028 0024                  		move.b	$24(a0),d0
0000F5B4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000F5B8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000F5BC                            ; ===========================================================================
0000F5BC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000F5BE 0000                       		dc.w Obj42_Action-Obj42_Index
0000F5C0 0000                       		dc.w Obj42_Delete-Obj42_Index
0000F5C2                            ; ===========================================================================
0000F5C2                            
0000F5C2                            Obj42_Main:				; XREF: Obj42_Index
0000F5C2 5428 0024                  		addq.b	#2,$24(a0)
0000F5C6 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000F5CE 317C 049B 0002             		move.w	#$49B,2(a0)
0000F5D4 117C 0004 0001             		move.b	#4,1(a0)
0000F5DA 117C 0004 0018             		move.b	#4,$18(a0)
0000F5E0 117C 0014 0019             		move.b	#$14,$19(a0)
0000F5E6 117C 0010 0016             		move.b	#$10,$16(a0)
0000F5EC 117C 0008 0017             		move.b	#8,$17(a0)
0000F5F2                            
0000F5F2                            Obj42_Action:				; XREF: Obj42_Index
0000F5F2 7000                       		moveq	#0,d0
0000F5F4 1028 0025                  		move.b	$25(a0),d0
0000F5F8 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F5FC 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F600 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F606 6100 C368                  		bsr.w	AnimateSprite
0000F60A 6000 0000                  		bra.w	MarkObjGone
0000F60E                            ; ===========================================================================
0000F60E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F610 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F612 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F614 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F616 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F618                            ; ===========================================================================
0000F618                            
0000F618                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F618 08E8 0000 0022             		bset	#0,$22(a0)
0000F61E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F622 9068 0008                  		sub.w	8(a0),d0
0000F626 6400                       		bcc.s	loc_DDEA
0000F628 4440                       		neg.w	d0
0000F62A 08A8 0000 0022             		bclr	#0,$22(a0)
0000F630                            
0000F630                            loc_DDEA:
0000F630 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F634 6400                       		bcc.s	locret_DE12	; if not, branch
0000F636 5428 0025                  		addq.b	#2,$25(a0)
0000F63A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F640 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F644 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F646 317C 249B 0002             		move.w	#$249B,2(a0)
0000F64C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F652 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F658                            
0000F658                            locret_DE12:
0000F658 4E75                       		rts	
0000F65A                            ; ===========================================================================
0000F65A                            
0000F65A                            Obj42_Type00:				; XREF: Obj42_Index2
0000F65A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F660 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F662 08E8 0000 0022             		bset	#0,$22(a0)
0000F668 3038 D008                  		move.w	($FFFFD008).w,d0
0000F66C 9068 0008                  		sub.w	8(a0),d0
0000F670 6400                       		bcc.s	locret_DE32
0000F672 08A8 0000 0022             		bclr	#0,$22(a0)
0000F678                            
0000F678                            locret_DE32:
0000F678 4E75                       		rts	
0000F67A                            ; ===========================================================================
0000F67A                            
0000F67A                            Obj42_Fall:				; XREF: Obj42_Type00
0000F67A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F680 6600                       		bne.s	loc_DE42
0000F682 117C 000C 0020             		move.b	#$C,$20(a0)
0000F688                            
0000F688                            loc_DE42:
0000F688 6100 F24C                  		bsr.w	ObjectFall
0000F68C 6100 0000                  		bsr.w	ObjHitFloor
0000F690 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F692 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F694 D368 000C                  		add.w	d1,$C(a0)
0000F698 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F69E 5428 0025                  		addq.b	#2,$25(a0)
0000F6A2 117C 0002 001C             		move.b	#2,$1C(a0)
0000F6A8 0828 0005 0002             		btst	#5,2(a0)
0000F6AE 6700                       		beq.s	Obj42_Move
0000F6B0 5228 001C                  		addq.b	#1,$1C(a0)
0000F6B4                            
0000F6B4                            Obj42_Move:
0000F6B4 117C 000D 0020             		move.b	#$D,$20(a0)
0000F6BA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F6C0 0828 0000 0022             		btst	#0,$22(a0)
0000F6C6 6600                       		bne.s	locret_DE86
0000F6C8 4468 0010                  		neg.w	$10(a0)
0000F6CC                            
0000F6CC                            locret_DE86:
0000F6CC 4E75                       		rts	
0000F6CE                            ; ===========================================================================
0000F6CE                            
0000F6CE                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F6CE 6100 F226                  		bsr.w	SpeedToPos
0000F6D2 6100 0000                  		bsr.w	ObjHitFloor
0000F6D6 0C41 FFF8                  		cmpi.w	#-8,d1
0000F6DA 6D00                       		blt.s	loc_DEA2
0000F6DC 0C41 000C                  		cmpi.w	#$C,d1
0000F6E0 6C00                       		bge.s	loc_DEA2
0000F6E2 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F6E6 4E75                       		rts	
0000F6E8                            ; ===========================================================================
0000F6E8                            
0000F6E8                            loc_DEA2:
0000F6E8 5428 0025                  		addq.b	#2,$25(a0)
0000F6EC 4E75                       		rts	
0000F6EE                            ; ===========================================================================
0000F6EE                            
0000F6EE                            Obj42_Speed:				; XREF: Obj42_Index2
0000F6EE 6100 F206                  		bsr.w	SpeedToPos
0000F6F2 4E75                       		rts	
0000F6F4                            ; ===========================================================================
0000F6F4                            
0000F6F4                            Obj42_Type01:				; XREF: Obj42_Index2
0000F6F4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F6FA 6600                       		bne.s	Obj42_FireMissile
0000F6FC 117C 000C 0020             		move.b	#$C,$20(a0)
0000F702                            
0000F702                            Obj42_FireMissile:
0000F702 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F708 6600                       		bne.s	locret_DF14
0000F70A 4A28 0032                  		tst.b	$32(a0)
0000F70E 6600                       		bne.s	locret_DF14
0000F710 117C 0001 0032             		move.b	#1,$32(a0)
0000F716 6100 F94E                  		bsr.w	SingleObjLoad
0000F71A 6600                       		bne.s	locret_DF14
0000F71C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F720 3368 0008 0008             		move.w	8(a0),8(a1)
0000F726 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F72C 5169 000C                  		subq.w	#8,$C(a1)
0000F730 337C 0200 0010             		move.w	#$200,$10(a1)
0000F736 303C 0014                  		move.w	#$14,d0
0000F73A 0828 0000 0022             		btst	#0,$22(a0)
0000F740 6600                       		bne.s	loc_DF04
0000F742 4440                       		neg.w	d0
0000F744 4469 0010                  		neg.w	$10(a1)
0000F748                            
0000F748                            loc_DF04:
0000F748 D169 0008                  		add.w	d0,8(a1)
0000F74C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F752 137C 0001 0028             		move.b	#1,$28(a1)
0000F758                            
0000F758                            locret_DF14:
0000F758 4E75                       		rts	
0000F75A                            ; ===========================================================================
0000F75A                            
0000F75A                            Obj42_Delete:				; XREF: Obj42_Index
0000F75A 6000 F204                  		bra.w	DeleteObject
0000F75E                            ; ===========================================================================
0000F75E                            Ani_obj42:
0000F75E                            	include "_anim\obj42.asm"
0000F75E                            ; ---------------------------------------------------------------------------
0000F75E                            ; Animation script - Newtron enemy
0000F75E                            ; ---------------------------------------------------------------------------
0000F75E 0000                       		dc.w byte_DF24-Ani_obj42
0000F760 0000                       		dc.w byte_DF28-Ani_obj42
0000F762 0000                       		dc.w byte_DF30-Ani_obj42
0000F764 0000                       		dc.w byte_DF34-Ani_obj42
0000F766 0000                       		dc.w byte_DF38-Ani_obj42
0000F768 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F76C 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F774 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F778 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F77C 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F786                            		even
0000F786                            		even
0000F786                            
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - Newtron enemy (GHZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            Map_obj42:
0000F786                            	include "_maps\obj42.asm"
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - Newtron enemy (GHZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F78A 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F78E 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F792 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F796 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F79A 0000                       		dc.w byte_DFF8-Map_obj42
0000F79C 03                         byte_DF58:	dc.b 3
0000F79D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F7A2 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F7A7 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F7AC 03                         byte_DF68:	dc.b 3
0000F7AD EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F7B2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7B7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7BC 03                         byte_DF78:	dc.b 3
0000F7BD EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F7C2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7C7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F7CC 04                         byte_DF88:	dc.b 4
0000F7CD EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F7D2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F7D7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F7DC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F7E1 03                         byte_DF9D:	dc.b 3
0000F7E2 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F7E7 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F7EC 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F7F1 02                         byte_DFAD:	dc.b 2
0000F7F2 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F7F7 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F7FC 03                         byte_DFB8:	dc.b 3
0000F7FD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F802 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F807 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F80C 03                         byte_DFC8:	dc.b 3
0000F80D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F812 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F817 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F81C 03                         byte_DFD8:	dc.b 3
0000F81D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F822 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F827 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F82C 03                         byte_DFE8:	dc.b 3
0000F82D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F832 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F837 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F83C 00                         byte_DFF8:	dc.b 0
0000F83E 00                         		even
0000F83E 00                         		even
0000F83E                            
0000F83E                            ; ===========================================================================
0000F83E                            ; ---------------------------------------------------------------------------
0000F83E                            ; Object 43 - Roller enemy (SYZ)
0000F83E                            ; ---------------------------------------------------------------------------
0000F83E                            
0000F83E                            Obj43:					; XREF: Obj_Index
0000F83E 7000                       		moveq	#0,d0
0000F840 1028 0024                  		move.b	$24(a0),d0
0000F844 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F848 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F84C                            ; ===========================================================================
0000F84C 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F84E 0000                       		dc.w Obj43_Action-Obj43_Index
0000F850                            ; ===========================================================================
0000F850                            
0000F850                            Obj43_Main:				; XREF: Obj43_Index
0000F850 117C 000E 0016             		move.b	#$E,$16(a0)
0000F856 117C 0008 0017             		move.b	#8,$17(a0)
0000F85C 6100 F078                  		bsr.w	ObjectFall
0000F860 6100 0000                  		bsr.w	ObjHitFloor
0000F864 4A41                       		tst.w	d1
0000F866 6A00                       		bpl.s	locret_E052
0000F868 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F86C 317C 0000 0012             		move.w	#0,$12(a0)
0000F872 5428 0024                  		addq.b	#2,$24(a0)
0000F876 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F87E 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F884 117C 0004 0001             		move.b	#4,1(a0)
0000F88A 117C 0004 0018             		move.b	#4,$18(a0)
0000F890 117C 0010 0019             		move.b	#$10,$19(a0)
0000F896                            
0000F896                            locret_E052:
0000F896 4E75                       		rts	
0000F898                            ; ===========================================================================
0000F898                            
0000F898                            Obj43_Action:				; XREF: Obj43_Index
0000F898 7000                       		moveq	#0,d0
0000F89A 1028 0025                  		move.b	$25(a0),d0
0000F89E 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F8A2 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F8A6 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F8AC 6100 C0C2                  		bsr.w	AnimateSprite
0000F8B0 3028 0008                  		move.w	8(a0),d0
0000F8B4 0240 FF80                  		andi.w	#$FF80,d0
0000F8B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8BC 0441 0080                  		subi.w	#$80,d1
0000F8C0 0241 FF80                  		andi.w	#$FF80,d1
0000F8C4 9041                       		sub.w	d1,d0
0000F8C6 0C40 0280                  		cmpi.w	#$280,d0
0000F8CA 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F8CE 6000 F040                  		bra.w	DisplaySprite
0000F8D2                            ; ===========================================================================
0000F8D2                            
0000F8D2                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F8D2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000F8D6 6700                       		beq.s	Obj43_Delete		; if it's zero, don't remember object
0000F8D8 3440                       		movea.w	d0,a2	; load address into a2
0000F8DA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000F8DE                            
0000F8DE                            Obj43_Delete:
0000F8DE 6000 F080                  		bra.w	DeleteObject
0000F8E2                            ; ===========================================================================
0000F8E2 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F8E4 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F8E6 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F8E8 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F8EA                            ; ===========================================================================
0000F8EA                            
0000F8EA                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F8EA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F8EE 0440 0100                  		subi.w	#$100,d0
0000F8F2 6500                       		bcs.s	loc_E0D2
0000F8F4 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F8F8 6500                       		bcs.s	loc_E0D2
0000F8FA 5828 0025                  		addq.b	#4,$25(a0)
0000F8FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000F904 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F90A 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F910                            
0000F910                            loc_E0D2:
0000F910 588F                       		addq.l	#4,sp
0000F912 4E75                       		rts	
0000F914                            ; ===========================================================================
0000F914                            
0000F914                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F914 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F91A 6700                       		beq.s	loc_E0F8
0000F91C 5368 0030                  		subq.w	#1,$30(a0)
0000F920 6A00                       		bpl.s	locret_E0F6
0000F922 117C 0001 001C             		move.b	#1,$1C(a0)
0000F928 317C 0700 0010             		move.w	#$700,$10(a0)
0000F92E 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F934                            
0000F934                            locret_E0F6:
0000F934 4E75                       		rts	
0000F936                            ; ===========================================================================
0000F936                            
0000F936                            loc_E0F8:
0000F936 5428 0025                  		addq.b	#2,$25(a0)
0000F93A 4E75                       		rts	
0000F93C                            ; ===========================================================================
0000F93C                            
0000F93C                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F93C 6100 0000                  		bsr.w	Obj43_Stop
0000F940 6100 EFB4                  		bsr.w	SpeedToPos
0000F944 6100 0000                  		bsr.w	ObjHitFloor
0000F948 0C41 FFF8                  		cmpi.w	#-8,d1
0000F94C 6D00                       		blt.s	Obj43_Jump
0000F94E 0C41 000C                  		cmpi.w	#$C,d1
0000F952 6C00                       		bge.s	Obj43_Jump
0000F954 D368 000C                  		add.w	d1,$C(a0)
0000F958 4E75                       		rts	
0000F95A                            ; ===========================================================================
0000F95A                            
0000F95A                            Obj43_Jump:
0000F95A 5428 0025                  		addq.b	#2,$25(a0)
0000F95E 08E8 0000 0032             		bset	#0,$32(a0)
0000F964 6700                       		beq.s	locret_E12E
0000F966 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F96C                            
0000F96C                            locret_E12E:
0000F96C 4E75                       		rts	
0000F96E                            ; ===========================================================================
0000F96E                            
0000F96E                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F96E 6100 EF66                  		bsr.w	ObjectFall
0000F972 4A68 0012                  		tst.w	$12(a0)
0000F976 6B00                       		bmi.s	locret_E150
0000F978 6100 0000                  		bsr.w	ObjHitFloor
0000F97C 4A41                       		tst.w	d1
0000F97E 6A00                       		bpl.s	locret_E150
0000F980 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F984 5528 0025                  		subq.b	#2,$25(a0)
0000F988 317C 0000 0012             		move.w	#0,$12(a0)
0000F98E                            
0000F98E                            locret_E150:
0000F98E 4E75                       		rts	
0000F990                            
0000F990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F990                            
0000F990                            
0000F990                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F990 4A28 0032                  		tst.b	$32(a0)
0000F994 6B00                       		bmi.s	locret_E188
0000F996 3038 D008                  		move.w	($FFFFD008).w,d0
0000F99A 0440 0030                  		subi.w	#$30,d0
0000F99E 9068 0008                  		sub.w	8(a0),d0
0000F9A2 6400                       		bcc.s	locret_E188
0000F9A4 117C 0000 001C             		move.b	#0,$1C(a0)
0000F9AA 117C 000E 0020             		move.b	#$E,$20(a0)
0000F9B0 4268 0010                  		clr.w	$10(a0)
0000F9B4 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F9BA 117C 0002 0025             		move.b	#2,$25(a0)
0000F9C0 08E8 0007 0032             		bset	#7,$32(a0)
0000F9C6                            
0000F9C6                            locret_E188:
0000F9C6 4E75                       		rts	
0000F9C8                            ; End of function Obj43_Stop
0000F9C8                            
0000F9C8                            ; ===========================================================================
0000F9C8                            Ani_obj43:
0000F9C8                            	include "_anim\obj43.asm"
0000F9C8                            ; ---------------------------------------------------------------------------
0000F9C8                            ; Animation script - Roller enemy
0000F9C8                            ; ---------------------------------------------------------------------------
0000F9C8 0000                       		dc.w byte_E190-Ani_obj43
0000F9CA 0000                       		dc.w byte_E196-Ani_obj43
0000F9CC 0000                       		dc.w byte_E19C-Ani_obj43
0000F9CE 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F9D4 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F9DA 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F9E0 00                         		even
0000F9E0 00                         		even
0000F9E0                            
0000F9E0                            ; ---------------------------------------------------------------------------
0000F9E0                            ; Sprite mappings - Roller enemy (SYZ)
0000F9E0                            ; ---------------------------------------------------------------------------
0000F9E0                            Map_obj43:
0000F9E0                            	include "_maps\obj43.asm"
0000F9E0                            ; ---------------------------------------------------------------------------
0000F9E0                            ; Sprite mappings - Roller enemy (SYZ)
0000F9E0                            ; ---------------------------------------------------------------------------
0000F9E0 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000F9E4 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000F9E8 0000                       		dc.w byte_E1CE-Map_obj43
0000F9EA 02                         byte_E1AC:	dc.b 2
0000F9EB DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000F9F0 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000F9F5 02                         byte_E1B7:	dc.b 2
0000F9F6 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000F9FB FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000FA00 01                         byte_E1C2:	dc.b 1
0000FA01 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000FA06 01                         byte_E1C8:	dc.b 1
0000FA07 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000FA0C 01                         byte_E1CE:	dc.b 1
0000FA0D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000FA12                            		even
0000FA12                            		even
0000FA12                            
0000FA12                            ; ===========================================================================
0000FA12                            ; ---------------------------------------------------------------------------
0000FA12                            ; Object 44 - walls (GHZ)
0000FA12                            ; ---------------------------------------------------------------------------
0000FA12                            
0000FA12                            Obj44:					; XREF: Obj_Index
0000FA12 7000                       		moveq	#0,d0
0000FA14 1028 0024                  		move.b	$24(a0),d0
0000FA18 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000FA1C 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000FA20                            ; ===========================================================================
0000FA20 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000FA22 0000                       		dc.w Obj44_Solid-Obj44_Index
0000FA24 0000                       		dc.w Obj44_Display-Obj44_Index
0000FA26                            ; ===========================================================================
0000FA26                            
0000FA26                            Obj44_Main:				; XREF: Obj44_Index
0000FA26 5428 0024                  		addq.b	#2,$24(a0)
0000FA2A 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000FA32 317C 434C 0002             		move.w	#$434C,2(a0)
0000FA38 0028 0004 0001             		ori.b	#4,1(a0)
0000FA3E 117C 0008 0019             		move.b	#8,$19(a0)
0000FA44 117C 0006 0018             		move.b	#6,$18(a0)
0000FA4A 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000FA50 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000FA56 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000FA58 5428 0024                  		addq.b	#2,$24(a0)
0000FA5C 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000FA5E                            ; ===========================================================================
0000FA5E                            
0000FA5E                            Obj44_Solid:				; XREF: Obj44_Index
0000FA5E 323C 0013                  		move.w	#$13,d1
0000FA62 343C 0028                  		move.w	#$28,d2
0000FA66 6100 A332                  		bsr.w	Obj44_SolidWall
0000FA6A                            
0000FA6A                            Obj44_Display:				; XREF: Obj44_Index
0000FA6A 6100 EEA4                  		bsr.w	DisplaySprite
0000FA6E 3028 0008                  		move.w	8(a0),d0
0000FA72 0240 FF80                  		andi.w	#$FF80,d0
0000FA76 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA7A 0441 0080                  		subi.w	#$80,d1
0000FA7E 0241 FF80                  		andi.w	#$FF80,d1
0000FA82 9041                       		sub.w	d1,d0
0000FA84 0C40 0280                  		cmpi.w	#$280,d0
0000FA88 6300                       		bls.s	Obj44_NoDel
0000FA8A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FA8E 6700 EED0                  		beq.w	DeleteObject		; if it's zero, don't remember object
0000FA92 3440                       		movea.w	d0,a2	; load address into a2
0000FA94 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FA98 6000 EEC6                  		bra.w	DeleteObject	; and delete object
0000FA9C                            
0000FA9C                            Obj44_NoDel:
0000FA9C 4E75                       		rts	
0000FA9E                            ; ===========================================================================
0000FA9E                            ; ---------------------------------------------------------------------------
0000FA9E                            ; Sprite mappings - walls (GHZ)
0000FA9E                            ; ---------------------------------------------------------------------------
0000FA9E                            Map_obj44:
0000FA9E                            	include "_maps\obj44.asm"
0000FA9E                            ; ---------------------------------------------------------------------------
0000FA9E                            ; Sprite mappings - walls (GHZ)
0000FA9E                            ; ---------------------------------------------------------------------------
0000FA9E 0000                       		dc.w byte_E256-Map_obj44
0000FAA0 0000                       		dc.w byte_E26B-Map_obj44
0000FAA2 0000                       		dc.w byte_E280-Map_obj44
0000FAA4 04                         byte_E256:	dc.b 4
0000FAA5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000FAAA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAAF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FAB4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FAB9 04                         byte_E26B:	dc.b 4
0000FABA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000FABF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FAC4 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000FAC9 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000FACE 04                         byte_E280:	dc.b 4
0000FACF E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000FAD4 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000FAD9 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000FADE 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000FAE4 00                         		even
0000FAE4 00                         		even
0000FAE4                            
0000FAE4                            ; ===========================================================================
0000FAE4                            ; ---------------------------------------------------------------------------
0000FAE4                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000FAE4                            ; ---------------------------------------------------------------------------
0000FAE4                            
0000FAE4                            Obj13:					; XREF: Obj_Index
0000FAE4 7000                       		moveq	#0,d0
0000FAE6 1028 0024                  		move.b	$24(a0),d0
0000FAEA 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000FAEE 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000FAF2 6000 0000                  		bra.w	Obj14_ChkDel
0000FAF6                            ; ===========================================================================
0000FAF6 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000FAF8 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000FAFA                            ; ---------------------------------------------------------------------------
0000FAFA                            ;
0000FAFA                            ; Lava ball production rates
0000FAFA                            ;
0000FAFA 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000FB00                            ; ===========================================================================
0000FB00                            
0000FB00                            Obj13_Main:				; XREF: Obj13_Index
0000FB00 5428 0024                  		addq.b	#2,$24(a0)
0000FB04 1028 0028                  		move.b	$28(a0),d0
0000FB08 E848                       		lsr.w	#4,d0
0000FB0A 0240 000F                  		andi.w	#$F,d0
0000FB0E 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000FB14 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000FB1A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FB20                            
0000FB20                            Obj13_MakeLava:				; XREF: Obj13_Index
0000FB20 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000FB24 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000FB26 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000FB2C 6100 F1A8                  		bsr.w	ChkObjOnScreen
0000FB30 6600                       		bne.s	locret_E302
0000FB32 6100 F532                  		bsr.w	SingleObjLoad
0000FB36 6600                       		bne.s	locret_E302
0000FB38 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000FB3C 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB42 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB48 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FB4E                            
0000FB4E                            locret_E302:
0000FB4E 4E75                       		rts	
0000FB50                            ; ===========================================================================
0000FB50                            ; ---------------------------------------------------------------------------
0000FB50                            ; Object 14 - lava balls (MZ, SLZ)
0000FB50                            ; ---------------------------------------------------------------------------
0000FB50                            
0000FB50                            Obj14:					; XREF: Obj_Index
0000FB50 7000                       		moveq	#0,d0
0000FB52 1028 0024                  		move.b	$24(a0),d0
0000FB56 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000FB5A 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000FB5E 6000 EDB0                  		bra.w	DisplaySprite
0000FB62                            ; ===========================================================================
0000FB62 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000FB64 0000                       		dc.w Obj14_Action-Obj14_Index
0000FB66 0000                       		dc.w Obj14_Delete-Obj14_Index
0000FB68                            
0000FB68 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000FB72 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000FB7A                            ; ===========================================================================
0000FB7A                            
0000FB7A                            Obj14_Main:				; XREF: Obj14_Index
0000FB7A 5428 0024                  		addq.b	#2,$24(a0)
0000FB7E 117C 0008 0016             		move.b	#8,$16(a0)
0000FB84 117C 0008 0017             		move.b	#8,$17(a0)
0000FB8A 217C 0000 C60A 0004        		move.l	#Map_obj14,4(a0)
0000FB92 317C 0345 0002             		move.w	#$345,2(a0)
0000FB98 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FB9E 6600                       		bne.s	loc_E35A
0000FBA0 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000FBA6                            
0000FBA6                            loc_E35A:
0000FBA6 117C 0004 0001             		move.b	#4,1(a0)
0000FBAC 117C 0003 0018             		move.b	#3,$18(a0)
0000FBB2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000FBB8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FBBE 4A28 0029                  		tst.b	$29(a0)
0000FBC2 6700                       		beq.s	Obj14_SetSpeed
0000FBC4 5428 0018                  		addq.b	#2,$18(a0)
0000FBC8                            
0000FBC8                            Obj14_SetSpeed:
0000FBC8 7000                       		moveq	#0,d0
0000FBCA 1028 0028                  		move.b	$28(a0),d0
0000FBCE D040                       		add.w	d0,d0
0000FBD0 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000FBD6 117C 0008 0019             		move.b	#8,$19(a0)
0000FBDC 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000FBE2 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000FBE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000FBEA 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000FBF0 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000FBF6 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000FBFC                            
0000FBFC                            Obj14_PlaySnd:
0000FBFC 303C 00AE                  		move.w	#$AE,d0
0000FC00 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000FC06                            
0000FC06                            Obj14_Action:				; XREF: Obj14_Index
0000FC06 7000                       		moveq	#0,d0
0000FC08 1028 0028                  		move.b	$28(a0),d0
0000FC0C D040                       		add.w	d0,d0
0000FC0E 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000FC12 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000FC16 6100 ECDE                  		bsr.w	SpeedToPos
0000FC1A 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000FC20 6100 BD4E                  		bsr.w	AnimateSprite
0000FC24                            
0000FC24                            Obj14_ChkDel:				; XREF: Obj13
0000FC24 3028 0008                  		move.w	8(a0),d0
0000FC28 0240 FF80                  		andi.w	#$FF80,d0
0000FC2C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC30 0441 0080                  		subi.w	#$80,d1
0000FC34 0241 FF80                  		andi.w	#$FF80,d1
0000FC38 9041                       		sub.w	d1,d0
0000FC3A 0C40 0280                  		cmpi.w	#$280,d0
0000FC3E 6300                       		bls.s	Obj14_NoDel
0000FC40 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FC44 6700 ED1A                  		beq.w	DeleteObject	; if it's zero, don't remember object
0000FC48 3440                       		movea.w	d0,a2	; load address into a2
0000FC4A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0000FC4E 6000 ED10                  		bra.w	DeleteObject	; and delete object
0000FC52                            
0000FC52                            Obj14_NoDel:
0000FC52 4E75                       		rts	
0000FC54                            ; ===========================================================================
0000FC54 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC58 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000FC5C 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000FC60 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000FC64 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000FC66                            ; ===========================================================================
0000FC66                            ; lavaball types 00-03 fly up and fall back down
0000FC66                            
0000FC66                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000FC66 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000FC6C 3028 0030                  		move.w	$30(a0),d0
0000FC70 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000FC74 6400                       		bcc.s	loc_E41E	; if not, branch
0000FC76 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000FC7A                            
0000FC7A                            loc_E41E:
0000FC7A 08A8 0001 0022             		bclr	#1,$22(a0)
0000FC80 4A68 0012                  		tst.w	$12(a0)
0000FC84 6A00                       		bpl.s	locret_E430
0000FC86 08E8 0001 0022             		bset	#1,$22(a0)
0000FC8C                            
0000FC8C                            locret_E430:
0000FC8C 4E75                       		rts	
0000FC8E                            ; ===========================================================================
0000FC8E                            ; lavaball type	04 flies up until it hits the ceiling
0000FC8E                            
0000FC8E                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000FC8E 08E8 0001 0022             		bset	#1,$22(a0)
0000FC94 6100 0000                  		bsr.w	ObjHitCeiling
0000FC98 4A41                       		tst.w	d1
0000FC9A 6A00                       		bpl.s	locret_E452
0000FC9C 117C 0008 0028             		move.b	#8,$28(a0)
0000FCA2 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCA8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000FCAE                            
0000FCAE                            locret_E452:
0000FCAE 4E75                       		rts	
0000FCB0                            ; ===========================================================================
0000FCB0                            ; lavaball type	05 falls down until it hits the	floor
0000FCB0                            
0000FCB0                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000FCB0 08A8 0001 0022             		bclr	#1,$22(a0)
0000FCB6 6100 0000                  		bsr.w	ObjHitFloor
0000FCBA 4A41                       		tst.w	d1
0000FCBC 6A00                       		bpl.s	locret_E474
0000FCBE 117C 0008 0028             		move.b	#8,$28(a0)
0000FCC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCCA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000FCD0                            
0000FCD0                            locret_E474:
0000FCD0 4E75                       		rts	
0000FCD2                            ; ===========================================================================
0000FCD2                            ; lavaball types 06-07 move sideways
0000FCD2                            
0000FCD2                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000FCD2 08E8 0000 0022             		bset	#0,$22(a0)
0000FCD8 76F8                       		moveq	#-8,d3
0000FCDA 6100 0000                  		bsr.w	ObjHitWallLeft
0000FCDE 4A41                       		tst.w	d1
0000FCE0 6A00                       		bpl.s	locret_E498
0000FCE2 117C 0008 0028             		move.b	#8,$28(a0)
0000FCE8 117C 0003 001C             		move.b	#3,$1C(a0)
0000FCEE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FCF4                            
0000FCF4                            locret_E498:
0000FCF4 4E75                       		rts	
0000FCF6                            ; ===========================================================================
0000FCF6                            
0000FCF6                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000FCF6 08A8 0000 0022             		bclr	#0,$22(a0)
0000FCFC 7608                       		moveq	#8,d3
0000FCFE 6100 0000                  		bsr.w	ObjHitWallRight
0000FD02 4A41                       		tst.w	d1
0000FD04 6A00                       		bpl.s	locret_E4BC
0000FD06 117C 0008 0028             		move.b	#8,$28(a0)
0000FD0C 117C 0003 001C             		move.b	#3,$1C(a0)
0000FD12 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000FD18                            
0000FD18                            locret_E4BC:
0000FD18 4E75                       		rts	
0000FD1A                            ; ===========================================================================
0000FD1A                            
0000FD1A                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000FD1A 4E75                       		rts	
0000FD1C                            ; ===========================================================================
0000FD1C                            
0000FD1C                            Obj14_Delete:				; XREF: Obj14_Index
0000FD1C 6000 EC42                  		bra.w	DeleteObject
0000FD20                            ; ===========================================================================
0000FD20                            Ani_obj14:
0000FD20                            	include "_anim\obj14.asm"
0000FD20                            ; ---------------------------------------------------------------------------
0000FD20                            ; Animation script - lava balls
0000FD20                            ; ---------------------------------------------------------------------------
0000FD20 0000                       		dc.w byte_E4CC-Ani_obj14
0000FD22 0000                       		dc.w byte_E4D2-Ani_obj14
0000FD24 0000                       		dc.w byte_E4D6-Ani_obj14
0000FD26 0000                       		dc.w byte_E4DC-Ani_obj14
0000FD28 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000FD2E 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000FD32 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000FD38 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000FD3C                            		even
0000FD3C                            		even
0000FD3C                            
0000FD3C                            ; ===========================================================================
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C                            ; Object 6D - flame thrower (SBZ)
0000FD3C                            ; ---------------------------------------------------------------------------
0000FD3C                            
0000FD3C                            Obj6D:					; XREF: Obj_Index
0000FD3C 7000                       		moveq	#0,d0
0000FD3E 1028 0024                  		move.b	$24(a0),d0
0000FD42 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000FD46 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000FD4A                            ; ===========================================================================
0000FD4A 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000FD4C 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000FD4E                            ; ===========================================================================
0000FD4E                            
0000FD4E                            Obj6D_Main:				; XREF: Obj6D_Index
0000FD4E 5428 0024                  		addq.b	#2,$24(a0)
0000FD52 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000FD5A 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000FD60 0028 0004 0001             		ori.b	#4,1(a0)
0000FD66 117C 0001 0018             		move.b	#1,$18(a0)
0000FD6C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FD72 117C 000C 0019             		move.b	#$C,$19(a0)
0000FD78 1028 0028                  		move.b	$28(a0),d0
0000FD7C 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000FD80 D040                       		add.w	d0,d0		; multiply by 2
0000FD82 3140 0030                  		move.w	d0,$30(a0)
0000FD86 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000FD8A 1028 0028                  		move.b	$28(a0),d0
0000FD8E 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000FD92 EB48                       		lsl.w	#5,d0		; multiply by $20
0000FD94 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000FD98 117C 000A 0036             		move.b	#$A,$36(a0)
0000FD9E 0828 0001 0022             		btst	#1,$22(a0)
0000FDA4 6700                       		beq.s	Obj6D_Action
0000FDA6 117C 0002 001C             		move.b	#2,$1C(a0)
0000FDAC 117C 0015 0036             		move.b	#$15,$36(a0)
0000FDB2                            
0000FDB2                            Obj6D_Action:				; XREF: Obj6D_Index
0000FDB2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000FDB6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000FDB8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000FDBE 0868 0000 001C             		bchg	#0,$1C(a0)
0000FDC4 6700                       		beq.s	loc_E57A
0000FDC6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000FDCC 303C 00B3                  		move.w	#$B3,d0
0000FDD0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0000FDD6                            
0000FDD6                            loc_E57A:
0000FDD6 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000FDDC 6100 BB92                  		bsr.w	AnimateSprite
0000FDE0 117C 0000 0020             		move.b	#0,$20(a0)
0000FDE6 1028 0036                  		move.b	$36(a0),d0
0000FDEA B028 001A                  		cmp.b	$1A(a0),d0
0000FDEE 6600                       		bne.s	Obj6D_ChkDel
0000FDF0 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000FDF6                            
0000FDF6                            Obj6D_ChkDel:
0000FDF6 3028 0008                  		move.w	8(a0),d0
0000FDFA 0240 FF80                  		andi.w	#$FF80,d0
0000FDFE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE02 0441 0080                  		subi.w	#$80,d1
0000FE06 0241 FF80                  		andi.w	#$FF80,d1
0000FE0A 9041                       		sub.w	d1,d0
0000FE0C 0C40 0280                  		cmpi.w	#$280,d0
0000FE10 6300 EAFE                  		bls.w	DisplaySprite
0000FE14 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0000FE18 6700 EB46                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
0000FE1C 3440                       		movea.w	d0,a2	; load address into a2
0000FE1E 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0000FE22 6000 EB3C                  		bra.w	DeleteObject
0000FE26                            ; ===========================================================================
0000FE26                            Ani_obj6D:
0000FE26                            	include "_anim\obj6D.asm"
0000FE26                            ; ---------------------------------------------------------------------------
0000FE26                            ; Animation script - flamethrower (SBZ)
0000FE26                            ; ---------------------------------------------------------------------------
0000FE26 0000                       		dc.w byte_E5C4-Ani_obj6D
0000FE28 0000                       		dc.w byte_E5D2-Ani_obj6D
0000FE2A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000FE2C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000FE2E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000FE3C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000FE46 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000FE54 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000FE5E                            		even
0000FE5E                            		even
0000FE5E                            
0000FE5E                            ; ---------------------------------------------------------------------------
0000FE5E                            ; Sprite mappings - flame thrower (SBZ)
0000FE5E                            ; ---------------------------------------------------------------------------
0000FE5E                            Map_obj6D:
0000FE5E                            	include "_maps\obj6D.asm"
0000FE5E                            ; ---------------------------------------------------------------------------
0000FE5E                            ; Sprite mappings - flame thrower (SBZ)
0000FE5E                            ; ---------------------------------------------------------------------------
0000FE5E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000FE62 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000FE66 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000FE6A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000FE6E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000FE72 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000FE76 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000FE7A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000FE7E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000FE82 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000FE86 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000FE8A 01                         byte_E620:	dc.b 1
0000FE8B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE90 02                         byte_E626:	dc.b 2
0000FE91 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FE96 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FE9B 02                         byte_E631:	dc.b 2
0000FE9C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEA1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEA6 03                         byte_E63C:	dc.b 3
0000FEA7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FEAC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FEB1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEB6 03                         byte_E64C:	dc.b 3
0000FEB7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEBC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEC1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEC6 04                         byte_E65C:	dc.b 4
0000FEC7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FECC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FED1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FED6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEDB 04                         byte_E671:	dc.b 4
0000FEDC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FEE1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FEE6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FEEB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FEF0 05                         byte_E686:	dc.b 5
0000FEF1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FEF6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FEFB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF00 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF05 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF0A 05                         byte_E6A0:	dc.b 5
0000FF0B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF10 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FF15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF1A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF1F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF24 06                         byte_E6BA:	dc.b 6
0000FF25 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000FF2A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000FF2F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FF34 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FF39 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF3E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF43 06                         byte_E6D9:	dc.b 6
0000FF44 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FF49 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FF4E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FF53 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF58 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF5D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000FF62 01                         byte_E6F8:	dc.b 1
0000FF63 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF68 02                         byte_E6FE:	dc.b 2
0000FF69 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF6E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF73 02                         byte_E709:	dc.b 2
0000FF74 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF79 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF7E 03                         byte_E714:	dc.b 3
0000FF7F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FF84 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF89 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FF8E 03                         byte_E724:	dc.b 3
0000FF8F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FF94 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FF99 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FF9E 04                         byte_E734:	dc.b 4
0000FF9F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFA4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFA9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFAE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFB3 04                         byte_E749:	dc.b 4
0000FFB4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FFB9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFBE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFC3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFC8 05                         byte_E75E:	dc.b 5
0000FFC9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000FFCE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000FFD3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000FFD8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFDD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FFE2 05                         byte_E778:	dc.b 5
0000FFE3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FFE8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000FFED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FFF2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FFF7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FFFC 06                         byte_E792:	dc.b 6
0000FFFD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010002 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010007 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001000C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010011 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010016 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001001B 06                         byte_E7B1:	dc.b 6
0001001C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010021 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010026 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001002B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010030 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010035 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001003A                            		even
0001003A                            		even
0001003A                            
0001003A                            ; ===========================================================================
0001003A                            ; ---------------------------------------------------------------------------
0001003A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0001003A                            ; ---------------------------------------------------------------------------
0001003A                            
0001003A                            Obj46:					; XREF: Obj_Index
0001003A 7000                       		moveq	#0,d0
0001003C 1028 0024                  		move.b	$24(a0),d0
00010040 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00010044 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00010048                            ; ===========================================================================
00010048 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0001004A 0000                       		dc.w Obj46_Action-Obj46_Index
0001004C                            ; ===========================================================================
0001004C                            
0001004C                            Obj46_Main:				; XREF: Obj46_Index
0001004C 5428 0024                  		addq.b	#2,$24(a0)
00010050 117C 000F 0016             		move.b	#$F,$16(a0)
00010056 117C 000F 0017             		move.b	#$F,$17(a0)
0001005C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00010064 317C 4000 0002             		move.w	#$4000,2(a0)
0001006A 117C 0004 0001             		move.b	#4,1(a0)
00010070 117C 0003 0018             		move.b	#3,$18(a0)
00010076 117C 0010 0019             		move.b	#$10,$19(a0)
0001007C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010082 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010088                            
00010088                            Obj46_Action:				; XREF: Obj46_Index
00010088 4A28 0001                  		tst.b	1(a0)
0001008C 6A00                       		bpl.s	Obj46_ChkDel
0001008E 7000                       		moveq	#0,d0
00010090 1028 0028                  		move.b	$28(a0),d0	; get object type
00010094 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010098 D040                       		add.w	d0,d0
0001009A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0001009E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
000100A2 323C 001B                  		move.w	#$1B,d1
000100A6 343C 0010                  		move.w	#$10,d2
000100AA 363C 0011                  		move.w	#$11,d3
000100AE 3828 0008                  		move.w	8(a0),d4
000100B2 6100 0000                  		bsr.w	SolidObject
000100B6                            
000100B6                            Obj46_ChkDel:
000100B6 6100 E858                  		bsr.w	DisplaySprite
000100BA 3028 0008                  		move.w	8(a0),d0
000100BE 0240 FF80                  		andi.w	#$FF80,d0
000100C2 3238 F700                  		move.w	($FFFFF700).w,d1
000100C6 0441 0080                  		subi.w	#$80,d1
000100CA 0241 FF80                  		andi.w	#$FF80,d1
000100CE 9041                       		sub.w	d1,d0
000100D0 0C40 0280                  		cmpi.w	#$280,d0
000100D4 6300                       		bls.s	Obj46_NoDel
000100D6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000100DA 6700 E884                  		beq.w	DeleteObject		; if it's zero, don't remember object
000100DE 3440                       		movea.w	d0,a2	; load address into a2
000100E0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000100E4 6000 E87A                  		bra.w	DeleteObject	; and delete object
000100E8                            
000100E8                            Obj46_NoDel:
000100E8 4E75                       		rts	
000100EA                            ; ===========================================================================
000100EA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
000100EC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
000100EE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
000100F0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
000100F2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
000100F4                            ; ===========================================================================
000100F4                            
000100F4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
000100F4 4E75                       		rts	
000100F6                            ; ===========================================================================
000100F6                            
000100F6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
000100F6 3038 D008                  		move.w	($FFFFD008).w,d0
000100FA 9068 0008                  		sub.w	8(a0),d0
000100FE 6400                       		bcc.s	loc_E888
00010100 4440                       		neg.w	d0
00010102                            
00010102                            loc_E888:
00010102 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010106 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00010108 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0001010E                            
0001010E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0001010E 7000                       		moveq	#0,d0
00010110 1038 FE74                  		move.b	($FFFFFE74).w,d0
00010114 0828 0003 0028             		btst	#3,$28(a0)
0001011A 6700                       		beq.s	loc_E8A8
0001011C 4440                       		neg.w	d0
0001011E 0640 0010                  		addi.w	#$10,d0
00010122                            
00010122                            loc_E8A8:
00010122 3228 0030                  		move.w	$30(a0),d1
00010126 9240                       		sub.w	d0,d1
00010128 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0001012C 4E75                       		rts	
0001012E                            ; ===========================================================================
0001012E                            
0001012E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0001012E 6100 E7C6                  		bsr.w	SpeedToPos
00010132 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00010138 6100 0000                  		bsr.w	ObjHitFloor
0001013C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001013E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010142 D368 000C                  		add.w	d1,$C(a0)
00010146 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0001014A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010150 117C 0004 0028             		move.b	#4,$28(a0)
00010156 3011                       		move.w	(a1),d0
00010158 0240 03FF                  		andi.w	#$3FF,d0
0001015C 0C40 02E8                  		cmpi.w	#$2E8,d0
00010160 6400                       		bcc.s	locret_E8EE
00010162 117C 0000 0028             		move.b	#0,$28(a0)
00010168                            
00010168                            locret_E8EE:
00010168 4E75                       		rts	
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0001016A 7000                       		moveq	#0,d0
0001016C 1038 FE70                  		move.b	($FFFFFE70).w,d0
00010170 E648                       		lsr.w	#3,d0
00010172 3228 0030                  		move.w	$30(a0),d1
00010176 9240                       		sub.w	d0,d1
00010178 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            Map_obj46:
0001017E                            	include "_maps\obj46.asm"
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001017E                            ; ---------------------------------------------------------------------------
0001017E 0000                       		dc.w byte_E906-Map_obj46
00010180 01                         byte_E906:	dc.b 1
00010181 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010186                            		even
00010186                            		even
00010186                            
00010186                            ; ===========================================================================
00010186                            ; ---------------------------------------------------------------------------
00010186                            ; Object 12 - lamp (SYZ)
00010186                            ; ---------------------------------------------------------------------------
00010186                            
00010186                            Obj12:					; XREF: Obj_Index
00010186 7000                       		moveq	#0,d0
00010188 1028 0024                  		move.b	$24(a0),d0
0001018C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00010190 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00010194                            ; ===========================================================================
00010194 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00010196 0000                       		dc.w Obj12_Animate-Obj12_Index
00010198                            ; ===========================================================================
00010198                            
00010198                            Obj12_Main:				; XREF: Obj12_Index
00010198 5428 0024                  		addq.b	#2,$24(a0)
0001019C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
000101A4 317C 0000 0002             		move.w	#0,2(a0)
000101AA 117C 0004 0001             		move.b	#4,1(a0)
000101B0 117C 0010 0019             		move.b	#$10,$19(a0)
000101B6 117C 0006 0018             		move.b	#6,$18(a0)
000101BC                            
000101BC                            Obj12_Animate:				; XREF: Obj12_Index
000101BC 5328 001E                  		subq.b	#1,$1E(a0)
000101C0 6A00                       		bpl.s	Obj12_ChkDel
000101C2 117C 0007 001E             		move.b	#7,$1E(a0)
000101C8 5228 001A                  		addq.b	#1,$1A(a0)
000101CC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000101D2 6500                       		bcs.s	Obj12_ChkDel
000101D4 117C 0000 001A             		move.b	#0,$1A(a0)
000101DA                            
000101DA                            Obj12_ChkDel:
000101DA 3028 0008                  		move.w	8(a0),d0
000101DE 0240 FF80                  		andi.w	#$FF80,d0
000101E2 3238 F700                  		move.w	($FFFFF700).w,d1
000101E6 0441 0080                  		subi.w	#$80,d1
000101EA 0241 FF80                  		andi.w	#$FF80,d1
000101EE 9041                       		sub.w	d1,d0
000101F0 0C40 0280                  		cmpi.w	#$280,d0
000101F4 6300 E71A                  		bls.w	DisplaySprite
000101F8 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000101FC 6700 E762                  		beq.w	DeleteObject		; if it's zero, don't remember object
00010200 3440                       		movea.w	d0,a2	; load address into a2
00010202 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010206 6000 E758                  		bra.w	DeleteObject	; and delete object
0001020A                            ; ===========================================================================
0001020A                            ; ---------------------------------------------------------------------------
0001020A                            ; Sprite mappings - lamp (SYZ)
0001020A                            ; ---------------------------------------------------------------------------
0001020A                            Map_obj12:
0001020A                            	include "_maps\obj12.asm"
0001020A                            ; ---------------------------------------------------------------------------
0001020A                            ; Sprite mappings - lamp (SYZ)
0001020A                            ; ---------------------------------------------------------------------------
0001020A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0001020E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00010212 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00010216 02                         byte_E98E:	dc.b 2
00010217 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0001021C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00010221 02                         byte_E999:	dc.b 2
00010222 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00010227 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0001022C 02                         byte_E9A4:	dc.b 2
0001022D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00010232 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00010237 02                         byte_E9AF:	dc.b 2
00010238 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0001023D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00010242 02                         byte_E9BA:	dc.b 2
00010243 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00010248 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0001024D 02                         byte_E9C5:	dc.b 2
0001024E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00010253 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00010258                            		even
00010258                            		even
00010258                            
00010258                            ; ===========================================================================
00010258                            ; ---------------------------------------------------------------------------
00010258                            ; Object 47 - pinball bumper (SYZ)
00010258                            ; ---------------------------------------------------------------------------
00010258                            
00010258                            Obj47:					; XREF: Obj_Index
00010258 7000                       		moveq	#0,d0
0001025A 1028 0024                  		move.b	$24(a0),d0
0001025E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00010262 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00010266                            ; ===========================================================================
00010266 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
00010268 0000                       		dc.w Obj47_Hit-Obj47_Index
0001026A                            ; ===========================================================================
0001026A                            
0001026A                            Obj47_Main:				; XREF: Obj47_Index
0001026A 5428 0024                  		addq.b	#2,$24(a0)
0001026E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00010276 317C 0380 0002             		move.w	#$380,2(a0)
0001027C 117C 0004 0001             		move.b	#4,1(a0)
00010282 117C 0010 0019             		move.b	#$10,$19(a0)
00010288 117C 0001 0018             		move.b	#1,$18(a0)
0001028E 117C 00D7 0020             		move.b	#$D7,$20(a0)
00010294                            
00010294                            Obj47_Hit:				; XREF: Obj47_Index
00010294 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
00010298 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0001029C 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
000102A2 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
000102A8 4228 0021                  		clr.b	$21(a0)
000102AC 43F8 D000                  		lea	($FFFFD000).w,a1
000102B0 3228 0008                  		move.w	8(a0),d1
000102B4 3428 000C                  		move.w	$C(a0),d2
000102B8 9269 0008                  		sub.w	8(a1),d1
000102BC 9469 000C                  		sub.w	$C(a1),d2
000102C0 4EB9 0000 2C94             		jsr	(CalcAngle).l
000102C6 4EB9 0000 29CC             		jsr	(CalcSine).l
000102CC C3FC F900                  		muls.w	#-$700,d1
000102D0 E081                       		asr.l	#8,d1
000102D2 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
000102D6 C1FC F900                  		muls.w	#-$700,d0
000102DA E080                       		asr.l	#8,d0
000102DC 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
000102E0 08E9 0001 0022             		bset	#1,$22(a1)
000102E6 08A9 0004 0022             		bclr	#4,$22(a1)
000102EC 08A9 0005 0022             		bclr	#5,$22(a1)
000102F2 4229 003C                  		clr.b	$3C(a1)
000102F6 117C 0001 001C             		move.b	#1,$1C(a0)
000102FC 303C 00B4                  		move.w	#$B4,d0
00010300 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bumper sound
00010306 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001030A 6700                       		beq.s	Obj47_Score		; if it's zero, don't remember object
0001030C 3440                       		movea.w	d0,a2	; load address into a2
0001030E 0C12 008A                  		cmpi.b	#$8A,(a2)	; has bumper been hit $8A times?
00010312 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00010314 5212                       		addq.b	#1,(a2)
00010316                            
00010316                            Obj47_Score:
00010316 7001                       		moveq	#1,d0
00010318 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0001031E 6100 ED46                  		bsr.w	SingleObjLoad
00010322 6600                       		bne.s	Obj47_Display
00010324 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010328 3368 0008 0008             		move.w	8(a0),8(a1)
0001032E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010334 137C 0004 001A             		move.b	#4,$1A(a1)
0001033A                            
0001033A                            Obj47_Display:
0001033A 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00010340 6100 B62E                  		bsr.w	AnimateSprite
00010344 3028 0008                  		move.w	8(a0),d0
00010348 0240 FF80                  		andi.w	#$FF80,d0
0001034C 3238 F700                  		move.w	($FFFFF700).w,d1
00010350 0441 0080                  		subi.w	#$80,d1
00010354 0241 FF80                  		andi.w	#$FF80,d1
00010358 9041                       		sub.w	d1,d0
0001035A 0C40 0280                  		cmpi.w	#$280,d0
0001035E 6200                       		bhi.s	Obj47_ChkHit
00010360 6000 E5AE                  		bra.w	DisplaySprite
00010364                            ; ===========================================================================
00010364                            
00010364                            Obj47_ChkHit:				; XREF: Obj47_Display
00010364 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010368 6700                       		beq.s	Obj47_Delete		; if it's zero, don't remember object
0001036A 3440                       		movea.w	d0,a2	; load address into a2
0001036C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010370                            
00010370                            Obj47_Delete:
00010370 6000 E5EE                  		bra.w	DeleteObject
00010374                            ; ===========================================================================
00010374                            Ani_obj47:
00010374                            	include "_anim\obj47.asm"
00010374                            ; ---------------------------------------------------------------------------
00010374                            ; Animation script - flamethrower (SBZ)
00010374                            ; ---------------------------------------------------------------------------
00010374 0000                       		dc.w byte_EAF4-Ani_obj47
00010376 0000                       		dc.w byte_EAF8-Ani_obj47
00010378 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0001037C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00010384                            		even
00010384                            		even
00010384                            
00010384                            ; ---------------------------------------------------------------------------
00010384                            ; Sprite mappings - pinball bumper (SYZ)
00010384                            ; ---------------------------------------------------------------------------
00010384                            Map_obj47:
00010384                            	include "_maps\obj47.asm"
00010384                            ; ---------------------------------------------------------------------------
00010384                            ; Sprite mappings - pinball bumper (SYZ)
00010384                            ; ---------------------------------------------------------------------------
00010384 0000                       		dc.w byte_EB06-Map_obj47
00010386 0000                       		dc.w byte_EB11-Map_obj47
00010388 0000                       		dc.w byte_EB1C-Map_obj47
0001038A 02                         byte_EB06:	dc.b 2
0001038B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010390 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010395 02                         byte_EB11:	dc.b 2
00010396 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0001039B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
000103A0 02                         byte_EB1C:	dc.b 2
000103A1 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
000103A6 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
000103AC 00                         		even
000103AC 00                         		even
000103AC                            
000103AC                            ; ===========================================================================
000103AC                            ; ---------------------------------------------------------------------------
000103AC                            ; Object 0D - signpost at the end of a level
000103AC                            ; ---------------------------------------------------------------------------
000103AC                            
000103AC                            Obj0D:					; XREF: Obj_Index
000103AC 7000                       		moveq	#0,d0
000103AE 1028 0024                  		move.b	$24(a0),d0
000103B2 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
000103B6 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
000103BA 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
000103C0 6100 B5AE                  		bsr.w	AnimateSprite
000103C4 6100 E54A                  		bsr.w	DisplaySprite
000103C8 3028 0008                  		move.w	8(a0),d0
000103CC 0240 FF80                  		andi.w	#$FF80,d0
000103D0 3238 F700                  		move.w	($FFFFF700).w,d1
000103D4 0441 0080                  		subi.w	#$80,d1
000103D8 0241 FF80                  		andi.w	#$FF80,d1
000103DC 9041                       		sub.w	d1,d0
000103DE 0C40 0280                  		cmpi.w	#$280,d0
000103E2 6300                       		bls.s	Obj0D_NoDel
000103E4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000103E8 6700 E576                  		beq.w	DeleteObject		; if it's zero, don't remember object
000103EC 3440                       		movea.w	d0,a2	; load address into a2
000103EE 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000103F2 6000 E56C                  		bra.w	DeleteObject	; and delete object
000103F6                            
000103F6                            Obj0D_NoDel:
000103F6 4E75                       		rts	
000103F8                            ; ===========================================================================
000103F8 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
000103FA 0000                       		dc.w Obj0D_Touch-Obj0D_Index
000103FC 0000                       		dc.w Obj0D_Spin-Obj0D_Index
000103FE 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00010400 0000                       		dc.w locret_ED1A-Obj0D_Index
00010402                            ; ===========================================================================
00010402                            
00010402                            Obj0D_Main:				; XREF: Obj0D_Index
00010402 5428 0024                  		addq.b	#2,$24(a0)
00010406 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0001040E 317C 0680 0002             		move.w	#$680,2(a0)
00010414 117C 0004 0001             		move.b	#4,1(a0)
0001041A 117C 0018 0019             		move.b	#$18,$19(a0)
00010420 117C 0004 0018             		move.b	#4,$18(a0)
00010426                            
00010426                            Obj0D_Touch:				; XREF: Obj0D_Index
00010426 3038 D008                  		move.w	($FFFFD008).w,d0
0001042A 9068 0008                  		sub.w	8(a0),d0
0001042E 6500                       		bcs.s	locret_EBBA
00010430 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010434 6400                       		bcc.s	locret_EBBA	; if not, branch
00010436 303C 00CF                  		move.w	#$CF,d0
0001043A 4EB9 0000 11F0             		jsr	(PlaySound).l	; play signpost	sound
00010440 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010444 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0001044A 5428 0024                  		addq.b	#2,$24(a0)
0001044E                            
0001044E                            locret_EBBA:
0001044E 4E75                       		rts	
00010450                            ; ===========================================================================
00010450                            
00010450                            Obj0D_Spin:				; XREF: Obj0D_Index
00010450 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00010454 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00010456 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0001045C 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00010460 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00010466 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00010468 5428 0024                  		addq.b	#2,$24(a0)
0001046C                            
0001046C                            Obj0D_Sparkle:
0001046C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00010470 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00010472 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00010478 7000                       		moveq	#0,d0
0001047A 1028 0034                  		move.b	$34(a0),d0
0001047E 5428 0034                  		addq.b	#2,$34(a0)
00010482 0228 000E 0034             		andi.b	#$E,$34(a0)
00010488 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0001048C 6100 EBD8                  		bsr.w	SingleObjLoad
00010490 6600                       		bne.s	locret_EC42
00010492 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00010496 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0001049C 101A                       		move.b	(a2)+,d0
0001049E 4880                       		ext.w	d0
000104A0 D068 0008                  		add.w	8(a0),d0
000104A4 3340 0008                  		move.w	d0,8(a1)
000104A8 101A                       		move.b	(a2)+,d0
000104AA 4880                       		ext.w	d0
000104AC D068 000C                  		add.w	$C(a0),d0
000104B0 3340 000C                  		move.w	d0,$C(a1)
000104B4 237C 0000 B21A 0004        		move.l	#Map_obj25,4(a1)
000104BC 337C 26BA 0002             		move.w	#($2000+ringart),2(a1)
000104C2 137C 0004 0001             		move.b	#4,1(a1)
000104C8 137C 0002 0018             		move.b	#2,$18(a1)
000104CE 137C 0008 0019             		move.b	#8,$19(a1)
000104D4                            
000104D4                            locret_EC42:
000104D4 4E75                       		rts	
000104D6                            ; ===========================================================================
000104D6 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
000104D8 0808                       		dc.b	8,   8
000104DA F000                       		dc.b -$10,   0
000104DC 18F8                       		dc.b  $18,  -8
000104DE 00F8                       		dc.b	0,  -8
000104E0 1000                       		dc.b  $10,   0
000104E2 E808                       		dc.b -$18,   8
000104E4 1810                       		dc.b  $18, $10
000104E6                            ; ===========================================================================
000104E6                            
000104E6                            Obj0D_SonicRun:				; XREF: Obj0D_Index
000104E6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000104EA 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
000104EE 0838 0001 D022             		btst	#1,($FFFFD022).w
000104F4 6600                       		bne.s	loc_EC70
000104F6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000104FC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00010502                            
00010502                            loc_EC70:
00010502 4A38 D000                  		tst.b	($FFFFD000).w
00010506 6700                       		beq.s	loc_EC86
00010508 3038 D008                  		move.w	($FFFFD008).w,d0
0001050C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00010510 0641 0128                  		addi.w	#$128,d1
00010514 B041                       		cmp.w	d1,d0
00010516 6500                       		bcs.s	locret_ECEE
00010518                            
00010518                            loc_EC86:
00010518 5428 0024                  		addq.b	#2,$24(a0)
0001051C                            
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            ; Subroutine to	set up bonuses at the end of an	act
0001051C                            ; ---------------------------------------------------------------------------
0001051C                            
0001051C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001051C                            
0001051C                            
0001051C                            GotThroughAct:				; XREF: Obj3E_EndAct
0001051C 4A38 D5C0                  		tst.b	($FFFFD5C0).w
00010520 6600                       		bne.s	locret_ECEE
00010522 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00010528 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001052C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00010530 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00010536 2F08                               move.l  a0,-(sp)            ; save object address to stack
00010538 23FC 7000 0002 00C0 0004           move.l  #$70000002,($C00004)        ; set mode "VRAM Write to $B000"
00010542 41F9 0000 0000                     lea Nem_TitleCard,a0        ; load title card patterns
00010548 203C 0000 0000                     move.l  #((Nem_TitleCard_End-Nem_TitleCard)/32)-1,d0; the title card art lenght, in tiles
0001054E 4EB8 1410                          jsr LoadUncArt          ; load uncompressed art
00010552 205F                               move.l  (sp)+,a0            ; get object address from stack
00010554 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0001055A 7000                       		moveq	#0,d0
0001055C 1038 FE23                  		move.b	($FFFFFE23).w,d0
00010560 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010564 7200                       		moveq	#0,d1
00010566 1238 FE24                  		move.b	($FFFFFE24).w,d1
0001056A D041                       		add.w	d1,d0		; add up your time
0001056C 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010570 7214                       		moveq	#$14,d1
00010572 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010574 6500                       		bcs.s	loc_ECD0	; if not, branch
00010576 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010578                            
00010578                            loc_ECD0:
00010578 D040                       		add.w	d0,d0
0001057A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
00010580 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
00010584 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010588 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0001058C 303C 008E                  		move.w	#$8E,d0
00010590 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
00010596                            
00010596                            locret_ECEE:
00010596 4E75                       		rts	
00010598                            ; End of function GotThroughAct
00010598                            
00010598                            ; ===========================================================================
00010598 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000105AC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000105C2                            ; ===========================================================================
000105C2                            
000105C2                            locret_ED1A:				; XREF: Obj0D_Index
000105C2 4E75                       		rts	
000105C4                            ; ===========================================================================
000105C4                            Ani_obj0D:
000105C4                            	include "_anim\obj0D.asm"
000105C4                            ; ---------------------------------------------------------------------------
000105C4                            ; Animation script - signpost
000105C4                            ; ---------------------------------------------------------------------------
000105C4 0000                       		dc.w byte_ED24-Ani_obj0D
000105C6 0000                       		dc.w byte_ED28-Ani_obj0D
000105C8 0000                       		dc.w byte_ED2E-Ani_obj0D
000105CA 0000                       		dc.w byte_ED34-Ani_obj0D
000105CC 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
000105D0 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
000105D6 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
000105DC 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
000105E0 00                         		even
000105E0 00                         		even
000105E0                            
000105E0                            ; ---------------------------------------------------------------------------
000105E0                            ; Sprite mappings - signpost
000105E0                            ; ---------------------------------------------------------------------------
000105E0                            Map_obj0D:
000105E0                            	include "_maps\obj0D.asm"
000105E0                            ; ---------------------------------------------------------------------------
000105E0                            ; Sprite mappings - signpost
000105E0                            ; ---------------------------------------------------------------------------
000105E0 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
000105E4 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
000105E8 0000                       		dc.w byte_ED73-Map_obj0D
000105EA 03                         byte_ED42:	dc.b 3
000105EB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
000105F0 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
000105F5 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000105FA 02                         byte_ED52:	dc.b 2
000105FB F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00010600 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00010605 02                         byte_ED5D:	dc.b 2
00010606 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0001060B 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00010610 02                         byte_ED68:	dc.b 2
00010611 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00010616 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0001061B 03                         byte_ED73:	dc.b 3
0001061C F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00010621 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00010626 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001062C 00                         		even
0001062C 00                         		even
0001062C                            
0001062C                            ; ===========================================================================
0001062C                            ; ---------------------------------------------------------------------------
0001062C                            ; Object 4C - lava geyser / lavafall producer (MZ)
0001062C                            ; ---------------------------------------------------------------------------
0001062C                            
0001062C                            Obj4C:					; XREF: Obj_Index
0001062C 7000                       		moveq	#0,d0
0001062E 1028 0024                  		move.b	$24(a0),d0
00010632 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00010636 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0001063A 6000 0000                  		bra.w	Obj4D_ChkDel
0001063E                            ; ===========================================================================
0001063E 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00010640 0000                       		dc.w loc_EDCC-Obj4C_Index
00010642 0000                       		dc.w loc_EE3E-Obj4C_Index
00010644 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00010646 0000                       		dc.w Obj4C_Display-Obj4C_Index
00010648 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0001064A                            ; ===========================================================================
0001064A                            
0001064A                            Obj4C_Main:				; XREF: Obj4C_Index
0001064A 5428 0024                  		addq.b	#2,$24(a0)
0001064E 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00010656 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0001065C 117C 0004 0001             		move.b	#4,1(a0)
00010662 117C 0001 0018             		move.b	#1,$18(a0)
00010668 117C 0038 0019             		move.b	#$38,$19(a0)
0001066E 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00010674                            
00010674                            loc_EDCC:				; XREF: Obj4C_Index
00010674 5368 0032                  		subq.w	#1,$32(a0)
00010678 6A00                       		bpl.s	locret_EDF0
0001067A 3168 0034 0032             		move.w	$34(a0),$32(a0)
00010680 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010684 3228 000C                  		move.w	$C(a0),d1
00010688 B041                       		cmp.w	d1,d0
0001068A 6400                       		bcc.s	locret_EDF0
0001068C 0441 0170                  		subi.w	#$170,d1
00010690 B041                       		cmp.w	d1,d0
00010692 6500                       		bcs.s	locret_EDF0
00010694 5428 0024                  		addq.b	#2,$24(a0)
00010698                            
00010698                            locret_EDF0:
00010698 4E75                       		rts	
0001069A                            ; ===========================================================================
0001069A                            
0001069A                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0001069A 5428 0024                  		addq.b	#2,$24(a0)
0001069E 6100 E9DC                  		bsr.w	SingleObjLoad2
000106A2 6600                       		bne.s	loc_EE18
000106A4 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
000106A8 3368 0008 0008             		move.w	8(a0),8(a1)
000106AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000106B4 1368 0028 0028             		move.b	$28(a0),$28(a1)
000106BA 2348 003C                  		move.l	a0,$3C(a1)
000106BE                            
000106BE                            loc_EE18:
000106BE 117C 0001 001C             		move.b	#1,$1C(a0)
000106C4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000106C8 6700                       		beq.s	Obj4C_Type00	; if yes, branch
000106CA 117C 0004 001C             		move.b	#4,$1C(a0)
000106D0 6000                       		bra.s	Obj4C_Display
000106D2                            ; ===========================================================================
000106D2                            
000106D2                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
000106D2 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
000106D6 08E9 0001 0022             		bset	#1,$22(a1)
000106DC 337C FA80 0012             		move.w	#-$580,$12(a1)
000106E2 6000                       		bra.s	Obj4C_Display
000106E4                            ; ===========================================================================
000106E4                            
000106E4                            loc_EE3E:				; XREF: Obj4C_Index
000106E4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
000106E8 6700                       		beq.s	Obj4C_Display	; if yes, branch
000106EA 5428 0024                  		addq.b	#2,$24(a0)
000106EE 4E75                       		rts	
000106F0                            ; ===========================================================================
000106F0                            
000106F0                            Obj4C_Display:				; XREF: Obj4C_Index
000106F0 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000106F6 6100 B278                  		bsr.w	AnimateSprite
000106FA 6100 E214                  		bsr.w	DisplaySprite
000106FE 4E75                       		rts	
00010700                            ; ===========================================================================
00010700                            
00010700                            Obj4C_Delete:				; XREF: Obj4C_Index
00010700 117C 0000 001C             		move.b	#0,$1C(a0)
00010706 117C 0002 0024             		move.b	#2,$24(a0)
0001070C 4A28 0028                  		tst.b	$28(a0)
00010710 6700 E24E                  		beq.w	DeleteObject
00010714 4E75                       		rts	
00010716                            ; ===========================================================================
00010716                            ; ---------------------------------------------------------------------------
00010716                            ; Object 4D - lava geyser / lavafall (MZ)
00010716                            ; ---------------------------------------------------------------------------
00010716                            
00010716                            Obj4D:					; XREF: Obj_Index
00010716 7000                       		moveq	#0,d0
00010718 1028 0024                  		move.b	$24(a0),d0
0001071C 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00010720 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
00010724 6000 E1EA                  		bra.w	DisplaySprite
00010728                            ; ===========================================================================
00010728 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0001072A 0000                       		dc.w Obj4D_Action-Obj4D_Index
0001072C 0000                       		dc.w loc_EFFC-Obj4D_Index
0001072E 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00010730                            
00010730 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
00010734                            ; ===========================================================================
00010734                            
00010734                            Obj4D_Main:				; XREF: Obj4D_Index
00010734 5428 0024                  		addq.b	#2,$24(a0)
00010738 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001073E 4A28 0028                  		tst.b	$28(a0)
00010742 6700                       		beq.s	loc_EEA4
00010744 0468 0250 000C             		subi.w	#$250,$C(a0)
0001074A                            
0001074A                            loc_EEA4:
0001074A 7000                       		moveq	#0,d0
0001074C 1028 0028                  		move.b	$28(a0),d0
00010750 D040                       		add.w	d0,d0
00010752 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010758 2248                       		movea.l	a0,a1
0001075A 7201                       		moveq	#1,d1
0001075C 6100                       		bsr.s	Obj4D_MakeLava
0001075E 6000                       		bra.s	loc_EF10
00010760                            ; ===========================================================================
00010760                            
00010760                            Obj4D_Loop:
00010760 6100 E91A                  		bsr.w	SingleObjLoad2
00010764 6600                       		bne.s	loc_EF0A
00010766                            
00010766                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010766 12BC 004D                  		move.b	#$4D,0(a1)
0001076A 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010772 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010778 137C 0004 0001             		move.b	#4,1(a1)
0001077E 137C 0020 0019             		move.b	#$20,$19(a1)
00010784 3368 0008 0008             		move.w	8(a0),8(a1)
0001078A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010790 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010796 137C 0001 0018             		move.b	#1,$18(a1)
0001079C 137C 0005 001C             		move.b	#5,$1C(a1)
000107A2 4A28 0028                  		tst.b	$28(a0)
000107A6 6700                       		beq.s	loc_EF0A
000107A8 137C 0002 001C             		move.b	#2,$1C(a1)
000107AE                            
000107AE                            loc_EF0A:
000107AE 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000107B2 4E75                       		rts	
000107B4                            ; ===========================================================================
000107B4                            
000107B4                            loc_EF10:				; XREF: Obj4D_Main
000107B4 0669 0060 000C             		addi.w	#$60,$C(a1)
000107BA 3368 0030 0030             		move.w	$30(a0),$30(a1)
000107C0 0669 0060 0030             		addi.w	#$60,$30(a1)
000107C6 137C 0093 0020             		move.b	#$93,$20(a1)
000107CC 137C 0080 0016             		move.b	#$80,$16(a1)
000107D2 08E9 0004 0001             		bset	#4,1(a1)
000107D8 5829 0024                  		addq.b	#4,$24(a1)
000107DC 2348 003C                  		move.l	a0,$3C(a1)
000107E0 4A28 0028                  		tst.b	$28(a0)
000107E4 6700                       		beq.s	Obj4D_PlaySnd
000107E6 7200                       		moveq	#0,d1
000107E8 6100 FF76                  		bsr.w	Obj4D_Loop
000107EC 5429 0024                  		addq.b	#2,$24(a1)
000107F0 08E9 0004 0002             		bset	#4,2(a1)
000107F6 0669 0100 000C             		addi.w	#$100,$C(a1)
000107FC 137C 0000 0018             		move.b	#0,$18(a1)
00010802 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010808 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0001080E 117C 0000 0028             		move.b	#0,$28(a0)
00010814                            
00010814                            Obj4D_PlaySnd:
00010814 303C 00C8                  		move.w	#$C8,d0
00010818 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flame sound
0001081E                            
0001081E                            Obj4D_Action:				; XREF: Obj4D_Index
0001081E 7000                       		moveq	#0,d0
00010820 1028 0028                  		move.b	$28(a0),d0
00010824 D040                       		add.w	d0,d0
00010826 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0001082A 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0001082E 6100 E0C6                  		bsr.w	SpeedToPos
00010832 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00010838 6100 B136                  		bsr.w	AnimateSprite
0001083C                            
0001083C                            Obj4D_ChkDel:				; XREF: Obj4C
0001083C 3028 0008                  		move.w	8(a0),d0
00010840 0240 FF80                  		andi.w	#$FF80,d0
00010844 3238 F700                  		move.w	($FFFFF700).w,d1
00010848 0441 0080                  		subi.w	#$80,d1
0001084C 0241 FF80                  		andi.w	#$FF80,d1
00010850 9041                       		sub.w	d1,d0
00010852 0C40 0280                  		cmpi.w	#$280,d0
00010856 6300                       		bls.s	Obj4D_NoDel
00010858 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001085C 6700 E102                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010860 3440                       		movea.w	d0,a2	; load address into a2
00010862 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010866 6000 E0F8                  		bra.w	DeleteObject	; and delete object
0001086A                            
0001086A                            Obj4D_NoDel:
0001086A 4E75                       		rts	
0001086C                            ; ===========================================================================
0001086C 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001086E 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010870                            ; ===========================================================================
00010870                            
00010870                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010870 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010876 3028 0030                  		move.w	$30(a0),d0
0001087A B068 000C                  		cmp.w	$C(a0),d0
0001087E 6400                       		bcc.s	locret_EFDA
00010880 5828 0024                  		addq.b	#4,$24(a0)
00010884 2268 003C                  		movea.l	$3C(a0),a1
00010888 137C 0003 001C             		move.b	#3,$1C(a1)
0001088E                            
0001088E                            locret_EFDA:
0001088E 4E75                       		rts	
00010890                            ; ===========================================================================
00010890                            
00010890                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010890 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010896 3028 0030                  		move.w	$30(a0),d0
0001089A B068 000C                  		cmp.w	$C(a0),d0
0001089E 6400                       		bcc.s	locret_EFFA
000108A0 5828 0024                  		addq.b	#4,$24(a0)
000108A4 2268 003C                  		movea.l	$3C(a0),a1
000108A8 137C 0001 001C             		move.b	#1,$1C(a1)
000108AE                            
000108AE                            locret_EFFA:
000108AE 4E75                       		rts	
000108B0                            ; ===========================================================================
000108B0                            
000108B0                            loc_EFFC:				; XREF: Obj4D_Index
000108B0 2268 003C                  		movea.l	$3C(a0),a1
000108B4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000108BA 6700 0000                  		beq.w	Obj4D_Delete
000108BE 3029 000C                  		move.w	$C(a1),d0
000108C2 0640 0060                  		addi.w	#$60,d0
000108C6 3140 000C                  		move.w	d0,$C(a0)
000108CA 9068 0030                  		sub.w	$30(a0),d0
000108CE 4440                       		neg.w	d0
000108D0 7208                       		moveq	#8,d1
000108D2 0C40 0040                  		cmpi.w	#$40,d0
000108D6 6C00                       		bge.s	loc_F026
000108D8 720B                       		moveq	#$B,d1
000108DA                            
000108DA                            loc_F026:
000108DA 0C40 0080                  		cmpi.w	#$80,d0
000108DE 6F00                       		ble.s	loc_F02E
000108E0 720E                       		moveq	#$E,d1
000108E2                            
000108E2                            loc_F02E:
000108E2 5328 001E                  		subq.b	#1,$1E(a0)
000108E6 6A00                       		bpl.s	loc_F04C
000108E8 117C 0007 001E             		move.b	#7,$1E(a0)
000108EE 5228 001B                  		addq.b	#1,$1B(a0)
000108F2 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
000108F8 6500                       		bcs.s	loc_F04C
000108FA 117C 0000 001B             		move.b	#0,$1B(a0)
00010900                            
00010900                            loc_F04C:
00010900 1028 001B                  		move.b	$1B(a0),d0
00010904 D001                       		add.b	d1,d0
00010906 1140 001A                  		move.b	d0,$1A(a0)
0001090A 6000 FF30                  		bra.w	Obj4D_ChkDel
0001090E                            ; ===========================================================================
0001090E                            
0001090E                            Obj4D_Delete:				; XREF: Obj4D_Index
0001090E 6000 E050                  		bra.w	DeleteObject
00010912                            ; ===========================================================================
00010912                            ; ---------------------------------------------------------------------------
00010912                            ; Object 4E - advancing	wall of	lava (MZ)
00010912                            ; ---------------------------------------------------------------------------
00010912                            
00010912                            Obj4E:					; XREF: Obj_Index
00010912 7000                       		moveq	#0,d0
00010914 1028 0024                  		move.b	$24(a0),d0
00010918 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0001091C 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010920                            ; ===========================================================================
00010920 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00010922 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00010924 0000                       		dc.w Obj4E_Action-Obj4E_Index
00010926 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00010928 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0001092A                            ; ===========================================================================
0001092A                            
0001092A                            Obj4E_Main:				; XREF: Obj4E_Index
0001092A 5828 0024                  		addq.b	#4,$24(a0)
0001092E 2248                       		movea.l	a0,a1
00010930 7201                       		moveq	#1,d1
00010932 6000                       		bra.s	Obj4E_Main2
00010934                            ; ===========================================================================
00010934                            
00010934                            Obj4E_Loop:
00010934 6100 E746                  		bsr.w	SingleObjLoad2
00010938 6600                       		bne.s	loc_F0C8
0001093A                            
0001093A                            Obj4E_Main2:				; XREF: Obj4E_Main
0001093A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0001093E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00010946 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001094C 137C 0004 0001             		move.b	#4,1(a1)
00010952 137C 0050 0019             		move.b	#$50,$19(a1)
00010958 3368 0008 0008             		move.w	8(a0),8(a1)
0001095E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010964 137C 0001 0018             		move.b	#1,$18(a1)
0001096A 137C 0000 001C             		move.b	#0,$1C(a1)
00010970 137C 0094 0020             		move.b	#$94,$20(a1)
00010976 2348 003C                  		move.l	a0,$3C(a1)
0001097A                            
0001097A                            loc_F0C8:
0001097A 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001097E                            
0001097E 5C29 0024                  		addq.b	#6,$24(a1)
00010982 137C 0004 001A             		move.b	#4,$1A(a1)
00010988                            
00010988                            Obj4E_Action:				; XREF: Obj4E_Index
00010988 3038 D008                  		move.w	($FFFFD008).w,d0
0001098C 9068 0008                  		sub.w	8(a0),d0
00010990 6400                       		bcc.s	Obj4E_ChkSonic
00010992 4440                       		neg.w	d0
00010994                            
00010994                            Obj4E_ChkSonic:
00010994 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010998 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001099A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001099E 9068 000C                  		sub.w	$C(a0),d0
000109A2 6400                       		bcc.s	loc_F0F4
000109A4 4440                       		neg.w	d0
000109A6                            
000109A6                            loc_F0F4:
000109A6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
000109AA 6400                       		bcc.s	Obj4E_Move	; if not, branch
000109AC 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000109B2 6000                       		bra.s	Obj4E_Solid
000109B4                            ; ===========================================================================
000109B4                            
000109B4                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000109B4 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000109B8 6700                       		beq.s	Obj4E_Solid	; if not, branch
000109BA 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
000109C0 5528 0024                  		subq.b	#2,$24(a0)
000109C4                            
000109C4                            Obj4E_Solid:				; XREF: Obj4E_Index
000109C4 323C 002B                  		move.w	#$2B,d1
000109C8 343C 0018                  		move.w	#$18,d2
000109CC 3602                       		move.w	d2,d3
000109CE 5243                       		addq.w	#1,d3
000109D0 3828 0008                  		move.w	8(a0),d4
000109D4 1028 0024                  		move.b	$24(a0),d0
000109D8 3F00                       		move.w	d0,-(sp)
000109DA 6100 0000                  		bsr.w	SolidObject
000109DE 301F                       		move.w	(sp)+,d0
000109E0 1140 0024                  		move.b	d0,$24(a0)
000109E4 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
000109EA 6600                       		bne.s	Obj4E_Animate	; if not, branch
000109EC 4268 0010                  		clr.w	$10(a0)		; stop object moving
000109F0 4228 0036                  		clr.b	$36(a0)
000109F4                            
000109F4                            Obj4E_Animate:
000109F4 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
000109FA 6100 AF74                  		bsr.w	AnimateSprite
000109FE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010A04 6400                       		bcc.s	Obj4E_ChkDel
00010A06 6100 DEEE                  		bsr.w	SpeedToPos
00010A0A                            
00010A0A                            Obj4E_ChkDel:
00010A0A 6100 DF04                  		bsr.w	DisplaySprite
00010A0E 4A28 0036                  		tst.b	$36(a0)
00010A12 6600                       		bne.s	locret_F17E
00010A14 3028 0008                  		move.w	8(a0),d0
00010A18 0240 FF80                  		andi.w	#$FF80,d0
00010A1C 3238 F700                  		move.w	($FFFFF700).w,d1
00010A20 0441 0080                  		subi.w	#$80,d1
00010A24 0241 FF80                  		andi.w	#$FF80,d1
00010A28 9041                       		sub.w	d1,d0
00010A2A 0C40 0280                  		cmpi.w	#$280,d0
00010A2E 6200                       		bhi.s	Obj4E_ChkGone
00010A30                            
00010A30                            locret_F17E:
00010A30 4E75                       		rts	
00010A32                            ; ===========================================================================
00010A32                            
00010A32                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00010A32 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010A36 3440                       		movea.w	d0,a2	; load address into a2
00010A38 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010A3C 117C 0008 0024             		move.b	#8,$24(a0)
00010A42 4E75                       		rts	
00010A44                            ; ===========================================================================
00010A44                            
00010A44                            Obj4E_Move2:				; XREF: Obj4E_Index
00010A44 2268 003C                  		movea.l	$3C(a0),a1
00010A48 0C29 0008 0024             		cmpi.b	#8,$24(a1)
00010A4E 6700                       		beq.s	Obj4E_Delete
00010A50 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
00010A56 0468 0080 0008             		subi.w	#$80,8(a0)
00010A5C 6000 DEB2                  		bra.w	DisplaySprite
00010A60                            ; ===========================================================================
00010A60                            
00010A60                            Obj4E_Delete:				; XREF: Obj4E_Index
00010A60 6000 DEFE                  		bra.w	DeleteObject
00010A64                            ; ===========================================================================
00010A64                            ; ---------------------------------------------------------------------------
00010A64                            ; Object 54 - invisible	lava tag (MZ)
00010A64                            ; ---------------------------------------------------------------------------
00010A64                            
00010A64                            Obj54:					; XREF: Obj_Index
00010A64 7000                       		moveq	#0,d0
00010A66 1028 0024                  		move.b	$24(a0),d0
00010A6A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010A6E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010A72                            ; ===========================================================================
00010A72 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010A74 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010A76                            
00010A76 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010A7A                            ; ===========================================================================
00010A7A                            
00010A7A                            Obj54_Main:				; XREF: Obj54_Index
00010A7A 5428 0024                  		addq.b	#2,$24(a0)
00010A7E 7000                       		moveq	#0,d0
00010A80 1028 0028                  		move.b	$28(a0),d0
00010A84 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010A8A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010A92 117C 0084 0001             		move.b	#$84,1(a0)
00010A98                            
00010A98                            Obj54_ChkDel:				; XREF: Obj54_Index
00010A98 3028 0008                  		move.w	8(a0),d0
00010A9C 0240 FF80                  		andi.w	#$FF80,d0
00010AA0 3238 F700                  		move.w	($FFFFF700).w,d1
00010AA4 0441 0080                  		subi.w	#$80,d1
00010AA8 0241 FF80                  		andi.w	#$FF80,d1
00010AAC 9041                       		sub.w	d1,d0
00010AAE 6B00 DEB0                  		bmi.w	DeleteObject
00010AB2 0C40 0280                  		cmpi.w	#$280,d0
00010AB6 6300                       		bls.s	Obj54_NoDel
00010AB8                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00010AB8                            	;	beq.w	DeleteObject		; if it's zero, don't remember object
00010AB8                            	;	movea.w	d0,a2	; load address into a2
00010AB8                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010AB8 6000 DEA6                  		bra.w	DeleteObject	; and delete object
00010ABC                            
00010ABC                            Obj54_NoDel:
00010ABC 4E75                       		rts	
00010ABE                            ; ===========================================================================
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            ; Sprite mappings - invisible lava tag (MZ)
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            Map_obj54:
00010ABE                            	include "_maps\obj54.asm"
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE                            ; Sprite mappings - invisible lava tag (MZ)
00010ABE                            ; ---------------------------------------------------------------------------
00010ABE 0000                       		dc.w byte_F212-Map_obj54
00010AC0 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010AC2 00                         		even
00010AC2 00                         		even
00010AC2                            
00010AC2                            Ani_obj4C:
00010AC2                            	include "_anim\obj4C.asm"
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2                            ; Animation script - geyser of lava (MZ)
00010AC2                            ; ---------------------------------------------------------------------------
00010AC2 0000                       		dc.w byte_F220-Ani_obj4C
00010AC4 0000                       		dc.w byte_F22A-Ani_obj4C
00010AC6 0000                       		dc.w byte_F22E-Ani_obj4C
00010AC8 0000                       		dc.w byte_F232-Ani_obj4C
00010ACA 0000                       		dc.w byte_F23A-Ani_obj4C
00010ACC 0000                       		dc.w byte_F23E-Ani_obj4C
00010ACE 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010AD8 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010ADC 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010AE0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010AE8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010AEC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010AF0                            		even
00010AF0                            		even
00010AF0                            
00010AF0                            Ani_obj4E:
00010AF0                            	include "_anim\obj4E.asm"
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            ; Animation script - advancing wall of lava (MZ)
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0 0000                       		dc.w byte_F244-Ani_obj4E
00010AF2 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010AF8                            		even
00010AF8                            		even
00010AF8                            
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8                            Map_obj4C:
00010AF8                            	include "_maps\obj4C.asm"
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010AF8                            ; ---------------------------------------------------------------------------
00010AF8 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00010AFC 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010B00 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010B04 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010B08 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00010B0C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00010B10 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010B14 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010B18 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00010B1C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00010B20 02                         byte_F272:	dc.b 2
00010B21 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00010B26 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00010B2B 02                         byte_F27D:	dc.b 2
00010B2C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00010B31 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00010B36 04                         byte_F288:	dc.b 4
00010B37 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B3C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B41 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B46 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B4B 04                         byte_F29D:	dc.b 4
00010B4C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010B51 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010B56 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010B5B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010B60 06                         byte_F2B2:	dc.b 6
00010B61 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00010B66 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00010B6B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010B70 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010B75 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00010B7A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010B7F 06                         byte_F2D1:	dc.b 6
00010B80 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010B85 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010B8A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010B8F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010B94 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010B99 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010B9E 02                         byte_F2F0:	dc.b 2
00010B9F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010BA4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010BA9 02                         byte_F2FB:	dc.b 2
00010BAA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010BAF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010BB4 0A                         byte_F306:	dc.b $A
00010BB5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010BBA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010BBF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010BC4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010BC9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010BCE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010BD3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010BD8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010BDD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010BE2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010BE7 0A                         byte_F339:	dc.b $A
00010BE8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010BED 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010BF2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010BF7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010BFC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010C01 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010C06 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010C0B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010C10 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010C15 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010C1A 0A                         byte_F36C:	dc.b $A
00010C1B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C20 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C25 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C2A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010C2F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010C34 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010C39 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010C3E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010C43 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010C48 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010C4D 06                         byte_F39F:	dc.b 6
00010C4E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010C53 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010C58 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010C5D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010C62 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010C67 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010C6C 06                         byte_F3BE:	dc.b 6
00010C6D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010C72 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010C77 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010C7C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010C81 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010C86 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010C8B 06                         byte_F3DD:	dc.b 6
00010C8C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010C91 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010C96 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010C9B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010CA0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010CA5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010CAA 10                         byte_F3FC:	dc.b $10
00010CAB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010CB0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010CB5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010CBA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010CBF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010CC4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010CC9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010CCE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010CD3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010CD8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010CDD 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010CE2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010CE7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010CEC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010CF1 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010CF6 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010CFB 10                         byte_F44D:	dc.b $10
00010CFC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010D01 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010D06 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010D0B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010D10 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010D15 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010D1A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010D1F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00010D24 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010D29 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010D2E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00010D33 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00010D38 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00010D3D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00010D42 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00010D47 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00010D4C 10                         byte_F49E:	dc.b $10
00010D4D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010D52 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010D57 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010D5C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010D61 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010D66 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010D6B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010D70 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010D75 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00010D7A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010D7F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010D84 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010D89 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010D8E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010D93 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010D98 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010D9D 06                         byte_F4EF:	dc.b 6
00010D9E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010DA3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010DA8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010DAD E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010DB2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010DB7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010DBC 06                         byte_F50E:	dc.b 6
00010DBD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010DC2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010DC7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010DCC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010DD1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010DD6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010DDB 00                         byte_F52D:	dc.b 0
00010DDC                            		even
00010DDC                            		even
00010DDC                            
00010DDC                            ; ---------------------------------------------------------------------------
00010DDC                            ; Sprite mappings - advancing wall of lava (MZ)
00010DDC                            ; ---------------------------------------------------------------------------
00010DDC                            Map_obj4E:
00010DDC                            	include "_maps\obj4E.asm"
00010DDC                            ; ---------------------------------------------------------------------------
00010DDC                            ; Sprite mappings - advancing wall of lava (MZ)
00010DDC                            ; ---------------------------------------------------------------------------
00010DDC 0000                       		dc.w byte_F538-Map_obj4E
00010DDE 0000                       		dc.w byte_F566-Map_obj4E
00010DE0 0000                       		dc.w byte_F594-Map_obj4E
00010DE2 0000                       		dc.w byte_F5C2-Map_obj4E
00010DE4 0000                       		dc.w byte_F5F0-Map_obj4E
00010DE6 09                         byte_F538:	dc.b 9
00010DE7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010DEC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010DF1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010DF6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010DFB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E00 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E05 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E0A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E0F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E14 09                         byte_F566:	dc.b 9
00010E15 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E1A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010E1F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E24 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E29 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E2E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E33 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E38 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E3D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E42 09                         byte_F594:	dc.b 9
00010E43 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00010E48 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010E4D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E52 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E57 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E5C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E61 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E66 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E6B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E70 09                         byte_F5C2:	dc.b 9
00010E71 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010E76 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010E7B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010E80 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010E85 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010E8A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010E8F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010E94 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010E99 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010E9E 08                         byte_F5F0:	dc.b 8
00010E9F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010EA4 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010EA9 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010EAE 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010EB3 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010EB8 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010EBD E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010EC2 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010EC8 00                         		even
00010EC8 00                         		even
00010EC8                            
00010EC8                            ; ===========================================================================
00010EC8                            ; ---------------------------------------------------------------------------
00010EC8                            ; Object 40 - Moto Bug enemy (GHZ)
00010EC8                            ; ---------------------------------------------------------------------------
00010EC8                            
00010EC8                            Obj40:					; XREF: Obj_Index
00010EC8 7000                       		moveq	#0,d0
00010ECA 1028 0024                  		move.b	$24(a0),d0
00010ECE 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010ED2 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010ED6                            ; ===========================================================================
00010ED6 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010ED8 0000                       		dc.w Obj40_Action-Obj40_Index
00010EDA 0000                       		dc.w Obj40_Animate-Obj40_Index
00010EDC 0000                       		dc.w Obj40_Delete-Obj40_Index
00010EDE                            ; ===========================================================================
00010EDE                            
00010EDE                            Obj40_Main:				; XREF: Obj40_Index
00010EDE 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010EE6 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010EEC 117C 0004 0001             		move.b	#4,1(a0)
00010EF2 117C 0004 0018             		move.b	#4,$18(a0)
00010EF8 117C 0014 0019             		move.b	#$14,$19(a0)
00010EFE 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010F02 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010F04 117C 000E 0016             		move.b	#$E,$16(a0)
00010F0A 117C 0008 0017             		move.b	#8,$17(a0)
00010F10 117C 000C 0020             		move.b	#$C,$20(a0)
00010F16 6100 D9BE                  		bsr.w	ObjectFall
00010F1A 4EB9 0000 0000             		jsr	ObjHitFloor
00010F20 4A41                       		tst.w	d1
00010F22 6A00                       		bpl.s	locret_F68A
00010F24 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010F28 317C 0000 0012             		move.w	#0,$12(a0)
00010F2E 5428 0024                  		addq.b	#2,$24(a0)
00010F32 0868 0000 0022             		bchg	#0,$22(a0)
00010F38                            
00010F38                            locret_F68A:
00010F38 4E75                       		rts	
00010F3A                            ; ===========================================================================
00010F3A                            
00010F3A                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010F3A 5828 0024                  		addq.b	#4,$24(a0)
00010F3E 6000 0000                  		bra.w	Obj40_Animate
00010F42                            ; ===========================================================================
00010F42                            
00010F42                            Obj40_Action:				; XREF: Obj40_Index
00010F42 7000                       		moveq	#0,d0
00010F44 1028 0025                  		move.b	$25(a0),d0
00010F48 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010F4C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010F50 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010F56 6100 AA18                  		bsr.w	AnimateSprite
00010F5A                            
00010F5A                            ; ---------------------------------------------------------------------------
00010F5A                            ; Routine to mark an enemy/monitor/ring	as destroyed
00010F5A                            ; ---------------------------------------------------------------------------
00010F5A                            
00010F5A                            MarkObjGone:
00010F5A 3028 0008                  		move.w	8(a0),d0
00010F5E 0240 FF80                  		andi.w	#$FF80,d0
00010F62 3238 F700                  		move.w	($FFFFF700).w,d1
00010F66 0441 0080                  		subi.w	#$80,d1
00010F6A 0241 FF80                  		andi.w	#$FF80,d1
00010F6E 9041                       		sub.w	d1,d0
00010F70 0C40 0280                  		cmpi.w	#$280,d0
00010F74 6200 0000                  		bhi.w	Mark_ChkGone
00010F78 6000 D996                  		bra.w	DisplaySprite
00010F7C                            ; ===========================================================================
00010F7C                            
00010F7C                            Mark_ChkGone:
00010F7C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00010F80 6700 D9DE                  		beq.w	DeleteObject	; if it's zero, don't remember object
00010F84 3440                       		movea.w	d0,a2	; load address into a2
00010F86 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00010F8A                            
00010F8A                            Mark_Delete:
00010F8A 6000 D9D4                  		bra.w	DeleteObject
00010F8E                            
00010F8E                            ; ===========================================================================
00010F8E 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010F90 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010F92                            ; ===========================================================================
00010F92                            
00010F92                            Obj40_Move:				; XREF: Obj40_Index2
00010F92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010F96 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010F98 5428 0025                  		addq.b	#2,$25(a0)
00010F9C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010FA2 117C 0001 001C             		move.b	#1,$1C(a0)
00010FA8 0868 0000 0022             		bchg	#0,$22(a0)
00010FAE 6600                       		bne.s	locret_F70A
00010FB0 4468 0010                  		neg.w	$10(a0)		; change direction
00010FB4                            
00010FB4                            locret_F70A:
00010FB4 4E75                       		rts	
00010FB6                            ; ===========================================================================
00010FB6                            
00010FB6                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010FB6 6100 D93E                  		bsr.w	SpeedToPos
00010FBA 4EB9 0000 0000             		jsr	ObjHitFloor
00010FC0 0C41 FFF8                  		cmpi.w	#-8,d1
00010FC4 6D00                       		blt.s	Obj40_Pause
00010FC6 0C41 000C                  		cmpi.w	#$C,d1
00010FCA 6C00                       		bge.s	Obj40_Pause
00010FCC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010FD0 5328 0033                  		subq.b	#1,$33(a0)
00010FD4 6A00                       		bpl.s	locret_F756
00010FD6 117C 000F 0033             		move.b	#$F,$33(a0)
00010FDC 6100 E088                  		bsr.w	SingleObjLoad
00010FE0 6600                       		bne.s	locret_F756
00010FE2 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010FE6 3368 0008 0008             		move.w	8(a0),8(a1)
00010FEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010FF2 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010FF8 137C 0002 001C             		move.b	#2,$1C(a1)
00010FFE                            
00010FFE                            locret_F756:
00010FFE 4E75                       		rts	
00011000                            ; ===========================================================================
00011000                            
00011000                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00011000 5528 0025                  		subq.b	#2,$25(a0)
00011004 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001100A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00011010 117C 0000 001C             		move.b	#0,$1C(a0)
00011016 4E75                       		rts	
00011018                            ; ===========================================================================
00011018                            
00011018                            Obj40_Animate:				; XREF: Obj40_Index
00011018 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001101E 6100 A950                  		bsr.w	AnimateSprite
00011022 6000 D8EC                  		bra.w	DisplaySprite
00011026                            ; ===========================================================================
00011026                            
00011026                            Obj40_Delete:				; XREF: Obj40_Index
00011026 6000 D938                  		bra.w	DeleteObject
0001102A                            ; ===========================================================================
0001102A                            Ani_obj40:
0001102A                            	include "_anim\obj40.asm"
0001102A                            ; ---------------------------------------------------------------------------
0001102A                            ; Animation script - Motobug enemy
0001102A                            ; ---------------------------------------------------------------------------
0001102A 0000                       		dc.w byte_F788-Ani_obj40
0001102C 0000                       		dc.w byte_F78C-Ani_obj40
0001102E 0000                       		dc.w byte_F792-Ani_obj40
00011030 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00011034 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001103A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00011048                            		even
00011048                            		even
00011048                            
00011048                            ; ---------------------------------------------------------------------------
00011048                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011048                            ; ---------------------------------------------------------------------------
00011048                            Map_obj40:
00011048                            	include "_maps\obj40.asm"
00011048                            ; ---------------------------------------------------------------------------
00011048                            ; Sprite mappings - Moto Bug enemy (GHZ)
00011048                            ; ---------------------------------------------------------------------------
00011048 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001104C 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00011050 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00011054 0000                       		dc.w byte_F804-Map_obj40
00011056 04                         byte_F7AE:	dc.b 4
00011057 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001105C 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00011061 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011066 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0001106B 04                         byte_F7C3:	dc.b 4
0001106C F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00011071 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00011076 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0001107B 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00011080 05                         byte_F7D8:	dc.b 5
00011081 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00011086 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0001108B F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00011090 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00011095 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0001109A 01                         byte_F7F2:	dc.b 1
0001109B FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000110A0 01                         byte_F7F8:	dc.b 1
000110A1 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000110A6 01                         byte_F7FE:	dc.b 1
000110A7 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000110AC 00                         byte_F804:	dc.b 0
000110AE 00                         		even
000110AE 00                         		even
000110AE                            
000110AE                            ; ===========================================================================
000110AE                            ; ---------------------------------------------------------------------------
000110AE                            ; Object 4F - blank
000110AE                            ; ---------------------------------------------------------------------------
000110AE                            
000110AE                            Obj4F:					; XREF: Obj_Index
000110AE 4E75                       		rts	
000110B0                            
000110B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110B0                            
000110B0                            
000110B0                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000110B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000110B4 D047                       		add.w	d7,d0
000110B6 0240 0003                  		andi.w	#3,d0
000110BA 6600                       		bne.s	loc_F836
000110BC 7600                       		moveq	#0,d3
000110BE 1628 0019                  		move.b	$19(a0),d3
000110C2 4A68 0010                  		tst.w	$10(a0)
000110C6 6B00                       		bmi.s	loc_F82C
000110C8 6100 0000                  		bsr.w	ObjHitWallRight
000110CC 4A41                       		tst.w	d1
000110CE 6A00                       		bpl.s	loc_F836
000110D0                            
000110D0                            loc_F828:
000110D0 7001                       		moveq	#1,d0
000110D2 4E75                       		rts	
000110D4                            ; ===========================================================================
000110D4                            
000110D4                            loc_F82C:
000110D4 4643                       		not.w	d3
000110D6 6100 0000                  		bsr.w	ObjHitWallLeft
000110DA 4A41                       		tst.w	d1
000110DC 6BF2                       		bmi.s	loc_F828
000110DE                            
000110DE                            loc_F836:
000110DE 7000                       		moveq	#0,d0
000110E0 4E75                       		rts	
000110E2                            ; End of function Obj50_ChkWall
000110E2                            
000110E2                            ; ===========================================================================
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            ; Object 50 - Yadrin enemy (SYZ)
000110E2                            ; ---------------------------------------------------------------------------
000110E2                            
000110E2                            Obj50:					; XREF: Obj_Index
000110E2 7000                       		moveq	#0,d0
000110E4 1028 0024                  		move.b	$24(a0),d0
000110E8 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000110EC 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000110F0                            ; ===========================================================================
000110F0 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000110F2 0000                       		dc.w Obj50_Action-Obj50_Index
000110F4                            ; ===========================================================================
000110F4                            
000110F4                            Obj50_Main:				; XREF: Obj50_Index
000110F4 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000110FC 317C 247B 0002             		move.w	#$247B,2(a0)
00011102 117C 0004 0001             		move.b	#4,1(a0)
00011108 117C 0004 0018             		move.b	#4,$18(a0)
0001110E 117C 0014 0019             		move.b	#$14,$19(a0)
00011114 117C 0011 0016             		move.b	#$11,$16(a0)
0001111A 117C 0008 0017             		move.b	#8,$17(a0)
00011120 117C 00CC 0020             		move.b	#$CC,$20(a0)
00011126 6100 D7AE                  		bsr.w	ObjectFall
0001112A 6100 0000                  		bsr.w	ObjHitFloor
0001112E 4A41                       		tst.w	d1
00011130 6A00                       		bpl.s	locret_F89E
00011132 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00011136 317C 0000 0012             		move.w	#0,$12(a0)
0001113C 5428 0024                  		addq.b	#2,$24(a0)
00011140 0868 0000 0022             		bchg	#0,$22(a0)
00011146                            
00011146                            locret_F89E:
00011146 4E75                       		rts	
00011148                            ; ===========================================================================
00011148                            
00011148                            Obj50_Action:				; XREF: Obj50_Index
00011148 7000                       		moveq	#0,d0
0001114A 1028 0025                  		move.b	$25(a0),d0
0001114E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00011152 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00011156 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001115C 6100 A812                  		bsr.w	AnimateSprite
00011160 6000 FDF8                  		bra.w	MarkObjGone
00011164                            ; ===========================================================================
00011164 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00011166 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj50_Move:				; XREF: Obj50_Index2
00011168 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001116C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001116E 5428 0025                  		addq.b	#2,$25(a0)
00011172 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00011178 117C 0001 001C             		move.b	#1,$1C(a0)
0001117E 0868 0000 0022             		bchg	#0,$22(a0)
00011184 6600                       		bne.s	locret_F8E2
00011186 4468 0010                  		neg.w	$10(a0)		; change direction
0001118A                            
0001118A                            locret_F8E2:
0001118A 4E75                       		rts	
0001118C                            ; ===========================================================================
0001118C                            
0001118C                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001118C 6100 D768                  		bsr.w	SpeedToPos
00011190 6100 0000                  		bsr.w	ObjHitFloor
00011194 0C41 FFF8                  		cmpi.w	#-8,d1
00011198 6D00                       		blt.s	Obj50_Pause
0001119A 0C41 000C                  		cmpi.w	#$C,d1
0001119E 6C00                       		bge.s	Obj50_Pause
000111A0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000111A4 6100 FF0A                  		bsr.w	Obj50_ChkWall
000111A8 6600                       		bne.s	Obj50_Pause
000111AA 4E75                       		rts	
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000111AC 5528 0025                  		subq.b	#2,$25(a0)
000111B0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000111B6 317C 0000 0010             		move.w	#0,$10(a0)
000111BC 117C 0000 001C             		move.b	#0,$1C(a0)
000111C2 4E75                       		rts	
000111C4                            ; ===========================================================================
000111C4                            Ani_obj50:
000111C4                            	include "_anim\obj50.asm"
000111C4                            ; ---------------------------------------------------------------------------
000111C4                            ; Animation script - Yadrin enemy
000111C4                            ; ---------------------------------------------------------------------------
000111C4 0000                       		dc.w byte_F920-Ani_obj50
000111C6 0000                       		dc.w byte_F924-Ani_obj50
000111C8 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000111CC 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000111D6                            		even
000111D6                            		even
000111D6                            
000111D6                            ; ---------------------------------------------------------------------------
000111D6                            ; Sprite mappings - Yadrin enemy (SYZ)
000111D6                            ; ---------------------------------------------------------------------------
000111D6                            Map_obj50:
000111D6                            	include "_maps\obj50.asm"
000111D6                            ; ---------------------------------------------------------------------------
000111D6                            ; Sprite mappings - Yadrin enemy (SYZ)
000111D6                            ; ---------------------------------------------------------------------------
000111D6 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
000111DA 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
000111DE 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
000111E2 05                         byte_F93A:	dc.b 5
000111E3 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000111E8 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000111ED EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000111F2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000111F7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000111FC 05                         byte_F954:	dc.b 5
000111FD F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011202 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011207 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001120C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011211 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011216 05                         byte_F96E:	dc.b 5
00011217 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001121C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00011221 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011226 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001122B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00011230 05                         byte_F988:	dc.b 5
00011231 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00011236 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001123B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011240 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011245 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001124A 05                         byte_F9A2:	dc.b 5
0001124B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00011250 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00011255 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001125A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001125F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00011264 05                         byte_F9BC:	dc.b 5
00011265 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001126A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001126F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00011274 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00011279 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001127E                            		even
0001127E                            		even
0001127E                            
0001127E                            ; ---------------------------------------------------------------------------
0001127E                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001127E                            ;
0001127E                            ; variables:
0001127E                            ; d1 = width
0001127E                            ; d2 = height /	2 (when	jumping)
0001127E                            ; d3 = height /	2 (when	walking)
0001127E                            ; d4 = x-axis position
0001127E                            ; ---------------------------------------------------------------------------
0001127E                            
0001127E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001127E                            
0001127E                            
0001127E                            SolidObject:
0001127E 4A28 0025                  		tst.b	$25(a0)
00011282 6700 0000                  		beq.w	loc_FAC8
00011286 3401                       		move.w	d1,d2
00011288 D442                       		add.w	d2,d2
0001128A 43F8 D000                  		lea	($FFFFD000).w,a1
0001128E 0829 0001 0022             		btst	#1,$22(a1)
00011294 6600                       		bne.s	loc_F9FE
00011296 3029 0008                  		move.w	8(a1),d0
0001129A 9068 0008                  		sub.w	8(a0),d0
0001129E D041                       		add.w	d1,d0
000112A0 6B00                       		bmi.s	loc_F9FE
000112A2 B042                       		cmp.w	d2,d0
000112A4 6500                       		bcs.s	loc_FA12
000112A6                            
000112A6                            loc_F9FE:
000112A6 08A9 0003 0022             		bclr	#3,$22(a1)
000112AC 08A8 0003 0022             		bclr	#3,$22(a0)
000112B2 4228 0025                  		clr.b	$25(a0)
000112B6 7800                       		moveq	#0,d4
000112B8 4E75                       		rts	
000112BA                            ; ===========================================================================
000112BA                            
000112BA                            loc_FA12:
000112BA 3404                       		move.w	d4,d2
000112BC 4EB9 0000 8BEE             		jsr	(MvSonicOnPtfm).l
000112C2 7800                       		moveq	#0,d4
000112C4 4E75                       		rts	
000112C6                            ; ===========================================================================
000112C6                            
000112C6                            SolidObject71:				; XREF: Obj71_Solid
000112C6 4A28 0025                  		tst.b	$25(a0)
000112CA 6700 0000                  		beq.w	loc_FAD0
000112CE 3401                       		move.w	d1,d2
000112D0 D442                       		add.w	d2,d2
000112D2 43F8 D000                  		lea	($FFFFD000).w,a1
000112D6 0829 0001 0022             		btst	#1,$22(a1)
000112DC 6600                       		bne.s	loc_FA44
000112DE 3029 0008                  		move.w	8(a1),d0
000112E2 9068 0008                  		sub.w	8(a0),d0
000112E6 D041                       		add.w	d1,d0
000112E8 6B00                       		bmi.s	loc_FA44
000112EA B042                       		cmp.w	d2,d0
000112EC 6500                       		bcs.s	loc_FA58
000112EE                            
000112EE                            loc_FA44:
000112EE 08A9 0003 0022             		bclr	#3,$22(a1)
000112F4 08A8 0003 0022             		bclr	#3,$22(a0)
000112FA 4228 0025                  		clr.b	$25(a0)
000112FE 7800                       		moveq	#0,d4
00011300 4E75                       		rts	
00011302                            ; ===========================================================================
00011302                            
00011302                            loc_FA58:
00011302 3404                       		move.w	d4,d2
00011304 4EB9 0000 8BEE             		jsr	(MvSonicOnPtfm).l
0001130A 7800                       		moveq	#0,d4
0001130C 4E75                       		rts	
0001130E                            ; ===========================================================================
0001130E                            
0001130E                            SolidObject2F:				; XREF: Obj2F_Solid
0001130E 43F8 D000                  		lea	($FFFFD000).w,a1
00011312 4A28 0001                  		tst.b	1(a0)
00011316 6A00 0000                  		bpl.w	loc_FB92
0001131A 3029 0008                  		move.w	8(a1),d0
0001131E 9068 0008                  		sub.w	8(a0),d0
00011322 D041                       		add.w	d1,d0
00011324 6B00 0000                  		bmi.w	loc_FB92
00011328 3601                       		move.w	d1,d3
0001132A D643                       		add.w	d3,d3
0001132C B043                       		cmp.w	d3,d0
0001132E 6200 0000                  		bhi.w	loc_FB92
00011332 3A00                       		move.w	d0,d5
00011334 0828 0000 0001             		btst	#0,1(a0)
0001133A 6700                       		beq.s	loc_FA94
0001133C 4645                       		not.w	d5
0001133E DA43                       		add.w	d3,d5
00011340                            
00011340                            loc_FA94:
00011340 E24D                       		lsr.w	#1,d5
00011342 7600                       		moveq	#0,d3
00011344 1632 5000                  		move.b	(a2,d5.w),d3
00011348 9612                       		sub.b	(a2),d3
0001134A 3A28 000C                  		move.w	$C(a0),d5
0001134E 9A43                       		sub.w	d3,d5
00011350 1629 0016                  		move.b	$16(a1),d3
00011354 4883                       		ext.w	d3
00011356 D443                       		add.w	d3,d2
00011358 3629 000C                  		move.w	$C(a1),d3
0001135C 9645                       		sub.w	d5,d3
0001135E 5843                       		addq.w	#4,d3
00011360 D642                       		add.w	d2,d3
00011362 6B00 0000                  		bmi.w	loc_FB92
00011366 3802                       		move.w	d2,d4
00011368 D844                       		add.w	d4,d4
0001136A B644                       		cmp.w	d4,d3
0001136C 6400 0000                  		bcc.w	loc_FB92
00011370 6000 0000                  		bra.w	loc_FB0E
00011374                            ; ===========================================================================
00011374                            
00011374                            loc_FAC8:
00011374 4A28 0001                  		tst.b	1(a0)
00011378 6A00 0000                  		bpl.w	loc_FB92
0001137C                            
0001137C                            loc_FAD0:
0001137C 43F8 D000                  		lea	($FFFFD000).w,a1
00011380 3029 0008                  		move.w	8(a1),d0
00011384 9068 0008                  		sub.w	8(a0),d0
00011388 D041                       		add.w	d1,d0
0001138A 6B00 0000                  		bmi.w	loc_FB92
0001138E 3601                       		move.w	d1,d3
00011390 D643                       		add.w	d3,d3
00011392 B043                       		cmp.w	d3,d0
00011394 6200 0000                  		bhi.w	loc_FB92
00011398 1629 0016                  		move.b	$16(a1),d3
0001139C 4883                       		ext.w	d3
0001139E D443                       		add.w	d3,d2
000113A0 3629 000C                  		move.w	$C(a1),d3
000113A4 9668 000C                  		sub.w	$C(a0),d3
000113A8 5843                       		addq.w	#4,d3
000113AA D642                       		add.w	d2,d3
000113AC 6B00 0000                  		bmi.w	loc_FB92
000113B0 3802                       		move.w	d2,d4
000113B2 D844                       		add.w	d4,d4
000113B4 B644                       		cmp.w	d4,d3
000113B6 6400 0000                  		bcc.w	loc_FB92
000113BA                            
000113BA                            loc_FB0E:
000113BA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000113BE 6B00 0000                  		bmi.w	loc_FB92
000113C2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000113C8 6400 0000                  		bcc.w	loc_FB92
000113CC 4A78 FE08                  		tst.w	($FFFFFE08).w
000113D0 6600 0000                  		bne.w	loc_FBAC
000113D4 3A00                       		move.w	d0,d5
000113D6 B240                       		cmp.w	d0,d1
000113D8 6400                       		bcc.s	loc_FB36
000113DA D241                       		add.w	d1,d1
000113DC 9041                       		sub.w	d1,d0
000113DE 3A00                       		move.w	d0,d5
000113E0 4445                       		neg.w	d5
000113E2                            
000113E2                            loc_FB36:
000113E2 3203                       		move.w	d3,d1
000113E4 B443                       		cmp.w	d3,d2
000113E6 6400                       		bcc.s	loc_FB44
000113E8 5943                       		subq.w	#4,d3
000113EA 9644                       		sub.w	d4,d3
000113EC 3203                       		move.w	d3,d1
000113EE 4441                       		neg.w	d1
000113F0                            
000113F0                            loc_FB44:
000113F0 BA41                       		cmp.w	d1,d5
000113F2 6200 0000                  		bhi.w	loc_FBB0
000113F6 0C41 0004                  		cmpi.w	#4,d1
000113FA 6300                       		bls.s	loc_FB8C
000113FC 4A40                       		tst.w	d0
000113FE 6700                       		beq.s	loc_FB70
00011400 6B00                       		bmi.s	loc_FB5E
00011402 4A69 0010                  		tst.w	$10(a1)
00011406 6B00                       		bmi.s	loc_FB70
00011408 6000                       		bra.s	loc_FB64
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            loc_FB5E:
0001140A 4A69 0010                  		tst.w	$10(a1)
0001140E 6A00                       		bpl.s	loc_FB70
00011410                            
00011410                            loc_FB64:
00011410 337C 0000 0020             		move.w	#0,$20(a1)	; stop Sonic moving
00011416 337C 0000 0010             		move.w	#0,$10(a1)
0001141C                            
0001141C                            loc_FB70:
0001141C 9169 0008                  		sub.w	d0,8(a1)
00011420 0829 0001 0022             		btst	#1,$22(a1)
00011426 6600                       		bne.s	loc_FB8C
00011428 08E9 0005 0022             		bset	#5,$22(a1)
0001142E 08E8 0005 0022             		bset	#5,$22(a0)
00011434 7801                       		moveq	#1,d4
00011436 4E75                       		rts	
00011438                            ; ===========================================================================
00011438                            
00011438                            loc_FB8C:
00011438 6100                       		bsr.s	loc_FBA0
0001143A 7801                       		moveq	#1,d4
0001143C 4E75                       		rts	
0001143E                            ; ===========================================================================
0001143E                            loc_FB92:
0001143E 0828 0005 0022             		btst	#5,$22(a0)
00011444 6700                       		beq.s	loc_FBAC
00011446 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0001144C 6700                       		beq.s	loc_FBA0
0001144E 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00011454 6700                       		beq.s	loc_FBA0
00011456 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
0001145C 6700                       		beq.s	loc_FBA0
0001145E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00011464                            
00011464                            loc_FBA0:
00011464 08A8 0005 0022             		bclr	#5,$22(a0)
0001146A 08A9 0005 0022             		bclr	#5,$22(a1)
00011470                            
00011470                            loc_FBAC:
00011470 7800                       		moveq	#0,d4
00011472 4E75                       		rts	
00011474                            ; ===========================================================================
00011474                            
00011474                            loc_FBB0:
00011474 4A43                       		tst.w	d3
00011476 6B00                       		bmi.s	loc_FBBC
00011478 0C43 0010                  		cmpi.w	#$10,d3
0001147C 6500                       		bcs.s	loc_FBEE
0001147E 60BE                       		bra.s	loc_FB92
00011480                            ; ===========================================================================
00011480                            
00011480                            loc_FBBC:
00011480 4A69 0012                  		tst.w	$12(a1)
00011484 6700                       		beq.s	loc_FBD6
00011486 6A00                       		bpl.s	loc_FBD2
00011488 4A43                       		tst.w	d3
0001148A 6A00                       		bpl.s	loc_FBD2
0001148C 9769 000C                  		sub.w	d3,$C(a1)
00011490 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00011496                            
00011496                            loc_FBD2:
00011496 78FF                       		moveq	#-1,d4
00011498 4E75                       		rts	
0001149A                            ; ===========================================================================
0001149A                            
0001149A                            loc_FBD6:
0001149A 0829 0001 0022             		btst	#1,$22(a1)
000114A0 66F4                       		bne.s	loc_FBD2
000114A2 2F08                       		move.l	a0,-(sp)
000114A4 2049                       		movea.l	a1,a0
000114A6 4EB9 0000 0000             		jsr	KillSonic
000114AC 205F                       		movea.l	(sp)+,a0
000114AE 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
000114B4 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
000114BA 78FF                       		moveq	#-1,d4
000114BC 4E75                       		rts	
000114BE                            ; ===========================================================================
000114BE                            
000114BE                            loc_FBEE:
000114BE 5943                       		subq.w	#4,d3
000114C0 7200                       		moveq	#0,d1
000114C2 1228 0019                  		move.b	$19(a0),d1
000114C6 3401                       		move.w	d1,d2
000114C8 D442                       		add.w	d2,d2
000114CA D269 0008                  		add.w	8(a1),d1
000114CE 9268 0008                  		sub.w	8(a0),d1
000114D2 6B00                       		bmi.s	loc_FC28
000114D4 B242                       		cmp.w	d2,d1
000114D6 6400                       		bcc.s	loc_FC28
000114D8 4A69 0012                  		tst.w	$12(a1)
000114DC 6B00                       		bmi.s	loc_FC28
000114DE 9769 000C                  		sub.w	d3,$C(a1)
000114E2 5369 000C                  		subq.w	#1,$C(a1)
000114E6 6100                       		bsr.s	sub_FC2C
000114E8 117C 0002 0025             		move.b	#2,$25(a0)
000114EE 08E8 0003 0022             		bset	#3,$22(a0)
000114F4 78FF                       		moveq	#-1,d4
000114F6 4E75                       		rts	
000114F8                            ; ===========================================================================
000114F8                            
000114F8                            loc_FC28:
000114F8 7800                       		moveq	#0,d4
000114FA 4E75                       		rts	
000114FC                            ; End of function SolidObject
000114FC                            
000114FC                            
000114FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114FC                            
000114FC                            
000114FC                            sub_FC2C:				; XREF: SolidObject
000114FC 0829 0003 0022             		btst	#3,$22(a1)
00011502 6700                       		beq.s	loc_FC4E
00011504 7000                       		moveq	#0,d0
00011506 1029 003D                  		move.b	$3D(a1),d0
0001150A ED48                       		lsl.w	#6,d0
0001150C 0680 00FF D000             		addi.l	#$FFD000,d0
00011512 2440                       		movea.l	d0,a2
00011514 08AA 0003 0022             		bclr	#3,$22(a2)
0001151A 422A 0025                  		clr.b	$25(a2)
0001151E                            
0001151E                            loc_FC4E:
0001151E 3008                       		move.w	a0,d0
00011520 0440 D000                  		subi.w	#-$3000,d0
00011524 EC48                       		lsr.w	#6,d0
00011526 0240 007F                  		andi.w	#$7F,d0
0001152A 1340 003D                  		move.b	d0,$3D(a1)
0001152E 137C 0000 0026             		move.b	#0,$26(a1)
00011534 337C 0000 0012             		move.w	#0,$12(a1)
0001153A 3369 0010 0020             		move.w	$10(a1),$20(a1)
00011540 0829 0001 0022             		btst	#1,$22(a1)
00011546 6700                       		beq.s	loc_FC84
00011548 2F08                       		move.l	a0,-(sp)
0001154A 2049                       		movea.l	a1,a0
0001154C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00011552 205F                       		movea.l	(sp)+,a0
00011554                            
00011554                            loc_FC84:
00011554 08E9 0003 0022             		bset	#3,$22(a1)
0001155A 08E8 0003 0022             		bset	#3,$22(a0)
00011560 4E75                       		rts	
00011562                            ; End of function sub_FC2C
00011562                            
00011562                            ; ===========================================================================
00011562                            ; ---------------------------------------------------------------------------
00011562                            ; Object 51 - smashable	green block (MZ)
00011562                            ; ---------------------------------------------------------------------------
00011562                            
00011562                            Obj51:					; XREF: Obj_Index
00011562 7000                       		moveq	#0,d0
00011564 1028 0024                  		move.b	$24(a0),d0
00011568 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001156C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00011570 6000 F9E8                  		bra.w	MarkObjGone
00011574                            ; ===========================================================================
00011574 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00011576 0000                       		dc.w Obj51_Solid-Obj51_Index
00011578 0000                       		dc.w Obj51_Display-Obj51_Index
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            Obj51_Main:				; XREF: Obj51_Index
0001157A 5428 0024                  		addq.b	#2,$24(a0)
0001157E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00011586 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001158C 117C 0004 0001             		move.b	#4,1(a0)
00011592 117C 0010 0019             		move.b	#$10,$19(a0)
00011598 117C 0004 0018             		move.b	#4,$18(a0)
0001159E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000115A4                            
000115A4                            Obj51_Solid:				; XREF: Obj51_Index
000115A4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000115AA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000115B0 323C 001B                  		move.w	#$1B,d1
000115B4 343C 0010                  		move.w	#$10,d2
000115B8 363C 0011                  		move.w	#$11,d3
000115BC 3828 0008                  		move.w	8(a0),d4
000115C0 6100 FCBC                  		bsr.w	SolidObject
000115C4 0828 0003 0022             		btst	#3,$22(a0)
000115CA 6600                       		bne.s	Obj51_Smash
000115CC                            
000115CC                            locret_FCFC:
000115CC 4E75                       		rts	
000115CE                            ; ===========================================================================
000115CE                            
000115CE                            Obj51_Smash:				; XREF: Obj51_Solid
000115CE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000115D4 66F6                       		bne.s	locret_FCFC	; if not, branch
000115D6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000115DC 08E9 0002 0022             		bset	#2,$22(a1)
000115E2 137C 000E 0016             		move.b	#$E,$16(a1)
000115E8 137C 0007 0017             		move.b	#7,$17(a1)
000115EE 137C 0002 001C             		move.b	#2,$1C(a1)
000115F4 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000115FA 08E9 0001 0022             		bset	#1,$22(a1)
00011600 08A9 0003 0022             		bclr	#3,$22(a1)
00011606 137C 0002 0024             		move.b	#2,$24(a1)
0001160C 08A8 0003 0022             		bclr	#3,$22(a0)
00011612 4228 0025                  		clr.b	$25(a0)
00011616 117C 0001 001A             		move.b	#1,$1A(a0)
0001161C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00011622 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011624 343C 0038                  		move.w	#$38,d2
00011628 6100 CEE4                  		bsr.w	SmashObject
0001162C 6100 DA38                  		bsr.w	SingleObjLoad
00011630 6600                       		bne.s	Obj51_Display
00011632 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00011636 3368 0008 0008             		move.w	8(a0),8(a1)
0001163C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011642 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00011646 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001164A 0C42 0006                  		cmpi.w	#6,d2
0001164E 6500                       		bcs.s	Obj51_Bonus
00011650 7406                       		moveq	#6,d2
00011652                            
00011652                            Obj51_Bonus:
00011652 7000                       		moveq	#0,d0
00011654 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00011658 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001165E 6500                       		bcs.s	loc_FD98	; if not, branch
00011660 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011664 740A                       		moveq	#10,d2
00011666                            
00011666                            loc_FD98:
00011666 4EB9 0000 0000             		jsr	AddPoints
0001166C E24A                       		lsr.w	#1,d2
0001166E 1342 001A                  		move.b	d2,$1A(a1)
00011672                            
00011672                            Obj51_Display:				; XREF: Obj51_Index
00011672 6100 D282                  		bsr.w	SpeedToPos
00011676 0668 0038 0012             		addi.w	#$38,$12(a0)
0001167C 6100 D292                  		bsr.w	DisplaySprite
00011680 4A28 0001                  		tst.b	1(a0)
00011684 6A00 D2DA                  		bpl.w	DeleteObject
00011688 4E75                       		rts	
0001168A                            ; ===========================================================================
0001168A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001168E FF00 FF00                  		dc.w $FF00, $FF00
00011692 0200 FE00                  		dc.w $200, $FE00
00011696 0100 FF00                  		dc.w $100, $FF00
0001169A                            
0001169A 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000116A2                            ; ---------------------------------------------------------------------------
000116A2                            ; Sprite mappings - smashable green block (MZ)
000116A2                            ; ---------------------------------------------------------------------------
000116A2                            Map_obj51:
000116A2                            	include "_maps\obj51.asm"
000116A2                            ; ---------------------------------------------------------------------------
000116A2                            ; Sprite mappings - smashable green block (MZ)
000116A2                            ; ---------------------------------------------------------------------------
000116A2 0000                       		dc.w byte_FDD8-Map_obj51
000116A4 0000                       		dc.w byte_FDE3-Map_obj51
000116A6 02                         byte_FDD8:	dc.b 2
000116A7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000116AC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000116B1 04                         byte_FDE3:	dc.b 4
000116B2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000116B7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000116BC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000116C1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000116C6                            		even
000116C6                            		even
000116C6                            
000116C6                            ; ===========================================================================
000116C6                            ; ---------------------------------------------------------------------------
000116C6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000116C6                            ; ---------------------------------------------------------------------------
000116C6                            
000116C6                            Obj52:					; XREF: Obj_Index
000116C6 7000                       		moveq	#0,d0
000116C8 1028 0024                  		move.b	$24(a0),d0
000116CC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000116D0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000116D4                            ; ===========================================================================
000116D4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000116D6 0000                       		dc.w Obj52_Platform-Obj52_Index
000116D8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000116DA                            
000116DA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000116DC 2001                       		dc.b $20, 1
000116DE 2002                       		dc.b $20, 2
000116E0 4003                       		dc.b $40, 3
000116E2 3004                       		dc.b $30, 4
000116E4                            ; ===========================================================================
000116E4                            
000116E4                            Obj52_Main:				; XREF: Obj52_Index
000116E4 5428 0024                  		addq.b	#2,$24(a0)
000116E8 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000116F0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000116F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000116FC 6600                       		bne.s	loc_FE44
000116FE 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011706 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001170C 117C 0007 0016             		move.b	#7,$16(a0)
00011712                            
00011712                            loc_FE44:
00011712 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011718 6600                       		bne.s	loc_FE60
0001171A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00011720 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00011726 6700                       		beq.s	loc_FE60	; if yes, branch
00011728 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001172E                            
0001172E                            loc_FE60:
0001172E 117C 0004 0001             		move.b	#4,1(a0)
00011734 7000                       		moveq	#0,d0
00011736 1028 0028                  		move.b	$28(a0),d0
0001173A E648                       		lsr.w	#3,d0
0001173C 0240 001E                  		andi.w	#$1E,d0
00011740 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00011744 115A 0019                  		move.b	(a2)+,$19(a0)
00011748 115A 001A                  		move.b	(a2)+,$1A(a0)
0001174C 117C 0004 0018             		move.b	#4,$18(a0)
00011752 3168 0008 0030             		move.w	8(a0),$30(a0)
00011758 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001175E 0228 000F 0028             		andi.b	#$F,$28(a0)
00011764                            
00011764                            Obj52_Platform:				; XREF: Obj52_Index
00011764 6100 0000                  		bsr.w	Obj52_Move
00011768 7200                       		moveq	#0,d1
0001176A 1228 0019                  		move.b	$19(a0),d1
0001176E 4EB9 0000 8510             		jsr	(PlatformObject).l
00011774 6000                       		bra.s	Obj52_ChkDel
00011776                            ; ===========================================================================
00011776                            
00011776                            Obj52_StandOn:				; XREF: Obj52_Index
00011776 7200                       		moveq	#0,d1
00011778 1228 0019                  		move.b	$19(a0),d1
0001177C 4EB9 0000 8684             		jsr	(ExitPlatform).l
00011782 3F28 0008                  		move.w	8(a0),-(sp)
00011786 6100 0000                  		bsr.w	Obj52_Move
0001178A 341F                       		move.w	(sp)+,d2
0001178C 4EB9 0000 8BFA             		jsr	(MvSonicOnPtfm2).l
00011792                            
00011792                            Obj52_ChkDel:				; XREF: Obj52_Platform
00011792 3028 0030                  		move.w	$30(a0),d0
00011796 0240 FF80                  		andi.w	#$FF80,d0
0001179A 3238 F700                  		move.w	($FFFFF700).w,d1
0001179E 0441 0080                  		subi.w	#$80,d1
000117A2 0241 FF80                  		andi.w	#$FF80,d1
000117A6 9041                       		sub.w	d1,d0
000117A8 0C40 0280                  		cmpi.w	#$280,d0
000117AC 6300 D162                  		bls.w	DisplaySprite
000117B0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000117B4 6700 D1AA                  		beq.w	DeleteObject		; if it's zero, don't remember object
000117B8 3440                       		movea.w	d0,a2	; load address into a2
000117BA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000117BE 6000 D1A0                  		bra.w	DeleteObject	; and delete object
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000117C2 7000                       		moveq	#0,d0
000117C4 1028 0028                  		move.b	$28(a0),d0
000117C8 0240 000F                  		andi.w	#$F,d0
000117CC D040                       		add.w	d0,d0
000117CE 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000117D2 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000117D6                            ; ===========================================================================
000117D6 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000117DA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000117DE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000117E2 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000117E6 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000117EA 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000117EC                            ; ===========================================================================
000117EC                            
000117EC                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000117EC 4E75                       		rts	
000117EE                            ; ===========================================================================
000117EE                            
000117EE                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000117EE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000117F2 323C 0060                  		move.w	#$60,d1
000117F6 0828 0000 0022             		btst	#0,$22(a0)
000117FC 6700                       		beq.s	loc_FF26
000117FE 4440                       		neg.w	d0
00011800 D041                       		add.w	d1,d0
00011802                            
00011802                            loc_FF26:
00011802 3228 0030                  		move.w	$30(a0),d1
00011806 9240                       		sub.w	d0,d1
00011808 3141 0008                  		move.w	d1,8(a0)
0001180C 4E75                       		rts	
0001180E                            ; ===========================================================================
0001180E                            
0001180E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001180E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011814 6600                       		bne.s	Obj52_02_Wait
00011816 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001181A                            
0001181A                            Obj52_02_Wait:
0001181A 4E75                       		rts	
0001181C                            ; ===========================================================================
0001181C                            
0001181C                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001181C 7600                       		moveq	#0,d3
0001181E 1628 0019                  		move.b	$19(a0),d3
00011822 6100 0000                  		bsr.w	ObjHitWallRight
00011826 4A41                       		tst.w	d1		; has the platform hit a wall?
00011828 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001182A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001182E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011834 4E75                       		rts	
00011836                            ; ===========================================================================
00011836                            
00011836                            Obj52_03_End:
00011836 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001183A 4E75                       		rts	
0001183C                            ; ===========================================================================
0001183C                            
0001183C                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001183C 7600                       		moveq	#0,d3
0001183E 1628 0019                  		move.b	$19(a0),d3
00011842 6100 0000                  		bsr.w	ObjHitWallRight
00011846 4A41                       		tst.w	d1		; has the platform hit a wall?
00011848 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001184A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001184E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011854 4E75                       		rts	
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj52_05_End:
00011856 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001185A 4E75                       		rts	
0001185C                            ; ===========================================================================
0001185C                            
0001185C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001185C 6100 D098                  		bsr.w	SpeedToPos
00011860 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00011866 6100 0000                  		bsr.w	ObjHitFloor
0001186A 4A41                       		tst.w	d1		; has platform hit the floor?
0001186C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011870 D368 000C                  		add.w	d1,$C(a0)
00011874 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00011878 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001187C                            
0001187C                            locret_FFA0:
0001187C 4E75                       		rts	
0001187E                            ; ===========================================================================
0001187E                            
0001187E                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001187E 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00011882 6700                       		beq.s	Obj52_07_ChkDel
00011884 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00011888                            
00011888                            Obj52_07_ChkDel:
00011888 588F                       		addq.l	#4,sp
0001188A 3028 0030                  		move.w	$30(a0),d0
0001188E 0240 FF80                  		andi.w	#$FF80,d0
00011892 3238 F700                  		move.w	($FFFFF700).w,d1
00011896 0441 0080                  		subi.w	#$80,d1
0001189A 0241 FF80                  		andi.w	#$FF80,d1
0001189E 9041                       		sub.w	d1,d0
000118A0 0C40 0280                  		cmpi.w	#$280,d0
000118A4 6200 D0BA                  		bhi.w	DeleteObject
000118A8 4E75                       		rts	
000118AA                            ; ===========================================================================
000118AA                            
000118AA                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000118AA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000118AE 323C 0080                  		move.w	#$80,d1
000118B2 0828 0000 0022             		btst	#0,$22(a0)
000118B8 6700                       		beq.s	loc_FFE2
000118BA 4440                       		neg.w	d0
000118BC D041                       		add.w	d1,d0
000118BE                            
000118BE                            loc_FFE2:
000118BE 3228 0032                  		move.w	$32(a0),d1
000118C2 9240                       		sub.w	d0,d1
000118C4 3141 000C                  		move.w	d1,$C(a0)
000118C8 4E75                       		rts	
000118CA                            ; ===========================================================================
000118CA                            
000118CA                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000118CA 7600                       		moveq	#0,d3
000118CC 1628 0019                  		move.b	$19(a0),d3
000118D0 D643                       		add.w	d3,d3
000118D2 7208                       		moveq	#8,d1
000118D4 0828 0000 0022             		btst	#0,$22(a0)
000118DA 6700                       		beq.s	loc_10004
000118DC 4441                       		neg.w	d1
000118DE 4443                       		neg.w	d3
000118E0                            
000118E0                            loc_10004:
000118E0 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000118E4 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000118E6 3028 0008                  		move.w	8(a0),d0
000118EA 9068 0030                  		sub.w	$30(a0),d0
000118EE B043                       		cmp.w	d3,d0
000118F0 6700                       		beq.s	Obj52_0A_Wait
000118F2 D368 0008                  		add.w	d1,8(a0)	; move platform
000118F6 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000118FC 4E75                       		rts	
000118FE                            ; ===========================================================================
000118FE                            
000118FE                            Obj52_0A_Wait:
000118FE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011902 6600                       		bne.s	locret_1002E	; if time remains, branch
00011904 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001190A                            
0001190A                            locret_1002E:
0001190A 4E75                       		rts	
0001190C                            ; ===========================================================================
0001190C                            
0001190C                            Obj52_0A_Back:
0001190C 3028 0008                  		move.w	8(a0),d0
00011910 9068 0030                  		sub.w	$30(a0),d0
00011914 6700                       		beq.s	Obj52_0A_Reset
00011916 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001191A 4E75                       		rts	
0001191C                            ; ===========================================================================
0001191C                            
0001191C                            Obj52_0A_Reset:
0001191C 4268 0036                  		clr.w	$36(a0)
00011920 5328 0028                  		subq.b	#1,$28(a0)
00011924 4E75                       		rts	
00011926                            ; ===========================================================================
00011926                            ; ---------------------------------------------------------------------------
00011926                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011926                            ; ---------------------------------------------------------------------------
00011926                            Map_obj52:
00011926                            	include "_maps\obj52mz.asm"
00011926                            ; ---------------------------------------------------------------------------
00011926                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011926                            ; ---------------------------------------------------------------------------
00011926 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001192A 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001192E 0000                       		dc.w byte_1008F-Map_obj52
00011930 01                         byte_10054:	dc.b 1
00011931 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011936 02                         byte_1005A:	dc.b 2
00011937 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001193C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00011941 04                         byte_10065:	dc.b 4
00011942 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00011947 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001194C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00011951 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00011956 04                         byte_1007A:	dc.b 4
00011957 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001195C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00011961 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00011966 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001196B 03                         byte_1008F:	dc.b 3
0001196C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00011971 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011976 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001197C 00                         		even
0001197C 00                         		even
0001197C                            
0001197C                            ; ---------------------------------------------------------------------------
0001197C                            ; Sprite mappings - moving block (LZ)
0001197C                            ; ---------------------------------------------------------------------------
0001197C                            Map_obj52a:
0001197C                            	include "_maps\obj52lz.asm"
0001197C                            ; ---------------------------------------------------------------------------
0001197C                            ; Sprite mappings - moving block (LZ)
0001197C                            ; ---------------------------------------------------------------------------
0001197C 0000                       		dc.w byte_100A2-Map_obj52a
0001197E 01                         byte_100A2:	dc.b 1
0001197F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00011984                            		even
00011984                            		even
00011984                            
00011984                            ; ===========================================================================
00011984                            ; ---------------------------------------------------------------------------
00011984                            ; Object 55 - Basaran enemy (MZ)
00011984                            ; ---------------------------------------------------------------------------
00011984                            
00011984                            Obj55:					; XREF: Obj_Index
00011984 7000                       		moveq	#0,d0
00011986 1028 0024                  		move.b	$24(a0),d0
0001198A 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001198E 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011992                            ; ===========================================================================
00011992 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011994 0000                       		dc.w Obj55_Action-Obj55_Index
00011996                            ; ===========================================================================
00011996                            
00011996                            Obj55_Main:				; XREF: Obj55_Index
00011996 5428 0024                  		addq.b	#2,$24(a0)
0001199A 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000119A2 317C 84B8 0002             		move.w	#$84B8,2(a0)
000119A8 117C 0004 0001             		move.b	#4,1(a0)
000119AE 117C 000C 0016             		move.b	#$C,$16(a0)
000119B4 117C 0002 0018             		move.b	#2,$18(a0)
000119BA 117C 000B 0020             		move.b	#$B,$20(a0)
000119C0 117C 0010 0019             		move.b	#$10,$19(a0)
000119C6                            
000119C6                            Obj55_Action:				; XREF: Obj55_Index
000119C6 7000                       		moveq	#0,d0
000119C8 1028 0025                  		move.b	$25(a0),d0
000119CC 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000119D0 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000119D4 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000119DA 6100 9F94                  		bsr.w	AnimateSprite
000119DE 6000 F57A                  		bra.w	MarkObjGone
000119E2                            ; ===========================================================================
000119E2 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000119E4 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000119E6 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000119E8 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000119EA                            ; ===========================================================================
000119EA                            
000119EA                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000119EA 343C 0080                  		move.w	#$80,d2
000119EE 6100 0000                  		bsr.w	Obj55_ChkSonic
000119F2 6400                       		bcc.s	Obj55_NoDrop
000119F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000119F8 3140 0036                  		move.w	d0,$36(a0)
000119FC 9068 000C                  		sub.w	$C(a0),d0
00011A00 6500                       		bcs.s	Obj55_NoDrop
00011A02 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011A06 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011A08 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011A0C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00011A0E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A12 D007                       		add.b	d7,d0
00011A14 0200 0007                  		andi.b	#7,d0
00011A18 6600                       		bne.s	Obj55_NoDrop
00011A1A 117C 0001 001C             		move.b	#1,$1C(a0)
00011A20 5428 0025                  		addq.b	#2,$25(a0)
00011A24                            
00011A24                            Obj55_NoDrop:
00011A24 4E75                       		rts	
00011A26                            ; ===========================================================================
00011A26                            
00011A26                            Obj55_DropFly:				; XREF: Obj55_Index2
00011A26 6100 CECE                  		bsr.w	SpeedToPos
00011A2A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00011A30 343C 0080                  		move.w	#$80,d2
00011A34 6100 0000                  		bsr.w	Obj55_ChkSonic
00011A38 3028 0036                  		move.w	$36(a0),d0
00011A3C 9068 000C                  		sub.w	$C(a0),d0
00011A40 6500                       		bcs.s	Obj55_ChkDel
00011A42 0C40 0010                  		cmpi.w	#$10,d0
00011A46 6400                       		bcc.s	locret_10180
00011A48 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00011A4C 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00011A52 117C 0002 001C             		move.b	#2,$1C(a0)
00011A58 5428 0025                  		addq.b	#2,$25(a0)
00011A5C                            
00011A5C                            locret_10180:
00011A5C 4E75                       		rts	
00011A5E                            ; ===========================================================================
00011A5E                            
00011A5E                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00011A5E 4A28 0001                  		tst.b	1(a0)
00011A62 6A00 CEFC                  		bpl.w	DeleteObject
00011A66 4E75                       		rts	
00011A68                            ; ===========================================================================
00011A68                            
00011A68                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00011A68 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A6C 0200 000F                  		andi.b	#$F,d0
00011A70 6600                       		bne.s	loc_101A0
00011A72 303C 00C0                  		move.w	#$C0,d0
00011A76 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play flapping sound
00011A7C                            
00011A7C                            loc_101A0:
00011A7C 6100 CE78                  		bsr.w	SpeedToPos
00011A80 3038 D008                  		move.w	($FFFFD008).w,d0
00011A84 9068 0008                  		sub.w	8(a0),d0
00011A88 6400                       		bcc.s	loc_101B0
00011A8A 4440                       		neg.w	d0
00011A8C                            
00011A8C                            loc_101B0:
00011A8C 0C40 0080                  		cmpi.w	#$80,d0
00011A90 6500                       		bcs.s	locret_101C6
00011A92 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A96 D007                       		add.b	d7,d0
00011A98 0200 0007                  		andi.b	#7,d0
00011A9C 6600                       		bne.s	locret_101C6
00011A9E 5428 0025                  		addq.b	#2,$25(a0)
00011AA2                            
00011AA2                            locret_101C6:
00011AA2 4E75                       		rts	
00011AA4                            ; ===========================================================================
00011AA4                            
00011AA4                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011AA4 6100 CE50                  		bsr.w	SpeedToPos
00011AA8 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00011AAE 6100 0000                  		bsr.w	ObjHitCeiling
00011AB2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011AB4 6A00                       		bpl.s	locret_101F4	; if not, branch
00011AB6 9368 000C                  		sub.w	d1,$C(a0)
00011ABA 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011AC0 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011AC4 4268 0012                  		clr.w	$12(a0)
00011AC8 4228 001C                  		clr.b	$1C(a0)
00011ACC 4228 0025                  		clr.b	$25(a0)
00011AD0                            
00011AD0                            locret_101F4:
00011AD0 4E75                       		rts	
00011AD2                            ; ===========================================================================
00011AD2                            
00011AD2                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011AD2 323C 0100                  		move.w	#$100,d1
00011AD6 08E8 0000 0022             		bset	#0,$22(a0)
00011ADC 3038 D008                  		move.w	($FFFFD008).w,d0
00011AE0 9068 0008                  		sub.w	8(a0),d0
00011AE4 6400                       		bcc.s	loc_10214
00011AE6 4440                       		neg.w	d0
00011AE8 4441                       		neg.w	d1
00011AEA 08A8 0000 0022             		bclr	#0,$22(a0)
00011AF0                            
00011AF0                            loc_10214:
00011AF0 B042                       		cmp.w	d2,d0
00011AF2 4E75                       		rts	
00011AF4                            ; ===========================================================================
00011AF4 6100 CE00                  		bsr.w	SpeedToPos
00011AF8 6100 CE16                  		bsr.w	DisplaySprite
00011AFC 4A28 0001                  		tst.b	1(a0)
00011B00 6A00 CE5E                  		bpl.w	DeleteObject
00011B04 4E75                       		rts	
00011B06                            ; ===========================================================================
00011B06                            Ani_obj55:
00011B06                            	include "_anim\obj55.asm"
00011B06                            ; ---------------------------------------------------------------------------
00011B06                            ; Animation script - Basaran enemy
00011B06                            ; ---------------------------------------------------------------------------
00011B06 0000                       		dc.w byte_10230-Ani_obj55
00011B08 0000                       		dc.w byte_10234-Ani_obj55
00011B0A 0000                       		dc.w byte_10238-Ani_obj55
00011B0C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011B10 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011B14 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011B1A                            		even
00011B1A                            		even
00011B1A                            
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            ; Sprite mappings - Basaran enemy (MZ)
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            Map_obj55:
00011B1A                            	include "_maps\obj55.asm"
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A                            ; Sprite mappings - Basaran enemy (MZ)
00011B1A                            ; ---------------------------------------------------------------------------
00011B1A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00011B1E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011B22 01                         byte_10246:	dc.b 1
00011B23 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011B28 03                         byte_1024C:	dc.b 3
00011B29 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00011B2E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00011B33 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011B38 04                         byte_1025C:	dc.b 4
00011B39 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00011B3E 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00011B43 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00011B48 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00011B4D 04                         byte_10271:	dc.b 4
00011B4E F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00011B53 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00011B58 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00011B5D FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00011B62                            		even
00011B62                            		even
00011B62                            
00011B62                            ; ===========================================================================
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            
00011B62                            Obj56:					; XREF: Obj_Index
00011B62 7000                       		moveq	#0,d0
00011B64 1028 0024                  		move.b	$24(a0),d0
00011B68 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00011B6C 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00011B70                            ; ===========================================================================
00011B70 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00011B72 0000                       		dc.w Obj56_Action-Obj56_Index
00011B74                            
00011B74 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00011B76 2020                       		dc.b  $20, $20
00011B78 1020                       		dc.b  $10, $20
00011B7A 201A                       		dc.b  $20, $1A
00011B7C 1027                       		dc.b  $10, $27
00011B7E 1010                       		dc.b  $10, $10
00011B80 0820                       		dc.b	8, $20
00011B82 4010                       		dc.b  $40, $10
00011B84                            ; ===========================================================================
00011B84                            
00011B84                            Obj56_Main:				; XREF: Obj56_Index
00011B84 5428 0024                  		addq.b	#2,$24(a0)
00011B88 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011B90 317C 4000 0002             		move.w	#$4000,2(a0)
00011B96 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011B9C 6600                       		bne.s	loc_102C8
00011B9E 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011BA4                            
00011BA4                            loc_102C8:
00011BA4 117C 0004 0001             		move.b	#4,1(a0)
00011BAA 117C 0003 0018             		move.b	#3,$18(a0)
00011BB0 7000                       		moveq	#0,d0
00011BB2 1028 0028                  		move.b	$28(a0),d0
00011BB6 E648                       		lsr.w	#3,d0
00011BB8 0240 000E                  		andi.w	#$E,d0
00011BBC 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011BC0 115A 0019                  		move.b	(a2)+,$19(a0)
00011BC4 1152 0016                  		move.b	(a2),$16(a0)
00011BC8 E248                       		lsr.w	#1,d0
00011BCA 1140 001A                  		move.b	d0,$1A(a0)
00011BCE 3168 0008 0034             		move.w	8(a0),$34(a0)
00011BD4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011BDA 7000                       		moveq	#0,d0
00011BDC 1012                       		move.b	(a2),d0
00011BDE D040                       		add.w	d0,d0
00011BE0 3140 003A                  		move.w	d0,$3A(a0)
00011BE4 7000                       		moveq	#0,d0
00011BE6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011BEC 6700                       		beq.s	loc_10332
00011BEE 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011BF2 0240 000F                  		andi.w	#$F,d0
00011BF6 5140                       		subq.w	#8,d0
00011BF8 6500                       		bcs.s	loc_10332
00011BFA E548                       		lsl.w	#2,d0
00011BFC 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011C00 45F2 0000                  		lea	(a2,d0.w),a2
00011C04 4A52                       		tst.w	(a2)
00011C06 6A00                       		bpl.s	loc_10332
00011C08 0868 0000 0022             		bchg	#0,$22(a0)
00011C0E                            
00011C0E                            loc_10332:
00011C0E 1028 0028                  		move.b	$28(a0),d0
00011C12 6A00                       		bpl.s	Obj56_Action
00011C14 0200 000F                  		andi.b	#$F,d0
00011C18 1140 003C                  		move.b	d0,$3C(a0)
00011C1C 117C 0005 0028             		move.b	#5,$28(a0)
00011C22 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011C28 6600                       		bne.s	Obj56_ChkGone
00011C2A 117C 000C 0028             		move.b	#$C,$28(a0)
00011C30 317C 0080 003A             		move.w	#$80,$3A(a0)
00011C36                            
00011C36                            Obj56_ChkGone:
00011C36 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011C3A 6700                       		beq.s	Obj56_Action		; if it's zero, don't remember object
00011C3C 3440                       		movea.w	d0,a2	; load address into a2
00011C3E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00011C42 0812 0000                  		btst	#0,(a2)
00011C46 6700                       		beq.s	Obj56_Action
00011C48 5228 0028                  		addq.b	#1,$28(a0)
00011C4C 4268 003A                  		clr.w	$3A(a0)
00011C50                            
00011C50                            Obj56_Action:				; XREF: Obj56_Index
00011C50 3F28 0008                  		move.w	8(a0),-(sp)
00011C54 7000                       		moveq	#0,d0
00011C56 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C5A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00011C5E D040                       		add.w	d0,d0
00011C60 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00011C64 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00011C68 381F                       		move.w	(sp)+,d4
00011C6A 4A28 0001                  		tst.b	1(a0)
00011C6E 6A00                       		bpl.s	Obj56_ChkDel
00011C70 7200                       		moveq	#0,d1
00011C72 1228 0019                  		move.b	$19(a0),d1
00011C76 0641 000B                  		addi.w	#$B,d1
00011C7A 7400                       		moveq	#0,d2
00011C7C 1428 0016                  		move.b	$16(a0),d2
00011C80 3602                       		move.w	d2,d3
00011C82 5243                       		addq.w	#1,d3
00011C84 6100 F5F8                  		bsr.w	SolidObject
00011C88                            
00011C88                            Obj56_ChkDel:
00011C88 3028 0034                  		move.w	$34(a0),d0
00011C8C 0240 FF80                  		andi.w	#$FF80,d0
00011C90 3238 F700                  		move.w	($FFFFF700).w,d1
00011C94 0441 0080                  		subi.w	#$80,d1
00011C98 0241 FF80                  		andi.w	#$FF80,d1
00011C9C 9041                       		sub.w	d1,d0
00011C9E 0C40 0280                  		cmpi.w	#$280,d0
00011CA2 6300 CC6C                  		bls.w	DisplaySprite
00011CA6 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011CAA 6700 CCB4                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00011CAE 3440                       		movea.w	d0,a2	; load address into a2
00011CB0 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00011CB4 6000 CCAA                  		bra.w	DeleteObject
00011CB8                            ; ===========================================================================
00011CB8 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011CBC 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011CC0 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00011CC4 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011CC8 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011CCC 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011CD0 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00011CD4                            ; ===========================================================================
00011CD4                            
00011CD4                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00011CD4 4E75                       		rts	
00011CD6                            ; ===========================================================================
00011CD6                            
00011CD6                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011CD6 323C 0040                  		move.w	#$40,d1
00011CDA 7000                       		moveq	#0,d0
00011CDC 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011CE0 6000                       		bra.s	Obj56_Move_LR
00011CE2                            ; ===========================================================================
00011CE2                            
00011CE2                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011CE2 323C 0080                  		move.w	#$80,d1
00011CE6 7000                       		moveq	#0,d0
00011CE8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011CEC                            
00011CEC                            Obj56_Move_LR:
00011CEC 0828 0000 0022             		btst	#0,$22(a0)
00011CF2 6700                       		beq.s	loc_10416
00011CF4 4440                       		neg.w	d0
00011CF6 D041                       		add.w	d1,d0
00011CF8                            
00011CF8                            loc_10416:
00011CF8 3228 0034                  		move.w	$34(a0),d1
00011CFC 9240                       		sub.w	d0,d1
00011CFE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011D02 4E75                       		rts	
00011D04                            ; ===========================================================================
00011D04                            
00011D04                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00011D04 323C 0040                  		move.w	#$40,d1
00011D08 7000                       		moveq	#0,d0
00011D0A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011D0E 6000                       		bra.s	Obj56_Move_UD
00011D10                            ; ===========================================================================
00011D10                            
00011D10                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011D10 323C 0080                  		move.w	#$80,d1
00011D14 7000                       		moveq	#0,d0
00011D16 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011D1A                            
00011D1A                            Obj56_Move_UD:
00011D1A 0828 0000 0022             		btst	#0,$22(a0)
00011D20 6700                       		beq.s	loc_10444
00011D22 4440                       		neg.w	d0
00011D24 D041                       		add.w	d1,d0
00011D26                            
00011D26                            loc_10444:
00011D26 3228 0030                  		move.w	$30(a0),d1
00011D2A 9240                       		sub.w	d0,d1
00011D2C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011D30 4E75                       		rts	
00011D32                            ; ===========================================================================
00011D32                            
00011D32                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011D32 4A28 0038                  		tst.b	$38(a0)
00011D36 6600                       		bne.s	loc_104A4
00011D38 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D3E 6600                       		bne.s	loc_1047A	; if not, branch
00011D40 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00011D46 6600                       		bne.s	loc_1047A
00011D48 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D4C 3038 D008                  		move.w	($FFFFD008).w,d0
00011D50 B068 0008                  		cmp.w	8(a0),d0
00011D54 6400                       		bcc.s	loc_1047A
00011D56 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00011D5C                            
00011D5C                            loc_1047A:
00011D5C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011D60 7000                       		moveq	#0,d0
00011D62 1028 003C                  		move.b	$3C(a0),d0
00011D66 0832 0000 0000             		btst	#0,(a2,d0.w)
00011D6C 6700                       		beq.s	loc_104AE
00011D6E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011D74 6600                       		bne.s	loc_1049E	; if not, branch
00011D76 0C00 0003                  		cmpi.b	#3,d0
00011D7A 6600                       		bne.s	loc_1049E
00011D7C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011D80                            
00011D80                            loc_1049E:
00011D80 117C 0001 0038             		move.b	#1,$38(a0)
00011D86                            
00011D86                            loc_104A4:
00011D86 4A68 003A                  		tst.w	$3A(a0)
00011D8A 6700                       		beq.s	loc_104C8
00011D8C 5568 003A                  		subq.w	#2,$3A(a0)
00011D90                            
00011D90                            loc_104AE:
00011D90 3028 003A                  		move.w	$3A(a0),d0
00011D94 0828 0000 0022             		btst	#0,$22(a0)
00011D9A 6700                       		beq.s	loc_104BC
00011D9C 4440                       		neg.w	d0
00011D9E                            
00011D9E                            loc_104BC:
00011D9E 3228 0030                  		move.w	$30(a0),d1
00011DA2 D240                       		add.w	d0,d1
00011DA4 3141 000C                  		move.w	d1,$C(a0)
00011DA8 4E75                       		rts	
00011DAA                            ; ===========================================================================
00011DAA                            
00011DAA                            loc_104C8:
00011DAA 5228 0028                  		addq.b	#1,$28(a0)
00011DAE 4228 0038                  		clr.b	$38(a0)
00011DB2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011DB6 67D8                       		beq.s	loc_104AE		; if it's zero, don't remember object
00011DB8 3440                       		movea.w	d0,a2	; load address into a2
00011DBA 08D2 0000                  		bset	#0,(a2)
00011DBE 60D0                       		bra.s	loc_104AE
00011DC0                            ; ===========================================================================
00011DC0                            
00011DC0                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011DC0 4A28 0038                  		tst.b	$38(a0)
00011DC4 6600                       		bne.s	loc_10500
00011DC6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011DCA 7000                       		moveq	#0,d0
00011DCC 1028 003C                  		move.b	$3C(a0),d0
00011DD0 4A32 0000                  		tst.b	(a2,d0.w)
00011DD4 6A00                       		bpl.s	loc_10512
00011DD6 117C 0001 0038             		move.b	#1,$38(a0)
00011DDC                            
00011DDC                            loc_10500:
00011DDC 7000                       		moveq	#0,d0
00011DDE 1028 0016                  		move.b	$16(a0),d0
00011DE2 D040                       		add.w	d0,d0
00011DE4 B068 003A                  		cmp.w	$3A(a0),d0
00011DE8 6700                       		beq.s	loc_1052C
00011DEA 5468 003A                  		addq.w	#2,$3A(a0)
00011DEE                            
00011DEE                            loc_10512:
00011DEE 3028 003A                  		move.w	$3A(a0),d0
00011DF2 0828 0000 0022             		btst	#0,$22(a0)
00011DF8 6700                       		beq.s	loc_10520
00011DFA 4440                       		neg.w	d0
00011DFC                            
00011DFC                            loc_10520:
00011DFC 3228 0030                  		move.w	$30(a0),d1
00011E00 D240                       		add.w	d0,d1
00011E02 3141 000C                  		move.w	d1,$C(a0)
00011E06 4E75                       		rts	
00011E08                            ; ===========================================================================
00011E08                            
00011E08                            loc_1052C:
00011E08 5328 0028                  		subq.b	#1,$28(a0)
00011E0C 4228 0038                  		clr.b	$38(a0)
00011E10 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011E14 67D8                       		beq.s	loc_10512		; if it's zero, don't remember object
00011E16 3440                       		movea.w	d0,a2	; load address into a2
00011E18 0892 0000                  		bclr	#0,(a2)
00011E1C 60D0                       		bra.s	loc_10512
00011E1E                            ; ===========================================================================
00011E1E                            
00011E1E                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011E1E 4A28 0038                  		tst.b	$38(a0)
00011E22 6600                       		bne.s	loc_1055E
00011E24 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011E28 6700                       		beq.s	locret_10578
00011E2A 117C 0001 0038             		move.b	#1,$38(a0)
00011E30 4268 003A                  		clr.w	$3A(a0)
00011E34                            
00011E34                            loc_1055E:
00011E34 5268 0008                  		addq.w	#1,8(a0)
00011E38 3168 0008 0034             		move.w	8(a0),$34(a0)
00011E3E 5268 003A                  		addq.w	#1,$3A(a0)
00011E42 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00011E48 6600                       		bne.s	locret_10578
00011E4A 4228 0028                  		clr.b	$28(a0)
00011E4E                            
00011E4E                            locret_10578:
00011E4E 4E75                       		rts	
00011E50                            ; ===========================================================================
00011E50                            
00011E50                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011E50 4A28 0038                  		tst.b	$38(a0)
00011E54 6600                       		bne.s	loc_10598
00011E56 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011E5A 7000                       		moveq	#0,d0
00011E5C 1028 003C                  		move.b	$3C(a0),d0
00011E60 0832 0000 0000             		btst	#0,(a2,d0.w)
00011E66 6700                       		beq.s	loc_105A2
00011E68 117C 0001 0038             		move.b	#1,$38(a0)
00011E6E                            
00011E6E                            loc_10598:
00011E6E 4A68 003A                  		tst.w	$3A(a0)
00011E72 6700                       		beq.s	loc_105C0
00011E74 5568 003A                  		subq.w	#2,$3A(a0)
00011E78                            
00011E78                            loc_105A2:
00011E78 3028 003A                  		move.w	$3A(a0),d0
00011E7C 0828 0000 0022             		btst	#0,$22(a0)
00011E82 6700                       		beq.s	loc_105B4
00011E84 4440                       		neg.w	d0
00011E86 0640 0080                  		addi.w	#$80,d0
00011E8A                            
00011E8A                            loc_105B4:
00011E8A 3228 0034                  		move.w	$34(a0),d1
00011E8E D240                       		add.w	d0,d1
00011E90 3141 0008                  		move.w	d1,8(a0)
00011E94 4E75                       		rts	
00011E96                            ; ===========================================================================
00011E96                            
00011E96                            loc_105C0:
00011E96 5228 0028                  		addq.b	#1,$28(a0)
00011E9A 4228 0038                  		clr.b	$38(a0)
00011E9E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011EA2 67D4                       		beq.s	loc_105A2		; if it's zero, don't remember object
00011EA4 3440                       		movea.w	d0,a2	; load address into a2
00011EA6 08D2 0000                  		bset	#0,(a2)
00011EAA 60CC                       		bra.s	loc_105A2
00011EAC                            ; ===========================================================================
00011EAC                            
00011EAC                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011EAC 4A28 0038                  		tst.b	$38(a0)
00011EB0 6600                       		bne.s	loc_105F8
00011EB2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011EB6 7000                       		moveq	#0,d0
00011EB8 1028 003C                  		move.b	$3C(a0),d0
00011EBC 4A32 0000                  		tst.b	(a2,d0.w)
00011EC0 6A00                       		bpl.s	loc_10606
00011EC2 117C 0001 0038             		move.b	#1,$38(a0)
00011EC8                            
00011EC8                            loc_105F8:
00011EC8 303C 0080                  		move.w	#$80,d0
00011ECC B068 003A                  		cmp.w	$3A(a0),d0
00011ED0 6700                       		beq.s	loc_10624
00011ED2 5468 003A                  		addq.w	#2,$3A(a0)
00011ED6                            
00011ED6                            loc_10606:
00011ED6 3028 003A                  		move.w	$3A(a0),d0
00011EDA 0828 0000 0022             		btst	#0,$22(a0)
00011EE0 6700                       		beq.s	loc_10618
00011EE2 4440                       		neg.w	d0
00011EE4 0640 0080                  		addi.w	#$80,d0
00011EE8                            
00011EE8                            loc_10618:
00011EE8 3228 0034                  		move.w	$34(a0),d1
00011EEC D240                       		add.w	d0,d1
00011EEE 3141 0008                  		move.w	d1,8(a0)
00011EF2 4E75                       		rts	
00011EF4                            ; ===========================================================================
00011EF4                            
00011EF4                            loc_10624:
00011EF4 5328 0028                  		subq.b	#1,$28(a0)
00011EF8 4228 0038                  		clr.b	$38(a0)
00011EFC 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00011F00 67D4                       		beq.s	loc_10606		; if it's zero, don't remember object
00011F02 3440                       		movea.w	d0,a2	; load address into a2
00011F04 0892 0000                  		bclr	#0,(a2)
00011F08 60CC                       		bra.s	loc_10606
00011F0A                            ; ===========================================================================
00011F0A                            
00011F0A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011F0A 323C 0010                  		move.w	#$10,d1
00011F0E 7000                       		moveq	#0,d0
00011F10 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011F14 E248                       		lsr.w	#1,d0
00011F16 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011F1A 6000                       		bra.s	Obj56_Move_Sqr
00011F1C                            ; ===========================================================================
00011F1C                            
00011F1C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011F1C 323C 0030                  		move.w	#$30,d1
00011F20 7000                       		moveq	#0,d0
00011F22 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011F26 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011F2A 6000                       		bra.s	Obj56_Move_Sqr
00011F2C                            ; ===========================================================================
00011F2C                            
00011F2C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011F2C 323C 0050                  		move.w	#$50,d1
00011F30 7000                       		moveq	#0,d0
00011F32 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011F36 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011F3A 6000                       		bra.s	Obj56_Move_Sqr
00011F3C                            ; ===========================================================================
00011F3C                            
00011F3C                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00011F3C 323C 0070                  		move.w	#$70,d1
00011F40 7000                       		moveq	#0,d0
00011F42 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011F46 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011F4A                            
00011F4A                            Obj56_Move_Sqr:
00011F4A 4A43                       		tst.w	d3
00011F4C 6600                       		bne.s	loc_1068E
00011F4E 5228 0022                  		addq.b	#1,$22(a0)
00011F52 0228 0003 0022             		andi.b	#3,$22(a0)
00011F58                            
00011F58                            loc_1068E:
00011F58 1428 0022                  		move.b	$22(a0),d2
00011F5C 0202 0003                  		andi.b	#3,d2
00011F60 6600                       		bne.s	loc_106AE
00011F62 9041                       		sub.w	d1,d0
00011F64 D068 0034                  		add.w	$34(a0),d0
00011F68 3140 0008                  		move.w	d0,8(a0)
00011F6C 4441                       		neg.w	d1
00011F6E D268 0030                  		add.w	$30(a0),d1
00011F72 3141 000C                  		move.w	d1,$C(a0)
00011F76 4E75                       		rts	
00011F78                            ; ===========================================================================
00011F78                            
00011F78                            loc_106AE:
00011F78 5302                       		subq.b	#1,d2
00011F7A 6600                       		bne.s	loc_106CC
00011F7C 5341                       		subq.w	#1,d1
00011F7E 9041                       		sub.w	d1,d0
00011F80 4440                       		neg.w	d0
00011F82 D068 0030                  		add.w	$30(a0),d0
00011F86 3140 000C                  		move.w	d0,$C(a0)
00011F8A 5241                       		addq.w	#1,d1
00011F8C D268 0034                  		add.w	$34(a0),d1
00011F90 3141 0008                  		move.w	d1,8(a0)
00011F94 4E75                       		rts	
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            loc_106CC:
00011F96 5302                       		subq.b	#1,d2
00011F98 6600                       		bne.s	loc_106EA
00011F9A 5341                       		subq.w	#1,d1
00011F9C 9041                       		sub.w	d1,d0
00011F9E 4440                       		neg.w	d0
00011FA0 D068 0034                  		add.w	$34(a0),d0
00011FA4 3140 0008                  		move.w	d0,8(a0)
00011FA8 5241                       		addq.w	#1,d1
00011FAA D268 0030                  		add.w	$30(a0),d1
00011FAE 3141 000C                  		move.w	d1,$C(a0)
00011FB2 4E75                       		rts	
00011FB4                            ; ===========================================================================
00011FB4                            
00011FB4                            loc_106EA:
00011FB4 9041                       		sub.w	d1,d0
00011FB6 D068 0030                  		add.w	$30(a0),d0
00011FBA 3140 000C                  		move.w	d0,$C(a0)
00011FBE 4441                       		neg.w	d1
00011FC0 D268 0034                  		add.w	$34(a0),d1
00011FC4 3141 0008                  		move.w	d1,8(a0)
00011FC8 4E75                       		rts	
00011FCA                            ; ===========================================================================
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            Map_obj56:
00011FCA                            	include "_maps\obj56.asm"
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011FCE 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011FD2 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011FD6 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011FDA 01                         byte_10710:	dc.b 1
00011FDB F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011FE0 04                         byte_10716:	dc.b 4
00011FE1 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011FE6 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011FEB 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011FF0 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011FF5 02                         byte_1072B:	dc.b 2
00011FF6 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011FFB 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012000 04                         byte_10736:	dc.b 4
00012001 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00012006 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001200B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012010 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012015 03                         byte_1074B:	dc.b 3
00012016 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001201B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012020 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012025 01                         byte_1075B:	dc.b 1
00012026 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001202B 02                         byte_10761:	dc.b 2
0001202C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012031 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012036 04                         byte_1076C:	dc.b 4
00012037 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001203C F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012041 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012046 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001204C 00                         		even
0001204C 00                         		even
0001204C                            
0001204C                            ; ===========================================================================
0001204C                            ; ---------------------------------------------------------------------------
0001204C                            ; Object 57 - spiked balls (SYZ, LZ)
0001204C                            ; ---------------------------------------------------------------------------
0001204C                            
0001204C                            Obj57:					; XREF: Obj_Index
0001204C 7000                       		moveq	#0,d0
0001204E 1028 0024                  		move.b	$24(a0),d0
00012052 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00012056 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001205A                            ; ===========================================================================
0001205A 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001205C 0000                       		dc.w Obj57_Move-Obj57_Index
0001205E 0000                       		dc.w Obj57_Display-Obj57_Index
00012060                            ; ===========================================================================
00012060                            
00012060                            Obj57_Main:				; XREF: Obj57_Index
00012060 5428 0024                  		addq.b	#2,$24(a0)
00012064 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001206C 317C 03BA 0002             		move.w	#$3BA,2(a0)
00012072 117C 0004 0001             		move.b	#4,1(a0)
00012078 117C 0004 0018             		move.b	#4,$18(a0)
0001207E 117C 0008 0019             		move.b	#8,$19(a0)
00012084 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001208A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012090 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00012096 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001209C 6600                       		bne.s	loc_107E8
0001209E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000120A4 317C 0310 0002             		move.w	#$310,2(a0)
000120AA 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000120B2                            
000120B2                            loc_107E8:
000120B2 1228 0028                  		move.b	$28(a0),d1	; get object type
000120B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000120BA 4881                       		ext.w	d1
000120BC E741                       		asl.w	#3,d1		; multiply by 8
000120BE 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000120C2 1028 0022                  		move.b	$22(a0),d0
000120C6 E418                       		ror.b	#2,d0
000120C8 0200 00C0                  		andi.b	#-$40,d0
000120CC 1140 0026                  		move.b	d0,$26(a0)
000120D0 45E8 0029                  		lea	$29(a0),a2
000120D4 1228 0028                  		move.b	$28(a0),d1	; get object type
000120D8 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000120DC 14FC 0000                  		move.b	#0,(a2)+
000120E0 3601                       		move.w	d1,d3
000120E2 E94B                       		lsl.w	#4,d3
000120E4 1143 003C                  		move.b	d3,$3C(a0)
000120E8 5341                       		subq.w	#1,d1		; set chain length (type-1)
000120EA 6500                       		bcs.s	loc_10894
000120EC 0828 0003 0028             		btst	#3,$28(a0)
000120F2 6700                       		beq.s	Obj57_MakeChain
000120F4 5341                       		subq.w	#1,d1
000120F6 6500                       		bcs.s	loc_10894
000120F8                            
000120F8                            Obj57_MakeChain:
000120F8 6100 CF6C                  		bsr.w	SingleObjLoad
000120FC 6600                       		bne.s	loc_10894
000120FE 5228 0029                  		addq.b	#1,$29(a0)
00012102 3A09                       		move.w	a1,d5
00012104 0445 D000                  		subi.w	#-$3000,d5
00012108 EC4D                       		lsr.w	#6,d5
0001210A 0245 007F                  		andi.w	#$7F,d5
0001210E 14C5                       		move.b	d5,(a2)+
00012110 137C 0004 0024             		move.b	#4,$24(a1)
00012116 1290                       		move.b	0(a0),0(a1)
00012118 2368 0004 0004             		move.l	4(a0),4(a1)
0001211E 3368 0002 0002             		move.w	2(a0),2(a1)
00012124 1368 0001 0001             		move.b	1(a0),1(a1)
0001212A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00012130 1368 0019 0019             		move.b	$19(a0),$19(a1)
00012136 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001213C 0403 0010                  		subi.b	#$10,d3
00012140 1343 003C                  		move.b	d3,$3C(a1)
00012144 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001214A 6600                       		bne.s	loc_10890
0001214C 4A03                       		tst.b	d3
0001214E 6600                       		bne.s	loc_10890
00012150 137C 0002 001A             		move.b	#2,$1A(a1)
00012156                            
00012156                            loc_10890:
00012156 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001215A                            
0001215A                            loc_10894:
0001215A 3A08                       		move.w	a0,d5
0001215C 0445 D000                  		subi.w	#-$3000,d5
00012160 EC4D                       		lsr.w	#6,d5
00012162 0245 007F                  		andi.w	#$7F,d5
00012166 14C5                       		move.b	d5,(a2)+
00012168 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001216E 6600                       		bne.s	Obj57_Move
00012170 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00012176 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001217C                            
0001217C                            Obj57_Move:				; XREF: Obj57_Index
0001217C 6100 0000                  		bsr.w	Obj57_MoveSub
00012180 6000 0000                  		bra.w	Obj57_ChkDel
00012184                            ; ===========================================================================
00012184                            
00012184                            Obj57_MoveSub:				; XREF: Obj57_Move
00012184 3028 003E                  		move.w	$3E(a0),d0
00012188 D168 0026                  		add.w	d0,$26(a0)
0001218C 1028 0026                  		move.b	$26(a0),d0
00012190 4EB9 0000 29CC             		jsr	(CalcSine).l
00012196 3428 0038                  		move.w	$38(a0),d2
0001219A 3628 003A                  		move.w	$3A(a0),d3
0001219E 45E8 0029                  		lea	$29(a0),a2
000121A2 7C00                       		moveq	#0,d6
000121A4 1C1A                       		move.b	(a2)+,d6
000121A6                            
000121A6                            Obj57_MoveLoop:
000121A6 7800                       		moveq	#0,d4
000121A8 181A                       		move.b	(a2)+,d4
000121AA ED4C                       		lsl.w	#6,d4
000121AC 0684 00FF D000             		addi.l	#$FFD000,d4
000121B2 2244                       		movea.l	d4,a1
000121B4 7800                       		moveq	#0,d4
000121B6 1829 003C                  		move.b	$3C(a1),d4
000121BA 2A04                       		move.l	d4,d5
000121BC C9C0                       		muls.w	d0,d4
000121BE E084                       		asr.l	#8,d4
000121C0 CBC1                       		muls.w	d1,d5
000121C2 E085                       		asr.l	#8,d5
000121C4 D842                       		add.w	d2,d4
000121C6 DA43                       		add.w	d3,d5
000121C8 3344 000C                  		move.w	d4,$C(a1)
000121CC 3345 0008                  		move.w	d5,8(a1)
000121D0 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000121D4 4E75                       		rts	
000121D6                            ; ===========================================================================
000121D6                            
000121D6                            Obj57_ChkDel:				; XREF: Obj57_Move
000121D6 3028 003A                  		move.w	$3A(a0),d0
000121DA 0240 FF80                  		andi.w	#$FF80,d0
000121DE 3238 F700                  		move.w	($FFFFF700).w,d1
000121E2 0441 0080                  		subi.w	#$80,d1
000121E6 0241 FF80                  		andi.w	#$FF80,d1
000121EA 9041                       		sub.w	d1,d0
000121EC 0C40 0280                  		cmpi.w	#$280,d0
000121F0 6300 C71E                  		bls.w	DisplaySprite
000121F4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000121F8 6700                       		beq.s	Obj57_Delete	; if it's zero, object was placed in debug mode
000121FA 3440                       		movea.w	d0,a2	; load address into a2
000121FC 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
00012200                            ; ===========================================================================
00012200                            
00012200                            Obj57_Delete:				; XREF: Obj57_ChkDel
00012200 7400                       		moveq	#0,d2
00012202 45E8 0029                  		lea	$29(a0),a2
00012206 141A                       		move.b	(a2)+,d2
00012208                            
00012208                            Obj57_DelLoop:
00012208 7000                       		moveq	#0,d0
0001220A 101A                       		move.b	(a2)+,d0
0001220C ED48                       		lsl.w	#6,d0
0001220E 0680 00FF D000             		addi.l	#$FFD000,d0
00012214 2240                       		movea.l	d0,a1
00012216 6100 C74A                  		bsr.w	DeleteObject2
0001221A 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001221E                            
0001221E 4E75                       		rts	
00012220                            ; ===========================================================================
00012220                            
00012220                            Obj57_Display:				; XREF: Obj57_Index
00012220 6000 C6EE                  		bra.w	DisplaySprite
00012224                            ; ===========================================================================
00012224                            ; ---------------------------------------------------------------------------
00012224                            ; Sprite mappings - chain of spiked balls (SYZ)
00012224                            ; ---------------------------------------------------------------------------
00012224                            Map_obj57:
00012224                            	include "_maps\obj57syz.asm"
00012224                            ; ---------------------------------------------------------------------------
00012224                            ; Sprite mappings - chain of spiked balls (SYZ)
00012224                            ; ---------------------------------------------------------------------------
00012224 0000                       		dc.w byte_10958-Map_obj57
00012226 01                         byte_10958:	dc.b 1
00012227 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001222C                            		even
0001222C                            		even
0001222C                            
0001222C                            ; ---------------------------------------------------------------------------
0001222C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001222C                            ; ---------------------------------------------------------------------------
0001222C                            Map_obj57a:
0001222C                            	include "_maps\obj57lz.asm"
0001222C                            ; ---------------------------------------------------------------------------
0001222C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001222C                            ; ---------------------------------------------------------------------------
0001222C 0000                       		dc.w byte_10964-Map_obj57a
0001222E 0000                       		dc.w byte_1096A-Map_obj57a
00012230 0000                       		dc.w byte_10970-Map_obj57a
00012232 01                         byte_10964:	dc.b 1
00012233 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012238 01                         byte_1096A:	dc.b 1
00012239 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001223E 01                         byte_10970:	dc.b 1
0001223F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00012244                            		even
00012244                            		even
00012244                            
00012244                            ; ===========================================================================
00012244                            ; ---------------------------------------------------------------------------
00012244                            ; Object 58 - giant spiked balls (SYZ)
00012244                            ; ---------------------------------------------------------------------------
00012244                            
00012244                            Obj58:					; XREF: Obj_Index
00012244 7000                       		moveq	#0,d0
00012246 1028 0024                  		move.b	$24(a0),d0
0001224A 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001224E 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00012252                            ; ===========================================================================
00012252 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00012254 0000                       		dc.w Obj58_Move-Obj58_Index
00012256                            ; ===========================================================================
00012256                            
00012256                            Obj58_Main:				; XREF: Obj58_Index
00012256 5428 0024                  		addq.b	#2,$24(a0)
0001225A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00012262 317C 0396 0002             		move.w	#$396,2(a0)
00012268 117C 0004 0001             		move.b	#4,1(a0)
0001226E 117C 0004 0018             		move.b	#4,$18(a0)
00012274 117C 0018 0019             		move.b	#$18,$19(a0)
0001227A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00012280 3168 000C 0038             		move.w	$C(a0),$38(a0)
00012286 117C 0086 0020             		move.b	#$86,$20(a0)
0001228C 1228 0028                  		move.b	$28(a0),d1	; get object type
00012290 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012294 4881                       		ext.w	d1
00012296 E741                       		asl.w	#3,d1		; multiply by 8
00012298 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001229C 1028 0022                  		move.b	$22(a0),d0
000122A0 E418                       		ror.b	#2,d0
000122A2 0200 00C0                  		andi.b	#$C0,d0
000122A6 1140 0026                  		move.b	d0,$26(a0)
000122AA 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000122B0                            
000122B0                            Obj58_Move:				; XREF: Obj58_Index
000122B0 7000                       		moveq	#0,d0
000122B2 1028 0028                  		move.b	$28(a0),d0	; get object type
000122B6 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000122BA D040                       		add.w	d0,d0
000122BC 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000122C0 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000122C4 3028 003A                  		move.w	$3A(a0),d0
000122C8 0240 FF80                  		andi.w	#$FF80,d0
000122CC 3238 F700                  		move.w	($FFFFF700).w,d1
000122D0 0441 0080                  		subi.w	#$80,d1
000122D4 0241 FF80                  		andi.w	#$FF80,d1
000122D8 9041                       		sub.w	d1,d0
000122DA 0C40 0280                  		cmpi.w	#$280,d0
000122DE 6300 C630                  		bls.w	DisplaySprite
000122E2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000122E6 6700 C678                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000122EA 3440                       		movea.w	d0,a2	; load address into a2
000122EC 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000122F0 6000 C66E                  		bra.w	DeleteObject
000122F4                            ; ===========================================================================
000122F4 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000122F6 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000122F8 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000122FA 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000122FC                            ; ===========================================================================
000122FC                            
000122FC                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000122FC 4E75                       		rts	
000122FE                            ; ===========================================================================
000122FE                            
000122FE                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000122FE 323C 0060                  		move.w	#$60,d1
00012302 7000                       		moveq	#0,d0
00012304 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00012308 0828 0000 0022             		btst	#0,$22(a0)
0001230E 6700                       		beq.s	loc_10A38
00012310 4440                       		neg.w	d0
00012312 D041                       		add.w	d1,d0
00012314                            
00012314                            loc_10A38:
00012314 3228 003A                  		move.w	$3A(a0),d1
00012318 9240                       		sub.w	d0,d1
0001231A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001231E 4E75                       		rts	
00012320                            ; ===========================================================================
00012320                            
00012320                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00012320 323C 0060                  		move.w	#$60,d1
00012324 7000                       		moveq	#0,d0
00012326 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001232A 0828 0000 0022             		btst	#0,$22(a0)
00012330 6700                       		beq.s	loc_10A5C
00012332 4440                       		neg.w	d0
00012334 0640 0080                  		addi.w	#$80,d0
00012338                            
00012338                            loc_10A5C:
00012338 3228 0038                  		move.w	$38(a0),d1
0001233C 9240                       		sub.w	d0,d1
0001233E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00012342 4E75                       		rts	
00012344                            ; ===========================================================================
00012344                            
00012344                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00012344 3028 003E                  		move.w	$3E(a0),d0
00012348 D168 0026                  		add.w	d0,$26(a0)
0001234C 1028 0026                  		move.b	$26(a0),d0
00012350 4EB9 0000 29CC             		jsr	(CalcSine).l
00012356 3428 0038                  		move.w	$38(a0),d2
0001235A 3628 003A                  		move.w	$3A(a0),d3
0001235E 7800                       		moveq	#0,d4
00012360 1828 003C                  		move.b	$3C(a0),d4
00012364 2A04                       		move.l	d4,d5
00012366 C9C0                       		muls.w	d0,d4
00012368 E084                       		asr.l	#8,d4
0001236A CBC1                       		muls.w	d1,d5
0001236C E085                       		asr.l	#8,d5
0001236E D842                       		add.w	d2,d4
00012370 DA43                       		add.w	d3,d5
00012372 3144 000C                  		move.w	d4,$C(a0)
00012376 3145 0008                  		move.w	d5,8(a0)
0001237A 4E75                       		rts	
0001237C                            ; ===========================================================================
0001237C                            ; ---------------------------------------------------------------------------
0001237C                            ; Sprite mappings - SBZ	spiked ball on a chain
0001237C                            ; ---------------------------------------------------------------------------
0001237C                            Map_obj15b:
0001237C                            	include "_maps\obj15sbz.asm"
0001237C                            ; ---------------------------------------------------------------------------
0001237C                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001237C                            ; ---------------------------------------------------------------------------
0001237C 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00012380 0000                       		dc.w byte_10AC6-Map_obj15b
00012382 05                         byte_10AA6:	dc.b 5
00012383 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00012388 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001238D F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00012392 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00012397 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001239C 01                         byte_10AC0:	dc.b 1
0001239D F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000123A2 02                         byte_10AC6:	dc.b 2
000123A3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000123A8 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000123AE 00                         		even
000123AE 00                         		even
000123AE                            
000123AE                            ; ===========================================================================
000123AE                            ; ---------------------------------------------------------------------------
000123AE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000123AE                            ; ---------------------------------------------------------------------------
000123AE                            
000123AE                            Obj59:					; XREF: Obj_Index
000123AE 7000                       		moveq	#0,d0
000123B0 1028 0024                  		move.b	$24(a0),d0
000123B4 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000123B8 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000123BC 3028 0032                  		move.w	$32(a0),d0
000123C0 0240 FF80                  		andi.w	#$FF80,d0
000123C4 3238 F700                  		move.w	($FFFFF700).w,d1
000123C8 0441 0080                  		subi.w	#$80,d1
000123CC 0241 FF80                  		andi.w	#$FF80,d1
000123D0 9041                       		sub.w	d1,d0
000123D2 0C40 0280                  		cmpi.w	#$280,d0
000123D6 6300 C538                  		bls.w	DisplaySprite
000123DA 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000123DE 6700 C580                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000123E2 3440                       		movea.w	d0,a2	; load address into a2
000123E4 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000123E8 6000 C576                  		bra.w	DeleteObject
000123EC                            ; ===========================================================================
000123EC 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000123EE 0000                       		dc.w Obj59_Platform-Obj59_Index
000123F0 0000                       		dc.w Obj59_Action-Obj59_Index
000123F2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000123F4                            
000123F4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000123F6                            
000123F6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000123F8 2001                       		dc.b $20, 1
000123FA 3401                       		dc.b $34, 1
000123FC 1003                       		dc.b $10, 3
000123FE 2003                       		dc.b $20, 3
00012400 3403                       		dc.b $34, 3
00012402 1401                       		dc.b $14, 1
00012404 2401                       		dc.b $24, 1
00012406 2C01                       		dc.b $2C, 1
00012408 1403                       		dc.b $14, 3
0001240A 2403                       		dc.b $24, 3
0001240C 2C03                       		dc.b $2C, 3
0001240E 2005                       		dc.b $20, 5
00012410 2007                       		dc.b $20, 7
00012412 3009                       		dc.b $30, 9
00012414                            ; ===========================================================================
00012414                            
00012414                            Obj59_Main:				; XREF: Obj59_Index
00012414 5428 0024                  		addq.b	#2,$24(a0)
00012418 7000                       		moveq	#0,d0
0001241A 1028 0028                  		move.b	$28(a0),d0
0001241E 6A00                       		bpl.s	Obj59_Main2
00012420 5828 0024                  		addq.b	#4,$24(a0)
00012424 0240 007F                  		andi.w	#$7F,d0
00012428 C0FC 0006                  		mulu.w	#6,d0
0001242C 3140 003C                  		move.w	d0,$3C(a0)
00012430 3140 003E                  		move.w	d0,$3E(a0)
00012434 588F                       		addq.l	#4,sp
00012436 4E75                       		rts	
00012438                            ; ===========================================================================
00012438                            
00012438                            Obj59_Main2:
00012438 E648                       		lsr.w	#3,d0
0001243A 0240 001E                  		andi.w	#$1E,d0
0001243E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00012442 115A 0019                  		move.b	(a2)+,$19(a0)
00012446 115A 001A                  		move.b	(a2)+,$1A(a0)
0001244A 7000                       		moveq	#0,d0
0001244C 1028 0028                  		move.b	$28(a0),d0
00012450 D040                       		add.w	d0,d0
00012452 0240 001E                  		andi.w	#$1E,d0
00012456 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001245A 101A                       		move.b	(a2)+,d0
0001245C E548                       		lsl.w	#2,d0
0001245E 3140 003C                  		move.w	d0,$3C(a0)
00012462 115A 0028                  		move.b	(a2)+,$28(a0)
00012466 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001246E 317C 4000 0002             		move.w	#$4000,2(a0)
00012474 117C 0004 0001             		move.b	#4,1(a0)
0001247A 117C 0004 0018             		move.b	#4,$18(a0)
00012480 3168 0008 0032             		move.w	8(a0),$32(a0)
00012486 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001248C                            
0001248C                            Obj59_Platform:				; XREF: Obj59_Index
0001248C 7200                       		moveq	#0,d1
0001248E 1228 0019                  		move.b	$19(a0),d1
00012492 4EB9 0000 8510             		jsr	(PlatformObject).l
00012498 6000 0000                  		bra.w	Obj59_Types
0001249C                            ; ===========================================================================
0001249C                            
0001249C                            Obj59_Action:				; XREF: Obj59_Index
0001249C 7200                       		moveq	#0,d1
0001249E 1228 0019                  		move.b	$19(a0),d1
000124A2 4EB9 0000 8684             		jsr	(ExitPlatform).l
000124A8 3F28 0008                  		move.w	8(a0),-(sp)
000124AC 6100 0000                  		bsr.w	Obj59_Types
000124B0 341F                       		move.w	(sp)+,d2
000124B2 4A10                       		tst.b	0(a0)
000124B4 6700                       		beq.s	locret_10BD4
000124B6 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
000124BC                            ; ===========================================================================
000124BC                            
000124BC                            locret_10BD4:
000124BC 4E75                       		rts	
000124BE                            ; ===========================================================================
000124BE                            
000124BE                            Obj59_Types:
000124BE 7000                       		moveq	#0,d0
000124C0 1028 0028                  		move.b	$28(a0),d0
000124C4 0240 000F                  		andi.w	#$F,d0
000124C8 D040                       		add.w	d0,d0
000124CA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000124CE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000124D2                            ; ===========================================================================
000124D2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124D6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124DA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124DE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000124E2 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000124E6                            ; ===========================================================================
000124E6                            
000124E6                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000124E6 4E75                       		rts	
000124E8                            ; ===========================================================================
000124E8                            
000124E8                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000124E8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000124EE 6600                       		bne.s	locret_10C0C
000124F0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000124F4                            
000124F4                            locret_10C0C:
000124F4 4E75                       		rts	
000124F6                            ; ===========================================================================
000124F6                            
000124F6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000124F6 6100 0000                  		bsr.w	Obj59_Move
000124FA 3028 0034                  		move.w	$34(a0),d0
000124FE 4440                       		neg.w	d0
00012500 D068 0030                  		add.w	$30(a0),d0
00012504 3140 000C                  		move.w	d0,$C(a0)
00012508 4E75                       		rts	
0001250A                            ; ===========================================================================
0001250A                            
0001250A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001250A 6100 0000                  		bsr.w	Obj59_Move
0001250E 3028 0034                  		move.w	$34(a0),d0
00012512 D068 0030                  		add.w	$30(a0),d0
00012516 3140 000C                  		move.w	d0,$C(a0)
0001251A 4E75                       		rts	
0001251C                            ; ===========================================================================
0001251C                            
0001251C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001251C 6100 0000                  		bsr.w	Obj59_Move
00012520 3028 0034                  		move.w	$34(a0),d0
00012524 E240                       		asr.w	#1,d0
00012526 4440                       		neg.w	d0
00012528 D068 0030                  		add.w	$30(a0),d0
0001252C 3140 000C                  		move.w	d0,$C(a0)
00012530 3028 0034                  		move.w	$34(a0),d0
00012534 D068 0032                  		add.w	$32(a0),d0
00012538 3140 0008                  		move.w	d0,8(a0)
0001253C 4E75                       		rts	
0001253E                            ; ===========================================================================
0001253E                            
0001253E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001253E 6100 0000                  		bsr.w	Obj59_Move
00012542 3028 0034                  		move.w	$34(a0),d0
00012546 E240                       		asr.w	#1,d0
00012548 D068 0030                  		add.w	$30(a0),d0
0001254C 3140 000C                  		move.w	d0,$C(a0)
00012550 3028 0034                  		move.w	$34(a0),d0
00012554 4440                       		neg.w	d0
00012556 D068 0032                  		add.w	$32(a0),d0
0001255A 3140 0008                  		move.w	d0,8(a0)
0001255E 4E75                       		rts	
00012560                            ; ===========================================================================
00012560                            
00012560                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00012560 6100 0000                  		bsr.w	Obj59_Move
00012564 3028 0034                  		move.w	$34(a0),d0
00012568 4440                       		neg.w	d0
0001256A D068 0030                  		add.w	$30(a0),d0
0001256E 3140 000C                  		move.w	d0,$C(a0)
00012572 4A28 0028                  		tst.b	$28(a0)
00012576 6700 0000                  		beq.w	loc_10C94
0001257A 4E75                       		rts	
0001257C                            ; ===========================================================================
0001257C                            
0001257C                            loc_10C94:
0001257C 0828 0003 0022             		btst	#3,$22(a0)
00012582 6700                       		beq.s	Obj59_Delete
00012584 08E9 0001 0022             		bset	#1,$22(a1)
0001258A 08A9 0003 0022             		bclr	#3,$22(a1)
00012590 137C 0002 0024             		move.b	#2,$24(a1)
00012596                            
00012596                            Obj59_Delete:
00012596 6000 C3C8                  		bra.w	DeleteObject
0001259A                            
0001259A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001259A                            
0001259A                            
0001259A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001259A 3028 0038                  		move.w	$38(a0),d0
0001259E 4A28 003A                  		tst.b	$3A(a0)
000125A2 6600                       		bne.s	loc_10CC8
000125A4 0C40 0800                  		cmpi.w	#$800,d0
000125A8 6400                       		bcc.s	loc_10CD0
000125AA 0640 0010                  		addi.w	#$10,d0
000125AE 6000                       		bra.s	loc_10CD0
000125B0                            ; ===========================================================================
000125B0                            
000125B0                            loc_10CC8:
000125B0 4A40                       		tst.w	d0
000125B2 6700                       		beq.s	loc_10CD0
000125B4 0440 0010                  		subi.w	#$10,d0
000125B8                            
000125B8                            loc_10CD0:
000125B8 3140 0038                  		move.w	d0,$38(a0)
000125BC 48C0                       		ext.l	d0
000125BE E180                       		asl.l	#8,d0
000125C0 D0A8 0034                  		add.l	$34(a0),d0
000125C4 2140 0034                  		move.l	d0,$34(a0)
000125C8 4840                       		swap	d0
000125CA 3428 003C                  		move.w	$3C(a0),d2
000125CE B042                       		cmp.w	d2,d0
000125D0 6300                       		bls.s	loc_10CF0
000125D2 117C 0001 003A             		move.b	#1,$3A(a0)
000125D8                            
000125D8                            loc_10CF0:
000125D8 D442                       		add.w	d2,d2
000125DA B042                       		cmp.w	d2,d0
000125DC 6600                       		bne.s	locret_10CFA
000125DE 4228 0028                  		clr.b	$28(a0)
000125E2                            
000125E2                            locret_10CFA:
000125E2 4E75                       		rts	
000125E4                            ; End of function Obj59_Move
000125E4                            
000125E4                            ; ===========================================================================
000125E4                            
000125E4                            Obj59_MakeMulti:			; XREF: Obj59_Index
000125E4 5368 003C                  		subq.w	#1,$3C(a0)
000125E8 6600                       		bne.s	Obj59_ChkDel
000125EA 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000125F0 6100 CA74                  		bsr.w	SingleObjLoad
000125F4 6600                       		bne.s	Obj59_ChkDel
000125F6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000125FA 3368 0008 0008             		move.w	8(a0),8(a1)
00012600 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012606 137C 000E 0028             		move.b	#$E,$28(a1)
0001260C                            
0001260C                            Obj59_ChkDel:
0001260C 588F                       		addq.l	#4,sp
0001260E 3028 0008                  		move.w	8(a0),d0
00012612 0240 FF80                  		andi.w	#$FF80,d0
00012616 3238 F700                  		move.w	($FFFFF700).w,d1
0001261A 0441 0080                  		subi.w	#$80,d1
0001261E 0241 FF80                  		andi.w	#$FF80,d1
00012622 9041                       		sub.w	d1,d0
00012624 0C40 0280                  		cmpi.w	#$280,d0
00012628 6200 C336                  		bhi.w	DeleteObject
0001262C 4E75                       		rts	
0001262E                            ; ===========================================================================
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            Map_obj59:
0001262E                            	include "_maps\obj59.asm"
0001262E                            ; ---------------------------------------------------------------------------
0001262E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001262E                            ; ---------------------------------------------------------------------------
0001262E 0000                       		dc.w byte_10D4A-Map_obj59
00012630 03                         byte_10D4A:	dc.b 3
00012631 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012636 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001263B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012640                            		even
00012640                            		even
00012640                            
00012640                            ; ===========================================================================
00012640                            ; ---------------------------------------------------------------------------
00012640                            ; Object 5A - platforms	moving in circles (SLZ)
00012640                            ; ---------------------------------------------------------------------------
00012640                            
00012640                            Obj5A:					; XREF: Obj_Index
00012640 7000                       		moveq	#0,d0
00012642 1028 0024                  		move.b	$24(a0),d0
00012646 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001264A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001264E 3028 0032                  		move.w	$32(a0),d0
00012652 0240 FF80                  		andi.w	#$FF80,d0
00012656 3238 F700                  		move.w	($FFFFF700).w,d1
0001265A 0441 0080                  		subi.w	#$80,d1
0001265E 0241 FF80                  		andi.w	#$FF80,d1
00012662 9041                       		sub.w	d1,d0
00012664 0C40 0280                  		cmpi.w	#$280,d0
00012668 6300 C2A6                  		bls.w	DisplaySprite
0001266C 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012670 6700 C2EE                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
00012674 3440                       		movea.w	d0,a2	; load address into a2
00012676 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
0001267A 6000 C2E4                  		bra.w	DeleteObject
0001267E                            ; ===========================================================================
0001267E 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00012680 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00012682 0000                       		dc.w Obj5A_Action-Obj5A_Index
00012684                            ; ===========================================================================
00012684                            
00012684                            Obj5A_Main:				; XREF: Obj5A_Index
00012684 5428 0024                  		addq.b	#2,$24(a0)
00012688 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00012690 317C 4000 0002             		move.w	#$4000,2(a0)
00012696 117C 0004 0001             		move.b	#4,1(a0)
0001269C 117C 0004 0018             		move.b	#4,$18(a0)
000126A2 117C 0018 0019             		move.b	#$18,$19(a0)
000126A8 3168 0008 0032             		move.w	8(a0),$32(a0)
000126AE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000126B4                            
000126B4                            Obj5A_Platform:				; XREF: Obj5A_Index
000126B4 7200                       		moveq	#0,d1
000126B6 1228 0019                  		move.b	$19(a0),d1
000126BA 4EB9 0000 8510             		jsr	(PlatformObject).l
000126C0 6000 0000                  		bra.w	Obj5A_Types
000126C4                            ; ===========================================================================
000126C4                            
000126C4                            Obj5A_Action:				; XREF: Obj5A_Index
000126C4 7200                       		moveq	#0,d1
000126C6 1228 0019                  		move.b	$19(a0),d1
000126CA 4EB9 0000 8684             		jsr	(ExitPlatform).l
000126D0 3F28 0008                  		move.w	8(a0),-(sp)
000126D4 6100 0000                  		bsr.w	Obj5A_Types
000126D8 341F                       		move.w	(sp)+,d2
000126DA 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
000126E0                            ; ===========================================================================
000126E0                            
000126E0                            Obj5A_Types:
000126E0 7000                       		moveq	#0,d0
000126E2 1028 0028                  		move.b	$28(a0),d0
000126E6 0240 000C                  		andi.w	#$C,d0
000126EA E248                       		lsr.w	#1,d0
000126EC 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000126F0 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000126F4                            ; ===========================================================================
000126F4 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000126F6 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000126F8                            ; ===========================================================================
000126F8                            
000126F8                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000126F8 1238 FE80                  		move.b	($FFFFFE80).w,d1
000126FC 0401 0050                  		subi.b	#$50,d1
00012700 4881                       		ext.w	d1
00012702 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012706 0402 0050                  		subi.b	#$50,d2
0001270A 4882                       		ext.w	d2
0001270C 0828 0000 0028             		btst	#0,$28(a0)
00012712 6700                       		beq.s	loc_10E24
00012714 4441                       		neg.w	d1
00012716 4442                       		neg.w	d2
00012718                            
00012718                            loc_10E24:
00012718 0828 0001 0028             		btst	#1,$28(a0)
0001271E 6700                       		beq.s	loc_10E30
00012720 4441                       		neg.w	d1
00012722 C342                       		exg	d1,d2
00012724                            
00012724                            loc_10E30:
00012724 D268 0032                  		add.w	$32(a0),d1
00012728 3141 0008                  		move.w	d1,8(a0)
0001272C D468 0030                  		add.w	$30(a0),d2
00012730 3142 000C                  		move.w	d2,$C(a0)
00012734 4E75                       		rts	
00012736                            ; ===========================================================================
00012736                            
00012736                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00012736 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001273A 0401 0050                  		subi.b	#$50,d1
0001273E 4881                       		ext.w	d1
00012740 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012744 0402 0050                  		subi.b	#$50,d2
00012748 4882                       		ext.w	d2
0001274A 0828 0000 0028             		btst	#0,$28(a0)
00012750 6700                       		beq.s	loc_10E62
00012752 4441                       		neg.w	d1
00012754 4442                       		neg.w	d2
00012756                            
00012756                            loc_10E62:
00012756 0828 0001 0028             		btst	#1,$28(a0)
0001275C 6700                       		beq.s	loc_10E6E
0001275E 4441                       		neg.w	d1
00012760 C342                       		exg	d1,d2
00012762                            
00012762                            loc_10E6E:
00012762 4441                       		neg.w	d1
00012764 D268 0032                  		add.w	$32(a0),d1
00012768 3141 0008                  		move.w	d1,8(a0)
0001276C D468 0030                  		add.w	$30(a0),d2
00012770 3142 000C                  		move.w	d2,$C(a0)
00012774 4E75                       		rts	
00012776                            ; ===========================================================================
00012776                            ; ---------------------------------------------------------------------------
00012776                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012776                            ; ---------------------------------------------------------------------------
00012776                            Map_obj5A:
00012776                            	include "_maps\obj5A.asm"
00012776                            ; ---------------------------------------------------------------------------
00012776                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012776                            ; ---------------------------------------------------------------------------
00012776 0000                       		dc.w byte_10E84-Map_obj5A
00012778 02                         byte_10E84:	dc.b 2
00012779 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001277E F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012784 00                         		even
00012784 00                         		even
00012784                            
00012784                            ; ===========================================================================
00012784                            ; ---------------------------------------------------------------------------
00012784                            ; Object 5B - blocks that form a staircase (SLZ)
00012784                            ; ---------------------------------------------------------------------------
00012784                            
00012784                            Obj5B:					; XREF: Obj_Index
00012784 7000                       		moveq	#0,d0
00012786 1028 0024                  		move.b	$24(a0),d0
0001278A 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001278E 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00012792 3028 0030                  		move.w	$30(a0),d0
00012796 0240 FF80                  		andi.w	#$FF80,d0
0001279A 3238 F700                  		move.w	($FFFFF700).w,d1
0001279E 0441 0080                  		subi.w	#$80,d1
000127A2 0241 FF80                  		andi.w	#$FF80,d1
000127A6 9041                       		sub.w	d1,d0
000127A8 0C40 0280                  		cmpi.w	#$280,d0
000127AC 6300 C162                  		bls.w	DisplaySprite
000127B0 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000127B4 6700 C1AA                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000127B8 3440                       		movea.w	d0,a2	; load address into a2
000127BA 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000127BE 6000 C1A0                  		bra.w	DeleteObject
000127C2                            ; ===========================================================================
000127C2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000127C4 0000                       		dc.w Obj5B_Move-Obj5B_Index
000127C6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000127C8                            ; ===========================================================================
000127C8                            
000127C8                            Obj5B_Main:				; XREF: Obj5B_Index
000127C8 5428 0024                  		addq.b	#2,$24(a0)
000127CC 7638                       		moveq	#$38,d3
000127CE 7801                       		moveq	#1,d4
000127D0 0828 0000 0022             		btst	#0,$22(a0)
000127D6 6700                       		beq.s	loc_10EDA
000127D8 763B                       		moveq	#$3B,d3
000127DA 78FF                       		moveq	#-1,d4
000127DC                            
000127DC                            loc_10EDA:
000127DC 3428 0008                  		move.w	8(a0),d2
000127E0 2248                       		movea.l	a0,a1
000127E2 7203                       		moveq	#3,d1
000127E4 6000                       		bra.s	Obj5B_MakeBlocks
000127E6                            ; ===========================================================================
000127E6                            
000127E6                            Obj5B_Loop:
000127E6 6100 C894                  		bsr.w	SingleObjLoad2
000127EA 6600 0000                  		bne.w	Obj5B_Move
000127EE 137C 0004 0024             		move.b	#4,$24(a1)
000127F4                            
000127F4                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000127F4 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000127F8 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012800 337C 4000 0002             		move.w	#$4000,2(a1)
00012806 137C 0004 0001             		move.b	#4,1(a1)
0001280C 137C 0003 0018             		move.b	#3,$18(a1)
00012812 137C 0010 0019             		move.b	#$10,$19(a1)
00012818 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001281E 3342 0008                  		move.w	d2,8(a1)
00012822 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012828 3368 0008 0030             		move.w	8(a0),$30(a1)
0001282E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012834 0642 0020                  		addi.w	#$20,d2
00012838 1343 0037                  		move.b	d3,$37(a1)
0001283C 2348 003C                  		move.l	a0,$3C(a1)
00012840 D604                       		add.b	d4,d3
00012842 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012846                            
00012846                            Obj5B_Move:				; XREF: Obj5B_Index
00012846 7000                       		moveq	#0,d0
00012848 1028 0028                  		move.b	$28(a0),d0
0001284C 0240 0007                  		andi.w	#7,d0
00012850 D040                       		add.w	d0,d0
00012852 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012856 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001285A                            
0001285A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001285A 2468 003C                  		movea.l	$3C(a0),a2
0001285E 7000                       		moveq	#0,d0
00012860 1028 0037                  		move.b	$37(a0),d0
00012864 1032 0000                  		move.b	(a2,d0.w),d0
00012868 D068 0032                  		add.w	$32(a0),d0
0001286C 3140 000C                  		move.w	d0,$C(a0)
00012870 7200                       		moveq	#0,d1
00012872 1228 0019                  		move.b	$19(a0),d1
00012876 0641 000B                  		addi.w	#$B,d1
0001287A 343C 0010                  		move.w	#$10,d2
0001287E 363C 0011                  		move.w	#$11,d3
00012882 3828 0008                  		move.w	8(a0),d4
00012886 6100 E9F6                  		bsr.w	SolidObject
0001288A 4A04                       		tst.b	d4
0001288C 6A00                       		bpl.s	loc_10F92
0001288E 1544 0036                  		move.b	d4,$36(a2)
00012892                            
00012892                            loc_10F92:
00012892 0828 0003 0022             		btst	#3,$22(a0)
00012898 6700                       		beq.s	locret_10FA0
0001289A 157C 0001 0036             		move.b	#1,$36(a2)
000128A0                            
000128A0                            locret_10FA0:
000128A0 4E75                       		rts	
000128A2                            ; ===========================================================================
000128A2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000128A4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000128A6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000128A8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000128AA                            ; ===========================================================================
000128AA                            
000128AA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000128AA 4A68 0034                  		tst.w	$34(a0)
000128AE 6600                       		bne.s	loc_10FC0
000128B0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000128B6 6600                       		bne.s	locret_10FBE
000128B8 317C 001E 0034             		move.w	#$1E,$34(a0)
000128BE                            
000128BE                            locret_10FBE:
000128BE 4E75                       		rts	
000128C0                            ; ===========================================================================
000128C0                            
000128C0                            loc_10FC0:
000128C0 5368 0034                  		subq.w	#1,$34(a0)
000128C4 66F8                       		bne.s	locret_10FBE
000128C6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128CA 4E75                       		rts	
000128CC                            ; ===========================================================================
000128CC                            
000128CC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000128CC 4A68 0034                  		tst.w	$34(a0)
000128D0 6600                       		bne.s	loc_10FE0
000128D2 4A28 0036                  		tst.b	$36(a0)
000128D6 6A00                       		bpl.s	locret_10FDE
000128D8 317C 003C 0034             		move.w	#$3C,$34(a0)
000128DE                            
000128DE                            locret_10FDE:
000128DE 4E75                       		rts	
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            loc_10FE0:
000128E0 5368 0034                  		subq.w	#1,$34(a0)
000128E4 6600                       		bne.s	loc_10FEC
000128E6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000128EA 4E75                       		rts	
000128EC                            ; ===========================================================================
000128EC                            
000128EC                            loc_10FEC:
000128EC 43E8 0038                  		lea	$38(a0),a1
000128F0 3028 0034                  		move.w	$34(a0),d0
000128F4 E408                       		lsr.b	#2,d0
000128F6 0200 0001                  		andi.b	#1,d0
000128FA 12C0                       		move.b	d0,(a1)+
000128FC 0A00 0001                  		eori.b	#1,d0
00012900 12C0                       		move.b	d0,(a1)+
00012902 0A00 0001                  		eori.b	#1,d0
00012906 12C0                       		move.b	d0,(a1)+
00012908 0A00 0001                  		eori.b	#1,d0
0001290C 12C0                       		move.b	d0,(a1)+
0001290E 4E75                       		rts	
00012910                            ; ===========================================================================
00012910                            
00012910                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012910 43E8 0038                  		lea	$38(a0),a1
00012914 0C11 0080                  		cmpi.b	#$80,(a1)
00012918 6700                       		beq.s	locret_11038
0001291A 5211                       		addq.b	#1,(a1)
0001291C 7200                       		moveq	#0,d1
0001291E 1219                       		move.b	(a1)+,d1
00012920 4841                       		swap	d1
00012922 E289                       		lsr.l	#1,d1
00012924 2401                       		move.l	d1,d2
00012926 E289                       		lsr.l	#1,d1
00012928 2601                       		move.l	d1,d3
0001292A D682                       		add.l	d2,d3
0001292C 4841                       		swap	d1
0001292E 4842                       		swap	d2
00012930 4843                       		swap	d3
00012932 12C3                       		move.b	d3,(a1)+
00012934 12C2                       		move.b	d2,(a1)+
00012936 12C1                       		move.b	d1,(a1)+
00012938                            
00012938                            locret_11038:
00012938 4E75                       		rts	
0001293A 4E75                       		rts	
0001293C                            ; ===========================================================================
0001293C                            ; ---------------------------------------------------------------------------
0001293C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001293C                            ; ---------------------------------------------------------------------------
0001293C                            Map_obj5B:
0001293C                            	include "_maps\obj5B.asm"
0001293C                            ; ---------------------------------------------------------------------------
0001293C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001293C                            ; ---------------------------------------------------------------------------
0001293C 0000                       		dc.w byte_1103E-Map_obj5B
0001293E 01                         byte_1103E:	dc.b 1
0001293F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012944                            		even
00012944                            		even
00012944                            
00012944                            ; ===========================================================================
00012944                            ; ---------------------------------------------------------------------------
00012944                            ; Object 5C - metal girders in foreground (SLZ)
00012944                            ; ---------------------------------------------------------------------------
00012944                            
00012944                            Obj5C:					; XREF: Obj_Index
00012944 7000                       		moveq	#0,d0
00012946 1028 0024                  		move.b	$24(a0),d0
0001294A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001294E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012952                            ; ===========================================================================
00012952 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012954 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012956                            ; ===========================================================================
00012956                            
00012956                            Obj5C_Main:				; XREF: Obj5C_Index
00012956 5428 0024                  		addq.b	#2,$24(a0)
0001295A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012962 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012968 117C 0010 0019             		move.b	#$10,$19(a0)
0001296E                            
0001296E                            Obj5C_Display:				; XREF: Obj5C_Index
0001296E 2238 F700                  		move.l	($FFFFF700).w,d1
00012972 D281                       		add.l	d1,d1
00012974 4841                       		swap	d1
00012976 4441                       		neg.w	d1
00012978 3141 0008                  		move.w	d1,8(a0)
0001297C 2238 F704                  		move.l	($FFFFF704).w,d1
00012980 D281                       		add.l	d1,d1
00012982 4841                       		swap	d1
00012984 0241 003F                  		andi.w	#$3F,d1
00012988 4441                       		neg.w	d1
0001298A 0641 0100                  		addi.w	#$100,d1
0001298E 3141 000A                  		move.w	d1,$A(a0)
00012992 6000 BF7C                  		bra.w	DisplaySprite
00012996                            ; ===========================================================================
00012996                            ; ---------------------------------------------------------------------------
00012996                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012996                            ; ---------------------------------------------------------------------------
00012996                            Map_obj5C:
00012996                            	include "_maps\obj5C.asm"
00012996                            ; ---------------------------------------------------------------------------
00012996                            ; Sprite mappings - metal girders in foreground	(SLZ)
00012996                            ; ---------------------------------------------------------------------------
00012996 0000                       		dc.w byte_11098-Map_obj5C
00012998 09                         byte_11098:	dc.b 9
00012999 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001299E A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000129A3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000129A8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000129AD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000129B2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000129B7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000129BC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000129C1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000129C6                            		even
000129C6                            		even
000129C6                            
000129C6                            ; ===========================================================================
000129C6                            ; ---------------------------------------------------------------------------
000129C6                            ; Object 1B - water surface (LZ)
000129C6                            ; ---------------------------------------------------------------------------
000129C6                            
000129C6                            Obj1B:					; XREF: Obj_Index
000129C6 7000                       		moveq	#0,d0
000129C8 1028 0024                  		move.b	$24(a0),d0
000129CC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000129D0 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000129D4                            ; ===========================================================================
000129D4 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000129D6 0000                       		dc.w Obj1B_Action-Obj1B_Index
000129D8                            ; ===========================================================================
000129D8                            
000129D8                            Obj1B_Main:				; XREF: Obj1B_Index
000129D8 5428 0024                  		addq.b	#2,$24(a0)
000129DC 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000129E4 317C C300 0002             		move.w	#$C300,2(a0)
000129EA 117C 0004 0001             		move.b	#4,1(a0)
000129F0 117C 0080 0019             		move.b	#$80,$19(a0)
000129F6 3168 0008 0030             		move.w	8(a0),$30(a0)
000129FC                            
000129FC                            Obj1B_Action:				; XREF: Obj1B_Index
000129FC 3238 F700                  		move.w	($FFFFF700).w,d1
00012A00 0241 FFE0                  		andi.w	#$FFE0,d1
00012A04 D268 0030                  		add.w	$30(a0),d1
00012A08 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012A0E 6700                       		beq.s	loc_11114
00012A10 0641 0020                  		addi.w	#$20,d1
00012A14                            
00012A14                            loc_11114:
00012A14 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012A18 3238 F646                  		move.w	($FFFFF646).w,d1
00012A1C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012A20 4A28 0032                  		tst.b	$32(a0)
00012A24 6600                       		bne.s	Obj1B_Animate
00012A26 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012A2C 6700                       		beq.s	loc_1114A	; if not, branch
00012A2E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012A32 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012A38 6000                       		bra.s	Obj1B_Display
00012A3A                            ; ===========================================================================
00012A3A                            
00012A3A                            Obj1B_Animate:				; XREF: loc_11114
00012A3A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012A3E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012A40 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012A46 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012A4A                            
00012A4A                            loc_1114A:				; XREF: loc_11114
00012A4A 5328 001E                  		subq.b	#1,$1E(a0)
00012A4E 6A00                       		bpl.s	Obj1B_Display
00012A50 117C 0007 001E             		move.b	#7,$1E(a0)
00012A56 5228 001A                  		addq.b	#1,$1A(a0)
00012A5A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00012A60 6500                       		bcs.s	Obj1B_Display
00012A62 117C 0000 001A             		move.b	#0,$1A(a0)
00012A68                            
00012A68                            Obj1B_Display:
00012A68 6000 BEA6                  		bra.w	DisplaySprite
00012A6C                            ; ===========================================================================
00012A6C                            ; ---------------------------------------------------------------------------
00012A6C                            ; Sprite mappings - water surface (LZ)
00012A6C                            ; ---------------------------------------------------------------------------
00012A6C                            Map_obj1B:
00012A6C                            	include "_maps\obj1B.asm"
00012A6C                            ; ---------------------------------------------------------------------------
00012A6C                            ; Sprite mappings - water surface (LZ)
00012A6C                            ; ---------------------------------------------------------------------------
00012A6C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00012A70 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00012A74 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00012A78 03                         byte_11178:	dc.b 3
00012A79 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012A7E FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012A83 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012A88 03                         byte_11188:	dc.b 3
00012A89 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012A8E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012A93 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012A98 03                         byte_11198:	dc.b 3
00012A99 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012A9E FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012AA3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012AA8 06                         byte_111A8:	dc.b 6
00012AA9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00012AAE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00012AB3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012AB8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012ABD FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012AC2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012AC7 06                         byte_111C7:	dc.b 6
00012AC8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012ACD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012AD2 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012AD7 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012ADC FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012AE1 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012AE6 06                         byte_111E6:	dc.b 6
00012AE7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012AEC FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012AF1 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012AF6 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012AFB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012B00 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012B06 00                         		even
00012B06 00                         		even
00012B06                            
00012B06                            ; ===========================================================================
00012B06                            ; ---------------------------------------------------------------------------
00012B06                            ; Object 0B - pole that	breaks (LZ)
00012B06                            ; ---------------------------------------------------------------------------
00012B06                            
00012B06                            Obj0B:					; XREF: Obj_Index
00012B06 7000                       		moveq	#0,d0
00012B08 1028 0024                  		move.b	$24(a0),d0
00012B0C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012B10 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012B14                            ; ===========================================================================
00012B14 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012B16 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012B18 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012B1A                            ; ===========================================================================
00012B1A                            
00012B1A                            Obj0B_Main:				; XREF: Obj0B_Index
00012B1A 5428 0024                  		addq.b	#2,$24(a0)
00012B1E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012B26 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012B2C 117C 0004 0001             		move.b	#4,1(a0)
00012B32 117C 0008 0019             		move.b	#8,$19(a0)
00012B38 117C 0004 0018             		move.b	#4,$18(a0)
00012B3E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012B44 7000                       		moveq	#0,d0
00012B46 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B4A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012B4E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012B52                            
00012B52                            Obj0B_Action:				; XREF: Obj0B_Index
00012B52 4A28 0032                  		tst.b	$32(a0)
00012B56 6700                       		beq.s	Obj0B_Grab
00012B58 4A68 0030                  		tst.w	$30(a0)
00012B5C 6700                       		beq.s	Obj0B_MoveUp
00012B5E 5368 0030                  		subq.w	#1,$30(a0)
00012B62 6600                       		bne.s	Obj0B_MoveUp
00012B64 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012B6A 6000                       		bra.s	Obj0B_Release
00012B6C                            ; ===========================================================================
00012B6C                            
00012B6C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00012B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00012B70 3028 000C                  		move.w	$C(a0),d0
00012B74 0440 0018                  		subi.w	#$18,d0
00012B78 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00012B7E 6700                       		beq.s	Obj0B_MoveDown
00012B80 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00012B84 B069 000C                  		cmp.w	$C(a1),d0
00012B88 6500                       		bcs.s	Obj0B_MoveDown
00012B8A 3340 000C                  		move.w	d0,$C(a1)
00012B8E                            
00012B8E                            Obj0B_MoveDown:
00012B8E 0640 0024                  		addi.w	#$24,d0
00012B92 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00012B98 6700                       		beq.s	Obj0B_LetGo
00012B9A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00012B9E B069 000C                  		cmp.w	$C(a1),d0
00012BA2 6400                       		bcc.s	Obj0B_LetGo
00012BA4 3340 000C                  		move.w	d0,$C(a1)
00012BA8                            
00012BA8                            Obj0B_LetGo:
00012BA8 1038 F603                  		move.b	($FFFFF603).w,d0
00012BAC 0240 0070                  		andi.w	#$70,d0
00012BB0 6700                       		beq.s	Obj0B_Display
00012BB2                            
00012BB2                            Obj0B_Release:				; XREF: Obj0B_Action
00012BB2 4228 0020                  		clr.b	$20(a0)
00012BB6 5428 0024                  		addq.b	#2,$24(a0)
00012BBA 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012BBE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012BC2 4228 0032                  		clr.b	$32(a0)
00012BC6 6000                       		bra.s	Obj0B_Display
00012BC8                            ; ===========================================================================
00012BC8                            
00012BC8                            Obj0B_Grab:				; XREF: Obj0B_Action
00012BC8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012BCC 6700                       		beq.s	Obj0B_Display	; if not, branch
00012BCE 43F8 D000                  		lea	($FFFFD000).w,a1
00012BD2 3028 0008                  		move.w	8(a0),d0
00012BD6 0640 0014                  		addi.w	#$14,d0
00012BDA B069 0008                  		cmp.w	8(a1),d0
00012BDE 6400                       		bcc.s	Obj0B_Display
00012BE0 4228 0021                  		clr.b	$21(a0)
00012BE4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012BEA 6400                       		bcc.s	Obj0B_Display
00012BEC 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012BF0 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012BF4 3028 0008                  		move.w	8(a0),d0
00012BF8 0640 0014                  		addi.w	#$14,d0
00012BFC 3340 0008                  		move.w	d0,8(a1)
00012C00 08A9 0000 0022             		bclr	#0,$22(a1)
00012C06 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012C0C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012C12 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012C18 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012C1E                            
00012C1E                            Obj0B_Display:				; XREF: Obj0B_Index
00012C1E 6000 E33A                  		bra.w	MarkObjGone
00012C22                            ; ===========================================================================
00012C22                            ; ---------------------------------------------------------------------------
00012C22                            ; Sprite mappings - pole that breaks (LZ)
00012C22                            ; ---------------------------------------------------------------------------
00012C22                            Map_obj0B:
00012C22                            	include "_maps\obj0B.asm"
00012C22                            ; ---------------------------------------------------------------------------
00012C22                            ; Sprite mappings - pole that breaks (LZ)
00012C22                            ; ---------------------------------------------------------------------------
00012C22 0000                       		dc.w byte_11326-Map_obj0B
00012C24 0000                       		dc.w byte_11331-Map_obj0B
00012C26 02                         byte_11326:	dc.b 2			; normal pole
00012C27 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012C2C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012C31 04                         byte_11331:	dc.b 4			; broken pole
00012C32 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012C37 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012C3C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012C41 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012C46                            		even
00012C46                            		even
00012C46                            
00012C46                            ; ===========================================================================
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            ; Object 0C - flapping door (LZ)
00012C46                            ; ---------------------------------------------------------------------------
00012C46                            
00012C46                            Obj0C:					; XREF: Obj_Index
00012C46 7000                       		moveq	#0,d0
00012C48 1028 0024                  		move.b	$24(a0),d0
00012C4C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012C50 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012C54                            ; ===========================================================================
00012C54 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012C56 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012C58                            ; ===========================================================================
00012C58                            
00012C58                            Obj0C_Main:				; XREF: Obj0C_Index
00012C58 5428 0024                  		addq.b	#2,$24(a0)
00012C5C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012C64 317C 4328 0002             		move.w	#$4328,2(a0)
00012C6A 0028 0004 0001             		ori.b	#4,1(a0)
00012C70 117C 0028 0019             		move.b	#$28,$19(a0)
00012C76 7000                       		moveq	#0,d0
00012C78 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C7C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012C80 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00012C84                            
00012C84                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00012C84 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012C88 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00012C8A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00012C90 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00012C96 4A28 0001                  		tst.b	1(a0)
00012C9A 6A00                       		bpl.s	Obj0C_Solid
00012C9C 303C 00BB                  		move.w	#$BB,d0
00012CA0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
00012CA6                            
00012CA6                            Obj0C_Solid:
00012CA6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00012CAC 6100 8CC2                  		bsr.w	AnimateSprite
00012CB0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00012CB4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012CB8 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012CBA 3038 D008                  		move.w	($FFFFD008).w,d0
00012CBE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012CC2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012CC4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012CCA 323C 0013                  		move.w	#$13,d1
00012CCE 343C 0020                  		move.w	#$20,d2
00012CD2 3602                       		move.w	d2,d3
00012CD4 5243                       		addq.w	#1,d3
00012CD6 3828 0008                  		move.w	8(a0),d4
00012CDA 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00012CDE                            
00012CDE                            Obj0C_Display:
00012CDE 6000 E27A                  		bra.w	MarkObjGone
00012CE2                            ; ===========================================================================
00012CE2                            Ani_obj0C:
00012CE2                            	include "_anim\obj0C.asm"
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2                            ; Animation script - flapping door (LZ)
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2 0000                       		dc.w byte_113E6-Ani_obj0C
00012CE4 0000                       		dc.w byte_113EC-Ani_obj0C
00012CE6 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012CEC 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012CF2                            		even
00012CF2                            		even
00012CF2                            
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2                            ; Sprite mappings - flapping door (LZ)
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2                            Map_obj0C:
00012CF2                            	include "_maps\obj0C.asm"
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2                            ; Sprite mappings - flapping door (LZ)
00012CF2                            ; ---------------------------------------------------------------------------
00012CF2 0000                       		dc.w byte_113F8-Map_obj0C
00012CF4 0000                       		dc.w byte_11403-Map_obj0C
00012CF6 0000                       		dc.w byte_1140E-Map_obj0C
00012CF8 02                         byte_113F8:	dc.b 2
00012CF9 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012CFE 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012D03 02                         byte_11403:	dc.b 2
00012D04 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012D09 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012D0E 02                         byte_1140E:	dc.b 2
00012D0F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012D14 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012D1A 00                         		even
00012D1A 00                         		even
00012D1A                            
00012D1A                            ; ===========================================================================
00012D1A                            ; ---------------------------------------------------------------------------
00012D1A                            ; Object 71 - invisible	solid blocks
00012D1A                            ; ---------------------------------------------------------------------------
00012D1A                            
00012D1A                            Obj71:					; XREF: Obj_Index
00012D1A 7000                       		moveq	#0,d0
00012D1C 1028 0024                  		move.b	$24(a0),d0
00012D20 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012D24 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012D28                            ; ===========================================================================
00012D28 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012D2A 0000                       		dc.w Obj71_Solid-Obj71_Index
00012D2C                            ; ===========================================================================
00012D2C                            
00012D2C                            Obj71_Main:				; XREF: Obj71_Index
00012D2C 5428 0024                  		addq.b	#2,$24(a0)
00012D30 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012D38 317C 8680 0002             		move.w	#$8680,2(a0)
00012D3E 0028 0004 0001             		ori.b	#4,1(a0)
00012D44 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D48 1200                       		move.b	d0,d1
00012D4A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012D4E 0640 0010                  		addi.w	#$10,d0
00012D52 E248                       		lsr.w	#1,d0
00012D54 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012D58 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00012D5C 5241                       		addq.w	#1,d1
00012D5E E749                       		lsl.w	#3,d1
00012D60 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012D64                            
00012D64                            Obj71_Solid:				; XREF: Obj71_Index
00012D64 6100 BF70                  		bsr.w	ChkObjOnScreen
00012D68 6600                       		bne.s	Obj71_ChkDel
00012D6A 7200                       		moveq	#0,d1
00012D6C 1228 0019                  		move.b	$19(a0),d1
00012D70 0641 000B                  		addi.w	#$B,d1
00012D74 7400                       		moveq	#0,d2
00012D76 1428 0016                  		move.b	$16(a0),d2
00012D7A 3602                       		move.w	d2,d3
00012D7C 5243                       		addq.w	#1,d3
00012D7E 3828 0008                  		move.w	8(a0),d4
00012D82 6100 E542                  		bsr.w	SolidObject71
00012D86                            
00012D86                            Obj71_ChkDel:
00012D86 3028 0008                  		move.w	8(a0),d0
00012D8A 0240 FF80                  		andi.w	#$FF80,d0
00012D8E 3238 F700                  		move.w	($FFFFF700).w,d1
00012D92 0441 0080                  		subi.w	#$80,d1
00012D96 0241 FF80                  		andi.w	#$FF80,d1
00012D9A 9041                       		sub.w	d1,d0
00012D9C 0C40 0280                  		cmpi.w	#$280,d0
00012DA0 6300                       		bls.s	Obj71_NoDel
00012DA2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012DA6 6700                       		beq.s	Obj71_Delete		; if it's zero, don't remember object
00012DA8 3440                       		movea.w	d0,a2	; load address into a2
00012DAA 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012DAE 6000                       		bra.s	Obj71_Delete	; and delete object
00012DB0                            
00012DB0                            Obj71_NoDel:
00012DB0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00012DB4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00012DB6 4EFA BB58                  		jmp	DisplaySprite	; if yes, display the object
00012DBA                            ; ===========================================================================
00012DBA                            
00012DBA                            Obj71_NoDisplay:
00012DBA 4E75                       		rts	
00012DBC                            ; ===========================================================================
00012DBC                            
00012DBC                            Obj71_Delete:
00012DBC 4EFA BBA2                  		jmp	DeleteObject
00012DC0                            ; ===========================================================================
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0                            ; Sprite mappings - invisible solid blocks
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0                            Map_obj71:
00012DC0                            	include "_maps\obj71.asm"
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0                            ; Sprite mappings - invisible solid blocks
00012DC0                            ; ---------------------------------------------------------------------------
00012DC0 0000                       		dc.w byte_114BC-Map_obj71
00012DC2 0000                       		dc.w byte_114D1-Map_obj71
00012DC4 0000                       		dc.w byte_114E6-Map_obj71
00012DC6 04                         byte_114BC:	dc.b 4
00012DC7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012DCC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012DD1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012DD6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012DDB 04                         byte_114D1:	dc.b 4
00012DDC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012DE1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012DE6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012DEB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012DF0 04                         byte_114E6:	dc.b 4
00012DF1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012DF6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012DFB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012E00 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012E06 00                         		even
00012E06 00                         		even
00012E06                            
00012E06                            ; ===========================================================================
00012E06                            ; ---------------------------------------------------------------------------
00012E06                            ; Object 5D - fans (SLZ)
00012E06                            ; ---------------------------------------------------------------------------
00012E06                            
00012E06                            Obj5D:					; XREF: Obj_Index
00012E06 7000                       		moveq	#0,d0
00012E08 1028 0024                  		move.b	$24(a0),d0
00012E0C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012E10 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012E14                            ; ===========================================================================
00012E14 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012E16 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012E18                            ; ===========================================================================
00012E18                            
00012E18                            Obj5D_Main:				; XREF: Obj5D_Index
00012E18 5428 0024                  		addq.b	#2,$24(a0)
00012E1C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012E24 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012E2A 0028 0004 0001             		ori.b	#4,1(a0)
00012E30 117C 0010 0019             		move.b	#$10,$19(a0)
00012E36 117C 0004 0018             		move.b	#4,$18(a0)
00012E3C                            
00012E3C                            Obj5D_Delay:				; XREF: Obj5D_Index
00012E3C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012E42 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012E44 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012E48 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012E4A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012E50 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012E56 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012E58 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012E5E                            
00012E5E                            Obj5D_Blow:
00012E5E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012E62 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012E66 43F8 D000                  		lea	($FFFFD000).w,a1
00012E6A 3029 0008                  		move.w	8(a1),d0
00012E6E 9068 0008                  		sub.w	8(a0),d0
00012E72 0828 0000 0022             		btst	#0,$22(a0)
00012E78 6600                       		bne.s	Obj5D_ChkSonic
00012E7A 4440                       		neg.w	d0
00012E7C                            
00012E7C                            Obj5D_ChkSonic:
00012E7C 0640 0050                  		addi.w	#$50,d0
00012E80 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012E84 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012E86 3229 000C                  		move.w	$C(a1),d1
00012E8A 0641 0060                  		addi.w	#$60,d1
00012E8E 9268 000C                  		sub.w	$C(a0),d1
00012E92 6500                       		bcs.s	Obj5D_Animate
00012E94 0C41 0070                  		cmpi.w	#$70,d1
00012E98 6400                       		bcc.s	Obj5D_Animate
00012E9A 0440 0050                  		subi.w	#$50,d0
00012E9E 6400                       		bcc.s	loc_1159A
00012EA0 4640                       		not.w	d0
00012EA2 D040                       		add.w	d0,d0
00012EA4                            
00012EA4                            loc_1159A:
00012EA4 0640 0060                  		addi.w	#$60,d0
00012EA8 0828 0000 0022             		btst	#0,$22(a0)
00012EAE 6600                       		bne.s	loc_115A8
00012EB0 4440                       		neg.w	d0
00012EB2                            
00012EB2                            loc_115A8:
00012EB2 4400                       		neg.b	d0
00012EB4 E840                       		asr.w	#4,d0
00012EB6 0828 0000 0028             		btst	#0,$28(a0)
00012EBC 6700                       		beq.s	Obj5D_MoveSonic
00012EBE 4440                       		neg.w	d0
00012EC0                            
00012EC0                            Obj5D_MoveSonic:
00012EC0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012EC4                            
00012EC4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012EC4 5328 001E                  		subq.b	#1,$1E(a0)
00012EC8 6A00                       		bpl.s	Obj5D_ChkDel
00012ECA 117C 0000 001E             		move.b	#0,$1E(a0)
00012ED0 5228 001B                  		addq.b	#1,$1B(a0)
00012ED4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012EDA 6500                       		bcs.s	loc_115D8
00012EDC 117C 0000 001B             		move.b	#0,$1B(a0)
00012EE2                            
00012EE2                            loc_115D8:
00012EE2 7000                       		moveq	#0,d0
00012EE4 0828 0000 0028             		btst	#0,$28(a0)
00012EEA 6700                       		beq.s	loc_115E4
00012EEC 7002                       		moveq	#2,d0
00012EEE                            
00012EEE                            loc_115E4:
00012EEE D028 001B                  		add.b	$1B(a0),d0
00012EF2 1140 001A                  		move.b	d0,$1A(a0)
00012EF6                            
00012EF6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012EF6 6100 BA18                  		bsr.w	DisplaySprite
00012EFA 3028 0008                  		move.w	8(a0),d0
00012EFE 0240 FF80                  		andi.w	#$FF80,d0
00012F02 3238 F700                  		move.w	($FFFFF700).w,d1
00012F06 0441 0080                  		subi.w	#$80,d1
00012F0A 0241 FF80                  		andi.w	#$FF80,d1
00012F0E 9041                       		sub.w	d1,d0
00012F10 0C40 0280                  		cmpi.w	#$280,d0
00012F14 6300                       		bls.s	Obj5D_NoDel
00012F16 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F1A 6700 BA44                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F1E 3440                       		movea.w	d0,a2	; load address into a2
00012F20 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F24 6000 BA3A                  		bra.w	DeleteObject	; and delete object
00012F28                            
00012F28                            Obj5D_NoDel:
00012F28 4E75                       		rts	
00012F2A                            ; ===========================================================================
00012F2A                            ; ---------------------------------------------------------------------------
00012F2A                            ; Sprite mappings - fans (SLZ)
00012F2A                            ; ---------------------------------------------------------------------------
00012F2A                            Map_obj5D:
00012F2A                            	include "_maps\obj5D.asm"
00012F2A                            ; ---------------------------------------------------------------------------
00012F2A                            ; Sprite mappings - fans (SLZ)
00012F2A                            ; ---------------------------------------------------------------------------
00012F2A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012F2E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012F32 0000                       		dc.w byte_1161A-Map_obj5D
00012F34 02                         byte_1161A:	dc.b 2
00012F35 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012F3A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012F3F 02                         byte_11625:	dc.b 2
00012F40 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012F45 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012F4A 02                         byte_11630:	dc.b 2
00012F4B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012F50 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012F56 00                         		even
00012F56 00                         		even
00012F56                            
00012F56                            ; ===========================================================================
00012F56                            ; ---------------------------------------------------------------------------
00012F56                            ; Object 5E - seesaws (SLZ)
00012F56                            ; ---------------------------------------------------------------------------
00012F56                            
00012F56                            Obj5E:					; XREF: Obj_Index
00012F56 7000                       		moveq	#0,d0
00012F58 1028 0024                  		move.b	$24(a0),d0
00012F5C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012F60 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012F64 3028 0030                  		move.w	$30(a0),d0
00012F68 0240 FF80                  		andi.w	#$FF80,d0
00012F6C 3238 F700                  		move.w	($FFFFF700).w,d1
00012F70 0441 0080                  		subi.w	#$80,d1
00012F74 0241 FF80                  		andi.w	#$FF80,d1
00012F78 9041                       		sub.w	d1,d0
00012F7A 6B00 B9E4                  		bmi.w	DeleteObject
00012F7E 0C40 0280                  		cmpi.w	#$280,d0
00012F82 6300 B98C                  		bls.w	DisplaySprite
00012F86 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00012F8A 6700 B9D4                  		beq.w	DeleteObject		; if it's zero, don't remember object
00012F8E 3440                       		movea.w	d0,a2	; load address into a2
00012F90 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00012F94 6000 B9CA                  		bra.w	DeleteObject	; and delete object		
00012F98                            ; ===========================================================================
00012F98 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012F9A 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012F9C 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012F9E 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012FA0 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012FA2 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012FA4                            ; ===========================================================================
00012FA4                            
00012FA4                            Obj5E_Main:				; XREF: Obj5E_Index
00012FA4 5428 0024                  		addq.b	#2,$24(a0)
00012FA8 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012FB0 317C 0374 0002             		move.w	#$374,2(a0)
00012FB6 0028 0004 0001             		ori.b	#4,1(a0)
00012FBC 117C 0004 0018             		move.b	#4,$18(a0)
00012FC2 117C 0030 0019             		move.b	#$30,$19(a0)
00012FC8 3168 0008 0030             		move.w	8(a0),$30(a0)
00012FCE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012FD2 6600                       		bne.s	loc_116D2	; if not, branch
00012FD4 6100 C0A6                  		bsr.w	SingleObjLoad2
00012FD8 6600                       		bne.s	loc_116D2
00012FDA 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012FDE 5C29 0024                  		addq.b	#6,$24(a1)
00012FE2 3368 0008 0008             		move.w	8(a0),8(a1)
00012FE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012FEE 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012FF4 2348 003C                  		move.l	a0,$3C(a1)
00012FF8                            
00012FF8                            loc_116D2:
00012FF8 0828 0000 0022             		btst	#0,$22(a0)
00012FFE 6700                       		beq.s	loc_116E0
00013000 117C 0002 001A             		move.b	#2,$1A(a0)
00013006                            
00013006                            loc_116E0:
00013006 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001300C                            
0001300C                            Obj5E_Slope:				; XREF: Obj5E_Index
0001300C 1228 003A                  		move.b	$3A(a0),d1
00013010 6100 0000                  		bsr.w	loc_11766
00013014 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001301A 0828 0000 001A             		btst	#0,$1A(a0)
00013020 6700                       		beq.s	loc_11702
00013022 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013028                            
00013028                            loc_11702:
00013028 43F8 D000                  		lea	($FFFFD000).w,a1
0001302C 3169 0012 0038             		move.w	$12(a1),$38(a0)
00013032 323C 0030                  		move.w	#$30,d1
00013036 4EB9 0000 85E4             		jsr	(SlopeObject).l
0001303C 4E75                       		rts	
0001303E                            ; ===========================================================================
0001303E                            
0001303E                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001303E 6100 0000                  		bsr.w	loc_1174A
00013042 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00013048 0828 0000 001A             		btst	#0,$1A(a0)
0001304E 6700                       		beq.s	loc_11730
00013050 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00013056                            
00013056                            loc_11730:
00013056 323C 0030                  		move.w	#$30,d1
0001305A 4EB9 0000 8684             		jsr	(ExitPlatform).l
00013060 323C 0030                  		move.w	#$30,d1
00013064 3428 0008                  		move.w	8(a0),d2
00013068 4EB9 0000 965A             		jsr	SlopeObject2
0001306E 4E75                       		rts	
00013070                            ; ===========================================================================
00013070                            
00013070                            loc_1174A:				; XREF: Obj5E_Slope2
00013070 7202                       		moveq	#2,d1
00013072 43F8 D000                  		lea	($FFFFD000).w,a1
00013076 3028 0008                  		move.w	8(a0),d0
0001307A 9069 0008                  		sub.w	8(a1),d0
0001307E 6400                       		bcc.s	loc_1175E
00013080 4440                       		neg.w	d0
00013082 7200                       		moveq	#0,d1
00013084                            
00013084                            loc_1175E:
00013084 0C40 0008                  		cmpi.w	#8,d0
00013088 6400                       		bcc.s	loc_11766
0001308A 7201                       		moveq	#1,d1
0001308C                            
0001308C                            loc_11766:
0001308C 1028 001A                  		move.b	$1A(a0),d0
00013090 B001                       		cmp.b	d1,d0
00013092 6700                       		beq.s	locret_11790
00013094 6400                       		bcc.s	loc_11772
00013096 5400                       		addq.b	#2,d0
00013098                            
00013098                            loc_11772:
00013098 5300                       		subq.b	#1,d0
0001309A 1140 001A                  		move.b	d0,$1A(a0)
0001309E 1141 003A                  		move.b	d1,$3A(a0)
000130A2 08A8 0000 0001             		bclr	#0,1(a0)
000130A8 0828 0001 001A             		btst	#1,$1A(a0)
000130AE 6700                       		beq.s	locret_11790
000130B0 08E8 0000 0001             		bset	#0,1(a0)
000130B6                            
000130B6                            locret_11790:
000130B6 4E75                       		rts	
000130B8                            ; ===========================================================================
000130B8                            
000130B8                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000130B8 5428 0024                  		addq.b	#2,$24(a0)
000130BC 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000130C4 317C 04F0 0002             		move.w	#$4F0,2(a0)
000130CA 0028 0004 0001             		ori.b	#4,1(a0)
000130D0 117C 0004 0018             		move.b	#4,$18(a0)
000130D6 117C 008B 0020             		move.b	#$8B,$20(a0)
000130DC 117C 000C 0019             		move.b	#$C,$19(a0)
000130E2 3168 0008 0030             		move.w	8(a0),$30(a0)
000130E8 0668 0028 0008             		addi.w	#$28,8(a0)
000130EE 3168 000C 0034             		move.w	$C(a0),$34(a0)
000130F4 117C 0001 001A             		move.b	#1,$1A(a0)
000130FA 0828 0000 0022             		btst	#0,$22(a0)
00013100 6700                       		beq.s	Obj5E_MoveSpike
00013102 0468 0050 0008             		subi.w	#$50,8(a0)
00013108 117C 0002 003A             		move.b	#2,$3A(a0)
0001310E                            
0001310E                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001310E 2268 003C                  		movea.l	$3C(a0),a1
00013112 7000                       		moveq	#0,d0
00013114 1028 003A                  		move.b	$3A(a0),d0
00013118 9029 003A                  		sub.b	$3A(a1),d0
0001311C 6700                       		beq.s	loc_1183E
0001311E 6400                       		bcc.s	loc_117FC
00013120 4400                       		neg.b	d0
00013122                            
00013122                            loc_117FC:
00013122 323C F7E8                  		move.w	#-$818,d1
00013126 343C FEEC                  		move.w	#-$114,d2
0001312A 0C00 0001                  		cmpi.b	#1,d0
0001312E 6700                       		beq.s	loc_11822
00013130 323C F510                  		move.w	#-$AF0,d1
00013134 343C FF34                  		move.w	#-$CC,d2
00013138 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001313E 6D00                       		blt.s	loc_11822
00013140 323C F200                  		move.w	#-$E00,d1
00013144 343C FF60                  		move.w	#-$A0,d2
00013148                            
00013148                            loc_11822:
00013148 3141 0012                  		move.w	d1,$12(a0)
0001314C 3142 0010                  		move.w	d2,$10(a0)
00013150 3028 0008                  		move.w	8(a0),d0
00013154 9068 0030                  		sub.w	$30(a0),d0
00013158 6400                       		bcc.s	loc_11838
0001315A 4468 0010                  		neg.w	$10(a0)
0001315E                            
0001315E                            loc_11838:
0001315E 5428 0024                  		addq.b	#2,$24(a0)
00013162 6000                       		bra.s	Obj5E_SpikeFall
00013164                            ; ===========================================================================
00013164                            
00013164                            loc_1183E:				; XREF: Obj5E_MoveSpike
00013164 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001316A 7000                       		moveq	#0,d0
0001316C 1029 001A                  		move.b	$1A(a1),d0
00013170 343C 0028                  		move.w	#$28,d2
00013174 3228 0008                  		move.w	8(a0),d1
00013178 9268 0030                  		sub.w	$30(a0),d1
0001317C 6400                       		bcc.s	loc_1185C
0001317E 4442                       		neg.w	d2
00013180 5440                       		addq.w	#2,d0
00013182                            
00013182                            loc_1185C:
00013182 D040                       		add.w	d0,d0
00013184 3228 0034                  		move.w	$34(a0),d1
00013188 D272 0000                  		add.w	(a2,d0.w),d1
0001318C 3141 000C                  		move.w	d1,$C(a0)
00013190 D468 0030                  		add.w	$30(a0),d2
00013194 3142 0008                  		move.w	d2,8(a0)
00013198 4268 000E                  		clr.w	$E(a0)
0001319C 4268 000A                  		clr.w	$A(a0)
000131A0 4E75                       		rts	
000131A2                            ; ===========================================================================
000131A2                            
000131A2                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000131A2 4A68 0012                  		tst.w	$12(a0)
000131A6 6A00                       		bpl.s	loc_1189A
000131A8 6100 B72C                  		bsr.w	ObjectFall
000131AC 3028 0034                  		move.w	$34(a0),d0
000131B0 0440 002F                  		subi.w	#$2F,d0
000131B4 B068 000C                  		cmp.w	$C(a0),d0
000131B8 6E00                       		bgt.s	locret_11898
000131BA 6100 B71A                  		bsr.w	ObjectFall
000131BE                            
000131BE                            locret_11898:
000131BE 4E75                       		rts	
000131C0                            ; ===========================================================================
000131C0                            
000131C0                            loc_1189A:				; XREF: Obj5E_SpikeFall
000131C0 6100 B714                  		bsr.w	ObjectFall
000131C4 2268 003C                  		movea.l	$3C(a0),a1
000131C8 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000131CE 7000                       		moveq	#0,d0
000131D0 1029 001A                  		move.b	$1A(a1),d0
000131D4 3228 0008                  		move.w	8(a0),d1
000131D8 9268 0030                  		sub.w	$30(a0),d1
000131DC 6400                       		bcc.s	loc_118BA
000131DE 5440                       		addq.w	#2,d0
000131E0                            
000131E0                            loc_118BA:
000131E0 D040                       		add.w	d0,d0
000131E2 3228 0034                  		move.w	$34(a0),d1
000131E6 D272 0000                  		add.w	(a2,d0.w),d1
000131EA B268 000C                  		cmp.w	$C(a0),d1
000131EE 6E00                       		bgt.s	locret_11938
000131F0 2268 003C                  		movea.l	$3C(a0),a1
000131F4 7202                       		moveq	#2,d1
000131F6 4A68 0010                  		tst.w	$10(a0)
000131FA 6B00                       		bmi.s	Obj5E_Spring
000131FC 7200                       		moveq	#0,d1
000131FE                            
000131FE                            Obj5E_Spring:
000131FE 1341 003A                  		move.b	d1,$3A(a1)
00013202 1141 003A                  		move.b	d1,$3A(a0)
00013206 B229 001A                  		cmp.b	$1A(a1),d1
0001320A 6700                       		beq.s	loc_1192C
0001320C 08A9 0003 0022             		bclr	#3,$22(a1)
00013212 6700                       		beq.s	loc_1192C
00013214 4229 0025                  		clr.b	$25(a1)
00013218 137C 0002 0024             		move.b	#2,$24(a1)
0001321E 45F8 D000                  		lea	($FFFFD000).w,a2
00013222 3568 0012 0012             		move.w	$12(a0),$12(a2)
00013228 446A 0012                  		neg.w	$12(a2)
0001322C 08EA 0001 0022             		bset	#1,$22(a2)
00013232 08AA 0003 0022             		bclr	#3,$22(a2)
00013238 422A 003C                  		clr.b	$3C(a2)
0001323C 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00013242 157C 0002 0024             		move.b	#2,$24(a2)
00013248 303C 00CC                  		move.w	#$CC,d0
0001324C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play spring sound
00013252                            
00013252                            loc_1192C:
00013252 4268 0010                  		clr.w	$10(a0)
00013256 4268 0012                  		clr.w	$12(a0)
0001325A 5528 0024                  		subq.b	#2,$24(a0)
0001325E                            
0001325E                            locret_11938:
0001325E 4E75                       		rts	
00013260                            ; ===========================================================================
00013260 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001326A                            
0001326A                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001329A                            		even
0001329A                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000132CA                            		even
000132CA                            ; ---------------------------------------------------------------------------
000132CA                            ; Sprite mappings - seesaws (SLZ)
000132CA                            ; ---------------------------------------------------------------------------
000132CA                            Map_obj5E:
000132CA                            	include "_maps\obj5E.asm"
000132CA                            ; ---------------------------------------------------------------------------
000132CA                            ; Sprite mappings - seesaws (SLZ)
000132CA                            ; ---------------------------------------------------------------------------
000132CA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000132CE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000132D2 07                         byte_119AC:	dc.b 7
000132D3 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000132D8 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000132DD E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000132E2 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000132E7 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000132EC F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000132F1 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000132F6 04                         byte_119D0:	dc.b 4
000132F7 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000132FC E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013301 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013306 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001330C 00                         		even
0001330C 00                         		even
0001330C                            
0001330C                            ; ---------------------------------------------------------------------------
0001330C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001330C                            ; ---------------------------------------------------------------------------
0001330C                            Map_obj5Ea:
0001330C                            	include "_maps\obj5Eballs.asm"
0001330C                            ; ---------------------------------------------------------------------------
0001330C                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001330C                            ; ---------------------------------------------------------------------------
0001330C 0000                       		dc.w byte_119EA-Map_obj5Ea
0001330E 0000                       		dc.w byte_119F0-Map_obj5Ea
00013310 01                         byte_119EA:	dc.b 1
00013311 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013316 01                         byte_119F0:	dc.b 1
00013317 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001331C                            		even
0001331C                            		even
0001331C                            
0001331C                            ; ===========================================================================
0001331C                            ; ---------------------------------------------------------------------------
0001331C                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001331C                            ; ---------------------------------------------------------------------------
0001331C                            
0001331C                            Obj5F:					; XREF: Obj_Index
0001331C 7000                       		moveq	#0,d0
0001331E 1028 0024                  		move.b	$24(a0),d0
00013322 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00013326 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001332A                            ; ===========================================================================
0001332A 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001332C 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001332E 0000                       		dc.w Obj5F_Display-Obj5F_Index
00013330 0000                       		dc.w Obj5F_End-Obj5F_Index
00013332                            ; ===========================================================================
00013332                            
00013332                            Obj5F_Main:				; XREF: Obj5F_Index
00013332 5428 0024                  		addq.b	#2,$24(a0)
00013336 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001333E 317C 0400 0002             		move.w	#$400,2(a0)
00013344 0028 0004 0001             		ori.b	#4,1(a0)
0001334A 117C 0003 0018             		move.b	#3,$18(a0)
00013350 117C 000C 0019             		move.b	#$C,$19(a0)
00013356 1028 0028                  		move.b	$28(a0),d0
0001335A 6700                       		beq.s	loc_11A3C
0001335C 1140 0024                  		move.b	d0,$24(a0)
00013360 4E75                       		rts	
00013362                            ; ===========================================================================
00013362                            
00013362                            loc_11A3C:
00013362 117C 009A 0020             		move.b	#$9A,$20(a0)
00013368 0868 0000 0022             		bchg	#0,$22(a0)
0001336E                            
0001336E                            Obj5F_Action:				; XREF: Obj5F_Index
0001336E 7000                       		moveq	#0,d0
00013370 1028 0025                  		move.b	$25(a0),d0
00013374 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00013378 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001337C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013382 6100 85EC                  		bsr.w	AnimateSprite
00013386 6000 DBD2                  		bra.w	MarkObjGone
0001338A                            ; ===========================================================================
0001338A 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001338C 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001338E 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00013390                            ; ===========================================================================
00013390                            
00013390                            Obj5F_Walk:				; XREF: Obj5F_Index2
00013390 6100 0000                  		bsr.w	Obj5F_ChkSonic
00013394 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00013398 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001339A 5428 0025                  		addq.b	#2,$25(a0)
0001339E 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000133A4 317C 0010 0010             		move.w	#$10,$10(a0)
000133AA 117C 0001 001C             		move.b	#1,$1C(a0)
000133B0 0868 0000 0022             		bchg	#0,$22(a0)
000133B6 6700                       		beq.s	locret_11A96
000133B8 4468 0010                  		neg.w	$10(a0)		; change direction
000133BC                            
000133BC                            locret_11A96:
000133BC 4E75                       		rts	
000133BE                            ; ===========================================================================
000133BE                            
000133BE                            Obj5F_Wait:				; XREF: Obj5F_Index2
000133BE 6100 0000                  		bsr.w	Obj5F_ChkSonic
000133C2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000133C6 6B00                       		bmi.s	loc_11AA8
000133C8 6100 B52C                  		bsr.w	SpeedToPos
000133CC 4E75                       		rts	
000133CE                            ; ===========================================================================
000133CE                            
000133CE                            loc_11AA8:
000133CE 5528 0025                  		subq.b	#2,$25(a0)
000133D2 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000133D8 4268 0010                  		clr.w	$10(a0)		; stop walking
000133DC 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000133E2 4E75                       		rts	
000133E4                            ; ===========================================================================
000133E4                            
000133E4                            Obj5F_Explode:				; XREF: Obj5F_Index2
000133E4 5368 0030                  		subq.w	#1,$30(a0)
000133E8 6A00                       		bpl.s	locret_11AD0
000133EA 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000133EE 117C 0000 0024             		move.b	#0,$24(a0)
000133F4                            
000133F4                            locret_11AD0:
000133F4 4E75                       		rts	
000133F6                            ; ===========================================================================
000133F6                            
000133F6                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000133F6 3038 D008                  		move.w	($FFFFD008).w,d0
000133FA 9068 0008                  		sub.w	8(a0),d0
000133FE 6400                       		bcc.s	loc_11ADE
00013400 4440                       		neg.w	d0
00013402                            
00013402                            loc_11ADE:
00013402 0C40 0060                  		cmpi.w	#$60,d0
00013406 6400                       		bcc.s	locret_11B5E
00013408 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001340C 9068 000C                  		sub.w	$C(a0),d0
00013410 6400                       		bcc.s	Obj5F_MakeFuse
00013412 4440                       		neg.w	d0
00013414                            
00013414                            Obj5F_MakeFuse:
00013414 0C40 0060                  		cmpi.w	#$60,d0
00013418 6400                       		bcc.s	locret_11B5E
0001341A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001341E 6600                       		bne.s	locret_11B5E
00013420 117C 0004 0025             		move.b	#4,$25(a0)
00013426 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001342C 4268 0010                  		clr.w	$10(a0)
00013430 117C 0002 001C             		move.b	#2,$1C(a0)
00013436 6100 BC44                  		bsr.w	SingleObjLoad2
0001343A 6600                       		bne.s	locret_11B5E
0001343C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00013440 3368 0008 0008             		move.w	8(a0),8(a1)
00013446 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001344C 3368 000C 0034             		move.w	$C(a0),$34(a1)
00013452 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013458 137C 0004 0028             		move.b	#4,$28(a1)
0001345E 137C 0003 001C             		move.b	#3,$1C(a1)
00013464 337C 0010 0012             		move.w	#$10,$12(a1)
0001346A 0828 0001 0022             		btst	#1,$22(a0)
00013470 6700                       		beq.s	loc_11B54
00013472 4469 0012                  		neg.w	$12(a1)
00013476                            
00013476                            loc_11B54:
00013476 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001347C 2348 003C                  		move.l	a0,$3C(a1)
00013480                            
00013480                            locret_11B5E:
00013480 4E75                       		rts	
00013482                            ; ===========================================================================
00013482                            
00013482                            Obj5F_Display:				; XREF: Obj5F_Index
00013482 6100                       		bsr.s	loc_11B70
00013484 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001348A 6100 84E4                  		bsr.w	AnimateSprite
0001348E 6000 DACA                  		bra.w	MarkObjGone
00013492                            ; ===========================================================================
00013492                            
00013492                            loc_11B70:
00013492 5368 0030                  		subq.w	#1,$30(a0)
00013496 6B00                       		bmi.s	loc_11B7C
00013498 6100 B45C                  		bsr.w	SpeedToPos
0001349C 4E75                       		rts	
0001349E                            ; ===========================================================================
0001349E                            
0001349E                            loc_11B7C:
0001349E 4268 0030                  		clr.w	$30(a0)
000134A2 4228 0024                  		clr.b	$24(a0)
000134A6 3168 0034 000C             		move.w	$34(a0),$C(a0)
000134AC 7203                       		moveq	#3,d1
000134AE 2248                       		movea.l	a0,a1
000134B0 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000134B6 6000                       		bra.s	Obj5F_MakeShrap
000134B8                            ; ===========================================================================
000134B8                            
000134B8                            Obj5F_Loop:
000134B8 6100 BBC2                  		bsr.w	SingleObjLoad2
000134BC 6600                       		bne.s	loc_11BCE
000134BE                            
000134BE                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000134BE 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000134C2 3368 0008 0008             		move.w	8(a0),8(a1)
000134C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134CE 137C 0006 0028             		move.b	#6,$28(a1)
000134D4 137C 0004 001C             		move.b	#4,$1C(a1)
000134DA 335A 0010                  		move.w	(a2)+,$10(a1)
000134DE 335A 0012                  		move.w	(a2)+,$12(a1)
000134E2 137C 0098 0020             		move.b	#$98,$20(a1)
000134E8 08E9 0007 0001             		bset	#7,1(a1)
000134EE                            
000134EE                            loc_11BCE:
000134EE 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000134F2                            
000134F2 117C 0006 0024             		move.b	#6,$24(a0)
000134F8                            
000134F8                            Obj5F_End:				; XREF: Obj5F_Index
000134F8 6100 B3FC                  		bsr.w	SpeedToPos
000134FC 0668 0018 0012             		addi.w	#$18,$12(a0)
00013502 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00013508 6100 8466                  		bsr.w	AnimateSprite
0001350C 4A28 0001                  		tst.b	1(a0)
00013510 6A00 B44E                  		bpl.w	DeleteObject
00013514 6000 B3FA                  		bra.w	DisplaySprite
00013518                            ; ===========================================================================
00013518 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00013528                            
00013528                            Ani_obj5F:
00013528                            	include "_anim\obj5F.asm"
00013528                            ; ---------------------------------------------------------------------------
00013528                            ; Animation script - Bomb enemy
00013528                            ; ---------------------------------------------------------------------------
00013528 0000                       		dc.w byte_11C12-Ani_obj5F
0001352A 0000                       		dc.w byte_11C16-Ani_obj5F
0001352C 0000                       		dc.w byte_11C1C-Ani_obj5F
0001352E 0000                       		dc.w byte_11C20-Ani_obj5F
00013530 0000                       		dc.w byte_11C24-Ani_obj5F
00013532 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00013536 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001353C 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00013540 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00013544 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00013548                            		even
00013548                            		even
00013548                            
00013548                            ; ---------------------------------------------------------------------------
00013548                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013548                            ; ---------------------------------------------------------------------------
00013548                            Map_obj5F:
00013548                            	include "_maps\obj5F.asm"
00013548                            ; ---------------------------------------------------------------------------
00013548                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013548                            ; ---------------------------------------------------------------------------
00013548 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001354C 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00013550 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00013554 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00013558 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001355C 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00013560 03                         byte_11C40:	dc.b 3
00013561 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00013566 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001356B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013570 03                         byte_11C50:	dc.b 3
00013571 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013576 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001357B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013580 03                         byte_11C60:	dc.b 3
00013581 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013586 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001358B E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013590 03                         byte_11C70:	dc.b 3
00013591 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013596 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001359B E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135A0 03                         byte_11C80:	dc.b 3
000135A1 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000135A6 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000135AB E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000135B0 03                         byte_11C90:	dc.b 3
000135B1 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135B6 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000135BB E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000135C0 02                         byte_11CA0:	dc.b 2
000135C1 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000135C6 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135CB 02                         byte_11CAB:	dc.b 2
000135CC F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000135D1 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000135D6 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000135D7 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000135DC 01                         byte_11CBC:	dc.b 1			; fuse
000135DD E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000135E2 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000135E3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000135E8 01                         byte_11CC8:	dc.b 1			; fireball
000135E9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000135EE                            		even
000135EE                            		even
000135EE                            
000135EE                            ; ===========================================================================
000135EE                            ; ---------------------------------------------------------------------------
000135EE                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000135EE                            ; ---------------------------------------------------------------------------
000135EE                            
000135EE                            Obj60:					; XREF: Obj_Index
000135EE 7000                       		moveq	#0,d0
000135F0 1028 0024                  		move.b	$24(a0),d0
000135F4 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000135F8 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000135FC                            ; ===========================================================================
000135FC 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000135FE 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00013600 0000                       		dc.w Obj60_Display-Obj60_Index
00013602 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00013604 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00013606                            ; ===========================================================================
00013606                            
00013606                            Obj60_Main:				; XREF: Obj60_Index
00013606 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001360E 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00013614 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001361A 6700                       		beq.s	loc_11D02
0001361C 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00013622                            
00013622                            loc_11D02:
00013622 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013628 6600                       		bne.s	loc_11D10
0001362A 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00013630                            
00013630                            loc_11D10:
00013630 0028 0004 0001             		ori.b	#4,1(a0)
00013636 117C 0004 0018             		move.b	#4,$18(a0)
0001363C 117C 000B 0020             		move.b	#$B,$20(a0)
00013642 117C 000C 0019             		move.b	#$C,$19(a0)
00013648 7400                       		moveq	#0,d2
0001364A 45E8 0037                  		lea	$37(a0),a2
0001364E 264A                       		movea.l	a2,a3
00013650 524A                       		addq.w	#1,a2
00013652 7203                       		moveq	#3,d1
00013654                            
00013654                            Obj60_MakeOrbs:
00013654 6100 BA26                  		bsr.w	SingleObjLoad2
00013658 6600                       		bne.s	loc_11D90
0001365A 5213                       		addq.b	#1,(a3)
0001365C 3A09                       		move.w	a1,d5
0001365E 0445 D000                  		subi.w	#-$3000,d5
00013662 EC4D                       		lsr.w	#6,d5
00013664 0245 007F                  		andi.w	#$7F,d5
00013668 14C5                       		move.b	d5,(a2)+
0001366A 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001366C 137C 0006 0024             		move.b	#6,$24(a1)
00013672 2368 0004 0004             		move.l	4(a0),4(a1)
00013678 3368 0002 0002             		move.w	2(a0),2(a1)
0001367E 0029 0004 0001             		ori.b	#4,1(a1)
00013684 137C 0004 0018             		move.b	#4,$18(a1)
0001368A 137C 0008 0019             		move.b	#8,$19(a1)
00013690 137C 0003 001A             		move.b	#3,$1A(a1)
00013696 137C 0098 0020             		move.b	#$98,$20(a1)
0001369C 1342 0026                  		move.b	d2,$26(a1)
000136A0 0602 0040                  		addi.b	#$40,d2
000136A4 2348 003C                  		move.l	a0,$3C(a1)
000136A8 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000136AC                            
000136AC                            loc_11D90:
000136AC 7001                       		moveq	#1,d0
000136AE 0828 0000 0022             		btst	#0,$22(a0)
000136B4 6700                       		beq.s	Obj60_Move
000136B6 4440                       		neg.w	d0
000136B8                            
000136B8                            Obj60_Move:
000136B8 1140 0036                  		move.b	d0,$36(a0)
000136BC 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000136C2 5428 0024                  		addq.b	#2,$24(a0)
000136C6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000136CC 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000136D2 6700                       		beq.s	locret_11DBC	; if not, branch
000136D4 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000136D8                            
000136D8                            locret_11DBC:
000136D8 4E75                       		rts	
000136DA                            ; ===========================================================================
000136DA                            
000136DA                            Obj60_ChkSonic:				; XREF: Obj60_Index
000136DA 3038 D008                  		move.w	($FFFFD008).w,d0
000136DE 9068 0008                  		sub.w	8(a0),d0
000136E2 6400                       		bcc.s	loc_11DCA
000136E4 4440                       		neg.w	d0
000136E6                            
000136E6                            loc_11DCA:
000136E6 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000136EA 6400                       		bcc.s	Obj60_Animate	; if not, branch
000136EC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000136F0 9068 000C                  		sub.w	$C(a0),d0
000136F4 6400                       		bcc.s	loc_11DDC
000136F6 4440                       		neg.w	d0
000136F8                            
000136F8                            loc_11DDC:
000136F8 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000136FC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000136FE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00013702 6600                       		bne.s	Obj60_Animate	; if yes, branch
00013704 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001370A                            
0001370A                            Obj60_Animate:
0001370A 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00013710 6100 825E                  		bsr.w	AnimateSprite
00013714 6000 0000                  		bra.w	Obj60_ChkDel
00013718                            ; ===========================================================================
00013718                            
00013718                            Obj60_Display:				; XREF: Obj60_Index
00013718 6100 B1DC                  		bsr.w	SpeedToPos
0001371C                            
0001371C                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001371C 3028 0008                  		move.w	8(a0),d0
00013720 0240 FF80                  		andi.w	#$FF80,d0
00013724 3238 F700                  		move.w	($FFFFF700).w,d1
00013728 0441 0080                  		subi.w	#$80,d1
0001372C 0241 FF80                  		andi.w	#$FF80,d1
00013730 9041                       		sub.w	d1,d0
00013732 0C40 0280                  		cmpi.w	#$280,d0
00013736 6200 0000                  		bhi.w	Obj60_ChkGone
0001373A 6000 B1D4                  		bra.w	DisplaySprite
0001373E                            ; ===========================================================================
0001373E                            
0001373E                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001373E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013742 6700                       		beq.s	loc_11E34		; if it's zero, don't remember object
00013744 3440                       		movea.w	d0,a2	; load address into a2
00013746 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001374A                            
0001374A                            loc_11E34:
0001374A 45E8 0037                  		lea	$37(a0),a2
0001374E 7400                       		moveq	#0,d2
00013750 141A                       		move.b	(a2)+,d2
00013752 5342                       		subq.w	#1,d2
00013754 6500                       		bcs.s	Obj60_Delete
00013756                            
00013756                            loc_11E40:
00013756 7000                       		moveq	#0,d0
00013758 101A                       		move.b	(a2)+,d0
0001375A ED48                       		lsl.w	#6,d0
0001375C 0680 00FF D000             		addi.l	#$FFD000,d0
00013762 2240                       		movea.l	d0,a1
00013764 6100 B1FC                  		bsr.w	DeleteObject2
00013768 51CA FFEC                  		dbf	d2,loc_11E40
0001376C                            
0001376C                            Obj60_Delete:
0001376C 6000 B1F2                  		bra.w	DeleteObject
00013770                            ; ===========================================================================
00013770                            
00013770                            Obj60_MoveOrb:				; XREF: Obj60_Index
00013770 2268 003C                  		movea.l	$3C(a0),a1
00013774 0C11 0060                  		cmpi.b	#$60,0(a1)
00013778 6600 B1E6                  		bne.w	DeleteObject
0001377C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00013782 6600                       		bne.s	Obj60_Circle
00013784 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001378A 6600                       		bne.s	Obj60_Circle
0001378C 5428 0024                  		addq.b	#2,$24(a0)
00013790 5329 0037                  		subq.b	#1,$37(a1)
00013794 6600                       		bne.s	Obj60_FireOrb
00013796 5429 0024                  		addq.b	#2,$24(a1)
0001379A                            
0001379A                            Obj60_FireOrb:
0001379A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000137A0 0829 0000 0022             		btst	#0,$22(a1)
000137A6 6700                       		beq.s	Obj60_Display2
000137A8 4468 0010                  		neg.w	$10(a0)
000137AC                            
000137AC                            Obj60_Display2:
000137AC 6000 B162                  		bra.w	DisplaySprite
000137B0                            ; ===========================================================================
000137B0                            
000137B0                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000137B0 1028 0026                  		move.b	$26(a0),d0
000137B4 4EB9 0000 29CC             		jsr	(CalcSine).l
000137BA E841                       		asr.w	#4,d1
000137BC D269 0008                  		add.w	8(a1),d1
000137C0 3141 0008                  		move.w	d1,8(a0)
000137C4 E840                       		asr.w	#4,d0
000137C6 D069 000C                  		add.w	$C(a1),d0
000137CA 3140 000C                  		move.w	d0,$C(a0)
000137CE 1029 0036                  		move.b	$36(a1),d0
000137D2 D128 0026                  		add.b	d0,$26(a0)
000137D6 6000 B138                  		bra.w	DisplaySprite
000137DA                            ; ===========================================================================
000137DA                            
000137DA                            Obj60_ChkDel2:				; XREF: Obj60_Index
000137DA 6100 B11A                  		bsr.w	SpeedToPos
000137DE 4A28 0001                  		tst.b	1(a0)
000137E2 6A00 B17C                  		bpl.w	DeleteObject
000137E6 6000 B128                  		bra.w	DisplaySprite
000137EA                            ; ===========================================================================
000137EA                            Ani_obj60:
000137EA                            	include "_anim\obj60.asm"
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            ; Animation script - Orbinaut enemy
000137EA                            ; ---------------------------------------------------------------------------
000137EA 0000                       		dc.w byte_11EDA-Ani_obj60
000137EC 0000                       		dc.w byte_11EDE-Ani_obj60
000137EE 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000137F2 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000137F8                            		even
000137F8                            		even
000137F8                            
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            Map_obj60:
000137F8                            	include "_maps\obj60.asm"
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000137F8                            ; ---------------------------------------------------------------------------
000137F8 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000137FC 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013800 01                         byte_11EEC:	dc.b 1
00013801 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013806 01                         byte_11EF2:	dc.b 1
00013807 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001380C 01                         byte_11EF8:	dc.b 1
0001380D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013812 01                         byte_11EFE:	dc.b 1
00013813 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013818                            		even
00013818                            		even
00013818                            
00013818                            ; ===========================================================================
00013818                            ; ---------------------------------------------------------------------------
00013818                            ; Object 16 - harpoon (LZ)
00013818                            ; ---------------------------------------------------------------------------
00013818                            
00013818                            Obj16:					; XREF: Obj_Index
00013818 7000                       		moveq	#0,d0
0001381A 1028 0024                  		move.b	$24(a0),d0
0001381E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013822 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013826                            ; ===========================================================================
00013826 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013828 0000                       		dc.w Obj16_Move-Obj16_Index
0001382A 0000                       		dc.w Obj16_Wait-Obj16_Index
0001382C                            ; ===========================================================================
0001382C                            
0001382C                            Obj16_Main:				; XREF: Obj16_Index
0001382C 5428 0024                  		addq.b	#2,$24(a0)
00013830 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013838 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001383E 0028 0004 0001             		ori.b	#4,1(a0)
00013844 117C 0004 0018             		move.b	#4,$18(a0)
0001384A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013850 117C 0014 0019             		move.b	#$14,$19(a0)
00013856 317C 003C 0030             		move.w	#60,$30(a0)
0001385C                            
0001385C                            Obj16_Move:				; XREF: Obj16_Index
0001385C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013862 6100 810C                  		bsr.w	AnimateSprite
00013866 7000                       		moveq	#0,d0
00013868 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001386C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00013872 6000 D6E6                  		bra.w	MarkObjGone
00013876                            ; ===========================================================================
00013876 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001387C                            ; ===========================================================================
0001387C                            
0001387C                            Obj16_Wait:				; XREF: Obj16_Index
0001387C 5368 0030                  		subq.w	#1,$30(a0)
00013880 6A00                       		bpl.s	Obj16_ChkDel
00013882 317C 003C 0030             		move.w	#60,$30(a0)
00013888 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001388C 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00013892                            
00013892                            Obj16_ChkDel:
00013892 6000 D6C6                  		bra.w	MarkObjGone
00013896                            ; ===========================================================================
00013896                            Ani_obj16:
00013896                            	include "_anim\obj16.asm"
00013896                            ; ---------------------------------------------------------------------------
00013896                            ; Animation script - harpoon (LZ)
00013896                            ; ---------------------------------------------------------------------------
00013896 0000                       		dc.w byte_11F8A-Ani_obj16
00013898 0000                       		dc.w byte_11F8E-Ani_obj16
0001389A 0000                       		dc.w byte_11F92-Ani_obj16
0001389C 0000                       		dc.w byte_11F96-Ani_obj16
0001389E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000138A2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000138A6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000138AA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000138AE                            		even
000138AE                            		even
000138AE                            
000138AE                            ; ---------------------------------------------------------------------------
000138AE                            ; Sprite mappings - harpoon (LZ)
000138AE                            ; ---------------------------------------------------------------------------
000138AE                            Map_obj16:
000138AE                            	include "_maps\obj16.asm"
000138AE                            ; ---------------------------------------------------------------------------
000138AE                            ; Sprite mappings - harpoon (LZ)
000138AE                            ; ---------------------------------------------------------------------------
000138AE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000138B2 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000138B6 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000138BA 01                         byte_11FA6:	dc.b 1
000138BB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000138C0 01                         byte_11FAC:	dc.b 1
000138C1 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000138C6 02                         byte_11FB2:	dc.b 2
000138C7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000138CC FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000138D1 01                         byte_11FBD:	dc.b 1
000138D2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000138D7 01                         byte_11FC3:	dc.b 1
000138D8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000138DD 02                         byte_11FC9:	dc.b 2
000138DE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000138E3 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000138E8                            		even
000138E8                            		even
000138E8                            
000138E8                            ; ===========================================================================
000138E8                            ; ---------------------------------------------------------------------------
000138E8                            ; Object 61 - blocks (LZ)
000138E8                            ; ---------------------------------------------------------------------------
000138E8                            
000138E8                            Obj61:					; XREF: Obj_Index
000138E8 7000                       		moveq	#0,d0
000138EA 1028 0024                  		move.b	$24(a0),d0
000138EE 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000138F2 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000138F6                            ; ===========================================================================
000138F6 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000138F8 0000                       		dc.w Obj61_Action-Obj61_Index
000138FA                            
000138FA 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000138FC 200C                       		dc.b $20, $C
000138FE 1010                       		dc.b $10, $10
00013900 1010                       		dc.b $10, $10
00013902                            ; ===========================================================================
00013902                            
00013902                            Obj61_Main:				; XREF: Obj61_Index
00013902 5428 0024                  		addq.b	#2,$24(a0)
00013906 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001390E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013914 117C 0004 0001             		move.b	#4,1(a0)
0001391A 117C 0003 0018             		move.b	#3,$18(a0)
00013920 7000                       		moveq	#0,d0
00013922 1028 0028                  		move.b	$28(a0),d0
00013926 E648                       		lsr.w	#3,d0
00013928 0240 000E                  		andi.w	#$E,d0
0001392C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013930 115A 0019                  		move.b	(a2)+,$19(a0)
00013934 1152 0016                  		move.b	(a2),$16(a0)
00013938 E248                       		lsr.w	#1,d0
0001393A 1140 001A                  		move.b	d0,$1A(a0)
0001393E 3168 0008 0034             		move.w	8(a0),$34(a0)
00013944 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001394A 1028 0028                  		move.b	$28(a0),d0
0001394E 0200 000F                  		andi.b	#$F,d0
00013952 6700                       		beq.s	Obj61_Action
00013954 0C00 0007                  		cmpi.b	#7,d0
00013958 6700                       		beq.s	Obj61_Action
0001395A 117C 0001 0038             		move.b	#1,$38(a0)
00013960                            
00013960                            Obj61_Action:				; XREF: Obj61_Index
00013960 3F28 0008                  		move.w	8(a0),-(sp)
00013964 7000                       		moveq	#0,d0
00013966 1028 0028                  		move.b	$28(a0),d0
0001396A 0240 000F                  		andi.w	#$F,d0
0001396E D040                       		add.w	d0,d0
00013970 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013974 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013978 381F                       		move.w	(sp)+,d4
0001397A 4A28 0001                  		tst.b	1(a0)
0001397E 6A00                       		bpl.s	Obj61_ChkDel
00013980 7200                       		moveq	#0,d1
00013982 1228 0019                  		move.b	$19(a0),d1
00013986 0641 000B                  		addi.w	#$B,d1
0001398A 7400                       		moveq	#0,d2
0001398C 1428 0016                  		move.b	$16(a0),d2
00013990 3602                       		move.w	d2,d3
00013992 5243                       		addq.w	#1,d3
00013994 6100 D8E8                  		bsr.w	SolidObject
00013998 1144 003F                  		move.b	d4,$3F(a0)
0001399C 6100 0000                  		bsr.w	loc_12180
000139A0                            
000139A0                            Obj61_ChkDel:
000139A0 3028 0034                  		move.w	$34(a0),d0
000139A4 0240 FF80                  		andi.w	#$FF80,d0
000139A8 3238 F700                  		move.w	($FFFFF700).w,d1
000139AC 0441 0080                  		subi.w	#$80,d1
000139B0 0241 FF80                  		andi.w	#$FF80,d1
000139B4 9041                       		sub.w	d1,d0
000139B6 0C40 0280                  		cmpi.w	#$280,d0
000139BA 6300 AF54                  		bls.w	DisplaySprite
000139BE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000139C2 6700 AF9C                  		beq.w	DeleteObject	; if it's zero, object was placed in debug mode
000139C6 3440                       		movea.w	d0,a2	; load address into a2
000139C8 0892 0007                  		bclr	#7,(a2)	; clear respawn entry, so object can be loaded again
000139CC 6000 AF92                  		bra.w	DeleteObject
000139D0                            ; ===========================================================================
000139D0 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000139D4 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000139D8 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000139DC 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000139E0                            ; ===========================================================================
000139E0                            
000139E0                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000139E0 4E75                       		rts	
000139E2                            ; ===========================================================================
000139E2                            
000139E2                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000139E2 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000139E6 6600                       		bne.s	loc_120D6	; if yes, branch
000139E8 0828 0003 0022             		btst	#3,$22(a0)
000139EE 6700                       		beq.s	locret_120D4
000139F0 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
000139F6                            
000139F6                            locret_120D4:
000139F6 4E75                       		rts	
000139F8                            ; ===========================================================================
000139F8                            
000139F8                            loc_120D6:
000139F8 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000139FC 66F8                       		bne.s	locret_120D4	; if time remains, branch
000139FE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013A02 4228 0038                  		clr.b	$38(a0)
00013A06 4E75                       		rts	
00013A08                            ; ===========================================================================
00013A08                            
00013A08                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013A08 6100 AEEC                  		bsr.w	SpeedToPos
00013A0C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013A10 6100 0000                  		bsr.w	ObjHitFloor
00013A14 4A41                       		tst.w	d1
00013A16 6A00 0000                  		bpl.w	locret_12106
00013A1A 5241                       		addq.w	#1,d1
00013A1C D368 000C                  		add.w	d1,$C(a0)
00013A20 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013A24 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A28                            
00013A28                            locret_12106:
00013A28 4E75                       		rts	
00013A2A                            ; ===========================================================================
00013A2A                            
00013A2A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013A2A 6100 AECA                  		bsr.w	SpeedToPos
00013A2E 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013A32 6100 0000                  		bsr.w	ObjHitCeiling
00013A36 4A41                       		tst.w	d1
00013A38 6A00 0000                  		bpl.w	locret_12126
00013A3C 9368 000C                  		sub.w	d1,$C(a0)
00013A40 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013A44 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013A48                            
00013A48                            locret_12126:
00013A48 4E75                       		rts	
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013A4A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013A50 6600                       		bne.s	locret_12138	; if not, branch
00013A52 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013A56 4228 0038                  		clr.b	$38(a0)
00013A5A                            
00013A5A                            locret_12138:
00013A5A 4E75                       		rts	
00013A5C                            ; ===========================================================================
00013A5C                            
00013A5C                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013A5C 3038 F646                  		move.w	($FFFFF646).w,d0
00013A60 9068 000C                  		sub.w	$C(a0),d0
00013A64 6700                       		beq.s	locret_1217E
00013A66 6400                       		bcc.s	loc_12162
00013A68 0C40 FFFE                  		cmpi.w	#-2,d0
00013A6C 6C00                       		bge.s	loc_1214E
00013A6E 70FE                       		moveq	#-2,d0
00013A70                            
00013A70                            loc_1214E:
00013A70 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013A74 6100 0000                  		bsr.w	ObjHitCeiling
00013A78 4A41                       		tst.w	d1
00013A7A 6A00 0000                  		bpl.w	locret_12160
00013A7E 9368 000C                  		sub.w	d1,$C(a0)
00013A82                            
00013A82                            locret_12160:
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            loc_12162:				; XREF: Obj61_Type07
00013A84 0C40 0002                  		cmpi.w	#2,d0
00013A88 6F00                       		ble.s	loc_1216A
00013A8A 7002                       		moveq	#2,d0
00013A8C                            
00013A8C                            loc_1216A:
00013A8C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00013A90 6100 0000                  		bsr.w	ObjHitFloor
00013A94 4A41                       		tst.w	d1
00013A96 6A00 0000                  		bpl.w	locret_1217E
00013A9A 5241                       		addq.w	#1,d1
00013A9C D368 000C                  		add.w	d1,$C(a0)
00013AA0                            
00013AA0                            locret_1217E:
00013AA0 4E75                       		rts	
00013AA2                            ; ===========================================================================
00013AA2                            
00013AA2                            loc_12180:				; XREF: Obj61_Action
00013AA2 4A28 0038                  		tst.b	$38(a0)
00013AA6 6700                       		beq.s	locret_121C0
00013AA8 0828 0003 0022             		btst	#3,$22(a0)
00013AAE 6600                       		bne.s	loc_1219A
00013AB0 4A28 003E                  		tst.b	$3E(a0)
00013AB4 6700                       		beq.s	locret_121C0
00013AB6 5928 003E                  		subq.b	#4,$3E(a0)
00013ABA 6000                       		bra.s	loc_121A6
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            loc_1219A:
00013ABC 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00013AC2 6700                       		beq.s	locret_121C0
00013AC4 5828 003E                  		addq.b	#4,$3E(a0)
00013AC8                            
00013AC8                            loc_121A6:
00013AC8 1028 003E                  		move.b	$3E(a0),d0
00013ACC 4EB9 0000 29CC             		jsr	(CalcSine).l
00013AD2 323C 0400                  		move.w	#$400,d1
00013AD6 C1C1                       		muls.w	d1,d0
00013AD8 4840                       		swap	d0
00013ADA D068 0030                  		add.w	$30(a0),d0
00013ADE 3140 000C                  		move.w	d0,$C(a0)
00013AE2                            
00013AE2                            locret_121C0:
00013AE2 4E75                       		rts	
00013AE4                            ; ===========================================================================
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            ; Sprite mappings - blocks (LZ)
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            Map_obj61:
00013AE4                            	include "_maps\obj61.asm"
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4                            ; Sprite mappings - blocks (LZ)
00013AE4                            ; ---------------------------------------------------------------------------
00013AE4 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00013AE8 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013AEC 01                         byte_121CA:	dc.b 1
00013AED F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013AF2 02                         byte_121D0:	dc.b 2
00013AF3 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013AF8 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013AFD 01                         byte_121DB:	dc.b 1
00013AFE F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013B03 01                         byte_121E1:	dc.b 1
00013B04 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013B0A 00                         		even
00013B0A 00                         		even
00013B0A                            
00013B0A                            ; ===========================================================================
00013B0A                            ; ---------------------------------------------------------------------------
00013B0A                            ; Object 62 - gargoyle head (LZ)
00013B0A                            ; ---------------------------------------------------------------------------
00013B0A                            
00013B0A                            Obj62:					; XREF: Obj_Index
00013B0A 7000                       		moveq	#0,d0
00013B0C 1028 0024                  		move.b	$24(a0),d0
00013B10 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013B14 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013B18 6000 D440                  		bra.w	MarkObjGone
00013B1C                            ; ===========================================================================
00013B1C 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013B1E 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013B20 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013B22 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013B24                            
00013B24 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            Obj62_Main:				; XREF: Obj62_Index
00013B2C 5428 0024                  		addq.b	#2,$24(a0)
00013B30 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013B38 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013B3E 0028 0004 0001             		ori.b	#4,1(a0)
00013B44 117C 0003 0018             		move.b	#3,$18(a0)
00013B4A 117C 0010 0019             		move.b	#$10,$19(a0)
00013B50 1028 0028                  		move.b	$28(a0),d0	; get object type
00013B54 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013B58 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013B5E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B64 0228 000F 0028             		andi.b	#$F,$28(a0)
00013B6A                            
00013B6A                            Obj62_MakeFire:				; XREF: Obj62_Index
00013B6A 5328 001E                  		subq.b	#1,$1E(a0)
00013B6E 6600                       		bne.s	Obj62_NoFire
00013B70 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013B76 6100 B15E                  		bsr.w	ChkObjOnScreen
00013B7A 6600                       		bne.s	Obj62_NoFire
00013B7C 6100 B4E8                  		bsr.w	SingleObjLoad
00013B80 6600                       		bne.s	Obj62_NoFire
00013B82 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013B86 5829 0024                  		addq.b	#4,$24(a1)
00013B8A 3368 0008 0008             		move.w	8(a0),8(a1)
00013B90 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013B96 1368 0001 0001             		move.b	1(a0),1(a1)
00013B9C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00013BA2                            
00013BA2                            Obj62_NoFire:
00013BA2 4E75                       		rts	
00013BA4                            ; ===========================================================================
00013BA4                            
00013BA4                            Obj62_FireBall:				; XREF: Obj62_Index
00013BA4 5428 0024                  		addq.b	#2,$24(a0)
00013BA8 117C 0008 0016             		move.b	#8,$16(a0)
00013BAE 117C 0008 0017             		move.b	#8,$17(a0)
00013BB4 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013BBC 317C 02E9 0002             		move.w	#$2E9,2(a0)
00013BC2 0028 0004 0001             		ori.b	#4,1(a0)
00013BC8 117C 0004 0018             		move.b	#4,$18(a0)
00013BCE 117C 0098 0020             		move.b	#$98,$20(a0)
00013BD4 117C 0008 0019             		move.b	#8,$19(a0)
00013BDA 117C 0002 001A             		move.b	#2,$1A(a0)
00013BE0 5068 000C                  		addq.w	#8,$C(a0)
00013BE4 317C 0200 0010             		move.w	#$200,$10(a0)
00013BEA 0828 0000 0022             		btst	#0,$22(a0)
00013BF0 6600                       		bne.s	Obj62_Sound
00013BF2 4468 0010                  		neg.w	$10(a0)
00013BF6                            
00013BF6                            Obj62_Sound:
00013BF6 303C 00AE                  		move.w	#$AE,d0
00013BFA 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013C00                            
00013C00                            Obj62_AniFire:				; XREF: Obj62_Index
00013C00 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013C04 0200 0007                  		andi.b	#7,d0
00013C08 6600                       		bne.s	Obj62_StopFire
00013C0A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013C10                            
00013C10                            Obj62_StopFire:
00013C10 6100 ACE4                  		bsr.w	SpeedToPos
00013C14 0828 0000 0022             		btst	#0,$22(a0)
00013C1A 6600                       		bne.s	Obj62_StopFire2
00013C1C 76F8                       		moveq	#-8,d3
00013C1E 6100 0000                  		bsr.w	ObjHitWallLeft
00013C22 4A41                       		tst.w	d1
00013C24 6B00 AD3A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013C28 4E75                       		rts	
00013C2A                            ; ===========================================================================
00013C2A                            
00013C2A                            Obj62_StopFire2:
00013C2A 7608                       		moveq	#8,d3
00013C2C 6100 0000                  		bsr.w	ObjHitWallRight
00013C30 4A41                       		tst.w	d1
00013C32 6B00 AD2C                  		bmi.w	DeleteObject
00013C36 4E75                       		rts	
00013C38                            ; ===========================================================================
00013C38                            ; ---------------------------------------------------------------------------
00013C38                            ; Sprite mappings - gargoyle head (LZ)
00013C38                            ; ---------------------------------------------------------------------------
00013C38                            Map_obj62:
00013C38                            	include "_maps\obj62.asm"
00013C38                            ; ---------------------------------------------------------------------------
00013C38                            ; Sprite mappings - gargoyle head (LZ)
00013C38                            ; ---------------------------------------------------------------------------
00013C38 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013C3C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013C40 03                         byte_12320:	dc.b 3
00013C41 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013C46 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013C4B 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013C50 01                         byte_12330:	dc.b 1
00013C51 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013C56 01                         byte_12336:	dc.b 1
00013C57 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013C5C                            		even
00013C5C                            		even
00013C5C                            
00013C5C                            ; ===========================================================================
00013C5C                            ; ---------------------------------------------------------------------------
00013C5C                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013C5C                            ; ---------------------------------------------------------------------------
00013C5C                            
00013C5C                            Obj63:					; XREF: Obj_Index
00013C5C 7000                       		moveq	#0,d0
00013C5E 1028 0024                  		move.b	$24(a0),d0
00013C62 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013C66 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013C6A 3028 0030                  		move.w	$30(a0),d0
00013C6E 0240 FF80                  		andi.w	#$FF80,d0
00013C72 3238 F700                  		move.w	($FFFFF700).w,d1
00013C76 0441 0080                  		subi.w	#$80,d1
00013C7A 0241 FF80                  		andi.w	#$FF80,d1
00013C7E 9041                       		sub.w	d1,d0
00013C80 0C40 0280                  		cmpi.w	#$280,d0
00013C84 6300                       		bls.s	Obj63_Display
00013C86 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00013C8A 6700                       		beq.s	loc_1236A		; if it's zero, don't remember object
00013C8C 3440                       		movea.w	d0,a2	; load address into a2
00013C8E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00013C92 6000                       		bra.s	loc_1236A	; and delete object
00013C94                            
00013C94                            Obj63_Display:				; XREF: loc_1236A
00013C94 6000 AC7A                  		bra.w	DisplaySprite
00013C98                            ; ===========================================================================
00013C98                            
00013C98                            loc_1236A:				; XREF: Obj63
00013C98 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00013C9E 6600                       		bne.s	loc_12378
00013CA0 0C40 FF80                  		cmpi.w	#-$80,d0
00013CA4 64EE                       		bcc.s	Obj63_Display
00013CA6                            
00013CA6                            loc_12378:
00013CA6 1028 002F                  		move.b	$2F(a0),d0
00013CAA 6A00 ACB4                  		bpl.w	DeleteObject
00013CAE 0240 007F                  		andi.w	#$7F,d0
00013CB2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013CB6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00013CBC 6000 ACA2                  		bra.w	DeleteObject
00013CC0                            ; ===========================================================================
00013CC0 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00013CC2 0000                       		dc.w loc_124B2-Obj63_Index
00013CC4 0000                       		dc.w loc_124C2-Obj63_Index
00013CC6 0000                       		dc.w loc_124DE-Obj63_Index
00013CC8                            ; ===========================================================================
00013CC8                            
00013CC8                            Obj63_Main:				; XREF: Obj63_Index
00013CC8 1028 0028                  		move.b	$28(a0),d0
00013CCC 6B00 0000                  		bmi.w	loc_12460
00013CD0 5428 0024                  		addq.b	#2,$24(a0)
00013CD4 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00013CDC 317C 43F6 0002             		move.w	#$43F6,2(a0)
00013CE2 0028 0004 0001             		ori.b	#4,1(a0)
00013CE8 117C 0010 0019             		move.b	#$10,$19(a0)
00013CEE 117C 0004 0018             		move.b	#4,$18(a0)
00013CF4 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013CFA 6600                       		bne.s	loc_123E2
00013CFC 5828 0024                  		addq.b	#4,$24(a0)
00013D00 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013D06 117C 0001 0018             		move.b	#1,$18(a0)
00013D0C 6000 0000                  		bra.w	loc_124DE
00013D10                            ; ===========================================================================
00013D10                            
00013D10                            loc_123E2:
00013D10 117C 0004 001A             		move.b	#4,$1A(a0)
00013D16 7000                       		moveq	#0,d0
00013D18 1028 0028                  		move.b	$28(a0),d0
00013D1C 3200                       		move.w	d0,d1
00013D1E E648                       		lsr.w	#3,d0
00013D20 0240 001E                  		andi.w	#$1E,d0
00013D24 45FA 0000                  		lea	Obj63_Data(pc),a2
00013D28 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013D2C 315A 0038                  		move.w	(a2)+,$38(a0)
00013D30 315A 0030                  		move.w	(a2)+,$30(a0)
00013D34 214A 003C                  		move.l	a2,$3C(a0)
00013D38 0241 000F                  		andi.w	#$F,d1
00013D3C E549                       		lsl.w	#2,d1
00013D3E 1141 0038                  		move.b	d1,$38(a0)
00013D42 117C 0004 003A             		move.b	#4,$3A(a0)
00013D48 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013D4C 6700                       		beq.s	loc_1244C
00013D4E 117C 0001 003B             		move.b	#1,$3B(a0)
00013D54 4428 003A                  		neg.b	$3A(a0)
00013D58 7200                       		moveq	#0,d1
00013D5A 1228 0038                  		move.b	$38(a0),d1
00013D5E D228 003A                  		add.b	$3A(a0),d1
00013D62 B228 0039                  		cmp.b	$39(a0),d1
00013D66 6500                       		bcs.s	loc_12448
00013D68 1001                       		move.b	d1,d0
00013D6A 7200                       		moveq	#0,d1
00013D6C 4A00                       		tst.b	d0
00013D6E 6A00                       		bpl.s	loc_12448
00013D70 1228 0039                  		move.b	$39(a0),d1
00013D74 5901                       		subq.b	#4,d1
00013D76                            
00013D76                            loc_12448:
00013D76 1141 0038                  		move.b	d1,$38(a0)
00013D7A                            
00013D7A                            loc_1244C:
00013D7A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013D80 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013D86 6100 0000                  		bsr.w	Obj63_ChangeDir
00013D8A 6000 0000                  		bra.w	loc_124B2
00013D8E                            ; ===========================================================================
00013D8E                            
00013D8E                            loc_12460:				; XREF: Obj63_Main
00013D8E 1140 002F                  		move.b	d0,$2F(a0)
00013D92 0240 007F                  		andi.w	#$7F,d0
00013D96 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013D9A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00013DA0 6600 ABBE                  		bne.w	DeleteObject
00013DA4 D040                       		add.w	d0,d0
00013DA6 0240 001E                  		andi.w	#$1E,d0
00013DAA 0640 0070                  		addi.w	#$70,d0
00013DAE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00013DB4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DB8 321A                       		move.w	(a2)+,d1
00013DBA 2248                       		movea.l	a0,a1
00013DBC 6000                       		bra.s	Obj63_MakePtfms
00013DBE                            ; ===========================================================================
00013DBE                            
00013DBE                            Obj63_Loop:
00013DBE 6100 B2A6                  		bsr.w	SingleObjLoad
00013DC2 6600                       		bne.s	loc_124AA
00013DC4                            
00013DC4                            Obj63_MakePtfms:			; XREF: loc_12460
00013DC4 12BC 0063                  		move.b	#$63,0(a1)
00013DC8 335A 0008                  		move.w	(a2)+,8(a1)
00013DCC 335A 000C                  		move.w	(a2)+,$C(a1)
00013DD0 301A                       		move.w	(a2)+,d0
00013DD2 1340 0028                  		move.b	d0,$28(a1)
00013DD6                            
00013DD6                            loc_124AA:
00013DD6 51C9 FFE6                  		dbf	d1,Obj63_Loop
00013DDA                            
00013DDA 588F                       		addq.l	#4,sp
00013DDC 4E75                       		rts	
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            loc_124B2:				; XREF: Obj63_Index
00013DDE 7200                       		moveq	#0,d1
00013DE0 1228 0019                  		move.b	$19(a0),d1
00013DE4 4EB9 0000 8510             		jsr	(PlatformObject).l
00013DEA 6000 0000                  		bra.w	sub_12502
00013DEE                            ; ===========================================================================
00013DEE                            
00013DEE                            loc_124C2:				; XREF: Obj63_Index
00013DEE 7200                       		moveq	#0,d1
00013DF0 1228 0019                  		move.b	$19(a0),d1
00013DF4 4EB9 0000 8684             		jsr	(ExitPlatform).l
00013DFA 3F28 0008                  		move.w	8(a0),-(sp)
00013DFE 6100 0000                  		bsr.w	sub_12502
00013E02 341F                       		move.w	(sp)+,d2
00013E04 4EF9 0000 8BFA             		jmp	(MvSonicOnPtfm2).l
00013E0A                            ; ===========================================================================
00013E0A                            
00013E0A                            loc_124DE:				; XREF: Obj63_Index
00013E0A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013E0E 0240 0003                  		andi.w	#3,d0
00013E12 6600                       		bne.s	loc_124FC
00013E14 7201                       		moveq	#1,d1
00013E16 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013E1A 6700                       		beq.s	loc_124F2
00013E1C 4401                       		neg.b	d1
00013E1E                            
00013E1E                            loc_124F2:
00013E1E D328 001A                  		add.b	d1,$1A(a0)
00013E22 0228 0003 001A             		andi.b	#3,$1A(a0)
00013E28                            
00013E28                            loc_124FC:
00013E28 588F                       		addq.l	#4,sp
00013E2A 6000 D12E                  		bra.w	MarkObjGone
00013E2E                            
00013E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E2E                            
00013E2E                            
00013E2E                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013E2E 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013E32 6700                       		beq.s	loc_12520
00013E34 4A28 003B                  		tst.b	$3B(a0)
00013E38 6600                       		bne.s	loc_12520
00013E3A 117C 0001 003B             		move.b	#1,$3B(a0)
00013E40 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013E46 4428 003A                  		neg.b	$3A(a0)
00013E4A 6000                       		bra.s	loc_12534
00013E4C                            ; ===========================================================================
00013E4C                            
00013E4C                            loc_12520:
00013E4C 3028 0008                  		move.w	8(a0),d0
00013E50 B068 0034                  		cmp.w	$34(a0),d0
00013E54 6600                       		bne.s	loc_1256A
00013E56 3028 000C                  		move.w	$C(a0),d0
00013E5A B068 0036                  		cmp.w	$36(a0),d0
00013E5E 6600                       		bne.s	loc_1256A
00013E60                            
00013E60                            loc_12534:
00013E60 7200                       		moveq	#0,d1
00013E62 1228 0038                  		move.b	$38(a0),d1
00013E66 D228 003A                  		add.b	$3A(a0),d1
00013E6A B228 0039                  		cmp.b	$39(a0),d1
00013E6E 6500                       		bcs.s	loc_12552
00013E70 1001                       		move.b	d1,d0
00013E72 7200                       		moveq	#0,d1
00013E74 4A00                       		tst.b	d0
00013E76 6A00                       		bpl.s	loc_12552
00013E78 1228 0039                  		move.b	$39(a0),d1
00013E7C 5901                       		subq.b	#4,d1
00013E7E                            
00013E7E                            loc_12552:
00013E7E 1141 0038                  		move.b	d1,$38(a0)
00013E82 2268 003C                  		movea.l	$3C(a0),a1
00013E86 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013E8C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013E92 6100 0000                  		bsr.w	Obj63_ChangeDir
00013E96                            
00013E96                            loc_1256A:
00013E96 6100 AA5E                  		bsr.w	SpeedToPos
00013E9A 4E75                       		rts	
00013E9C                            ; End of function sub_12502
00013E9C                            
00013E9C                            
00013E9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E9C                            
00013E9C                            
00013E9C                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013E9C 7000                       		moveq	#0,d0
00013E9E 343C FF00                  		move.w	#-$100,d2
00013EA2 3028 0008                  		move.w	8(a0),d0
00013EA6 9068 0034                  		sub.w	$34(a0),d0
00013EAA 6400                       		bcc.s	loc_12584
00013EAC 4440                       		neg.w	d0
00013EAE 4442                       		neg.w	d2
00013EB0                            
00013EB0                            loc_12584:
00013EB0 7200                       		moveq	#0,d1
00013EB2 363C FF00                  		move.w	#-$100,d3
00013EB6 3228 000C                  		move.w	$C(a0),d1
00013EBA 9268 0036                  		sub.w	$36(a0),d1
00013EBE 6400                       		bcc.s	loc_12598
00013EC0 4441                       		neg.w	d1
00013EC2 4443                       		neg.w	d3
00013EC4                            
00013EC4                            loc_12598:
00013EC4 B240                       		cmp.w	d0,d1
00013EC6 6500                       		bcs.s	loc_125C2
00013EC8 3028 0008                  		move.w	8(a0),d0
00013ECC 9068 0034                  		sub.w	$34(a0),d0
00013ED0 6700                       		beq.s	loc_125AE
00013ED2 48C0                       		ext.l	d0
00013ED4 E180                       		asl.l	#8,d0
00013ED6 81C1                       		divs.w	d1,d0
00013ED8 4440                       		neg.w	d0
00013EDA                            
00013EDA                            loc_125AE:
00013EDA 3140 0010                  		move.w	d0,$10(a0)
00013EDE 3143 0012                  		move.w	d3,$12(a0)
00013EE2 4840                       		swap	d0
00013EE4 3140 000A                  		move.w	d0,$A(a0)
00013EE8 4268 000E                  		clr.w	$E(a0)
00013EEC 4E75                       		rts	
00013EEE                            ; ===========================================================================
00013EEE                            
00013EEE                            loc_125C2:				; XREF: Obj63_ChangeDir
00013EEE 3228 000C                  		move.w	$C(a0),d1
00013EF2 9268 0036                  		sub.w	$36(a0),d1
00013EF6 6700                       		beq.s	loc_125D4
00013EF8 48C1                       		ext.l	d1
00013EFA E181                       		asl.l	#8,d1
00013EFC 83C0                       		divs.w	d0,d1
00013EFE 4441                       		neg.w	d1
00013F00                            
00013F00                            loc_125D4:
00013F00 3141 0012                  		move.w	d1,$12(a0)
00013F04 3142 0010                  		move.w	d2,$10(a0)
00013F08 4841                       		swap	d1
00013F0A 3141 000E                  		move.w	d1,$E(a0)
00013F0E 4268 000A                  		clr.w	$A(a0)
00013F12 4E75                       		rts	
00013F14                            ; End of function Obj63_ChangeDir
00013F14                            
00013F14                            ; ===========================================================================
00013F14 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013F16 0000                       		dc.w word_12610-Obj63_Data
00013F18 0000                       		dc.w word_12628-Obj63_Data
00013F1A 0000                       		dc.w word_1263C-Obj63_Data
00013F1C 0000                       		dc.w word_12650-Obj63_Data
00013F1E 0000                       		dc.w word_12668-Obj63_Data
00013F20 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013F30 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013F3C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013F4C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013F54 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013F68 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013F7C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013F94 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013FA8                            
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            Map_obj63:
00013FA8                            	include "_maps\obj63.asm"
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013FAC 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013FB0 0000                       		dc.w byte_1269E-Map_obj63
00013FB2 01                         byte_12686:	dc.b 1
00013FB3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013FB8 01                         byte_1268C:	dc.b 1
00013FB9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00013FBE 01                         byte_12692:	dc.b 1
00013FBF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013FC4 01                         byte_12698:	dc.b 1
00013FC5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013FCA 01                         byte_1269E:	dc.b 1
00013FCB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00013FD0                            		even
00013FD0                            		even
00013FD0                            
00013FD0                            ; ===========================================================================
00013FD0                            ; ---------------------------------------------------------------------------
00013FD0                            ; Object 64 - bubbles (LZ)
00013FD0                            ; ---------------------------------------------------------------------------
00013FD0                            
00013FD0                            Obj64:					; XREF: Obj_Index
00013FD0 7000                       		moveq	#0,d0
00013FD2 1028 0024                  		move.b	$24(a0),d0
00013FD6 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013FDA 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00013FDE                            ; ===========================================================================
00013FDE 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00013FE0 0000                       		dc.w Obj64_Animate-Obj64_Index
00013FE2 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013FE4 0000                       		dc.w Obj64_Display2-Obj64_Index
00013FE6 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013FE8 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013FEA                            ; ===========================================================================
00013FEA                            
00013FEA                            Obj64_Main:				; XREF: Obj64_Index
00013FEA 5428 0024                  		addq.b	#2,$24(a0)
00013FEE 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013FF6 317C 8348 0002             		move.w	#$8348,2(a0)
00013FFC 117C 0084 0001             		move.b	#$84,1(a0)
00014002 117C 0010 0019             		move.b	#$10,$19(a0)
00014008 117C 0001 0018             		move.b	#1,$18(a0)
0001400E 1028 0028                  		move.b	$28(a0),d0	; get object type
00014012 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00014014 5028 0024                  		addq.b	#8,$24(a0)
00014018 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001401C 1140 0032                  		move.b	d0,$32(a0)
00014020 1140 0033                  		move.b	d0,$33(a0)
00014024 117C 0006 001C             		move.b	#6,$1C(a0)
0001402A 6000 0000                  		bra.w	Obj64_BblMaker
0001402E                            ; ===========================================================================
0001402E                            
0001402E                            Obj64_Bubble:				; XREF: Obj64_Main
0001402E 1140 001C                  		move.b	d0,$1C(a0)
00014032 3168 0008 0030             		move.w	8(a0),$30(a0)
00014038 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001403E 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014044 1140 0026                  		move.b	d0,$26(a0)
00014048                            
00014048                            Obj64_Animate:				; XREF: Obj64_Index
00014048 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001404E 4EB9 0000 B970             		jsr	AnimateSprite
00014054 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001405A 6600                       		bne.s	Obj64_ChkWater
0001405C 117C 0001 002E             		move.b	#1,$2E(a0)
00014062                            
00014062                            Obj64_ChkWater:				; XREF: Obj64_Index
00014062 3038 F646                  		move.w	($FFFFF646).w,d0
00014066 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001406A 6400                       		bcc.s	Obj64_Burst	; if yes, branch
0001406C 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00014070 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00014074 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00014076 3028 0008                  		move.w	8(a0),d0
0001407A 9078 F610                  		sub.w	(v_pocketx).w,d0
0001407E 0640 0060                  		addi.w	#$60,d0
00014082 6B00                       		bmi.s	Obj64_Wobble
00014084 0C40 00C0                  		cmpi.w	#$C0,d0
00014088 6400                       		bcc.s	Obj64_Wobble
0001408A                            
0001408A                            Obj64_Burst:				; XREF: Obj64_Wobble
0001408A 117C 0006 0024             		move.b	#6,$24(a0)
00014090 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00014094 6000 0000                  		bra.w	Obj64_Display2
00014098                            ; ===========================================================================
00014098                            
00014098                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00014098 1028 0026                  		move.b	$26(a0),d0
0001409C 5228 0026                  		addq.b	#1,$26(a0)
000140A0 0240 007F                  		andi.w	#$7F,d0
000140A4 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000140AA 1031 0000                  		move.b	(a1,d0.w),d0
000140AE 4880                       		ext.w	d0
000140B0 D068 0030                  		add.w	$30(a0),d0
000140B4 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000140B8 4A28 002E                  		tst.b	$2E(a0)
000140BC 6700                       		beq.s	Obj64_Display
000140BE 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000140C2 6700                       		beq.s	Obj64_Display	; if not, branch
000140C4                            
000140C4 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000140C8 303C 00AD                  		move.w	#$AD,d0
000140CC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000140D2 43F8 D000                  		lea	($FFFFD000).w,a1
000140D6 4269 0010                  		clr.w	$10(a1)
000140DA 4269 0012                  		clr.w	$12(a1)
000140DE 4269 0020                  		clr.w	$20(a1)
000140E2 137C 0015 001C             		move.b	#$15,$1C(a1)
000140E8 337C 0023 003E             		move.w	#$23,$3E(a1)
000140EE 137C 0000 003C             		move.b	#0,$3C(a1)
000140F4 08A9 0005 0022             		bclr	#5,$22(a1)
000140FA 08A9 0004 0022             		bclr	#4,$22(a1)
00014100 0829 0002 0022             		btst	#2,$22(a1)
00014106 6700 FF82                  		beq.w	Obj64_Burst
0001410A 08A9 0002 0022             		bclr	#2,$22(a1)
00014110 137C 0013 0016             		move.b	#$13,$16(a1)
00014116 137C 0009 0017             		move.b	#9,$17(a1)
0001411C 5B69 000C                  		subq.w	#5,$C(a1)
00014120 6000 FF68                  		bra.w	Obj64_Burst
00014124                            ; ===========================================================================
00014124                            
00014124                            Obj64_Display:				; XREF: Obj64_Wobble
00014124 6100 A7D0                  		bsr.w	SpeedToPos
00014128 4A28 0001                  		tst.b	1(a0)
0001412C 6A00                       		bpl.s	Obj64_Delete
0001412E 4EFA A7E0                  		jmp	DisplaySprite
00014132                            ; ===========================================================================
00014132                            
00014132                            Obj64_Delete:
00014132 4EFA A82C                  		jmp	DeleteObject
00014136                            ; ===========================================================================
00014136                            
00014136                            Obj64_Display2:				; XREF: Obj64_Index
00014136 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001413C 4EB9 0000 B970             		jsr	AnimateSprite
00014142 4A28 0001                  		tst.b	1(a0)
00014146 6A00                       		bpl.s	Obj64_Delete2
00014148 4EFA A7C6                  		jmp	DisplaySprite
0001414C                            ; ===========================================================================
0001414C                            
0001414C                            Obj64_Delete2:
0001414C 4EFA A812                  		jmp	DeleteObject
00014150                            ; ===========================================================================
00014150                            
00014150                            Obj64_Delete3:				; XREF: Obj64_Index
00014150 6000 A80E                  		bra.w	DeleteObject
00014154                            ; ===========================================================================
00014154                            
00014154                            Obj64_BblMaker:				; XREF: Obj64_Index
00014154 4A68 0036                  		tst.w	$36(a0)
00014158 6600                       		bne.s	loc_12874
0001415A 3038 F646                  		move.w	($FFFFF646).w,d0
0001415E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00014162 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00014166 3038 F60E                  		move.w	(v_pocketbottom).w,d0
0001416A B068 000C                  		cmp.w	$C(a0),d0
0001416E 6500                       		bcs.s	Obj64_Cont
00014170 3028 0008                  		move.w	8(a0),d0
00014174 9078 F610                  		sub.w	(v_pocketx).w,d0
00014178 0640 0060                  		addi.w	#$60,d0
0001417C 6B00                       		bmi.s	Obj64_Cont
0001417E 0C40 00C0                  		cmpi.w	#$C0,d0
00014182 6400                       		bcc.s	Obj64_Cont
00014184 6000 0000                  		bra.w	Obj64_ChkDel
00014188                            
00014188                            Obj64_Cont:
00014188 4A28 0001                  		tst.b	1(a0)
0001418C 6A00 0000                  		bpl.w	Obj64_ChkDel
00014190 5368 0038                  		subq.w	#1,$38(a0)
00014194 6A00 0000                  		bpl.w	loc_12914
00014198 317C 0001 0036             		move.w	#1,$36(a0)
0001419E                            
0001419E                            loc_1283A:
0001419E 4EB9 0000 29A6             		jsr	(RandomNumber).l
000141A4 3200                       		move.w	d0,d1
000141A6 0240 0007                  		andi.w	#7,d0
000141AA 0C40 0006                  		cmpi.w	#6,d0
000141AE 64EE                       		bcc.s	loc_1283A
000141B0                            
000141B0 1140 0034                  		move.b	d0,$34(a0)
000141B4 0241 000C                  		andi.w	#$C,d1
000141B8 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000141BE D2C1                       		adda.w	d1,a1
000141C0 2149 003C                  		move.l	a1,$3C(a0)
000141C4 5328 0032                  		subq.b	#1,$32(a0)
000141C8 6A00                       		bpl.s	loc_12872
000141CA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000141D0 08E8 0007 0036             		bset	#7,$36(a0)
000141D6                            
000141D6                            loc_12872:
000141D6 6000                       		bra.s	loc_1287C
000141D8                            ; ===========================================================================
000141D8                            
000141D8                            loc_12874:				; XREF: Obj64_BblMaker
000141D8 5368 0038                  		subq.w	#1,$38(a0)
000141DC 6A00 0000                  		bpl.w	loc_12914
000141E0                            
000141E0                            loc_1287C:
000141E0 4EB9 0000 29A6             		jsr	(RandomNumber).l
000141E6 0240 001F                  		andi.w	#$1F,d0
000141EA 3140 0038                  		move.w	d0,$38(a0)
000141EE 6100 AE76                  		bsr.w	SingleObjLoad
000141F2 6600                       		bne.s	loc_128F8
000141F4 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000141F8 3368 0008 0008             		move.w	8(a0),8(a1)
000141FE 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014204 0240 000F                  		andi.w	#$F,d0
00014208 5140                       		subq.w	#8,d0
0001420A D169 0008                  		add.w	d0,8(a1)
0001420E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014214 7000                       		moveq	#0,d0
00014216 1028 0034                  		move.b	$34(a0),d0
0001421A 2468 003C                  		movea.l	$3C(a0),a2
0001421E 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00014224 0828 0007 0036             		btst	#7,$36(a0)
0001422A 6700                       		beq.s	loc_128F8
0001422C 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014232 0240 0003                  		andi.w	#3,d0
00014236 6600                       		bne.s	loc_128E4
00014238 08E8 0006 0036             		bset	#6,$36(a0)
0001423E 6600                       		bne.s	loc_128F8
00014240 137C 0002 0028             		move.b	#2,$28(a1)
00014246                            
00014246                            loc_128E4:
00014246 4A28 0034                  		tst.b	$34(a0)
0001424A 6600                       		bne.s	loc_128F8
0001424C 08E8 0006 0036             		bset	#6,$36(a0)
00014252 6600                       		bne.s	loc_128F8
00014254 137C 0002 0028             		move.b	#2,$28(a1)
0001425A                            
0001425A                            loc_128F8:
0001425A 5328 0034                  		subq.b	#1,$34(a0)
0001425E 6A00                       		bpl.s	loc_12914
00014260 4EB9 0000 29A6             		jsr	(RandomNumber).l
00014266 0240 007F                  		andi.w	#$7F,d0
0001426A 0640 0080                  		addi.w	#$80,d0
0001426E D168 0038                  		add.w	d0,$38(a0)
00014272 4268 0036                  		clr.w	$36(a0)
00014276                            
00014276                            loc_12914:
00014276 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001427C 4EB9 0000 B970             		jsr	AnimateSprite
00014282                            
00014282                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00014282 3028 0008                  		move.w	8(a0),d0
00014286 0240 FF80                  		andi.w	#$FF80,d0
0001428A 3238 F700                  		move.w	($FFFFF700).w,d1
0001428E 0441 0080                  		subi.w	#$80,d1
00014292 0241 FF80                  		andi.w	#$FF80,d1
00014296 9041                       		sub.w	d1,d0
00014298 0C40 0280                  		cmpi.w	#$280,d0
0001429C 6300                       		bls.s	Obj64_NoDel
0001429E 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
000142A2 6700 A6BC                  		beq.w	DeleteObject		; if it's zero, don't remember object
000142A6 3440                       		movea.w	d0,a2	; load address into a2
000142A8 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000142AC 6000 A6B2                  		bra.w	DeleteObject	; and delete object
000142B0                            
000142B0                            Obj64_NoDel:	
000142B0 3038 F646                  		move.w	($FFFFF646).w,d0
000142B4 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000142B8 6400                       		bcc.s	Obj64_UW	; if not, branch
000142BA 3038 F60E                  		move.w	(v_pocketbottom).w,d0
000142BE B068 000C                  		cmp.w	$C(a0),d0
000142C2 6500 A64C                  		bcs.w	DisplaySprite
000142C6 3028 0008                  		move.w	8(a0),d0
000142CA 9078 F610                  		sub.w	(v_pocketx).w,d0
000142CE 0640 0060                  		addi.w	#$60,d0
000142D2 6B00 A63C                  		bmi.w	DisplaySprite
000142D6 0C40 00C0                  		cmpi.w	#$C0,d0
000142DA 6400 A634                  		bcc.w	DisplaySprite
000142DE                            
000142DE                            Obj64_UW:
000142DE 4E75                       		rts	
000142E0                            ; ===========================================================================
000142E0                            ; bubble production sequence
000142E0                            
000142E0                            ; 0 = small bubble, 1 =	large bubble
000142E0                            
000142E0 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000142F2                            
000142F2                            ; ===========================================================================
000142F2                            
000142F2                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000142F2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000142F6 6B00                       		bmi.s	loc_12998
000142F8 43F8 D000                  		lea	($FFFFD000).w,a1
000142FC 3029 0008                  		move.w	8(a1),d0
00014300 3228 0008                  		move.w	8(a0),d1
00014304 0441 0010                  		subi.w	#$10,d1
00014308 B240                       		cmp.w	d0,d1
0001430A 6400                       		bcc.s	loc_12998
0001430C 0641 0020                  		addi.w	#$20,d1
00014310 B240                       		cmp.w	d0,d1
00014312 6500                       		bcs.s	loc_12998
00014314 3029 000C                  		move.w	$C(a1),d0
00014318 3228 000C                  		move.w	$C(a0),d1
0001431C B240                       		cmp.w	d0,d1
0001431E 6400                       		bcc.s	loc_12998
00014320 0641 0010                  		addi.w	#$10,d1
00014324 B240                       		cmp.w	d0,d1
00014326 6500                       		bcs.s	loc_12998
00014328 7001                       		moveq	#1,d0
0001432A 4E75                       		rts	
0001432C                            ; ===========================================================================
0001432C                            
0001432C                            loc_12998:
0001432C 7000                       		moveq	#0,d0
0001432E 4E75                       		rts	
00014330                            ; ===========================================================================
00014330                            Ani_obj64:
00014330                            	include "_anim\obj64.asm"
00014330                            ; ---------------------------------------------------------------------------
00014330                            ; Animation script - bubbles (LZ)
00014330                            ; ---------------------------------------------------------------------------
00014330 0000                       		dc.w byte_129AA-Ani_obj64
00014332 0000                       		dc.w byte_129B0-Ani_obj64
00014334 0000                       		dc.w byte_129B6-Ani_obj64
00014336 0000                       		dc.w byte_129BE-Ani_obj64
00014338 0000                       		dc.w byte_129BE-Ani_obj64
0001433A 0000                       		dc.w byte_129C0-Ani_obj64
0001433C 0000                       		dc.w byte_129C6-Ani_obj64
0001433E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00014344 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001434A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00014352 04FC                       byte_129BE:	dc.b 4,	$FC
00014354 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001435A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00014360 00                         		even
00014360 00                         		even
00014360                            
00014360                            ; ---------------------------------------------------------------------------
00014360                            ; Sprite mappings - bubbles (LZ)
00014360                            ; ---------------------------------------------------------------------------
00014360                            Map_obj64:
00014360                            	include "_maps\obj64.asm"
00014360                            bubmap:
00014360 0000                       bubmap_0: 	dc.w bubmap_2E-bubmap
00014362 0000                       bubmap_2: 	dc.w bubmap_34-bubmap
00014364 0000                       bubmap_4: 	dc.w bubmap_3A-bubmap
00014366 0000                       bubmap_6: 	dc.w bubmap_40-bubmap
00014368 0000                       bubmap_8: 	dc.w bubmap_46-bubmap
0001436A 0000                       bubmap_A: 	dc.w bubmap_4C-bubmap
0001436C 0000                       bubmap_C: 	dc.w bubmap_52-bubmap
0001436E 0000                       bubmap_E: 	dc.w bubmap_58-bubmap
00014370 0000                       bubmap_10: 	dc.w bubmap_6D-bubmap
00014372 0000                       bubmap_12: 	dc.w bubmap_82-bubmap
00014374 0000                       bubmap_14: 	dc.w bubmap_88-bubmap
00014376 0000                       bubmap_16: 	dc.w bubmap_8E-bubmap
00014378 0000                       bubmap_18: 	dc.w bubmap_94-bubmap
0001437A 0000                       bubmap_1A: 	dc.w bubmap_9A-bubmap
0001437C 0000                       bubmap_1C: 	dc.w bubmap_A0-bubmap
0001437E 0000                       bubmap_1E: 	dc.w bubmap_A6-bubmap
00014380 0000                       bubmap_20: 	dc.w bubmap_AC-bubmap
00014382 0000                       bubmap_22: 	dc.w bubmap_B2-bubmap
00014384 0000                       bubmap_24: 	dc.w bubmap_B8-bubmap
00014386 0000                       bubmap_26: 	dc.w bubmap_BE-bubmap
00014388 0000                       bubmap_28: 	dc.w bubmap_C4-bubmap
0001438A 0000                       bubmap_2A: 	dc.w bubmap_CA-bubmap
0001438C 0000                       bubmap_2C: 	dc.w bubmap_D0-bubmap
0001438E 01                         bubmap_2E: 	dc.b $1
0001438F FC00 6000 FC               	dc.b $FC, $0, $60, $0, $FC
00014394 01                         bubmap_34: 	dc.b $1
00014395 FC00 6001 FC               	dc.b $FC, $0, $60, $1, $FC
0001439A 01                         bubmap_3A: 	dc.b $1
0001439B FC00 6002 FC               	dc.b $FC, $0, $60, $2, $FC
000143A0 01                         bubmap_40: 	dc.b $1
000143A1 F805 6003 F8               	dc.b $F8, $5, $60, $3, $F8
000143A6 01                         bubmap_46: 	dc.b $1
000143A7 F805 6007 F8               	dc.b $F8, $5, $60, $7, $F8
000143AC 01                         bubmap_4C: 	dc.b $1
000143AD F40A 600B F4               	dc.b $F4, $A, $60, $B, $F4
000143B2 01                         bubmap_52: 	dc.b $1
000143B3 F00F 6014 F0               	dc.b $F0, $F, $60, $14, $F0
000143B8 04                         bubmap_58: 	dc.b $4
000143B9 F005 6024 F0               	dc.b $F0, $5, $60, $24, $F0
000143BE F005 6824 00               	dc.b $F0, $5, $68, $24, $0
000143C3 0005 7024 F0               	dc.b $0, $5, $70, $24, $F0
000143C8 0005 7824 00               	dc.b $0, $5, $78, $24, $0
000143CD 04                         bubmap_6D: 	dc.b $4
000143CE F005 6028 F0               	dc.b $F0, $5, $60, $28, $F0
000143D3 F005 6828 00               	dc.b $F0, $5, $68, $28, $0
000143D8 0005 7028 F0               	dc.b $0, $5, $70, $28, $F0
000143DD 0005 7828 00               	dc.b $0, $5, $78, $28, $0
000143E2 01                         bubmap_82: 	dc.b $1
000143E3 F406 002C F8               	dc.b $F4, $6, $0, $2C, $F8
000143E8 01                         bubmap_88: 	dc.b $1
000143E9 F406 0032 F8               	dc.b $F4, $6, $0, $32, $F8
000143EE 01                         bubmap_8E: 	dc.b $1
000143EF F406 0038 F8               	dc.b $F4, $6, $0, $38, $F8
000143F4 01                         bubmap_94: 	dc.b $1
000143F5 F406 003E F8               	dc.b $F4, $6, $0, $3E, $F8
000143FA 01                         bubmap_9A: 	dc.b $1
000143FB F406 2044 F8               	dc.b $F4, $6, $20, $44, $F8
00014400 01                         bubmap_A0: 	dc.b $1
00014401 F406 204A F8               	dc.b $F4, $6, $20, $4A, $F8
00014406 01                         bubmap_A6: 	dc.b $1
00014407 F406 2050 F8               	dc.b $F4, $6, $20, $50, $F8
0001440C 01                         bubmap_AC: 	dc.b $1
0001440D F406 2056 F8               	dc.b $F4, $6, $20, $56, $F8
00014412 01                         bubmap_B2: 	dc.b $1
00014413 F406 205C F8               	dc.b $F4, $6, $20, $5C, $F8
00014418 01                         bubmap_B8: 	dc.b $1
00014419 F406 2062 F8               	dc.b $F4, $6, $20, $62, $F8
0001441E 01                         bubmap_BE: 	dc.b $1
0001441F F805 6068 F8               	dc.b $F8, $5, $60, $68, $F8
00014424 01                         bubmap_C4: 	dc.b $1
00014425 F805 606C F8               	dc.b $F8, $5, $60, $6C, $F8
0001442A 01                         bubmap_CA: 	dc.b $1
0001442B F805 6070 F8               	dc.b $F8, $5, $60, $70, $F8
00014430 00                         bubmap_D0: 	dc.b $0
00014432 00                         	even
00014432 00                         	even
00014432                            
00014432                            ; ===========================================================================
00014432                            ; ---------------------------------------------------------------------------
00014432                            ; Object 65 - waterfalls (LZ)
00014432                            ; ---------------------------------------------------------------------------
00014432                            
00014432                            Obj65:					; XREF: Obj_Index
00014432 7000                       		moveq	#0,d0
00014434 1028 0024                  		move.b	$24(a0),d0
00014438 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001443C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00014440                            ; ===========================================================================
00014440 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00014442 0000                       		dc.w Obj65_Animate-Obj65_Index
00014444 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00014446 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00014448 0000                       		dc.w loc_12B36-Obj65_Index
0001444A                            ; ===========================================================================
0001444A                            
0001444A                            Obj65_Main:				; XREF: Obj65_Index
0001444A 5828 0024                  		addq.b	#4,$24(a0)
0001444E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00014456 317C 4259 0002             		move.w	#$4259,2(a0)
0001445C 0028 0004 0001             		ori.b	#4,1(a0)
00014462 117C 0018 0019             		move.b	#$18,$19(a0)
00014468 117C 0001 0018             		move.b	#1,$18(a0)
0001446E 1028 0028                  		move.b	$28(a0),d0	; get object type
00014472 6A00                       		bpl.s	loc_12AE6
00014474 08E8 0007 0002             		bset	#7,2(a0)
0001447A                            
0001447A                            loc_12AE6:
0001447A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001447E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00014482 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014486 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00014488 4228 0018                  		clr.b	$18(a0)
0001448C 5528 0024                  		subq.b	#2,$24(a0)
00014490 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00014496 6700                       		beq.s	loc_12B0A	; if not, branch
00014498 117C 0006 0024             		move.b	#6,$24(a0)
0001449E                            
0001449E                            loc_12B0A:
0001449E 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000144A4 6700                       		beq.s	Obj65_Animate	; if not, branch
000144A6 117C 0008 0024             		move.b	#8,$24(a0)
000144AC                            
000144AC                            Obj65_Animate:				; XREF: Obj65_Index
000144AC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000144B2 4EB9 0000 B970             		jsr	AnimateSprite
000144B8                            
000144B8                            Obj65_ChkDel:				; XREF: Obj65_Index
000144B8 6000 CAA0                  		bra.w	MarkObjGone
000144BC                            ; ===========================================================================
000144BC                            
000144BC                            Obj65_FixHeight:			; XREF: Obj65_Index
000144BC 3038 F646                  		move.w	($FFFFF646).w,d0
000144C0 0440 0010                  		subi.w	#$10,d0
000144C4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000144C8 60E2                       		bra.s	Obj65_Animate
000144CA                            ; ===========================================================================
000144CA                            
000144CA                            loc_12B36:				; XREF: Obj65_Index
000144CA 08A8 0007 0002             		bclr	#7,2(a0)
000144D0 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000144D6 6600                       		bne.s	Obj65_Animate2
000144D8 08E8 0007 0002             		bset	#7,2(a0)
000144DE                            
000144DE                            Obj65_Animate2:
000144DE 60CC                       		bra.s	Obj65_Animate
000144E0                            ; ===========================================================================
000144E0                            Ani_obj65:
000144E0                            	include "_anim\obj65.asm"
000144E0                            ; ---------------------------------------------------------------------------
000144E0                            ; Animation script - waterfall (LZ)
000144E0                            ; ---------------------------------------------------------------------------
000144E0 0000                       		dc.w byte_12B4E-Ani_obj65
000144E2 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000144E8 00                         		even
000144E8 00                         		even
000144E8                            
000144E8                            ; ---------------------------------------------------------------------------
000144E8                            ; Sprite mappings - waterfalls (LZ)
000144E8                            ; ---------------------------------------------------------------------------
000144E8                            Map_obj65:
000144E8                            	include "_maps\obj65.asm"
000144E8                            ; ---------------------------------------------------------------------------
000144E8                            ; Sprite mappings - waterfalls (LZ)
000144E8                            ; ---------------------------------------------------------------------------
000144E8 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000144EC 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000144F0 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000144F4 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000144F8 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000144FC 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00014500 01                         byte_12B6C:	dc.b 1
00014501 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014506 02                         byte_12B72:	dc.b 2
00014507 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001450C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014511 02                         byte_12B7D:	dc.b 2
00014512 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014517 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001451C 01                         byte_12B88:	dc.b 1
0001451D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014522 02                         byte_12B8E:	dc.b 2
00014523 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014528 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001452D 01                         byte_12B99:	dc.b 1
0001452E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014533 01                         byte_12B9F:	dc.b 1
00014534 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014539 01                         byte_12BA5:	dc.b 1
0001453A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001453F 02                         byte_12BAB:	dc.b 2
00014540 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014545 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001454A 02                         byte_12BB6:	dc.b 2
0001454B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014550 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014555 02                         byte_12BC1:	dc.b 2
00014556 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001455B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014560 02                         byte_12BCC:	dc.b 2
00014561 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014566 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001456C 00                         		even
0001456C 00                         		even
0001456C                            
0001456C                            ; ===========================================================================
0001456C                            ; ---------------------------------------------------------------------------
0001456C                            ; Object 01 - Sonic
0001456C                            ; ---------------------------------------------------------------------------
0001456C                            
0001456C                            Obj01:					; XREF: Obj_Index
0001456C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014570 6700                       		beq.s	Obj01_Normal	; if not, branch
00014572 4EF9 0000 0000             		jmp	DebugMode
00014578                            ; ===========================================================================
00014578                            
00014578                            Obj01_Normal:
00014578 7000                       		moveq	#0,d0
0001457A 1028 0024                  		move.b	$24(a0),d0
0001457E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00014582 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00014586                            ; ===========================================================================
00014586 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00014588 0000                       		dc.w Obj01_Control-Obj01_Index
0001458A 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001458C 0000                       		dc.w Obj01_Death-Obj01_Index
0001458E 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014590 0000                       		dc.w Sonic_Drowned-Obj01_Index
00014592                            ;===========================================================================
00014592                            
00014592                            Obj01_Main:				; XREF: Obj01_Index
00014592 5428 0024                  		addq.b	#2,$24(a0)
00014596 117C 0013 0016             		move.b	#$13,$16(a0)
0001459C 117C 0009 0017             		move.b	#9,$17(a0)
000145A2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000145AA 317C 0780 0002             		move.w	#$780,2(a0)
000145B0 117C 0002 0018             		move.b	#2,$18(a0)
000145B6 117C 0018 0019             		move.b	#$18,$19(a0)
000145BC 117C 0004 0001             		move.b	#4,1(a0)
000145C2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000145C8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000145CE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000145D4                            
000145D4                            Obj01_Control:				; XREF: Obj01_Index
000145D4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000145D8 6700                       		beq.s	loc_12C58	; if not, branch
000145DA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000145E0 6700                       		beq.s	loc_12C58	; if not, branch
000145E2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000145E8 4238 F7CC                  		clr.b	($FFFFF7CC).w
000145EC 4E75                       		rts	
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            loc_12C58:
000145EE 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000145F2 6600                       		bne.s	loc_12C64	; if yes, branch
000145F4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000145FA                            
000145FA                            loc_12C64:
000145FA 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00014600 6600                       		bne.s	loc_12C7E	; if yes, branch
00014602 7000                       		moveq	#0,d0
00014604 1028 0022                  		move.b	$22(a0),d0
00014608 0240 0006                  		andi.w	#6,d0
0001460C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00014610 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00014614                            
00014614                            loc_12C7E:
00014614 6100                       		bsr.s	Sonic_Display
00014616 6100 0000                  		bsr.w	Sonic_RecordPos
0001461A 6100 0000                  		bsr.w	Sonic_Water
0001461E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014624 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001462A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001462E 6700                       		beq.s	loc_12CA6
00014630 4A28 001C                  		tst.b	$1C(a0)
00014634 6600                       		bne.s	loc_12CA6
00014636 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001463C                            
0001463C                            loc_12CA6:
0001463C 6100 0000                  		bsr.w	Sonic_Animate
00014640 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014644 6B00                       		bmi.s	loc_12CB6
00014646 4EB9 0000 0000             		jsr	TouchResponse
0001464C                            
0001464C                            loc_12CB6:
0001464C 6100 0000                  		bsr.w	Sonic_Loops
00014650 6100 0000                  		bsr.w	LoadSonicDynPLC
00014654 4E75                       		rts	
00014656                            ; ===========================================================================
00014656 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014658 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001465A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001465C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001465E                            ; ---------------------------------------------------------------------------
0001465E                            ; Music	to play	after invincibility wears off
0001465E                            ; ---------------------------------------------------------------------------
0001465E                            MusicList2:	incbin	misc\muslist2.bin
00014664                            		even
00014664                            ; ===========================================================================
00014664                            
00014664                            Sonic_Display:				; XREF: loc_12C7E
00014664 3028 0030                  		move.w	$30(a0),d0
00014668 6700                       		beq.s	Obj01_Display
0001466A 5368 0030                  		subq.w	#1,$30(a0)
0001466E E648                       		lsr.w	#3,d0
00014670 6400                       		bcc.s	Obj01_ChkInvin
00014672                            
00014672                            Obj01_Display:
00014672 4EBA A29C                  		jsr	DisplaySprite
00014676                            
00014676                            Obj01_ChkInvin:
00014676 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001467A 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
0001467C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014680 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00014682 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00014686 6600                       		bne.s	Obj01_ChkShoes
00014688 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001468C 6600                       		bne.s	Obj01_RmvInvin
0001468E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014694 6500                       		bcs.s	Obj01_RmvInvin
00014696 7000                       		moveq	#0,d0
00014698 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001469C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000146A2 6600                       		bne.s	Obj01_PlayMusic
000146A4 7005                       		moveq	#5,d0		; play SBZ music
000146A6                            
000146A6                            Obj01_PlayMusic:
000146A6 43F9 0001 465E             		lea	(MusicList2).l,a1
000146AC 1031 0000                  		move.b	(a1,d0.w),d0
000146B0 4EB9 0000 11F0             		jsr	(PlaySound).l	; play normal music
000146B6                            
000146B6                            Obj01_RmvInvin:
000146B6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000146BC                            
000146BC                            Obj01_ChkShoes:
000146BC 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000146C0 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000146C2 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000146C6 6700                       		beq.s	Obj01_ExitChk
000146C8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000146CC 6600                       		bne.s	Obj01_ExitChk
000146CE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000146D4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000146DA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000146E0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000146E6 303C 00E3                  		move.w	#$E3,d0
000146EA 4EF9 0000 11F0             		jmp	(PlaySound).l	; run music at normal speed
000146F0                            ; ===========================================================================
000146F0                            
000146F0                            Obj01_ExitChk:
000146F0 4E75                       		rts	
000146F2                            
000146F2                            ; ---------------------------------------------------------------------------
000146F2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000146F2                            ; ---------------------------------------------------------------------------
000146F2                            
000146F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146F2                            
000146F2                            
000146F2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000146F2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000146F6 43F8 CB00                  		lea	($FFFFCB00).w,a1
000146FA 43F1 0000                  		lea	(a1,d0.w),a1
000146FE 32E8 0008                  		move.w	8(a0),(a1)+
00014702 32E8 000C                  		move.w	$C(a0),(a1)+
00014706 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001470A 4E75                       		rts	
0001470C                            ; End of function Sonic_RecordPos
0001470C                            
0001470C                            ; ---------------------------------------------------------------------------
0001470C                            ; Subroutine for Sonic when he's underwater
0001470C                            ; ---------------------------------------------------------------------------
0001470C                            
0001470C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001470C                            
0001470C                            
0001470C                            Sonic_Water:				; XREF: loc_12C7E
0001470C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00014712 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014714                            
00014714                            locret_12D80:
00014714 4E75                       		rts	
00014716                            ; ===========================================================================
00014716                            
00014716                            Obj01_InWater:
00014716 3038 F646                  		move.w	($FFFFF646).w,d0
0001471A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001471E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00014720 4A38 F612                  		tst.b	(f_insidepocket).w
00014724 6600                       		bne.s	Obj01_OutWater
00014726 08E8 0006 0022             		bset	#6,$22(a0)
0001472C 66E6                       		bne.s	locret_12D80
0001472E 6100 0000                  		bsr.w	ResumeMusic
00014732 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00014738 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001473E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00014744 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001474A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00014750 E0E8 0010                  		asr	$10(a0)
00014754 E0E8 0012                  		asr	$12(a0)
00014758 E0E8 0012                  		asr	$12(a0)
0001475C 67B6                       		beq.s	locret_12D80
0001475E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00014764 303C 00AA                  		move.w	#$AA,d0
00014768 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
0001476E                            ; ===========================================================================
0001476E                            
0001476E                            Obj01_OutWater:
0001476E 08A8 0006 0022             		bclr	#6,$22(a0)
00014774 679E                       		beq.s	locret_12D80
00014776 6100 0000                  		bsr.w	ResumeMusic
0001477A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014780 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00014786 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001478C E1E8 0012                  		asl	$12(a0)
00014790 6700 FF82                  		beq.w	locret_12D80
00014794 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001479A 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000147A0 6E00                       		bgt.s	loc_12E0E
000147A2 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000147A8                            
000147A8                            loc_12E0E:
000147A8 303C 00AA                  		move.w	#$AA,d0
000147AC 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play splash sound
000147B2                            ; End of function Sonic_Water
000147B2                            
000147B2                            ; ===========================================================================
000147B2                            ; ---------------------------------------------------------------------------
000147B2                            ; Modes	for controlling	Sonic
000147B2                            ; ---------------------------------------------------------------------------
000147B2                            
000147B2                            Obj01_MdNormal:				; XREF: Obj01_Modes
000147B2 6100 0000                  		bsr.w	Sonic_Jump
000147B6 6100 0000                  		bsr.w	Sonic_SlopeResist
000147BA 6100 0000                  		bsr.w	Sonic_Move
000147BE 6100 0000                  		bsr.w	Sonic_Roll
000147C2 6100 0000                  		bsr.w	Sonic_LevelBound
000147C6 4EBA A12E                  		jsr	SpeedToPos
000147CA 6100 0000                  		bsr.w	Sonic_AnglePos
000147CE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000147D2 4E75                       		rts	
000147D4                            ; ===========================================================================
000147D4                            
000147D4                            Obj01_MdJump:				; XREF: Obj01_Modes
000147D4 6100 0000                  		bsr.w	Sonic_JumpHeight
000147D8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000147DC 6100 0000                  		bsr.w	Sonic_LevelBound
000147E0 4EBA A0F4                  		jsr	ObjectFall
000147E4 0828 0006 0022             		btst	#6,$22(a0)
000147EA 6700                       		beq.s	loc_12E5C
000147EC 0468 0028 0012             		subi.w	#$28,$12(a0)
000147F2                            
000147F2                            loc_12E5C:
000147F2 6100 0000                  		bsr.w	Sonic_JumpAngle
000147F6 6100 0000                  		bsr.w	Sonic_Floor
000147FA 0C38 0030 F5E2             		cmpi.b	#$30,(SonimeSST+sonime_airtimer).w
00014800 6600                       		bne.s	@addtimer
00014802 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014808 6300                       		bls.s	@done
0001480A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
00014810 6700                       		beq.s	@done
00014812 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014818 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001481E 6000                       		bra.s	@done
00014820                            
00014820                            
00014820                            	@addtimer:
00014820 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
00014824 4A38 D012                  		tst.b	($FFFFD012).w
00014828 6A00                       		bpl.s	@done
0001482A 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001482E                            
0001482E                            	@done:
0001482E 4E75                       		rts	
00014830                            ; ===========================================================================
00014830                            
00014830                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014830 6100 0000                  		bsr.w	Sonic_Jump
00014834 6100 0000                  		bsr.w	Sonic_RollRepel
00014838 6100 0000                  		bsr.w	Sonic_RollSpeed
0001483C 6100 0000                  		bsr.w	Sonic_LevelBound
00014840 4EBA A0B4                  		jsr	SpeedToPos
00014844 6100 0000                  		bsr.w	Sonic_AnglePos
00014848 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001484C 4E75                       		rts	
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001484E 6100 0000                  		bsr.w	Sonic_JumpHeight
00014852 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014856 6100 0000                  		bsr.w	Sonic_LevelBound
0001485A 4EBA A07A                  		jsr	ObjectFall
0001485E 0828 0006 0022             		btst	#6,$22(a0)
00014864 6700                       		beq.s	loc_12EA6
00014866 0468 0028 0012             		subi.w	#$28,$12(a0)
0001486C                            
0001486C                            loc_12EA6:
0001486C 6100 0000                  		bsr.w	Sonic_JumpAngle
00014870 6100 0000                  		bsr.w	Sonic_Floor
00014874 0C38 0040 F5E2             		cmpi.b	#$40,(SonimeSST+sonime_airtimer).w
0001487A 6600                       		bne.s	@addtimer
0001487C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014882 6300                       		bls.s	@done
00014884 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w
0001488A 6700                       		beq.s	@done
0001488C 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00014892 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
00014898 6000                       		bra.s	@done
0001489A                            
0001489A                            
0001489A                            	@addtimer:
0001489A 5238 F5E2                  		addi.b	#1,(SonimeSST+sonime_airtimer).w
0001489E 4A38 D012                  		tst.b	($FFFFD012).w
000148A2 6A00                       		bpl.s	@done
000148A4 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
000148A8                            
000148A8                            	@done:
000148A8 4E75                       		rts	
000148AA                            ; ---------------------------------------------------------------------------
000148AA                            ; Subroutine to	make Sonic walk/run
000148AA                            ; ---------------------------------------------------------------------------
000148AA                            
000148AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148AA                            
000148AA                            
000148AA                            Sonic_Move:				; XREF: Obj01_MdNormal
000148AA 3C38 F760                  		move.w	($FFFFF760).w,d6
000148AE 3A38 F762                  		move.w	($FFFFF762).w,d5
000148B2 3838 F764                  		move.w	($FFFFF764).w,d4
000148B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000148BA 6600 0000                  		bne.w	loc_12FEE
000148BE 4A68 003E                  		tst.w	$3E(a0)
000148C2 6600 0000                  		bne.w	Obj01_ResetScr
000148C6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000148CC 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000148CE 6100 0000                  		bsr.w	Sonic_MoveLeft
000148D2                            
000148D2                            Obj01_NotLeft:
000148D2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000148D8 6700                       		beq.s	Obj01_NotRight	; if not, branch
000148DA 6100 0000                  		bsr.w	Sonic_MoveRight
000148DE                            
000148DE                            Obj01_NotRight:
000148DE 1028 0026                  		move.b	$26(a0),d0
000148E2 0600 0020                  		addi.b	#$20,d0
000148E6 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000148EA 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000148EE 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
000148F2 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000148F6 08A8 0005 0022             		bclr	#5,$22(a0)
000148FC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014902 0828 0003 0022             		btst	#3,$22(a0)
00014908 6700                       		beq.s	Sonic_Balance
0001490A 7000                       		moveq	#0,d0
0001490C 1028 003D                  		move.b	$3D(a0),d0
00014910 ED48                       		lsl.w	#6,d0
00014912 43F8 D000                  		lea	($FFFFD000).w,a1
00014916 43F1 0000                  		lea	(a1,d0.w),a1
0001491A 4A29 0022                  		tst.b	$22(a1)
0001491E 6B00                       		bmi.s	Sonic_LookUp
00014920 7200                       		moveq	#0,d1
00014922 1229 0019                  		move.b	$19(a1),d1
00014926 3401                       		move.w	d1,d2
00014928 D442                       		add.w	d2,d2
0001492A 5942                       		subq.w	#4,d2
0001492C D268 0008                  		add.w	8(a0),d1
00014930 9269 0008                  		sub.w	8(a1),d1
00014934 0C41 0004                  		cmpi.w	#4,d1
00014938 6D00                       		blt.s	loc_12F6A
0001493A B242                       		cmp.w	d2,d1
0001493C 6C00                       		bge.s	loc_12F5A
0001493E 6000                       		bra.s	Sonic_LookUp
00014940                            ; ===========================================================================
00014940                            
00014940                            Sonic_Balance:
00014940 4EB9 0000 0000             		jsr	ObjHitFloor
00014946 0C41 000C                  		cmpi.w	#$C,d1
0001494A 6D00                       		blt.s	Sonic_LookUp
0001494C 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014952 6600                       		bne.s	loc_12F62
00014954                            
00014954                            loc_12F5A:
00014954 08A8 0000 0022             		bclr	#0,$22(a0)
0001495A 6000                       		bra.s	loc_12F70
0001495C                            ; ===========================================================================
0001495C                            
0001495C                            loc_12F62:
0001495C 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014962 6600                       		bne.s	Sonic_LookUp
00014964                            
00014964                            loc_12F6A:
00014964 08E8 0000 0022             		bset	#0,$22(a0)
0001496A                            
0001496A                            loc_12F70:
0001496A 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014970 6000                       		bra.s	Obj01_ResetScr
00014972                            ; ===========================================================================
00014972                            
00014972                            Sonic_LookUp:
00014972 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014978 6700                       		beq.s	Sonic_Duck	; if not, branch
0001497A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014980 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014986 6700                       		beq.s	loc_12FC2
00014988 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001498C 6000                       		bra.s	loc_12FC2
0001498E                            ; ===========================================================================
0001498E                            
0001498E                            Sonic_Duck:
0001498E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014994 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014996 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001499C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000149A2 6700                       		beq.s	loc_12FC2
000149A4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000149A8 6000                       		bra.s	loc_12FC2
000149AA                            ; ===========================================================================
000149AA                            
000149AA                            Obj01_ResetScr:
000149AA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000149B0 6700                       		beq.s	loc_12FC2	; if yes, branch
000149B2 6400                       		bcc.s	loc_12FBE
000149B4 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000149B8                            
000149B8                            loc_12FBE:
000149B8 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000149BC                            
000149BC                            loc_12FC2:
000149BC 1038 F602                  		move.b	($FFFFF602).w,d0
000149C0 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000149C4 6600                       		bne.s	loc_12FEE	; if yes, branch
000149C6 3028 0020                  		move.w	$20(a0),d0
000149CA 6700                       		beq.s	loc_12FEE
000149CC 6B00                       		bmi.s	loc_12FE2
000149CE 9045                       		sub.w	d5,d0
000149D0 6400                       		bcc.s	loc_12FDC
000149D2 303C 0000                  		move.w	#0,d0
000149D6                            
000149D6                            loc_12FDC:
000149D6 3140 0020                  		move.w	d0,$20(a0)
000149DA 6000                       		bra.s	loc_12FEE
000149DC                            ; ===========================================================================
000149DC                            
000149DC                            loc_12FE2:
000149DC D045                       		add.w	d5,d0
000149DE 6400                       		bcc.s	loc_12FEA
000149E0 303C 0000                  		move.w	#0,d0
000149E4                            
000149E4                            loc_12FEA:
000149E4 3140 0020                  		move.w	d0,$20(a0)
000149E8                            
000149E8                            loc_12FEE:
000149E8 1028 0026                  		move.b	$26(a0),d0
000149EC 4EB9 0000 29CC             		jsr	(CalcSine).l
000149F2 C3E8 0020                  		muls.w	$20(a0),d1
000149F6 E081                       		asr.l	#8,d1
000149F8 3141 0010                  		move.w	d1,$10(a0)
000149FC C1E8 0020                  		muls.w	$20(a0),d0
00014A00 E080                       		asr.l	#8,d0
00014A02 3140 0012                  		move.w	d0,$12(a0)
00014A06                            
00014A06                            loc_1300C:
00014A06 1028 0026                  		move.b	$26(a0),d0
00014A0A 0600 0040                  		addi.b	#$40,d0
00014A0E 6B00                       		bmi.s	locret_1307C
00014A10 123C 0040                  		move.b	#$40,d1
00014A14 4A68 0020                  		tst.w	$20(a0)
00014A18 6700                       		beq.s	locret_1307C
00014A1A 6B00                       		bmi.s	loc_13024
00014A1C 4441                       		neg.w	d1
00014A1E                            
00014A1E                            loc_13024:
00014A1E 1028 0026                  		move.b	$26(a0),d0
00014A22 D001                       		add.b	d1,d0
00014A24 3F00                       		move.w	d0,-(sp)
00014A26 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014A2A 301F                       		move.w	(sp)+,d0
00014A2C 4A41                       		tst.w	d1
00014A2E 6A00                       		bpl.s	locret_1307C
00014A30 E141                       		asl.w	#8,d1
00014A32 0600 0020                  		addi.b	#$20,d0
00014A36 0200 00C0                  		andi.b	#$C0,d0
00014A3A 6700                       		beq.s	loc_13078
00014A3C 0C00 0040                  		cmpi.b	#$40,d0
00014A40 6700                       		beq.s	loc_13066
00014A42 0C00 0080                  		cmpi.b	#$80,d0
00014A46 6700                       		beq.s	loc_13060
00014A48 D368 0010                  		add.w	d1,$10(a0)
00014A4C 08E8 0005 0022             		bset	#5,$22(a0)
00014A52 317C 0000 0020             		move.w	#0,$20(a0)
00014A58 4E75                       		rts	
00014A5A                            ; ===========================================================================
00014A5A                            
00014A5A                            loc_13060:
00014A5A 9368 0012                  		sub.w	d1,$12(a0)
00014A5E 4E75                       		rts	
00014A60                            ; ===========================================================================
00014A60                            
00014A60                            loc_13066:
00014A60 9368 0010                  		sub.w	d1,$10(a0)
00014A64 08E8 0005 0022             		bset	#5,$22(a0)
00014A6A 317C 0000 0020             		move.w	#0,$20(a0)
00014A70 4E75                       		rts	
00014A72                            ; ===========================================================================
00014A72                            
00014A72                            loc_13078:
00014A72 D368 0012                  		add.w	d1,$12(a0)
00014A76                            
00014A76                            locret_1307C:
00014A76 4E75                       		rts	
00014A78                            ; End of function Sonic_Move
00014A78                            
00014A78                            
00014A78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A78                            
00014A78                            
00014A78                            Sonic_MoveLeft:				; XREF: Sonic_Move
00014A78 3028 0020                  		move.w	$20(a0),d0
00014A7C 6700                       		beq.s	loc_13086
00014A7E 6A00                       		bpl.s	loc_130B2
00014A80                            
00014A80                            loc_13086:
00014A80 08E8 0000 0022             		bset	#0,$22(a0)
00014A86 6600                       		bne.s	loc_1309A
00014A88 08A8 0005 0022             		bclr	#5,$22(a0)
00014A8E 117C 0001 001D             		move.b	#1,$1D(a0)
00014A94                            
00014A94                            loc_1309A:
00014A94 9045                       		sub.w	d5,d0
00014A96 3206                       		move.w	d6,d1
00014A98 4441                       		neg.w	d1
00014A9A B041                       		cmp.w	d1,d0
00014A9C 6E00                       		bgt.s	loc_130A6
00014A9E 3001                       		move.w	d1,d0
00014AA0                            
00014AA0                            loc_130A6:
00014AA0 3140 0020                  		move.w	d0,$20(a0)
00014AA4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014AAA 4E75                       		rts	
00014AAC                            ; ===========================================================================
00014AAC                            
00014AAC                            loc_130B2:				; XREF: Sonic_MoveLeft
00014AAC 9044                       		sub.w	d4,d0
00014AAE 6400                       		bcc.s	loc_130BA
00014AB0 303C FF80                  		move.w	#-$80,d0
00014AB4                            
00014AB4                            loc_130BA:
00014AB4 3140 0020                  		move.w	d0,$20(a0)
00014AB8 1028 0026                  		move.b	$26(a0),d0
00014ABC 0600 0020                  		addi.b	#$20,d0
00014AC0 0200 00C0                  		andi.b	#$C0,d0
00014AC4 6600                       		bne.s	locret_130E8
00014AC6 0C40 0400                  		cmpi.w	#$400,d0
00014ACA 6D00                       		blt.s	locret_130E8
00014ACC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014AD2 08A8 0000 0022             		bclr	#0,$22(a0)
00014AD8 303C 00A4                  		move.w	#$A4,d0
00014ADC 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014AE2                            
00014AE2                            locret_130E8:
00014AE2 4E75                       		rts	
00014AE4                            ; End of function Sonic_MoveLeft
00014AE4                            
00014AE4                            
00014AE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AE4                            
00014AE4                            
00014AE4                            Sonic_MoveRight:			; XREF: Sonic_Move
00014AE4 3028 0020                  		move.w	$20(a0),d0
00014AE8 6B00                       		bmi.s	loc_13118
00014AEA 08A8 0000 0022             		bclr	#0,$22(a0)
00014AF0 6700                       		beq.s	loc_13104
00014AF2 08A8 0005 0022             		bclr	#5,$22(a0)
00014AF8 117C 0001 001D             		move.b	#1,$1D(a0)
00014AFE                            
00014AFE                            loc_13104:
00014AFE D045                       		add.w	d5,d0
00014B00 B046                       		cmp.w	d6,d0
00014B02 6D00                       		blt.s	loc_1310C
00014B04 3006                       		move.w	d6,d0
00014B06                            
00014B06                            loc_1310C:
00014B06 3140 0020                  		move.w	d0,$20(a0)
00014B0A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014B10 4E75                       		rts	
00014B12                            ; ===========================================================================
00014B12                            
00014B12                            loc_13118:				; XREF: Sonic_MoveRight
00014B12 D044                       		add.w	d4,d0
00014B14 6400                       		bcc.s	loc_13120
00014B16 303C 0080                  		move.w	#$80,d0
00014B1A                            
00014B1A                            loc_13120:
00014B1A 3140 0020                  		move.w	d0,$20(a0)
00014B1E 1028 0026                  		move.b	$26(a0),d0
00014B22 0600 0020                  		addi.b	#$20,d0
00014B26 0200 00C0                  		andi.b	#$C0,d0
00014B2A 6600                       		bne.s	locret_1314E
00014B2C 0C40 FC00                  		cmpi.w	#-$400,d0
00014B30 6E00                       		bgt.s	locret_1314E
00014B32 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014B38 08E8 0000 0022             		bset	#0,$22(a0)
00014B3E 303C 00A4                  		move.w	#$A4,d0
00014B42 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play stopping sound
00014B48                            
00014B48                            locret_1314E:
00014B48 4E75                       		rts	
00014B4A                            ; End of function Sonic_MoveRight
00014B4A                            
00014B4A                            ; ---------------------------------------------------------------------------
00014B4A                            ; Subroutine to	change Sonic's speed as he rolls
00014B4A                            ; ---------------------------------------------------------------------------
00014B4A                            
00014B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B4A                            
00014B4A                            
00014B4A                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00014B4A 3C38 F760                  		move.w	($FFFFF760).w,d6
00014B4E E346                       		asl.w	#1,d6
00014B50 3A38 F762                  		move.w	($FFFFF762).w,d5
00014B54 E245                       		asr.w	#1,d5
00014B56 3838 F764                  		move.w	($FFFFF764).w,d4
00014B5A E444                       		asr.w	#2,d4
00014B5C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014B60 6600 0000                  		bne.w	loc_131CC
00014B64 4A68 003E                  		tst.w	$3E(a0)
00014B68 6600                       		bne.s	loc_13188
00014B6A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014B70 6700                       		beq.s	loc_1317C	; if not, branch
00014B72 6100 0000                  		bsr.w	Sonic_RollLeft
00014B76                            
00014B76                            loc_1317C:
00014B76 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014B7C 6700                       		beq.s	loc_13188	; if not, branch
00014B7E 6100 0000                  		bsr.w	Sonic_RollRight
00014B82                            
00014B82                            loc_13188:
00014B82 3028 0020                  		move.w	$20(a0),d0
00014B86 6700                       		beq.s	loc_131AA
00014B88 6B00                       		bmi.s	loc_1319E
00014B8A 9045                       		sub.w	d5,d0
00014B8C 6400                       		bcc.s	loc_13198
00014B8E 303C 0000                  		move.w	#0,d0
00014B92                            
00014B92                            loc_13198:
00014B92 3140 0020                  		move.w	d0,$20(a0)
00014B96 6000                       		bra.s	loc_131AA
00014B98                            ; ===========================================================================
00014B98                            
00014B98                            loc_1319E:				; XREF: Sonic_RollSpeed
00014B98 D045                       		add.w	d5,d0
00014B9A 6400                       		bcc.s	loc_131A6
00014B9C 303C 0000                  		move.w	#0,d0
00014BA0                            
00014BA0                            loc_131A6:
00014BA0 3140 0020                  		move.w	d0,$20(a0)
00014BA4                            
00014BA4                            loc_131AA:
00014BA4 4A68 0020                  		tst.w	$20(a0)		; is Sonic moving?
00014BA8 6600                       		bne.s	loc_131CC	; if yes, branch
00014BAA                            
00014BAA                            	@NoReset:
00014BAA 08A8 0002 0022             		bclr	#2,$22(a0)
00014BB0 117C 0013 0016             		move.b	#$13,$16(a0)
00014BB6 117C 0009 0017             		move.b	#9,$17(a0)
00014BBC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014BC2 5B68 000C                  		subq.w	#5,$C(a0)
00014BC6                            
00014BC6                            loc_131CC:
00014BC6 1028 0026                  		move.b	$26(a0),d0
00014BCA 4EB9 0000 29CC             		jsr	(CalcSine).l
00014BD0 C1E8 0020                  		muls.w	$20(a0),d0
00014BD4 E080                       		asr.l	#8,d0
00014BD6 3140 0012                  		move.w	d0,$12(a0)
00014BDA C3E8 0020                  		muls.w	$20(a0),d1
00014BDE E081                       		asr.l	#8,d1
00014BE0 0C41 1000                  		cmpi.w	#$1000,d1
00014BE4 6F00                       		ble.s	loc_131F0
00014BE6 323C 1000                  		move.w	#$1000,d1
00014BEA                            
00014BEA                            loc_131F0:
00014BEA 0C41 F000                  		cmpi.w	#-$1000,d1
00014BEE 6C00                       		bge.s	loc_131FA
00014BF0 323C F000                  		move.w	#-$1000,d1
00014BF4                            
00014BF4                            loc_131FA:
00014BF4 3141 0010                  		move.w	d1,$10(a0)
00014BF8 6000 FE0C                  		bra.w	loc_1300C
00014BFC                            ; End of function Sonic_RollSpeed
00014BFC                            
00014BFC                            
00014BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BFC                            
00014BFC                            
00014BFC                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014BFC 3028 0020                  		move.w	$20(a0),d0
00014C00 6700                       		beq.s	loc_1320A
00014C02 6A00                       		bpl.s	loc_13218
00014C04                            
00014C04                            loc_1320A:
00014C04 08E8 0000 0022             		bset	#0,$22(a0)
00014C0A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C10 4E75                       		rts	
00014C12                            ; ===========================================================================
00014C12                            
00014C12                            loc_13218:
00014C12 9044                       		sub.w	d4,d0
00014C14 6400                       		bcc.s	loc_13220
00014C16 303C FF80                  		move.w	#-$80,d0
00014C1A                            
00014C1A                            loc_13220:
00014C1A 3140 0020                  		move.w	d0,$20(a0)
00014C1E 4E75                       		rts	
00014C20                            ; End of function Sonic_RollLeft
00014C20                            
00014C20                            
00014C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C20                            
00014C20                            
00014C20                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014C20 3028 0020                  		move.w	$20(a0),d0
00014C24 6B00                       		bmi.s	loc_1323A
00014C26 08A8 0000 0022             		bclr	#0,$22(a0)
00014C2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014C32 4E75                       		rts	
00014C34                            ; ===========================================================================
00014C34                            
00014C34                            loc_1323A:
00014C34 D044                       		add.w	d4,d0
00014C36 6400                       		bcc.s	loc_13242
00014C38 303C 0080                  		move.w	#$80,d0
00014C3C                            
00014C3C                            loc_13242:
00014C3C 3140 0020                  		move.w	d0,$20(a0)
00014C40 4E75                       		rts	
00014C42                            ; End of function Sonic_RollRight
00014C42                            
00014C42                            ; ---------------------------------------------------------------------------
00014C42                            ; Subroutine to	change Sonic's direction while jumping
00014C42                            ; ---------------------------------------------------------------------------
00014C42                            
00014C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C42                            
00014C42                            
00014C42                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014C42 3C38 F760                  		move.w	($FFFFF760).w,d6
00014C46 3A38 F762                  		move.w	($FFFFF762).w,d5
00014C4A E345                       		asl.w	#1,d5
00014C4C 0828 0004 0022             		btst	#4,$22(a0)
00014C52 6600                       		bne.s	Obj01_ResetScr2
00014C54 3028 0010                  		move.w	$10(a0),d0
00014C58 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014C5E 6700                       		beq.s	loc_13278	; if not, branch
00014C60 08E8 0000 0022             		bset	#0,$22(a0)
00014C66 9045                       		sub.w	d5,d0
00014C68 3206                       		move.w	d6,d1
00014C6A 4441                       		neg.w	d1
00014C6C B041                       		cmp.w	d1,d0
00014C6E 6E00                       		bgt.s	loc_13278
00014C70 3001                       		move.w	d1,d0
00014C72                            
00014C72                            loc_13278:
00014C72 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014C78 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014C7A 08A8 0000 0022             		bclr	#0,$22(a0)
00014C80 D045                       		add.w	d5,d0
00014C82 B046                       		cmp.w	d6,d0
00014C84 6D00                       		blt.s	Obj01_JumpMove
00014C86 3006                       		move.w	d6,d0
00014C88                            
00014C88                            Obj01_JumpMove:
00014C88 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014C8C                            
00014C8C                            Obj01_ResetScr2:
00014C8C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014C92 6700                       		beq.s	loc_132A4	; if yes, branch
00014C94 6400                       		bcc.s	loc_132A0
00014C96 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014C9A                            
00014C9A                            loc_132A0:
00014C9A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014C9E                            
00014C9E                            loc_132A4:
00014C9E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00014CA4 6500                       		bcs.s	locret_132D2	; if yes, branch
00014CA6 3028 0010                  		move.w	$10(a0),d0
00014CAA 3200                       		move.w	d0,d1
00014CAC EA41                       		asr.w	#5,d1
00014CAE 6700                       		beq.s	locret_132D2
00014CB0 6B00                       		bmi.s	loc_132C6
00014CB2 9041                       		sub.w	d1,d0
00014CB4 6400                       		bcc.s	loc_132C0
00014CB6 303C 0000                  		move.w	#0,d0
00014CBA                            
00014CBA                            loc_132C0:
00014CBA 3140 0010                  		move.w	d0,$10(a0)
00014CBE 4E75                       		rts	
00014CC0                            ; ===========================================================================
00014CC0                            
00014CC0                            loc_132C6:
00014CC0 9041                       		sub.w	d1,d0
00014CC2 6500                       		bcs.s	loc_132CE
00014CC4 303C 0000                  		move.w	#0,d0
00014CC8                            
00014CC8                            loc_132CE:
00014CC8 3140 0010                  		move.w	d0,$10(a0)
00014CCC                            
00014CCC                            locret_132D2:
00014CCC 4E75                       		rts	
00014CCE                            ; End of function Sonic_ChgJumpDir
00014CCE                            
00014CCE                            ; ===========================================================================
00014CCE                            ; ---------------------------------------------------------------------------
00014CCE                            ; Unused subroutine to squash Sonic
00014CCE                            ; ---------------------------------------------------------------------------
00014CCE 1028 0026                  		move.b	$26(a0),d0
00014CD2 0600 0020                  		addi.b	#$20,d0
00014CD6 0200 00C0                  		andi.b	#$C0,d0
00014CDA 6600                       		bne.s	locret_13302
00014CDC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014CE0 4A41                       		tst.w	d1
00014CE2 6A00                       		bpl.s	locret_13302
00014CE4 317C 0000 0020             		move.w	#0,$20(a0)	; stop Sonic moving
00014CEA 317C 0000 0010             		move.w	#0,$10(a0)
00014CF0 317C 0000 0012             		move.w	#0,$12(a0)
00014CF6 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014CFC                            
00014CFC                            locret_13302:
00014CFC 4E75                       		rts	
00014CFE                            ; ---------------------------------------------------------------------------
00014CFE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014CFE                            ; ---------------------------------------------------------------------------
00014CFE                            
00014CFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CFE                            
00014CFE                            
00014CFE                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014CFE 2228 0008                  		move.l	8(a0),d1
00014D02 3028 0010                  		move.w	$10(a0),d0
00014D06 48C0                       		ext.l	d0
00014D08 E180                       		asl.l	#8,d0
00014D0A D280                       		add.l	d0,d1
00014D0C 4841                       		swap	d1
00014D0E 3038 F728                  		move.w	($FFFFF728).w,d0
00014D12 0640 0010                  		addi.w	#$10,d0
00014D16 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D18 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014D1A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014D1E 0640 0128                  		addi.w	#$128,d0
00014D22 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014D26 6600                       		bne.s	loc_13332
00014D28 0640 0040                  		addi.w	#$40,d0
00014D2C                            
00014D2C                            loc_13332:
00014D2C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014D2E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014D30                            
00014D30                            loc_13336:
00014D30 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014D34 0640 00E0                  		addi.w	#$E0,d0
00014D38 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014D3C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014D3E 4E75                       		rts	
00014D40                            ; ===========================================================================
00014D40                            
00014D40                            Boundary_Bottom:
00014D40 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014D46 6600                       		bne.s	JMPKillSonic	; if not, kill Sonic
00014D48 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014D4E 6500                       		bcs.s	JMPKillSonic
00014D50 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014D54 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014D5A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014D60 4E75                       		rts	
00014D62                            ; ===========================================================================
00014D62                            
00014D62                            Boundary_Sides:
00014D62 3140 0008                  		move.w	d0,8(a0)
00014D66 317C 0000 000A             		move.w	#0,$A(a0)
00014D6C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014D72 317C 0000 0020             		move.w	#0,$20(a0)
00014D78 60B6                       		bra.s	loc_13336
00014D7A                            
00014D7A                            JMPKillSonic:
00014D7A 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
00014D80 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00014D86 4EF9 0000 0000             		jmp	KillSonic
00014D8C                            ; End of function Sonic_LevelBound
00014D8C                            
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            ; Subroutine allowing Sonic to roll when he's moving
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            
00014D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D8C                            
00014D8C                            
00014D8C                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014D8C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014D90 6600                       		bne.s	Obj01_NoRoll
00014D92 3028 0020                  		move.w	$20(a0),d0
00014D96 6A00                       		bpl.s	loc_13392
00014D98 4440                       		neg.w	d0
00014D9A                            
00014D9A                            loc_13392:
00014D9A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014D9E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014DA0 1038 F602                  		move.b	($FFFFF602).w,d0
00014DA4 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014DA8 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014DAA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014DB0 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014DB2                            
00014DB2                            Obj01_NoRoll:
00014DB2 4E75                       		rts	
00014DB4                            ; ===========================================================================
00014DB4                            
00014DB4                            Obj01_ChkRoll:
00014DB4 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014DBA 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014DBC 4E75                       		rts	
00014DBE                            ; ===========================================================================
00014DBE                            
00014DBE                            Obj01_DoRoll:
00014DBE 08E8 0002 0022             		bset	#2,$22(a0)
00014DC4 117C 000E 0016             		move.b	#$E,$16(a0)
00014DCA 117C 0007 0017             		move.b	#7,$17(a0)
00014DD0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014DD6 5A68 000C                  		addq.w	#5,$C(a0)
00014DDA 303C 00BE                  		move.w	#$BE,d0
00014DDE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rolling sound
00014DE4 4A68 0020                  		tst.w	$20(a0)
00014DE8 6600                       		bne.s	locret_133E8
00014DEA 317C 0200 0020             		move.w	#$200,$20(a0)
00014DF0                            
00014DF0                            locret_133E8:
00014DF0 4E75                       		rts	
00014DF2                            ; End of function Sonic_Roll
00014DF2                            
00014DF2                            ; ---------------------------------------------------------------------------
00014DF2                            ; Subroutine allowing Sonic to jump
00014DF2                            ; ---------------------------------------------------------------------------
00014DF2                            
00014DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DF2                            
00014DF2                            
00014DF2                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014DF2 1038 F603                  		move.b	($FFFFF603).w,d0
00014DF6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014DFA 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014DFE 31FC 6000 F5D8             		move.w	#$6000,(SonimeSST+sonime_waittimer).w
00014E04 0C38 000B F5CE             		cmpi.b	#face_impatient,(SonimeSST+sonime_face).w
00014E0A 6600                       		bne.s	@notfrustrated
00014E0C 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00014E12                            
00014E12                            	@notfrustrated:
00014E12 7000                       		moveq	#0,d0
00014E14 1028 0026                  		move.b	$26(a0),d0
00014E18 0600 0080                  		addi.b	#$80,d0
00014E1C 6100 0000                  		bsr.w	sub_14D48
00014E20 0C41 0006                  		cmpi.w	#6,d1
00014E24 6D00 0000                  		blt.w	locret_1348E
00014E28 343C 0680                  		move.w	#$680,d2
00014E2C 0828 0006 0022             		btst	#6,$22(a0)
00014E32 6700                       		beq.s	loc_1341C
00014E34 343C 0380                  		move.w	#$380,d2
00014E38                            
00014E38                            loc_1341C:
00014E38 7000                       		moveq	#0,d0
00014E3A 1028 0026                  		move.b	$26(a0),d0
00014E3E 0400 0040                  		subi.b	#$40,d0
00014E42 4EB9 0000 29CC             		jsr	(CalcSine).l
00014E48 C3C2                       		muls.w	d2,d1
00014E4A E081                       		asr.l	#8,d1
00014E4C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014E50 C1C2                       		muls.w	d2,d0
00014E52 E080                       		asr.l	#8,d0
00014E54 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014E58 08E8 0001 0022             		bset	#1,$22(a0)
00014E5E 08A8 0005 0022             		bclr	#5,$22(a0)
00014E64 588F                       		addq.l	#4,sp
00014E66 117C 0001 003C             		move.b	#1,$3C(a0)
00014E6C 4228 0038                  		clr.b	$38(a0)
00014E70 303C 00A0                  		move.w	#$A0,d0
00014E74 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
00014E7A 117C 0013 0016             		move.b	#$13,$16(a0)
00014E80 117C 0009 0017             		move.b	#9,$17(a0)
00014E86 0828 0002 0022             		btst	#2,$22(a0)
00014E8C 6600                       		bne.s	loc_13490
00014E8E 117C 000E 0016             		move.b	#$E,$16(a0)
00014E94 117C 0007 0017             		move.b	#7,$17(a0)
00014E9A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014EA0 08E8 0002 0022             		bset	#2,$22(a0)
00014EA6 5A68 000C                  		addq.w	#5,$C(a0)
00014EAA                            
00014EAA                            locret_1348E:
00014EAA 4E75                       		rts	
00014EAC                            ; ===========================================================================
00014EAC                            
00014EAC                            loc_13490:
00014EAC 08E8 0004 0022             		bset	#4,$22(a0)
00014EB2 4E75                       		rts	
00014EB4                            ; End of function Sonic_Jump
00014EB4                            
00014EB4                            
00014EB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EB4                            
00014EB4                            
00014EB4                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014EB4 4A28 003C                  		tst.b	$3C(a0)
00014EB8 6700                       		beq.s	loc_134C4
00014EBA 323C FC00                  		move.w	#-$400,d1
00014EBE 0828 0006 0022             		btst	#6,$22(a0)
00014EC4 6700                       		beq.s	loc_134AE
00014EC6 323C FE00                  		move.w	#-$200,d1
00014ECA                            
00014ECA                            loc_134AE:
00014ECA B268 0012                  		cmp.w	$12(a0),d1
00014ECE 6F00                       		ble.s	locret_134C2
00014ED0 1038 F602                  		move.b	($FFFFF602).w,d0
00014ED4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014ED8 6600                       		bne.s	locret_134C2	; if yes, branch
00014EDA 3141 0012                  		move.w	d1,$12(a0)
00014EDE                            
00014EDE                            locret_134C2:
00014EDE 4E75                       		rts	
00014EE0                            ; ===========================================================================
00014EE0                            
00014EE0                            loc_134C4:
00014EE0 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014EE6 6C00                       		bge.s	locret_134D2
00014EE8 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014EEE                            
00014EEE                            locret_134D2:
00014EEE 4E75                       		rts	
00014EF0                            ; End of function Sonic_JumpHeight
00014EF0                            
00014EF0                            ; ---------------------------------------------------------------------------
00014EF0                            ; Subroutine to	slow Sonic walking up a	slope
00014EF0                            ; ---------------------------------------------------------------------------
00014EF0                            
00014EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EF0                            
00014EF0                            
00014EF0                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014EF0 1028 0026                  		move.b	$26(a0),d0
00014EF4 0600 0060                  		addi.b	#$60,d0
00014EF8 0C00 00C0                  		cmpi.b	#$C0,d0
00014EFC 6400                       		bcc.s	locret_13508
00014EFE 1028 0026                  		move.b	$26(a0),d0
00014F02 4EB9 0000 29CC             		jsr	(CalcSine).l
00014F08 C1FC 0020                  		muls.w	#$20,d0
00014F0C E080                       		asr.l	#8,d0
00014F0E 4A68 0020                  		tst.w	$20(a0)
00014F12 6700                       		beq.s	locret_13508
00014F14 6B00                       		bmi.s	loc_13504
00014F16 4A40                       		tst.w	d0
00014F18 6700                       		beq.s	locret_13502
00014F1A D168 0020                  		add.w	d0,$20(a0)	; change Sonic's inertia
00014F1E                            
00014F1E                            locret_13502:
00014F1E 4E75                       		rts	
00014F20                            ; ===========================================================================
00014F20                            
00014F20                            loc_13504:
00014F20 D168 0020                  		add.w	d0,$20(a0)
00014F24                            
00014F24                            locret_13508:
00014F24 4E75                       		rts	
00014F26                            ; End of function Sonic_SlopeResist
00014F26                            
00014F26                            ; ---------------------------------------------------------------------------
00014F26                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014F26                            ; ---------------------------------------------------------------------------
00014F26                            
00014F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F26                            
00014F26                            
00014F26                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014F26 1028 0026                  		move.b	$26(a0),d0
00014F2A 0600 0060                  		addi.b	#$60,d0
00014F2E 0C00 00C0                  		cmpi.b	#-$40,d0
00014F32 6400                       		bcc.s	locret_13544
00014F34 1028 0026                  		move.b	$26(a0),d0
00014F38 4EB9 0000 29CC             		jsr	(CalcSine).l
00014F3E C1FC 0050                  		muls.w	#$50,d0
00014F42 E080                       		asr.l	#8,d0
00014F44 4A68 0020                  		tst.w	$20(a0)
00014F48 6B00                       		bmi.s	loc_1353A
00014F4A 4A40                       		tst.w	d0
00014F4C 6A00                       		bpl.s	loc_13534
00014F4E E480                       		asr.l	#2,d0
00014F50                            
00014F50                            loc_13534:
00014F50 D168 0020                  		add.w	d0,$20(a0)
00014F54 4E75                       		rts	
00014F56                            ; ===========================================================================
00014F56                            
00014F56                            loc_1353A:
00014F56 4A40                       		tst.w	d0
00014F58 6B00                       		bmi.s	loc_13540
00014F5A E480                       		asr.l	#2,d0
00014F5C                            
00014F5C                            loc_13540:
00014F5C D168 0020                  		add.w	d0,$20(a0)
00014F60                            
00014F60                            locret_13544:
00014F60 4E75                       		rts	
00014F62                            ; End of function Sonic_RollRepel
00014F62                            
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            ; Subroutine to	push Sonic down	a slope
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            
00014F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F62                            
00014F62                            
00014F62                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F62 4E71                       		nop	
00014F64 4A28 0038                  		tst.b	$38(a0)
00014F68 6600                       		bne.s	locret_13580
00014F6A 4A68 003E                  		tst.w	$3E(a0)
00014F6E 6600                       		bne.s	loc_13582
00014F70 1028 0026                  		move.b	$26(a0),d0
00014F74 0600 0020                  		addi.b	#$20,d0
00014F78 0200 00C0                  		andi.b	#$C0,d0
00014F7C 6700                       		beq.s	locret_13580
00014F7E 3028 0020                  		move.w	$20(a0),d0
00014F82 6A00                       		bpl.s	loc_1356A
00014F84 4440                       		neg.w	d0
00014F86                            
00014F86                            loc_1356A:
00014F86 0C40 0280                  		cmpi.w	#$280,d0
00014F8A 6400                       		bcc.s	locret_13580
00014F8C 4268 0020                  		clr.w	$20(a0)
00014F90 08E8 0001 0022             		bset	#1,$22(a0)
00014F96 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014F9C                            
00014F9C                            locret_13580:
00014F9C 4E75                       		rts	
00014F9E                            ; ===========================================================================
00014F9E                            
00014F9E                            loc_13582:
00014F9E 5368 003E                  		subq.w	#1,$3E(a0)
00014FA2 4E75                       		rts	
00014FA4                            ; End of function Sonic_SlopeRepel
00014FA4                            
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            
00014FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FA4                            
00014FA4                            
00014FA4                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014FA4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014FA8 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014FAA 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014FAC                            
00014FAC 5400                       		addq.b	#2,d0		; increase angle
00014FAE 6400                       		bcc.s	loc_13596
00014FB0 7000                       		moveq	#0,d0
00014FB2                            
00014FB2                            loc_13596:
00014FB2 6000                       		bra.s	loc_1359E
00014FB4                            ; ===========================================================================
00014FB4                            
00014FB4                            loc_13598:
00014FB4 5500                       		subq.b	#2,d0		; decrease angle
00014FB6 6400                       		bcc.s	loc_1359E
00014FB8 7000                       		moveq	#0,d0
00014FBA                            
00014FBA                            loc_1359E:
00014FBA 1140 0026                  		move.b	d0,$26(a0)
00014FBE                            
00014FBE                            locret_135A2:
00014FBE 4E75                       		rts	
00014FC0                            ; End of function Sonic_JumpAngle
00014FC0                            
00014FC0                            ; ---------------------------------------------------------------------------
00014FC0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014FC0                            ; ---------------------------------------------------------------------------
00014FC0                            
00014FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FC0                            
00014FC0                            
00014FC0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014FC0 3228 0010                  		move.w	$10(a0),d1
00014FC4 3428 0012                  		move.w	$12(a0),d2
00014FC8 4EB9 0000 2C94             		jsr	(CalcAngle).l
00014FCE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014FD2 0400 0020                  		subi.b	#$20,d0
00014FD6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014FDA 0200 00C0                  		andi.b	#$C0,d0
00014FDE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014FE2 0C00 0040                  		cmpi.b	#$40,d0
00014FE6 6700 0000                  		beq.w	loc_13680
00014FEA 0C00 0080                  		cmpi.b	#$80,d0
00014FEE 6700 0000                  		beq.w	loc_136E2
00014FF2 0C00 00C0                  		cmpi.b	#-$40,d0
00014FF6 6700 0000                  		beq.w	loc_1373E
00014FFA 6100 0000                  		bsr.w	Sonic_HitWall
00014FFE 4A41                       		tst.w	d1
00015000 6A00                       		bpl.s	loc_135F0
00015002 9368 0008                  		sub.w	d1,8(a0)
00015006 317C 0000 0010             		move.w	#0,$10(a0)
0001500C                            
0001500C                            loc_135F0:
0001500C 6100 0000                  		bsr.w	sub_14EB4
00015010 4A41                       		tst.w	d1
00015012 6A00                       		bpl.s	loc_13602
00015014 D368 0008                  		add.w	d1,8(a0)
00015018 317C 0000 0010             		move.w	#0,$10(a0)
0001501E                            
0001501E                            loc_13602:
0001501E 6100 0000                  		bsr.w	Sonic_HitFloor
00015022 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015026 4A41                       		tst.w	d1
00015028 6A00                       		bpl.s	locret_1367E
0001502A 1428 0012                  		move.b	$12(a0),d2
0001502E 5002                       		addq.b	#8,d2
00015030 4402                       		neg.b	d2
00015032 B202                       		cmp.b	d2,d1
00015034 6C00                       		bge.s	loc_1361E
00015036 B002                       		cmp.b	d2,d0
00015038 6D00                       		blt.s	locret_1367E
0001503A                            
0001503A                            loc_1361E:
0001503A D368 000C                  		add.w	d1,$C(a0)
0001503E 1143 0026                  		move.b	d3,$26(a0)
00015042 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015046 117C 0000 001C             		move.b	#0,$1C(a0)
0001504C 1003                       		move.b	d3,d0
0001504E 0600 0020                  		addi.b	#$20,d0
00015052 0200 0040                  		andi.b	#$40,d0
00015056 6600                       		bne.s	loc_1365C
00015058 1003                       		move.b	d3,d0
0001505A 0600 0010                  		addi.b	#$10,d0
0001505E 0200 0020                  		andi.b	#$20,d0
00015062 6700                       		beq.s	loc_1364E
00015064 E0E8 0012                  		asr	$12(a0)
00015068 6000                       		bra.s	loc_13670
0001506A                            ; ===========================================================================
0001506A                            
0001506A                            loc_1364E:
0001506A 317C 0000 0012             		move.w	#0,$12(a0)
00015070 3168 0010 0020             		move.w	$10(a0),$20(a0)
00015076 4E75                       		rts	
00015078                            ; ===========================================================================
00015078                            
00015078                            loc_1365C:
00015078 317C 0000 0010             		move.w	#0,$10(a0)
0001507E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00015084 6F00                       		ble.s	loc_13670
00015086 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001508C                            
0001508C                            loc_13670:
0001508C 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015092 4A03                       		tst.b	d3
00015094 6A00                       		bpl.s	locret_1367E
00015096 4468 0020                  		neg.w	$20(a0)
0001509A                            
0001509A                            locret_1367E:
0001509A 4E75                       		rts	
0001509C                            ; ===========================================================================
0001509C                            
0001509C                            loc_13680:
0001509C 6100 0000                  		bsr.w	Sonic_HitWall
000150A0 4A41                       		tst.w	d1
000150A2 6A00                       		bpl.s	loc_1369A
000150A4 9368 0008                  		sub.w	d1,8(a0)
000150A8 317C 0000 0010             		move.w	#0,$10(a0)
000150AE 3168 0012 0020             		move.w	$12(a0),$20(a0)
000150B4 4E75                       		rts	
000150B6                            ; ===========================================================================
000150B6                            
000150B6                            loc_1369A:
000150B6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000150BA 4A41                       		tst.w	d1
000150BC 6A00                       		bpl.s	loc_136B4
000150BE 9368 000C                  		sub.w	d1,$C(a0)
000150C2 4A68 0012                  		tst.w	$12(a0)
000150C6 6A00                       		bpl.s	locret_136B2
000150C8 317C 0000 0012             		move.w	#0,$12(a0)
000150CE                            
000150CE                            locret_136B2:
000150CE 4E75                       		rts	
000150D0                            ; ===========================================================================
000150D0                            
000150D0                            loc_136B4:
000150D0 4A68 0012                  		tst.w	$12(a0)
000150D4 6B00                       		bmi.s	locret_136E0
000150D6 6100 0000                  		bsr.w	Sonic_HitFloor
000150DA 4A41                       		tst.w	d1
000150DC 6A00                       		bpl.s	locret_136E0
000150DE D368 000C                  		add.w	d1,$C(a0)
000150E2 1143 0026                  		move.b	d3,$26(a0)
000150E6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000150EA 117C 0000 001C             		move.b	#0,$1C(a0)
000150F0 317C 0000 0012             		move.w	#0,$12(a0)
000150F6 3168 0010 0020             		move.w	$10(a0),$20(a0)
000150FC                            
000150FC                            locret_136E0:
000150FC 4E75                       		rts	
000150FE                            ; ===========================================================================
000150FE                            
000150FE                            loc_136E2:
000150FE 6100 0000                  		bsr.w	Sonic_HitWall
00015102 4A41                       		tst.w	d1
00015104 6A00                       		bpl.s	loc_136F4
00015106 9368 0008                  		sub.w	d1,8(a0)
0001510A 317C 0000 0010             		move.w	#0,$10(a0)
00015110                            
00015110                            loc_136F4:
00015110 6100 0000                  		bsr.w	sub_14EB4
00015114 4A41                       		tst.w	d1
00015116 6A00                       		bpl.s	loc_13706
00015118 D368 0008                  		add.w	d1,8(a0)
0001511C 317C 0000 0010             		move.w	#0,$10(a0)
00015122                            
00015122                            loc_13706:
00015122 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015126 4A41                       		tst.w	d1
00015128 6A00                       		bpl.s	locret_1373C
0001512A 9368 000C                  		sub.w	d1,$C(a0)
0001512E 1003                       		move.b	d3,d0
00015130 0600 0020                  		addi.b	#$20,d0
00015134 0200 0040                  		andi.b	#$40,d0
00015138 6600                       		bne.s	loc_13726
0001513A 317C 0000 0012             		move.w	#0,$12(a0)
00015140 4E75                       		rts	
00015142                            ; ===========================================================================
00015142                            
00015142                            loc_13726:
00015142 1143 0026                  		move.b	d3,$26(a0)
00015146 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001514A 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015150 4A03                       		tst.b	d3
00015152 6A00                       		bpl.s	locret_1373C
00015154 4468 0020                  		neg.w	$20(a0)
00015158                            
00015158                            locret_1373C:
00015158 4E75                       		rts	
0001515A                            ; ===========================================================================
0001515A                            
0001515A                            loc_1373E:
0001515A 6100 0000                  		bsr.w	sub_14EB4
0001515E 4A41                       		tst.w	d1
00015160 6A00                       		bpl.s	loc_13758
00015162 D368 0008                  		add.w	d1,8(a0)
00015166 317C 0000 0010             		move.w	#0,$10(a0)
0001516C 3168 0012 0020             		move.w	$12(a0),$20(a0)
00015172 4E75                       		rts	
00015174                            ; ===========================================================================
00015174                            
00015174                            loc_13758:
00015174 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015178 4A41                       		tst.w	d1
0001517A 6A00                       		bpl.s	loc_13772
0001517C 9368 000C                  		sub.w	d1,$C(a0)
00015180 4A68 0012                  		tst.w	$12(a0)
00015184 6A00                       		bpl.s	locret_13770
00015186 317C 0000 0012             		move.w	#0,$12(a0)
0001518C                            
0001518C                            locret_13770:
0001518C 4E75                       		rts	
0001518E                            ; ===========================================================================
0001518E                            
0001518E                            loc_13772:
0001518E 4A68 0012                  		tst.w	$12(a0)
00015192 6B00                       		bmi.s	locret_1379E
00015194 6100 0000                  		bsr.w	Sonic_HitFloor
00015198 4A41                       		tst.w	d1
0001519A 6A00                       		bpl.s	locret_1379E
0001519C D368 000C                  		add.w	d1,$C(a0)
000151A0 1143 0026                  		move.b	d3,$26(a0)
000151A4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000151A8 117C 0000 001C             		move.b	#0,$1C(a0)
000151AE 317C 0000 0012             		move.w	#0,$12(a0)
000151B4 3168 0010 0020             		move.w	$10(a0),$20(a0)
000151BA                            
000151BA                            locret_1379E:
000151BA 4E75                       		rts	
000151BC                            ; End of function Sonic_Floor
000151BC                            
000151BC                            ; ---------------------------------------------------------------------------
000151BC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000151BC                            ; ---------------------------------------------------------------------------
000151BC                            
000151BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151BC                            
000151BC                            
000151BC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000151BC 0828 0004 0022             		btst	#4,$22(a0)
000151C2 6700                       		beq.s	loc_137AE
000151C4 4E71                       		nop	
000151C6 4E71                       		nop	
000151C8 4E71                       		nop	
000151CA                            
000151CA                            loc_137AE:
000151CA 08A8 0005 0022             		bclr	#5,$22(a0)
000151D0 08A8 0001 0022             		bclr	#1,$22(a0)
000151D6 08A8 0004 0022             		bclr	#4,$22(a0)
000151DC 0828 0002 0022             		btst	#2,$22(a0)
000151E2 6700                       		beq.s	loc_137E4
000151E4 08A8 0002 0022             		bclr	#2,$22(a0)
000151EA 117C 0013 0016             		move.b	#$13,$16(a0)
000151F0 117C 0009 0017             		move.b	#9,$17(a0)
000151F6 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000151FC 5B68 000C                  		subq.w	#5,$C(a0)
00015200                            
00015200                            loc_137E4:
00015200 117C 0000 003C             		move.b	#0,$3C(a0)
00015206 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001520C 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
00015210                            
00015210                            	@NoReset:
00015210 4E75                       		rts	
00015212                            ; End of function Sonic_ResetOnFloor
00015212                            
00015212                            ; ===========================================================================
00015212                            ; ---------------------------------------------------------------------------
00015212                            ; Sonic	when he	gets hurt
00015212                            ; ---------------------------------------------------------------------------
00015212                            
00015212                            Obj01_Hurt:				; XREF: Obj01_Index
00015212 4EBA 96E2                  		jsr	SpeedToPos
00015216 0668 0030 0012             		addi.w	#$30,$12(a0)
0001521C 0828 0006 0022             		btst	#6,$22(a0)
00015222 6700                       		beq.s	loc_1380C
00015224 0468 0020 0012             		subi.w	#$20,$12(a0)
0001522A                            
0001522A                            loc_1380C:
0001522A 6100 0000                  		bsr.w	Sonic_HurtStop
0001522E 6100 FACE                  		bsr.w	Sonic_LevelBound
00015232 6100 F4BE                  		bsr.w	Sonic_RecordPos
00015236 6100 0000                  		bsr.w	Sonic_Animate
0001523A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001523E 4EFA 96D0                  		jmp	DisplaySprite
00015242                            
00015242                            ; ---------------------------------------------------------------------------
00015242                            ; Subroutine to	stop Sonic falling after he's been hurt
00015242                            ; ---------------------------------------------------------------------------
00015242                            
00015242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015242                            
00015242                            
00015242                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015242 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015246 0640 00E0                  		addi.w	#$E0,d0
0001524A B068 000C                  		cmp.w	$C(a0),d0
0001524E 6500 FB2A                  		bcs.w	JMPKillSonic
00015252 6100 FD6C                  		bsr.w	Sonic_Floor
00015256 0828 0001 0022             		btst	#1,$22(a0)
0001525C 6600                       		bne.s	locret_13860
0001525E 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015264 7000                       		moveq	#0,d0
00015266 3140 0012                  		move.w	d0,$12(a0)
0001526A 3140 0010                  		move.w	d0,$10(a0)
0001526E 3140 0020                  		move.w	d0,$20(a0)
00015272 117C 0000 001C             		move.b	#0,$1C(a0)
00015278 5528 0024                  		subq.b	#2,$24(a0)
0001527C 317C 0078 0030             		move.w	#$78,$30(a0)
00015282                            
00015282                            locret_13860:
00015282 4E75                       		rts	
00015284                            ; End of function Sonic_HurtStop
00015284                            
00015284                            ; ===========================================================================
00015284                            ; ---------------------------------------------------------------------------
00015284                            ; Sonic	when he	dies
00015284                            ; ---------------------------------------------------------------------------
00015284                            
00015284                            Obj01_Death:				; XREF: Obj01_Index
00015284 6100 0000                  		bsr.w	GameOver
00015288 4EBA 964C                  		jsr	ObjectFall
0001528C 6100 F464                  		bsr.w	Sonic_RecordPos
00015290 6100 0000                  		bsr.w	Sonic_Animate
00015294 6100 0000                  		bsr.w	LoadSonicDynPLC
00015298 4EFA 9676                  		jmp	DisplaySprite
0001529C                            
0001529C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001529C                            
0001529C                            
0001529C                            GameOver:				; XREF: Obj01_Death
0001529C 3038 F72E                  		move.w	($FFFFF72E).w,d0
000152A0 0640 0100                  		addi.w	#$100,d0
000152A4 B068 000C                  		cmp.w	$C(a0),d0
000152A8 6400 0000                  		bcc.w	locret_13900
000152AC 317C FFC8 0012             		move.w	#-$38,$12(a0)
000152B2 5428 0024                  		addq.b	#2,$24(a0)
000152B6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000152BA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000152BE 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000152C2 6600                       		bne.s	loc_138D4
000152C4 317C 0000 003A             		move.w	#0,$3A(a0)
000152CA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000152D0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000152D6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000152DC 4238 FE1A                  		clr.b	($FFFFFE1A).w
000152E0                            
000152E0                            loc_138C2:
000152E0 303C 008F                  		move.w	#$8F,d0
000152E4 4EB9 0000 11F0             		jsr	(PlaySound).l	; play game over music
000152EA 7003                       		moveq	#3,d0
000152EC 4EF9 0000 1434             		jmp	(LoadPLC).l	; load game over patterns
000152F2                            ; ===========================================================================
000152F2                            
000152F2                            loc_138D4:
000152F2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000152F8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000152FC 6700                       		beq.s	locret_13900	; if not, branch
000152FE 317C 0000 003A             		move.w	#0,$3A(a0)
00015304 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001530A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00015310 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00015316 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001531C 60C2                       		bra.s	loc_138C2
0001531E                            ; ===========================================================================
0001531E                            
0001531E                            locret_13900:
0001531E 4E75                       		rts	
00015320                            ; End of function GameOver
00015320                            
00015320                            ; ===========================================================================
00015320                            ; ---------------------------------------------------------------------------
00015320                            ; Sonic	when the level is restarted
00015320                            ; ---------------------------------------------------------------------------
00015320                            
00015320                            Obj01_ResetLevel:			; XREF: Obj01_Index
00015320 4A68 003A                  		tst.w	$3A(a0)
00015324 6700                       		beq.s	locret_13914
00015326 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001532A 6600                       		bne.s	locret_13914
0001532C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00015332 11FC 0000 F5CE             		move.b	#face_neutrall,(SonimeSST+sonime_face).w
00015338                            
00015338                            locret_13914:
00015338 4E75                       		rts	
0001533A                            
0001533A                            ; ---------------------------------------------------------------------------
0001533A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001533A                            ; ---------------------------------------------------------------------------
0001533A                            
0001533A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001533A                            
0001533A                            
0001533A                            Sonic_Loops:				; XREF: Obj01_Control
0001533A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00015340 6700                       		beq.s	loc_13926	; if yes, branch
00015342 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00015346 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001534A                            
0001534A                            loc_13926:
0001534A 3028 000C                  		move.w	$C(a0),d0
0001534E E248                       		lsr.w	#1,d0
00015350 0240 0380                  		andi.w	#$380,d0
00015354 1228 0008                  		move.b	8(a0),d1
00015358 0241 007F                  		andi.w	#$7F,d1
0001535C D041                       		add.w	d1,d0
0001535E 43F8 A400                  		lea	($FFFFA400).w,a1
00015362 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00015366 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001536A 6700 FA48                  		beq.w	Obj01_ChkRoll
0001536E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00015372 6700 FA40                  		beq.w	Obj01_ChkRoll
00015376 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001537A 6700                       		beq.s	loc_13976
0001537C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00015380 6700                       		beq.s	loc_13966
00015382 08A8 0006 0001             		bclr	#6,1(a0)
00015388 4E75                       		rts	
0001538A                            ; ===========================================================================
0001538A                            
0001538A                            loc_13966:
0001538A 0828 0001 0022             		btst	#1,$22(a0)
00015390 6700                       		beq.s	loc_13976
00015392 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015398 4E75                       		rts	
0001539A                            ; ===========================================================================
0001539A                            
0001539A                            loc_13976:
0001539A 3428 0008                  		move.w	8(a0),d2
0001539E 0C02 002C                  		cmpi.b	#$2C,d2
000153A2 6400                       		bcc.s	loc_13988
000153A4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153AA 4E75                       		rts	
000153AC                            ; ===========================================================================
000153AC                            
000153AC                            loc_13988:
000153AC 0C02 00E0                  		cmpi.b	#-$20,d2
000153B0 6500                       		bcs.s	loc_13996
000153B2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153B8 4E75                       		rts	
000153BA                            ; ===========================================================================
000153BA                            
000153BA                            loc_13996:
000153BA 0828 0006 0001             		btst	#6,1(a0)
000153C0 6600                       		bne.s	loc_139B2
000153C2 1228 0026                  		move.b	$26(a0),d1
000153C6 6700                       		beq.s	locret_139C2
000153C8 0C01 0080                  		cmpi.b	#-$80,d1
000153CC 6200                       		bhi.s	locret_139C2
000153CE 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153D4 4E75                       		rts	
000153D6                            ; ===========================================================================
000153D6                            
000153D6                            loc_139B2:
000153D6 1228 0026                  		move.b	$26(a0),d1
000153DA 0C01 0080                  		cmpi.b	#-$80,d1
000153DE 6300                       		bls.s	locret_139C2
000153E0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153E6                            
000153E6                            locret_139C2:
000153E6 4E75                       		rts	
000153E8                            ; End of function Sonic_Loops
000153E8                            
000153E8                            ; ---------------------------------------------------------------------------
000153E8                            ; Sonic when he's drowning
000153E8                            ; ---------------------------------------------------------------------------
000153E8                             
000153E8                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
000153E8                             
000153E8                             
000153E8                            Sonic_Drowned:
000153E8 6100 950C                  		bsr.w   SpeedToPos		; Make Sonic able to move
000153EC 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
000153F2 6100 F2FE                  		bsr.w   Sonic_RecordPos	; Record position
000153F6 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
000153F8 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
000153FC 6000 9512                  		bra.w   DisplaySprite	; And finally, display Sonic
00015400                            
00015400                            ; ---------------------------------------------------------------------------
00015400                            ; Subroutine to	animate	Sonic's sprites
00015400                            ; ---------------------------------------------------------------------------
00015400                            
00015400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015400                            
00015400                            
00015400                            Sonic_Animate:				; XREF: Obj01_Control; et al
00015400 43F9 0000 0000             		lea	(SonicAniData).l,a1
00015406 7000                       		moveq	#0,d0
00015408 1028 001C                  		move.b	$1C(a0),d0
0001540C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00015410 6700                       		beq.s	SAnim_Do	; if not, branch
00015412 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00015416 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001541C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00015422                            
00015422                            SAnim_Do:
00015422 D040                       		add.w	d0,d0
00015424 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00015428 1011                       		move.b	(a1),d0
0001542A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001542C 1228 0022                  		move.b	$22(a0),d1
00015430 0201 0001                  		andi.b	#1,d1
00015434 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001543A 8328 0001                  		or.b	d1,1(a0)
0001543E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015442 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015444 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00015448                            
00015448                            SAnim_Do2:
00015448 7200                       		moveq	#0,d1
0001544A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001544E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015452 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015454                            
00015454                            SAnim_Next:
00015454 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015458 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001545C                            
0001545C                            SAnim_Delay:
0001545C 4E75                       		rts	
0001545E                            ; ===========================================================================
0001545E                            
0001545E                            SAnim_End_FF:
0001545E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00015460 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015462 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00015468 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001546C 60E6                       		bra.s	SAnim_Next
0001546E                            ; ===========================================================================
0001546E                            
0001546E                            SAnim_End_FE:
0001546E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00015470 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015472 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015476 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001547A 9200                       		sub.b	d0,d1
0001547C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00015480 60D2                       		bra.s	SAnim_Next
00015482                            ; ===========================================================================
00015482                            
00015482                            SAnim_End_FD:
00015482 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00015484 6600                       		bne.s	SAnim_End	; if not, branch
00015486 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001548C                            
0001548C                            SAnim_End:
0001548C 4E75                       		rts	
0001548E                            ; ===========================================================================
0001548E                            
0001548E                            SAnim_WalkRun:				; XREF: SAnim_Do
0001548E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015492 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015494 5200                       		addq.b	#1,d0		; is animation walking/running?
00015496 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001549A 7200                       		moveq	#0,d1
0001549C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000154A0 1428 0022                  		move.b	$22(a0),d2
000154A4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000154A8 6600                       		bne.s	loc_13A70	; if yes, branch
000154AA 4600                       		not.b	d0		; reverse angle
000154AC                            
000154AC                            loc_13A70:
000154AC 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000154B0 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000154B2 7203                       		moveq	#3,d1
000154B4                            
000154B4                            loc_13A78:
000154B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000154BA B302                       		eor.b	d1,d2
000154BC 8528 0001                  		or.b	d2,1(a0)
000154C0 0828 0005 0022             		btst	#5,$22(a0)
000154C6 6600 0000                  		bne.w	SAnim_Push
000154CA E808                       		lsr.b	#4,d0		; divide angle by $10
000154CC 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000154D0 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
000154D4 6A00                       		bpl.s	loc_13A9C
000154D6 4442                       		neg.w	d2
000154D8                            
000154D8                            loc_13A9C:
000154D8 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000154DE 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000154E2 6400                       		bcc.s	loc_13AB4	; if yes, branch
000154E4 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000154EA 1200                       		move.b	d0,d1
000154EC E209                       		lsr.b	#1,d1
000154EE D001                       		add.b	d1,d0
000154F0                            
000154F0                            loc_13AB4:
000154F0 D000                       		add.b	d0,d0
000154F2 1600                       		move.b	d0,d3
000154F4 4442                       		neg.w	d2
000154F6 0642 0800                  		addi.w	#$800,d2
000154FA 6A00                       		bpl.s	loc_13AC2
000154FC 7400                       		moveq	#0,d2
000154FE                            
000154FE                            loc_13AC2:
000154FE E04A                       		lsr.w	#8,d2
00015500 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015504 6100 FF42                  		bsr.w	SAnim_Do2
00015508 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001550C 4E75                       		rts	
0001550E                            ; ===========================================================================
0001550E                            
0001550E                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001550E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00015510 6600                       		bne.s	SAnim_Push	; if not, branch
00015512 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015516 6A00                       		bpl.s	loc_13ADE
00015518 4442                       		neg.w	d2
0001551A                            
0001551A                            loc_13ADE:
0001551A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00015520 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00015524 6400                       		bcc.s	loc_13AF0	; if yes, branch
00015526 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001552C                            
0001552C                            loc_13AF0:
0001552C 4442                       		neg.w	d2
0001552E 0642 0400                  		addi.w	#$400,d2
00015532 6A00                       		bpl.s	loc_13AFA
00015534 7400                       		moveq	#0,d2
00015536                            
00015536                            loc_13AFA:
00015536 E04A                       		lsr.w	#8,d2
00015538 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001553C 1228 0022                  		move.b	$22(a0),d1
00015540 0201 0001                  		andi.b	#1,d1
00015544 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001554A 8328 0001                  		or.b	d1,1(a0)
0001554E 6000 FEF8                  		bra.w	SAnim_Do2
00015552                            ; ===========================================================================
00015552                            
00015552                            SAnim_Push:				; XREF: SAnim_RollJump
00015552 3428 0020                  		move.w	$20(a0),d2	; get Sonic's speed
00015556 6B00                       		bmi.s	loc_13B1E
00015558 4442                       		neg.w	d2
0001555A                            
0001555A                            loc_13B1E:
0001555A 0642 0800                  		addi.w	#$800,d2
0001555E 6A00                       		bpl.s	loc_13B26
00015560 7400                       		moveq	#0,d2
00015562                            
00015562                            loc_13B26:
00015562 EC4A                       		lsr.w	#6,d2
00015564 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015568 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001556E 1228 0022                  		move.b	$22(a0),d1
00015572 0201 0001                  		andi.b	#1,d1
00015576 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001557C 8328 0001                  		or.b	d1,1(a0)
00015580 6000 FEC6                  		bra.w	SAnim_Do2
00015584                            ; End of function Sonic_Animate
00015584                            
00015584                            ; ===========================================================================
00015584                            SonicAniData:
00015584                            	include "_anim\Sonic.asm"
00015584                            ; ---------------------------------------------------------------------------
00015584                            ; Animation script - Sonic
00015584                            ; ---------------------------------------------------------------------------
00015584 0000                       		dc.w SonAni_Walk-SonicAniData
00015586 0000                       		dc.w SonAni_Run-SonicAniData
00015588 0000                       		dc.w SonAni_Roll-SonicAniData
0001558A 0000                       		dc.w SonAni_Roll2-SonicAniData
0001558C 0000                       		dc.w SonAni_Push-SonicAniData
0001558E 0000                       		dc.w SonAni_Wait-SonicAniData
00015590 0000                       		dc.w SonAni_Balance-SonicAniData
00015592 0000                       		dc.w SonAni_LookUp-SonicAniData
00015594 0000                       		dc.w SonAni_Duck-SonicAniData
00015596 0000                       		dc.w SonAni_Warp1-SonicAniData
00015598 0000                       		dc.w SonAni_Warp2-SonicAniData
0001559A 0000                       		dc.w SonAni_Warp3-SonicAniData
0001559C 0000                       		dc.w SonAni_Warp4-SonicAniData
0001559E 0000                       		dc.w SonAni_Stop-SonicAniData
000155A0 0000                       		dc.w SonAni_Float1-SonicAniData
000155A2 0000                       		dc.w SonAni_Float2-SonicAniData
000155A4 0000                       		dc.w SonAni_Spring-SonicAniData
000155A6 0000                       		dc.w SonAni_LZHang-SonicAniData
000155A8 0000                       		dc.w SonAni_Leap1-SonicAniData
000155AA 0000                       		dc.w SonAni_Leap2-SonicAniData
000155AC 0000                       		dc.w SonAni_Surf-SonicAniData
000155AE 0000                       		dc.w SonAni_Bubble-SonicAniData
000155B0 0000                       		dc.w SonAni_Death1-SonicAniData
000155B2 0000                       		dc.w SonAni_Drown-SonicAniData
000155B4 0000                       		dc.w SonAni_Death2-SonicAniData
000155B6 0000                       		dc.w SonAni_Shrink-SonicAniData
000155B8 0000                       		dc.w SonAni_Hurt-SonicAniData
000155BA 0000                       		dc.w SonAni_LZSlide-SonicAniData
000155BC 0000                       		dc.w SonAni_Blank-SonicAniData
000155BE 0000                       		dc.w SonAni_Float3-SonicAniData
000155C0 0000                       		dc.w SonAni_Float4-SonicAniData
000155C2 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
000155CA FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000155D2 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000155DA FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000155E2 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000155EA 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00015600 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00015604 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00015608 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001560C 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00015610 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00015614 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00015618 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001561C 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00015620 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00015624 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001562C 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00015630 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015634 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001563A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00015640 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015644 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001564C 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00015650 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00015654 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00015658 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00015662 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00015666 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001566A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001566E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015676 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001567A                            		even
0001567A                            		even
0001567A                            
0001567A                            ; ---------------------------------------------------------------------------
0001567A                            ; Sonic	pattern	loading	subroutine
0001567A                            ; ---------------------------------------------------------------------------
0001567A                            
0001567A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001567A                            
0001567A                            
0001567A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001567A 7000                       		moveq	#0,d0
0001567C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015680 B038 F766                  		cmp.b	($FFFFF766).w,d0
00015684 6700 0000                  		beq.w	locret_13C96
00015688 11C0 F766                  		move.b	d0,($FFFFF766).w
0001568C 45F9 0000 0000             		lea	(SonicDynPLC).l,a2	
00015692 D040                       		add.w	d0,d0
00015694 D4F2 0000                  		adda.w	(a2,d0.w),a2
00015698 7A00                       		moveq	#0,d5
0001569A 1A1A                       		move.b	(a2)+,d5
0001569C 5345                       		subq.w	#1,d5
0001569E 6B00                       		bmi.s	locret_13C96
000156A0 383C F000                  		move.w	#$F000,d4
000156A4 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000156AA                            
000156AA                            SPLC_ReadEntry:
000156AA 7200                       		moveq	#0,d1
000156AC 121A                       		move.b	(a2)+,d1
000156AE E149                       		lsl.w	#8,d1
000156B0 121A                       		move.b	(a2)+,d1
000156B2 3601                       		move.w	d1,d3
000156B4 E04B                       		lsr.w	#8,d3
000156B6 0243 00F0                  		andi.w	#$F0,d3
000156BA 0643 0010                  		addi.w	#$10,d3
000156BE 0241 0FFF                  		andi.w	#$FFF,d1
000156C2 EB89                       		lsl.l	#5,d1
000156C4 D286                       		add.l	d6,d1
000156C6 3404                       		move.w	d4,d2
000156C8 D843                       		add.w	d3,d4
000156CA D843                       		add.w	d3,d4
000156CC 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l
000156D2 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000156D6                             
000156D6                            locret_13C96:
000156D6 4E75                       		rts	
000156D8                            ; End of function LoadSonicDynPLC
000156D8                            
000156D8                            ; ===========================================================================
000156D8                            ; ---------------------------------------------------------------------------
000156D8                            ; Object 02 - Sonime
000156D8                            ; ---------------------------------------------------------------------------
000156D8                            
000156D8                            Obj02:
000156D8 7000                       		moveq	#0,d0
000156DA 41F8 F5C0                  		lea	(SonimeSST).w,a0
000156DE 1028 0004                  		move.b	sonime_routine(a0),d0
000156E2 323B 0000                  		move.w	Obj02_Index(pc,d0.w),d1
000156E6 4EFB 1000                  		jmp	Obj02_Index(pc,d1.w)
000156EA                            ; ===========================================================================
000156EA 0000                       Obj02_Index:	dc.w Obj02_Init-Obj02_Index
000156EC 0000                       		dc.w Obj02_MoveIn-Obj02_Index
000156EE 0000                       		dc.w Obj02_Animate-Obj02_Index
000156F0                            ; ===========================================================================
000156F0                            
000156F0                            Obj02_Init:				; XREF: Obj0A_Index
000156F0 5428 0004                  		addq.b	#2,sonime_routine(a0)
000156F4 223C 0000 0000             		move.l #Art_Sonime_Torso,d1
000156FA 343C F400                  		move.w #(torsoart*$20),d2
000156FE 363C 00C0                  		move.w #$C0,d3
00015702 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015708 223C 0000 0000             		move.l #Art_Sonime_Head,d1
0001570E 343C F580                  		move.w #(headart*$20),d2
00015712 363C 0140                  		move.w #$140,d3
00015716 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001571C 223C 0000 0000             		move.l #Art_Sonime_Hair,d1
00015722 343C F300                  		move.w #(hairart*$20),d2
00015726 363C 0080                  		move.w #$80,d3
0001572A 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015730 117C 0030 0017             		move.b	#$30,sonime_movein(a0)
00015736 31FC 0200 F5E0             		move.w	#$200,(SonimeSST+sonime_pausetimer).w
0001573C                            
0001573C                            Obj02_MoveIn:
0001573C 5528 0017                  		subq.b	#2,sonime_movein(a0)
00015740 1028 0017                  		move.b	sonime_movein(a0),d0
00015744 1140 0002                  		move.b	d0,sonime_headx(a0)
00015748 1140 0016                  		move.b	d0,sonime_torsox(a0)
0001574C 1140 0009                  		move.b	d0,sonime_hairx(a0)
00015750 4A00                       		tst.b	d0
00015752 6600 0000                  		bne.w	Obj02_Display
00015756 5428 0004                  		addq.b	#2,sonime_routine(a0)
0001575A                            
0001575A                            Obj02_Animate:
0001575A 5350                       		subi.w	#1,sonime_headtimer(a0)
0001575C 6A00 0000                  		bpl.w	Obj02_Face
00015760 4EB8 29A6                  		jsr	RandomNumber
00015764 0240 003F                  		andi.w	#$3F,d0
00015768 0640 0080                  		addi.w	#$80,d0
0001576C 3080                       		move.w	d0,sonime_headtimer(a0)
0001576E 4EB8 29A6                  		jsr	RandomNumber
00015772 0240 0006                  		andi.w	#6,d0
00015776 303B 0000                  		move.w	Obj02_HeadIndex(pc,d0.w),d0
0001577A 4EFB 0000                  		jmp	Obj02_HeadIndex(pc,d0.w)
0001577E                            
0001577E                            ; ===========================================================================
0001577E 0000                       Obj02_HeadIndex:	dc.w Obj02_Up-Obj02_HeadIndex
00015780 0000                       		dc.w Obj02_Down-Obj02_HeadIndex
00015782 0000                       		dc.w Obj02_Left-Obj02_HeadIndex
00015784 0000                       		dc.w Obj02_Right-Obj02_HeadIndex
00015786                            ; ===========================================================================
00015786                            
00015786                            Obj02_Up:
00015786 4A28 0003                  		tst.b	sonime_heady(a0)
0001578A 6D00                       		blt.s	Obj02_Down
0001578C 5328 0003                  		subi.b	#1,sonime_heady(a0)
00015790 6000                       		bra.s	Obj02_Face
00015792                            
00015792                            Obj02_Down:
00015792 4A28 0003                  		tst.b	sonime_heady(a0)
00015796 6EEE                       		bgt.s	Obj02_Up
00015798 5228 0003                  		addi.b	#1,sonime_heady(a0)
0001579C 6000                       		bra.s	Obj02_Face
0001579E                            
0001579E                            Obj02_Left:
0001579E 4A28 0002                  		tst.b	sonime_headx(a0)
000157A2 6D00                       		blt.s	Obj02_Right
000157A4 5328 0002                  		subi.b	#1,sonime_headx(a0)
000157A8 6000                       		bra.s	Obj02_Face
000157AA                            
000157AA                            Obj02_Right:
000157AA 4A28 0002                  		tst.b	sonime_headx(a0)
000157AE 6EEE                       		bgt.s	Obj02_Left
000157B0 5228 0002                  		addi.b	#1,sonime_headx(a0)
000157B4                            
000157B4                            Obj02_Face:
000157B4 4A38 FE12                  		tst.b	($FFFFFE12).w
000157B8 6700 0000                  		beq.w	@NoWait
000157BC 0C28 0001 000E             		cmpi.b	#face_blink,sonime_face(a0)
000157C2 6700                       		beq.s	@UnBlink
000157C4 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000157C8 6A00 0000                  		bpl.w	@NoWait
000157CC 317C 0003 0010             		move.w	#3,sonime_facetimer(a0)
000157D2 117C 0001 000E             		move.b	#face_blink,sonime_face(a0)
000157D8 6000 0000                  		bra.w	@NoWait
000157DC                            
000157DC                            	@UnBlink:
000157DC 5368 0010                  		subi.w	#1,sonime_facetimer(a0)
000157E0 6A00 0000                  		bpl.w	@NoWait
000157E4 117C 0004 000E             		move.b	#face_neutralr,sonime_face(a0)
000157EA 4EB8 29A6                  		jsr	RandomNumber
000157EE 0240 003F                  		andi.w	#$3F,d0
000157F2 0640 00B0                  		addi.w	#$B0,d0
000157F6 3140 0010                  		move.w	d0,sonime_facetimer(a0)
000157FA 4EB8 29A6                  		jsr	RandomNumber
000157FE 0200 000F                  		andi.b	#$F,d0
00015802 4A00                       		tst.b	d0
00015804 6700                       		beq.s	@NoBlink
00015806 117C 0003 000E             		move.b	#face_neutralm,sonime_face(a0)
0001580C 0C00 0001                  		cmpi.b	#1,d0
00015810 6700                       		beq.s	@NoBlink
00015812 117C 0002 000E             		move.b	#face_neutrallm,sonime_face(a0)
00015818 0C00 0002                  		cmpi.b	#2,d0
0001581C 6700                       		beq.s	@NoBlink
0001581E 117C 0000 000E             		move.b	#face_neutrall,sonime_face(a0)
00015824                            
00015824                            	@NoBlink:
00015824 0C38 0005 D01C             		cmpi.b	#5,($FFFFD01C).w
0001582A 6600                       		bne.s	@NoWait
0001582C 0C38 000F D01B             		cmpi.b	#$F,($FFFFD01B).w
00015832 6500                       		bcs.s	@NoWait
00015834 117C 000B 000E             		move.b	#face_impatient,sonime_face(a0)
0001583A 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
00015890                            
00015890                            	@NoWait:
00015890 0C78 0800 D010             		cmpi.w	#$800,($FFFFD010).w
00015896 6D00                       		blt.s	@TooSlow
00015898 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
0001589E 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpeed
000158F4                            
000158F4                            	@TooSlow:
000158F4 0C78 F800 D010             		cmpi.w	#-$800,($FFFFD010).w
000158FA 6E00                       		bgt.s	@TooSlow2
000158FC 117C 0007 000E             		move.b	#face_happy,sonime_face(a0)
00015902                            
00015902                            	@TooSlow2:
00015902 7800                       		moveq	#0,d4
00015904 1828 000E                  		move.b	sonime_face(a0),d4
00015908 B828 000F                  		cmp.b	sonime_faceold(a0),d4
0001590C 6700                       		beq.s	Obj02_Ear
0001590E 1144 000F                  		move.b	d4,sonime_faceold(a0)
00015912 ED4C                       		lsl.w	#6,d4
00015914 3A04                       		move.w	d4,d5
00015916 DA45                       		add.w	d5,d5
00015918 D845                       		add.w	d5,d4
0001591A 223C 0000 0000             		move.l #Art_Sonime_Faces,d1
00015920 D244                       		add.w	d4,d1
00015922 343C F5C0                  		move.w #(headart*$20+$40),d2
00015926 363C 0020                  		move.w #$20,d3
0001592A 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015930 223C 0000 0000             		move.l #(Art_Sonime_Faces+$40),d1
00015936 D244                       		add.w	d4,d1
00015938 343C F640                  		move.w #(headart*$20+$C0),d2
0001593C 363C 0020                  		move.w #$20,d3
00015940 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
00015946 223C 0000 0000             		move.l #(Art_Sonime_Faces+$80),d1
0001594C D244                       		add.w	d4,d1
0001594E 343C F6C0                  		move.w #(headart*$20+$140),d2
00015952 363C 0020                  		move.w #$20,d3
00015956 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001595C                            
0001595C                            Obj02_Ear:
0001595C 4A28 0012                  		tst.b	sonime_ear(a0)
00015960 6600                       		bne.s	@UnTwitch
00015962 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015966 6A00                       		bpl.s	@NoTwitch
00015968 317C 000F 0014             		move.w	#$F,sonime_eartimer(a0)
0001596E 4EB8 29A6                  		jsr	RandomNumber
00015972 0200 0001                  		andi.b	#1,d0
00015976 5200                       		addq.b	#1,d0
00015978 1140 0012                  		move.b	d0,sonime_ear(a0)
0001597C 6000                       		bra.s	@NoTwitch
0001597E                            
0001597E                            	@UnTwitch:
0001597E 5368 0014                  		subi.w	#1,sonime_eartimer(a0)
00015982 6A00                       		bpl.s	@NoTwitch
00015984 117C 0000 0012             		move.b	#0,sonime_ear(a0)
0001598A 4EB8 29A6                  		jsr	RandomNumber
0001598E 0240 007F                  		andi.w	#$7F,d0
00015992 0640 0100                  		addi.w	#$100,d0
00015996 3140 0014                  		move.w	d0,sonime_eartimer(a0)
0001599A                            
0001599A                            	@NoTwitch:
0001599A 7800                       		moveq	#0,d4
0001599C 1828 0012                  		move.b	sonime_ear(a0),d4
000159A0 B828 0013                  		cmp.b	sonime_earold(a0),d4
000159A4 6700                       		beq.s	Obj02_Display
000159A6 1144 0013                  		move.b	d4,sonime_earold(a0)
000159AA EB0C                       		lsl.b	#5,d4
000159AC 0204 0020                  		andi.b	#$20,d4
000159B0 223C 0000 0000             		move.l #Art_Sonime_LeftEar,d1
000159B6 D284                       		add.l	d4,d1
000159B8 343C F580                  		move.w #(headart*$20),d2
000159BC 363C 0010                  		move.w #$10,d3
000159C0 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000159C6 7800                       		moveq	#0,d4
000159C8 1828 0012                  		move.b	sonime_ear(a0),d4
000159CC EB0C                       		lsl.b	#5,d4
000159CE 0204 0040                  		andi.b	#$40,d4
000159D2 223C 0000 0000             		move.l #Art_Sonime_RightEar,d1
000159D8 D284                       		add.l	d4,d1
000159DA 343C F680                  		move.w #(headart*$20+$100),d2
000159DE 363C 0020                  		move.w #$20,d3
000159E2 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
000159E8                            
000159E8                            Obj02_Display:
000159E8 7200                       		moveq	#0,d1
000159EA 7400                       		moveq	#0,d2
000159EC 7600                       		moveq	#0,d3
000159EE 7800                       		moveq	#0,d4
000159F0 7A00                       		moveq	#0,d5
000159F2 1628 0002                  		move.b	sonime_headx(a0),d3	; set X pos
000159F6 1428 0003                  		move.b	sonime_heady(a0),d2	; set Y pos
000159FA 4883                       		ext.w	d3
000159FC 4882                       		ext.w	d2
000159FE 0643 01A0                  		addi.w	#$1A0,d3
00015A02 0642 0140                  		addi.w	#$140,d2
00015A06 43F9 0000 0000             		lea	(Map_sonime_head).l,a1
00015A0C 367C 87AC                  		movea.w	#($8000+headart),a3	; set art tile and flags
00015A10 D241                       		add.w	d1,d1
00015A12 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A16 1219                       		move.b	(a1)+,d1
00015A18 5301                       		subq.b	#1,d1
00015A1A 6B00                       		bmi.s	@nextspr
00015A1C 6100 91A2                  		bsr.w	DrawSprite_Loop
00015A20                            
00015A20                            	@nextspr:
00015A20 7200                       		moveq	#0,d1
00015A22 7600                       		moveq	#0,d3
00015A24 1628 0016                  		move.b	sonime_torsox(a0),d3
00015A28 0643 01A0                  		add.w	#$1A0,d3	; set X pos
00015A2C 343C 0154                  		move.w	#$154,d2	; set Y pos
00015A30 43F9 0000 0000             		lea	(Map_sonime_torso).l,a1
00015A36 367C 87A0                  		movea.w	#($8000+torsoart),a3	; set art tile and flags
00015A3A D241                       		add.w	d1,d1
00015A3C D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A40 1219                       		move.b	(a1)+,d1
00015A42 5301                       		subq.b	#1,d1
00015A44 6B00                       		bmi.s	@nextspr2
00015A46 6100 9178                  		bsr.w	DrawSprite_Loop
00015A4A                            
00015A4A                            	@nextspr2:
00015A4A 7200                       		moveq	#0,d1
00015A4C 7400                       		moveq	#0,d2
00015A4E 7600                       		moveq	#0,d3
00015A50 1628 0009                  		move.b	sonime_hairx(a0),d3	; set X pos
00015A54 1428 000D                  		move.b	sonime_hairy(a0),d2	; set Y pos
00015A58 4883                       		ext.w	d3
00015A5A 4882                       		ext.w	d2
00015A5C 0643 01A0                  		addi.w	#$1A0,d3
00015A60 0642 0153                  		addi.w	#$153,d2
00015A64 1168 0007 0009             		move.b	sonime_headx3(a0),sonime_hairx(a0)
00015A6A 1168 000B 000D             		move.b	sonime_heady3(a0),sonime_hairy(a0)
00015A70 1168 0006 0007             		move.b	sonime_headx2(a0),sonime_headx3(a0)
00015A76 1168 000A 000B             		move.b	sonime_heady2(a0),sonime_heady3(a0)
00015A7C 1168 0002 0006             		move.b	sonime_headx(a0),sonime_headx2(a0)
00015A82 1168 0003 000A             		move.b	sonime_heady(a0),sonime_heady2(a0)
00015A88 43F9 0000 0000             		lea	(Map_sonime_hair).l,a1
00015A8E 367C 8798                  		movea.w	#($8000+hairart),a3	; set art tile and flags
00015A92 D241                       		add.w	d1,d1
00015A94 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015A98 1219                       		move.b	(a1)+,d1
00015A9A 5301                       		subq.b	#1,d1
00015A9C 6B00                       		bmi.s	Obj02_Done
00015A9E 6100 9120                  		bsr.w	DrawSprite_Loop
00015AA2                            
00015AA2                            Obj02_Done:		
00015AA2 4E75                       		rts	
00015AA4                            
00015AA4                            ; ---------------------------------------------------------------------------
00015AA4                            ; Sprite mappings - sonime
00015AA4                            ; ---------------------------------------------------------------------------
00015AA4                            Map_sonime_torso:
00015AA4                            	include "_maps\sonime_torso.asm"
00015AA4                            ; ================================================================================
00015AA4                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:06:55 GMT-0500 (Eastern Standard Time)
00015AA4                            ; ================================================================================
00015AA4                            
00015AA4                            DATAUI6DX8OCWY:
00015AA4 0000                       	dc.w DATAUI6DX8OCWY_0-DATAUI6DX8OCWY
00015AA6 01                         DATAUI6DX8OCWY_0: dc.b $1
00015AA7 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
00015AAC                            	even
00015AAC                            	even
00015AAC                            
00015AAC                            Map_sonime_head:
00015AAC                            	include "_maps\sonime_head.asm"
00015AAC                            ; ================================================================================
00015AAC                            ; Sprite Mappings - generated by Flex 2 Fri Dec 18 2020 22:05:21 GMT-0500 (Eastern Standard Time)
00015AAC                            ; ================================================================================
00015AAC                            
00015AAC                            DATAYDZD849MEMA:
00015AAC 0000                       	dc.w DATAYDZD849MEMA_0-DATAYDZD849MEMA
00015AAE 03                         DATAYDZD849MEMA_0: dc.b $3
00015AAF E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00015AB4 0808 0010 F0               	dc.b $8, $8, $0, $10, $F0
00015AB9 1000 0013 00               	dc.b $10, $0, $0, $13, $0
00015ABE                            	even
00015ABE                            	even
00015ABE                            
00015ABE                            Map_sonime_hair:
00015ABE                            	include "_maps\sonime_hair.asm"
00015ABE                            ; ================================================================================
00015ABE                            ; Sprite Mappings - generated by Flex 2 Sun Dec 20 2020 17:48:20 GMT-0500 (Eastern Standard Time)
00015ABE                            ; ================================================================================
00015ABE                            
00015ABE                            DATAQZ9CZ11E8T:
00015ABE 0000                       	dc.w DATAQZ9CZ11E8T_0-DATAQZ9CZ11E8T
00015AC0 03                         DATAQZ9CZ11E8T_0: dc.b $3
00015AC1 F40C 0000 F0               	dc.b $F4, $C, $0, $0, $F0
00015AC6 FC01 0004 F0               	dc.b $FC, $1, $0, $4, $F0
00015ACB FC01 0006 08               	dc.b $FC, $1, $0, $6, $8
00015AD0                            	even
00015AD0                            	even
00015AD0                            
00015AD0                            ; ===========================================================================
00015AD0                            ; ---------------------------------------------------------------------------
00015AD0                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015AD0                            ; ---------------------------------------------------------------------------
00015AD0                            
00015AD0                            Obj0A:					; XREF: Obj_Index
00015AD0 7000                       		moveq	#0,d0
00015AD2 1028 0024                  		move.b	$24(a0),d0
00015AD6 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015ADA 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015ADE                            ; ===========================================================================
00015ADE 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015AE2 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015AE6 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015AEA 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015AEE 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015AF0                            ; ===========================================================================
00015AF0                            
00015AF0                            Obj0A_Main:				; XREF: Obj0A_Index
00015AF0 5428 0024                  		addq.b	#2,$24(a0)
00015AF4 217C 0001 4360 0004        		move.l	#Map_obj64,4(a0)
00015AFC 317C 8348 0002             		move.w	#$8348,2(a0)
00015B02 117C 0084 0001             		move.b	#$84,1(a0)
00015B08 117C 0010 0019             		move.b	#$10,$19(a0)
00015B0E 117C 0001 0018             		move.b	#1,$18(a0)
00015B14 1028 0028                  		move.b	$28(a0),d0
00015B18 6A00                       		bpl.s	loc_13D00
00015B1A 5028 0024                  		addq.b	#8,$24(a0)
00015B1E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015B26 317C 0440 0002             		move.w	#$440,2(a0)
00015B2C 0240 007F                  		andi.w	#$7F,d0
00015B30 1140 0033                  		move.b	d0,$33(a0)
00015B34 6000 0000                  		bra.w	Obj0A_Countdown
00015B38                            ; ===========================================================================
00015B38                            
00015B38                            loc_13D00:
00015B38 1140 001C                  		move.b	d0,$1C(a0)
00015B3C 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B42 317C FF78 0012             		move.w	#-$88,$12(a0)
00015B48                            
00015B48                            Obj0A_Animate:				; XREF: Obj0A_Index
00015B48 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015B4E 4EB9 0000 B970             		jsr	AnimateSprite
00015B54                            
00015B54                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00015B54 3038 F646                  		move.w	($FFFFF646).w,d0
00015B58 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015B5C 6400                       		bcc.s	Obj0A_ChkDel	; if not, branch
00015B5E 3038 F60E                  		move.w	(v_pocketbottom).w,d0
00015B62 B068 000C                  		cmp.w	$C(a0),d0
00015B66 6500                       		bcs.s	Obj0A_Wobble
00015B68 3028 0008                  		move.w	8(a0),d0
00015B6C 9078 F610                  		sub.w	(v_pocketx).w,d0
00015B70 0640 0060                  		addi.w	#$60,d0
00015B74 6B00                       		bmi.s	Obj0A_Wobble
00015B76 0C40 00C0                  		cmpi.w	#$C0,d0
00015B7A 6400                       		bcc.s	Obj0A_Wobble
00015B7C                            
00015B7C                            Obj0A_ChkDel:
00015B7C 117C 0006 0024             		move.b	#6,$24(a0)
00015B82 5E28 001C                  		addq.b	#7,$1C(a0)
00015B86 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015B8C 6700                       		beq.s	Obj0A_Display
00015B8E 6000                       		bra.s	Obj0A_Display
00015B90                            ; ===========================================================================
00015B90                            
00015B90                            Obj0A_Wobble:
00015B90 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015B94 6700                       		beq.s	loc_13D44
00015B96 5868 0030                  		addq.w	#4,$30(a0)
00015B9A                            
00015B9A                            loc_13D44:
00015B9A 1028 0026                  		move.b	$26(a0),d0
00015B9E 5228 0026                  		addq.b	#1,$26(a0)
00015BA2 0240 007F                  		andi.w	#$7F,d0
00015BA6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015BAC 1031 0000                  		move.b	(a1,d0.w),d0
00015BB0 4880                       		ext.w	d0
00015BB2 D068 0030                  		add.w	$30(a0),d0
00015BB6 3140 0008                  		move.w	d0,8(a0)
00015BBA 6100                       		bsr.s	Obj0A_ShowNumber
00015BBC 4EBA 8D38                  		jsr	SpeedToPos
00015BC0 4A28 0001                  		tst.b	1(a0)
00015BC4 6A00                       		bpl.s	Obj0A_Delete
00015BC6 4EFA 8D48                  		jmp	DisplaySprite
00015BCA                            ; ===========================================================================
00015BCA                            
00015BCA                            Obj0A_Delete:
00015BCA 4EFA 8D94                  		jmp	DeleteObject
00015BCE                            ; ===========================================================================
00015BCE                            
00015BCE                            Obj0A_Display:				; XREF: Obj0A_Index
00015BCE 6100                       		bsr.s	Obj0A_ShowNumber
00015BD0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015BD6 4EB9 0000 B970             		jsr	AnimateSprite
00015BDC 4EFA 8D32                  		jmp	DisplaySprite
00015BE0                            ; ===========================================================================
00015BE0                            
00015BE0                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015BE0 4EFA 8D7E                  		jmp	DeleteObject
00015BE4                            ; ===========================================================================
00015BE4                            
00015BE4                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015BE4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015BEA 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015BEC 5368 0038                  		subq.w	#1,$38(a0)
00015BF0 6600                       		bne.s	Obj0A_Display2
00015BF2 117C 000E 0024             		move.b	#$E,$24(a0)
00015BF8 5E28 001C                  		addq.b	#7,$1C(a0)
00015BFC 60D0                       		bra.s	Obj0A_Display
00015BFE                            ; ===========================================================================
00015BFE                            
00015BFE                            Obj0A_Display2:
00015BFE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015C04 4EB9 0000 B970             		jsr	AnimateSprite
00015C0A 4A28 0001                  		tst.b	1(a0)
00015C0E 6A00                       		bpl.s	Obj0A_Delete3
00015C10 4EFA 8CFE                  		jmp	DisplaySprite
00015C14                            ; ===========================================================================
00015C14                            
00015C14                            Obj0A_Delete3:
00015C14 4EFA 8D4A                  		jmp	DeleteObject
00015C18                            ; ===========================================================================
00015C18                            
00015C18                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015C18 4A68 0038                  		tst.w	$38(a0)
00015C1C 6700                       		beq.s	locret_13E1A
00015C1E 5368 0038                  		subq.w	#1,$38(a0)
00015C22 6600                       		bne.s	locret_13E1A
00015C24 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015C2A 6400                       		bcc.s	locret_13E1A
00015C2C 317C 000F 0038             		move.w	#$F,$38(a0)
00015C32 4268 0012                  		clr.w	$12(a0)
00015C36 117C 0080 0001             		move.b	#$80,1(a0)
00015C3C 3028 0008                  		move.w	8(a0),d0
00015C40 9078 F700                  		sub.w	($FFFFF700).w,d0
00015C44 0640 0080                  		addi.w	#$80,d0
00015C48 3140 0008                  		move.w	d0,8(a0)
00015C4C 3028 000C                  		move.w	$C(a0),d0
00015C50 9078 F704                  		sub.w	($FFFFF704).w,d0
00015C54 0640 0080                  		addi.w	#$80,d0
00015C58 3140 000A                  		move.w	d0,$A(a0)
00015C5C 117C 000C 0024             		move.b	#$C,$24(a0)
00015C62                            
00015C62                            locret_13E1A:
00015C62 4E75                       		rts	
00015C64                            ; ===========================================================================
00015C64                            Obj0A_WobbleData:
00015C64 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015C75 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015C86 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015C97 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015CA7 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015CB4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CC1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015CCE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015CDB FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015CE4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00015CF5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015D06 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015D17 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015D27 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015D34 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D41 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015D4E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015D5B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015D64                            ;===========================================================================
00015D64                            
00015D64                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015D64 4A68 002C                  		tst.w	$2C(a0)
00015D68 6600 0000                  		bne.w	loc_13F86
00015D6C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015D72 6400 0000                  		bcc.w	locret_1408C
00015D76 0838 0006 D022             		btst	#6,($FFFFD022).w
00015D7C 6700 0000                  		beq.w	locret_1408C
00015D80 5368 0038                  		subq.w	#1,$38(a0)
00015D84 6A00 0000                  		bpl.w	loc_13FAC
00015D88 317C 003B 0038             		move.w	#59,$38(a0)
00015D8E 317C 0001 0036             		move.w	#1,$36(a0)
00015D94 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015D9A 0240 0001                  		andi.w	#1,d0
00015D9E 1140 0034                  		move.b	d0,$34(a0)
00015DA2 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015DA6 0C40 0019                  		cmpi.w	#$19,d0
00015DAA 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015DAC 0C40 0014                  		cmpi.w	#$14,d0
00015DB0 6700                       		beq.s	Obj0A_WarnSound
00015DB2 0C40 000F                  		cmpi.w	#$F,d0
00015DB6 6700                       		beq.s	Obj0A_WarnSound
00015DB8 0C40 000C                  		cmpi.w	#$C,d0
00015DBC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015DBE 6600                       		bne.s	loc_13F02
00015DC0 303C 0092                  		move.w	#$92,d0
00015DC4 4EB9 0000 11F0             		jsr	(PlaySound).l	; play countdown music
00015DCA                            
00015DCA                            loc_13F02:
00015DCA 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
00015DD0 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015DD6 5328 0032                  		subq.b	#1,$32(a0)
00015DDA 6A00                       		bpl.s	Obj0A_ReduceAir
00015DDC 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015DE2 08E8 0007 0036             		bset	#7,$36(a0)
00015DE8 6000                       		bra.s	Obj0A_ReduceAir
00015DEA                            ; ===========================================================================
00015DEA                            
00015DEA                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015DEA 303C 00C2                  		move.w	#$C2,d0
00015DEE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00015DF4                            
00015DF4                            Obj0A_ReduceAir:
00015DF4 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015DF8 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015DFC 6100 0000                  		bsr.w	ResumeMusic
00015E00 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015E06 303C 00B2                  		move.w	#$B2,d0
00015E0A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play drowning sound
00015E10 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
00015E16 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
00015E1C 117C 000A 0034             		move.b	#$A,$34(a0)
00015E22 317C 0001 0036             		move.w	#1,$36(a0)
00015E28 317C 0078 002C             		move.w	#$78,$2C(a0)
00015E2E 2F08                       		move.l	a0,-(sp)
00015E30 41F8 D000                  		lea	($FFFFD000).w,a0
00015E34 6100 F386                  		bsr.w	Sonic_ResetOnFloor
00015E38 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015E3E 08E8 0001 0022             		bset	#1,$22(a0)
00015E44 08E8 0007 0002             		bset	#7,2(a0)
00015E4A 317C 0000 0012             		move.w	#0,$12(a0)
00015E50 317C 0000 0010             		move.w	#0,$10(a0)
00015E56 317C 0000 0020             		move.w	#0,$20(a0)
00015E5C 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown		
00015E62 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015E68 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately		
00015E6E 205F                       		movea.l	(sp)+,a0
00015E70 4E75                       		rts	
00015E72                            ; ===========================================================================
00015E72                            
00015E72                            loc_13F86:
00015E72 5368 002C                  		subq.w	#1,$2C(a0)
00015E76 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015E78 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015E7E 4E75                       		rts
00015E80                            ; ===========================================================================
00015E80                            
00015E80                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015E80 6000                       		bra.s	Obj0A_MakeItem
00015E82                            ; ===========================================================================
00015E82                            
00015E82                            loc_13FAC:
00015E82 4A68 0036                  		tst.w	$36(a0)
00015E86 6700 0000                  		beq.w	locret_1408C
00015E8A 5368 003A                  		subq.w	#1,$3A(a0)
00015E8E 6A00 0000                  		bpl.w	locret_1408C
00015E92                            
00015E92                            Obj0A_MakeItem:
00015E92 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015E98 0240 000F                  		andi.w	#$F,d0
00015E9C 3140 003A                  		move.w	d0,$3A(a0)
00015EA0 4EBA 91C4                  		jsr	SingleObjLoad
00015EA4 6600 0000                  		bne.w	locret_1408C
00015EA8 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015EAC 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015EB2 7006                       		moveq	#6,d0
00015EB4 0838 0000 D022             		btst	#0,($FFFFD022).w
00015EBA 6700                       		beq.s	loc_13FF2
00015EBC 4440                       		neg.w	d0
00015EBE 137C 0040 0026             		move.b	#$40,$26(a1)
00015EC4                            
00015EC4                            loc_13FF2:
00015EC4 D169 0008                  		add.w	d0,8(a1)
00015EC8 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015ECE 137C 0006 0028             		move.b	#6,$28(a1)
00015ED4 4A68 002C                  		tst.w	$2C(a0)
00015ED8 6700 0000                  		beq.w	loc_1403E
00015EDC 0268 0007 003A             		andi.w	#7,$3A(a0)
00015EE2 0668 0000 003A             		addi.w	#0,$3A(a0)
00015EE8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015EEC 0440 000C                  		subi.w	#$C,d0
00015EF0 3340 000C                  		move.w	d0,$C(a1)
00015EF4 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015EFA 1340 0026                  		move.b	d0,$26(a1)
00015EFE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F02 0200 0003                  		andi.b	#3,d0
00015F06 6600                       		bne.s	loc_14082
00015F08 137C 000E 0028             		move.b	#$E,$28(a1)
00015F0E 6000                       		bra.s	loc_14082
00015F10                            ; ===========================================================================
00015F10                            
00015F10                            loc_1403E:
00015F10 0828 0007 0036             		btst	#7,$36(a0)
00015F16 6700                       		beq.s	loc_14082
00015F18 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015F1C E24A                       		lsr.w	#1,d2
00015F1E 4EB9 0000 29A6             		jsr	(RandomNumber).l
00015F24 0240 0003                  		andi.w	#3,d0
00015F28 6600                       		bne.s	loc_1406A
00015F2A 08E8 0006 0036             		bset	#6,$36(a0)
00015F30 6600                       		bne.s	loc_14082
00015F32 1342 0028                  		move.b	d2,$28(a1)
00015F36 337C 001C 0038             		move.w	#$1C,$38(a1)
00015F3C                            
00015F3C                            loc_1406A:
00015F3C 4A28 0034                  		tst.b	$34(a0)
00015F40 6600                       		bne.s	loc_14082
00015F42 08E8 0006 0036             		bset	#6,$36(a0)
00015F48 6600                       		bne.s	loc_14082
00015F4A 1342 0028                  		move.b	d2,$28(a1)
00015F4E 337C 001C 0038             		move.w	#$1C,$38(a1)
00015F54                            
00015F54                            loc_14082:
00015F54 5328 0034                  		subq.b	#1,$34(a0)
00015F58 6A00                       		bpl.s	locret_1408C
00015F5A 4268 0036                  		clr.w	$36(a0)
00015F5E                            
00015F5E                            locret_1408C:
00015F5E 4E75                       		rts	
00015F60                            
00015F60                            ; ---------------------------------------------------------------------------
00015F60                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015F60                            ; ---------------------------------------------------------------------------
00015F60                            
00015F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F60                            
00015F60                            
00015F60                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015F60 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015F66 6200                       		bhi.s	loc_140AC
00015F68 303C 0082                  		move.w	#$82,d0		; play LZ music
00015F6C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00015F72 6600                       		bne.s	loc_140A6
00015F74 303C 0086                  		move.w	#$86,d0		; play SBZ music
00015F78                            
00015F78                            loc_140A6:
00015F78 4EB9 0000 11F0             		jsr	(PlaySound).l
00015F7E 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
00015F84 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
00015F8A                            
00015F8A                            loc_140AC:
00015F8A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015F90 4238 D372                  		clr.b	($FFFFD372).w
00015F94 4E75                       		rts	
00015F96                            ; End of function ResumeMusic
00015F96                            
00015F96                            ; ===========================================================================
00015F96                            Ani_obj0A:
00015F96                            	include "_anim\obj0A.asm"
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            ; Animation script - countdown numbers and bubbles (LZ)
00015F96                            ; ---------------------------------------------------------------------------
00015F96 0000                       		dc.w byte_140D6-Ani_obj0A
00015F98 0000                       		dc.w byte_140E0-Ani_obj0A
00015F9A 0000                       		dc.w byte_140EA-Ani_obj0A
00015F9C 0000                       		dc.w byte_140F4-Ani_obj0A
00015F9E 0000                       		dc.w byte_140FE-Ani_obj0A
00015FA0 0000                       		dc.w byte_14108-Ani_obj0A
00015FA2 0000                       		dc.w byte_14112-Ani_obj0A
00015FA4 0000                       		dc.w byte_14118-Ani_obj0A
00015FA6 0000                       		dc.w byte_14120-Ani_obj0A
00015FA8 0000                       		dc.w byte_14128-Ani_obj0A
00015FAA 0000                       		dc.w byte_14130-Ani_obj0A
00015FAC 0000                       		dc.w byte_14138-Ani_obj0A
00015FAE 0000                       		dc.w byte_14140-Ani_obj0A
00015FB0 0000                       		dc.w byte_14148-Ani_obj0A
00015FB2 0000                       		dc.w byte_1414A-Ani_obj0A
00015FB4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015FBE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015FC8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015FD2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015FDC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015FE6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015FF0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015FF6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015FFE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00016006 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001600E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00016016 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001601E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00016026 0EFC                       byte_14148:	dc.b $E, $FC
00016028 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001602E                            		even
0001602E                            		even
0001602E                            
0001602E                            ; ---------------------------------------------------------------------------
0001602E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001602E                            ; ---------------------------------------------------------------------------
0001602E                            Map_obj0A:
0001602E                            	include "_maps\obj0A.asm"
0001602E                            ; ---------------------------------------------------------------------------
0001602E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001602E                            ; ---------------------------------------------------------------------------
0001602E 0000                       		dc.w byte_14152-Map_obj0A
00016030 01                         byte_14152:	dc.b 1
00016031 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016036                            		even
00016036                            		even
00016036                            
00016036                            ; ===========================================================================
00016036                            ; ---------------------------------------------------------------------------
00016036                            ; Object 38 - shield
00016036                            ; ---------------------------------------------------------------------------
00016036                            
00016036                            Obj38: ; XREF: Obj_Index
00016036 223C 0000 0000             		move.l #UnC_Shield,d1 ; Call for Regular Shield Art
0001603C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016040                            ; In this case, VRAM = $541*20
00016040 363C 0200                  		move.w #$200,d3
00016044 4EB9 0000 4A58             		jsr (QueueDMATransfer).l
0001604A                            ; ---------------------------------------------------------------------------
0001604A                            
0001604A                            ShieldObj_Main:
0001604A 7000                       		moveq #0,d0
0001604C 1028 0024                  		move.b $24(a0),d0
00016050 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016054 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016058                            ; ===========================================================================
00016058                            Shield_Index:
00016058 0000                       		dc.w Shield_Init-Shield_Index
0001605A 0000                       		dc.w ShieldChecks-Shield_Index
0001605C                            ; ===========================================================================
0001605C                            
0001605C                            Shield_Init:
0001605C 5428 0024                  		addq.b #2,$24(a0)
00016060 217C 0000 0000 0004        		move.l #Map_Obj38, $0004(A0) ; Load Shield Map into place
00016068 117C 0004 0001             		move.b #4,1(a0)
0001606E 117C 0001 0018             		move.b #1,$18(a0)
00016074 117C 0018 0019             		move.b #$18,$19(a0)
0001607A 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016080 0838 0007 D002             		btst #7,($FFFFD002).w
00016086 6700                       		beq.s ShieldChecks
00016088 08E8 0007 0002             		bset #7,2(a0)
0001608E                            ; ---------------------------------------------------------------------------
0001608E                            
0001608E                            ShieldChecks:
0001608E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016092 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016094 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016098 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001609A                            
0001609A                            ShieldProperties:
0001609A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
000160A0 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
000160A6 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
000160AC 43F9 0000 0000             		lea (Ani_obj38).l, a1 ; Load Animation Scripts into a1
000160B2 4EB9 0000 B970             		jsr AnimateSprite
000160B8 4EFA 8856                  		jmp DisplaySprite
000160BC                            
000160BC                            SonicHasShield:
000160BC 4E75                       		rts
000160BE                            
000160BE                            jmp_DeleteObj38: ; loc_12648:
000160BE 4EFA 88A0                  		jmp DeleteObject 
000160C2                            
000160C2                            ; ---------------------------------------------------------------------------
000160C2                            ; Object 4A - New Invincibility Object (ported from Sonic 2)
000160C2                            ; ---------------------------------------------------------------------------
000160C2                            
000160C2                            Obj4A: ; XREF: Obj_Index
000160C2 7000                       		moveq	#0,d0
000160C4 1028 0000                  		move.b	InvStars_routine(a0),d0
000160C8 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
000160CC 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
000160D0                            ; ===========================================================================
000160D0                            
000160D0 0000                       InvStars_Index:	dc.w Obj4A_Init-InvStars_Index
000160D2 0000                       		dc.w Obj4A_Main-InvStars_Index
000160D4 0000                       		dc.w Obj4A_SubObject-InvStars_Index
000160D6                            ; ===========================================================================
000160D6                            
000160D6                            off_1D992:
000160D6 0000 0000                  		dc.l Ani_InvStars2 ; animation script
000160DA 000B                       		dc.w $B ; speed index,sub3 anim
000160DC 0000 0000                  		dc.l Ani_InvStars3
000160E0 160D                       		dc.w $160D
000160E2 0000 0000                  		dc.l Ani_InvStars4
000160E6 2C0D                       		dc.w $2C0D
000160E8                            ; ===========================================================================	
000160E8                            
000160E8 =0000000A                  InvStars_routine: equ $A ; the same as obRoutine in other objects
000160E8 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
000160E8 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
000160E8 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
000160E8                            
000160E8                            
000160E8                            Obj4A_Init:
000160E8 223C 0000 0000             		move.l	#ArtUnc_InvStars,d1
000160EE 343C A820                  		move.w	#$A820,d2
000160F2 363C 0200                  		move.w	#$200,d3
000160F6 4EB9 0000 4A58             		jsr	(QueueDMATransfer).l
000160FC 7400                       		moveq	#0,d2
000160FE 45FA FFD0                  		lea	off_1D992-6(pc),a2
00016102 43D0                       		lea	(a0),a1
00016104 7203                       		moveq	#3,d1
00016106                            LoadStarsObject:	
00016106 1290                       		move.b	(a0),(a1) ; load obj35
00016108 137C 0004 000A             		move.b	#4,InvStars_routine(a1)		; => @SubObject
0001610E 237C 0000 0000 0004        		move.l	#Map_InvStars,$4(a1)
00016116 337C 0541 0002             		move.w	#$541,$2(a1)
0001611C 137C 0044 0001             		move.b  #%001000100,1(a1)
00016122 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00016128 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)
0001612E 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00016132 5242                       		addq.w	#1,d2
00016134 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00016138 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
0001613C 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00016140 51C9 FFC4                  		dbf	d1,LoadStarsObject
00016144                            
00016144 117C 0002 000A             		move.b	#2,InvStars_routine(a0)		; => @MainObject
0001614A 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00016150                            
00016150                            Obj4A_Main:
00016150 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
00016154 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
00016158 6700 8806                  		beq.w	DeleteObject
0001615C 3029 0008                  		move.w	8(a1),d0
00016160 3140 0008                  		move.w	d0,8(a0)
00016164 3229 000C                  		move.w	$C(a1),d1
00016168 3141 000C                  		move.w	d1,$C(a0)
0001616C 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016170 47F9 0000 0000             		lea	Ani_InvStars1,a3
00016176 7A00                       		moveq	#0,d5
00016178                            
00016178                            Obj4A_GetFrame:
00016178 3428 0038                  		move.w	$38(a0),d2
0001617C 1A33 2000                  		move.b	(a3,d2.w),d5
00016180 6A00                       		bpl.s	Obj4A_SetFrameandPos
00016182 4268 0038                  		clr.w	$38(a0)
00016186 60F0                       		bra.s	Obj4A_GetFrame
00016188                            ; ===========================================================================
00016188                            
00016188                            Obj4A_SetFrameandPos:
00016188 5268 0038                  		addq.w	#1,$38(a0)
0001618C 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016192 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016196 4EB9 0000 0000             		jsr	Obj4A_Display2
0001619C 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
0001619E 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000161A0 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000161A2 0646 0020                  		addi.w	#$20,d6
000161A6 4EB9 0000 0000             		jsr	Obj4A_Display2
000161AC 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000161AE 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000161B0 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000161B2 7012                       		moveq	#$12,d0
000161B4 0829 0000 0022             		btst	#0,$22(a1)
000161BA 6700                       		beq.s	Obj4A_Display
000161BC 4440                       		neg.w	d0
000161BE                            
000161BE                            Obj4A_Display:
000161BE D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
000161C2 303C 0080                  		move.w	#(1*$80),d0
000161C6 6000 8784                  		bra.w	DisplaySprite3
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            Obj4A_SubObject:
000161CA 43F8 D000                  		lea ($FFFFD000).w,a1 ; a1=character
000161CE 4A38 FE2D                  		tst.b   ($FFFFFE2D).w
000161D2 6700 878C                  		beq.w	DeleteObject
000161D6 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
000161DA 4DF8 CB00                  		lea	($FFFFCB00).w,a6
000161DE                            	
000161DE                            @getPosition_sub:
000161DE 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
000161E2 E509                       		lsl.b	#2,d1
000161E4 3401                       		move.w	d1,d2
000161E6 D241                       		add.w	d1,d1
000161E8 D242                       		add.w	d2,d1 
000161EA 3015                       		move.w	(a5),d0
000161EC 9001                       		sub.b	d1,d0
000161EE 45F6 0000                  		lea	(a6,d0.w),a2
000161F2 301A                       		move.w	(a2)+,d0
000161F4 321A                       		move.w	(a2)+,d1
000161F6 3140 0008                  		move.w	d0,8(a0)
000161FA 3141 000C                  		move.w	d1,$C(a0)
000161FE 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016202 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
00016206                            
00016206                            Obj4A_GetSubFrame:
00016206 3428 0038                  		move.w	$38(a0),d2
0001620A 1A33 2000                  		move.b	(a3,d2.w),d5
0001620E 6A00                       		bpl.s	Obj4A_SetSubFrameandPos
00016210 4268 0038                  		clr.w	$38(a0)
00016214 60F0                       		bra.s	Obj4A_GetSubFrame
00016216                            ; ===========================================================================
00016216                            
00016216                            Obj4A_SetSubFrameandPos:
00016216 4845                       		swap	d5
00016218 D428 0035                  		add.b	$35(a0),d2
0001621C 1A33 2000                  		move.b	(a3,d2.w),d5
00016220 5268 0038                  		addq.w	#1,$38(a0)
00016224 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00016228 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001622C 6100                       		bsr.s	Obj4A_Display2
0001622E 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016230 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016232 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016234 0646 0020                  		addi.w	#$20,d6
00016238 4845                       		swap	d5
0001623A 6100                       		bsr.s	Obj4A_Display2
0001623C 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
0001623E 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016240 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016242 7002                       		moveq	#2,d0
00016244 0829 0000 0022             		btst	#0,$22(a1)
0001624A 6700                       		beq.s	loc_1DB20
0001624C 4440                       		neg.w	d0
0001624E                            
0001624E                            loc_1DB20:
0001624E D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00016252 303C 0080                  		move.w    #(1*$80),d0
00016256 6000 86F4                  		bra.w    DisplaySprite3
0001625A                            ; ===========================================================================
0001625A                            Obj4A_Display2:
0001625A 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
0001625E 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00016262 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00016266 4882                       		ext.w	d2
00016268 4883                       		ext.w	d3
0001626A D440                       		add.w	d0,d2 ; add object x position to x-move speed
0001626C D641                       		add.w	d1,d3 ; add object y position to y-move speed
0001626E 4E75                       		rts
00016270                            
00016270                            InvStars_Speeds: ; x-move speed,	y-move speed	
00016270 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F,   $10, $FC0F, $F90E, $F70D, $F40B, $F208, $F106, $F003
00016290 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, $F0FC, $F1F9, $F2F7, $F4F4, $F7F2, $F9F1, $FCF0, $FFF0,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
000162B0                            
000162B0                            ; ---------------------------------------------------------------------------
000162B0                            ; Animation script - invincibility stars
000162B0                            ; ---------------------------------------------------------------------------
000162B0                            
000162B0                            ; The animation script differs from the animate_sprite subroutine
000162B0                            ; Every positive byte - mapping
000162B0                            ; Every negative byte - loop flag 
000162B0                            
000162B0 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
000162BE 00                         	even
000162BE 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
000162C9 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
000162D4 00                         	even
000162D4 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
000162E1 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
000162EE 00                         	even
000162EE 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
000162FB 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
00016308 00                         	even		
00016308                            
00016308                            
00016308                            Map_InvStars:
00016308                            	include "_maps\obj4A.asm"
00016308                            ; ================================================================================
00016308                            ; Sprite Mappings - generated by Flex 2 Wed Aug 11 2021 18:32:48 GMT+0100 (British Summer Time)
00016308                            ; ================================================================================
00016308                            
00016308                            DATAZEB5V6JRJ3H:
00016308 0000 0000                  	dc.w DATAZEB5V6JRJ3H_0-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_1-DATAZEB5V6JRJ3H
0001630C 0000 0000                  	dc.w DATAZEB5V6JRJ3H_2-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_3-DATAZEB5V6JRJ3H
00016310 0000 0000                  	dc.w DATAZEB5V6JRJ3H_4-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_5-DATAZEB5V6JRJ3H
00016314 0000 0000                  	dc.w DATAZEB5V6JRJ3H_6-DATAZEB5V6JRJ3H, DATAZEB5V6JRJ3H_7-DATAZEB5V6JRJ3H
00016318 0000                       	dc.w DATAZEB5V6JRJ3H_8-DATAZEB5V6JRJ3H
0001631A 01                         DATAZEB5V6JRJ3H_0: dc.b $1
0001631B EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
00016320 01                         DATAZEB5V6JRJ3H_1: dc.b $1
00016321 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00016326 01                         DATAZEB5V6JRJ3H_2: dc.b $1
00016327 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
0001632C 01                         DATAZEB5V6JRJ3H_3: dc.b $1
0001632D F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00016332 01                         DATAZEB5V6JRJ3H_4: dc.b $1
00016333 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00016338 01                         DATAZEB5V6JRJ3H_5: dc.b $1
00016339 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
0001633E 01                         DATAZEB5V6JRJ3H_6: dc.b $1
0001633F F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00016344 01                         DATAZEB5V6JRJ3H_7: dc.b $1
00016345 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
0001634A 01                         DATAZEB5V6JRJ3H_8: dc.b $1
0001634B F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00016350                            	even
00016350                            	even
00016350                            ; ===========================================================================
00016350                            ; ---------------------------------------------------------------------------
00016350                            ; Object 08 - water splash (LZ)
00016350                            ; ---------------------------------------------------------------------------
00016350                            
00016350                            Obj08:					; XREF: Obj_Index
00016350 7000                       		moveq	#0,d0
00016352 1028 0024                  		move.b	$24(a0),d0
00016356 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001635A 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001635E                            ; ===========================================================================
0001635E 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00016360 0000                       		dc.w Obj08_Display-Obj08_Index
00016362 0000                       		dc.w Obj08_Delete-Obj08_Index
00016364                            ; ===========================================================================
00016364                            
00016364                            Obj08_Main:				; XREF: Obj08_Index
00016364 5428 0024                  		addq.b	#2,$24(a0)
00016368 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00016370 0028 0004 0001             		ori.b	#4,1(a0)
00016376 117C 0001 0018             		move.b	#1,$18(a0)
0001637C 117C 0010 0019             		move.b	#$10,$19(a0)
00016382 317C 4259 0002             		move.w	#$4259,2(a0)
00016388 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001638E                            
0001638E                            Obj08_Display:				; XREF: Obj08_Index
0001638E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00016394 4A38 F64E                  		tst.b	($FFFFF64E).w
00016398 6700                       		beq.s	Obj08_Animate
0001639A 3178 F60E 000C             		move.w	(v_pocketbottom).w,$C(a0) ; copy y-position from water height
000163A0                            
000163A0                            Obj08_Animate:
000163A0 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000163A6 4EB9 0000 B970             		jsr	AnimateSprite
000163AC 4EFA 8562                  		jmp	DisplaySprite
000163B0                            ; ===========================================================================
000163B0                            
000163B0                            Obj08_Delete:				; XREF: Obj08_Index
000163B0 4EFA 85AE                  		jmp	DeleteObject	; delete when animation	is complete
000163B4                            ; ===========================================================================
000163B4                            Ani_obj38:
000163B4                            	include "_anim\obj38.asm"
000163B4                            ; ---------------------------------------------------------------------------
000163B4                            ; Animation script - shield and invincibility stars
000163B4                            ; ---------------------------------------------------------------------------
000163B4 0000                       		dc.w byte_14356-Ani_obj38
000163B6 0000                       		dc.w byte_1435E-Ani_obj38
000163B8 0000                       		dc.w byte_14364-Ani_obj38
000163BA 0000                       		dc.w byte_1437E-Ani_obj38
000163BC 0000                       		dc.w byte_14398-Ani_obj38
000163BE 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000163C6 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000163CC 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000163DD 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000163E6 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000163F7 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00016400 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00016411 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001641A                            		even
0001641A                            		even
0001641A                            
0001641A                            ; ---------------------------------------------------------------------------
0001641A                            ; Sprite mappings - shield and invincibility stars
0001641A                            ; ---------------------------------------------------------------------------
0001641A                            Map_obj38:
0001641A                            	include "_maps\obj38.asm"
0001641A                            ; ---------------------------------------------------------------------------
0001641A                            ; Sprite mappings - shield and invincibility stars
0001641A                            ; ---------------------------------------------------------------------------
0001641A 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001641E 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00016422 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00016426 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001642A 04                         byte_143C2:	dc.b 4
0001642B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00016430 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016435 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001643A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001643F 04                         byte_143D7:	dc.b 4
00016440 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00016445 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001644A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001644F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00016454 04                         byte_143EC:	dc.b 4
00016455 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001645A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001645F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016464 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00016469 04                         byte_14401:	dc.b 4
0001646A E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001646F E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00016474 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00016479 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001647E 04                         byte_14416:	dc.b 4
0001647F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00016484 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00016489 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0001648E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00016493 04                         byte_1442B:	dc.b 4
00016494 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00016499 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0001649E 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000164A3 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000164A8 04                         byte_14440:	dc.b 4
000164A9 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000164AE E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000164B3 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000164B8 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000164BE 00                         		even
000164BE 00                         		even
000164BE                            
000164BE                            ; ---------------------------------------------------------------------------
000164BE                            ; Sprite mappings - special stage entry	from beta
000164BE                            ; ---------------------------------------------------------------------------
000164BE                            
000164BE                            Ani_obj08:
000164BE                            	include "_anim\obj08.asm"
000164BE                            ; ---------------------------------------------------------------------------
000164BE                            ; Animation script - water splash (LZ)
000164BE                            ; ---------------------------------------------------------------------------
000164BE 0000                       		dc.w byte_145C6-Ani_obj08
000164C0 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000164C6                            		even
000164C6                            		even
000164C6                            
000164C6                            ; ---------------------------------------------------------------------------
000164C6                            ; Sprite mappings - water splash (LZ)
000164C6                            ; ---------------------------------------------------------------------------
000164C6                            Map_obj08:
000164C6                            	include "_maps\obj08.asm"
000164C6                            ; ---------------------------------------------------------------------------
000164C6                            ; Sprite mappings - water splash (LZ)
000164C6                            ; ---------------------------------------------------------------------------
000164C6 0000                       		dc.w byte_145D2-Map_obj08
000164C8 0000                       		dc.w byte_145DD-Map_obj08
000164CA 0000                       		dc.w byte_145E8-Map_obj08
000164CC 02                         byte_145D2:	dc.b 2
000164CD F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000164D2 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000164D7 02                         byte_145DD:	dc.b 2
000164D8 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000164DD EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000164E2 01                         byte_145E8:	dc.b 1
000164E3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000164E8                            		even
000164E8                            		even
000164E8                            
000164E8                            ; ---------------------------------------------------------------------------
000164E8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000164E8                            ; ---------------------------------------------------------------------------
000164E8                            
000164E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164E8                            
000164E8                            
000164E8                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000164E8 0828 0003 0022             		btst	#3,$22(a0)
000164EE 6700                       		beq.s	loc_14602
000164F0 7000                       		moveq	#0,d0
000164F2 11C0 F768                  		move.b	d0,($FFFFF768).w
000164F6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000164FA 4E75                       		rts	
000164FC                            ; ===========================================================================
000164FC                            
000164FC                            loc_14602:
000164FC 7003                       		moveq	#3,d0
000164FE 11C0 F768                  		move.b	d0,($FFFFF768).w
00016502 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016506 1028 0026                  		move.b	$26(a0),d0
0001650A 0600 0020                  		addi.b	#$20,d0
0001650E 6A00                       		bpl.s	loc_14624
00016510 1028 0026                  		move.b	$26(a0),d0
00016514 6A00                       		bpl.s	loc_1461E
00016516 5300                       		subq.b	#1,d0
00016518                            
00016518                            loc_1461E:
00016518 0600 0020                  		addi.b	#$20,d0
0001651C 6000                       		bra.s	loc_14630
0001651E                            ; ===========================================================================
0001651E                            
0001651E                            loc_14624:
0001651E 1028 0026                  		move.b	$26(a0),d0
00016522 6A00                       		bpl.s	loc_1462C
00016524 5200                       		addq.b	#1,d0
00016526                            
00016526                            loc_1462C:
00016526 0600 001F                  		addi.b	#$1F,d0
0001652A                            
0001652A                            loc_14630:
0001652A 0200 00C0                  		andi.b	#$C0,d0
0001652E 0C00 0040                  		cmpi.b	#$40,d0
00016532 6700 0000                  		beq.w	Sonic_WalkVertL
00016536 0C00 0080                  		cmpi.b	#$80,d0
0001653A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001653E 0C00 00C0                  		cmpi.b	#$C0,d0
00016542 6700 0000                  		beq.w	Sonic_WalkVertR
00016546 3428 000C                  		move.w	$C(a0),d2
0001654A 3628 0008                  		move.w	8(a0),d3
0001654E 7000                       		moveq	#0,d0
00016550 1028 0016                  		move.b	$16(a0),d0
00016554 4880                       		ext.w	d0
00016556 D440                       		add.w	d0,d2
00016558 1028 0017                  		move.b	$17(a0),d0
0001655C 4880                       		ext.w	d0
0001655E D640                       		add.w	d0,d3
00016560 49F8 F768                  		lea	($FFFFF768).w,a4
00016564 367C 0010                  		movea.w	#$10,a3
00016568 3C3C 0000                  		move.w	#0,d6
0001656C 7A0D                       		moveq	#$D,d5
0001656E 6100 0000                  		bsr.w	FindFloor
00016572 3F01                       		move.w	d1,-(sp)
00016574 3428 000C                  		move.w	$C(a0),d2
00016578 3628 0008                  		move.w	8(a0),d3
0001657C 7000                       		moveq	#0,d0
0001657E 1028 0016                  		move.b	$16(a0),d0
00016582 4880                       		ext.w	d0
00016584 D440                       		add.w	d0,d2
00016586 1028 0017                  		move.b	$17(a0),d0
0001658A 4880                       		ext.w	d0
0001658C 4440                       		neg.w	d0
0001658E D640                       		add.w	d0,d3
00016590 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016594 367C 0010                  		movea.w	#$10,a3
00016598 3C3C 0000                  		move.w	#0,d6
0001659C 7A0D                       		moveq	#$D,d5
0001659E 6100 0000                  		bsr.w	FindFloor
000165A2 301F                       		move.w	(sp)+,d0
000165A4 6100 0000                  		bsr.w	Sonic_Angle
000165A8 4A41                       		tst.w	d1
000165AA 6700                       		beq.s	locret_146BE
000165AC 6A00                       		bpl.s	loc_146C0
000165AE 0C41 FFF2                  		cmpi.w	#-$E,d1
000165B2 6D00                       		blt.s	locret_146E6
000165B4 D368 000C                  		add.w	d1,$C(a0)
000165B8                            
000165B8                            locret_146BE:
000165B8 4E75                       		rts	
000165BA                            ; ===========================================================================
000165BA                            
000165BA                            loc_146C0:
000165BA 0C41 000E                  		cmpi.w	#$E,d1
000165BE 6E00                       		bgt.s	loc_146CC
000165C0                            
000165C0                            loc_146C6:
000165C0 D368 000C                  		add.w	d1,$C(a0)
000165C4 4E75                       		rts	
000165C6                            ; ===========================================================================
000165C6                            
000165C6                            loc_146CC:
000165C6 4A28 0038                  		tst.b	$38(a0)
000165CA 66F4                       		bne.s	loc_146C6
000165CC 08E8 0001 0022             		bset	#1,$22(a0)
000165D2 08A8 0005 0022             		bclr	#5,$22(a0)
000165D8 117C 0001 001D             		move.b	#1,$1D(a0)
000165DE 4E75                       		rts	
000165E0                            ; ===========================================================================
000165E0                            
000165E0                            locret_146E6:
000165E0 4E75                       		rts	
000165E2                            ; End of function Sonic_AnglePos
000165E2                            
000165E2                            ; ===========================================================================
000165E2 2428 0008                  		move.l	8(a0),d2
000165E6 3028 0010                  		move.w	$10(a0),d0
000165EA 48C0                       		ext.l	d0
000165EC E180                       		asl.l	#8,d0
000165EE 9480                       		sub.l	d0,d2
000165F0 2142 0008                  		move.l	d2,8(a0)
000165F4 303C 0038                  		move.w	#$38,d0
000165F8 48C0                       		ext.l	d0
000165FA E180                       		asl.l	#8,d0
000165FC 9680                       		sub.l	d0,d3
000165FE 2143 000C                  		move.l	d3,$C(a0)
00016602 4E75                       		rts	
00016604                            ; ===========================================================================
00016604                            
00016604                            locret_1470A:
00016604 4E75                       		rts	
00016606                            ; ===========================================================================
00016606 2628 000C                  		move.l	$C(a0),d3
0001660A 3028 0012                  		move.w	$12(a0),d0
0001660E 0440 0038                  		subi.w	#$38,d0
00016612 3140 0012                  		move.w	d0,$12(a0)
00016616 48C0                       		ext.l	d0
00016618 E180                       		asl.l	#8,d0
0001661A 9680                       		sub.l	d0,d3
0001661C 2143 000C                  		move.l	d3,$C(a0)
00016620 4E75                       		rts	
00016622 4E75                       		rts	
00016624                            ; ===========================================================================
00016624 2428 0008                  		move.l	8(a0),d2
00016628 2628 000C                  		move.l	$C(a0),d3
0001662C 3028 0010                  		move.w	$10(a0),d0
00016630 48C0                       		ext.l	d0
00016632 E180                       		asl.l	#8,d0
00016634 9480                       		sub.l	d0,d2
00016636 3028 0012                  		move.w	$12(a0),d0
0001663A 48C0                       		ext.l	d0
0001663C E180                       		asl.l	#8,d0
0001663E 9680                       		sub.l	d0,d3
00016640 2142 0008                  		move.l	d2,8(a0)
00016644 2143 000C                  		move.l	d3,$C(a0)
00016648 4E75                       		rts	
0001664A                            
0001664A                            ; ---------------------------------------------------------------------------
0001664A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001664A                            ; ---------------------------------------------------------------------------
0001664A                            
0001664A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001664A                            
0001664A                            
0001664A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001664A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001664E B240                       		cmp.w	d0,d1
00016650 6F00                       		ble.s	loc_1475E
00016652 1438 F768                  		move.b	($FFFFF768).w,d2
00016656 3200                       		move.w	d0,d1
00016658                            
00016658                            loc_1475E:
00016658 0802 0000                  		btst	#0,d2
0001665C 6600                       		bne.s	loc_1476A
0001665E 1142 0026                  		move.b	d2,$26(a0)
00016662 4E75                       		rts	
00016664                            ; ===========================================================================
00016664                            
00016664                            loc_1476A:
00016664 1428 0026                  		move.b	$26(a0),d2
00016668 0602 0020                  		addi.b	#$20,d2
0001666C 0202 00C0                  		andi.b	#$C0,d2
00016670 1142 0026                  		move.b	d2,$26(a0)
00016674 4E75                       		rts	
00016676                            ; End of function Sonic_Angle
00016676                            
00016676                            ; ---------------------------------------------------------------------------
00016676                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016676                            ; ---------------------------------------------------------------------------
00016676                            
00016676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016676                            
00016676                            
00016676                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016676 3428 000C                  		move.w	$C(a0),d2
0001667A 3628 0008                  		move.w	8(a0),d3
0001667E 7000                       		moveq	#0,d0
00016680 1028 0017                  		move.b	$17(a0),d0
00016684 4880                       		ext.w	d0
00016686 4440                       		neg.w	d0
00016688 D440                       		add.w	d0,d2
0001668A 1028 0016                  		move.b	$16(a0),d0
0001668E 4880                       		ext.w	d0
00016690 D640                       		add.w	d0,d3
00016692 49F8 F768                  		lea	($FFFFF768).w,a4
00016696 367C 0010                  		movea.w	#$10,a3
0001669A 3C3C 0000                  		move.w	#0,d6
0001669E 7A0D                       		moveq	#$D,d5
000166A0 6100 0000                  		bsr.w	FindWall
000166A4 3F01                       		move.w	d1,-(sp)
000166A6 3428 000C                  		move.w	$C(a0),d2
000166AA 3628 0008                  		move.w	8(a0),d3
000166AE 7000                       		moveq	#0,d0
000166B0 1028 0017                  		move.b	$17(a0),d0
000166B4 4880                       		ext.w	d0
000166B6 D440                       		add.w	d0,d2
000166B8 1028 0016                  		move.b	$16(a0),d0
000166BC 4880                       		ext.w	d0
000166BE D640                       		add.w	d0,d3
000166C0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000166C4 367C 0010                  		movea.w	#$10,a3
000166C8 3C3C 0000                  		move.w	#0,d6
000166CC 7A0D                       		moveq	#$D,d5
000166CE 6100 0000                  		bsr.w	FindWall
000166D2 301F                       		move.w	(sp)+,d0
000166D4 6100 FF74                  		bsr.w	Sonic_Angle
000166D8 4A41                       		tst.w	d1
000166DA 6700                       		beq.s	locret_147F0
000166DC 6A00                       		bpl.s	loc_147F2
000166DE 0C41 FFF2                  		cmpi.w	#-$E,d1
000166E2 6D00 FF20                  		blt.w	locret_1470A
000166E6 D368 0008                  		add.w	d1,8(a0)
000166EA                            
000166EA                            locret_147F0:
000166EA 4E75                       		rts	
000166EC                            ; ===========================================================================
000166EC                            
000166EC                            loc_147F2:
000166EC 0C41 000E                  		cmpi.w	#$E,d1
000166F0 6E00                       		bgt.s	loc_147FE
000166F2                            
000166F2                            loc_147F8:
000166F2 D368 0008                  		add.w	d1,8(a0)
000166F6 4E75                       		rts	
000166F8                            ; ===========================================================================
000166F8                            
000166F8                            loc_147FE:
000166F8 4A28 0038                  		tst.b	$38(a0)
000166FC 66F4                       		bne.s	loc_147F8
000166FE 08E8 0001 0022             		bset	#1,$22(a0)
00016704 08A8 0005 0022             		bclr	#5,$22(a0)
0001670A 117C 0001 001D             		move.b	#1,$1D(a0)
00016710 4E75                       		rts	
00016712                            ; End of function Sonic_WalkVertR
00016712                            
00016712                            ; ---------------------------------------------------------------------------
00016712                            ; Subroutine allowing Sonic to walk upside-down
00016712                            ; ---------------------------------------------------------------------------
00016712                            
00016712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016712                            
00016712                            
00016712                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00016712 3428 000C                  		move.w	$C(a0),d2
00016716 3628 0008                  		move.w	8(a0),d3
0001671A 7000                       		moveq	#0,d0
0001671C 1028 0016                  		move.b	$16(a0),d0
00016720 4880                       		ext.w	d0
00016722 9440                       		sub.w	d0,d2
00016724 0A42 000F                  		eori.w	#$F,d2
00016728 1028 0017                  		move.b	$17(a0),d0
0001672C 4880                       		ext.w	d0
0001672E D640                       		add.w	d0,d3
00016730 49F8 F768                  		lea	($FFFFF768).w,a4
00016734 367C FFF0                  		movea.w	#-$10,a3
00016738 3C3C 1000                  		move.w	#$1000,d6
0001673C 7A0D                       		moveq	#$D,d5
0001673E 6100 0000                  		bsr.w	FindFloor
00016742 3F01                       		move.w	d1,-(sp)
00016744 3428 000C                  		move.w	$C(a0),d2
00016748 3628 0008                  		move.w	8(a0),d3
0001674C 7000                       		moveq	#0,d0
0001674E 1028 0016                  		move.b	$16(a0),d0
00016752 4880                       		ext.w	d0
00016754 9440                       		sub.w	d0,d2
00016756 0A42 000F                  		eori.w	#$F,d2
0001675A 1028 0017                  		move.b	$17(a0),d0
0001675E 4880                       		ext.w	d0
00016760 9640                       		sub.w	d0,d3
00016762 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016766 367C FFF0                  		movea.w	#-$10,a3
0001676A 3C3C 1000                  		move.w	#$1000,d6
0001676E 7A0D                       		moveq	#$D,d5
00016770 6100 0000                  		bsr.w	FindFloor
00016774 301F                       		move.w	(sp)+,d0
00016776 6100 FED2                  		bsr.w	Sonic_Angle
0001677A 4A41                       		tst.w	d1
0001677C 6700                       		beq.s	locret_14892
0001677E 6A00                       		bpl.s	loc_14894
00016780 0C41 FFF2                  		cmpi.w	#-$E,d1
00016784 6D00 FE5A                  		blt.w	locret_146E6
00016788 9368 000C                  		sub.w	d1,$C(a0)
0001678C                            
0001678C                            locret_14892:
0001678C 4E75                       		rts	
0001678E                            ; ===========================================================================
0001678E                            
0001678E                            loc_14894:
0001678E 0C41 000E                  		cmpi.w	#$E,d1
00016792 6E00                       		bgt.s	loc_148A0
00016794                            
00016794                            loc_1489A:
00016794 9368 000C                  		sub.w	d1,$C(a0)
00016798 4E75                       		rts	
0001679A                            ; ===========================================================================
0001679A                            
0001679A                            loc_148A0:
0001679A 4A28 0038                  		tst.b	$38(a0)
0001679E 66F4                       		bne.s	loc_1489A
000167A0 08E8 0001 0022             		bset	#1,$22(a0)
000167A6 08A8 0005 0022             		bclr	#5,$22(a0)
000167AC 117C 0001 001D             		move.b	#1,$1D(a0)
000167B2 4E75                       		rts	
000167B4                            ; End of function Sonic_WalkCeiling
000167B4                            
000167B4                            ; ---------------------------------------------------------------------------
000167B4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000167B4                            ; ---------------------------------------------------------------------------
000167B4                            
000167B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167B4                            
000167B4                            
000167B4                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000167B4 3428 000C                  		move.w	$C(a0),d2
000167B8 3628 0008                  		move.w	8(a0),d3
000167BC 7000                       		moveq	#0,d0
000167BE 1028 0017                  		move.b	$17(a0),d0
000167C2 4880                       		ext.w	d0
000167C4 9440                       		sub.w	d0,d2
000167C6 1028 0016                  		move.b	$16(a0),d0
000167CA 4880                       		ext.w	d0
000167CC 9640                       		sub.w	d0,d3
000167CE 0A43 000F                  		eori.w	#$F,d3
000167D2 49F8 F768                  		lea	($FFFFF768).w,a4
000167D6 367C FFF0                  		movea.w	#-$10,a3
000167DA 3C3C 0800                  		move.w	#$800,d6
000167DE 7A0D                       		moveq	#$D,d5
000167E0 6100 0000                  		bsr.w	FindWall
000167E4 3F01                       		move.w	d1,-(sp)
000167E6 3428 000C                  		move.w	$C(a0),d2
000167EA 3628 0008                  		move.w	8(a0),d3
000167EE 7000                       		moveq	#0,d0
000167F0 1028 0017                  		move.b	$17(a0),d0
000167F4 4880                       		ext.w	d0
000167F6 D440                       		add.w	d0,d2
000167F8 1028 0016                  		move.b	$16(a0),d0
000167FC 4880                       		ext.w	d0
000167FE 9640                       		sub.w	d0,d3
00016800 0A43 000F                  		eori.w	#$F,d3
00016804 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016808 367C FFF0                  		movea.w	#-$10,a3
0001680C 3C3C 0800                  		move.w	#$800,d6
00016810 7A0D                       		moveq	#$D,d5
00016812 6100 0000                  		bsr.w	FindWall
00016816 301F                       		move.w	(sp)+,d0
00016818 6100 FE30                  		bsr.w	Sonic_Angle
0001681C 4A41                       		tst.w	d1
0001681E 6700                       		beq.s	locret_14934
00016820 6A00                       		bpl.s	loc_14936
00016822 0C41 FFF2                  		cmpi.w	#-$E,d1
00016826 6D00 FDDC                  		blt.w	locret_1470A
0001682A 9368 0008                  		sub.w	d1,8(a0)
0001682E                            
0001682E                            locret_14934:
0001682E 4E75                       		rts	
00016830                            ; ===========================================================================
00016830                            
00016830                            loc_14936:
00016830 0C41 000E                  		cmpi.w	#$E,d1
00016834 6E00                       		bgt.s	loc_14942
00016836                            
00016836                            loc_1493C:
00016836 9368 0008                  		sub.w	d1,8(a0)
0001683A 4E75                       		rts	
0001683C                            ; ===========================================================================
0001683C                            
0001683C                            loc_14942:
0001683C 4A28 0038                  		tst.b	$38(a0)
00016840 66F4                       		bne.s	loc_1493C
00016842 08E8 0001 0022             		bset	#1,$22(a0)
00016848 08A8 0005 0022             		bclr	#5,$22(a0)
0001684E 117C 0001 001D             		move.b	#1,$1D(a0)
00016854 4E75                       		rts	
00016856                            ; End of function Sonic_WalkVertL
00016856                            
00016856                            ; ---------------------------------------------------------------------------
00016856                            ; Subroutine to	find which tile	the object is standing on
00016856                            ; ---------------------------------------------------------------------------
00016856                            
00016856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016856                            
00016856                            
00016856                            Floor_ChkTile_LocateBlock:
00016856 43F8 A400                  		lea	($FFFFA400).w,a1
0001685A 1231 0000                  		move.b	(a1,d0.w),d1
0001685E 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
00016860 6B00                       		bmi.s	loc_1499A
00016862 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
00016864 4881                       		ext.w	d1
00016866 EE59                       		ror.w	#7,d1
00016868 3002                       		move.w	d2,d0
0001686A D040                       		add.w	d0,d0
0001686C 0240 01E0                  		andi.w	#$1E0,d0
00016870 D240                       		add.w	d0,d1
00016872 3003                       		move.w	d3,d0
00016874 E648                       		lsr.w	#3,d0
00016876 0240 001E                  		andi.w	#$1E,d0
0001687A D240                       		add.w	d0,d1
0001687C 4E75                       		rts	
0001687E                            ; ---------------------------------------------------------------------------
0001687E                            
0001687E                            loc_1499A:
0001687E 0241 007F                  		andi.w	#$7F,d1
00016882 0828 0006 0001             		btst	#6,1(a0)
00016888 6700                       		beq.s	loc_149B2
0001688A 5241                       		addq.w	#1,d1
0001688C 0C41 0029                  		cmpi.w	#$29,d1
00016890 6600                       		bne.s	loc_149B2
00016892 323C 0051                  		move.w	#$51,d1
00016896                            
00016896                            loc_149B2:
00016896 5301                       		subq.b	#1,d1
00016898 EE59                       		ror.w	#7,d1
0001689A 3002                       		move.w	d2,d0
0001689C D040                       		add.w	d0,d0
0001689E 0240 01E0                  		andi.w	#$1E0,d0
000168A2 D240                       		add.w	d0,d1
000168A4 3003                       		move.w	d3,d0
000168A6 E648                       		lsr.w	#3,d0
000168A8 0240 001E                  		andi.w	#$1E,d0
000168AC D240                       		add.w	d0,d1
000168AE 4E75                       		rts	
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            
000168B0                            Floor_ChkTile_EmptyChunk:
000168B0 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
000168B4 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
000168B6 4E75                       		rts	
000168B8                            
000168B8                            ; ---------------------------------------------------------------------------
000168B8                            ; Subroutine to	find which tile	the object is standing on
000168B8                            ; ---------------------------------------------------------------------------
000168B8                            
000168B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168B8                            
000168B8                            
000168B8                            Floor_ChkTile:				; XREF: FindFloor; et al
000168B8 3002                       		move.w	d2,d0
000168BA E248                       		lsr.w	#1,d0
000168BC 0240 0380                  		andi.w	#$380,d0
000168C0 3203                       		move.w	d3,d1
000168C2 E049                       		lsr.w	#8,d1
000168C4 0241 007F                  		andi.w	#$7F,d1
000168C8 D041                       		add.w	d1,d0
000168CA 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
000168CE 6700                       		beq.s	@ghz		; if yes, branch		
000168D0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	
000168D6 6700                       		beq.s	@lz		
000168D8 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	
000168DE 6700                       		beq.s	@mz		
000168E0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w	
000168E6 6700                       		beq.s	@slz		
000168E8 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	
000168EE 6700                       		beq.s	@syz		
000168F0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w	
000168F6 6700                       		beq.s	@sbz				
000168F8 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
000168FE 6700                       		beq.s	@ghz		; if yes, branch
00016900 72FF                       		moveq	#-1,d1
00016902 6100 FF52                  		bsr.w	Floor_ChkTile_LocateBlock
00016906 2241                       		movea.l	d1,a1
00016908 4E75                       		rts	
0001690A                            ; ---------------------------------------------------------------------------
0001690A                            
0001690A                            @ghz:
0001690A 7200                       		moveq	#0,d1
0001690C 6100 FF48                  		bsr.w	Floor_ChkTile_LocateBlock
00016910 0681 0000 0000             		add.l	#Blk256_GHZ,d1
00016916 2241                       		movea.l	d1,a1
00016918 4E75                       		rts	
0001691A                            
0001691A                            @lz:
0001691A 7200                       		moveq	#0,d1
0001691C 6100 FF38                  		bsr.w	Floor_ChkTile_LocateBlock
00016920 0681 0000 0000             		add.l	#Blk256_LZ,d1
00016926 2241                       		movea.l	d1,a1
00016928 4E75                       		rts	
0001692A                            
0001692A                            @mz:
0001692A 7200                       		moveq	#0,d1
0001692C 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
00016930 0681 0000 0000             		add.l	#Blk256_MZ,d1
00016936 2241                       		movea.l	d1,a1
00016938 4E75                       		rts	
0001693A                            
0001693A                            @slz:
0001693A 7200                       		moveq	#0,d1
0001693C 6100 FF18                  		bsr.w	Floor_ChkTile_LocateBlock
00016940 0681 0000 0000             		add.l	#Blk256_SLZ,d1
00016946 2241                       		movea.l	d1,a1
00016948 4E75                       		rts	
0001694A                            
0001694A                            @syz:
0001694A 7200                       		moveq	#0,d1
0001694C 6100 FF08                  		bsr.w	Floor_ChkTile_LocateBlock
00016950 0681 0000 0000             		add.l	#Blk256_SYZ,d1
00016956 2241                       		movea.l	d1,a1
00016958 4E75                       		rts	
0001695A                            
0001695A                            @sbz:
0001695A 7200                       		moveq	#0,d1
0001695C 6100 FEF8                  		bsr.w	Floor_ChkTile_LocateBlock
00016960 0681 0000 0000             		add.l	#Blk256_SBZ,d1
00016966 2241                       		movea.l	d1,a1
00016968 4E75                       		rts			
0001696A                            ; End of function Floor_ChkTile
0001696A                            
0001696A                            
0001696A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001696A                            
0001696A                            
0001696A                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001696A 6100 FF4C                  		bsr.w	Floor_ChkTile
0001696E 3011                       		move.w	(a1),d0
00016970 3800                       		move.w	d0,d4
00016972 0240 07FF                  		andi.w	#$7FF,d0
00016976 6700                       		beq.s	loc_149DE
00016978 0B04                       		btst	d5,d4
0001697A 6600                       		bne.s	loc_149EC
0001697C                            
0001697C                            loc_149DE:
0001697C D44B                       		add.w	a3,d2
0001697E 6100 0000                  		bsr.w	FindFloor2
00016982 944B                       		sub.w	a3,d2
00016984 0641 0010                  		addi.w	#$10,d1
00016988 4E75                       		rts	
0001698A                            ; ===========================================================================
0001698A                            
0001698A                            loc_149EC:
0001698A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001698E 1032 0000                  		move.b	(a2,d0.w),d0
00016992 0240 00FF                  		andi.w	#$FF,d0
00016996 67E4                       		beq.s	loc_149DE
00016998 45F9 0000 0000             		lea	(AngleMap).l,a2
0001699E 18B2 0000                  		move.b	(a2,d0.w),(a4)
000169A2 E948                       		lsl.w	#4,d0
000169A4 3203                       		move.w	d3,d1
000169A6 0804 000B                  		btst	#$B,d4
000169AA 6700                       		beq.s	loc_14A12
000169AC 4641                       		not.w	d1
000169AE 4414                       		neg.b	(a4)
000169B0                            
000169B0                            loc_14A12:
000169B0 0804 000C                  		btst	#$C,d4
000169B4 6700                       		beq.s	loc_14A22
000169B6 0614 0040                  		addi.b	#$40,(a4)
000169BA 4414                       		neg.b	(a4)
000169BC 0414 0040                  		subi.b	#$40,(a4)
000169C0                            
000169C0                            loc_14A22:
000169C0 0241 000F                  		andi.w	#$F,d1
000169C4 D240                       		add.w	d0,d1
000169C6 45F9 0000 0000             		lea	(CollArray1).l,a2
000169CC 1032 1000                  		move.b	(a2,d1.w),d0
000169D0 4880                       		ext.w	d0
000169D2 BD44                       		eor.w	d6,d4
000169D4 0804 000C                  		btst	#$C,d4
000169D8 6700                       		beq.s	loc_14A3E
000169DA 4440                       		neg.w	d0
000169DC                            
000169DC                            loc_14A3E:
000169DC 4A40                       		tst.w	d0
000169DE 679C                       		beq.s	loc_149DE
000169E0 6B00                       		bmi.s	loc_14A5A
000169E2 0C00 0010                  		cmpi.b	#$10,d0
000169E6 6700                       		beq.s	loc_14A66
000169E8 3202                       		move.w	d2,d1
000169EA 0241 000F                  		andi.w	#$F,d1
000169EE D041                       		add.w	d1,d0
000169F0 323C 000F                  		move.w	#$F,d1
000169F4 9240                       		sub.w	d0,d1
000169F6 4E75                       		rts	
000169F8                            ; ===========================================================================
000169F8                            
000169F8                            loc_14A5A:
000169F8 3202                       		move.w	d2,d1
000169FA 0241 000F                  		andi.w	#$F,d1
000169FE D041                       		add.w	d1,d0
00016A00 6A00 FF7A                  		bpl.w	loc_149DE
00016A04                            
00016A04                            loc_14A66:
00016A04 944B                       		sub.w	a3,d2
00016A06 6100 0000                  		bsr.w	FindFloor2
00016A0A D44B                       		add.w	a3,d2
00016A0C 0441 0010                  		subi.w	#$10,d1
00016A10 4E75                       		rts	
00016A12                            ; End of function FindFloor
00016A12                            
00016A12                            
00016A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A12                            
00016A12                            
00016A12                            FindFloor2:				; XREF: FindFloor
00016A12 6100 FEA4                  		bsr.w	Floor_ChkTile
00016A16 3011                       		move.w	(a1),d0
00016A18 3800                       		move.w	d0,d4
00016A1A 0240 07FF                  		andi.w	#$7FF,d0
00016A1E 6700                       		beq.s	loc_14A86
00016A20 0B04                       		btst	d5,d4
00016A22 6600                       		bne.s	loc_14A94
00016A24                            
00016A24                            loc_14A86:
00016A24 323C 000F                  		move.w	#$F,d1
00016A28 3002                       		move.w	d2,d0
00016A2A 0240 000F                  		andi.w	#$F,d0
00016A2E 9240                       		sub.w	d0,d1
00016A30 4E75                       		rts	
00016A32                            ; ===========================================================================
00016A32                            
00016A32                            loc_14A94:
00016A32 2478 F796                  		movea.l	($FFFFF796).w,a2
00016A36 1032 0000                  		move.b	(a2,d0.w),d0
00016A3A 0240 00FF                  		andi.w	#$FF,d0
00016A3E 67E4                       		beq.s	loc_14A86
00016A40 45F9 0000 0000             		lea	(AngleMap).l,a2
00016A46 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016A4A E948                       		lsl.w	#4,d0
00016A4C 3203                       		move.w	d3,d1
00016A4E 0804 000B                  		btst	#$B,d4
00016A52 6700                       		beq.s	loc_14ABA
00016A54 4641                       		not.w	d1
00016A56 4414                       		neg.b	(a4)
00016A58                            
00016A58                            loc_14ABA:
00016A58 0804 000C                  		btst	#$C,d4
00016A5C 6700                       		beq.s	loc_14ACA
00016A5E 0614 0040                  		addi.b	#$40,(a4)
00016A62 4414                       		neg.b	(a4)
00016A64 0414 0040                  		subi.b	#$40,(a4)
00016A68                            
00016A68                            loc_14ACA:
00016A68 0241 000F                  		andi.w	#$F,d1
00016A6C D240                       		add.w	d0,d1
00016A6E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016A74 1032 1000                  		move.b	(a2,d1.w),d0
00016A78 4880                       		ext.w	d0
00016A7A BD44                       		eor.w	d6,d4
00016A7C 0804 000C                  		btst	#$C,d4
00016A80 6700                       		beq.s	loc_14AE6
00016A82 4440                       		neg.w	d0
00016A84                            
00016A84                            loc_14AE6:
00016A84 4A40                       		tst.w	d0
00016A86 679C                       		beq.s	loc_14A86
00016A88 6B00                       		bmi.s	loc_14AFC
00016A8A 3202                       		move.w	d2,d1
00016A8C 0241 000F                  		andi.w	#$F,d1
00016A90 D041                       		add.w	d1,d0
00016A92 323C 000F                  		move.w	#$F,d1
00016A96 9240                       		sub.w	d0,d1
00016A98 4E75                       		rts	
00016A9A                            ; ===========================================================================
00016A9A                            
00016A9A                            loc_14AFC:
00016A9A 3202                       		move.w	d2,d1
00016A9C 0241 000F                  		andi.w	#$F,d1
00016AA0 D041                       		add.w	d1,d0
00016AA2 6A00 FF80                  		bpl.w	loc_14A86
00016AA6 4641                       		not.w	d1
00016AA8 4E75                       		rts	
00016AAA                            ; End of function FindFloor2
00016AAA                            
00016AAA                            
00016AAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AAA                            
00016AAA                            
00016AAA                            FindWall:				; XREF: Sonic_WalkVertR; et al
00016AAA 6100 FE0C                  		bsr.w	Floor_ChkTile
00016AAE 3011                       		move.w	(a1),d0
00016AB0 3800                       		move.w	d0,d4
00016AB2 0240 07FF                  		andi.w	#$7FF,d0
00016AB6 6700                       		beq.s	loc_14B1E
00016AB8 0B04                       		btst	d5,d4
00016ABA 6600                       		bne.s	loc_14B2C
00016ABC                            
00016ABC                            loc_14B1E:
00016ABC D64B                       		add.w	a3,d3
00016ABE 6100 0000                  		bsr.w	FindWall2
00016AC2 964B                       		sub.w	a3,d3
00016AC4 0641 0010                  		addi.w	#$10,d1
00016AC8 4E75                       		rts	
00016ACA                            ; ===========================================================================
00016ACA                            
00016ACA                            loc_14B2C:
00016ACA 2478 F796                  		movea.l	($FFFFF796).w,a2
00016ACE 1032 0000                  		move.b	(a2,d0.w),d0
00016AD2 0240 00FF                  		andi.w	#$FF,d0
00016AD6 67E4                       		beq.s	loc_14B1E
00016AD8 45F9 0000 0000             		lea	(AngleMap).l,a2
00016ADE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016AE2 E948                       		lsl.w	#4,d0
00016AE4 3202                       		move.w	d2,d1
00016AE6 0804 000C                  		btst	#$C,d4
00016AEA 6700                       		beq.s	loc_14B5A
00016AEC 4641                       		not.w	d1
00016AEE 0614 0040                  		addi.b	#$40,(a4)
00016AF2 4414                       		neg.b	(a4)
00016AF4 0414 0040                  		subi.b	#$40,(a4)
00016AF8                            
00016AF8                            loc_14B5A:
00016AF8 0804 000B                  		btst	#$B,d4
00016AFC 6700                       		beq.s	loc_14B62
00016AFE 4414                       		neg.b	(a4)
00016B00                            
00016B00                            loc_14B62:
00016B00 0241 000F                  		andi.w	#$F,d1
00016B04 D240                       		add.w	d0,d1
00016B06 45F9 0000 0000             		lea	(CollArray2).l,a2
00016B0C 1032 1000                  		move.b	(a2,d1.w),d0
00016B10 4880                       		ext.w	d0
00016B12 BD44                       		eor.w	d6,d4
00016B14 0804 000B                  		btst	#$B,d4
00016B18 6700                       		beq.s	loc_14B7E
00016B1A 4440                       		neg.w	d0
00016B1C                            
00016B1C                            loc_14B7E:
00016B1C 4A40                       		tst.w	d0
00016B1E 679C                       		beq.s	loc_14B1E
00016B20 6B00                       		bmi.s	loc_14B9A
00016B22 0C00 0010                  		cmpi.b	#$10,d0
00016B26 6700                       		beq.s	loc_14BA6
00016B28 3203                       		move.w	d3,d1
00016B2A 0241 000F                  		andi.w	#$F,d1
00016B2E D041                       		add.w	d1,d0
00016B30 323C 000F                  		move.w	#$F,d1
00016B34 9240                       		sub.w	d0,d1
00016B36 4E75                       		rts	
00016B38                            ; ===========================================================================
00016B38                            
00016B38                            loc_14B9A:
00016B38 3203                       		move.w	d3,d1
00016B3A 0241 000F                  		andi.w	#$F,d1
00016B3E D041                       		add.w	d1,d0
00016B40 6A00 FF7A                  		bpl.w	loc_14B1E
00016B44                            
00016B44                            loc_14BA6:
00016B44 964B                       		sub.w	a3,d3
00016B46 6100 0000                  		bsr.w	FindWall2
00016B4A D64B                       		add.w	a3,d3
00016B4C 0441 0010                  		subi.w	#$10,d1
00016B50 4E75                       		rts	
00016B52                            ; End of function FindWall
00016B52                            
00016B52                            
00016B52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B52                            
00016B52                            
00016B52                            FindWall2:				; XREF: FindWall
00016B52 6100 FD64                  		bsr.w	Floor_ChkTile
00016B56 3011                       		move.w	(a1),d0
00016B58 3800                       		move.w	d0,d4
00016B5A 0240 07FF                  		andi.w	#$7FF,d0
00016B5E 6700                       		beq.s	loc_14BC6
00016B60 0B04                       		btst	d5,d4
00016B62 6600                       		bne.s	loc_14BD4
00016B64                            
00016B64                            loc_14BC6:
00016B64 323C 000F                  		move.w	#$F,d1
00016B68 3003                       		move.w	d3,d0
00016B6A 0240 000F                  		andi.w	#$F,d0
00016B6E 9240                       		sub.w	d0,d1
00016B70 4E75                       		rts	
00016B72                            ; ===========================================================================
00016B72                            
00016B72                            loc_14BD4:
00016B72 2478 F796                  		movea.l	($FFFFF796).w,a2
00016B76 1032 0000                  		move.b	(a2,d0.w),d0
00016B7A 0240 00FF                  		andi.w	#$FF,d0
00016B7E 67E4                       		beq.s	loc_14BC6
00016B80 45F9 0000 0000             		lea	(AngleMap).l,a2
00016B86 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016B8A E948                       		lsl.w	#4,d0
00016B8C 3202                       		move.w	d2,d1
00016B8E 0804 000C                  		btst	#$C,d4
00016B92 6700                       		beq.s	loc_14C02
00016B94 4641                       		not.w	d1
00016B96 0614 0040                  		addi.b	#$40,(a4)
00016B9A 4414                       		neg.b	(a4)
00016B9C 0414 0040                  		subi.b	#$40,(a4)
00016BA0                            
00016BA0                            loc_14C02:
00016BA0 0804 000B                  		btst	#$B,d4
00016BA4 6700                       		beq.s	loc_14C0A
00016BA6 4414                       		neg.b	(a4)
00016BA8                            
00016BA8                            loc_14C0A:
00016BA8 0241 000F                  		andi.w	#$F,d1
00016BAC D240                       		add.w	d0,d1
00016BAE 45F9 0000 0000             		lea	(CollArray2).l,a2
00016BB4 1032 1000                  		move.b	(a2,d1.w),d0
00016BB8 4880                       		ext.w	d0
00016BBA BD44                       		eor.w	d6,d4
00016BBC 0804 000B                  		btst	#$B,d4
00016BC0 6700                       		beq.s	loc_14C26
00016BC2 4440                       		neg.w	d0
00016BC4                            
00016BC4                            loc_14C26:
00016BC4 4A40                       		tst.w	d0
00016BC6 679C                       		beq.s	loc_14BC6
00016BC8 6B00                       		bmi.s	loc_14C3C
00016BCA 3203                       		move.w	d3,d1
00016BCC 0241 000F                  		andi.w	#$F,d1
00016BD0 D041                       		add.w	d1,d0
00016BD2 323C 000F                  		move.w	#$F,d1
00016BD6 9240                       		sub.w	d0,d1
00016BD8 4E75                       		rts	
00016BDA                            ; ===========================================================================
00016BDA                            
00016BDA                            loc_14C3C:
00016BDA 3203                       		move.w	d3,d1
00016BDC 0241 000F                  		andi.w	#$F,d1
00016BE0 D041                       		add.w	d1,d0
00016BE2 6A00 FF80                  		bpl.w	loc_14BC6
00016BE6 4641                       		not.w	d1
00016BE8 4E75                       		rts	
00016BEA                            ; End of function FindWall2
00016BEA                            
00016BEA                            ; ---------------------------------------------------------------------------
00016BEA                            ; Unused floor/wall subroutine - logs something	to do with collision
00016BEA                            ; ---------------------------------------------------------------------------
00016BEA                            
00016BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BEA                            
00016BEA                            
00016BEA                            FloorLog_Unk:				; XREF: Level
00016BEA 4E75                       		rts	
00016BEC                            
00016BEC 43F9 0000 0000             		lea	(CollArray1).l,a1
00016BF2 45F9 0000 0000             		lea	(CollArray1).l,a2
00016BF8 363C 00FF                  		move.w	#$FF,d3
00016BFC                            
00016BFC                            loc_14C5E:
00016BFC 7A10                       		moveq	#$10,d5
00016BFE 343C 000F                  		move.w	#$F,d2
00016C02                            
00016C02                            loc_14C64:
00016C02 7800                       		moveq	#0,d4
00016C04 323C 000F                  		move.w	#$F,d1
00016C08                            
00016C08                            loc_14C6A:
00016C08 3019                       		move.w	(a1)+,d0
00016C0A EAA8                       		lsr.l	d5,d0
00016C0C D944                       		addx.w	d4,d4
00016C0E 51C9 FFF8                  		dbf	d1,loc_14C6A
00016C12                            
00016C12 34C4                       		move.w	d4,(a2)+
00016C14 92FC 0020                  		suba.w	#$20,a1
00016C18 5345                       		subq.w	#1,d5
00016C1A 51CA FFE6                  		dbf	d2,loc_14C64
00016C1E                            
00016C1E D2FC 0020                  		adda.w	#$20,a1
00016C22 51CB FFD8                  		dbf	d3,loc_14C5E
00016C26                            
00016C26 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C2C 45F9 0000 0000             		lea	(CollArray2).l,a2
00016C32 6100                       		bsr.s	FloorLog_Unk2
00016C34 43F9 0000 0000             		lea	(CollArray1).l,a1
00016C3A 45F9 0000 0000             		lea	(CollArray1).l,a2
00016C40                            
00016C40                            ; End of function FloorLog_Unk
00016C40                            
00016C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C40                            
00016C40                            
00016C40                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016C40 363C 0FFF                  		move.w	#$FFF,d3
00016C44                            
00016C44                            loc_14CA6:
00016C44 7400                       		moveq	#0,d2
00016C46 323C 000F                  		move.w	#$F,d1
00016C4A 3019                       		move.w	(a1)+,d0
00016C4C 6700                       		beq.s	loc_14CD4
00016C4E 6B00                       		bmi.s	loc_14CBE
00016C50                            
00016C50                            loc_14CB2:
00016C50 E248                       		lsr.w	#1,d0
00016C52 6400                       		bcc.s	loc_14CB8
00016C54 5202                       		addq.b	#1,d2
00016C56                            
00016C56                            loc_14CB8:
00016C56 51C9 FFF8                  		dbf	d1,loc_14CB2
00016C5A                            
00016C5A 6000                       		bra.s	loc_14CD6
00016C5C                            ; ===========================================================================
00016C5C                            
00016C5C                            loc_14CBE:
00016C5C 0C40 FFFF                  		cmpi.w	#-1,d0
00016C60 6700                       		beq.s	loc_14CD0
00016C62                            
00016C62                            loc_14CC4:
00016C62 E348                       		lsl.w	#1,d0
00016C64 6400                       		bcc.s	loc_14CCA
00016C66 5302                       		subq.b	#1,d2
00016C68                            
00016C68                            loc_14CCA:
00016C68 51C9 FFF8                  		dbf	d1,loc_14CC4
00016C6C                            
00016C6C 6000                       		bra.s	loc_14CD6
00016C6E                            ; ===========================================================================
00016C6E                            
00016C6E                            loc_14CD0:
00016C6E 303C 0010                  		move.w	#$10,d0
00016C72                            
00016C72                            loc_14CD4:
00016C72 3400                       		move.w	d0,d2
00016C74                            
00016C74                            loc_14CD6:
00016C74 14C2                       		move.b	d2,(a2)+
00016C76 51CB FFCC                  		dbf	d3,loc_14CA6
00016C7A                            
00016C7A 4E75                       		rts	
00016C7C                            
00016C7C                            ; End of function FloorLog_Unk2
00016C7C                            
00016C7C                            
00016C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C7C                            
00016C7C                            
00016C7C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016C7C 2628 0008                  		move.l	8(a0),d3
00016C80 2428 000C                  		move.l	$C(a0),d2
00016C84 3228 0010                  		move.w	$10(a0),d1
00016C88 48C1                       		ext.l	d1
00016C8A E181                       		asl.l	#8,d1
00016C8C D681                       		add.l	d1,d3
00016C8E 3228 0012                  		move.w	$12(a0),d1
00016C92 48C1                       		ext.l	d1
00016C94 E181                       		asl.l	#8,d1
00016C96 D481                       		add.l	d1,d2
00016C98 4842                       		swap	d2
00016C9A 4843                       		swap	d3
00016C9C 11C0 F768                  		move.b	d0,($FFFFF768).w
00016CA0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016CA4 1200                       		move.b	d0,d1
00016CA6 0600 0020                  		addi.b	#$20,d0
00016CAA 6A00                       		bpl.s	loc_14D1A
00016CAC 1001                       		move.b	d1,d0
00016CAE 6A00                       		bpl.s	loc_14D14
00016CB0 5300                       		subq.b	#1,d0
00016CB2                            
00016CB2                            loc_14D14:
00016CB2 0600 0020                  		addi.b	#$20,d0
00016CB6 6000                       		bra.s	loc_14D24
00016CB8                            ; ===========================================================================
00016CB8                            
00016CB8                            loc_14D1A:
00016CB8 1001                       		move.b	d1,d0
00016CBA 6A00                       		bpl.s	loc_14D20
00016CBC 5200                       		addq.b	#1,d0
00016CBE                            
00016CBE                            loc_14D20:
00016CBE 0600 001F                  		addi.b	#$1F,d0
00016CC2                            
00016CC2                            loc_14D24:
00016CC2 0200 00C0                  		andi.b	#$C0,d0
00016CC6 6700 0000                  		beq.w	loc_14DF0
00016CCA 0C00 0080                  		cmpi.b	#$80,d0
00016CCE 6700 0000                  		beq.w	loc_14F7C
00016CD2 0201 0038                  		andi.b	#$38,d1
00016CD6 6600                       		bne.s	loc_14D3C
00016CD8 5042                       		addq.w	#8,d2
00016CDA                            
00016CDA                            loc_14D3C:
00016CDA 0C00 0040                  		cmpi.b	#$40,d0
00016CDE 6700 0000                  		beq.w	loc_1504A
00016CE2 6000 0000                  		bra.w	loc_14EBC
00016CE6                            
00016CE6                            ; End of function Sonic_WalkSpeed
00016CE6                            
00016CE6                            
00016CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016CE6                            
00016CE6                            
00016CE6                            sub_14D48:				; XREF: Sonic_Jump
00016CE6 11C0 F768                  		move.b	d0,($FFFFF768).w
00016CEA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016CEE 0600 0020                  		addi.b	#$20,d0
00016CF2 0200 00C0                  		andi.b	#$C0,d0
00016CF6 0C00 0040                  		cmpi.b	#$40,d0
00016CFA 6700 0000                  		beq.w	loc_14FD6
00016CFE 0C00 0080                  		cmpi.b	#$80,d0
00016D02 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016D06 0C00 00C0                  		cmpi.b	#$C0,d0
00016D0A 6700 0000                  		beq.w	sub_14E50
00016D0E                            
00016D0E                            ; End of function sub_14D48
00016D0E                            
00016D0E                            ; ---------------------------------------------------------------------------
00016D0E                            ; Subroutine to	make Sonic land	on the floor after jumping
00016D0E                            ; ---------------------------------------------------------------------------
00016D0E                            
00016D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D0E                            
00016D0E                            
00016D0E                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016D0E 3428 000C                  		move.w	$C(a0),d2
00016D12 3628 0008                  		move.w	8(a0),d3
00016D16 7000                       		moveq	#0,d0
00016D18 1028 0016                  		move.b	$16(a0),d0
00016D1C 4880                       		ext.w	d0
00016D1E D440                       		add.w	d0,d2
00016D20 1028 0017                  		move.b	$17(a0),d0
00016D24 4880                       		ext.w	d0
00016D26 D640                       		add.w	d0,d3
00016D28 49F8 F768                  		lea	($FFFFF768).w,a4
00016D2C 367C 0010                  		movea.w	#$10,a3
00016D30 3C3C 0000                  		move.w	#0,d6
00016D34 7A0D                       		moveq	#$D,d5
00016D36 6100 FC32                  		bsr.w	FindFloor
00016D3A 3F01                       		move.w	d1,-(sp)
00016D3C 3428 000C                  		move.w	$C(a0),d2
00016D40 3628 0008                  		move.w	8(a0),d3
00016D44 7000                       		moveq	#0,d0
00016D46 1028 0016                  		move.b	$16(a0),d0
00016D4A 4880                       		ext.w	d0
00016D4C D440                       		add.w	d0,d2
00016D4E 1028 0017                  		move.b	$17(a0),d0
00016D52 4880                       		ext.w	d0
00016D54 9640                       		sub.w	d0,d3
00016D56 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016D5A 367C 0010                  		movea.w	#$10,a3
00016D5E 3C3C 0000                  		move.w	#0,d6
00016D62 7A0D                       		moveq	#$D,d5
00016D64 6100 FC04                  		bsr.w	FindFloor
00016D68 301F                       		move.w	(sp)+,d0
00016D6A 143C 0000                  		move.b	#0,d2
00016D6E                            
00016D6E                            loc_14DD0:
00016D6E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016D72 B240                       		cmp.w	d0,d1
00016D74 6F00                       		ble.s	loc_14DDE
00016D76 1638 F768                  		move.b	($FFFFF768).w,d3
00016D7A C141                       		exg	d0,d1
00016D7C                            
00016D7C                            loc_14DDE:
00016D7C 0803 0000                  		btst	#0,d3
00016D80 6700                       		beq.s	locret_14DE6
00016D82 1602                       		move.b	d2,d3
00016D84                            
00016D84                            locret_14DE6:
00016D84 4E75                       		rts	
00016D86                            
00016D86                            ; End of function Sonic_HitFloor
00016D86                            
00016D86                            ; ===========================================================================
00016D86 3428 000C                  		move.w	$C(a0),d2
00016D8A 3628 0008                  		move.w	8(a0),d3
00016D8E                            
00016D8E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016D8E 0642 000A                  		addi.w	#$A,d2
00016D92 49F8 F768                  		lea	($FFFFF768).w,a4
00016D96 367C 0010                  		movea.w	#$10,a3
00016D9A 3C3C 0000                  		move.w	#0,d6
00016D9E 7A0E                       		moveq	#$E,d5
00016DA0 6100 FBC8                  		bsr.w	FindFloor
00016DA4 143C 0000                  		move.b	#0,d2
00016DA8                            
00016DA8                            loc_14E0A:				; XREF: sub_14EB4
00016DA8 1638 F768                  		move.b	($FFFFF768).w,d3
00016DAC 0803 0000                  		btst	#0,d3
00016DB0 6700                       		beq.s	locret_14E16
00016DB2 1602                       		move.b	d2,d3
00016DB4                            
00016DB4                            locret_14E16:
00016DB4 4E75                       		rts	
00016DB6                            
00016DB6                            ; ---------------------------------------------------------------------------
00016DB6                            ; Subroutine allowing objects to interact with the floor
00016DB6                            ; ---------------------------------------------------------------------------
00016DB6                            
00016DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DB6                            
00016DB6                            
00016DB6                            ObjHitFloor:
00016DB6 3628 0008                  		move.w	8(a0),d3
00016DBA                            
00016DBA                            ; End of function ObjHitFloor
00016DBA                            
00016DBA                            
00016DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DBA                            
00016DBA                            
00016DBA                            ObjHitFloor2:
00016DBA 3428 000C                  		move.w	$C(a0),d2
00016DBE 7000                       		moveq	#0,d0
00016DC0 1028 0016                  		move.b	$16(a0),d0
00016DC4 4880                       		ext.w	d0
00016DC6 D440                       		add.w	d0,d2
00016DC8 49F8 F768                  		lea	($FFFFF768).w,a4
00016DCC 18BC 0000                  		move.b	#0,(a4)
00016DD0 367C 0010                  		movea.w	#$10,a3
00016DD4 3C3C 0000                  		move.w	#0,d6
00016DD8 7A0D                       		moveq	#$D,d5
00016DDA 6100 FB8E                  		bsr.w	FindFloor
00016DDE 1638 F768                  		move.b	($FFFFF768).w,d3
00016DE2 0803 0000                  		btst	#0,d3
00016DE6 6700                       		beq.s	locret_14E4E
00016DE8 163C 0000                  		move.b	#0,d3
00016DEC                            
00016DEC                            locret_14E4E:
00016DEC 4E75                       		rts	
00016DEE                            ; End of function ObjHitFloor2
00016DEE                            
00016DEE                            
00016DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DEE                            
00016DEE                            
00016DEE                            sub_14E50:				; XREF: sub_14D48
00016DEE 3428 000C                  		move.w	$C(a0),d2
00016DF2 3628 0008                  		move.w	8(a0),d3
00016DF6 7000                       		moveq	#0,d0
00016DF8 1028 0017                  		move.b	$17(a0),d0
00016DFC 4880                       		ext.w	d0
00016DFE 9440                       		sub.w	d0,d2
00016E00 1028 0016                  		move.b	$16(a0),d0
00016E04 4880                       		ext.w	d0
00016E06 D640                       		add.w	d0,d3
00016E08 49F8 F768                  		lea	($FFFFF768).w,a4
00016E0C 367C 0010                  		movea.w	#$10,a3
00016E10 3C3C 0000                  		move.w	#0,d6
00016E14 7A0E                       		moveq	#$E,d5
00016E16 6100 FC92                  		bsr.w	FindWall
00016E1A 3F01                       		move.w	d1,-(sp)
00016E1C 3428 000C                  		move.w	$C(a0),d2
00016E20 3628 0008                  		move.w	8(a0),d3
00016E24 7000                       		moveq	#0,d0
00016E26 1028 0017                  		move.b	$17(a0),d0
00016E2A 4880                       		ext.w	d0
00016E2C D440                       		add.w	d0,d2
00016E2E 1028 0016                  		move.b	$16(a0),d0
00016E32 4880                       		ext.w	d0
00016E34 D640                       		add.w	d0,d3
00016E36 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016E3A 367C 0010                  		movea.w	#$10,a3
00016E3E 3C3C 0000                  		move.w	#0,d6
00016E42 7A0E                       		moveq	#$E,d5
00016E44 6100 FC64                  		bsr.w	FindWall
00016E48 301F                       		move.w	(sp)+,d0
00016E4A 143C 00C0                  		move.b	#-$40,d2
00016E4E 6000 FF1E                  		bra.w	loc_14DD0
00016E52                            
00016E52                            ; End of function sub_14E50
00016E52                            
00016E52                            
00016E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E52                            
00016E52                            
00016E52                            sub_14EB4:				; XREF: Sonic_Floor
00016E52 3428 000C                  		move.w	$C(a0),d2
00016E56 3628 0008                  		move.w	8(a0),d3
00016E5A                            
00016E5A                            loc_14EBC:
00016E5A 0643 000A                  		addi.w	#$A,d3
00016E5E 49F8 F768                  		lea	($FFFFF768).w,a4
00016E62 367C 0010                  		movea.w	#$10,a3
00016E66 3C3C 0000                  		move.w	#0,d6
00016E6A 7A0E                       		moveq	#$E,d5
00016E6C 6100 FC3C                  		bsr.w	FindWall
00016E70 143C 00C0                  		move.b	#-$40,d2
00016E74 6000 FF32                  		bra.w	loc_14E0A
00016E78                            
00016E78                            ; End of function sub_14EB4
00016E78                            
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            ; Subroutine to	detect when an object hits a wall to its right
00016E78                            ; ---------------------------------------------------------------------------
00016E78                            
00016E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E78                            
00016E78                            
00016E78                            ObjHitWallRight:
00016E78 D668 0008                  		add.w	8(a0),d3
00016E7C 3428 000C                  		move.w	$C(a0),d2
00016E80 49F8 F768                  		lea	($FFFFF768).w,a4
00016E84 18BC 0000                  		move.b	#0,(a4)
00016E88 367C 0010                  		movea.w	#$10,a3
00016E8C 3C3C 0000                  		move.w	#0,d6
00016E90 7A0E                       		moveq	#$E,d5
00016E92 6100 FC16                  		bsr.w	FindWall
00016E96 1638 F768                  		move.b	($FFFFF768).w,d3
00016E9A 0803 0000                  		btst	#0,d3
00016E9E 6700                       		beq.s	locret_14F06
00016EA0 163C 00C0                  		move.b	#-$40,d3
00016EA4                            
00016EA4                            locret_14F06:
00016EA4 4E75                       		rts	
00016EA6                            
00016EA6                            ; End of function ObjHitWallRight
00016EA6                            
00016EA6                            ; ---------------------------------------------------------------------------
00016EA6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016EA6                            ; touches them
00016EA6                            ; ---------------------------------------------------------------------------
00016EA6                            
00016EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EA6                            
00016EA6                            
00016EA6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016EA6 3428 000C                  		move.w	$C(a0),d2
00016EAA 3628 0008                  		move.w	8(a0),d3
00016EAE 7000                       		moveq	#0,d0
00016EB0 1028 0016                  		move.b	$16(a0),d0
00016EB4 4880                       		ext.w	d0
00016EB6 9440                       		sub.w	d0,d2
00016EB8 0A42 000F                  		eori.w	#$F,d2
00016EBC 1028 0017                  		move.b	$17(a0),d0
00016EC0 4880                       		ext.w	d0
00016EC2 D640                       		add.w	d0,d3
00016EC4 49F8 F768                  		lea	($FFFFF768).w,a4
00016EC8 367C FFF0                  		movea.w	#-$10,a3
00016ECC 3C3C 1000                  		move.w	#$1000,d6
00016ED0 7A0E                       		moveq	#$E,d5
00016ED2 6100 FA96                  		bsr.w	FindFloor
00016ED6 3F01                       		move.w	d1,-(sp)
00016ED8 3428 000C                  		move.w	$C(a0),d2
00016EDC 3628 0008                  		move.w	8(a0),d3
00016EE0 7000                       		moveq	#0,d0
00016EE2 1028 0016                  		move.b	$16(a0),d0
00016EE6 4880                       		ext.w	d0
00016EE8 9440                       		sub.w	d0,d2
00016EEA 0A42 000F                  		eori.w	#$F,d2
00016EEE 1028 0017                  		move.b	$17(a0),d0
00016EF2 4880                       		ext.w	d0
00016EF4 9640                       		sub.w	d0,d3
00016EF6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016EFA 367C FFF0                  		movea.w	#-$10,a3
00016EFE 3C3C 1000                  		move.w	#$1000,d6
00016F02 7A0E                       		moveq	#$E,d5
00016F04 6100 FA64                  		bsr.w	FindFloor
00016F08 301F                       		move.w	(sp)+,d0
00016F0A 143C 0080                  		move.b	#-$80,d2
00016F0E 6000 FE5E                  		bra.w	loc_14DD0
00016F12                            ; End of function Sonic_DontRunOnWalls
00016F12                            
00016F12                            ; ===========================================================================
00016F12 3428 000C                  		move.w	$C(a0),d2
00016F16 3628 0008                  		move.w	8(a0),d3
00016F1A                            
00016F1A                            loc_14F7C:
00016F1A 0442 000A                  		subi.w	#$A,d2
00016F1E 0A42 000F                  		eori.w	#$F,d2
00016F22 49F8 F768                  		lea	($FFFFF768).w,a4
00016F26 367C FFF0                  		movea.w	#-$10,a3
00016F2A 3C3C 1000                  		move.w	#$1000,d6
00016F2E 7A0E                       		moveq	#$E,d5
00016F30 6100 FA38                  		bsr.w	FindFloor
00016F34 143C 0080                  		move.b	#-$80,d2
00016F38 6000 FE6E                  		bra.w	loc_14E0A
00016F3C                            
00016F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F3C                            
00016F3C                            
00016F3C                            ObjHitCeiling:
00016F3C 3428 000C                  		move.w	$C(a0),d2
00016F40 3628 0008                  		move.w	8(a0),d3
00016F44 7000                       		moveq	#0,d0
00016F46 1028 0016                  		move.b	$16(a0),d0
00016F4A 4880                       		ext.w	d0
00016F4C 9440                       		sub.w	d0,d2
00016F4E 0A42 000F                  		eori.w	#$F,d2
00016F52 49F8 F768                  		lea	($FFFFF768).w,a4
00016F56 367C FFF0                  		movea.w	#-$10,a3
00016F5A 3C3C 1000                  		move.w	#$1000,d6
00016F5E 7A0E                       		moveq	#$E,d5
00016F60 6100 FA08                  		bsr.w	FindFloor
00016F64 1638 F768                  		move.b	($FFFFF768).w,d3
00016F68 0803 0000                  		btst	#0,d3
00016F6C 6700                       		beq.s	locret_14FD4
00016F6E 163C 0080                  		move.b	#-$80,d3
00016F72                            
00016F72                            locret_14FD4:
00016F72 4E75                       		rts	
00016F74                            ; End of function ObjHitCeiling
00016F74                            
00016F74                            ; ===========================================================================
00016F74                            
00016F74                            loc_14FD6:				; XREF: sub_14D48
00016F74 3428 000C                  		move.w	$C(a0),d2
00016F78 3628 0008                  		move.w	8(a0),d3
00016F7C 7000                       		moveq	#0,d0
00016F7E 1028 0017                  		move.b	$17(a0),d0
00016F82 4880                       		ext.w	d0
00016F84 9440                       		sub.w	d0,d2
00016F86 1028 0016                  		move.b	$16(a0),d0
00016F8A 4880                       		ext.w	d0
00016F8C 9640                       		sub.w	d0,d3
00016F8E 0A43 000F                  		eori.w	#$F,d3
00016F92 49F8 F768                  		lea	($FFFFF768).w,a4
00016F96 367C FFF0                  		movea.w	#-$10,a3
00016F9A 3C3C 0800                  		move.w	#$800,d6
00016F9E 7A0E                       		moveq	#$E,d5
00016FA0 6100 FB08                  		bsr.w	FindWall
00016FA4 3F01                       		move.w	d1,-(sp)
00016FA6 3428 000C                  		move.w	$C(a0),d2
00016FAA 3628 0008                  		move.w	8(a0),d3
00016FAE 7000                       		moveq	#0,d0
00016FB0 1028 0017                  		move.b	$17(a0),d0
00016FB4 4880                       		ext.w	d0
00016FB6 D440                       		add.w	d0,d2
00016FB8 1028 0016                  		move.b	$16(a0),d0
00016FBC 4880                       		ext.w	d0
00016FBE 9640                       		sub.w	d0,d3
00016FC0 0A43 000F                  		eori.w	#$F,d3
00016FC4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016FC8 367C FFF0                  		movea.w	#-$10,a3
00016FCC 3C3C 0800                  		move.w	#$800,d6
00016FD0 7A0E                       		moveq	#$E,d5
00016FD2 6100 FAD6                  		bsr.w	FindWall
00016FD6 301F                       		move.w	(sp)+,d0
00016FD8 143C 0040                  		move.b	#$40,d2
00016FDC 6000 FD90                  		bra.w	loc_14DD0
00016FE0                            
00016FE0                            ; ---------------------------------------------------------------------------
00016FE0                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016FE0                            ; ---------------------------------------------------------------------------
00016FE0                            
00016FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FE0                            
00016FE0                            
00016FE0                            Sonic_HitWall:				; XREF: Sonic_Floor
00016FE0 3428 000C                  		move.w	$C(a0),d2
00016FE4 3628 0008                  		move.w	8(a0),d3
00016FE8                            
00016FE8                            loc_1504A:
00016FE8 0443 000A                  		subi.w	#$A,d3
00016FEC 0A43 000F                  		eori.w	#$F,d3
00016FF0 49F8 F768                  		lea	($FFFFF768).w,a4
00016FF4 367C FFF0                  		movea.w	#-$10,a3
00016FF8 3C3C 0800                  		move.w	#$800,d6
00016FFC 7A0E                       		moveq	#$E,d5
00016FFE 6100 FAAA                  		bsr.w	FindWall
00017002 143C 0040                  		move.b	#$40,d2
00017006 6000 FDA0                  		bra.w	loc_14E0A
0001700A                            ; End of function Sonic_HitWall
0001700A                            
0001700A                            ; ---------------------------------------------------------------------------
0001700A                            ; Subroutine to	detect when an object hits a wall to its left
0001700A                            ; ---------------------------------------------------------------------------
0001700A                            
0001700A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001700A                            
0001700A                            
0001700A                            ObjHitWallLeft:
0001700A D668 0008                  		add.w	8(a0),d3
0001700E 3428 000C                  		move.w	$C(a0),d2
00017012 49F8 F768                  		lea	($FFFFF768).w,a4
00017016 18BC 0000                  		move.b	#0,(a4)
0001701A 367C FFF0                  		movea.w	#-$10,a3
0001701E 3C3C 0800                  		move.w	#$800,d6
00017022 7A0E                       		moveq	#$E,d5
00017024 6100 FA84                  		bsr.w	FindWall
00017028 1638 F768                  		move.b	($FFFFF768).w,d3
0001702C 0803 0000                  		btst	#0,d3
00017030 6700                       		beq.s	locret_15098
00017032 163C 0040                  		move.b	#$40,d3
00017036                            
00017036                            locret_15098:
00017036 4E75                       		rts	
00017038                            ; End of function ObjHitWallLeft
00017038                            
00017038                            ; ===========================================================================
00017038                            ; ---------------------------------------------------------------------------
00017038                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00017038                            ; ---------------------------------------------------------------------------
00017038                            
00017038                            Obj66:					; XREF: Obj_Index
00017038 7000                       		moveq	#0,d0
0001703A 1028 0024                  		move.b	$24(a0),d0
0001703E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00017042 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00017046                            ; ===========================================================================
00017046 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00017048 0000                       		dc.w Obj66_Action-Obj66_Index
0001704A 0000                       		dc.w Obj66_Display-Obj66_Index
0001704C 0000                       		dc.w Obj66_Release-Obj66_Index
0001704E                            ; ===========================================================================
0001704E                            
0001704E                            Obj66_Main:				; XREF: Obj66_Index
0001704E 5428 0024                  		addq.b	#2,$24(a0)
00017052 323C 0001                  		move.w	#1,d1
00017056 2248                       		movea.l	a0,a1
00017058 6000                       		bra.s	Obj66_MakeItem
0001705A                            ; ===========================================================================
0001705A                            
0001705A                            Obj66_Loop:
0001705A 6100 800A                  		bsr.w	SingleObjLoad
0001705E 6600                       		bne.s	loc_150FE
00017060 12BC 0066                  		move.b	#$66,0(a1)
00017064 5829 0024                  		addq.b	#4,$24(a1)
00017068 3368 0008 0008             		move.w	8(a0),8(a1)
0001706E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017074 137C 0003 0018             		move.b	#3,$18(a1)
0001707A 137C 0010 001A             		move.b	#$10,$1A(a1)
00017080                            
00017080                            Obj66_MakeItem:				; XREF: Obj66_Main
00017080 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00017088 337C 4348 0002             		move.w	#$4348,2(a1)
0001708E 0029 0004 0001             		ori.b	#4,1(a1)
00017094 137C 0038 0019             		move.b	#$38,$19(a1)
0001709A                            
0001709A                            loc_150FE:
0001709A 51C9 FFBE                  		dbf	d1,Obj66_Loop
0001709E                            
0001709E 117C 0030 0019             		move.b	#$30,$19(a0)
000170A4 117C 0004 0018             		move.b	#4,$18(a0)
000170AA 317C 003C 0030             		move.w	#$3C,$30(a0)
000170B0 117C 0001 0034             		move.b	#1,$34(a0)
000170B6 1168 0028 0038             		move.b	$28(a0),$38(a0)
000170BC                            
000170BC                            Obj66_Action:				; XREF: Obj66_Index
000170BC 6100 0000                  		bsr.w	Obj66_ChkSwitch
000170C0 4A28 0001                  		tst.b	1(a0)
000170C4 6A00 0000                  		bpl.w	Obj66_Display
000170C8 323C 0030                  		move.w	#$30,d1
000170CC 3401                       		move.w	d1,d2
000170CE 3602                       		move.w	d2,d3
000170D0 5243                       		addq.w	#1,d3
000170D2 3828 0008                  		move.w	8(a0),d4
000170D6 6100 A1A6                  		bsr.w	SolidObject
000170DA 0828 0005 0022             		btst	#5,$22(a0)
000170E0 6700 0000                  		beq.w	Obj66_Display
000170E4 43F8 D000                  		lea	($FFFFD000).w,a1
000170E8 720E                       		moveq	#$E,d1
000170EA 3029 0008                  		move.w	8(a1),d0
000170EE B068 0008                  		cmp.w	8(a0),d0
000170F2 6500                       		bcs.s	Obj66_GrabSonic
000170F4 7207                       		moveq	#7,d1
000170F6                            
000170F6                            Obj66_GrabSonic:
000170F6 B228 001A                  		cmp.b	$1A(a0),d1
000170FA 6600                       		bne.s	Obj66_Display
000170FC 1141 0032                  		move.b	d1,$32(a0)
00017100 5828 0024                  		addq.b	#4,$24(a0)
00017104 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001710A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00017110 337C 0800 0020             		move.w	#$800,$20(a1)
00017116 337C 0000 0010             		move.w	#0,$10(a1)
0001711C 337C 0000 0012             		move.w	#0,$12(a1)
00017122 08A8 0005 0022             		bclr	#5,$22(a0)
00017128 08A9 0005 0022             		bclr	#5,$22(a1)
0001712E 08E9 0001 0022             		bset	#1,$22(a1)
00017134 3429 0008                  		move.w	8(a1),d2
00017138 3629 000C                  		move.w	$C(a1),d3
0001713C 6100 0000                  		bsr.w	Obj66_ChgPos
00017140 D569 0008                  		add.w	d2,8(a1)
00017144 D769 000C                  		add.w	d3,$C(a1)
00017148 E0E9 0008                  		asr	8(a1)
0001714C E0E9 000C                  		asr	$C(a1)
00017150                            
00017150                            Obj66_Display:				; XREF: Obj66_Index
00017150 6000 9E08                  		bra.w	MarkObjGone
00017154                            ; ===========================================================================
00017154                            
00017154                            Obj66_Release:				; XREF: Obj66_Index
00017154 1028 001A                  		move.b	$1A(a0),d0
00017158 0C00 0004                  		cmpi.b	#4,d0
0001715C 6700                       		beq.s	loc_151C8
0001715E 0C00 0007                  		cmpi.b	#7,d0
00017162 6600                       		bne.s	loc_151F8
00017164                            
00017164                            loc_151C8:
00017164 B028 0032                  		cmp.b	$32(a0),d0
00017168 6700                       		beq.s	loc_151F8
0001716A 43F8 D000                  		lea	($FFFFD000).w,a1
0001716E 337C 0000 0010             		move.w	#0,$10(a1)
00017174 337C 0800 0012             		move.w	#$800,$12(a1)
0001717A 0C00 0004                  		cmpi.b	#4,d0
0001717E 6700                       		beq.s	loc_151F0
00017180 337C 0800 0010             		move.w	#$800,$10(a1)
00017186 337C 0800 0012             		move.w	#$800,$12(a1)
0001718C                            
0001718C                            loc_151F0:
0001718C 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00017190 5928 0024                  		subq.b	#4,$24(a0)
00017194                            
00017194                            loc_151F8:
00017194 6100                       		bsr.s	Obj66_ChkSwitch
00017196 6100                       		bsr.s	Obj66_ChgPos
00017198 6000 9DC0                  		bra.w	MarkObjGone
0001719C                            
0001719C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001719C                            
0001719C                            
0001719C                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001719C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000171A0 7000                       		moveq	#0,d0
000171A2 1028 0038                  		move.b	$38(a0),d0
000171A6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000171AC 6700                       		beq.s	loc_15224	; if not, branch
000171AE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000171B2 6600                       		bne.s	Obj66_Animate	; if yes, branch
000171B4 4428 0034                  		neg.b	$34(a0)
000171B8 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000171BE 6000                       		bra.s	Obj66_Animate
000171C0                            ; ===========================================================================
000171C0                            
000171C0                            loc_15224:
000171C0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000171C4                            
000171C4                            Obj66_Animate:
000171C4 5328 001E                  		subq.b	#1,$1E(a0)
000171C8 6A00                       		bpl.s	locret_15246
000171CA 117C 0007 001E             		move.b	#7,$1E(a0)
000171D0 1228 0034                  		move.b	$34(a0),d1
000171D4 1028 001A                  		move.b	$1A(a0),d0
000171D8 D001                       		add.b	d1,d0
000171DA 0200 000F                  		andi.b	#$F,d0
000171DE 1140 001A                  		move.b	d0,$1A(a0)
000171E2                            
000171E2                            locret_15246:
000171E2 4E75                       		rts	
000171E4                            ; End of function Obj66_ChkSwitch
000171E4                            
000171E4                            
000171E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000171E4                            
000171E4                            
000171E4                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000171E4 43F8 D000                  		lea	($FFFFD000).w,a1
000171E8 7000                       		moveq	#0,d0
000171EA 1028 001A                  		move.b	$1A(a0),d0
000171EE D040                       		add.w	d0,d0
000171F0 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000171F4 101A                       		move.b	(a2)+,d0
000171F6 4880                       		ext.w	d0
000171F8 D068 0008                  		add.w	8(a0),d0
000171FC 3340 0008                  		move.w	d0,8(a1)
00017200 101A                       		move.b	(a2)+,d0
00017202 4880                       		ext.w	d0
00017204 D068 000C                  		add.w	$C(a0),d0
00017208 3340 000C                  		move.w	d0,$C(a1)
0001720C 4E75                       		rts	
0001720E                            ; End of function Obj66_ChgPos
0001720E                            
0001720E                            ; ===========================================================================
0001720E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00017212 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00017216 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001721A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001721E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00017222 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00017226 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001722A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001722E                            ; ---------------------------------------------------------------------------
0001722E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001722E                            ; ---------------------------------------------------------------------------
0001722E                            Map_obj66:
0001722E                            	include "_maps\obj66.asm"
0001722E                            ; ---------------------------------------------------------------------------
0001722E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001722E                            ; ---------------------------------------------------------------------------
0001722E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00017232 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00017236 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001723A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001723E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00017242 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00017246 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001724A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001724E 0000                       		dc.w byte_154A4-Map_obj66
00017250 06                         byte_152B4:	dc.b 6
00017251 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00017256 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001725B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00017260 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00017265 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001726A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001726F 06                         byte_152D3:	dc.b 6
00017270 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00017275 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001727A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001727F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00017284 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00017289 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001728E 06                         byte_152F2:	dc.b 6
0001728F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00017294 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00017299 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001729E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000172A3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000172A8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000172AD 06                         byte_15311:	dc.b 6
000172AE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000172B3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000172B8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000172BD 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000172C2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000172C7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000172CC 06                         byte_15330:	dc.b 6
000172CD 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000172D2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000172D7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000172DC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000172E1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000172E6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000172EB 06                         byte_1534F:	dc.b 6
000172EC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000172F1 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000172F6 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000172FB 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00017300 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00017305 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001730A 06                         byte_1536E:	dc.b 6
0001730B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00017310 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00017315 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001731A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001731F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00017324 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00017329 06                         byte_1538D:	dc.b 6
0001732A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001732F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00017334 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00017339 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001733E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00017343 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00017348 06                         byte_153AC:	dc.b 6
00017349 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001734E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00017353 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00017358 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001735D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00017362 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00017367 06                         byte_153CB:	dc.b 6
00017368 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001736D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00017372 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00017377 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001737C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00017381 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00017386 06                         byte_153EA:	dc.b 6
00017387 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001738C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00017391 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00017396 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001739B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000173A0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000173A5 06                         byte_15409:	dc.b 6
000173A6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000173AB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000173B0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000173B5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000173BA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000173BF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000173C4 06                         byte_15428:	dc.b 6
000173C5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000173CA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000173CF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000173D4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000173D9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000173DE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000173E3 06                         byte_15447:	dc.b 6
000173E4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000173E9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000173EE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000173F3 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000173F8 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000173FD E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00017402 06                         byte_15466:	dc.b 6
00017403 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00017408 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001740D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00017412 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00017417 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001741C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00017421 06                         byte_15485:	dc.b 6
00017422 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00017427 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001742C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00017431 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00017436 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001743B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00017440 0C                         byte_154A4:	dc.b $C
00017441 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00017446 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001744B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00017450 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00017455 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001745A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001745F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00017464 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00017469 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001746E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00017473 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00017478 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001747E 00                         		even
0001747E 00                         		even
0001747E                            
0001747E                            ; ===========================================================================
0001747E                            ; ---------------------------------------------------------------------------
0001747E                            ; Object 67 - disc that	you run	around (SBZ)
0001747E                            ; ---------------------------------------------------------------------------
0001747E                            
0001747E                            Obj67:					; XREF: Obj_Index
0001747E 7000                       		moveq	#0,d0
00017480 1028 0024                  		move.b	$24(a0),d0
00017484 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00017488 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001748C                            ; ===========================================================================
0001748C 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001748E 0000                       		dc.w Obj67_Action-Obj67_Index
00017490                            ; ===========================================================================
00017490                            
00017490                            Obj67_Main:				; XREF: Obj67_Index
00017490 5428 0024                  		addq.b	#2,$24(a0)
00017494 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001749C 317C C344 0002             		move.w	#$C344,2(a0)
000174A2 117C 0004 0001             		move.b	#4,1(a0)
000174A8 117C 0004 0018             		move.b	#4,$18(a0)
000174AE 117C 0008 0019             		move.b	#8,$19(a0)
000174B4 3168 0008 0032             		move.w	8(a0),$32(a0)
000174BA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000174C0 117C 0018 0034             		move.b	#$18,$34(a0)
000174C6 117C 0048 0038             		move.b	#$48,$38(a0)
000174CC 1228 0028                  		move.b	$28(a0),d1	; get object type
000174D0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000174D4 6700                       		beq.s	loc_15546
000174D6 117C 0010 0034             		move.b	#$10,$34(a0)
000174DC 117C 0038 0038             		move.b	#$38,$38(a0)
000174E2                            
000174E2                            loc_15546:
000174E2 1228 0028                  		move.b	$28(a0),d1	; get object type
000174E6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000174EA 4881                       		ext.w	d1
000174EC E741                       		asl.w	#3,d1
000174EE 3141 0036                  		move.w	d1,$36(a0)
000174F2 1028 0022                  		move.b	$22(a0),d0
000174F6 E418                       		ror.b	#2,d0
000174F8 0200 00C0                  		andi.b	#-$40,d0
000174FC 1140 0026                  		move.b	d0,$26(a0)
00017500                            
00017500                            Obj67_Action:				; XREF: Obj67_Index
00017500 6100 0000                  		bsr.w	Obj67_MoveSonic
00017504 6100 0000                  		bsr.w	Obj67_MoveSpot
00017508 6000 0000                  		bra.w	Obj67_ChkDel
0001750C                            ; ===========================================================================
0001750C                            
0001750C                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001750C 7400                       		moveq	#0,d2
0001750E 1428 0038                  		move.b	$38(a0),d2
00017512 3602                       		move.w	d2,d3
00017514 D643                       		add.w	d3,d3
00017516 43F8 D000                  		lea	($FFFFD000).w,a1
0001751A 3029 0008                  		move.w	8(a1),d0
0001751E 9068 0032                  		sub.w	$32(a0),d0
00017522 D042                       		add.w	d2,d0
00017524 B043                       		cmp.w	d3,d0
00017526 6400                       		bcc.s	loc_155A8
00017528 3229 000C                  		move.w	$C(a1),d1
0001752C 9268 0030                  		sub.w	$30(a0),d1
00017530 D242                       		add.w	d2,d1
00017532 B243                       		cmp.w	d3,d1
00017534 6400                       		bcc.s	loc_155A8
00017536 0829 0001 0022             		btst	#1,$22(a1)
0001753C 6700                       		beq.s	loc_155B8
0001753E 4228 003A                  		clr.b	$3A(a0)
00017542 4E75                       		rts	
00017544                            ; ===========================================================================
00017544                            
00017544                            loc_155A8:
00017544 4A28 003A                  		tst.b	$3A(a0)
00017548 6700                       		beq.s	locret_155B6
0001754A 4229 0038                  		clr.b	$38(a1)
0001754E 4228 003A                  		clr.b	$3A(a0)
00017552                            
00017552                            locret_155B6:
00017552 4E75                       		rts	
00017554                            ; ===========================================================================
00017554                            
00017554                            loc_155B8:
00017554 4A28 003A                  		tst.b	$3A(a0)
00017558 6600                       		bne.s	loc_155E2
0001755A 117C 0001 003A             		move.b	#1,$3A(a0)
00017560 0829 0002 0022             		btst	#2,$22(a1)
00017566 6600                       		bne.s	loc_155D0
00017568 4229 001C                  		clr.b	$1C(a1)
0001756C                            
0001756C                            loc_155D0:
0001756C 08A9 0005 0022             		bclr	#5,$22(a1)
00017572 137C 0001 001D             		move.b	#1,$1D(a1)
00017578 137C 0001 0038             		move.b	#1,$38(a1)
0001757E                            
0001757E                            loc_155E2:
0001757E 3029 0020                  		move.w	$20(a1),d0
00017582 4A68 0036                  		tst.w	$36(a0)
00017586 6A00                       		bpl.s	loc_15608
00017588 0C40 FC00                  		cmpi.w	#-$400,d0
0001758C 6F00                       		ble.s	loc_155FA
0001758E 337C FC00 0020             		move.w	#-$400,$20(a1)
00017594 4E75                       		rts	
00017596                            ; ===========================================================================
00017596                            
00017596                            loc_155FA:
00017596 0C40 F100                  		cmpi.w	#-$F00,d0
0001759A 6C00                       		bge.s	locret_15606
0001759C 337C F100 0020             		move.w	#-$F00,$20(a1)
000175A2                            
000175A2                            locret_15606:
000175A2 4E75                       		rts	
000175A4                            ; ===========================================================================
000175A4                            
000175A4                            loc_15608:
000175A4 0C40 0400                  		cmpi.w	#$400,d0
000175A8 6C00                       		bge.s	loc_15616
000175AA 337C 0400 0020             		move.w	#$400,$20(a1)
000175B0 4E75                       		rts	
000175B2                            ; ===========================================================================
000175B2                            
000175B2                            loc_15616:
000175B2 0C40 0F00                  		cmpi.w	#$F00,d0
000175B6 6F00                       		ble.s	locret_15622
000175B8 337C 0F00 0020             		move.w	#$F00,$20(a1)
000175BE                            
000175BE                            locret_15622:
000175BE 4E75                       		rts	
000175C0                            ; ===========================================================================
000175C0                            
000175C0                            Obj67_MoveSpot:				; XREF: Obj67_Action
000175C0 3028 0036                  		move.w	$36(a0),d0
000175C4 D168 0026                  		add.w	d0,$26(a0)
000175C8 1028 0026                  		move.b	$26(a0),d0
000175CC 4EB9 0000 29CC             		jsr	(CalcSine).l
000175D2 3428 0030                  		move.w	$30(a0),d2
000175D6 3628 0032                  		move.w	$32(a0),d3
000175DA 7800                       		moveq	#0,d4
000175DC 1828 0034                  		move.b	$34(a0),d4
000175E0 E14C                       		lsl.w	#8,d4
000175E2 2A04                       		move.l	d4,d5
000175E4 C9C0                       		muls.w	d0,d4
000175E6 4844                       		swap	d4
000175E8 CBC1                       		muls.w	d1,d5
000175EA 4845                       		swap	d5
000175EC D842                       		add.w	d2,d4
000175EE DA43                       		add.w	d3,d5
000175F0 3144 000C                  		move.w	d4,$C(a0)
000175F4 3145 0008                  		move.w	d5,8(a0)
000175F8 4E75                       		rts	
000175FA                            ; ===========================================================================
000175FA                            
000175FA                            Obj67_ChkDel:				; XREF: Obj67_Action
000175FA 3028 0032                  		move.w	$32(a0),d0
000175FE 0240 FF80                  		andi.w	#-$80,d0
00017602 3238 F700                  		move.w	($FFFFF700).w,d1
00017606 0441 0080                  		subi.w	#$80,d1
0001760A 0241 FF80                  		andi.w	#-$80,d1
0001760E 9041                       		sub.w	d1,d0
00017610 0C40 0280                  		cmpi.w	#$280,d0
00017614 6200                       		bhi.s	Obj67_Delete
00017616 4EF9 0000 E910             		jmp	DisplaySprite
0001761C                            ; ===========================================================================
0001761C                            
0001761C                            Obj67_Delete:
0001761C 4EF9 0000 E960             		jmp	DeleteObject
00017622                            ; ===========================================================================
00017622                            ; ---------------------------------------------------------------------------
00017622                            ; Sprite mappings - disc that you run around (SBZ)
00017622                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017622                            ; part of the level tiles.)
00017622                            ; ---------------------------------------------------------------------------
00017622                            Map_obj67:
00017622                            	include "_maps\obj67.asm"
00017622                            ; ---------------------------------------------------------------------------
00017622                            ; Sprite mappings - disc that you run around (SBZ)
00017622                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017622                            ; part of the level tiles.)
00017622                            ; ---------------------------------------------------------------------------
00017622 0000                       		dc.w byte_15688-Map_obj67
00017624 01                         byte_15688:	dc.b 1
00017625 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001762A                            		even
0001762A                            		even
0001762A                            
0001762A                            ; ===========================================================================
0001762A                            ; ---------------------------------------------------------------------------
0001762A                            ; Object 68 - conveyor belts (SBZ)
0001762A                            ; ---------------------------------------------------------------------------
0001762A                            
0001762A                            Obj68:					; XREF: Obj_Index
0001762A 7000                       		moveq	#0,d0
0001762C 1028 0024                  		move.b	$24(a0),d0
00017630 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017634 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017638                            ; ===========================================================================
00017638 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001763A 0000                       		dc.w Obj68_Action-Obj68_Index
0001763C                            ; ===========================================================================
0001763C                            
0001763C                            Obj68_Main:				; XREF: Obj68_Index
0001763C 5428 0024                  		addq.b	#2,$24(a0)
00017640 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017646 1228 0028                  		move.b	$28(a0),d1	; get object type
0001764A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001764E 6700                       		beq.s	loc_156BA	; if zero, branch
00017650 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017656                            
00017656                            loc_156BA:
00017656 1228 0028                  		move.b	$28(a0),d1	; get object type
0001765A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001765E 4881                       		ext.w	d1
00017660 E841                       		asr.w	#4,d1
00017662 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017666                            
00017666                            Obj68_Action:				; XREF: Obj68_Index
00017666 6100                       		bsr.s	Obj68_MoveSonic
00017668 3028 0008                  		move.w	8(a0),d0
0001766C 0240 FF80                  		andi.w	#$FF80,d0
00017670 3238 F700                  		move.w	($FFFFF700).w,d1
00017674 0441 0080                  		subi.w	#$80,d1
00017678 0241 FF80                  		andi.w	#$FF80,d1
0001767C 9041                       		sub.w	d1,d0
0001767E 0C40 0280                  		cmpi.w	#$280,d0
00017682 6300                       		bls.s	Obj68_NoDel
00017684 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017688 6700                       		beq.s	Obj68_Delete		; if it's zero, don't remember object
0001768A 3440                       		movea.w	d0,a2	; load address into a2
0001768C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017690 6000                       		bra.s	Obj68_Delete	; and delete object
00017692                            
00017692                            Obj68_NoDel:
00017692 4E75                       		rts	
00017694                            ; ===========================================================================
00017694                            
00017694                            Obj68_Delete:
00017694 4EF9 0000 E960             		jmp	DeleteObject
0001769A                            ; ===========================================================================
0001769A                            
0001769A                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001769A 7400                       		moveq	#0,d2
0001769C 1428 0038                  		move.b	$38(a0),d2
000176A0 3602                       		move.w	d2,d3
000176A2 D643                       		add.w	d3,d3
000176A4 43F8 D000                  		lea	($FFFFD000).w,a1
000176A8 3029 0008                  		move.w	8(a1),d0
000176AC 9068 0008                  		sub.w	8(a0),d0
000176B0 D042                       		add.w	d2,d0
000176B2 B043                       		cmp.w	d3,d0
000176B4 6400                       		bcc.s	locret_1572E
000176B6 3229 000C                  		move.w	$C(a1),d1
000176BA 9268 000C                  		sub.w	$C(a0),d1
000176BE 0641 0030                  		addi.w	#$30,d1
000176C2 0C41 0030                  		cmpi.w	#$30,d1
000176C6 6400                       		bcc.s	locret_1572E
000176C8 0829 0001 0022             		btst	#1,$22(a1)
000176CE 6600                       		bne.s	locret_1572E
000176D0 3028 0036                  		move.w	$36(a0),d0
000176D4 D169 0008                  		add.w	d0,8(a1)
000176D8                            
000176D8                            locret_1572E:
000176D8 4E75                       		rts	
000176DA                            
000176DA                            ; ===========================================================================
000176DA                            ; ---------------------------------------------------------------------------
000176DA                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000176DA                            ; ---------------------------------------------------------------------------
000176DA                            
000176DA                            Obj69:					; XREF: Obj_Index
000176DA 7000                       		moveq	#0,d0
000176DC 1028 0024                  		move.b	$24(a0),d0
000176E0 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000176E4 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000176E8                            ; ===========================================================================
000176E8 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000176EA 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000176EC 0000                       		dc.w Obj69_Spinner-Obj69_Index
000176EE                            ; ===========================================================================
000176EE                            
000176EE                            Obj69_Main:				; XREF: Obj69_Index
000176EE 5428 0024                  		addq.b	#2,$24(a0)
000176F2 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000176FA 317C 4492 0002             		move.w	#$4492,2(a0)
00017700 0028 0004 0001             		ori.b	#4,1(a0)
00017706 117C 0080 0019             		move.b	#$80,$19(a0)
0001770C 7000                       		moveq	#0,d0
0001770E 1028 0028                  		move.b	$28(a0),d0
00017712 0240 000F                  		andi.w	#$F,d0
00017716 C0FC 003C                  		mulu.w	#$3C,d0
0001771A 3140 0032                  		move.w	d0,$32(a0)
0001771E 4A28 0028                  		tst.b	$28(a0)
00017722 6A00                       		bpl.s	Obj69_Trapdoor
00017724 5428 0024                  		addq.b	#2,$24(a0)
00017728 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017730 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017736 117C 0010 0019             		move.b	#$10,$19(a0)
0001773C 117C 0002 001C             		move.b	#2,$1C(a0)
00017742 7000                       		moveq	#0,d0
00017744 1028 0028                  		move.b	$28(a0),d0	; get object type
00017748 3200                       		move.w	d0,d1
0001774A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001774E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017752 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017756 3140 0032                  		move.w	d0,$32(a0)
0001775A 0241 0070                  		andi.w	#$70,d1
0001775E 0641 0010                  		addi.w	#$10,d1
00017762 E549                       		lsl.w	#2,d1
00017764 5341                       		subq.w	#1,d1
00017766 3141 0036                  		move.w	d1,$36(a0)
0001776A 6000                       		bra.s	Obj69_Spinner
0001776C                            ; ===========================================================================
0001776C                            
0001776C                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001776C 5368 0030                  		subq.w	#1,$30(a0)
00017770 6A00                       		bpl.s	Obj69_Animate
00017772 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017778 0868 0000 001C             		bchg	#0,$1C(a0)
0001777E 4A28 0001                  		tst.b	1(a0)
00017782 6A00                       		bpl.s	Obj69_Animate
00017784 303C 00BB                  		move.w	#$BB,d0
00017788 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play door sound
0001778E                            
0001778E                            Obj69_Animate:
0001778E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017794 4EB9 0000 B970             		jsr	AnimateSprite
0001779A 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001779E 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000177A0 323C 004B                  		move.w	#$4B,d1
000177A4 343C 000C                  		move.w	#$C,d2
000177A8 3602                       		move.w	d2,d3
000177AA 5243                       		addq.w	#1,d3
000177AC 3828 0008                  		move.w	8(a0),d4
000177B0 6100 9ACC                  		bsr.w	SolidObject
000177B4 6000 97A4                  		bra.w	MarkObjGone
000177B8                            ; ===========================================================================
000177B8                            
000177B8                            Obj69_NotSolid:
000177B8 0828 0003 0022             		btst	#3,$22(a0)
000177BE 6700                       		beq.s	Obj69_Display
000177C0 43F8 D000                  		lea	($FFFFD000).w,a1
000177C4 08A9 0003 0022             		bclr	#3,$22(a1)
000177CA 08A8 0003 0022             		bclr	#3,$22(a0)
000177D0 4228 0025                  		clr.b	$25(a0)
000177D4                            
000177D4                            Obj69_Display:
000177D4 6000 9784                  		bra.w	MarkObjGone
000177D8                            ; ===========================================================================
000177D8                            
000177D8                            Obj69_Spinner:				; XREF: Obj69_Index
000177D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000177DC C068 0036                  		and.w	$36(a0),d0
000177E0 6600                       		bne.s	Obj69_Delay
000177E2 117C 0001 0034             		move.b	#1,$34(a0)
000177E8                            
000177E8                            Obj69_Delay:
000177E8 4A28 0034                  		tst.b	$34(a0)
000177EC 6700                       		beq.s	Obj69_Animate2
000177EE 5368 0030                  		subq.w	#1,$30(a0)
000177F2 6A00                       		bpl.s	Obj69_Animate2
000177F4 3168 0032 0030             		move.w	$32(a0),$30(a0)
000177FA 4228 0034                  		clr.b	$34(a0)
000177FE 0868 0000 001C             		bchg	#0,$1C(a0)
00017804                            
00017804                            Obj69_Animate2:
00017804 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001780A 4EB9 0000 B970             		jsr	AnimateSprite
00017810 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017814 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017816 323C 001B                  		move.w	#$1B,d1
0001781A 343C 0007                  		move.w	#7,d2
0001781E 3602                       		move.w	d2,d3
00017820 5243                       		addq.w	#1,d3
00017822 3828 0008                  		move.w	8(a0),d4
00017826 6100 9A56                  		bsr.w	SolidObject
0001782A 6000 972E                  		bra.w	MarkObjGone
0001782E                            ; ===========================================================================
0001782E                            
0001782E                            Obj69_NotSolid2:
0001782E 0828 0003 0022             		btst	#3,$22(a0)
00017834 6700                       		beq.s	Obj69_Display2
00017836 43F8 D000                  		lea	($FFFFD000).w,a1
0001783A 08A9 0003 0022             		bclr	#3,$22(a1)
00017840 08A8 0003 0022             		bclr	#3,$22(a0)
00017846 4228 0025                  		clr.b	$25(a0)
0001784A                            
0001784A                            Obj69_Display2:
0001784A 6000 970E                  		bra.w	MarkObjGone
0001784E                            ; ===========================================================================
0001784E                            Ani_obj69:
0001784E                            	include "_anim\obj69.asm"
0001784E                            ; ---------------------------------------------------------------------------
0001784E                            ; Animation script - trapdoor (SBZ)
0001784E                            ; ---------------------------------------------------------------------------
0001784E 0000                       		dc.w byte_158AC-Ani_obj69
00017850 0000                       		dc.w byte_158B2-Ani_obj69
00017852 0000                       		dc.w byte_158B8-Ani_obj69
00017854 0000                       		dc.w byte_158CC-Ani_obj69
00017856 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001785C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017862 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001786F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017876 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017883 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001788A                            		even
0001788A                            		even
0001788A                            
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            ; Sprite mappings - trapdoor (SBZ)
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            Map_obj69:
0001788A                            	include "_maps\obj69.asm"
0001788A                            ; ---------------------------------------------------------------------------
0001788A                            ; Sprite mappings - trapdoor (SBZ)
0001788A                            ; ---------------------------------------------------------------------------
0001788A 0000                       		dc.w byte_158E6-Map_obj69
0001788C 0000                       		dc.w byte_158FB-Map_obj69
0001788E 0000                       		dc.w byte_15924-Map_obj69
00017890 04                         byte_158E6:	dc.b 4
00017891 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017896 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001789B F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000178A0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000178A5 08                         byte_158FB:	dc.b 8
000178A6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000178AB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000178B0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000178B5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000178BA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000178BF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000178C4 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000178C9 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000178CE 04                         byte_15924:	dc.b 4
000178CF 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000178D4 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000178D9 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000178DE 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000178E4 00                         		even
000178E4 00                         		even
000178E4                            
000178E4                            ; ---------------------------------------------------------------------------
000178E4                            ; Sprite mappings - spinning platforms (SBZ)
000178E4                            ; ---------------------------------------------------------------------------
000178E4                            Map_obj69a:
000178E4                            	include "_maps\obj69a.asm"
000178E4                            ; ---------------------------------------------------------------------------
000178E4                            ; Sprite mappings - spinning platforms (SBZ)
000178E4                            ; ---------------------------------------------------------------------------
000178E4 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000178E8 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000178EC 0000                       		dc.w byte_15970-Map_obj69a
000178EE 02                         byte_15944:	dc.b 2
000178EF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000178F4 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000178F9 02                         byte_1594F:	dc.b 2
000178FA F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000178FF 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017904 02                         byte_1595A:	dc.b 2
00017905 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001790A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001790F 02                         byte_15965:	dc.b 2
00017910 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017915 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001791A 02                         byte_15970:	dc.b 2
0001791B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017920 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017926 00                         		even
00017926 00                         		even
00017926                            
00017926                            ; ===========================================================================
00017926                            ; ---------------------------------------------------------------------------
00017926                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017926                            ; ---------------------------------------------------------------------------
00017926                            
00017926                            Obj6A:					; XREF: Obj_Index
00017926 7000                       		moveq	#0,d0
00017928 1028 0024                  		move.b	$24(a0),d0
0001792C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017930 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017934                            ; ===========================================================================
00017934 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017936 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017938                            ; ===========================================================================
00017938                            
00017938                            Obj6A_Main:				; XREF: Obj6A_Index
00017938 5428 0024                  		addq.b	#2,$24(a0)
0001793C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017944 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001794A 117C 0004 0001             		move.b	#4,1(a0)
00017950 117C 0004 0018             		move.b	#4,$18(a0)
00017956 117C 0020 0019             		move.b	#$20,$19(a0)
0001795C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017962 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017968 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001796E 6400                       		bcc.s	Obj6A_Action
00017970 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017976                            
00017976                            Obj6A_Action:				; XREF: Obj6A_Index
00017976 7000                       		moveq	#0,d0
00017978 1028 0028                  		move.b	$28(a0),d0
0001797C 0240 0007                  		andi.w	#7,d0
00017980 D040                       		add.w	d0,d0
00017982 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017986 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001798A 3028 003A                  		move.w	$3A(a0),d0
0001798E 0240 FF80                  		andi.w	#$FF80,d0
00017992 3238 F700                  		move.w	($FFFFF700).w,d1
00017996 0441 0080                  		subi.w	#$80,d1
0001799A 0241 FF80                  		andi.w	#$FF80,d1
0001799E 9041                       		sub.w	d1,d0
000179A0 0C40 0280                  		cmpi.w	#$280,d0
000179A4 6300                       		bls.s	Obj6A_NoDel
000179A6                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
000179A6                            	;	beq.s	Obj6A_Delete		; if it's zero, don't remember object
000179A6                            	;	movea.w	d0,a2	; load address into a2
000179A6                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
000179A6 6000                       		bra.s	Obj6A_Delete	; and delete object
000179A8                            
000179A8                            Obj6A_NoDel:
000179A8 4EF9 0000 E910             		jmp	DisplaySprite
000179AE                            ; ===========================================================================
000179AE                            
000179AE                            Obj6A_Delete:
000179AE 4EF9 0000 E960             		jmp	DeleteObject
000179B4                            ; ===========================================================================
000179B4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000179B8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000179BC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000179BE                            ; ===========================================================================
000179BE                            
000179BE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000179BE 4E75                       		rts	
000179C0                            ; ===========================================================================
000179C0                            
000179C0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000179C0 323C 0060                  		move.w	#$60,d1
000179C4 7000                       		moveq	#0,d0
000179C6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000179CA 0828 0000 0022             		btst	#0,$22(a0)
000179D0 6700                       		beq.s	Obj6A_Animate01
000179D2 4440                       		neg.w	d0
000179D4 D041                       		add.w	d1,d0
000179D6                            
000179D6                            Obj6A_Animate01:
000179D6 3228 003A                  		move.w	$3A(a0),d1
000179DA 9240                       		sub.w	d0,d1
000179DC 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000179E0 5328 001E                  		subq.b	#1,$1E(a0)
000179E4 6A00                       		bpl.s	loc_15A46
000179E6 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000179EC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000179F2                            
000179F2                            loc_15A46:
000179F2 4A28 0001                  		tst.b	1(a0)
000179F6 6A00                       		bpl.s	locret_15A60
000179F8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000179FC 0240 000F                  		andi.w	#$F,d0
00017A00 6600                       		bne.s	locret_15A60
00017A02 303C 00B0                  		move.w	#$B0,d0
00017A06 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017A0C                            
00017A0C                            locret_15A60:
00017A0C 4E75                       		rts	
00017A0E                            ; ===========================================================================
00017A0E                            
00017A0E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017A0E 323C 0030                  		move.w	#$30,d1
00017A12 7000                       		moveq	#0,d0
00017A14 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017A18 0828 0000 0022             		btst	#0,$22(a0)
00017A1E 6700                       		beq.s	Obj6A_Animate02
00017A20 4440                       		neg.w	d0
00017A22 0640 0080                  		addi.w	#$80,d0
00017A26                            
00017A26                            Obj6A_Animate02:
00017A26 3228 0038                  		move.w	$38(a0),d1
00017A2A 9240                       		sub.w	d0,d1
00017A2C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017A30 5328 001E                  		subq.b	#1,$1E(a0)
00017A34 6A00                       		bpl.s	loc_15A96
00017A36 117C 0002 001E             		move.b	#2,$1E(a0)
00017A3C 0868 0000 001A             		bchg	#0,$1A(a0)
00017A42                            
00017A42                            loc_15A96:
00017A42 4A28 0001                  		tst.b	1(a0)
00017A46 6A00                       		bpl.s	locret_15AB0
00017A48 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017A4C 0C00 0018                  		cmpi.b	#$18,d0
00017A50 6600                       		bne.s	locret_15AB0
00017A52 303C 00B0                  		move.w	#$B0,d0
00017A56 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017A5C                            
00017A5C                            locret_15AB0:
00017A5C 4E75                       		rts	
00017A5E                            ; ===========================================================================
00017A5E                            
00017A5E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017A5E 4A28 003D                  		tst.b	$3D(a0)
00017A62 6600                       		bne.s	Obj6A_Animate03
00017A64 3038 D008                  		move.w	($FFFFD008).w,d0
00017A68 0440 00C0                  		subi.w	#$C0,d0
00017A6C 6500                       		bcs.s	loc_15B02
00017A6E 9068 0008                  		sub.w	8(a0),d0
00017A72 6500                       		bcs.s	loc_15B02
00017A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A78 0440 0080                  		subi.w	#$80,d0
00017A7C B068 000C                  		cmp.w	$C(a0),d0
00017A80 6400                       		bcc.s	locret_15B04
00017A82 0640 0100                  		addi.w	#$100,d0
00017A86 B068 000C                  		cmp.w	$C(a0),d0
00017A8A 6500                       		bcs.s	locret_15B04
00017A8C 117C 0001 003D             		move.b	#1,$3D(a0)
00017A92 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017A98 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017A9E 117C 0002 001A             		move.b	#2,$1A(a0)
00017AA4 303C 00B0                  		move.w	#$B0,d0
00017AA8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017AAE                            
00017AAE                            loc_15B02:
00017AAE 588F                       		addq.l	#4,sp
00017AB0                            
00017AB0                            locret_15B04:
00017AB0 4E75                       		rts	
00017AB2                            ; ===========================================================================
00017AB2                            
00017AB2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00017AB2 4EB9 0000 E8F6             		jsr	SpeedToPos
00017AB8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017ABE 5328 001E                  		subq.b	#1,$1E(a0)
00017AC2 6A00                       		bpl.s	locret_15B24
00017AC4 117C 0002 001E             		move.b	#2,$1E(a0)
00017ACA 0868 0000 001A             		bchg	#0,$1A(a0)
00017AD0                            
00017AD0                            locret_15B24:
00017AD0 4E75                       		rts	
00017AD2                            ; ===========================================================================
00017AD2                            
00017AD2                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017AD2 4A28 003D                  		tst.b	$3D(a0)
00017AD6 6600                       		bne.s	Obj6A_Animate04
00017AD8 3038 D008                  		move.w	($FFFFD008).w,d0
00017ADC 0640 00E0                  		addi.w	#$E0,d0
00017AE0 9068 0008                  		sub.w	8(a0),d0
00017AE4 6400                       		bcc.s	loc_15B74
00017AE6 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017AEA 0440 0080                  		subi.w	#$80,d0
00017AEE B068 000C                  		cmp.w	$C(a0),d0
00017AF2 6400                       		bcc.s	locret_15B76
00017AF4 0640 0100                  		addi.w	#$100,d0
00017AF8 B068 000C                  		cmp.w	$C(a0),d0
00017AFC 6500                       		bcs.s	locret_15B76
00017AFE 117C 0001 003D             		move.b	#1,$3D(a0)
00017B04 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017B0A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017B10 117C 0002 001A             		move.b	#2,$1A(a0)
00017B16 303C 00B0                  		move.w	#$B0,d0
00017B1A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play saw sound
00017B20                            
00017B20                            loc_15B74:
00017B20 588F                       		addq.l	#4,sp
00017B22                            
00017B22                            locret_15B76:
00017B22 4E75                       		rts	
00017B24                            ; ===========================================================================
00017B24                            
00017B24                            Obj6A_Animate04:
00017B24 4EB9 0000 E8F6             		jsr	SpeedToPos
00017B2A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017B30 5328 001E                  		subq.b	#1,$1E(a0)
00017B34 6A00                       		bpl.s	locret_15B96
00017B36 117C 0002 001E             		move.b	#2,$1E(a0)
00017B3C 0868 0000 001A             		bchg	#0,$1A(a0)
00017B42                            
00017B42                            locret_15B96:
00017B42 4E75                       		rts	
00017B44                            ; ===========================================================================
00017B44                            ; ---------------------------------------------------------------------------
00017B44                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017B44                            ; ---------------------------------------------------------------------------
00017B44                            Map_obj6A:
00017B44                            	include "_maps\obj6A.asm"
00017B44                            ; ---------------------------------------------------------------------------
00017B44                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017B44                            ; ---------------------------------------------------------------------------
00017B44 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017B48 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017B4C 07                         byte_15BA0:	dc.b 7
00017B4D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017B52 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017B57 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017B5C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017B61 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017B66 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017B6B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017B70 07                         byte_15BC4:	dc.b 7
00017B71 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017B76 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017B7B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017B80 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017B85 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017B8A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017B8F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017B94 04                         byte_15BE8:	dc.b 4
00017B95 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017B9A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017B9F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017BA4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017BA9 04                         byte_15BFD:	dc.b 4
00017BAA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017BAF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00017BB4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00017BB9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017BBE                            		even
00017BBE                            		even
00017BBE                            
00017BBE                            ; ===========================================================================
00017BBE                            ; ---------------------------------------------------------------------------
00017BBE                            ; Object 6B - stomper (SBZ)
00017BBE                            ; ---------------------------------------------------------------------------
00017BBE                            
00017BBE                            Obj6B:					; XREF: Obj_Index
00017BBE 7000                       		moveq	#0,d0
00017BC0 1028 0024                  		move.b	$24(a0),d0
00017BC4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00017BC8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00017BCC                            ; ===========================================================================
00017BCC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017BCE 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017BD0                            
00017BD0 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017BD4 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017BD8 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017BDC 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017BE0 8040 0005                  		dc.b  $80, $40,	  0,   5
00017BE4                            ; ===========================================================================
00017BE4                            
00017BE4                            Obj6B_Main:				; XREF: Obj6B_Index
00017BE4 5428 0024                  		addq.b	#2,$24(a0)
00017BE8 7000                       		moveq	#0,d0
00017BEA 1028 0028                  		move.b	$28(a0),d0
00017BEE E448                       		lsr.w	#2,d0
00017BF0 0240 001C                  		andi.w	#$1C,d0
00017BF4 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017BF8 115B 0019                  		move.b	(a3)+,$19(a0)
00017BFC 115B 0016                  		move.b	(a3)+,$16(a0)
00017C00 E448                       		lsr.w	#2,d0
00017C02 1140 001A                  		move.b	d0,$1A(a0)
00017C06 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017C0E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017C14 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017C1A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017C1C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017C22 6700                       		beq.s	Obj6B_SBZ3
00017C24                            
00017C24                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017C24 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C28 6700                       		beq.s	Obj6B_Delete		; if it's zero, don't remember object
00017C2A 3440                       		movea.w	d0,a2	; load address into a2
00017C2C 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017C30                            
00017C30                            Obj6B_Delete:
00017C30 4EF9 0000 E960             		jmp	DeleteObject
00017C36                            ; ===========================================================================
00017C36                            
00017C36                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017C36 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017C3C 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017C42 6600                       		bne.s	Obj6B_SBZ12
00017C44 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C48 6700                       		beq.s	Obj6B_SBZ12		; if it's zero, don't remember object
00017C4A 3440                       		movea.w	d0,a2	; load address into a2
00017C4C 0812 0000                  		btst	#0,(a2)
00017C50 6700                       		beq.s	Obj6B_SBZ12
00017C52 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017C56 60CC                       		bra.s	Obj6B_ChkGone
00017C58                            ; ===========================================================================
00017C58                            
00017C58                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017C58 0028 0004 0001             		ori.b	#4,1(a0)
00017C5E 117C 0004 0018             		move.b	#4,$18(a0)
00017C64 3168 0008 0034             		move.w	8(a0),$34(a0)
00017C6A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017C70 7000                       		moveq	#0,d0
00017C72 101B                       		move.b	(a3)+,d0
00017C74 3140 003C                  		move.w	d0,$3C(a0)
00017C78 7000                       		moveq	#0,d0
00017C7A 1028 0028                  		move.b	$28(a0),d0
00017C7E 6A00                       		bpl.s	Obj6B_Action
00017C80 0200 000F                  		andi.b	#$F,d0
00017C84 1140 003E                  		move.b	d0,$3E(a0)
00017C88 1153 0028                  		move.b	(a3),$28(a0)
00017C8C 0C13 0005                  		cmpi.b	#5,(a3)
00017C90 6600                       		bne.s	Obj6B_ChkGone2
00017C92 08E8 0004 0001             		bset	#4,1(a0)
00017C98                            
00017C98                            Obj6B_ChkGone2:
00017C98 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017C9C 6700                       		beq.s	Obj6B_Action		; if it's zero, don't remember object
00017C9E 3440                       		movea.w	d0,a2	; load address into a2
00017CA0 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017CA4                            
00017CA4                            Obj6B_Action:				; XREF: Obj6B_Index
00017CA4 3F28 0008                  		move.w	8(a0),-(sp)
00017CA8 7000                       		moveq	#0,d0
00017CAA 1028 0028                  		move.b	$28(a0),d0
00017CAE 0240 000F                  		andi.w	#$F,d0
00017CB2 D040                       		add.w	d0,d0
00017CB4 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00017CB8 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017CBC 381F                       		move.w	(sp)+,d4
00017CBE 4A28 0001                  		tst.b	1(a0)
00017CC2 6A00                       		bpl.s	Obj6B_ChkDel
00017CC4 7200                       		moveq	#0,d1
00017CC6 1228 0019                  		move.b	$19(a0),d1
00017CCA 0641 000B                  		addi.w	#$B,d1
00017CCE 7400                       		moveq	#0,d2
00017CD0 1428 0016                  		move.b	$16(a0),d2
00017CD4 3602                       		move.w	d2,d3
00017CD6 5243                       		addq.w	#1,d3
00017CD8 6100 95A4                  		bsr.w	SolidObject
00017CDC                            
00017CDC                            Obj6B_ChkDel:
00017CDC 3028 0034                  		move.w	$34(a0),d0
00017CE0 0240 FF80                  		andi.w	#$FF80,d0
00017CE4 3238 F700                  		move.w	($FFFFF700).w,d1
00017CE8 0441 0080                  		subi.w	#$80,d1
00017CEC 0241 FF80                  		andi.w	#$FF80,d1
00017CF0 9041                       		sub.w	d1,d0
00017CF2 0C40 0280                  		cmpi.w	#$280,d0
00017CF6 6200                       		bhi.s	loc_15D64
00017CF8 4EF9 0000 E910             		jmp	DisplaySprite
00017CFE                            ; ===========================================================================
00017CFE                            
00017CFE                            loc_15D64:
00017CFE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017D04 6600                       		bne.s	Obj6B_Delete2
00017D06 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017D0A 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D0E 6700                       		beq.s	Obj6B_Delete2		; if it's zero, don't remember object
00017D10 3440                       		movea.w	d0,a2	; load address into a2
00017D12 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017D16                            
00017D16                            Obj6B_Delete2:
00017D16 4EF9 0000 E960             		jmp	DeleteObject
00017D1C                            ; ===========================================================================
00017D1C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017D20 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017D24 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017D28                            ; ===========================================================================
00017D28                            
00017D28                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017D28 4E75                       		rts	
00017D2A                            ; ===========================================================================
00017D2A                            
00017D2A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017D2A 4A28 0038                  		tst.b	$38(a0)
00017D2E 6600                       		bne.s	loc_15DB4
00017D30 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017D34 7000                       		moveq	#0,d0
00017D36 1028 003E                  		move.b	$3E(a0),d0
00017D3A 0832 0000 0000             		btst	#0,(a2,d0.w)
00017D40 6700                       		beq.s	loc_15DC2
00017D42 117C 0001 0038             		move.b	#1,$38(a0)
00017D48                            
00017D48                            loc_15DB4:
00017D48 3028 003C                  		move.w	$3C(a0),d0
00017D4C B068 003A                  		cmp.w	$3A(a0),d0
00017D50 6700                       		beq.s	loc_15DE0
00017D52 5468 003A                  		addq.w	#2,$3A(a0)
00017D56                            
00017D56                            loc_15DC2:
00017D56 3028 003A                  		move.w	$3A(a0),d0
00017D5A 0828 0000 0022             		btst	#0,$22(a0)
00017D60 6700                       		beq.s	loc_15DD4
00017D62 4440                       		neg.w	d0
00017D64 0640 0080                  		addi.w	#$80,d0
00017D68                            
00017D68                            loc_15DD4:
00017D68 3228 0034                  		move.w	$34(a0),d1
00017D6C 9240                       		sub.w	d0,d1
00017D6E 3141 0008                  		move.w	d1,8(a0)
00017D72 4E75                       		rts	
00017D74                            ; ===========================================================================
00017D74                            
00017D74                            loc_15DE0:
00017D74 5228 0028                  		addq.b	#1,$28(a0)
00017D78 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017D7E 4228 0038                  		clr.b	$38(a0)
00017D82 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017D86 67CE                       		beq.s	loc_15DC2		; if it's zero, don't remember object
00017D88 3440                       		movea.w	d0,a2	; load address into a2
00017D8A 08D2 0000                  		bset	#0,(a2)
00017D8E 60C6                       		bra.s	loc_15DC2
00017D90                            ; ===========================================================================
00017D90                            
00017D90                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00017D90 4A28 0038                  		tst.b	$38(a0)
00017D94 6600                       		bne.s	loc_15E14
00017D96 5368 0036                  		subq.w	#1,$36(a0)
00017D9A 6600                       		bne.s	loc_15E1E
00017D9C 117C 0001 0038             		move.b	#1,$38(a0)
00017DA2                            
00017DA2                            loc_15E14:
00017DA2 4A68 003A                  		tst.w	$3A(a0)
00017DA6 6700                       		beq.s	loc_15E3C
00017DA8 5568 003A                  		subq.w	#2,$3A(a0)
00017DAC                            
00017DAC                            loc_15E1E:
00017DAC 3028 003A                  		move.w	$3A(a0),d0
00017DB0 0828 0000 0022             		btst	#0,$22(a0)
00017DB6 6700                       		beq.s	loc_15E30
00017DB8 4440                       		neg.w	d0
00017DBA 0640 0080                  		addi.w	#$80,d0
00017DBE                            
00017DBE                            loc_15E30:
00017DBE 3228 0034                  		move.w	$34(a0),d1
00017DC2 9240                       		sub.w	d0,d1
00017DC4 3141 0008                  		move.w	d1,8(a0)
00017DC8 4E75                       		rts	
00017DCA                            ; ===========================================================================
00017DCA                            
00017DCA                            loc_15E3C:
00017DCA 5328 0028                  		subq.b	#1,$28(a0)
00017DCE 4228 0038                  		clr.b	$38(a0)
00017DD2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017DD6 67D4                       		beq.s	loc_15E1E		; if it's zero, don't remember object
00017DD8 3440                       		movea.w	d0,a2	; load address into a2
00017DDA 0892 0000                  		bclr	#0,(a2)
00017DDE 60CC                       		bra.s	loc_15E1E
00017DE0                            ; ===========================================================================
00017DE0                            
00017DE0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017DE0 4A28 0038                  		tst.b	$38(a0)
00017DE4 6600                       		bne.s	loc_15E7C
00017DE6 4A68 003A                  		tst.w	$3A(a0)
00017DEA 6700                       		beq.s	loc_15E6A
00017DEC 5368 003A                  		subq.w	#1,$3A(a0)
00017DF0 6000                       		bra.s	loc_15E8E
00017DF2                            ; ===========================================================================
00017DF2                            
00017DF2                            loc_15E6A:
00017DF2 5368 0036                  		subq.w	#1,$36(a0)
00017DF6 6A00                       		bpl.s	loc_15E8E
00017DF8 317C 003C 0036             		move.w	#$3C,$36(a0)
00017DFE 117C 0001 0038             		move.b	#1,$38(a0)
00017E04                            
00017E04                            loc_15E7C:
00017E04 5068 003A                  		addq.w	#8,$3A(a0)
00017E08 3028 003A                  		move.w	$3A(a0),d0
00017E0C B068 003C                  		cmp.w	$3C(a0),d0
00017E10 6600                       		bne.s	loc_15E8E
00017E12 4228 0038                  		clr.b	$38(a0)
00017E16                            
00017E16                            loc_15E8E:
00017E16 3028 003A                  		move.w	$3A(a0),d0
00017E1A 0828 0000 0022             		btst	#0,$22(a0)
00017E20 6700                       		beq.s	loc_15EA0
00017E22 4440                       		neg.w	d0
00017E24 0640 0038                  		addi.w	#$38,d0
00017E28                            
00017E28                            loc_15EA0:
00017E28 3228 0030                  		move.w	$30(a0),d1
00017E2C D240                       		add.w	d0,d1
00017E2E 3141 000C                  		move.w	d1,$C(a0)
00017E32 4E75                       		rts	
00017E34                            ; ===========================================================================
00017E34                            
00017E34                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017E34 4A28 0038                  		tst.b	$38(a0)
00017E38 6600                       		bne.s	loc_15ED0
00017E3A 4A68 003A                  		tst.w	$3A(a0)
00017E3E 6700                       		beq.s	loc_15EBE
00017E40 5168 003A                  		subq.w	#8,$3A(a0)
00017E44 6000                       		bra.s	loc_15EF0
00017E46                            ; ===========================================================================
00017E46                            
00017E46                            loc_15EBE:
00017E46 5368 0036                  		subq.w	#1,$36(a0)
00017E4A 6A00                       		bpl.s	loc_15EF0
00017E4C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017E52 117C 0001 0038             		move.b	#1,$38(a0)
00017E58                            
00017E58                            loc_15ED0:
00017E58 3028 003A                  		move.w	$3A(a0),d0
00017E5C B068 003C                  		cmp.w	$3C(a0),d0
00017E60 6700                       		beq.s	loc_15EE0
00017E62 5068 003A                  		addq.w	#8,$3A(a0)
00017E66 6000                       		bra.s	loc_15EF0
00017E68                            ; ===========================================================================
00017E68                            
00017E68                            loc_15EE0:
00017E68 5368 0036                  		subq.w	#1,$36(a0)
00017E6C 6A00                       		bpl.s	loc_15EF0
00017E6E 317C 003C 0036             		move.w	#$3C,$36(a0)
00017E74 4228 0038                  		clr.b	$38(a0)
00017E78                            
00017E78                            loc_15EF0:
00017E78 3028 003A                  		move.w	$3A(a0),d0
00017E7C 0828 0000 0022             		btst	#0,$22(a0)
00017E82 6700                       		beq.s	loc_15F02
00017E84 4440                       		neg.w	d0
00017E86 0640 0038                  		addi.w	#$38,d0
00017E8A                            
00017E8A                            loc_15F02:
00017E8A 3228 0030                  		move.w	$30(a0),d1
00017E8E D240                       		add.w	d0,d1
00017E90 3141 000C                  		move.w	d1,$C(a0)
00017E94 4E75                       		rts	
00017E96                            ; ===========================================================================
00017E96                            
00017E96                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017E96 4A28 0038                  		tst.b	$38(a0)
00017E9A 6600                       		bne.s	loc_15F3E
00017E9C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017EA0 7000                       		moveq	#0,d0
00017EA2 1028 003E                  		move.b	$3E(a0),d0
00017EA6 0832 0000 0000             		btst	#0,(a2,d0.w)
00017EAC 6700                       		beq.s	locret_15F5C
00017EAE 117C 0001 0038             		move.b	#1,$38(a0)
00017EB4 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00017EB8 6700                       		beq.s	loc_15F3E		; if it's zero, don't remember object
00017EBA 3440                       		movea.w	d0,a2	; load address into a2
00017EBC 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00017EC0                            
00017EC0                            loc_15F3E:
00017EC0 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017EC8 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017ED0 3168 0008 0034             		move.w	8(a0),$34(a0)
00017ED6 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017EDC 6700                       		beq.s	loc_15F5E
00017EDE                            
00017EDE                            locret_15F5C:
00017EDE 4E75                       		rts	
00017EE0                            ; ===========================================================================
00017EE0                            
00017EE0                            loc_15F5E:
00017EE0 4228 0028                  		clr.b	$28(a0)
00017EE4 4228 0038                  		clr.b	$38(a0)
00017EE8 4E75                       		rts	
00017EEA                            ; ===========================================================================
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA                            ; Sprite mappings - stomper and	platforms (SBZ)
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA                            Map_obj6B:
00017EEA                            	include "_maps\obj6B.asm"
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA                            ; Sprite mappings - stomper and	platforms (SBZ)
00017EEA                            ; ---------------------------------------------------------------------------
00017EEA 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017EEE 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017EF2 0000                       		dc.w byte_15FB0-Map_obj6B
00017EF4 04                         byte_15F72:	dc.b 4
00017EF5 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017EFA F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017EFF F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017F04 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017F09 08                         byte_15F87:	dc.b 8
00017F0A E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017F0F E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017F14 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017F19 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017F1E 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017F23 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017F28 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017F2D 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017F32 0E                         byte_15FB0:	dc.b $E
00017F33 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017F38 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017F3D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017F42 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017F47 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017F4C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017F51 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017F56 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017F5B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017F60 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017F65 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017F6A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017F6F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017F74 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017F7A 00                         		even
00017F7A 00                         		even
00017F7A                            
00017F7A                            ; ===========================================================================
00017F7A                            ; ---------------------------------------------------------------------------
00017F7A                            ; Object 6C - vanishing	platforms (SBZ)
00017F7A                            ; ---------------------------------------------------------------------------
00017F7A                            
00017F7A                            Obj6C:					; XREF: Obj_Index
00017F7A 7000                       		moveq	#0,d0
00017F7C 1028 0024                  		move.b	$24(a0),d0
00017F80 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00017F84 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017F88                            ; ===========================================================================
00017F88 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017F8A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017F8C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017F8E 0000                       		dc.w loc_16068-Obj6C_Index
00017F90                            ; ===========================================================================
00017F90                            
00017F90                            Obj6C_Main:				; XREF: Obj6C_Index
00017F90 5C28 0024                  		addq.b	#6,$24(a0)
00017F94 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017F9C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00017FA2 0028 0004 0001             		ori.b	#4,1(a0)
00017FA8 117C 0010 0019             		move.b	#$10,$19(a0)
00017FAE 117C 0004 0018             		move.b	#4,$18(a0)
00017FB4 7000                       		moveq	#0,d0
00017FB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00017FBA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017FBE 5240                       		addq.w	#1,d0		; add 1
00017FC0 EF48                       		lsl.w	#7,d0		; multiply by $80
00017FC2 3200                       		move.w	d0,d1
00017FC4 5340                       		subq.w	#1,d0
00017FC6 3140 0030                  		move.w	d0,$30(a0)
00017FCA 3140 0032                  		move.w	d0,$32(a0)
00017FCE 7000                       		moveq	#0,d0
00017FD0 1028 0028                  		move.b	$28(a0),d0	; get object type
00017FD4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017FD8 0641 0080                  		addi.w	#$80,d1
00017FDC C0C1                       		mulu.w	d1,d0
00017FDE E088                       		lsr.l	#8,d0
00017FE0 3140 0036                  		move.w	d0,$36(a0)
00017FE4 5341                       		subq.w	#1,d1
00017FE6 3141 0038                  		move.w	d1,$38(a0)
00017FEA                            
00017FEA                            loc_16068:				; XREF: Obj6C_Index
00017FEA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017FEE 9068 0036                  		sub.w	$36(a0),d0
00017FF2 C068 0038                  		and.w	$38(a0),d0
00017FF6 6600                       		bne.s	Obj6C_Animate
00017FF8 5928 0024                  		subq.b	#4,$24(a0)
00017FFC 6000                       		bra.s	Obj6C_Vanish
00017FFE                            ; ===========================================================================
00017FFE                            
00017FFE                            Obj6C_Animate:
00017FFE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018004 4EB9 0000 B970             		jsr	AnimateSprite
0001800A 6000 8F4E                  		bra.w	MarkObjGone
0001800E                            ; ===========================================================================
0001800E                            
0001800E                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001800E 5368 0030                  		subq.w	#1,$30(a0)
00018012 6A00                       		bpl.s	loc_160AA
00018014 317C 007F 0030             		move.w	#127,$30(a0)
0001801A 4A28 001C                  		tst.b	$1C(a0)
0001801E 6700                       		beq.s	loc_160A4
00018020 3168 0032 0030             		move.w	$32(a0),$30(a0)
00018026                            
00018026                            loc_160A4:
00018026 0868 0000 001C             		bchg	#0,$1C(a0)
0001802C                            
0001802C                            loc_160AA:
0001802C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00018032 4EB9 0000 B970             		jsr	AnimateSprite
00018038 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001803E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00018040 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00018046 6600                       		bne.s	loc_160D6
00018048 7200                       		moveq	#0,d1
0001804A 1228 0019                  		move.b	$19(a0),d1
0001804E 4EB9 0000 8510             		jsr	(PlatformObject).l
00018054 6000 8F04                  		bra.w	MarkObjGone
00018058                            ; ===========================================================================
00018058                            
00018058                            loc_160D6:
00018058 7200                       		moveq	#0,d1
0001805A 1228 0019                  		move.b	$19(a0),d1
0001805E 4EB9 0000 8684             		jsr	(ExitPlatform).l
00018064 3428 0008                  		move.w	8(a0),d2
00018068 4EB9 0000 8BFA             		jsr	(MvSonicOnPtfm2).l
0001806E 6000 8EEA                  		bra.w	MarkObjGone
00018072                            ; ===========================================================================
00018072                            
00018072                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00018072 0828 0003 0022             		btst	#3,$22(a0)
00018078 6700                       		beq.s	Obj6C_Display
0001807A 43F8 D000                  		lea	($FFFFD000).w,a1
0001807E 08A9 0003 0022             		bclr	#3,$22(a1)
00018084 08A8 0003 0022             		bclr	#3,$22(a0)
0001808A 117C 0002 0024             		move.b	#2,$24(a0)
00018090 4228 0025                  		clr.b	$25(a0)
00018094                            
00018094                            Obj6C_Display:
00018094 6000 8EC4                  		bra.w	MarkObjGone
00018098                            ; ===========================================================================
00018098                            Ani_obj6C:
00018098                            	include "_anim\obj6C.asm"
00018098                            ; ---------------------------------------------------------------------------
00018098                            ; Animation script - vanishing platforms (SBZ)
00018098                            ; ---------------------------------------------------------------------------
00018098 0000                       		dc.w byte_1611A-Ani_obj6C
0001809A 0000                       		dc.w byte_16122-Ani_obj6C
0001809C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000180A4 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000180AC                            		even
000180AC                            		even
000180AC                            
000180AC                            ; ---------------------------------------------------------------------------
000180AC                            ; Sprite mappings - vanishing platforms	(SBZ)
000180AC                            ; ---------------------------------------------------------------------------
000180AC                            Map_obj6C:
000180AC                            	include "_maps\obj6C.asm"
000180AC                            ; ---------------------------------------------------------------------------
000180AC                            ; Sprite mappings - vanishing platforms	(SBZ)
000180AC                            ; ---------------------------------------------------------------------------
000180AC 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000180B0 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000180B4 01                         byte_16132:	dc.b 1
000180B5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000180BA 01                         byte_16138:	dc.b 1
000180BB F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000180C0 01                         byte_1613E:	dc.b 1
000180C1 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000180C6 00                         byte_16144:	dc.b 0
000180C8 00                         		even
000180C8 00                         		even
000180C8                            
000180C8                            ; ===========================================================================
000180C8                            ; ---------------------------------------------------------------------------
000180C8                            ; Object 6E - electrocution orbs (SBZ)
000180C8                            ; ---------------------------------------------------------------------------
000180C8                            
000180C8                            Obj6E:					; XREF: Obj_Index
000180C8 7000                       		moveq	#0,d0
000180CA 1028 0024                  		move.b	$24(a0),d0
000180CE 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000180D2 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000180D6                            ; ===========================================================================
000180D6 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000180D8 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000180DA                            ; ===========================================================================
000180DA                            
000180DA                            Obj6E_Main:				; XREF: Obj6E_Index
000180DA 5428 0024                  		addq.b	#2,$24(a0)
000180DE 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000180E6 317C 047E 0002             		move.w	#$47E,2(a0)
000180EC 0028 0004 0001             		ori.b	#4,1(a0)
000180F2 117C 0028 0019             		move.b	#$28,$19(a0)
000180F8 7000                       		moveq	#0,d0
000180FA 1028 0028                  		move.b	$28(a0),d0	; read object type
000180FE E948                       		lsl.w	#4,d0		; multiply by $10
00018100 5340                       		subq.w	#1,d0
00018102 3140 0034                  		move.w	d0,$34(a0)
00018106                            
00018106                            Obj6E_Shock:				; XREF: Obj6E_Index
00018106 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001810A C068 0034                  		and.w	$34(a0),d0
0001810E 6600                       		bne.s	Obj6E_Animate
00018110 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00018116 4A28 0001                  		tst.b	1(a0)
0001811A 6A00                       		bpl.s	Obj6E_Animate
0001811C 303C 00B1                  		move.w	#$B1,d0
00018120 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play electricity sound
00018126                            
00018126                            Obj6E_Animate:
00018126 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001812C 4EB9 0000 B970             		jsr	AnimateSprite
00018132 117C 0000 0020             		move.b	#0,$20(a0)
00018138 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001813E 6600                       		bne.s	Obj6E_Display	; if not, branch
00018140 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00018146                            
00018146                            Obj6E_Display:
00018146 6000 8E12                  		bra.w	MarkObjGone
0001814A                            ; ===========================================================================
0001814A                            Ani_obj6E:
0001814A                            	include "_anim\obj6E.asm"
0001814A                            ; ---------------------------------------------------------------------------
0001814A                            ; Animation script - electrocution orbs (SBZ)
0001814A                            ; ---------------------------------------------------------------------------
0001814A 0000                       		dc.w byte_161CC-Ani_obj6E
0001814C 0000                       		dc.w byte_161D0-Ani_obj6E
0001814E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00018152 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00018162                            		even
00018162                            		even
00018162                            
00018162                            ; ---------------------------------------------------------------------------
00018162                            ; Sprite mappings - electrocution orbs (SBZ)
00018162                            ; ---------------------------------------------------------------------------
00018162                            Map_obj6E:
00018162                            	include "_maps\obj6E.asm"
00018162                            ; ---------------------------------------------------------------------------
00018162                            ; Sprite mappings - electrocution orbs (SBZ)
00018162                            ; ---------------------------------------------------------------------------
00018162 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00018166 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001816A 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
0001816E 02                         byte_161EC:	dc.b 2
0001816F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018174 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018179 03                         byte_161F7:	dc.b 3
0001817A F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001817F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018184 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018189 05                         byte_16207:	dc.b 5
0001818A F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001818F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00018194 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00018199 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001819E F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000181A3 04                         byte_16221:	dc.b 4
000181A4 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181A9 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181AE F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000181B3 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000181B8 06                         byte_16236:	dc.b 6
000181B9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181BE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181C3 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000181C8 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000181CD F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000181D2 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000181D7 04                         byte_16255:	dc.b 4
000181D8 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000181DD 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000181E2 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000181E7 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000181EC                            		even
000181EC                            		even
000181EC                            
000181EC                            ; ===========================================================================
000181EC                            ; ---------------------------------------------------------------------------
000181EC                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000181EC                            ; ---------------------------------------------------------------------------
000181EC                            
000181EC                            Obj6F:					; XREF: Obj_Index
000181EC 7000                       		moveq	#0,d0
000181EE 1028 0024                  		move.b	$24(a0),d0
000181F2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000181F6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000181FA 3028 0030                  		move.w	$30(a0),d0
000181FE 0240 FF80                  		andi.w	#$FF80,d0
00018202 3238 F700                  		move.w	($FFFFF700).w,d1
00018206 0441 0080                  		subi.w	#$80,d1
0001820A 0241 FF80                  		andi.w	#$FF80,d1
0001820E 9041                       		sub.w	d1,d0
00018210 0C40 0280                  		cmpi.w	#$280,d0
00018214 6300                       		bls.s	Obj6F_Display
00018216                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018216                            	;	beq.s	loc_1629A		; if it's zero, don't remember object
00018216                            	;	movea.w	d0,a2	; load address into a2
00018216                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018216 6000                       		bra.s	loc_1629A	; and delete object
00018218                            
00018218                            Obj6F_Display:
00018218 4EF9 0000 E910             		jmp	DisplaySprite
0001821E                            ; ===========================================================================
0001821E                            
0001821E                            loc_1629A:
0001821E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00018224 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00018226 0C40 FF80                  		cmpi.w	#-$80,d0
0001822A 64EC                       		bcc.s	Obj6F_Display
0001822C                            
0001822C                            Obj6F_Act1or2:
0001822C 1028 002F                  		move.b	$2F(a0),d0
00018230 6A00                       		bpl.s	Obj6F_Delete
00018232 0240 007F                  		andi.w	#$7F,d0
00018236 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001823A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00018240                            
00018240                            Obj6F_Delete:
00018240 4EF9 0000 E960             		jmp	DeleteObject
00018246                            ; ===========================================================================
00018246 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00018248 0000                       		dc.w loc_163D8-Obj6F_Index
0001824A                            ; ===========================================================================
0001824A                            
0001824A                            Obj6F_Main:				; XREF: Obj6F_Index
0001824A 1028 0028                  		move.b	$28(a0),d0
0001824E 6B00 0000                  		bmi.w	loc_16380
00018252 5428 0024                  		addq.b	#2,$24(a0)
00018256 217C 0001 78E4 0004        		move.l	#Map_obj69a,4(a0)
0001825E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00018264 117C 0010 0019             		move.b	#$10,$19(a0)
0001826A 0028 0004 0001             		ori.b	#4,1(a0)
00018270 117C 0004 0018             		move.b	#4,$18(a0)
00018276 7000                       		moveq	#0,d0
00018278 1028 0028                  		move.b	$28(a0),d0
0001827C 3200                       		move.w	d0,d1
0001827E E648                       		lsr.w	#3,d0
00018280 0240 001E                  		andi.w	#$1E,d0
00018284 45FA 0000                  		lea	off_164A6(pc),a2
00018288 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001828C 315A 0038                  		move.w	(a2)+,$38(a0)
00018290 315A 0030                  		move.w	(a2)+,$30(a0)
00018294 214A 003C                  		move.l	a2,$3C(a0)
00018298 0241 000F                  		andi.w	#$F,d1
0001829C E549                       		lsl.w	#2,d1
0001829E 1141 0038                  		move.b	d1,$38(a0)
000182A2 117C 0004 003A             		move.b	#4,$3A(a0)
000182A8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000182AC 6700                       		beq.s	loc_16356
000182AE 117C 0001 003B             		move.b	#1,$3B(a0)
000182B4 4428 003A                  		neg.b	$3A(a0)
000182B8 7200                       		moveq	#0,d1
000182BA 1228 0038                  		move.b	$38(a0),d1
000182BE D228 003A                  		add.b	$3A(a0),d1
000182C2 B228 0039                  		cmp.b	$39(a0),d1
000182C6 6500                       		bcs.s	loc_16352
000182C8 1001                       		move.b	d1,d0
000182CA 7200                       		moveq	#0,d1
000182CC 4A00                       		tst.b	d0
000182CE 6A00                       		bpl.s	loc_16352
000182D0 1228 0039                  		move.b	$39(a0),d1
000182D4 5901                       		subq.b	#4,d1
000182D6                            
000182D6                            loc_16352:
000182D6 1141 0038                  		move.b	d1,$38(a0)
000182DA                            
000182DA                            loc_16356:
000182DA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000182E0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000182E6 4A41                       		tst.w	d1
000182E8 6600                       		bne.s	loc_1636C
000182EA 117C 0001 001C             		move.b	#1,$1C(a0)
000182F0                            
000182F0                            loc_1636C:
000182F0 0C41 0008                  		cmpi.w	#8,d1
000182F4 6600                       		bne.s	loc_16378
000182F6 117C 0000 001C             		move.b	#0,$1C(a0)
000182FC                            
000182FC                            loc_16378:
000182FC 6100 BB9E                  		bsr.w	Obj63_ChangeDir
00018300 6000 0000                  		bra.w	loc_163D8
00018304                            ; ===========================================================================
00018304                            
00018304                            loc_16380:				; XREF: Obj6F_Main
00018304 1140 002F                  		move.b	d0,$2F(a0)
00018308 0240 007F                  		andi.w	#$7F,d0
0001830C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00018310 08F2 0000 0000             		bset	#0,(a2,d0.w)
00018316 6700                       		beq.s	loc_1639A
00018318 4EF9 0000 E960             		jmp	DeleteObject
0001831E                            ; ===========================================================================
0001831E                            
0001831E                            loc_1639A:
0001831E D040                       		add.w	d0,d0
00018320 0240 001E                  		andi.w	#$1E,d0
00018324 0640 0080                  		addi.w	#$80,d0
00018328 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001832E D4F2 0000                  		adda.w	(a2,d0.w),a2
00018332 321A                       		move.w	(a2)+,d1
00018334 2248                       		movea.l	a0,a1
00018336 6000                       		bra.s	Obj6F_LoadPform
00018338                            ; ===========================================================================
00018338                            
00018338                            Obj6F_Loop:
00018338 4EB9 0000 F066             		jsr	SingleObjLoad
0001833E 6600                       		bne.s	loc_163D0
00018340                            
00018340                            Obj6F_LoadPform:			; XREF: loc_1639A
00018340 12BC 006F                  		move.b	#$6F,0(a1)
00018344 335A 0008                  		move.w	(a2)+,8(a1)
00018348 335A 000C                  		move.w	(a2)+,$C(a1)
0001834C 301A                       		move.w	(a2)+,d0
0001834E 1340 0028                  		move.b	d0,$28(a1)
00018352                            
00018352                            loc_163D0:
00018352 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00018356                            
00018356 588F                       		addq.l	#4,sp
00018358 4E75                       		rts	
0001835A                            ; ===========================================================================
0001835A                            
0001835A                            loc_163D8:				; XREF: Obj6F_Index
0001835A 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00018360 4EB9 0000 B970             		jsr	AnimateSprite
00018366 4A28 001A                  		tst.b	$1A(a0)
0001836A 6600                       		bne.s	loc_16404
0001836C 3F28 0008                  		move.w	8(a0),-(sp)
00018370 6100 0000                  		bsr.w	loc_16424
00018374 323C 001B                  		move.w	#$1B,d1
00018378 343C 0007                  		move.w	#7,d2
0001837C 3602                       		move.w	d2,d3
0001837E 5243                       		addq.w	#1,d3
00018380 381F                       		move.w	(sp)+,d4
00018382 6000 8EFA                  		bra.w	SolidObject
00018386                            ; ===========================================================================
00018386                            
00018386                            loc_16404:
00018386 0828 0003 0022             		btst	#3,$22(a0)
0001838C 6700                       		beq.s	loc_16420
0001838E 43F8 D000                  		lea	($FFFFD000).w,a1
00018392 08A9 0003 0022             		bclr	#3,$22(a1)
00018398 08A8 0003 0022             		bclr	#3,$22(a0)
0001839E 4228 0025                  		clr.b	$25(a0)
000183A2                            
000183A2                            loc_16420:
000183A2 6000 0002                  		bra.w	*+4
000183A6                            
000183A6                            loc_16424:
000183A6 3028 0008                  		move.w	8(a0),d0
000183AA B068 0034                  		cmp.w	$34(a0),d0
000183AE 6600                       		bne.s	loc_16484
000183B0 3028 000C                  		move.w	$C(a0),d0
000183B4 B068 0036                  		cmp.w	$36(a0),d0
000183B8 6600                       		bne.s	loc_16484
000183BA 7200                       		moveq	#0,d1
000183BC 1228 0038                  		move.b	$38(a0),d1
000183C0 D228 003A                  		add.b	$3A(a0),d1
000183C4 B228 0039                  		cmp.b	$39(a0),d1
000183C8 6500                       		bcs.s	loc_16456
000183CA 1001                       		move.b	d1,d0
000183CC 7200                       		moveq	#0,d1
000183CE 4A00                       		tst.b	d0
000183D0 6A00                       		bpl.s	loc_16456
000183D2 1228 0039                  		move.b	$39(a0),d1
000183D6 5901                       		subq.b	#4,d1
000183D8                            
000183D8                            loc_16456:
000183D8 1141 0038                  		move.b	d1,$38(a0)
000183DC 2268 003C                  		movea.l	$3C(a0),a1
000183E0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000183E6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000183EC 4A41                       		tst.w	d1
000183EE 6600                       		bne.s	loc_16474
000183F0 117C 0001 001C             		move.b	#1,$1C(a0)
000183F6                            
000183F6                            loc_16474:
000183F6 0C41 0008                  		cmpi.w	#8,d1
000183FA 6600                       		bne.s	loc_16480
000183FC 117C 0000 001C             		move.b	#0,$1C(a0)
00018402                            
00018402                            loc_16480:
00018402 6100 BA98                  		bsr.w	Obj63_ChangeDir
00018406                            
00018406                            loc_16484:
00018406 4EF9 0000 E8F6             		jmp	SpeedToPos
0001840C                            ; ===========================================================================
0001840C                            Ani_obj6F:
0001840C                            	include "_anim\obj6F.asm"
0001840C                            ; ---------------------------------------------------------------------------
0001840C                            ; Animation script - platform on conveyor belt (SBZ)
0001840C                            ; ---------------------------------------------------------------------------
0001840C 0000                       		dc.w byte_1648E-Ani_obj6F
0001840E 0000                       		dc.w byte_164A2-Ani_obj6F
00018410 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001841D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00018424 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00018428 00                         		even
00018428 00                         		even
00018428                            
00018428 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001842E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00018434 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00018448 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001845C 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00018470 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00018484 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00018498 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000184AC                            ; ===========================================================================
000184AC                            ; ---------------------------------------------------------------------------
000184AC                            ; Object 70 - large girder block (SBZ)
000184AC                            ; ---------------------------------------------------------------------------
000184AC                            
000184AC                            Obj70:					; XREF: Obj_Index
000184AC 7000                       		moveq	#0,d0
000184AE 1028 0024                  		move.b	$24(a0),d0
000184B2 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000184B6 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000184BA                            ; ===========================================================================
000184BA 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000184BC 0000                       		dc.w Obj70_Action-Obj70_Index
000184BE                            ; ===========================================================================
000184BE                            
000184BE                            Obj70_Main:				; XREF: Obj70_Index
000184BE 5428 0024                  		addq.b	#2,$24(a0)
000184C2 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000184CA 317C 42F0 0002             		move.w	#$42F0,2(a0)
000184D0 0028 0004 0001             		ori.b	#4,1(a0)
000184D6 117C 0004 0018             		move.b	#4,$18(a0)
000184DC 117C 0060 0019             		move.b	#$60,$19(a0)
000184E2 117C 0018 0016             		move.b	#$18,$16(a0)
000184E8 3168 0008 0032             		move.w	8(a0),$32(a0)
000184EE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000184F4 6100 0000                  		bsr.w	Obj70_Move2
000184F8                            
000184F8                            Obj70_Action:				; XREF: Obj70_Index
000184F8 3F28 0008                  		move.w	8(a0),-(sp)
000184FC 4A68 003A                  		tst.w	$3A(a0)
00018500 6700                       		beq.s	Obj70_Move
00018502 5368 003A                  		subq.w	#1,$3A(a0)
00018506 6600                       		bne.s	Obj70_Solid
00018508                            
00018508                            Obj70_Move:
00018508 4EB9 0000 E8F6             		jsr	SpeedToPos
0001850E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00018512 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00018514 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00018518                            
00018518                            Obj70_Solid:
00018518 381F                       		move.w	(sp)+,d4
0001851A 4A28 0001                  		tst.b	1(a0)
0001851E 6A00                       		bpl.s	Obj70_ChkDel
00018520 7200                       		moveq	#0,d1
00018522 1228 0019                  		move.b	$19(a0),d1
00018526 0641 000B                  		addi.w	#$B,d1
0001852A 7400                       		moveq	#0,d2
0001852C 1428 0016                  		move.b	$16(a0),d2
00018530 3602                       		move.w	d2,d3
00018532 5243                       		addq.w	#1,d3
00018534 6100 8D48                  		bsr.w	SolidObject
00018538                            
00018538                            Obj70_ChkDel:
00018538 3028 0032                  		move.w	$32(a0),d0
0001853C 0240 FF80                  		andi.w	#$FF80,d0
00018540 3238 F700                  		move.w	($FFFFF700).w,d1
00018544 0441 0080                  		subi.w	#$80,d1
00018548 0241 FF80                  		andi.w	#$FF80,d1
0001854C 9041                       		sub.w	d1,d0
0001854E 0C40 0280                  		cmpi.w	#$280,d0
00018552 6300                       		bls.s	Obj70_NoDel
00018554                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
00018554                            	;	beq.s	Obj70_Delete		; if it's zero, don't remember object
00018554                            	;	movea.w	d0,a2	; load address into a2
00018554                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018554 6000                       		bra.s	Obj70_Delete	; and delete object
00018556                            
00018556                            Obj70_NoDel:
00018556 4EF9 0000 E910             		jmp	DisplaySprite
0001855C                            ; ===========================================================================
0001855C                            
0001855C                            Obj70_Delete:
0001855C 4EF9 0000 E960             		jmp	DeleteObject
00018562                            ; ===========================================================================
00018562                            
00018562                            Obj70_Move2:				; XREF: Obj70_Main
00018562 1028 0038                  		move.b	$38(a0),d0
00018566 0240 0018                  		andi.w	#$18,d0
0001856A 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00018570 43F1 0000                  		lea	(a1,d0.w),a1
00018574 3159 0010                  		move.w	(a1)+,$10(a0)
00018578 3159 0012                  		move.w	(a1)+,$12(a0)
0001857C 3159 0034                  		move.w	(a1)+,$34(a0)
00018580 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00018584 317C 0007 003A             		move.w	#7,$3A(a0)
0001858A 4E75                       		rts	
0001858C                            ; ===========================================================================
0001858C 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00018594 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001859C FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000185A4 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000185AC                            ; ---------------------------------------------------------------------------
000185AC                            ; Sprite mappings - large girder block (SBZ)
000185AC                            ; ---------------------------------------------------------------------------
000185AC                            Map_obj70:
000185AC                            	include "_maps\obj70.asm"
000185AC                            ; ---------------------------------------------------------------------------
000185AC                            ; Sprite mappings - large girder block (SBZ)
000185AC                            ; ---------------------------------------------------------------------------
000185AC 0000                       		dc.w byte_1662A-Map_obj70
000185AE 0C                         byte_1662A:	dc.b $C
000185AF E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000185B4 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000185B9 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000185BE 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000185C3 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000185C8 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000185CD E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000185D2 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000185D7 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000185DC 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000185E1 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000185E6 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000185EC 00                         		even
000185EC 00                         		even
000185EC                            
000185EC                            ; ===========================================================================
000185EC                            ; ---------------------------------------------------------------------------
000185EC                            ; Object 72 - teleporter (SBZ)
000185EC                            ; ---------------------------------------------------------------------------
000185EC                            
000185EC                            Obj72:					; XREF: Obj_Index
000185EC 7000                       		moveq	#0,d0
000185EE 1028 0024                  		move.b	$24(a0),d0
000185F2 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000185F6 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000185FA 3028 0008                  		move.w	8(a0),d0
000185FE 0240 FF80                  		andi.w	#$FF80,d0
00018602 3238 F700                  		move.w	($FFFFF700).w,d1
00018606 0441 0080                  		subi.w	#$80,d1
0001860A 0241 FF80                  		andi.w	#$FF80,d1
0001860E 9041                       		sub.w	d1,d0
00018610 0C40 0280                  		cmpi.w	#$280,d0
00018614 6300                       		bls.s	Obj72_NoDel
00018616 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001861A 6700                       		beq.s	Obj72_Delete	; if it's zero, don't remember object
0001861C 3440                       		movea.w	d0,a2	; load address into a2
0001861E 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018622 6000                       		bra.s	Obj72_Delete	; and delete object
00018624                            
00018624                            Obj72_NoDel:
00018624 4E75                       		rts	
00018626                            ; ===========================================================================
00018626                            
00018626                            Obj72_Delete:
00018626 4EF9 0000 E960             		jmp	DeleteObject
0001862C                            ; ===========================================================================
0001862C 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001862E 0000                       		dc.w loc_166C8-Obj72_Index
00018630 0000                       		dc.w loc_1675E-Obj72_Index
00018632 0000                       		dc.w loc_16798-Obj72_Index
00018634                            ; ===========================================================================
00018634                            
00018634                            Obj72_Main:				; XREF: Obj72_Index
00018634 5428 0024                  		addq.b	#2,$24(a0)
00018638 1028 0028                  		move.b	$28(a0),d0
0001863C D040                       		add.w	d0,d0
0001863E 0240 001E                  		andi.w	#$1E,d0
00018642 45FA 0000                  		lea	Obj72_Data(pc),a2
00018646 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001864A 315A 003A                  		move.w	(a2)+,$3A(a0)
0001864E 214A 003C                  		move.l	a2,$3C(a0)
00018652 315A 0036                  		move.w	(a2)+,$36(a0)
00018656 315A 0038                  		move.w	(a2)+,$38(a0)
0001865A                            
0001865A                            loc_166C8:				; XREF: Obj72_Index
0001865A 43F8 D000                  		lea	($FFFFD000).w,a1
0001865E 3029 0008                  		move.w	8(a1),d0
00018662 9068 0008                  		sub.w	8(a0),d0
00018666 0828 0000 0022             		btst	#0,$22(a0)
0001866C 6700                       		beq.s	loc_166E0
0001866E 0640 000F                  		addi.w	#$F,d0
00018672                            
00018672                            loc_166E0:
00018672 0C40 0010                  		cmpi.w	#$10,d0
00018676 6400                       		bcc.s	locret_1675C
00018678 3229 000C                  		move.w	$C(a1),d1
0001867C 9268 000C                  		sub.w	$C(a0),d1
00018680 0641 0020                  		addi.w	#$20,d1
00018684 0C41 0040                  		cmpi.w	#$40,d1
00018688 6400                       		bcc.s	locret_1675C
0001868A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001868E 6600                       		bne.s	locret_1675C
00018690 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00018696 6600                       		bne.s	loc_1670E
00018698 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001869E 6500                       		bcs.s	locret_1675C
000186A0                            
000186A0                            loc_1670E:
000186A0 5428 0024                  		addq.b	#2,$24(a0)
000186A4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000186AA 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000186B0 337C 0800 0020             		move.w	#$800,$20(a1)
000186B6 337C 0000 0010             		move.w	#0,$10(a1)
000186BC 337C 0000 0012             		move.w	#0,$12(a1)
000186C2 08A8 0005 0022             		bclr	#5,$22(a0)
000186C8 08A9 0005 0022             		bclr	#5,$22(a1)
000186CE 08E9 0001 0022             		bset	#1,$22(a1)
000186D4 3368 0008 0008             		move.w	8(a0),8(a1)
000186DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186E0 4228 0032                  		clr.b	$32(a0)
000186E4 303C 00BE                  		move.w	#$BE,d0
000186E8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000186EE                            
000186EE                            locret_1675C:
000186EE 4E75                       		rts	
000186F0                            ; ===========================================================================
000186F0                            
000186F0                            loc_1675E:				; XREF: Obj72_Index
000186F0 43F8 D000                  		lea	($FFFFD000).w,a1
000186F4 1028 0032                  		move.b	$32(a0),d0
000186F8 5428 0032                  		addq.b	#2,$32(a0)
000186FC 4EB9 0000 29CC             		jsr	(CalcSine).l
00018702 EA40                       		asr.w	#5,d0
00018704 3428 000C                  		move.w	$C(a0),d2
00018708 9440                       		sub.w	d0,d2
0001870A 3342 000C                  		move.w	d2,$C(a1)
0001870E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018714 6600                       		bne.s	locret_16796
00018716 6100 0000                  		bsr.w	sub_1681C
0001871A 5428 0024                  		addq.b	#2,$24(a0)
0001871E 303C 00BC                  		move.w	#$BC,d0
00018722 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play teleport sound
00018728                            
00018728                            locret_16796:
00018728 4E75                       		rts	
0001872A                            ; ===========================================================================
0001872A                            
0001872A                            loc_16798:				; XREF: Obj72_Index
0001872A 588F                       		addq.l	#4,sp
0001872C 43F8 D000                  		lea	($FFFFD000).w,a1
00018730 5328 002E                  		subq.b	#1,$2E(a0)
00018734 6A00                       		bpl.s	loc_167DA
00018736 3368 0036 0008             		move.w	$36(a0),8(a1)
0001873C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018742 7200                       		moveq	#0,d1
00018744 1228 003A                  		move.b	$3A(a0),d1
00018748 5801                       		addq.b	#4,d1
0001874A B228 003B                  		cmp.b	$3B(a0),d1
0001874E 6500                       		bcs.s	loc_167C2
00018750 7200                       		moveq	#0,d1
00018752 6000                       		bra.s	loc_16800
00018754                            ; ===========================================================================
00018754                            
00018754                            loc_167C2:
00018754 1141 003A                  		move.b	d1,$3A(a0)
00018758 2468 003C                  		movea.l	$3C(a0),a2
0001875C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00018762 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00018768 6000 0000                  		bra.w	sub_1681C
0001876C                            ; ===========================================================================
0001876C                            
0001876C                            loc_167DA:
0001876C 2429 0008                  		move.l	8(a1),d2
00018770 2629 000C                  		move.l	$C(a1),d3
00018774 3029 0010                  		move.w	$10(a1),d0
00018778 48C0                       		ext.l	d0
0001877A E180                       		asl.l	#8,d0
0001877C D480                       		add.l	d0,d2
0001877E 3029 0012                  		move.w	$12(a1),d0
00018782 48C0                       		ext.l	d0
00018784 E180                       		asl.l	#8,d0
00018786 D680                       		add.l	d0,d3
00018788 2342 0008                  		move.l	d2,8(a1)
0001878C 2343 000C                  		move.l	d3,$C(a1)
00018790 4E75                       		rts	
00018792                            ; ===========================================================================
00018792                            
00018792                            loc_16800:
00018792 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00018798 4228 0024                  		clr.b	$24(a0)
0001879C 4238 F7C8                  		clr.b	($FFFFF7C8).w
000187A0 337C 0000 0010             		move.w	#0,$10(a1)
000187A6 337C 0200 0012             		move.w	#$200,$12(a1)
000187AC 4E75                       		rts	
000187AE                            
000187AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187AE                            
000187AE                            
000187AE                            sub_1681C:
000187AE 7000                       		moveq	#0,d0
000187B0 343C 1000                  		move.w	#$1000,d2
000187B4 3028 0036                  		move.w	$36(a0),d0
000187B8 9069 0008                  		sub.w	8(a1),d0
000187BC 6C00                       		bge.s	loc_16830
000187BE 4440                       		neg.w	d0
000187C0 4442                       		neg.w	d2
000187C2                            
000187C2                            loc_16830:
000187C2 7200                       		moveq	#0,d1
000187C4 363C 1000                  		move.w	#$1000,d3
000187C8 3228 0038                  		move.w	$38(a0),d1
000187CC 9269 000C                  		sub.w	$C(a1),d1
000187D0 6C00                       		bge.s	loc_16844
000187D2 4441                       		neg.w	d1
000187D4 4443                       		neg.w	d3
000187D6                            
000187D6                            loc_16844:
000187D6 B240                       		cmp.w	d0,d1
000187D8 6500                       		bcs.s	loc_1687A
000187DA 7200                       		moveq	#0,d1
000187DC 3228 0038                  		move.w	$38(a0),d1
000187E0 9269 000C                  		sub.w	$C(a1),d1
000187E4 4841                       		swap	d1
000187E6 83C3                       		divs.w	d3,d1
000187E8 7000                       		moveq	#0,d0
000187EA 3028 0036                  		move.w	$36(a0),d0
000187EE 9069 0008                  		sub.w	8(a1),d0
000187F2 6700                       		beq.s	loc_16866
000187F4 4840                       		swap	d0
000187F6 81C1                       		divs.w	d1,d0
000187F8                            
000187F8                            loc_16866:
000187F8 3340 0010                  		move.w	d0,$10(a1)
000187FC 3343 0012                  		move.w	d3,$12(a1)
00018800 4A41                       		tst.w	d1
00018802 6A00                       		bpl.s	loc_16874
00018804 4441                       		neg.w	d1
00018806                            
00018806                            loc_16874:
00018806 3141 002E                  		move.w	d1,$2E(a0)
0001880A 4E75                       		rts	
0001880C                            ; ===========================================================================
0001880C                            
0001880C                            loc_1687A:
0001880C 7000                       		moveq	#0,d0
0001880E 3028 0036                  		move.w	$36(a0),d0
00018812 9069 0008                  		sub.w	8(a1),d0
00018816 4840                       		swap	d0
00018818 81C2                       		divs.w	d2,d0
0001881A 7200                       		moveq	#0,d1
0001881C 3228 0038                  		move.w	$38(a0),d1
00018820 9269 000C                  		sub.w	$C(a1),d1
00018824 6700                       		beq.s	loc_16898
00018826 4841                       		swap	d1
00018828 83C0                       		divs.w	d0,d1
0001882A                            
0001882A                            loc_16898:
0001882A 3341 0012                  		move.w	d1,$12(a1)
0001882E 3342 0010                  		move.w	d2,$10(a1)
00018832 4A40                       		tst.w	d0
00018834 6A00                       		bpl.s	loc_168A6
00018836 4440                       		neg.w	d0
00018838                            
00018838                            loc_168A6:
00018838 3140 002E                  		move.w	d0,$2E(a0)
0001883C 4E75                       		rts	
0001883E                            ; End of function sub_1681C
0001883E                            
0001883E                            ; ===========================================================================
0001883E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018844 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001884A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001884E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018854 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001885A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018860 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00018866 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001886C 0884 0298 0894             		dc.w $884, $298, $894
00018872 0270 0894 0190             		dc.w $270, $894, $190
00018878 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001887E 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00018884 1184 0498 1158             		dc.w $1184, $498, $1158
0001888A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00018890 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00018896 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001889C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000188A2 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000188A8 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000188AE FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000188B4 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000188BA FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000188C0 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000188C6                            ; ===========================================================================
000188C6                            ; ---------------------------------------------------------------------------
000188C6                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000188C6                            ; ---------------------------------------------------------------------------
000188C6                            
000188C6                            Obj78:					; XREF: Obj_Index
000188C6 7000                       		moveq	#0,d0
000188C8 1028 0024                  		move.b	$24(a0),d0
000188CC 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000188D0 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000188D4                            ; ===========================================================================
000188D4 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000188D6 0000                       		dc.w Obj78_Action-Obj78_Index
000188D8 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000188DA 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000188DC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000188DE 0000                       		dc.w Obj78_Delete-Obj78_Index
000188E0 0000                       		dc.w loc_16CC0-Obj78_Index
000188E2                            ; ===========================================================================
000188E2                            
000188E2                            locret_16950:
000188E2 4E75                       		rts	
000188E4                            ; ===========================================================================
000188E4                            
000188E4                            Obj78_Main:				; XREF: Obj78_Index
000188E4 117C 0007 0016             		move.b	#7,$16(a0)
000188EA 117C 0008 0017             		move.b	#8,$17(a0)
000188F0 4EB9 0000 E8D6             		jsr	ObjectFall
000188F6 4EBA E4BE                  		jsr	ObjHitFloor
000188FA 4A41                       		tst.w	d1
000188FC 6AE4                       		bpl.s	locret_16950
000188FE D368 000C                  		add.w	d1,$C(a0)
00018902 4268 0012                  		clr.w	$12(a0)
00018906 5428 0024                  		addq.b	#2,$24(a0)
0001890A 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018912 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018918 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001891E 6700                       		beq.s	loc_16996
00018920 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018926                            
00018926                            loc_16996:
00018926 0228 0003 0001             		andi.b	#3,1(a0)
0001892C 0028 0004 0001             		ori.b	#4,1(a0)
00018932 1168 0001 0022             		move.b	1(a0),$22(a0)
00018938 117C 0004 0018             		move.b	#4,$18(a0)
0001893E 117C 0008 0019             		move.b	#8,$19(a0)
00018944 117C 000B 0020             		move.b	#$B,$20(a0)
0001894A 3428 0008                  		move.w	8(a0),d2
0001894E 7A0C                       		moveq	#$C,d5
00018950 0828 0000 0022             		btst	#0,$22(a0)
00018956 6700                       		beq.s	loc_169CA
00018958 4445                       		neg.w	d5
0001895A                            
0001895A                            loc_169CA:
0001895A 1C3C 0004                  		move.b	#4,d6
0001895E 7600                       		moveq	#0,d3
00018960 7804                       		moveq	#4,d4
00018962 2448                       		movea.l	a0,a2
00018964 7202                       		moveq	#2,d1
00018966                            
00018966                            Obj78_LoadBody:
00018966 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001896C 6600                       		bne.s	Obj78_QuitLoad
0001896E 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00018972 1346 0024                  		move.b	d6,$24(a1)
00018976 5406                       		addq.b	#2,d6
00018978 2368 0004 0004             		move.l	4(a0),4(a1)
0001897E 3368 0002 0002             		move.w	2(a0),2(a1)
00018984 137C 0005 0018             		move.b	#5,$18(a1)
0001898A 137C 0008 0019             		move.b	#8,$19(a1)
00018990 137C 00CB 0020             		move.b	#$CB,$20(a1)
00018996 D445                       		add.w	d5,d2
00018998 3342 0008                  		move.w	d2,8(a1)
0001899C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189A2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000189A8 1368 0022 0001             		move.b	$22(a0),1(a1)
000189AE 137C 0008 001A             		move.b	#8,$1A(a1)
000189B4 234A 003C                  		move.l	a2,$3C(a1)
000189B8 1344 003C                  		move.b	d4,$3C(a1)
000189BC 5804                       		addq.b	#4,d4
000189BE 2449                       		movea.l	a1,a2
000189C0                            
000189C0                            Obj78_QuitLoad:
000189C0 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000189C4                            
000189C4 117C 0007 002A             		move.b	#7,$2A(a0)
000189CA 4228 003C                  		clr.b	$3C(a0)
000189CE                            
000189CE                            Obj78_Action:				; XREF: Obj78_Index
000189CE 4A28 0022                  		tst.b	$22(a0)
000189D2 6B00 0000                  		bmi.w	loc_16C96
000189D6 7000                       		moveq	#0,d0
000189D8 1028 0025                  		move.b	$25(a0),d0
000189DC 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000189E0 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000189E4 1228 002B                  		move.b	$2B(a0),d1
000189E8 6A00                       		bpl.s	Obj78_Display
000189EA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000189F0 1028 0026                  		move.b	$26(a0),d0
000189F4 0240 007F                  		andi.w	#$7F,d0
000189F8 5828 0026                  		addq.b	#4,$26(a0)
000189FC 1031 0000                  		move.b	(a1,d0.w),d0
00018A00 6A00                       		bpl.s	Obj78_AniHead
00018A02 08A8 0007 002B             		bclr	#7,$2B(a0)
00018A08 6000                       		bra.s	Obj78_Display
00018A0A                            ; ===========================================================================
00018A0A                            
00018A0A                            Obj78_AniHead:
00018A0A 0201 0010                  		andi.b	#$10,d1
00018A0E D001                       		add.b	d1,d0
00018A10 1140 001A                  		move.b	d0,$1A(a0)
00018A14                            
00018A14                            Obj78_Display:
00018A14 3028 0008                  		move.w	8(a0),d0
00018A18 0240 FF80                  		andi.w	#$FF80,d0
00018A1C 3238 F700                  		move.w	($FFFFF700).w,d1
00018A20 0441 0080                  		subi.w	#$80,d1
00018A24 0241 FF80                  		andi.w	#$FF80,d1
00018A28 9041                       		sub.w	d1,d0
00018A2A 0C40 0280                  		cmpi.w	#$280,d0
00018A2E 6200 0000                  		bhi.w	Obj78_ChkGone
00018A32 4EF9 0000 E910             		jmp	DisplaySprite
00018A38                            ; ===========================================================================
00018A38                            
00018A38                            Obj78_ChkGone:
00018A38 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018A3C 6700                       		beq.s	loc_16ABC		; if it's zero, don't remember object
00018A3E 3440                       		movea.w	d0,a2	; load address into a2
00018A40 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
00018A44                            
00018A44                            loc_16ABC:
00018A44 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018A4A 4E75                       		rts	
00018A4C                            ; ===========================================================================
00018A4C                            
00018A4C                            Obj78_Delete:				; XREF: Obj78_Index
00018A4C 4EF9 0000 E960             		jmp	DeleteObject
00018A52                            ; ===========================================================================
00018A52 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018A54 0000                       		dc.w loc_16B02-Obj78_Index2
00018A56                            ; ===========================================================================
00018A56                            
00018A56                            Obj78_Move:				; XREF: Obj78_Index2
00018A56 5328 002A                  		subq.b	#1,$2A(a0)
00018A5A 6B00                       		bmi.s	Obj78_Move2
00018A5C 4E75                       		rts	
00018A5E                            ; ===========================================================================
00018A5E                            
00018A5E                            Obj78_Move2:
00018A5E 5428 0025                  		addq.b	#2,$25(a0)
00018A62 117C 0010 002A             		move.b	#$10,$2A(a0)
00018A68 317C FF40 0010             		move.w	#-$C0,$10(a0)
00018A6E 317C 0040 001C             		move.w	#$40,$1C(a0)
00018A74 0868 0004 002B             		bchg	#4,$2B(a0)
00018A7A 6600                       		bne.s	loc_16AFC
00018A7C 4268 0010                  		clr.w	$10(a0)
00018A80 4468 001C                  		neg.w	$1C(a0)
00018A84                            
00018A84                            loc_16AFC:
00018A84 08E8 0007 002B             		bset	#7,$2B(a0)
00018A8A                            
00018A8A                            loc_16B02:				; XREF: Obj78_Index2
00018A8A 5328 002A                  		subq.b	#1,$2A(a0)
00018A8E 6B00                       		bmi.s	loc_16B5E
00018A90 2F28 0008                  		move.l	8(a0),-(sp)
00018A94 2428 0008                  		move.l	8(a0),d2
00018A98 3028 0010                  		move.w	$10(a0),d0
00018A9C 0828 0000 0022             		btst	#0,$22(a0)
00018AA2 6700                       		beq.s	loc_16B1E
00018AA4 4440                       		neg.w	d0
00018AA6                            
00018AA6                            loc_16B1E:
00018AA6 48C0                       		ext.l	d0
00018AA8 E180                       		asl.l	#8,d0
00018AAA D480                       		add.l	d0,d2
00018AAC 2142 0008                  		move.l	d2,8(a0)
00018AB0 4EBA E304                  		jsr	ObjHitFloor
00018AB4 241F                       		move.l	(sp)+,d2
00018AB6 0C41 FFF8                  		cmpi.w	#-8,d1
00018ABA 6D00                       		blt.s	loc_16B70
00018ABC 0C41 000C                  		cmpi.w	#$C,d1
00018AC0 6C00                       		bge.s	loc_16B70
00018AC2 D368 000C                  		add.w	d1,$C(a0)
00018AC6 4842                       		swap	d2
00018AC8 B468 0008                  		cmp.w	8(a0),d2
00018ACC 6700                       		beq.s	locret_16B5C
00018ACE 7000                       		moveq	#0,d0
00018AD0 1028 003C                  		move.b	$3C(a0),d0
00018AD4 5228 003C                  		addq.b	#1,$3C(a0)
00018AD8 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018ADE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018AE2                            
00018AE2                            locret_16B5C:
00018AE2 4E75                       		rts	
00018AE4                            ; ===========================================================================
00018AE4                            
00018AE4                            loc_16B5E:
00018AE4 5528 0025                  		subq.b	#2,$25(a0)
00018AE8 117C 0007 002A             		move.b	#7,$2A(a0)
00018AEE 317C 0000 0010             		move.w	#0,$10(a0)
00018AF4 4E75                       		rts	
00018AF6                            ; ===========================================================================
00018AF6                            
00018AF6                            loc_16B70:
00018AF6 2142 0008                  		move.l	d2,8(a0)
00018AFA 0868 0000 0022             		bchg	#0,$22(a0)
00018B00 1168 0022 0001             		move.b	$22(a0),1(a0)
00018B06 7000                       		moveq	#0,d0
00018B08 1028 003C                  		move.b	$3C(a0),d0
00018B0C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018B12 5228 003C                  		addq.b	#1,$3C(a0)
00018B16 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018B1C 4E75                       		rts	
00018B1E                            ; ===========================================================================
00018B1E                            
00018B1E                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018B1E 2268 003C                  		movea.l	$3C(a0),a1
00018B22 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018B28 6A00                       		bpl.s	Obj78_BodySeg1
00018B2A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018B30 1028 0026                  		move.b	$26(a0),d0
00018B34 0240 007F                  		andi.w	#$7F,d0
00018B38 5828 0026                  		addq.b	#4,$26(a0)
00018B3C 4A31 0004                  		tst.b	4(a1,d0.w)
00018B40 6A00                       		bpl.s	Obj78_AniBody
00018B42 5828 0026                  		addq.b	#4,$26(a0)
00018B46                            
00018B46                            Obj78_AniBody:
00018B46 1031 0000                  		move.b	(a1,d0.w),d0
00018B4A 5000                       		addq.b	#8,d0
00018B4C 1140 001A                  		move.b	d0,$1A(a0)
00018B50                            
00018B50                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018B50 2268 003C                  		movea.l	$3C(a0),a1
00018B54 4A28 0022                  		tst.b	$22(a0)
00018B58 6B00 0000                  		bmi.w	loc_16C90
00018B5C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018B62 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018B68 6700 0000                  		beq.w	loc_16C64
00018B6C 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00018B72 3029 0010                  		move.w	$10(a1),d0
00018B76 D069 001C                  		add.w	$1C(a1),d0
00018B7A 3140 0010                  		move.w	d0,$10(a0)
00018B7E 2428 0008                  		move.l	8(a0),d2
00018B82 2602                       		move.l	d2,d3
00018B84 3028 0010                  		move.w	$10(a0),d0
00018B88 0828 0000 0022             		btst	#0,$22(a0)
00018B8E 6700                       		beq.s	loc_16C0C
00018B90 4440                       		neg.w	d0
00018B92                            
00018B92                            loc_16C0C:
00018B92 48C0                       		ext.l	d0
00018B94 E180                       		asl.l	#8,d0
00018B96 D480                       		add.l	d0,d2
00018B98 2142 0008                  		move.l	d2,8(a0)
00018B9C 4843                       		swap	d3
00018B9E B668 0008                  		cmp.w	8(a0),d3
00018BA2 6700                       		beq.s	loc_16C64
00018BA4 7000                       		moveq	#0,d0
00018BA6 1028 003C                  		move.b	$3C(a0),d0
00018BAA 1231 002C                  		move.b	$2C(a1,d0.w),d1
00018BAE 0C01 0080                  		cmpi.b	#-$80,d1
00018BB2 6600                       		bne.s	loc_16C50
00018BB4 4843                       		swap	d3
00018BB6 2143 0008                  		move.l	d3,8(a0)
00018BBA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018BBE 0868 0000 0022             		bchg	#0,$22(a0)
00018BC4 1168 0022 0001             		move.b	$22(a0),1(a0)
00018BCA 5228 003C                  		addq.b	#1,$3C(a0)
00018BCE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BD4 6000                       		bra.s	loc_16C64
00018BD6                            ; ===========================================================================
00018BD6                            
00018BD6                            loc_16C50:
00018BD6 4881                       		ext.w	d1
00018BD8 D368 000C                  		add.w	d1,$C(a0)
00018BDC 5228 003C                  		addq.b	#1,$3C(a0)
00018BE0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018BE6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018BEA                            
00018BEA                            loc_16C64:
00018BEA 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018BF0 6700                       		beq.s	loc_16C90
00018BF2 0C11 0027                  		cmpi.b	#$27,0(a1)
00018BF6 6700                       		beq.s	loc_16C7C
00018BF8 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018BFE 6600                       		bne.s	loc_16C82
00018C00                            
00018C00                            loc_16C7C:
00018C00 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018C04 117C 000A 0024             		move.b	#$A,$24(a0)
00018C0A                            
00018C0A                            loc_16C82:
00018C0A 4EF9 0000 E910             		jmp	DisplaySprite
00018C10                            
00018C10                            ; ===========================================================================
00018C10 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018C18                            ; ===========================================================================
00018C18                            
00018C18                            loc_16C90:
00018C18 08E9 0007 0022             		bset	#7,$22(a1)
00018C1E                            
00018C1E                            loc_16C96:
00018C1E 7000                       		moveq	#0,d0
00018C20 1028 0024                  		move.b	$24(a0),d0
00018C24 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018C28 0828 0000 0022             		btst	#0,$22(a0)
00018C2E 6700                       		beq.s	loc_16CAA
00018C30 4440                       		neg.w	d0
00018C32                            
00018C32                            loc_16CAA:
00018C32 3140 0010                  		move.w	d0,$10(a0)
00018C36 317C FC00 0012             		move.w	#-$400,$12(a0)
00018C3C 117C 000C 0024             		move.b	#$C,$24(a0)
00018C42 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018C48                            
00018C48                            loc_16CC0:				; XREF: Obj78_Index
00018C48 4EB9 0000 E8D6             		jsr	ObjectFall
00018C4E 4A68 0012                  		tst.w	$12(a0)
00018C52 6B00                       		bmi.s	loc_16CE0
00018C54 4EBA E160                  		jsr	ObjHitFloor
00018C58 4A41                       		tst.w	d1
00018C5A 6A00                       		bpl.s	loc_16CE0
00018C5C D368 000C                  		add.w	d1,$C(a0)
00018C60 317C FC00 0012             		move.w	#-$400,$12(a0)
00018C66                            
00018C66                            loc_16CE0:
00018C66 4A28 0001                  		tst.b	1(a0)
00018C6A 6A00 FDCC                  		bpl.w	Obj78_ChkGone
00018C6E 4EF9 0000 E910             		jmp	DisplaySprite
00018C74                            ; ===========================================================================
00018C74                            Ani_obj78:
00018C74                            	include "_anim\obj78.asm"
00018C74                            ; ---------------------------------------------------------------------------
00018C74                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018C74                            ; ---------------------------------------------------------------------------
00018C74 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00018C84 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00018C94 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00018CA4 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018CB4 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018CC4 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018CD4 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018CE4 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018CF4                            	even
00018CF4                            	even
00018CF4                            
00018CF4                            ; ---------------------------------------------------------------------------
00018CF4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018CF4                            ; ---------------------------------------------------------------------------
00018CF4                            Map_obj78:
00018CF4                            	include "_maps\obj78.asm"
00018CF4                            ; ---------------------------------------------------------------------------
00018CF4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018CF4                            ; ---------------------------------------------------------------------------
00018CF4 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018CF8 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018CFC 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018D00 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018D04 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018D08 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018D0C 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018D10 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018D14 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018D18 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018D1C 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018D20 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018D24 01                         byte_16D9E:	dc.b 1
00018D25 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018D2A 01                         byte_16DA4:	dc.b 1
00018D2B F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018D30 01                         byte_16DAA:	dc.b 1
00018D31 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018D36 01                         byte_16DB0:	dc.b 1
00018D37 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018D3C 01                         byte_16DB6:	dc.b 1
00018D3D EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018D42 01                         byte_16DBC:	dc.b 1
00018D43 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018D48 01                         byte_16DC2:	dc.b 1
00018D49 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018D4E 01                         byte_16DC8:	dc.b 1
00018D4F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018D54 01                         byte_16DCE:	dc.b 1
00018D55 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018D5A 01                         byte_16DD4:	dc.b 1
00018D5B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018D60 01                         byte_16DDA:	dc.b 1
00018D61 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018D66 01                         byte_16DE0:	dc.b 1
00018D67 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018D6C 01                         byte_16DE6:	dc.b 1
00018D6D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018D72 01                         byte_16DEC:	dc.b 1
00018D73 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018D78 01                         byte_16DF2:	dc.b 1
00018D79 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018D7E 01                         byte_16DF8:	dc.b 1
00018D7F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018D84 01                         byte_16DFE:	dc.b 1
00018D85 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00018D8A 01                         byte_16E04:	dc.b 1
00018D8B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018D90 01                         byte_16E0A:	dc.b 1
00018D91 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00018D96 01                         byte_16E10:	dc.b 1
00018D97 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018D9C 01                         byte_16E16:	dc.b 1
00018D9D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018DA2 01                         byte_16E1C:	dc.b 1
00018DA3 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00018DA8 01                         byte_16E22:	dc.b 1
00018DA9 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018DAE 01                         byte_16E28:	dc.b 1
00018DAF EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018DB4                            		even
00018DB4                            		even
00018DB4                            
00018DB4                            ; ===========================================================================
00018DB4                            ; ---------------------------------------------------------------------------
00018DB4                            ; Object 79 - lamppost
00018DB4                            ; ---------------------------------------------------------------------------
00018DB4                            
00018DB4                            Obj79:					; XREF: Obj_Index
00018DB4 7000                       		moveq	#0,d0
00018DB6 1028 0024                  		move.b	$24(a0),d0
00018DBA 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018DBE 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018DC2 4EFA 8196                  		jmp	MarkObjGone
00018DC6                            ; ===========================================================================
00018DC6 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018DC8 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018DCA 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018DCC 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018DCE                            ; ===========================================================================
00018DCE                            
00018DCE                            Obj79_Main:				; XREF: Obj79_Index
00018DCE 5428 0024                  		addq.b	#2,$24(a0)
00018DD2 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018DDA 317C 0571 0002             		move.w	#lamppostart,2(a0)
00018DE0 117C 0004 0001             		move.b	#4,1(a0)
00018DE6 117C 0008 0019             		move.b	#8,$19(a0)
00018DEC 117C 0005 0018             		move.b	#5,$18(a0)
00018DF2 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018DF6 3440                       		movea.w	d0,a2	; load address into a2
00018DF8 0812 0000                  		btst	#0,(a2)
00018DFC 6600                       		bne.s	Obj79_RedLamp
00018DFE 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018E02 0201 007F                  		andi.b	#$7F,d1
00018E06 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018E0A 0202 007F                  		andi.b	#$7F,d2
00018E0E B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018E10 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018E12                            
00018E12                            Obj79_RedLamp:
00018E12 08D2 0000                  		bset	#0,(a2)
00018E16 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018E1C 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018E22 4E75                       		rts	
00018E24                            ; ===========================================================================
00018E24                            
00018E24                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018E24 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018E28 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018E2C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018E30 6B00 0000                  		bmi.w	locret_16F90
00018E34 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018E38 0201 007F                  		andi.b	#$7F,d1
00018E3C 1428 0028                  		move.b	$28(a0),d2
00018E40 0202 007F                  		andi.b	#$7F,d2
00018E44 B202                       		cmp.b	d2,d1
00018E46 6500                       		bcs.s	Obj79_HitLamp
00018E48 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018E4C 3440                       		movea.w	d0,a2	; load address into a2
00018E4E 08D2 0000                  		bset	#0,(a2)
00018E52 117C 0004 0024             		move.b	#4,$24(a0)
00018E58 117C 0003 001A             		move.b	#3,$1A(a0)
00018E5E 6000 0000                  		bra.w	locret_16F90
00018E62                            ; ===========================================================================
00018E62                            
00018E62                            Obj79_HitLamp:
00018E62 3038 D008                  		move.w	($FFFFD008).w,d0
00018E66 9068 0008                  		sub.w	8(a0),d0
00018E6A 5040                       		addq.w	#8,d0
00018E6C 0C40 0010                  		cmpi.w	#$10,d0
00018E70 6400 0000                  		bcc.w	locret_16F90
00018E74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018E78 9068 000C                  		sub.w	$C(a0),d0
00018E7C 0640 0040                  		addi.w	#$40,d0
00018E80 0C40 0068                  		cmpi.w	#$68,d0
00018E84 6400                       		bcc.s	locret_16F90
00018E86 303C 00A1                  		move.w	#$A1,d0
00018E8A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018E90 5428 0024                  		addq.b	#2,$24(a0)
00018E94 4EB9 0000 F066             		jsr	SingleObjLoad
00018E9A 6600                       		bne.s	loc_16F76
00018E9C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018EA0 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018EA6 3368 0008 0030             		move.w	8(a0),$30(a1)
00018EAC 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018EB2 0469 0018 0032             		subi.w	#$18,$32(a1)
00018EB8 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018EC0 337C 0571 0002             		move.w	#lamppostart,2(a1)
00018EC6 137C 0004 0001             		move.b	#4,1(a1)
00018ECC 137C 0008 0019             		move.b	#8,$19(a1)
00018ED2 137C 0004 0018             		move.b	#4,$18(a1)
00018ED8 137C 0002 001A             		move.b	#2,$1A(a1)
00018EDE 337C 0020 0036             		move.w	#$20,$36(a1)
00018EE4                            
00018EE4                            loc_16F76:
00018EE4 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018EEA 6100 0000                  		bsr.w	Obj79_StoreInfo
00018EEE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00018EF2 3440                       		movea.w	d0,a2	; load address into a2
00018EF4 08D2 0000                  		bset	#0,(a2)
00018EF8                            
00018EF8                            locret_16F90:
00018EF8 4E75                       		rts	
00018EFA                            ; ===========================================================================
00018EFA                            
00018EFA                            Obj79_AfterHit:				; XREF: Obj79_Index
00018EFA 4E75                       		rts	
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            Obj79_Twirl:				; XREF: Obj79_Index
00018EFC 5368 0036                  		subq.w	#1,$36(a0)
00018F00 6A00                       		bpl.s	loc_16FA0
00018F02 117C 0004 0024             		move.b	#4,$24(a0)
00018F08                            
00018F08                            loc_16FA0:
00018F08 1028 0026                  		move.b	$26(a0),d0
00018F0C 0428 0010 0026             		subi.b	#$10,$26(a0)
00018F12 0400 0040                  		subi.b	#$40,d0
00018F16 4EB9 0000 29CC             		jsr	(CalcSine).l
00018F1C C3FC 0C00                  		muls.w	#$C00,d1
00018F20 4841                       		swap	d1
00018F22 D268 0030                  		add.w	$30(a0),d1
00018F26 3141 0008                  		move.w	d1,8(a0)
00018F2A C1FC 0C00                  		muls.w	#$C00,d0
00018F2E 4840                       		swap	d0
00018F30 D068 0032                  		add.w	$32(a0),d0
00018F34 3140 000C                  		move.w	d0,$C(a0)
00018F38 4E75                       		rts	
00018F3A                            ; ===========================================================================
00018F3A                            ; ---------------------------------------------------------------------------
00018F3A                            ; Subroutine to	store information when you hit a lamppost
00018F3A                            ; ---------------------------------------------------------------------------
00018F3A                            
00018F3A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018F3A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00018F40 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018F46 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018F4C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018F52 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018F58 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018F5E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018F64 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018F6A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00018F70 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018F76 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00018F7C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018F82 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018F88 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00018F8E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018F94 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018F9A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018FA0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018FA6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018FAC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018FB2 4E75                       		rts	
00018FB4                            
00018FB4                            ; ---------------------------------------------------------------------------
00018FB4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018FB4                            ; ---------------------------------------------------------------------------
00018FB4                            
00018FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018FB4                            
00018FB4                            
00018FB4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018FB4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018FBA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018FC0 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018FC6 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018FCC 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018FD2 4278 FE20                  		clr.w	($FFFFFE20).w
00018FD6 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018FDA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018FE0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018FE6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018FEA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018FF0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018FF6 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018FFC 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00019002 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00019008 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001900E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00019014 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001901A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00019020 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00019026 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001902C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00019032 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019038 6600                       		bne.s	loc_170E4
0001903A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00019040 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00019046 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001904C                            
0001904C                            loc_170E4:
0001904C 4A38 FE30                  		tst.b	($FFFFFE30).w
00019050 6A00                       		bpl.s	locret_170F6
00019052 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019056 0440 00A0                  		subi.w	#$A0,d0
0001905A 31C0 F728                  		move.w	d0,($FFFFF728).w
0001905E                            
0001905E                            locret_170F6:
0001905E 4E75                       		rts	
00019060                            ; End of function Obj79_LoadInfo
00019060                            
00019060                            ; ===========================================================================
00019060                            ; ---------------------------------------------------------------------------
00019060                            ; Sprite mappings - lamppost
00019060                            ; ---------------------------------------------------------------------------
00019060                            Map_obj79:
00019060                            	include "_maps\obj79.asm"
00019060                            ; ---------------------------------------------------------------------------
00019060                            ; Sprite mappings - lamppost
00019060                            ; ---------------------------------------------------------------------------
00019060 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00019064 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00019068 06                         byte_17100:	dc.b 6
00019069 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001906E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019073 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019078 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001907D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00019082 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00019087 04                         byte_1711F:	dc.b 4
00019088 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001908D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00019092 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00019097 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001909C 02                         byte_17134:	dc.b 2
0001909D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000190A2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000190A7 06                         byte_1713F:	dc.b 6
000190A8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000190AD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000190B2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000190B7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000190BC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000190C1 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000190C6                            		even
000190C6                            		even
000190C6                            
000190C6                            ; ===========================================================================
000190C6                            ; ---------------------------------------------------------------------------
000190C6                            ; Object 7D - hidden points at the end of a level
000190C6                            ; ---------------------------------------------------------------------------
000190C6                            
000190C6                            Obj7D:					; XREF: Obj_Index
000190C6 7000                       		moveq	#0,d0
000190C8 1028 0024                  		move.b	$24(a0),d0
000190CC 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000190D0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000190D4                            ; ===========================================================================
000190D4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000190D6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000190D8                            ; ===========================================================================
000190D8                            
000190D8                            Obj7D_Main:				; XREF: Obj7D_Index
000190D8 7410                       		moveq	#$10,d2
000190DA 3602                       		move.w	d2,d3
000190DC D643                       		add.w	d3,d3
000190DE 43F8 D000                  		lea	($FFFFD000).w,a1
000190E2 3029 0008                  		move.w	8(a1),d0
000190E6 9068 0008                  		sub.w	8(a0),d0
000190EA D042                       		add.w	d2,d0
000190EC B043                       		cmp.w	d3,d0
000190EE 6400                       		bcc.s	Obj7D_ChkDel
000190F0 3229 000C                  		move.w	$C(a1),d1
000190F4 9268 000C                  		sub.w	$C(a0),d1
000190F8 D242                       		add.w	d2,d1
000190FA B243                       		cmp.w	d3,d1
000190FC 6400                       		bcc.s	Obj7D_ChkDel
000190FE 4A78 FE08                  		tst.w	($FFFFFE08).w
00019102 6600                       		bne.s	Obj7D_ChkDel
00019104 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00019108 6600                       		bne.s	Obj7D_ChkDel
0001910A 5428 0024                  		addq.b	#2,$24(a0)
0001910E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00019116 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001911C 0028 0004 0001             		ori.b	#4,1(a0)
00019122 117C 0000 0018             		move.b	#0,$18(a0)
00019128 117C 0010 0019             		move.b	#$10,$19(a0)
0001912E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00019134 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001913A 303C 00C9                  		move.w	#$C9,d0
0001913E 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play bonus sound
00019144 7000                       		moveq	#0,d0
00019146 1028 0028                  		move.b	$28(a0),d0
0001914A D040                       		add.w	d0,d0
0001914C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00019150 4EB9 0000 0000             		jsr	AddPoints
00019156                            
00019156                            Obj7D_ChkDel:
00019156 3028 0008                  		move.w	8(a0),d0
0001915A 0240 FF80                  		andi.w	#$FF80,d0
0001915E 3238 F700                  		move.w	($FFFFF700).w,d1
00019162 0441 0080                  		subi.w	#$80,d1
00019166 0241 FF80                  		andi.w	#$FF80,d1
0001916A 9041                       		sub.w	d1,d0
0001916C 0C40 0280                  		cmpi.w	#$280,d0
00019170 6300                       		bls.s	Obj7D_NoDel
00019172 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
00019176 6700                       		beq.s	Obj7D_Delete		; if it's zero, don't remember object
00019178 3440                       		movea.w	d0,a2	; load address into a2
0001917A 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001917E 6000                       		bra.s	Obj7D_Delete	; and delete object
00019180                            
00019180                            Obj7D_NoDel:
00019180 4E75                       		rts	
00019182                            ; ===========================================================================
00019182                            
00019182                            Obj7D_Delete:
00019182 4EF9 0000 E960             		jmp	DeleteObject
00019188                            ; ===========================================================================
00019188 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001918A 03E8                       		dc.w 1000		; earn 1000*10 points for revealing 10000 object
0001918C 0064                       		dc.w 100		; earn 100*10 points for revealing 1000 object
0001918E 000A                       		dc.w 10			; earn 10*10 points for revealing 100 object
00019190                            ; ===========================================================================
00019190                            
00019190                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00019190 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00019194 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00019196 3028 0008                  		move.w	8(a0),d0
0001919A 0240 FF80                  		andi.w	#-$80,d0
0001919E 3238 F700                  		move.w	($FFFFF700).w,d1
000191A2 0441 0080                  		subi.w	#$80,d1
000191A6 0241 FF80                  		andi.w	#-$80,d1
000191AA 9041                       		sub.w	d1,d0
000191AC 0C40 0280                  		cmpi.w	#$280,d0
000191B0 6200                       		bhi.s	Obj7D_Delete2
000191B2 4EF9 0000 E910             		jmp	DisplaySprite
000191B8                            ; ===========================================================================
000191B8                            
000191B8                            Obj7D_Delete2:
000191B8 4EF9 0000 E960             		jmp	DeleteObject
000191BE                            ; ===========================================================================
000191BE                            ; ---------------------------------------------------------------------------
000191BE                            ; Sprite mappings - hidden points at the end of	a level
000191BE                            ; ---------------------------------------------------------------------------
000191BE                            Map_obj7D:
000191BE                            	include "_maps\obj7D.asm"
000191BE                            ; ---------------------------------------------------------------------------
000191BE                            ; Sprite mappings - hidden points at the end of	a level
000191BE                            ; ---------------------------------------------------------------------------
000191BE 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000191C2 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000191C6 00                         byte_17250:	dc.b 0
000191C7 01                         byte_17251:	dc.b 1
000191C8 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000191CD 01                         byte_17257:	dc.b 1
000191CE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000191D3 01                         byte_1725D:	dc.b 1
000191D4 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000191DA 00                         		even
000191DA 00                         		even
000191DA                            
000191DA                            ; ===========================================================================
000191DA                            ; ---------------------------------------------------------------------------
000191DA                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000191DA                            ; ---------------------------------------------------------------------------
000191DA                            
000191DA                            Obj8A:					; XREF: Obj_Index
000191DA 7000                       		moveq	#0,d0
000191DC 1028 0024                  		move.b	$24(a0),d0
000191E0 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000191E4 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000191E8                            ; ===========================================================================
000191E8 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000191EA 0000                       		dc.w Obj8A_Display-Obj8A_Index
000191EC                            ; ===========================================================================
000191EC                            
000191EC                            Obj8A_Main:				; XREF: Obj8A_Index
000191EC 5428 0024                  		addq.b	#2,$24(a0)
000191F0 317C 0120 0008             		move.w	#$120,8(a0)
000191F6 317C 00F0 000A             		move.w	#$F0,$A(a0)
000191FC 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00019204 317C 25A0 0002             		move.w	#$25A0,2(a0)
0001920A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001920E 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00019212 117C 0000 0001             		move.b	#0,1(a0)
00019218 117C 0000 0018             		move.b	#0,$18(a0)
0001921E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00019224 6600                       		bne.s	Obj8A_Display	; if not, branch
00019226 317C 20A6 0002             		move.w	#$20A6,2(a0)
0001922C 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00019232 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00019236 6700                       		beq.s	Obj8A_Display	; if not, branch
00019238 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001923E 6600                       		bne.s	Obj8A_Display	; if not, branch
00019240 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00019246 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001924C 4EF9 0000 E960             		jmp	DeleteObject
00019252                            ; ===========================================================================
00019252                            
00019252                            Obj8A_Display:				; XREF: Obj8A_Index
00019252 4EF9 0000 E910             		jmp	DisplaySprite
00019258                            ; ===========================================================================
00019258                            ; ---------------------------------------------------------------------------
00019258                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00019258                            ; ---------------------------------------------------------------------------
00019258                            Map_obj8A:
00019258                            	include "_maps\obj8A.asm"
00019258                            ; ---------------------------------------------------------------------------
00019258                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00019258                            ; ---------------------------------------------------------------------------
00019258 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001925C 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00019260 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00019264 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00019268 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001926C 0000                       		dc.w byte_176A9-Map_obj8A
0001926E 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
0001926F F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00019274 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00019279 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001927E F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00019283 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00019288 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001928D F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00019292 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00019297 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001929C F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
000192A1 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
000192A6 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
000192AB F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
000192B0 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
000192B5 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
000192B6 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
000192BB D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000192C0 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000192C5 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000192CA D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000192CF D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000192D4 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000192D9 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000192DE 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000192E3 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000192E8 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000192ED 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000192F2 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000192F7 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000192FC 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00019301 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00019306 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00019307 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
0001930C D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00019311 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00019316 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
0001931B D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00019320 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00019325 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
0001932A 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
0001932F 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00019334 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00019339 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
0001933A D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
0001933F D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00019344 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00019349 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
0001934E D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00019353 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00019358 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
0001935D D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00019362 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00019367 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
0001936C D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00019371 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00019376 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001937B D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00019380 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00019385 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001938A 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
0001938F 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00019394 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00019399 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
0001939E 0805 0016 00               		dc.b 8,	5, 0, $16, 0
000193A3 0805 0004 10               		dc.b 8,	5, 0, 4, $10
000193A8 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
000193AD 0805 0042 30               		dc.b 8,	5, 0, $42, $30
000193B2 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
000193B3 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
000193B8 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
000193BD D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000193C2 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000193C7 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000193CC D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000193D1 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000193D6 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000193DB 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000193E0 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000193E5 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000193EA 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000193EF 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000193F4 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000193F9 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000193FE 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00019403 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00019408 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
0001940D 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00019412 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00019417 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00019418 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
0001941D D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00019422 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00019427 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
0001942C D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00019431 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00019436 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001943B D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00019440 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00019445 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001944A D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
0001944F D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00019454 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00019459 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
0001945E 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00019463 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00019468 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
0001946D 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00019472 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00019477 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001947C 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00019481 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00019486 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001948B 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00019490 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00019495 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001949A 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001949B D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
000194A0 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
000194A5 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
000194AA D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
000194AF D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
000194B4 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
000194B9 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
000194BE D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000194C3 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000194C8 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000194CD D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000194D2 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000194D7 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000194DC 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000194E1 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000194E6 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000194EB 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000194F0 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000194F5 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000194FA 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000194FF 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00019504 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00019509 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001950E 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
0001950F D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00019514 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00019519 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
0001951E D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00019523 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00019528 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
0001952D D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00019532 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00019537 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
0001953C D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00019541 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00019546 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
0001954B D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00019550 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00019555 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
0001955A 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001955F 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00019564 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00019569 0009 0008 00               		dc.b 0,	9, 0, 8, 0
0001956E 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00019573 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00019578 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
0001957D 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00019582 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00019587 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
0001958C 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00019591 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00019596 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
0001959B 2005 0004 08               		dc.b $20, 5, 0,	4, 8
000195A0 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
000195A5 2005 0004 28               		dc.b $20, 5, 0,	4, $28
000195AA 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
000195AB F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
000195B0 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
000195B5 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
000195BA F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
000195BF F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
000195C4 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
000195C9 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
000195CE F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
000195D3 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
000195D8 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
000195DD F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000195E2 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000195E7 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000195EC F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000195F1 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000195F6 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000195F7 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000195FC 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019601 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019606 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001960B 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019610 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019615 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001961A 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001961F 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019620 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019625 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001962A E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
0001962F E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019634 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019639 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
0001963E E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019643 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00019648 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001964D 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00019652 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00019657 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
0001965C 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00019661 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00019666 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001966B 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00019670 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00019676 00                         		even
00019676 00                         		even
00019676                            
00019676                            ; ===========================================================================
00019676                            ; ---------------------------------------------------------------------------
00019676                            ; Object 3D - Eggman (GHZ)
00019676                            ; ---------------------------------------------------------------------------
00019676                            
00019676                            Obj3D:					; XREF: Obj_Index
00019676 7000                       		moveq	#0,d0
00019678 1028 0024                  		move.b	$24(a0),d0
0001967C 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00019680 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00019684                            ; ===========================================================================
00019684 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00019686 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00019688 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001968A 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001968C                            
0001968C 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001968E 0401                       		dc.b 4,	1
00019690 0607                       		dc.b 6,	7
00019692                            ; ===========================================================================
00019692                            
00019692                            Obj3D_Main:				; XREF: Obj3D_Index
00019692 45F9 0001 968C             		lea	(Obj3D_ObjData).l,a2
00019698 2248                       		movea.l	a0,a1
0001969A 7202                       		moveq	#2,d1
0001969C 6000                       		bra.s	Obj3D_LoadBoss
0001969E                            ; ===========================================================================
0001969E                            
0001969E                            Obj3D_Loop:
0001969E 4EB9 0000 F07C             		jsr	SingleObjLoad2
000196A4 6600                       		bne.s	loc_17772
000196A6                            
000196A6                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000196A6 135A 0024                  		move.b	(a2)+,$24(a1)
000196AA 12BC 003D                  		move.b	#$3D,0(a1)
000196AE 3368 0008 0008             		move.w	8(a0),8(a1)
000196B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000196BA 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000196C2 337C 0400 0002             		move.w	#$400,2(a1)
000196C8 137C 0004 0001             		move.b	#4,1(a1)
000196CE 137C 0020 0019             		move.b	#$20,$19(a1)
000196D4 137C 0003 0018             		move.b	#3,$18(a1)
000196DA 135A 001C                  		move.b	(a2)+,$1C(a1)
000196DE 2348 0034                  		move.l	a0,$34(a1)
000196E2 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000196E6                            
000196E6                            loc_17772:
000196E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000196EC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000196F2 117C 000F 0020             		move.b	#$F,$20(a0)
000196F8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000196FE                            
000196FE                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000196FE 7000                       		moveq	#0,d0
00019700 1028 0025                  		move.b	$25(a0),d0
00019704 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019708 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001970C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019712 4EB9 0000 B970             		jsr	AnimateSprite
00019718 1028 0022                  		move.b	$22(a0),d0
0001971C 0200 0003                  		andi.b	#3,d0
00019720 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019726 8128 0001                  		or.b	d0,1(a0)
0001972A 4EF9 0000 E910             		jmp	DisplaySprite
00019730                            ; ===========================================================================
00019730 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019732 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019734 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019736 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019738 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001973A 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001973C 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001973E                            ; ===========================================================================
0001973E                            
0001973E                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001973E 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019744 6100 0000                  		bsr.w	BossMove
00019748 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001974E 6600                       		bne.s	loc_177E6
00019750 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00019756 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001975A                            
0001975A                            loc_177E6:
0001975A 1028 003F                  		move.b	$3F(a0),d0
0001975E 4EB9 0000 29CC             		jsr	(CalcSine).l
00019764 EC40                       		asr.w	#6,d0
00019766 D068 0038                  		add.w	$38(a0),d0
0001976A 3140 000C                  		move.w	d0,$C(a0)
0001976E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019774 5428 003F                  		addq.b	#2,$3F(a0)
00019778 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001977E 6400                       		bcc.s	locret_1784A
00019780 4A28 0022                  		tst.b	$22(a0)
00019784 6B00                       		bmi.s	loc_1784C
00019786 4A28 0020                  		tst.b	$20(a0)
0001978A 6600                       		bne.s	locret_1784A
0001978C 4A28 003E                  		tst.b	$3E(a0)
00019790 6600                       		bne.s	Obj3D_ShipFlash
00019792 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00019798 303C 00AC                  		move.w	#$AC,d0
0001979C 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
000197A2                            
000197A2                            Obj3D_ShipFlash:
000197A2 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000197A6 7000                       		moveq	#0,d0		; move 0 (black) to d0
000197A8 4A51                       		tst.w	(a1)
000197AA 6600                       		bne.s	loc_1783C
000197AC 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000197B0                            
000197B0                            loc_1783C:
000197B0 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000197B2 5328 003E                  		subq.b	#1,$3E(a0)
000197B6 6600                       		bne.s	locret_1784A
000197B8 117C 000F 0020             		move.b	#$F,$20(a0)
000197BE                            
000197BE                            locret_1784A:
000197BE 4E75                       		rts	
000197C0                            ; ===========================================================================
000197C0                            
000197C0                            loc_1784C:				; XREF: loc_177E6
000197C0 7064                       		moveq	#100,d0
000197C2 6100 0000                  		bsr.w	AddPoints
000197C6 117C 0008 0025             		move.b	#8,$25(a0)
000197CC 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000197D2 4E75                       		rts	
000197D4                            
000197D4                            ; ---------------------------------------------------------------------------
000197D4                            ; Defeated boss	subroutine
000197D4                            ; ---------------------------------------------------------------------------
000197D4                            
000197D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000197D4                            
000197D4                            
000197D4                            BossDefeated:
000197D4 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
000197DA 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
000197E0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000197E4 0200 0007                  		andi.b	#7,d0
000197E8 6600                       		bne.s	locret_178A2
000197EA 4EB9 0000 F066             		jsr	SingleObjLoad
000197F0 6600                       		bne.s	locret_178A2
000197F2 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000197F6 3368 0008 0008             		move.w	8(a0),8(a1)
000197FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019802 4EB9 0000 29A6             		jsr	(RandomNumber).l
00019808 3200                       		move.w	d0,d1
0001980A 7200                       		moveq	#0,d1
0001980C 1200                       		move.b	d0,d1
0001980E E409                       		lsr.b	#2,d1
00019810 0441 0020                  		subi.w	#$20,d1
00019814 D369 0008                  		add.w	d1,8(a1)
00019818 E048                       		lsr.w	#8,d0
0001981A E608                       		lsr.b	#3,d0
0001981C D169 000C                  		add.w	d0,$C(a1)
00019820                            
00019820                            locret_178A2:
00019820 4E75                       		rts	
00019822                            ; End of function BossDefeated
00019822                            
00019822                            ; ---------------------------------------------------------------------------
00019822                            ; Subroutine to	move a boss
00019822                            ; ---------------------------------------------------------------------------
00019822                            
00019822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019822                            
00019822                            
00019822                            BossMove:
00019822 2428 0030                  		move.l	$30(a0),d2
00019826 2628 0038                  		move.l	$38(a0),d3
0001982A 3028 0010                  		move.w	$10(a0),d0
0001982E 48C0                       		ext.l	d0
00019830 E180                       		asl.l	#8,d0
00019832 D480                       		add.l	d0,d2
00019834 3028 0012                  		move.w	$12(a0),d0
00019838 48C0                       		ext.l	d0
0001983A E180                       		asl.l	#8,d0
0001983C D680                       		add.l	d0,d3
0001983E 2142 0030                  		move.l	d2,$30(a0)
00019842 2143 0038                  		move.l	d3,$38(a0)
00019846 4E75                       		rts	
00019848                            ; End of function BossMove
00019848                            
00019848                            ; ===========================================================================
00019848                            
00019848                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019848 317C FF00 0010             		move.w	#-$100,$10(a0)
0001984E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019854 6100 FFCC                  		bsr.w	BossMove
00019858 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001985E 6600                       		bne.s	loc_17916
00019860 317C 0000 0010             		move.w	#0,$10(a0)
00019866 317C 0000 0012             		move.w	#0,$12(a0)
0001986C 5428 0025                  		addq.b	#2,$25(a0)
00019870 4EB9 0000 F07C             		jsr	SingleObjLoad2
00019876 6600                       		bne.s	loc_17910
00019878 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001987C 3368 0030 0008             		move.w	$30(a0),8(a1)
00019882 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019888 2348 0034                  		move.l	a0,$34(a1)
0001988C                            
0001988C                            loc_17910:
0001988C 317C 0077 003C             		move.w	#$77,$3C(a0)
00019892                            
00019892                            loc_17916:
00019892 6000 FEC6                  		bra.w	loc_177E6
00019896                            ; ===========================================================================
00019896                            
00019896                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00019896 5368 003C                  		subq.w	#1,$3C(a0)
0001989A 6A00                       		bpl.s	Obj3D_Reverse
0001989C 5428 0025                  		addq.b	#2,$25(a0)
000198A0 317C 003F 003C             		move.w	#$3F,$3C(a0)
000198A6 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000198AC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000198B2 6600                       		bne.s	Obj3D_Reverse
000198B4 317C 007F 003C             		move.w	#$7F,$3C(a0)
000198BA 317C 0040 0010             		move.w	#$40,$10(a0)
000198C0                            
000198C0                            Obj3D_Reverse:
000198C0 0828 0000 0022             		btst	#0,$22(a0)
000198C6 6600                       		bne.s	loc_17950
000198C8 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000198CC                            
000198CC                            loc_17950:
000198CC 6000 FE8C                  		bra.w	loc_177E6
000198D0                            ; ===========================================================================
000198D0                            
000198D0                            loc_17954:				; XREF: Obj3D_ShipIndex
000198D0 5368 003C                  		subq.w	#1,$3C(a0)
000198D4 6B00                       		bmi.s	loc_17960
000198D6 6100 FF4A                  		bsr.w	BossMove
000198DA 6000                       		bra.s	loc_17976
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            loc_17960:
000198DC 0868 0000 0022             		bchg	#0,$22(a0)
000198E2 317C 003F 003C             		move.w	#$3F,$3C(a0)
000198E8 5528 0025                  		subq.b	#2,$25(a0)
000198EC 317C 0000 0010             		move.w	#0,$10(a0)
000198F2                            
000198F2                            loc_17976:
000198F2 6000 FE66                  		bra.w	loc_177E6
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            loc_1797A:				; XREF: Obj3D_ShipIndex
000198F6 5368 003C                  		subq.w	#1,$3C(a0)
000198FA 6B00                       		bmi.s	loc_17984
000198FC 6000 FED6                  		bra.w	BossDefeated
00019900                            ; ===========================================================================
00019900                            
00019900                            loc_17984:
00019900 08E8 0000 0022             		bset	#0,$22(a0)
00019906 08A8 0007 0022             		bclr	#7,$22(a0)
0001990C 4268 0010                  		clr.w	$10(a0)
00019910 5428 0025                  		addq.b	#2,$25(a0)
00019914 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001991A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001991E 6600                       		bne.s	locret_179AA
00019920 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019926                            
00019926                            locret_179AA:
00019926 4E75                       		rts	
00019928                            ; ===========================================================================
00019928                            
00019928                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019928 5268 003C                  		addq.w	#1,$3C(a0)
0001992C 6700                       		beq.s	loc_179BC
0001992E 6A00                       		bpl.s	loc_179C2
00019930 0668 0018 0012             		addi.w	#$18,$12(a0)
00019936 6000                       		bra.s	loc_179EE
00019938                            ; ===========================================================================
00019938                            
00019938                            loc_179BC:
00019938 4268 0012                  		clr.w	$12(a0)
0001993C 6000                       		bra.s	loc_179EE
0001993E                            ; ===========================================================================
0001993E                            
0001993E                            loc_179C2:
0001993E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019944 6500                       		bcs.s	loc_179DA
00019946 6700                       		beq.s	loc_179E0
00019948 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001994E 6500                       		bcs.s	loc_179EE
00019950 5428 0025                  		addq.b	#2,$25(a0)
00019954 6000                       		bra.s	loc_179EE
00019956                            ; ===========================================================================
00019956                            
00019956                            loc_179DA:
00019956 5168 0012                  		subq.w	#8,$12(a0)
0001995A 6000                       		bra.s	loc_179EE
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_179E0:
0001995C 4268 0012                  		clr.w	$12(a0)
00019960 303C 0081                  		move.w	#$81,d0
00019964 4EB9 0000 11F0             		jsr	(PlaySound).l	; play GHZ music
0001996A                            
0001996A                            loc_179EE:
0001996A 6100 FEB6                  		bsr.w	BossMove
0001996E 6000 FDEA                  		bra.w	loc_177E6
00019972                            ; ===========================================================================
00019972                            
00019972                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019972 317C 0400 0010             		move.w	#$400,$10(a0)
00019978 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001997E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019984 6700                       		beq.s	loc_17A10
00019986 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001998A 6000                       		bra.s	loc_17A16
0001998C                            ; ===========================================================================
0001998C                            
0001998C                            loc_17A10:
0001998C 4A28 0001                  		tst.b	1(a0)
00019990 6A00                       		bpl.s	Obj3D_ShipDel
00019992                            
00019992                            loc_17A16:
00019992 6100 FE8E                  		bsr.w	BossMove
00019996 6000 FDC2                  		bra.w	loc_177E6
0001999A                            ; ===========================================================================
0001999A                            
0001999A                            Obj3D_ShipDel:
0001999A 4EF9 0000 E960             		jmp	DeleteObject
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000199A0 7000                       		moveq	#0,d0
000199A2 7201                       		moveq	#1,d1
000199A4 2268 0034                  		movea.l	$34(a0),a1
000199A8 1029 0025                  		move.b	$25(a1),d0
000199AC 5900                       		subq.b	#4,d0
000199AE 6600                       		bne.s	loc_17A3E
000199B0 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000199B6 6600                       		bne.s	loc_17A46
000199B8 7204                       		moveq	#4,d1
000199BA                            
000199BA                            loc_17A3E:
000199BA 5D00                       		subq.b	#6,d0
000199BC 6B00                       		bmi.s	loc_17A46
000199BE 720A                       		moveq	#$A,d1
000199C0 6000                       		bra.s	loc_17A5A
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            loc_17A46:
000199C2 4A29 0020                  		tst.b	$20(a1)
000199C6 6600                       		bne.s	loc_17A50
000199C8 7205                       		moveq	#5,d1
000199CA 6000                       		bra.s	loc_17A5A
000199CC                            ; ===========================================================================
000199CC                            
000199CC                            loc_17A50:
000199CC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000199D2 6500                       		bcs.s	loc_17A5A
000199D4 7204                       		moveq	#4,d1
000199D6                            
000199D6                            loc_17A5A:
000199D6 1141 001C                  		move.b	d1,$1C(a0)
000199DA 5500                       		subq.b	#2,d0
000199DC 6600                       		bne.s	Obj3D_FaceDisp
000199DE 117C 0006 001C             		move.b	#6,$1C(a0)
000199E4 4A28 0001                  		tst.b	1(a0)
000199E8 6A00                       		bpl.s	Obj3D_FaceDel
000199EA                            
000199EA                            Obj3D_FaceDisp:
000199EA 6000                       		bra.s	Obj3D_Display
000199EC                            ; ===========================================================================
000199EC                            
000199EC                            Obj3D_FaceDel:
000199EC 4EF9 0000 E960             		jmp	DeleteObject
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000199F2 117C 0007 001C             		move.b	#7,$1C(a0)
000199F8 2268 0034                  		movea.l	$34(a0),a1
000199FC 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019A02 6600                       		bne.s	loc_17A96
00019A04 117C 000B 001C             		move.b	#$B,$1C(a0)
00019A0A 4A28 0001                  		tst.b	1(a0)
00019A0E 6A00                       		bpl.s	Obj3D_FlameDel
00019A10 6000                       		bra.s	Obj3D_FlameDisp
00019A12                            ; ===========================================================================
00019A12                            
00019A12                            loc_17A96:
00019A12 3029 0010                  		move.w	$10(a1),d0
00019A16 6700                       		beq.s	Obj3D_FlameDisp
00019A18 117C 0008 001C             		move.b	#8,$1C(a0)
00019A1E                            
00019A1E                            Obj3D_FlameDisp:
00019A1E 6000                       		bra.s	Obj3D_Display
00019A20                            ; ===========================================================================
00019A20                            
00019A20                            Obj3D_FlameDel:
00019A20 4EF9 0000 E960             		jmp	DeleteObject
00019A26                            ; ===========================================================================
00019A26                            
00019A26                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019A26 2268 0034                  		movea.l	$34(a0),a1
00019A2A 3169 0008 0008             		move.w	8(a1),8(a0)
00019A30 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A36 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A3C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019A42 4EB9 0000 B970             		jsr	AnimateSprite
00019A48 1028 0022                  		move.b	$22(a0),d0
00019A4C 0200 0003                  		andi.b	#3,d0
00019A50 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A56 8128 0001                  		or.b	d0,1(a0)
00019A5A 4EF9 0000 E910             		jmp	DisplaySprite
00019A60                            ; ===========================================================================
00019A60                            ; ---------------------------------------------------------------------------
00019A60                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019A60                            ; ---------------------------------------------------------------------------
00019A60                            
00019A60                            Obj48:					; XREF: Obj_Index
00019A60 7000                       		moveq	#0,d0
00019A62 1028 0024                  		move.b	$24(a0),d0
00019A66 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00019A6A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00019A6E                            ; ===========================================================================
00019A6E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019A70 0000                       		dc.w Obj48_Base-Obj48_Index
00019A72 0000                       		dc.w Obj48_Display2-Obj48_Index
00019A74 0000                       		dc.w loc_17C68-Obj48_Index
00019A76 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            Obj48_Main:				; XREF: Obj48_Index
00019A78 5428 0024                  		addq.b	#2,$24(a0)
00019A7C 317C 4080 0026             		move.w	#$4080,$26(a0)
00019A82 317C FE00 003E             		move.w	#-$200,$3E(a0)
00019A88 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019A90 317C 046C 0002             		move.w	#$46C,2(a0)
00019A96 45E8 0028                  		lea	$28(a0),a2
00019A9A 14FC 0000                  		move.b	#0,(a2)+
00019A9E 7205                       		moveq	#5,d1
00019AA0 2248                       		movea.l	a0,a1
00019AA2 6000                       		bra.s	loc_17B60
00019AA4                            ; ===========================================================================
00019AA4                            
00019AA4                            Obj48_MakeLinks:
00019AA4 4EB9 0000 F07C             		jsr	SingleObjLoad2
00019AAA 6600                       		bne.s	Obj48_MakeBall
00019AAC 3368 0008 0008             		move.w	8(a0),8(a1)
00019AB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AB8 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019ABC 137C 0006 0024             		move.b	#6,$24(a1)
00019AC2 237C 0000 8D66 0004        		move.l	#Map_obj15,4(a1)
00019ACA 337C 0380 0002             		move.w	#$380,2(a1)
00019AD0 137C 0001 001A             		move.b	#1,$1A(a1)
00019AD6 5228 0028                  		addq.b	#1,$28(a0)
00019ADA                            
00019ADA                            loc_17B60:				; XREF: Obj48_Main
00019ADA 3A09                       		move.w	a1,d5
00019ADC 0445 D000                  		subi.w	#$D000,d5
00019AE0 EC4D                       		lsr.w	#6,d5
00019AE2 0245 007F                  		andi.w	#$7F,d5
00019AE6 14C5                       		move.b	d5,(a2)+
00019AE8 137C 0004 0001             		move.b	#4,1(a1)
00019AEE 137C 0008 0019             		move.b	#8,$19(a1)
00019AF4 137C 0006 0018             		move.b	#6,$18(a1)
00019AFA 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019B00 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019B04                            
00019B04                            Obj48_MakeBall:
00019B04 137C 0008 0024             		move.b	#8,$24(a1)
00019B0A 237C 0000 92DE 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019B12 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019B18 137C 0001 001A             		move.b	#1,$1A(a1)
00019B1E 137C 0005 0018             		move.b	#5,$18(a1)
00019B24 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019B2A 4E75                       		rts	
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019B32                            
00019B32                            ; ===========================================================================
00019B32                            
00019B32                            Obj48_Base:				; XREF: Obj48_Index
00019B32 47F9 0001 9B2C             		lea	(Obj48_PosData).l,a3
00019B38 45E8 0028                  		lea	$28(a0),a2
00019B3C 7C00                       		moveq	#0,d6
00019B3E 1C1A                       		move.b	(a2)+,d6
00019B40                            
00019B40                            loc_17BC6:
00019B40 7800                       		moveq	#0,d4
00019B42 181A                       		move.b	(a2)+,d4
00019B44 ED4C                       		lsl.w	#6,d4
00019B46 0684 00FF D000             		addi.l	#$FFD000,d4
00019B4C 2244                       		movea.l	d4,a1
00019B4E 101B                       		move.b	(a3)+,d0
00019B50 B029 003C                  		cmp.b	$3C(a1),d0
00019B54 6700                       		beq.s	loc_17BE0
00019B56 5229 003C                  		addq.b	#1,$3C(a1)
00019B5A                            
00019B5A                            loc_17BE0:
00019B5A 51CE FFE4                  		dbf	d6,loc_17BC6
00019B5E                            
00019B5E B029 003C                  		cmp.b	$3C(a1),d0
00019B62 6600                       		bne.s	loc_17BFA
00019B64 2268 0034                  		movea.l	$34(a0),a1
00019B68 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00019B6E 6600                       		bne.s	loc_17BFA
00019B70 5428 0024                  		addq.b	#2,$24(a0)
00019B74                            
00019B74                            loc_17BFA:
00019B74 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019B7A 6700                       		beq.s	Obj48_Display
00019B7C 5268 0032                  		addq.w	#1,$32(a0)
00019B80                            
00019B80                            Obj48_Display:
00019B80 6100 0000                  		bsr.w	sub_17C2A
00019B84 1028 0026                  		move.b	$26(a0),d0
00019B88 4EB9 0000 8CCC             		jsr	(Obj15_Move2).l
00019B8E 4EF9 0000 E910             		jmp	DisplaySprite
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            Obj48_Display2:				; XREF: Obj48_Index
00019B94 6100 0000                  		bsr.w	sub_17C2A
00019B98 4EB9 0000 8C8C             		jsr	(Obj48_Move).l
00019B9E 4EF9 0000 E910             		jmp	DisplaySprite
00019BA4                            
00019BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BA4                            
00019BA4                            
00019BA4                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00019BA4 2268 0034                  		movea.l	$34(a0),a1
00019BA8 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019BAE 6400                       		bcc.s	loc_17C3C
00019BB0 0868 0000 001A             		bchg	#0,$1A(a0)
00019BB6                            
00019BB6                            loc_17C3C:
00019BB6 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019BBC 3029 000C                  		move.w	$C(a1),d0
00019BC0 D068 0032                  		add.w	$32(a0),d0
00019BC4 3140 0038                  		move.w	d0,$38(a0)
00019BC8 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BCE 4A29 0022                  		tst.b	$22(a1)
00019BD2 6A00                       		bpl.s	locret_17C66
00019BD4 10BC 003F                  		move.b	#$3F,0(a0)
00019BD8 117C 0000 0024             		move.b	#0,$24(a0)
00019BDE                            
00019BDE                            locret_17C66:
00019BDE 4E75                       		rts	
00019BE0                            ; End of function sub_17C2A
00019BE0                            
00019BE0                            ; ===========================================================================
00019BE0                            
00019BE0                            loc_17C68:				; XREF: Obj48_Index
00019BE0 2268 0034                  		movea.l	$34(a0),a1
00019BE4 4A29 0022                  		tst.b	$22(a1)
00019BE8 6A00                       		bpl.s	Obj48_Display3
00019BEA 10BC 003F                  		move.b	#$3F,0(a0)
00019BEE 117C 0000 0024             		move.b	#0,$24(a0)
00019BF4                            
00019BF4                            Obj48_Display3:
00019BF4 4EF9 0000 E910             		jmp	DisplaySprite
00019BFA                            ; ===========================================================================
00019BFA                            
00019BFA                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019BFA 7000                       		moveq	#0,d0
00019BFC 4A28 001A                  		tst.b	$1A(a0)
00019C00 6600                       		bne.s	Obj48_Vanish
00019C02 5200                       		addq.b	#1,d0
00019C04                            
00019C04                            Obj48_Vanish:
00019C04 1140 001A                  		move.b	d0,$1A(a0)
00019C08 2268 0034                  		movea.l	$34(a0),a1
00019C0C 4A29 0022                  		tst.b	$22(a1)
00019C10 6A00                       		bpl.s	Obj48_Display4
00019C12 117C 0000 0020             		move.b	#0,$20(a0)
00019C18 6100 FBBA                  		bsr.w	BossDefeated
00019C1C 5328 003C                  		subq.b	#1,$3C(a0)
00019C20 6A00                       		bpl.s	Obj48_Display4
00019C22 10BC 003F                  		move.b	#$3F,(a0)
00019C26 117C 0000 0024             		move.b	#0,$24(a0)
00019C2C                            
00019C2C                            Obj48_Display4:
00019C2C 4EF9 0000 E910             		jmp	DisplaySprite
00019C32                            ; ===========================================================================
00019C32                            Ani_Eggman:
00019C32                            	include "_anim\Eggman.asm"
00019C32                            ; ---------------------------------------------------------------------------
00019C32                            ; Animation script - Eggman (bosses)
00019C32                            ; ---------------------------------------------------------------------------
00019C32 0000                       		dc.w byte_17CD4-Ani_Eggman
00019C34 0000                       		dc.w byte_17CD8-Ani_Eggman
00019C36 0000                       		dc.w byte_17CDC-Ani_Eggman
00019C38 0000                       		dc.w byte_17CE0-Ani_Eggman
00019C3A 0000                       		dc.w byte_17CE4-Ani_Eggman
00019C3C 0000                       		dc.w byte_17CE8-Ani_Eggman
00019C3E 0000                       		dc.w byte_17CEC-Ani_Eggman
00019C40 0000                       		dc.w byte_17CF0-Ani_Eggman
00019C42 0000                       		dc.w byte_17CF4-Ani_Eggman
00019C44 0000                       		dc.w byte_17CF8-Ani_Eggman
00019C46 0000                       		dc.w byte_17CFC-Ani_Eggman
00019C48 0000                       		dc.w byte_17D00-Ani_Eggman
00019C4A 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019C4E 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019C52 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019C56 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019C5A 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019C5E 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019C62 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019C66 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019C6A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019C6E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019C72 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019C76 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019C82                            		even
00019C82                            		even
00019C82                            
00019C82                            ; ---------------------------------------------------------------------------
00019C82                            ; Sprite mappings - Eggman (boss levels)
00019C82                            ; ---------------------------------------------------------------------------
00019C82                            Map_Eggman:
00019C82                            	include "_maps\Eggman.asm"
00019C82                            ; ---------------------------------------------------------------------------
00019C82                            ; Sprite mappings - Eggman (boss levels)
00019C82                            ; ---------------------------------------------------------------------------
00019C82 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019C86 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019C8A 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019C8E 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00019C92 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019C96 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019C9A 0000                       		dc.w byte_17DC8-Map_Eggman
00019C9C 06                         byte_17D26:	dc.b 6
00019C9D EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00019CA2 EC01 000E 14               		dc.b $EC, 1, 0,	$E, $14
00019CA7 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019CAC FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019CB1 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019CB6 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019CBB 02                         byte_17D45:	dc.b 2
00019CBC E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019CC1 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019CC6 02                         byte_17D50:	dc.b 2
00019CC7 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019CCC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019CD1 03                         byte_17D5B:	dc.b 3
00019CD2 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019CD7 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019CDC EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019CE1 03                         byte_17D6B:	dc.b 3
00019CE2 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019CE7 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019CEC EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019CF1 03                         byte_17D7B:	dc.b 3
00019CF2 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019CF7 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019CFC EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019D01 03                         byte_17D8B:	dc.b 3
00019D02 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019D07 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019D0C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019D11 04                         byte_17D9B:	dc.b 4
00019D12 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019D17 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019D1C EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019D21 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019D26 01                         byte_17DB0:	dc.b 1
00019D27 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019D2C 01                         byte_17DB6:	dc.b 1
00019D2D 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019D32 00                         byte_17DBC:	dc.b 0
00019D33 02                         byte_17DBD:	dc.b 2
00019D34 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019D39 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019D3E 02                         byte_17DC8:	dc.b 2
00019D3F F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019D44 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019D4A 00                         		even
00019D4A 00                         		even
00019D4A                            
00019D4A                            ; ---------------------------------------------------------------------------
00019D4A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019D4A                            ; ---------------------------------------------------------------------------
00019D4A                            Map_BossItems:
00019D4A                            	include "_maps\Boss items.asm"
00019D4A                            ; ---------------------------------------------------------------------------
00019D4A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019D4A                            ; ---------------------------------------------------------------------------
00019D4A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019D4E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019D52 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019D56 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019D5A 01                         byte_17DE4:	dc.b 1
00019D5B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019D60 02                         byte_17DEA:	dc.b 2
00019D61 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019D66 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019D6B 00                         		dc.b 0
00019D6C 01                         byte_17DF6:	dc.b 1
00019D6D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019D72 01                         byte_17DFC:	dc.b 1
00019D73 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019D78 01                         byte_17E02:	dc.b 1
00019D79 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019D7E 04                         byte_17E08:	dc.b 4
00019D7F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00019D84 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00019D89 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019D8E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019D93 00                         		dc.b 0
00019D94 02                         byte_17E1E:	dc.b 2
00019D95 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019D9A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019D9F 00                         		dc.b 0
00019DA0 02                         byte_17E2A:	dc.b 2
00019DA1 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00019DA6 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019DAC 00                         		even
00019DAC 00                         		even
00019DAC                            
00019DAC                            ; ===========================================================================
00019DAC                            ; ---------------------------------------------------------------------------
00019DAC                            ; Object 77 - Eggman (LZ)
00019DAC                            ; ---------------------------------------------------------------------------
00019DAC                            
00019DAC                            Obj77:					; XREF: Obj_Index
00019DAC 7000                       		moveq	#0,d0
00019DAE 1028 0024                  		move.b	$24(a0),d0
00019DB2 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019DB6 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019DBA                            ; ===========================================================================
00019DBA 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019DBC 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019DBE 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019DC0 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019DC2                            
00019DC2 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019DC4 0401                       		dc.b 4,	1
00019DC6 0607                       		dc.b 6,	7
00019DC8                            ; ===========================================================================
00019DC8                            
00019DC8                            Obj77_Main:				; XREF: Obj77_Index
00019DC8 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019DCE 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019DD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019DDA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019DE0 117C 000F 0020             		move.b	#$F,$20(a0)
00019DE6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019DEC 117C 0004 0018             		move.b	#4,$18(a0)
00019DF2 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019DF6 2248                       		movea.l	a0,a1
00019DF8 7202                       		moveq	#2,d1
00019DFA 6000                       		bra.s	Obj77_LoadBoss
00019DFC                            ; ===========================================================================
00019DFC                            
00019DFC                            Obj77_Loop:
00019DFC 4EB9 0000 F07C             		jsr	SingleObjLoad2
00019E02 6600                       		bne.s	Obj77_ShipMain
00019E04 12BC 0077                  		move.b	#$77,0(a1)
00019E08 3368 0008 0008             		move.w	8(a0),8(a1)
00019E0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E14                            
00019E14                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019E14 08A8 0000 0022             		bclr	#0,$22(a0)
00019E1A 4229 0025                  		clr.b	$25(a1)
00019E1E 135A 0024                  		move.b	(a2)+,$24(a1)
00019E22 135A 001C                  		move.b	(a2)+,$1C(a1)
00019E26 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019E2C 237C 0001 9C82 0004        		move.l	#Map_Eggman,4(a1)
00019E34 337C 0400 0002             		move.w	#$400,2(a1)
00019E3A 137C 0004 0001             		move.b	#4,1(a1)
00019E40 137C 0020 0019             		move.b	#$20,$19(a1)
00019E46 2348 0034                  		move.l	a0,$34(a1)
00019E4A 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019E4E                            
00019E4E                            Obj77_ShipMain:
00019E4E 43F8 D000                  		lea	($FFFFD000).w,a1
00019E52 7000                       		moveq	#0,d0
00019E54 1028 0025                  		move.b	$25(a0),d0
00019E58 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00019E5C 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019E60 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
00019E66 4EB9 0000 B970             		jsr	AnimateSprite
00019E6C 7003                       		moveq	#3,d0
00019E6E C028 0022                  		and.b	$22(a0),d0
00019E72 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019E78 8128 0001                  		or.b	d0,1(a0)
00019E7C 4EF9 0000 E910             		jmp	DisplaySprite
00019E82                            ; ===========================================================================
00019E82 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00019E86 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00019E8A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00019E8E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00019E92                            ; ===========================================================================
00019E92                            
00019E92                            loc_17F1E:				; XREF: Obj77_ShipIndex
00019E92 3029 0008                  		move.w	8(a1),d0
00019E96 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00019E9A 6500                       		bcs.s	loc_17F38
00019E9C 317C FE80 0012             		move.w	#-$180,$12(a0)
00019EA2 317C 0060 0010             		move.w	#$60,$10(a0)
00019EA8 5428 0025                  		addq.b	#2,$25(a0)
00019EAC                            
00019EAC                            loc_17F38:
00019EAC 6100 F974                  		bsr.w	BossMove
00019EB0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019EB6 3168 0030 0008             		move.w	$30(a0),8(a0)
00019EBC                            
00019EBC                            loc_17F48:
00019EBC 4A28 003D                  		tst.b	$3D(a0)
00019EC0 6600                       		bne.s	loc_17F8E
00019EC2 4A28 0022                  		tst.b	$22(a0)
00019EC6 6B00                       		bmi.s	loc_17F92
00019EC8 4A28 0020                  		tst.b	$20(a0)
00019ECC 6600                       		bne.s	locret_17F8C
00019ECE 4A28 003E                  		tst.b	$3E(a0)
00019ED2 6600                       		bne.s	loc_17F70
00019ED4 117C 0020 003E             		move.b	#$20,$3E(a0)
00019EDA 303C 00AC                  		move.w	#$AC,d0
00019EDE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
00019EE4                            
00019EE4                            loc_17F70:
00019EE4 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019EE8 7000                       		moveq	#0,d0
00019EEA 4A51                       		tst.w	(a1)
00019EEC 6600                       		bne.s	loc_17F7E
00019EEE 303C 0EEE                  		move.w	#$EEE,d0
00019EF2                            
00019EF2                            loc_17F7E:
00019EF2 3280                       		move.w	d0,(a1)
00019EF4 5328 003E                  		subq.b	#1,$3E(a0)
00019EF8 6600                       		bne.s	locret_17F8C
00019EFA 117C 000F 0020             		move.b	#$F,$20(a0)
00019F00                            
00019F00                            locret_17F8C:
00019F00 4E75                       		rts	
00019F02                            ; ===========================================================================
00019F02                            
00019F02                            loc_17F8E:				; XREF: loc_17F48
00019F02 6000 F8D0                  		bra.w	BossDefeated
00019F06                            ; ===========================================================================
00019F06                            
00019F06                            loc_17F92:				; XREF: loc_17F48
00019F06 7064                       		moveq	#100,d0
00019F08 6100 0000                  		bsr.w	AddPoints
00019F0C 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019F12 4E75                       		rts	
00019F14                            ; ===========================================================================
00019F14                            
00019F14                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019F14 70FE                       		moveq	#-2,d0
00019F16 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019F1C 6500                       		bcs.s	loc_17FB6
00019F1E 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019F24 4268 0010                  		clr.w	$10(a0)
00019F28 5240                       		addq.w	#1,d0
00019F2A                            
00019F2A                            loc_17FB6:
00019F2A 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019F30 6E00                       		bgt.s	loc_17FCA
00019F32 317C 0500 0038             		move.w	#$500,$38(a0)
00019F38 4268 0012                  		clr.w	$12(a0)
00019F3C 5240                       		addq.w	#1,d0
00019F3E                            
00019F3E                            loc_17FCA:
00019F3E 6600                       		bne.s	loc_17FDC
00019F40 317C 0140 0010             		move.w	#$140,$10(a0)
00019F46 317C FE00 0012             		move.w	#-$200,$12(a0)
00019F4C 5428 0025                  		addq.b	#2,$25(a0)
00019F50                            
00019F50                            loc_17FDC:
00019F50 6000 FF5A                  		bra.w	loc_17F38
00019F54                            ; ===========================================================================
00019F54                            
00019F54                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019F54 70FE                       		moveq	#-2,d0
00019F56 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00019F5C 6500                       		bcs.s	loc_17FF6
00019F5E 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019F64 4268 0010                  		clr.w	$10(a0)
00019F68 5240                       		addq.w	#1,d0
00019F6A                            
00019F6A                            loc_17FF6:
00019F6A 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019F70 6E00                       		bgt.s	loc_1800A
00019F72 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019F78 4268 0012                  		clr.w	$12(a0)
00019F7C 5240                       		addq.w	#1,d0
00019F7E                            
00019F7E                            loc_1800A:
00019F7E 6600                       		bne.s	loc_1801A
00019F80 317C FE80 0012             		move.w	#-$180,$12(a0)
00019F86 5428 0025                  		addq.b	#2,$25(a0)
00019F8A 4228 003F                  		clr.b	$3F(a0)
00019F8E                            
00019F8E                            loc_1801A:
00019F8E 6000 FF1C                  		bra.w	loc_17F38
00019F92                            ; ===========================================================================
00019F92                            
00019F92                            loc_1801E:				; XREF: Obj77_ShipIndex
00019F92 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00019F98 6E00                       		bgt.s	loc_1804E
00019F9A 317C 0100 0038             		move.w	#$100,$38(a0)
00019FA0 317C 0140 0010             		move.w	#$140,$10(a0)
00019FA6 317C FF80 0012             		move.w	#-$80,$12(a0)
00019FAC 4A28 003D                  		tst.b	$3D(a0)
00019FB0 6700                       		beq.s	loc_18046
00019FB2 E1E8 0010                  		asl	$10(a0)
00019FB6 E1E8 0012                  		asl	$12(a0)
00019FBA                            
00019FBA                            loc_18046:
00019FBA 5428 0025                  		addq.b	#2,$25(a0)
00019FBE 6000 FEEC                  		bra.w	loc_17F38
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            loc_1804E:
00019FC2 08E8 0000 0022             		bset	#0,$22(a0)
00019FC8 5428 003F                  		addq.b	#2,$3F(a0)
00019FCC 1028 003F                  		move.b	$3F(a0),d0
00019FD0 4EB9 0000 29CC             		jsr	(CalcSine).l
00019FD6 4A41                       		tst.w	d1
00019FD8 6A00                       		bpl.s	loc_1806C
00019FDA 08A8 0000 0022             		bclr	#0,$22(a0)
00019FE0                            
00019FE0                            loc_1806C:
00019FE0 E840                       		asr.w	#4,d0
00019FE2 4840                       		swap	d0
00019FE4 4240                       		clr.w	d0
00019FE6 D0A8 0030                  		add.l	$30(a0),d0
00019FEA 4840                       		swap	d0
00019FEC 3140 0008                  		move.w	d0,8(a0)
00019FF0 3028 0012                  		move.w	$12(a0),d0
00019FF4 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019FF8 9268 000C                  		sub.w	$C(a0),d1
00019FFC 6500                       		bcs.s	loc_180A2
00019FFE 0441 0048                  		subi.w	#$48,d1
0001A002 6500                       		bcs.s	loc_180A2
0001A004 E240                       		asr.w	#1,d0
0001A006 0441 0028                  		subi.w	#$28,d1
0001A00A 6500                       		bcs.s	loc_180A2
0001A00C E240                       		asr.w	#1,d0
0001A00E 0441 0028                  		subi.w	#$28,d1
0001A012 6500                       		bcs.s	loc_180A2
0001A014 7000                       		moveq	#0,d0
0001A016                            
0001A016                            loc_180A2:
0001A016 48C0                       		ext.l	d0
0001A018 E180                       		asl.l	#8,d0
0001A01A 4A28 003D                  		tst.b	$3D(a0)
0001A01E 6700                       		beq.s	loc_180AE
0001A020 D080                       		add.l	d0,d0
0001A022                            
0001A022                            loc_180AE:
0001A022 D1A8 0038                  		add.l	d0,$38(a0)
0001A026 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A02C 6000 FE8E                  		bra.w	loc_17F48
0001A030                            ; ===========================================================================
0001A030                            
0001A030                            loc_180BC:				; XREF: Obj77_ShipIndex
0001A030 70FE                       		moveq	#-2,d0
0001A032 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001A038 6500                       		bcs.s	loc_180D2
0001A03A 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001A040 4268 0010                  		clr.w	$10(a0)
0001A044 5240                       		addq.w	#1,d0
0001A046                            
0001A046                            loc_180D2:
0001A046 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001A04C 6E00                       		bgt.s	loc_180E6
0001A04E 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001A054 4268 0012                  		clr.w	$12(a0)
0001A058 5240                       		addq.w	#1,d0
0001A05A                            
0001A05A                            loc_180E6:
0001A05A 6600                       		bne.s	loc_180F2
0001A05C 5428 0025                  		addq.b	#2,$25(a0)
0001A060 08A8 0000 0022             		bclr	#0,$22(a0)
0001A066                            
0001A066                            loc_180F2:
0001A066 6000 FE44                  		bra.w	loc_17F38
0001A06A                            ; ===========================================================================
0001A06A                            
0001A06A                            loc_180F6:				; XREF: Obj77_ShipIndex
0001A06A 4A28 003D                  		tst.b	$3D(a0)
0001A06E 6600                       		bne.s	loc_18112
0001A070 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001A076 6D00                       		blt.s	loc_18126
0001A078 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001A07E 6E00                       		bgt.s	loc_18126
0001A080 117C 0032 003C             		move.b	#$32,$3C(a0)
0001A086                            
0001A086                            loc_18112:
0001A086 303C 0082                  		move.w	#$82,d0
0001A08A 4EB9 0000 11F0             		jsr	(PlaySound).l	; play LZ music
0001A090 08E8 0000 0022             		bset	#0,$22(a0)
0001A096 5428 0025                  		addq.b	#2,$25(a0)
0001A09A                            
0001A09A                            loc_18126:
0001A09A 6000 FE10                  		bra.w	loc_17F38
0001A09E                            ; ===========================================================================
0001A09E                            
0001A09E                            loc_1812A:				; XREF: Obj77_ShipIndex
0001A09E 4A28 003D                  		tst.b	$3D(a0)
0001A0A2 6600                       		bne.s	loc_18136
0001A0A4 5328 003C                  		subq.b	#1,$3C(a0)
0001A0A8 6600                       		bne.s	loc_1814E
0001A0AA                            
0001A0AA                            loc_18136:
0001A0AA 4228 003C                  		clr.b	$3C(a0)
0001A0AE 317C 0400 0010             		move.w	#$400,$10(a0)
0001A0B4 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A0BA 4228 003D                  		clr.b	$3D(a0)
0001A0BE 5428 0025                  		addq.b	#2,$25(a0)
0001A0C2                            
0001A0C2                            loc_1814E:
0001A0C2 6000 FDE8                  		bra.w	loc_17F38
0001A0C6                            ; ===========================================================================
0001A0C6                            
0001A0C6                            loc_18152:				; XREF: Obj77_ShipIndex
0001A0C6 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001A0CC 6400                       		bcc.s	loc_18160
0001A0CE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A0D2 6000                       		bra.s	loc_18166
0001A0D4                            ; ===========================================================================
0001A0D4                            
0001A0D4                            loc_18160:
0001A0D4 4A28 0001                  		tst.b	1(a0)
0001A0D8 6A00                       		bpl.s	Obj77_ShipDel
0001A0DA                            
0001A0DA                            loc_18166:
0001A0DA 6000 FDD0                  		bra.w	loc_17F38
0001A0DE                            ; ===========================================================================
0001A0DE                            
0001A0DE                            Obj77_ShipDel:
0001A0DE 4EF9 0000 E960             		jmp	DeleteObject
0001A0E4                            ; ===========================================================================
0001A0E4                            
0001A0E4                            Obj77_FaceMain:				; XREF: Obj77_Index
0001A0E4 2268 0034                  		movea.l	$34(a0),a1
0001A0E8 1011                       		move.b	(a1),d0
0001A0EA B010                       		cmp.b	(a0),d0
0001A0EC 6600                       		bne.s	Obj77_FaceDel
0001A0EE 7000                       		moveq	#0,d0
0001A0F0 1029 0025                  		move.b	$25(a1),d0
0001A0F4 7201                       		moveq	#1,d1
0001A0F6 4A28 003D                  		tst.b	$3D(a0)
0001A0FA 6700                       		beq.s	loc_1818C
0001A0FC 720A                       		moveq	#$A,d1
0001A0FE 6000                       		bra.s	loc_181A0
0001A100                            ; ===========================================================================
0001A100                            
0001A100                            loc_1818C:
0001A100 4A29 0020                  		tst.b	$20(a1)
0001A104 6600                       		bne.s	loc_18196
0001A106 7205                       		moveq	#5,d1
0001A108 6000                       		bra.s	loc_181A0
0001A10A                            ; ===========================================================================
0001A10A                            
0001A10A                            loc_18196:
0001A10A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A110 6500                       		bcs.s	loc_181A0
0001A112 7204                       		moveq	#4,d1
0001A114                            
0001A114                            loc_181A0:
0001A114 1141 001C                  		move.b	d1,$1C(a0)
0001A118 0C00 000E                  		cmpi.b	#$E,d0
0001A11C 6600                       		bne.s	loc_181B6
0001A11E 117C 0006 001C             		move.b	#6,$1C(a0)
0001A124 4A28 0001                  		tst.b	1(a0)
0001A128 6A00                       		bpl.s	Obj77_FaceDel
0001A12A                            
0001A12A                            loc_181B6:
0001A12A 6000                       		bra.s	Obj77_Display
0001A12C                            ; ===========================================================================
0001A12C                            
0001A12C                            Obj77_FaceDel:
0001A12C 4EF9 0000 E960             		jmp	DeleteObject
0001A132                            ; ===========================================================================
0001A132                            
0001A132                            Obj77_FlameMain:			; XREF: Obj77_Index
0001A132 117C 0007 001C             		move.b	#7,$1C(a0)
0001A138 2268 0034                  		movea.l	$34(a0),a1
0001A13C 1011                       		move.b	(a1),d0
0001A13E B010                       		cmp.b	(a0),d0
0001A140 6600                       		bne.s	Obj77_FlameDel
0001A142 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001A148 6600                       		bne.s	loc_181F0
0001A14A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A150 4A28 0001                  		tst.b	1(a0)
0001A154 6A00                       		bpl.s	Obj77_FlameDel
0001A156 6000                       		bra.s	loc_181F0
0001A158                            ; ===========================================================================
0001A158 4A69 0010                  		tst.w	$10(a1)
0001A15C 6700                       		beq.s	loc_181F0
0001A15E 117C 0008 001C             		move.b	#8,$1C(a0)
0001A164                            
0001A164                            loc_181F0:
0001A164 6000                       		bra.s	Obj77_Display
0001A166                            ; ===========================================================================
0001A166                            
0001A166                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001A166 4EF9 0000 E960             		jmp	DeleteObject
0001A16C                            ; ===========================================================================
0001A16C                            
0001A16C                            Obj77_Display:
0001A16C 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001A172 4EB9 0000 B970             		jsr	AnimateSprite
0001A178 2268 0034                  		movea.l	$34(a0),a1
0001A17C 3169 0008 0008             		move.w	8(a1),8(a0)
0001A182 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A188 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A18E 7003                       		moveq	#3,d0
0001A190 C028 0022                  		and.b	$22(a0),d0
0001A194 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A19A 8128 0001                  		or.b	d0,1(a0)
0001A19E 4EF9 0000 E910             		jmp	DisplaySprite
0001A1A4                            ; ===========================================================================
0001A1A4                            ; ---------------------------------------------------------------------------
0001A1A4                            ; Object 73 - Eggman (MZ)
0001A1A4                            ; ---------------------------------------------------------------------------
0001A1A4                            
0001A1A4                            Obj73:					; XREF: Obj_Index
0001A1A4 7000                       		moveq	#0,d0
0001A1A6 1028 0024                  		move.b	$24(a0),d0
0001A1AA 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001A1AE 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001A1B2                            ; ===========================================================================
0001A1B2 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001A1B4 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001A1B6 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001A1B8 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001A1BA 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001A1BC                            
0001A1BC 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A1BF 0401 04                    		dc.b 4,	1, 4
0001A1C2 0607 04                    		dc.b 6,	7, 4
0001A1C5 0800 03                    		dc.b 8,	0, 3
0001A1C8                            ; ===========================================================================
0001A1C8                            
0001A1C8                            Obj73_Main:				; XREF: Obj73_Index
0001A1C8 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A1D4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A1DA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A1E0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001A1E4 2248                       		movea.l	a0,a1
0001A1E6 7203                       		moveq	#3,d1
0001A1E8 6000                       		bra.s	Obj73_LoadBoss
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            Obj73_Loop:
0001A1EA 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001A1F0 6600                       		bne.s	Obj73_ShipMain
0001A1F2 12BC 0073                  		move.b	#$73,0(a1)
0001A1F6 3368 0008 0008             		move.w	8(a0),8(a1)
0001A1FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A202                            
0001A202                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001A202 08A8 0000 0022             		bclr	#0,$22(a0)
0001A208 4229 0025                  		clr.b	$25(a1)
0001A20C 135A 0024                  		move.b	(a2)+,$24(a1)
0001A210 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A214 135A 0018                  		move.b	(a2)+,$18(a1)
0001A218 237C 0001 9C82 0004        		move.l	#Map_Eggman,4(a1)
0001A220 337C 0400 0002             		move.w	#$400,2(a1)
0001A226 137C 0004 0001             		move.b	#4,1(a1)
0001A22C 137C 0020 0019             		move.b	#$20,$19(a1)
0001A232 2348 0034                  		move.l	a0,$34(a1)
0001A236 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001A23A                            
0001A23A                            Obj73_ShipMain:
0001A23A 7000                       		moveq	#0,d0
0001A23C 1028 0025                  		move.b	$25(a0),d0
0001A240 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001A244 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001A248 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001A24E 4EB9 0000 B970             		jsr	AnimateSprite
0001A254 7003                       		moveq	#3,d0
0001A256 C028 0022                  		and.b	$22(a0),d0
0001A25A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A260 8128 0001                  		or.b	d0,1(a0)
0001A264 4EF9 0000 E910             		jmp	DisplaySprite
0001A26A                            ; ===========================================================================
0001A26A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001A26C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001A26E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001A270 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001A272 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001A274                            ; ===========================================================================
0001A274                            
0001A274                            loc_18302:				; XREF: Obj73_ShipIndex
0001A274 1028 003F                  		move.b	$3F(a0),d0
0001A278 5428 003F                  		addq.b	#2,$3F(a0)
0001A27C 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A282 E440                       		asr.w	#2,d0
0001A284 3140 0012                  		move.w	d0,$12(a0)
0001A288 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A28E 6100 F592                  		bsr.w	BossMove
0001A292 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A298 6600                       		bne.s	loc_18334
0001A29A 5428 0025                  		addq.b	#2,$25(a0)
0001A29E 4228 0028                  		clr.b	$28(a0)
0001A2A2 42A8 0010                  		clr.l	$10(a0)
0001A2A6                            
0001A2A6                            loc_18334:
0001A2A6 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A2AC 1140 0034                  		move.b	d0,$34(a0)
0001A2B0                            
0001A2B0                            loc_1833E:
0001A2B0 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A2B6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A2BC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001A2C2 6400                       		bcc.s	locret_18390
0001A2C4 4A28 0022                  		tst.b	$22(a0)
0001A2C8 6B00                       		bmi.s	loc_18392
0001A2CA 4A28 0020                  		tst.b	$20(a0)
0001A2CE 6600                       		bne.s	locret_18390
0001A2D0 4A28 003E                  		tst.b	$3E(a0)
0001A2D4 6600                       		bne.s	loc_18374
0001A2D6 117C 0028 003E             		move.b	#$28,$3E(a0)
0001A2DC 303C 00AC                  		move.w	#$AC,d0
0001A2E0 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A2E6                            
0001A2E6                            loc_18374:
0001A2E6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A2EA 7000                       		moveq	#0,d0
0001A2EC 4A51                       		tst.w	(a1)
0001A2EE 6600                       		bne.s	loc_18382
0001A2F0 303C 0EEE                  		move.w	#$EEE,d0
0001A2F4                            
0001A2F4                            loc_18382:
0001A2F4 3280                       		move.w	d0,(a1)
0001A2F6 5328 003E                  		subq.b	#1,$3E(a0)
0001A2FA 6600                       		bne.s	locret_18390
0001A2FC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A302                            
0001A302                            locret_18390:
0001A302 4E75                       		rts	
0001A304                            ; ===========================================================================
0001A304                            
0001A304                            loc_18392:				; XREF: loc_1833E
0001A304 7064                       		moveq	#100,d0
0001A306 6100 0000                  		bsr.w	AddPoints
0001A30A 117C 0004 0025             		move.b	#4,$25(a0)
0001A310 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A316 4268 0010                  		clr.w	$10(a0)
0001A31A 4E75                       		rts	
0001A31C                            ; ===========================================================================
0001A31C                            
0001A31C                            loc_183AA:				; XREF: Obj73_ShipIndex
0001A31C 7000                       		moveq	#0,d0
0001A31E 1028 0028                  		move.b	$28(a0),d0
0001A322 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001A326 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001A32A 0228 0006 0028             		andi.b	#6,$28(a0)
0001A330 6000 FF7E                  		bra.w	loc_1833E
0001A334                            ; ===========================================================================
0001A334 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001A336 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A338 0000                       		dc.w loc_183CA-off_183C2
0001A33A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001A33C                            ; ===========================================================================
0001A33C                            
0001A33C                            loc_183CA:				; XREF: off_183C2
0001A33C 4A68 0010                  		tst.w	$10(a0)
0001A340 6600                       		bne.s	loc_183FE
0001A342 7040                       		moveq	#$40,d0
0001A344 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A34A 6700                       		beq.s	loc_183E6
0001A34C 6500                       		bcs.s	loc_183DE
0001A34E 4440                       		neg.w	d0
0001A350                            
0001A350                            loc_183DE:
0001A350 3140 0012                  		move.w	d0,$12(a0)
0001A354 6000 F4CC                  		bra.w	BossMove
0001A358                            ; ===========================================================================
0001A358                            
0001A358                            loc_183E6:
0001A358 317C 0200 0010             		move.w	#$200,$10(a0)
0001A35E 317C 0100 0012             		move.w	#$100,$12(a0)
0001A364 0828 0000 0022             		btst	#0,$22(a0)
0001A36A 6600                       		bne.s	loc_183FE
0001A36C 4468 0010                  		neg.w	$10(a0)
0001A370                            
0001A370                            loc_183FE:
0001A370 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001A376 6400                       		bcc.s	Obj73_MakeLava
0001A378 6100 F4A8                  		bsr.w	BossMove
0001A37C 5968 0012                  		subq.w	#4,$12(a0)
0001A380                            
0001A380                            Obj73_MakeLava:
0001A380 5328 0034                  		subq.b	#1,$34(a0)
0001A384 6400                       		bcc.s	loc_1845C
0001A386 4EB9 0000 F066             		jsr	SingleObjLoad
0001A38C 6600                       		bne.s	loc_1844A
0001A38E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001A392 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001A398 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A39E 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001A3A4 80FC 0050                  		divu.w	#$50,d0
0001A3A8 4840                       		swap	d0
0001A3AA 0640 1878                  		addi.w	#$1878,d0
0001A3AE 3340 0008                  		move.w	d0,8(a1)
0001A3B2 EE09                       		lsr.b	#7,d1
0001A3B4 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001A3BA                            
0001A3BA                            loc_1844A:
0001A3BA 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001A3C0 0200 001F                  		andi.b	#$1F,d0
0001A3C4 0600 0040                  		addi.b	#$40,d0
0001A3C8 1140 0034                  		move.b	d0,$34(a0)
0001A3CC                            
0001A3CC                            loc_1845C:
0001A3CC 0828 0000 0022             		btst	#0,$22(a0)
0001A3D2 6700                       		beq.s	loc_18474
0001A3D4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001A3DA 6D00                       		blt.s	locret_1849C
0001A3DC 317C 1910 0030             		move.w	#$1910,$30(a0)
0001A3E2 6000                       		bra.s	loc_18482
0001A3E4                            ; ===========================================================================
0001A3E4                            
0001A3E4                            loc_18474:
0001A3E4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001A3EA 6E00                       		bgt.s	locret_1849C
0001A3EC 317C 1830 0030             		move.w	#$1830,$30(a0)
0001A3F2                            
0001A3F2                            loc_18482:
0001A3F2 4268 0010                  		clr.w	$10(a0)
0001A3F6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A3FC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001A402 6400                       		bcc.s	loc_18498
0001A404 4468 0012                  		neg.w	$12(a0)
0001A408                            
0001A408                            loc_18498:
0001A408 5428 0028                  		addq.b	#2,$28(a0)
0001A40C                            
0001A40C                            locret_1849C:
0001A40C 4E75                       		rts	
0001A40E                            ; ===========================================================================
0001A40E                            
0001A40E                            Obj73_MakeLava2:			; XREF: off_183C2
0001A40E 6100 F412                  		bsr.w	BossMove
0001A412 3028 0038                  		move.w	$38(a0),d0
0001A416 0440 022C                  		subi.w	#$22C,d0
0001A41A 6E00                       		bgt.s	locret_184F4
0001A41C 303C 022C                  		move.w	#$22C,d0
0001A420 4A68 0012                  		tst.w	$12(a0)
0001A424 6700                       		beq.s	loc_184EA
0001A426 4268 0012                  		clr.w	$12(a0)
0001A42A 317C 0050 003C             		move.w	#$50,$3C(a0)
0001A430 0868 0000 0022             		bchg	#0,$22(a0)
0001A436 4EB9 0000 F066             		jsr	SingleObjLoad
0001A43C 6600                       		bne.s	loc_184EA
0001A43E 3368 0030 0008             		move.w	$30(a0),8(a1)
0001A444 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001A44A 0669 0018 000C             		addi.w	#$18,$C(a1)
0001A450 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001A454 137C 0001 0028             		move.b	#1,$28(a1)
0001A45A                            
0001A45A                            loc_184EA:
0001A45A 5368 003C                  		subq.w	#1,$3C(a0)
0001A45E 6600                       		bne.s	locret_184F4
0001A460 5428 0028                  		addq.b	#2,$28(a0)
0001A464                            
0001A464                            locret_184F4:
0001A464 4E75                       		rts	
0001A466                            ; ===========================================================================
0001A466                            
0001A466                            loc_184F6:				; XREF: Obj73_ShipIndex
0001A466 5368 003C                  		subq.w	#1,$3C(a0)
0001A46A 6B00                       		bmi.s	loc_18500
0001A46C 6000 F366                  		bra.w	BossDefeated
0001A470                            ; ===========================================================================
0001A470                            
0001A470                            loc_18500:
0001A470 08E8 0000 0022             		bset	#0,$22(a0)
0001A476 08A8 0007 0022             		bclr	#7,$22(a0)
0001A47C 4268 0010                  		clr.w	$10(a0)
0001A480 5428 0025                  		addq.b	#2,$25(a0)
0001A484 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A48A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A48E 6600                       		bne.s	locret_1852A
0001A490 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A496 4268 0012                  		clr.w	$12(a0)
0001A49A                            
0001A49A                            locret_1852A:
0001A49A 4E75                       		rts	
0001A49C                            ; ===========================================================================
0001A49C                            
0001A49C                            loc_1852C:				; XREF: Obj73_ShipIndex
0001A49C 5268 003C                  		addq.w	#1,$3C(a0)
0001A4A0 6700                       		beq.s	loc_18544
0001A4A2 6A00                       		bpl.s	loc_1854E
0001A4A4 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001A4AA 6400                       		bcc.s	loc_18544
0001A4AC 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A4B2 6000                       		bra.s	loc_1857A
0001A4B4                            ; ===========================================================================
0001A4B4                            
0001A4B4                            loc_18544:
0001A4B4 4268 0012                  		clr.w	$12(a0)
0001A4B8 4268 003C                  		clr.w	$3C(a0)
0001A4BC 6000                       		bra.s	loc_1857A
0001A4BE                            ; ===========================================================================
0001A4BE                            
0001A4BE                            loc_1854E:
0001A4BE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A4C4 6500                       		bcs.s	loc_18566
0001A4C6 6700                       		beq.s	loc_1856C
0001A4C8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A4CE 6500                       		bcs.s	loc_1857A
0001A4D0 5428 0025                  		addq.b	#2,$25(a0)
0001A4D4 6000                       		bra.s	loc_1857A
0001A4D6                            ; ===========================================================================
0001A4D6                            
0001A4D6                            loc_18566:
0001A4D6 5168 0012                  		subq.w	#8,$12(a0)
0001A4DA 6000                       		bra.s	loc_1857A
0001A4DC                            ; ===========================================================================
0001A4DC                            
0001A4DC                            loc_1856C:
0001A4DC 4268 0012                  		clr.w	$12(a0)
0001A4E0 303C 0083                  		move.w	#$83,d0
0001A4E4 4EB9 0000 11F0             		jsr	(PlaySound).l	; play MZ music
0001A4EA                            
0001A4EA                            loc_1857A:
0001A4EA 6100 F336                  		bsr.w	BossMove
0001A4EE 6000 FDC0                  		bra.w	loc_1833E
0001A4F2                            ; ===========================================================================
0001A4F2                            
0001A4F2                            loc_18582:				; XREF: Obj73_ShipIndex
0001A4F2 317C 0500 0010             		move.w	#$500,$10(a0)
0001A4F8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A4FE 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001A504 6400                       		bcc.s	loc_1859C
0001A506 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A50A 6000                       		bra.s	loc_185A2
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            loc_1859C:
0001A50C 4A28 0001                  		tst.b	1(a0)
0001A510 6A00                       		bpl.s	Obj73_ShipDel
0001A512                            
0001A512                            loc_185A2:
0001A512 6100 F30E                  		bsr.w	BossMove
0001A516 6000 FD98                  		bra.w	loc_1833E
0001A51A                            ; ===========================================================================
0001A51A                            
0001A51A                            Obj73_ShipDel:
0001A51A 4EF9 0000 E960             		jmp	DeleteObject
0001A520                            ; ===========================================================================
0001A520                            
0001A520                            Obj73_FaceMain:				; XREF: Obj73_Index
0001A520 7000                       		moveq	#0,d0
0001A522 7201                       		moveq	#1,d1
0001A524 2268 0034                  		movea.l	$34(a0),a1
0001A528 1029 0025                  		move.b	$25(a1),d0
0001A52C 5540                       		subq.w	#2,d0
0001A52E 6600                       		bne.s	loc_185D2
0001A530 0829 0001 0028             		btst	#1,$28(a1)
0001A536 6700                       		beq.s	loc_185DA
0001A538 4A69 0012                  		tst.w	$12(a1)
0001A53C 6600                       		bne.s	loc_185DA
0001A53E 7204                       		moveq	#4,d1
0001A540 6000                       		bra.s	loc_185EE
0001A542                            ; ===========================================================================
0001A542                            
0001A542                            loc_185D2:
0001A542 5500                       		subq.b	#2,d0
0001A544 6B00                       		bmi.s	loc_185DA
0001A546 720A                       		moveq	#$A,d1
0001A548 6000                       		bra.s	loc_185EE
0001A54A                            ; ===========================================================================
0001A54A                            
0001A54A                            loc_185DA:
0001A54A 4A29 0020                  		tst.b	$20(a1)
0001A54E 6600                       		bne.s	loc_185E4
0001A550 7205                       		moveq	#5,d1
0001A552 6000                       		bra.s	loc_185EE
0001A554                            ; ===========================================================================
0001A554                            
0001A554                            loc_185E4:
0001A554 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A55A 6500                       		bcs.s	loc_185EE
0001A55C 7204                       		moveq	#4,d1
0001A55E                            
0001A55E                            loc_185EE:
0001A55E 1141 001C                  		move.b	d1,$1C(a0)
0001A562 5900                       		subq.b	#4,d0
0001A564 6600                       		bne.s	loc_18602
0001A566 117C 0006 001C             		move.b	#6,$1C(a0)
0001A56C 4A28 0001                  		tst.b	1(a0)
0001A570 6A00                       		bpl.s	Obj73_FaceDel
0001A572                            
0001A572                            loc_18602:
0001A572 6000                       		bra.s	Obj73_Display
0001A574                            ; ===========================================================================
0001A574                            
0001A574                            Obj73_FaceDel:
0001A574 4EF9 0000 E960             		jmp	DeleteObject
0001A57A                            ; ===========================================================================
0001A57A                            
0001A57A                            Obj73_FlameMain:			; XREF: Obj73_Index
0001A57A 117C 0007 001C             		move.b	#7,$1C(a0)
0001A580 2268 0034                  		movea.l	$34(a0),a1
0001A584 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A58A 6D00                       		blt.s	loc_1862A
0001A58C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A592 4A28 0001                  		tst.b	1(a0)
0001A596 6A00                       		bpl.s	Obj73_FlameDel
0001A598 6000                       		bra.s	loc_18636
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            loc_1862A:
0001A59A 4A69 0010                  		tst.w	$10(a1)
0001A59E 6700                       		beq.s	loc_18636
0001A5A0 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5A6                            
0001A5A6                            loc_18636:
0001A5A6 6000                       		bra.s	Obj73_Display
0001A5A8                            ; ===========================================================================
0001A5A8                            
0001A5A8                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001A5A8 4EF9 0000 E960             		jmp	DeleteObject
0001A5AE                            ; ===========================================================================
0001A5AE                            
0001A5AE                            Obj73_Display:
0001A5AE 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001A5B4 4EB9 0000 B970             		jsr	AnimateSprite
0001A5BA                            
0001A5BA                            loc_1864A:
0001A5BA 2268 0034                  		movea.l	$34(a0),a1
0001A5BE 3169 0008 0008             		move.w	8(a1),8(a0)
0001A5C4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A5CA 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A5D0 7003                       		moveq	#3,d0
0001A5D2 C028 0022                  		and.b	$22(a0),d0
0001A5D6 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A5DC 8128 0001                  		or.b	d0,1(a0)
0001A5E0 4EF9 0000 E910             		jmp	DisplaySprite
0001A5E6                            ; ===========================================================================
0001A5E6                            
0001A5E6                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A5E6 2268 0034                  		movea.l	$34(a0),a1
0001A5EA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A5F0 6600                       		bne.s	loc_18688
0001A5F2 4A28 0001                  		tst.b	1(a0)
0001A5F6 6A00                       		bpl.s	Obj73_TubeDel
0001A5F8                            
0001A5F8                            loc_18688:
0001A5F8 217C 0001 9D4A 0004        		move.l	#Map_BossItems,4(a0)
0001A600 317C 246C 0002             		move.w	#$246C,2(a0)
0001A606 117C 0004 001A             		move.b	#4,$1A(a0)
0001A60C 60AC                       		bra.s	loc_1864A
0001A60E                            ; ===========================================================================
0001A60E                            
0001A60E                            Obj73_TubeDel:
0001A60E 4EF9 0000 E960             		jmp	DeleteObject
0001A614                            ; ===========================================================================
0001A614                            ; ---------------------------------------------------------------------------
0001A614                            ; Object 74 - lava that	Eggman drops (MZ)
0001A614                            ; ---------------------------------------------------------------------------
0001A614                            
0001A614                            Obj74:					; XREF: Obj_Index
0001A614 7000                       		moveq	#0,d0
0001A616 1028 0024                  		move.b	$24(a0),d0
0001A61A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A61E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A622 4EF9 0000 E910             		jmp	DisplaySprite
0001A628                            ; ===========================================================================
0001A628 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A62A 0000                       		dc.w Obj74_Action-Obj74_Index
0001A62C 0000                       		dc.w loc_18886-Obj74_Index
0001A62E 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A630                            ; ===========================================================================
0001A630                            
0001A630                            Obj74_Main:				; XREF: Obj74_Index
0001A630 117C 0008 0016             		move.b	#8,$16(a0)
0001A636 117C 0008 0017             		move.b	#8,$17(a0)
0001A63C 217C 0000 C60A 0004        		move.l	#Map_obj14,4(a0)
0001A644 317C 0345 0002             		move.w	#$345,2(a0)
0001A64A 117C 0004 0001             		move.b	#4,1(a0)
0001A650 117C 0005 0018             		move.b	#5,$18(a0)
0001A656 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A65C 117C 0008 0019             		move.b	#8,$19(a0)
0001A662 5428 0024                  		addq.b	#2,$24(a0)
0001A666 4A28 0028                  		tst.b	$28(a0)
0001A66A 6600                       		bne.s	loc_1870A
0001A66C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A672 5428 0024                  		addq.b	#2,$24(a0)
0001A676 6000 0000                  		bra.w	loc_18886
0001A67A                            ; ===========================================================================
0001A67A                            
0001A67A                            loc_1870A:
0001A67A 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A680 303C 00AE                  		move.w	#$AE,d0
0001A684 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play lava sound
0001A68A                            
0001A68A                            Obj74_Action:				; XREF: Obj74_Index
0001A68A 7000                       		moveq	#0,d0
0001A68C 1028 0025                  		move.b	$25(a0),d0
0001A690 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A694 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A698 4EB9 0000 E8F6             		jsr	SpeedToPos
0001A69E 43F9 0000 FD20             		lea	(Ani_obj14).l,a1
0001A6A4 4EB9 0000 B970             		jsr	AnimateSprite
0001A6AA 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A6B0 6200                       		bhi.s	Obj74_Delete
0001A6B2 4E75                       		rts	
0001A6B4                            ; ===========================================================================
0001A6B4                            
0001A6B4                            Obj74_Delete:
0001A6B4 4EF9 0000 E960             		jmp	DeleteObject
0001A6BA                            ; ===========================================================================
0001A6BA 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A6BC 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A6BE 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A6C0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A6C2                            ; ===========================================================================
0001A6C2                            
0001A6C2                            Obj74_Drop:				; XREF: Obj74_Index2
0001A6C2 08E8 0001 0022             		bset	#1,$22(a0)
0001A6C8 5328 0029                  		subq.b	#1,$29(a0)
0001A6CC 6A00                       		bpl.s	locret_18780
0001A6CE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6D4 4228 0028                  		clr.b	$28(a0)
0001A6D8 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A6DE 08A8 0001 0022             		bclr	#1,$22(a0)
0001A6E4 6100 C6D0                  		bsr.w	ObjHitFloor
0001A6E8 4A41                       		tst.w	d1
0001A6EA 6A00                       		bpl.s	locret_18780
0001A6EC 5428 0025                  		addq.b	#2,$25(a0)
0001A6F0                            
0001A6F0                            locret_18780:
0001A6F0 4E75                       		rts	
0001A6F2                            ; ===========================================================================
0001A6F2                            
0001A6F2                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A6F2 5568 000C                  		subq.w	#2,$C(a0)
0001A6F6 08E8 0007 0002             		bset	#7,2(a0)
0001A6FC 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A702 4268 0012                  		clr.w	$12(a0)
0001A706 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A70C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A712 117C 0003 0029             		move.b	#3,$29(a0)
0001A718 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001A71E 6600                       		bne.s	loc_187CA
0001A720 47D1                       		lea	(a1),a3
0001A722 45D0                       		lea	(a0),a2
0001A724 7003                       		moveq	#3,d0
0001A726                            
0001A726                            Obj74_Loop:
0001A726 26DA                       		move.l	(a2)+,(a3)+
0001A728 26DA                       		move.l	(a2)+,(a3)+
0001A72A 26DA                       		move.l	(a2)+,(a3)+
0001A72C 26DA                       		move.l	(a2)+,(a3)+
0001A72E 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A732                            
0001A732 4469 0010                  		neg.w	$10(a1)
0001A736 5429 0025                  		addq.b	#2,$25(a1)
0001A73A                            
0001A73A                            loc_187CA:
0001A73A 5428 0025                  		addq.b	#2,$25(a0)
0001A73E 4E75                       		rts	
0001A740                            
0001A740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A740                            
0001A740                            
0001A740                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A740 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001A746 6600                       		bne.s	locret_187EE
0001A748 3368 0008 0008             		move.w	8(a0),8(a1)
0001A74E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A754 12BC 0074                  		move.b	#$74,(a1)
0001A758 337C 0067 0028             		move.w	#$67,$28(a1)
0001A75E                            
0001A75E                            locret_187EE:
0001A75E 4E75                       		rts	
0001A760                            ; End of function Obj74_Duplicate2
0001A760                            
0001A760                            ; ===========================================================================
0001A760                            
0001A760                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A760 6100 C654                  		bsr.w	ObjHitFloor
0001A764 4A41                       		tst.w	d1
0001A766 6A00                       		bpl.s	loc_18826
0001A768 3028 0008                  		move.w	8(a0),d0
0001A76C 0C40 1940                  		cmpi.w	#$1940,d0
0001A770 6E00                       		bgt.s	loc_1882C
0001A772 3228 0030                  		move.w	$30(a0),d1
0001A776 B240                       		cmp.w	d0,d1
0001A778 6700                       		beq.s	loc_1881E
0001A77A 0240 0010                  		andi.w	#$10,d0
0001A77E 0241 0010                  		andi.w	#$10,d1
0001A782 B240                       		cmp.w	d0,d1
0001A784 6700                       		beq.s	loc_1881E
0001A786 61B8                       		bsr.s	Obj74_Duplicate2
0001A788 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A78E                            
0001A78E                            loc_1881E:
0001A78E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A794 4E75                       		rts	
0001A796                            ; ===========================================================================
0001A796                            
0001A796                            loc_18826:
0001A796 5428 0025                  		addq.b	#2,$25(a0)
0001A79A 4E75                       		rts	
0001A79C                            ; ===========================================================================
0001A79C                            
0001A79C                            loc_1882C:
0001A79C 5428 0024                  		addq.b	#2,$24(a0)
0001A7A0 4E75                       		rts	
0001A7A2                            ; ===========================================================================
0001A7A2                            
0001A7A2                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A7A2 08A8 0001 0022             		bclr	#1,$22(a0)
0001A7A8 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A7AE 3028 0008                  		move.w	8(a0),d0
0001A7B2 9068 0032                  		sub.w	$32(a0),d0
0001A7B6 6A00                       		bpl.s	loc_1884A
0001A7B8 4440                       		neg.w	d0
0001A7BA                            
0001A7BA                            loc_1884A:
0001A7BA 0C40 0012                  		cmpi.w	#$12,d0
0001A7BE 6600                       		bne.s	loc_18856
0001A7C0 08A8 0007 0002             		bclr	#7,2(a0)
0001A7C6                            
0001A7C6                            loc_18856:
0001A7C6 6100 C5EE                  		bsr.w	ObjHitFloor
0001A7CA 4A41                       		tst.w	d1
0001A7CC 6A00                       		bpl.s	locret_1887E
0001A7CE 5328 0029                  		subq.b	#1,$29(a0)
0001A7D2 6700                       		beq.s	Obj74_Delete2
0001A7D4 4268 0012                  		clr.w	$12(a0)
0001A7D8 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A7DE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A7E4 08E8 0007 0002             		bset	#7,2(a0)
0001A7EA 5528 0025                  		subq.b	#2,$25(a0)
0001A7EE                            
0001A7EE                            locret_1887E:
0001A7EE 4E75                       		rts	
0001A7F0                            ; ===========================================================================
0001A7F0                            
0001A7F0                            Obj74_Delete2:
0001A7F0 4EF9 0000 E960             		jmp	DeleteObject
0001A7F6                            ; ===========================================================================
0001A7F6                            
0001A7F6                            loc_18886:				; XREF: Obj74_Index
0001A7F6 08E8 0007 0002             		bset	#7,2(a0)
0001A7FC 5328 0029                  		subq.b	#1,$29(a0)
0001A800 6600                       		bne.s	Obj74_Animate
0001A802 117C 0001 001C             		move.b	#1,$1C(a0)
0001A808 5968 000C                  		subq.w	#4,$C(a0)
0001A80C 4228 0020                  		clr.b	$20(a0)
0001A810                            
0001A810                            Obj74_Animate:
0001A810 43F9 0000 FD20             		lea	(Ani_obj14).l,a1
0001A816 4EF9 0000 B970             		jmp	AnimateSprite
0001A81C                            ; ===========================================================================
0001A81C                            
0001A81C                            Obj74_Delete3:				; XREF: Obj74_Index
0001A81C 4EF9 0000 E960             		jmp	DeleteObject
0001A822                            ; ===========================================================================
0001A822                            
0001A822                            Obj7A_Delete:
0001A822 4EF9 0000 E960             		jmp	DeleteObject
0001A828                            ; ===========================================================================
0001A828                            ; ---------------------------------------------------------------------------
0001A828                            ; Object 7A - Eggman (SLZ)
0001A828                            ; ---------------------------------------------------------------------------
0001A828                            
0001A828                            Obj7A:					; XREF: Obj_Index
0001A828 7000                       		moveq	#0,d0
0001A82A 1028 0024                  		move.b	$24(a0),d0
0001A82E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A832 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A836                            ; ===========================================================================
0001A836 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A838 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A83A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A83C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A83E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A840                            
0001A840 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A843 0401 04                    		dc.b 4,	1, 4
0001A846 0607 04                    		dc.b 6,	7, 4
0001A849 0800 03                    		dc.b 8,	0, 3
0001A84C                            ; ===========================================================================
0001A84C                            
0001A84C                            Obj7A_Main:				; XREF: Obj7A_Index
0001A84C 317C 2188 0008             		move.w	#$2188,8(a0)
0001A852 317C 0228 000C             		move.w	#$228,$C(a0)
0001A858 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A85E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A864 117C 000F 0020             		move.b	#$F,$20(a0)
0001A86A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A870 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A874 2248                       		movea.l	a0,a1
0001A876 7203                       		moveq	#3,d1
0001A878 6000                       		bra.s	Obj7A_LoadBoss
0001A87A                            ; ===========================================================================
0001A87A                            
0001A87A                            Obj7A_Loop:
0001A87A 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001A880 6600                       		bne.s	loc_1895C
0001A882 12BC 007A                  		move.b	#$7A,0(a1)
0001A886 3368 0008 0008             		move.w	8(a0),8(a1)
0001A88C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A892                            
0001A892                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A892 08A8 0000 0022             		bclr	#0,$22(a0)
0001A898 4229 0025                  		clr.b	$25(a1)
0001A89C 135A 0024                  		move.b	(a2)+,$24(a1)
0001A8A0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A8A4 135A 0018                  		move.b	(a2)+,$18(a1)
0001A8A8 237C 0001 9C82 0004        		move.l	#Map_Eggman,4(a1)
0001A8B0 337C 0400 0002             		move.w	#$400,2(a1)
0001A8B6 137C 0004 0001             		move.b	#4,1(a1)
0001A8BC 137C 0020 0019             		move.b	#$20,$19(a1)
0001A8C2 2348 0034                  		move.l	a0,$34(a1)
0001A8C6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A8CA                            
0001A8CA                            loc_1895C:
0001A8CA 43F8 D040                  		lea	($FFFFD040).w,a1
0001A8CE 45E8 002A                  		lea	$2A(a0),a2
0001A8D2 705E                       		moveq	#$5E,d0
0001A8D4 723E                       		moveq	#$3E,d1
0001A8D6                            
0001A8D6                            loc_18968:
0001A8D6 B011                       		cmp.b	(a1),d0
0001A8D8 6600                       		bne.s	loc_18974
0001A8DA 4A29 0028                  		tst.b	$28(a1)
0001A8DE 6700                       		beq.s	loc_18974
0001A8E0 34C9                       		move.w	a1,(a2)+
0001A8E2                            
0001A8E2                            loc_18974:
0001A8E2 D2FC 0040                  		adda.w	#$40,a1
0001A8E6 51C9 FFEE                  		dbf	d1,loc_18968
0001A8EA                            
0001A8EA                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A8EA 7000                       		moveq	#0,d0
0001A8EC 1028 0025                  		move.b	$25(a0),d0
0001A8F0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A8F4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A8F8 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001A8FE 4EB9 0000 B970             		jsr	AnimateSprite
0001A904 7003                       		moveq	#3,d0
0001A906 C028 0022                  		and.b	$22(a0),d0
0001A90A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A910 8128 0001                  		or.b	d0,1(a0)
0001A914 4EF9 0000 E910             		jmp	DisplaySprite
0001A91A                            ; ===========================================================================
0001A91A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A91C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A91E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A920 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A922 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A924 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A926                            ; ===========================================================================
0001A926                            
0001A926                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A926 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A92C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A932 6400                       		bcc.s	loc_189CA
0001A934 5428 0025                  		addq.b	#2,$25(a0)
0001A938                            
0001A938                            loc_189CA:
0001A938 6100 EEE8                  		bsr.w	BossMove
0001A93C 1028 003F                  		move.b	$3F(a0),d0
0001A940 5428 003F                  		addq.b	#2,$3F(a0)
0001A944 4EB9 0000 29CC             		jsr	(CalcSine).l
0001A94A EC40                       		asr.w	#6,d0
0001A94C D068 0038                  		add.w	$38(a0),d0
0001A950 3140 000C                  		move.w	d0,$C(a0)
0001A954 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A95A 6000                       		bra.s	loc_189FE
0001A95C                            ; ===========================================================================
0001A95C                            
0001A95C                            loc_189EE:
0001A95C 6100 EEC4                  		bsr.w	BossMove
0001A960 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A966 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A96C                            
0001A96C                            loc_189FE:
0001A96C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A972 6400                       		bcc.s	locret_18A44
0001A974 4A28 0022                  		tst.b	$22(a0)
0001A978 6B00                       		bmi.s	loc_18A46
0001A97A 4A28 0020                  		tst.b	$20(a0)
0001A97E 6600                       		bne.s	locret_18A44
0001A980 4A28 003E                  		tst.b	$3E(a0)
0001A984 6600                       		bne.s	loc_18A28
0001A986 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A98C 303C 00AC                  		move.w	#$AC,d0
0001A990 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A996                            
0001A996                            loc_18A28:
0001A996 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A99A 7000                       		moveq	#0,d0
0001A99C 4A51                       		tst.w	(a1)
0001A99E 6600                       		bne.s	loc_18A36
0001A9A0 303C 0EEE                  		move.w	#$EEE,d0
0001A9A4                            
0001A9A4                            loc_18A36:
0001A9A4 3280                       		move.w	d0,(a1)
0001A9A6 5328 003E                  		subq.b	#1,$3E(a0)
0001A9AA 6600                       		bne.s	locret_18A44
0001A9AC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A9B2                            
0001A9B2                            locret_18A44:
0001A9B2 4E75                       		rts	
0001A9B4                            ; ===========================================================================
0001A9B4                            
0001A9B4                            loc_18A46:
0001A9B4 7064                       		moveq	#100,d0
0001A9B6 6100 0000                  		bsr.w	AddPoints
0001A9BA 117C 0006 0025             		move.b	#6,$25(a0)
0001A9C0 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A9C6 4268 0010                  		clr.w	$10(a0)
0001A9CA 4E75                       		rts	
0001A9CC                            ; ===========================================================================
0001A9CC                            
0001A9CC                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A9CC 3028 0030                  		move.w	$30(a0),d0
0001A9D0 317C 0200 0010             		move.w	#$200,$10(a0)
0001A9D6 0828 0000 0022             		btst	#0,$22(a0)
0001A9DC 6600                       		bne.s	loc_18A7C
0001A9DE 4468 0010                  		neg.w	$10(a0)
0001A9E2 0C40 2008                  		cmpi.w	#$2008,d0
0001A9E6 6E00                       		bgt.s	loc_18A88
0001A9E8 6000                       		bra.s	loc_18A82
0001A9EA                            ; ===========================================================================
0001A9EA                            
0001A9EA                            loc_18A7C:
0001A9EA 0C40 2138                  		cmpi.w	#$2138,d0
0001A9EE 6D00                       		blt.s	loc_18A88
0001A9F0                            
0001A9F0                            loc_18A82:
0001A9F0 0868 0000 0022             		bchg	#0,$22(a0)
0001A9F6                            
0001A9F6                            loc_18A88:
0001A9F6 3028 0008                  		move.w	8(a0),d0
0001A9FA 72FF                       		moveq	#-1,d1
0001A9FC 7402                       		moveq	#2,d2
0001A9FE 45E8 002A                  		lea	$2A(a0),a2
0001AA02 7828                       		moveq	#$28,d4
0001AA04 4A68 0010                  		tst.w	$10(a0)
0001AA08 6A00                       		bpl.s	loc_18A9E
0001AA0A 4444                       		neg.w	d4
0001AA0C                            
0001AA0C                            loc_18A9E:
0001AA0C 321A                       		move.w	(a2)+,d1
0001AA0E 2641                       		movea.l	d1,a3
0001AA10 082B 0003 0022             		btst	#3,$22(a3)
0001AA16 6600                       		bne.s	loc_18AB4
0001AA18 362B 0008                  		move.w	8(a3),d3
0001AA1C D644                       		add.w	d4,d3
0001AA1E 9640                       		sub.w	d0,d3
0001AA20 6700                       		beq.s	loc_18AC0
0001AA22                            
0001AA22                            loc_18AB4:
0001AA22 51CA FFE8                  		dbf	d2,loc_18A9E
0001AA26                            
0001AA26 1142 0028                  		move.b	d2,$28(a0)
0001AA2A 6000 FF0C                  		bra.w	loc_189CA
0001AA2E                            ; ===========================================================================
0001AA2E                            
0001AA2E                            loc_18AC0:
0001AA2E 1142 0028                  		move.b	d2,$28(a0)
0001AA32 5428 0025                  		addq.b	#2,$25(a0)
0001AA36 117C 0028 003C             		move.b	#$28,$3C(a0)
0001AA3C 6000 FEFA                  		bra.w	loc_189CA
0001AA40                            ; ===========================================================================
0001AA40                            
0001AA40                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001AA40 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001AA46 6600                       		bne.s	loc_18B36
0001AA48 70FF                       		moveq	#-1,d0
0001AA4A 1028 0028                  		move.b	$28(a0),d0
0001AA4E 4880                       		ext.w	d0
0001AA50 6B00                       		bmi.s	loc_18B40
0001AA52 5540                       		subq.w	#2,d0
0001AA54 4440                       		neg.w	d0
0001AA56 D040                       		add.w	d0,d0
0001AA58 43E8 002A                  		lea	$2A(a0),a1
0001AA5C 3031 0000                  		move.w	(a1,d0.w),d0
0001AA60 2440                       		movea.l	d0,a2
0001AA62 43F8 D040                  		lea	($FFFFD040).w,a1
0001AA66 723E                       		moveq	#$3E,d1
0001AA68                            
0001AA68                            loc_18AFA:
0001AA68 B0A9 003C                  		cmp.l	$3C(a1),d0
0001AA6C 6700                       		beq.s	loc_18B40
0001AA6E D2FC 0040                  		adda.w	#$40,a1
0001AA72 51C9 FFF4                  		dbf	d1,loc_18AFA
0001AA76                            
0001AA76 2F08                       		move.l	a0,-(sp)
0001AA78 41D2                       		lea	(a2),a0
0001AA7A 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001AA80 205F                       		movea.l	(sp)+,a0
0001AA82 6600                       		bne.s	loc_18B40
0001AA84 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001AA88 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA94 0669 0020 000C             		addi.w	#$20,$C(a1)
0001AA9A 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001AAA0 234A 003C                  		move.l	a2,$3C(a1)
0001AAA4                            
0001AAA4                            loc_18B36:
0001AAA4 5328 003C                  		subq.b	#1,$3C(a0)
0001AAA8 6700                       		beq.s	loc_18B40
0001AAAA 6000 FEC0                  		bra.w	loc_189FE
0001AAAE                            ; ===========================================================================
0001AAAE                            
0001AAAE                            loc_18B40:
0001AAAE 5528 0025                  		subq.b	#2,$25(a0)
0001AAB2 6000 FE84                  		bra.w	loc_189CA
0001AAB6                            ; ===========================================================================
0001AAB6                            
0001AAB6                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001AAB6 5328 003C                  		subq.b	#1,$3C(a0)
0001AABA 6B00                       		bmi.s	loc_18B52
0001AABC 6000 ED16                  		bra.w	BossDefeated
0001AAC0                            ; ===========================================================================
0001AAC0                            
0001AAC0                            loc_18B52:
0001AAC0 5428 0025                  		addq.b	#2,$25(a0)
0001AAC4 4268 0012                  		clr.w	$12(a0)
0001AAC8 08E8 0000 0022             		bset	#0,$22(a0)
0001AACE 08A8 0007 0022             		bclr	#7,$22(a0)
0001AAD4 4268 0010                  		clr.w	$10(a0)
0001AAD8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001AADE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AAE2 6600                       		bne.s	loc_18B7C
0001AAE4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AAEA                            
0001AAEA                            loc_18B7C:
0001AAEA 6000 FE80                  		bra.w	loc_189FE
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001AAEE 5228 003C                  		addq.b	#1,$3C(a0)
0001AAF2 6700                       		beq.s	loc_18B90
0001AAF4 6A00                       		bpl.s	loc_18B96
0001AAF6 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AAFC 6000                       		bra.s	loc_18BC2
0001AAFE                            ; ===========================================================================
0001AAFE                            
0001AAFE                            loc_18B90:
0001AAFE 4268 0012                  		clr.w	$12(a0)
0001AB02 6000                       		bra.s	loc_18BC2
0001AB04                            ; ===========================================================================
0001AB04                            
0001AB04                            loc_18B96:
0001AB04 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001AB0A 6500                       		bcs.s	loc_18BAE
0001AB0C 6700                       		beq.s	loc_18BB4
0001AB0E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001AB14 6500                       		bcs.s	loc_18BC2
0001AB16 5428 0025                  		addq.b	#2,$25(a0)
0001AB1A 6000                       		bra.s	loc_18BC2
0001AB1C                            ; ===========================================================================
0001AB1C                            
0001AB1C                            loc_18BAE:
0001AB1C 5168 0012                  		subq.w	#8,$12(a0)
0001AB20 6000                       		bra.s	loc_18BC2
0001AB22                            ; ===========================================================================
0001AB22                            
0001AB22                            loc_18BB4:
0001AB22 4268 0012                  		clr.w	$12(a0)
0001AB26 303C 0084                  		move.w	#$84,d0
0001AB2A 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SLZ music
0001AB30                            
0001AB30                            loc_18BC2:
0001AB30 6000 FE2A                  		bra.w	loc_189EE
0001AB34                            ; ===========================================================================
0001AB34                            
0001AB34                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001AB34 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB3A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB40 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001AB46 6400                       		bcc.s	loc_18BE0
0001AB48 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AB4C 6000                       		bra.s	loc_18BE8
0001AB4E                            ; ===========================================================================
0001AB4E                            
0001AB4E                            loc_18BE0:
0001AB4E 4A28 0001                  		tst.b	1(a0)
0001AB52 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001AB56                            
0001AB56                            loc_18BE8:
0001AB56 6100 ECCA                  		bsr.w	BossMove
0001AB5A 6000 FDDC                  		bra.w	loc_189CA
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001AB5E 7000                       		moveq	#0,d0
0001AB60 7201                       		moveq	#1,d1
0001AB62 2268 0034                  		movea.l	$34(a0),a1
0001AB66 1029 0025                  		move.b	$25(a1),d0
0001AB6A 0C00 0006                  		cmpi.b	#6,d0
0001AB6E 6B00                       		bmi.s	loc_18C06
0001AB70 720A                       		moveq	#$A,d1
0001AB72 6000                       		bra.s	loc_18C1A
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            loc_18C06:
0001AB74 4A29 0020                  		tst.b	$20(a1)
0001AB78 6600                       		bne.s	loc_18C10
0001AB7A 7205                       		moveq	#5,d1
0001AB7C 6000                       		bra.s	loc_18C1A
0001AB7E                            ; ===========================================================================
0001AB7E                            
0001AB7E                            loc_18C10:
0001AB7E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AB84 6500                       		bcs.s	loc_18C1A
0001AB86 7204                       		moveq	#4,d1
0001AB88                            
0001AB88                            loc_18C1A:
0001AB88 1141 001C                  		move.b	d1,$1C(a0)
0001AB8C 0C00 000A                  		cmpi.b	#$A,d0
0001AB90 6600                       		bne.s	loc_18C32
0001AB92 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB98 4A28 0001                  		tst.b	1(a0)
0001AB9C 6A00 FC84                  		bpl.w	Obj7A_Delete
0001ABA0                            
0001ABA0                            loc_18C32:
0001ABA0 6000                       		bra.s	loc_18C6C
0001ABA2                            ; ===========================================================================
0001ABA2                            
0001ABA2                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001ABA2 117C 0008 001C             		move.b	#8,$1C(a0)
0001ABA8 2268 0034                  		movea.l	$34(a0),a1
0001ABAC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001ABB2 6600                       		bne.s	loc_18C56
0001ABB4 4A28 0001                  		tst.b	1(a0)
0001ABB8 6A00 FC68                  		bpl.w	Obj7A_Delete
0001ABBC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ABC2 6000                       		bra.s	loc_18C6C
0001ABC4                            ; ===========================================================================
0001ABC4                            
0001ABC4                            loc_18C56:
0001ABC4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001ABCA 6E00                       		bgt.s	loc_18C6C
0001ABCC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001ABD2 6D00                       		blt.s	loc_18C6C
0001ABD4 117C 0007 001C             		move.b	#7,$1C(a0)
0001ABDA                            
0001ABDA                            loc_18C6C:
0001ABDA 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001ABE0 4EB9 0000 B970             		jsr	AnimateSprite
0001ABE6                            
0001ABE6                            loc_18C78:
0001ABE6 2268 0034                  		movea.l	$34(a0),a1
0001ABEA 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABF0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABF6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ABFC 7003                       		moveq	#3,d0
0001ABFE C028 0022                  		and.b	$22(a0),d0
0001AC02 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AC08 8128 0001                  		or.b	d0,1(a0)
0001AC0C 4EF9 0000 E910             		jmp	DisplaySprite
0001AC12                            ; ===========================================================================
0001AC12                            
0001AC12                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001AC12 2268 0034                  		movea.l	$34(a0),a1
0001AC16 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AC1C 6600                       		bne.s	loc_18CB8
0001AC1E 4A28 0001                  		tst.b	1(a0)
0001AC22 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001AC26                            
0001AC26                            loc_18CB8:
0001AC26 217C 0001 9D4A 0004        		move.l	#Map_BossItems,4(a0)
0001AC2E 317C 246C 0002             		move.w	#$246C,2(a0)
0001AC34 117C 0003 001A             		move.b	#3,$1A(a0)
0001AC3A 60AA                       		bra.s	loc_18C78
0001AC3C                            ; ===========================================================================
0001AC3C                            ; ---------------------------------------------------------------------------
0001AC3C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001AC3C                            ; ---------------------------------------------------------------------------
0001AC3C                            
0001AC3C                            Obj7B:					; XREF: Obj_Index
0001AC3C 7000                       		moveq	#0,d0
0001AC3E 1028 0024                  		move.b	$24(a0),d0
0001AC42 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001AC46 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001AC4A 3028 0030                  		move.w	$30(a0),d0
0001AC4E 0240 FF80                  		andi.w	#$FF80,d0
0001AC52 3238 F700                  		move.w	($FFFFF700).w,d1
0001AC56 0441 0080                  		subi.w	#$80,d1
0001AC5A 0241 FF80                  		andi.w	#$FF80,d1
0001AC5E 9041                       		sub.w	d1,d0
0001AC60 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001AC64 0C40 0280                  		cmpi.w	#$280,d0
0001AC68 6300                       		bls.s	Obj7B_NoDel
0001AC6A                            	;	move.w	respawn_index(a0),d0	; get address in respawn table
0001AC6A                            	;	beq.s	Obj7B_Delete		; if it's zero, don't remember object
0001AC6A                            	;	movea.w	d0,a2	; load address into a2
0001AC6A                            	;	bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001AC6A                            
0001AC6A                            Obj7B_Delete:
0001AC6A 4EF9 0000 E960             		jmp	DeleteObject	; and delete object
0001AC70                            
0001AC70                            Obj7B_NoDel:
0001AC70 4EF9 0000 E910             		jmp	DisplaySprite
0001AC76                            ; ===========================================================================
0001AC76 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001AC78 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001AC7A 0000                       		dc.w loc_18DC6-Obj7B_Index
0001AC7C 0000                       		dc.w loc_18EAA-Obj7B_Index
0001AC7E 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001AC80 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001AC82                            ; ===========================================================================
0001AC82                            
0001AC82                            Obj7B_Main:				; XREF: Obj7B_Index
0001AC82 217C 0001 330C 0004        		move.l	#Map_obj5Ea,4(a0)
0001AC8A 317C 0518 0002             		move.w	#$518,2(a0)
0001AC90 117C 0001 001A             		move.b	#1,$1A(a0)
0001AC96 0028 0004 0001             		ori.b	#4,1(a0)
0001AC9C 117C 0004 0018             		move.b	#4,$18(a0)
0001ACA2 117C 008B 0020             		move.b	#$8B,$20(a0)
0001ACA8 117C 000C 0019             		move.b	#$C,$19(a0)
0001ACAE 2268 003C                  		movea.l	$3C(a0),a1
0001ACB2 3169 0008 0030             		move.w	8(a1),$30(a0)
0001ACB8 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001ACBE 08E8 0000 0022             		bset	#0,$22(a0)
0001ACC4 3028 0008                  		move.w	8(a0),d0
0001ACC8 B069 0008                  		cmp.w	8(a1),d0
0001ACCC 6E00                       		bgt.s	loc_18D68
0001ACCE 08A8 0000 0022             		bclr	#0,$22(a0)
0001ACD4 117C 0002 003A             		move.b	#2,$3A(a0)
0001ACDA                            
0001ACDA                            loc_18D68:
0001ACDA 5428 0024                  		addq.b	#2,$24(a0)
0001ACDE                            
0001ACDE                            Obj7B_Fall:				; XREF: Obj7B_Index
0001ACDE 4EB9 0000 E8D6             		jsr	ObjectFall
0001ACE4 2268 003C                  		movea.l	$3C(a0),a1
0001ACE8 45F9 0000 0000             		lea	(word_19018).l,a2
0001ACEE 7000                       		moveq	#0,d0
0001ACF0 1029 001A                  		move.b	$1A(a1),d0
0001ACF4 3228 0008                  		move.w	8(a0),d1
0001ACF8 9268 0030                  		sub.w	$30(a0),d1
0001ACFC 6400                       		bcc.s	loc_18D8E
0001ACFE 5440                       		addq.w	#2,d0
0001AD00                            
0001AD00                            loc_18D8E:
0001AD00 D040                       		add.w	d0,d0
0001AD02 3228 0034                  		move.w	$34(a0),d1
0001AD06 D272 0000                  		add.w	(a2,d0.w),d1
0001AD0A B268 000C                  		cmp.w	$C(a0),d1
0001AD0E 6E00                       		bgt.s	locret_18DC4
0001AD10 2268 003C                  		movea.l	$3C(a0),a1
0001AD14 7202                       		moveq	#2,d1
0001AD16 0828 0000 0022             		btst	#0,$22(a0)
0001AD1C 6700                       		beq.s	loc_18DAE
0001AD1E 7200                       		moveq	#0,d1
0001AD20                            
0001AD20                            loc_18DAE:
0001AD20 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001AD26 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001AD2C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AD32 6000 0000                  		bra.w	loc_18FA2
0001AD36                            ; ===========================================================================
0001AD36                            
0001AD36                            locret_18DC4:
0001AD36 4E75                       		rts	
0001AD38                            ; ===========================================================================
0001AD38                            
0001AD38                            loc_18DC6:				; XREF: Obj7B_Index
0001AD38 2268 003C                  		movea.l	$3C(a0),a1
0001AD3C 7000                       		moveq	#0,d0
0001AD3E 1028 003A                  		move.b	$3A(a0),d0
0001AD42 9029 003A                  		sub.b	$3A(a1),d0
0001AD46 6700                       		beq.s	loc_18E2A
0001AD48 6400                       		bcc.s	loc_18DDA
0001AD4A 4400                       		neg.b	d0
0001AD4C                            
0001AD4C                            loc_18DDA:
0001AD4C 323C F7E8                  		move.w	#-$818,d1
0001AD50 343C FEEC                  		move.w	#-$114,d2
0001AD54 0C00 0001                  		cmpi.b	#1,d0
0001AD58 6700                       		beq.s	loc_18E00
0001AD5A 323C F6A0                  		move.w	#-$960,d1
0001AD5E 343C FF0C                  		move.w	#-$F4,d2
0001AD62 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001AD68 6D00                       		blt.s	loc_18E00
0001AD6A 323C F5E0                  		move.w	#-$A20,d1
0001AD6E 343C FF80                  		move.w	#-$80,d2
0001AD72                            
0001AD72                            loc_18E00:
0001AD72 3141 0012                  		move.w	d1,$12(a0)
0001AD76 3142 0010                  		move.w	d2,$10(a0)
0001AD7A 3028 0008                  		move.w	8(a0),d0
0001AD7E 9068 0030                  		sub.w	$30(a0),d0
0001AD82 6400                       		bcc.s	loc_18E16
0001AD84 4468 0010                  		neg.w	$10(a0)
0001AD88                            
0001AD88                            loc_18E16:
0001AD88 117C 0001 001A             		move.b	#1,$1A(a0)
0001AD8E 317C 0020 0028             		move.w	#$20,$28(a0)
0001AD94 5428 0024                  		addq.b	#2,$24(a0)
0001AD98 6000 0000                  		bra.w	loc_18EAA
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            loc_18E2A:				; XREF: loc_18DC6
0001AD9C 45F9 0000 0000             		lea	(word_19018).l,a2
0001ADA2 7000                       		moveq	#0,d0
0001ADA4 1029 001A                  		move.b	$1A(a1),d0
0001ADA8 343C 0028                  		move.w	#$28,d2
0001ADAC 3228 0008                  		move.w	8(a0),d1
0001ADB0 9268 0030                  		sub.w	$30(a0),d1
0001ADB4 6400                       		bcc.s	loc_18E48
0001ADB6 4442                       		neg.w	d2
0001ADB8 5440                       		addq.w	#2,d0
0001ADBA                            
0001ADBA                            loc_18E48:
0001ADBA D040                       		add.w	d0,d0
0001ADBC 3228 0034                  		move.w	$34(a0),d1
0001ADC0 D272 0000                  		add.w	(a2,d0.w),d1
0001ADC4 3141 000C                  		move.w	d1,$C(a0)
0001ADC8 D468 0030                  		add.w	$30(a0),d2
0001ADCC 3142 0008                  		move.w	d2,8(a0)
0001ADD0 4268 000E                  		clr.w	$E(a0)
0001ADD4 4268 000A                  		clr.w	$A(a0)
0001ADD8 5368 0028                  		subq.w	#1,$28(a0)
0001ADDC 6600                       		bne.s	loc_18E7A
0001ADDE 317C 0020 0028             		move.w	#$20,$28(a0)
0001ADE4 117C 0008 0024             		move.b	#8,$24(a0)
0001ADEA 4E75                       		rts	
0001ADEC                            ; ===========================================================================
0001ADEC                            
0001ADEC                            loc_18E7A:
0001ADEC 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001ADF2 6600                       		bne.s	loc_18E88
0001ADF4 117C 0005 001F             		move.b	#5,$1F(a0)
0001ADFA                            
0001ADFA                            loc_18E88:
0001ADFA 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001AE00 6600                       		bne.s	loc_18E96
0001AE02 117C 0002 001F             		move.b	#2,$1F(a0)
0001AE08                            
0001AE08                            loc_18E96:
0001AE08 5328 001E                  		subq.b	#1,$1E(a0)
0001AE0C 6E00                       		bgt.s	locret_18EA8
0001AE0E 0868 0000 001A             		bchg	#0,$1A(a0)
0001AE14 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001AE1A                            
0001AE1A                            locret_18EA8:
0001AE1A 4E75                       		rts	
0001AE1C                            ; ===========================================================================
0001AE1C                            
0001AE1C                            loc_18EAA:				; XREF: Obj7B_Index
0001AE1C 43F8 D040                  		lea	($FFFFD040).w,a1
0001AE20 707A                       		moveq	#$7A,d0
0001AE22 7240                       		moveq	#$40,d1
0001AE24 743E                       		moveq	#$3E,d2
0001AE26                            
0001AE26                            loc_18EB4:
0001AE26 B011                       		cmp.b	(a1),d0
0001AE28 6700                       		beq.s	loc_18EC0
0001AE2A D2C1                       		adda.w	d1,a1
0001AE2C 51CA FFF8                  		dbf	d2,loc_18EB4
0001AE30                            
0001AE30 6000                       		bra.s	loc_18F38
0001AE32                            ; ===========================================================================
0001AE32                            
0001AE32                            loc_18EC0:
0001AE32 3029 0008                  		move.w	8(a1),d0
0001AE36 3229 000C                  		move.w	$C(a1),d1
0001AE3A 3428 0008                  		move.w	8(a0),d2
0001AE3E 3628 000C                  		move.w	$C(a0),d3
0001AE42 45FA 0000                  		lea	byte_19022(pc),a2
0001AE46 47FA 0000                  		lea	byte_19026(pc),a3
0001AE4A 181A                       		move.b	(a2)+,d4
0001AE4C 4884                       		ext.w	d4
0001AE4E D044                       		add.w	d4,d0
0001AE50 181B                       		move.b	(a3)+,d4
0001AE52 4884                       		ext.w	d4
0001AE54 D444                       		add.w	d4,d2
0001AE56 B440                       		cmp.w	d0,d2
0001AE58 6500                       		bcs.s	loc_18F38
0001AE5A 181A                       		move.b	(a2)+,d4
0001AE5C 4884                       		ext.w	d4
0001AE5E D044                       		add.w	d4,d0
0001AE60 181B                       		move.b	(a3)+,d4
0001AE62 4884                       		ext.w	d4
0001AE64 D444                       		add.w	d4,d2
0001AE66 B042                       		cmp.w	d2,d0
0001AE68 6500                       		bcs.s	loc_18F38
0001AE6A 181A                       		move.b	(a2)+,d4
0001AE6C 4884                       		ext.w	d4
0001AE6E D244                       		add.w	d4,d1
0001AE70 181B                       		move.b	(a3)+,d4
0001AE72 4884                       		ext.w	d4
0001AE74 D644                       		add.w	d4,d3
0001AE76 B641                       		cmp.w	d1,d3
0001AE78 6500                       		bcs.s	loc_18F38
0001AE7A 181A                       		move.b	(a2)+,d4
0001AE7C 4884                       		ext.w	d4
0001AE7E D244                       		add.w	d4,d1
0001AE80 181B                       		move.b	(a3)+,d4
0001AE82 4884                       		ext.w	d4
0001AE84 D644                       		add.w	d4,d3
0001AE86 B243                       		cmp.w	d3,d1
0001AE88 6500                       		bcs.s	loc_18F38
0001AE8A 5428 0024                  		addq.b	#2,$24(a0)
0001AE8E 4268 0028                  		clr.w	$28(a0)
0001AE92 4229 0020                  		clr.b	$20(a1)
0001AE96 5329 0021                  		subq.b	#1,$21(a1)
0001AE9A 6600                       		bne.s	loc_18F38
0001AE9C 08E9 0007 0022             		bset	#7,$22(a1)
0001AEA2 4268 0010                  		clr.w	$10(a0)
0001AEA6 4268 0012                  		clr.w	$12(a0)
0001AEAA                            
0001AEAA                            loc_18F38:
0001AEAA 4A68 0012                  		tst.w	$12(a0)
0001AEAE 6A00                       		bpl.s	loc_18F5C
0001AEB0 4EB9 0000 E8D6             		jsr	ObjectFall
0001AEB6 3028 0034                  		move.w	$34(a0),d0
0001AEBA 0440 002F                  		subi.w	#$2F,d0
0001AEBE B068 000C                  		cmp.w	$C(a0),d0
0001AEC2 6E00                       		bgt.s	loc_18F58
0001AEC4 4EB9 0000 E8D6             		jsr	ObjectFall
0001AECA                            
0001AECA                            loc_18F58:
0001AECA 6000 FF20                  		bra.w	loc_18E7A
0001AECE                            ; ===========================================================================
0001AECE                            
0001AECE                            loc_18F5C:
0001AECE 4EB9 0000 E8D6             		jsr	ObjectFall
0001AED4 2268 003C                  		movea.l	$3C(a0),a1
0001AED8 45F9 0000 0000             		lea	(word_19018).l,a2
0001AEDE 7000                       		moveq	#0,d0
0001AEE0 1029 001A                  		move.b	$1A(a1),d0
0001AEE4 3228 0008                  		move.w	8(a0),d1
0001AEE8 9268 0030                  		sub.w	$30(a0),d1
0001AEEC 6400                       		bcc.s	loc_18F7E
0001AEEE 5440                       		addq.w	#2,d0
0001AEF0                            
0001AEF0                            loc_18F7E:
0001AEF0 D040                       		add.w	d0,d0
0001AEF2 3228 0034                  		move.w	$34(a0),d1
0001AEF6 D272 0000                  		add.w	(a2,d0.w),d1
0001AEFA B268 000C                  		cmp.w	$C(a0),d1
0001AEFE 6ECA                       		bgt.s	loc_18F58
0001AF00 2268 003C                  		movea.l	$3C(a0),a1
0001AF04 7202                       		moveq	#2,d1
0001AF06 4A68 0010                  		tst.w	$10(a0)
0001AF0A 6B00                       		bmi.s	loc_18F9C
0001AF0C 7200                       		moveq	#0,d1
0001AF0E                            
0001AF0E                            loc_18F9C:
0001AF0E 317C 0000 0028             		move.w	#0,$28(a0)
0001AF14                            
0001AF14                            loc_18FA2:
0001AF14 1341 003A                  		move.b	d1,$3A(a1)
0001AF18 1141 003A                  		move.b	d1,$3A(a0)
0001AF1C B229 001A                  		cmp.b	$1A(a1),d1
0001AF20 6700                       		beq.s	loc_19008
0001AF22 08A9 0003 0022             		bclr	#3,$22(a1)
0001AF28 6700                       		beq.s	loc_19008
0001AF2A 4229 0025                  		clr.b	$25(a1)
0001AF2E 137C 0002 0024             		move.b	#2,$24(a1)
0001AF34 45F8 D000                  		lea	($FFFFD000).w,a2
0001AF38 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001AF3E 446A 0012                  		neg.w	$12(a2)
0001AF42 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001AF48 6600                       		bne.s	loc_18FDC
0001AF4A E0EA 0012                  		asr	$12(a2)
0001AF4E                            
0001AF4E                            loc_18FDC:
0001AF4E 08EA 0001 0022             		bset	#1,$22(a2)
0001AF54 08AA 0003 0022             		bclr	#3,$22(a2)
0001AF5A 422A 003C                  		clr.b	$3C(a2)
0001AF5E 2F08                       		move.l	a0,-(sp)
0001AF60 41D2                       		lea	(a2),a0
0001AF62 4EBA 9E50                  		jsr	Obj01_ChkRoll
0001AF66 205F                       		movea.l	(sp)+,a0
0001AF68 157C 0002 0024             		move.b	#2,$24(a2)
0001AF6E 303C 00CC                  		move.w	#$CC,d0
0001AF72 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001AF78                            
0001AF78                            loc_19008:
0001AF78 4268 0010                  		clr.w	$10(a0)
0001AF7C 4268 0012                  		clr.w	$12(a0)
0001AF80 5428 0024                  		addq.b	#2,$24(a0)
0001AF84 6000 FE66                  		bra.w	loc_18E7A
0001AF88                            ; ===========================================================================
0001AF88 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AF92                            		even
0001AF92 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001AF96                            		even
0001AF96 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001AF9A                            		even
0001AF9A                            ; ===========================================================================
0001AF9A                            
0001AF9A                            Obj7B_Explode:				; XREF: Obj7B_Index
0001AF9A 10BC 003F                  		move.b	#$3F,(a0)
0001AF9E 4228 0024                  		clr.b	$24(a0)
0001AFA2 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001AFA8 6700                       		beq.s	Obj7B_MakeFrag
0001AFAA 4E75                       		rts	
0001AFAC                            ; ===========================================================================
0001AFAC                            
0001AFAC                            Obj7B_MakeFrag:
0001AFAC 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001AFB2 7203                       		moveq	#3,d1
0001AFB4 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001AFB8                            
0001AFB8                            Obj7B_Loop:
0001AFB8 4EB9 0000 F066             		jsr	SingleObjLoad
0001AFBE 6600                       		bne.s	loc_1909A
0001AFC0 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AFC4 137C 000A 0024             		move.b	#$A,$24(a1)
0001AFCA 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AFD2 137C 0003 0018             		move.b	#3,$18(a1)
0001AFD8 337C 0518 0002             		move.w	#$518,2(a1)
0001AFDE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AFEA 335A 0010                  		move.w	(a2)+,$10(a1)
0001AFEE 335A 0012                  		move.w	(a2)+,$12(a1)
0001AFF2 137C 0098 0020             		move.b	#$98,$20(a1)
0001AFF8 0029 0004 0001             		ori.b	#4,1(a1)
0001AFFE 08E9 0007 0001             		bset	#7,1(a1)
0001B004 137C 000C 0019             		move.b	#$C,$19(a1)
0001B00A                            
0001B00A                            loc_1909A:
0001B00A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001B00E                            
0001B00E 4E75                       		rts	
0001B010                            ; ===========================================================================
0001B010 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001B014 FF60 FDC0                  		dc.w $FF60, $FDC0
0001B018 0100 FCC0                  		dc.w $100, $FCC0
0001B01C 00A0 FDC0                  		dc.w $A0, $FDC0
0001B020                            ; ===========================================================================
0001B020                            
0001B020                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001B020 4EB9 0000 E8F6             		jsr	SpeedToPos
0001B026 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B02C 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B032 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B038 7004                       		moveq	#4,d0
0001B03A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B03E E448                       		lsr.w	#2,d0
0001B040 1140 001A                  		move.b	d0,$1A(a0)
0001B044 4A28 0001                  		tst.b	1(a0)
0001B048 6A00 F7D8                  		bpl.w	Obj7A_Delete
0001B04C 4E75                       		rts	
0001B04E                            ; ===========================================================================
0001B04E                            ; ---------------------------------------------------------------------------
0001B04E                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B04E                            ; ---------------------------------------------------------------------------
0001B04E                            Map_obj7B:
0001B04E                            	include "_maps\obj7B.asm"
0001B04E                            ; ---------------------------------------------------------------------------
0001B04E                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001B04E                            ; ---------------------------------------------------------------------------
0001B04E 0000                       		dc.w byte_190E2-Map_obj7B
0001B050 0000                       		dc.w byte_190E8-Map_obj7B
0001B052 01                         byte_190E2:	dc.b 1
0001B053 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B058 01                         byte_190E8:	dc.b 1
0001B059 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B05E                            		even
0001B05E                            		even
0001B05E                            
0001B05E                            ; ===========================================================================
0001B05E                            ; ---------------------------------------------------------------------------
0001B05E                            ; Object 75 - Eggman (SYZ)
0001B05E                            ; ---------------------------------------------------------------------------
0001B05E                            
0001B05E                            Obj75:					; XREF: Obj_Index
0001B05E 7000                       		moveq	#0,d0
0001B060 1028 0024                  		move.b	$24(a0),d0
0001B064 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001B068 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001B06C                            ; ===========================================================================
0001B06C 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001B06E 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001B070 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001B072 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001B074 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001B076                            
0001B076 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001B079 0401 05                    		dc.b 4,	1, 5
0001B07C 0607 05                    		dc.b 6,	7, 5
0001B07F 0800 05                    		dc.b 8,	0, 5
0001B082                            ; ===========================================================================
0001B082                            
0001B082                            Obj75_Main:				; XREF: Obj75_Index
0001B082 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001B088 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001B08E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B094 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B09A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B0A0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B0A6 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001B0AA 2248                       		movea.l	a0,a1
0001B0AC 7203                       		moveq	#3,d1
0001B0AE 6000                       		bra.s	Obj75_LoadBoss
0001B0B0                            ; ===========================================================================
0001B0B0                            
0001B0B0                            Obj75_Loop:
0001B0B0 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001B0B6 6600                       		bne.s	Obj75_ShipMain
0001B0B8 12BC 0075                  		move.b	#$75,(a1)
0001B0BC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0C8                            
0001B0C8                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001B0C8 08A8 0000 0022             		bclr	#0,$22(a0)
0001B0CE 4229 0025                  		clr.b	$25(a1)
0001B0D2 135A 0024                  		move.b	(a2)+,$24(a1)
0001B0D6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B0DA 135A 0018                  		move.b	(a2)+,$18(a1)
0001B0DE 237C 0001 9C82 0004        		move.l	#Map_Eggman,4(a1)
0001B0E6 337C 0400 0002             		move.w	#$400,2(a1)
0001B0EC 137C 0004 0001             		move.b	#4,1(a1)
0001B0F2 137C 0020 0019             		move.b	#$20,$19(a1)
0001B0F8 2348 0034                  		move.l	a0,$34(a1)
0001B0FC 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001B100                            
0001B100                            Obj75_ShipMain:				; XREF: Obj75_Index
0001B100 7000                       		moveq	#0,d0
0001B102 1028 0025                  		move.b	$25(a0),d0
0001B106 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001B10A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001B10E 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001B114 4EB9 0000 B970             		jsr	AnimateSprite
0001B11A 7003                       		moveq	#3,d0
0001B11C C028 0022                  		and.b	$22(a0),d0
0001B120 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B126 8128 0001                  		or.b	d0,1(a0)
0001B12A 4EF9 0000 E910             		jmp	DisplaySprite
0001B130                            ; ===========================================================================
0001B130 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001B134 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001B138 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001B13C                            ; ===========================================================================
0001B13C                            
0001B13C                            loc_191CC:				; XREF: Obj75_ShipIndex
0001B13C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B142 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001B148 6400                       		bcc.s	loc_191DE
0001B14A 5428 0025                  		addq.b	#2,$25(a0)
0001B14E                            
0001B14E                            loc_191DE:
0001B14E 1028 003F                  		move.b	$3F(a0),d0
0001B152 5428 003F                  		addq.b	#2,$3F(a0)
0001B156 4EB9 0000 29CC             		jsr	(CalcSine).l
0001B15C E440                       		asr.w	#2,d0
0001B15E 3140 0012                  		move.w	d0,$12(a0)
0001B162                            
0001B162                            loc_191F2:
0001B162 6100 E6BE                  		bsr.w	BossMove
0001B166 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001B16C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B172                            
0001B172                            loc_19202:
0001B172 3028 0008                  		move.w	8(a0),d0
0001B176 0440 2C00                  		subi.w	#$2C00,d0
0001B17A EA48                       		lsr.w	#5,d0
0001B17C 1140 0034                  		move.b	d0,$34(a0)
0001B180 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001B186 6400                       		bcc.s	locret_19256
0001B188 4A28 0022                  		tst.b	$22(a0)
0001B18C 6B00                       		bmi.s	loc_19258
0001B18E 4A28 0020                  		tst.b	$20(a0)
0001B192 6600                       		bne.s	locret_19256
0001B194 4A28 003E                  		tst.b	$3E(a0)
0001B198 6600                       		bne.s	loc_1923A
0001B19A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B1A0 303C 00AC                  		move.w	#$AC,d0
0001B1A4 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B1AA                            
0001B1AA                            loc_1923A:
0001B1AA 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001B1AE 7000                       		moveq	#0,d0
0001B1B0 4A51                       		tst.w	(a1)
0001B1B2 6600                       		bne.s	loc_19248
0001B1B4 303C 0EEE                  		move.w	#$EEE,d0
0001B1B8                            
0001B1B8                            loc_19248:
0001B1B8 3280                       		move.w	d0,(a1)
0001B1BA 5328 003E                  		subq.b	#1,$3E(a0)
0001B1BE 6600                       		bne.s	locret_19256
0001B1C0 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1C6                            
0001B1C6                            locret_19256:
0001B1C6 4E75                       		rts	
0001B1C8                            ; ===========================================================================
0001B1C8                            
0001B1C8                            loc_19258:				; XREF: loc_19202
0001B1C8 7064                       		moveq	#100,d0
0001B1CA 6100 0000                  		bsr.w	AddPoints
0001B1CE 117C 0006 0025             		move.b	#6,$25(a0)
0001B1D4 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B1DA 4268 0010                  		clr.w	$10(a0)
0001B1DE 4E75                       		rts	
0001B1E0                            ; ===========================================================================
0001B1E0                            
0001B1E0                            loc_19270:				; XREF: Obj75_ShipIndex
0001B1E0 3028 0030                  		move.w	$30(a0),d0
0001B1E4 317C 0140 0010             		move.w	#$140,$10(a0)
0001B1EA 0828 0000 0022             		btst	#0,$22(a0)
0001B1F0 6600                       		bne.s	loc_1928E
0001B1F2 4468 0010                  		neg.w	$10(a0)
0001B1F6 0C40 2C08                  		cmpi.w	#$2C08,d0
0001B1FA 6E00                       		bgt.s	loc_1929E
0001B1FC 6000                       		bra.s	loc_19294
0001B1FE                            ; ===========================================================================
0001B1FE                            
0001B1FE                            loc_1928E:
0001B1FE 0C40 2D38                  		cmpi.w	#$2D38,d0
0001B202 6D00                       		blt.s	loc_1929E
0001B204                            
0001B204                            loc_19294:
0001B204 0868 0000 0022             		bchg	#0,$22(a0)
0001B20A 4228 003D                  		clr.b	$3D(a0)
0001B20E                            
0001B20E                            loc_1929E:
0001B20E 0440 2C10                  		subi.w	#$2C10,d0
0001B212 0240 001F                  		andi.w	#$1F,d0
0001B216 0440 001F                  		subi.w	#$1F,d0
0001B21A 6A00                       		bpl.s	loc_192AE
0001B21C 4440                       		neg.w	d0
0001B21E                            
0001B21E                            loc_192AE:
0001B21E 5340                       		subq.w	#1,d0
0001B220 6E00                       		bgt.s	loc_192E8
0001B222 4A28 003D                  		tst.b	$3D(a0)
0001B226 6600                       		bne.s	loc_192E8
0001B228 3238 D008                  		move.w	($FFFFD008).w,d1
0001B22C 0441 2C00                  		subi.w	#$2C00,d1
0001B230 EA41                       		asr.w	#5,d1
0001B232 B228 0034                  		cmp.b	$34(a0),d1
0001B236 6600                       		bne.s	loc_192E8
0001B238 7000                       		moveq	#0,d0
0001B23A 1028 0034                  		move.b	$34(a0),d0
0001B23E EB40                       		asl.w	#5,d0
0001B240 0640 2C10                  		addi.w	#$2C10,d0
0001B244 3140 0030                  		move.w	d0,$30(a0)
0001B248 6100 0000                  		bsr.w	Obj75_FindBlocks
0001B24C 5428 0025                  		addq.b	#2,$25(a0)
0001B250 4268 0028                  		clr.w	$28(a0)
0001B254 4268 0010                  		clr.w	$10(a0)
0001B258                            
0001B258                            loc_192E8:
0001B258 6000 FEF4                  		bra.w	loc_191DE
0001B25C                            ; ===========================================================================
0001B25C                            
0001B25C                            loc_192EC:				; XREF: Obj75_ShipIndex
0001B25C 7000                       		moveq	#0,d0
0001B25E 1028 0028                  		move.b	$28(a0),d0
0001B262 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001B266 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001B26A                            ; ===========================================================================
0001B26A 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001B26C 0000                       		dc.w loc_19348-off_192FA
0001B26E 0000                       		dc.w loc_1938E-off_192FA
0001B270 0000                       		dc.w loc_193D0-off_192FA
0001B272                            ; ===========================================================================
0001B272                            
0001B272                            loc_19302:				; XREF: off_192FA
0001B272 317C 0180 0012             		move.w	#$180,$12(a0)
0001B278 3028 0038                  		move.w	$38(a0),d0
0001B27C 0C40 0556                  		cmpi.w	#$556,d0
0001B280 6500                       		bcs.s	loc_19344
0001B282 317C 0556 0038             		move.w	#$556,$38(a0)
0001B288 4268 003C                  		clr.w	$3C(a0)
0001B28C 70FF                       		moveq	#-1,d0
0001B28E 3028 0036                  		move.w	$36(a0),d0
0001B292 6700                       		beq.s	loc_1933C
0001B294 2240                       		movea.l	d0,a1
0001B296 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B29C 117C 00FF 0029             		move.b	#-1,$29(a0)
0001B2A2 2348 0034                  		move.l	a0,$34(a1)
0001B2A6 317C 0032 003C             		move.w	#$32,$3C(a0)
0001B2AC                            
0001B2AC                            loc_1933C:
0001B2AC 4268 0012                  		clr.w	$12(a0)
0001B2B0 5428 0028                  		addq.b	#2,$28(a0)
0001B2B4                            
0001B2B4                            loc_19344:
0001B2B4 6000 FEAC                  		bra.w	loc_191F2
0001B2B8                            ; ===========================================================================
0001B2B8                            
0001B2B8                            loc_19348:				; XREF: off_192FA
0001B2B8 5368 003C                  		subq.w	#1,$3C(a0)
0001B2BC 6A00                       		bpl.s	loc_19366
0001B2BE 5428 0028                  		addq.b	#2,$28(a0)
0001B2C2 317C F800 0012             		move.w	#-$800,$12(a0)
0001B2C8 4A68 0036                  		tst.w	$36(a0)
0001B2CC 6600                       		bne.s	loc_19362
0001B2CE E0E8 0012                  		asr	$12(a0)
0001B2D2                            
0001B2D2                            loc_19362:
0001B2D2 7000                       		moveq	#0,d0
0001B2D4 6000                       		bra.s	loc_1937C
0001B2D6                            ; ===========================================================================
0001B2D6                            
0001B2D6                            loc_19366:
0001B2D6 7000                       		moveq	#0,d0
0001B2D8 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001B2DE 6E00                       		bgt.s	loc_1937C
0001B2E0 7002                       		moveq	#2,d0
0001B2E2 0828 0001 003D             		btst	#1,$3D(a0)
0001B2E8 6700                       		beq.s	loc_1937C
0001B2EA 4440                       		neg.w	d0
0001B2EC                            
0001B2EC                            loc_1937C:
0001B2EC D068 0038                  		add.w	$38(a0),d0
0001B2F0 3140 000C                  		move.w	d0,$C(a0)
0001B2F4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B2FA 6000 FE76                  		bra.w	loc_19202
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            loc_1938E:				; XREF: off_192FA
0001B2FE 303C 04DA                  		move.w	#$4DA,d0
0001B302 4A68 0036                  		tst.w	$36(a0)
0001B306 6700                       		beq.s	loc_1939C
0001B308 0440 0018                  		subi.w	#$18,d0
0001B30C                            
0001B30C                            loc_1939C:
0001B30C B068 0038                  		cmp.w	$38(a0),d0
0001B310 6D00                       		blt.s	loc_193BE
0001B312 317C 0008 003C             		move.w	#8,$3C(a0)
0001B318 4A68 0036                  		tst.w	$36(a0)
0001B31C 6700                       		beq.s	loc_193B4
0001B31E 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001B324                            
0001B324                            loc_193B4:
0001B324 5428 0028                  		addq.b	#2,$28(a0)
0001B328 4268 0012                  		clr.w	$12(a0)
0001B32C 6000                       		bra.s	loc_193CC
0001B32E                            ; ===========================================================================
0001B32E                            
0001B32E                            loc_193BE:
0001B32E 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001B334 6C00                       		bge.s	loc_193CC
0001B336 0668 000C 0012             		addi.w	#$C,$12(a0)
0001B33C                            
0001B33C                            loc_193CC:
0001B33C 6000 FE24                  		bra.w	loc_191F2
0001B340                            ; ===========================================================================
0001B340                            
0001B340                            loc_193D0:				; XREF: off_192FA
0001B340 5368 003C                  		subq.w	#1,$3C(a0)
0001B344 6E00                       		bgt.s	loc_19406
0001B346 6B00                       		bmi.s	loc_193EE
0001B348 70FF                       		moveq	#-1,d0
0001B34A 3028 0036                  		move.w	$36(a0),d0
0001B34E 6700                       		beq.s	loc_193E8
0001B350 2240                       		movea.l	d0,a1
0001B352 137C 000A 0029             		move.b	#$A,$29(a1)
0001B358                            
0001B358                            loc_193E8:
0001B358 4268 0036                  		clr.w	$36(a0)
0001B35C 6000                       		bra.s	loc_19406
0001B35E                            ; ===========================================================================
0001B35E                            
0001B35E                            loc_193EE:
0001B35E 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001B364 6600                       		bne.s	loc_19406
0001B366 4228 0029                  		clr.b	$29(a0)
0001B36A 5528 0025                  		subq.b	#2,$25(a0)
0001B36E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B374 6000                       		bra.s	loc_19446
0001B376                            ; ===========================================================================
0001B376                            
0001B376                            loc_19406:
0001B376 7001                       		moveq	#1,d0
0001B378 4A68 0036                  		tst.w	$36(a0)
0001B37C 6700                       		beq.s	loc_19410
0001B37E 7002                       		moveq	#2,d0
0001B380                            
0001B380                            loc_19410:
0001B380 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001B386 6700                       		beq.s	loc_19424
0001B388 6D00                       		blt.s	loc_1941C
0001B38A 4440                       		neg.w	d0
0001B38C                            
0001B38C                            loc_1941C:
0001B38C 4A68 0036                  		tst.w	$36(a0)
0001B390 D168 0038                  		add.w	d0,$38(a0)
0001B394                            
0001B394                            loc_19424:
0001B394 7000                       		moveq	#0,d0
0001B396 4A68 0036                  		tst.w	$36(a0)
0001B39A 6700                       		beq.s	loc_19438
0001B39C 7002                       		moveq	#2,d0
0001B39E 0828 0000 003D             		btst	#0,$3D(a0)
0001B3A4 6700                       		beq.s	loc_19438
0001B3A6 4440                       		neg.w	d0
0001B3A8                            
0001B3A8                            loc_19438:
0001B3A8 D068 0038                  		add.w	$38(a0),d0
0001B3AC 3140 000C                  		move.w	d0,$C(a0)
0001B3B0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001B3B6                            
0001B3B6                            loc_19446:
0001B3B6 6000 FDBA                  		bra.w	loc_19202
0001B3BA                            
0001B3BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3BA                            
0001B3BA                            
0001B3BA                            Obj75_FindBlocks:			; XREF: loc_192AE
0001B3BA 4268 0036                  		clr.w	$36(a0)
0001B3BE 43F8 D040                  		lea	($FFFFD040).w,a1
0001B3C2 703E                       		moveq	#$3E,d0
0001B3C4 7276                       		moveq	#$76,d1
0001B3C6 1428 0034                  		move.b	$34(a0),d2
0001B3CA                            
0001B3CA                            Obj75_FindLoop:
0001B3CA B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001B3CC 6600                       		bne.s	loc_1946A	; if not, branch
0001B3CE B429 0028                  		cmp.b	$28(a1),d2
0001B3D2 6600                       		bne.s	loc_1946A
0001B3D4 3149 0036                  		move.w	a1,$36(a0)
0001B3D8 6000                       		bra.s	locret_19472
0001B3DA                            ; ===========================================================================
0001B3DA                            
0001B3DA                            loc_1946A:
0001B3DA 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001B3DE 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001B3E2                            
0001B3E2                            locret_19472:
0001B3E2 4E75                       		rts	
0001B3E4                            ; End of function Obj75_FindBlocks
0001B3E4                            
0001B3E4                            ; ===========================================================================
0001B3E4                            
0001B3E4                            loc_19474:				; XREF: Obj75_ShipIndex
0001B3E4 5368 003C                  		subq.w	#1,$3C(a0)
0001B3E8 6B00                       		bmi.s	loc_1947E
0001B3EA 6000 E3E8                  		bra.w	BossDefeated
0001B3EE                            ; ===========================================================================
0001B3EE                            
0001B3EE                            loc_1947E:
0001B3EE 5428 0025                  		addq.b	#2,$25(a0)
0001B3F2 4268 0012                  		clr.w	$12(a0)
0001B3F6 08E8 0000 0022             		bset	#0,$22(a0)
0001B3FC 08A8 0007 0022             		bclr	#7,$22(a0)
0001B402 4268 0010                  		clr.w	$10(a0)
0001B406 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001B40C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001B410 6600                       		bne.s	loc_194A8
0001B412 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001B418                            
0001B418                            loc_194A8:
0001B418 6000 FD58                  		bra.w	loc_19202
0001B41C                            ; ===========================================================================
0001B41C                            
0001B41C                            loc_194AC:				; XREF: Obj75_ShipIndex
0001B41C 5268 003C                  		addq.w	#1,$3C(a0)
0001B420 6700                       		beq.s	loc_194BC
0001B422 6A00                       		bpl.s	loc_194C2
0001B424 0668 0018 0012             		addi.w	#$18,$12(a0)
0001B42A 6000                       		bra.s	loc_194EE
0001B42C                            ; ===========================================================================
0001B42C                            
0001B42C                            loc_194BC:
0001B42C 4268 0012                  		clr.w	$12(a0)
0001B430 6000                       		bra.s	loc_194EE
0001B432                            ; ===========================================================================
0001B432                            
0001B432                            loc_194C2:
0001B432 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001B438 6500                       		bcs.s	loc_194DA
0001B43A 6700                       		beq.s	loc_194E0
0001B43C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001B442 6500                       		bcs.s	loc_194EE
0001B444 5428 0025                  		addq.b	#2,$25(a0)
0001B448 6000                       		bra.s	loc_194EE
0001B44A                            ; ===========================================================================
0001B44A                            
0001B44A                            loc_194DA:
0001B44A 5168 0012                  		subq.w	#8,$12(a0)
0001B44E 6000                       		bra.s	loc_194EE
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            loc_194E0:
0001B450 4268 0012                  		clr.w	$12(a0)
0001B454 303C 0085                  		move.w	#$85,d0
0001B458 4EB9 0000 11F0             		jsr	(PlaySound).l	; play SYZ music
0001B45E                            
0001B45E                            loc_194EE:
0001B45E 6000 FD02                  		bra.w	loc_191F2
0001B462                            ; ===========================================================================
0001B462                            
0001B462                            loc_194F2:				; XREF: Obj75_ShipIndex
0001B462 317C 0400 0010             		move.w	#$400,$10(a0)
0001B468 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B46E 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001B474 6400                       		bcc.s	loc_1950C
0001B476 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B47A 6000                       		bra.s	loc_19512
0001B47C                            ; ===========================================================================
0001B47C                            
0001B47C                            loc_1950C:
0001B47C 4A28 0001                  		tst.b	1(a0)
0001B480 6A00                       		bpl.s	Obj75_ShipDelete
0001B482                            
0001B482                            loc_19512:
0001B482 6100 E39E                  		bsr.w	BossMove
0001B486 6000 FCC6                  		bra.w	loc_191DE
0001B48A                            ; ===========================================================================
0001B48A                            
0001B48A                            Obj75_ShipDelete:
0001B48A 4EF9 0000 E960             		jmp	DeleteObject
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            Obj75_FaceMain:				; XREF: Obj75_Index
0001B490 7201                       		moveq	#1,d1
0001B492 2268 0034                  		movea.l	$34(a0),a1
0001B496 7000                       		moveq	#0,d0
0001B498 1029 0025                  		move.b	$25(a1),d0
0001B49C 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001B4A0 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001B4A4 1141 001C                  		move.b	d1,$1C(a0)
0001B4A8 1010                       		move.b	(a0),d0
0001B4AA B011                       		cmp.b	(a1),d0
0001B4AC 6600                       		bne.s	Obj75_FaceDelete
0001B4AE 6000                       		bra.s	loc_195BE
0001B4B0                            ; ===========================================================================
0001B4B0                            
0001B4B0                            Obj75_FaceDelete:
0001B4B0 4EF9 0000 E960             		jmp	DeleteObject
0001B4B6                            ; ===========================================================================
0001B4B6 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001B4BA 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001B4BE 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001B4C2                            ; ===========================================================================
0001B4C2                            
0001B4C2                            loc_19552:				; XREF: off_19546
0001B4C2 720A                       		moveq	#$A,d1
0001B4C4 4E75                       		rts	
0001B4C6                            ; ===========================================================================
0001B4C6                            
0001B4C6                            loc_19556:				; XREF: off_19546
0001B4C6 7206                       		moveq	#6,d1
0001B4C8 4E75                       		rts	
0001B4CA                            ; ===========================================================================
0001B4CA                            
0001B4CA                            loc_1955A:				; XREF: off_19546
0001B4CA 7000                       		moveq	#0,d0
0001B4CC 1029 0028                  		move.b	$28(a1),d0
0001B4D0 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001B4D4 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001B4D8                            ; ===========================================================================
0001B4D8 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001B4DC 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001B4E0                            ; ===========================================================================
0001B4E0                            
0001B4E0                            loc_19570:				; XREF: off_19568
0001B4E0 6000                       		bra.s	loc_19574
0001B4E2                            ; ===========================================================================
0001B4E2                            
0001B4E2                            loc_19572:				; XREF: off_19568
0001B4E2 7206                       		moveq	#6,d1
0001B4E4                            
0001B4E4                            loc_19574:				; XREF: off_19546
0001B4E4 4A29 0020                  		tst.b	$20(a1)
0001B4E8 6600                       		bne.s	loc_1957E
0001B4EA 7205                       		moveq	#5,d1
0001B4EC 4E75                       		rts	
0001B4EE                            ; ===========================================================================
0001B4EE                            
0001B4EE                            loc_1957E:
0001B4EE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001B4F4 6500                       		bcs.s	locret_19588
0001B4F6 7204                       		moveq	#4,d1
0001B4F8                            
0001B4F8                            locret_19588:
0001B4F8 4E75                       		rts	
0001B4FA                            ; ===========================================================================
0001B4FA                            
0001B4FA                            Obj75_FlameMain:			; XREF: Obj75_Index
0001B4FA 117C 0007 001C             		move.b	#7,$1C(a0)
0001B500 2268 0034                  		movea.l	$34(a0),a1
0001B504 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B50A 6600                       		bne.s	loc_195AA
0001B50C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B512 4A28 0001                  		tst.b	1(a0)
0001B516 6A00                       		bpl.s	Obj75_FlameDelete
0001B518 6000                       		bra.s	loc_195B6
0001B51A                            ; ===========================================================================
0001B51A                            
0001B51A                            loc_195AA:
0001B51A 4A69 0010                  		tst.w	$10(a1)
0001B51E 6700                       		beq.s	loc_195B6
0001B520 117C 0008 001C             		move.b	#8,$1C(a0)
0001B526                            
0001B526                            loc_195B6:
0001B526 6000                       		bra.s	loc_195BE
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Obj75_FlameDelete:
0001B528 4EF9 0000 E960             		jmp	DeleteObject
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            loc_195BE:
0001B52E 43F9 0001 9C32             		lea	(Ani_Eggman).l,a1
0001B534 4EB9 0000 B970             		jsr	AnimateSprite
0001B53A 2268 0034                  		movea.l	$34(a0),a1
0001B53E 3169 0008 0008             		move.w	8(a1),8(a0)
0001B544 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B54A                            
0001B54A                            loc_195DA:
0001B54A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B550 7003                       		moveq	#3,d0
0001B552 C028 0022                  		and.b	$22(a0),d0
0001B556 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001B55C 8128 0001                  		or.b	d0,1(a0)
0001B560 4EF9 0000 E910             		jmp	DisplaySprite
0001B566                            ; ===========================================================================
0001B566                            
0001B566                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001B566 217C 0001 9D4A 0004        		move.l	#Map_BossItems,4(a0)
0001B56E 317C 246C 0002             		move.w	#$246C,2(a0)
0001B574 117C 0005 001A             		move.b	#5,$1A(a0)
0001B57A 2268 0034                  		movea.l	$34(a0),a1
0001B57E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001B584 6600                       		bne.s	loc_1961C
0001B586 4A28 0001                  		tst.b	1(a0)
0001B58A 6A00                       		bpl.s	Obj75_SpikeDelete
0001B58C                            
0001B58C                            loc_1961C:
0001B58C 3169 0008 0008             		move.w	8(a1),8(a0)
0001B592 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B598 3028 003C                  		move.w	$3C(a0),d0
0001B59C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001B5A2 6600                       		bne.s	loc_19652
0001B5A4 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001B5AA 6700                       		beq.s	loc_1964C
0001B5AC 4A29 0028                  		tst.b	$28(a1)
0001B5B0 6600                       		bne.s	loc_19658
0001B5B2 0C40 0094                  		cmpi.w	#$94,d0
0001B5B6 6C00                       		bge.s	loc_19658
0001B5B8 5E40                       		addq.w	#7,d0
0001B5BA 6000                       		bra.s	loc_19658
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            loc_1964C:
0001B5BC 4A69 003C                  		tst.w	$3C(a1)
0001B5C0 6A00                       		bpl.s	loc_19658
0001B5C2                            
0001B5C2                            loc_19652:
0001B5C2 4A40                       		tst.w	d0
0001B5C4 6F00                       		ble.s	loc_19658
0001B5C6 5B40                       		subq.w	#5,d0
0001B5C8                            
0001B5C8                            loc_19658:
0001B5C8 3140 003C                  		move.w	d0,$3C(a0)
0001B5CC E440                       		asr.w	#2,d0
0001B5CE D168 000C                  		add.w	d0,$C(a0)
0001B5D2 117C 0008 0019             		move.b	#8,$19(a0)
0001B5D8 117C 000C 0016             		move.b	#$C,$16(a0)
0001B5DE 4228 0020                  		clr.b	$20(a0)
0001B5E2 2268 0034                  		movea.l	$34(a0),a1
0001B5E6 4A29 0020                  		tst.b	$20(a1)
0001B5EA 6700                       		beq.s	loc_19688
0001B5EC 4A29 0029                  		tst.b	$29(a1)
0001B5F0 6600                       		bne.s	loc_19688
0001B5F2 117C 0084 0020             		move.b	#$84,$20(a0)
0001B5F8                            
0001B5F8                            loc_19688:
0001B5F8 6000 FF50                  		bra.w	loc_195DA
0001B5FC                            ; ===========================================================================
0001B5FC                            
0001B5FC                            Obj75_SpikeDelete:
0001B5FC 4EF9 0000 E960             		jmp	DeleteObject
0001B602                            ; ===========================================================================
0001B602                            ; ---------------------------------------------------------------------------
0001B602                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B602                            ; ---------------------------------------------------------------------------
0001B602                            
0001B602                            Obj76:					; XREF: Obj_Index
0001B602 7000                       		moveq	#0,d0
0001B604 1028 0024                  		move.b	$24(a0),d0
0001B608 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B60C 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B610                            ; ===========================================================================
0001B610 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B612 0000                       		dc.w Obj76_Action-Obj76_Index
0001B614 0000                       		dc.w loc_19762-Obj76_Index
0001B616                            ; ===========================================================================
0001B616                            
0001B616                            Obj76_Main:				; XREF: Obj76_Index
0001B616 7800                       		moveq	#0,d4
0001B618 3A3C 2C10                  		move.w	#$2C10,d5
0001B61C 7C09                       		moveq	#9,d6
0001B61E 43D0                       		lea	(a0),a1
0001B620 6000                       		bra.s	Obj76_MakeBlock
0001B622                            ; ===========================================================================
0001B622                            
0001B622                            Obj76_Loop:
0001B622 4EB9 0000 F066             		jsr	SingleObjLoad
0001B628 6600                       		bne.s	Obj76_ExitLoop
0001B62A                            
0001B62A                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B62A 12BC 0076                  		move.b	#$76,(a1)
0001B62E 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B636 337C 4000 0002             		move.w	#$4000,2(a1)
0001B63C 137C 0004 0001             		move.b	#4,1(a1)
0001B642 137C 0010 0019             		move.b	#$10,$19(a1)
0001B648 137C 0010 0016             		move.b	#$10,$16(a1)
0001B64E 137C 0003 0018             		move.b	#3,$18(a1)
0001B654 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B658 337C 0582 000C             		move.w	#$582,$C(a1)
0001B65E 3344 0028                  		move.w	d4,$28(a1)
0001B662 0644 0101                  		addi.w	#$101,d4
0001B666 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B66A 5429 0024                  		addq.b	#2,$24(a1)
0001B66E 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B672                            
0001B672                            Obj76_ExitLoop:
0001B672 4E75                       		rts	
0001B674                            ; ===========================================================================
0001B674                            
0001B674                            Obj76_Action:				; XREF: Obj76_Index
0001B674 1028 0029                  		move.b	$29(a0),d0
0001B678 B028 0028                  		cmp.b	$28(a0),d0
0001B67C 6700                       		beq.s	Obj76_Solid
0001B67E 4A00                       		tst.b	d0
0001B680 6B00                       		bmi.s	loc_19718
0001B682                            
0001B682                            loc_19712:
0001B682 6100 0000                  		bsr.w	Obj76_Break
0001B686 6000                       		bra.s	Obj76_Display
0001B688                            ; ===========================================================================
0001B688                            
0001B688                            loc_19718:
0001B688 2268 0034                  		movea.l	$34(a0),a1
0001B68C 4A29 0021                  		tst.b	$21(a1)
0001B690 67F0                       		beq.s	loc_19712
0001B692 3169 0008 0008             		move.w	8(a1),8(a0)
0001B698 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B69E 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B6A4 B2C8                       		cmpa.w	a0,a1
0001B6A6 6500                       		bcs.s	Obj76_Display
0001B6A8 3029 0012                  		move.w	$12(a1),d0
0001B6AC 48C0                       		ext.l	d0
0001B6AE E080                       		asr.l	#8,d0
0001B6B0 D168 000C                  		add.w	d0,$C(a0)
0001B6B4 6000                       		bra.s	Obj76_Display
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            Obj76_Solid:				; XREF: Obj76_Action
0001B6B6 323C 001B                  		move.w	#$1B,d1
0001B6BA 343C 0010                  		move.w	#$10,d2
0001B6BE 363C 0011                  		move.w	#$11,d3
0001B6C2 3828 0008                  		move.w	8(a0),d4
0001B6C6 4EB9 0001 127E             		jsr	SolidObject
0001B6CC                            
0001B6CC                            Obj76_Display:				; XREF: Obj76_Action
0001B6CC 4EF9 0000 E910             		jmp	DisplaySprite
0001B6D2                            ; ===========================================================================
0001B6D2                            
0001B6D2                            loc_19762:				; XREF: Obj76_Index
0001B6D2 4A28 0001                  		tst.b	1(a0)
0001B6D6 6A00                       		bpl.s	Obj76_Delete
0001B6D8 4EB9 0000 E8D6             		jsr	ObjectFall
0001B6DE 4EF9 0000 E910             		jmp	DisplaySprite
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            Obj76_Delete:
0001B6E4 4EF9 0000 E960             		jmp	DeleteObject
0001B6EA                            
0001B6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6EA                            
0001B6EA                            
0001B6EA                            Obj76_Break:				; XREF: Obj76_Action
0001B6EA 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B6EE 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B6F2 7801                       		moveq	#1,d4
0001B6F4 7203                       		moveq	#3,d1
0001B6F6 7438                       		moveq	#$38,d2
0001B6F8 5428 0024                  		addq.b	#2,$24(a0)
0001B6FC 117C 0008 0019             		move.b	#8,$19(a0)
0001B702 117C 0008 0016             		move.b	#8,$16(a0)
0001B708 43D0                       		lea	(a0),a1
0001B70A 6000                       		bra.s	Obj76_MakeFrag
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            Obj76_LoopFrag:
0001B70C 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001B712 6600                       		bne.s	loc_197D4
0001B714                            
0001B714                            Obj76_MakeFrag:
0001B714 45D0                       		lea	(a0),a2
0001B716 47D1                       		lea	(a1),a3
0001B718 7603                       		moveq	#3,d3
0001B71A                            
0001B71A                            loc_197AA:
0001B71A 26DA                       		move.l	(a2)+,(a3)+
0001B71C 26DA                       		move.l	(a2)+,(a3)+
0001B71E 26DA                       		move.l	(a2)+,(a3)+
0001B720 26DA                       		move.l	(a2)+,(a3)+
0001B722 51CB FFF6                  		dbf	d3,loc_197AA
0001B726                            
0001B726 335C 0010                  		move.w	(a4)+,$10(a1)
0001B72A 335C 0012                  		move.w	(a4)+,$12(a1)
0001B72E 361D                       		move.w	(a5)+,d3
0001B730 D769 0008                  		add.w	d3,8(a1)
0001B734 361D                       		move.w	(a5)+,d3
0001B736 D769 000C                  		add.w	d3,$C(a1)
0001B73A 1344 001A                  		move.b	d4,$1A(a1)
0001B73E 5244                       		addq.w	#1,d4
0001B740 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B744                            
0001B744                            loc_197D4:
0001B744 303C 00CB                  		move.w	#$CB,d0
0001B748 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B74E                            ; End of function Obj76_Break
0001B74E                            
0001B74E                            ; ===========================================================================
0001B74E FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B752 0180 FE00                  		dc.w $180, $FE00
0001B756 FF00 FF00                  		dc.w $FF00, $FF00
0001B75A 0100 FF00                  		dc.w $100, $FF00
0001B75E FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B762 0010 0000                  		dc.w $10, 0
0001B766 0000 0010                  		dc.w 0,	$10
0001B76A 0010 0010                  		dc.w $10, $10
0001B76E                            ; ---------------------------------------------------------------------------
0001B76E                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B76E                            ; ---------------------------------------------------------------------------
0001B76E                            Map_obj76:
0001B76E                            	include "_maps\obj76.asm"
0001B76E                            ; ---------------------------------------------------------------------------
0001B76E                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B76E                            ; ---------------------------------------------------------------------------
0001B76E 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B772 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B776 0000                       		dc.w byte_19826-Map_obj76
0001B778 02                         byte_19808:	dc.b 2
0001B779 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B77E 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B783 00                         		dc.b 0
0001B784 01                         byte_19814:	dc.b 1
0001B785 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B78A 01                         byte_1981A:	dc.b 1
0001B78B F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B790 01                         byte_19820:	dc.b 1
0001B791 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B796 01                         byte_19826:	dc.b 1
0001B797 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B79C                            		even
0001B79C                            		even
0001B79C                            
0001B79C                            ; ===========================================================================
0001B79C                            
0001B79C                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B79C 4EF9 0000 E960             		jmp	DeleteObject
0001B7A2                            ; ===========================================================================
0001B7A2                            ; ---------------------------------------------------------------------------
0001B7A2                            ; Object 82 - Eggman (SBZ2)
0001B7A2                            ; ---------------------------------------------------------------------------
0001B7A2                            
0001B7A2                            Obj82:					; XREF: Obj_Index
0001B7A2 7000                       		moveq	#0,d0
0001B7A4 1028 0024                  		move.b	$24(a0),d0
0001B7A8 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B7AC 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B7B0                            ; ===========================================================================
0001B7B0 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B7B2 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B7B4 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B7B6                            
0001B7B6 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B7B9 0400 03                    		dc.b 4,	0, 3
0001B7BC                            ; ===========================================================================
0001B7BC                            
0001B7BC                            Obj82_Main:				; XREF: Obj82_Index
0001B7BC 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B7C0 317C 2160 0008             		move.w	#$2160,8(a0)
0001B7C6 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B7CC 117C 000F 0020             		move.b	#$F,$20(a0)
0001B7D2 117C 0010 0021             		move.b	#$10,$21(a0)
0001B7D8 08A8 0000 0022             		bclr	#0,$22(a0)
0001B7DE 4228 0025                  		clr.b	$25(a0)
0001B7E2 115A 0024                  		move.b	(a2)+,$24(a0)
0001B7E6 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B7EA 115A 0018                  		move.b	(a2)+,$18(a0)
0001B7EE 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B7F6 317C 0400 0002             		move.w	#$400,2(a0)
0001B7FC 117C 0004 0001             		move.b	#4,1(a0)
0001B802 08E8 0007 0001             		bset	#7,1(a0)
0001B808 117C 0020 0019             		move.b	#$20,$19(a0)
0001B80E 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001B814 6600                       		bne.s	Obj82_Eggman
0001B816 2348 0034                  		move.l	a0,$34(a1)
0001B81A 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B81E 337C 2130 0008             		move.w	#$2130,8(a1)
0001B824 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B82A 4228 0025                  		clr.b	$25(a0)
0001B82E 135A 0024                  		move.b	(a2)+,$24(a1)
0001B832 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B836 135A 0018                  		move.b	(a2)+,$18(a1)
0001B83A 237C 0000 D17A 0004        		move.l	#Map_obj32,4(a1)
0001B842 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B848 137C 0004 0001             		move.b	#4,1(a1)
0001B84E 08E9 0007 0001             		bset	#7,1(a1)
0001B854 137C 0010 0019             		move.b	#$10,$19(a1)
0001B85A 137C 0000 001A             		move.b	#0,$1A(a1)
0001B860                            
0001B860                            Obj82_Eggman:				; XREF: Obj82_Index
0001B860 7000                       		moveq	#0,d0
0001B862 1028 0025                  		move.b	$25(a0),d0
0001B866 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B86A 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B86E 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B872 4EB9 0000 B970             		jsr	AnimateSprite
0001B878 4EF9 0000 E910             		jmp	DisplaySprite
0001B87E                            ; ===========================================================================
0001B87E 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B880 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B882 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B884 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B886                            ; ===========================================================================
0001B886                            
0001B886                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B886 3028 0008                  		move.w	8(a0),d0
0001B88A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B88E 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B892 6400                       		bcc.s	loc_19934	; if not, branch
0001B894 5428 0025                  		addq.b	#2,$25(a0)
0001B898 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B89E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B8A4                            
0001B8A4                            loc_19934:				; XREF: Obj82_EggIndex
0001B8A4 4EF9 0000 E8F6             		jmp	SpeedToPos
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B8AA 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B8AE 6600                       		bne.s	loc_19954	; if time remains, branch
0001B8B0 5428 0025                  		addq.b	#2,$25(a0)
0001B8B4 117C 0002 001C             		move.b	#2,$1C(a0)
0001B8BA 5868 000C                  		addq.w	#4,$C(a0)
0001B8BE 317C 000F 003C             		move.w	#15,$3C(a0)
0001B8C4                            
0001B8C4                            loc_19954:
0001B8C4 60DE                       		bra.s	loc_19934
0001B8C6                            ; ===========================================================================
0001B8C6                            
0001B8C6                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B8C6 5368 003C                  		subq.w	#1,$3C(a0)
0001B8CA 6E00                       		bgt.s	loc_199D0
0001B8CC 6600                       		bne.s	loc_1996A
0001B8CE 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B8D4 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B8DA                            
0001B8DA                            loc_1996A:
0001B8DA 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B8E0 6E00                       		bgt.s	loc_19976
0001B8E2 4268 0010                  		clr.w	$10(a0)
0001B8E6                            
0001B8E6                            loc_19976:
0001B8E6 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B8EC 4A68 0012                  		tst.w	$12(a0)
0001B8F0 6B00                       		bmi.s	Obj82_FindBlocks
0001B8F2 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B8F8 6500                       		bcs.s	Obj82_FindBlocks
0001B8FA 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B900 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B906 6500                       		bcs.s	Obj82_FindBlocks
0001B908 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B90E 4268 0012                  		clr.w	$12(a0)
0001B912                            
0001B912                            Obj82_FindBlocks:
0001B912 3028 0010                  		move.w	$10(a0),d0
0001B916 8068 0012                  		or.w	$12(a0),d0
0001B91A 6600                       		bne.s	loc_199D0
0001B91C 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B920 703E                       		moveq	#$3E,d0
0001B922 7240                       		moveq	#$40,d1
0001B924                            
0001B924                            Obj82_FindLoop:	
0001B924 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B926 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B92A 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B92E                            
0001B92E 6600                       		bne.s	loc_199D0
0001B930 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B936 5428 0025                  		addq.b	#2,$25(a0)
0001B93A 117C 0001 001C             		move.b	#1,$1C(a0)
0001B940                            
0001B940                            loc_199D0:
0001B940 6000 FF62                  		bra.w	loc_19934
0001B944                            ; ===========================================================================
0001B944                            
0001B944                            Obj82_Switch:				; XREF: Obj82_Index
0001B944 7000                       		moveq	#0,d0
0001B946 1028 0025                  		move.b	$25(a0),d0
0001B94A 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B94E 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B952                            ; ===========================================================================
0001B952 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B954 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B956                            ; ===========================================================================
0001B956                            
0001B956                            loc_199E6:				; XREF: Obj82_SwIndex
0001B956 2268 0034                  		movea.l	$34(a0),a1
0001B95A 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B960 6600                       		bne.s	Obj82_SwDisplay
0001B962 117C 0001 001A             		move.b	#1,$1A(a0)
0001B968 5428 0025                  		addq.b	#2,$25(a0)
0001B96C                            
0001B96C                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B96C 4EF9 0000 E910             		jmp	DisplaySprite
0001B972                            ; ===========================================================================
0001B972                            Ani_obj82:
0001B972                            	include "_anim\obj82.asm"
0001B972                            ; ---------------------------------------------------------------------------
0001B972                            ; Animation script - Eggman (SBZ2)
0001B972                            ; ---------------------------------------------------------------------------
0001B972 0000                       		dc.w byte_19A10-Ani_obj82
0001B974 0000                       		dc.w byte_19A14-Ani_obj82
0001B976 0000                       		dc.w byte_19A18-Ani_obj82
0001B978 0000                       		dc.w byte_19A20-Ani_obj82
0001B97A 0000                       		dc.w byte_19A24-Ani_obj82
0001B97C 0000                       		dc.w byte_19A2A-Ani_obj82
0001B97E 0000                       		dc.w byte_19A30-Ani_obj82
0001B980 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B984 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B988 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B990 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B994 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B99A 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B9A0 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B9A4                            		even
0001B9A4                            		even
0001B9A4                            
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4                            ; Sprite mappings - Eggman (SBZ2)
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4                            Map_obj82:
0001B9A4                            	include "_maps\obj82.asm"
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4                            ; Sprite mappings - Eggman (SBZ2)
0001B9A4                            ; ---------------------------------------------------------------------------
0001B9A4 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B9A8 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B9AC 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B9B0 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B9B4 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B9B8 0000                       		dc.w byte_19B4F-Map_obj82
0001B9BA 03                         byte_19A4A:	dc.b 3
0001B9BB FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B9C0 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B9C5 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B9CA 04                         byte_19A5A:	dc.b 4
0001B9CB E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B9D0 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B9D5 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B9DA FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B9DF 00                         		dc.b 0
0001B9E0 04                         byte_19A70:	dc.b 4
0001B9E1 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B9E6 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B9EB 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B9F0 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B9F5 00                         		dc.b 0
0001B9F6 04                         byte_19A86:	dc.b 4
0001B9F7 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B9FC F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001BA01 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001BA06 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001BA0B 00                         		dc.b 0
0001BA0C 04                         byte_19A9C:	dc.b 4
0001BA0D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BA12 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BA17 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001BA1C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA21 00                         		dc.b 0
0001BA22 04                         byte_19AB2:	dc.b 4
0001BA23 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA28 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA2D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA32 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BA37 00                         		dc.b 0
0001BA38 07                         byte_19AC8:	dc.b 7
0001BA39 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA3E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BA43 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BA48 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BA4D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BA52 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001BA57 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001BA5C 05                         byte_19AEC:	dc.b 5
0001BA5D F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001BA62 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001BA67 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001BA6C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001BA71 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BA76 06                         byte_19B06:	dc.b 6
0001BA77 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001BA7C EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001BA81 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001BA86 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001BA8B 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001BA90 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001BA95 00                         		dc.b 0
0001BA96 08                         byte_19B26:	dc.b 8
0001BA97 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001BA9C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001BAA1 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001BAA6 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001BAAB E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001BAB0 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001BAB5 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001BABA 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001BABF 03                         byte_19B4F:	dc.b 3
0001BAC0 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001BAC5 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001BACA EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001BAD0 00                         		even
0001BAD0 00                         		even
0001BAD0                            
0001BAD0                            ; ===========================================================================
0001BAD0                            ; ---------------------------------------------------------------------------
0001BAD0                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001BAD0                            ; ---------------------------------------------------------------------------
0001BAD0                            
0001BAD0                            Obj83:					; XREF: Obj_Index
0001BAD0 7000                       		moveq	#0,d0
0001BAD2 1028 0024                  		move.b	$24(a0),d0
0001BAD6 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001BADA 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001BADE                            ; ===========================================================================
0001BADE 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001BAE0 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001BAE2 0000                       		dc.w loc_19C36-Obj83_Index
0001BAE4 0000                       		dc.w loc_19C62-Obj83_Index
0001BAE6 0000                       		dc.w loc_19C72-Obj83_Index
0001BAE8 0000                       		dc.w loc_19C80-Obj83_Index
0001BAEA                            ; ===========================================================================
0001BAEA                            
0001BAEA                            Obj83_Main:				; XREF: Obj83_Index
0001BAEA 317C 2080 0008             		move.w	#$2080,8(a0)
0001BAF0 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001BAF6 117C 0080 0019             		move.b	#$80,$19(a0)
0001BAFC 117C 0010 0016             		move.b	#$10,$16(a0)
0001BB02 117C 0004 0001             		move.b	#4,1(a0)
0001BB08 08E8 0007 0001             		bset	#7,1(a0)
0001BB0E 7800                       		moveq	#0,d4
0001BB10 3A3C 2010                  		move.w	#$2010,d5
0001BB14 7C07                       		moveq	#7,d6
0001BB16 45E8 0030                  		lea	$30(a0),a2
0001BB1A                            
0001BB1A                            Obj83_MakeBlock:
0001BB1A 4EB9 0000 F066             		jsr	SingleObjLoad
0001BB20 6600                       		bne.s	Obj83_ExitMake
0001BB22 34C9                       		move.w	a1,(a2)+
0001BB24 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001BB28 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001BB30 337C 4518 0002             		move.w	#$4518,2(a1)
0001BB36 137C 0004 0001             		move.b	#4,1(a1)
0001BB3C 137C 0010 0019             		move.b	#$10,$19(a1)
0001BB42 137C 0010 0016             		move.b	#$10,$16(a1)
0001BB48 137C 0003 0018             		move.b	#3,$18(a1)
0001BB4E 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001BB52 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001BB58 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001BB5C 137C 0008 0024             		move.b	#8,$24(a1)
0001BB62 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001BB66                            
0001BB66                            Obj83_ExitMake:
0001BB66 5428 0024                  		addq.b	#2,$24(a0)
0001BB6A 4E75                       		rts	
0001BB6C                            ; ===========================================================================
0001BB6C                            
0001BB6C                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001BB6C 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BB72 6600                       		bne.s	Obj83_Solid	; if not, branch
0001BB74 4228 001A                  		clr.b	$1A(a0)
0001BB78 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001BB7C                            
0001BB7C                            Obj83_Solid:
0001BB7C 7000                       		moveq	#0,d0
0001BB7E 1028 001A                  		move.b	$1A(a0),d0
0001BB82 4400                       		neg.b	d0
0001BB84 4880                       		ext.w	d0
0001BB86 5040                       		addq.w	#8,d0
0001BB88 E940                       		asl.w	#4,d0
0001BB8A 383C 2100                  		move.w	#$2100,d4
0001BB8E 9840                       		sub.w	d0,d4
0001BB90 1140 0019                  		move.b	d0,$19(a0)
0001BB94 3144 0008                  		move.w	d4,8(a0)
0001BB98 720B                       		moveq	#$B,d1
0001BB9A D240                       		add.w	d0,d1
0001BB9C 7410                       		moveq	#$10,d2
0001BB9E 7611                       		moveq	#$11,d3
0001BBA0 4EF9 0001 127E             		jmp	SolidObject
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_19C36:				; XREF: Obj83_Index
0001BBA6 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001BBAC 6400                       		bcc.s	Obj83_Solid2
0001BBAE 70FF                       		moveq	#-1,d0
0001BBB0 1028 001A                  		move.b	$1A(a0),d0
0001BBB4 4880                       		ext.w	d0
0001BBB6 D040                       		add.w	d0,d0
0001BBB8 3030 0030                  		move.w	$30(a0,d0.w),d0
0001BBBC 2240                       		movea.l	d0,a1
0001BBBE 337C 474F 0028             		move.w	#$474F,$28(a1)
0001BBC4 5228 001A                  		addq.b	#1,$1A(a0)
0001BBC8 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001BBCE 6700                       		beq.s	loc_19C62
0001BBD0                            
0001BBD0                            Obj83_Solid2:
0001BBD0 60AA                       		bra.s	Obj83_Solid
0001BBD2                            ; ===========================================================================
0001BBD2                            
0001BBD2                            loc_19C62:				; XREF: Obj83_Index
0001BBD2 08A8 0003 0022             		bclr	#3,$22(a0)
0001BBD8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BBDE 6000 FBBC                  		bra.w	loc_1982C
0001BBE2                            ; ===========================================================================
0001BBE2                            
0001BBE2                            loc_19C72:				; XREF: Obj83_Index
0001BBE2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001BBE8 6700                       		beq.s	Obj83_Break	; if yes, branch
0001BBEA 4EF9 0000 E910             		jmp	DisplaySprite
0001BBF0                            ; ===========================================================================
0001BBF0                            
0001BBF0                            loc_19C80:				; XREF: Obj83_Index
0001BBF0 4A28 0001                  		tst.b	1(a0)
0001BBF4 6A00 FBA6                  		bpl.w	loc_1982C
0001BBF8 4EB9 0000 E8D6             		jsr	ObjectFall
0001BBFE 4EF9 0000 E910             		jmp	DisplaySprite
0001BC04                            ; ===========================================================================
0001BC04                            
0001BC04                            Obj83_Break:				; XREF: loc_19C72
0001BC04 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001BC08 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001BC0C 7801                       		moveq	#1,d4
0001BC0E 7203                       		moveq	#3,d1
0001BC10 7438                       		moveq	#$38,d2
0001BC12 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001BC18 31FC 0200 F5D0             		move.w	#$200,(SonimeSST+sonime_facetimer).w
0001BC1E 5428 0024                  		addq.b	#2,$24(a0)
0001BC22 117C 0008 0019             		move.b	#8,$19(a0)
0001BC28 117C 0008 0016             		move.b	#8,$16(a0)
0001BC2E 43D0                       		lea	(a0),a1
0001BC30 6000                       		bra.s	Obj83_MakeFrag
0001BC32                            ; ===========================================================================
0001BC32                            
0001BC32                            Obj83_LoopFrag:
0001BC32 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001BC38 6600                       		bne.s	Obj83_BreakSnd
0001BC3A                            
0001BC3A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001BC3A 45D0                       		lea	(a0),a2
0001BC3C 47D1                       		lea	(a1),a3
0001BC3E 7603                       		moveq	#3,d3
0001BC40                            
0001BC40                            loc_19CC4:
0001BC40 26DA                       		move.l	(a2)+,(a3)+
0001BC42 26DA                       		move.l	(a2)+,(a3)+
0001BC44 26DA                       		move.l	(a2)+,(a3)+
0001BC46 26DA                       		move.l	(a2)+,(a3)+
0001BC48 51CB FFF6                  		dbf	d3,loc_19CC4
0001BC4C                            
0001BC4C 335C 0012                  		move.w	(a4)+,$12(a1)
0001BC50 361D                       		move.w	(a5)+,d3
0001BC52 D769 0008                  		add.w	d3,8(a1)
0001BC56 361D                       		move.w	(a5)+,d3
0001BC58 D769 000C                  		add.w	d3,$C(a1)
0001BC5C 1344 001A                  		move.b	d4,$1A(a1)
0001BC60 5244                       		addq.w	#1,d4
0001BC62 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001BC66                            
0001BC66                            Obj83_BreakSnd:
0001BC66 303C 00CB                  		move.w	#$CB,d0
0001BC6A 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001BC70 4EF9 0000 E910             		jmp	DisplaySprite
0001BC76                            ; ===========================================================================
0001BC76 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001BC7A 0120 00C0                  		dc.w $120, $C0
0001BC7E FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001BC82 0010 0000                  		dc.w $10, 0
0001BC86 0000 0010                  		dc.w 0,	$10
0001BC8A 0010 0010                  		dc.w $10, $10
0001BC8E                            ; ---------------------------------------------------------------------------
0001BC8E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BC8E                            ; ---------------------------------------------------------------------------
0001BC8E                            Map_obj83:
0001BC8E                            	include "_maps\obj83.asm"
0001BC8E                            ; ---------------------------------------------------------------------------
0001BC8E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001BC8E                            ; ---------------------------------------------------------------------------
0001BC8E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001BC92 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001BC96 0000                       		dc.w byte_19D46-Map_obj83
0001BC98 01                         byte_19D1C:	dc.b 1
0001BC99 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BC9E 02                         byte_19D22:	dc.b 2
0001BC9F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001BCA4 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001BCA9 00                         		dc.b 0
0001BCAA 02                         byte_19D2E:	dc.b 2
0001BCAB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BCB0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001BCB5 00                         		dc.b 0
0001BCB6 02                         byte_19D3A:	dc.b 2
0001BCB7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001BCBC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001BCC1 00                         		dc.b 0
0001BCC2 02                         byte_19D46:	dc.b 2
0001BCC3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001BCC8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001BCCE 00                         		even
0001BCCE 00                         		even
0001BCCE                            
0001BCCE                            ; ===========================================================================
0001BCCE                            ; ---------------------------------------------------------------------------
0001BCCE                            ; Object 85 - Eggman (FZ)
0001BCCE                            ; ---------------------------------------------------------------------------
0001BCCE                            
0001BCCE                            Obj85_Delete:
0001BCCE 4EF9 0000 E960             		jmp	DeleteObject
0001BCD4                            ; ===========================================================================
0001BCD4                            
0001BCD4                            Obj85:					; XREF: Obj_Index
0001BCD4 7000                       		moveq	#0,d0
0001BCD6 1028 0024                  		move.b	$24(a0),d0
0001BCDA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001BCDE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001BCE2                            ; ===========================================================================
0001BCE2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001BCE4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001BCE6 0000                       		dc.w loc_1A38E-Obj85_Index
0001BCE8 0000                       		dc.w loc_1A346-Obj85_Index
0001BCEA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001BCEC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001BCEE 0000                       		dc.w loc_1A264-Obj85_Index
0001BCF0                            
0001BCF0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001BCF6 0001 B9A4                  		dc.l Map_obj82		; mappings pointer
0001BCFA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001BD00 0000 0000                  		dc.l Map_obj84
0001BD04 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001BD0A 0000 0000                  		dc.l Map_FZBoss
0001BD0E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001BD14 0001 B9A4                  		dc.l Map_obj82
0001BD18 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BD1E 0001 9C82                  		dc.l Map_Eggman
0001BD22 26E0 0596 0400             		dc.w $26E0, $596, $400
0001BD28 0001 9C82                  		dc.l Map_Eggman
0001BD2C                            
0001BD2C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001BD31 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001BD36 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001BD3B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001BD40 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001BD45 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001BD4A                            ; ===========================================================================
0001BD4A                            
0001BD4A                            Obj85_Main:				; XREF: Obj85_Index
0001BD4A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001BD4E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001BD52 2248                       		movea.l	a0,a1
0001BD54 7205                       		moveq	#5,d1
0001BD56 6000                       		bra.s	Obj85_LoadBoss
0001BD58                            ; ===========================================================================
0001BD58                            
0001BD58                            Obj85_Loop:
0001BD58 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001BD5E 6600                       		bne.s	loc_19E20
0001BD60                            
0001BD60                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001BD60 12BC 0085                  		move.b	#$85,(a1)
0001BD64 335A 0008                  		move.w	(a2)+,8(a1)
0001BD68 335A 000C                  		move.w	(a2)+,$C(a1)
0001BD6C 335A 0002                  		move.w	(a2)+,2(a1)
0001BD70 235A 0004                  		move.l	(a2)+,4(a1)
0001BD74 135B 0024                  		move.b	(a3)+,$24(a1)
0001BD78 135B 001C                  		move.b	(a3)+,$1C(a1)
0001BD7C 135B 0018                  		move.b	(a3)+,$18(a1)
0001BD80 135B 0017                  		move.b	(a3)+,$17(a1)
0001BD84 135B 0016                  		move.b	(a3)+,$16(a1)
0001BD88 137C 0004 0001             		move.b	#4,1(a1)
0001BD8E 08E8 0007 0001             		bset	#7,1(a0)
0001BD94 2348 0034                  		move.l	a0,$34(a1)
0001BD98 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001BD9C                            
0001BD9C                            loc_19E20:
0001BD9C 45E8 0036                  		lea	$36(a0),a2
0001BDA0 4EB9 0000 F066             		jsr	SingleObjLoad
0001BDA6 6600                       		bne.s	loc_19E5A
0001BDA8 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001BDAC 3489                       		move.w	a1,(a2)
0001BDAE 2348 0034                  		move.l	a0,$34(a1)
0001BDB2 45E8 0038                  		lea	$38(a0),a2
0001BDB6 7400                       		moveq	#0,d2
0001BDB8 7203                       		moveq	#3,d1
0001BDBA                            
0001BDBA                            loc_19E3E:
0001BDBA 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001BDC0 6600                       		bne.s	loc_19E5A
0001BDC2 34C9                       		move.w	a1,(a2)+
0001BDC4 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001BDC8 2348 0034                  		move.l	a0,$34(a1)
0001BDCC 1342 0028                  		move.b	d2,$28(a1)
0001BDD0 5442                       		addq.w	#2,d2
0001BDD2 51C9 FFE6                  		dbf	d1,loc_19E3E
0001BDD6                            
0001BDD6                            loc_19E5A:
0001BDD6 317C 0000 0034             		move.w	#0,$34(a0)
0001BDDC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001BDE2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BDE8                            
0001BDE8                            Obj85_Eggman:				; XREF: Obj85_Index
0001BDE8 7000                       		moveq	#0,d0
0001BDEA 1028 0034                  		move.b	$34(a0),d0
0001BDEE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001BDF2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001BDF6 4EF9 0000 E910             		jmp	DisplaySprite
0001BDFC                            ; ===========================================================================
0001BDFC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001BE00 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001BE04 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001BE08 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001BE0C                            ; ===========================================================================
0001BE0C                            
0001BE0C                            loc_19E90:				; XREF: off_19E80
0001BE0C 4AB8 F680                  		tst.l	($FFFFF680).w
0001BE10 6600                       		bne.s	loc_19EA2
0001BE12 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001BE18 6500                       		bcs.s	loc_19EA2
0001BE1A 5428 0034                  		addq.b	#2,$34(a0)
0001BE1E                            
0001BE1E                            loc_19EA2:
0001BE1E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001BE22 4E75                       		rts	
0001BE24                            ; ===========================================================================
0001BE24                            
0001BE24                            loc_19EA8:				; XREF: off_19E80
0001BE24 4A68 0030                  		tst.w	$30(a0)
0001BE28 6A00                       		bpl.s	loc_19F10
0001BE2A 4268 0030                  		clr.w	$30(a0)
0001BE2E 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001BE34 0240 000C                  		andi.w	#$C,d0
0001BE38 3200                       		move.w	d0,d1
0001BE3A 5441                       		addq.w	#2,d1
0001BE3C 4A80                       		tst.l	d0
0001BE3E 6A00                       		bpl.s	loc_19EC6
0001BE40 C141                       		exg	d1,d0
0001BE42                            
0001BE42                            loc_19EC6:
0001BE42 43FA 0000                  		lea	word_19FD6(pc),a1
0001BE46 3031 0000                  		move.w	(a1,d0.w),d0
0001BE4A 3231 1000                  		move.w	(a1,d1.w),d1
0001BE4E 3140 0030                  		move.w	d0,$30(a0)
0001BE52 74FF                       		moveq	#-1,d2
0001BE54 3430 0038                  		move.w	$38(a0,d0.w),d2
0001BE58 2242                       		movea.l	d2,a1
0001BE5A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BE60 337C FFFF 0030             		move.w	#-1,$30(a1)
0001BE66 3430 1038                  		move.w	$38(a0,d1.w),d2
0001BE6A 2242                       		movea.l	d2,a1
0001BE6C 137C 0001 0029             		move.b	#1,$29(a1)
0001BE72 337C 0000 0030             		move.w	#0,$30(a1)
0001BE78 317C 0001 0032             		move.w	#1,$32(a0)
0001BE7E 4228 0035                  		clr.b	$35(a0)
0001BE82 303C 00B7                  		move.w	#$B7,d0
0001BE86 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001BE8C                            
0001BE8C                            loc_19F10:
0001BE8C 4A68 0032                  		tst.w	$32(a0)
0001BE90 6B00 0000                  		bmi.w	loc_19FA6
0001BE94 08A8 0000 0022             		bclr	#0,$22(a0)
0001BE9A 3038 D008                  		move.w	($FFFFD008).w,d0
0001BE9E 9068 0008                  		sub.w	8(a0),d0
0001BEA2 6500                       		bcs.s	loc_19F2E
0001BEA4 08E8 0000 0022             		bset	#0,$22(a0)
0001BEAA                            
0001BEAA                            loc_19F2E:
0001BEAA 323C 002B                  		move.w	#$2B,d1
0001BEAE 343C 0014                  		move.w	#$14,d2
0001BEB2 363C 0014                  		move.w	#$14,d3
0001BEB6 3828 0008                  		move.w	8(a0),d4
0001BEBA 4EB9 0001 127E             		jsr	SolidObject
0001BEC0 4A44                       		tst.w	d4
0001BEC2 6E00                       		bgt.s	loc_19F50
0001BEC4                            
0001BEC4                            loc_19F48:
0001BEC4 4A28 0035                  		tst.b	$35(a0)
0001BEC8 6600                       		bne.s	loc_19F88
0001BECA 6000                       		bra.s	loc_19F96
0001BECC                            ; ===========================================================================
0001BECC                            
0001BECC                            loc_19F50:
0001BECC 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001BED0 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001BED6 66EC                       		bne.s	loc_19F48
0001BED8 303C 0300                  		move.w	#$300,d0
0001BEDC 0828 0000 0022             		btst	#0,$22(a0)
0001BEE2 6600                       		bne.s	loc_19F6A
0001BEE4 4440                       		neg.w	d0
0001BEE6                            
0001BEE6                            loc_19F6A:
0001BEE6 31C0 D010                  		move.w	d0,($FFFFD010).w
0001BEEA 4A28 0035                  		tst.b	$35(a0)
0001BEEE 6600                       		bne.s	loc_19F88
0001BEF0 4A28 0021                  		tst.b	$21(a0)	;has the boss been defeated?
0001BEF4 6700                       		beq.s	loc_19F9C	;if so, don't let it be hit again.		
0001BEF6 5328 0021                  		subq.b	#1,$21(a0)
0001BEFA 117C 00FF 0035             		move.b	#255,$35(a0)
0001BF00 303C 00AC                  		move.w	#$AC,d0
0001BF04 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BF0A                            
0001BF0A                            loc_19F88:
0001BF0A 5328 0035                  		subq.b	#1,$35(a0)
0001BF0E 6700                       		beq.s	loc_19F96
0001BF10 117C 0003 001C             		move.b	#3,$1C(a0)
0001BF16 6000                       		bra.s	loc_19F9C
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            loc_19F96:
0001BF18 117C 0001 001C             		move.b	#1,$1C(a0)
0001BF1E                            
0001BF1E                            loc_19F9C:
0001BF1E 43FA FA52                  		lea	Ani_obj82(pc),a1
0001BF22 4EF9 0000 B970             		jmp	AnimateSprite
0001BF28                            ; ===========================================================================
0001BF28                            
0001BF28                            loc_19FA6:
0001BF28 4A28 0021                  		tst.b	$21(a0)
0001BF2C 6700                       		beq.s	loc_19FBC
0001BF2E 5428 0034                  		addq.b	#2,$34(a0)
0001BF32 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BF38 4268 0032                  		clr.w	$32(a0)
0001BF3C 4E75                       		rts	
0001BF3E                            ; ===========================================================================
0001BF3E                            
0001BF3E                            loc_19FBC:
0001BF3E 117C 0006 0034             		move.b	#6,$34(a0)
0001BF44 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001BF4A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BF50 117C 0014 0016             		move.b	#$14,$16(a0)
0001BF56 4E75                       		rts	
0001BF58                            ; ===========================================================================
0001BF58 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001BF68                            ; ===========================================================================
0001BF68                            
0001BF68                            loc_19FE6:				; XREF: off_19E80
0001BF68 70FF                       		moveq	#-1,d0
0001BF6A 3028 0036                  		move.w	$36(a0),d0
0001BF6E 2240                       		movea.l	d0,a1
0001BF70 4A68 0030                  		tst.w	$30(a0)
0001BF74 6A00                       		bpl.s	loc_1A000
0001BF76 4268 0030                  		clr.w	$30(a0)
0001BF7A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001BF80 6100                       		bsr.s	loc_1A020
0001BF82                            
0001BF82                            loc_1A000:
0001BF82 700F                       		moveq	#$F,d0
0001BF84 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001BF88 6600                       		bne.s	loc_1A00A
0001BF8A 6100                       		bsr.s	loc_1A020
0001BF8C                            
0001BF8C                            loc_1A00A:
0001BF8C 4A68 0032                  		tst.w	$32(a0)
0001BF90 6700                       		beq.s	locret_1A01E
0001BF92 5528 0034                  		subq.b	#2,$34(a0)
0001BF96 317C FFFF 0030             		move.w	#-1,$30(a0)
0001BF9C 4268 0032                  		clr.w	$32(a0)
0001BFA0                            
0001BFA0                            locret_1A01E:
0001BFA0 4E75                       		rts	
0001BFA2                            ; ===========================================================================
0001BFA2                            
0001BFA2                            loc_1A020:
0001BFA2 303C 00B1                  		move.w	#$B1,d0
0001BFA6 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001BFAC                            ; ===========================================================================
0001BFAC                            
0001BFAC                            loc_1A02A:				; XREF: off_19E80
0001BFAC 117C 0030 0017             		move.b	#$30,$17(a0)
0001BFB2 08E8 0000 0022             		bset	#0,$22(a0)
0001BFB8 4EB9 0000 E8F6             		jsr	SpeedToPos
0001BFBE 117C 0006 001A             		move.b	#6,$1A(a0)
0001BFC4 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BFCA 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BFD0 6500                       		bcs.s	loc_1A070
0001BFD2 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BFD8 5428 0034                  		addq.b	#2,$34(a0)
0001BFDC 117C 0020 0017             		move.b	#$20,$17(a0)
0001BFE2 317C 0100 0010             		move.w	#$100,$10(a0)
0001BFE8 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BFEE 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BFF2                            
0001BFF2                            loc_1A070:
0001BFF2 6000 0000                  		bra.w	loc_1A166
0001BFF6                            ; ===========================================================================
0001BFF6                            
0001BFF6                            loc_1A074:				; XREF: off_19E80
0001BFF6 08E8 0000 0022             		bset	#0,$22(a0)
0001BFFC 117C 0004 001C             		move.b	#4,$1C(a0)
0001C002 4EB9 0000 E8F6             		jsr	SpeedToPos
0001C008 0668 0010 0012             		addi.w	#$10,$12(a0)
0001C00E 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001C014 6500                       		bcs.s	loc_1A09A
0001C016 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C01C                            
0001C01C                            loc_1A09A:
0001C01C 317C 0400 0010             		move.w	#$400,$10(a0)
0001C022 3028 0008                  		move.w	8(a0),d0
0001C026 9078 D008                  		sub.w	($FFFFD008).w,d0
0001C02A 6A00                       		bpl.s	loc_1A0B4
0001C02C 317C 0500 0010             		move.w	#$500,$10(a0)
0001C032 6000 0000                  		bra.w	loc_1A0F2
0001C036                            ; ===========================================================================
0001C036                            
0001C036                            loc_1A0B4:
0001C036 0440 0070                  		subi.w	#$70,d0
0001C03A 6500                       		bcs.s	loc_1A0F2
0001C03C 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C042 5140                       		subq.w	#8,d0
0001C044 6500                       		bcs.s	loc_1A0F2
0001C046 0468 0100 0010             		subi.w	#$100,$10(a0)
0001C04C 5140                       		subq.w	#8,d0
0001C04E 6500                       		bcs.s	loc_1A0F2
0001C050 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C056 5140                       		subq.w	#8,d0
0001C058 6500                       		bcs.s	loc_1A0F2
0001C05A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C060 5140                       		subq.w	#8,d0
0001C062 6500                       		bcs.s	loc_1A0F2
0001C064 0468 0080 0010             		subi.w	#$80,$10(a0)
0001C06A 0440 0038                  		subi.w	#$38,d0
0001C06E 6500                       		bcs.s	loc_1A0F2
0001C070 4268 0010                  		clr.w	$10(a0)
0001C074                            
0001C074                            loc_1A0F2:
0001C074 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001C07A 6500                       		bcs.s	loc_1A110
0001C07C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001C082 317C 0240 0010             		move.w	#$240,$10(a0)
0001C088 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001C08E 5428 0034                  		addq.b	#2,$34(a0)
0001C092                            
0001C092                            loc_1A110:
0001C092 6000                       		bra.s	loc_1A15C
0001C094                            ; ===========================================================================
0001C094                            
0001C094                            loc_1A112:				; XREF: off_19E80
0001C094 4EB9 0000 E8F6             		jsr	SpeedToPos
0001C09A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001C0A0 6500                       		bcs.s	loc_1A124
0001C0A2 4268 0010                  		clr.w	$10(a0)
0001C0A6                            
0001C0A6                            loc_1A124:
0001C0A6 0668 0034 0012             		addi.w	#$34,$12(a0)
0001C0AC 4A68 0012                  		tst.w	$12(a0)
0001C0B0 6B00                       		bmi.s	loc_1A142
0001C0B2 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001C0B8 6500                       		bcs.s	loc_1A142
0001C0BA 317C 0592 000C             		move.w	#$592,$C(a0)
0001C0C0 4268 0012                  		clr.w	$12(a0)
0001C0C4                            
0001C0C4                            loc_1A142:
0001C0C4 3028 0010                  		move.w	$10(a0),d0
0001C0C8 8068 0012                  		or.w	$12(a0),d0
0001C0CC 6600                       		bne.s	loc_1A15C
0001C0CE 5428 0034                  		addq.b	#2,$34(a0)
0001C0D2 317C FE80 0012             		move.w	#-$180,$12(a0)
0001C0D8 117C 0001 0021             		move.b	#1,$21(a0)
0001C0DE                            
0001C0DE                            loc_1A15C:
0001C0DE 43FA F892                  		lea	Ani_obj82(pc),a1
0001C0E2 4EB9 0000 B970             		jsr	AnimateSprite
0001C0E8                            
0001C0E8                            loc_1A166:
0001C0E8 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001C0EE 6C00                       		bge.s	loc_1A172
0001C0F0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C0F4                            
0001C0F4                            loc_1A172:
0001C0F4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001C0FA 6C00                       		bge.s	locret_1A190
0001C0FC 323C 001B                  		move.w	#$1B,d1
0001C100 343C 0070                  		move.w	#$70,d2
0001C104 363C 0071                  		move.w	#$71,d3
0001C108 3828 0008                  		move.w	8(a0),d4
0001C10C 4EF9 0001 127E             		jmp	SolidObject
0001C112                            ; ===========================================================================
0001C112                            
0001C112                            locret_1A190:
0001C112 4E75                       		rts	
0001C114                            ; ===========================================================================
0001C114                            
0001C114                            loc_1A192:				; XREF: off_19E80
0001C114 217C 0001 9C82 0004        		move.l	#Map_Eggman,4(a0)
0001C11C 317C 0400 0002             		move.w	#$400,2(a0)
0001C122 117C 0000 001C             		move.b	#0,$1C(a0)
0001C128 08E8 0000 0022             		bset	#0,$22(a0)
0001C12E 4EB9 0000 E8F6             		jsr	SpeedToPos
0001C134 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001C13A 6400                       		bcc.s	loc_1A1D0
0001C13C 317C 0180 0010             		move.w	#$180,$10(a0)
0001C142 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001C148 117C 000F 0020             		move.b	#$F,$20(a0)
0001C14E 5428 0034                  		addq.b	#2,$34(a0)
0001C152                            
0001C152                            loc_1A1D0:
0001C152 6000 FF8A                  		bra.w	loc_1A15C
0001C156                            ; ===========================================================================
0001C156                            
0001C156                            loc_1A1D4:				; XREF: off_19E80
0001C156 08E8 0000 0022             		bset	#0,$22(a0)
0001C15C 4EB9 0000 E8F6             		jsr	SpeedToPos
0001C162 4A68 0030                  		tst.w	$30(a0)
0001C166 6600                       		bne.s	loc_1A1FC
0001C168 4A28 0020                  		tst.b	$20(a0)
0001C16C 6600                       		bne.s	loc_1A216
0001C16E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001C174 303C 00AC                  		move.w	#$AC,d0
0001C178 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C17E                            
0001C17E                            loc_1A1FC:
0001C17E 5368 0030                  		subq.w	#1,$30(a0)
0001C182 6600                       		bne.s	loc_1A216
0001C184 4A28 0022                  		tst.b	$22(a0)
0001C188 6A00                       		bpl.s	loc_1A210
0001C18A 317C 0060 0012             		move.w	#$60,$12(a0)
0001C190 6000                       		bra.s	loc_1A216
0001C192                            ; ===========================================================================
0001C192                            
0001C192                            loc_1A210:
0001C192 117C 000F 0020             		move.b	#$F,$20(a0)
0001C198                            
0001C198                            loc_1A216:
0001C198 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001C19E 6D00                       		blt.s	loc_1A23A
0001C1A0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001C1A6 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001C1AC 4278 D020                  		clr.w	($FFFFD020).w
0001C1B0 4A68 0012                  		tst.w	$12(a0)
0001C1B4 6A00                       		bpl.s	loc_1A248
0001C1B6 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001C1BC                            
0001C1BC                            loc_1A23A:
0001C1BC 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001C1C2 6D00                       		blt.s	loc_1A248
0001C1C4 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001C1CA                            
0001C1CA                            loc_1A248:
0001C1CA 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001C1D0 6500                       		bcs.s	loc_1A260
0001C1D2 4A28 0001                  		tst.b	1(a0)
0001C1D6 6B00                       		bmi.s	loc_1A260
0001C1D8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001C1DE 6000 FAEE                  		bra.w	Obj85_Delete
0001C1E2                            ; ===========================================================================
0001C1E2                            
0001C1E2                            loc_1A260:
0001C1E2 6000 FEFA                  		bra.w	loc_1A15C
0001C1E6                            ; ===========================================================================
0001C1E6                            
0001C1E6                            loc_1A264:				; XREF: Obj85_Index
0001C1E6 2268 0034                  		movea.l	$34(a0),a1
0001C1EA 1011                       		move.b	(a1),d0
0001C1EC B010                       		cmp.b	(a0),d0
0001C1EE 6600 FADE                  		bne.w	Obj85_Delete
0001C1F2 117C 0007 001C             		move.b	#7,$1C(a0)
0001C1F8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C1FE 6C00                       		bge.s	loc_1A280
0001C200 6000                       		bra.s	loc_1A2A6
0001C202                            ; ===========================================================================
0001C202                            
0001C202                            loc_1A280:
0001C202 4A69 0010                  		tst.w	$10(a1)
0001C206 6700                       		beq.s	loc_1A28C
0001C208 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C20E                            
0001C20E                            loc_1A28C:
0001C20E 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001C212 4EB9 0000 B970             		jsr	AnimateSprite
0001C218                            
0001C218                            loc_1A296:
0001C218 2268 0034                  		movea.l	$34(a0),a1
0001C21C 3169 0008 0008             		move.w	8(a1),8(a0)
0001C222 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C228                            
0001C228                            loc_1A2A6:
0001C228 2268 0034                  		movea.l	$34(a0),a1
0001C22C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C232 7003                       		moveq	#3,d0
0001C234 C028 0022                  		and.b	$22(a0),d0
0001C238 0228 00FC 0001             		andi.b	#-4,1(a0)
0001C23E 8128 0001                  		or.b	d0,1(a0)
0001C242 4EF9 0000 E910             		jmp	DisplaySprite
0001C248                            ; ===========================================================================
0001C248                            
0001C248                            loc_1A2C6:				; XREF: Obj85_Index
0001C248 2268 0034                  		movea.l	$34(a0),a1
0001C24C 1011                       		move.b	(a1),d0
0001C24E B010                       		cmp.b	(a0),d0
0001C250 6600 FA7C                  		bne.w	Obj85_Delete
0001C254 0CA9 0001 9C82 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C25C 6700                       		beq.s	loc_1A2E4
0001C25E 117C 000A 001A             		move.b	#$A,$1A(a0)
0001C264 60C2                       		bra.s	loc_1A2A6
0001C266                            ; ===========================================================================
0001C266                            
0001C266                            loc_1A2E4:
0001C266 117C 0001 001C             		move.b	#1,$1C(a0)
0001C26C 4A29 0021                  		tst.b	$21(a1)
0001C270 6F00                       		ble.s	loc_1A312
0001C272 117C 0006 001C             		move.b	#6,$1C(a0)
0001C278 217C 0001 9C82 0004        		move.l	#Map_Eggman,4(a0)
0001C280 317C 0400 0002             		move.w	#$400,2(a0)
0001C286 43FA D9AA                  		lea	Ani_Eggman(pc),a1
0001C28A 4EB9 0000 B970             		jsr	AnimateSprite
0001C290 6000 FF86                  		bra.w	loc_1A296
0001C294                            ; ===========================================================================
0001C294                            
0001C294                            loc_1A312:
0001C294 4A28 0001                  		tst.b	1(a0)
0001C298 6A00 FA34                  		bpl.w	Obj85_Delete
0001C29C 6100 D536                  		bsr.w	BossDefeated
0001C2A0 117C 0002 0018             		move.b	#2,$18(a0)
0001C2A6 117C 0000 001C             		move.b	#0,$1C(a0)
0001C2AC 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001C2B4 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001C2BA 43FA 0000                  		lea	Ani_obj85(pc),a1
0001C2BE 4EB9 0000 B970             		jsr	AnimateSprite
0001C2C4 6000 FF52                  		bra.w	loc_1A296
0001C2C8                            ; ===========================================================================
0001C2C8                            
0001C2C8                            loc_1A346:				; XREF: Obj85_Index
0001C2C8 08E8 0000 0022             		bset	#0,$22(a0)
0001C2CE 2268 0034                  		movea.l	$34(a0),a1
0001C2D2 0CA9 0001 9C82 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C2DA 6700                       		beq.s	loc_1A35E
0001C2DC 6000 FF4A                  		bra.w	loc_1A2A6
0001C2E0                            ; ===========================================================================
0001C2E0                            
0001C2E0                            loc_1A35E:
0001C2E0 3169 0008 0008             		move.w	8(a1),8(a0)
0001C2E6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C2EC 4A28 001E                  		tst.b	$1E(a0)
0001C2F0 6600                       		bne.s	loc_1A376
0001C2F2 117C 0014 001E             		move.b	#$14,$1E(a0)
0001C2F8                            
0001C2F8                            loc_1A376:
0001C2F8 5328 001E                  		subq.b	#1,$1E(a0)
0001C2FC 6E00                       		bgt.s	loc_1A38A
0001C2FE 5228 001A                  		addq.b	#1,$1A(a0)
0001C302 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001C308 6E00 F9C4                  		bgt.w	Obj85_Delete
0001C30C                            
0001C30C                            loc_1A38A:
0001C30C 6000 FF0A                  		bra.w	loc_1A296
0001C310                            ; ===========================================================================
0001C310                            
0001C310                            loc_1A38E:				; XREF: Obj85_Index
0001C310 117C 000B 001A             		move.b	#$B,$1A(a0)
0001C316 3038 D008                  		move.w	($FFFFD008).w,d0
0001C31A 9068 0008                  		sub.w	8(a0),d0
0001C31E 6500                       		bcs.s	loc_1A3A6
0001C320 4A28 0001                  		tst.b	1(a0)
0001C324 6A00 F9A8                  		bpl.w	Obj85_Delete
0001C328                            
0001C328                            loc_1A3A6:
0001C328 4EF9 0000 E910             		jmp	DisplaySprite
0001C32E                            ; ===========================================================================
0001C32E                            
0001C32E                            loc_1A3AC:				; XREF: Obj85_Index
0001C32E 117C 0000 001A             		move.b	#0,$1A(a0)
0001C334 08E8 0000 0022             		bset	#0,$22(a0)
0001C33A 2268 0034                  		movea.l	$34(a0),a1
0001C33E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001C344 6600                       		bne.s	loc_1A3D0
0001C346 0CA9 0001 9C82 0004        		cmpi.l	#Map_Eggman,4(a1)
0001C34E 6700 F97E                  		beq.w	Obj85_Delete
0001C352                            
0001C352                            loc_1A3D0:
0001C352 6000 FED4                  		bra.w	loc_1A2A6
0001C356                            ; ===========================================================================
0001C356                            Ani_obj85:
0001C356                            	include "_anim\obj85.asm"
0001C356                            ; ---------------------------------------------------------------------------
0001C356                            ; Animation script - Eggman (FZ)
0001C356                            ; ---------------------------------------------------------------------------
0001C356 0000                       		dc.w byte_1A3D6-Ani_obj85
0001C358 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001C35C                            		even
0001C35C                            		even
0001C35C                            
0001C35C                            Map_Eggman2:
0001C35C                            	include "_maps\Eggman2.asm"
0001C35C                            ; ---------------------------------------------------------------------------
0001C35C                            ; Sprite mappings - Eggman (FZ)
0001C35C                            ; ---------------------------------------------------------------------------
0001C35C 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001C35E 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001C360 06                         byte_1A3DE:	dc.b 6
0001C361 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001C366 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001C36B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C370 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C375 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C37A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C37F 06                         byte_1A3FD:	dc.b 6
0001C380 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001C385 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001C38A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001C38F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001C394 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001C399 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001C39E                            		even
0001C39E                            		even
0001C39E                            
0001C39E                            Map_FZBoss:
0001C39E                            	include "_maps\FZ boss.asm"
0001C39E                            ; ---------------------------------------------------------------------------
0001C39E                            ; Sprite mappings - boss (FZ)
0001C39E                            ; ---------------------------------------------------------------------------
0001C39E 0000                       		dc.w byte_1A422-Map_FZBoss
0001C3A0 0000                       		dc.w byte_1A42D-Map_FZBoss
0001C3A2 0000                       		dc.w byte_1A43D-Map_FZBoss
0001C3A4 02                         byte_1A422:	dc.b 2
0001C3A5 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001C3AA 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001C3AF 03                         byte_1A42D:	dc.b 3
0001C3B0 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001C3B5 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001C3BA 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001C3BF 02                         byte_1A43D:	dc.b 2
0001C3C0 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001C3C5 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001C3CA                            		even
0001C3CA                            		even
0001C3CA                            
0001C3CA                            ; ===========================================================================
0001C3CA                            
0001C3CA                            Obj84_Delete:
0001C3CA 4EF9 0000 E960             		jmp	DeleteObject
0001C3D0                            ; ===========================================================================
0001C3D0                            ; ---------------------------------------------------------------------------
0001C3D0                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001C3D0                            ; ---------------------------------------------------------------------------
0001C3D0                            
0001C3D0                            Obj84:					; XREF: Obj_Index
0001C3D0 7000                       		moveq	#0,d0
0001C3D2 1028 0024                  		move.b	$24(a0),d0
0001C3D6 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001C3DA 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001C3DE                            ; ===========================================================================
0001C3DE 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001C3E0 0000                       		dc.w loc_1A4CE-Obj84_Index
0001C3E2 0000                       		dc.w loc_1A57E-Obj84_Index
0001C3E4                            
0001C3E4 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001C3E8 2550 0620                  		dc.w $2550, $620
0001C3EC 2490 04C0                  		dc.w $2490, $4C0
0001C3F0 2510 04C0                  		dc.w $2510, $4C0
0001C3F4                            ; ===========================================================================
0001C3F4                            
0001C3F4                            Obj84_Main:				; XREF: Obj84_Index
0001C3F4 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001C3F8 7000                       		moveq	#0,d0
0001C3FA 1028 0028                  		move.b	$28(a0),d0
0001C3FE D040                       		add.w	d0,d0
0001C400 D2C0                       		adda.w	d0,a1
0001C402 117C 0004 0001             		move.b	#4,1(a0)
0001C408 08E8 0007 0001             		bset	#7,1(a0)
0001C40E 08E8 0004 0001             		bset	#4,1(a0)
0001C414 317C 0300 0002             		move.w	#$300,2(a0)
0001C41A 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001C422 3159 0008                  		move.w	(a1)+,8(a0)
0001C426 3151 000C                  		move.w	(a1),$C(a0)
0001C42A 3159 0038                  		move.w	(a1)+,$38(a0)
0001C42E 117C 0020 0016             		move.b	#$20,$16(a0)
0001C434 117C 0060 0017             		move.b	#$60,$17(a0)
0001C43A 117C 0020 0019             		move.b	#$20,$19(a0)
0001C440 117C 0060 0016             		move.b	#$60,$16(a0)
0001C446 117C 0003 0018             		move.b	#3,$18(a0)
0001C44C 5428 0024                  		addq.b	#2,$24(a0)
0001C450                            
0001C450                            loc_1A4CE:				; XREF: Obj84_Index
0001C450 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C456 6F00                       		ble.s	loc_1A4DC
0001C458 08E8 0001 0001             		bset	#1,1(a0)
0001C45E                            
0001C45E                            loc_1A4DC:
0001C45E 42A8 003C                  		clr.l	$3C(a0)
0001C462 4A28 0029                  		tst.b	$29(a0)
0001C466 6700                       		beq.s	loc_1A4EA
0001C468 5428 0024                  		addq.b	#2,$24(a0)
0001C46C                            
0001C46C                            loc_1A4EA:
0001C46C 2028 003C                  		move.l	$3C(a0),d0
0001C470 2228 0038                  		move.l	$38(a0),d1
0001C474 D280                       		add.l	d0,d1
0001C476 4841                       		swap	d1
0001C478 3141 000C                  		move.w	d1,$C(a0)
0001C47C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001C482 6600                       		bne.s	loc_1A524
0001C484 4A68 0030                  		tst.w	$30(a0)
0001C488 6A00                       		bpl.s	loc_1A524
0001C48A 70F6                       		moveq	#-$A,d0
0001C48C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001C492 6F00                       		ble.s	loc_1A514
0001C494 700E                       		moveq	#$E,d0
0001C496                            
0001C496                            loc_1A514:
0001C496 D240                       		add.w	d0,d1
0001C498 2268 0034                  		movea.l	$34(a0),a1
0001C49C 3341 000C                  		move.w	d1,$C(a1)
0001C4A0 3368 0008 0008             		move.w	8(a0),8(a1)
0001C4A6                            
0001C4A6                            loc_1A524:
0001C4A6 323C 002B                  		move.w	#$2B,d1
0001C4AA 343C 0060                  		move.w	#$60,d2
0001C4AE 363C 0061                  		move.w	#$61,d3
0001C4B2 3828 0008                  		move.w	8(a0),d4
0001C4B6 4EB9 0001 127E             		jsr	SolidObject
0001C4BC 7000                       		moveq	#0,d0
0001C4BE 3228 003C                  		move.w	$3C(a0),d1
0001C4C2 6A00                       		bpl.s	loc_1A550
0001C4C4 4441                       		neg.w	d1
0001C4C6 5141                       		subq.w	#8,d1
0001C4C8 6500                       		bcs.s	loc_1A55C
0001C4CA 5200                       		addq.b	#1,d0
0001C4CC E841                       		asr.w	#4,d1
0001C4CE D041                       		add.w	d1,d0
0001C4D0 6000                       		bra.s	loc_1A55C
0001C4D2                            ; ===========================================================================
0001C4D2                            
0001C4D2                            loc_1A550:
0001C4D2 0441 0027                  		subi.w	#$27,d1
0001C4D6 6500                       		bcs.s	loc_1A55C
0001C4D8 5200                       		addq.b	#1,d0
0001C4DA E841                       		asr.w	#4,d1
0001C4DC D041                       		add.w	d1,d0
0001C4DE                            
0001C4DE                            loc_1A55C:
0001C4DE 1140 001A                  		move.b	d0,$1A(a0)
0001C4E2 3038 D008                  		move.w	($FFFFD008).w,d0
0001C4E6 9068 0008                  		sub.w	8(a0),d0
0001C4EA 6B00                       		bmi.s	loc_1A578
0001C4EC 0440 0140                  		subi.w	#$140,d0
0001C4F0 6B00                       		bmi.s	loc_1A578
0001C4F2 4A28 0001                  		tst.b	1(a0)
0001C4F6 6A00 FED2                  		bpl.w	Obj84_Delete
0001C4FA                            
0001C4FA                            loc_1A578:
0001C4FA 4EF9 0000 E910             		jmp	DisplaySprite
0001C500                            ; ===========================================================================
0001C500                            
0001C500                            loc_1A57E:				; XREF: Obj84_Index
0001C500 7000                       		moveq	#0,d0
0001C502 1028 0028                  		move.b	$28(a0),d0
0001C506 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001C50A 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001C50E 6000 FF5C                  		bra.w	loc_1A4EA
0001C512                            ; ===========================================================================
0001C512 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001C514 0000                       		dc.w loc_1A598-off_1A590
0001C516 0000                       		dc.w loc_1A604-off_1A590
0001C518 0000                       		dc.w loc_1A604-off_1A590
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            loc_1A598:				; XREF: off_1A590
0001C51A 4A28 0029                  		tst.b	$29(a0)
0001C51E 6600                       		bne.s	loc_1A5D4
0001C520 2268 0034                  		movea.l	$34(a0),a1
0001C524 4A29 0021                  		tst.b	$21(a1)
0001C528 6600                       		bne.s	loc_1A5B4
0001C52A 6100 D2A8                  		bsr.w	BossDefeated
0001C52E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001C536                            
0001C536                            loc_1A5B4:
0001C536 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001C53E 6400                       		bcc.s	locret_1A602
0001C540 42A8 003C                  		clr.l	$3C(a0)
0001C544 2268 0034                  		movea.l	$34(a0),a1
0001C548 5369 0032                  		subq.w	#1,$32(a1)
0001C54C 4269 0030                  		clr.w	$30(a1)
0001C550 5528 0024                  		subq.b	#2,$24(a0)
0001C554 4E75                       		rts	
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            loc_1A5D4:
0001C556 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001C55C 6C00                       		bge.s	loc_1A5E4
0001C55E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001C566                            
0001C566                            loc_1A5E4:
0001C566 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001C56E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001C574 6E00                       		bgt.s	locret_1A602
0001C576 4268 003E                  		clr.w	$3E(a0)
0001C57A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001C580 4228 0029                  		clr.b	$29(a0)
0001C584                            
0001C584                            locret_1A602:
0001C584 4E75                       		rts	
0001C586                            ; ===========================================================================
0001C586                            
0001C586                            loc_1A604:				; XREF: off_1A590
0001C586 08E8 0001 0001             		bset	#1,1(a0)
0001C58C 4A28 0029                  		tst.b	$29(a0)
0001C590 6600                       		bne.s	loc_1A646
0001C592 2268 0034                  		movea.l	$34(a0),a1
0001C596 4A29 0021                  		tst.b	$21(a1)
0001C59A 6600                       		bne.s	loc_1A626
0001C59C 6100 D236                  		bsr.w	BossDefeated
0001C5A0 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001C5A8                            
0001C5A8                            loc_1A626:
0001C5A8 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001C5B0 6400                       		bcc.s	locret_1A674
0001C5B2 42A8 003C                  		clr.l	$3C(a0)
0001C5B6 2268 0034                  		movea.l	$34(a0),a1
0001C5BA 5369 0032                  		subq.w	#1,$32(a1)
0001C5BE 4269 0030                  		clr.w	$30(a1)
0001C5C2 5528 0024                  		subq.b	#2,$24(a0)
0001C5C6 4E75                       		rts	
0001C5C8                            ; ===========================================================================
0001C5C8                            
0001C5C8                            loc_1A646:
0001C5C8 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C5CE 6D00                       		blt.s	loc_1A656
0001C5D0 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C5D8                            
0001C5D8                            loc_1A656:
0001C5D8 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C5E0 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C5E6 6D00                       		blt.s	locret_1A674
0001C5E8 4268 003E                  		clr.w	$3E(a0)
0001C5EC 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C5F2 4228 0029                  		clr.b	$29(a0)
0001C5F6                            
0001C5F6                            locret_1A674:
0001C5F6 4E75                       		rts	
0001C5F8                            ; ===========================================================================
0001C5F8                            ; ---------------------------------------------------------------------------
0001C5F8                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C5F8                            ; ---------------------------------------------------------------------------
0001C5F8                            Map_obj84:
0001C5F8                            	include "_maps\obj84.asm"
0001C5F8                            ; ---------------------------------------------------------------------------
0001C5F8                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C5F8                            ; ---------------------------------------------------------------------------
0001C5F8 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C5FC 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C600 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C604 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C608 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C60C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C610 06                         byte_1A68E:	dc.b 6
0001C611 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C616 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C61B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C620 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C625 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C62A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C62F 08                         byte_1A6AD:	dc.b 8
0001C630 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C635 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C63A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C63F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C644 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C649 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C64E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C653 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C658 0A                         byte_1A6D6:	dc.b $A
0001C659 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C65E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C663 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C668 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C66D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C672 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C677 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C67C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C681 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C686 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C68B 0C                         byte_1A709:	dc.b $C
0001C68C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C691 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C696 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C69B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6A0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C6A5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C6AA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C6AF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C6B4 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C6B9 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C6BE 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C6C3 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C6C8 0D                         byte_1A746:	dc.b $D
0001C6C9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C6CE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C6D3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C6D8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C6DD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C6E2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C6E7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C6EC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C6F1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C6F6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C6FB 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C700 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C705 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C70A 0E                         byte_1A788:	dc.b $E
0001C70B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C710 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C715 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C71A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C71F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C724 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C729 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C72E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C733 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C738 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C73D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C742 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C747 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C74C 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C751 02                         byte_1A7CF:	dc.b 2
0001C752 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C757 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C75C                            		even
0001C75C                            		even
0001C75C                            
0001C75C                            ; ===========================================================================
0001C75C                            ; ---------------------------------------------------------------------------
0001C75C                            ; Object 86 - energy balls (FZ)
0001C75C                            ; ---------------------------------------------------------------------------
0001C75C                            
0001C75C                            Obj86:					; XREF: Obj_Index
0001C75C 7000                       		moveq	#0,d0
0001C75E 1028 0024                  		move.b	$24(a0),d0
0001C762 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C766 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C76A                            ; ===========================================================================
0001C76A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C76C 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C76E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C770 0000                       		dc.w loc_1A962-Obj86_Index
0001C772 0000                       		dc.w loc_1A982-Obj86_Index
0001C774                            ; ===========================================================================
0001C774                            
0001C774                            Obj86_Main:				; XREF: Obj86_Index
0001C774 317C 2588 0008             		move.w	#$2588,8(a0)
0001C77A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C780 317C 0300 0002             		move.w	#$300,2(a0)
0001C786 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C78E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C794 117C 0003 0018             		move.b	#3,$18(a0)
0001C79A 117C 0008 0017             		move.b	#8,$17(a0)
0001C7A0 117C 0008 0016             		move.b	#8,$16(a0)
0001C7A6 117C 0004 0001             		move.b	#4,1(a0)
0001C7AC 08E8 0007 0001             		bset	#7,1(a0)
0001C7B2 5428 0024                  		addq.b	#2,$24(a0)
0001C7B6                            
0001C7B6                            Obj86_Generator:			; XREF: Obj86_Index
0001C7B6 2268 0034                  		movea.l	$34(a0),a1
0001C7BA 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C7C0 6600                       		bne.s	loc_1A850
0001C7C2 10BC 003F                  		move.b	#$3F,(a0)
0001C7C6 117C 0000 0024             		move.b	#0,$24(a0)
0001C7CC 4EF9 0000 E910             		jmp	DisplaySprite
0001C7D2                            ; ===========================================================================
0001C7D2                            
0001C7D2                            loc_1A850:
0001C7D2 117C 0000 001C             		move.b	#0,$1C(a0)
0001C7D8 4A28 0029                  		tst.b	$29(a0)
0001C7DC 6700                       		beq.s	loc_1A86C
0001C7DE 5428 0024                  		addq.b	#2,$24(a0)
0001C7E2 117C 0001 001C             		move.b	#1,$1C(a0)
0001C7E8 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C7EE                            
0001C7EE                            loc_1A86C:
0001C7EE 323C 0013                  		move.w	#$13,d1
0001C7F2 343C 0008                  		move.w	#8,d2
0001C7F6 363C 0011                  		move.w	#$11,d3
0001C7FA 3828 0008                  		move.w	8(a0),d4
0001C7FE 4EB9 0001 127E             		jsr	SolidObject
0001C804 3038 D008                  		move.w	($FFFFD008).w,d0
0001C808 9068 0008                  		sub.w	8(a0),d0
0001C80C 6B00                       		bmi.s	loc_1A89A
0001C80E 0440 0140                  		subi.w	#$140,d0
0001C812 6B00                       		bmi.s	loc_1A89A
0001C814 4A28 0001                  		tst.b	1(a0)
0001C818 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C81C                            
0001C81C                            loc_1A89A:
0001C81C 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C820 4EB9 0000 B970             		jsr	AnimateSprite
0001C826 4EF9 0000 E910             		jmp	DisplaySprite
0001C82C                            ; ===========================================================================
0001C82C                            
0001C82C                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C82C 4A28 0029                  		tst.b	$29(a0)
0001C830 6700 0000                  		beq.w	loc_1A954
0001C834 4228 0029                  		clr.b	$29(a0)
0001C838 D068 0030                  		add.w	$30(a0),d0
0001C83C 0240 001E                  		andi.w	#$1E,d0
0001C840 D4C0                       		adda.w	d0,a2
0001C842 5868 0030                  		addq.w	#4,$30(a0)
0001C846 4268 0032                  		clr.w	$32(a0)
0001C84A 7403                       		moveq	#3,d2
0001C84C                            
0001C84C                            Obj86_Loop:
0001C84C 4EB9 0000 F07C             		jsr	SingleObjLoad2
0001C852 6600 0000                  		bne.w	loc_1A954
0001C856 12BC 0086                  		move.b	#$86,(a1)
0001C85A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C860 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C866 137C 0008 0024             		move.b	#8,$24(a1)
0001C86C 337C 2300 0002             		move.w	#$2300,2(a1)
0001C872 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C87A 137C 000C 0016             		move.b	#$C,$16(a1)
0001C880 137C 000C 0017             		move.b	#$C,$17(a1)
0001C886 137C 0000 0020             		move.b	#0,$20(a1)
0001C88C 137C 0003 0018             		move.b	#3,$18(a1)
0001C892 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C898 137C 0004 0001             		move.b	#4,1(a1)
0001C89E 08E9 0007 0001             		bset	#7,1(a1)
0001C8A4 2348 0034                  		move.l	a0,$34(a1)
0001C8A8 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001C8AE 3228 0032                  		move.w	$32(a0),d1
0001C8B2 C3FC FFB1                  		muls.w	#-$4F,d1
0001C8B6 0641 2578                  		addi.w	#$2578,d1
0001C8BA 0240 001F                  		andi.w	#$1F,d0
0001C8BE 0440 0010                  		subi.w	#$10,d0
0001C8C2 D041                       		add.w	d1,d0
0001C8C4 3340 0030                  		move.w	d0,$30(a1)
0001C8C8 5268 0032                  		addq.w	#1,$32(a0)
0001C8CC 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C8D2 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C8D6                            
0001C8D6                            loc_1A954:
0001C8D6 4A68 0032                  		tst.w	$32(a0)
0001C8DA 6600                       		bne.s	loc_1A95E
0001C8DC 5428 0024                  		addq.b	#2,$24(a0)
0001C8E0                            
0001C8E0                            loc_1A95E:
0001C8E0 6000 FF0C                  		bra.w	loc_1A86C
0001C8E4                            ; ===========================================================================
0001C8E4                            
0001C8E4                            loc_1A962:				; XREF: Obj86_Index
0001C8E4 117C 0002 001C             		move.b	#2,$1C(a0)
0001C8EA 4A68 0038                  		tst.w	$38(a0)
0001C8EE 6600                       		bne.s	loc_1A97E
0001C8F0 117C 0002 0024             		move.b	#2,$24(a0)
0001C8F6 2268 0034                  		movea.l	$34(a0),a1
0001C8FA 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C900                            
0001C900                            loc_1A97E:
0001C900 6000 FEEC                  		bra.w	loc_1A86C
0001C904                            ; ===========================================================================
0001C904                            
0001C904                            loc_1A982:				; XREF: Obj86_Index
0001C904 7000                       		moveq	#0,d0
0001C906 1028 0025                  		move.b	$25(a0),d0
0001C90A 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C90E 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C912 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C916 4EB9 0000 B970             		jsr	AnimateSprite
0001C91C 4EF9 0000 E910             		jmp	DisplaySprite
0001C922                            ; ===========================================================================
0001C922 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C924 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C926 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C928                            ; ===========================================================================
0001C928                            
0001C928                            loc_1A9A6:				; XREF: Obj86_Index2
0001C928 3028 0030                  		move.w	$30(a0),d0
0001C92C 9068 0008                  		sub.w	8(a0),d0
0001C930 E940                       		asl.w	#4,d0
0001C932 3140 0010                  		move.w	d0,$10(a0)
0001C936 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C93C 5428 0025                  		addq.b	#2,$25(a0)
0001C940 4E75                       		rts	
0001C942                            ; ===========================================================================
0001C942                            
0001C942                            loc_1A9C0:				; XREF: Obj86_Index2
0001C942 4A68 0010                  		tst.w	$10(a0)
0001C946 6700                       		beq.s	loc_1A9E6
0001C948 4EB9 0000 E8F6             		jsr	SpeedToPos
0001C94E 3028 0008                  		move.w	8(a0),d0
0001C952 9068 0030                  		sub.w	$30(a0),d0
0001C956 6400                       		bcc.s	loc_1A9E6
0001C958 4268 0010                  		clr.w	$10(a0)
0001C95C D168 0008                  		add.w	d0,8(a0)
0001C960 2268 0034                  		movea.l	$34(a0),a1
0001C964 5369 0032                  		subq.w	#1,$32(a1)
0001C968                            
0001C968                            loc_1A9E6:
0001C968 117C 0000 001C             		move.b	#0,$1C(a0)
0001C96E 5368 0028                  		subq.w	#1,$28(a0)
0001C972 6600                       		bne.s	locret_1AA1C
0001C974 5428 0025                  		addq.b	#2,$25(a0)
0001C978 117C 0001 001C             		move.b	#1,$1C(a0)
0001C97E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C984 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C98A 7000                       		moveq	#0,d0
0001C98C 3038 D008                  		move.w	($FFFFD008).w,d0
0001C990 9068 0008                  		sub.w	8(a0),d0
0001C994 3140 0010                  		move.w	d0,$10(a0)
0001C998 317C 0140 0012             		move.w	#$140,$12(a0)
0001C99E                            
0001C99E                            locret_1AA1C:
0001C99E 4E75                       		rts	
0001C9A0                            ; ===========================================================================
0001C9A0                            
0001C9A0                            loc_1AA1E:				; XREF: Obj86_Index2
0001C9A0 4EB9 0000 E8F6             		jsr	SpeedToPos
0001C9A6 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C9AC 6400                       		bcc.s	loc_1AA34
0001C9AE 5368 0028                  		subq.w	#1,$28(a0)
0001C9B2 6700                       		beq.s	loc_1AA34
0001C9B4 4E75                       		rts	
0001C9B6                            ; ===========================================================================
0001C9B6                            
0001C9B6                            loc_1AA34:
0001C9B6 2268 0034                  		movea.l	$34(a0),a1
0001C9BA 5369 0038                  		subq.w	#1,$38(a1)
0001C9BE 6000 FA0A                  		bra.w	Obj84_Delete
0001C9C2                            ; ===========================================================================
0001C9C2                            Ani_obj86:
0001C9C2                            	include "_anim\obj86.asm"
0001C9C2                            ; ---------------------------------------------------------------------------
0001C9C2                            ; Animation script - energy ball launcher (FZ)
0001C9C2                            ; ---------------------------------------------------------------------------
0001C9C2 0000                       		dc.w byte_1AA46-Ani_obj86
0001C9C4 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C9C6 0000                       		dc.w byte_1AA50-Ani_obj86
0001C9C8 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C9CC 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C9D2 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C9D8                            		even
0001C9D8                            		even
0001C9D8                            
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            ; Sprite mappings - energy ball	launcher (FZ)
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            Map_obj86:
0001C9D8                            	include "_maps\obj86.asm"
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            ; Sprite mappings - energy ball	launcher (FZ)
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C9DC 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C9E0 01                         byte_1AA5E:	dc.b 1
0001C9E1 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C9E6 01                         byte_1AA64:	dc.b 1
0001C9E7 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C9EC 01                         byte_1AA6A:	dc.b 1
0001C9ED F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C9F2 01                         byte_1AA70:	dc.b 1
0001C9F3 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C9F8                            		even
0001C9F8                            		even
0001C9F8                            
0001C9F8                            Ani_obj86a:
0001C9F8                            	include "_anim\obj86a.asm"
0001C9F8                            ; ---------------------------------------------------------------------------
0001C9F8                            ; Animation script - energy balls (FZ)
0001C9F8                            ; ---------------------------------------------------------------------------
0001C9F8 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C9FA 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C9FC 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001CA0B 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001CA1A 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001CA1E 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001CA28                            		even
0001CA28                            		even
0001CA28                            
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            ; Sprite mappings - energy balls (FZ)
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            Map_obj86a:
0001CA28                            	include "_maps\obj86a.asm"
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28                            ; Sprite mappings - energy balls (FZ)
0001CA28                            ; ---------------------------------------------------------------------------
0001CA28 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001CA2C 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001CA30 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001CA34 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001CA38 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001CA3C 0000                       		dc.w byte_1AB20-Map_obj86a
0001CA3E 02                         byte_1AABC:	dc.b 2
0001CA3F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001CA44 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001CA49 02                         byte_1AAC7:	dc.b 2
0001CA4A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001CA4F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001CA54 02                         byte_1AAD2:	dc.b 2
0001CA55 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001CA5A 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001CA5F 02                         byte_1AADD:	dc.b 2
0001CA60 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001CA65 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001CA6A 02                         byte_1AAE8:	dc.b 2
0001CA6B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001CA70 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001CA75 02                         byte_1AAF3:	dc.b 2
0001CA76 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001CA7B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001CA80 01                         byte_1AAFE:	dc.b 1
0001CA81 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001CA86 01                         byte_1AB04:	dc.b 1
0001CA87 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001CA8C 02                         byte_1AB0A:	dc.b 2
0001CA8D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001CA92 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001CA97 02                         byte_1AB15:	dc.b 2
0001CA98 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001CA9D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001CAA2 00                         byte_1AB20:	dc.b 0
0001CAA4 00                         		even
0001CAA4 00                         		even
0001CAA4                            
0001CAA4                            ; ===========================================================================
0001CAA4                            ; ---------------------------------------------------------------------------
0001CAA4                            ; Object 3E - prison capsule
0001CAA4                            ; ---------------------------------------------------------------------------
0001CAA4                            
0001CAA4                            Obj3E:					; XREF: Obj_Index
0001CAA4 7000                       		moveq	#0,d0
0001CAA6 1028 0024                  		move.b	$24(a0),d0
0001CAAA 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001CAAE 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001CAB2 3028 0008                  		move.w	8(a0),d0
0001CAB6 0240 FF80                  		andi.w	#$FF80,d0
0001CABA 3238 F700                  		move.w	($FFFFF700).w,d1
0001CABE 0441 0080                  		subi.w	#$80,d1
0001CAC2 0241 FF80                  		andi.w	#$FF80,d1
0001CAC6 9041                       		sub.w	d1,d0
0001CAC8 0C40 0280                  		cmpi.w	#$280,d0
0001CACC 6300                       		bls.s	Obj3E_NoDel
0001CACE 3028 0014                  		move.w	respawn_index(a0),d0	; get address in respawn table
0001CAD2 6700                       		beq.s	Obj3E_Delete		; if it's zero, don't remember object
0001CAD4 3440                       		movea.w	d0,a2	; load address into a2
0001CAD6 0892 0007                  		bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again
0001CADA 6000                       		bra.s	Obj3E_Delete	; and delete object
0001CADC                            
0001CADC                            Obj3E_NoDel:
0001CADC 4EF9 0000 E910             		jmp	DisplaySprite
0001CAE2                            ; ===========================================================================
0001CAE2                            
0001CAE2                            Obj3E_Delete:
0001CAE2 4EF9 0000 E960             		jmp	DeleteObject
0001CAE8                            ; ===========================================================================
0001CAE8 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001CAEA 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001CAEC 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001CAEE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CAF0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CAF2 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001CAF4 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001CAF6 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001CAF8                            
0001CAF8 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001CAFC 040C 0501                  		dc.b 4,	$C, 5, 1
0001CB00 0610 0403                  		dc.b 6,	$10, 4,	3
0001CB04 0810 0305                  		dc.b 8,	$10, 3,	5
0001CB08                            ; ===========================================================================
0001CB08                            
0001CB08                            Obj3E_Main:				; XREF: Obj3E_Index
0001CB08 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001CB10 317C 049D 0002             		move.w	#$49D,2(a0)
0001CB16 117C 0004 0001             		move.b	#4,1(a0)
0001CB1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001CB22 7000                       		moveq	#0,d0
0001CB24 1028 0028                  		move.b	$28(a0),d0
0001CB28 E548                       		lsl.w	#2,d0
0001CB2A 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001CB2E 1159 0024                  		move.b	(a1)+,$24(a0)
0001CB32 1159 0019                  		move.b	(a1)+,$19(a0)
0001CB36 1159 0018                  		move.b	(a1)+,$18(a0)
0001CB3A 1159 001A                  		move.b	(a1)+,$1A(a0)
0001CB3E 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001CB42 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001CB44 117C 0006 0020             		move.b	#6,$20(a0)
0001CB4A 117C 0008 0021             		move.b	#8,$21(a0)
0001CB50                            
0001CB50                            Obj3E_Not02:
0001CB50 4E75                       		rts	
0001CB52                            ; ===========================================================================
0001CB52                            
0001CB52                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001CB52 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001CB58 6700                       		beq.s	Obj3E_ChkOpened
0001CB5A 323C 002B                  		move.w	#$2B,d1
0001CB5E 343C 0018                  		move.w	#$18,d2
0001CB62 363C 0018                  		move.w	#$18,d3
0001CB66 3828 0008                  		move.w	8(a0),d4
0001CB6A 4EF9 0001 127E             		jmp	SolidObject
0001CB70                            ; ===========================================================================
0001CB70                            
0001CB70                            Obj3E_ChkOpened:
0001CB70 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001CB74 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001CB76 4228 0025                  		clr.b	$25(a0)
0001CB7A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CB80 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CB86                            
0001CB86                            Obj3E_DoOpen:
0001CB86 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001CB8C 4E75                       		rts	
0001CB8E                            ; ===========================================================================
0001CB8E                            
0001CB8E                            Obj3E_Switched:				; XREF: Obj3E_Index
0001CB8E 323C 0017                  		move.w	#$17,d1
0001CB92 343C 0008                  		move.w	#8,d2
0001CB96 363C 0008                  		move.w	#8,d3
0001CB9A 3828 0008                  		move.w	8(a0),d4
0001CB9E 4EB9 0001 127E             		jsr	SolidObject
0001CBA4 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001CBAA 4EB9 0000 B970             		jsr	AnimateSprite
0001CBB0 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001CBB6 4A28 0025                  		tst.b	$25(a0)
0001CBBA 6700                       		beq.s	locret_1AC60
0001CBBC 5068 000C                  		addq.w	#8,$C(a0)
0001CBC0 117C 000A 0024             		move.b	#$A,$24(a0)
0001CBC6 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001CBCC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001CBD0 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001CBD4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001CBDA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001CBE0 4228 0025                  		clr.b	$25(a0)
0001CBE4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001CBEA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001CBF0                            
0001CBF0                            locret_1AC60:
0001CBF0 4E75                       		rts	
0001CBF2                            ; ===========================================================================
0001CBF2                            
0001CBF2                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001CBF2 7007                       		moveq	#7,d0
0001CBF4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CBF8 6600                       		bne.s	loc_1ACA0
0001CBFA 4EB9 0000 F066             		jsr	SingleObjLoad
0001CC00 6600                       		bne.s	loc_1ACA0
0001CC02 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001CC06 3368 0008 0008             		move.w	8(a0),8(a1)
0001CC0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CC12 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CC18 7200                       		moveq	#0,d1
0001CC1A 1200                       		move.b	d0,d1
0001CC1C E409                       		lsr.b	#2,d1
0001CC1E 0441 0020                  		subi.w	#$20,d1
0001CC22 D369 0008                  		add.w	d1,8(a1)
0001CC26 E048                       		lsr.w	#8,d0
0001CC28 E608                       		lsr.b	#3,d0
0001CC2A D169 000C                  		add.w	d0,$C(a1)
0001CC2E                            
0001CC2E                            loc_1ACA0:
0001CC2E 5368 001E                  		subq.w	#1,$1E(a0)
0001CC32 6700                       		beq.s	Obj3E_MakeAnimal
0001CC34 4E75                       		rts	
0001CC36                            ; ===========================================================================
0001CC36                            
0001CC36                            Obj3E_MakeAnimal:
0001CC36 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001CC3C 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001CC42 117C 0006 001A             		move.b	#6,$1A(a0)
0001CC48 317C 0096 001E             		move.w	#$96,$1E(a0)
0001CC4E 0668 0020 000C             		addi.w	#$20,$C(a0)
0001CC54 7C07                       		moveq	#7,d6
0001CC56 3A3C 009A                  		move.w	#$9A,d5
0001CC5A 78E4                       		moveq	#-$1C,d4
0001CC5C                            
0001CC5C                            Obj3E_Loop:
0001CC5C 4EB9 0000 F066             		jsr	SingleObjLoad
0001CC62 6600                       		bne.s	locret_1ACF8
0001CC64 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CC68 3368 0008 0008             		move.w	8(a0),8(a1)
0001CC6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CC74 D969 0008                  		add.w	d4,8(a1)
0001CC78 5E44                       		addq.w	#7,d4
0001CC7A 3345 0036                  		move.w	d5,$36(a1)
0001CC7E 5145                       		subq.w	#8,d5
0001CC80 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001CC84                            
0001CC84                            locret_1ACF8:
0001CC84 4E75                       		rts	
0001CC86                            ; ===========================================================================
0001CC86                            
0001CC86                            Obj3E_Animals:				; XREF: Obj3E_Index
0001CC86 7007                       		moveq	#7,d0
0001CC88 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001CC8C 6600                       		bne.s	loc_1AD38
0001CC8E 4EB9 0000 F066             		jsr	SingleObjLoad
0001CC94 6600                       		bne.s	loc_1AD38
0001CC96 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001CC9A 3368 0008 0008             		move.w	8(a0),8(a1)
0001CCA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CCA6 4EB9 0000 29A6             		jsr	(RandomNumber).l
0001CCAC 0240 001F                  		andi.w	#$1F,d0
0001CCB0 5D40                       		subq.w	#6,d0
0001CCB2 4A41                       		tst.w	d1
0001CCB4 6A00                       		bpl.s	loc_1AD2E
0001CCB6 4440                       		neg.w	d0
0001CCB8                            
0001CCB8                            loc_1AD2E:
0001CCB8 D169 0008                  		add.w	d0,8(a1)
0001CCBC 337C 000C 0036             		move.w	#$C,$36(a1)
0001CCC2                            
0001CCC2                            loc_1AD38:
0001CCC2 5368 001E                  		subq.w	#1,$1E(a0)
0001CCC6 6600                       		bne.s	locret_1AD48
0001CCC8 5428 0024                  		addq.b	#2,$24(a0)
0001CCCC 317C 00B4 001E             		move.w	#180,$1E(a0)
0001CCD2                            
0001CCD2                            locret_1AD48:
0001CCD2 4E75                       		rts	
0001CCD4                            ; ===========================================================================
0001CCD4                            
0001CCD4                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001CCD4 703E                       		moveq	#$3E,d0
0001CCD6 7228                       		moveq	#$28,d1
0001CCD8 7440                       		moveq	#$40,d2
0001CCDA 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001CCDE                            
0001CCDE                            Obj3E_FindObj28:
0001CCDE B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001CCE0 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001CCE2 D2C2                       		adda.w	d2,a1		; next object RAM
0001CCE4 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001CCE8                            
0001CCE8 4EB9 0001 051C             		jsr	GotThroughAct
0001CCEE 4EF9 0000 E960             		jmp	DeleteObject
0001CCF4                            ; ===========================================================================
0001CCF4                            
0001CCF4                            Obj3E_Obj28Found:
0001CCF4 4E75                       		rts	
0001CCF6                            ; ===========================================================================
0001CCF6                            Ani_obj3E:
0001CCF6                            	include "_anim\obj3E.asm"
0001CCF6                            ; ---------------------------------------------------------------------------
0001CCF6                            ; Animation script - prison capsule
0001CCF6                            ; ---------------------------------------------------------------------------
0001CCF6 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CCF8 0000                       		dc.w byte_1AD70-Ani_obj3E
0001CCFA 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001CCFE                            		even
0001CCFE                            		even
0001CCFE                            
0001CCFE                            ; ---------------------------------------------------------------------------
0001CCFE                            ; Sprite mappings - prison capsule
0001CCFE                            ; ---------------------------------------------------------------------------
0001CCFE                            Map_obj3E:
0001CCFE                            	include "_maps\obj3E.asm"
0001CCFE                            ; ---------------------------------------------------------------------------
0001CCFE                            ; Sprite mappings - prison capsule
0001CCFE                            ; ---------------------------------------------------------------------------
0001CCFE 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001CD02 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001CD06 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001CD0A 0000                       		dc.w byte_1ADE2-Map_obj3E
0001CD0C 07                         byte_1AD82:	dc.b 7
0001CD0D E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001CD12 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001CD17 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001CD1C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001CD21 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001CD26 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CD2B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CD30 01                         byte_1ADA6:	dc.b 1
0001CD31 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001CD36 06                         byte_1ADAC:	dc.b 6
0001CD37 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001CD3C 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001CD41 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001CD46 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001CD4B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001CD50 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001CD55 01                         byte_1ADCB:	dc.b 1
0001CD56 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001CD5B 02                         byte_1ADD1:	dc.b 2
0001CD5C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001CD61 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001CD66 01                         byte_1ADDC:	dc.b 1
0001CD67 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001CD6C 00                         byte_1ADE2:	dc.b 0
0001CD6E 00                         		even
0001CD6E 00                         		even
0001CD6E                            
0001CD6E                            ; ---------------------------------------------------------------------------
0001CD6E                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001CD6E                            ; ---------------------------------------------------------------------------
0001CD6E                            
0001CD6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD6E                            
0001CD6E                            
0001CD6E                            TouchResponse:				; XREF: Obj01
0001CD6E 4E71                       		nop	
0001CD70 4EB9 0000 F16E             		jsr	(Touch_Rings).l
0001CD76 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001CD7A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001CD7E 5142                       		subq.w	#8,d2
0001CD80 7A00                       		moveq	#0,d5
0001CD82 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001CD86 5705                       		subq.b	#3,d5
0001CD88 9645                       		sub.w	d5,d3
0001CD8A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001CD90 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001CD92 0643 000C                  		addi.w	#$C,d3
0001CD96 7A0A                       		moveq	#$A,d5
0001CD98                            
0001CD98                            Touch_NoDuck:
0001CD98 383C 0010                  		move.w	#$10,d4
0001CD9C DA45                       		add.w	d5,d5
0001CD9E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001CDA2 3C3C 005F                  		move.w	#$5F,d6
0001CDA6                            
0001CDA6                            Touch_Loop:
0001CDA6 4A29 0001                  		tst.b	1(a1)
0001CDAA 6A00                       		bpl.s	Touch_NextObj
0001CDAC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001CDB0 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001CDB2                            
0001CDB2                            Touch_NextObj:
0001CDB2 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001CDB6 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001CDBA                            
0001CDBA 7000                       		moveq	#0,d0
0001CDBC 4E75                       		rts	
0001CDBE                            ; ===========================================================================
0001CDBE 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001CDC0 0C14                       		dc.b   $C, $14
0001CDC2 140C                       		dc.b  $14,  $C
0001CDC4 0410                       		dc.b	4, $10
0001CDC6 0C12                       		dc.b   $C, $12
0001CDC8 1010                       		dc.b  $10, $10
0001CDCA 0606                       		dc.b	6,   6
0001CDCC 180C                       		dc.b  $18,  $C
0001CDCE 0C10                       		dc.b   $C, $10
0001CDD0 100C                       		dc.b  $10,  $C
0001CDD2 0808                       		dc.b	8,   8
0001CDD4 1410                       		dc.b  $14, $10
0001CDD6 1408                       		dc.b  $14,   8
0001CDD8 0E0E                       		dc.b   $E,  $E
0001CDDA 1818                       		dc.b  $18, $18
0001CDDC 2810                       		dc.b  $28, $10
0001CDDE 1018                       		dc.b  $10, $18
0001CDE0 0810                       		dc.b	8, $10
0001CDE2 2070                       		dc.b  $20, $70
0001CDE4 4020                       		dc.b  $40, $20
0001CDE6 8020                       		dc.b  $80, $20
0001CDE8 2020                       		dc.b  $20, $20
0001CDEA 0808                       		dc.b	8,   8
0001CDEC 0404                       		dc.b	4,   4
0001CDEE 2008                       		dc.b  $20,   8
0001CDF0 0C0C                       		dc.b   $C,  $C
0001CDF2 0804                       		dc.b	8,   4
0001CDF4 1804                       		dc.b  $18,   4
0001CDF6 2804                       		dc.b  $28,   4
0001CDF8 0408                       		dc.b	4,   8
0001CDFA 0418                       		dc.b	4, $18
0001CDFC 0428                       		dc.b	4, $28
0001CDFE 0420                       		dc.b	4, $20
0001CE00 1818                       		dc.b  $18, $18
0001CE02 0C18                       		dc.b   $C, $18
0001CE04 4808                       		dc.b  $48,   8
0001CE06                            ; ===========================================================================
0001CE06                            
0001CE06                            Touch_Height:				; XREF: TouchResponse
0001CE06 0240 003F                  		andi.w	#$3F,d0
0001CE0A D040                       		add.w	d0,d0
0001CE0C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001CE10 7200                       		moveq	#0,d1
0001CE12 121A                       		move.b	(a2)+,d1
0001CE14 3029 0008                  		move.w	8(a1),d0
0001CE18 9041                       		sub.w	d1,d0
0001CE1A 9042                       		sub.w	d2,d0
0001CE1C 6400                       		bcc.s	loc_1AE98
0001CE1E D241                       		add.w	d1,d1
0001CE20 D041                       		add.w	d1,d0
0001CE22 6500                       		bcs.s	Touch_Width
0001CE24 6000 FF8C                  		bra.w	Touch_NextObj
0001CE28                            ; ===========================================================================
0001CE28                            
0001CE28                            loc_1AE98:
0001CE28 B044                       		cmp.w	d4,d0
0001CE2A 6200 FF86                  		bhi.w	Touch_NextObj
0001CE2E                            
0001CE2E                            Touch_Width:
0001CE2E 7200                       		moveq	#0,d1
0001CE30 121A                       		move.b	(a2)+,d1
0001CE32 3029 000C                  		move.w	$C(a1),d0
0001CE36 9041                       		sub.w	d1,d0
0001CE38 9043                       		sub.w	d3,d0
0001CE3A 6400                       		bcc.s	loc_1AEB6
0001CE3C D241                       		add.w	d1,d1
0001CE3E D240                       		add.w	d0,d1
0001CE40 6500                       		bcs.s	Touch_ChkValue
0001CE42 6000 FF6E                  		bra.w	Touch_NextObj
0001CE46                            ; ===========================================================================
0001CE46                            
0001CE46                            loc_1AEB6:
0001CE46 B045                       		cmp.w	d5,d0
0001CE48 6200 FF68                  		bhi.w	Touch_NextObj
0001CE4C                            
0001CE4C                            Touch_ChkValue:
0001CE4C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001CE50 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001CE54 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001CE58 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001CE5C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001CE60 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001CE62 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001CE66                            
0001CE66                            ; touch	response is $40-$7F
0001CE66                            
0001CE66 1029 0020                  		move.b	$20(a1),d0
0001CE6A 0200 003F                  		andi.b	#$3F,d0
0001CE6E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001CE72 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001CE74 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001CE7A 6400 0000                  		bcc.w	locret_1AEF2
0001CE7E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001CE82                            
0001CE82                            locret_1AEF2:
0001CE82 4E75                       		rts	
0001CE84                            ; ===========================================================================
0001CE84                            
0001CE84                            Touch_Monitor:
0001CE84 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001CE88 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001CE8A 3028 000C                  		move.w	$C(a0),d0
0001CE8E 0440 0010                  		subi.w	#$10,d0
0001CE92 B069 000C                  		cmp.w	$C(a1),d0
0001CE96 6500 0000                  		bcs.w	locret_1AF2E
0001CE9A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CE9E 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CEA2 337C FE80 0012             		move.w	#-$180,$12(a1)
0001CEA8 4A29 0025                  		tst.b	$25(a1)
0001CEAC 6600 0000                  		bne.w	locret_1AF2E
0001CEB0 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001CEB4 4E75                       		rts	
0001CEB6                            ; ===========================================================================
0001CEB6                            
0001CEB6                            loc_1AF1E:
0001CEB6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001CEBC 6600 0000                  		bne.w	locret_1AF2E
0001CEC0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001CEC4 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001CEC8 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CECE 6E00                       		bgt.s	@happy
0001CED0 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CED6 6D00                       		blt.s	@happy
0001CED8 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CEDE 6E00                       		bgt.s	@happy
0001CEE0 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CEE6 6C00                       		bge.s	locret_1AF2E
0001CEE8                            
0001CEE8                            	@happy:
0001CEE8 0828 0001 0022             		btst	#1,$22(a0)
0001CEEE 6700                       		beq.s	locret_1AF2E
0001CEF0 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CEF6 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CEFC 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHappy2
0001CF52                            
0001CF52                            locret_1AF2E:
0001CF52 4E75                       		rts	
0001CF54                            ; ===========================================================================
0001CF54                            
0001CF54                            Touch_Enemy:				; XREF: Touch_ChkValue
0001CF54 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001CF58 6600                       		bne.s	loc_1AF40	; if yes, branch
0001CF5A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001CF60 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001CF64                            
0001CF64                            loc_1AF40:
0001CF64 4A29 0021                  		tst.b	$21(a1)
0001CF68 6700                       		beq.s	Touch_KillEnemy
0001CF6A 4468 0010                  		neg.w	$10(a0)
0001CF6E 4468 0012                  		neg.w	$12(a0)
0001CF72 4238 F5E2                  		clr.b	(SonimeSST+sonime_airtimer).w
0001CF76 E0E8 0010                  		asr	$10(a0)
0001CF7A E0E8 0012                  		asr	$12(a0)
0001CF7E 137C 0000 0020             		move.b	#0,$20(a1)
0001CF84 5329 0021                  		subq.b	#1,$21(a1)
0001CF88 6600                       		bne.s	locret_1AF68
0001CF8A 08E9 0007 0022             		bset	#7,$22(a1)
0001CF90                            
0001CF90                            locret_1AF68:
0001CF90 4E75                       		rts	
0001CF92                            ; ===========================================================================
0001CF92                            
0001CF92                            Touch_KillEnemy:
0001CF92 0C68 0400 0010             		cmpi.w	#$400,$10(a0)
0001CF98 6E00                       		bgt.s	@happy
0001CF9A 0C68 FC00 0010             		cmpi.w	#-$400,$10(a0)
0001CFA0 6D00                       		blt.s	@happy
0001CFA2 0C68 0800 0012             		cmpi.w	#$800,$12(a0)
0001CFA8 6E00                       		bgt.s	@happy
0001CFAA 0C68 F800 0012             		cmpi.w	#-$800,$12(a0)
0001CFB0 6C00                       		bge.s	@nothappy
0001CFB2                            
0001CFB2                            	@happy:
0001CFB2 0828 0001 0022             		btst	#1,$22(a0)
0001CFB8 6700                       		beq.s	@nothappy
0001CFBA 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CFC0 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CFC6                            
0001CFC6                            	@nothappy:
0001CFC6 08E9 0007 0022             		bset	#7,$22(a1)
0001CFCC 7000                       		moveq	#0,d0
0001CFCE 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001CFD2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001CFD6 0C40 0006                  		cmpi.w	#6,d0
0001CFDA 6500                       		bcs.s	loc_1AF82
0001CFDC 7006                       		moveq	#6,d0
0001CFDE                            
0001CFDE                            loc_1AF82:
0001CFDE 3340 003E                  		move.w	d0,$3E(a1)
0001CFE2 4A40                       		tst.w	d0
0001CFE4 6700                       		beq.s	@nocombo
0001CFE6 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001CFEC 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001CFF2                            
0001CFF2                            	@nocombo:
0001CFF2 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001CFF6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001CFFC 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001CFFE 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001D002 337C 000A 003E             		move.w	#$A,$3E(a1)
0001D008                            
0001D008                            loc_1AF9C:
0001D008 6100 0000                  		bsr.w	AddPoints
0001D00C 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001D010 137C 0000 0024             		move.b	#0,$24(a1)
0001D016 4A68 0012                  		tst.w	$12(a0)
0001D01A 6B00                       		bmi.s	loc_1AFC2
0001D01C 3028 000C                  		move.w	$C(a0),d0
0001D020 B069 000C                  		cmp.w	$C(a1),d0
0001D024 6400                       		bcc.s	loc_1AFCA
0001D026 4468 0012                  		neg.w	$12(a0)
0001D02A 4E75                       		rts	
0001D02C                            ; ===========================================================================
0001D02C                            
0001D02C                            loc_1AFC2:
0001D02C 0668 0100 0012             		addi.w	#$100,$12(a0)
0001D032 4E75                       		rts	
0001D034                            ; ===========================================================================
0001D034                            
0001D034                            loc_1AFCA:
0001D034 0468 0100 0012             		subi.w	#$100,$12(a0)
0001D03A 4E75                       		rts	
0001D03C                            ; ===========================================================================
0001D03C 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001D044                            ; ===========================================================================
0001D044                            
0001D044                            loc_1AFDA:				; XREF: Touch_CatKiller
0001D044 08E9 0007 0022             		bset	#7,$22(a1)
0001D04A                            
0001D04A                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001D04A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001D04E 6700                       		beq.s	Touch_Hurt	; if not, branch
0001D050                            
0001D050                            loc_1AFE6:				; XREF: Touch_Hurt
0001D050 0C78 0100 D032             		cmpi.w	#$100,($FFFFD032).w
0001D056 6E00                       		bgt.s	locret_1AFE6
0001D058                            
0001D058                            loc2_1AFE6:				; XREF: Touch_Hurt
0001D058 11FC 000A F5CE             		move.b	#face_panic,(SonimeSST+sonime_face).w
0001D05E 31FC 0040 F5D0             		move.w	#$40,(SonimeSST+sonime_facetimer).w
0001D064                            
0001D064                            locret_1AFE6:
0001D064 70FF                       		moveq	#-1,d0
0001D066 4E75                       		rts	
0001D068                            ; ===========================================================================
0001D068                            
0001D068                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001D068 4E71                       		nop	
0001D06A 4A68 0030                  		tst.w	$30(a0)
0001D06E 66E8                       		bne.s	loc2_1AFE6
0001D070 2449                       		movea.l	a1,a2
0001D072                            
0001D072                            ; End of function TouchResponse
0001D072                            ; continue straight to HurtSonic
0001D072                            
0001D072                            ; ---------------------------------------------------------------------------
0001D072                            ; Hurting Sonic	subroutine
0001D072                            ; ---------------------------------------------------------------------------
0001D072                            
0001D072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D072                            
0001D072                            
0001D072                            HurtSonic:
0001D072 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001D078 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001D07E 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeHurt
0001D0D4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001D0D8 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001D0DA 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001D0DE 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001D0E2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001D0E8 6500                       		bcs.s	@notbad
0001D0EA 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001D0F0                            
0001D0F0                            	@notbad:
0001D0F0 4EB9 0000 F066             		jsr	SingleObjLoad
0001D0F6 6600                       		bne.s	Hurt_Shield
0001D0F8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001D0FC 3368 0008 0008             		move.w	8(a0),8(a1)
0001D102 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D108                            
0001D108                            Hurt_Shield:
0001D108 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001D10E 117C 0004 0024             		move.b	#4,$24(a0)
0001D114 6100 80A6                  		bsr.w	Sonic_ResetOnFloor
0001D118 08E8 0001 0022             		bset	#1,$22(a0)
0001D11E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001D124 317C FE00 0010             		move.w	#-$200,$10(a0)
0001D12A 0828 0006 0022             		btst	#6,$22(a0)
0001D130 6700                       		beq.s	Hurt_Reverse
0001D132 317C FE00 0012             		move.w	#-$200,$12(a0)
0001D138 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D13E                            
0001D13E                            Hurt_Reverse:
0001D13E 3028 0008                  		move.w	8(a0),d0
0001D142 B06A 0008                  		cmp.w	8(a2),d0
0001D146 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001D148 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001D14C                            
0001D14C                            Hurt_ChkSpikes:
0001D14C 317C 0000 0020             		move.w	#0,$20(a0)
0001D152 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001D158 317C 0078 0030             		move.w	#$78,$30(a0)
0001D15E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001D162 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001D166 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D168 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001D16C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001D16E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001D172                            
0001D172                            Hurt_Sound:
0001D172 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D178 70FF                       		moveq	#-1,d0
0001D17A 4E75                       		rts	
0001D17C                            ; ===========================================================================
0001D17C                            
0001D17C                            Hurt_NoRings:
0001D17C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001D180 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001D184 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeDies
0001D1DA                            ; End of function HurtSonic
0001D1DA                            
0001D1DA                            ; ---------------------------------------------------------------------------
0001D1DA                            ; Subroutine to	kill Sonic
0001D1DA                            ; ---------------------------------------------------------------------------
0001D1DA                            
0001D1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1DA                            
0001D1DA                            
0001D1DA                            KillSonic:
0001D1DA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001D1DE 6600 0000                  		bne.w	Kill_NoDeath	; if yes, branch
0001D1E2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001D1E8 117C 0006 0024             		move.b	#6,$24(a0)
0001D1EE 4EB9 0001 51BC             		jsr	(Sonic_ResetOnFloor).l
0001D1F4 08E8 0001 0022             		bset	#1,$22(a0)
0001D1FA 317C F900 0012             		move.w	#-$700,$12(a0)
0001D200 317C 0000 0010             		move.w	#0,$10(a0)
0001D206 317C 0000 0020             		move.w	#0,$20(a0)
0001D20C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D212 117C 0018 001C             		move.b	#$18,$1C(a0)
0001D218 08E8 0007 0002             		bset	#7,2(a0)
0001D21E 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001D222 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeFrustrated		
0001D278 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001D27C 6600                       		bne.s	Kill_Sound
0001D27E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001D282 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeSpikey
0001D2D8                            
0001D2D8                            Kill_Sound:
0001D2D8 4EB9 0000 11F6             		jsr	(PlaySound_Special).l
0001D2DE                            
0001D2DE                            Kill_NoDeath:
0001D2DE 70FF                       		moveq	#-1,d0
0001D2E0 4E75                       		rts	
0001D2E2                            ; End of function KillSonic
0001D2E2                            
0001D2E2                            
0001D2E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2E2                            
0001D2E2                            
0001D2E2                            Touch_Special:				; XREF: Touch_ChkValue
0001D2E2 1229 0020                  		move.b	$20(a1),d1
0001D2E6 0201 003F                  		andi.b	#$3F,d1
0001D2EA 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001D2EE 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001D2F0 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001D2F4 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001D2F6 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001D2FA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D2FC 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001D300 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001D302 4E75                       		rts	
0001D304                            ; ===========================================================================
0001D304                            
0001D304                            Touch_CatKiller:			; XREF: Touch_Special
0001D304 6000 FD3E                  		bra.w	loc_1AFDA
0001D308                            ; ===========================================================================
0001D308                            
0001D308                            Touch_Yadrin:				; XREF: Touch_Special
0001D308 9A40                       		sub.w	d0,d5
0001D30A 0C45 0008                  		cmpi.w	#8,d5
0001D30E 6400                       		bcc.s	loc_1B144
0001D310 3029 0008                  		move.w	8(a1),d0
0001D314 5940                       		subq.w	#4,d0
0001D316 0829 0000 0022             		btst	#0,$22(a1)
0001D31C 6700                       		beq.s	loc_1B130
0001D31E 0440 0010                  		subi.w	#$10,d0
0001D322                            
0001D322                            loc_1B130:
0001D322 9042                       		sub.w	d2,d0
0001D324 6400                       		bcc.s	loc_1B13C
0001D326 0640 0018                  		addi.w	#$18,d0
0001D32A 6500                       		bcs.s	loc_1B140
0001D32C 6000                       		bra.s	loc_1B144
0001D32E                            ; ===========================================================================
0001D32E                            
0001D32E                            loc_1B13C:
0001D32E B044                       		cmp.w	d4,d0
0001D330 6200                       		bhi.s	loc_1B144
0001D332                            
0001D332                            loc_1B140:
0001D332 6000 FD16                  		bra.w	Touch_ChkHurt
0001D336                            ; ===========================================================================
0001D336                            
0001D336                            loc_1B144:
0001D336 6000 FC1C                  		bra.w	Touch_Enemy
0001D33A                            ; ===========================================================================
0001D33A                            
0001D33A                            Touch_D7orE1:				; XREF: Touch_Special
0001D33A 5229 0021                  		addq.b	#1,$21(a1)
0001D33E 4E75                       		rts	
0001D340                            ; End of function Touch_Special
0001D340                            
0001D340                            ; ---------------------------------------------------------------------------
0001D340                            ; Subroutine to	show the special stage layout
0001D340                            ; ---------------------------------------------------------------------------
0001D340                            
0001D340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D340                            
0001D340                            
0001D340                            SS_ShowLayout:				; XREF: SpecialStage
0001D340 4A78 F63A                  		tst.w	($FFFFF63A).w
0001D344 6600                       		bne.s	@noanimate
0001D346 6100 0000                  		bsr.w	SS_AniWallsRings
0001D34A 6100 0000                  		bsr.w	SS_AniItems
0001D34E                            
0001D34E                            	@noanimate:
0001D34E 3F05                       		move.w	d5,-(sp)
0001D350 43F8 8000                  		lea	($FFFF8000).w,a1
0001D354 1038 F780                  		move.b	($FFFFF780).w,d0
0001D358 0200 00FC                  		andi.b	#$FC,d0
0001D35C 4EB9 0000 29CC             		jsr	(CalcSine).l
0001D362 3800                       		move.w	d0,d4
0001D364 3A01                       		move.w	d1,d5
0001D366 C9FC 0018                  		muls.w	#$18,d4
0001D36A CBFC 0018                  		muls.w	#$18,d5
0001D36E 7400                       		moveq	#0,d2
0001D370 3438 F700                  		move.w	($FFFFF700).w,d2
0001D374 84FC 0018                  		divu.w	#$18,d2
0001D378 4842                       		swap	d2
0001D37A 4442                       		neg.w	d2
0001D37C 0642 FF4C                  		addi.w	#-$B4,d2
0001D380 7600                       		moveq	#0,d3
0001D382 3638 F704                  		move.w	($FFFFF704).w,d3
0001D386 86FC 0018                  		divu.w	#$18,d3
0001D38A 4843                       		swap	d3
0001D38C 4443                       		neg.w	d3
0001D38E 0643 FF4C                  		addi.w	#-$B4,d3
0001D392 3E3C 000F                  		move.w	#$F,d7
0001D396                            
0001D396                            loc_1B19E:
0001D396 48A7 E000                  		movem.w	d0-d2,-(sp)
0001D39A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001D39E 4440                       		neg.w	d0
0001D3A0 C3C2                       		muls.w	d2,d1
0001D3A2 C1C3                       		muls.w	d3,d0
0001D3A4 2C00                       		move.l	d0,d6
0001D3A6 DC81                       		add.l	d1,d6
0001D3A8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001D3AC C1C2                       		muls.w	d2,d0
0001D3AE C3C3                       		muls.w	d3,d1
0001D3B0 D280                       		add.l	d0,d1
0001D3B2 2406                       		move.l	d6,d2
0001D3B4 3C3C 000F                  		move.w	#$F,d6
0001D3B8                            
0001D3B8                            loc_1B1C0:
0001D3B8 2002                       		move.l	d2,d0
0001D3BA E080                       		asr.l	#8,d0
0001D3BC 32C0                       		move.w	d0,(a1)+
0001D3BE 2001                       		move.l	d1,d0
0001D3C0 E080                       		asr.l	#8,d0
0001D3C2 32C0                       		move.w	d0,(a1)+
0001D3C4 D485                       		add.l	d5,d2
0001D3C6 D284                       		add.l	d4,d1
0001D3C8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001D3CC                            
0001D3CC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001D3D0 0643 0018                  		addi.w	#$18,d3
0001D3D4 51CF FFC0                  		dbf	d7,loc_1B19E
0001D3D8                            
0001D3D8 3A1F                       		move.w	(sp)+,d5
0001D3DA 41F9 00FF 0000             		lea	($FF0000).l,a0
0001D3E0 7000                       		moveq	#0,d0
0001D3E2 3038 F704                  		move.w	($FFFFF704).w,d0
0001D3E6 80FC 0018                  		divu.w	#$18,d0
0001D3EA C0FC 0080                  		mulu.w	#$80,d0
0001D3EE D1C0                       		adda.l	d0,a0
0001D3F0 7000                       		moveq	#0,d0
0001D3F2 3038 F700                  		move.w	($FFFFF700).w,d0
0001D3F6 80FC 0018                  		divu.w	#$18,d0
0001D3FA D0C0                       		adda.w	d0,a0
0001D3FC 49F8 8000                  		lea	($FFFF8000).w,a4
0001D400 3E3C 000F                  		move.w	#$F,d7
0001D404                            
0001D404                            loc_1B20C:
0001D404 3C3C 000F                  		move.w	#$F,d6
0001D408                            
0001D408                            loc_1B210:
0001D408 7000                       		moveq	#0,d0
0001D40A 1018                       		move.b	(a0)+,d0
0001D40C 6700                       		beq.s	loc_1B268
0001D40E 0C00 004E                  		cmpi.b	#$4E,d0
0001D412 6200                       		bhi.s	loc_1B268
0001D414 3614                       		move.w	(a4),d3
0001D416 0643 0120                  		addi.w	#$120,d3
0001D41A 0C43 0070                  		cmpi.w	#$70,d3
0001D41E 6500                       		bcs.s	loc_1B268
0001D420 0C43 01D0                  		cmpi.w	#$1D0,d3
0001D424 6400                       		bcc.s	loc_1B268
0001D426 342C 0002                  		move.w	2(a4),d2
0001D42A 0642 00F0                  		addi.w	#$F0,d2
0001D42E 0C42 0070                  		cmpi.w	#$70,d2
0001D432 6500                       		bcs.s	loc_1B268
0001D434 0C42 0170                  		cmpi.w	#$170,d2
0001D438 6400                       		bcc.s	loc_1B268
0001D43A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001D440 E748                       		lsl.w	#3,d0
0001D442 4BF5 0000                  		lea	(a5,d0.w),a5
0001D446 225D                       		movea.l	(a5)+,a1
0001D448 321D                       		move.w	(a5)+,d1
0001D44A D241                       		add.w	d1,d1
0001D44C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001D450 365D                       		movea.w	(a5)+,a3
0001D452 7200                       		moveq	#0,d1
0001D454 1219                       		move.b	(a1)+,d1
0001D456 5301                       		subq.b	#1,d1
0001D458 6B00                       		bmi.s	loc_1B268
0001D45A 4EB9 0000 EBBA             		jsr	sub_D762
0001D460                            
0001D460                            loc_1B268:
0001D460 584C                       		addq.w	#4,a4
0001D462 51CE FFA4                  		dbf	d6,loc_1B210
0001D466                            
0001D466 41E8 0070                  		lea	$70(a0),a0
0001D46A 51CF FF98                  		dbf	d7,loc_1B20C
0001D46E                            
0001D46E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001D472 0C05 0050                  		cmpi.b	#$50,d5
0001D476 6700                       		beq.s	loc_1B288
0001D478 24BC 0000 0000             		move.l	#0,(a2)
0001D47E 4E75                       		rts	
0001D480                            ; ===========================================================================
0001D480                            
0001D480                            loc_1B288:
0001D480 157C 0000 FFFB             		move.b	#0,-5(a2)
0001D486 4E75                       		rts	
0001D488                            ; End of function SS_ShowLayout
0001D488                            
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            ; Subroutine to	animate	walls and rings	in the special stage
0001D488                            ; ---------------------------------------------------------------------------
0001D488                            
0001D488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D488                            
0001D488                            
0001D488                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001D488 43F9 00FF 4005             		lea	($FF4005).l,a1
0001D48E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001D492 6A00                       		bpl.s	loc_1B2C8
0001D494 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001D49A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001D49E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001D4A4                            
0001D4A4                            loc_1B2C8:
0001D4A4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001D4AA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001D4AE 6A00                       		bpl.s	loc_1B2E4
0001D4B0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001D4B6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001D4BA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001D4C0                            
0001D4C0                            loc_1B2E4:
0001D4C0 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001D4C4 1340 0138                  		move.b	d0,$138(a1)
0001D4C8 1340 0160                  		move.b	d0,$160(a1)
0001D4CC 1340 0148                  		move.b	d0,$148(a1)
0001D4D0 1340 0150                  		move.b	d0,$150(a1)
0001D4D4 1340 01D8                  		move.b	d0,$1D8(a1)
0001D4D8 1340 01E0                  		move.b	d0,$1E0(a1)
0001D4DC 1340 01E8                  		move.b	d0,$1E8(a1)
0001D4E0 1340 01F0                  		move.b	d0,$1F0(a1)
0001D4E4 1340 01F8                  		move.b	d0,$1F8(a1)
0001D4E8 1340 0200                  		move.b	d0,$200(a1)
0001D4EC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001D4F0 6A00                       		bpl.s	loc_1B326
0001D4F2 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001D4F8 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001D4FC 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001D502                            
0001D502                            loc_1B326:
0001D502 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001D506 1340 0168                  		move.b	d0,$168(a1)
0001D50A 1340 0170                  		move.b	d0,$170(a1)
0001D50E 1340 0178                  		move.b	d0,$178(a1)
0001D512 1340 0180                  		move.b	d0,$180(a1)
0001D516 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001D51A 6A00                       		bpl.s	loc_1B350
0001D51C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001D522 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001D526 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001D52C                            
0001D52C                            loc_1B350:
0001D52C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001D532 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001D538 7000                       		moveq	#0,d0
0001D53A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001D53E D040                       		add.w	d0,d0
0001D540 41F0 0000                  		lea	(a0,d0.w),a0
0001D544 3290                       		move.w	(a0),(a1)
0001D546 3368 0002 0008             		move.w	2(a0),8(a1)
0001D54C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D552 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D558 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D55E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D564 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D56A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D570 D0FC 0020                  		adda.w	#$20,a0
0001D574 D2FC 0048                  		adda.w	#$48,a1
0001D578 3290                       		move.w	(a0),(a1)
0001D57A 3368 0002 0008             		move.w	2(a0),8(a1)
0001D580 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D586 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D58C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D592 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D598 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D59E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D5A4 D0FC 0020                  		adda.w	#$20,a0
0001D5A8 D2FC 0048                  		adda.w	#$48,a1
0001D5AC 3290                       		move.w	(a0),(a1)
0001D5AE 3368 0002 0008             		move.w	2(a0),8(a1)
0001D5B4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D5BA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D5C0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D5C6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D5CC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D5D2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D5D8 D0FC 0020                  		adda.w	#$20,a0
0001D5DC D2FC 0048                  		adda.w	#$48,a1
0001D5E0 3290                       		move.w	(a0),(a1)
0001D5E2 3368 0002 0008             		move.w	2(a0),8(a1)
0001D5E8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001D5EE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001D5F4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001D5FA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001D600 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001D606 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001D60C D0FC 0020                  		adda.w	#$20,a0
0001D610 D2FC 0048                  		adda.w	#$48,a1
0001D614 4E75                       		rts	
0001D616                            ; End of function SS_AniWallsRings
0001D616                            
0001D616                            SS_LoadWalls:
0001D616 7000                       		moveq	#0,d0
0001D618 1038 F780                  		move.b	($FFFFF780).w,d0	; get the Special Stage angle
0001D61C E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0001D61E 0240 000F                  		andi.w	#$F,d0
0001D622 B038 FFF9                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
0001D626 6700                       		beq.s	@return			; if so, branch
0001D628                            
0001D628 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D62E 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
0001D634 3200                       		move.w	d0,d1
0001D636 E149                       		lsl.w	#8,d1
0001D638 D241                       		add.w	d1,d1
0001D63A D2C1                       		add.w	d1,a1
0001D63C                            
0001D646                            
0001D646 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
0001D64A 4EB9 0000 0000             		jsr	LoadTiles
0001D650 11C0 FFF9                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
0001D654                            
0001D654                            	@return:
0001D654 4E75                       		rts
0001D656                            
0001D656                            ; ===========================================================================
0001D656 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D666 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001D676 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D686 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001D696 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D6A6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001D6B6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D6C6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001D6D6                            ; ---------------------------------------------------------------------------
0001D6D6                            ; Subroutine to	remove items when you collect them in the special stage
0001D6D6                            ; ---------------------------------------------------------------------------
0001D6D6                            
0001D6D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6D6                            
0001D6D6                            
0001D6D6                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001D6D6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001D6DC 303C 001F                  		move.w	#$1F,d0
0001D6E0                            
0001D6E0                            loc_1B4C4:
0001D6E0 4A12                       		tst.b	(a2)
0001D6E2 6700                       		beq.s	locret_1B4CE
0001D6E4 504A                       		addq.w	#8,a2
0001D6E6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001D6EA                            
0001D6EA                            locret_1B4CE:
0001D6EA 4E75                       		rts	
0001D6EC                            ; End of function SS_RemoveCollectedItem
0001D6EC                            
0001D6EC                            ; ---------------------------------------------------------------------------
0001D6EC                            ; Subroutine to	animate	special	stage items when you touch them
0001D6EC                            ; ---------------------------------------------------------------------------
0001D6EC                            
0001D6EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6EC                            
0001D6EC                            
0001D6EC                            SS_AniItems:				; XREF: SS_ShowLayout
0001D6EC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001D6F2 3E3C 001F                  		move.w	#$1F,d7
0001D6F6                            
0001D6F6                            loc_1B4DA:
0001D6F6 7000                       		moveq	#0,d0
0001D6F8 1010                       		move.b	(a0),d0
0001D6FA 6700                       		beq.s	loc_1B4E8
0001D6FC E548                       		lsl.w	#2,d0
0001D6FE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001D702 4E91                       		jsr	(a1)
0001D704                            
0001D704                            loc_1B4E8:
0001D704 5048                       		addq.w	#8,a0
0001D706                            
0001D706                            loc_1B4EA:
0001D706 51CF FFEE                  		dbf	d7,loc_1B4DA
0001D70A                            
0001D70A 4E75                       		rts	
0001D70C                            ; End of function SS_AniItems
0001D70C                            
0001D70C                            ; ===========================================================================
0001D70C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001D710 0000 0000                  		dc.l SS_AniBumper
0001D714 0000 0000                  		dc.l SS_Ani1Up
0001D718 0000 0000                  		dc.l SS_AniReverse
0001D71C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001D720 0000 0000                  		dc.l SS_AniGlassBlock
0001D724                            ; ===========================================================================
0001D724                            
0001D724                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001D724 5328 0002                  		subq.b	#1,2(a0)
0001D728 6A00                       		bpl.s	locret_1B530
0001D72A 117C 0005 0002             		move.b	#5,2(a0)
0001D730 7000                       		moveq	#0,d0
0001D732 1028 0003                  		move.b	3(a0),d0
0001D736 5228 0003                  		addq.b	#1,3(a0)
0001D73A 2268 0004                  		movea.l	4(a0),a1
0001D73E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001D742 1280                       		move.b	d0,(a1)
0001D744 6600                       		bne.s	locret_1B530
0001D746 4290                       		clr.l	(a0)
0001D748 42A8 0004                  		clr.l	4(a0)
0001D74C                            
0001D74C                            locret_1B530:
0001D74C 4E75                       		rts	
0001D74E                            ; ===========================================================================
0001D74E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001D754                            ; ===========================================================================
0001D754                            
0001D754                            SS_AniBumper:				; XREF: SS_AniIndex
0001D754 5328 0002                  		subq.b	#1,2(a0)
0001D758 6A00                       		bpl.s	locret_1B566
0001D75A 117C 0007 0002             		move.b	#7,2(a0)
0001D760 7000                       		moveq	#0,d0
0001D762 1028 0003                  		move.b	3(a0),d0
0001D766 5228 0003                  		addq.b	#1,3(a0)
0001D76A 2268 0004                  		movea.l	4(a0),a1
0001D76E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001D772 6600                       		bne.s	loc_1B564
0001D774 4290                       		clr.l	(a0)
0001D776 42A8 0004                  		clr.l	4(a0)
0001D77A 12BC 0025                  		move.b	#$25,(a1)
0001D77E 4E75                       		rts	
0001D780                            ; ===========================================================================
0001D780                            
0001D780                            loc_1B564:
0001D780 1280                       		move.b	d0,(a1)
0001D782                            
0001D782                            locret_1B566:
0001D782 4E75                       		rts	
0001D784                            ; ===========================================================================
0001D784 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001D78A                            ; ===========================================================================
0001D78A                            
0001D78A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001D78A 5328 0002                  		subq.b	#1,2(a0)
0001D78E 6A00                       		bpl.s	locret_1B596
0001D790 117C 0005 0002             		move.b	#5,2(a0)
0001D796 7000                       		moveq	#0,d0
0001D798 1028 0003                  		move.b	3(a0),d0
0001D79C 5228 0003                  		addq.b	#1,3(a0)
0001D7A0 2268 0004                  		movea.l	4(a0),a1
0001D7A4 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001D7A8 1280                       		move.b	d0,(a1)
0001D7AA 6600                       		bne.s	locret_1B596
0001D7AC 4290                       		clr.l	(a0)
0001D7AE 42A8 0004                  		clr.l	4(a0)
0001D7B2                            
0001D7B2                            locret_1B596:
0001D7B2 4E75                       		rts	
0001D7B4                            ; ===========================================================================
0001D7B4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001D7BA                            ; ===========================================================================
0001D7BA                            
0001D7BA                            SS_AniReverse:				; XREF: SS_AniIndex
0001D7BA 5328 0002                  		subq.b	#1,2(a0)
0001D7BE 6A00                       		bpl.s	locret_1B5CC
0001D7C0 117C 0007 0002             		move.b	#7,2(a0)
0001D7C6 7000                       		moveq	#0,d0
0001D7C8 1028 0003                  		move.b	3(a0),d0
0001D7CC 5228 0003                  		addq.b	#1,3(a0)
0001D7D0 2268 0004                  		movea.l	4(a0),a1
0001D7D4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001D7D8 6600                       		bne.s	loc_1B5CA
0001D7DA 4290                       		clr.l	(a0)
0001D7DC 42A8 0004                  		clr.l	4(a0)
0001D7E0 12BC 002B                  		move.b	#$2B,(a1)
0001D7E4 4E75                       		rts	
0001D7E6                            ; ===========================================================================
0001D7E6                            
0001D7E6                            loc_1B5CA:
0001D7E6 1280                       		move.b	d0,(a1)
0001D7E8                            
0001D7E8                            locret_1B5CC:
0001D7E8 4E75                       		rts	
0001D7EA                            ; ===========================================================================
0001D7EA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001D7F0                            ; ===========================================================================
0001D7F0                            
0001D7F0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001D7F0 5328 0002                  		subq.b	#1,2(a0)
0001D7F4 6A00                       		bpl.s	locret_1B60C
0001D7F6 117C 0005 0002             		move.b	#5,2(a0)
0001D7FC 7000                       		moveq	#0,d0
0001D7FE 1028 0003                  		move.b	3(a0),d0
0001D802 5228 0003                  		addq.b	#1,3(a0)
0001D806 2268 0004                  		movea.l	4(a0),a1
0001D80A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001D80E 1280                       		move.b	d0,(a1)
0001D810 6600                       		bne.s	locret_1B60C
0001D812 4290                       		clr.l	(a0)
0001D814 42A8 0004                  		clr.l	4(a0)
0001D818 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001D81E 303C 00A8                  		move.w	#$A8,d0
0001D822 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001D828                            
0001D828                            locret_1B60C:
0001D828 4E75                       		rts	
0001D82A                            ; ===========================================================================
0001D82A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001D830                            ; ===========================================================================
0001D830                            
0001D830                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001D830 5328 0002                  		subq.b	#1,2(a0)
0001D834 6A00                       		bpl.s	locret_1B640
0001D836 117C 0001 0002             		move.b	#1,2(a0)
0001D83C 7000                       		moveq	#0,d0
0001D83E 1028 0003                  		move.b	3(a0),d0
0001D842 5228 0003                  		addq.b	#1,3(a0)
0001D846 2268 0004                  		movea.l	4(a0),a1
0001D84A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D84E 1280                       		move.b	d0,(a1)
0001D850 6600                       		bne.s	locret_1B640
0001D852 12A8 0004                  		move.b	4(a0),(a1)
0001D856 4290                       		clr.l	(a0)
0001D858 42A8 0004                  		clr.l	4(a0)
0001D85C                            
0001D85C                            locret_1B640:
0001D85C 4E75                       		rts	
0001D85E                            ; ===========================================================================
0001D85E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D868                            ; ---------------------------------------------------------------------------
0001D868                            ; Special stage	layout pointers
0001D868                            ; ---------------------------------------------------------------------------
0001D868                            SS_LayoutIndex:
0001D868                            	include "_inc\Special stage layout pointers.asm"
0001D868                            ; ---------------------------------------------------------------------------
0001D868                            ; Special stage	layout pointers
0001D868                            ; ---------------------------------------------------------------------------
0001D868 0000 0000                  	dc.l SS_1
0001D86C 0000 0000                  	dc.l SS_2
0001D870 0000 0000                  	dc.l SS_3
0001D874 0000 0000                  	dc.l SS_4
0001D878 0000 0000                  	dc.l SS_5
0001D87C 0000 0000                  	dc.l SS_6
0001D880                            	even
0001D880                            	even
0001D880                            
0001D880                            ; ---------------------------------------------------------------------------
0001D880                            ; Special stage	start locations
0001D880                            ; ---------------------------------------------------------------------------
0001D880                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D898                            		even
0001D898                            
0001D898                            ; ---------------------------------------------------------------------------
0001D898                            ; Subroutine to	load special stage layout
0001D898                            ; ---------------------------------------------------------------------------
0001D898                            
0001D898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D898                            
0001D898                            
0001D898                            SS_Load:				; XREF: SpecialStage
0001D898 7000                       		moveq	#0,d0
0001D89A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D89E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D8A2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D8A8 6500                       		bcs.s	SS_ChkEmldNum
0001D8AA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D8B0                            
0001D8B0                            SS_ChkEmldNum:
0001D8B0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D8B6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D8B8 7200                       		moveq	#0,d1
0001D8BA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D8BE 5301                       		subq.b	#1,d1
0001D8C0 6500                       		bcs.s	SS_LoadData
0001D8C2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D8C6                            
0001D8C6                            SS_ChkEmldLoop:	
0001D8C6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D8CA 6600                       		bne.s	SS_ChkEmldRepeat
0001D8CC 60CA                       		bra.s	SS_Load
0001D8CE                            ; ===========================================================================
0001D8CE                            
0001D8CE                            SS_ChkEmldRepeat:
0001D8CE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D8D2                            
0001D8D2                            SS_LoadData:
0001D8D2 E548                       		lsl.w	#2,d0
0001D8D4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D8D8 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D8DC 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D8E0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D8E4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D8EA 303C 0000                  		move.w	#0,d0
0001D8EE 4EB9 0000 15D2             		jsr	(EniDec).l
0001D8F4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D8FA 303C 0FFF                  		move.w	#$FFF,d0
0001D8FE                            
0001D8FE                            SS_ClrRAM3:
0001D8FE 4299                       		clr.l	(a1)+
0001D900 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D904                            
0001D904 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D90A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D910 723F                       		moveq	#$3F,d1
0001D912                            
0001D912                            loc_1B6F6:
0001D912 743F                       		moveq	#$3F,d2
0001D914                            
0001D914                            loc_1B6F8:
0001D914 12D8                       		move.b	(a0)+,(a1)+
0001D916 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D91A                            
0001D91A 43E9 0040                  		lea	$40(a1),a1
0001D91E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D922                            
0001D922 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D928 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D92E 724D                       		moveq	#$4D,d1
0001D930                            
0001D930                            loc_1B714:
0001D930 22D8                       		move.l	(a0)+,(a1)+
0001D932 32FC 0000                  		move.w	#0,(a1)+
0001D936 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D93C 32D8                       		move.w	(a0)+,(a1)+
0001D93E 51C9 FFF0                  		dbf	d1,loc_1B714
0001D942                            
0001D942 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D948 323C 003F                  		move.w	#$3F,d1
0001D94C                            
0001D94C                            loc_1B730:
0001D94C                            
0001D94C 4299                       		clr.l	(a1)+
0001D94E 51C9 FFFC                  		dbf	d1,loc_1B730
0001D952                            
0001D952 4E75                       		rts	
0001D954                            ; End of function SS_Load
0001D954                            
0001D954                            ; ===========================================================================
0001D954                            ; ---------------------------------------------------------------------------
0001D954                            ; Special stage	mappings and VRAM pointers
0001D954                            ; ---------------------------------------------------------------------------
0001D954                            SS_MapIndex:
0001D954                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D954                            ; ---------------------------------------------------------------------------
0001D954                            ; Special stage	mappings and VRAM pointers
0001D954                            ; ---------------------------------------------------------------------------
0001D954 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D958 0142                       	dc.w $142		; VRAM setting
0001D95A 0000 0000                  	dc.l Map_SSWalls
0001D95E 0142                       	dc.w $142
0001D960 0000 0000                  	dc.l Map_SSWalls
0001D964 0142                       	dc.w $142
0001D966 0000 0000                  	dc.l Map_SSWalls
0001D96A 0142                       	dc.w $142
0001D96C 0000 0000                  	dc.l Map_SSWalls
0001D970 0142                       	dc.w $142
0001D972 0000 0000                  	dc.l Map_SSWalls
0001D976 0142                       	dc.w $142
0001D978 0000 0000                  	dc.l Map_SSWalls
0001D97C 0142                       	dc.w $142
0001D97E 0000 0000                  	dc.l Map_SSWalls
0001D982 0142                       	dc.w $142
0001D984 0000 0000                  	dc.l Map_SSWalls
0001D988 0142                       	dc.w $142
0001D98A 0000 0000                  	dc.l Map_SSWalls
0001D98E 2142                       	dc.w $2142
0001D990 0000 0000                  	dc.l Map_SSWalls
0001D994 2142                       	dc.w $2142
0001D996 0000 0000                  	dc.l Map_SSWalls
0001D99A 2142                       	dc.w $2142
0001D99C 0000 0000                  	dc.l Map_SSWalls
0001D9A0 2142                       	dc.w $2142
0001D9A2 0000 0000                  	dc.l Map_SSWalls
0001D9A6 2142                       	dc.w $2142
0001D9A8 0000 0000                  	dc.l Map_SSWalls
0001D9AC 2142                       	dc.w $2142
0001D9AE 0000 0000                  	dc.l Map_SSWalls
0001D9B2 2142                       	dc.w $2142
0001D9B4 0000 0000                  	dc.l Map_SSWalls
0001D9B8 2142                       	dc.w $2142
0001D9BA 0000 0000                  	dc.l Map_SSWalls
0001D9BE 2142                       	dc.w $2142
0001D9C0 0000 0000                  	dc.l Map_SSWalls
0001D9C4 4142                       	dc.w $4142
0001D9C6 0000 0000                  	dc.l Map_SSWalls
0001D9CA 4142                       	dc.w $4142
0001D9CC 0000 0000                  	dc.l Map_SSWalls
0001D9D0 4142                       	dc.w $4142
0001D9D2 0000 0000                  	dc.l Map_SSWalls
0001D9D6 4142                       	dc.w $4142
0001D9D8 0000 0000                  	dc.l Map_SSWalls
0001D9DC 4142                       	dc.w $4142
0001D9DE 0000 0000                  	dc.l Map_SSWalls
0001D9E2 4142                       	dc.w $4142
0001D9E4 0000 0000                  	dc.l Map_SSWalls
0001D9E8 4142                       	dc.w $4142
0001D9EA 0000 0000                  	dc.l Map_SSWalls
0001D9EE 4142                       	dc.w $4142
0001D9F0 0000 0000                  	dc.l Map_SSWalls
0001D9F4 4142                       	dc.w $4142
0001D9F6 0000 0000                  	dc.l Map_SSWalls
0001D9FA 6142                       	dc.w $6142
0001D9FC 0000 0000                  	dc.l Map_SSWalls
0001DA00 6142                       	dc.w $6142
0001DA02 0000 0000                  	dc.l Map_SSWalls
0001DA06 6142                       	dc.w $6142
0001DA08 0000 0000                  	dc.l Map_SSWalls
0001DA0C 6142                       	dc.w $6142
0001DA0E 0000 0000                  	dc.l Map_SSWalls
0001DA12 6142                       	dc.w $6142
0001DA14 0000 0000                  	dc.l Map_SSWalls
0001DA18 6142                       	dc.w $6142
0001DA1A 0000 0000                  	dc.l Map_SSWalls
0001DA1E 6142                       	dc.w $6142
0001DA20 0000 0000                  	dc.l Map_SSWalls
0001DA24 6142                       	dc.w $6142
0001DA26 0000 0000                  	dc.l Map_SSWalls
0001DA2A 6142                       	dc.w $6142
0001DA2C 0001 0384                  	dc.l Map_obj47
0001DA30 023B                       	dc.w $23B
0001DA32 0000 0000                  	dc.l Map_SS_R
0001DA36 0570                       	dc.w $570
0001DA38 0000 0000                  	dc.l Map_SS_R
0001DA3C 0251                       	dc.w $251
0001DA3E 0000 0000                  	dc.l Map_SS_R
0001DA42 0370                       	dc.w $370
0001DA44 0000 0000                  	dc.l Map_SS_Up
0001DA48 0263                       	dc.w $263
0001DA4A 0000 0000                  	dc.l Map_SS_Down
0001DA4E 0263                       	dc.w $263
0001DA50 0000 0000                  	dc.l Map_SS_R
0001DA54 22F0                       	dc.w $22F0
0001DA56 0000 0000                  	dc.l Map_SS_Glass
0001DA5A 0470                       	dc.w $470
0001DA5C 0000 0000                  	dc.l Map_SS_Glass
0001DA60 05F0                       	dc.w $5F0
0001DA62 0000 0000                  	dc.l Map_SS_Glass
0001DA66 65F0                       	dc.w $65F0
0001DA68 0000 0000                  	dc.l Map_SS_Glass
0001DA6C 25F0                       	dc.w $25F0
0001DA6E 0000 0000                  	dc.l Map_SS_Glass
0001DA72 45F0                       	dc.w $45F0
0001DA74 0000 0000                  	dc.l Map_SS_R
0001DA78 02F0                       	dc.w $2F0
0001DA7A 0101 0384                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001DA7E 023B                       	dc.w $23B
0001DA80 0201 0384                  	dc.l Map_obj47+$2000000
0001DA84 023B                       	dc.w $23B
0001DA86 0000 0000                  	dc.l Map_SS_R
0001DA8A 0797                       	dc.w $797
0001DA8C 0000 0000                  	dc.l Map_SS_R
0001DA90 07A0                       	dc.w $7A0
0001DA92 0000 0000                  	dc.l Map_SS_R
0001DA96 07A9                       	dc.w $7A9
0001DA98 0000 0000                  	dc.l Map_SS_R
0001DA9C 0797                       	dc.w $797
0001DA9E 0000 0000                  	dc.l Map_SS_R
0001DAA2 07A0                       	dc.w $7A0
0001DAA4 0000 0000                  	dc.l Map_SS_R
0001DAA8 07A9                       	dc.w $7A9
0001DAAA 0000 B21A                  	dc.l Map_obj25
0001DAAE 222D                       	dc.w $2000+ssringart
0001DAB0 0000 0000                  	dc.l Map_SS_Chaos3
0001DAB4 0770                       	dc.w $770
0001DAB6 0000 0000                  	dc.l Map_SS_Chaos3
0001DABA 2770                       	dc.w $2770
0001DABC 0000 0000                  	dc.l Map_SS_Chaos3
0001DAC0 4770                       	dc.w $4770
0001DAC2 0000 0000                  	dc.l Map_SS_Chaos3
0001DAC6 6770                       	dc.w $6770
0001DAC8 0000 0000                  	dc.l Map_SS_Chaos1
0001DACC 0770                       	dc.w $770
0001DACE 0000 0000                  	dc.l Map_SS_Chaos2
0001DAD2 0770                       	dc.w $770
0001DAD4 0000 0000                  	dc.l Map_SS_R
0001DAD8 04F0                       	dc.w $4F0
0001DADA 0400 B21A                  	dc.l Map_obj25+$4000000
0001DADE 222D                       	dc.w $2000+ssringart
0001DAE0 0500 B21A                  	dc.l Map_obj25+$5000000
0001DAE4 222D                       	dc.w $2000+ssringart
0001DAE6 0600 B21A                  	dc.l Map_obj25+$6000000
0001DAEA 222D                       	dc.w $2000+ssringart
0001DAEC 0700 B21A                  	dc.l Map_obj25+$7000000
0001DAF0 222D                       	dc.w $2000+ssringart
0001DAF2 0000 0000                  	dc.l Map_SS_Glass
0001DAF6 23F0                       	dc.w $23F0
0001DAF8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001DAFC 23F0                       	dc.w $23F0
0001DAFE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001DB02 23F0                       	dc.w $23F0
0001DB04 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001DB08 23F0                       	dc.w $23F0
0001DB0A 0000 0000                  	dc.l Map_SS_R+$2000000
0001DB0E 04F0                       	dc.w $4F0
0001DB10 0000 0000                  	dc.l Map_SS_Glass
0001DB14 05F0                       	dc.w $5F0
0001DB16 0000 0000                  	dc.l Map_SS_Glass
0001DB1A 65F0                       	dc.w $65F0
0001DB1C 0000 0000                  	dc.l Map_SS_Glass
0001DB20 25F0                       	dc.w $25F0
0001DB22 0000 0000                  	dc.l Map_SS_Glass
0001DB26 45F0                       	dc.w $45F0
0001DB26 45F0                       	dc.w $45F0
0001DB28                            
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28                            ; Sprite mappings - special stage "R" block
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28                            Map_SS_R:
0001DB28                            	include "_maps\SSRblock.asm"
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28                            ; Sprite mappings - special stage "R" block
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001DB2C 0000                       		dc.w byte_1B91E-Map_SS_R
0001DB2E 01                         byte_1B912:	dc.b 1
0001DB2F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DB34 01                         byte_1B918:	dc.b 1
0001DB35 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DB3A 00                         byte_1B91E:	dc.b 0
0001DB3C 00                         		even
0001DB3C 00                         		even
0001DB3C                            
0001DB3C                            ; ---------------------------------------------------------------------------
0001DB3C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DB3C                            ; ---------------------------------------------------------------------------
0001DB3C                            Map_SS_Glass:
0001DB3C                            	include "_maps\SSglassblock.asm"
0001DB3C                            ; ---------------------------------------------------------------------------
0001DB3C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001DB3C                            ; ---------------------------------------------------------------------------
0001DB3C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001DB40 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001DB44 01                         byte_1B928:	dc.b 1
0001DB45 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DB4A 01                         byte_1B92E:	dc.b 1
0001DB4B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001DB50 01                         byte_1B934:	dc.b 1
0001DB51 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001DB56 01                         byte_1B93A:	dc.b 1
0001DB57 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001DB5C                            		even
0001DB5C                            		even
0001DB5C                            
0001DB5C                            ; ---------------------------------------------------------------------------
0001DB5C                            ; Sprite mappings - special stage "UP" block
0001DB5C                            ; ---------------------------------------------------------------------------
0001DB5C                            Map_SS_Up:
0001DB5C                            	include "_maps\SSUPblock.asm"
0001DB5C                            ; ---------------------------------------------------------------------------
0001DB5C                            ; Sprite mappings - special stage "UP" block
0001DB5C                            ; ---------------------------------------------------------------------------
0001DB5C 0000                       		dc.w byte_1B944-Map_SS_Up
0001DB5E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001DB60 01                         byte_1B944:	dc.b 1
0001DB61 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001DB66 01                         byte_1B94A:	dc.b 1
0001DB67 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DB6C                            		even
0001DB6C                            		even
0001DB6C                            
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C                            ; Sprite mappings - special stage "DOWN" block
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C                            Map_SS_Down:
0001DB6C                            	include "_maps\SSDOWNblock.asm"
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C                            ; Sprite mappings - special stage "DOWN" block
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C 0000                       		dc.w byte_1B954-Map_SS_Down
0001DB6E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001DB70 01                         byte_1B954:	dc.b 1
0001DB71 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001DB76 01                         byte_1B95A:	dc.b 1
0001DB77 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001DB7C                            		even
0001DB7C                            		even
0001DB7C                            
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C                            ; Sprite mappings - special stage chaos	emeralds
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001DB7E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001DB80 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001DB82 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001DB84 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001DB86 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001DB88 01                         byte_1B96C:	dc.b 1
0001DB89 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001DB8E 01                         byte_1B972:	dc.b 1
0001DB8F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001DB94 01                         byte_1B978:	dc.b 1
0001DB95 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001DB9A 01                         byte_1B97E:	dc.b 1
0001DB9B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001DBA0                            		even
0001DBA0                            ; ===========================================================================
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            ; Object 09 - Sonic (special stage)
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            
0001DBA0                            Obj09:					; XREF: Obj_Index
0001DBA0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001DBA4 6700                       		beq.s	Obj09_Normal	; if not, branch
0001DBA6 6100 0000                  		bsr.w	SS_FixCamera
0001DBAA 6000 0000                  		bra.w	DebugMode
0001DBAE                            ; ===========================================================================
0001DBAE                            
0001DBAE                            Obj09_Normal:
0001DBAE 7000                       		moveq	#0,d0
0001DBB0 1028 0024                  		move.b	$24(a0),d0
0001DBB4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001DBB8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001DBBC                            ; ===========================================================================
0001DBBC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001DBBE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001DBC0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001DBC2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001DBC4                            ; ===========================================================================
0001DBC4                            
0001DBC4                            Obj09_Main:				; XREF: Obj09_Index
0001DBC4 5428 0024                  		addq.b	#2,$24(a0)
0001DBC8 117C 000E 0016             		move.b	#$E,$16(a0)
0001DBCE 117C 0007 0017             		move.b	#7,$17(a0)
0001DBD4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001DBDC 317C 0780 0002             		move.w	#$780,2(a0)
0001DBE2 117C 0004 0001             		move.b	#4,1(a0)
0001DBE8 117C 0000 0018             		move.b	#0,$18(a0)
0001DBEE 117C 0002 001C             		move.b	#2,$1C(a0)
0001DBF4 08E8 0002 0022             		bset	#2,$22(a0)
0001DBFA 08E8 0001 0022             		bset	#1,$22(a0)
0001DC00                            
0001DC00                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001DC00 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001DC04 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DC06 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DC0C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001DC0E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001DC14                            
0001DC14                            Obj09_NoDebug:
0001DC14 117C 0000 0030             		move.b	#0,$30(a0)
0001DC1A 7000                       		moveq	#0,d0
0001DC1C 1028 0022                  		move.b	$22(a0),d0
0001DC20 0240 0002                  		andi.w	#2,d0
0001DC24 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001DC28 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001DC2C 4EB9 0001 567A             		jsr	LoadSonicDynPLC
0001DC32 4EF9 0000 E910             		jmp	DisplaySprite
0001DC38                            ; ===========================================================================
0001DC38 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001DC3A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001DC3C                            ; ===========================================================================
0001DC3C                            
0001DC3C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001DC3C 6100 0000                  		bsr.w	Obj09_Jump
0001DC40 6100 0000                  		bsr.w	Obj09_Move
0001DC44 6100 0000                  		bsr.w	Obj09_Fall
0001DC48 6000                       		bra.s	Obj09_Display
0001DC4A                            ; ===========================================================================
0001DC4A                            
0001DC4A                            Obj09_InAir:				; XREF: Obj09_Modes
0001DC4A 6100 0000                  		bsr.w	nullsub_2
0001DC4E 6100 0000                  		bsr.w	Obj09_Move
0001DC52 6100 0000                  		bsr.w	Obj09_Fall
0001DC56                            
0001DC56                            Obj09_Display:				; XREF: Obj09_OnWall
0001DC56 6100 0000                  		bsr.w	Obj09_ChkItems
0001DC5A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001DC5E 4EB9 0000 E8F6             		jsr	SpeedToPos
0001DC64 6100 0000                  		bsr.w	SS_FixCamera
0001DC68 3038 F780                  		move.w	($FFFFF780).w,d0
0001DC6C D078 F782                  		add.w	($FFFFF782).w,d0
0001DC70 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DC74 4EB9 0001 5400             		jsr	Sonic_Animate
0001DC7A 4E75                       		rts	
0001DC7C                            
0001DC7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC7C                            
0001DC7C                            
0001DC7C                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001DC7C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001DC82 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001DC84 6100 0000                  		bsr.w	Obj09_MoveLeft
0001DC88                            
0001DC88                            Obj09_ChkRight:
0001DC88 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001DC8E 6700                       		beq.s	loc_1BA78	; if not, branch
0001DC90 6100 0000                  		bsr.w	Obj09_MoveRight
0001DC94                            
0001DC94                            loc_1BA78:
0001DC94 1038 F602                  		move.b	($FFFFF602).w,d0
0001DC98 0200 000C                  		andi.b	#$C,d0
0001DC9C 6600                       		bne.s	loc_1BAA8
0001DC9E 3028 0020                  		move.w	$20(a0),d0
0001DCA2 6700                       		beq.s	loc_1BAA8
0001DCA4 6B00                       		bmi.s	loc_1BA9A
0001DCA6 0440 000C                  		subi.w	#$C,d0
0001DCAA 6400                       		bcc.s	loc_1BA94
0001DCAC 303C 0000                  		move.w	#0,d0
0001DCB0                            
0001DCB0                            loc_1BA94:
0001DCB0 3140 0020                  		move.w	d0,$20(a0)
0001DCB4 6000                       		bra.s	loc_1BAA8
0001DCB6                            ; ===========================================================================
0001DCB6                            
0001DCB6                            loc_1BA9A:
0001DCB6 0640 000C                  		addi.w	#$C,d0
0001DCBA 6400                       		bcc.s	loc_1BAA4
0001DCBC 303C 0000                  		move.w	#0,d0
0001DCC0                            
0001DCC0                            loc_1BAA4:
0001DCC0 3140 0020                  		move.w	d0,$20(a0)
0001DCC4                            
0001DCC4                            loc_1BAA8:
0001DCC4 1038 F780                  		move.b	($FFFFF780).w,d0
0001DCC8 0600 0020                  		addi.b	#$20,d0
0001DCCC 0200 00C0                  		andi.b	#$C0,d0
0001DCD0 4400                       		neg.b	d0
0001DCD2 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DCD8 C3E8 0020                  		muls.w	$20(a0),d1
0001DCDC D3A8 0008                  		add.l	d1,8(a0)
0001DCE0 C1E8 0020                  		muls.w	$20(a0),d0
0001DCE4 D1A8 000C                  		add.l	d0,$C(a0)
0001DCE8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001DCEC 2428 000C                  		move.l	$C(a0),d2
0001DCF0 2628 0008                  		move.l	8(a0),d3
0001DCF4 6100 0000                  		bsr.w	sub_1BCE8
0001DCF8 6700                       		beq.s	loc_1BAF2
0001DCFA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DCFE 93A8 0008                  		sub.l	d1,8(a0)
0001DD02 91A8 000C                  		sub.l	d0,$C(a0)
0001DD06 317C 0000 0020             		move.w	#0,$20(a0)
0001DD0C 4E75                       		rts	
0001DD0E                            ; ===========================================================================
0001DD0E                            
0001DD0E                            loc_1BAF2:
0001DD0E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001DD12 4E75                       		rts	
0001DD14                            ; End of function Obj09_Move
0001DD14                            
0001DD14                            
0001DD14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD14                            
0001DD14                            
0001DD14                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001DD14 08E8 0000 0022             		bset	#0,$22(a0)
0001DD1A 3028 0020                  		move.w	$20(a0),d0
0001DD1E 6700                       		beq.s	loc_1BB06
0001DD20 6A00                       		bpl.s	loc_1BB1A
0001DD22                            
0001DD22                            loc_1BB06:
0001DD22 0440 000C                  		subi.w	#$C,d0
0001DD26 0C40 F800                  		cmpi.w	#-$800,d0
0001DD2A 6E00                       		bgt.s	loc_1BB14
0001DD2C 303C F800                  		move.w	#-$800,d0
0001DD30                            
0001DD30                            loc_1BB14:
0001DD30 3140 0020                  		move.w	d0,$20(a0)
0001DD34 4E75                       		rts	
0001DD36                            ; ===========================================================================
0001DD36                            
0001DD36                            loc_1BB1A:
0001DD36 0440 0040                  		subi.w	#$40,d0
0001DD3A 6400                       		bcc.s	loc_1BB22
0001DD3C 4E71                       		nop	
0001DD3E                            
0001DD3E                            loc_1BB22:
0001DD3E 3140 0020                  		move.w	d0,$20(a0)
0001DD42 4E75                       		rts	
0001DD44                            ; End of function Obj09_MoveLeft
0001DD44                            
0001DD44                            
0001DD44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD44                            
0001DD44                            
0001DD44                            Obj09_MoveRight:			; XREF: Obj09_Move
0001DD44 08A8 0000 0022             		bclr	#0,$22(a0)
0001DD4A 3028 0020                  		move.w	$20(a0),d0
0001DD4E 6B00                       		bmi.s	loc_1BB48
0001DD50 0640 000C                  		addi.w	#$C,d0
0001DD54 0C40 0800                  		cmpi.w	#$800,d0
0001DD58 6D00                       		blt.s	loc_1BB42
0001DD5A 303C 0800                  		move.w	#$800,d0
0001DD5E                            
0001DD5E                            loc_1BB42:
0001DD5E 3140 0020                  		move.w	d0,$20(a0)
0001DD62 6000                       		bra.s	locret_1BB54
0001DD64                            ; ===========================================================================
0001DD64                            
0001DD64                            loc_1BB48:
0001DD64 0640 0040                  		addi.w	#$40,d0
0001DD68 6400                       		bcc.s	loc_1BB50
0001DD6A 4E71                       		nop	
0001DD6C                            
0001DD6C                            loc_1BB50:
0001DD6C 3140 0020                  		move.w	d0,$20(a0)
0001DD70                            
0001DD70                            locret_1BB54:
0001DD70 4E75                       		rts	
0001DD72                            ; End of function Obj09_MoveRight
0001DD72                            
0001DD72                            
0001DD72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD72                            
0001DD72                            
0001DD72                            Obj09_Jump:				; XREF: Obj09_OnWall
0001DD72 1038 F603                  		move.b	($FFFFF603).w,d0
0001DD76 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001DD7A 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001DD7C 1038 F780                  		move.b	($FFFFF780).w,d0
0001DD80 0200 00FC                  		andi.b	#$FC,d0
0001DD84 4400                       		neg.b	d0
0001DD86 0400 0040                  		subi.b	#$40,d0
0001DD8A 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DD90 C3FC 0680                  		muls.w	#$680,d1
0001DD94 E081                       		asr.l	#8,d1
0001DD96 3141 0010                  		move.w	d1,$10(a0)
0001DD9A C1FC 0680                  		muls.w	#$680,d0
0001DD9E E080                       		asr.l	#8,d0
0001DDA0 3140 0012                  		move.w	d0,$12(a0)
0001DDA4 08E8 0001 0022             		bset	#1,$22(a0)
0001DDAA 303C 00A0                  		move.w	#$A0,d0
0001DDAE 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play jumping sound
0001DDB4                            
0001DDB4                            Obj09_NoJump:
0001DDB4 4E75                       		rts	
0001DDB6                            ; End of function Obj09_Jump
0001DDB6                            
0001DDB6                            
0001DDB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDB6                            
0001DDB6                            
0001DDB6                            nullsub_2:				; XREF: Obj09_InAir
0001DDB6 4E75                       		rts	
0001DDB8                            ; End of function nullsub_2
0001DDB8                            
0001DDB8                            ; ===========================================================================
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8                            ; unused subroutine to limit Sonic's upward vertical speed
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8 323C FC00                  		move.w	#-$400,d1
0001DDBC B268 0012                  		cmp.w	$12(a0),d1
0001DDC0 6F00                       		ble.s	locret_1BBB4
0001DDC2 1038 F602                  		move.b	($FFFFF602).w,d0
0001DDC6 0200 0070                  		andi.b	#$70,d0
0001DDCA 6600                       		bne.s	locret_1BBB4
0001DDCC 3141 0012                  		move.w	d1,$12(a0)
0001DDD0                            
0001DDD0                            locret_1BBB4:
0001DDD0 4E75                       		rts	
0001DDD2                            ; ---------------------------------------------------------------------------
0001DDD2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001DDD2                            ; ---------------------------------------------------------------------------
0001DDD2                            
0001DDD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDD2                            
0001DDD2                            
0001DDD2                            SS_FixCamera:				; XREF: Obj09
0001DDD2 3428 000C                  		move.w	$C(a0),d2
0001DDD6 3628 0008                  		move.w	8(a0),d3
0001DDDA 3038 F700                  		move.w	($FFFFF700).w,d0
0001DDDE 0443 00A0                  		subi.w	#$A0,d3
0001DDE2 6500                       		bcs.s	loc_1BBCE
0001DDE4 9043                       		sub.w	d3,d0
0001DDE6 9178 F700                  		sub.w	d0,($FFFFF700).w
0001DDEA                            
0001DDEA                            loc_1BBCE:
0001DDEA 3038 F704                  		move.w	($FFFFF704).w,d0
0001DDEE 0442 0070                  		subi.w	#$70,d2
0001DDF2 6500                       		bcs.s	locret_1BBDE
0001DDF4 9042                       		sub.w	d2,d0
0001DDF6 9178 F704                  		sub.w	d0,($FFFFF704).w
0001DDFA                            
0001DDFA                            locret_1BBDE:
0001DDFA 4E75                       		rts	
0001DDFC                            ; End of function SS_FixCamera
0001DDFC                            
0001DDFC                            ; ===========================================================================
0001DDFC                            
0001DDFC                            Obj09_ExitStage:			; XREF: Obj09_Index
0001DDFC 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001DE02 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001DE08 6600                       		bne.s	loc_1BBF4
0001DE0A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DE10                            
0001DE10                            loc_1BBF4:
0001DE10 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001DE16 6D00                       		blt.s	loc_1BC12
0001DE18 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001DE1E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001DE24 5428 0024                  		addq.b	#2,$24(a0)
0001DE28 317C 003C 0038             		move.w	#$3C,$38(a0)
0001DE2E                            
0001DE2E                            loc_1BC12:
0001DE2E 3038 F780                  		move.w	($FFFFF780).w,d0
0001DE32 D078 F782                  		add.w	($FFFFF782).w,d0
0001DE36 31C0 F780                  		move.w	d0,($FFFFF780).w
0001DE3A 4EB9 0001 5400             		jsr	Sonic_Animate
0001DE40 4EB9 0001 567A             		jsr	LoadSonicDynPLC
0001DE46 6100 FF8A                  		bsr.w	SS_FixCamera
0001DE4A 4EF9 0000 E910             		jmp	DisplaySprite
0001DE50                            ; ===========================================================================
0001DE50                            
0001DE50                            Obj09_Exit2:				; XREF: Obj09_Index
0001DE50 5368 0038                  		subq.w	#1,$38(a0)
0001DE54 6600                       		bne.s	loc_1BC40
0001DE56 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001DE5C                            
0001DE5C                            loc_1BC40:
0001DE5C 4EB9 0001 5400             		jsr	Sonic_Animate
0001DE62 4EB9 0001 567A             		jsr	LoadSonicDynPLC
0001DE68 6100 FF68                  		bsr.w	SS_FixCamera
0001DE6C 4EF9 0000 E910             		jmp	DisplaySprite
0001DE72                            
0001DE72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE72                            
0001DE72                            
0001DE72                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001DE72 2428 000C                  		move.l	$C(a0),d2
0001DE76 2628 0008                  		move.l	8(a0),d3
0001DE7A 1038 F780                  		move.b	($FFFFF780).w,d0
0001DE7E 0200 00FC                  		andi.b	#$FC,d0
0001DE82 4EB9 0000 29CC             		jsr	(CalcSine).l
0001DE88 3828 0010                  		move.w	$10(a0),d4
0001DE8C 48C4                       		ext.l	d4
0001DE8E E184                       		asl.l	#8,d4
0001DE90 C1FC 002A                  		muls.w	#$2A,d0
0001DE94 D084                       		add.l	d4,d0
0001DE96 3828 0012                  		move.w	$12(a0),d4
0001DE9A 48C4                       		ext.l	d4
0001DE9C E184                       		asl.l	#8,d4
0001DE9E C3FC 002A                  		muls.w	#$2A,d1
0001DEA2 D284                       		add.l	d4,d1
0001DEA4 D680                       		add.l	d0,d3
0001DEA6 6100 0000                  		bsr.w	sub_1BCE8
0001DEAA 6700                       		beq.s	loc_1BCB0
0001DEAC 9680                       		sub.l	d0,d3
0001DEAE 7000                       		moveq	#0,d0
0001DEB0 3140 0010                  		move.w	d0,$10(a0)
0001DEB4 08A8 0001 0022             		bclr	#1,$22(a0)
0001DEBA D481                       		add.l	d1,d2
0001DEBC 6100 0000                  		bsr.w	sub_1BCE8
0001DEC0 6700                       		beq.s	loc_1BCC6
0001DEC2 9481                       		sub.l	d1,d2
0001DEC4 7200                       		moveq	#0,d1
0001DEC6 3141 0012                  		move.w	d1,$12(a0)
0001DECA 4E75                       		rts	
0001DECC                            ; ===========================================================================
0001DECC                            
0001DECC                            loc_1BCB0:
0001DECC D481                       		add.l	d1,d2
0001DECE 6100 0000                  		bsr.w	sub_1BCE8
0001DED2 6700                       		beq.s	loc_1BCD4
0001DED4 9481                       		sub.l	d1,d2
0001DED6 7200                       		moveq	#0,d1
0001DED8 3141 0012                  		move.w	d1,$12(a0)
0001DEDC 08A8 0001 0022             		bclr	#1,$22(a0)
0001DEE2                            
0001DEE2                            loc_1BCC6:
0001DEE2 E080                       		asr.l	#8,d0
0001DEE4 E081                       		asr.l	#8,d1
0001DEE6 3140 0010                  		move.w	d0,$10(a0)
0001DEEA 3141 0012                  		move.w	d1,$12(a0)
0001DEEE 4E75                       		rts	
0001DEF0                            ; ===========================================================================
0001DEF0                            
0001DEF0                            loc_1BCD4:
0001DEF0 E080                       		asr.l	#8,d0
0001DEF2 E081                       		asr.l	#8,d1
0001DEF4 3140 0010                  		move.w	d0,$10(a0)
0001DEF8 3141 0012                  		move.w	d1,$12(a0)
0001DEFC 08E8 0001 0022             		bset	#1,$22(a0)
0001DF02 4E75                       		rts	
0001DF04                            ; End of function Obj09_Fall
0001DF04                            
0001DF04                            
0001DF04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF04                            
0001DF04                            
0001DF04                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001DF04 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DF0A 7800                       		moveq	#0,d4
0001DF0C 4842                       		swap	d2
0001DF0E 3802                       		move.w	d2,d4
0001DF10 4842                       		swap	d2
0001DF12 0644 0044                  		addi.w	#$44,d4
0001DF16 88FC 0018                  		divu.w	#$18,d4
0001DF1A C8FC 0080                  		mulu.w	#$80,d4
0001DF1E D3C4                       		adda.l	d4,a1
0001DF20 7800                       		moveq	#0,d4
0001DF22 4843                       		swap	d3
0001DF24 3803                       		move.w	d3,d4
0001DF26 4843                       		swap	d3
0001DF28 0644 0014                  		addi.w	#$14,d4
0001DF2C 88FC 0018                  		divu.w	#$18,d4
0001DF30 D2C4                       		adda.w	d4,a1
0001DF32 7A00                       		moveq	#0,d5
0001DF34 1819                       		move.b	(a1)+,d4
0001DF36 6100                       		bsr.s	sub_1BD30
0001DF38 1819                       		move.b	(a1)+,d4
0001DF3A 6100                       		bsr.s	sub_1BD30
0001DF3C D2FC 007E                  		adda.w	#$7E,a1
0001DF40 1819                       		move.b	(a1)+,d4
0001DF42 6100                       		bsr.s	sub_1BD30
0001DF44 1819                       		move.b	(a1)+,d4
0001DF46 6100                       		bsr.s	sub_1BD30
0001DF48 4A05                       		tst.b	d5
0001DF4A 4E75                       		rts	
0001DF4C                            ; End of function sub_1BCE8
0001DF4C                            
0001DF4C                            
0001DF4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF4C                            
0001DF4C                            
0001DF4C                            sub_1BD30:				; XREF: sub_1BCE8
0001DF4C 6700                       		beq.s	locret_1BD44
0001DF4E 0C04 0028                  		cmpi.b	#$28,d4
0001DF52 6700                       		beq.s	locret_1BD44
0001DF54 0C04 003A                  		cmpi.b	#$3A,d4
0001DF58 6500                       		bcs.s	loc_1BD46
0001DF5A 0C04 004B                  		cmpi.b	#$4B,d4
0001DF5E 6400                       		bcc.s	loc_1BD46
0001DF60                            
0001DF60                            locret_1BD44:
0001DF60 4E75                       		rts	
0001DF62                            ; ===========================================================================
0001DF62                            
0001DF62                            loc_1BD46:
0001DF62 1144 0030                  		move.b	d4,$30(a0)
0001DF66 2149 0032                  		move.l	a1,$32(a0)
0001DF6A 7AFF                       		moveq	#-1,d5
0001DF6C 4E75                       		rts	
0001DF6E                            ; End of function sub_1BD30
0001DF6E                            
0001DF6E                            
0001DF6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF6E                            
0001DF6E                            
0001DF6E                            Obj09_ChkItems:				; XREF: Obj09_Display
0001DF6E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001DF74 7800                       		moveq	#0,d4
0001DF76 3828 000C                  		move.w	$C(a0),d4
0001DF7A 0644 0050                  		addi.w	#$50,d4
0001DF7E 88FC 0018                  		divu.w	#$18,d4
0001DF82 C8FC 0080                  		mulu.w	#$80,d4
0001DF86 D3C4                       		adda.l	d4,a1
0001DF88 7800                       		moveq	#0,d4
0001DF8A 3828 0008                  		move.w	8(a0),d4
0001DF8E 0644 0020                  		addi.w	#$20,d4
0001DF92 88FC 0018                  		divu.w	#$18,d4
0001DF96 D2C4                       		adda.w	d4,a1
0001DF98 1811                       		move.b	(a1),d4
0001DF9A 6600                       		bne.s	Obj09_ChkCont
0001DF9C 4A28 003A                  		tst.b	$3A(a0)
0001DFA0 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001DFA4 7800                       		moveq	#0,d4
0001DFA6 4E75                       		rts	
0001DFA8                            ; ===========================================================================
0001DFA8                            
0001DFA8                            Obj09_ChkCont:
0001DFA8 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001DFAC 6600                       		bne.s	Obj09_Chk1Up
0001DFAE 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001DFB2 6600                       		bne.s	Obj09_GetCont
0001DFB4 14BC 0001                  		move.b	#1,(a2)
0001DFB8 2549 0004                  		move.l	a1,4(a2)
0001DFBC                            
0001DFBC                            Obj09_GetCont:
0001DFBC 4EB9 0000 AEC2             		jsr	CollectRing
0001DFC2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001DFC8 6500                       		bcs.s	Obj09_NoCont
0001DFCA 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001DFD0 6600                       		bne.s	Obj09_NoCont
0001DFD2 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001DFD8 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001DFDE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001DFE2 303C 00BF                  		move.w	#$BF,d0
0001DFE6 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra continue sound
0001DFEC                            
0001DFEC                            Obj09_NoCont:
0001DFEC 7800                       		moveq	#0,d4
0001DFEE 4E75                       		rts	
0001DFF0                            ; ===========================================================================
0001DFF0                            
0001DFF0                            Obj09_Chk1Up:
0001DFF0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001DFF4 6600                       		bne.s	Obj09_ChkEmer
0001DFF6 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001DFFA 6600                       		bne.s	Obj09_Get1Up
0001DFFC 14BC 0003                  		move.b	#3,(a2)
0001E000 2549 0004                  		move.l	a1,4(a2)
0001E004                            
0001E004                            Obj09_Get1Up:
0001E004 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001E008 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001E00C 303C 0088                  		move.w	#$88,d0
0001E010 4EB9 0000 11F0             		jsr	(PlaySound).l	; play extra life music
0001E016 7800                       		moveq	#0,d4
0001E018 4E75                       		rts	
0001E01A                            ; ===========================================================================
0001E01A                            
0001E01A                            Obj09_ChkEmer:
0001E01A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001E01E 6500                       		bcs.s	Obj09_ChkGhost
0001E020 0C04 0040                  		cmpi.b	#$40,d4
0001E024 6200                       		bhi.s	Obj09_ChkGhost
0001E026 6100 F6AE                  		bsr.w	SS_RemoveCollectedItem
0001E02A 6600                       		bne.s	Obj09_GetEmer
0001E02C 14BC 0005                  		move.b	#5,(a2)
0001E030 2549 0004                  		move.l	a1,4(a2)
0001E034                            
0001E034                            Obj09_GetEmer:
0001E034 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001E03A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001E03C 0404 003B                  		subi.b	#$3B,d4
0001E040 7000                       		moveq	#0,d0
0001E042 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001E046 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001E04A 1584 0000                  		move.b	d4,(a2,d0.w)
0001E04E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001E052 11FC 0007 F5CE             		move.b	#face_happy,(SonimeSST+sonime_face).w
0001E058 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E05E                            
0001E05E                            Obj09_NoEmer:
0001E05E 303C 0093                  		move.w	#$93,d0
0001E062 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play emerald music
0001E068 7800                       		moveq	#0,d4
0001E06A 4E75                       		rts	
0001E06C                            ; ===========================================================================
0001E06C                            
0001E06C                            Obj09_ChkGhost:
0001E06C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001E070 6600                       		bne.s	Obj09_ChkGhostTag
0001E072 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001E078                            
0001E078                            Obj09_ChkGhostTag:
0001E078 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001E07C 6600                       		bne.s	Obj09_NoGhost
0001E07E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001E084 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001E086 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001E08C                            
0001E08C                            Obj09_NoGhost:
0001E08C 78FF                       		moveq	#-1,d4
0001E08E 4E75                       		rts	
0001E090                            ; ===========================================================================
0001E090                            
0001E090                            Obj09_MakeGhostSolid:
0001E090 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001E096 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001E098 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E09E 723F                       		moveq	#$3F,d1
0001E0A0                            
0001E0A0                            Obj09_GhostLoop2:
0001E0A0 743F                       		moveq	#$3F,d2
0001E0A2                            
0001E0A2                            Obj09_GhostLoop:
0001E0A2 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001E0A6 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001E0A8 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001E0AC                            
0001E0AC                            Obj09_NoReplace:
0001E0AC 5249                       		addq.w	#1,a1
0001E0AE 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001E0B2 43E9 0040                  		lea	$40(a1),a1
0001E0B6 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001E0BA                            
0001E0BA                            Obj09_GhostNotSolid:
0001E0BA 4228 003A                  		clr.b	$3A(a0)
0001E0BE 7800                       		moveq	#0,d4
0001E0C0 4E75                       		rts	
0001E0C2                            ; End of function Obj09_ChkItems
0001E0C2                            
0001E0C2                            
0001E0C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0C2                            
0001E0C2                            
0001E0C2                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001E0C2 1028 0030                  		move.b	$30(a0),d0
0001E0C6 6600                       		bne.s	Obj09_ChkBumper
0001E0C8 5328 0036                  		subq.b	#1,$36(a0)
0001E0CC 6A00                       		bpl.s	loc_1BEA0
0001E0CE 117C 0000 0036             		move.b	#0,$36(a0)
0001E0D4                            
0001E0D4                            loc_1BEA0:
0001E0D4 5328 0037                  		subq.b	#1,$37(a0)
0001E0D8 6A00                       		bpl.s	locret_1BEAC
0001E0DA 117C 0000 0037             		move.b	#0,$37(a0)
0001E0E0                            
0001E0E0                            locret_1BEAC:
0001E0E0 4E75                       		rts	
0001E0E2                            ; ===========================================================================
0001E0E2                            
0001E0E2                            Obj09_ChkBumper:
0001E0E2 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001E0E6 6600                       		bne.s	Obj09_GOAL	
0001E0E8 11FC 0008 F5CE             		move.b	#face_confused,(SonimeSST+sonime_face).w
0001E0EE 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E0F4 2228 0032                  		move.l	$32(a0),d1
0001E0F8 0481 00FF 0001             		subi.l	#$FF0001,d1
0001E0FE 3401                       		move.w	d1,d2
0001E100 0241 007F                  		andi.w	#$7F,d1
0001E104 C2FC 0018                  		mulu.w	#$18,d1
0001E108 0441 0014                  		subi.w	#$14,d1
0001E10C EE4A                       		lsr.w	#7,d2
0001E10E 0242 007F                  		andi.w	#$7F,d2
0001E112 C4FC 0018                  		mulu.w	#$18,d2
0001E116 0442 0044                  		subi.w	#$44,d2
0001E11A 9268 0008                  		sub.w	8(a0),d1
0001E11E 9468 000C                  		sub.w	$C(a0),d2
0001E122 4EB9 0000 2C94             		jsr	(CalcAngle).l
0001E128 4EB9 0000 29CC             		jsr	(CalcSine).l
0001E12E C3FC F900                  		muls.w	#-$700,d1
0001E132 E081                       		asr.l	#8,d1
0001E134 3141 0010                  		move.w	d1,$10(a0)
0001E138 C1FC F900                  		muls.w	#-$700,d0
0001E13C E080                       		asr.l	#8,d0
0001E13E 3140 0012                  		move.w	d0,$12(a0)
0001E142 08E8 0001 0022             		bset	#1,$22(a0)
0001E148 6100 F58C                  		bsr.w	SS_RemoveCollectedItem
0001E14C 6600                       		bne.s	Obj09_BumpSnd
0001E14E 14BC 0002                  		move.b	#2,(a2)
0001E152 2028 0032                  		move.l	$32(a0),d0
0001E156 5380                       		subq.l	#1,d0
0001E158 2540 0004                  		move.l	d0,4(a2)
0001E15C                            
0001E15C                            Obj09_BumpSnd:
0001E15C 303C 00B4                  		move.w	#$B4,d0
0001E160 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play bumper sound
0001E166                            ; ===========================================================================
0001E166                            
0001E166                            Obj09_GOAL:
0001E166 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001E16A 6600                       		bne.s	Obj09_UPblock
0001E16C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001E170 11FC 0005 F5CE             		move.b	#face_frustrated,(SonimeSST+sonime_face).w
0001E176 31FC 0080 F5D0             		move.w	#$80,(SonimeSST+sonime_facetimer).w
0001E17C 303C 00A8                  		move.w	#$A8,d0		; change item
0001E180 4EB9 0000 11F6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001E186 4E75                       		rts	
0001E188                            ; ===========================================================================
0001E188                            
0001E188                            Obj09_UPblock:
0001E188 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001E18C 6600                       		bne.s	Obj09_DOWNblock
0001E18E 4A28 0036                  		tst.b	$36(a0)
0001E192 6600 0000                  		bne.w	Obj09_NoGlass
0001E196 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E19C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E1A2 6700                       		beq.s	Obj09_UPsnd
0001E1A4 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001E1A8 2268 0032                  		movea.l	$32(a0),a1
0001E1AC 5389                       		subq.l	#1,a1
0001E1AE 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001E1B2                            
0001E1B2                            Obj09_UPsnd:
0001E1B2 303C 00A9                  		move.w	#$A9,d0
0001E1B6 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E1BC                            ; ===========================================================================
0001E1BC                            
0001E1BC                            Obj09_DOWNblock:
0001E1BC 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001E1C0 6600                       		bne.s	Obj09_Rblock
0001E1C2 4A28 0036                  		tst.b	$36(a0)
0001E1C6 6600 0000                  		bne.w	Obj09_NoGlass
0001E1CA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001E1D0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001E1D6 6600                       		bne.s	Obj09_DOWNsnd
0001E1D8 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001E1DC 2268 0032                  		movea.l	$32(a0),a1
0001E1E0 5389                       		subq.l	#1,a1
0001E1E2 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001E1E6                            
0001E1E6                            Obj09_DOWNsnd:
0001E1E6 303C 00A9                  		move.w	#$A9,d0
0001E1EA 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001E1F0                            ; ===========================================================================
0001E1F0                            
0001E1F0                            Obj09_Rblock:
0001E1F0 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001E1F4 6600                       		bne.s	Obj09_ChkGlass
0001E1F6 4A28 0037                  		tst.b	$37(a0)
0001E1FA 6600 0000                  		bne.w	Obj09_NoGlass
0001E1FE 117C 001E 0037             		move.b	#$1E,$37(a0)
0001E204 6100 F4D0                  		bsr.w	SS_RemoveCollectedItem
0001E208 6600                       		bne.s	Obj09_RevStage
0001E20A 14BC 0004                  		move.b	#4,(a2)
0001E20E 2028 0032                  		move.l	$32(a0),d0
0001E212 5380                       		subq.l	#1,d0
0001E214 2540 0004                  		move.l	d0,4(a2)
0001E218                            
0001E218                            Obj09_RevStage:
0001E218 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001E21C 303C 00A9                  		move.w	#$A9,d0
0001E220 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play sound
0001E226                            ; ===========================================================================
0001E226                            
0001E226                            Obj09_ChkGlass:
0001E226 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001E22A 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001E22C 0C00 002E                  		cmpi.b	#$2E,d0
0001E230 6700                       		beq.s	Obj09_Glass
0001E232 0C00 002F                  		cmpi.b	#$2F,d0
0001E236 6700                       		beq.s	Obj09_Glass
0001E238 0C00 0030                  		cmpi.b	#$30,d0
0001E23C 6600 0000                  		bne.w	Obj09_NoGlass	; if not, branch
0001E240                            
0001E240                            Obj09_Glass:
0001E240 0C38 0007 F5CE             		cmpi.b	#face_happy,(SonimeSST+sonime_face).w
0001E246 6700                       		beq.s	@happy
0001E248 11FC 000B F5CE             		move.b	#face_impatient,(SonimeSST+sonime_face).w
0001E24E 31FC 0020 F5D0             		move.w	#$20,(SonimeSST+sonime_facetimer).w
0001E254 2F08 2F09 41F9 0000 0000+  		PlayPCM2	SonimeImpatient		
0001E2AA                            
0001E2AA                            	@happy:
0001E2AA 6100 F42A                  		bsr.w	SS_RemoveCollectedItem
0001E2AE 6600                       		bne.s	Obj09_GlassSnd
0001E2B0 14BC 0006                  		move.b	#6,(a2)
0001E2B4 2268 0032                  		movea.l	$32(a0),a1
0001E2B8 5389                       		subq.l	#1,a1
0001E2BA 2549 0004                  		move.l	a1,4(a2)
0001E2BE 1011                       		move.b	(a1),d0
0001E2C0 5200                       		addq.b	#1,d0		; change glass type when touched
0001E2C2 0C00 0030                  		cmpi.b	#$30,d0
0001E2C6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001E2C8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001E2CA                            
0001E2CA                            Obj09_GlassUpdate:
0001E2CA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001E2CE                            
0001E2CE                            Obj09_GlassSnd:
0001E2CE 303C 00BA                  		move.w	#$BA,d0
0001E2D2 4EF9 0000 11F6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001E2D8                            ; ===========================================================================
0001E2D8                            
0001E2D8                            Obj09_NoGlass:
0001E2D8 4E75                       		rts	
0001E2DA                            ; End of function Obj09_ChkItems2
0001E2DA                            
0001E2DA                            ; ===========================================================================
0001E2DA                            ; ---------------------------------------------------------------------------
0001E2DA                            ; Object 10 - blank
0001E2DA                            ; ---------------------------------------------------------------------------
0001E2DA                            
0001E2DA                            Obj10:					; XREF: Obj_Index
0001E2DA 4E75                       		rts	
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC                            ; Subroutine to	animate	level graphics
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC                            
0001E2DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2DC                            
0001E2DC                            
0001E2DC                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001E2DC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E2E0 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001E2E2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E2E8 6100 0000                  		bsr.w	AniArt_GiantRing
0001E2EC 7000                       		moveq	#0,d0
0001E2EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E2F2 D040                       		add.w	d0,d0
0001E2F4 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001E2F8 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001E2FC                            ; ===========================================================================
0001E2FC                            
0001E2FC                            AniArt_Pause:
0001E2FC 4E75                       		rts	
0001E2FE                            ; End of function AniArt_Load
0001E2FE                            
0001E2FE                            ; ===========================================================================
0001E2FE 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001E302 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001E306 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001E30A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001E30C                            ; ===========================================================================
0001E30C                            ; ---------------------------------------------------------------------------
0001E30C                            ; Animated pattern routine - Green Hill
0001E30C                            ; ---------------------------------------------------------------------------
0001E30C                            
0001E30C                            AniArt_GHZ:				; XREF: AniArt_Index
0001E30C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E310 6A00                       		bpl.s	loc_1C08A
0001E312 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001E318 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001E31E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E322 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E326 0240 0001                  		andi.w	#1,d0
0001E32A 6700                       		beq.s	loc_1C078
0001E32C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001E330                            
0001E330                            loc_1C078:
0001E330 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001E33A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001E33E 6000 0000                  		bra.w	LoadTiles
0001E342                            ; ===========================================================================
0001E342                            
0001E342                            loc_1C08A:
0001E342 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E346 6A00                       		bpl.s	loc_1C0C0
0001E348 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001E34E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E354 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E358 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E35C 0240 0001                  		andi.w	#1,d0
0001E360 6700                       		beq.s	loc_1C0AE
0001E362 43E9 0200                  		lea	$200(a1),a1
0001E366                            
0001E366                            loc_1C0AE:
0001E366 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E370 323C 000F                  		move.w	#$F,d1
0001E374 6000 0000                  		bra.w	LoadTiles
0001E378                            ; ===========================================================================
0001E378                            
0001E378                            loc_1C0C0:
0001E378 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E37C 6A00                       		bpl.s	locret_1C10C
0001E37E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E384 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E388 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E38C 0240 0003                  		andi.w	#3,d0
0001E390 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001E394 0800 0000                  		btst	#0,d0
0001E398 6600                       		bne.s	loc_1C0E8
0001E39A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001E3A0                            
0001E3A0                            loc_1C0E8:
0001E3A0 EF48                       		lsl.w	#7,d0
0001E3A2 3200                       		move.w	d0,d1
0001E3A4 D040                       		add.w	d0,d0
0001E3A6 D041                       		add.w	d1,d0
0001E3A8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E3B2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E3B8 43F1 0000                  		lea	(a1,d0.w),a1
0001E3BC 323C 000B                  		move.w	#$B,d1
0001E3C0 6100 0000                  		bsr.w	LoadTiles
0001E3C4                            
0001E3C4                            locret_1C10C:
0001E3C4 4E75                       		rts	
0001E3C6                            ; ===========================================================================
0001E3C6 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001E3CA                            ; ===========================================================================
0001E3CA                            ; ---------------------------------------------------------------------------
0001E3CA                            ; Animated pattern routine - Marble
0001E3CA                            ; ---------------------------------------------------------------------------
0001E3CA                            
0001E3CA                            AniArt_MZ:				; XREF: AniArt_Index
0001E3CA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E3CE 6A00                       		bpl.s	loc_1C150
0001E3D0 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001E3D6 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001E3DC 7000                       		moveq	#0,d0
0001E3DE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E3E2 5200                       		addq.b	#1,d0
0001E3E4 0C00 0003                  		cmpi.b	#3,d0
0001E3E8 6600                       		bne.s	loc_1C134
0001E3EA 7000                       		moveq	#0,d0
0001E3EC                            
0001E3EC                            loc_1C134:
0001E3EC 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001E3F0 C0FC 0100                  		mulu.w	#$100,d0
0001E3F4 D2C0                       		adda.w	d0,a1
0001E3F6 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001E400 323C 0007                  		move.w	#7,d1
0001E404 6100 0000                  		bsr.w	LoadTiles
0001E408                            
0001E408                            loc_1C150:
0001E408 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E40C 6A00                       		bpl.s	loc_1C1AE
0001E40E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001E414 7000                       		moveq	#0,d0
0001E416 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E41A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001E420 EE58                       		ror.w	#7,d0
0001E422 D8C0                       		adda.w	d0,a4
0001E424 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001E42E 7600                       		moveq	#0,d3
0001E430 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001E434 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E438 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001E43C 343C 0003                  		move.w	#3,d2
0001E440                            
0001E440                            loc_1C188:
0001E440 3003                       		move.w	d3,d0
0001E442 D040                       		add.w	d0,d0
0001E444 0240 001E                  		andi.w	#$1E,d0
0001E448 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001E44E 3033 0000                  		move.w	(a3,d0.w),d0
0001E452 47F3 0000                  		lea	(a3,d0.w),a3
0001E456 224C                       		movea.l	a4,a1
0001E458 323C 001F                  		move.w	#$1F,d1
0001E45C 4E93                       		jsr	(a3)
0001E45E 5843                       		addq.w	#4,d3
0001E460 51CA FFDE                  		dbf	d2,loc_1C188
0001E464 4E75                       		rts	
0001E466                            ; ===========================================================================
0001E466                            
0001E466                            loc_1C1AE:
0001E466 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E46A 6A00 0000                  		bpl.w	locret_1C1EA
0001E46E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E474 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001E47A 7000                       		moveq	#0,d0
0001E47C 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001E480 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001E484 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001E48A C0FC 00C0                  		mulu.w	#$C0,d0
0001E48E D2C0                       		adda.w	d0,a1
0001E490 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001E49A 323C 0005                  		move.w	#5,d1
0001E49E 6000 0000                  		bra.w	LoadTiles
0001E4A2                            ; ===========================================================================
0001E4A2                            
0001E4A2                            locret_1C1EA:
0001E4A2 4E75                       		rts	
0001E4A4                            ; ===========================================================================
0001E4A4                            ; ---------------------------------------------------------------------------
0001E4A4                            ; Animated pattern routine - Scrap Brain
0001E4A4                            ; ---------------------------------------------------------------------------
0001E4A4                            
0001E4A4                            AniArt_SBZ:				; XREF: AniArt_Index
0001E4A4 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001E4A8 6700                       		beq.s	loc_1C1F8
0001E4AA 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001E4AE 6000                       		bra.s	loc_1C250
0001E4B0                            ; ===========================================================================
0001E4B0                            
0001E4B0                            loc_1C1F8:
0001E4B0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001E4B4 6A00                       		bpl.s	loc_1C250
0001E4B6 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001E4BC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001E4C2 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001E4CC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001E4D0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001E4D4 0240 0007                  		andi.w	#7,d0
0001E4D8 6700                       		beq.s	loc_1C234
0001E4DA 5340                       		subq.w	#1,d0
0001E4DC C0FC 0180                  		mulu.w	#$180,d0
0001E4E0 43F1 0000                  		lea	(a1,d0.w),a1
0001E4E4 323C 000B                  		move.w	#$B,d1
0001E4E8 6000 0000                  		bra.w	LoadTiles
0001E4EC                            ; ===========================================================================
0001E4EC                            
0001E4EC                            loc_1C234:
0001E4EC 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001E4F2                            
0001E4F2                            loc_1C23A:
0001E4F2 323C 0005                  		move.w	#5,d1
0001E4F6 6100 0000                  		bsr.w	LoadTiles
0001E4FA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E500 323C 0005                  		move.w	#5,d1
0001E504 6000 0000                  		bra.w	LoadTiles
0001E508                            ; ===========================================================================
0001E508                            
0001E508                            loc_1C250:
0001E508 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001E50C 6700                       		beq.s	loc_1C25C
0001E50E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E512 6000                       		bra.s	locret_1C2A0
0001E514                            ; ===========================================================================
0001E514                            
0001E514                            loc_1C25C:
0001E514 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E518 6A00                       		bpl.s	locret_1C2A0
0001E51A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E520 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001E526 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001E530 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E534 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E538 0240 0007                  		andi.w	#7,d0
0001E53C 6700                       		beq.s	loc_1C298
0001E53E 5340                       		subq.w	#1,d0
0001E540 C0FC 0180                  		mulu.w	#$180,d0
0001E544 43F1 0000                  		lea	(a1,d0.w),a1
0001E548 323C 000B                  		move.w	#$B,d1
0001E54C 6000 0000                  		bra.w	LoadTiles
0001E550                            ; ===========================================================================
0001E550                            
0001E550                            loc_1C298:
0001E550 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001E556 609A                       		bra.s	loc_1C23A
0001E558                            ; ===========================================================================
0001E558                            
0001E558                            locret_1C2A0:
0001E558 4E75                       		rts	
0001E55A                            ; ===========================================================================
0001E55A                            ; ---------------------------------------------------------------------------
0001E55A                            ; Animated pattern routine - ending sequence
0001E55A                            ; ---------------------------------------------------------------------------
0001E55A                            
0001E55A                            AniArt_Ending:				; XREF: AniArt_Index
0001E55A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001E55E 6A00                       		bpl.s	loc_1C2F4
0001E560 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001E566 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001E56C 45F8 9400                  		lea	($FFFF9400).w,a2
0001E570 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001E574 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001E578 0240 0001                  		andi.w	#1,d0
0001E57C 6700                       		beq.s	loc_1C2CE
0001E57E 43E9 0200                  		lea	$200(a1),a1
0001E582 45EA 0200                  		lea	$200(a2),a2
0001E586                            
0001E586                            loc_1C2CE:
0001E586 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001E590 323C 000F                  		move.w	#$F,d1
0001E594 6100 0000                  		bsr.w	LoadTiles
0001E598 224A                       		movea.l	a2,a1
0001E59A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001E5A4 323C 000F                  		move.w	#$F,d1
0001E5A8 6000 0000                  		bra.w	LoadTiles
0001E5AC                            ; ===========================================================================
0001E5AC                            
0001E5AC                            loc_1C2F4:
0001E5AC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001E5B0 6A00                       		bpl.s	loc_1C33C
0001E5B2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001E5B8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001E5BC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001E5C0 0240 0007                  		andi.w	#7,d0
0001E5C4 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001E5C8 EF48                       		lsl.w	#7,d0
0001E5CA 3200                       		move.w	d0,d1
0001E5CC D040                       		add.w	d0,d0
0001E5CE D041                       		add.w	d1,d0
0001E5D0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001E5DA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001E5E0 43F1 0000                  		lea	(a1,d0.w),a1
0001E5E4 323C 000B                  		move.w	#$B,d1
0001E5E8 6000 0000                  		bra.w	LoadTiles
0001E5EC                            ; ===========================================================================
0001E5EC 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001E5F4                            ; ===========================================================================
0001E5F4                            
0001E5F4                            loc_1C33C:
0001E5F4 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001E5F8 6A00                       		bpl.s	loc_1C37A
0001E5FA 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001E600 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001E604 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001E608 0240 0003                  		andi.w	#3,d0
0001E60C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001E610 E148                       		lsl.w	#8,d0
0001E612 D040                       		add.w	d0,d0
0001E614 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001E61E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001E622 43F1 0000                  		lea	(a1,d0.w),a1
0001E626 323C 000F                  		move.w	#$F,d1
0001E62A 6000 0000                  		bra.w	LoadTiles
0001E62E                            ; ===========================================================================
0001E62E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001E632                            ; ===========================================================================
0001E632                            
0001E632                            loc_1C37A:
0001E632 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001E636 6A00                       		bpl.s	locret_1C3B4
0001E638 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001E63E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001E642 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001E646 0240 0003                  		andi.w	#3,d0
0001E64A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001E64E E148                       		lsl.w	#8,d0
0001E650 D040                       		add.w	d0,d0
0001E652 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001E65C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001E660 43F1 0000                  		lea	(a1,d0.w),a1
0001E664 323C 000F                  		move.w	#$F,d1
0001E668 6000 0000                  		bra.w	LoadTiles
0001E66C                            ; ===========================================================================
0001E66C                            
0001E66C                            locret_1C3B4:
0001E66C 4E75                       		rts	
0001E66E                            ; ===========================================================================
0001E66E                            
0001E66E                            AniArt_none:				; XREF: AniArt_Index
0001E66E 4E75                       		rts	
0001E670                            
0001E670                            ; ---------------------------------------------------------------------------
0001E670                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001E670                            ; ---------------------------------------------------------------------------
0001E670                            
0001E670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E670                            
0001E670                            
0001E670                            LoadTiles:
0001E670 2C99                       		move.l	(a1)+,(a6)
0001E672 2C99                       		move.l	(a1)+,(a6)
0001E674 2C99                       		move.l	(a1)+,(a6)
0001E676 2C99                       		move.l	(a1)+,(a6)
0001E678 2C99                       		move.l	(a1)+,(a6)
0001E67A 2C99                       		move.l	(a1)+,(a6)
0001E67C 2C99                       		move.l	(a1)+,(a6)
0001E67E 2C99                       		move.l	(a1)+,(a6)
0001E680 51C9 FFEE                  		dbf	d1,LoadTiles
0001E684 4E75                       		rts	
0001E686                            ; End of function LoadTiles
0001E686                            
0001E686                            ; ===========================================================================
0001E686                            ; ---------------------------------------------------------------------------
0001E686                            ; Animated pattern routine - more Marble Zone
0001E686                            ; ---------------------------------------------------------------------------
0001E686 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001E68A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001E68E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001E692 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001E696 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001E69A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001E69E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001E6A2 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001E6A6                            ; ===========================================================================
0001E6A6                            
0001E6A6                            loc_1C3EE:				; XREF: AniArt_MZextra
0001E6A6 2C91                       		move.l	(a1),(a6)
0001E6A8 43E9 0010                  		lea	$10(a1),a1
0001E6AC 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001E6B0 4E75                       		rts	
0001E6B2                            ; ===========================================================================
0001E6B2                            
0001E6B2                            loc_1C3FA:				; XREF: AniArt_MZextra
0001E6B2 2029 0002                  		move.l	2(a1),d0
0001E6B6 1029 0001                  		move.b	1(a1),d0
0001E6BA E098                       		ror.l	#8,d0
0001E6BC 2C80                       		move.l	d0,(a6)
0001E6BE 43E9 0010                  		lea	$10(a1),a1
0001E6C2 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001E6C6 4E75                       		rts	
0001E6C8                            ; ===========================================================================
0001E6C8                            
0001E6C8                            loc_1C410:				; XREF: AniArt_MZextra
0001E6C8 2CA9 0002                  		move.l	2(a1),(a6)
0001E6CC 43E9 0010                  		lea	$10(a1),a1
0001E6D0 51C9 FFF6                  		dbf	d1,loc_1C410
0001E6D4 4E75                       		rts	
0001E6D6                            ; ===========================================================================
0001E6D6                            
0001E6D6                            loc_1C41E:				; XREF: AniArt_MZextra
0001E6D6 2029 0004                  		move.l	4(a1),d0
0001E6DA 1029 0003                  		move.b	3(a1),d0
0001E6DE E098                       		ror.l	#8,d0
0001E6E0 2C80                       		move.l	d0,(a6)
0001E6E2 43E9 0010                  		lea	$10(a1),a1
0001E6E6 51C9 FFEE                  		dbf	d1,loc_1C41E
0001E6EA 4E75                       		rts	
0001E6EC                            ; ===========================================================================
0001E6EC                            
0001E6EC                            loc_1C434:				; XREF: AniArt_MZextra
0001E6EC 2CA9 0004                  		move.l	4(a1),(a6)
0001E6F0 43E9 0010                  		lea	$10(a1),a1
0001E6F4 51C9 FFF6                  		dbf	d1,loc_1C434
0001E6F8 4E75                       		rts	
0001E6FA                            ; ===========================================================================
0001E6FA                            
0001E6FA                            loc_1C442:				; XREF: AniArt_MZextra
0001E6FA 2029 0006                  		move.l	6(a1),d0
0001E6FE 1029 0005                  		move.b	5(a1),d0
0001E702 E098                       		ror.l	#8,d0
0001E704 2C80                       		move.l	d0,(a6)
0001E706 43E9 0010                  		lea	$10(a1),a1
0001E70A 51C9 FFEE                  		dbf	d1,loc_1C442
0001E70E 4E75                       		rts	
0001E710                            ; ===========================================================================
0001E710                            
0001E710                            loc_1C458:				; XREF: AniArt_MZextra
0001E710 2CA9 0006                  		move.l	6(a1),(a6)
0001E714 43E9 0010                  		lea	$10(a1),a1
0001E718 51C9 FFF6                  		dbf	d1,loc_1C458
0001E71C 4E75                       		rts	
0001E71E                            ; ===========================================================================
0001E71E                            
0001E71E                            loc_1C466:				; XREF: AniArt_MZextra
0001E71E 2029 0008                  		move.l	8(a1),d0
0001E722 1029 0007                  		move.b	7(a1),d0
0001E726 E098                       		ror.l	#8,d0
0001E728 2C80                       		move.l	d0,(a6)
0001E72A 43E9 0010                  		lea	$10(a1),a1
0001E72E 51C9 FFEE                  		dbf	d1,loc_1C466
0001E732 4E75                       		rts	
0001E734                            ; ===========================================================================
0001E734                            
0001E734                            loc_1C47C:				; XREF: AniArt_MZextra
0001E734 2CA9 0008                  		move.l	8(a1),(a6)
0001E738 43E9 0010                  		lea	$10(a1),a1
0001E73C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001E740 4E75                       		rts	
0001E742                            ; ===========================================================================
0001E742                            
0001E742                            loc_1C48A:				; XREF: AniArt_MZextra
0001E742 2029 000A                  		move.l	$A(a1),d0
0001E746 1029 0009                  		move.b	9(a1),d0
0001E74A E098                       		ror.l	#8,d0
0001E74C 2C80                       		move.l	d0,(a6)
0001E74E 43E9 0010                  		lea	$10(a1),a1
0001E752 51C9 FFEE                  		dbf	d1,loc_1C48A
0001E756 4E75                       		rts	
0001E758                            ; ===========================================================================
0001E758                            
0001E758                            loc_1C4A0:				; XREF: AniArt_MZextra
0001E758 2CA9 000A                  		move.l	$A(a1),(a6)
0001E75C 43E9 0010                  		lea	$10(a1),a1
0001E760 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001E764 4E75                       		rts	
0001E766                            ; ===========================================================================
0001E766                            
0001E766                            loc_1C4AE:				; XREF: AniArt_MZextra
0001E766 2029 000C                  		move.l	$C(a1),d0
0001E76A 1029 000B                  		move.b	$B(a1),d0
0001E76E E098                       		ror.l	#8,d0
0001E770 2C80                       		move.l	d0,(a6)
0001E772 43E9 0010                  		lea	$10(a1),a1
0001E776 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001E77A 4E75                       		rts	
0001E77C                            ; ===========================================================================
0001E77C                            
0001E77C                            loc_1C4C4:				; XREF: AniArt_MZextra
0001E77C 2CA9 000C                  		move.l	$C(a1),(a6)
0001E780 43E9 0010                  		lea	$10(a1),a1
0001E784 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001E788 4E75                       		rts	
0001E78A                            ; ===========================================================================
0001E78A                            
0001E78A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001E78A 2029 000C                  		move.l	$C(a1),d0
0001E78E E198                       		rol.l	#8,d0
0001E790 1011                       		move.b	0(a1),d0
0001E792 2C80                       		move.l	d0,(a6)
0001E794 43E9 0010                  		lea	$10(a1),a1
0001E798 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001E79C 4E75                       		rts	
0001E79E                            ; ===========================================================================
0001E79E                            
0001E79E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001E79E 3CA9 000E                  		move.w	$E(a1),(a6)
0001E7A2 3C91                       		move.w	0(a1),(a6)
0001E7A4 43E9 0010                  		lea	$10(a1),a1
0001E7A8 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001E7AC 4E75                       		rts	
0001E7AE                            ; ===========================================================================
0001E7AE                            
0001E7AE                            loc_1C4FA:				; XREF: AniArt_MZextra
0001E7AE 2011                       		move.l	0(a1),d0
0001E7B0 1029 000F                  		move.b	$F(a1),d0
0001E7B4 E098                       		ror.l	#8,d0
0001E7B6 2C80                       		move.l	d0,(a6)
0001E7B8 43E9 0010                  		lea	$10(a1),a1
0001E7BC 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001E7C0 4E75                       		rts	
0001E7C2                            
0001E7C2                            ; ---------------------------------------------------------------------------
0001E7C2                            ; Animated pattern routine - giant ring
0001E7C2                            ; ---------------------------------------------------------------------------
0001E7C2                            
0001E7C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7C2                            
0001E7C2                            
0001E7C2                            AniArt_GiantRing:			; XREF: AniArt_Load
0001E7C2 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001E7C6 6600                       		bne.s	loc_1C518
0001E7C8 4E75                       		rts	
0001E7CA                            ; ===========================================================================
0001E7CA                            
0001E7CA                            loc_1C518:
0001E7CA 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001E7D0 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001E7D6 7000                       		moveq	#0,d0
0001E7D8 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001E7DC 43F1 0000                  		lea	(a1,d0.w),a1
0001E7E0 0640 8000                  		addi.w	#$8000,d0
0001E7E4 E588                       		lsl.l	#2,d0
0001E7E6 E448                       		lsr.w	#2,d0
0001E7E8 0040 4000                  		ori.w	#$4000,d0
0001E7EC 4840                       		swap	d0
0001E7EE 2D40 0004                  		move.l	d0,4(a6)
0001E7F2 323C 000D                  		move.w	#$D,d1
0001E7F6 6000 FE78                  		bra.w	LoadTiles
0001E7FA                            ; End of function AniArt_GiantRing
0001E7FA                            
0001E7FA                            ; ===========================================================================
0001E7FA                            Obj21:                    ; XREF: Obj_Index
0001E7FA 4E75                               rts
0001E7FC                            ; ===========================================================================
0001E7FC                            ; ---------------------------------------------------------------------------
0001E7FC                            ; HUD Object code - SCORE, TIME, RINGS
0001E7FC                            ; ---------------------------------------------------------------------------
0001E7FC                            loc_40804:
0001E7FC 4A78 FE20                      tst.w    ($FFFFFE20).w
0001E800 6700                           beq.s    loc_40820
0001E802 7200                           moveq    #0,d1
0001E804 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E80A 6600                           bne.s    BranchTo_loc_40836
0001E80C 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E812 6600                           bne.s    BranchTo_loc_40836
0001E814 5441                           addq.w    #2,d1
0001E816                            
0001E816                            BranchTo_loc_40836
0001E816 6000                           bra.s    loc_40836
0001E818                            ; ===========================================================================
0001E818                            
0001E818                            loc_40820:
0001E818 7200                           moveq    #0,d1
0001E81A 0838 0003 FE05                 btst    #3,($FFFFFE05).w
0001E820 6600                           bne.s    loc_40836
0001E822 5241                           addq.w    #1,d1
0001E824 0C38 0009 FE23                 cmpi.b    #9,($FFFFFE23).w
0001E82A 6600                           bne.s    loc_40836
0001E82C 5441                           addq.w    #2,d1
0001E82E                            
0001E82E                            loc_40836:
0001E82E 363C 0090                      move.w    #$90,d3
0001E832 343C 0108                      move.w    #$108,d2
0001E836 43F9 0000 0000                 lea    (Map_Obj21).l,a1
0001E83C 367C 06CA                      movea.w    #$6CA,a3
0001E840 D241                           add.w    d1,d1
0001E842 D2F1 1000                      adda.w    (a1,d1.w),a1
0001E846 7200                           moveq    #0,d1
0001E848 1219                           move.b    (a1)+,d1
0001E84A 5301                           subq.b    #1,d1
0001E84C 6B00                           bmi.s    return_40858
0001E84E 4EB9 0000 EBBA                 jsr    sub_D762
0001E854                            
0001E854                            return_40858:
0001E854 4E75                           rts
0001E856                            ; End of function h
0001E856                            ; ===========================================================================
0001E856                            ; ---------------------------------------------------------------------------
0001E856                            ; Sprite mappings - SCORE, TIME, RINGS
0001E856                            ; ---------------------------------------------------------------------------
0001E856                            Map_obj21:
0001E856                            	include "_maps\obj21.asm"
0001E856                            ; ---------------------------------------------------------------------------
0001E856                            ; Sprite mappings - SCORE, TIME, RINGS
0001E856                            ; ---------------------------------------------------------------------------
0001E856 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001E85A 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001E85E 0A                         byte_1C5BC:	dc.b $A
0001E85F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E864 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E869 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E86E 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E873 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E878 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E87D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E882 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E887 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E88C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E891 00                         		dc.b 0
0001E892 0A                         byte_1C5F0:	dc.b $A
0001E893 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E898 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E89D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E8A2 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001E8A7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E8AC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E8B1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E8B6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E8BB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E8C0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E8C5 00                         		dc.b 0
0001E8C6 0A                         byte_1C624:	dc.b $A
0001E8C7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E8CC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E8D1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E8D6 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E8DB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E8E0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001E8E5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001E8EA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E8EF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E8F4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E8F9 00                         		dc.b 0
0001E8FA 0A                         byte_1C658:	dc.b $A
0001E8FB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001E900 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001E905 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001E90A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001E90F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001E914 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001E919 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001E91E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001E923 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001E928 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001E92E 00                         		even
0001E92E 00                         		even
0001E92E                            
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E                            ; Add points subroutine
0001E92E                            ; ---------------------------------------------------------------------------
0001E92E                            
0001E92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E92E                            
0001E92E                            
0001E92E                            AddPoints:                      ; ...
0001E92E 11FC 0001 FE1F                     move.b    #1,($FFFFFE1F).w
0001E934 47F8 FE26                          lea    ($FFFFFE26).w,a3
0001E938 D193                               add.l    d0,(a3)
0001E93A 223C 000F 423F                     move.l    #999999,d1
0001E940 B293                               cmp.l    (a3),d1
0001E942 6200                               bhi.s    loc_1C6AC
0001E944 2681                               move.l    d1,(a3)
0001E946                            
0001E946                            loc_1C6AC:                      ; ...
0001E946 2013                               move.l    (a3),d0
0001E948 B0B8 FFC0                          cmp.l    ($FFFFFFC0).w,d0
0001E94C 6500                               blo.s    locret_1C6B6
0001E94E 06B8 0000 1388 FFC0                add.l    #$1388,($FFFFFFC0).w
0001E956 4EF9 0000 B5EE                     jmp        ExtraLife
0001E95C                            
0001E95C                            locret_1C6B6:
0001E95C 4E75                       		rts
0001E95E                            ; End of function AddPoints
0001E95E                            
0001E95E                            ; ---------------------------------------------------------------------------
0001E95E                            ; Subroutine to	update the HUD
0001E95E                            ; ---------------------------------------------------------------------------
0001E95E                            
0001E95E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E95E                            
0001E95E                            
0001E95E                            HudUpdate:
0001E95E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E962 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E966 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E96A 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E96C 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E970 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E976 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E97A 6100 0000                  		bsr.w	Hud_Score
0001E97E                            
0001E97E                            Hud_ChkRings:
0001E97E 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E982 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E984 6A00                       		bpl.s	loc_1C6E4
0001E986 6100 0000                  		bsr.w	Hud_LoadZero
0001E98A                            
0001E98A                            loc_1C6E4:
0001E98A 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E98E 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E994 7200                       		moveq	#0,d1
0001E996 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E99A 6100 0000                  		bsr.w	Hud_Rings
0001E99E                            
0001E99E                            Hud_ChkTime:
0001E99E 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001E9A2 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001E9A4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001E9A8 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001E9AA 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001E9AE 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001E9B4 6700                       		beq.s	TimeOver	; if yes, branch
0001E9B6 5221                       		addq.b	#1,-(a1)
0001E9B8 0C11 003C                  		cmpi.b	#60,(a1)
0001E9BC 6500                       		bcs.s	Hud_ChkLives
0001E9BE 12BC 0000                  		move.b	#0,(a1)
0001E9C2 5221                       		addq.b	#1,-(a1)
0001E9C4 0C11 003C                  		cmpi.b	#60,(a1)
0001E9C8 6500                       		bcs.s	loc_1C734
0001E9CA 12BC 0000                  		move.b	#0,(a1)
0001E9CE 5221                       		addq.b	#1,-(a1)
0001E9D0 0C11 0009                  		cmpi.b	#9,(a1)
0001E9D4 6500                       		bcs.s	loc_1C734
0001E9D6 12BC 0009                  		move.b	#9,(a1)
0001E9DA                            
0001E9DA                            loc_1C734:
0001E9DA 203C 5E40 0003             		move.l	#$5E400003,d0
0001E9E0 7200                       		moveq	#0,d1
0001E9E2 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001E9E6 6100 0000                  		bsr.w	Hud_Mins
0001E9EA 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001E9F0 7200                       		moveq	#0,d1
0001E9F2 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001E9F6 6100 0000                  		bsr.w	Hud_Secs
0001E9FA                            
0001E9FA                            Hud_ChkLives:
0001E9FA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E9FE 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001EA00 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EA04 6100 0000                  		bsr.w	Hud_Lives
0001EA08                            
0001EA08                            Hud_ChkBonus:
0001EA08 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001EA0C 6700                       		beq.s	Hud_End		; if not, branch
0001EA0E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EA12 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001EA1C 7200                       		moveq	#0,d1
0001EA1E 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EA22 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA26 7200                       		moveq	#0,d1
0001EA28 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EA2C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EA30                            
0001EA30                            Hud_End:
0001EA30 4E75                       		rts	
0001EA32                            ; ===========================================================================
0001EA32                            
0001EA32                            TimeOver:				; XREF: Hud_ChkTime
0001EA32 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001EA36 41F8 D000                  		lea	($FFFFD000).w,a0
0001EA3A 2448                       		movea.l	a0,a2
0001EA3C 6100 E79C                  		bsr.w	KillSonic
0001EA40 11FC 0006 F5CE             		move.b	#face_surprised,(SonimeSST+sonime_face).w
0001EA46 31FC 0100 F5D0             		move.w	#$100,(SonimeSST+sonime_facetimer).w
0001EA4C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001EA52 4E75                       		rts	
0001EA54                            ; ===========================================================================
0001EA54                            
0001EA54                            HudDebug:				; XREF: HudUpdate
0001EA54 6100 0000                  		bsr.w	HudDb_XY
0001EA58 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001EA5C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001EA5E 6A00                       		bpl.s	HudDb_Rings
0001EA60 6100 0000                  		bsr.w	Hud_LoadZero
0001EA64                            
0001EA64                            HudDb_Rings:
0001EA64 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001EA68 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001EA6E 7200                       		moveq	#0,d1
0001EA70 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001EA74 6100 0000                  		bsr.w	Hud_Rings
0001EA78                            
0001EA78                            HudDb_ObjCount:
0001EA78 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001EA7E 7200                       		moveq	#0,d1
0001EA80 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001EA84 6100 0000                  		bsr.w	Hud_Secs
0001EA88 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001EA8C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001EA8E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001EA92 6100 0000                  		bsr.w	Hud_Lives
0001EA96                            
0001EA96                            HudDb_ChkBonus:
0001EA96 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001EA9A 6700                       		beq.s	HudDb_End	; if not, branch
0001EA9C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001EAA0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001EAAA 7200                       		moveq	#0,d1
0001EAAC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001EAB0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EAB4 7200                       		moveq	#0,d1
0001EAB6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001EABA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001EABE                            
0001EABE                            HudDb_End:
0001EABE 4E75                       		rts	
0001EAC0                            ; End of function HudUpdate
0001EAC0                            
0001EAC0                            ; ---------------------------------------------------------------------------
0001EAC0                            ; Subroutine to	load "0" on the	HUD
0001EAC0                            ; ---------------------------------------------------------------------------
0001EAC0                            
0001EAC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAC0                            
0001EAC0                            
0001EAC0                            Hud_LoadZero:				; XREF: HudUpdate
0001EAC0 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001EACA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001EACE 343C 0002                  		move.w	#2,d2
0001EAD2 6000                       		bra.s	loc_1C83E
0001EAD4                            ; End of function Hud_LoadZero
0001EAD4                            
0001EAD4                            ; ---------------------------------------------------------------------------
0001EAD4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001EAD4                            ; ---------------------------------------------------------------------------
0001EAD4                            
0001EAD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAD4                            
0001EAD4                            
0001EAD4                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001EAD4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EADA 6100 0000                  		bsr.w	Hud_Lives
0001EADE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001EAE8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001EAEC 343C 000E                  		move.w	#$E,d2
0001EAF0                            
0001EAF0                            loc_1C83E:				; XREF: Hud_LoadZero
0001EAF0 43FA 0000                  		lea	Art_Hud(pc),a1
0001EAF4                            
0001EAF4                            loc_1C842:
0001EAF4 323C 000F                  		move.w	#$F,d1
0001EAF8 101A                       		move.b	(a2)+,d0
0001EAFA 6B00                       		bmi.s	loc_1C85E
0001EAFC 4880                       		ext.w	d0
0001EAFE EB48                       		lsl.w	#5,d0
0001EB00 47F1 0000                  		lea	(a1,d0.w),a3
0001EB04                            
0001EB04                            loc_1C852:
0001EB04 2C9B                       		move.l	(a3)+,(a6)
0001EB06 51C9 FFFC                  		dbf	d1,loc_1C852
0001EB0A                            
0001EB0A                            loc_1C858:
0001EB0A 51CA FFE8                  		dbf	d2,loc_1C842
0001EB0E                            
0001EB0E 4E75                       		rts	
0001EB10                            ; ===========================================================================
0001EB10                            
0001EB10                            loc_1C85E:
0001EB10 2CBC 0000 0000             		move.l	#0,(a6)
0001EB16 51C9 FFF8                  		dbf	d1,loc_1C85E
0001EB1A                            
0001EB1A 60EE                       		bra.s	loc_1C858
0001EB1C                            ; End of function Hud_Base
0001EB1C                            
0001EB1C                            ; ===========================================================================
0001EB1C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001EB28 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001EB2C                            ; ---------------------------------------------------------------------------
0001EB2C                            ; Subroutine to	load debug mode	numbers	patterns
0001EB2C                            ; ---------------------------------------------------------------------------
0001EB2C                            
0001EB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB2C                            
0001EB2C                            
0001EB2C                            HudDb_XY:				; XREF: HudDebug
0001EB2C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001EB36 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001EB3A 4841                       		swap	d1
0001EB3C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001EB40 6100                       		bsr.s	HudDb_XY2
0001EB42 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001EB46 4841                       		swap	d1
0001EB48 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001EB4C                            ; End of function HudDb_XY
0001EB4C                            
0001EB4C                            
0001EB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB4C                            
0001EB4C                            
0001EB4C                            HudDb_XY2:
0001EB4C 7C07                       		moveq	#7,d6
0001EB4E 43F9 0000 0550             		lea	(Art_Text).l,a1
0001EB54                            
0001EB54                            HudDb_XYLoop:
0001EB54 E959                       		rol.w	#4,d1
0001EB56 3401                       		move.w	d1,d2
0001EB58 0242 000F                  		andi.w	#$F,d2
0001EB5C 0C42 000A                  		cmpi.w	#$A,d2
0001EB60 6500                       		bcs.s	loc_1C8B2
0001EB62 5E42                       		addq.w	#7,d2
0001EB64                            
0001EB64                            loc_1C8B2:
0001EB64 EB4A                       		lsl.w	#5,d2
0001EB66 47F1 2000                  		lea	(a1,d2.w),a3
0001EB6A 2C9B                       		move.l	(a3)+,(a6)
0001EB6C 2C9B                       		move.l	(a3)+,(a6)
0001EB6E 2C9B                       		move.l	(a3)+,(a6)
0001EB70 2C9B                       		move.l	(a3)+,(a6)
0001EB72 2C9B                       		move.l	(a3)+,(a6)
0001EB74 2C9B                       		move.l	(a3)+,(a6)
0001EB76 2C9B                       		move.l	(a3)+,(a6)
0001EB78 2C9B                       		move.l	(a3)+,(a6)
0001EB7A 4841                       		swap	d1
0001EB7C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001EB80                            
0001EB80 4E75                       		rts	
0001EB82                            ; End of function HudDb_XY2
0001EB82                            
0001EB82                            ; ---------------------------------------------------------------------------
0001EB82                            ; Subroutine to	load rings numbers patterns
0001EB82                            ; ---------------------------------------------------------------------------
0001EB82                            
0001EB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB82                            
0001EB82                            
0001EB82                            Hud_Rings:				; XREF: HudUpdate
0001EB82 45F9 0000 0000             		lea	(Hud_100).l,a2
0001EB88 7C02                       		moveq	#2,d6
0001EB8A 6000                       		bra.s	Hud_LoadArt
0001EB8C                            ; End of function Hud_Rings
0001EB8C                            
0001EB8C                            ; ---------------------------------------------------------------------------
0001EB8C                            ; Subroutine to	load score numbers patterns
0001EB8C                            ; ---------------------------------------------------------------------------
0001EB8C                            
0001EB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB8C                            
0001EB8C                            
0001EB8C                            Hud_Score:				; XREF: HudUpdate
0001EB8C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001EB92 7C05                       		moveq	#5,d6
0001EB94                            
0001EB94                            Hud_LoadArt:
0001EB94 7800                       		moveq	#0,d4
0001EB96 43FA 0000                  		lea	Art_Hud(pc),a1
0001EB9A                            
0001EB9A                            Hud_ScoreLoop:
0001EB9A 7400                       		moveq	#0,d2
0001EB9C 261A                       		move.l	(a2)+,d3
0001EB9E                            
0001EB9E                            loc_1C8EC:
0001EB9E 9283                       		sub.l	d3,d1
0001EBA0 6500                       		bcs.s	loc_1C8F4
0001EBA2 5242                       		addq.w	#1,d2
0001EBA4 60F8                       		bra.s	loc_1C8EC
0001EBA6                            ; ===========================================================================
0001EBA6                            
0001EBA6                            loc_1C8F4:
0001EBA6 D283                       		add.l	d3,d1
0001EBA8 4A42                       		tst.w	d2
0001EBAA 6700                       		beq.s	loc_1C8FE
0001EBAC 383C 0001                  		move.w	#1,d4
0001EBB0                            
0001EBB0                            loc_1C8FE:
0001EBB0 4A44                       		tst.w	d4
0001EBB2 6700                       		beq.s	loc_1C92C
0001EBB4 ED4A                       		lsl.w	#6,d2
0001EBB6 2D40 0004                  		move.l	d0,4(a6)
0001EBBA 47F1 2000                  		lea	(a1,d2.w),a3
0001EBBE 2C9B                       		move.l	(a3)+,(a6)
0001EBC0 2C9B                       		move.l	(a3)+,(a6)
0001EBC2 2C9B                       		move.l	(a3)+,(a6)
0001EBC4 2C9B                       		move.l	(a3)+,(a6)
0001EBC6 2C9B                       		move.l	(a3)+,(a6)
0001EBC8 2C9B                       		move.l	(a3)+,(a6)
0001EBCA 2C9B                       		move.l	(a3)+,(a6)
0001EBCC 2C9B                       		move.l	(a3)+,(a6)
0001EBCE 2C9B                       		move.l	(a3)+,(a6)
0001EBD0 2C9B                       		move.l	(a3)+,(a6)
0001EBD2 2C9B                       		move.l	(a3)+,(a6)
0001EBD4 2C9B                       		move.l	(a3)+,(a6)
0001EBD6 2C9B                       		move.l	(a3)+,(a6)
0001EBD8 2C9B                       		move.l	(a3)+,(a6)
0001EBDA 2C9B                       		move.l	(a3)+,(a6)
0001EBDC 2C9B                       		move.l	(a3)+,(a6)
0001EBDE                            
0001EBDE                            loc_1C92C:
0001EBDE 0680 0040 0000             		addi.l	#$400000,d0
0001EBE4 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001EBE8                            
0001EBE8 4E75                       		rts	
0001EBEA                            ; End of function Hud_Score
0001EBEA                            
0001EBEA                            ; ---------------------------------------------------------------------------
0001EBEA                            ; Subroutine to	load countdown numbers on the continue screen
0001EBEA                            ; ---------------------------------------------------------------------------
0001EBEA                            
0001EBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBEA                            
0001EBEA                            
0001EBEA                            ContScrCounter:				; XREF: ContinueScreen
0001EBEA 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001EBF4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001EBFA 45F9 0000 0000             		lea	(Hud_10).l,a2
0001EC00 7C01                       		moveq	#1,d6
0001EC02 7800                       		moveq	#0,d4
0001EC04 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001EC08                            
0001EC08                            ContScr_Loop:
0001EC08 7400                       		moveq	#0,d2
0001EC0A 261A                       		move.l	(a2)+,d3
0001EC0C                            
0001EC0C                            loc_1C95A:
0001EC0C 9283                       		sub.l	d3,d1
0001EC0E 6500                       		bcs.s	loc_1C962
0001EC10 5242                       		addq.w	#1,d2
0001EC12 60F8                       		bra.s	loc_1C95A
0001EC14                            ; ===========================================================================
0001EC14                            
0001EC14                            loc_1C962:
0001EC14 D283                       		add.l	d3,d1
0001EC16 ED4A                       		lsl.w	#6,d2
0001EC18 47F1 2000                  		lea	(a1,d2.w),a3
0001EC1C 2C9B                       		move.l	(a3)+,(a6)
0001EC1E 2C9B                       		move.l	(a3)+,(a6)
0001EC20 2C9B                       		move.l	(a3)+,(a6)
0001EC22 2C9B                       		move.l	(a3)+,(a6)
0001EC24 2C9B                       		move.l	(a3)+,(a6)
0001EC26 2C9B                       		move.l	(a3)+,(a6)
0001EC28 2C9B                       		move.l	(a3)+,(a6)
0001EC2A 2C9B                       		move.l	(a3)+,(a6)
0001EC2C 2C9B                       		move.l	(a3)+,(a6)
0001EC2E 2C9B                       		move.l	(a3)+,(a6)
0001EC30 2C9B                       		move.l	(a3)+,(a6)
0001EC32 2C9B                       		move.l	(a3)+,(a6)
0001EC34 2C9B                       		move.l	(a3)+,(a6)
0001EC36 2C9B                       		move.l	(a3)+,(a6)
0001EC38 2C9B                       		move.l	(a3)+,(a6)
0001EC3A 2C9B                       		move.l	(a3)+,(a6)
0001EC3C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001EC40                            
0001EC40 4E75                       		rts	
0001EC42                            ; End of function ContScrCounter
0001EC42                            
0001EC42                            ; ===========================================================================
0001EC42                            ; ---------------------------------------------------------------------------
0001EC42                            ; HUD counter sizes
0001EC42                            ; ---------------------------------------------------------------------------
0001EC42 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001EC46 0000 2710                  Hud_10000:	dc.l 10000
0001EC4A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001EC4E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001EC52 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001EC56 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001EC5A                            
0001EC5A                            ; ---------------------------------------------------------------------------
0001EC5A                            ; Subroutine to	load time numbers patterns
0001EC5A                            ; ---------------------------------------------------------------------------
0001EC5A                            
0001EC5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC5A                            
0001EC5A                            
0001EC5A                            Hud_Mins:				; XREF: Hud_ChkTime
0001EC5A 45F9 0001 EC56             		lea	(Hud_1).l,a2
0001EC60 7C00                       		moveq	#0,d6
0001EC62 6000                       		bra.s	loc_1C9BA
0001EC64                            ; End of function Hud_Mins
0001EC64                            
0001EC64                            
0001EC64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC64                            
0001EC64                            
0001EC64                            Hud_Secs:				; XREF: Hud_ChkTime
0001EC64 45F9 0001 EC52             		lea	(Hud_10).l,a2
0001EC6A 7C01                       		moveq	#1,d6
0001EC6C                            
0001EC6C                            loc_1C9BA:
0001EC6C 7800                       		moveq	#0,d4
0001EC6E 43FA 0000                  		lea	Art_Hud(pc),a1
0001EC72                            
0001EC72                            Hud_TimeLoop:
0001EC72 7400                       		moveq	#0,d2
0001EC74 261A                       		move.l	(a2)+,d3
0001EC76                            
0001EC76                            loc_1C9C4:
0001EC76 9283                       		sub.l	d3,d1
0001EC78 6500                       		bcs.s	loc_1C9CC
0001EC7A 5242                       		addq.w	#1,d2
0001EC7C 60F8                       		bra.s	loc_1C9C4
0001EC7E                            ; ===========================================================================
0001EC7E                            
0001EC7E                            loc_1C9CC:
0001EC7E D283                       		add.l	d3,d1
0001EC80 4A42                       		tst.w	d2
0001EC82 6700                       		beq.s	loc_1C9D6
0001EC84 383C 0001                  		move.w	#1,d4
0001EC88                            
0001EC88                            loc_1C9D6:
0001EC88 ED4A                       		lsl.w	#6,d2
0001EC8A 2D40 0004                  		move.l	d0,4(a6)
0001EC8E 47F1 2000                  		lea	(a1,d2.w),a3
0001EC92 2C9B                       		move.l	(a3)+,(a6)
0001EC94 2C9B                       		move.l	(a3)+,(a6)
0001EC96 2C9B                       		move.l	(a3)+,(a6)
0001EC98 2C9B                       		move.l	(a3)+,(a6)
0001EC9A 2C9B                       		move.l	(a3)+,(a6)
0001EC9C 2C9B                       		move.l	(a3)+,(a6)
0001EC9E 2C9B                       		move.l	(a3)+,(a6)
0001ECA0 2C9B                       		move.l	(a3)+,(a6)
0001ECA2 2C9B                       		move.l	(a3)+,(a6)
0001ECA4 2C9B                       		move.l	(a3)+,(a6)
0001ECA6 2C9B                       		move.l	(a3)+,(a6)
0001ECA8 2C9B                       		move.l	(a3)+,(a6)
0001ECAA 2C9B                       		move.l	(a3)+,(a6)
0001ECAC 2C9B                       		move.l	(a3)+,(a6)
0001ECAE 2C9B                       		move.l	(a3)+,(a6)
0001ECB0 2C9B                       		move.l	(a3)+,(a6)
0001ECB2 0680 0040 0000             		addi.l	#$400000,d0
0001ECB8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001ECBC                            
0001ECBC 4E75                       		rts	
0001ECBE                            ; End of function Hud_Secs
0001ECBE                            
0001ECBE                            ; ---------------------------------------------------------------------------
0001ECBE                            ; Subroutine to	load time/ring bonus numbers patterns
0001ECBE                            ; ---------------------------------------------------------------------------
0001ECBE                            
0001ECBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECBE                            
0001ECBE                            
0001ECBE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001ECBE 45F9 0001 EC4A             		lea	(Hud_1000).l,a2
0001ECC4 7C03                       		moveq	#3,d6
0001ECC6 7800                       		moveq	#0,d4
0001ECC8 43FA 0000                  		lea	Art_Hud(pc),a1
0001ECCC                            
0001ECCC                            Hud_BonusLoop:
0001ECCC 7400                       		moveq	#0,d2
0001ECCE 261A                       		move.l	(a2)+,d3
0001ECD0                            
0001ECD0                            loc_1CA1E:
0001ECD0 9283                       		sub.l	d3,d1
0001ECD2 6500                       		bcs.s	loc_1CA26
0001ECD4 5242                       		addq.w	#1,d2
0001ECD6 60F8                       		bra.s	loc_1CA1E
0001ECD8                            ; ===========================================================================
0001ECD8                            
0001ECD8                            loc_1CA26:
0001ECD8 D283                       		add.l	d3,d1
0001ECDA 4A42                       		tst.w	d2
0001ECDC 6700                       		beq.s	loc_1CA30
0001ECDE 383C 0001                  		move.w	#1,d4
0001ECE2                            
0001ECE2                            loc_1CA30:
0001ECE2 4A44                       		tst.w	d4
0001ECE4 6700                       		beq.s	Hud_ClrBonus
0001ECE6 ED4A                       		lsl.w	#6,d2
0001ECE8 47F1 2000                  		lea	(a1,d2.w),a3
0001ECEC 2C9B                       		move.l	(a3)+,(a6)
0001ECEE 2C9B                       		move.l	(a3)+,(a6)
0001ECF0 2C9B                       		move.l	(a3)+,(a6)
0001ECF2 2C9B                       		move.l	(a3)+,(a6)
0001ECF4 2C9B                       		move.l	(a3)+,(a6)
0001ECF6 2C9B                       		move.l	(a3)+,(a6)
0001ECF8 2C9B                       		move.l	(a3)+,(a6)
0001ECFA 2C9B                       		move.l	(a3)+,(a6)
0001ECFC 2C9B                       		move.l	(a3)+,(a6)
0001ECFE 2C9B                       		move.l	(a3)+,(a6)
0001ED00 2C9B                       		move.l	(a3)+,(a6)
0001ED02 2C9B                       		move.l	(a3)+,(a6)
0001ED04 2C9B                       		move.l	(a3)+,(a6)
0001ED06 2C9B                       		move.l	(a3)+,(a6)
0001ED08 2C9B                       		move.l	(a3)+,(a6)
0001ED0A 2C9B                       		move.l	(a3)+,(a6)
0001ED0C                            
0001ED0C                            loc_1CA5A:
0001ED0C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001ED10                            
0001ED10 4E75                       		rts	
0001ED12                            ; ===========================================================================
0001ED12                            
0001ED12                            Hud_ClrBonus:
0001ED12 7A0F                       		moveq	#$F,d5
0001ED14                            
0001ED14                            Hud_ClrBonusLoop:
0001ED14 2CBC 0000 0000             		move.l	#0,(a6)
0001ED1A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001ED1E                            
0001ED1E 60EC                       		bra.s	loc_1CA5A
0001ED20                            ; End of function Hud_TimeRingBonus
0001ED20                            
0001ED20                            ; ---------------------------------------------------------------------------
0001ED20                            ; Subroutine to	load uncompressed lives	counter	patterns
0001ED20                            ; ---------------------------------------------------------------------------
0001ED20                            
0001ED20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED20                            
0001ED20                            
0001ED20                            Hud_Lives:				; XREF: Hud_ChkLives
0001ED20 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001ED26 7200                       		moveq	#0,d1
0001ED28 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001ED2C 45F9 0001 EC52             		lea	(Hud_10).l,a2
0001ED32 7C01                       		moveq	#1,d6
0001ED34 7800                       		moveq	#0,d4
0001ED36 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001ED3A                            
0001ED3A                            Hud_LivesLoop:
0001ED3A 2D40 0004                  		move.l	d0,4(a6)
0001ED3E 7400                       		moveq	#0,d2
0001ED40 261A                       		move.l	(a2)+,d3
0001ED42                            
0001ED42                            loc_1CA90:
0001ED42 9283                       		sub.l	d3,d1
0001ED44 6500                       		bcs.s	loc_1CA98
0001ED46 5242                       		addq.w	#1,d2
0001ED48 60F8                       		bra.s	loc_1CA90
0001ED4A                            ; ===========================================================================
0001ED4A                            
0001ED4A                            loc_1CA98:
0001ED4A D283                       		add.l	d3,d1
0001ED4C 4A42                       		tst.w	d2
0001ED4E 6700                       		beq.s	loc_1CAA2
0001ED50 383C 0001                  		move.w	#1,d4
0001ED54                            
0001ED54                            loc_1CAA2:
0001ED54 4A44                       		tst.w	d4
0001ED56 6700                       		beq.s	Hud_ClrLives
0001ED58                            
0001ED58                            loc_1CAA6:
0001ED58 EB4A                       		lsl.w	#5,d2
0001ED5A 47F1 2000                  		lea	(a1,d2.w),a3
0001ED5E 2C9B                       		move.l	(a3)+,(a6)
0001ED60 2C9B                       		move.l	(a3)+,(a6)
0001ED62 2C9B                       		move.l	(a3)+,(a6)
0001ED64 2C9B                       		move.l	(a3)+,(a6)
0001ED66 2C9B                       		move.l	(a3)+,(a6)
0001ED68 2C9B                       		move.l	(a3)+,(a6)
0001ED6A 2C9B                       		move.l	(a3)+,(a6)
0001ED6C 2C9B                       		move.l	(a3)+,(a6)
0001ED6E                            
0001ED6E                            loc_1CABC:
0001ED6E 0680 0040 0000             		addi.l	#$400000,d0
0001ED74 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001ED78                            
0001ED78 4E75                       		rts	
0001ED7A                            ; ===========================================================================
0001ED7A                            
0001ED7A                            Hud_ClrLives:
0001ED7A 4A46                       		tst.w	d6
0001ED7C 67DA                       		beq.s	loc_1CAA6
0001ED7E 7A07                       		moveq	#7,d5
0001ED80                            
0001ED80                            Hud_ClrLivesLoop:
0001ED80 2CBC 0000 0000             		move.l	#0,(a6)
0001ED86 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001ED8A 60E2                       		bra.s	loc_1CABC
0001ED8C                            ; End of function Hud_Lives
0001ED8C                            
0001ED8C                            ; ===========================================================================
0001ED8C                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001F08C                            		even
0001F08C                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001F1CC                            		even
0001F1CC                            ; ===========================================================================
0001F1CC                            ; ---------------------------------------------------------------------------
0001F1CC                            ; When debug mode is currently in use
0001F1CC                            ; ---------------------------------------------------------------------------
0001F1CC                            
0001F1CC                            DebugMode:				; XREF: Obj01; Obj09
0001F1CC 7000                       		moveq	#0,d0
0001F1CE 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001F1D2 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001F1D6 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001F1DA                            ; ===========================================================================
0001F1DA 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001F1DC 0000                       		dc.w Debug_Skip-Debug_Index
0001F1DE                            ; ===========================================================================
0001F1DE                            
0001F1DE                            Debug_Main:				; XREF: Debug_Index
0001F1DE 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001F1E2 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001F1E8 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001F1EE 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001F1F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001F1FA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001F200 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001F206 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001F20C 117C 0000 001A             		move.b	#0,$1A(a0)
0001F212 117C 0000 001C             		move.b	#0,$1C(a0)
0001F218 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001F21E 6600                       		bne.s	Debug_Zone	; if not, branch
0001F220 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001F226 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001F22C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001F22E 6000                       		bra.s	Debug_UseList
0001F230                            ; ===========================================================================
0001F230                            
0001F230                            Debug_Zone:
0001F230 7000                       		moveq	#0,d0
0001F232 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F236                            
0001F236                            Debug_UseList:
0001F236 45F9 0000 0000             		lea	(DebugList).l,a2
0001F23C D040                       		add.w	d0,d0
0001F23E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F242 3C1A                       		move.w	(a2)+,d6
0001F244 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F248 6200                       		bhi.s	loc_1CF9E
0001F24A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001F250                            
0001F250                            loc_1CF9E:
0001F250 6100 0000                  		bsr.w	Debug_ShowItem
0001F254 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F25A 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001F260                            
0001F260                            Debug_Skip:				; XREF: Debug_Index
0001F260 7006                       		moveq	#6,d0
0001F262 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001F268 6700                       		beq.s	loc_1CFBE
0001F26A 7000                       		moveq	#0,d0
0001F26C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001F270                            
0001F270                            loc_1CFBE:
0001F270 45F9 0000 0000             		lea	(DebugList).l,a2
0001F276 D040                       		add.w	d0,d0
0001F278 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001F27C 3C1A                       		move.w	(a2)+,d6
0001F27E 6100 0000                  		bsr.w	Debug_Control
0001F282 4EF9 0000 E910             		jmp	DisplaySprite
0001F288                            
0001F288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F288                            
0001F288                            
0001F288                            Debug_Control:
0001F288 7800                       		moveq	#0,d4
0001F28A 323C 0001                  		move.w	#1,d1
0001F28E 1838 F605                  		move.b	($FFFFF605).w,d4
0001F292 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001F296 6600                       		bne.s	loc_1D018	; if yes, branch
0001F298 1038 F604                  		move.b	($FFFFF604).w,d0
0001F29C 0240 000F                  		andi.w	#$F,d0
0001F2A0 6600                       		bne.s	loc_1D000
0001F2A2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001F2A8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001F2AE 6000 0000                  		bra.w	Debug_BackItem
0001F2B2                            ; ===========================================================================
0001F2B2                            
0001F2B2                            loc_1D000:
0001F2B2 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001F2B6 6600                       		bne.s	loc_1D01C
0001F2B8 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001F2BE 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001F2C2 6600                       		bne.s	loc_1D018
0001F2C4 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001F2CA                            
0001F2CA                            loc_1D018:
0001F2CA 1838 F604                  		move.b	($FFFFF604).w,d4
0001F2CE                            
0001F2CE                            loc_1D01C:
0001F2CE 7200                       		moveq	#0,d1
0001F2D0 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001F2D4 5241                       		addq.w	#1,d1
0001F2D6 4841                       		swap	d1
0001F2D8 E881                       		asr.l	#4,d1
0001F2DA 2428 000C                  		move.l	$C(a0),d2
0001F2DE 2628 0008                  		move.l	8(a0),d3
0001F2E2 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001F2E6 6700                       		beq.s	loc_1D03C	; if not, branch
0001F2E8 9481                       		sub.l	d1,d2
0001F2EA 6400                       		bcc.s	loc_1D03C
0001F2EC 7400                       		moveq	#0,d2
0001F2EE                            
0001F2EE                            loc_1D03C:
0001F2EE 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001F2F2 6700                       		beq.s	loc_1D052	; if not, branch
0001F2F4 D481                       		add.l	d1,d2
0001F2F6 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001F2FC 6500                       		bcs.s	loc_1D052
0001F2FE 243C 07FF 0000             		move.l	#$7FF0000,d2
0001F304                            
0001F304                            loc_1D052:
0001F304 0804 0002                  		btst	#2,d4
0001F308 6700                       		beq.s	loc_1D05E
0001F30A 9681                       		sub.l	d1,d3
0001F30C 6400                       		bcc.s	loc_1D05E
0001F30E 7600                       		moveq	#0,d3
0001F310                            
0001F310                            loc_1D05E:
0001F310 0804 0003                  		btst	#3,d4
0001F314 6700                       		beq.s	loc_1D066
0001F316 D681                       		add.l	d1,d3
0001F318                            
0001F318                            loc_1D066:
0001F318 2142 000C                  		move.l	d2,$C(a0)
0001F31C 2143 0008                  		move.l	d3,8(a0)
0001F320                            
0001F320                            Debug_BackItem:
0001F320 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001F326 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F328 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F32E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001F330 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001F334 6400                       		bcc.s	Debug_NoLoop
0001F336 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001F33A 6000                       		bra.s	Debug_NoLoop
0001F33C                            ; ===========================================================================
0001F33C                            
0001F33C                            Debug_NextItem:
0001F33C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001F342 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001F344 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001F348 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001F34C 6200                       		bhi.s	Debug_NoLoop
0001F34E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001F354                            
0001F354                            Debug_NoLoop:
0001F354 6000 0000                  		bra.w	Debug_ShowItem
0001F358                            ; ===========================================================================
0001F358                            
0001F358                            Debug_MakeItem:
0001F358 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001F35E 6700                       		beq.s	Debug_Exit	; if not, branch
0001F360 4EB9 0000 F066             		jsr	SingleObjLoad
0001F366 6600                       		bne.s	Debug_Exit
0001F368 3368 0008 0008             		move.w	8(a0),8(a1)
0001F36E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F374 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001F378 1368 0001 0001             		move.b	1(a0),1(a1)
0001F37E 1368 0001 0022             		move.b	1(a0),$22(a1)
0001F384 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001F38A 7000                       		moveq	#0,d0
0001F38C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F390 E748                       		lsl.w	#3,d0
0001F392 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001F398 4E75                       		rts	
0001F39A                            ; ===========================================================================
0001F39A                            
0001F39A                            Debug_Exit:
0001F39A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001F3A0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001F3A2 7000                       		moveq	#0,d0
0001F3A4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001F3A8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F3B0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F3B6 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001F3BA 3140 000A                  		move.w	d0,$A(a0)
0001F3BE 3140 000E                  		move.w	d0,$E(a0)
0001F3C2 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001F3C8 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001F3CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001F3D4 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001F3D6 4278 F780                  		clr.w	($FFFFF780).w
0001F3DA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001F3E0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001F3E8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001F3EE 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001F3F4 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001F3FA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F400                            
0001F400                            Debug_DoNothing:
0001F400 4E75                       		rts	
0001F402                            ; End of function Debug_Control
0001F402                            
0001F402                            
0001F402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F402                            
0001F402                            
0001F402                            Debug_ShowItem:				; XREF: Debug_Main
0001F402 7000                       		moveq	#0,d0
0001F404 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001F408 E748                       		lsl.w	#3,d0
0001F40A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001F410 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001F416 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001F41C 4E75                       		rts	
0001F41E                            ; End of function Debug_ShowItem
0001F41E                            
0001F41E                            ; ===========================================================================
0001F41E                            ; ---------------------------------------------------------------------------
0001F41E                            ; Debug	list pointers
0001F41E                            ; ---------------------------------------------------------------------------
0001F41E                            DebugList:
0001F41E                            	include "_inc\Debug list pointers.asm"
0001F41E                            ; ---------------------------------------------------------------------------
0001F41E                            ; Debug	list pointers
0001F41E                            ; ---------------------------------------------------------------------------
0001F41E 0000                       	dc.w Debug_GHZ-DebugList
0001F420 0000                       	dc.w Debug_LZ-DebugList
0001F422 0000                       	dc.w Debug_MZ-DebugList
0001F424 0000                       	dc.w Debug_SLZ-DebugList
0001F426 0000                       	dc.w Debug_SYZ-DebugList
0001F428 0000                       	dc.w Debug_SBZ-DebugList
0001F42A 0000                       	dc.w Debug_Ending-DebugList
0001F42A 0000                       	dc.w Debug_Ending-DebugList
0001F42C                            
0001F42C                            ; ---------------------------------------------------------------------------
0001F42C                            ; Debug	list - Green Hill
0001F42C                            ; ---------------------------------------------------------------------------
0001F42C                            Debug_GHZ:
0001F42C                            	include "_inc\Debug list - GHZ.asm"
0001F42C                            ; ---------------------------------------------------------------------------
0001F42C                            ; Debug	list - Green Hill
0001F42C                            ; ---------------------------------------------------------------------------
0001F42C 0010                       	dc.w $10			; number of items in list
0001F42E 2500 B21A                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001F432 0000 26BA                  	dc.w 0, ringart+$2000		; subtype, frame, VRAM setting (2 bytes)
0001F436 2600 B800                  	dc.l Map_obj26+$26000000
0001F43A 0000 0680                  	dc.b 0,	0, 6, $80
0001F43E 1F00 AA7A                  	dc.l Map_obj1F+$1F000000
0001F442 0000 0400                  	dc.b 0,	0, 4, 0
0001F446 2200 AD5A                  	dc.l Map_obj22+$22000000
0001F44A 0000 0444                  	dc.b 0,	0, 4, $44
0001F44E 2B00 BE22                  	dc.l Map_obj2B+$2B000000
0001F452 0000 047B                  	dc.b 0,	0, 4, $7B
0001F456 3600 E2E8                  	dc.l Map_obj36+$36000000
0001F45A 0000 051B                  	dc.b 0,	0, 5, $1B
0001F45E 1800 9270                  	dc.l Map_obj18+$18000000
0001F462 0000 4000                  	dc.b 0,	0, $40,	0
0001F466 3B00 E42E                  	dc.l Map_obj3B+$3B000000
0001F46A 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001F46E 4001 1048                  	dc.l Map_obj40+$40000000
0001F472 0000 04F0                  	dc.b 0,	0, 4, $F0
0001F476 4100 F560                  	dc.l Map_obj41+$41000000
0001F47A 0000 0523                  	dc.b 0,	0, 5, $23
0001F47E 4200 F786                  	dc.l Map_obj42+$42000000
0001F482 0000 249B                  	dc.b 0,	0, $24,	$9B
0001F486 4400 FA9E                  	dc.l Map_obj44+$44000000
0001F48A 0000 434C                  	dc.b 0,	0, $43,	$4C
0001F48E 1900 92DE                  	dc.l Map_obj48+$19000000
0001F492 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001F496 7901 9060                  	dc.l Map_obj79+$79000000
0001F49A 0100 0571                  	dc.w $100, lamppostart
0001F49E 4B00 B25A                  	dc.l Map_obj4B+$4B000000
0001F4A2 0000 222D                  	dc.w 0, ssringart+$2000
0001F4A6 7D01 91BE                  	dc.l Map_obj7D+$7D000000
0001F4AA 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001F4AE                            	even
0001F4AE                            	even
0001F4AE                            
0001F4AE                            ; ---------------------------------------------------------------------------
0001F4AE                            ; Debug	list - Labyrinth
0001F4AE                            ; ---------------------------------------------------------------------------
0001F4AE                            Debug_LZ:
0001F4AE                            	include "_inc\Debug list - LZ.asm"
0001F4AE                            ; ---------------------------------------------------------------------------
0001F4AE                            ; Debug	list - Labyrinth
0001F4AE                            ; ---------------------------------------------------------------------------
0001F4AE 0019                       	dc.w $19
0001F4B0 2500 B21A                  	dc.l Map_obj25+$25000000
0001F4B4 0000 26BA                  	dc.w 0, ringart+$2000
0001F4B8 2600 B800                  	dc.l Map_obj26+$26000000
0001F4BC 0000 0680                  	dc.b 0,	0, 6, $80
0001F4C0 4100 F560                  	dc.l Map_obj41+$41000000
0001F4C4 0000 0523                  	dc.b 0,	0, 5, $23
0001F4C8 2C00 BEC8                  	dc.l Map_obj2C+$2C000000
0001F4CC 0800 2486                  	dc.b 8,	0, $24,	$86
0001F4D0 2D00 C0DC                  	dc.l Map_obj2D+$2D000000
0001F4D4 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001F4D8 1601 38AE                  	dc.l Map_obj16+$16000000
0001F4DC 0000 03CC                  	dc.b 0,	0, 3, $CC
0001F4E0 1601 38AE                  	dc.l Map_obj16+$16000000
0001F4E4 0203 03CC                  	dc.b 2,	3, 3, $CC
0001F4E8 3300 D5B6                  	dc.l Map_obj33+$33000000
0001F4EC 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F4F0 3200 D17A                  	dc.l Map_obj32+$32000000
0001F4F4 0000 0513                  	dc.b 0,	0, 5, $13
0001F4F8 3600 E2E8                  	dc.l Map_obj36+$36000000
0001F4FC 0000 051B                  	dc.b 0,	0, 5, $1B
0001F500 5201 197C                  	dc.l Map_obj52a+$52000000
0001F504 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001F508 6101 3AE4                  	dc.l Map_obj61+$61000000
0001F50C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001F510 6101 3AE4                  	dc.l Map_obj61+$61000000
0001F514 1301 43E6                  	dc.b $13, 1, $43, $E6
0001F518 6101 3AE4                  	dc.l Map_obj61+$61000000
0001F51C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001F520 6201 3C38                  	dc.l Map_obj62+$62000000
0001F524 0000 443E                  	dc.b 0,	0, $44,	$3E
0001F528 6101 3AE4                  	dc.l Map_obj61+$61000000
0001F52C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001F530 6101 3AE4                  	dc.l Map_obj61+$61000000
0001F534 3003 43E6                  	dc.b $30, 3, $43, $E6
0001F538 6301 3FA8                  	dc.l Map_obj63+$63000000
0001F53C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001F540 6001 37F8                  	dc.l Map_obj60+$60000000
0001F544 0000 0467                  	dc.b 0,	0, 4, $67
0001F548 6401 4360                  	dc.l Map_obj64+$64000000
0001F54C 8413 8348                  	dc.b $84, $13, $83, $48
0001F550 6501 44E8                  	dc.l Map_obj65+$65000000
0001F554 0202 C259                  	dc.b 2,	2, $C2,	$59
0001F558 6501 44E8                  	dc.l Map_obj65+$65000000
0001F55C 0909 C259                  	dc.b 9,	9, $C2,	$59
0001F560 0B01 2C22                  	dc.l Map_obj0B+$B000000
0001F564 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001F568 0C01 2CF2                  	dc.l Map_obj0C+$C000000
0001F56C 0200 4328                  	dc.b 2,	0, $43,	$28
0001F570 7901 9060                  	dc.l Map_obj79+$79000000
0001F574 0100 0571                  	dc.w $100, lamppostart
0001F578                            	even
0001F578                            	even
0001F578                            
0001F578                            ; ---------------------------------------------------------------------------
0001F578                            ; Debug	list - Marble
0001F578                            ; ---------------------------------------------------------------------------
0001F578                            Debug_MZ:
0001F578                            	include "_inc\Debug list - MZ.asm"
0001F578                            ; ---------------------------------------------------------------------------
0001F578                            ; Debug	list - Marble
0001F578                            ; ---------------------------------------------------------------------------
0001F578 0012                       	dc.w $12
0001F57A 2500 B21A                  	dc.l Map_obj25+$25000000
0001F57E 0000 26BA                  	dc.w 0, ringart+$2000
0001F582 2600 B800                  	dc.l Map_obj26+$26000000
0001F586 0000 0680                  	dc.b 0,	0, 6, $80
0001F58A 2200 AD5A                  	dc.l Map_obj22+$22000000
0001F58E 0000 0444                  	dc.b 0,	0, 4, $44
0001F592 3600 E2E8                  	dc.l Map_obj36+$36000000
0001F596 0000 051B                  	dc.b 0,	0, 5, $1B
0001F59A 4100 F560                  	dc.l Map_obj41+$41000000
0001F59E 0000 0523                  	dc.b 0,	0, 5, $23
0001F5A2 1300 C60A                  	dc.l Map_obj14+$13000000
0001F5A6 0000 0345                  	dc.b 0,	0, 3, $45
0001F5AA 4601 017E                  	dc.l Map_obj46+$46000000
0001F5AE 0000 4000                  	dc.b 0,	0, $40,	0
0001F5B2 4C01 0AF8                  	dc.l Map_obj4C+$4C000000
0001F5B6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F5BA 4E01 0DDC                  	dc.l Map_obj4E+$4E000000
0001F5BE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001F5C2 3300 D5B6                  	dc.l Map_obj33+$33000000
0001F5C6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F5CA 5001 11D6                  	dc.l Map_obj50+$50000000
0001F5CE 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F5D2 5101 16A2                  	dc.l Map_obj51+$51000000
0001F5D6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001F5DA 5201 1926                  	dc.l Map_obj52+$52000000
0001F5DE 0000 02B8                  	dc.b 0,	0, 2, $B8
0001F5E2 5300 9876                  	dc.l Map_obj53+$53000000
0001F5E6 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001F5EA 5401 0ABE                  	dc.l Map_obj54+$54000000
0001F5EE 0000 8680                  	dc.b 0,	0, $86,	$80
0001F5F2 5501 1B1A                  	dc.l Map_obj55+$55000000
0001F5F6 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F5FA 7801 8CF4                  	dc.l Map_obj78+$78000000
0001F5FE 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F602 7901 9060                  	dc.l Map_obj79+$79000000
0001F606 0100 0571                  	dc.w $100, lamppostart
0001F60A                            	even
0001F60A                            	even
0001F60A                            
0001F60A                            ; ---------------------------------------------------------------------------
0001F60A                            ; Debug	list - Star Light
0001F60A                            ; ---------------------------------------------------------------------------
0001F60A                            Debug_SLZ:
0001F60A                            	include "_inc\Debug list - SLZ.asm"
0001F60A                            ; ---------------------------------------------------------------------------
0001F60A                            ; Debug	list - Star Light
0001F60A                            ; ---------------------------------------------------------------------------
0001F60A 000F                       	dc.w $F
0001F60C 2500 B21A                  	dc.l Map_obj25+$25000000
0001F610 0000 26BA                  	dc.w 0, ringart+$2000
0001F614 2600 B800                  	dc.l Map_obj26+$26000000
0001F618 0000 0680                  	dc.b 0,	0, 6, $80
0001F61C 5901 262E                  	dc.l Map_obj59+$59000000
0001F620 0000 4000                  	dc.b 0,	0, $40,	0
0001F624 5300 9876                  	dc.l Map_obj53+$53000000
0001F628 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001F62C 1800 92CE                  	dc.l Map_obj18b+$18000000
0001F630 0000 4000                  	dc.b 0,	0, $40,	0
0001F634 5A01 2776                  	dc.l Map_obj5A+$5A000000
0001F638 0000 4000                  	dc.b 0,	0, $40,	0
0001F63C 5B01 293C                  	dc.l Map_obj5B+$5B000000
0001F640 0000 4000                  	dc.b 0,	0, $40,	0
0001F644 5D01 2F2A                  	dc.l Map_obj5D+$5D000000
0001F648 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001F64C 5E01 32CA                  	dc.l Map_obj5E+$5E000000
0001F650 0000 0374                  	dc.b 0,	0, 3, $74
0001F654 4100 F560                  	dc.l Map_obj41+$41000000
0001F658 0000 0523                  	dc.b 0,	0, 5, $23
0001F65C 1300 C60A                  	dc.l Map_obj14+$13000000
0001F660 0000 0480                  	dc.b 0,	0, 4, $80
0001F664 1C00 99BC                  	dc.l Map_obj1C+$1C000000
0001F668 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001F66C 5F01 3548                  	dc.l Map_obj5F+$5F000000
0001F670 0000 0400                  	dc.b 0,	0, 4, 0
0001F674 6001 37F8                  	dc.l Map_obj60+$60000000
0001F678 0000 2429                  	dc.b 0,	0, $24,	$29
0001F67C 7901 9060                  	dc.l Map_obj79+$79000000
0001F680 0100 0571                  	dc.w $100, lamppostart
0001F684                            	even
0001F684                            	even
0001F684                            
0001F684                            ; ---------------------------------------------------------------------------
0001F684                            ; Debug	list - Spring Yard
0001F684                            ; ---------------------------------------------------------------------------
0001F684                            Debug_SYZ:
0001F684                            	include "_inc\Debug list - SYZ.asm"
0001F684                            ; ---------------------------------------------------------------------------
0001F684                            ; Debug	list - Spring Yard
0001F684                            ; ---------------------------------------------------------------------------
0001F684 000F                       	dc.w $F
0001F686 2500 B21A                  	dc.l Map_obj25+$25000000
0001F68A 0000 26BA                  	dc.w 0, ringart+$2000
0001F68E 2600 B800                  	dc.l Map_obj26+$26000000
0001F692 0000 0680                  	dc.b 0,	0, 6, $80
0001F696 3600 E2E8                  	dc.l Map_obj36+$36000000
0001F69A 0000 051B                  	dc.b 0,	0, 5, $1B
0001F69E 4100 F560                  	dc.l Map_obj41+$41000000
0001F6A2 0000 0523                  	dc.b 0,	0, 5, $23
0001F6A6 4300 F9E0                  	dc.l Map_obj43+$43000000
0001F6AA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001F6AE 1201 020A                  	dc.l Map_obj12+$12000000
0001F6B2 0000 0000                  	dc.b 0,	0, 0, 0
0001F6B6 4701 0384                  	dc.l Map_obj47+$47000000
0001F6BA 0000 0380                  	dc.b 0,	0, 3, $80
0001F6BE 1F00 AA7A                  	dc.l Map_obj1F+$1F000000
0001F6C2 0000 0400                  	dc.b 0,	0, 4, 0
0001F6C6 2200 AD5A                  	dc.l Map_obj22+$22000000
0001F6CA 0000 0444                  	dc.b 0,	0, 4, $44
0001F6CE 5001 11D6                  	dc.l Map_obj50+$50000000
0001F6D2 0000 247B                  	dc.b 0,	0, $24,	$7B
0001F6D6 1800 92BC                  	dc.l Map_obj18a+$18000000
0001F6DA 0000 4000                  	dc.b 0,	0, $40,	0
0001F6DE 5601 1FCA                  	dc.l Map_obj56+$56000000
0001F6E2 0000 4000                  	dc.b 0,	0, $40,	0
0001F6E6 3200 D17A                  	dc.l Map_obj32+$32000000
0001F6EA 0000 0513                  	dc.b 0,	0, 5, $13
0001F6EE 7801 8CF4                  	dc.l Map_obj78+$78000000
0001F6F2 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001F6F6 7901 9060                  	dc.l Map_obj79+$79000000
0001F6FA 0100 0571                  	dc.w $100, lamppostart
0001F6FE                            	even
0001F6FE                            	even
0001F6FE                            
0001F6FE                            ; ---------------------------------------------------------------------------
0001F6FE                            ; Debug	list - Scrap Brain
0001F6FE                            ; ---------------------------------------------------------------------------
0001F6FE                            Debug_SBZ:
0001F6FE                            	include "_inc\Debug list - SBZ.asm"
0001F6FE                            ; ---------------------------------------------------------------------------
0001F6FE                            ; Debug	list - Scrap Brain
0001F6FE                            ; ---------------------------------------------------------------------------
0001F6FE 001D                       	dc.w $1D
0001F700 2500 B21A                  	dc.l Map_obj25+$25000000
0001F704 0000 26BA                  	dc.w 0, ringart+$2000
0001F708 2600 B800                  	dc.l Map_obj26+$26000000
0001F70C 0000 0680                  	dc.b 0,	0, 6, $80
0001F710 5F01 3548                  	dc.l Map_obj5F+$5F000000
0001F714 0000 0400                  	dc.b 0,	0, 4, 0
0001F718 6001 37F8                  	dc.l Map_obj60+$60000000
0001F71C 0000 0429                  	dc.b 0,	0, 4, $29
0001F720 7801 8CF4                  	dc.l Map_obj78+$78000000
0001F724 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001F728 1501 237C                  	dc.l Map_obj15b+$15000000
0001F72C 0702 4391                  	dc.b 7,	2, $43,	$91
0001F730 6701 7622                  	dc.l Map_obj67+$67000000
0001F734 E000 C344                  	dc.b $E0, 0, $C3, $44
0001F738 5201 1926                  	dc.l Map_obj52+$52000000
0001F73C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001F740 3200 D17A                  	dc.l Map_obj32+$32000000
0001F744 0000 0513                  	dc.b 0,	0, 5, $13
0001F748 6901 788A                  	dc.l Map_obj69+$69000000
0001F74C 0300 4492                  	dc.b 3,	0, $44,	$92
0001F750 6901 78E4                  	dc.l Map_obj69a+$69000000
0001F754 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001F758 6A01 7B44                  	dc.l Map_obj6A+$6A000000
0001F75C 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001F760 5300 9876                  	dc.l Map_obj53+$53000000
0001F764 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001F768 5201 1926                  	dc.l Map_obj52+$52000000
0001F76C 3903 4460                  	dc.b $39, 3, $44, $60
0001F770 6B01 7EEA                  	dc.l Map_obj6B+$6B000000
0001F774 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001F778 2A00 9D24                  	dc.l Map_obj2A+$2A000000
0001F77C 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001F780 6B01 7EEA                  	dc.l Map_obj6B+$6B000000
0001F784 1301 22C0                  	dc.b $13, 1, $22, $C0
0001F788 6A01 7B44                  	dc.l Map_obj6A+$6A000000
0001F78C 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001F790 6B01 7EEA                  	dc.l Map_obj6B+$6B000000
0001F794 2401 22C0                  	dc.b $24, 1, $22, $C0
0001F798 6A01 7B44                  	dc.l Map_obj6A+$6A000000
0001F79C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001F7A0 6B01 7EEA                  	dc.l Map_obj6B+$6B000000
0001F7A4 3401 22C0                  	dc.b $34, 1, $22, $C0
0001F7A8 6C01 80AC                  	dc.l Map_obj6C+$6C000000
0001F7AC 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001F7B0 6D00 FE5E                  	dc.l Map_obj6D+$6D000000
0001F7B4 6400 83D9                  	dc.b $64, 0, $83, $D9
0001F7B8 6D00 FE5E                  	dc.l Map_obj6D+$6D000000
0001F7BC 640B 83D9                  	dc.b $64, $B, $83, $D9
0001F7C0 6E01 8162                  	dc.l Map_obj6E+$6E000000
0001F7C4 0400 047E                  	dc.b 4,	0, 4, $7E
0001F7C8 7001 85AC                  	dc.l Map_obj70+$70000000
0001F7CC 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001F7D0 7101 2DC0                  	dc.l Map_obj71+$71000000
0001F7D4 1100 8680                  	dc.b $11, 0, $86, $80
0001F7D8 1E00 A192                  	dc.l Map_obj1E+$1E000000
0001F7DC 0400 2302                  	dc.b 4,	0, $23,	2
0001F7E0 7901 9060                  	dc.l Map_obj79+$79000000
0001F7E4 0100 0571                  	dc.w $100, lamppostart
0001F7E8                            	even
0001F7E8                            	even
0001F7E8                            
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8                            ; Debug	list - ending sequence / special stage
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8                            Debug_Ending:
0001F7E8                            	include "_inc\Debug list - Ending and SS.asm"
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8                            ; Debug	list - ending sequence / special stage
0001F7E8                            ; ---------------------------------------------------------------------------
0001F7E8 000D                       	dc.w $D
0001F7EA 2500 B21A                  	dc.l Map_obj25+$25000000
0001F7EE 0000 26BA                  	dc.w 0, ringart+$2000
0001F7F2 4701 0384                  	dc.l Map_obj47+$47000000
0001F7F6 0000 0380                  	dc.b 0,	0, 3, $80
0001F7FA 2800 A7AC                  	dc.l Map_obj28a+$28000000
0001F7FE 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001F802 2800 A7AC                  	dc.l Map_obj28a+$28000000
0001F806 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F80A 2800 A7AC                  	dc.l Map_obj28a+$28000000
0001F80E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F812 2800 A794                  	dc.l Map_obj28+$28000000
0001F816 0D00 0553                  	dc.b $D, 0, 5, $53
0001F81A 2800 A794                  	dc.l Map_obj28+$28000000
0001F81E 0E00 0553                  	dc.b $E, 0, 5, $53
0001F822 2800 A794                  	dc.l Map_obj28+$28000000
0001F826 0F00 0573                  	dc.b $F, 0, 5, $73
0001F82A 2800 A794                  	dc.l Map_obj28+$28000000
0001F82E 1000 0573                  	dc.b $10, 0, 5,	$73
0001F832 2800 A7AC                  	dc.l Map_obj28a+$28000000
0001F836 1100 0585                  	dc.b $11, 0, 5,	$85
0001F83A 2800 A7C4                  	dc.l Map_obj28b+$28000000
0001F83E 1200 0593                  	dc.b $12, 0, 5,	$93
0001F842 2800 A7AC                  	dc.l Map_obj28a+$28000000
0001F846 1300 0565                  	dc.b $13, 0, 5,	$65
0001F84A 2800 A7C4                  	dc.l Map_obj28b+$28000000
0001F84E 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F852                            	even
0001F852                            	even
0001F852                            
0001F852                            ; ---------------------------------------------------------------------------
0001F852                            ; Main level load blocks
0001F852                            ; ---------------------------------------------------------------------------
0001F852                            MainLoadBlocks:
0001F852                            	include "_inc\Main level load blocks.asm"
0001F852                            ; ---------------------------------------------------------------------------
0001F852                            ; Main level load blocks
0001F852                            ;
0001F852                            ; ===FORMAT===
0001F852                            ; level	patterns + (1st	PLC num	* 10^6)
0001F852                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F852                            ; 256x256 mappings
0001F852                            ; blank, music (unused), pal index (unused), pal index
0001F852                            ; ---------------------------------------------------------------------------
0001F852 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001F856 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F85A 0000 0000                  	dc.l Blk256_GHZ
0001F85E 0081 0404                  	dc.b 0,	$81, 4,	4
0001F862 0000 0000                  	dc.l Nem_LZ+$6000000
0001F866 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F86A 0000 0000                  	dc.l Blk256_LZ
0001F86E 0082 0505                  	dc.b 0,	$82, 5,	5
0001F872 0000 0000                  	dc.l Nem_MZ+$8000000
0001F876 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F87A 0000 0000                  	dc.l Blk256_MZ
0001F87E 0083 0606                  	dc.b 0,	$83, 6,	6
0001F882 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F886 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F88A 0000 0000                  	dc.l Blk256_SLZ
0001F88E 0084 0707                  	dc.b 0,	$84, 7,	7
0001F892 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F896 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F89A 0000 0000                  	dc.l Blk256_SYZ
0001F89E 0085 0808                  	dc.b 0,	$85, 8,	8
0001F8A2 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F8A6 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F8AA 0000 0000                  	dc.l Blk256_SBZ
0001F8AE 0086 0909                  	dc.b 0,	$86, 9,	9
0001F8B2 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F8B6 0000 0000                  	dc.l Blk16_GHZ
0001F8BA 0000 0000                  	dc.l Blk256_GHZ
0001F8BE 0086 1313                  	dc.b 0,	$86, $13, $13
0001F8C2                            	even
0001F8C2                            	even
0001F8C2                            
0001F8C2                            ; ---------------------------------------------------------------------------
0001F8C2                            ; Pattern load cues
0001F8C2                            ; ---------------------------------------------------------------------------
0001F8C2                            ArtLoadCues:
0001F8C2                            	include "_inc\Pattern load cues.asm"
0001F8C2                            ; ---------------------------------------------------------------------------
0001F8C2                            ; Pattern load cues - index
0001F8C2                            ; ---------------------------------------------------------------------------
0001F8C2 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F8C6 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F8CA 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F8CE 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F8D2 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F8D6 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F8DA 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F8DE 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F8E2 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F8E6 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F8EA 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F8EE 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F8F2 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F8F6 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F8FA 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F8FE 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F902                            ; ---------------------------------------------------------------------------
0001F902                            ; Pattern load cues - standard block 1
0001F902                            ; ---------------------------------------------------------------------------
0001F902 0002                       PLC_Main:	dc.w 2
0001F904 0000 0000                  		dc.l Nem_Hud		; HUD
0001F908 D940                       		dc.w $D940
0001F90A 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F90E FA80                       		dc.w $FA80
0001F910 0000 0000                  		dc.l Nem_Ring		; rings
0001F914 D740                       		dc.w ringart*$20
0001F916                            ; ---------------------------------------------------------------------------
0001F916                            ; Pattern load cues - standard block 2
0001F916                            ; ---------------------------------------------------------------------------
0001F916 0002                       PLC_Main2:	dc.w 2
0001F918 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F91C AE20                       		dc.w lamppostart*$20
0001F91E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F922 AD00                       		dc.w pointsart*$20
0001F924 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F928 D000                       		dc.w $D000
0001F92A                            ; ---------------------------------------------------------------------------
0001F92A                            ; Pattern load cues - explosion
0001F92A                            ; ---------------------------------------------------------------------------
0001F92A 0000                       PLC_Explode:	dc.w 0
0001F92C 0000 0000                  		dc.l Nem_Explode	; explosion
0001F930 B400                       		dc.w $B400
0001F932                            ; ---------------------------------------------------------------------------
0001F932                            ; Pattern load cues - game/time	over
0001F932                            ; ---------------------------------------------------------------------------
0001F932 0000                       PLC_GameOver:	dc.w 0
0001F934 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F938 ABC0                       		dc.w $ABC0
0001F93A                            ; ---------------------------------------------------------------------------
0001F93A                            ; Pattern load cues - Green Hill
0001F93A                            ; ---------------------------------------------------------------------------
0001F93A 0009                       PLC_GHZ:	dc.w $9
0001F93C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F940 6B00                       		dc.w $6B00
0001F942 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F946 7A00                       		dc.w $7A00
0001F948 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F94C 8000                       		dc.w $8000
0001F94E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F952 8880                       		dc.w $8880
0001F954 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F958 8F60                       		dc.w $8F60
0001F95A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F95E 9360                       		dc.w $9360
0001F960 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F964 9E00                       		dc.w $9E00
0001F966 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F96A A360                       		dc.w $A360
0001F96C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F970 A460                       		dc.w $A460
0001F972 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F976 A660                       		dc.w $A660
0001F978 0005                       PLC_GHZ2:	dc.w 5
0001F97A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F97E 7000                       		dc.w $7000
0001F980 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F984 71C0                       		dc.w $71C0
0001F986 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F98A 7300                       		dc.w $7300
0001F98C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F990 7540                       		dc.w $7540
0001F992 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F996 A1E0                       		dc.w $A1E0
0001F998 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F99C 6980                       		dc.w $6980
0001F99E                            ; ---------------------------------------------------------------------------
0001F99E                            ; Pattern load cues - Labyrinth
0001F99E                            ; ---------------------------------------------------------------------------
0001F99E 000A                       PLC_LZ:		dc.w $A
0001F9A0 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F9A4 3C00                       		dc.w $3C00
0001F9A6 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F9AA 3E00                       		dc.w $3E00
0001F9AC 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F9B0 4B20                       		dc.w $4B20
0001F9B2 0000 0000                  		dc.l Nem_Water		; water	surface
0001F9B6 6000                       		dc.w $6000
0001F9B8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F9BC 6200                       		dc.w $6200
0001F9BE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F9C2 6500                       		dc.w $6500
0001F9C4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F9C8 6900                       		dc.w $6900
0001F9CA 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F9CE 7780                       		dc.w $7780
0001F9D0 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F9D4 7880                       		dc.w $7880
0001F9D6 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F9DA 7980                       		dc.w $7980
0001F9DC 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F9E0 94C0                       		dc.w $94C0
0001F9E2 000C                       PLC_LZ2:	dc.w $C
0001F9E4 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F9E8 7BC0                       		dc.w $7BC0
0001F9EA 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F9EE 7CC0                       		dc.w $7CC0
0001F9F0 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F9F4 7EC0                       		dc.w $7EC0
0001F9F6 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F9FA 5D20                       		dc.w $5D20
0001F9FC 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001FA00 8800                       		dc.w $8800
0001FA02 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001FA06 89E0                       		dc.w $89E0
0001FA08 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FA0C 8CE0                       		dc.w $8CE0
0001FA0E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001FA12 90C0                       		dc.w $90C0
0001FA14 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FA18 A1E0                       		dc.w $A1E0
0001FA1A 0000 0000                  		dc.l Nem_Cork		; cork block
0001FA1E A000                       		dc.w $A000
0001FA20 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA24 A360                       		dc.w $A360
0001FA26 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA2A A460                       		dc.w $A460
0001FA2C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA30 A660                       		dc.w $A660
0001FA32                            ; ---------------------------------------------------------------------------
0001FA32                            ; Pattern load cues - Marble
0001FA32                            ; ---------------------------------------------------------------------------
0001FA32 0008                       PLC_MZ:		dc.w 8
0001FA34 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001FA38 6000                       		dc.w $6000
0001FA3A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FA3E 68A0                       		dc.w $68A0
0001FA40 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001FA44 7000                       		dc.w $7000
0001FA46 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001FA4A 71C0                       		dc.w $71C0
0001FA4C 0000 0000                  		dc.l Nem_Lava		; lava
0001FA50 7500                       		dc.w $7500
0001FA52 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FA56 8880                       		dc.w $8880
0001FA58 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FA5C 8F60                       		dc.w $8F60
0001FA5E 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001FA62 9700                       		dc.w $9700
0001FA64 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FA68 9FE0                       		dc.w $9FE0
0001FA6A 0004                       PLC_MZ2:	dc.w 4
0001FA6C 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001FA70 A260                       		dc.w $A260
0001FA72 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FA76 A360                       		dc.w $A360
0001FA78 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FA7C A460                       		dc.w $A460
0001FA7E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FA82 A660                       		dc.w $A660
0001FA84 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001FA88 5700                       		dc.w $5700
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            ; Pattern load cues - Star Light
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A 0007                       PLC_SLZ:	dc.w 7
0001FA8C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FA90 8000                       		dc.w $8000
0001FA92 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FA96 8520                       		dc.w $8520
0001FA98 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001FA9C 9000                       		dc.w $9000
0001FA9E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001FAA2 9C00                       		dc.w $9C00
0001FAA4 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001FAA8 A260                       		dc.w $A260
0001FAAA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FAAE A360                       		dc.w $A360
0001FAB0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FAB4 A460                       		dc.w $A460
0001FAB6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FABA A660                       		dc.w $A660
0001FABC 0005                       PLC_SLZ2:	dc.w 5
0001FABE 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001FAC2 6E80                       		dc.w $6E80
0001FAC4 0000 0000                  		dc.l Nem_Fan		; fan
0001FAC8 7400                       		dc.w $7400
0001FACA 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001FACE 7980                       		dc.w $7980
0001FAD0 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001FAD4 7B80                       		dc.w $7B80
0001FAD6 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001FADA 9B00                       		dc.w $9B00
0001FADC 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001FAE0 9E00                       		dc.w $9E00
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2                            ; Pattern load cues - Spring Yard
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2 0003                       PLC_SYZ:	dc.w 3
0001FAE4 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001FAE8 8000                       		dc.w $8000
0001FAEA 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001FAEE 8880                       		dc.w $8880
0001FAF0 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001FAF4 8F60                       		dc.w $8F60
0001FAF6 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001FAFA 9700                       		dc.w $9700
0001FAFC 0006                       PLC_SYZ2:	dc.w 6
0001FAFE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FB02 7000                       		dc.w $7000
0001FB04 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FB08 72C0                       		dc.w $72C0
0001FB0A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001FB0E 7740                       		dc.w $7740
0001FB10 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FB14 A1E0                       		dc.w $A1E0
0001FB16 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FB1A A360                       		dc.w $A360
0001FB1C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FB20 A460                       		dc.w $A460
0001FB22 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FB26 A660                       		dc.w $A660
0001FB28                            ; ---------------------------------------------------------------------------
0001FB28                            ; Pattern load cues - Scrap Brain
0001FB28                            ; ---------------------------------------------------------------------------
0001FB28 000A                       PLC_SBZ:	dc.w $A
0001FB2A 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001FB2E 5800                       		dc.w $5800
0001FB30 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001FB34 5D00                       		dc.w $5D00
0001FB36 0000 0000                  		dc.l Nem_Girder		; girder
0001FB3A 5E00                       		dc.w $5E00
0001FB3C 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001FB40 6040                       		dc.w $6040
0001FB42 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001FB46 6880                       		dc.w $6880
0001FB48 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001FB4C 6900                       		dc.w $6900
0001FB4E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001FB52 7220                       		dc.w $7220
0001FB54 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001FB58 76A0                       		dc.w $76A0
0001FB5A 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001FB5E 7B20                       		dc.w $7B20
0001FB60 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FB64 7EA0                       		dc.w $7EA0
0001FB66 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001FB6A 9860                       		dc.w $9860
0001FB6C 000C                       PLC_SBZ2:	dc.w $C
0001FB6E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001FB72 5600                       		dc.w $5600
0001FB74 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001FB78 8000                       		dc.w $8000
0001FB7A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001FB7E 8520                       		dc.w $8520
0001FB80 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001FB84 8C00                       		dc.w $8C00
0001FB86 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001FB8A 8DE0                       		dc.w $8DE0
0001FB8C 0000 0000                  		dc.l Nem_Electric	; electric orb
0001FB90 8FC0                       		dc.w $8FC0
0001FB92 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001FB96 9240                       		dc.w $9240
0001FB98 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001FB9C 7F20                       		dc.w $7F20
0001FB9E 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001FBA2 9BE0                       		dc.w $9BE0
0001FBA4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FBA8 A1E0                       		dc.w $A1E0
0001FBAA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001FBAE A360                       		dc.w $A360
0001FBB0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001FBB4 A460                       		dc.w $A460
0001FBB6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001FBBA A660                       		dc.w $A660
0001FBBC                            ; ---------------------------------------------------------------------------
0001FBBC                            ; Pattern load cues - title card
0001FBBC                            ; ---------------------------------------------------------------------------
0001FBBC 0000                       PLC_TitleCard:	dc.w 0
0001FBBE 0000 0000                  		dc.l Nem_TitleCard
0001FBC2 B000                       		dc.w $B000
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4                            ; Pattern load cues - act 3 boss
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4 0005                       PLC_Boss:	dc.w 5
0001FBC6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FBCA 8000                       		dc.w $8000
0001FBCC 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001FBD0 8D80                       		dc.w $8D80
0001FBD2 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001FBD6 93A0                       		dc.w $93A0
0001FBD8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001FBDC A300                       		dc.w $A300
0001FBDE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001FBE2 A300                       		dc.w $A300
0001FBE4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FBE8 A540                       		dc.w $A540
0001FBEA                            ; ---------------------------------------------------------------------------
0001FBEA                            ; Pattern load cues - act 1/2 signpost
0001FBEA                            ; ---------------------------------------------------------------------------
0001FBEA 0002                       PLC_Signpost:	dc.w 2
0001FBEC 0000 0000                  		dc.l Nem_SignPost	; signpost
0001FBF0 D000                       		dc.w $D000
0001FBF2 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001FBF6 96C0                       		dc.w $96C0
0001FBF8 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001FBFC 8C40                       		dc.w $8C40
0001FBFE                            ; ---------------------------------------------------------------------------
0001FBFE                            ; Pattern load cues - beta special stage warp effect
0001FBFE                            ; ---------------------------------------------------------------------------
0001FBFE 0000                       PLC_Warp:	dc.w 0
0001FC00 0000 0000                  		dc.l Nem_Warp
0001FC04 A820                       		dc.w $A820
0001FC06                            ; ---------------------------------------------------------------------------
0001FC06                            ; Pattern load cues - special stage
0001FC06                            ; ---------------------------------------------------------------------------
0001FC06 000C                       PLC_SpeStage:	dc.w $C
0001FC08 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001FC0C 0000                       		dc.w 0
0001FC0E 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001FC12 0A20                       		dc.w $A20
0001FC14 0000 0000                  		dc.l Nem_Bumper		; bumper
0001FC18 4760                       		dc.w $4760
0001FC1A 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001FC1E 4A20                       		dc.w $4A20
0001FC20 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001FC24 4C60                       		dc.w $4C60
0001FC26 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001FC2A 5E00                       		dc.w $5E00
0001FC2C 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001FC30 6E00                       		dc.w $6E00
0001FC32 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001FC36 7E00                       		dc.w $7E00
0001FC38 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001FC3C 8E00                       		dc.w $8E00
0001FC3E 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001FC42 9E00                       		dc.w $9E00
0001FC44 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001FC48 BE00                       		dc.w $BE00
0001FC4A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001FC4E EE00                       		dc.w $EE00
0001FC50 0000 0000                  		dc.l Nem_Ring		; rings
0001FC54 45A0                       		dc.w ssringart*$20
0001FC56                            ; ---------------------------------------------------------------------------
0001FC56                            ; Pattern load cues - GHZ animals
0001FC56                            ; ---------------------------------------------------------------------------
0001FC56 0001                       PLC_GHZAnimals:	dc.w 1
0001FC58 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FC5C B000                       		dc.w $B000
0001FC5E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FC62 B240                       		dc.w $B240
0001FC64                            ; ---------------------------------------------------------------------------
0001FC64                            ; Pattern load cues - LZ animals
0001FC64                            ; ---------------------------------------------------------------------------
0001FC64 0001                       PLC_LZAnimals:	dc.w 1
0001FC66 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FC6A B000                       		dc.w $B000
0001FC6C 0000 0000                  		dc.l Nem_Seal		; seal
0001FC70 B240                       		dc.w $B240
0001FC72                            ; ---------------------------------------------------------------------------
0001FC72                            ; Pattern load cues - MZ animals
0001FC72                            ; ---------------------------------------------------------------------------
0001FC72 0001                       PLC_MZAnimals:	dc.w 1
0001FC74 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FC78 B000                       		dc.w $B000
0001FC7A 0000 0000                  		dc.l Nem_Seal		; seal
0001FC7E B240                       		dc.w $B240
0001FC80                            ; ---------------------------------------------------------------------------
0001FC80                            ; Pattern load cues - SLZ animals
0001FC80                            ; ---------------------------------------------------------------------------
0001FC80 0001                       PLC_SLZAnimals:	dc.w 1
0001FC82 0000 0000                  		dc.l Nem_Pig		; pig
0001FC86 B000                       		dc.w $B000
0001FC88 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FC8C B240                       		dc.w $B240
0001FC8E                            ; ---------------------------------------------------------------------------
0001FC8E                            ; Pattern load cues - SYZ animals
0001FC8E                            ; ---------------------------------------------------------------------------
0001FC8E 0001                       PLC_SYZAnimals:	dc.w 1
0001FC90 0000 0000                  		dc.l Nem_Pig		; pig
0001FC94 B000                       		dc.w $B000
0001FC96 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FC9A B240                       		dc.w $B240
0001FC9C                            ; ---------------------------------------------------------------------------
0001FC9C                            ; Pattern load cues - SBZ animals
0001FC9C                            ; ---------------------------------------------------------------------------
0001FC9C 0001                       PLC_SBZAnimals:	dc.w 1
0001FC9E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FCA2 B000                       		dc.w $B000
0001FCA4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FCA8 B240                       		dc.w $B240
0001FCAA                            ; ---------------------------------------------------------------------------
0001FCAA                            ; Pattern load cues - special stage results screen
0001FCAA                            ; ---------------------------------------------------------------------------
0001FCAA 0001                       PLC_SpeStResult:dc.w 1
0001FCAC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001FCB0 A820                       		dc.w $A820
0001FCB2 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001FCB6 AA20                       		dc.w $AA20
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8                            ; Pattern load cues - ending sequence
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8 000C                       PLC_Ending:	dc.w $C
0001FCBA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001FCBE 6B00                       		dc.w $6B00
0001FCC0 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001FCC4 7400                       		dc.w $7400
0001FCC6 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FCCA 78A0                       		dc.w $78A0
0001FCCC 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001FCD0 7C20                       		dc.w $7C20
0001FCD2 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001FCD6 A480                       		dc.w $A480
0001FCD8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001FCDC AA60                       		dc.w $AA60
0001FCDE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001FCE2 ACA0                       		dc.w $ACA0
0001FCE4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001FCE8 AE60                       		dc.w $AE60
0001FCEA 0000 0000                  		dc.l Nem_Seal		; seal
0001FCEE B0A0                       		dc.w $B0A0
0001FCF0 0000 0000                  		dc.l Nem_Pig		; pig
0001FCF4 B260                       		dc.w $B260
0001FCF6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001FCFA B4A0                       		dc.w $B4A0
0001FCFC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001FD00 B660                       		dc.w $B660
0001FD02 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001FD06 B8A0                       		dc.w $B8A0
0001FD08                            ; ---------------------------------------------------------------------------
0001FD08                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001FD08                            ; ---------------------------------------------------------------------------
0001FD08 0002                       PLC_TryAgain:	dc.w 2
0001FD0A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001FD0E 78A0                       		dc.w $78A0
0001FD10 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001FD14 7C20                       		dc.w $7C20
0001FD16 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001FD1A B400                       		dc.w $B400
0001FD1C                            ; ---------------------------------------------------------------------------
0001FD1C                            ; Pattern load cues - Eggman on SBZ 2
0001FD1C                            ; ---------------------------------------------------------------------------
0001FD1C 0002                       PLC_EggmanSBZ2:	dc.w 2
0001FD1E 0000 0000                  		dc.l Nem_SbzBlock	; block
0001FD22 A300                       		dc.w $A300
0001FD24 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001FD28 8000                       		dc.w $8000
0001FD2A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001FD2E 9400                       		dc.w $9400
0001FD30                            ; ---------------------------------------------------------------------------
0001FD30                            ; Pattern load cues - final boss
0001FD30                            ; ---------------------------------------------------------------------------
0001FD30 0004                       PLC_FZBoss:	dc.w 4
0001FD32 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001FD36 7400                       		dc.w $7400
0001FD38 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001FD3C 6000                       		dc.w $6000
0001FD3E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001FD42 8000                       		dc.w $8000
0001FD44 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001FD48 8E00                       		dc.w $8E00
0001FD4A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001FD4E A540                       		dc.w $A540
0001FD50                            		even
0001FD50                            		even
0001FD50                            
0001FD50                            		incbin	misc\padding.bin
0001FE3E                            		even
0001FE3E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000202A0                            		even
000202A0                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
00020398                            		even
00020398                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
00020492                            		even
00020492                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0002145E                            		even
0002145E                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022E08 00                         		even
00022E08                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022E4A                            		even
00022E4A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022F08                            		even
00022F08                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000233B0                            		even
000233B0                            ; ---------------------------------------------------------------------------
000233B0                            ; Sprite mappings - Sonic
000233B0                            ; ---------------------------------------------------------------------------
000233B0                            Map_Sonic:
000233B0                            	include "_maps\Sonic.asm"
000233B0                            ; ---------------------------------------------------------------------------
000233B0                            ; Sprite mappings - Sonic
000233B0                            ; ---------------------------------------------------------------------------
000233B0 0000 0000                  		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
000233B4 0000 0000                  		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
000233B8 0000 0000                  		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
000233BC 0000 0000                  		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
000233C0 0000 0000                  		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
000233C4 0000 0000                  		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
000233C8 0000 0000                  		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
000233CC 0000 0000                  		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
000233D0 0000 0000                  		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
000233D4 0000 0000                  		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
000233D8 0000 0000                  		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
000233DC 0000 0000                  		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
000233E0 0000 0000                  		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
000233E4 0000 0000                  		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
000233E8 0000 0000                  		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
000233EC 0000 0000                  		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
000233F0 0000 0000                  		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
000233F4 0000 0000                  		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
000233F8 0000 0000                  		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
000233FC 0000 0000                  		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
00023400 0000 0000                  		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
00023404 0000 0000                  		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
00023408 0000 0000                  		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
0002340C 0000 0000                  		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
00023410 0000 0000                  		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
00023414 0000 0000                  		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
00023418 0000 0000                  		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
0002341C 0000 0000                  		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
00023420 0000 0000                  		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
00023424 0000 0000                  		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
00023428 0000 0000                  		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
0002342C 0000 0000                  		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
00023430 0000 0000                  		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
00023434 0000 0000                  		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
00023438 0000 0000                  		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
0002343C 0000 0000                  		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
00023440 0000 0000                  		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
00023444 0000 0000                  		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
00023448 0000 0000                  		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
0002344C 0000 0000                  		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
00023450 0000 0000                  		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
00023454 0000 0000                  		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
00023458 0000 0000                  		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
0002345C 0000 0000                  		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
00023460 00                         byte_21292:	dc.b 0
00023461 04                         byte_21293:	dc.b 4			; standing
00023462 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023467 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
0002346C 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00023471 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00023476 03                         byte_212A8:	dc.b 3			; waiting 1
00023477 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002347C FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00023481 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023486 03                         byte_212B8:	dc.b 3			; waiting 2
00023487 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002348C FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00023491 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00023496 03                         byte_212C8:	dc.b 3			; waiting 3
00023497 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002349C FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
000234A1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000234A6 03                         byte_212D8:	dc.b 3			; looking up
000234A7 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
000234AC 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
000234B1 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
000234B6 04                         byte_212E8:	dc.b 4			; walking 1-1
000234B7 EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
000234BC FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
000234C1 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
000234C6 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
000234CB 02                         byte_212FD:	dc.b 2			; walking 1-2
000234CC EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
000234D1 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
000234D6 02                         byte_21308:	dc.b 2			; walking 1-3
000234D7 ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
000234DC FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
000234E1 04                         byte_21313:	dc.b 4			; walking 1-4
000234E2 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000234E7 FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
000234EC FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
000234F1 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
000234F6 02                         byte_21328:	dc.b 2			; walking 1-5
000234F7 EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
000234FC FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00023501 03                         byte_21333:	dc.b 3			; walking 1-6
00023502 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00023507 FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
0002350C 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00023511 05                         byte_21343:	dc.b 5			; walking 2-1
00023512 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00023517 EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
0002351C FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00023521 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00023526 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
0002352B 06                         byte_2135D:	dc.b 6			; walking 2-2
0002352C EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00023531 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023536 FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
0002353B 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00023540 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00023545 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
0002354A 04                         byte_2137C:	dc.b 4			; walking 2-3
0002354B ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023550 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023555 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
0002355A 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
0002355F 05                         byte_21391:	dc.b 5			; walking 2-4
00023560 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00023565 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
0002356A FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
0002356F 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00023574 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00023579 04                         byte_213AB:	dc.b 4			; walking 2-5
0002357A EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
0002357F EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00023584 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00023589 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
0002358E 05                         byte_213C0:	dc.b 5			; walking 2-6
0002358F ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00023594 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00023599 FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
0002359E FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
000235A3 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
000235A8 04                         byte_213DA:	dc.b 4			; walking 3-1
000235A9 F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
000235AE EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
000235B3 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
000235B8 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
000235BD 02                         byte_213EF:	dc.b 2			; walking 3-2
000235BE F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
000235C3 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
000235C8 02                         byte_213FA:	dc.b 2			; walking 3-3
000235C9 F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
000235CE F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
000235D3 04                         byte_21405:	dc.b 4			; walking 3-4
000235D4 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
000235D9 EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
000235DE FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
000235E3 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
000235E8 02                         byte_2141A:	dc.b 2			; walking 3-5
000235E9 F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
000235EE F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
000235F3 03                         byte_21425:	dc.b 3			; walking 3-6
000235F4 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
000235F9 EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
000235FE F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00023603 06                         byte_21435:	dc.b 6			; walking 4-1
00023604 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00023609 ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
0002360E F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00023613 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00023618 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
0002361D FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00023622 06                         byte_21454:	dc.b 6			; walking 4-2
00023623 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023628 E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
0002362D EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00023632 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00023637 F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
0002363C 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00023641 04                         byte_21473:	dc.b 4			; walking 4-3
00023642 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00023647 F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
0002364C EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00023651 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00023656 05                         byte_21488:	dc.b 5			; walking 4-4
00023657 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
0002365C ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00023661 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00023666 F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
0002366B 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00023670 04                         byte_214A2:	dc.b 4			; walking 4-5
00023671 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00023676 F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
0002367B EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00023680 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00023685 05                         byte_214B7:	dc.b 5			; walking 4-6
00023686 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
0002368B EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00023690 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00023695 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
0002369A 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
0002369F 02                         byte_214D1:	dc.b 2			; running 1-1
000236A0 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000236A5 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000236AA 02                         byte_214DC:	dc.b 2			; running 1-2
000236AB EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000236B0 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000236B5 02                         byte_214E7:	dc.b 2			; running 1-3
000236B6 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000236BB FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000236C0 02                         byte_214F2:	dc.b 2			; running 1-4
000236C1 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
000236C6 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
000236CB 04                         byte_214FD:	dc.b 4			; running 2-1
000236CC EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000236D1 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236D6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000236DB FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
000236E0 03                         byte_21512:	dc.b 3			; running 2-2
000236E1 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000236E6 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236EB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
000236F0 04                         byte_21522:	dc.b 4			; running 2-3
000236F1 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
000236F6 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
000236FB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023700 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00023705 03                         byte_21537:	dc.b 3			; running 2-4
00023706 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002370B EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00023710 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00023715 02                         byte_21547:	dc.b 2			; running 3-1
00023716 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002371B F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023720 02                         byte_21552:	dc.b 2			; running 3-2
00023721 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023726 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002372B 02                         byte_2155D:	dc.b 2			; running 3-3
0002372C F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00023731 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023736 02                         byte_21568:	dc.b 2			; running 3-4
00023737 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002373C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00023741 04                         byte_21573:	dc.b 4			; running 4-1
00023742 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023747 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
0002374C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023751 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023756 02                         byte_21588:	dc.b 2			; running 4-2
00023757 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
0002375C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023761 04                         byte_21593:	dc.b 4			; running 4-3
00023762 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
00023767 F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
0002376C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023771 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
00023776 02                         byte_215A8:	dc.b 2			; running 4-4
00023777 F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
0002377C EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00023781 01                         byte_215B3:	dc.b 1			; rolling 1
00023782 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023787 01                         byte_215B9:	dc.b 1			; rolling 2
00023788 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002378D 01                         byte_215BF:	dc.b 1			; rolling 3
0002378E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023793 01                         byte_215C5:	dc.b 1			; rolling 4
00023794 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00023799 01                         byte_215CB:	dc.b 1			; rolling 5
0002379A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002379F 02                         byte_215D1:	dc.b 2			; warped 1 (unused)
000237A0 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
000237A5 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
000237AA 01                         byte_215DC:	dc.b 1			; warped 2 (unused)
000237AB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000237B0 02                         byte_215E2:	dc.b 2			; warped 3 (unused)
000237B1 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
000237B6 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
000237BB 01                         byte_215ED:	dc.b 1			; warped 4 (unused)
000237BC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000237C1 02                         byte_215F3:	dc.b 2			; stopping 1
000237C2 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000237C7 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
000237CC 04                         byte_215FE:	dc.b 4			; stopping 2
000237CD ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
000237D2 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
000237D7 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
000237DC 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
000237E1 04                         byte_21613:	dc.b 4			; ducking
000237E2 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
000237E7 FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
000237EC 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
000237F1 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
000237F6 03                         byte_21628:	dc.b 3			; balancing 1
000237F7 EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
000237FC F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00023801 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
00023806 03                         byte_21638:	dc.b 3			; balancing 2
00023807 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
0002380C 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00023811 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
00023816 03                         byte_21648:	dc.b 3			; spinning 1 (LZ)
00023817 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
0002381C FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00023821 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023826 02                         byte_21658:	dc.b 2			; spinning 2 (LZ)
00023827 F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
0002382C F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00023831 03                         byte_21663:	dc.b 3			; spinning 3 (LZ)
00023832 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
00023837 FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
0002383C 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00023841 03                         byte_21673:	dc.b 3			; spinning 4 (LZ)
00023842 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00023847 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
0002384C 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00023851 03                         byte_21683:	dc.b 3			; bouncing
00023852 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
00023857 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
0002385C 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
00023861 04                         byte_21693:	dc.b 4			; hanging 1 (LZ)
00023862 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
00023867 0005 000C 08               		dc.b 0,	5, 0, $C, 8
0002386C F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023871 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
00023876 04                         byte_216A8:	dc.b 4			; hanging 2 (LZ)
00023877 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
0002387C 0005 000C 08               		dc.b 0,	5, 0, $C, 8
00023881 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
00023886 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
0002388B 05                         byte_216BD:	dc.b 5			; celebration leap 1 (unused)
0002388C E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
00023891 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
00023896 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
0002389B 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000238A0 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000238A5 05                         byte_216D7:	dc.b 5			; celebration leap 2 (unused)
000238A6 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
000238AB E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
000238B0 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
000238B5 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000238BA 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000238BF 02                         byte_216F1:	dc.b 2			; pushing 1
000238C0 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000238C5 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000238CA 03                         byte_216FC:	dc.b 3			; pushing 2
000238CB EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000238D0 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000238D5 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000238DA 02                         byte_2170C:	dc.b 2			; pushing 3
000238DB ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
000238E0 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
000238E5 03                         byte_21717:	dc.b 3			; pushing 4
000238E6 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
000238EB 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
000238F0 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
000238F5 02                         byte_21727:	dc.b 2			; surfing or sliding (unused)
000238F6 EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
000238FB FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00023900 03                         byte_21732:	dc.b 3			; collecting bubble (unused)
00023901 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00023906 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
0002390B E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00023910 03                         byte_21742:	dc.b 3			; death	1
00023911 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023916 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002391B F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00023920 05                         byte_21752:	dc.b 5			; drowning
00023921 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023926 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002392B F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00023930 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00023935 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
0002393A 05                         byte_2176C:	dc.b 5			; death	2
0002393B E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00023940 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00023945 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
0002394A 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
0002394F 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00023954 02                         byte_21786:	dc.b 2			; shrinking 1 (unused)
00023955 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002395A F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
0002395F 03                         byte_21791:	dc.b 3			; shrinking 2 (unused)
00023960 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00023965 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
0002396A 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
0002396F 01                         byte_217A1:	dc.b 1			; shrinking 3 (unused)
00023970 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
00023975 01                         byte_217A7:	dc.b 1			; shrinking 4 (unused)
00023976 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0002397B 01                         byte_217AD:	dc.b 1			; shrinking 5 (unused)
0002397C F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
00023981 03                         byte_217B3:	dc.b 3			; injury
00023982 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
00023987 FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
0002398C 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
00023991 03                         byte_217C3:	dc.b 3			; spinning 5 (LZ)
00023992 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
00023997 FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
0002399C 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
000239A1 03                         byte_217D3:	dc.b 3			; spinning 6 (LZ)
000239A2 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
000239A7 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000239AC 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
000239B1 03                         byte_217E3:	dc.b 3			; collecting bubble (LZ)
000239B2 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000239B7 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
000239BC 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
000239C1 02                         byte_217F3:	dc.b 2			; water	slide (LZ)
000239C2 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
000239C7 F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
000239CC                            		even
000239CC                            		even
000239CC                            
000239CC                            ; ---------------------------------------------------------------------------
000239CC                            ; Uncompressed graphics	loading	array for Sonic
000239CC                            ; ---------------------------------------------------------------------------
000239CC                            SonicDynPLC:
000239CC                            	include "_inc\Sonic dynamic pattern load cues.asm"
000239CC                            ; ---------------------------------------------------------------------------
000239CC                            ; Uncompressed graphics	loading	array for Sonic
000239CC                            ; ---------------------------------------------------------------------------
000239CC 0000                       		dc.w SonPLC_Blank-SonicDynPLC
000239CE 0000                       		dc.w SonPLC_Stand-SonicDynPLC
000239D0 0000                       		dc.w SonPLC_Wait1-SonicDynPLC
000239D2 0000                       		dc.w SonPLC_Wait2-SonicDynPLC
000239D4 0000                       		dc.w SonPLC_Wait3-SonicDynPLC
000239D6 0000                       		dc.w SonPLC_LookUp-SonicDynPLC
000239D8 0000                       		dc.w SonPLC_Walk11-SonicDynPLC
000239DA 0000                       		dc.w SonPLC_Walk12-SonicDynPLC
000239DC 0000                       		dc.w SonPLC_Walk13-SonicDynPLC
000239DE 0000                       		dc.w SonPLC_Walk14-SonicDynPLC
000239E0 0000                       		dc.w SonPLC_Walk15-SonicDynPLC
000239E2 0000                       		dc.w SonPLC_Walk16-SonicDynPLC
000239E4 0000                       		dc.w SonPLC_Walk21-SonicDynPLC
000239E6 0000                       		dc.w SonPLC_Walk22-SonicDynPLC
000239E8 0000                       		dc.w SonPLC_Walk23-SonicDynPLC
000239EA 0000                       		dc.w SonPLC_Walk24-SonicDynPLC
000239EC 0000                       		dc.w SonPLC_Walk25-SonicDynPLC
000239EE 0000                       		dc.w SonPLC_Walk26-SonicDynPLC
000239F0 0000                       		dc.w SonPLC_Walk31-SonicDynPLC
000239F2 0000                       		dc.w SonPLC_Walk32-SonicDynPLC
000239F4 0000                       		dc.w SonPLC_Walk33-SonicDynPLC
000239F6 0000                       		dc.w SonPLC_Walk34-SonicDynPLC
000239F8 0000                       		dc.w SonPLC_Walk35-SonicDynPLC
000239FA 0000                       		dc.w SonPLC_Walk36-SonicDynPLC
000239FC 0000                       		dc.w SonPLC_Walk41-SonicDynPLC
000239FE 0000                       		dc.w SonPLC_Walk42-SonicDynPLC
00023A00 0000                       		dc.w SonPLC_Walk43-SonicDynPLC
00023A02 0000                       		dc.w SonPLC_Walk44-SonicDynPLC
00023A04 0000                       		dc.w SonPLC_Walk45-SonicDynPLC
00023A06 0000                       		dc.w SonPLC_Walk46-SonicDynPLC
00023A08 0000                       		dc.w SonPLC_Run11-SonicDynPLC
00023A0A 0000                       		dc.w SonPLC_Run12-SonicDynPLC
00023A0C 0000                       		dc.w SonPLC_Run13-SonicDynPLC
00023A0E 0000                       		dc.w SonPLC_Run14-SonicDynPLC
00023A10 0000                       		dc.w SonPLC_Run21-SonicDynPLC
00023A12 0000                       		dc.w SonPLC_Run22-SonicDynPLC
00023A14 0000                       		dc.w SonPLC_Run23-SonicDynPLC
00023A16 0000                       		dc.w SonPLC_Run24-SonicDynPLC
00023A18 0000                       		dc.w SonPLC_Run31-SonicDynPLC
00023A1A 0000                       		dc.w SonPLC_Run32-SonicDynPLC
00023A1C 0000                       		dc.w SonPLC_Run33-SonicDynPLC
00023A1E 0000                       		dc.w SonPLC_Run34-SonicDynPLC
00023A20 0000                       		dc.w SonPLC_Run41-SonicDynPLC
00023A22 0000                       		dc.w SonPLC_Run42-SonicDynPLC
00023A24 0000                       		dc.w SonPLC_Run43-SonicDynPLC
00023A26 0000                       		dc.w SonPLC_Run44-SonicDynPLC
00023A28 0000                       		dc.w SonPLC_Roll1-SonicDynPLC
00023A2A 0000                       		dc.w SonPLC_Roll2-SonicDynPLC
00023A2C 0000                       		dc.w SonPLC_Roll3-SonicDynPLC
00023A2E 0000                       		dc.w SonPLC_Roll4-SonicDynPLC
00023A30 0000                       		dc.w SonPLC_Roll5-SonicDynPLC
00023A32 0000                       		dc.w SonPLC_Warp1-SonicDynPLC
00023A34 0000                       		dc.w SonPLC_Warp2-SonicDynPLC
00023A36 0000                       		dc.w SonPLC_Warp3-SonicDynPLC
00023A38 0000                       		dc.w SonPLC_Warp4-SonicDynPLC
00023A3A 0000                       		dc.w SonPLC_Stop1-SonicDynPLC
00023A3C 0000                       		dc.w SonPLC_Stop2-SonicDynPLC
00023A3E 0000                       		dc.w SonPLC_Duck-SonicDynPLC
00023A40 0000                       		dc.w SonPLC_Balance1-SonicDynPLC
00023A42 0000                       		dc.w SonPLC_Balance2-SonicDynPLC
00023A44 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023A46 0000                       		dc.w SonPLC_Float2-SonicDynPLC
00023A48 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023A4A 0000                       		dc.w SonPLC_Float4-SonicDynPLC
00023A4C 0000                       		dc.w SonPLC_Spring-SonicDynPLC
00023A4E 0000                       		dc.w SonPLC_Hang1-SonicDynPLC
00023A50 0000                       		dc.w SonPLC_Hang2-SonicDynPLC
00023A52 0000                       		dc.w SonPLC_Leap1-SonicDynPLC
00023A54 0000                       		dc.w SonPLC_Leap2-SonicDynPLC
00023A56 0000                       		dc.w SonPLC_Push1-SonicDynPLC
00023A58 0000                       		dc.w SonPLC_Push2-SonicDynPLC
00023A5A 0000                       		dc.w SonPLC_Push3-SonicDynPLC
00023A5C 0000                       		dc.w SonPLC_Push4-SonicDynPLC
00023A5E 0000                       		dc.w SonPLC_Slide-SonicDynPLC
00023A60 0000                       		dc.w SonPLC_BblUnk-SonicDynPLC
00023A62 0000                       		dc.w SonPLC_Death1-SonicDynPLC
00023A64 0000                       		dc.w SonPLC_Drown-SonicDynPLC
00023A66 0000                       		dc.w SonPLC_Burnt-SonicDynPLC
00023A68 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC
00023A6A 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC
00023A6C 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC
00023A6E 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC
00023A70 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC
00023A72 0000                       		dc.w SonPLC_Float1-SonicDynPLC
00023A74 0000                       		dc.w SonPLC_Float3-SonicDynPLC
00023A76 0000                       		dc.w SonPLC_Injury1-SonicDynPLC
00023A78 0000                       		dc.w SonPLC_Bubble-SonicDynPLC
00023A7A 0000                       		dc.w SonPLC_Injury2-SonicDynPLC
00023A7C 00                         SonPLC_Blank:	dc.b 0
00023A7D 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
00023A86 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
00023A8D 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
00023A94 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
00023A9B 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
00023AA2 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
00023AAB 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
00023AB0 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
00023AB5 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00023ABE 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00023AC3 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
00023ACA 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00023AD5 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00023AE2 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
00023AEB 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
00023AF6 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00023AFF 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
00023B0A 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00023B13 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
00023B18 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00023B1D 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
00023B26 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
00023B2B 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00023B32 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00023B3F 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00023B4C 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00023B55 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
00023B60 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
00023B69 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
00023B74 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
00023B79 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
00023B7E 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
00023B83 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
00023B88 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
00023B91 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
00023B98 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
00023BA1 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
00023BA8 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
00023BAD 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
00023BB2 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
00023BB7 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00023BBC 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00023BC5 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
00023BCA 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00023BD3 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
00023BD8 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
00023BDB 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00023BDE 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00023BE1 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00023BE4 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
00023BE7 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00023BEC 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00023BEF 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00023BF4 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
00023BF7 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00023BFC 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00023C05 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00023C0E 0323 5B23 5EF3 61          SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00023C15 03B3 7173 7D00 71          SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
00023C1C 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00023C23 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
00023C26 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00023C2D 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00023C34 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
00023C3B 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00023C44 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00023C4D 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
00023C58 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
00023C63 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
00023C68 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
00023C6F 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
00023C74 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
00023C7B 0254 40B4 46               SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
00023C80 0384 5234 5B04 5F          SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
00023C87 0374 6014 68B4 6A          SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
00023C8E 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
00023C99 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
00023CA4 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
00023CA9 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
00023CB0 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
00023CB3 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
00023CB6 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
00023CB9 03B4 D214 DE34 E0          SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00023CC0 0354 E4B4 EA10 6D          SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
00023CC7 02F4 F625 06               SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
00023CCC                            		even
00023CCC                            		even
00023CCC                            
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            ; Uncompressed graphics	- Sonic
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002DDEC                            		even
0002DDEC                            
0002DDEC                            ; ---------------------------------------------------------------------------
0002DDEC                            ; Uncompressed graphics	- Sonime
0002DDEC                            ; ---------------------------------------------------------------------------
0002DDEC                            Art_Sonime_Torso:	incbin	artunc\sonime_torso.bin
0002DF6C                            		even
0002DF6C                            Art_Sonime_Head:	incbin	artunc\sonime_head.bin
0002E1EC                            		even
0002E1EC                            Art_Sonime_Hair:	incbin	artunc\sonime_hair.bin
0002E2EC                            		even
0002E2EC                            Art_Sonime_Faces:	incbin	artunc\sonime_faces.bin
0002EBEC                            		even
0002EBEC                            Art_Sonime_LeftEar:	incbin	artunc\sonime_leftear.bin
0002EC2C                            		even
0002EC2C                            Art_Sonime_RightEar:	incbin	artunc\sonime_rightear.bin
0002ECAC                            		even
0002ECAC                            
0002ECAC                            ; ---------------------------------------------------------------------------
0002ECAC                            ; Compressed graphics - various
0002ECAC                            ; ---------------------------------------------------------------------------
0002ECAC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002EDB0                            		even
0002EDB0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002EDEA                            		even
0002EDEA                            UnC_Shield:	incbin	artunc\shield.bin	; shield
0002F14A                            		even
0002F14A                            ArtUnc_InvStars:	incbin	artunc\invstars.bin	; invincibility stars
0002F54A                            		even
0002F54A                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F654                            		even
0002F654                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F6A6                            		even
0002F6A6                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F8EE                            		even
0002F8EE                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FA74                            		even
0002FA74                            ; ---------------------------------------------------------------------------
0002FA74                            ; Sprite mappings - walls of the special stage
0002FA74                            ; ---------------------------------------------------------------------------
0002FA74                            Map_SSWalls:
0002FA74                            	include "_maps\SSwalls.asm"
0002FA74                            ; ---------------------------------------------------------------------------
0002FA74                            ; Sprite mappings - walls of the special stage
0002FA74                            ; ---------------------------------------------------------------------------
0002FA74 0000                       Map_SSWalls2:	dc.w byte_2C584-Map_SSWalls2
0002FA76 01                         byte_2C584:	dc.b 1
0002FA77 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0002FA7C                            		even
0002FA7C                            		even
0002FA7C                            ; ---------------------------------------------------------------------------
0002FA7C                            ; Compressed graphics - special stage
0002FA7C                            ; ---------------------------------------------------------------------------
0002FA7C                            Art_SSWalls:	incbin	artunc\sswalls.bin	; special stage walls
00031A7C                            		even
00031A7C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031BB0                            		even
00031BB0                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032840                            		even
00032840                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032B40                            		even
00032B40                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033034                            		even
00033034                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033122                            		even
00033122                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000331F2                            		even
000331F2                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000332E8                            		even
000332E8                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033346                            		even
00033346                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000333D8                            		even
000333D8                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003349A                            		even
0003349A                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033568                            		even
00033568                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033634                            		even
00033634                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000336FC                            		even
000336FC                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000337C6                            		even
000337C6                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033896                            		even
00033896                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033A8A                            		even
00033A8A                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033BF2                            		even
00033BF2                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033CA2                            		even
00033CA2                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033D7C                            		even
00033D7C                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00033E00                            		even
00033E00                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00033F7E                            		even
00033F7E                            ; ---------------------------------------------------------------------------
00033F7E                            ; Compressed graphics - GHZ stuff
00033F7E                            ; ---------------------------------------------------------------------------
00033F7E                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00033FC8                            		even
00033FC8                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000340E2                            		even
000340E2                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000341CE                            		even
000341CE                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034216                            		even
00034216                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000343B4                            		even
000343B4                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034430                            		even
00034430                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034644                            		even
00034644                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034770                            		even
00034770                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003489E                            		even
0003489E                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003493C                            		even
0003493C                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003499C                            		even
0003499C                            ; ---------------------------------------------------------------------------
0003499C                            ; Compressed graphics - LZ stuff
0003499C                            ; ---------------------------------------------------------------------------
0003499C                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034AC0                            		even
00034AC0                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000352B4                            		even
000352B4                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035434                            		even
00035434                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003559E                            		even
0003559E                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035B88 00                         		even
00035B88                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035C3E                            		even
00035C3E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035CE0                            		even
00035CE0                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00035E3C                            		even
00035E3C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00035EA0                            		even
00035EA0                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00035FF2                            		even
00035FF2                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000364D4                            		even
000364D4                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036644                            		even
00036644                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000368FC                            		even
000368FC                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036A34                            		even
00036A34                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036B5E                            		even
00036B5E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036C6E                            		even
00036C6E                            ; ---------------------------------------------------------------------------
00036C6E                            ; Compressed graphics - MZ stuff
00036C6E                            ; ---------------------------------------------------------------------------
00036C6E                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00036EFC                            		even
00036EFC                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00036FBA                            		even
00036FBA                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037072                            		even
00037072                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000370C6                            		even
000370C6                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000373A4                            		even
000373A4                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037CBA                            		even
00037CBA                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00037E1E                            		even
00037E1E                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00037EA6                            		even
00037EA6                            ; ---------------------------------------------------------------------------
00037EA6                            ; Compressed graphics - SLZ stuff
00037EA6                            ; ---------------------------------------------------------------------------
00037EA6                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000380E2                            		even
000380E2                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038228                            		even
00038228                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003846C                            		even
0003846C                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000384CE                            		even
000384CE                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000385B0                            		even
000385B0                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038792                            		even
00038792                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003889E                            		even
0003889E                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038942                            		even
00038942                            ; ---------------------------------------------------------------------------
00038942                            ; Compressed graphics - SYZ stuff
00038942                            ; ---------------------------------------------------------------------------
00038942                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038AAC                            		even
00038AAC                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038B0E                            		even
00038B0E                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038BF0                            		even
00038BF0                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00038E7E                            		even
00038E7E                            ; ---------------------------------------------------------------------------
00038E7E                            ; Compressed graphics - SBZ stuff
00038E7E                            ; ---------------------------------------------------------------------------
00038E7E                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00038ED2                            		even
00038ED2                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003916E                            		even
0003916E                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039372                            		even
00039372                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039510                            		even
00039510                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039840                            		even
00039840                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039A1E                            		even
00039A1E                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039A76                            		even
00039A76                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039BF6                            		even
00039BF6                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039CF4                            		even
00039CF4                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00039E80                            		even
00039E80                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00039ED0                            		even
00039ED0                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00039F28                            		even
00039F28                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A024                            		even
0003A024                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A13A                            		even
0003A13A                            ; ---------------------------------------------------------------------------
0003A13A                            ; Compressed graphics - enemies
0003A13A                            ; ---------------------------------------------------------------------------
0003A13A                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A4FA                            		even
0003A4FA                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A9E8                            		even
0003A9E8                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AD8E                            		even
0003AD8E                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AF76                            		even
0003AF76                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B660                            		even
0003B660                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B8C8                            		even
0003B8C8                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BB44 00                         		even
0003BB44                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C068                            		even
0003C068                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C2F2                            		even
0003C2F2                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C910                            		even
0003C910                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CCF8                            		even
0003CCF8                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CFF4                            		even
0003CFF4                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D23C                            		even
0003D23C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D4D4                            		even
0003D4D4                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D6B2                            		even
0003D6B2                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D840                            		even
0003D840                            ; ---------------------------------------------------------------------------
0003D840                            ; Compressed graphics - various
0003D840                            ; ---------------------------------------------------------------------------
0003D840                            Nem_TitleCard:      incbin  artnem\ttlcards.bin ; title cards
0003E840                            Nem_TitleCard_End:  even
0003E840                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E936                            		even
0003E936                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003EA3C                            		even
0003EA3C                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003EB30                            		even
0003EB30                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003EEE2 00                         		even
0003EEE2                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003F548                            		even
0003F548                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F5F8                            		even
0003F5F8                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F78A                            		even
0003F78A                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F88C                            		even
0003F88C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F968                            		even
0003F968                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003FDE4                            		even
0003FDE4                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003FEA4                            		even
0003FEA4                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00040018                            		even
00040018                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0004031A                            		even
0004031A                            ; ---------------------------------------------------------------------------
0004031A                            ; Compressed graphics - continue screen
0004031A                            ; ---------------------------------------------------------------------------
0004031A                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
000405CA                            		even
000405CA                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00040804                            		even
00040804                            ; ---------------------------------------------------------------------------
00040804                            ; Compressed graphics - animals
00040804                            ; ---------------------------------------------------------------------------
00040804                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004095C                            		even
0004095C                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040AB8                            		even
00040AB8                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040C34                            		even
00040C34                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040D50                            		even
00040D50                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040E86                            		even
00040E86                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040FC0                            		even
00040FC0                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004111C                            		even
0004111C                            ; ---------------------------------------------------------------------------
0004111C                            ; Compressed graphics - primary patterns and block mappings
0004111C                            ; ---------------------------------------------------------------------------
0004111C                            Blk16_GHZ:	incbin	map16\ghz.bin
00041A30                            		even
00041A30                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00043090                            		even
00043090                            Nem_GHZ_2nd:	incbin	artkos\8x8ghz.kos	; GHZ secondary patterns
00045616                            		even
00045616                            Blk256_GHZ:	incbin	map256_u\ghz.bin
0004FA16                            		even
0004FA16                            Blk16_LZ:	incbin	map16\lz.bin
0004FDEC                            		even
0004FDEC                            Nem_LZ:		incbin	artkos\8x8lz.kos	; LZ primary patterns
0005195C                            		even
0005195C                            Blk256_LZ:	incbin	map256_u\lz.bin
0005B75C                            		even
0005B75C                            Blk16_MZ:	incbin	map16\mz.bin
0005BF66                            		even
0005BF66                            Nem_MZ:		incbin	artkos\8x8mz.kos	; MZ primary patterns
0005DF20                            		even
0005DF20                            Blk256_MZ:	incbin	map256_u\mz.bin
00068320                            		even
00068320                            Blk16_SLZ:	incbin	map16\slz.bin
00068B04                            		even
00068B04                            Nem_SLZ:	incbin	artkos\8x8slz.kos	; SLZ primary patterns
0006B1FE                            		even
0006B1FE                            Blk256_SLZ:	incbin	map256_u\slz.bin
000755FE                            		even
000755FE                            Blk16_SYZ:	incbin	map16\syz.bin
00075EAC                            		even
00075EAC                            Nem_SYZ:	incbin	artkos\8x8syz.kos	; SYZ primary patterns
00078520                            		even
00078520                            Blk256_SYZ:	incbin	map256_u\syz.bin
00082920                            		even
00082920                            Blk16_SBZ:	incbin	map16\sbz.bin
000836E0                            		even
000836E0                            Nem_SBZ:	incbin	artkos\8x8sbz.kos	; SBZ primary patterns
0008590E                            		even
0008590E                            Blk256_SBZ:	incbin	map256_u\sbz.bin
0008FD0E                            		even
0008FD0E                            ; ---------------------------------------------------------------------------
0008FD0E                            ; Compressed graphics - bosses and ending sequence
0008FD0E                            ; ---------------------------------------------------------------------------
0008FD0E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00090572                            		even
00090572                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0009085C                            		even
0009085C                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000910E0                            		even
000910E0                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0009190C                            		even
0009190C                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00092074                            		even
00092074                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000925F4                            		even
000925F4                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00092714                            		even
00092714                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00092912                            		even
00092912                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00093AF0                            		even
00093AF0                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00094434                            		even
00094434                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0009480A                            		even
0009480A                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00094D9A                            		even
00094D9A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00095022                            		even
00095022                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00095620                            		even
00095620                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000958A8                            		even
000958A8                            		incbin	misc\padding2.bin
000959AC                            		even
000959AC                            ; ---------------------------------------------------------------------------
000959AC                            ; Collision data
000959AC                            ; ---------------------------------------------------------------------------
000959AC                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00095AAC                            		even
00095AAC                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00096AAC                            		even
00096AAC                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00097AAC                            		even
00097AAC                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00097C64 00                         		even
00097C64                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00097D44 00                         		even
00097D44                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00097ED4                            		even
00097ED4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000980C8                            		even
000980C8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000982BC                            		even
000982BC                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00098514                            		even
00098514                            ; ---------------------------------------------------------------------------
00098514                            ; Special layouts
00098514                            ; ---------------------------------------------------------------------------
00098514                            SS_1:		incbin	sslayout\1.bin
0009878E                            		even
0009878E                            SS_2:		incbin	sslayout\2.bin
00098BA0                            		even
00098BA0                            SS_3:		incbin	sslayout\3.bin
00098EFC                            		even
00098EFC                            SS_4:		incbin	sslayout\4.bin
000993D6                            		even
000993D6                            SS_5:		incbin	sslayout\5.bin
000998A8                            		even
000998A8                            SS_6:		incbin	sslayout\6.bin
00099BB8                            		even
00099BB8                            ; ---------------------------------------------------------------------------
00099BB8                            ; Animated uncompressed graphics
00099BB8                            ; ---------------------------------------------------------------------------
00099BB8                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00099DB8                            		even
00099DB8                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0009A1B8                            		even
0009A1B8                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0009A638                            		even
0009A638                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0009A938                            		even
0009A938                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0009AF38                            		even
0009AF38                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0009B238                            		even
0009B238                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0009BCB8                            		even
0009BCB8                            
0009BCB8                            ; ---------------------------------------------------------------------------
0009BCB8                            ; Level	layout index
0009BCB8                            ; ---------------------------------------------------------------------------
0009BCB8 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0009BCBE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0009BCC4 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0009BCCA 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0009BCD0 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0009BCD6 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0009BCDC 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0009BCE2 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0009BCE8 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0009BCEE 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0009BCF4 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0009BCFA 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0009BD00 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BD06 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BD0C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0009BD12 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0009BD18 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0009BD1E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0009BD24 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009BD2A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0009BD30 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009BD36 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009BD3C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0009BD42 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009BD48 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009BD4E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0009BD54 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009BD5A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009BD60                            
0009BD60                            Level_GHZ1:	incbin	levels\ghz1.bin
0009BE52                            		even
0009BE52 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009BE56                            Level_GHZ2:	incbin	levels\ghz2.bin
0009BF1E                            		even
0009BF1E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009BF22                            Level_GHZ3:	incbin	levels\ghz3.bin
0009C044                            		even
0009C044                            Level_GHZbg:	incbin	levels\ghzbg.bin
0009C066                            		even
0009C066 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009C06A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0009C06E                            
0009C06E                            Level_LZ1:	incbin	levels\lz1.bin
0009C170                            		even
0009C170                            Level_LZbg:	incbin	levels\lzbg.bin
0009C272                            		even
0009C272 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0009C276                            Level_LZ2:	incbin	levels\lz2.bin
0009C310                            		even
0009C310 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0009C314                            Level_LZ3:	incbin	levels\lz3.bin
0009C42E                            		even
0009C42E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009C432                            Level_SBZ3:	incbin	levels\sbz3.bin
0009C4EC                            		even
0009C4EC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009C4F0                            
0009C4F0                            Level_MZ1:	incbin	levels\mz1.bin
0009C58E                            		even
0009C58E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0009C608                            		even
0009C608                            Level_MZ2:	incbin	levels\mz2.bin
0009C6AC                            		even
0009C6AC                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0009C73E                            		even
0009C73E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009C742                            Level_MZ3:	incbin	levels\mz3.bin
0009C824                            		even
0009C824                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0009C8C8                            		even
0009C8C8 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009C8CC 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0009C8D0                            
0009C8D0                            Level_SLZ1:	incbin	levels\slz1.bin
0009C9E2                            		even
0009C9E2                            Level_SLZbg:	incbin	levels\slzbg.bin
0009CA5C                            		even
0009CA5C                            Level_SLZ2:	incbin	levels\slz2.bin
0009CB4C                            		even
0009CB4C                            Level_SLZ3:	incbin	levels\slz3.bin
0009CC66                            		even
0009CC66 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0009CC6A                            
0009CC6A                            Level_SYZ1:	incbin	levels\syz1.bin
0009CD26                            		even
0009CD26                            Level_SYZbg:	incbin	levels\syzbg.bin
0009CD60                            		even
0009CD60 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009CD64                            Level_SYZ2:	incbin	levels\syz2.bin
0009CE68                            		even
0009CE68 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0009CE6C                            Level_SYZ3:	incbin	levels\syz3.bin
0009CFC6                            		even
0009CFC6 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009CFCA 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0009CFCE                            
0009CFCE                            Level_SBZ1:	incbin	levels\sbz1.bin
0009D0F0                            		even
0009D0F0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0009D12E                            		even
0009D12E                            Level_SBZ2:	incbin	levels\sbz2.bin
0009D270                            		even
0009D270                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0009D3DA                            		even
0009D3DA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0009D3DE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0009D3E2                            Level_End:	incbin	levels\ending.bin
0009D412 00                         		even
0009D412 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0009D416                            
0009D416                            ; ---------------------------------------------------------------------------
0009D416                            ; Animated uncompressed giant ring graphics
0009D416                            ; ---------------------------------------------------------------------------
0009D416                            Art_BigRing:	incbin	artunc\bigring.bin
0009E056                            		even
0009E056                            
0009E056                            		incbin	misc\padding3.bin
0009E0F2                            		even
0009E0F2                            
0009E0F2                            ; ---------------------------------------------------------------------------
0009E0F2                            ; Sprite locations index
0009E0F2                            ; ---------------------------------------------------------------------------
0009E0F2 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E0F6 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E0FA 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E0FE 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E102 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E106 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E10A 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E10E 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E112 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E116 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E11A 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E11E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E122 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E126 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E12A 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E12E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E132 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E136 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E13A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E13E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E142 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E146 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E14A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E14E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E152 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E156 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E15A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E15E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009E162 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E166 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0009E16A 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009E16E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0009E172 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E176 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0009E17A 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009E17E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0009E182 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0009E188                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0009E4A6                            		even
0009E4A6                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0009E8A8                            		even
0009E8A8                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0009EDA6                            		even
0009EDA6                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0009F18A                            		even
0009F18A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0009F42A                            		even
0009F42A                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0009F98E                            		even
0009F98E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0009FD4E                            		even
0009FD4E                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0009FD80                            		even
0009FD80                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0009FDB2                            		even
0009FDB2                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0009FDE4                            		even
0009FDE4                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0009FE16                            		even
0009FE16                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0009FE60                            		even
0009FE60                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0009FE9E                            		even
0009FE9E                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000A0138                            		even
000A0138                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000A0558                            		even
000A0558                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000A0A14                            		even
000A0A14                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000A0E10                            		even
000A0E10                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000A10F2                            		even
000A10F2                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000A154E                            		even
000A154E                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000A18DE                            		even
000A18DE                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000A1CB6                            		even
000A1CB6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000A21A8                            		even
000A21A8                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000A27D8                            		even
000A27D8                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000A2D54                            		even
000A2D54                            ObjPos_FZ:	incbin	objpos\fz.bin
000A2D66                            		even
000A2D66                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000A2D98                            		even
000A2D98                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000A2DCA                            		even
000A2DCA                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000A2DFC                            		even
000A2DFC                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000A2E2E                            		even
000A2E2E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000A2E60                            		even
000A2E60                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000A2E98                            		even
000A2E98                            ObjPos_End:	incbin	objpos\ending.bin
000A2FF4                            		even
000A2FF4 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000A2FFA                            ; ---------------------------------------------------------------------------
000A2FFA                            ; Sprite locations index
000A2FFA                            ; ---------------------------------------------------------------------------
000A2FFA 0000 0000                  RingPos_Index:	dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A2FFE 0000 0000                  		dc.w Rings_GHZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3002 0000 0000                  		dc.w Rings_GHZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3006 0000 0000                  		dc.w Rings_GHZ1-RingPos_Index, Rings_Null-RingPos_Index
000A300A 0000 0000                  		dc.w Rings_LZ1-RingPos_Index, Rings_Null-RingPos_Index
000A300E 0000 0000                  		dc.w Rings_LZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3012 0000 0000                  		dc.w Rings_LZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3016 0000 0000                  		dc.w Rings_SBZ3-RingPos_Index, Rings_Null-RingPos_Index
000A301A 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A301E 0000 0000                  		dc.w Rings_MZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3022 0000 0000                  		dc.w Rings_MZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3026 0000 0000                  		dc.w Rings_MZ1-RingPos_Index, Rings_Null-RingPos_Index
000A302A 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A302E 0000 0000                  		dc.w Rings_SLZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3032 0000 0000                  		dc.w Rings_SLZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3036 0000 0000                  		dc.w Rings_SLZ1-RingPos_Index, Rings_Null-RingPos_Index
000A303A 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A303E 0000 0000                  		dc.w Rings_SYZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3042 0000 0000                  		dc.w Rings_SYZ3-RingPos_Index, Rings_Null-RingPos_Index
000A3046 0000 0000                  		dc.w Rings_SYZ1-RingPos_Index, Rings_Null-RingPos_Index
000A304A 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A304E 0000 0000                  		dc.w Rings_SBZ2-RingPos_Index, Rings_Null-RingPos_Index
000A3052 0000 0000                  		dc.w Rings_FZ-RingPos_Index, Rings_Null-RingPos_Index
000A3056 0000 0000                  		dc.w Rings_SBZ1-RingPos_Index, Rings_Null-RingPos_Index
000A305A 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A305E 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3062 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A3066 0000 0000                  		dc.w Rings_End-RingPos_Index, Rings_Null-RingPos_Index
000A306A                            Rings_GHZ1:	incbin	rings\ghz1_INDIVIDUAL.bin
000A32DC                            		even
000A32DC                            Rings_GHZ2:	incbin	rings\ghz2_INDIVIDUAL.bin
000A34CE                            		even
000A34CE                            Rings_GHZ3:	incbin	rings\ghz3_INDIVIDUAL.bin
000A36C0                            		even
000A36C0                            Rings_LZ1:	incbin	rings\lz1_INDIVIDUAL.bin
000A37DA                            		even
000A37DA                            Rings_LZ2:	incbin	rings\lz2_INDIVIDUAL.bin
000A38C4                            		even
000A38C4                            Rings_LZ3:	incbin	rings\lz3_INDIVIDUAL.bin
000A393A                            		even
000A393A                            Rings_SBZ3:	incbin	rings\sbz3_INDIVIDUAL.bin
000A3AF0                            		even
000A3AF0                            Rings_MZ1:	incbin	rings\mz1_INDIVIDUAL.bin
000A3BEE                            		even
000A3BEE                            Rings_MZ2:	incbin	rings\mz2_INDIVIDUAL.bin
000A3CD0                            		even
000A3CD0                            Rings_MZ3:	incbin	rings\mz3_INDIVIDUAL.bin
000A3DF6                            		even
000A3DF6                            Rings_SLZ1:	incbin	rings\slz1_INDIVIDUAL.bin
000A4038                            		even
000A4038                            Rings_SLZ2:	incbin	rings\slz2_INDIVIDUAL.bin
000A430A                            		even
000A430A                            Rings_SLZ3:	incbin	rings\slz3_INDIVIDUAL.bin
000A45DC                            		even
000A45DC                            Rings_SYZ1:	incbin	rings\syz1_INDIVIDUAL.bin
000A4856                            		even
000A4856                            Rings_SYZ2:	incbin	rings\syz2_INDIVIDUAL.bin
000A4BD4                            		even
000A4BD4                            Rings_SYZ3:	incbin	rings\syz3_INDIVIDUAL.bin
000A4E66                            		even
000A4E66                            Rings_SBZ1:	incbin	rings\sbz1_INDIVIDUAL.bin
000A5180                            		even
000A5180                            Rings_SBZ2:	incbin	rings\sbz2_INDIVIDUAL.bin
000A53EA                            		even
000A53EA                            Rings_FZ:	incbin	rings\fz_INDIVIDUAL.bin
000A53F0                            		even
000A53F0                            Rings_End:	incbin	rings\ending_INDIVIDUAL.bin
000A53F6                            		even
000A53F6 FFFF 0000                  Rings_Null:	dc.b $FF, $FF, 0, 0
000A53FA                            ; ---------------------------------------------------------------------------
000A53FA                            ; ---------------------------------------------------------------------------
000A53FA                            		incbin	misc\padding4.bin
000A5A24                            		even
000A5A24 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000A5A28 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000A5A2C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000A5A30 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000A5A34 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000A5A38 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000A5A3C                            ; ---------------------------------------------------------------------------
000A5A3C                            ; PSG instruments used in music
000A5A3C                            ; ---------------------------------------------------------------------------
000A5A3C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000A5A48 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000A5A54 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000A5A60                            PSG1:		incbin	sound\psg1.bin
000A5A77                            PSG2:		incbin	sound\psg2.bin
000A5A7E                            PSG3:		incbin	sound\psg3.bin
000A5A8F                            PSG4:		incbin	sound\psg4.bin
000A5A9A                            PSG6:		incbin	sound\psg6.bin
000A5AA9                            PSG5:		incbin	sound\psg5.bin
000A5AD3                            PSG7:		incbin	sound\psg7.bin
000A5AEF                            PSG8:		incbin	sound\psg8.bin
000A5B17                            PSG9:		incbin	sound\psg9.bin
000A5B28                            
000A5B28 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000A5B30                            ; ---------------------------------------------------------------------------
000A5B30                            ; Music	Pointers
000A5B30                            ; ---------------------------------------------------------------------------
000A5B30 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000A5B38 0000 0000 0000 0000        		dc.l Music83, Music84
000A5B40 0000 0000 0000 0000        		dc.l Music85, Music86
000A5B48 0000 0000 0000 0000        		dc.l Music87, Music88
000A5B50 0000 0000 0000 0000        		dc.l Music89, Music8A
000A5B58 0000 0000 0000 0000        		dc.l Music8B, Music8C
000A5B60 0000 0000 0000 0000        		dc.l Music8D, Music8E
000A5B68 0000 0000 0000 0000        		dc.l Music8F, Music90
000A5B70 0000 0000 0000 0000        		dc.l Music91, Music92
000A5B78 0000 0000                  		dc.l Music93
000A5B7C                            ; ---------------------------------------------------------------------------
000A5B7C                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000A5B7C                            ; ---------------------------------------------------------------------------
000A5B7C 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000A5B8C 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000A5B9C 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000A5BAC 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000A5BBC 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000A5BCC 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000A5BDC 9090 9090                  		dc.b $90, $90, $90, $90
000A5BE0                            
000A5BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A5BE0                            
000A5BE0                            sub_71B4C:	
000A5BE0 4DF9 00FF F000             		lea	($FFF000).l,a6
000A5BE6                            
000A5BE6 41F9 00A0 0C68             		lea	($A00000+YM_Buffer).l,a0		; CHG: load buffer ID address
000A5BEC 33FC 0100 00A1 1100 0839+  		StopZ80						; CHG: request Z80 stop on
000A5BFE 1010                       		move.b	(a0),d0					; CHG: load buffer ID
000A5C00 33FC 0000 00A1 1100        		StartZ80					; CHG: request Z80 stop off
000A5C08 B02E 0010                  		cmp.b	$10(a6),d0				; CHG: has the 68k recently written to this buffer?
000A5C0C 6600                       		bne.s	SD_ValidList				; CHG: if not, branch
000A5C0E 4E75                       		rts						; CHG: return (cannot write to YM cue until Z80 is finished with it)
000A5C10                            
000A5C10                            SD_ValidList:
000A5C10 2D7C 00A0 1000 0010        		move.l	#$A00000+YM_Buffer1,$10(a6)		; set the cue address to buffer 1
000A5C18 4A00                       		tst.b	d0					; is the Z80 accessing buffer 1?
000A5C1A 6600                       		bne.s	SD_WriteBuffer1				; if not, branch
000A5C1C 2D7C 00A0 1400 0010        		move.l	#$A00000+YM_Buffer2,$10(a6)		; set the cue address to buffer 2
000A5C24                            
000A5C24                            SD_WriteBuffer1:
000A5C24 1D40 0010                  		move.b	d0,$10(a6)				; set buffer ID the 68k is writing to
000A5C28 422E 000E                  		clr.b	$E(a6)
000A5C2C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000A5C30 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000A5C34 532E 0001                  		subq.b	#1,1(a6)
000A5C38 6600                       		bne.s	loc_71B9E
000A5C3A 4EBA 0000                  		jsr	sub_7260C(pc)
000A5C3E                            
000A5C3E                            loc_71B9E:
000A5C3E 102E 0004                  		move.b	4(a6),d0
000A5C42 6700                       		beq.s	loc_71BA8
000A5C44 4EBA 0000                  		jsr	sub_72504(pc)
000A5C48                            
000A5C48                            loc_71BA8:
000A5C48 4A2E 0024                  		tst.b	$24(a6)
000A5C4C 6700                       		beq.s	loc_71BB2
000A5C4E 4EBA 0000                  		jsr	sub_7267C(pc)
000A5C52                            
000A5C52                            loc_71BB2:
000A5C52 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000A5C56 6700                       		beq.s	loc_71BBC	; if not, branch
000A5C58 4EBA 0000                  		jsr	Sound_Play(pc)
000A5C5C                            
000A5C5C                            loc_71BBC:
000A5C5C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A5C62 6700                       		beq.s	loc_71BC8
000A5C64 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000A5C68                            
000A5C68                            loc_71BC8:
000A5C68 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
000A5C6C 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
000A5C6E 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
000A5C74                            
000A5C74                            SD_NextPCM:
000A5C74 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
000A5C78 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
000A5C7C 4A15                       		tst.b	(a5)
000A5C7E 6A00                       		bpl.s	loc_71BD4
000A5C80 4EBA 0000                  		jsr	sub_71C4E(pc)
000A5C84                            
000A5C84                            loc_71BD4:
000A5C84 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
000A5C88 422E 0008                  		clr.b	8(a6)
000A5C8C 7E05                       		moveq	#5,d7
000A5C8E                            
000A5C8E                            loc_71BDA:
000A5C8E DAFC 0030                  		adda.w	#$30,a5
000A5C92 4A15                       		tst.b	(a5)
000A5C94 6A00                       		bpl.s	loc_71BE6
000A5C96 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5C9A                            
000A5C9A                            loc_71BE6:
000A5C9A 51CF FFF2                  		dbf	d7,loc_71BDA
000A5C9E                            
000A5C9E 7E02                       		moveq	#2,d7
000A5CA0                            
000A5CA0                            loc_71BEC:
000A5CA0 DAFC 0030                  		adda.w	#$30,a5
000A5CA4 4A15                       		tst.b	(a5)
000A5CA6 6A00                       		bpl.s	loc_71BF8
000A5CA8 4EBA 0000                  		jsr	sub_72850(pc)
000A5CAC                            
000A5CAC                            loc_71BF8:
000A5CAC 51CF FFF2                  		dbf	d7,loc_71BEC
000A5CB0                            
000A5CB0 1D7C 0080 000E             		move.b	#$80,$E(a6)
000A5CB6 7E02                       		moveq	#2,d7
000A5CB8                            
000A5CB8                            loc_71C04:
000A5CB8 DAFC 0030                  		adda.w	#$30,a5
000A5CBC 4A15                       		tst.b	(a5)
000A5CBE 6A00                       		bpl.s	loc_71C10
000A5CC0 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5CC4                            
000A5CC4                            loc_71C10:
000A5CC4 51CF FFF2                  		dbf	d7,loc_71C04
000A5CC8                            
000A5CC8 7E02                       		moveq	#2,d7
000A5CCA                            
000A5CCA                            loc_71C16:
000A5CCA DAFC 0030                  		adda.w	#$30,a5
000A5CCE 4A15                       		tst.b	(a5)
000A5CD0 6A00                       		bpl.s	loc_71C22
000A5CD2 4EBA 0000                  		jsr	sub_72850(pc)
000A5CD6                            
000A5CD6                            loc_71C22:
000A5CD6 51CF FFF2                  		dbf	d7,loc_71C16
000A5CDA 1D7C 0040 000E             		move.b	#$40,$E(a6)
000A5CE0 DAFC 0030                  		adda.w	#$30,a5
000A5CE4 4A15                       		tst.b	(a5)
000A5CE6 6A00                       		bpl.s	loc_71C38
000A5CE8 4EBA 0000                  		jsr	sub_71CCA(pc)
000A5CEC                            
000A5CEC                            loc_71C38:
000A5CEC DAFC 0030                  		adda.w	#$30,a5
000A5CF0 4A15                       		tst.b	(a5)
000A5CF2 6A00                       		bpl.s	loc_71C44
000A5CF4 4EBA 0000                  		jsr	sub_72850(pc)
000A5CF8                            
000A5CF8                            loc_71C44:
000A5CF8 4E75                       		rts	
000A5CFA                            
000A5CFA                            ; End of function sub_71B4C
000A5CFA                            
000A5CFA                            
000A5CFA                            ; ===========================================================================
000A5CFA                            ; ---------------------------------------------------------------------------
000A5CFA                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A5CFA                            ; ---------------------------------------------------------------------------
000A5CFA                            
000A5CFA                            SDAC_CheckMute:
000A5CFA 102D 0021                  	move.b	$21(a5),d0
000A5CFE B02D 0022                  	cmp.b	$22(a5),d0
000A5D02 6700                       	beq.s	S71C4E_NoCHG
000A5D04 4A00                       	tst.b	d0
000A5D06 6A00                       	bpl.s	S71C4E_NoMute
000A5D08                            
000A5D08 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A5D0A 49F9 0000 0000             		lea	(StopSample).l,a4		; MUTE
000A5D10 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A5D16 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A5D1C 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A5D22 6600                       		bne.s	SDAC_CM_NotePCM2				; if not, branch for PCM 2 writing
000A5D24 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A5D2A 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A5D30                            
000A5D30                            SDAC_CM_NotePCM2:
000A5D30 33FC 0100 00A1 1100 0839+  		StopZ80
000A5D42 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A5D44 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D46 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D48 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A5D4A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D4C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D4E 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A5D50 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D52 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D54 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A5D56 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D58 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5D5A 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A5D5C 33FC 0000 00A1 1100        		StartZ80
000A5D64                            
000A5D64                            ;	jsr	sub_726FE(pc)
000A5D64                            ;	move.b	$0A(a5),d1
000A5D64                            ;	andi.b	#%00111111,d1
000A5D64                            ;	move.b	#$B4,d0
000A5D64                            ;	jsr	loc_72716
000A5D64 08D5 0006                  	bset.b	#$06,(a5)
000A5D68 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A5D6E                            
000A5D6E                            S71C4E_NoCHG:
000A5D6E 4E75                       	rts
000A5D70                            
000A5D70                            S71C4E_NoMute:
000A5D70 1B40 0022                  	move.b	d0,$22(a5)
000A5D74                            ;	move.b	$0B(a5),d0
000A5D74                            ;	jsr	SFM_UpdateVoice(pc)
000A5D74                            ;	move.b	$0A(a5),d1
000A5D74                            ;	move.b	#$B4,d0
000A5D74                            ;	jsr	loc_72716
000A5D74 08D5 0006                  	bset.b	#$06,(a5)
000A5D78 4E75                       	rts
000A5D7A                            
000A5D7A                            ; ===========================================================================
000A5D7A                            ; ---------------------------------------------------------------------------
000A5D7A                            ; Subroutine to run a DAC channel ; CHG: The entire routine...
000A5D7A                            ; ---------------------------------------------------------------------------
000A5D7A                            
000A5D7A                            sub_71C4E:
000A5D7A 6100 FF7E                  	bsr.w	SDAC_CheckMute			; EXTRA - ON/OFF
000A5D7E                            
000A5D7E                            	; Volume is being done first, as it'll update with a single
000A5D7E                            	; frame delay, the PCM playback is a frame behind, as is the
000A5D7E                            	; pitch control, but the volume change happens immediately,
000A5D7E                            	; thus, a delay is needed.
000A5D7E                            
000A5D7E                            	; *VOLUME DELAY WAS HERE*
000A5D7E                            
000A5D7E                            		; And now back to the normal DAC
000A5D7E                            		; SMPS routine
000A5D7E                            
000A5D7E 532D 000E                  		subq.b	#$01,$0E(a5)				; decrease note timer
000A5D82 6600 0000                  		bne.w	SDAC_HoldNote				; if still running, branch
000A5D86 0895 0004                  		bclr.b	#$04,(a5)				; disable softkey
000A5D8A 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A5D8E 286D 0004                  		movea.l	$04(a5),a4				; load tracker address
000A5D92 6000                       		bra.s	SDAC_ReadTracker			; continue into loop
000A5D94                            
000A5D94                            SDAC_ReadFlag:
000A5D94 4EBA 0000                  		jsr	sub_72A5A(pc)				; run flags subroutine
000A5D98                            
000A5D98                            SDAC_ReadTracker:
000A5D98 7A00                       		moveq	#$00,d5					; clear d5
000A5D9A 1A1C                       		move.b	(a4)+,d5				; load byte from SMPS track
000A5D9C 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A5DA0 0C05 00E0                  		cmpi.b	#$E0,d5					; is it a flag?
000A5DA4 64EE                       		bcc.s	SDAC_ReadFlag				; if so, branch
000A5DA6 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A5DAA                            
000A5DAA                            	SDAC_Update:				; EXTRA
000A5DAA 08D5 0001                  		bset.b	#$01,(a5)				; set channel as resting
000A5DAE 0405 0080                  		subi.b	#$80,d5					; minus starting note
000A5DB2 6700                       		beq.s	SDAC_NoFrequency			; if it's mute, branch
000A5DB4 5515                       		subq.b	#$02,(a5)				; set channel as NOT resting
000A5DB6 DA2D 0008                  		add.b	$08(a5),d5				; add pitch to it
000A5DBA DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A5DBE DA45                       		add.w	d5,d5					; multiply by size of word
000A5DC0 3B7B 5000 0010             		move.w	(FrequenciesPCM-2)(pc,d5.w),$10(a5)	; save frequency to use
000A5DC6                            
000A5DC6                            SDAC_NoFrequency:
000A5DC6                            
000A5DC6 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A5DCA 6600 0000                  	bne.w	SDAC_Frequency			; EXTRA
000A5DCE 1A1C                       		move.b	(a4)+,d5				; load next note
000A5DD0 6A00 0000                  		bpl.w	SDAC_Timer				; if it's a timer, branch
000A5DD4 534C                       		subq.w	#$01,a4					; move back (it's not a timer after all)
000A5DD6 1B6D 000F 000E             		move.b	$0F(a5),$0E(a5)				; reset timer
000A5DDC 6000 0000                  		bra.w	SDAC_PlayNote				; continue
000A5DE0                            
000A5DE0                            ; ---------------------------------------------------------------------------
000A5DE0                            ; Note to PCM frequency conversion table
000A5DE0                            ; ---------------------------------------------------------------------------
000A5DE0                            ; The octave numbers below assume the samples are playing a default pitch/note
000A5DE0                            ; of C3 (A5)
000A5DE0                            ; ---------------------------------------------------------------------------
000A5DE0                            
000A5DE0                            	;	dc.w	  C     C#    D     Eb    E     F     F#    G     G#    A     Bb    B
000A5DE0                            
000A5DE0 0010 0011 0012 0013 0014+  FrequenciesPCM:	dc.w	$0010,$0011,$0012,$0013,$0014,$0015,$0017,$0018,$0019,$001B,$001D,$001E   ; Octave 0 - (81 - 8C)
000A5DF8 0020 0022 0024 0026 0028+  		dc.w	$0020,$0022,$0024,$0026,$0028,$002B,$002D,$0030,$0033,$0036,$0039,$003C   ; Octave 1 - (8D - 98)
000A5E10 0040 0044 0048 004C 0051+  		dc.w	$0040,$0044,$0048,$004C,$0051,$0055,$005B,$0060,$0066,$006C,$0072,$0079   ; Octave 2 - (99 - A4)
000A5E28 0080 0088 0090 0098 00A1+  		dc.w	$0080,$0088,$0090,$0098,$00A1,$00AB,$00B5,$00C0,$00CB,$00D7,$00E4,$00F2   ; Octave 3 - (A5 - B0)
000A5E40 0100 010F 011F 0130 0143+  		dc.w	$0100,$010F,$011F,$0130,$0143,$0156,$016A,$0180,$0196,$01AF,$01C8,$01E3   ; Octave 4 - (B1 - BC)
000A5E58 0200 021E 023F 0261 0285+  		dc.w	$0200,$021E,$023F,$0261,$0285,$02AB,$02D4,$02FF,$032D,$035D,$0390,$03C7   ; Octave 5 - (BD - C8)
000A5E70 0400 043D 047D 04C2 050A+  		dc.w	$0400,$043D,$047D,$04C2,$050A,$0557,$05A8,$05FE,$0659,$06BA,$0721,$078D   ; Octave 6 - (C9 - D4)
000A5E88 0800 087A 08FB 0983 0A14+  		dc.w	$0800,$087A,$08FB,$0983,$0A14,$0AAE,$0B50,$0BFD,$0CB3,$0D74,$0E41,$0F1A   ; Octave 7 - (D5 - DF)
000A5EA0                            
000A5EA0                            ; ---------------------------------------------------------------------------
000A5EA0                            ; Writing the sample to Dual PCM
000A5EA0                            ; ---------------------------------------------------------------------------
000A5EA0                            
000A5EA0                            SDAC_Timer:
000A5EA0 4EBA 0000                  		jsr	sub_71D40(pc)				; correct timer
000A5EA4                            
000A5EA4                            SDAC_PlayNote:
000A5EA4 2B4C 0004                  		move.l	a4,$04(a5)				; update tracker address
000A5EA8                            
000A5EA8                            	SDAC_MuteNote:
000A5EA8 49F9 0000 0000             		lea	(StopSample).l,a4			; load "stop sample" address
000A5EAE 4A2D 0022                  	tst.b	$22(a5)
000A5EB2 6B00                       	bmi.s	SDAC_Rest
000A5EB4 1015                       		move.b	(a5),d0					; load flags
000A5EB6 0800 0004                  		btst	#$04,d0					; is soft key set?
000A5EBA 6600                       		bne.s	SDAC_SoftKey				; if so, branch
000A5EBC E610                       		roxr.b	#$03,d0					; rotate around
000A5EBE 6500 0000                  		bcs.w	SDAC_Return				; if the channel is being interrupted (bit 2), branch
000A5EC2 6B00                       		bmi.s	SDAC_Rest				; if the rest bit was set, branch
000A5EC4 7000                       		moveq	#$00,d0					; clear d0
000A5EC6 102D 000B                  		move.b	$0B(a5),d0				; load sample ID
000A5ECA D040                       		add.w	d0,d0					; multiply by 4 (long-word size)
000A5ECC D040                       		add.w	d0,d0					; ''
000A5ECE 49F9 0000 0000             		lea	(SampleList).l,a4			; load sample list
000A5ED4 2874 0000                  		move.l	(a4,d0.w),a4				; load correct sample z80 pointer address
000A5ED8                            
000A5ED8                            SDAC_Rest:
000A5ED8 70DA                       		moveq	#%11011010|$FFFFFF00,d0			; prepare "JP Z" instruction
000A5EDA 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1		; load PCM 2 slot address
000A5EE0 41F9 00A0 0651             		lea	($A00000+PCM2_NewRET).l,a0		; ''
000A5EE6 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A5EEC 6600                       		bne.s	SDAC_NotePCM2				; if not, branch for PCM 2 writing
000A5EEE 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1		; load PCM 1 slot address
000A5EF4 41F9 00A0 064E             		lea	($A00000+PCM1_NewRET).l,a0		; ''
000A5EFA                            
000A5EFA                            SDAC_NotePCM2:
000A5EFA 33FC 0100 00A1 1100 0839+  		StopZ80
000A5F0C 12DC                       		move.b	(a4)+,(a1)+				; set address of sample
000A5F0E 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F10 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F12 12DC                       		move.b	(a4)+,(a1)+				; set address of reverse sample
000A5F14 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F16 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F18 12DC                       		move.b	(a4)+,(a1)+				; set address of next sample
000A5F1A 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F1C 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F1E 12DC                       		move.b	(a4)+,(a1)+				; set address of next reverse sample
000A5F20 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F22 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5F24 1080                       		move.b	d0,(a0)					; change "JP NC" to "JP C"
000A5F26 33FC 0000 00A1 1100        		StartZ80
000A5F2E                            
000A5F2E                            SDAC_SoftKey:
000A5F2E                            
000A5F2E                            	SDAC_Frequency:
000A5F2E                            
000A5F2E 102D 0009                  		move.b	$09(a5),d0				; load current volume
000A5F32 7200                       	moveq	#$00,d1				; EXTRA
000A5F34 122E 0016                  	move.b	$16(a6),d1			; EXTRA
000A5F38                            ;	lea	(FOP_VolumeList).l,a0		; EXTRA
000A5F38                            ;	move.b	(a0,d1.w),d1			; EXTRA
000A5F38 D201                       	add.b	d1,d1
000A5F3A D001                       	add.b	d1,d0
000A5F3C                            
000A5F3C 1200                       		move.b	d0,d1					; copy volume to d1
000A5F3E 6A00                       		bpl.s	SDAC_ValidVolume			; if it is between 00 and 80, branch
000A5F40 7080                       		moveq	#$FFFFFF80,d0				; set volume to mute (81 - FF is out of bounds)
000A5F42                            
000A5F42                            SDAC_ValidVolume:
000A5F42 B02D 000C                  		cmp.b	$0C(a5),d0				; has the volume changed?
000A5F46 6700                       		beq.s	SDAC_NoVolume				; if not, branch (don't bother)
000A5F48 1B40 000C                  		move.b	d0,$0C(a5)				; update volume
000A5F4C 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A5F4E 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; load volume change instruction address
000A5F54 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; load PCM 2 volume address
000A5F5A 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A5F60 6600                       		bne.s	SDAC_VolumePCM2				; if not, branch for PCM 2 writing
000A5F62 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; load PCM 1 volume address
000A5F68                            
000A5F68                            SDAC_VolumePCM2:
000A5F68 33FC 0100 00A1 1100 0839+  		StopZ80
000A5F7A 1080                       		move.b	d0,(a0)					; change PCM volume
000A5F7C 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A5F7E 33FC 0000 00A1 1100        		StartZ80
000A5F86                            
000A5F86                            SDAC_NoVolume:
000A5F86                            
000A5F86 3C2D 0010                  		move.w	$10(a5),d6				; load frequency
000A5F8A 0815 0003                  		btst	#$03,(a5)				; is modulation turned on?
000A5F8E 6700                       		beq.s	SDAC_WriteFrequency			; if not, branch
000A5F90 286D 0014                  		movea.l	$14(a5),a4				; load modulation address
000A5F94 43ED 0018                  		lea	$18(a5),a1				; load modulation settings RAM
000A5F98 0815 0004                  		btst.b	#$04,(a5)				; is soft key set?
000A5F9C 6600                       		bne.s	SDAC_NoResetModulation			; if so, branch
000A5F9E 12DC                       		move.b	(a4)+,(a1)+				; reset settings...
000A5FA0 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5FA2 12DC                       		move.b	(a4)+,(a1)+				; ''
000A5FA4 101C                       		move.b	(a4)+,d0				; ''
000A5FA6 E208                       		lsr.b	#$01,d0					; ''
000A5FA8 12C0                       		move.b	d0,(a1)+				; ''
000A5FAA 4259                       		clr.w	(a1)+					; clear modulation frequency
000A5FAC                            
000A5FAC                            SDAC_NoResetModulation:
000A5FAC DC6D 001C                  		add.w	$1C(a5),d6				; add modulation pitch
000A5FB0 6000                       		bra.s	SDAC_WriteFrequency			; continue
000A5FB2                            
000A5FB2                            ; ---------------------------------------------------------------------------
000A5FB2                            ; Holding a note...
000A5FB2                            ; ---------------------------------------------------------------------------
000A5FB2                            
000A5FB2                            SDAC_HoldNote:
000A5FB2 1015                       		move.b	(a5),d0					; load flags
000A5FB4 0200 0003                  		andi.b	#%00000011,d0				; is the channel being interrupted by an SFX, or is resting?
000A5FB8 6600 0000                  		bne.w	SDAC_Return				; if so, branch
000A5FBC                            
000A5FBC 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A5FC0 6700                       	beq.s	SDAC_NoUpdate			; EXTRA
000A5FC2 7A00                       	moveq	#$00,d5				; EXTRA
000A5FC4 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A5FC8 6000 FDE0                  	bra.w	SDAC_Update			; EXTRA
000A5FCC                            
000A5FCC                            	SDAC_NoUpdate:				; EXTRA
000A5FCC 4EBA 0000                  		jsr	sub_71D9E(pc)				; check for release
000A5FD0 4EBA 0000                  		jsr	sub_71DC6(pc)				; run modulation and get right frequency to d6
000A5FD4                            
000A5FD4                            	; d6 = frequency
000A5FD4                            
000A5FD4                            SDAC_WriteFrequency:
000A5FD4 102D 001E                  		move.b	$1E(a5),d0				; load detune
000A5FD8 4880                       		ext.w	d0					; sign extend to word
000A5FDA D046                       		add.w	d6,d0					; add to frequency (move it up or down subtly)
000A5FDC 0815 0005                  		btst.b	#$05,(a5)				; is the reverse flag set?
000A5FE0 6700                       		beq.s	SDAC_NoReverse				; if not, branch
000A5FE2 4440                       		neg.w	d0					; reverse
000A5FE4                            	;	subi.w	#$0100*2,d0				; move back to Dual PCM's neutral
000A5FE4                            
000A5FE4                            SDAC_NoReverse:
000A5FE4                            	;	move.w	d0,d3					; copy to d3
000A5FE4                            	;	smi	d2					; set extend byte if value is negative
000A5FE4                            	;	addi.w	#$0100,d3				; convert to true neutral (for overflow)
000A5FE4                            	;	muls.w	#Z80E_Read,d3				; multiply by number of reads the Z80 performs (read 18 vs playback 10)
000A5FE4                            	;	move.b	d3,d5					; load fraction to d5
000A5FE4                            	;	asr.l	#$08,d3					; divide by 100
000A5FE4                            	;	move.w	d3,-(sp)				; get upper byte of overflow value
000A5FE4                            	;	move.b	(sp),d4					; ''
000A5FE4                            	;	move.w	d0,(sp)					; get upper byte of pitch/frequency
000A5FE4                            	;	move.b	(sp),d1					; ''
000A5FE4                            	;	addq.w	#$02,sp					; move stack forwards (would've done via increment and back...
000A5FE4                            								; ...index, but interrupts could be a problem).
000A5FE4                            	; d0 = XXXX.DD
000A5FE4                            	; d1 = XXQQ.XX
000A5FE4                            	; d2 = QQXX.XX
000A5FE4                            	; d3 = XXVV.XX
000A5FE4                            	; d4 = VVXX.XX
000A5FE4                            	; d5 = XXXX.OO
000A5FE4                            
000A5FE4 74D2                       		moveq	#$FFFFFF00|%11010010,d2
000A5FE6 1200                       		move.b	d0,d1
000A5FE8 E048                       		lsr.w	#$08,d0
000A5FEA 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; is this PCM 1?
000A5FF0 6600                       		bne.s	SDAC_FrequePCM2				; if not, branch for PCM 2 writing
000A5FF2 33FC 0100 00A1 1100 0839+  		StopZ80
000A6004                            	;	move.b	d0,($A00000+PCM1_RateDiv+1)		; write pitch main dividend
000A6004                            	;	move.b	d1,($A00000+PCM1_RateQuo+1)		; write pitch quotient low
000A6004                            	;	move.b	d2,($A00000+PCM1_RateQuo+2)		; write pitch quotient high
000A6004                            	;	move.b	d3,($A00000+PCM1_Overflow+1)		; write low overflow
000A6004                            	;	move.b	d4,($A00000+PCM1_Overflow+2)		; write high overflow
000A6004                            	;	move.b	d5,($A00000+PCM1_OverDiv+1)		; write dividend overflow
000A6004                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A6004                            
000A6004 13C0 00A0 05DD             		move.b	d0,($A00000+PCM1_PitchHigh+1)
000A600A 13C1 00A0 05E8             		move.b	d1,($A00000+PCM1_PitchLow+1)
000A6010 13C2 00A0 05D2             		move.b	d2,($A00000+PCM1_ChangePitch)		; change "JP C" to "JP NC"
000A6016 33FC 0000 00A1 1100        		StartZ80
000A601E                            
000A601E                            SDAC_Return:
000A601E 4E75                       		rts						; return
000A6020                            
000A6020                            SDAC_FrequePCM2:
000A6020 33FC 0100 00A1 1100 0839+  		StopZ80
000A6032                            	;	move.b	d0,($A00000+PCM2_RateDiv+1)		; write pitch main dividend
000A6032                            	;	move.b	d1,($A00000+PCM2_RateQuo+1)		; write pitch quotient low
000A6032                            	;	move.b	d2,($A00000+PCM2_RateQuo+2)		; write pitch quotient high
000A6032                            	;	move.b	d3,($A00000+PCM2_Overflow+1)		; write low overflow
000A6032                            	;	move.b	d4,($A00000+PCM2_Overflow+2)		; write high overflow
000A6032                            	;	move.b	d5,($A00000+PCM2_OverDiv+1)		; write dividend overflow
000A6032                            	;	move.b	#%11010010,($A00000+PCM_ChangePitch)	; change "JP C" to "JP NC"
000A6032                            
000A6032 13C0 00A0 060E             		move.b	d0,($A00000+PCM2_PitchHigh+1)
000A6038 13C1 00A0 0619             		move.b	d1,($A00000+PCM2_PitchLow+1)
000A603E 13C2 00A0 0603             		move.b	d2,($A00000+PCM2_ChangePitch)		; change "JP C" to "JP NC"
000A6044 33FC 0000 00A1 1100        		StartZ80
000A604C 4E75                       		rts						; return
000A604E                            
000A604E                            ; ===========================================================================
000A604E                            ; ---------------------------------------------------------------------------
000A604E                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A604E                            ; ---------------------------------------------------------------------------
000A604E                            
000A604E                            SFM_CheckMute:
000A604E 4A2E 000E                  	tst.b	$0E(a6)
000A6052 6600                       	bne.s	S71CCA_NoCHG
000A6054 102D 0021                  	move.b	$21(a5),d0
000A6058 B02D 0022                  	cmp.b	$22(a5),d0
000A605C 6700                       	beq.s	S71CCA_NoCHG
000A605E 4A00                       	tst.b	d0
000A6060 6A00                       	bpl.s	S71CCA_NoMute
000A6062 4EBA 0000                  	jsr	sub_726FE(pc)
000A6066 122D 000A                  	move.b	$0A(a5),d1
000A606A 0201 003F                  	andi.b	#%00111111,d1
000A606E 103C 00B4                  	move.b	#$B4,d0
000A6072 4EB9 0000 0000             	jsr	loc_72716
000A6078 08D5 0006                  	bset.b	#$06,(a5)
000A607C 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6082                            
000A6082                            S71CCA_NoCHG:
000A6082 4E75                       	rts
000A6084                            
000A6084                            S71CCA_NoMute:
000A6084 1B40 0022                  	move.b	d0,$22(a5)
000A6088 102D 000B                  	move.b	$0B(a5),d0
000A608C 4EBA 0000                  	jsr	SFM_UpdateVoice(pc)
000A6090                            ;	jsr	loc_726E2(pc)
000A6090 122D 000A                  	move.b	$0A(a5),d1
000A6094 103C 00B4                  	move.b	#$B4,d0
000A6098 4EB9 0000 0000             	jsr	loc_72716
000A609E 08D5 0006                  	bset.b	#$06,(a5)
000A60A2 4E75                       	rts
000A60A4                            
000A60A4                            ; ===========================================================================
000A60A4                            ; ---------------------------------------------------------------------------
000A60A4                            ; Subroutine to run an FM channel
000A60A4                            ; ---------------------------------------------------------------------------
000A60A4                            
000A60A4                            sub_71CCA:				; XREF: sub_71B4C
000A60A4 61A8                       	bsr.s	SFM_CheckMute			; EXTRA - ON/OFF
000A60A6                            
000A60A6 532D 000E                  		subq.b	#1,$E(a5)
000A60AA 6600                       		bne.s	loc_71CE0
000A60AC 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A60B0 0895 0004                  		bclr	#4,(a5)
000A60B4 4EBA 0000                  		jsr	sub_71CEC(pc)
000A60B8 4EBA 0000                  		jsr	sub_71E18(pc)
000A60BC 6000 0000                  		bra.w	loc_726E2
000A60C0                            ; ===========================================================================
000A60C0                            
000A60C0                            loc_71CE0:
000A60C0 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A60C4 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A60C6 4EB9 0000 0000             	jsr	sub_72CB4			; EXTRA
000A60CC 7A00                       	moveq	#$00,d5				; EXTRA
000A60CE 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A60D2 0405 0080                  	subi.b	#$80,d5				; EXTRA
000A60D6 6700                       	beq.s	SFM_NoUpdate			; EXTRA
000A60D8 4EB9 0000 0000             	jsr	SFM_UpdateFreque		; EXTRA
000A60DE 6000 0000                  	bra.w	loc_71E24			; EXTRA
000A60E2                            
000A60E2                            	SFM_NoUpdate:				; EXTRA
000A60E2 4EBA 0000                  		jsr	sub_71D9E(pc)
000A60E6 4EBA 0000                  		jsr	sub_71DC6(pc)
000A60EA 6000 0000                  		bra.w	loc_71E24
000A60EE                            ; End of function sub_71CCA
000A60EE                            
000A60EE                            
000A60EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A60EE                            
000A60EE                            
000A60EE                            sub_71CEC:				; XREF: sub_71CCA
000A60EE 286D 0004                  		movea.l	4(a5),a4
000A60F2 0895 0001                  		bclr	#1,(a5)
000A60F6                            
000A60F6                            loc_71CF4:
000A60F6 7A00                       		moveq	#0,d5
000A60F8 1A1C                       		move.b	(a4)+,d5
000A60FA 0C05 00E0                  		cmpi.b	#-$20,d5
000A60FE 6500                       		bcs.s	loc_71D04
000A6100 4EBA 0000                  		jsr	sub_72A5A(pc)
000A6104 60F0                       		bra.s	loc_71CF4
000A6106                            ; ===========================================================================
000A6106                            
000A6106                            loc_71D04:
000A6106 4EBA 0000                  		jsr	sub_726FE(pc)
000A610A 4A05                       		tst.b	d5
000A610C 6A00                       		bpl.s	loc_71D1A
000A610E 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A6112 4EBA 0000                  		jsr	sub_71D22(pc)
000A6116 1A1C                       		move.b	(a4)+,d5
000A6118 6A00                       		bpl.s	loc_71D1A
000A611A 534C                       		subq.w	#1,a4
000A611C 6000 0000                  		bra.w	sub_71D60
000A6120                            ; ===========================================================================
000A6120                            
000A6120                            loc_71D1A:
000A6120 4EBA 0000                  		jsr	sub_71D40(pc)
000A6124 6000 0000                  		bra.w	sub_71D60
000A6128                            ; End of function sub_71CEC
000A6128                            
000A6128                            
000A6128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6128                            
000A6128                            
000A6128                            sub_71D22:				; XREF: sub_71CEC
000A6128 0405 0080                  		subi.b	#$80,d5
000A612C 6700                       		beq.s	loc_71D58
000A612E                            
000A612E                            	SFM_UpdateFreque:			; EXTRA
000A612E DA2D 0008                  		add.b	8(a5),d5
000A6132 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A6136 0245 007F                  		andi.w	#$7F,d5
000A613A E34D                       		lsl.w	#1,d5
000A613C 41FA 0000                  		lea	word_72790(pc),a0
000A6140 3C30 5000                  		move.w	(a0,d5.w),d6
000A6144 3B46 0010                  		move.w	d6,$10(a5)
000A6148 4E75                       		rts	
000A614A                            ; End of function sub_71D22
000A614A                            
000A614A                            
000A614A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A614A                            
000A614A                            
000A614A                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A614A 1005                       		move.b	d5,d0
000A614C 122D 0002                  		move.b	2(a5),d1
000A6150                            
000A6150                            loc_71D46:
000A6150 5301                       		subq.b	#1,d1
000A6152 6700                       		beq.s	loc_71D4E
000A6154 D005                       		add.b	d5,d0
000A6156 60F8                       		bra.s	loc_71D46
000A6158                            ; ===========================================================================
000A6158                            
000A6158                            loc_71D4E:
000A6158 1B40 000F                  		move.b	d0,$F(a5)
000A615C 1B40 000E                  		move.b	d0,$E(a5)
000A6160 4E75                       		rts	
000A6162                            ; End of function sub_71D40
000A6162                            
000A6162                            ; ===========================================================================
000A6162                            
000A6162                            loc_71D58:				; XREF: sub_71D22
000A6162 08D5 0001                  		bset	#1,(a5)
000A6166 426D 0010                  		clr.w	$10(a5)
000A616A                            
000A616A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A616A                            
000A616A                            
000A616A                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000A616A 2B4C 0004                  		move.l	a4,4(a5)
000A616E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000A6174 0815 0004                  		btst	#4,(a5)
000A6178 6600                       		bne.s	locret_71D9C
000A617A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000A6180 422D 000C                  		clr.b	$C(a5)
000A6184 0815 0003                  		btst	#3,(a5)
000A6188 6700                       		beq.s	locret_71D9C
000A618A 206D 0014                  		movea.l	$14(a5),a0
000A618E 1B58 0018                  		move.b	(a0)+,$18(a5)
000A6192 1B58 0019                  		move.b	(a0)+,$19(a5)
000A6196 1B58 001A                  		move.b	(a0)+,$1A(a5)
000A619A 1018                       		move.b	(a0)+,d0
000A619C E208                       		lsr.b	#1,d0
000A619E 1B40 001B                  		move.b	d0,$1B(a5)
000A61A2 426D 001C                  		clr.w	$1C(a5)
000A61A6                            
000A61A6                            locret_71D9C:
000A61A6 4E75                       		rts	
000A61A8                            ; End of function sub_71D60
000A61A8                            
000A61A8                            
000A61A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A61A8                            
000A61A8                            
000A61A8                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000A61A8 4A2D 0012                  		tst.b	$12(a5)
000A61AC 6700                       		beq.s	locret_71DC4
000A61AE 532D 0012                  		subq.b	#1,$12(a5)
000A61B2 6600                       		bne.s	locret_71DC4
000A61B4 4A2E 0008                  		tst.b	$08(a6)						; CHG: is this a PCM channel?
000A61B8 6B00                       		bmi.s	SDCR_StopPCM					; if so, branch (skipping rest flag setting)
000A61BA 08D5 0001                  		bset	#1,(a5)
000A61BE 4A2D 0001                  		tst.b	1(a5)
000A61C2 6B00 0000                  		bmi.w	loc_71DBE
000A61C6 4EBA 0000                  		jsr	sub_726FE(pc)
000A61CA 584F                       		addq.w	#4,sp
000A61CC 4E75                       		rts	
000A61CE                            ; ===========================================================================
000A61CE                            
000A61CE                            loc_71DBE:
000A61CE 4EBA 0000                  		jsr	sub_729A0(pc)
000A61D2 584F                       		addq.w	#4,sp
000A61D4                            
000A61D4                            locret_71DC4:
000A61D4 4E75                       		rts	
000A61D6                            ; End of function sub_71D9E
000A61D6                            
000A61D6                            SDCR_StopPCM:
000A61D6 33FC 0100 00A1 1100 0839+  		StopZ80
000A61E8 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A61EE 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A61F4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A61F6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A61F8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A61FA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A61FC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A61FE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6200 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6202 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6204 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6206 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6208 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A620A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A620C 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6214 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A621A 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6220 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6222 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6224 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6226 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6228 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A622A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A622C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A622E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6230 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6232 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6234 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6236 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6238 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6240 33FC 0000 00A1 1100        		StartZ80
000A6248 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A624A 4E75                       		rts							; CHG: return
000A624C                            
000A624C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A624C                            
000A624C                            
000A624C                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000A624C 0815 0003                  		btst	#3,(a5)
000A6250 6700                       		beq.s	locret_71E16
000A6252 4A2D 0018                  		tst.b	$18(a5)
000A6256 6700                       		beq.s	loc_71DDA
000A6258 532D 0018                  		subq.b	#1,$18(a5)
000A625C 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A625E 4E75                       		rts	
000A6260                            ; ===========================================================================
000A6260                            
000A6260                            loc_71DDA:
000A6260 532D 0019                  		subq.b	#1,$19(a5)
000A6264 6700                       		beq.s	loc_71DE2
000A6266 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6268 4E75                       		rts	
000A626A                            ; ===========================================================================
000A626A                            
000A626A                            loc_71DE2:
000A626A 206D 0014                  		movea.l	$14(a5),a0
000A626E 1B68 0001 0019             		move.b	1(a0),$19(a5)
000A6274 4A2D 001B                  		tst.b	$1B(a5)
000A6278 6600                       		bne.s	loc_71DFE
000A627A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000A6280 442D 001A                  		neg.b	$1A(a5)
000A6284 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A6286 4E75                       		rts	
000A6288                            ; ===========================================================================
000A6288                            
000A6288                            loc_71DFE:
000A6288 532D 001B                  		subq.b	#1,$1B(a5)
000A628C 1C2D 001A                  		move.b	$1A(a5),d6
000A6290 4886                       		ext.w	d6
000A6292 DC6D 001C                  		add.w	$1C(a5),d6
000A6296 3B46 001C                  		move.w	d6,$1C(a5)
000A629A DC6D 0010                  		add.w	$10(a5),d6
000A629E 4E75                       		rts							; CHG: return (don't skip)
000A62A0                            
000A62A0                            locret_71E16:
000A62A0 584F                       		addq.w	#$04,sp						; CHG: skip return address
000A62A2 4E75                       		rts	
000A62A4                            ; End of function sub_71DC6
000A62A4                            
000A62A4                            
000A62A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A62A4                            
000A62A4                            
000A62A4                            sub_71E18:				; XREF: sub_71CCA
000A62A4 0815 0001                  		btst	#1,(a5)
000A62A8 6600                       		bne.s	locret_71E48
000A62AA 3C2D 0010                  		move.w	$10(a5),d6
000A62AE 6700                       		beq.s	loc_71E4A
000A62B0                            
000A62B0                            loc_71E24:				; XREF: sub_71CCA
000A62B0 102D 001E                  		move.b	$1E(a5),d0
000A62B4 4880                       		ext.w	d0
000A62B6 DC40                       		add.w	d0,d6
000A62B8 0815 0002                  		btst	#2,(a5)
000A62BC 6600                       		bne.s	locret_71E48
000A62BE 4A2E 000E                  	tst.b	$0E(a6)
000A62C2 6600                       	bne.s	locret_71E48_2
000A62C4 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A62C8 6600                       	bne.s	locret_71E48
000A62CA                            
000A62CA                            	locret_71E48_2:
000A62CA 3206                       		move.w	d6,d1
000A62CC E049                       		lsr.w	#8,d1
000A62CE 103C 00A4                  		move.b	#-$5C,d0
000A62D2 4EBA 0000                  		jsr	sub_72722(pc)
000A62D6 1206                       		move.b	d6,d1
000A62D8 103C 00A0                  		move.b	#-$60,d0
000A62DC 4EBA 0000                  		jsr	sub_72722(pc)
000A62E0                            
000A62E0                            locret_71E48:
000A62E0 4E75                       		rts	
000A62E2                            ; ===========================================================================
000A62E2                            
000A62E2                            loc_71E4A:
000A62E2 08D5 0001                  		bset	#1,(a5)
000A62E6 4E75                       		rts	
000A62E8                            ; End of function sub_71E18
000A62E8                            
000A62E8                            ; ===========================================================================
000A62E8                            
000A62E8                            loc_71E50:				; XREF: sub_71B4C
000A62E8 6B00                       		bmi.s	loc_71E94
000A62EA 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000A62F0 6700 0000                  		beq.w	loc_71EFE
000A62F4 1D7C 0002 0003             		move.b	#2,3(a6)
000A62FA 7602                       		moveq	#2,d3
000A62FC 103C 00B4                  		move.b	#-$4C,d0
000A6300 7200                       		moveq	#0,d1
000A6302                            
000A6302                            loc_71E6A:
000A6302 4EBA 0000                  		jsr	sub_7272E(pc)
000A6306 4EBA 0000                  		jsr	sub_72764(pc)
000A630A 5200                       		addq.b	#1,d0
000A630C 51CB FFF4                  		dbf	d3,loc_71E6A
000A6310                            
000A6310 7602                       		moveq	#2,d3
000A6312 7028                       		moveq	#$28,d0
000A6314                            
000A6314                            loc_71E7C:
000A6314 1203                       		move.b	d3,d1
000A6316 4EBA 0000                  		jsr	sub_7272E(pc)
000A631A 5801                       		addq.b	#4,d1
000A631C 4EBA 0000                  		jsr	sub_7272E(pc)
000A6320 51CB FFF2                  		dbf	d3,loc_71E7C
000A6324                            
000A6324 4EBA 0000                  		jsr	sub_729B6(pc)
000A6328 6000 F9CE                  		bra.w	loc_71C44
000A632C                            ; ===========================================================================
000A632C                            
000A632C                            loc_71E94:				; XREF: loc_71E50
000A632C 422E 0003                  		clr.b	3(a6)
000A6330 7630                       		moveq	#$30,d3
000A6332 4BEE 0040                  		lea	$40(a6),a5
000A6336 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
000A6338                            
000A6338                            loc_71EA0:
000A6338 0815 0007                  		btst	#7,(a5)
000A633C 6700                       		beq.s	loc_71EB8
000A633E 0815 0002                  		btst	#2,(a5)
000A6342 6600                       		bne.s	loc_71EB8
000A6344 4A2E 000E                  	tst.b	$0E(a6)
000A6348 6600                       	bne.s	loc_71EB8_2
000A634A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A634E 6600                       	bne.s	loc_71EB8
000A6350                            
000A6350                            	loc_71EB8_2:
000A6350 103C 00B4                  		move.b	#-$4C,d0
000A6354 122D 000A                  		move.b	$A(a5),d1
000A6358 4EBA 0000                  		jsr	sub_72722(pc)
000A635C                            
000A635C                            loc_71EB8:
000A635C DAC3                       		adda.w	d3,a5
000A635E 51CC FFD8                  		dbf	d4,loc_71EA0
000A6362                            
000A6362 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6366 7802                       		moveq	#2,d4
000A6368                            
000A6368                            loc_71EC4:
000A6368 0815 0007                  		btst	#7,(a5)
000A636C 6700                       		beq.s	loc_71EDC
000A636E 0815 0002                  		btst	#2,(a5)
000A6372 6600                       		bne.s	loc_71EDC
000A6374 4A2E 000E                  	tst.b	$0E(a6)
000A6378 6600                       	bne.s	loc_71EDC_2
000A637A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A637E 6600                       	bne.s	loc_71EDC
000A6380                            
000A6380                            	loc_71EDC_2:
000A6380 103C 00B4                  		move.b	#-$4C,d0
000A6384 122D 000A                  		move.b	$A(a5),d1
000A6388 4EBA 0000                  		jsr	sub_72722(pc)
000A638C                            
000A638C                            loc_71EDC:
000A638C DAC3                       		adda.w	d3,a5
000A638E 51CC FFD8                  		dbf	d4,loc_71EC4
000A6392                            
000A6392 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A6396 0815 0007                  		btst	#7,(a5)
000A639A 6700                       		beq.s	loc_71EFE
000A639C 0815 0002                  		btst	#2,(a5)
000A63A0 6600                       		bne.s	loc_71EFE
000A63A2 4A2E 000E                  	tst.b	$0E(a6)
000A63A6 6600                       	bne.s	loc_71EFE_2
000A63A8 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A63AC 6600                       	bne.s	loc_71EFE
000A63AE                            
000A63AE                            	loc_71EFE_2:
000A63AE 103C 00B4                  		move.b	#-$4C,d0
000A63B2 122D 000A                  		move.b	$A(a5),d1
000A63B6 4EBA 0000                  		jsr	sub_72722(pc)
000A63BA                            
000A63BA                            loc_71EFE:
000A63BA 6000 F93C                  		bra.w	loc_71C44
000A63BE                            
000A63BE                            ; ---------------------------------------------------------------------------
000A63BE                            ; Subroutine to	play a sound or	music track
000A63BE                            ; ---------------------------------------------------------------------------
000A63BE                            
000A63BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A63BE                            
000A63BE                            
000A63BE                            Sound_Play:				; XREF: sub_71B4C
000A63BE 2079 000A 5A24             		movea.l	(Go_SoundTypes).l,a0
000A63C4 43EE 000A                  		lea	$A(a6),a1	; load music track number
000A63C8 1616                       		move.b	0(a6),d3
000A63CA 7802                       		moveq	#2,d4
000A63CC                            
000A63CC                            loc_71F12:
000A63CC 1011                       		move.b	(a1),d0		; move track number to d0
000A63CE 1200                       		move.b	d0,d1
000A63D0 4219                       		clr.b	(a1)+
000A63D2 0400 0081                  		subi.b	#$81,d0
000A63D6 6500                       		bcs.s	loc_71F3E
000A63D8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000A63DE 6700                       		beq.s	loc_71F2C
000A63E0 1D41 000A                  		move.b	d1,$A(a6)
000A63E4 6000                       		bra.s	loc_71F3E
000A63E6                            ; ===========================================================================
000A63E6                            
000A63E6                            loc_71F2C:
000A63E6 0240 007F                  		andi.w	#$7F,d0
000A63EA 1430 0000                  		move.b	(a0,d0.w),d2
000A63EE B403                       		cmp.b	d3,d2
000A63F0 6500                       		bcs.s	loc_71F3E
000A63F2 1602                       		move.b	d2,d3
000A63F4 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000A63F8                            
000A63F8                            loc_71F3E:
000A63F8 51CC FFD2                  		dbf	d4,loc_71F12
000A63FC                            
000A63FC 4A03                       		tst.b	d3
000A63FE 6B00                       		bmi.s	locret_71F4A
000A6400 1C83                       		move.b	d3,0(a6)
000A6402                            
000A6402                            locret_71F4A:
000A6402 4E75                       		rts	
000A6404                            ; End of function Sound_Play
000A6404                            
000A6404                            
000A6404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6404                            
000A6404                            
000A6404                            Sound_ChkValue:				; XREF: sub_71B4C
000A6404 7E00                       		moveq	#0,d7
000A6406 1E2E 0009                  		move.b	9(a6),d7
000A640A 6700 0000                  		beq.w	Sound_E4
000A640E 6A00                       		bpl.s	locret_71F8C
000A6410 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000A6416 0C07 009F                  		cmpi.b	#$9F,d7
000A641A 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000A641E 0C07 00A0                  		cmpi.b	#$A0,d7
000A6422 6500 0000                  		bcs.w	locret_71F8C
000A6426 0C07 00CF                  		cmpi.b	#$CF,d7
000A642A 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000A642E 0C07 00D0                  		cmpi.b	#$D0,d7
000A6432 6500 0000                  		bcs.w	locret_71F8C
000A6436 0C07 00E0                  		cmpi.b	#$E0,d7
000A643A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000A643E 0C07 00E4                  		cmpi.b	#$E4,d7
000A6442 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000A6444                            
000A6444                            locret_71F8C:
000A6444 4E75                       		rts	
000A6446                            ; ===========================================================================
000A6446                            
000A6446                            Sound_E0toE4:				; XREF: Sound_ChkValue
000A6446 0407 00E0                  		subi.b	#$E0,d7
000A644A E54F                       		lsl.w	#2,d7
000A644C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000A6450                            ; ===========================================================================
000A6450                            
000A6450                            Sound_ExIndex:
000A6450 6000 0000                  		bra.w	Sound_E0
000A6454                            ; ===========================================================================
000A6454 6000 0000                  		bra.w	Sound_E1
000A6458                            ; ===========================================================================
000A6458 6000 0000                  		bra.w	Sound_E2
000A645C                            ; ===========================================================================
000A645C 6000 0000                  		bra.w	Sound_E3
000A6460                            ; ===========================================================================
000A6460 6000 0000                  		bra.w	Sound_E4
000A6464                            ; ===========================================================================
000A6464                            ; ---------------------------------------------------------------------------
000A6464                            ; Play "Say-gaa" PCM sound
000A6464                            ; ---------------------------------------------------------------------------
000A6464                            
000A6464                            Sound_E1:
000A6464 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000A6476 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000A647C 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000A6482 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000A6486 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000A648C 3604                       		move.w	d4,d3					; MJ: get lower word size
000A648E 4844                       		swap	d4					; MJ: get upper word size
000A6490                            
000A6490                            PlayPCM_Loop:
000A6490 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000A6492 702B                       		moveq	#$2B,d0					; MJ: set delay time
000A6494 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000A6498 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000A649C 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000A64A0 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000A64A4 584F                       		addq.w	#$04,sp					; MJ: skip return address
000A64A6 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000A64A8 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000A64AA 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000A64AC 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000A64B0 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000A64B8 4E75                       		rts						; MJ: return
000A64BA                            
000A64BA                            ; ===========================================================================
000A64BA                            ; ---------------------------------------------------------------------------
000A64BA                            ; Play music track $81-$9F
000A64BA                            ; ---------------------------------------------------------------------------
000A64BA                            
000A64BA                            Sound_81to9F:
000A64BA 33FC 0100 00A1 1100 0839+  		StopZ80
000A64CC 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A64D2 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A64D8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A64DA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64DC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64DE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A64E0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64E2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64E4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A64E6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64E8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64EA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A64EC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64EE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A64F0 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A64F8 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A64FE 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6504 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6506 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6508 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A650A 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A650C 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A650E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6510 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6512 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6514 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6516 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6518 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A651A 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A651C 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6524 33FC 0000 00A1 1100        		StartZ80
000A652C                            
000A652C 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000A6530 6600                       		bne.s	loc_72024	; if not, branch
000A6532 4A2E 0027                  		tst.b	$27(a6)
000A6536 6600 0000                  		bne.w	loc_721B6
000A653A 4BEE 0040                  		lea	$40(a6),a5
000A653E 700A                       		moveq	#10,d0					; MJ: number of channels in total
000A6540                            
000A6540                            loc_71FE6:
000A6540 0895 0002                  		bclr	#2,(a5)
000A6544 DAFC 0030                  		adda.w	#$30,a5
000A6548 51C8 FFF6                  		dbf	d0,loc_71FE6
000A654C                            
000A654C 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6550 7005                       		moveq	#5,d0
000A6552                            
000A6552                            loc_71FF8:
000A6552 0895 0007                  		bclr	#7,(a5)
000A6556 DAFC 0030                  		adda.w	#$30,a5
000A655A 51C8 FFF6                  		dbf	d0,loc_71FF8
000A655E 4216                       		clr.b	0(a6)
000A6560 204E                       		movea.l	a6,a0
000A6562 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A6566 303C 0087                  		move.w	#$87,d0
000A656A                            
000A656A                            loc_72012:
000A656A 22D8                       		move.l	(a0)+,(a1)+
000A656C 51C8 FFFC                  		dbf	d0,loc_72012
000A6570                            
000A6570 1D7C 0080 0027             		move.b	#$80,$27(a6)
000A6576 4216                       		clr.b	0(a6)
000A6578 6000                       		bra.s	loc_7202C
000A657A                            ; ===========================================================================
000A657A                            
000A657A                            loc_72024:
000A657A 422E 0027                  		clr.b	$27(a6)
000A657E 422E 0026                  		clr.b	$26(a6)
000A6582                            
000A6582                            loc_7202C:
000A6582 4EBA 0000                  		jsr	sub_725CA(pc)
000A6586                            
000A6586 2879 000A 5A34             		movea.l	(off_719A0).l,a4
000A658C 0407 0081                  		subi.b	#$81,d7
000A6590 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000A6596 2879 000A 5A2C             		movea.l	(Go_MusicIndex).l,a4
000A659C E54F                       		lsl.w	#2,d7
000A659E 2874 7000                  		movea.l	(a4,d7.w),a4
000A65A2 7000                       		moveq	#0,d0
000A65A4 3014                       		move.w	(a4),d0
000A65A6 D08C                       		add.l	a4,d0
000A65A8 2D40 0018                  		move.l	d0,$18(a6)
000A65AC 102C 0005                  		move.b	5(a4),d0
000A65B0 1D40 0028                  		move.b	d0,$28(a6)
000A65B4 4A2E 002A                  		tst.b	$2A(a6)
000A65B8 6700                       		beq.s	loc_72068
000A65BA 102E 0029                  		move.b	$29(a6),d0
000A65BE                            
000A65BE                            loc_72068:
000A65BE 1D40 0002                  		move.b	d0,2(a6)
000A65C2 1D40 0001                  		move.b	d0,1(a6)
000A65C6 7200                       		moveq	#0,d1
000A65C8 264C                       		movea.l	a4,a3
000A65CA 5C4C                       		addq.w	#6,a4
000A65CC 7E00                       		moveq	#0,d7
000A65CE 1E2B 0002                  		move.b	2(a3),d7
000A65D2 6700 0000                  		beq.w	loc_72114
000A65D6 5307                       		subq.b	#1,d7
000A65D8 123C 00C0                  		move.b	#-$40,d1
000A65DC 182B 0004                  		move.b	4(a3),d4
000A65E0 7C30                       		moveq	#$30,d6
000A65E2 1A3C 0001                  		move.b	#1,d5
000A65E6 43EE 0040                  		lea	$40(a6),a1
000A65EA 45FA 0000                  		lea	byte_721BA(pc),a2
000A65EE                            
000A65EE                            loc_72098:
000A65EE 08D1 0007                  		bset	#7,(a1)
000A65F2 135A 0001                  		move.b	(a2)+,1(a1)
000A65F6 1344 0002                  		move.b	d4,2(a1)
000A65FA 1346 000D                  		move.b	d6,$D(a1)
000A65FE 1341 000A                  		move.b	d1,$A(a1)
000A6602 1345 000E                  		move.b	d5,$E(a1)
000A6606 7000                       		moveq	#0,d0
000A6608 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000A660C 137C 0080 000C             		move.b	#$80,$0C(a1)				; MJ: set last frame's volume to something impossible (volume is from C0 - 40)
000A6612 301C                       		move.w	(a4)+,d0
000A6614 D08B                       		add.l	a3,d0
000A6616 2340 0004                  		move.l	d0,4(a1)
000A661A 335C 0008                  		move.w	(a4)+,8(a1)
000A661E D2C6                       		adda.w	d6,a1
000A6620 51CF FFCC                  		dbf	d7,loc_72098
000A6624 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000A6626 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000A662A 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000A6630 6600                       		bne.s	loc_720D8
000A6632                            	;	moveq	#$2B,d0					; MJ: removed...
000A6632 7200                       		moveq	#0,d1
000A6634 4EBA 0000                  		jsr	sub_7272E(pc)
000A6638 6000 0000                  		bra.w	loc_72114
000A663C                            ; ===========================================================================
000A663C                            
000A663C                            loc_720D8:
000A663C 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000A6640                            
000A6640                            	; --- Key off FM 6 ---
000A6640                            
000A6640 7028                       		moveq	#$28,d0
000A6642 7206                       		moveq	#6,d1
000A6644 4EBA 0000                  		jsr	sub_7272E(pc)
000A6648                            
000A6648                            	; --- Sets FM 6 to mute ---
000A6648                            
000A6648 103C 0042                  		move.b	#$42,d0
000A664C 727F                       		moveq	#$7F,d1
000A664E 4EBA 0000                  		jsr	sub_72764(pc)
000A6652 103C 004A                  		move.b	#$4A,d0
000A6656 727F                       		moveq	#$7F,d1
000A6658 4EBA 0000                  		jsr	sub_72764(pc)
000A665C 103C 0046                  		move.b	#$46,d0
000A6660 727F                       		moveq	#$7F,d1
000A6662 4EBA 0000                  		jsr	sub_72764(pc)
000A6666 103C 004E                  		move.b	#$4E,d0
000A666A 727F                       		moveq	#$7F,d1
000A666C 4EBA 0000                  		jsr	sub_72764(pc)
000A6670 103C 00B6                  		move.b	#-$4A,d0
000A6674 123C 00C0                  		move.b	#-$40,d1
000A6678 4EBA 0000                  		jsr	sub_72764(pc)
000A667C                            
000A667C                            loc_72114:
000A667C 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A667E 7E00                       		moveq	#0,d7
000A6680 1E2B 0003                  		move.b	3(a3),d7
000A6684 6700                       		beq.s	loc_72154
000A6686 5307                       		subq.b	#1,d7
000A6688 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000A668C 45FA 0000                  		lea	byte_721C2(pc),a2
000A6690                            
000A6690                            loc_72126:
000A6690 08D1 0007                  		bset	#7,(a1)
000A6694 135A 0001                  		move.b	(a2)+,1(a1)
000A6698 1344 0002                  		move.b	d4,2(a1)
000A669C 1346 000D                  		move.b	d6,$D(a1)
000A66A0 1345 000E                  		move.b	d5,$E(a1)
000A66A4 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000A66AA 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000A66B0 7000                       		moveq	#0,d0
000A66B2 301C                       		move.w	(a4)+,d0
000A66B4 D08B                       		add.l	a3,d0
000A66B6 2340 0004                  		move.l	d0,4(a1)
000A66BA 335C 0008                  		move.w	(a4)+,8(a1)
000A66BE 101C                       		move.b	(a4)+,d0
000A66C0 135C 000B                  		move.b	(a4)+,$B(a1)
000A66C4 D2C6                       		adda.w	d6,a1
000A66C6 51CF FFC8                  		dbf	d7,loc_72126
000A66CA                            
000A66CA                            loc_72154:
000A66CA 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000A66CE 7E05                       		moveq	#5,d7
000A66D0                            
000A66D0                            loc_7215A:
000A66D0 4A11                       		tst.b	(a1)
000A66D2 6A00 0000                  		bpl.w	loc_7217C
000A66D6 7000                       		moveq	#0,d0
000A66D8 1029 0001                  		move.b	1(a1),d0
000A66DC 6B00                       		bmi.s	loc_7216E
000A66DE 5500                       		subq.b	#2,d0
000A66E0 E508                       		lsl.b	#2,d0
000A66E2 6000                       		bra.s	loc_72170
000A66E4                            ; ===========================================================================
000A66E4                            
000A66E4                            loc_7216E:
000A66E4 E608                       		lsr.b	#3,d0
000A66E6                            
000A66E6                            loc_72170:
000A66E6 41FA 0000                  		lea	dword_722CC(pc),a0
000A66EA 2070 0000                  		movea.l	(a0,d0.w),a0
000A66EE 08D0 0002                  		bset	#2,(a0)
000A66F2                            
000A66F2                            loc_7217C:
000A66F2 D2C6                       		adda.w	d6,a1
000A66F4 51CF FFDA                  		dbf	d7,loc_7215A
000A66F8                            
000A66F8 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000A66FC 6A00                       		bpl.s	loc_7218E
000A66FE 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A6704                            
000A6704                            loc_7218E:
000A6704 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000A6708 6A00                       		bpl.s	loc_7219A
000A670A 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A6710                            
000A6710                            
000A6710                            loc_7219A:
000A6710 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000A6714 7805                       		moveq	#5,d4
000A6716                            
000A6716                            loc_721A0:
000A6716 4EBA 0000                  		jsr	sub_726FE(pc)
000A671A DAC6                       		adda.w	d6,a5
000A671C 51CC FFF8                  		dbf	d4,loc_721A0
000A6720 7802                       		moveq	#2,d4
000A6722                            
000A6722                            loc_721AC:
000A6722 4EBA 0000                  		jsr	sub_729A0(pc)
000A6726 DAC6                       		adda.w	d6,a5
000A6728 51CC FFF8                  		dbf	d4,loc_721AC
000A672C                            
000A672C                            loc_721B6:
000A672C 584F                       		addq.w	#4,sp
000A672E 4E75                       		rts	
000A6730                            ; ===========================================================================
000A6730 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000A673A 00                         		even
000A673A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000A673E                            		even
000A673E                            ; ===========================================================================
000A673E                            ; ---------------------------------------------------------------------------
000A673E                            ; Play normal sound effect
000A673E                            ; ---------------------------------------------------------------------------
000A673E                            
000A673E                            Sound_A0toCF:				; XREF: Sound_ChkValue
000A673E 4A2E 0027                  		tst.b	$27(a6)
000A6742 6600 0000                  		bne.w	loc_722C6
000A6746 4A2E 0004                  		tst.b	4(a6)
000A674A 6600 0000                  		bne.w	loc_722C6
000A674E 4A2E 0024                  		tst.b	$24(a6)
000A6752 6600 0000                  		bne.w	loc_722C6
000A6756 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000A675A 6600                       		bne.s	Sound_notB5	; if not, branch
000A675C 4A2E 002B                  		tst.b	$2B(a6)
000A6760 6600                       		bne.s	loc_721EE
000A6762 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000A6766                            
000A6766                            loc_721EE:
000A6766 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000A676C                            
000A676C                            Sound_notB5:
000A676C 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000A6770 6600                       		bne.s	Sound_notA7	; if not, branch
000A6772 4A2E 002C                  		tst.b	$2C(a6)
000A6776 6600 0000                  		bne.w	locret_722C4
000A677A 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000A6780                            
000A6780                            Sound_notA7:
000A6780 2079 000A 5A30             		movea.l	(Go_SoundIndex).l,a0
000A6786 0407 00A0                  		subi.b	#$A0,d7
000A678A E54F                       		lsl.w	#2,d7
000A678C 2670 7000                  		movea.l	(a0,d7.w),a3
000A6790 224B                       		movea.l	a3,a1
000A6792 7200                       		moveq	#0,d1
000A6794 3219                       		move.w	(a1)+,d1
000A6796 D28B                       		add.l	a3,d1
000A6798 1A19                       		move.b	(a1)+,d5
000A679A 1E19                       		move.b	(a1)+,d7
000A679C 5307                       		subq.b	#1,d7
000A679E 7C30                       		moveq	#$30,d6
000A67A0                            
000A67A0                            loc_72228:
000A67A0 7600                       		moveq	#0,d3
000A67A2 1629 0001                  		move.b	1(a1),d3
000A67A6 7403                       		moveq	#$03,d2					; EXT: set PSG to delay for 2 extra frames (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000A67A8 1803                       		move.b	d3,d4
000A67AA 6B00                       		bmi.s	loc_72244
000A67AC 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000A67B0 5543                       		subq.w	#2,d3
000A67B2 E54B                       		lsl.w	#2,d3
000A67B4 4BFA 0000                  		lea	dword_722CC(pc),a5
000A67B8 2A75 3000                  		movea.l	(a5,d3.w),a5
000A67BC 08D5 0002                  		bset	#2,(a5)
000A67C0 6000                       		bra.s	loc_7226E
000A67C2                            ; ===========================================================================
000A67C2                            
000A67C2                            loc_72244:
000A67C2 E64B                       		lsr.w	#3,d3
000A67C4 4BFA 0000                  		lea	dword_722CC(pc),a5
000A67C8 2A75 3000                  		movea.l	(a5,d3.w),a5
000A67CC 08D5 0002                  		bset	#2,(a5)
000A67D0 0C04 00C0                  		cmpi.b	#$C0,d4
000A67D4 6600                       		bne.s	loc_7226E
000A67D6 1004                       		move.b	d4,d0
000A67D8 0000 001F                  		ori.b	#$1F,d0
000A67DC 13C0 00C0 0011             		move.b	d0,($C00011).l
000A67E2 0840 0005                  		bchg	#5,d0
000A67E6 13C0 00C0 0011             		move.b	d0,($C00011).l
000A67EC                            
000A67EC                            loc_7226E:
000A67EC 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000A67F0 244D                       		movea.l	a5,a2
000A67F2 700B                       		moveq	#$B,d0
000A67F4                            
000A67F4                            loc_72276:
000A67F4 429A                       		clr.l	(a2)+
000A67F6 51C8 FFFC                  		dbf	d0,loc_72276
000A67FA                            
000A67FA 3A99                       		move.w	(a1)+,(a5)
000A67FC 1B45 0002                  		move.b	d5,2(a5)
000A6800 7000                       		moveq	#0,d0
000A6802 3019                       		move.w	(a1)+,d0
000A6804 D08B                       		add.l	a3,d0
000A6806 2B40 0004                  		move.l	d0,4(a5)
000A680A 3B59 0008                  		move.w	(a1)+,8(a5)
000A680E 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000A6812 1B46 000D                  		move.b	d6,$D(a5)
000A6816 3B7C FFFF 0010             		move.w	#$FFFF,$10(a5)				; CHG: clear PSG's frequency (ensures no frequency writing)
000A681C 4A04                       		tst.b	d4
000A681E 6B00                       		bmi.s	loc_722A8
000A6820 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6826 2B41 0020                  		move.l	d1,$20(a5)
000A682A                            
000A682A                            loc_722A8:
000A682A 51CF FF74                  		dbf	d7,loc_72228
000A682E                            
000A682E 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A6832 6A00                       		bpl.s	loc_722B8
000A6834 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A683A                            
000A683A                            loc_722B8:
000A683A 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A683E 6A00                       		bpl.s	locret_722C4
000A6840 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6846                            
000A6846                            locret_722C4:
000A6846 4E75                       		rts	
000A6848                            ; ===========================================================================
000A6848                            
000A6848                            loc_722C6:
000A6848 4216                       		clr.b	0(a6)
000A684A 4E75                       		rts	
000A684C                            ; ===========================================================================
000A684C 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000A6850 0000 0000                  		dc.l 0
000A6854 00FF F130                  		dc.l $FFF100+$30
000A6858 00FF F160                  		dc.l $FFF130+$30
000A685C 00FF F1C0                  		dc.l $FFF190+$30
000A6860 00FF F1F0                  		dc.l $FFF1C0+$30
000A6864 00FF F220                  		dc.l $FFF1F0+$30
000A6868 00FF F220                  		dc.l $FFF1F0+$30
000A686C 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000A6870 0000 0000                  		dc.l 0
000A6874 00FF F280                  		dc.l $FFF250+$30
000A6878 00FF F2B0                  		dc.l $FFF280+$30
000A687C 00FF F2E0                  		dc.l $FFF2B0+$30
000A6880 00FF F310                  		dc.l $FFF2E0+$30
000A6884 00FF F340                  		dc.l $FFF310+$30
000A6888 00FF F340                  		dc.l $FFF310+$30
000A688C                            ; ===========================================================================
000A688C                            ; ---------------------------------------------------------------------------
000A688C                            ; Play GHZ waterfall sound
000A688C                            ; ---------------------------------------------------------------------------
000A688C                            
000A688C                            Sound_D0toDF:				; XREF: Sound_ChkValue
000A688C 4A2E 0027                  		tst.b	$27(a6)
000A6890 6600 0000                  		bne.w	locret_723C6
000A6894 4A2E 0004                  		tst.b	4(a6)
000A6898 6600 0000                  		bne.w	locret_723C6
000A689C 4A2E 0024                  		tst.b	$24(a6)
000A68A0 6600 0000                  		bne.w	locret_723C6
000A68A4 2079 000A 5A28             		movea.l	(Go_SoundD0).l,a0
000A68AA 0407 00D0                  		subi.b	#$D0,d7
000A68AE E54F                       		lsl.w	#2,d7
000A68B0 2670 7000                  		movea.l	(a0,d7.w),a3
000A68B4 224B                       		movea.l	a3,a1
000A68B6 7000                       		moveq	#0,d0
000A68B8 3019                       		move.w	(a1)+,d0
000A68BA D08B                       		add.l	a3,d0
000A68BC 2D40 0020                  		move.l	d0,$20(a6)
000A68C0 1A19                       		move.b	(a1)+,d5
000A68C2 1E19                       		move.b	(a1)+,d7
000A68C4 5307                       		subq.b	#1,d7
000A68C6 7C30                       		moveq	#$30,d6
000A68C8                            
000A68C8                            loc_72348:
000A68C8 1829 0001                  		move.b	1(a1),d4
000A68CC 6B00                       		bmi.s	loc_7235A
000A68CE 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000A68D4 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A68D8 6000                       		bra.s	loc_72364
000A68DA                            ; ===========================================================================
000A68DA                            
000A68DA                            loc_7235A:
000A68DA 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000A68E0 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A68E4                            
000A68E4                            loc_72364:
000A68E4 244D                       		movea.l	a5,a2
000A68E6 700B                       		moveq	#$B,d0
000A68E8                            
000A68E8                            loc_72368:
000A68E8 429A                       		clr.l	(a2)+
000A68EA 51C8 FFFC                  		dbf	d0,loc_72368
000A68EE                            
000A68EE 3A99                       		move.w	(a1)+,(a5)
000A68F0 1B45 0002                  		move.b	d5,2(a5)
000A68F4 7000                       		moveq	#0,d0
000A68F6 3019                       		move.w	(a1)+,d0
000A68F8 D08B                       		add.l	a3,d0
000A68FA 2B40 0004                  		move.l	d0,4(a5)
000A68FE 3B59 0008                  		move.w	(a1)+,8(a5)
000A6902 1B7C 0001 000E             		move.b	#1,$E(a5)
000A6908 1B46 000D                  		move.b	d6,$D(a5)
000A690C 4A04                       		tst.b	d4
000A690E 6B00                       		bmi.s	loc_72396
000A6910 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000A6916                            
000A6916                            loc_72396:
000A6916 51CF FFB0                  		dbf	d7,loc_72348
000A691A                            
000A691A 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A691E 6A00                       		bpl.s	loc_723A6
000A6920 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000A6926                            
000A6926                            loc_723A6:
000A6926 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000A692A 6A00                       		bpl.s	locret_723C6
000A692C 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000A6932 0004 001F                  		ori.b	#$1F,d4
000A6936 13C4 00C0 0011             		move.b	d4,($C00011).l
000A693C 0844 0005                  		bchg	#5,d4
000A6940 13C4 00C0 0011             		move.b	d4,($C00011).l
000A6946                            
000A6946                            locret_723C6:
000A6946 4E75                       		rts	
000A6948                            ; End of function Sound_ChkValue
000A6948                            
000A6948                            ; ===========================================================================
000A6948 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000A694C 00FF F220                  		dc.l $FFF1F0+$30
000A6950 00FF F280                  		dc.l $FFF250+$30
000A6954 00FF F340                  		dc.l $FFF310+$30
000A6958 00FF F370                  		dc.l $FFF340+$30
000A695C 00FF F3A0                  		dc.l $FFF370+$30
000A6960                            
000A6960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6960                            
000A6960                            
000A6960                            Snd_FadeOut1:				; XREF: Sound_E0
000A6960 4216                       		clr.b	0(a6)
000A6962 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000A6966 7E05                       		moveq	#5,d7
000A6968                            
000A6968                            loc_723EA:
000A6968 4A15                       		tst.b	(a5)
000A696A 6A00 0000                  		bpl.w	loc_72472
000A696E 0895 0007                  		bclr	#7,(a5)
000A6972 7600                       		moveq	#0,d3
000A6974 162D 0001                  		move.b	1(a5),d3
000A6978 6B00                       		bmi.s	loc_7243C
000A697A 4EBA 0000                  		jsr	sub_726FE(pc)
000A697E 0C03 0004                  		cmpi.b	#4,d3
000A6982 6600                       		bne.s	loc_72416
000A6984 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A6988 6A00                       		bpl.s	loc_72416
000A698A 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A698E 226E 0020                  		movea.l	$20(a6),a1
000A6992 6000                       		bra.s	loc_72428
000A6994                            ; ===========================================================================
000A6994                            
000A6994                            loc_72416:
000A6994 5503                       		subq.b	#2,d3
000A6996 E50B                       		lsl.b	#2,d3
000A6998 41FA FEB2                  		lea	dword_722CC(pc),a0
000A699C 264D                       		movea.l	a5,a3
000A699E 2A70 3000                  		movea.l	(a0,d3.w),a5
000A69A2 226E 0018                  		movea.l	$18(a6),a1
000A69A6                            
000A69A6                            loc_72428:
000A69A6 0895 0002                  		bclr	#2,(a5)
000A69AA 08D5 0001                  		bset	#1,(a5)
000A69AE 102D 000B                  		move.b	$B(a5),d0
000A69B2 4EBA 0000                  		jsr	sub_72C4E(pc)
000A69B6 2A4B                       		movea.l	a3,a5
000A69B8 6000                       		bra.s	loc_72472
000A69BA                            ; ===========================================================================
000A69BA                            
000A69BA                            loc_7243C:
000A69BA 4EBA 0000                  		jsr	sub_729A0(pc)
000A69BE 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A69C2 0C03 00E0                  		cmpi.b	#$E0,d3
000A69C6 6700                       		beq.s	loc_7245A
000A69C8 0C03 00C0                  		cmpi.b	#$C0,d3
000A69CC 6700                       		beq.s	loc_7245A
000A69CE E60B                       		lsr.b	#3,d3
000A69D0 41FA FE7A                  		lea	dword_722CC(pc),a0
000A69D4 2070 3000                  		movea.l	(a0,d3.w),a0
000A69D8                            
000A69D8                            loc_7245A:
000A69D8 0890 0002                  		bclr	#2,(a0)
000A69DC 08D0 0001                  		bset	#1,(a0)
000A69E0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A69E6 6600                       		bne.s	loc_72472
000A69E8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A69F0                            
000A69F0                            loc_72472:
000A69F0 DAFC 0030                  		adda.w	#$30,a5
000A69F4 51CF FF72                  		dbf	d7,loc_723EA
000A69F8                            
000A69F8 4E75                       		rts	
000A69FA                            ; End of function Snd_FadeOut1
000A69FA                            
000A69FA                            
000A69FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A69FA                            
000A69FA                            
000A69FA                            Snd_FadeOut2:				; XREF: Sound_E0
000A69FA 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A69FE 4A15                       		tst.b	(a5)
000A6A00 6A00                       		bpl.s	loc_724AE
000A6A02 0895 0007                  		bclr	#7,(a5)
000A6A06 0815 0002                  		btst	#2,(a5)
000A6A0A 6600                       		bne.s	loc_724AE
000A6A0C 4A2E 000E                  	tst.b	$0E(a6)
000A6A10 6600                       	bne.s	loc_724AE_2
000A6A12 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6A16 6600                       	bne.s	loc_724AE
000A6A18                            
000A6A18                            	loc_724AE_2:
000A6A18 4EBA 0000                  		jsr	loc_7270A(pc)
000A6A1C 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A6A20 0895 0002                  		bclr	#2,(a5)
000A6A24 08D5 0001                  		bset	#1,(a5)
000A6A28 4A15                       		tst.b	(a5)
000A6A2A 6A00                       		bpl.s	loc_724AE
000A6A2C 226E 0018                  		movea.l	$18(a6),a1
000A6A30 102D 000B                  		move.b	$B(a5),d0
000A6A34 4EBA 0000                  		jsr	sub_72C4E(pc)
000A6A38                            
000A6A38                            loc_724AE:
000A6A38 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000A6A3C 4A15                       		tst.b	(a5)
000A6A3E 6A00                       		bpl.s	locret_724E4
000A6A40 0895 0007                  		bclr	#7,(a5)
000A6A44 0815 0002                  		btst	#2,(a5)
000A6A48 6600                       		bne.s	locret_724E4
000A6A4A 4A2E 000E                  	tst.b	$0E(a6)
000A6A4E 6600                       	bne.s	locret_724E4_2
000A6A50 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6A54 6600                       	bne.s	locret_724E4
000A6A56                            
000A6A56                            	locret_724E4_2:
000A6A56 4EBA 0000                  		jsr	loc_729A6(pc)
000A6A5A 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000A6A5E 0895 0002                  		bclr	#2,(a5)
000A6A62 08D5 0001                  		bset	#1,(a5)
000A6A66 4A15                       		tst.b	(a5)
000A6A68 6A00                       		bpl.s	locret_724E4
000A6A6A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000A6A70 6600                       		bne.s	locret_724E4
000A6A72 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000A6A7A                            
000A6A7A                            locret_724E4:
000A6A7A 4E75                       		rts	
000A6A7C                            ; End of function Snd_FadeOut2
000A6A7C                            
000A6A7C                            ; ===========================================================================
000A6A7C                            ; ---------------------------------------------------------------------------
000A6A7C                            ; Fade out music
000A6A7C                            ; ---------------------------------------------------------------------------
000A6A7C                            
000A6A7C                            Sound_E0:				; XREF: Sound_ExIndex
000A6A7C 4EBA FEE2                  		jsr	Snd_FadeOut1(pc)
000A6A80 4EBA FF78                  		jsr	Snd_FadeOut2(pc)
000A6A84 1D7C 0003 0006             		move.b	#3,6(a6)
000A6A8A 1D7C 0028 0004             		move.b	#$28,4(a6)
000A6A90                            	;	clr.b	$40(a6)
000A6A90                            	;	clr.b	$70(a6)					; MJ: stop PCM 2 as well
000A6A90 422E 002A                  		clr.b	$2A(a6)
000A6A94 4E75                       		rts	
000A6A96                            
000A6A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6A96                            
000A6A96                            
000A6A96                            sub_72504:				; XREF: sub_71B4C
000A6A96 102E 0006                  		move.b	6(a6),d0
000A6A9A 6700                       		beq.s	loc_72510
000A6A9C 532E 0006                  		subq.b	#1,6(a6)
000A6AA0 4E75                       		rts	
000A6AA2                            ; ===========================================================================
000A6AA2                            
000A6AA2                            loc_72510:
000A6AA2 532E 0004                  		subq.b	#1,4(a6)
000A6AA6 6700 0000                  		beq.w	Sound_E4
000A6AAA 1D7C 0003 0006             		move.b	#3,6(a6)
000A6AB0                            
000A6AB0                            
000A6AB0 43F9 00A0 0634             		lea	($A00000+PCM_ChangeVolume).l,a1		; CHG: load volume change instruction address
000A6AB6 7C00                       		moveq	#$00,d6					; CHG: clear d6
000A6AB8 1C2E 0004                  		move.b	$04(a6),d6				; CHG: load fade counter
000A6ABC 72D2                       		moveq	#($FFFFFF00|%11010010),d1		; prepare Z80 "JP NC" instruction
000A6ABE 4BEE 0040                  		lea	$40(a6),a5				; CHG: load PCM 1 address
000A6AC2 41F9 00A0 0642             		lea	($A00000+PCM1_Volume+1).l,a0		; CHG: load PCM 1 volume address
000A6AC8 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 1
000A6ACA 41F9 00A0 0647             		lea	($A00000+PCM2_Volume+1).l,a0		; CHG: load PCM 2 volume address
000A6AD0 6100                       		bsr.s	FadeOut_PCM				; CHG: do PCM 2
000A6AD2 6000 0000                  		bra.w	FadeOut_FM				; CHG: continue to FM fade out
000A6AD6                            
000A6AD6                            FadeOut_PCM:
000A6AD6 4A15                       		tst.b	(a5)					; CHG: is the channel running?
000A6AD8 6A00                       		bpl.s	FOP_NotRunning				; CHG: if not, branch
000A6ADA 7000                       		moveq	#$00,d0					; CHG: clear d0
000A6ADC 102D 0009                  		move.b	$09(a5),d0				; CHG: load volume
000A6AE0 6A00                       		bpl.s	FOP_NoMute				; CHG: if the channel is not mute (not from 80 - FF), branch
000A6AE2 7080                       		moveq	#$FFFFFF80,d0				; CHG: force volume 80 (mute)
000A6AE4 0895 0007                  		bclr	#$07,(a5)				; CHG: stop PCM channel
000A6AE8 6000                       		bra.s	FOP_Mute				; CHG: continue to mute the channel
000A6AEA                            
000A6AEA                            FOP_NoMute:
000A6AEA                            	;	add.b	FOP_FadeList(pc,d0.w),d0		; CHG: reduce the volume
000A6AEA 5400                       	addq.b	#$02,d0					; reduce the volume
000A6AEC                            
000A6AEC                            FOP_Mute:
000A6AEC 1B40 0009                  		move.b	d0,$09(a5)				; CHG: update
000A6AF0 B02D 000C                  		cmp.b	$0C(a5),d0				; CHG: has the volume changed?
000A6AF4 6700                       		beq.s	FOP_NotRunning				; CHG: if not, branch
000A6AF6 1B40 000C                  		move.b	d0,$0C(a5)				; CHG: update volume
000A6AFA 142E 0004                  	move.b	$04(a6),d2				; CHG: load fade timer
000A6AFE 0202 0003                  	andi.b	#$03,d2					; CHG: has it been four frames?
000A6B02 6600                       	bne.s	FOP_NotRunning				; CHG: if not, branch (temp until Z80 volume struggling is fixed)
000A6B04 33FC 0100 00A1 1100 0839+  		StopZ80
000A6B16 1080                       		move.b	d0,(a0)					; change PCM volume
000A6B18 1281                       		move.b	d1,(a1)					; change "JP C" to "JP NC"
000A6B1A 33FC 0000 00A1 1100        		StartZ80
000A6B22                            
000A6B22                            FOP_NotRunning:
000A6B22 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6B26 4E75                       		rts						; CHG: return
000A6B28                            
000A6B28                            ;FOP_FadeList:	dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6B28                            ;		dc.b	$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10,$10
000A6B28                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6B28                            ;		dc.b	$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
000A6B28                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6B28                            ;		dc.b	$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
000A6B28                            ;		dc.b	$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000A6B28                            ;		dc.b	$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
000A6B28                            
000A6B28                            ;FOP_VolumeList:	dc.b	$00,$0C,$18,$20,$28,$30,$34,$38,$3C,$40,$44,$48,$4C,$50,$56,$5A
000A6B28                            ;		dc.b	$60,$63,$66,$69,$6B,$6D,$6F,$70,$71,$72,$73,$74,$75,$76,$76,$77
000A6B28                            ;		dc.b	$77,$78,$78,$79,$79,$79,$7A,$7A,$7A,$7B,$7B,$7B,$7C,$7C,$7C,$7C
000A6B28                            ;		dc.b	$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E
000A6B28                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6B28                            ;		dc.b	$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F
000A6B28                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6B28                            ;		dc.b	$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000A6B28                            
000A6B28                            ; ===========================================================================
000A6B28                            
000A6B28                            FadeOut_FM:
000A6B28 7E05                       		moveq	#5,d7
000A6B2A                            
000A6B2A                            loc_72524:
000A6B2A 4A15                       		tst.b	(a5)
000A6B2C 6A00                       		bpl.s	loc_72538
000A6B2E 522D 0009                  		addq.b	#1,9(a5)
000A6B32 6A00                       		bpl.s	loc_72534
000A6B34 0895 0007                  		bclr	#7,(a5)
000A6B38 6000                       		bra.s	loc_72538
000A6B3A                            ; ===========================================================================
000A6B3A                            
000A6B3A                            loc_72534:
000A6B3A 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6B3E                            
000A6B3E                            loc_72538:
000A6B3E DAFC 0030                  		adda.w	#$30,a5
000A6B42 51CF FFE6                  		dbf	d7,loc_72524
000A6B46                            
000A6B46 7E02                       		moveq	#2,d7
000A6B48                            
000A6B48                            loc_72542:
000A6B48 4A15                       		tst.b	(a5)
000A6B4A 6A00                       		bpl.s	loc_72560
000A6B4C 522D 0009                  		addq.b	#1,9(a5)
000A6B50 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000A6B56 6500                       		bcs.s	loc_72558
000A6B58 0895 0007                  		bclr	#7,(a5)
000A6B5C 6000                       		bra.s	loc_72560
000A6B5E                            ; ===========================================================================
000A6B5E                            
000A6B5E                            loc_72558:
000A6B5E 1C2D 0009                  		move.b	9(a5),d6
000A6B62 DC2E 0016                  	add.b	$16(a6),d6			; EXTRA
000A6B66 4EBA 0000                  		jsr	sub_7296A(pc)
000A6B6A                            
000A6B6A                            loc_72560:
000A6B6A DAFC 0030                  		adda.w	#$30,a5
000A6B6E 51CF FFD8                  		dbf	d7,loc_72542
000A6B72                            
000A6B72 4E75                       		rts	
000A6B74                            ; End of function sub_72504
000A6B74                            
000A6B74                            
000A6B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6B74                            
000A6B74                            
000A6B74                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000A6B74 7602                       		moveq	#2,d3
000A6B76 7028                       		moveq	#$28,d0
000A6B78                            
000A6B78                            loc_7256E:
000A6B78 1203                       		move.b	d3,d1
000A6B7A 4EBA 0000                  		jsr	sub_7272E(pc)
000A6B7E 5801                       		addq.b	#4,d1
000A6B80 4EBA 0000                  		jsr	sub_7272E(pc)
000A6B84 51CB FFF2                  		dbf	d3,loc_7256E
000A6B88                            
000A6B88 7040                       		moveq	#$40,d0
000A6B8A 727F                       		moveq	#$7F,d1
000A6B8C 7802                       		moveq	#2,d4
000A6B8E                            
000A6B8E                            loc_72584:
000A6B8E 7603                       		moveq	#3,d3
000A6B90                            
000A6B90                            loc_72586:
000A6B90 4EBA 0000                  		jsr	sub_7272E(pc)
000A6B94 4EBA 0000                  		jsr	sub_72764(pc)
000A6B98 5840                       		addq.w	#4,d0
000A6B9A 51CB FFF4                  		dbf	d3,loc_72586
000A6B9E                            
000A6B9E 0400 000F                  		subi.b	#$F,d0
000A6BA2 51CC FFEA                  		dbf	d4,loc_72584
000A6BA6                            
000A6BA6 4E75                       		rts	
000A6BA8                            ; End of function sub_7256A
000A6BA8                            
000A6BA8                            ; ===========================================================================
000A6BA8                            ; ---------------------------------------------------------------------------
000A6BA8                            ; Stop music
000A6BA8                            ; ---------------------------------------------------------------------------
000A6BA8                            
000A6BA8                            Sound_E4:
000A6BA8 33FC 0100 00A1 1100 0839+  		StopZ80
000A6BBA 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6BC0 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A6BC6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6BC8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BCA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BCC 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6BCE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BD0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BD2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6BD4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BD6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BD8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6BDA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BDC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BDE 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6BE6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A6BEC 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 2 slot address
000A6BF2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6BF4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BF6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BF8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6BFA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BFC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6BFE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A6C00 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C02 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C04 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A6C06 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C08 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A6C0A 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A6C12 33FC 0000 00A1 1100        		StartZ80
000A6C1A                            
000A6C1A 702B                       		moveq	#$2B,d0
000A6C1C 123C 0080                  		move.b	#$80,d1
000A6C20 4EBA 0000                  		jsr	sub_7272E(pc)
000A6C24 7027                       		moveq	#$27,d0
000A6C26 7200                       		moveq	#0,d1
000A6C28 4EBA 0000                  		jsr	sub_7272E(pc)
000A6C2C 204E                       		movea.l	a6,a0
000A6C2E 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A6C32 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A6C36 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000A6C3A                            
000A6C3A                            loc_725B6:
000A6C3A 4298                       		clr.l	(a0)+
000A6C3C 51C8 FFFC                  		dbf	d0,loc_725B6
000A6C40                            
000A6C40 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A6C44 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A6C48 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000A6C4E 4EBA FF24                  		jsr	sub_7256A(pc)
000A6C52 6000 0000                  		bra.w	sub_729B6
000A6C56                            
000A6C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6C56                            
000A6C56                            
000A6C56                            sub_725CA:				; XREF: Sound_ChkValue
000A6C56 204E                       		movea.l	a6,a0
000A6C58 1216                       		move.b	0(a6),d1
000A6C5A 142E 0027                  		move.b	$27(a6),d2
000A6C5E 162E 002A                  		move.b	$2A(a6),d3
000A6C62 182E 0026                  		move.b	$26(a6),d4
000A6C66 3A2E 000A                  		move.w	$A(a6),d5
000A6C6A 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000A6C6E 2F2E 0014                  	move.l	$14(a6),-(sp)			; EXTRA
000A6C72 303C 0093                  		move.w	#$93,d0						; MJ: new size
000A6C76                            
000A6C76                            loc_725E4:
000A6C76 4298                       		clr.l	(a0)+
000A6C78 51C8 FFFC                  		dbf	d0,loc_725E4
000A6C7C                            
000A6C7C 1C81                       		move.b	d1,0(a6)
000A6C7E 1D42 0027                  		move.b	d2,$27(a6)
000A6C82 1D43 002A                  		move.b	d3,$2A(a6)
000A6C86 1D44 0026                  		move.b	d4,$26(a6)
000A6C8A 3D45 000A                  		move.w	d5,$A(a6)
000A6C8E 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000A6C92 2D5F 0014                  	move.l	(sp)+,$14(a6)			; EXTRA
000A6C96 1D7C 0080 0009             		move.b	#$80,9(a6)
000A6C9C 4EBA FED6                  		jsr	sub_7256A(pc)
000A6CA0 6000 0000                  		bra.w	sub_729B6
000A6CA4                            ; End of function sub_725CA
000A6CA4                            
000A6CA4                            
000A6CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6CA4                            
000A6CA4                            
000A6CA4                            sub_7260C:				; XREF: sub_71B4C
000A6CA4                            	;	move.b	2(a6),1(a6)
000A6CA4 102E 0015                  	move.b	$15(a6),d0			; EXTRA
000A6CA8 6A00                       	bpl.s	STempo_CheckMax			; EXTRA
000A6CAA D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A6CAE 0C00 0002                  	cmpi.b	#$02,d0				; EXTRA
000A6CB2 6A00                       	bpl.s	STempo_Valid			; EXTRA
000A6CB4 7002                       	moveq	#$02,d0				; EXTRA
000A6CB6 6000                       	bra.s	STempo_Valid			; EXTRA
000A6CB8                            
000A6CB8                            STempo_CheckMax:
000A6CB8 D02E 0002                  	add.b	$02(a6),d0			; EXTRA
000A6CBC                            
000A6CBC                            STempo_Valid:
000A6CBC 1D40 0001                  	move.b	d0,$01(a6)			; EXTRA
000A6CC0                            
000A6CC0 41EE 004E                  		lea	$4E(a6),a0
000A6CC4 7030                       		moveq	#$30,d0
000A6CC6 720A                       		moveq	#10,d1						; MJ: new number of channels
000A6CC8                            
000A6CC8                            loc_7261A:
000A6CC8 5210                       		addq.b	#1,(a0)
000A6CCA D0C0                       		adda.w	d0,a0
000A6CCC 51C9 FFFA                  		dbf	d1,loc_7261A
000A6CD0                            
000A6CD0 4E75                       		rts	
000A6CD2                            ; End of function sub_7260C
000A6CD2                            
000A6CD2                            ; ===========================================================================
000A6CD2                            ; ---------------------------------------------------------------------------
000A6CD2                            ; Speed	up music
000A6CD2                            ; ---------------------------------------------------------------------------
000A6CD2                            
000A6CD2                            Sound_E2:				; XREF: Sound_ExIndex
000A6CD2 4A2E 0027                  		tst.b	$27(a6)
000A6CD6 6600                       		bne.s	loc_7263E
000A6CD8 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000A6CDE 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000A6CE4 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000A6CEA 4E75                       		rts	
000A6CEC                            ; ===========================================================================
000A6CEC                            
000A6CEC                            loc_7263E:
000A6CEC 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
000A6CF2 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
000A6CF8 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
000A6CFE 4E75                       		rts	
000A6D00                            ; ===========================================================================
000A6D00                            ; ---------------------------------------------------------------------------
000A6D00                            ; Change music back to normal speed
000A6D00                            ; ---------------------------------------------------------------------------
000A6D00                            
000A6D00                            Sound_E3:				; XREF: Sound_ExIndex
000A6D00 4A2E 0027                  		tst.b	$27(a6)
000A6D04 6600                       		bne.s	loc_7266A
000A6D06 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000A6D0C 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000A6D12 422E 002A                  		clr.b	$2A(a6)
000A6D16 4E75                       		rts	
000A6D18                            ; ===========================================================================
000A6D18                            
000A6D18                            loc_7266A:
000A6D18 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
000A6D1E 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
000A6D24 422E 03FA                  		clr.b	$3FA(a6)
000A6D28 4E75                       		rts	
000A6D2A                            
000A6D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6D2A                            
000A6D2A                            
000A6D2A                            sub_7267C:				; XREF: sub_71B4C
000A6D2A 4A2E 0025                  		tst.b	$25(a6)
000A6D2E 6700                       		beq.s	loc_72688
000A6D30 532E 0025                  		subq.b	#1,$25(a6)
000A6D34 4E75                       		rts	
000A6D36                            ; ===========================================================================
000A6D36                            
000A6D36                            loc_72688:
000A6D36 4A2E 0026                  		tst.b	$26(a6)
000A6D3A 6700                       		beq.s	loc_726D6
000A6D3C 532E 0026                  		subq.b	#1,$26(a6)
000A6D40 1D7C 0002 0025             		move.b	#2,$25(a6)
000A6D46                            
000A6D46 4BEE 0040                  		lea	$40(a6),a5				; CHG: load starting from PCM channels
000A6D4A 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to alter
000A6D4C                            
000A6D4C                            FadeIn_NextPCM:
000A6D4C 4A15                       		tst.b	(a5)					; CHG: is this channel running?
000A6D4E 6A00                       		bpl.s	FadeIn_NoPCM				; CHG: if not, branch
000A6D50 572D 0009                  		subq.b	#$03,$09(a5)				; CHG: increase volume
000A6D54                            
000A6D54                            FadeIn_NoPCM:
000A6D54 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A6D58 51CF FFF2                  		dbf	d7,FadeIn_NextPCM			; CHG: repeat for all channels
000A6D5C                            
000A6D5C                            	;	lea	$A0(a6),a5				; MJ: new SFX location
000A6D5C                            
000A6D5C 7E05                       		moveq	#5,d7
000A6D5E                            
000A6D5E                            loc_7269E:
000A6D5E 4A15                       		tst.b	(a5)
000A6D60 6A00                       		bpl.s	loc_726AA
000A6D62 532D 0009                  		subq.b	#1,9(a5)
000A6D66 4EBA 0000                  		jsr	sub_72CB4(pc)
000A6D6A                            
000A6D6A                            loc_726AA:
000A6D6A DAFC 0030                  		adda.w	#$30,a5
000A6D6E 51CF FFEE                  		dbf	d7,loc_7269E
000A6D72 7E02                       		moveq	#2,d7
000A6D74                            
000A6D74                            loc_726B4:
000A6D74 4A15                       		tst.b	(a5)
000A6D76 6A00                       		bpl.s	loc_726CC
000A6D78 532D 0009                  		subq.b	#1,9(a5)
000A6D7C 1C2D 0009                  		move.b	9(a5),d6
000A6D80 0C06 0010                  		cmpi.b	#$10,d6
000A6D84 6500                       		bcs.s	loc_726C8
000A6D86 7C0F                       		moveq	#$F,d6
000A6D88                            
000A6D88                            loc_726C8:
000A6D88 4EBA 0000                  		jsr	sub_7296A(pc)
000A6D8C                            
000A6D8C                            loc_726CC:
000A6D8C DAFC 0030                  		adda.w	#$30,a5
000A6D90 51CF FFE2                  		dbf	d7,loc_726B4
000A6D94 4E75                       		rts	
000A6D96                            ; ===========================================================================
000A6D96                            
000A6D96                            loc_726D6:
000A6D96                            	;	bclr	#2,$40(a6)
000A6D96                            	;	bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
000A6D96 422E 0024                  		clr.b	$24(a6)
000A6D9A 4E75                       		rts	
000A6D9C                            ; End of function sub_7267C
000A6D9C                            
000A6D9C                            ; ===========================================================================
000A6D9C                            
000A6D9C                            loc_726E2:				; XREF: sub_71CCA
000A6D9C 0815 0001                  		btst	#1,(a5)
000A6DA0 6600                       		bne.s	locret_726FC
000A6DA2 0815 0002                  		btst	#2,(a5)
000A6DA6 6600                       		bne.s	locret_726FC
000A6DA8 4A2E 000E                  	tst.b	$0E(a6)
000A6DAC 6600                       	bne.s	locret_726FC_2
000A6DAE 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6DB2 6600                       	bne.s	locret_726FC
000A6DB4                            
000A6DB4                            	locret_726FC_2:
000A6DB4 7028                       		moveq	#$28,d0
000A6DB6 122D 0001                  		move.b	1(a5),d1
000A6DBA 0001 00F0                  		ori.b	#-$10,d1
000A6DBE 6000 0000                  		bra.w	sub_7272E
000A6DC2                            ; ===========================================================================
000A6DC2                            
000A6DC2                            locret_726FC:
000A6DC2 4E75                       		rts	
000A6DC4                            
000A6DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6DC4                            
000A6DC4                            
000A6DC4                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000A6DC4 0815 0004                  		btst	#4,(a5)
000A6DC8 6600                       		bne.s	locret_72714
000A6DCA 0815 0002                  		btst	#2,(a5)
000A6DCE 6600                       		bne.s	locret_72714
000A6DD0 4A2E 000E                  	tst.b	$0E(a6)
000A6DD4 6600                       	bne.s	loc_7270A
000A6DD6 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6DDA 6600                       	bne.s	locret_72714
000A6DDC                            
000A6DDC                            loc_7270A:				; XREF: Snd_FadeOut2
000A6DDC 7028                       		moveq	#$28,d0
000A6DDE 122D 0001                  		move.b	1(a5),d1
000A6DE2 6000 0000                  		bra.w	sub_7272E
000A6DE6                            ; ===========================================================================
000A6DE6                            
000A6DE6                            locret_72714:
000A6DE6 4E75                       		rts	
000A6DE8                            ; End of function sub_726FE
000A6DE8                            
000A6DE8                            ; ===========================================================================
000A6DE8                            
000A6DE8                            loc_72716:				; XREF: sub_72A5A
000A6DE8 0815 0002                  		btst	#2,(a5)
000A6DEC 6600                       		bne.s	locret_72720
000A6DEE 4A2E 000E                  	tst.b	$0E(a6)
000A6DF2 6600                       	bne.s	sub_72722
000A6DF4 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A6DF8 6600                       	bne.s	locret_72720
000A6DFA 6000 0000                  		bra.w	sub_72722
000A6DFE                            ; ===========================================================================
000A6DFE                            
000A6DFE                            locret_72720:
000A6DFE 4E75                       		rts	
000A6E00                            
000A6E00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E00                            
000A6E00                            
000A6E00                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000A6E00 082D 0002 0001             		btst	#2,1(a5)
000A6E06 6600                       		bne.s	loc_7275A
000A6E08 D02D 0001                  		add.b	1(a5),d0
000A6E0C                            ; End of function sub_72722
000A6E0C                            
000A6E0C                            
000A6E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E0C                            
000A6E0C                            sub_7272E:
000A6E0C 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A6E10 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A6E14 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
000A6E18 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A6E2A 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A6E2C 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A6E2E 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A6E30 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A6E32 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A6E3A 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A6E3E 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A6E42 4E75                       		rts						; EXT: return
000A6E44                            
000A6E44                            ; ===========================================================================
000A6E44                            
000A6E44                            loc_7275A:				; XREF: sub_72722
000A6E44 142D 0001                  		move.b	1(a5),d2
000A6E48 0882 0002                  		bclr	#2,d2
000A6E4C D002                       		add.b	d2,d0
000A6E4E                            
000A6E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6E4E                            
000A6E4E                            
000A6E4E                            sub_72764:
000A6E4E 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
000A6E52 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
000A6E56 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
000A6E5A 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
000A6E6C 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
000A6E6E 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
000A6E70 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
000A6E72 50D0                       		st.b	(a0)					; EXT: set end of list marker
000A6E74 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
000A6E7C 2D48 0010                  		move.l	a0,$10(a6)				; EXT: store cue address
000A6E80 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
000A6E84 4E75                       		rts						; EXT: return
000A6E86                            
000A6E86                            ; ===========================================================================
000A6E86 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000A6E98 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000A6EAA 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000A6EBA 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000A6ECA 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000A6EDA 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000A6EEA 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000A6EFA 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000A6F0A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000A6F1A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000A6F2A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000A6F3A 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000A6F46                            
000A6F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6F46                            
000A6F46                            
000A6F46                            ; ===========================================================================
000A6F46                            ; ---------------------------------------------------------------------------
000A6F46                            ; Subroutine to run an FM channel ; EXTRA - ON/OFF
000A6F46                            ; ---------------------------------------------------------------------------
000A6F46                            
000A6F46                            SPSG_CheckMute:
000A6F46 4A2E 000E                  	tst.b	$0E(a6)
000A6F4A 6600                       	bne.s	S72850_NoCHG
000A6F4C 102D 0021                  	move.b	$21(a5),d0
000A6F50 B02D 0022                  	cmp.b	$22(a5),d0
000A6F54 6700                       	beq.s	S72850_NoCHG
000A6F56 4A00                       	tst.b	d0
000A6F58 6A00                       	bpl.s	S72850_NoMute
000A6F5A 08D5 0006                  	bset.b	#$06,(a5)
000A6F5E 1B6D 0021 0022             	move.b	$21(a5),$22(a5)
000A6F64 4EB9 0000 0000             	jsr	SPSG_UpdateTone
000A6F6A                            
000A6F6A                            S72850_NoCHG:
000A6F6A 4E75                       	rts
000A6F6C                            
000A6F6C                            S72850_NoMute:
000A6F6C 1B40 0022                  	move.b	d0,$22(a5)
000A6F70 08D5 0006                  	bset.b	#$06,(a5)
000A6F74 4EB9 0000 0000             	jsr	loc_7292E
000A6F7A 4E75                       	rts
000A6F7C                            
000A6F7C                            ; ===========================================================================
000A6F7C                            ; ---------------------------------------------------------------------------
000A6F7C                            ; Subroutine to run a PSG channel
000A6F7C                            ; ---------------------------------------------------------------------------
000A6F7C                            
000A6F7C                            sub_72850:				; XREF: sub_71B4C
000A6F7C 61C8                       	bsr.s	SPSG_CheckMute			; EXTRA - ON/OFF
000A6F7E 532D 000E                  		subq.b	#1,$E(a5)
000A6F82 6600                       		bne.s	loc_72866
000A6F84 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6F88 0895 0004                  		bclr	#4,(a5)
000A6F8C 4EBA 0000                  		jsr	sub_72878(pc)
000A6F90 4EBA 0000                  		jsr	sub_728DC(pc)
000A6F94 6000 0000                  		bra.w	loc_7292E
000A6F98                            ; ===========================================================================
000A6F98                            
000A6F98                            loc_72866:
000A6F98 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A6F9C 6700                       	beq.s	SPSG_NoUpdate			; EXTRA
000A6F9E 7A00                       	moveq	#$00,d5				; EXTRA
000A6FA0 1A2D 0020                  	move.b	$20(a5),d5			; EXTRA
000A6FA4 0405 0081                  	subi.b	#$81,d5				; EXTRA
000A6FA8 6500                       	bcs.s	SPSG_NoUpdate			; EXTRA
000A6FAA 4EB9 0000 0000             	jsr	SPSG_UpdateFreque		; EXTRA
000A6FB0 3C2D 0010                  	move.w	$10(a5),d6			; EXTRA
000A6FB4 6000 0000                  	bra.w	SPSG_Update			; EXTRA
000A6FB8                            
000A6FB8                            	SPSG_NoUpdate:				; EXTRA
000A6FB8 4EBA F1EE                  		jsr	sub_71D9E(pc)
000A6FBC 4EBA 0000                  		jsr	sub_72926(pc)
000A6FC0 4EBA F28A                  		jsr	sub_71DC6(pc)
000A6FC4                            
000A6FC4                            	SPSG_Update:				; EXTRA
000A6FC4 0895 0006                  	bclr.b	#$06,(a5)			; EXTRA
000A6FC8 4EBA 0000                  		jsr	sub_728E2(pc)
000A6FCC 4E75                       		rts	
000A6FCE                            ; End of function sub_72850
000A6FCE                            
000A6FCE                            
000A6FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A6FCE                            
000A6FCE                            
000A6FCE                            sub_72878:				; XREF: sub_72850
000A6FCE 0895 0001                  		bclr	#1,(a5)
000A6FD2 286D 0004                  		movea.l	4(a5),a4
000A6FD6                            
000A6FD6                            loc_72880:
000A6FD6 7A00                       		moveq	#0,d5
000A6FD8 1A1C                       		move.b	(a4)+,d5
000A6FDA 0C05 00E0                  		cmpi.b	#$E0,d5
000A6FDE 6500                       		bcs.s	loc_72890
000A6FE0 4EBA 0000                  		jsr	sub_72A5A(pc)
000A6FE4 60F0                       		bra.s	loc_72880
000A6FE6                            ; ===========================================================================
000A6FE6                            
000A6FE6                            loc_72890:
000A6FE6 4A05                       		tst.b	d5
000A6FE8 6A00                       		bpl.s	loc_728A4
000A6FEA 1B45 0020                  	move.b	d5,$20(a5)			; EXTRA
000A6FEE 4EBA 0000                  		jsr	sub_728AC(pc)
000A6FF2 1A1C                       		move.b	(a4)+,d5
000A6FF4 4A05                       		tst.b	d5
000A6FF6 6A00                       		bpl.s	loc_728A4
000A6FF8 534C                       		subq.w	#1,a4
000A6FFA 6000 F16E                  		bra.w	sub_71D60
000A6FFE                            ; ===========================================================================
000A6FFE                            
000A6FFE                            loc_728A4:
000A6FFE 4EBA F14A                  		jsr	sub_71D40(pc)
000A7002 6000 F166                  		bra.w	sub_71D60
000A7006                            ; End of function sub_72878
000A7006                            
000A7006                            
000A7006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7006                            
000A7006                            
000A7006                            sub_728AC:				; XREF: sub_72878
000A7006 0405 0081                  		subi.b	#$81,d5
000A700A 6500                       		bcs.s	loc_728CA
000A700C                            
000A700C                            	SPSG_UpdateFreque:			; EXTRA
000A700C DA2D 0008                  		add.b	8(a5),d5
000A7010 DA2E 0014                  	add.b	$14(a6),d5			; EXTRA
000A7014 0245 007F                  		andi.w	#$7F,d5
000A7018 E34D                       		lsl.w	#1,d5
000A701A 41FA 0000                  		lea	word_729CE(pc),a0
000A701E 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000A7024 0815 0006                  	btst.b	#$06,(a5)			; EXTRA
000A7028 669A                       	bne.s	SPSG_Update			; EXTRA
000A702A 6000 F13E                  		bra.w	sub_71D60
000A702E                            ; ===========================================================================
000A702E                            
000A702E                            loc_728CA:
000A702E 08D5 0001                  		bset	#1,(a5)
000A7032 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000A7038 4EBA F130                  		jsr	sub_71D60(pc)
000A703C 6000 0000                  		bra.w	sub_729A0
000A7040                            ; End of function sub_728AC
000A7040                            
000A7040                            
000A7040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7040                            
000A7040                            
000A7040                            sub_728DC:				; XREF: sub_72850
000A7040 3C2D 0010                  		move.w	$10(a5),d6
000A7044 6B00                       		bmi.s	loc_72920
000A7046                            ; End of function sub_728DC
000A7046                            
000A7046                            
000A7046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7046                            
000A7046                            
000A7046                            sub_728E2:				; XREF: sub_72850
000A7046 102D 001E                  		move.b	$1E(a5),d0
000A704A 4880                       		ext.w	d0
000A704C DC40                       		add.w	d0,d6
000A704E 0815 0002                  		btst	#2,(a5)
000A7052 6600                       		bne.s	locret_7291E
000A7054 4A2E 000E                  	tst.b	$0E(a6)
000A7058 6600                       	bne.s	locret_7291E_2
000A705A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A705E 6600                       	bne.s	locret_7291E
000A7060                            
000A7060                            	locret_7291E_2:
000A7060 0815 0001                  		btst	#1,(a5)
000A7064 6600                       		bne.s	locret_7291E
000A7066 102D 0001                  		move.b	1(a5),d0
000A706A 0C00 00E0                  		cmpi.b	#$E0,d0
000A706E 6600                       		bne.s	loc_72904
000A7070 103C 00C0                  		move.b	#$C0,d0
000A7074                            
000A7074                            loc_72904:
000A7074 3206                       		move.w	d6,d1
000A7076 0201 000F                  		andi.b	#$F,d1
000A707A 8001                       		or.b	d1,d0
000A707C E84E                       		lsr.w	#4,d6
000A707E 0206 003F                  		andi.b	#$3F,d6
000A7082 13C0 00C0 0011             		move.b	d0,($C00011).l
000A7088 13C6 00C0 0011             		move.b	d6,($C00011).l
000A708E                            
000A708E                            locret_7291E:
000A708E 4E75                       		rts	
000A7090                            ; End of function sub_728E2
000A7090                            
000A7090                            ; ===========================================================================
000A7090                            
000A7090                            loc_72920:				; XREF: sub_728DC
000A7090 08D5 0001                  		bset	#1,(a5)
000A7094 4E75                       		rts	
000A7096                            
000A7096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7096                            
000A7096                            
000A7096                            sub_72926:				; XREF: sub_72850
000A7096 4A2D 000B                  		tst.b	$B(a5)
000A709A 6700 0000                  		beq.w	locret_7298A
000A709E                            
000A709E                            loc_7292E:				; XREF: sub_72850
000A709E                            	;	move.b	9(a5),d6
000A709E 1C2E 0016                  	move.b	$16(a6),d6			; EXTRA
000A70A2 E406                       	asr.b	#$02,d6				; EXTRA
000A70A4 DC2D 0009                  	add.b	$09(a5),d6			; EXTRA
000A70A8 7000                       		moveq	#0,d0
000A70AA 102D 000B                  		move.b	$B(a5),d0
000A70AE 6700                       		beq.s	sub_7296A
000A70B0 2079 000A 5A38             		movea.l	(Go_PSGIndex).l,a0
000A70B6 5340                       		subq.w	#1,d0
000A70B8 E548                       		lsl.w	#2,d0
000A70BA 2070 0000                  		movea.l	(a0,d0.w),a0
000A70BE 102D 000C                  		move.b	$C(a5),d0
000A70C2 1030 0000                  		move.b	(a0,d0.w),d0
000A70C6 522D 000C                  		addq.b	#1,$C(a5)
000A70CA 0800 0007                  		btst	#7,d0
000A70CE 6700                       		beq.s	loc_72960
000A70D0 0C00 0080                  		cmpi.b	#$80,d0
000A70D4 6700                       		beq.s	loc_7299A
000A70D6                            
000A70D6                            loc_72960:
000A70D6 DC40                       		add.w	d0,d6
000A70D8 0C06 0010                  		cmpi.b	#$10,d6
000A70DC 6500                       		bcs.s	sub_7296A
000A70DE 7C0F                       		moveq	#$F,d6
000A70E0                            ; End of function sub_72926
000A70E0                            
000A70E0                            
000A70E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A70E0                            
000A70E0                            
000A70E0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000A70E0 0815 0001                  		btst	#1,(a5)
000A70E4 6600                       		bne.s	locret_7298A
000A70E6                            
000A70E6                            	SPSG_UpdateTone:
000A70E6 0815 0002                  		btst	#2,(a5)
000A70EA 6600                       		bne.s	locret_7298A
000A70EC 4A2E 000E                  	tst.b	$0E(a6)
000A70F0 6600                       	bne.s	locret_7298A_2
000A70F2 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A70F6 6700                       	beq.s	locret_7298A_2
000A70F8 1C2D 0001                  	move.b	$01(a5),d6
000A70FC 0606 0010                  	addi.b	#$10,d6
000A7100 0006 000F                  	ori.b	#$0F,d6
000A7104 13C6 00C0 0011             	move.b	d6,($C00011).l
000A710A 4E75                       	rts
000A710C                            
000A710C                            	locret_7298A_2:
000A710C 0815 0004                  		btst	#4,(a5)
000A7110 6600                       		bne.s	loc_7298C
000A7112                            
000A7112                            loc_7297C:
000A7112 8C2D 0001                  		or.b	1(a5),d6
000A7116 0606 0010                  		addi.b	#$10,d6
000A711A 13C6 00C0 0011             		move.b	d6,($C00011).l
000A7120                            
000A7120                            locret_7298A:
000A7120 4E75                       		rts	
000A7122                            ; ===========================================================================
000A7122                            
000A7122                            loc_7298C:
000A7122 4A2D 0013                  		tst.b	$13(a5)
000A7126 67EA                       		beq.s	loc_7297C
000A7128 4A2D 0012                  		tst.b	$12(a5)
000A712C 66E4                       		bne.s	loc_7297C
000A712E 4E75                       		rts	
000A7130                            ; End of function sub_7296A
000A7130                            
000A7130                            ; ===========================================================================
000A7130                            
000A7130                            loc_7299A:				; XREF: sub_72926
000A7130 532D 000C                  		subq.b	#1,$C(a5)
000A7134 4E75                       		rts	
000A7136                            
000A7136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7136                            
000A7136                            
000A7136                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000A7136 0815 0002                  		btst	#2,(a5)
000A713A 6600                       		bne.s	locret_729B4
000A713C 4A2E 000E                  	tst.b	$0E(a6)
000A7140 6600                       	bne.s	loc_729A6
000A7142 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7146 6600                       	bne.s	locret_729B4
000A7148                            
000A7148                            loc_729A6:				; XREF: Snd_FadeOut2
000A7148 102D 0001                  		move.b	1(a5),d0
000A714C 0000 001F                  		ori.b	#$1F,d0
000A7150 13C0 00C0 0011             		move.b	d0,($C00011).l
000A7156                            
000A7156                            locret_729B4:
000A7156 4E75                       		rts	
000A7158                            ; End of function sub_729A0
000A7158                            
000A7158                            
000A7158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7158                            
000A7158                            
000A7158                            sub_729B6:				; XREF: loc_71E7C
000A7158 41F9 00C0 0011             		lea	($C00011).l,a0
000A715E 10BC 009F                  		move.b	#$9F,(a0)
000A7162 10BC 00BF                  		move.b	#$BF,(a0)
000A7166 10BC 00DF                  		move.b	#$DF,(a0)
000A716A 10BC 00FF                  		move.b	#$FF,(a0)
000A716E 4E75                       		rts	
000A7170                            ; End of function sub_729B6
000A7170                            
000A7170                            ; ===========================================================================
000A7170 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000A7182 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000A7194 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000A71A8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000A71BC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000A71D0 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000A71E4 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000A71F8 0011 0000                  		dc.w $11, 0
000A71FC                            
000A71FC                            	; PSG can overflow here by accident (SYZ does when it plays low notes
000A71FC                            	; but the pitch of the channel is low, and wraps to high).
000A71FC                            
000A71FC                            	; The flag pointers have been altered slightly, causing the frequencies
000A71FC                            	; to be different, even though it's wrong in the first place, this
000A71FC                            	; table will ensure it's put back the original way (not correct, just
000A71FC                            	; original).
000A71FC                            
000A71FC 0445 00E0 E54D 4EFB 5002+  		dc.w	$0445,$00E0,$E54D,$4EFB,$5002,$6000,$0066,$6000	; CHG: end of table
000A720C 0082 6000 0084 6000 0086+  		dc.w	$0082,$6000,$0084,$6000,$0086,$6000,$009E,$6000
000A721C 0124 6000 0126 6000 012C+  		dc.w	$0124,$6000,$0126,$6000,$012C,$6000,$012E,$6000
000A722C 0134 6000 0138 6000 013E+  		dc.w	$0134,$6000,$0138,$6000,$013E,$6000,$0150,$6000
000A723C 0154 6000 0156 6000 0184+  		dc.w	$0154,$6000,$0156,$6000,$0184,$6000,$028A,$6000
000A724C 02A8 6000 02AA 6000 0354+  		dc.w	$02A8,$6000,$02AA,$6000,$0354,$6000,$036A,$6000
000A725C 036C 6000 036E 6000 0376+  		dc.w	$036C,$6000,$036E,$6000,$0376,$6000,$038C,$6000
000A726C 039A 121C                  		dc.w	$039A,$121C
000A7270                            
000A7270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7270                            
000A7270                            
000A7270                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000A7270 0445 00E0                  		subi.w	#$E0,d5
000A7274 E54D                       		lsl.w	#2,d5
000A7276 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000A727A                            ; End of function sub_72A5A
000A727A                            
000A727A                            ; ===========================================================================
000A727A                            
000A727A                            loc_72A64:
000A727A 6000 0000                  		bra.w	loc_72ACC			; E0
000A727E                            ; ===========================================================================
000A727E 6000 0000                  		bra.w	loc_72AEC			; E1
000A7282                            ; ===========================================================================
000A7282 6000 0000                  		bra.w	loc_72AF2			; E2
000A7286                            ; ===========================================================================
000A7286 6000 0000                  		bra.w	loc_72AF8			; E3
000A728A                            ; ===========================================================================
000A728A 6000 0000                  		bra.w	loc_72B14			; E4
000A728E                            ; ===========================================================================
000A728E 6000 0000                  		bra.w	loc_72B9E			; E5
000A7292                            ; ===========================================================================
000A7292 6000 0000                  		bra.w	loc_72BA4			; E6
000A7296                            ; ===========================================================================
000A7296 6000 0000                  		bra.w	loc_72BAE			; E7
000A729A                            ; ===========================================================================
000A729A 6000 0000                  		bra.w	loc_72BB4			; E8
000A729E                            ; ===========================================================================
000A729E 6000 0000                  		bra.w	loc_72BBE			; E9
000A72A2                            ; ===========================================================================
000A72A2 6000 0000                  		bra.w	loc_72BC6			; EA
000A72A6                            ; ===========================================================================
000A72A6 6000 0000                  		bra.w	loc_72BD0			; EB
000A72AA                            ; ===========================================================================
000A72AA 6000 0000                  		bra.w	loc_72BE6			; EC
000A72AE                            ; ===========================================================================
000A72AE 6000 0000                  		bra.w	loc_72BEE			; ED
000A72B2                            ; ===========================================================================
000A72B2 6000 0000                  		bra.w	loc_72BF4			; EE
000A72B6                            ; ===========================================================================
000A72B6 6000 0000                  		bra.w	loc_72C26			; EF
000A72BA                            ; ===========================================================================
000A72BA 6000 0000                  		bra.w	loc_72D30			; F0
000A72BE                            ; ===========================================================================
000A72BE 6000 0000                  		bra.w	loc_72D52			; F1
000A72C2                            ; ===========================================================================
000A72C2 6000 0000                  		bra.w	loc_72D58			; F2
000A72C6                            ; ===========================================================================
000A72C6 6000 0000                  		bra.w	loc_72E06			; F3
000A72CA                            ; ===========================================================================
000A72CA 6000 0000                  		bra.w	loc_72E20			; F4
000A72CE                            ; ===========================================================================
000A72CE 6000 0000                  		bra.w	loc_72E26			; F5
000A72D2                            ; ===========================================================================
000A72D2 6000 0000                  		bra.w	loc_72E2C			; F6
000A72D6                            ; ===========================================================================
000A72D6 6000 0000                  		bra.w	loc_72E38			; F7
000A72DA                            ; ===========================================================================
000A72DA 6000 0000                  		bra.w	loc_72E52			; F8
000A72DE                            ; ===========================================================================
000A72DE 6000 0000                  		bra.w	loc_72E64			; F9
000A72E2                            ; ===========================================================================
000A72E2                            ; ---------------------------------------------------------------------------
000A72E2                            ; Flag FA - Reverse flag
000A72E2                            ; ---------------------------------------------------------------------------
000A72E2                            
000A72E2                            FlagFA:
000A72E2 0855 0005                  		bchg.b	#$05,(a5)			; CHG: change reverse flag
000A72E6 4E75                       		rts					; CHG: return
000A72E8                            
000A72E8                            ; ===========================================================================
000A72E8                            
000A72E8                            loc_72ACC:				; XREF: loc_72A64
000A72E8 121C                       		move.b	(a4)+,d1
000A72EA 4A2D 0001                  		tst.b	1(a5)
000A72EE 6B00                       		bmi.s	locret_72AEA
000A72F0 102D 000A                  		move.b	$A(a5),d0
000A72F4 0200 0037                  		andi.b	#$37,d0
000A72F8 8200                       		or.b	d0,d1
000A72FA 1B41 000A                  		move.b	d1,$A(a5)
000A72FE 103C 00B4                  		move.b	#$B4,d0
000A7302 6000 FAE4                  		bra.w	loc_72716
000A7306                            ; ===========================================================================
000A7306                            
000A7306                            locret_72AEA:
000A7306 4E75                       		rts	
000A7308                            ; ===========================================================================
000A7308                            
000A7308                            loc_72AEC:				; XREF: loc_72A64
000A7308 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000A730C 4E75                       		rts	
000A730E                            ; ===========================================================================
000A730E                            
000A730E                            loc_72AF2:				; XREF: loc_72A64
000A730E 1D5C 0007                  		move.b	(a4)+,7(a6)
000A7312 4E75                       		rts	
000A7314                            ; ===========================================================================
000A7314                            
000A7314                            loc_72AF8:				; XREF: loc_72A64
000A7314 7000                       		moveq	#0,d0
000A7316 102D 000D                  		move.b	$D(a5),d0
000A731A 2875 0000                  		movea.l	(a5,d0.w),a4
000A731E 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000A7326 544C                       		addq.w	#2,a4
000A7328 5800                       		addq.b	#4,d0
000A732A 1B40 000D                  		move.b	d0,$D(a5)
000A732E 4E75                       		rts	
000A7330                            ; ===========================================================================
000A7330                            
000A7330                            loc_72B14:				; XREF: loc_72A64
000A7330 204E                       		movea.l	a6,a0
000A7332 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000A7336 236E 0010 0010             	move.l	$10(a6),$10(a1)				; CHG: copy buffer address across
000A733C 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000A7340                            
000A7340                            loc_72B1E:
000A7340 20D9                       		move.l	(a1)+,(a0)+
000A7342 51C8 FFFC                  		dbf	d0,loc_72B1E
000A7346                            
000A7346                            	;	bset	#2,$40(a6)
000A7346                            	;	bset	#2,$70(a6)				; MJ: enable PCM 2
000A7346 264D                       		movea.l	a5,a3
000A7348 1C3C 0028                  		move.b	#$28,d6
000A734C 9C2E 0026                  		sub.b	$26(a6),d6
000A7350 1A06                       	move.b	d6,d5
000A7352 DA05                       	add.b	d5,d5
000A7354 DA06                       	add.b	d6,d5
000A7356                            
000A7356 7E01                       		moveq	#$02-1,d7				; CHG: set number of PCM channels to do
000A7358 4BEE 0040                  		lea	$40(a6),a5				; CHG: start from PCM 1
000A735C                            
000A735C                            FE4_NextPCM:
000A735C 0815 0007                  		btst	#$07,(a5)				; CHG: is the channel running?
000A7360 6700                       		beq.s	FE4_NoPCM				; CHG: if not, branch
000A7362                            	;	bset	#$01,(a5)				; CHG: set the channel as resting
000A7362 DB2D 0009                  		add.b	d5,$09(a5)				; CHG: reduce its volume
000A7366                            
000A7366                            FE4_NoPCM:
000A7366 4BED 0030                  		lea	$30(a5),a5				; CHG: advance to next channel
000A736A 51CF FFF0                  		dbf	d7,FE4_NextPCM				; CHG: repeat for all channels
000A736E                            
000A736E 7E05                       		moveq	#5,d7
000A7370                            	;	lea	$A0(a6),a5				; MJ: new FM location
000A7370                            
000A7370                            loc_72B3A:
000A7370 0815 0007                  		btst	#7,(a5)
000A7374 6700                       		beq.s	loc_72B5C
000A7376 08D5 0001                  		bset	#1,(a5)
000A737A DD2D 0009                  		add.b	d6,9(a5)
000A737E 0815 0002                  		btst	#2,(a5)
000A7382 6600                       		bne.s	loc_72B5C
000A7384 4A2E 000E                  	tst.b	$0E(a6)
000A7388 6600                       	bne.s	locret_72B5C_2
000A738A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A738E 6600                       	bne.s	loc_72B5C
000A7390                            
000A7390                            	locret_72B5C_2:
000A7390 7000                       		moveq	#0,d0
000A7392 102D 000B                  		move.b	$B(a5),d0
000A7396 226E 0018                  		movea.l	$18(a6),a1
000A739A 4EBA 0000                  		jsr	sub_72C4E(pc)
000A739E                            
000A739E                            loc_72B5C:
000A739E DAFC 0030                  		adda.w	#$30,a5
000A73A2 51CF FFCC                  		dbf	d7,loc_72B3A
000A73A6                            
000A73A6 7E02                       		moveq	#2,d7
000A73A8                            
000A73A8                            loc_72B66:
000A73A8 0815 0007                  		btst	#7,(a5)
000A73AC 6700                       		beq.s	loc_72B78
000A73AE 08D5 0001                  		bset	#1,(a5)
000A73B2 4EBA FD82                  		jsr	sub_729A0(pc)
000A73B6 DD2D 0009                  		add.b	d6,9(a5)
000A73BA                            
000A73BA                            loc_72B78:
000A73BA DAFC 0030                  		adda.w	#$30,a5
000A73BE 51CF FFE8                  		dbf	d7,loc_72B66
000A73C2 2A4B                       		movea.l	a3,a5
000A73C4 1D7C 0080 0024             		move.b	#$80,$24(a6)
000A73CA 1D7C 0028 0026             		move.b	#$28,$26(a6)
000A73D0 422E 0027                  		clr.b	$27(a6)
000A73D4 504F                       		addq.w	#8,sp
000A73D6 4E75                       		rts	
000A73D8                            ; ===========================================================================
000A73D8                            
000A73D8                            loc_72B9E:				; XREF: loc_72A64
000A73D8 1B5C 0002                  		move.b	(a4)+,2(a5)
000A73DC 4E75                       		rts	
000A73DE                            ; ===========================================================================
000A73DE                            
000A73DE                            loc_72BA4:				; XREF: loc_72A64
000A73DE 101C                       		move.b	(a4)+,d0
000A73E0 D12D 0009                  		add.b	d0,9(a5)
000A73E4 6000 0000                  		bra.w	sub_72CB4
000A73E8                            ; ===========================================================================
000A73E8                            
000A73E8                            loc_72BAE:				; XREF: loc_72A64
000A73E8 08D5 0004                  		bset	#4,(a5)
000A73EC 4E75                       		rts	
000A73EE                            ; ===========================================================================
000A73EE                            
000A73EE                            loc_72BB4:				; XREF: loc_72A64
000A73EE 1B54 0012                  		move.b	(a4),$12(a5)
000A73F2 1B5C 0013                  		move.b	(a4)+,$13(a5)
000A73F6 4E75                       		rts	
000A73F8                            ; ===========================================================================
000A73F8                            
000A73F8                            loc_72BBE:				; XREF: loc_72A64
000A73F8 101C                       		move.b	(a4)+,d0
000A73FA D12D 0008                  		add.b	d0,8(a5)
000A73FE 4E75                       		rts	
000A7400                            ; ===========================================================================
000A7400                            
000A7400                            loc_72BC6:				; XREF: loc_72A64
000A7400 1D54 0002                  		move.b	(a4),2(a6)
000A7404 1D5C 0001                  		move.b	(a4)+,1(a6)
000A7408 4E75                       		rts	
000A740A                            ; ===========================================================================
000A740A                            
000A740A                            loc_72BD0:				; XREF: loc_72A64
000A740A 41EE 0040                  		lea	$40(a6),a0
000A740E 101C                       		move.b	(a4)+,d0
000A7410 7230                       		moveq	#$30,d1
000A7412 740A                       		moveq	#10,d2				; MJ: extra channel
000A7414                            
000A7414                            loc_72BDA:
000A7414 1140 0002                  		move.b	d0,2(a0)
000A7418 D0C1                       		adda.w	d1,a0
000A741A 51CA FFF8                  		dbf	d2,loc_72BDA
000A741E                            
000A741E 4E75                       		rts	
000A7420                            ; ===========================================================================
000A7420                            
000A7420                            loc_72BE6:				; XREF: loc_72A64
000A7420 101C                       		move.b	(a4)+,d0
000A7422 D12D 0009                  		add.b	d0,9(a5)
000A7426 4E75                       		rts	
000A7428                            ; ===========================================================================
000A7428                            
000A7428                            loc_72BEE:				; XREF: loc_72A64
000A7428 422E 002C                  		clr.b	$2C(a6)
000A742C 4E75                       		rts	
000A742E                            ; ===========================================================================
000A742E                            
000A742E                            loc_72BF4:				; XREF: loc_72A64
000A742E 0895 0007                  		bclr	#7,(a5)
000A7432 0895 0004                  		bclr	#4,(a5)
000A7436 4EBA F98C                  		jsr	sub_726FE(pc)
000A743A 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000A743E 6B00                       		bmi.s	loc_72C22
000A7440 264D                       		movea.l	a5,a3
000A7442 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000A7446 226E 0018                  		movea.l	$18(a6),a1
000A744A 0895 0002                  		bclr	#2,(a5)
000A744E 08D5 0001                  		bset	#1,(a5)
000A7452 102D 000B                  		move.b	$B(a5),d0
000A7456 4EBA 0000                  		jsr	sub_72C4E(pc)
000A745A 2A4B                       		movea.l	a3,a5
000A745C                            
000A745C                            loc_72C22:
000A745C 504F                       		addq.w	#8,sp
000A745E 4E75                       		rts	
000A7460                            ; ===========================================================================
000A7460                            
000A7460                            loc_72C26:				; XREF: loc_72A64
000A7460 7000                       		moveq	#0,d0
000A7462 101C                       		move.b	(a4)+,d0
000A7464 1B40 000B                  		move.b	d0,$B(a5)
000A7468                            
000A7468                            SFM_UpdateVoice:
000A7468 0815 0002                  		btst	#2,(a5)
000A746C 6600 0000                  		bne.w	locret_72CAA
000A7470 4A2E 000E                  	tst.b	$0E(a6)
000A7474 6600                       	bne.s	locret_72CAA_2
000A7476 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A747A 6600                       	bne.s	locret_72CAA
000A747C                            
000A747C                            	locret_72CAA_2:
000A747C                            
000A747C 226E 0018                  		movea.l	$18(a6),a1
000A7480 4A2E 000E                  		tst.b	$E(a6)
000A7484 6700                       		beq.s	sub_72C4E
000A7486 226D 0020                  		movea.l	$20(a5),a1	; ERROR HERE...
000A748A 4A2E 000E                  		tst.b	$E(a6)
000A748E 6B00                       		bmi.s	sub_72C4E
000A7490 226E 0020                  		movea.l	$20(a6),a1
000A7494                            
000A7494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A7494                            
000A7494                            
000A7494                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000A7494 5340                       		subq.w	#1,d0
000A7496 6B00                       		bmi.s	loc_72C5C
000A7498 323C 0019                  		move.w	#$19,d1
000A749C                            
000A749C                            loc_72C56:
000A749C D2C1                       		adda.w	d1,a1
000A749E 51C8 FFFC                  		dbf	d0,loc_72C56
000A74A2                            
000A74A2                            loc_72C5C:
000A74A2 1219                       		move.b	(a1)+,d1
000A74A4 1B41 001F                  		move.b	d1,$1F(a5)
000A74A8 1801                       		move.b	d1,d4
000A74AA 103C 00B0                  		move.b	#$B0,d0
000A74AE 4EBA F950                  		jsr	sub_72722(pc)
000A74B2 45FA 0000                  		lea	byte_72D18(pc),a2
000A74B6 7613                       		moveq	#$13,d3
000A74B8                            
000A74B8                            loc_72C72:
000A74B8 101A                       		move.b	(a2)+,d0
000A74BA 1219                       		move.b	(a1)+,d1
000A74BC 4EBA F942                  		jsr	sub_72722(pc)
000A74C0 51CB FFF6                  		dbf	d3,loc_72C72
000A74C4 7A03                       		moveq	#3,d5
000A74C6 0244 0007                  		andi.w	#7,d4
000A74CA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000A74CE 162D 0009                  		move.b	9(a5),d3
000A74D2 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A74D6                            
000A74D6                            loc_72C8C:
000A74D6 101A                       		move.b	(a2)+,d0
000A74D8 1219                       		move.b	(a1)+,d1
000A74DA E20C                       		lsr.b	#1,d4
000A74DC 6400                       		bcc.s	loc_72C96
000A74DE D203                       		add.b	d3,d1
000A74E0                            
000A74E0                            loc_72C96:
000A74E0 4EBA F91E                  		jsr	sub_72722(pc)
000A74E4 51CD FFF0                  		dbf	d5,loc_72C8C
000A74E8 103C 00B4                  		move.b	#$B4,d0
000A74EC 122D 000A                  		move.b	$A(a5),d1
000A74F0 4EBA F90E                  		jsr	sub_72722(pc)
000A74F4                            
000A74F4                            locret_72CAA:
000A74F4 4E75                       		rts	
000A74F6                            ; End of function sub_72C4E
000A74F6                            
000A74F6                            ; ===========================================================================
000A74F6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000A74FE                            
000A74FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000A74FE                            
000A74FE                            
000A74FE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000A74FE 0815 0002                  		btst	#2,(a5)
000A7502 6600                       		bne.s	locret_72D16
000A7504                            
000A7504 4A2E 000E                  	tst.b	$0E(a6)
000A7508 6600                       	bne.s	locret_72D16_2
000A750A 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A750E 6600                       	bne.s	locret_72D16
000A7510                            
000A7510                            	locret_72D16_2:
000A7510 7000                       		moveq	#0,d0
000A7512 102D 000B                  		move.b	$B(a5),d0
000A7516 226E 0018                  		movea.l	$18(a6),a1
000A751A 4A2E 000E                  		tst.b	$E(a6)
000A751E 6700                       		beq.s	loc_72CD8
000A7520 226D 0020                  		movea.l	$20(a5),a1
000A7524 4A2E 000E                  		tst.b	$E(a6)
000A7528 6B00                       		bmi.s	loc_72CD8
000A752A 226E 0020                  		movea.l	$20(a6),a1
000A752E                            
000A752E                            loc_72CD8:
000A752E 5340                       		subq.w	#1,d0
000A7530 6B00                       		bmi.s	loc_72CE6
000A7532 323C 0019                  		move.w	#$19,d1
000A7536                            
000A7536                            loc_72CE0:
000A7536 D2C1                       		adda.w	d1,a1
000A7538 51C8 FFFC                  		dbf	d0,loc_72CE0
000A753C                            
000A753C                            loc_72CE6:
000A753C D2FC 0015                  		adda.w	#$15,a1
000A7540 45FA 0000                  		lea	byte_72D2C(pc),a2
000A7544 102D 001F                  		move.b	$1F(a5),d0
000A7548 0240 0007                  		andi.w	#7,d0
000A754C 183B 00A8                  		move.b	byte_72CAC(pc,d0.w),d4
000A7550 162D 0009                  		move.b	9(a5),d3
000A7554 D62E 0016                  	add.b	$16(a6),d3			; EXTRA
000A7558 6B00                       		bmi.s	locret_72D16
000A755A 7A03                       		moveq	#3,d5
000A755C                            
000A755C                            loc_72D02:
000A755C 101A                       		move.b	(a2)+,d0
000A755E 1219                       		move.b	(a1)+,d1
000A7560 E20C                       		lsr.b	#1,d4
000A7562 6400                       		bcc.s	loc_72D12
000A7564 D203                       		add.b	d3,d1
000A7566 6500                       		bcs.s	loc_72D12
000A7568 4EBA F896                  		jsr	sub_72722(pc)
000A756C                            
000A756C                            loc_72D12:
000A756C 51CD FFEE                  		dbf	d5,loc_72D02
000A7570                            
000A7570                            locret_72D16:
000A7570 4E75                       		rts	
000A7572                            ; End of function sub_72CB4
000A7572                            
000A7572                            ; ===========================================================================
000A7572 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000A757C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000A7586 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000A758A                            ; ===========================================================================
000A758A                            
000A758A                            loc_72D30:				; XREF: loc_72A64
000A758A 08D5 0003                  		bset	#3,(a5)
000A758E 2B4C 0014                  		move.l	a4,$14(a5)
000A7592 1B5C 0018                  		move.b	(a4)+,$18(a5)
000A7596 1B5C 0019                  		move.b	(a4)+,$19(a5)
000A759A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000A759E 101C                       		move.b	(a4)+,d0
000A75A0 E208                       		lsr.b	#1,d0
000A75A2 1B40 001B                  		move.b	d0,$1B(a5)
000A75A6 426D 001C                  		clr.w	$1C(a5)
000A75AA 4E75                       		rts	
000A75AC                            ; ===========================================================================
000A75AC                            
000A75AC                            loc_72D52:				; XREF: loc_72A64
000A75AC 08D5 0003                  		bset	#3,(a5)
000A75B0 206D 0014                  		movea.l	$14(a5),a0				; CHG: load modulation address
000A75B4 43ED 0018                  		lea	$18(a5),a1				; CHG: load modulation settings RAM
000A75B8 12D8                       		move.b	(a0)+,(a1)+				; CHG: reset settings...
000A75BA 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A75BC 12D8                       		move.b	(a0)+,(a1)+				; CHG: ''
000A75BE 1018                       		move.b	(a0)+,d0				; CHG: ''
000A75C0 E208                       		lsr.b	#$01,d0					; CHG: ''
000A75C2 12C0                       		move.b	d0,(a1)+				; CHG: ''
000A75C4 4259                       		clr.w	(a1)+					; CHG: clear modulation frequency
000A75C6 4E75                       		rts	
000A75C8                            ; ===========================================================================
000A75C8                            
000A75C8                            loc_72D58:				; XREF: loc_72A64
000A75C8 0895 0007                  		bclr	#7,(a5)
000A75CC 0895 0004                  		bclr	#4,(a5)
000A75D0 4A2D 0001                  		tst.b	1(a5)
000A75D4 6B00                       		bmi.s	loc_72D74
000A75D6 4A2E 0008                  		tst.b	8(a6)
000A75DA 6B00 0000                  		bmi.w	SF2_MutePCM				; CHG: for PCM, branch to a differen mute routine
000A75DE 4EBA F7E4                  		jsr	sub_726FE(pc)
000A75E2 6000                       		bra.s	loc_72D78
000A75E4                            ; ===========================================================================
000A75E4                            
000A75E4                            loc_72D74:
000A75E4 4EBA FB50                  		jsr	sub_729A0(pc)
000A75E8                            
000A75E8                            loc_72D78:
000A75E8 4A2E 000E                  		tst.b	$E(a6)
000A75EC 6A00 0000                  		bpl.w	loc_72E02
000A75F0 4216                       		clr.b	0(a6)
000A75F2 7000                       		moveq	#0,d0
000A75F4 102D 0001                  		move.b	1(a5),d0
000A75F8 6B00                       		bmi.s	loc_72DCC
000A75FA 41FA F250                  		lea	dword_722CC(pc),a0
000A75FE 264D                       		movea.l	a5,a3
000A7600 0C00 0004                  		cmpi.b	#4,d0
000A7604 6600                       		bne.s	loc_72DA8
000A7606 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000A760A 6A00                       		bpl.s	loc_72DA8
000A760C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000A7610 226E 0020                  		movea.l	$20(a6),a1
000A7614 6000                       		bra.s	loc_72DB8
000A7616                            ; ===========================================================================
000A7616                            
000A7616                            loc_72DA8:
000A7616 5500                       		subq.b	#2,d0
000A7618 E508                       		lsl.b	#2,d0
000A761A 2A70 0000                  		movea.l	(a0,d0.w),a5
000A761E 4A15                       		tst.b	(a5)
000A7620 6A00                       		bpl.s	loc_72DC8
000A7622 226E 0018                  		movea.l	$18(a6),a1
000A7626                            
000A7626                            loc_72DB8:
000A7626 0895 0002                  		bclr	#2,(a5)
000A762A 08D5 0001                  		bset	#1,(a5)
000A762E 102D 000B                  		move.b	$B(a5),d0
000A7632 4EBA FE60                  		jsr	sub_72C4E(pc)
000A7636                            
000A7636                            loc_72DC8:
000A7636 2A4B                       		movea.l	a3,a5
000A7638 6000                       		bra.s	loc_72E02
000A763A                            ; ===========================================================================
000A763A                            
000A763A                            loc_72DCC:
000A763A 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000A763E 4A10                       		tst.b	(a0)
000A7640 6A00                       		bpl.s	loc_72DE0
000A7642 0C00 00E0                  		cmpi.b	#$E0,d0
000A7646 6700                       		beq.s	loc_72DEA
000A7648 0C00 00C0                  		cmpi.b	#$C0,d0
000A764C 6700                       		beq.s	loc_72DEA
000A764E                            
000A764E                            loc_72DE0:
000A764E 41FA F1FC                  		lea	dword_722CC(pc),a0
000A7652 E608                       		lsr.b	#3,d0
000A7654 2070 0000                  		movea.l	(a0,d0.w),a0
000A7658                            
000A7658                            loc_72DEA:
000A7658 0890 0002                  		bclr	#2,(a0)
000A765C 08D0 0001                  		bset	#1,(a0)
000A7660 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000A7666 6600                       		bne.s	loc_72E02
000A7668 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000A7670                            
000A7670                            loc_72E02:
000A7670 504F                       		addq.w	#$04*2,sp					; CHG: skip return addresses (returns back outside of the sound driver)
000A7672 4E75                       		rts	
000A7674                            
000A7674                            SF2_MutePCM:
000A7674 584F                       		addq.w	#4,sp						; CHG: go back, but not out of sound driver
000A7676 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)					; CHG: is this PCM 1?
000A767C 6600                       		bne.s	SF2_MutePCM2					; CHG: if not, branch to mute PCM 2
000A767E 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A7684 43F9 00A0 0C69             		lea	($A00000+PCM1_Sample).l,a1			; CHG: load PCM 1 slot address
000A768A 33FC 0100 00A1 1100 0839+  		StopZ80
000A769C 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A769E 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76A0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76A2 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A76A4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76A6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76A8 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A76AA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76AC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76AE 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A76B0 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76B2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76B4 13FC 00DA 00A0 064E        		move.b	#%11011010,($A00000+PCM1_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A76BC 33FC 0000 00A1 1100        		StartZ80
000A76C4 4E75                       		rts							; CHG: return
000A76C6                            
000A76C6                            SF2_MutePCM2:
000A76C6 41F9 0000 0000             		lea	(StopSample).l,a0				; CHG: load stop sample address
000A76CC 43F9 00A0 0C75             		lea	($A00000+PCM2_Sample).l,a1			; CHG: load PCM 1 slot address
000A76D2 33FC 0100 00A1 1100 0839+  		StopZ80
000A76E4 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A76E6 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76E8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76EA 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A76EC 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76EE 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76F0 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of sample
000A76F2 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76F4 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76F6 12D8                       		move.b	(a0)+,(a1)+					; CHG: set address of reverse sample
000A76F8 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76FA 12D8                       		move.b	(a0)+,(a1)+					; CHG: ''
000A76FC 13FC 00DA 00A0 0651        		move.b	#%11011010,($A00000+PCM2_NewRET).l		; CHG: change "JP Nc" to "JP c"
000A7704 33FC 0000 00A1 1100        		StartZ80
000A770C 4E75                       		rts							; CHG: return
000A770E                            
000A770E                            ; ===========================================================================
000A770E                            
000A770E                            loc_72E06:				; XREF: loc_72A64
000A770E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000A7714 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000A7718 0815 0002                  		btst	#2,(a5)
000A771C 6600                       		bne.s	locret_72E1E 
000A771E 4A2E 000E                  	tst.b	$0E(a6)
000A7722 6600                       	bne.s	locret_72E1E_2
000A7724 4A2D 0022                  	tst.b	$22(a5)				; EXTRA - ON/OFF
000A7728 6600                       	bne.s	locret_72E1E 
000A772A                            
000A772A                            	locret_72E1E_2:
000A772A 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000A772E 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000A7734 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000A7738 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000A773C 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000A773E 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000A7746                            
000A7746                            locret_72E1E:
000A7746 4E75                       		rts	
000A7748                            ; ===========================================================================
000A7748                            
000A7748                            loc_72E20:				; XREF: loc_72A64
000A7748 0895 0003                  		bclr	#3,(a5)
000A774C 4E75                       		rts	
000A774E                            ; ===========================================================================
000A774E                            
000A774E                            loc_72E26:				; XREF: loc_72A64
000A774E 1B5C 000B                  		move.b	(a4)+,$B(a5)
000A7752 4E75                       		rts	
000A7754                            ; ===========================================================================
000A7754                            
000A7754                            loc_72E2C:				; XREF: loc_72A64
000A7754 101C                       		move.b	(a4)+,d0
000A7756 E148                       		lsl.w	#8,d0
000A7758 101C                       		move.b	(a4)+,d0
000A775A D8C0                       		adda.w	d0,a4
000A775C 534C                       		subq.w	#1,a4
000A775E 4E75                       		rts	
000A7760                            ; ===========================================================================
000A7760                            
000A7760                            loc_72E38:				; XREF: loc_72A64
000A7760 7000                       		moveq	#0,d0
000A7762 101C                       		move.b	(a4)+,d0
000A7764 121C                       		move.b	(a4)+,d1
000A7766 4A35 0024                  		tst.b	$24(a5,d0.w)
000A776A 6600                       		bne.s	loc_72E48
000A776C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000A7770                            
000A7770                            loc_72E48:
000A7770 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000A7774 66DE                       		bne.s	loc_72E2C
000A7776 544C                       		addq.w	#2,a4
000A7778 4E75                       		rts	
000A777A                            ; ===========================================================================
000A777A                            
000A777A                            loc_72E52:				; XREF: loc_72A64
000A777A 7000                       		moveq	#0,d0
000A777C 102D 000D                  		move.b	$D(a5),d0
000A7780 5900                       		subq.b	#4,d0
000A7782 2B8C 0000                  		move.l	a4,(a5,d0.w)
000A7786 1B40 000D                  		move.b	d0,$D(a5)
000A778A 60C8                       		bra.s	loc_72E2C
000A778C                            ; ===========================================================================
000A778C                            
000A778C                            loc_72E64:				; XREF: loc_72A64
000A778C 103C 0088                  		move.b	#$88,d0
000A7790 123C 000F                  		move.b	#$F,d1
000A7794 4EBA F676                  		jsr	sub_7272E(pc)
000A7798 103C 008C                  		move.b	#$8C,d0
000A779C 123C 000F                  		move.b	#$F,d1
000A77A0 6000 F66A                  		bra.w	sub_7272E
000A77A4                            ; ===========================================================================
000A77A4                            Music81:	incbin	sound\music81.bin
000A7F82 00                         		even
000A7F82                            Music82:	incbin	sound\music82.bin
000A84B0 00                         		even
000A84B0                            Music83:	incbin	sound\music83.bin
000A892A 00                         		even
000A892A                            Music84:	incbin	sound\music84.bin
000A8DA8 00                         		even
000A8DA8                            Music85:	incbin	sound\music85.bin
000A9300 00                         		even
000A9300                            Music86:	incbin	sound\music86.bin
000A9A34                            		even
000A9A34                            Music87:	incbin	sound\music87.bin
000A9CDA 00                         		even
000A9CDA                            Music88:	incbin	sound\music88.bin
000A9DE6 00                         		even
000A9DE6                            Music89:	incbin	sound\music89.bin
000AA11A 00                         		even
000AA11A                            Music8A:	incbin	sound\music8A.bin
000AA332                            		even
000AA332                            Music8B:	incbin	sound\music8B.bin
000AA65E                            		even
000AA65E                            Music8C:	incbin	sound\music8C.bin
000AA91C 00                         		even
000AA91C                            Music8D:	incbin	sound\music8D.bin
000AABBE                            		even
000AABBE                            Music8E:	incbin	sound\music8E.bin
000AAD54 00                         		even
000AAD54                            Music8F:	incbin	sound\music8F.bin
000AAEB6 00                         		even
000AAEB6                            Music90:	incbin	sound\music90.bin
000AB036 00                         		even
000AB036                            Music91:	incbin	sound\music91.bin
000AC65E 00                         		even
000AC65E                            Music92:	incbin	sound\music92.bin
000AC7A6 00                         		even
000AC7A6                            Music93:	incbin	sound\music93.bin
000AC87E 00                         		even
000AC87E                            ; ---------------------------------------------------------------------------
000AC87E                            ; Sound	effect pointers
000AC87E                            ; ---------------------------------------------------------------------------
000AC87E 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000AC88A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000AC896 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000AC8A2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000AC8AE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000AC8BA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000AC8C6 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000AC8D2 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000AC8DE 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000AC8EA 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000AC8F6 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000AC902 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000AC90E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000AC91A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000AC926 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000AC932 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000AC93E 0000 0000                  SoundD0Index:	dc.l SoundD0
000AC942                            SoundA0:	incbin	sound\soundA0.bin
000AC958                            		even
000AC958                            SoundA1:	incbin	sound\soundA1.bin
000AC982                            		even
000AC982                            SoundA2:	incbin	sound\soundA2.bin
000AC9A2                            		even
000AC9A2                            SoundA3:	incbin	sound\soundA3.bin
000AC9D4                            		even
000AC9D4                            SoundA4:	incbin	sound\soundA4.bin
000ACA0A                            		even
000ACA0A                            SoundA5:	incbin	sound\soundA5.bin
000ACA36                            		even
000ACA36                            SoundA6:	incbin	sound\soundA6.bin
000ACA66                            		even
000ACA66                            SoundA7:	incbin	sound\soundA7.bin
000ACA96                            		even
000ACA96                            SoundA8:	incbin	sound\soundA8.bin
000ACACA                            		even
000ACACA                            SoundA9:	incbin	sound\soundA9.bin
000ACADC                            		even
000ACADC                            SoundAA:	incbin	sound\soundAA.bin
000ACB1E                            		even
000ACB1E                            SoundAB:	incbin	sound\soundAB.bin
000ACB3E                            		even
000ACB3E                            SoundAC:	incbin	sound\soundAC.bin
000ACB72                            		even
000ACB72                            SoundAD:	incbin	sound\soundAD.bin
000ACBA8                            		even
000ACBA8                            SoundAE:	incbin	sound\soundAE.bin
000ACBF2                            		even
000ACBF2                            SoundAF:	incbin	sound\soundAF.bin
000ACC20                            		even
000ACC20                            SoundB0:	incbin	sound\soundB0.bin
000ACC52                            		even
000ACC52                            SoundB1:	incbin	sound\soundB1.bin
000ACC7E                            		even
000ACC7E                            SoundB2:	incbin	sound\soundB2.bin
000ACCCE                            		even
000ACCCE                            SoundB3:	incbin	sound\soundB3.bin
000ACD18                            		even
000ACD18                            SoundB4:	incbin	sound\soundB4.bin
000ACD74                            		even
000ACD74                            SoundB5:	incbin	sound\soundB5.bin
000ACDA2                            		even
000ACDA2                            SoundB6:	incbin	sound\soundB6.bin
000ACDC0                            		even
000ACDC0                            SoundB7:	incbin	sound\soundB7.bin
000ACDFC                            		even
000ACDFC                            SoundB8:	incbin	sound\soundB8.bin
000ACE1A                            		even
000ACE1A                            SoundB9:	incbin	sound\soundB9.bin
000ACE7E                            		even
000ACE7E                            SoundBA:	incbin	sound\soundBA.bin
000ACEA6                            		even
000ACEA6                            SoundBB:	incbin	sound\soundBB.bin
000ACED2                            		even
000ACED2                            SoundBC:	incbin	sound\soundBC.bin
000ACF14                            		even
000ACF14                            SoundBD:	incbin	sound\soundBD.bin
000ACF68                            		even
000ACF68                            SoundBE:	incbin	sound\soundBE.bin
000ACFA2                            		even
000ACFA2                            SoundBF:	incbin	sound\soundBF.bin
000AD014                            		even
000AD014                            SoundC0:	incbin	sound\soundC0.bin
000AD042                            		even
000AD042                            SoundC1:	incbin	sound\soundC1.bin
000AD07C                            		even
000AD07C                            SoundC2:	incbin	sound\soundC2.bin
000AD0A6                            		even
000AD0A6                            SoundC3:	incbin	sound\soundC3.bin
000AD120                            		even
000AD120                            SoundC4:	incbin	sound\soundC4.bin
000AD148                            		even
000AD148                            SoundC5:	incbin	sound\soundC5.bin
000AD1B0                            		even
000AD1B0                            SoundC6:	incbin	sound\soundC6.bin
000AD1F2                            		even
000AD1F2                            SoundC7:	incbin	sound\soundC7.bin
000AD220                            		even
000AD220                            SoundC8:	incbin	sound\soundC8.bin
000AD232                            		even
000AD232                            SoundC9:	incbin	sound\soundC9.bin
000AD260                            		even
000AD260                            SoundCA:	incbin	sound\soundCA.bin
000AD28E                            		even
000AD28E                            SoundCB:	incbin	sound\soundCB.bin
000AD2DA                            		even
000AD2DA                            SoundCC:	incbin	sound\soundCC.bin
000AD314                            		even
000AD314                            SoundCD:	incbin	sound\soundCD.bin
000AD322                            		even
000AD322                            SoundCE:	incbin	sound\soundCE.bin
000AD350                            		even
000AD350                            SoundCF:	incbin	sound\soundCF.bin
000AD388                            		even
000AD388                            SoundD0:	incbin	sound\soundD0.bin
000AD3C2                            		even
000AD3C2                            SegaPCM:	incbin	"Dual PCM\Samples\incswf\Sega.swf",$3A
000B3208                            SegaPCM_End:	even
000B3208                            
000B3208                            ; ===========================================================================
000B3208                            ; ---------------------------------------------------------------------------
000B3208                            ; Z80 ROM address
000B3208                            ; ---------------------------------------------------------------------------
000B3208                            
000B3208                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000B4D40 00                         Z80ROM_End:	even
000B4D40                            
000B4D40                            ; ===========================================================================
000B4D40                            ; ---------------------------------------------------------------------------
000B4D40                            ; Sample 68k PCM list
000B4D40                            ; ---------------------------------------------------------------------------
000B4D40                            ; SampleList:
000B4D40                            		include	"Dual PCM\Samples.asm"
000B4D40                            ; ===========================================================================
000B4D40                            ; ---------------------------------------------------------------------------
000B4D40                            ; Sample 68k PCM list
000B4D40                            ; ---------------------------------------------------------------------------
000B4D40                            
000B4D40                            SampleList:
000B4D40                            
000B4D40                            	; --- Sonic 1 Samples ---
000B4D40                            
000B4D40 0000 0000                  		dc.l	Sonic1Kick			; 00
000B4D44 0000 0000                  		dc.l	Sonic1Snare			; 01
000B4D48 0000 0000                  		dc.l	Sonic1Timpani		; 02
000B4D4C 0000 0000                  		dc.l	SonimeDies			; 03
000B4D50 0000 0000                  		dc.l	SonimeFrustrated	; 04
000B4D54 0000 0000                  		dc.l	SonimeHappy			; 05
000B4D58 0000 0000                  		dc.l	SonimeHappy2		; 06
000B4D5C 0000 0000                  		dc.l	SonimeHurt			; 07
000B4D60 0000 0000                  		dc.l	SonimeImpatient		; 08
000B4D64 0000 0000                  		dc.l	SonimeInvincibility	; 09
000B4D68 0000 0000                  		dc.l	SonimeSpikey	; 0A
000B4D6C 0000 0000                  		dc.l	SonimeSpeed	; 0B
000B4D70                            		
000B4D70                            ; ---------------------------------------------------------------------------
000B4D70                            ; Sample z80 pointers
000B4D70                            ; ---------------------------------------------------------------------------
000B4D70 =000036B0                  Sec	=	14000	; Hz per second
000B4D70 =000003E8                  Mil	=	1000	; centi-seconds per second
000B4D70                            
000B4D70                            	; --- Stop Sample (used by note 80) ---
000B4D70                            
000B4D70 0000 0000 0000 0000 0000+  StopSample:				dcz80	SWF_StopSample,		SWF_StopSample_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4D7C                            
000B4D7C                            	; --- Sonic 1 Samples ---
000B4D7C                            
000B4D7C 0000 0000 0000 0000 0000+  Sonic1Kick:				dcz80	SWF_S1_Kick,		SWF_S1_Kick_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4D88 0000 0000 0000 0000 0000+  Sonic1Snare:			dcz80	SWF_S1_Snare,		SWF_S1_Snare_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4D94 0000 0000 0000 0000 0000+  Sonic1Timpani:			dcz80	SWF_S1_Timpani,		SWF_S1_Timpani,			SWF_StopSample,		SWF_StopSample_Rev
000B4DA0 0000 0000 0000 0000 0000+  SonimeDies:				dcz80	SWF_Dies,			SWF_Dies_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4DAC 0000 0000 0000 0000 0000+  SonimeFrustrated:		dcz80	SWF_Frustrated,		SWF_Frustrated_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4DB8 0000 0000 0000 0000 0000+  SonimeHappy:			dcz80	SWF_Happy,			SWF_Happy_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4DC4 0000 0000 0000 0000 0000+  SonimeHappy2:			dcz80	SWF_Happy2,			SWF_Happy2_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4DD0 0000 0000 0000 0000 0000+  SonimeHurt:				dcz80	SWF_Hurt,			SWF_Hurt_Rev,			SWF_StopSample,		SWF_StopSample_Rev
000B4DDC 0000 0000 0000 0000 0000+  SonimeImpatient:		dcz80	SWF_Impatient,		SWF_Impatient_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4DE8 0000 0000 0000 0000 0000+  SonimeInvincibility:	dcz80	SWF_Invincibility,	SWF_Invincibility_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B4DF4 0000 0000 0000 0000 0000+  SonimeSpikey:	dcz80	SWF_Spikey,	SWF_Spikey_Rev,	SWF_StopSample,		SWF_StopSample_Rev
000B4E00 0000 0000 0000 0000 0000+  SonimeSpeed:		dcz80	SWF_Speed,		SWF_Speed_Rev,		SWF_StopSample,		SWF_StopSample_Rev
000B4E0C                            ; ---------------------------------------------------------------------------
000B4E0C                            ; Sample file includes
000B4E0C                            ; ---------------------------------------------------------------------------
000B4E0C                            			align	$8000,$FF
000B8000                            ; ---------------------------------------------------------------------------
000B8000                            
000B8000                            	; --- Volume tables ---
000B8000                            
000B8000                            PCM_Volumes:		incbin	"Dual PCM\Volume Maker\Volumes.bin"
000C0000                            
000C0000                            	; --- Stop Sample (used by note 80) ---
000C0000                            
000C0000                            			EndMarker
000C0198                            SWF_StopSample:		dcb.b	$8000-((Z80E_Read*(($1000+$100)/$100))*2),$80
000C7E68                            SWF_StopSample_Rev:	EndMarker
000C8000                            
000C8000                            	; --- Sonic 1 Samples ---
000C8000                            
000C8000                            SWF_S1_Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
000C8894                            SWF_S1_Kick_Rev:	EndMarker
000C8A2C                            SWF_S1_Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
000C9303                            SWF_S1_Snare_Rev:	EndMarker
000C949B                            SWF_S1_Timpani:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani.swf"
000CC41F                            SWF_S1_Timpani_Rev:	EndMarker
000CC5B7                            SWF_Dies:			incbin	"Dual PCM\Samples\incswf\dies.swf"
000D0D24                            SWF_Dies_Rev:		EndMarker
000D0EBC                            SWF_Frustrated:		incbin	"Dual PCM\Samples\incswf\frustrated.swf"
000D8283                            SWF_Frustrated_Rev:	EndMarker
000D841B                            SWF_Happy:			incbin	"Dual PCM\Samples\incswf\happy.swf"
000DF3D3                            SWF_Happy_Rev:		EndMarker
000DF56B                            SWF_Happy2:			incbin	"Dual PCM\Samples\incswf\happy 2.swf"
000ECBB7                            SWF_Happy2_Rev:		EndMarker
000ECD4F                            SWF_Hurt:			incbin	"Dual PCM\Samples\incswf\hurt.swf"
000EF942                            SWF_Hurt_Rev:		EndMarker
000EFADA                            SWF_Impatient:		incbin	"Dual PCM\Samples\incswf\impatient.swf"
000F922E                            SWF_Impatient_Rev:	EndMarker
000F93C6                            SWF_Invincibility:	incbin	"Dual PCM\Samples\incswf\invincibility.swf"
001107C1                            SWF_Invincibility_Rev:	EndMarker
00110959                            SWF_Spikey:	incbin	"Dual PCM\Samples\incswf\spikey.swf"
00114934                            SWF_Spikey_Rev:	EndMarker
00114ACC                            SWF_Speed:	incbin	"Dual PCM\Samples\incswf\goingatsupersonicspeed.swf"
0011F331                            SWF_Speed_Rev:	EndMarker
0011F4C9                            ; ===========================================================================
0011F4C9                            ; ===========================================================================
0011F4CA 00                         		even
0011F4CA                            
0011F4CA                            ; ===========================================================================
0011F4CA                            
0011F4CA                            SHC2021:    incbin "SHC21_Lite_Sonic12.bin"
0012572E                                        even
0012572E                            
0012572E                            ; ===============================================================
0012572E                            ; ---------------------------------------------------------------
0012572E                            ; Error handling module
0012572E                            ; ---------------------------------------------------------------
0012572E                            
0012572E 4EBA 0000                  BusError:	jsr	ErrorHandler(pc)
00125732 4255 5320 4552 524F 5200   		dc.b	"BUS ERROR",0			; text
0012573C 01                         		dc.b	1				; extended stack frame
0012573E 00                         		even
0012573E                            
0012573E 4EBA 0000                  AddressError:	jsr	ErrorHandler(pc)
00125742 4144 4452 4553 5320 4552+  		dc.b	"ADDRESS ERROR",0		; text
00125750 01                         		dc.b	1				; extended stack frame
00125752 00                         		even
00125752                            
00125752 4EBA 0000                  IllegalInstr:	jsr	ErrorHandler(pc)
00125756 494C 4C45 4741 4C20 494E+  		dc.b	"ILLEGAL INSTRUCTION",0		; text
0012576A 00                         		dc.b	0				; extended stack frame
0012576C 00                         		even
0012576C                            
0012576C 4EBA 0000                  ZeroDivide:	jsr	ErrorHandler(pc)
00125770 5A45 524F 2044 4956 4944+  		dc.b	"ZERO DIVIDE",0  		; text
0012577C 00                         		dc.b	0				; extended stack frame
0012577E 00                         		even
0012577E                            
0012577E 4EBA 0000                  ChkInstr:	jsr	ErrorHandler(pc)
00125782 4348 4B20 494E 5354 5255+  		dc.b	"CHK INSTRUCTION",0  		; text
00125792 00                         		dc.b	0				; extended stack frame
00125794 00                         		even
00125794                            
00125794 4EBA 0000                  TrapvInstr:	jsr	ErrorHandler(pc)
00125798 5452 4150 5620 494E 5354+  		dc.b	"TRAPV INSTRUCTION",0  		; text
001257AA 00                         		dc.b	0				; extended stack frame
001257AC 00                         		even
001257AC                            
001257AC 4EBA 0000                  PrivilegeViol:	jsr	ErrorHandler(pc)
001257B0 5052 4956 494C 4547 4520+  		dc.b	"PRIVILEGE VIOLATION",0  	; text
001257C4 00                         		dc.b	0				; extended stack frame
001257C6 00                         		even
001257C6                            
001257C6 4EBA 0000                  Trace:		jsr	ErrorHandler(pc)
001257CA 5452 4143 4500             		dc.b	"TRACE",0 	  		; text
001257D0 00                         		dc.b	0				; extended stack frame
001257D2 00                         		even
001257D2                            
001257D2 4EBA 0000                  Line1010Emu:	jsr	ErrorHandler(pc)
001257D6 4C49 4E45 2031 3031 3020+  		dc.b	"LINE 1010 EMULATOR",0  	; text
001257E9 00                         		dc.b	0				; extended stack frame
001257EA                            		even
001257EA                            
001257EA 4EBA 0000                  Line1111Emu:	jsr	ErrorHandler(pc)
001257EE 4C49 4E45 2031 3131 3120+  		dc.b	"LINE 1111 EMULATOR",0  	; text
00125801 00                         		dc.b	0				; extended stack frame
00125802                            		even
00125802                            
00125802 4EBA 0000                  ErrorExcept:	jsr	ErrorHandler(pc)
00125806 4552 524F 5220 4558 4345+  		dc.b	"ERROR EXCEPTION",0    		; text
00125816 00                         		dc.b	0				; extended stack frame
00125818 00                         		even
00125818                            
00125818                            ErrorHandler:	incbin	"ErrorHandler.bin"
0012722C                            
0012722C                            ; end of 'ROM'
0012722C                            EndOfRom:
0012722C                            
0012722C                            
